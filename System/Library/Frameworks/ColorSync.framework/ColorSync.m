CFTypeID ColorSyncProfileGetTypeID(void)
{
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  return ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID;
}

uint64_t compare_names(_QWORD *a1, _QWORD *a2)
{
  if (*a1 > *a2)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

void tagSignatureAppender(const void *a1, uint64_t a2, __CFArray *a3)
{
  if (a1)
  {
    if (CFEqual(a1, CFSTR("iccHeader")) != 1)
      CFArrayAppendValue(a3, a1);
  }
}

uint64_t tagValueComparer(uint64_t result, CFTypeRef cf1, uint64_t a3)
{
  uint64_t v4;

  if (!*(_QWORD *)(a3 + 8))
  {
    v4 = result;
    result = CFEqual(cf1, *(CFTypeRef *)a3);
    if ((_DWORD)result)
      *(_QWORD *)(a3 + 8) = v4;
  }
  return result;
}

uint64_t ColorSyncTRCGetTypeID()
{
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  return ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID;
}

double tagReferenceAdder(const __CFString *key, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFString *Value;
  CFTypeID v6;
  double result;
  UInt8 *MutableBytePtr;
  unsigned int FourCharCodeFromSignature;
  uint64_t v10;
  uint64_t v11;
  UInt8 *v12;
  unsigned int v13;
  UInt8 *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  UInt8 *v18;

  v3 = *(const __CFDictionary **)(a2 + 8);
  if (v3)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v3, key);
    v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)a2);
      FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(Value);
      v10 = *(_QWORD *)(a2 + 24);
      if (v10)
      {
        v11 = 0;
        v12 = MutableBytePtr + 132;
        v13 = bswap32(FourCharCodeFromSignature);
        v14 = v12;
        while (1)
        {
          v15 = *(_DWORD *)v14;
          v14 += 12;
          if (v13 == v15)
            break;
          if (v10 == ++v11)
            return result;
        }
        v16 = ColorSyncGetFourCharCodeFromSignature(key);
        v17 = *(_QWORD *)(a2 + 24);
        v18 = &v12[12 * v17];
        *(_DWORD *)v18 = bswap32(v16);
        result = *(double *)&v12[12 * v11 + 4];
        *(double *)(v18 + 4) = result;
        *(_QWORD *)(a2 + 24) = v17 + 1;
      }
    }
  }
  return result;
}

ColorSyncProfile *ColorSyncMakeProfile(CFTypeRef cf)
{
  CFTypeID v2;
  const __CFString *Value;
  const __CFString *v4;
  CFTypeID v5;
  CFIndex Length;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  unsigned int v13;
  tm *v14;
  int v15;
  unint64_t v16;
  CFTypeID v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFTypeID v20;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  ColorSyncProfile *v28;
  ColorSyncProfile *v29;
  const __CFNumber *v30;
  uint64_t v31;
  const __CFData *v32;
  const UInt8 *BytePtr;
  const __CFNumber *v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  const __CFData *v40;
  const UInt8 *v41;
  void (*v42)(float *, float *, float *, uint64_t);
  ColorSyncProfile *v43;
  ColorSyncProfile *DisplayRGB;
  ColorSyncProfile *v45;
  char v46;
  const __CFAllocator *v47;
  const __CFData *v48;
  const __CFData *v49;
  const __CFString *v50;
  const __CFString *v51;
  __CFString *v52;
  __CFString *v53;
  CFTypeID v54;
  CFTypeID v56;
  size_t v57;
  const __CFData *v58;
  const void *v59;
  CFTypeID v60;
  CFDictionaryRef v61;
  size_t v62;
  __CFString *v63;
  CFDictionaryRef v64;
  CFDictionaryRef v65;
  const __CFNumber *v66;
  const __CFData *v67;
  const __CFData *v68;
  void *values;
  UInt8 v70[4];
  _BYTE v71[204];
  _BYTE bytes[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[48];
  __int128 buffer;
  __int128 v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v76 = *(_OWORD *)"lppa";
  memset(&v76[16], 0, 32);
  *(_OWORD *)&bytes[16] = *(_OWORD *)algn_18B3EAC5C;
  v73 = xmmword_18B3EAC6C;
  v74 = *(_OWORD *)"LPPA";
  v75 = xmmword_18B3EAC8C;
  *(_OWORD *)bytes = xmmword_18B3EAC4C;
  memset(v71, 0, sizeof(v71));
  *(_DWORD *)v70 = 1954047348;
  if (!cf)
    goto LABEL_15;
  v2 = CFGetTypeID(cf);
  if (v2 != CFDictionaryGetTypeID())
    goto LABEL_15;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("profileVersion"));
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(v4);
      v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      if (v7 <= 0x1F)
      {
        buffer = 0u;
        v78 = 0u;
        if (CFStringGetCString(v4, (char *)&buffer, v7, 0x8000100u) == 1)
        {
          v8 = strchr((char *)&buffer, 46);
          v9 = v8;
          if (v8)
          {
            v10 = strchr(v8 + 1, 46);
            if (v10)
            {
              v11 = v10;
              v12 = atoi(v10 + 1);
              *v11 = 0;
            }
            else
            {
              v12 = 0;
            }
            v46 = atoi(v9 + 1);
            *v9 = 0;
            LODWORD(v9) = 16 * v46;
          }
          else
          {
            v12 = 0;
          }
          v13 = (v9 | (atoi((const char *)&buffer) << 8) | v12 & 0xF) << 16;
          goto LABEL_16;
        }
      }
LABEL_15:
      v13 = 34603008;
      goto LABEL_16;
    }
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("paraR")))
    goto LABEL_15;
  v13 = 34603008;
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("paraG")))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("paraB")))
      v13 = 0x4000000;
    else
      v13 = 34603008;
  }
LABEL_16:
  *(_DWORD *)&bytes[8] = v13;
  *(_QWORD *)&buffer = time(0);
  v14 = localtime((const time_t *)&buffer);
  v15 = LOWORD(v14->tm_min) | (v14->tm_sec << 16);
  v16 = ((unint64_t)v14->tm_hour << 48) | ((unint64_t)LOWORD(v14->tm_mday) << 32) | ((v14->tm_mon << 16) + 0x10000) | (unsigned __int16)(v14->tm_year + 1900);
  *(_QWORD *)&buffer = v16;
  DWORD2(buffer) = v15;
  if (cf)
  {
    v17 = CFGetTypeID(cf);
    if (v17 == CFDictionaryGetTypeID())
    {
      v18 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Date"));
      if (v18)
      {
        v19 = v18;
        v20 = CFGetTypeID(v18);
        if (v20 == CFArrayGetTypeID() && CFArrayGetCount(v19) == 6)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 0);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &buffer);
          v22 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 1);
          CFNumberGetValue(v22, kCFNumberSInt16Type, (char *)&buffer + 2);
          v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 2);
          CFNumberGetValue(v23, kCFNumberSInt16Type, (char *)&buffer + 4);
          v24 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 3);
          CFNumberGetValue(v24, kCFNumberSInt16Type, (char *)&buffer + 6);
          v25 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 4);
          CFNumberGetValue(v25, kCFNumberSInt16Type, (char *)&buffer + 8);
          v26 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 5);
          CFNumberGetValue(v26, kCFNumberSInt16Type, (char *)&buffer + 10);
          v16 = buffer;
          v15 = DWORD2(buffer);
        }
      }
    }
  }
  *(_QWORD *)&bytes[24] = v16;
  LODWORD(v73) = v15;
  snprintf(&v71[4], 0xC7uLL, "Copyright Apple Inc., %4d", (unsigned __int16)v16);
  if (!cf)
    return 0;
  v27 = CFGetTypeID(cf);
  if (v27 != CFDictionaryGetTypeID())
    return 0;
  v28 = (ColorSyncProfile *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("profileType"));
  v29 = v28;
  if (!v28)
    return v29;
  if (!CFEqual(v28, CFSTR("abstract")))
  {
    if (CFEqual(v29, CFSTR("abstractWithVals")))
    {
      v34 = longFromDictionary((const __CFDictionary *)cf, CFSTR("gridPoints"));
      if ((unint64_t)v34 - 51 >= 0xFFFFFFFFFFFFFFCFLL)
        v35 = (uint64_t)v34;
      else
        v35 = 17;
      v83 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("limitHueMin"));
      v84 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("limitHueMax"));
      *(_QWORD *)&buffer = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("brightnessDarks"));
      *((_QWORD *)&buffer + 1) = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("brightnessMids"));
      *(_QWORD *)&v78 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("brightnessLights"));
      v81 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("hue"));
      v82 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("sat"));
      v36 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("tint"));
      if (v36 == 0.0)
      {
        v39 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("tintDarks"));
        v37 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("tintMids"));
        v38 = doubleFromDictionary((const __CFDictionary *)cf, CFSTR("tintLights"));
      }
      else
      {
        v37 = v36;
        v38 = v36 * 0.5;
        v39 = 0.0;
      }
      *((double *)&v78 + 1) = v39;
      v79 = v37;
      v80 = v38;
      v45 = (ColorSyncProfile *)create(0, 1, 0);
      v29 = v45;
      if (v45)
      {
        qmemcpy(&bytes[12], "tsba baL baL", 12);
        addXYZTag(v45, CFSTR("wtpt"), 0x100000000F6D6, 0xD32Du);
        addAbstractA2B(v29, v35, (void (*)(float *, float *, float *, uint64_t))_LabToLabValsProc, (uint64_t)&buffer);
      }
    }
    else
    {
      if (CFEqual(v29, CFSTR("displayRGB")))
      {
        DisplayRGB = makeDisplayRGB();
      }
      else if (CFEqual(v29, CFSTR("appleCopy")))
      {
        DisplayRGB = makeAppleCopy((uint64_t)bytes, (CFDictionaryRef)cf);
      }
      else if (CFEqual(v29, CFSTR("calGray")))
      {
        DisplayRGB = makeCalGray((uint64_t)bytes, (const __CFDictionary *)cf);
      }
      else if (CFEqual(v29, CFSTR("calRGB")))
      {
        DisplayRGB = makeCalRGB((uint64_t)bytes, (const __CFDictionary *)cf);
      }
      else if (CFEqual(v29, CFSTR("concatenate")))
      {
        DisplayRGB = makeConcatenated((uint64_t)bytes, cf);
      }
      else if (CFEqual(v29, CFSTR("tableBasedRGB")))
      {
        DisplayRGB = makeTableBasedRGB((uint64_t)bytes, cf);
      }
      else if (CFEqual(v29, CFSTR("copyTags")))
      {
        DisplayRGB = (ColorSyncProfile *)makeByCopyingTags((uint64_t)bytes, cf);
      }
      else if (CFEqual(v29, CFSTR("copyWithGTC")))
      {
        DisplayRGB = makeCopyWithFlexGTC((uint64_t)bytes, (CFDictionaryRef)cf);
      }
      else if (CFEqual(v29, CFSTR("XYZ")))
      {
        DisplayRGB = makeXYZProfile((uint64_t)bytes);
      }
      else
      {
        if (!CFEqual(v29, CFSTR("Lab")))
          return 0;
        DisplayRGB = makeLabProfile((uint64_t)bytes, (const __CFDictionary *)cf);
      }
      v29 = DisplayRGB;
    }
    if (!v29)
      return v29;
    goto LABEL_71;
  }
  v30 = longFromDictionary((const __CFDictionary *)cf, CFSTR("gridPoints"));
  if ((unint64_t)v30 - 51 >= 0xFFFFFFFFFFFFFFCFLL)
    v31 = (uint64_t)v30;
  else
    v31 = 17;
  v32 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("refcon"));
  if (v32)
    BytePtr = CFDataGetBytePtr(v32);
  else
    BytePtr = 0;
  v40 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("proc"));
  if (!v40)
    return 0;
  v41 = CFDataGetBytePtr(v40);
  if (!v41)
    return 0;
  v42 = (void (*)(float *, float *, float *, uint64_t))v41;
  v43 = (ColorSyncProfile *)create(0, 1, 0);
  v29 = v43;
  if (!v43)
    return v29;
  qmemcpy(&bytes[12], "tsba baL baL", 12);
  addXYZTag(v43, CFSTR("wtpt"), 0x100000000F6D6, 0xD32Du);
  addAbstractA2B(v29, v31, v42, (uint64_t)BytePtr);
LABEL_71:
  v47 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v48 = CFDataCreateWithBytesNoCopy(0, bytes, 128, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (v48)
  {
    v49 = v48;
    ColorSyncProfileSetHeader(v29, v48);
    CFRelease(v49);
  }
  v50 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("description"));
  v51 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("asciiName"));
  if ((unint64_t)v50 | (unint64_t)v51)
    ColorSyncProfileSetDescriptionTag(v29, v50, v51);
  v52 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("copyright"));
  v53 = v52;
  if (*(_DWORD *)&bytes[8] >> 26)
  {
    if (!v52)
      goto LABEL_90;
    v54 = CFGetTypeID(v52);
    if (v54 == CFDictionaryGetTypeID())
    {
      ColorSyncProfileSetLocalizedStringDictionary(v29, CFSTR("cprt"), v53);
      goto LABEL_94;
    }
    v60 = CFGetTypeID(v53);
    if (v60 == CFStringGetTypeID())
    {
      *(_QWORD *)&buffer = CFSTR("en_US");
      values = v53;
      v61 = CFDictionaryCreate(0, (const void **)&buffer, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v61)
        goto LABEL_94;
      v59 = v61;
      ColorSyncProfileSetLocalizedStringDictionary(v29, CFSTR("cprt"), v61);
    }
    else
    {
LABEL_90:
      v62 = strlen(&v71[4]);
      v63 = (__CFString *)CFStringCreateWithBytes(0, &v71[4], v62, 0x600u, 0);
      if (!v63)
        goto LABEL_94;
      v59 = v63;
      *(_QWORD *)&buffer = CFSTR("en_US");
      values = v63;
      v64 = CFDictionaryCreate(0, (const void **)&buffer, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v64)
      {
        v65 = v64;
        ColorSyncProfileSetLocalizedStringDictionary(v29, CFSTR("cprt"), v64);
        CFRelease(v65);
      }
    }
    goto LABEL_93;
  }
  if (v52 && (v56 = CFGetTypeID(v52), v56 == CFStringGetTypeID()))
  {
    CFStringGetCString(v53, &v71[4], 200, 0x600u);
    v71[203] = 0;
  }
  else if (ColorSyncProfileContainsTag(v29, CFSTR("cprt")))
  {
    goto LABEL_94;
  }
  v57 = strlen(&v71[4]);
  v58 = CFDataCreateWithBytesNoCopy(0, v70, v57 + 9, v47);
  if (v58)
  {
    v59 = v58;
    ColorSyncProfileSetTag(v29, CFSTR("cprt"), v58);
LABEL_93:
    CFRelease(v59);
  }
LABEL_94:
  v66 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("luminance"));
  if (v66)
  {
    *(_QWORD *)&buffer = 0;
    if (CFNumberGetValue(v66, kCFNumberDoubleType, &buffer) == 1)
      addXYZTag(v29, CFSTR("lumi"), (unint64_t)(int)(*(double *)&buffer * 65536.0 + 0.5) << 32, 0);
  }
  if (*(_DWORD *)&bytes[8] >> 26
    || CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("addMD5")) == (const void *)*MEMORY[0x1E0C9AE50])
  {
    *(ColorSyncMD5 *)&v76[4] = ColorSyncProfileGetMD5(v29);
    v67 = CFDataCreateWithBytesNoCopy(0, bytes, 128, v47);
    if (v67)
    {
      v68 = v67;
      ColorSyncProfileSetHeader(v29, v67);
      CFRelease(v68);
    }
  }
  return v29;
}

ColorSyncMD5 ColorSyncProfileGetMD5(ColorSyncProfileRef prof)
{
  ColorSyncProfileRef v1;
  CFTypeID v2;
  const void *v3;
  const __CFData *Value;
  __CFData *MutableCopy;
  __CFData *v6;
  UInt8 *MutableBytePtr;
  __CFData *ProfileData;
  __CFData *v9;
  uint64_t v10;
  uint64_t v11;
  ColorSyncMD5 result;

  if (prof)
  {
    v1 = prof;
    v2 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      if (*((_DWORD *)v1 + 37) == 1)
      {
        pthread_mutex_lock((pthread_mutex_t *)((char *)v1 + 24));
        v3 = (const void *)*((_QWORD *)v1 + 13);
        if (v3)
          CFRelease(v3);
        Value = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), CFSTR("iccHeader"));
        MutableCopy = CFDataCreateMutableCopy(0, 0, Value);
        if (MutableCopy)
        {
          v6 = MutableCopy;
          MutableBytePtr = CFDataGetMutableBytePtr(MutableCopy);
          *(_QWORD *)(MutableBytePtr + 84) = 0;
          *(_QWORD *)(MutableBytePtr + 92) = 0;
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v1 + 11), CFSTR("iccHeader"), v6);
          CFRelease(v6);
          ProfileData = createProfileData((CFDictionaryRef *)v1);
          if (ProfileData)
          {
            v9 = ProfileData;
            *((_QWORD *)v1 + 16) = computeMD5(ProfileData);
            *((_QWORD *)v1 + 17) = v10;
            if ((MutableBytePtr[8] & 0xFC) != 0)
            {
              *(_OWORD *)(MutableBytePtr + 84) = *((_OWORD *)v1 + 8);
              *((_QWORD *)v1 + 13) = createProfileData((CFDictionaryRef *)v1);
              CFRelease(v9);
            }
            else
            {
              *((_QWORD *)v1 + 13) = v9;
            }
          }
        }
        pthread_mutex_unlock((pthread_mutex_t *)((char *)v1 + 24));
      }
      prof = (ColorSyncProfileRef)*((_QWORD *)v1 + 16);
      v11 = *((_QWORD *)v1 + 17);
    }
    else
    {
      v11 = 0;
      prof = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)&result.digest[8] = v11;
  *(_QWORD *)result.digest = prof;
  return result;
}

__CFData *createProfileData(CFDictionaryRef *a1)
{
  __CFData *Mutable;
  const __CFDictionary *v3;
  const __CFData *Value;
  unsigned int Count;
  unsigned int v6;
  CFDictionaryRef v7;
  const UInt8 *BytePtr;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex v11;
  _QWORD context[4];
  UInt8 bytes[4];
  CFRange v15;
  CFRange v16;

  Mutable = CFDataCreateMutable(0, 0);
  if (Mutable)
  {
    v3 = a1[11];
    if (v3)
    {
      Value = (const __CFData *)CFDictionaryGetValue(v3, CFSTR("iccHeader"));
      Count = CFDictionaryGetCount(a1[11]);
      if (Value)
      {
        if (Count >= 2)
        {
          v6 = Count - 1;
          v7 = a1[11];
          context[0] = Mutable;
          context[1] = v7;
          context[3] = 0;
          BytePtr = CFDataGetBytePtr(Value);
          CFDataAppendBytes(Mutable, BytePtr, 128);
          *(_DWORD *)bytes = bswap32(v6);
          CFDataAppendBytes(Mutable, bytes, 4);
          CFDataSetLength(Mutable, 12 * v6 + 132);
          context[2] = 12 * v6 + 132;
          v9 = ColorSyncProfileCopyTagSignatures((ColorSyncProfileRef)a1);
          if (v9)
          {
            v10 = v9;
            v11 = CFArrayGetCount(v9);
            v15.location = 0;
            v15.length = v11;
            CFArrayApplyFunction(v10, v15, (CFArrayApplierFunction)tagDataAdder, context);
            v16.location = 0;
            v16.length = v11;
            CFArrayApplyFunction(v10, v16, (CFArrayApplierFunction)tagReferenceAdder, context);
            LODWORD(v11) = bswap32(CFDataGetLength(Mutable));
            *(_DWORD *)CFDataGetMutableBytePtr(Mutable) = v11;
            CFRelease(v10);
          }
        }
      }
    }
  }
  return Mutable;
}

CFArrayRef ColorSyncProfileCopyTagSignatures(ColorSyncProfileRef prof)
{
  CFMutableArrayRef Mutable;
  CFTypeID v3;
  CFRange v6;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (prof)
  {
    v3 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v3 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && Mutable != 0)
    {
      if (*((_DWORD *)prof + 37) == 1)
        pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
      CFDictionaryApplyFunction(*((CFDictionaryRef *)prof + 11), (CFDictionaryApplierFunction)tagSignatureAppender, Mutable);
      if (*((_DWORD *)prof + 37) == 1)
        pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
      v6.length = CFArrayGetCount(Mutable);
      v6.location = 0;
      CFArraySortValues(Mutable, v6, (CFComparatorFunction)compareTags, 0);
    }
  }
  return Mutable;
}

uint64_t computeMD5(const __CFData *a1)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CC_MD5_CTX v12;
  _OWORD data[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  unsigned __int8 md[8];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v20 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (!BytePtr)
    return 0;
  v4 = Length;
  result = 0;
  if (v4 >= 0x80)
  {
    v6 = *(_OWORD *)BytePtr;
    v7 = *((_OWORD *)BytePtr + 1);
    v8 = *((_OWORD *)BytePtr + 3);
    v14 = *((_OWORD *)BytePtr + 2);
    v10 = *((_OWORD *)BytePtr + 6);
    v9 = *((_OWORD *)BytePtr + 7);
    v11 = *((_OWORD *)BytePtr + 4);
    *(_OWORD *)v17 = *((_OWORD *)BytePtr + 5);
    *(_OWORD *)&v17[16] = v10;
    v15 = v8;
    v16 = v11;
    data[0] = v6;
    data[1] = v7;
    v18 = v9;
    HIDWORD(v14) = 0;
    LODWORD(v16) = 0;
    *(_OWORD *)&v17[4] = 0uLL;
    memset(&v12, 0, sizeof(v12));
    CC_MD5_Init(&v12);
    CC_MD5_Update(&v12, data, 0x80u);
    if (v4 - 129 <= 0xFFFFFFFE)
      CC_MD5_Update(&v12, BytePtr + 128, v4 - 128);
    CC_MD5_Final(md, &v12);
    return *(_QWORD *)md;
  }
  return result;
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
  CFTypeID v4;
  CFTypeID v5;
  __CFData *MutableCopy;
  __CFData *v7;
  UInt8 *MutableBytePtr;
  int8x8_t v9;
  const void *v10;

  if (prof)
  {
    v4 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && *((_DWORD *)prof + 37) == 1)
    {
      v5 = CFGetTypeID(header);
      if (v5 == CFDataGetTypeID())
      {
        MutableCopy = CFDataCreateMutableCopy(0, 128, header);
        if (MutableCopy)
        {
          v7 = MutableCopy;
          CFDataSetLength(MutableCopy, 128);
          MutableBytePtr = CFDataGetMutableBytePtr(v7);
          *(int8x16_t *)MutableBytePtr = vrev32q_s8(*(int8x16_t *)MutableBytePtr);
          v9 = vrev16_s8(*(int8x8_t *)(MutableBytePtr + 24));
          *((int8x8_t *)MutableBytePtr + 2) = vrev32_s8(*(int8x8_t *)(MutableBytePtr + 16));
          *((int8x8_t *)MutableBytePtr + 3) = v9;
          *((_WORD *)MutableBytePtr + 16) = bswap32(*((unsigned __int16 *)MutableBytePtr + 16)) >> 16;
          *((_WORD *)MutableBytePtr + 17) = bswap32(*((unsigned __int16 *)MutableBytePtr + 17)) >> 16;
          *(int8x16_t *)(MutableBytePtr + 36) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 36));
          *(int8x16_t *)(MutableBytePtr + 52) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 52));
          *(int8x16_t *)(MutableBytePtr + 68) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 68));
          pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
          CFDictionarySetValue(*((CFMutableDictionaryRef *)prof + 11), CFSTR("iccHeader"), v7);
          v10 = (const void *)*((_QWORD *)prof + 13);
          if (v10)
          {
            CFRelease(v10);
            *((_QWORD *)prof + 13) = 0;
          }
          *((_QWORD *)prof + 16) = 0;
          *((_QWORD *)prof + 17) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
          CFRelease(v7);
        }
      }
    }
  }
}

BOOL CMMProfile::Usable(CMMProfile *this)
{
  int v2;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  unint64_t v7;
  BOOL v8;
  CFIndex v9;
  const __CFString *ValueAtIndex;
  int FourCharCodeFromSignature;
  uint64_t v12;
  unsigned __int16 v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _DWORD *exception;

  if (*((_DWORD *)this + 17) != 1633907568)
    return 0;
  v2 = *((unsigned __int8 *)this + 43) << 24;
  if (v2 != 0x4000000 && v2 != 0x2000000)
    return 0;
  v4 = ColorSyncProfileCopyTagSignatures(*((ColorSyncProfileRef *)this + 2));
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = v4;
  Count = CFArrayGetCount(v4);
  if (Count)
  {
    v7 = Count;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9);
      FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(ValueAtIndex);
      if (FourCharCodeFromSignature > 1633776230)
      {
        if (FourCharCodeFromSignature <= 1733843289)
        {
          if (FourCharCodeFromSignature <= 1649957209)
          {
            if (FourCharCodeFromSignature == 1633776231)
              goto LABEL_40;
            v14 = 1649693251;
          }
          else
          {
            if (FourCharCodeFromSignature == 1649957210 || FourCharCodeFromSignature == 1667851120)
            {
LABEL_40:
              if (!CMMProfile::GetTag((uint64_t)this, FourCharCodeFromSignature))
                goto LABEL_47;
              goto LABEL_41;
            }
            v14 = 1733579331;
          }
          goto LABEL_39;
        }
        if (FourCharCodeFromSignature > 1800688194)
        {
          if (FourCharCodeFromSignature == 1800688195 || FourCharCodeFromSignature == 1918128707)
            goto LABEL_40;
          v14 = 1918392666;
          goto LABEL_39;
        }
        if (FourCharCodeFromSignature == 1733843290 || FourCharCodeFromSignature == 1734438260)
          goto LABEL_40;
        if (FourCharCodeFromSignature == 1751405638)
        {
          if (ColorSyncProfileIsPQBased(*((ColorSyncProfileRef *)this + 2))
            || ColorSyncProfileIsHLGBased(*((ColorSyncProfileRef *)this + 2)))
          {
            v12 = 0;
          }
          else
          {
            v12 = 4294967126;
          }
          CMMThrowExceptionOnError(v12);
        }
      }
      else
      {
        if (FourCharCodeFromSignature > 1633763938)
        {
          if (FourCharCodeFromSignature <= 1633768034)
          {
            if (FourCharCodeFromSignature == 1633763939)
              goto LABEL_40;
            v13 = 18275;
          }
          else
          {
            if (FourCharCodeFromSignature == 1633768035 || FourCharCodeFromSignature == 1633772135)
              goto LABEL_40;
            v13 = 26471;
          }
          v14 = v13 | 0x61610000;
LABEL_39:
          if (FourCharCodeFromSignature == v14)
            goto LABEL_40;
          goto LABEL_41;
        }
        if ((FourCharCodeFromSignature - 1093812784) < 3
          || (FourCharCodeFromSignature - 1110589744) < 3)
        {
          goto LABEL_40;
        }
      }
LABEL_41:
      v8 = ++v9 >= v7;
      if (v7 == v9)
        goto LABEL_47;
    }
  }
  v8 = 1;
LABEL_47:
  v15 = (_QWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)v15[2];
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      v15 = v16;
    }
    while (v16);
  }
  CFRelease(v5);
  return v8;
}

void sub_18B39A344(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18B39A2F8);
}

const __CFDictionary *tagDataAdder(const __CFString *key, uint64_t a2)
{
  const __CFDictionary *result;
  const void *Value;
  CFTypeID v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  UInt8 *MutableBytePtr;
  uint64_t v10;
  uint64_t v11;
  UInt8 *v12;

  result = *(const __CFDictionary **)(a2 + 8);
  if (result)
  {
    Value = CFDictionaryGetValue(result, key);
    v6 = CFGetTypeID(Value);
    result = (const __CFDictionary *)CFDataGetTypeID();
    if ((const __CFDictionary *)v6 == result)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)Value);
      Length = CFDataGetLength((CFDataRef)Value);
      CFDataIncreaseLength(*(CFMutableDataRef *)a2, (Length + 3) & 0xFFFFFFFFFFFFFFFCLL);
      MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)a2);
      memcpy(&MutableBytePtr[*(_QWORD *)(a2 + 16)], BytePtr, Length);
      result = (const __CFDictionary *)ColorSyncGetFourCharCodeFromSignature(key);
      v11 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
      v12 = &MutableBytePtr[12 * v10];
      *((_DWORD *)v12 + 33) = bswap32(result);
      *((_DWORD *)v12 + 34) = bswap32(v11);
      *((_DWORD *)v12 + 35) = bswap32(Length);
      *(_QWORD *)(a2 + 16) = v11 + (((_DWORD)Length + 3) & 0xFFFFFFFC);
      *(_QWORD *)(a2 + 24) = v10 + 1;
    }
  }
  return result;
}

CFComparisonResult compareTags(const __CFString *a1, const __CFString *a2)
{
  unsigned int FourCharCodeFromSignature;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(a1);
  v5 = ColorSyncGetFourCharCodeFromSignature(a2);
  v6 = 0;
  while (FourCharCodeFromSignature != *(_DWORD *)&aCsedmcsdtrpctp[4 * v6])
  {
    if (++v6 == 28)
    {
      v6 = 1000;
      break;
    }
  }
  v7 = 0;
  while (v5 != *(_DWORD *)&aCsedmcsdtrpctp[4 * v7])
  {
    if (++v7 == 28)
    {
      v7 = 1000;
      break;
    }
  }
  if (v6 >= 0x3E8 && v7 > 0x3E7)
    return CFStringCompare(a1, a2, 0);
  v9 = v6 >= v7;
  v10 = v6 == v7;
  v11 = -1;
  if (v9)
    v11 = 1;
  if (v10)
    return 0;
  else
    return v11;
}

const __CFString *ColorSyncGetFourCharCodeFromSignature(const __CFString *result)
{
  const __CFString *v1;
  const char *CStringPtr;
  unsigned int v3;
  char buffer[8];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    CStringPtr = CFStringGetCStringPtr(result, 0x600u);
    *(_QWORD *)buffer = 0;
    v5 = 0;
    if (CStringPtr)
    {
      v3 = *(_DWORD *)CStringPtr;
    }
    else
    {
      if (!CFStringGetCString(v1, buffer, 16, 0x600u))
        return (const __CFString *)1061109567;
      v3 = *(_DWORD *)buffer;
    }
    return (const __CFString *)bswap32(v3);
  }
  return result;
}

unsigned __int8 *CMMProfile::GetTag(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  __CFString *SignatureFromFourCharCode;
  uint64_t v6;
  const __CFData *Tag;
  const __CFData *v8;
  unsigned int *BytePtr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  _QWORD *v21;
  _QWORD **v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void (**v46)(CMMLutBtoATag *__hidden);
  uint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BOOL8 v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _BOOL8 v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned int *v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  CMMCurveTag *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  CMMCurveTag *v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *exception;
  _DWORD *v157;
  _DWORD *v158;
  _DWORD *v159;
  _DWORD *v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  unsigned __int8 *v168;
  int v169;
  _QWORD **v171;
  _QWORD **v172;
  _QWORD v173[2];
  void *v174;
  const __CFData *v175;
  unsigned int *v176;
  uint64_t v177;

  v4 = *(unsigned __int8 **)(a1 + 160);
  if (!v4)
  {
LABEL_4:
    if (!*(_QWORD *)(a1 + 16))
      return 0;
    SignatureFromFourCharCode = (__CFString *)ColorSyncCreateSignatureFromFourCharCode(a2);
    if (!ColorSyncProfileContainsTag(*(ColorSyncProfileRef *)(a1 + 16), SignatureFromFourCharCode)
      || !ColorSyncProfileGetTag(*(_QWORD *)(a1 + 16), SignatureFromFourCharCode))
    {
      v4 = 0;
LABEL_330:
      CFRelease(SignatureFromFourCharCode);
      return v4;
    }
    v176 = 0;
    v177 = 0;
    v6 = *(_QWORD *)(a1 + 16);
    v173[0] = off_1E215DA10;
    v173[1] = v6;
    v174 = (void *)CFRetain(SignatureFromFourCharCode);
    Tag = (const __CFData *)ColorSyncProfileGetTag(v6, v174);
    v175 = Tag;
    if (Tag)
    {
      v8 = Tag;
      BytePtr = (unsigned int *)CFDataGetBytePtr(Tag);
      v176 = BytePtr;
      Tag = (const __CFData *)CFDataGetLength(v8);
      v177 = (uint64_t)Tag;
    }
    else
    {
      BytePtr = 0;
    }
    v10 = *(_QWORD *)(a1 + 160);
    do
    {
      v11 = v10;
      if (!v10)
        break;
      v10 = *(_QWORD *)(v10 + 16);
    }
    while (v10);
    if ((unint64_t)Tag >= 8)
      v12 = 0;
    else
      v12 = 4294967294;
    CMMThrowExceptionOnError(v12);
    if (a2 <= 1684370274)
    {
      if (a2 <= 1633768034)
      {
        if (a2 <= 1110589743)
        {
          v13 = -1093812784;
LABEL_96:
          if ((a2 + v13) >= 3)
            goto LABEL_282;
LABEL_97:
          v44 = bswap32(*BytePtr);
          if (v44 <= 1835430960)
          {
            if (v44 == 1832993312)
            {
              if ((unint64_t)v177 <= 0x20)
                v72 = 4294967126;
              else
                v72 = 0;
              CMMThrowExceptionOnError(v72);
              v16 = (unsigned __int8 *)CMMBase::NewInternal(0x270uLL, *(_QWORD ***)(a1 + 24));
              CMMLutTag::CMMLutTag((uint64_t)v16, a2, (uint64_t)v173, v11, *(_QWORD ***)(a1 + 24), *((unsigned __int8 *)v176 + 8), *((unsigned __int8 *)v176 + 9));
              v42 = 0;
              v46 = off_1E215CA88;
              goto LABEL_164;
            }
            if (v44 == 1833058592)
            {
              if ((unint64_t)v177 <= 0x20)
                v45 = 4294967126;
              else
                v45 = 0;
              CMMThrowExceptionOnError(v45);
              v16 = (unsigned __int8 *)CMMBase::NewInternal(0x270uLL, *(_QWORD ***)(a1 + 24));
              CMMLutTag::CMMLutTag((uint64_t)v16, a2, (uint64_t)v173, v11, *(_QWORD ***)(a1 + 24), *((unsigned __int8 *)v176 + 9), *((unsigned __int8 *)v176 + 8));
              v42 = 0;
              v46 = off_1E215CB38;
LABEL_164:
              *(_QWORD *)v16 = v46;
              goto LABEL_306;
            }
LABEL_158:
            if (a2 <= 1633772134)
              goto LABEL_282;
LABEL_270:
            v20 = 29287;
LABEL_271:
            if (a2 == (v20 | 0x61610000))
              goto LABEL_272;
LABEL_282:
            v145 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
            v42 = v145;
            v146 = (uint64_t)v176;
            v147 = v177;
            *v145 = off_1E215FD20;
            *((_DWORD *)v145 + 2) = a2;
            v145[3] = v11;
            v145[4] = v147;
            v145[2] = 0;
            if (v11)
              *(_QWORD *)(v11 + 16) = v145;
            v16 = 0;
            v145[5] = v146;
            *((_WORD *)v145 + 24) = 0;
            goto LABEL_306;
          }
          if (v44 == 1835430962)
          {
            if ((unint64_t)v177 <= 0x34)
              v73 = 4294967126;
            else
              v73 = 0;
            CMMThrowExceptionOnError(v73);
            v74 = (unsigned __int8 *)CMMBase::NewInternal(0x90uLL, *(_QWORD ***)(a1 + 24));
            v16 = v74;
            v172 = *(_QWORD ***)(a1 + 24);
            *((_DWORD *)v74 + 2) = a2;
            *((_QWORD *)v74 + 4) = 0;
            *((_QWORD *)v74 + 5) = 0;
            *((_WORD *)v74 + 24) = 0;
            *((_QWORD *)v74 + 2) = 0;
            *((_QWORD *)v74 + 3) = v11;
            if (v11)
              *(_QWORD *)(v11 + 16) = v74;
            *(_QWORD *)v74 = off_1E215C2F8;
            *((_WORD *)v74 + 60) = 0;
            if (v176)
            {
              if (v177 >= 52)
                v81 = 44;
              else
                v81 = v177 - 8;
              if (v81 <= 0)
                v82 = 4294967126;
              else
                v82 = 0;
              CMMThrowExceptionOnError(v82);
              memcpy(v16 + 50, v176 + 2, v81);
            }
            v83 = 54;
            do
            {
              *(_DWORD *)&v16[v83] = bswap32(*(_DWORD *)&v16[v83]);
              v83 += 4;
            }
            while ((_DWORD)v83 != 90);
            v84 = bswap32(*((unsigned __int16 *)v16 + 45));
            *((_WORD *)v16 + 45) = HIWORD(v84);
            v85 = bswap32(*((unsigned __int16 *)v16 + 46));
            *((_WORD *)v16 + 46) = HIWORD(v85);
            if ((unsigned __int16)(HIWORD(v84) - 4097) <= 0xF000u
              || (unsigned __int16)(HIWORD(v85) - 4097) <= 0xF000u
              || (v86 = v16[50], (v86 - 16) < 0xFFFFFFF1)
              || v16[51] - 16 <= 0xFFFFFFF0)
            {
              exception = __cxa_allocate_exception(4uLL);
              *exception = -170;
            }
            v87 = v16[52];
            v88 = 1;
            do
            {
              v89 = v88 * v87;
              v91 = v88 * v87 >= v88 && v89 >= v87;
              CMMThrowExceptionWithLog(v91, "Overflow in Power", v75, v76, v77, v78, v79, v80);
              v88 = v89;
              --v86;
            }
            while (v86);
            v92 = v89 * v16[51];
            v93 = 2 * v16[50] * (unint64_t)*((unsigned __int16 *)v16 + 45);
            v94 = v16[51] * (unint64_t)*((unsigned __int16 *)v16 + 46);
            v95 = v93 + 52;
            v96 = v93 + 52 + 2 * v92;
            v97 = v96 + 2 * v94;
            *((_QWORD *)v16 + 4) = v97;
            if (v97 > v177)
            {
              v158 = __cxa_allocate_exception(4uLL);
              *v158 = -170;
            }
            v98 = CMMBase::NewInternal(0x28uLL, v172);
            v99 = (uint64_t)v176;
            if (v176)
            {
              if (v95 <= v177)
                v100 = v93;
              else
                v100 = v177 - 52;
              if (v100 <= 0)
                v101 = 4294967126;
              else
                v101 = 0;
              CMMThrowExceptionOnError(v101);
              v99 = (uint64_t)(v176 + 13);
            }
            *v98 = off_1E215FE00;
            v98[1] = 1;
            v98[3] = v99;
            v98[4] = v93;
            v98[2] = 0;
            *((_QWORD *)v16 + 13) = v98;
            v102 = CMMBase::NewInternal(0x28uLL, v172);
            v103 = 2 * v92;
            v104 = (uint64_t)v176;
            if (v176)
            {
              if (v96 <= v177)
                v105 = v103;
              else
                v105 = v177 - v95;
              if (v105 <= 0)
                v106 = 4294967126;
              else
                v106 = 0;
              CMMThrowExceptionOnError(v106);
              v104 = (uint64_t)v176 + v95;
            }
            *v102 = off_1E215FE00;
            v102[1] = 1;
            v102[3] = v104;
            v102[4] = v103;
            v102[2] = 0;
            *((_QWORD *)v16 + 12) = v102;
            v107 = CMMBase::NewInternal(0x28uLL, v172);
            v108 = 2 * v94;
            v109 = (uint64_t)v176;
            if (!v176)
              goto LABEL_268;
            if ((uint64_t)v97 <= v177)
              v110 = 2 * v94;
            else
              v110 = v177 - v96;
            if (v110 <= 0)
              v111 = 4294967126;
            else
              v111 = 0;
          }
          else
          {
            if (v44 != 1835430961)
              goto LABEL_158;
            if ((unint64_t)v177 <= 0x30)
              v47 = 4294967126;
            else
              v47 = 0;
            CMMThrowExceptionOnError(v47);
            v48 = CMMBase::NewInternal(0x78uLL, *(_QWORD ***)(a1 + 24));
            v16 = (unsigned __int8 *)v48;
            v171 = *(_QWORD ***)(a1 + 24);
            *((_DWORD *)v48 + 2) = a2;
            v48[4] = 0;
            v48[5] = 0;
            *((_WORD *)v48 + 24) = 0;
            v48[2] = 0;
            v48[3] = v11;
            if (v11)
              *(_QWORD *)(v11 + 16) = v48;
            *v48 = off_1E215BC80;
            v49 = (unsigned __int8 *)v48 + 50;
            if (v176)
            {
              if (v177 >= 48)
                v50 = 40;
              else
                v50 = v177 - 8;
              if (v50 <= 0)
                v51 = 4294967126;
              else
                v51 = 0;
              CMMThrowExceptionOnError(v51);
              memcpy(v16 + 50, v176 + 2, v50);
            }
            v52 = 54;
            do
            {
              *(_DWORD *)&v16[v52] = bswap32(*(_DWORD *)&v16[v52]);
              v52 += 4;
            }
            while ((_DWORD)v52 != 90);
            CMMThrowExceptionOnCondition(v16[52] < 2u);
            CMMThrowExceptionOnCondition(*v49 - 16 < 0xFFFFFFF1);
            CMMThrowExceptionOnCondition(v16[51] - 16 < 0xFFFFFFF1);
            v59 = v16[50];
            if (v16[50])
            {
              v60 = v16[52];
              v61 = 1;
              do
              {
                v62 = v61;
                v61 *= v60;
                v64 = v61 >= v62 && v61 >= v60;
                CMMThrowExceptionWithLog(v64, "Overflow in Power", v53, v54, v55, v56, v57, v58);
                --v59;
              }
              while (v59);
              v59 = (unint64_t)*v49 << 8;
            }
            else
            {
              v61 = 1;
            }
            v127 = v16[51];
            v128 = v61 * v127;
            v129 = v59 | 0x30;
            v96 = (v59 | 0x30) + v128;
            v130 = v96 + (v127 << 8);
            *((_QWORD *)v16 + 4) = v130;
            if (v130 > v177)
            {
              v157 = __cxa_allocate_exception(4uLL);
              *v157 = -170;
            }
            v131 = CMMBase::NewInternal(0x28uLL, v171);
            v132 = (uint64_t)v176;
            if (v176)
            {
              if (v96 <= v177)
                v133 = v128;
              else
                v133 = v177 - v129;
              if (v133 <= 0)
                v134 = 4294967126;
              else
                v134 = 0;
              CMMThrowExceptionOnError(v134);
              v132 = (uint64_t)v176 + v129;
            }
            *v131 = off_1E215FE00;
            v131[1] = 1;
            v131[3] = v132;
            v131[4] = v128;
            v131[2] = 0;
            *((_QWORD *)v16 + 12) = v131;
            v135 = CMMBase::NewInternal(0x28uLL, v171);
            v136 = (uint64_t)v176;
            if (v176)
            {
              if (v129 <= v177)
                v137 = v59;
              else
                v137 = v177 - 48;
              if (v137 <= 0)
                v138 = 4294967126;
              else
                v138 = 0;
              CMMThrowExceptionOnError(v138);
              v136 = (uint64_t)(v176 + 12);
            }
            *v135 = off_1E215FE00;
            v135[1] = 1;
            v135[3] = v136;
            v135[4] = v59;
            v135[2] = 0;
            *((_QWORD *)v16 + 13) = v135;
            v107 = CMMBase::NewInternal(0x28uLL, v171);
            v108 = v127 << 8;
            v109 = (uint64_t)v176;
            if (!v176)
            {
LABEL_268:
              v42 = 0;
              *v107 = off_1E215FE00;
              v107[1] = 1;
              v107[3] = v109;
              v107[4] = v108;
              v107[2] = 0;
              *((_QWORD *)v16 + 14) = v107;
              goto LABEL_306;
            }
            if ((uint64_t)v130 <= v177)
              v139 = v127 << 8;
            else
              v139 = v177 - v96;
            if (v139 <= 0)
              v111 = 4294967126;
            else
              v111 = 0;
          }
          CMMThrowExceptionOnError(v111);
          v109 = (uint64_t)v176 + v96;
          goto LABEL_268;
        }
        if (a2 <= 1633763938)
        {
          v13 = -1110589744;
          goto LABEL_96;
        }
        if (a2 != 1633763939 && a2 != 1633765219)
        {
          if (a2 != 1633767247)
            goto LABEL_282;
          v65 = CMMBase::NewInternal(0x50uLL, *(_QWORD ***)(a1 + 24));
          v42 = v65;
          v67 = (uint64_t)v176;
          v66 = v177;
          *v65 = off_1E215FD20;
          *((_DWORD *)v65 + 2) = 1633767247;
          v65[3] = v11;
          v65[4] = v66;
          v65[2] = 0;
          if (v11)
            *(_QWORD *)(v11 + 16) = v65;
          v65[5] = v67;
          *((_WORD *)v65 + 24) = 0;
          *v65 = off_1E215CA50;
          if (v66 >= 0x20)
            v68 = 0;
          else
            v68 = 4294967126;
          CMMThrowExceptionOnError(v68);
          v16 = 0;
          v69 = (unsigned int *)v42[5];
          *((_DWORD *)v42 + 13) = bswap32(v69[2]);
          *((_DWORD *)v42 + 14) = v69[3];
          *((_DWORD *)v42 + 15) = v69[4];
          *((_DWORD *)v42 + 16) = v69[5];
          *((_DWORD *)v42 + 17) = v69[6];
          *((_DWORD *)v42 + 18) = v69[7];
          goto LABEL_306;
        }
LABEL_269:
        v42 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
        CMMXYZTag::CMMXYZTag((uint64_t)v42, a2, (uint64_t)v176, v177, v11);
LABEL_305:
        v16 = 0;
        goto LABEL_306;
      }
      if (a2 <= 1649693250)
      {
        if (a2 > 1633773414)
        {
          if (a2 == 1633773415)
          {
LABEL_272:
            v140 = bswap32(*BytePtr);
            switch(v140)
            {
              case 0x484C4720u:
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
                  v152 = 0;
                else
                  v152 = 4294967126;
                CMMThrowExceptionOnError(v152);
                v153 = (CMMCurveTag *)CMMBase::NewInternal(0x58uLL, *(_QWORD ***)(a1 + 24));
                v42 = v153;
                v154 = *(_QWORD *)(a1 + 160);
                do
                {
                  v155 = v154;
                  if (!v154)
                    break;
                  v154 = *(_QWORD *)(v154 + 16);
                }
                while (v154);
                CMMCurveTag::CMMCurveTag(v153, a2, (uint64_t)v176, v177, v155);
                *v42 = off_1E215D120;
                *((_OWORD *)v42 + 4) = xmmword_18B3EA8B0;
                *((_DWORD *)v42 + 20) = 1051372203;
                CMMHLGCurveTag::Initialize((uint64_t)v42);
                goto LABEL_305;
              case 0x50512020u:
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
                  v148 = 0;
                else
                  v148 = 4294967126;
                CMMThrowExceptionOnError(v148);
                v149 = (CMMCurveTag *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 24));
                v42 = v149;
                v150 = *(_QWORD *)(a1 + 160);
                do
                {
                  v151 = v150;
                  if (!v150)
                    break;
                  v150 = *(_QWORD *)(v150 + 16);
                }
                while (v150);
                CMMCurveTag::CMMCurveTag(v149, a2, (uint64_t)v176, v177, v151);
                v16 = 0;
                *v42 = off_1E215CCF0;
                v42[8] = 0;
                *(_OWORD *)(v42 + 9) = xmmword_18B3EA8A0;
                *((_DWORD *)v42 + 22) = 1100316672;
                CMMPQCurveTag::Initialize((uint64_t)v42);
                goto LABEL_306;
              case 0x70617261u:
                v42 = CMMBase::NewInternal(0x80uLL, *(_QWORD ***)(a1 + 24));
                CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)v42, a2, (uint64_t)v176, v177, v11);
                goto LABEL_305;
            }
LABEL_304:
            v42 = 0;
            goto LABEL_305;
          }
          goto LABEL_270;
        }
        if (a2 != 1633768035)
        {
          v20 = 25191;
          goto LABEL_271;
        }
        goto LABEL_269;
      }
      if (a2 > 1651208307)
      {
        if (a2 != 1651208308)
        {
          if (a2 == 1667851120)
          {
            v118 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
            v16 = v118;
            v119 = v176;
            v120 = v177;
            *(_QWORD *)v118 = off_1E215FD20;
            *((_DWORD *)v118 + 2) = 1667851120;
            *((_QWORD *)v118 + 3) = v11;
            *((_QWORD *)v118 + 4) = v120;
            *((_QWORD *)v118 + 2) = 0;
            if (v11)
              *(_QWORD *)(v11 + 16) = v118;
            *((_QWORD *)v118 + 5) = v119;
            *((_WORD *)v118 + 24) = 0;
            *(_QWORD *)v118 = off_1E215BB10;
            v121 = *v119;
            if (v120 >= 0xC)
              v122 = 0;
            else
              v122 = 4294967126;
            CMMThrowExceptionOnError(v122);
            if (v121 == 1885563235)
              v123 = 0;
            else
              v123 = 4294967126;
            CMMThrowExceptionOnError(v123);
            v42 = 0;
            *(_DWORD *)(v16 + 50) = *(_DWORD *)(*((_QWORD *)v16 + 5) + 8);
            goto LABEL_306;
          }
          if (a2 != 1668313716)
            goto LABEL_282;
          v15 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
          v16 = v15;
          v18 = (uint64_t)v176;
          v17 = v177;
          *(_QWORD *)v15 = off_1E215FD20;
          *((_DWORD *)v15 + 2) = 1668313716;
          *((_QWORD *)v15 + 3) = v11;
          *((_QWORD *)v15 + 4) = v17;
          *((_QWORD *)v15 + 2) = 0;
          if (v11)
            *(_QWORD *)(v11 + 16) = v15;
          *((_QWORD *)v15 + 5) = v18;
          *((_WORD *)v15 + 24) = 0;
          *(_QWORD *)v15 = off_1E215BDF8;
          if (v17 >= 9)
            v19 = 0;
          else
            v19 = 4294967126;
          goto LABEL_241;
        }
        goto LABEL_150;
      }
      if (a2 != 1649693251)
      {
        v14 = 1649957210;
LABEL_149:
        if (a2 != v14)
          goto LABEL_282;
        goto LABEL_150;
      }
      goto LABEL_155;
    }
    if (a2 <= 1852009521)
    {
      if (a2 > 1733843289)
      {
        if (a2 <= 1751405637)
        {
          if (a2 != 1733843290)
          {
            if (a2 != 1734438260)
              goto LABEL_282;
            goto LABEL_97;
          }
          goto LABEL_150;
        }
        if (a2 == 1751405638)
        {
          v141 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
          v42 = v141;
          v143 = (uint64_t)v176;
          v142 = v177;
          *v141 = off_1E215FD20;
          *((_DWORD *)v141 + 2) = 1751405638;
          v141[3] = v11;
          v141[4] = v142;
          v141[2] = 0;
          if (v11)
            *(_QWORD *)(v11 + 16) = v141;
          v141[5] = v143;
          *((_WORD *)v141 + 24) = 0;
          *v141 = off_1E215D658;
          if (v142 >= 0xC)
            v144 = 0;
          else
            v144 = 4294967126;
          CMMThrowExceptionOnError(v144);
          goto LABEL_305;
        }
        if (a2 != 1800688195)
        {
          v14 = 1819635049;
          goto LABEL_149;
        }
        goto LABEL_155;
      }
      if (a2 <= 1684893283)
      {
        if (a2 == 1684370275)
        {
          v16 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
          CMMTextDescTag::CMMTextDescTag((uint64_t)v16, 1684370275, (uint64_t)v176, v177, v11);
        }
        else
        {
          if (a2 != 1684890724)
            goto LABEL_282;
          v16 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
          CMMTextDescTag::CMMTextDescTag((uint64_t)v16, 1684890724, (uint64_t)v176, v177, v11);
        }
LABEL_151:
        v42 = 0;
        goto LABEL_306;
      }
      if (a2 == 1684893284)
      {
        v16 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
        CMMTextDescTag::CMMTextDescTag((uint64_t)v16, 1684893284, (uint64_t)v176, v177, v11);
        goto LABEL_151;
      }
      v70 = 1733579331;
LABEL_154:
      if (a2 != v70)
        goto LABEL_282;
LABEL_155:
      v71 = bswap32(*BytePtr);
      if (v71 == 1668641398)
      {
        v112 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
        v16 = v112;
        v113 = (uint64_t)v176;
        v114 = v177;
        *(_QWORD *)v112 = off_1E215FD20;
        *((_DWORD *)v112 + 2) = a2;
        *((_QWORD *)v112 + 3) = v11;
        *((_QWORD *)v112 + 4) = v114;
        *((_QWORD *)v112 + 2) = 0;
        if (v11)
          *(_QWORD *)(v11 + 16) = v112;
        *((_QWORD *)v112 + 5) = v113;
        *((_WORD *)v112 + 24) = 0;
        *(_QWORD *)v112 = off_1E215C290;
        CMMCurveTag::Initialize((uint64_t)v112);
      }
      else
      {
        if (v71 != 1885434465)
          goto LABEL_304;
        v16 = (unsigned __int8 *)CMMBase::NewInternal(0x80uLL, *(_QWORD ***)(a1 + 24));
        CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)v16, a2, (uint64_t)v176, v177, v11);
      }
      goto LABEL_151;
    }
    if (a2 <= 1886610800)
    {
      if ((a2 - 1886545200) < 3)
        goto LABEL_97;
      if (a2 != 1852009522)
        goto LABEL_282;
      v21 = CMMBase::NewInternal(0xA0uLL, *(_QWORD ***)(a1 + 24));
      v16 = (unsigned __int8 *)v21;
      v22 = *(_QWORD ***)(a1 + 24);
      v23 = *(_DWORD *)(a1 + 52);
      if (v23 == 1281450528)
        v23 = 1347182946;
      *v21 = off_1E215FD20;
      *((_DWORD *)v21 + 2) = 1852009522;
      v21[4] = 0;
      v24 = v21 + 4;
      v21[5] = 0;
      *((_WORD *)v21 + 24) = 0;
      v21[2] = 0;
      v21[3] = v11;
      if (v11)
        *(_QWORD *)(v11 + 16) = v21;
      *v21 = off_1E215D9D8;
      *((_DWORD *)v21 + 13) = v23;
      if ((unint64_t)v177 >= 0x55)
        v25 = 0;
      else
        v25 = 4294967126;
      CMMThrowExceptionOnError(v25);
      v26 = *((_DWORD *)v16 + 13);
      if (v26 != 1347182946 && v26 != 1482250784)
      {
        v160 = __cxa_allocate_exception(4uLL);
        *v160 = -171;
      }
      *((_QWORD *)v16 + 7) = 0;
      *((_QWORD *)v16 + 8) = 0;
      *((_QWORD *)v16 + 9) = 0;
      if (v176)
      {
        if (v177 >= 84)
          v27 = 76;
        else
          v27 = v177 - 8;
        if (v27 <= 0)
          v28 = 4294967126;
        else
          v28 = 0;
        CMMThrowExceptionOnError(v28);
        memcpy(v16 + 80, v176 + 2, v27);
      }
      v29 = 80;
      do
      {
        *(_DWORD *)&v16[v29] = bswap32(*(_DWORD *)&v16[v29]);
        v29 += 4;
      }
      while ((_DWORD)v29 != 92);
      v30 = *((unsigned int *)v16 + 21);
      v31 = *((unsigned int *)v16 + 22);
      if ((_DWORD)v31)
      {
        v32 = 4294967126;
        if (!(v31 >> 30))
        {
          if (0x7FFFFFFFu / (2 * (int)v31) >= v30)
            v32 = 0;
          else
            v32 = 4294967126;
        }
        CMMThrowExceptionOnError(v32);
      }
      v33 = (2 * v31 + 38) * v30;
      *v24 = v33 + 84;
      if (v33 + 84 > (unint64_t)v177)
      {
        v159 = __cxa_allocate_exception(4uLL);
        *v159 = -50;
      }
      v34 = CMMBase::NewInternal(0x28uLL, v22);
      *v34 = off_1E215FE00;
      v34[1] = 1;
      v34[3] = 0;
      v34[4] = v33;
      v35 = CMMBase::NewInternal(v33, v22);
      v34[2] = v35;
      if (v176)
      {
        if (v33 + 84 > v177)
          v33 = v177 - 84;
        if (v33 <= 0)
          v36 = 4294967126;
        else
          v36 = 0;
        CMMThrowExceptionOnError(v36);
        memcpy(v35, v176 + 21, v33);
        v35 = (_QWORD *)v34[2];
      }
      v37 = CMMTable::FloatData((uint64_t)v35, v34[3]);
      v38 = *((_DWORD *)v16 + 21);
      if (v38)
      {
        v39 = 0;
        v40 = 2 * (v31 + 3);
        do
        {
          if ((_DWORD)v31 != -3)
          {
            v41 = 0;
            do
            {
              *(_WORD *)(v37 + v41 + 32) = bswap32(*(unsigned __int16 *)(v37 + v41 + 32)) >> 16;
              v41 += 2;
            }
            while (v40 != v41);
          }
          ++v39;
          v37 += v40 + 32;
        }
        while (v39 != v38);
      }
      v42 = 0;
      v43 = 64;
      if (*((_DWORD *)v16 + 13) == 1482250784)
        v43 = 56;
      *(_QWORD *)&v16[v43] = v34;
LABEL_306:
      v161 = *(_DWORD *)(a1 + 48);
      switch(v161)
      {
        case 1296255029:
          v162 = 893602898;
          break;
        case 1296255030:
          v162 = 910380114;
          break;
        case 1296255031:
          v162 = 927157330;
          break;
        case 1296255032:
          v162 = 943934546;
          break;
        default:
          if (v161 == 1281450528)
            v162 = 1145856354;
          else
            v162 = *(_DWORD *)(a1 + 48);
          break;
      }
      v163 = CMMGetChannelCountFromCMMSpace(v162);
      if (*(_DWORD *)(a1 + 52) == 1281450528)
        v164 = 1347182946;
      else
        v164 = *(_DWORD *)(a1 + 52);
      v165 = CMMGetChannelCountFromCMMSpace(v164);
      if (v16)
      {
        v166 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v163, v165);
        v167 = v42;
        v168 = v16;
        if (!v166)
          goto LABEL_324;
      }
      else
      {
        if (!v42)
        {
          v168 = 0;
          goto LABEL_324;
        }
        v169 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v42 + 32))(v42, v163, v165);
        v167 = 0;
        v168 = 0;
        v16 = (unsigned __int8 *)v42;
        if (!v169)
        {
LABEL_324:
          if (v168)
            v4 = v168;
          else
            v4 = (unsigned __int8 *)v42;
          if (!*(_QWORD *)(a1 + 160))
            *(_QWORD *)(a1 + 160) = v4;
          CMMTagDataAccess::~CMMTagDataAccess((CMMTagDataAccess *)v173);
          goto LABEL_330;
        }
      }
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v16 + 8))(v16);
      v168 = 0;
      v42 = v167;
      goto LABEL_324;
    }
    if (a2 <= 1918392665)
    {
      if (a2 != 1886610801)
      {
        v70 = 1918128707;
        goto LABEL_154;
      }
      v115 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
      v16 = v115;
      v117 = (uint64_t)v176;
      v116 = v177;
      *(_QWORD *)v115 = off_1E215FD20;
      *((_DWORD *)v115 + 2) = 1886610801;
      *((_QWORD *)v115 + 3) = v11;
      *((_QWORD *)v115 + 4) = v116;
      *((_QWORD *)v115 + 2) = 0;
      if (v11)
        *(_QWORD *)(v11 + 16) = v115;
      *((_QWORD *)v115 + 5) = v117;
      *((_WORD *)v115 + 24) = 0;
      *(_QWORD *)v115 = off_1E215FA58;
      if (v116 >= 0xD)
        v19 = 0;
      else
        v19 = 4294967126;
    }
    else
    {
      if (a2 == 1918392666)
      {
LABEL_150:
        v16 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
        CMMXYZTag::CMMXYZTag((uint64_t)v16, a2, (uint64_t)v176, v177, v11);
        goto LABEL_151;
      }
      if (a2 != 1952801640)
      {
        v14 = 2004119668;
        goto LABEL_149;
      }
      v124 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
      v16 = v124;
      v126 = (uint64_t)v176;
      v125 = v177;
      *(_QWORD *)v124 = off_1E215FD20;
      *((_DWORD *)v124 + 2) = 1952801640;
      *((_QWORD *)v124 + 3) = v11;
      *((_QWORD *)v124 + 4) = v125;
      *((_QWORD *)v124 + 2) = 0;
      if (v11)
        *(_QWORD *)(v11 + 16) = v124;
      *((_QWORD *)v124 + 5) = v126;
      *((_WORD *)v124 + 24) = 0;
      *(_QWORD *)v124 = off_1E215DA30;
      if (v125 >= 0xC)
        v19 = 0;
      else
        v19 = 4294967126;
    }
LABEL_241:
    CMMThrowExceptionOnError(v19);
    goto LABEL_151;
  }
  while (*((_DWORD *)v4 + 2) != a2)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
    if (!v4)
      goto LABEL_4;
  }
  return v4;
}

BOOL ColorSyncProfileContainsTag(ColorSyncProfileRef prof, CFStringRef signature)
{
  CFTypeID v4;
  BOOL v5;

  if (!prof)
    return 0;
  v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
  v5 = CFDictionaryContainsKey(*((CFDictionaryRef *)prof + 11), signature) != 0;
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  return v5;
}

const void *ColorSyncProfileGetTag(uint64_t a1, void *a2)
{
  CFTypeID v4;
  const void *Tag;
  const __CFArray *v6;
  CFRange v8;

  if (!a1)
    return 0;
  v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  Tag = getTag(a1, a2);
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    v6 = *(const __CFArray **)(a1 + 96);
    if (v6)
    {
      if (Tag)
      {
        v8.length = CFArrayGetCount(v6);
        v8.location = 0;
        if (!CFArrayContainsValue(*(CFArrayRef *)(a1 + 96), v8, Tag))
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), Tag);
      }
    }
  }
  return Tag;
}

const void *getTag(uint64_t a1, void *key)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  CFTypeID v7;

  if (!a1)
    return 0;
  if (*(_DWORD *)(a1 + 148) == 1)
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), key);
  v5 = Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (v6 != CFStringGetTypeID() || (v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), v5)) != 0)
    {
      v7 = CFGetTypeID(v5);
      if (v7 != CFDataGetTypeID())
        v5 = 0;
    }
  }
  if (*(_DWORD *)(a1 + 148) == 1)
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  return v5;
}

uint64_t CMMGetChannelCountFromCMMSpace(int a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;

  v1 = 0;
  v2 = 0;
  if (a1 > 1145261137)
  {
    if (a1 > 1282766367)
    {
      if (a1 <= 1482250783)
      {
        if (a1 == 1282766368 || a1 == 1347182946)
          goto LABEL_57;
        v10 = 1380401696;
      }
      else
      {
        if (a1 > 1501067551)
        {
          if (a1 == 1501067552)
            goto LABEL_57;
          v5 = 1734438260;
LABEL_63:
          if (a1 != v5)
            goto LABEL_68;
          goto LABEL_64;
        }
        if (a1 == 1482250784)
          goto LABEL_57;
        v10 = 1497588338;
      }
    }
    else
    {
      if (a1 <= 1178815569)
      {
        if (a1 == 1145261138)
        {
          v2 = 1;
          v1 = 13;
          goto LABEL_68;
        }
        if (a1 != 1145856354)
        {
          v3 = a1 == 1162038354;
          v4 = 14;
          goto LABEL_25;
        }
        goto LABEL_57;
      }
      if (a1 <= 1212961567)
      {
        if (a1 == 1178815570)
        {
          v2 = 1;
          v1 = 15;
          goto LABEL_68;
        }
        v5 = 1196573017;
        goto LABEL_63;
      }
      if (a1 == 1212961568)
        goto LABEL_57;
      v10 = 1213421088;
    }
LABEL_56:
    if (a1 != v10)
      goto LABEL_68;
    goto LABEL_57;
  }
  if (a1 <= 943934545)
  {
    if (a1 > 876825681)
    {
      if (a1 <= 910380113)
      {
        if (a1 != 876825682)
        {
          v3 = a1 == 893602898;
          v4 = 5;
LABEL_25:
          v2 = v3;
          if (v3)
            v1 = v4;
          else
            v1 = 0;
          goto LABEL_68;
        }
LABEL_60:
        v2 = 1;
        v1 = 4;
        goto LABEL_68;
      }
      v6 = 910380114;
      v7 = 6;
      v8 = a1 == 927157330;
      v9 = 7;
      goto LABEL_43;
    }
    if (a1 != 1)
    {
      if (a1 == 843271250)
      {
        v2 = 1;
        v1 = 2;
        goto LABEL_68;
      }
      v10 = 860048466;
      goto LABEL_56;
    }
LABEL_64:
    v2 = 1;
    v1 = 1;
    goto LABEL_68;
  }
  if (a1 <= 1111706705)
  {
    v6 = 943934546;
    v7 = 8;
    v11 = 10;
    if (a1 != 1094929490)
      v11 = 0;
    v12 = a1 == 960711762 || a1 == 1094929490;
    if (a1 == 960711762)
      v9 = 9;
    else
      v9 = v11;
    goto LABEL_48;
  }
  if (a1 > 1129142559)
  {
    if (a1 != 1129142560)
    {
      if (a1 != 1129142603)
        goto LABEL_68;
      goto LABEL_60;
    }
LABEL_57:
    v2 = 1;
    v1 = 3;
    goto LABEL_68;
  }
  v6 = 1111706706;
  v7 = 11;
  v8 = a1 == 1128483922;
  v9 = 12;
LABEL_43:
  v12 = v8;
  if (!v8)
    v9 = 0;
LABEL_48:
  v13 = a1 == v6;
  v2 = a1 == v6 || v12;
  if (v13)
    v1 = v7;
  else
    v1 = v9;
LABEL_68:
  if (!a1)
    v2 = 1;
  if (v2)
    v14 = 0;
  else
    v14 = 4294967126;
  CMMThrowExceptionOnError(v14);
  return v1;
}

uint64_t CMMThrowExceptionOnError(uint64_t result)
{
  int v1;
  _DWORD *exception;

  if ((_DWORD)result)
  {
    v1 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v1;
  }
  return result;
}

_QWORD *CMMBase::NewInternal(unint64_t a1, _QWORD **a2)
{
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *exception;
  int v12;

  if (a1 >= 0xFFFFFFFFFFFFFFC1
    || (v3 = (a1 + 63) & 0xFFFFFFFFFFFFFFE0, v3 != ((a1 + 31) & 0xFFFFFFFFFFFFFFE0) + 32))
  {
    exception = __cxa_allocate_exception(4uLL);
    v12 = -171;
    goto LABEL_11;
  }
  v4 = malloc_type_calloc(1uLL, v3, 0x1A8617E5uLL);
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    v12 = -108;
LABEL_11:
    *exception = v12;
  }
  v5 = v4;
  v6 = (pthread_mutex_t *)(*a2 + 1);
  v5[3] = v6;
  pthread_mutex_lock(v6);
  v7 = (uint64_t)*a2;
  v8 = (_QWORD *)**a2;
  if (v8)
  {
    do
    {
      v9 = v8;
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    *v9 = v5;
    v5[1] = v9;
  }
  else
  {
    *(_QWORD *)v7 = v5;
    v5[2] = v7;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
  return v5 + 4;
}

void CMMTagDataAccess::~CMMTagDataAccess(CMMTagDataAccess *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E215DA10;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  pthread_mutex_t **v1;

  CMMTagDataAccess::~CMMTagDataAccess(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMCurveTag::Initialize(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_DWORD **)(this + 40);
  *(_DWORD *)(this + 52) = bswap32(v1);
  if (v1 == 1987212643)
  {
    v2 = this;
    if (*(_QWORD *)(this + 32) >= 0xCuLL)
      v3 = 0;
    else
      v3 = 4294967126;
    CMMThrowExceptionOnError(v3);
    if (*(_QWORD *)(v2 + 32) >= 2 * (unint64_t)bswap32(*(_DWORD *)(*(_QWORD *)(v2 + 40) + 8)) + 12)
      return CMMThrowExceptionOnError(0);
    else
      return CMMThrowExceptionOnError(4294967126);
  }
  return this;
}

uint64_t CMMCurveTag::Validate(CMMCurveTag *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)result)
  {
    if (2 * result > *((_QWORD *)this + 4) - 12 || *((_QWORD *)this + 4) - 12 <= 0)
      return 4294967126;
    else
      return 0;
  }
  return result;
}

uint64_t CMMCurveTag::GetCurveCount(CMMCurveTag *this)
{
  return bswap32(*(_DWORD *)(*((_QWORD *)this + 5) + 8));
}

uint64_t CMMXYZTag::CMMXYZTag(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E215FD20;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  if (a5)
    *(_QWORD *)(a5 + 16) = a1;
  *(_QWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E215FEF0;
  if (a4 >= 0x14)
    v6 = 0;
  else
    v6 = 4294967126;
  CMMThrowExceptionOnError(v6);
  return a1;
}

void sub_18B39C308(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMTag::Validate(CMMTag *this)
{
  return 0;
}

void CMMProfile::~CMMProfile(CMMProfile *this)
{
  uint64_t v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)this = off_1E215BD58;
  v2 = *((_QWORD *)this + 21);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)v4[2];
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
      v4 = v5;
    }
    while (v5);
  }
}

void CMMBase::operator delete(pthread_mutex_t **a1)
{
  pthread_mutex_t **v2;
  pthread_mutex_t **v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    pthread_mutex_lock(*(a1 - 1));
    v2 = a1 - 4;
    v3 = (pthread_mutex_t **)*(a1 - 3);
    if (v3 || (v3 = (pthread_mutex_t **)*(a1 - 2)) != 0)
      *v3 = *v2;
    v4 = *v2;
    if (*v2)
    {
      v5 = (uint64_t)*(a1 - 2);
      if (v5)
      {
        v6 = 0;
        *(_QWORD *)&v4->__opaque[8] = v5;
      }
      else
      {
        v6 = (uint64_t)*(a1 - 3);
      }
      *(_QWORD *)v4->__opaque = v6;
    }
    pthread_mutex_unlock(*(a1 - 1));
    free(a1 - 4);
  }
}

void CMMCurveTag::~CMMCurveTag(CMMCurveTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMXYZTag::~CMMXYZTag(CMMXYZTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMTag::~CMMTag(CMMTag *this)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)this = off_1E215FD20;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    *(_QWORD *)(v1 + 24) = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    *(_QWORD *)(v2 + 16) = v1;
  if (*((_BYTE *)this + 48))
    CMMBase::operator delete(*((pthread_mutex_t ***)this + 5));
}

{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

CMMCurveTag *CMMParaCurveTag::CMMParaCurveTag(CMMCurveTag *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CMMParaCurveTag *v6;

  CMMCurveTag::CMMCurveTag(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_1E215D5F0;
  CMMParaCurveTag::Initialize(v6);
  return a1;
}

{
  CMMParaCurveTag *v6;

  CMMCurveTag::CMMCurveTag(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_1E215D5F0;
  CMMParaCurveTag::Initialize(v6);
  return a1;
}

void sub_18B39C4D0(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void *CMMParaCurveTag::Initialize(CMMParaCurveTag *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  void *result;
  _DWORD *exception;

  v2 = **((_DWORD **)this + 5);
  v3 = bswap32(v2);
  if (v2 == 1634886000)
    v4 = 0;
  else
    v4 = 4294967126;
  CMMThrowExceptionOnError(v4);
  *((_DWORD *)this + 13) = v3;
  v5 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 4) <= 0xCuLL)
    v6 = 4294967126;
  else
    v6 = 0;
  CMMThrowExceptionOnError(v6);
  v7 = bswap32(*(unsigned __int16 *)(v5 + 8)) >> 16;
  *((_WORD *)this + 28) = v7;
  if (v7 >= 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -170;
  }
  *((_DWORD *)this + 15) = dword_18B43CE38[v7];
  v8 = (*(uint64_t (**)(CMMParaCurveTag *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, 1, 1);
  CMMThrowExceptionOnError(v8);
  v9 = *((_DWORD *)this + 15);
  v10 = (_DWORD *)((char *)this + 64);
  for (result = memcpy(v10, (const void *)(v5 + 12), 4 * v9); v9; --v9)
  {
    *v10 = bswap32(*v10);
    ++v10;
  }
  return result;
}

uint64_t CMMParaCurveTag::Validate(CMMParaCurveTag *this)
{
  uint64_t result;
  uint64_t v3;

  if (*((_BYTE *)this + 49))
    return 0;
  v3 = *((_QWORD *)this + 4) - 12;
  if (v3 < 1 || v3 < 4 * (unint64_t)*((unsigned int *)this + 15))
    return 4294967126;
  result = 0;
  *((_BYTE *)this + 49) = 1;
  return result;
}

void CMMParaCurveTag::~CMMParaCurveTag(CMMParaCurveTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMLutTag::InitializeCurveTable(uint64_t result, _DWORD *a2, _QWORD **a3, unsigned int a4, int a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  CMMCurveTag *v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *exception;
  int v29;

  *a2 = 0;
  if (a5)
  {
    if (a4 >= 0x10)
      v8 = 16;
    else
      v8 = a4;
    if ((_DWORD)v8)
    {
      LODWORD(v10) = a5;
      v12 = result;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(v12 + 32) - v10;
        if (v14 <= 0xB)
          break;
        if (*(_QWORD *)(a6 + 32))
        {
          if (v14 >= 0x400)
            v14 = 1024;
          v15 = v14 + v10;
          v16 = *(_QWORD *)(a6 + 40);
          if (v16 - v10 > 0 || v15 <= v16)
            v18 = 0;
          else
            v18 = 4294967126;
          CMMThrowExceptionOnError(v18);
          v19 = (unsigned int *)(*(_QWORD *)(a6 + 32) + v10);
        }
        else
        {
          v19 = 0;
        }
        v20 = bswap32(*v19);
        v21 = v19[2];
        if (v20 == 1885434465)
        {
          v26 = bswap32(v21) >> 16;
          if (v26 >= 5)
          {
LABEL_35:
            exception = __cxa_allocate_exception(4uLL);
            v29 = -170;
LABEL_36:
            *exception = v29;
          }
          v23 = dword_18B43CE4C[v26];
          v10 = (v23 + v10);
          if (*(_QWORD *)(v12 + 32) < v10)
            break;
          v25 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, a3);
          CMMParaCurveTag::CMMParaCurveTag(v25, v13, (uint64_t)v19, v23, 0);
        }
        else
        {
          if (v20 != 1668641398)
            goto LABEL_35;
          v22 = 2 * bswap32(v21);
          v23 = (v22 + 15) & 0xFFFFFFFC;
          if (v23 >= v22 + 12)
            v24 = 0;
          else
            v24 = 4294967246;
          CMMThrowExceptionOnError(v24);
          if ((v23 + (unint64_t)v10) >> 32
            || *(_QWORD *)(v12 + 32) < (unint64_t)(v23 + v10))
          {
            break;
          }
          v25 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, a3);
          CMMCurveTag::CMMCurveTag(v25, v13, (uint64_t)v19, v23, 0);
          LODWORD(v10) = v23 + v10;
        }
        v27 = (*(uint64_t (**)(CMMCurveTag *, uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 1, 1);
        result = CMMThrowExceptionOnError(v27);
        *(_QWORD *)&a2[2 * v13 + 2] = v25;
        ++*a2;
        *a7 += v23;
        if (v8 == ++v13)
          return result;
      }
      exception = __cxa_allocate_exception(4uLL);
      v29 = -171;
      goto LABEL_36;
    }
  }
  else
  {
    *a7 = 0;
  }
  return result;
}

void CMMCurveTag::CMMCurveTag(CMMCurveTag *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *((_DWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E215FD20;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 2) = 0;
  if (a5)
    *(_QWORD *)(a5 + 16) = this;
  *((_QWORD *)this + 5) = a3;
  *((_WORD *)this + 24) = 0;
  *(_QWORD *)this = off_1E215C290;
  CMMCurveTag::Initialize((uint64_t)this);
}

void sub_18B39C8C4(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void sub_18B39C90C(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::~TVector(uint64_t a1)
{
  pthread_mutex_t ***v2;

  v2 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100](&v2);
  CMMBase::operator delete((pthread_mutex_t **)a1);
}

uint64_t CMMLutTagBase::Validate(CMMLutTagBase *this, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *exception;

  v4 = *((_DWORD *)this + 2);
  if (v4 > 1734438259)
  {
    if ((v4 - 1886545200) >= 3)
    {
      if (v4 != 1734438260)
        goto LABEL_17;
      v5 = 1;
      v6 = 3;
    }
    else
    {
      v6 = 3;
      v5 = 3;
    }
  }
  else
  {
    v5 = a2;
    if ((v4 - 1093812784) < 3)
    {
      v6 = a2;
      v5 = a3;
    }
    else
    {
      v6 = a3;
      if ((v4 - 1110589744) >= 3)
      {
LABEL_17:
        exception = __cxa_allocate_exception(4uLL);
        *exception = -170;
      }
    }
  }
  if ((*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)this + 48))(this) == v6)
    v7 = 0;
  else
    v7 = 4294967126;
  CMMThrowExceptionOnError(v7);
  if ((*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)this + 56))(this) == v5)
    v8 = 0;
  else
    v8 = 4294967126;
  CMMThrowExceptionOnError(v8);
  return 0;
}

uint64_t CMMLutTag::GetOutputChan(CMMLutTag *this)
{
  return *((unsigned __int8 *)this + 53);
}

uint64_t CMMLutTag::GetInputChan(CMMLutTag *this)
{
  return *((unsigned __int8 *)this + 52);
}

void CMMLutBtoATag::~CMMLutBtoATag(CMMLutBtoATag *this)
{
  pthread_mutex_t **v1;

  CMMLutTag::~CMMLutTag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMThrowExceptionWithLog(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *exception;

  if ((result & 1) == 0)
  {
    ColorSyncLog(2, (uint64_t)"ColorSync: %s\n", a3, a4, a5, a6, a7, a8, (char)a2);
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return result;
}

ColorSyncProfile *makeCalGray(uint64_t a1, const __CFDictionary *a2)
{
  ColorSyncProfile *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  float v9;
  unsigned __int16 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v4 = (ColorSyncProfile *)create(0, 1, 0);
  if (v4)
  {
    qmemcpy((void *)(a1 + 12), "rtnmYARG ZYX", 12);
    v5 = icXYZFromDictionary(a2, CFSTR("wtpt"));
    addXYZTag(v4, CFSTR("wtpt"), v5, v6);
    if (CFDictionaryContainsKey(a2, CFSTR("bkpt")) == 1)
    {
      v7 = icXYZFromDictionary(a2, CFSTR("bkpt"));
      addXYZTag(v4, CFSTR("bkpt"), v7, v8);
    }
    if (CFDictionaryContainsKey(a2, CFSTR("paraK")) == 1)
    {
      gammaCurveFromDictionary((uint64_t)&v11, a2, CFSTR("paraK"));
      ColorSyncProfileSetParametricTRCTag(v4, CFSTR("kTRC"), v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      v9 = floatFromDictionary(a2, CFSTR("kGamma"));
      addGammaTag(v4, CFSTR("kTRC"), v9);
    }
  }
  return v4;
}

uint64_t colorSyncProfileRetainCount(uint64_t a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v6;
  unsigned int v7;
  const __CFAllocator *v8;

  if (a1 == -1)
  {
    if (a2[37] != 2)
    {
      v6 = a2 + 4;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 - 1, v6));
      if (v7 == 1)
      {
        colorSyncProfileFinalize((uint64_t)a2);
        v8 = CFGetAllocator(a2);
        CFAllocatorDeallocate(v8, a2);
      }
    }
    return 0;
  }
  if (a1)
  {
    if (a1 == 1 && a2[37] != 2)
    {
      v3 = a2 + 4;
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    return 0;
  }
  if (a2[37] == 2)
    return 0xFFFFFFFFLL;
  else
    return atomic_load(a2 + 4);
}

void colorSyncProfileFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v2 = *(const void **)(a1 + 88);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 96);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(a1 + 104);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 112);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 120);
    if (v6)
      CFRelease(v6);
    if (*(_DWORD *)(a1 + 148) == 1)
      pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  }
}

CFTypeID ColorSyncTransformGetTypeID(void)
{
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  return ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID;
}

const __CFArray *ColorSyncCodeFragmentGetMD5(const __CFArray *result)
{
  const __CFArray *v1;
  CFTypeID v2;
  const __CFDictionary *v3;
  CFTypeID v4;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 != CFArrayGetTypeID())
      return 0;
    result = (const __CFArray *)CFArrayGetValueAtIndex(v1, 0);
    if (!result)
      return result;
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFDictionaryGetTypeID())
    {
      result = (const __CFArray *)CFDictionaryGetValue(v3, kColorSyncTransformCodeFragmentMD5);
      if (result)
        return *(const __CFArray **)CFDataGetBytePtr(result);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ColorSyncMatrixGetTypeID()
{
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
  return ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID;
}

void colorSyncTRCFinalize(uint64_t a1)
{
  const void *v2;

  if (a1 && *(_DWORD *)(a1 + 16) == 5)
  {
    v2 = *(const void **)(a1 + 56);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
}

uint64_t ColorSyncTRCGetGammaID(unsigned int *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncTRCGetGammaID", "ColorSyncTransformFunctions.c", 430, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  return a1[21];
}

__n128 ColorSyncTRCGetFunction@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v4;
  __n128 result;
  __int128 v6;

  v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v4 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncTRCGetFunction", "ColorSyncTransformFunctions.c", 395, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  result = *(__n128 *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 48);
  return result;
}

void vm_allocator_deallocate(void *a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x18D779964);
  free(a1);
}

ColorSyncProfileRef ColorSyncProfileCreate(CFDataRef data, CFErrorRef *error)
{
  ColorSyncProfileRef result;

  result = (ColorSyncProfileRef)create(data, 0, 0);
  if (error)
    *error = 0;
  return result;
}

void __create_sRGBProfile_block_invoke()
{
  CFDataRef v0;

  v0 = CFDataCreateWithBytesNoCopy(0, sRGB_Profile_data, 3144, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  create_sRGBProfile_profile = (uint64_t)ColorSyncProfileCreateSigleton(v0, 0xAB894ADB2EDA3F1DLL, 0xDD817D7C5F3CA260, CFSTR("/System/Library/ColorSync/Profiles/sRGB Profile.icc"), 0, 3u);
  CFRelease(v0);
}

_QWORD *ColorSyncProfileCreateSigleton(const void *a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v10;
  _QWORD *v11;

  v10 = (_QWORD *)create(a1, 2, a5);
  v11 = v10;
  if (v10)
  {
    v10[16] = a2;
    v10[17] = a3;
    if (a4)
      v10[15] = CFURLCreateWithFileSystemPath(0, a4, kCFURLPOSIXPathStyle, 0);
    if (a6 - 1 <= 4)
      v11[30] = (char *)&valid_cicp + 4 * a6 - 4;
  }
  return v11;
}

BOOL ColorSyncProfileIsWideGamut(ColorSyncProfileRef a1)
{
  ColorSyncProfileRef v1;
  CFTypeID v2;
  unint64_t XYZColor;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;

  if (!a1)
    return (char)a1;
  v1 = a1;
  v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
  {
    LOBYTE(a1) = 0;
    return (char)a1;
  }
  XYZColor = getXYZColor(v1, 0x7258595Au);
  v4 = XYZColor;
  v6 = v5;
  v7 = HIDWORD(XYZColor);
  v8 = getXYZColor(v1, 0x6758595Au);
  v9 = v8;
  v11 = v10;
  v12 = HIDWORD(v8);
  v13 = getXYZColor(v1, 0x6258595Au);
  if (v4 || (_DWORD)v7 || v6)
  {
    v17 = (double)(v6 + v4 + (int)v7);
    v16 = (double)v4 / v17;
    v15 = (double)(int)v7 / v17;
  }
  else
  {
    v15 = -100.0;
    v16 = -100.0;
  }
  if (v9 || (_DWORD)v12 || v11)
  {
    v20 = (double)(v11 + v9 + (int)v12);
    v19 = (double)v9 / v20;
    v18 = (double)(int)v12 / v20;
    if ((_DWORD)v13)
    {
LABEL_20:
      v23 = v14 + v13 + HIDWORD(v13);
      v21 = (double)(int)v13 / (double)v23;
      v22 = (double)SHIDWORD(v13) / (double)v23;
      goto LABEL_21;
    }
  }
  else
  {
    v18 = -100.0;
    v19 = -100.0;
    if ((_DWORD)v13)
      goto LABEL_20;
  }
  if (HIDWORD(v13) || v14)
    goto LABEL_20;
  v21 = -100.0;
  v22 = -100.0;
LABEL_21:
  LOBYTE(a1) = 0;
  if (v16 != -100.0 && v15 != -100.0 && v19 != -100.0 && v18 != -100.0 && v21 != -100.0 && v22 != -100.0)
  {
    v24 = sqrt((v15 - v18) * (v15 - v18) + (v16 - v19) * (v16 - v19));
    v25 = sqrt((v16 - v21) * (v16 - v21) + (v15 - v22) * (v15 - v22));
    v26 = sqrt((v19 - v21) * (v19 - v21) + (v18 - v22) * (v18 - v22));
    LOBYTE(a1) = sqrt(((v26 + v24 + v25) * 0.5 - v26)* (((v26 + v24 + v25) * 0.5 - v25)* ((v26 + v24 + v25)* 0.5* ((v26 + v24 + v25) * 0.5 - v24)))) > 0.13447;
  }
  return (char)a1;
}

unint64_t getXYZColor(const void *a1, unsigned int a2)
{
  __CFString *SignatureFromFourCharCode;
  unint64_t XYZColor;

  SignatureFromFourCharCode = (__CFString *)ColorSyncCreateSignatureFromFourCharCode(a2);
  XYZColor = ColorSyncProfileGetXYZColor(a1, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  return XYZColor;
}

unint64_t ColorSyncProfileGetXYZColor(const void *a1, void *a2)
{
  CFTypeID v4;
  unint64_t v5;
  uint64_t v6;
  const __CFData *Tag;
  int primaries_data_from_cicp;
  const UInt8 *v9;
  const __CFData *v11;
  const __CFData *v12;
  const __CFData *v13;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (a2)
    {
      v5 = 0;
      v6 = 0;
      if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
      {
        Tag = (const __CFData *)getTag((uint64_t)a1, a2);
        if (!Tag)
        {
          if (CFEqual(a2, CFSTR("rXYZ")) || CFEqual(a2, CFSTR("bXYZ")) || CFEqual(a2, CFSTR("gXYZ")))
          {
            v12 = 0;
            v13 = 0;
            v11 = 0;
            primaries_data_from_cicp = get_primaries_data_from_cicp((uint64_t)a1, &v13, &v12, (uint64_t *)&v11);
            Tag = 0;
            if (primaries_data_from_cicp)
            {
              if (CFEqual(a2, CFSTR("rXYZ")) == 1)
              {
                Tag = v13;
              }
              else if (CFEqual(a2, CFSTR("gXYZ")) == 1)
              {
                Tag = v12;
              }
              else if (CFEqual(a2, CFSTR("bXYZ")) == 1)
              {
                Tag = v11;
              }
              else
              {
                Tag = 0;
              }
            }
          }
          else
          {
            Tag = 0;
          }
        }
        v9 = verified_icXYZType_data_ptr(Tag);
        if (v9 && *(_DWORD *)v9 == 542792024)
        {
          v6 = bswap32(*((_DWORD *)v9 + 2));
          v5 = (unint64_t)bswap32(*((_DWORD *)v9 + 3)) << 32;
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return v5 | v6;
}

const UInt8 *verified_icXYZType_data_ptr(const __CFData *a1)
{
  if (a1 && (unint64_t)CFDataGetLength(a1) >= 0x14)
    return CFDataGetBytePtr(a1);
  else
    return 0;
}

uint64_t get_primaries_data_from_cicp(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  int v7;
  uint64_t result;
  uint64_t *v9;
  int v10;

  v10 = 0;
  v7 = ColorSyncProfileContainsSupportedCICP(a1, &v10);
  result = 0;
  if (v7)
  {
    result = 0;
    switch((char)v10)
    {
      case 1:
        if (get_BT709RedPrimaryData_predicate != -1)
          dispatch_once(&get_BT709RedPrimaryData_predicate, &__block_literal_global_326);
        *a2 = get_BT709RedPrimaryData_data;
        if (get_BT709GreenPrimaryData_predicate != -1)
          dispatch_once(&get_BT709GreenPrimaryData_predicate, &__block_literal_global_328);
        *a3 = get_BT709GreenPrimaryData_data;
        if (get_BT709BluPrimaryData_predicate != -1)
          dispatch_once(&get_BT709BluPrimaryData_predicate, &__block_literal_global_330);
        v9 = &get_BT709BluPrimaryData_data;
        goto LABEL_38;
      case 5:
        if (get_BT601RedPrimaryData_predicate != -1)
          dispatch_once(&get_BT601RedPrimaryData_predicate, &__block_literal_global_332);
        *a2 = get_BT601RedPrimaryData_data;
        if (get_BT601GreenPrimaryData_predicate != -1)
          dispatch_once(&get_BT601GreenPrimaryData_predicate, &__block_literal_global_334);
        *a3 = get_BT601GreenPrimaryData_data;
        if (get_BT601BluePrimaryData_predicate != -1)
          dispatch_once(&get_BT601BluePrimaryData_predicate, &__block_literal_global_336);
        v9 = &get_BT601BluePrimaryData_data;
        goto LABEL_38;
      case 9:
        if (get_BT2020RedPrimaryData_predicate != -1)
          dispatch_once(&get_BT2020RedPrimaryData_predicate, &__block_literal_global_338);
        *a2 = get_BT2020RedPrimaryData_data;
        if (get_BT2020GreenPrimaryData_predicate != -1)
          dispatch_once(&get_BT2020GreenPrimaryData_predicate, &__block_literal_global_340);
        *a3 = get_BT2020GreenPrimaryData_data;
        if (get_BT2020BluePrimaryData_predicate != -1)
          dispatch_once(&get_BT2020BluePrimaryData_predicate, &__block_literal_global_342);
        v9 = &get_BT2020BluePrimaryData_data;
        goto LABEL_38;
      case 11:
        if (get_DCIP3RedPrimaryData_predicate != -1)
          dispatch_once(&get_DCIP3RedPrimaryData_predicate, &__block_literal_global_344);
        *a2 = get_DCIP3RedPrimaryData_data;
        if (get_DCIP3GreenPrimaryData_predicate != -1)
          dispatch_once(&get_DCIP3GreenPrimaryData_predicate, &__block_literal_global_346);
        *a3 = get_DCIP3GreenPrimaryData_data;
        if (get_DCIP3BluePrimaryData_predicate != -1)
          dispatch_once(&get_DCIP3BluePrimaryData_predicate, &__block_literal_global_348);
        v9 = &get_DCIP3BluePrimaryData_data;
        goto LABEL_38;
      case 12:
        if (get_DisplayP3RedPrimaryData_predicate != -1)
          dispatch_once(&get_DisplayP3RedPrimaryData_predicate, &__block_literal_global_350);
        *a2 = get_DisplayP3RedPrimaryData_data;
        if (get_DisplayP3GreenPrimaryData_predicate != -1)
          dispatch_once(&get_DisplayP3GreenPrimaryData_predicate, &__block_literal_global_352);
        *a3 = get_DisplayP3GreenPrimaryData_data;
        if (get_DisplayP3BluePrimaryData_predicate != -1)
          dispatch_once(&get_DisplayP3BluePrimaryData_predicate, &__block_literal_global_354);
        v9 = &get_DisplayP3BluePrimaryData_data;
LABEL_38:
        *a4 = *v9;
        result = 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

void CMMProfileInfoContainer::CMMProfileInfoContainer(CMMProfileInfoContainer *this, CFArrayRef theArray, const __CFDictionary *a3, CMMMemMgr *a4)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v9;
  char v10;
  const __CFDictionary *ValueAtIndex;
  CMMProfileMaker *Value;
  const void *v13;
  int v14;
  const void *v15;
  int v16;
  const void *v17;
  _BOOL4 v18;
  const void *v19;
  _BOOL4 v20;
  const void *v21;
  _BOOL4 v22;
  uint64_t v23;
  _QWORD *Profile;
  char IsMatrixHDRProfile;
  const ColorSyncProfile *v26;
  const __CFString *SignatureFromFourCharCode;
  BOOL v28;
  int v29;
  const void *v30;
  int v31;
  const UInt8 *CICPInfo;
  uint64_t v33;
  _BOOL4 v34;
  BOOL v35;
  _BOOL4 v36;
  int v37;
  const __CFDictionary *v38;
  int v39;
  BOOL v40;
  int v41;
  unsigned __int8 *Tag;
  unsigned int v43;
  unsigned int v44;
  char v45;
  BOOL v46;
  CFTypeRef v47;
  CFTypeRef v48;
  _BOOL4 v49;
  _BOOL4 v50;
  int v51;
  const __CFDictionary *v52;
  int v53;
  int v54;
  unsigned __int8 v55;
  char v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  const __CFArray *v73;
  ColorSyncProfile *v74;
  CFIndex v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  __int8 v79;
  unint64_t v80;
  char v81;
  int v82;
  const void *v83;
  unsigned int v84;
  CFTypeRef cf2;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  const __CFDictionary *v89;
  CFIndex v90;
  _QWORD v91[3];

  v6 = theArray;
  Count = CFArrayGetCount(theArray);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = off_1E215BE50;
  *((_QWORD *)this + 5) = a4;
  v74 = a4;
  *(_QWORD *)this = off_1E215FD78;
  *((_QWORD *)this + 6) = 0;
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize((uint64_t)this + 8, Count);
  *(_QWORD *)this = off_1E215F8B8;
  v75 = CFArrayGetCount(v6);
  if (v75)
  {
    v9 = 0;
    v86 = 0;
    v10 = 0;
    v79 = 0;
    v81 = 0;
    v78 = 0;
    v88 = 0;
    v80 = -1;
    cf2 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v77 = 0;
    v89 = a3;
    v73 = v6;
    do
    {
      v76 = v10;
      v90 = v9;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
      memset(v91, 0, 12);
      Value = (CMMProfileMaker *)CFDictionaryGetValue(ValueAtIndex, kColorSyncProfile);
      v13 = CFDictionaryGetValue(ValueAtIndex, kColorSyncRenderingIntent);
      v83 = CFDictionaryGetValue(ValueAtIndex, kColorSyncTransformTag);
      v14 = CFDictionaryContainsKey(ValueAtIndex, kColorSyncBlackPointCompensation);
      if (v14)
      {
        v15 = CFDictionaryGetValue(ValueAtIndex, kColorSyncBlackPointCompensation);
        v16 = CFEqual(v15, cf2) != 0;
      }
      else
      {
        v16 = 0;
      }
      if (CFDictionaryContainsKey(ValueAtIndex, kColorSyncExtendedRange))
      {
        v17 = CFDictionaryGetValue(ValueAtIndex, kColorSyncExtendedRange);
        v18 = CFEqual(v17, cf2) != 0;
      }
      else
      {
        v18 = 1;
      }
      v87 = v18;
      if (CFDictionaryContainsKey(ValueAtIndex, kColorSyncHDRDerivative) == 1)
      {
        v19 = CFDictionaryGetValue(ValueAtIndex, kColorSyncHDRDerivative);
        v20 = CFEqual(v19, kColorSyncHLGDerivative) != 0;
        BYTE3(v91[0]) = v20;
      }
      else
      {
        v20 = 0;
      }
      if (CFDictionaryContainsKey(ValueAtIndex, kColorSyncHDRDerivative) == 1)
      {
        v21 = CFDictionaryGetValue(ValueAtIndex, kColorSyncHDRDerivative);
        v22 = CFEqual(v21, kColorSyncPQDerivative) != 0;
        BYTE4(v91[0]) = v22;
      }
      else
      {
        v22 = 0;
      }
      v23 = v20 || v22;
      Profile = CMMProfileMaker::MakeProfile(Value, v74, (CMMMemMgr *)v23);
      if ((CMMProfileMaker::IsMatrixBased((const ColorSyncProfile *)Profile[2], *((_DWORD *)Profile + 12), *((_DWORD *)Profile + 13)) & 1) != 0)IsMatrixHDRProfile = 1;
      else
        IsMatrixHDRProfile = CMMProfileMaker::IsMatrixHDRProfile((const ColorSyncProfile *)Profile[2], *((_DWORD *)Profile + 12), *((_DWORD *)Profile + 13), 0);
      LOBYTE(v91[0]) = IsMatrixHDRProfile;
      v26 = (const ColorSyncProfile *)Profile[2];
      SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
      LODWORD(v26) = ColorSyncProfileContainsTag(v26, SignatureFromFourCharCode);
      CFRelease(SignatureFromFourCharCode);
      v28 = (_DWORD)v26 && *((_DWORD *)Profile + 12) == 1196573017;
      BYTE1(v91[0]) = v28;
      v29 = CMMProfileMaker::IsMatrixHDRProfile((const ColorSyncProfile *)Profile[2], *((_DWORD *)Profile + 12), *((_DWORD *)Profile + 13), v23);
      BYTE2(v91[0]) = v29;
      BYTE2(v91[1]) = v87;
      if (!v14)
        v16 = (*((unsigned __int8 *)Profile + 76) >> 2) & 1;
      BYTE1(v91[1]) = v16;
      if (v89 && !v16 && CFDictionaryContainsKey(v89, kColorSyncBlackPointCompensation))
      {
        v30 = CFDictionaryGetValue(v89, kColorSyncBlackPointCompensation);
        BYTE1(v91[1]) = CFEqual(v30, cf2) != 0;
      }
      if (CFEqual(v13, kColorSyncRenderingIntentUseProfileHeader))
      {
        if (*((_DWORD *)Profile + 24) >= 4u)
          v31 = 0;
        else
          v31 = *((_DWORD *)Profile + 24);
      }
      else if (CFEqual(v13, kColorSyncRenderingIntentPerceptual))
      {
        v31 = 0;
      }
      else if (CFEqual(v13, kColorSyncRenderingIntentRelative))
      {
        v31 = 1;
      }
      else if (CFEqual(v13, kColorSyncRenderingIntentSaturation))
      {
        v31 = 2;
      }
      else if (CFEqual(v13, kColorSyncRenderingIntentAbsolute))
      {
        v31 = 3;
      }
      else
      {
        v31 = 0;
      }
      v84 = (*(uint64_t (**)(_QWORD *, const void *, BOOL, BOOL))(*Profile + 64))(Profile, v83, v90 == 0, v90 == v75 - 1);
      BYTE6(v91[0]) = 0;
      CICPInfo = ColorSyncProfileGetCICPInfo((const UInt8 *)Value);
      v82 = v31;
      if (CICPInfo)
      {
        v10 = 0;
        v33 = CICPInfo[1];
        v34 = v33 == 18;
        v35 = v33 == 16;
        v36 = v33 < 0x10;
        LODWORD(v33) = 0xC042u >> v33;
        v37 = v36 & v33;
        HIBYTE(v91[0]) = v36 & v33;
        BYTE5(v91[0]) = v35;
        BYTE6(v91[0]) = v34;
      }
      else
      {
        Tag = CMMProfile::GetTag((uint64_t)Profile, 1751405638);
        if (Tag)
        {
          v43 = bswap32(*(_DWORD *)(*((_QWORD *)Tag + 5) + 8));
          v38 = v89;
          if (v43 == 1212958496)
          {
            v10 = 0;
            v34 = 1;
            BYTE6(v91[0]) = 1;
          }
          else
          {
            v34 = 0;
            v10 = 0;
            if (v43 == 1347493920)
              BYTE5(v91[0]) = 1;
          }
          goto LABEL_82;
        }
        v37 = ColorSyncProfileUsesITU_R709OETF(Profile[2]);
        HIBYTE(v91[0]) = v37;
        v44 = ColorSyncProfileUsesCoreVideoGamma(Profile[2]);
        LOBYTE(v91[1]) = v44;
        v38 = v89;
        if (!v44)
        {
          v10 = 0;
LABEL_81:
          v34 = 0;
          if (!v37)
            goto LABEL_82;
          goto LABEL_47;
        }
        if (get_useITUBT1886ForDegamma(__CFDictionary const*)::predicate[0] != -1)
          dispatch_once(get_useITUBT1886ForDegamma(__CFDictionary const*)::predicate, &__block_literal_global_194);
        v45 = get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs;
        get_useITUBT1886ForDegamma(__CFDictionary const*)::enabled = get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs;
        if (v89)
        {
          if (CFDictionaryContainsKey(v89, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == 1)
          {
            v45 = CFDictionaryGetValue(v89, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == cf2;
            get_useITUBT1886ForDegamma(__CFDictionary const*)::enabled = v45;
          }
          else
          {
            v45 = get_useITUBT1886ForDegamma(__CFDictionary const*)::enabled;
          }
          v38 = v89;
        }
        BYTE3(v91[1]) = v45;
        if (get_useITUBT1886ForEngamma(__CFDictionary const*)::predicate[0] != -1)
          dispatch_once(get_useITUBT1886ForEngamma(__CFDictionary const*)::predicate, &__block_literal_global_197_633);
        v10 = get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs;
        get_useITUBT1886ForEngamma(__CFDictionary const*)::enabled = get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs;
        if (!v38)
          goto LABEL_81;
        v34 = 0;
        if (CFDictionaryContainsKey(v38, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == 1)
        {
          v10 = CFDictionaryGetValue(v89, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == cf2;
          get_useITUBT1886ForEngamma(__CFDictionary const*)::enabled = v10;
        }
        else
        {
          v10 = get_useITUBT1886ForEngamma(__CFDictionary const*)::enabled;
        }
      }
      v38 = v89;
      if (!v37)
        goto LABEL_82;
LABEL_47:
      if ((ColorSyncOptionsLegacyHDREcosystemRequested(v38) & 1) != 0)
        goto LABEL_82;
      if (current_or_newer_sdk_predicate != -1)
        dispatch_once(&current_or_newer_sdk_predicate, &__block_literal_global_1272);
      v39 = current_or_newer_sdk_linked_on_glow_or_later;
      if (v38 && CFDictionaryContainsKey(v38, (const void *)kColorSyncTransformUseITU709OETF))
      {
        if (CFDictionaryGetValue(v38, (const void *)kColorSyncTransformUseITU709OETF) == cf2)
        {
          if (HIBYTE(v88))
            v40 = v86 == 0;
          else
            v40 = 1;
          v41 = v40;
          goto LABEL_89;
        }
      }
      else if (!v39)
      {
        goto LABEL_82;
      }
      v10 = 1;
      BYTE3(v91[1]) = 1;
LABEL_82:
      if (HIBYTE(v88))
        v46 = v86 == 0;
      else
        v46 = 1;
      v41 = v46;
      if (!v38)
      {
        v49 = 0;
        v50 = 0;
        goto LABEL_91;
      }
LABEL_89:
      v47 = CFDictionaryGetValue(v38, CFSTR("com.apple.cmm.SkipToneMappingForBT2100"));
      v48 = CFDictionaryGetValue(v38, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100"));
      v49 = v47 == cf2;
      v50 = v48 == cf2;
LABEL_91:
      if (WORD1(v88) || !v90 || ((v29 ^ 1) & 1) != 0 || !(v41 | (!v87 || v50)) || v49)
      {
        if (v90)
          v58 = v29;
        else
          v58 = 1;
        v59 = v58 | v87;
        if (!v81)
          v59 = 1;
        if (((v59 | v49) & 1) != 0
          || (v60 = Profile[2],
              v61 = ColorSyncProfileUsesITU_R709OETF(v60),
              v62 = ColorSyncProfileUsesCoreVideoGamma(v60),
              !BYTE3(v88)))
        {
          v57 = 0;
          v55 = 0;
        }
        else
        {
          v63 = v62;
          if (disable_ITUBT1886Inv_on_HLG_to_SDR(void)::predicate[0] != -1)
            dispatch_once(disable_ITUBT1886Inv_on_HLG_to_SDR(void)::predicate, &__block_literal_global_202);
          v57 = 0;
          v55 = 0;
          if (((disable_ITUBT1886Inv_on_HLG_to_SDR(void)::disabled != 0) & (v61 | v63)) != 0)
            v10 = 0;
        }
        goto LABEL_129;
      }
      v51 = ColorSyncProfileUsesITU_R709OETF(v86);
      v52 = v38;
      if (v34)
        v53 = v41;
      else
        v53 = 0;
      if (v52
        && (v54 = CFDictionaryContainsKey(v52, CFSTR("com.apple.cmm.HLGSurroundLuminance")), v52 = v89, v54 == 1)
        && v34
        || ColorSyncOptionsGetHDRMediaReferenceWhite(v52) == 203.0)
      {
        v55 = ColorSyncOptionsLegacyHDREcosystemRequested(v52);
        if (!v53)
          goto LABEL_123;
      }
      else
      {
        v55 = 1;
        if (!v53)
        {
LABEL_123:
          v55 = 0;
          goto LABEL_124;
        }
      }
      if (display_referred_mapping_on_SDR_to_HLG(void)::predicate != -1)
        dispatch_once(&display_referred_mapping_on_SDR_to_HLG(void)::predicate, &__block_literal_global_199_630);
      if (display_referred_mapping_on_SDR_to_HLG(void)::enabled)
      {
        v55 = 0;
        v56 = 0;
        v57 = 1;
        if (v41)
          goto LABEL_125;
        goto LABEL_129;
      }
LABEL_124:
      v57 = 0;
      v56 = 1;
      if (v41)
      {
LABEL_125:
        v64 = *((_QWORD *)this + 6) - 1;
        v65 = *((_QWORD *)this + 1);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 2) - v65) >> 3) <= v64)
          std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
        if (!v51)
          v56 = v79;
        v66 = v65 + 40 * v64;
        *(_QWORD *)(v66 + 8) = v78;
        *(_QWORD *)(v66 + 16) = v80;
        *(_BYTE *)(v66 + 24) = v77;
        *(_BYTE *)(v66 + 25) = BYTE4(v77);
        *(_BYTE *)(v66 + 26) = v81;
        *(_QWORD *)(v66 + 27) = v88;
        *(_BYTE *)(v66 + 35) = v56;
        *(_BYTE *)(v66 + 36) = v76;
        *(_BYTE *)(v66 + 37) = v55;
        *(_BYTE *)(v66 + 38) = v57;
      }
LABEL_129:
      while (1)
      {
        v67 = *((_QWORD *)this + 6);
        v68 = *((_QWORD *)this + 1);
        v69 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 2) - v68) >> 3);
        if (v67 < v69)
          break;
        std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize((uint64_t)this + 8, v69 + 10);
      }
      *((_QWORD *)this + 6) = v67 + 1;
      v70 = v68 + 40 * v67;
      *(_QWORD *)(v70 + 8) = Profile;
      v80 = __PAIR64__(v82, v84);
      *(_QWORD *)(v70 + 16) = __PAIR64__(v82, v84);
      *(_QWORD *)(v70 + 24) = v91[0];
      v71 = (uint8x8_t)__PAIR64__(v82, v91[1]);
      *(_DWORD *)(v70 + 32) = v91[1];
      *(_BYTE *)(v70 + 36) = v10;
      *(_BYTE *)(v70 + 37) = v55;
      *(_BYTE *)(v70 + 38) = v57;
      v81 = BYTE2(v91[0]);
      if (BYTE2(v91[0]))
        v86 = 0;
      else
        v86 = Profile[2];
      v6 = v73;
      v79 = vmovl_u8(v71).i8[6];
      v88 = *(_QWORD *)((char *)v91 + 3);
      v9 = v90 + 1;
      LODWORD(v72) = LOBYTE(v91[0]);
      HIDWORD(v72) = BYTE1(v91[0]);
      v77 = v72;
      v78 = Profile;
    }
    while (v90 + 1 != v75);
  }
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize((uint64_t)this + 8, *((_QWORD *)this + 6));
}

void sub_18B39E8EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100]((pthread_mutex_t ****)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t CMMProfileMaker::IsMatrixHDRProfile(const ColorSyncProfile *a1, int a2, int a3, int a4)
{
  const __CFString *SignatureFromFourCharCode;
  _BOOL4 v8;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  unsigned int v15;
  char v16;
  const __CFString *v17;
  _BOOL4 v18;
  const __CFString *v19;
  _BOOL4 v20;
  const __CFString *v21;
  _BOOL4 v22;
  const __CFString *v23;
  _BOOL4 v24;
  const __CFData *Tag;
  const __CFData *v26;
  const UInt8 *BytePtr;
  unint64_t Length;
  unsigned int v29;
  const __CFString *v30;
  _BOOL4 v31;
  const __CFString *v32;
  _BOOL4 v33;
  const __CFString *v34;
  _BOOL4 v35;
  const __CFString *v36;
  _BOOL4 v37;
  const __CFString *v38;
  _BOOL4 v39;
  unint64_t v40;
  const __CFData *v41;
  const UInt8 *v42;
  unint64_t v43;
  BOOL v44;
  const __CFString *v47;
  _BOOL4 v48;
  const __CFString *v49;
  _BOOL4 v50;
  const __CFString *v51;
  _BOOL4 v52;
  const __CFString *v53;
  _BOOL4 v54;

  if (a3 != 1482250784 || a2 != 1380401696)
    return 0;
  SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x63696370u);
  v8 = ColorSyncProfileContainsTag(a1, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  if (!v8)
  {
    v17 = ColorSyncCreateSignatureFromFourCharCode(0x68645446u);
    v18 = ColorSyncProfileContainsTag(a1, v17);
    CFRelease(v17);
    if (v18)
    {
      v19 = ColorSyncCreateSignatureFromFourCharCode(0x7258595Au);
      v20 = ColorSyncProfileContainsTag(a1, v19);
      CFRelease(v19);
      if (v20)
      {
        v21 = ColorSyncCreateSignatureFromFourCharCode(0x6758595Au);
        v22 = ColorSyncProfileContainsTag(a1, v21);
        CFRelease(v21);
        if (v22)
        {
          v23 = ColorSyncCreateSignatureFromFourCharCode(0x6258595Au);
          v24 = ColorSyncProfileContainsTag(a1, v23);
          CFRelease(v23);
          if (v24)
          {
            Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, CFSTR("hdTF"));
            if (Tag)
            {
              v26 = Tag;
              BytePtr = CFDataGetBytePtr(Tag);
              Length = CFDataGetLength(v26);
              if (BytePtr)
              {
                if (Length >= 0xC && *(_DWORD *)BytePtr == 543648115)
                {
                  v29 = bswap32(*((_DWORD *)BytePtr + 2));
                  result = 1;
                  if (v29 == 1212958496 || v29 == 1347493920)
                    return result;
                }
              }
            }
          }
        }
      }
    }
LABEL_27:
    v30 = ColorSyncCreateSignatureFromFourCharCode(0x61617267u);
    v31 = ColorSyncProfileContainsTag(a1, v30);
    CFRelease(v30);
    if (!v31)
      goto LABEL_59;
    v32 = ColorSyncCreateSignatureFromFourCharCode(0x61616767u);
    v33 = ColorSyncProfileContainsTag(a1, v32);
    CFRelease(v32);
    if (!v33)
      goto LABEL_59;
    v34 = ColorSyncCreateSignatureFromFourCharCode(0x61616267u);
    v35 = ColorSyncProfileContainsTag(a1, v34);
    CFRelease(v34);
    if (!v35)
      goto LABEL_59;
    v36 = ColorSyncCreateSignatureFromFourCharCode(0x61615263u);
    v37 = ColorSyncProfileContainsTag(a1, v36);
    CFRelease(v36);
    if (v37
      && (v38 = ColorSyncCreateSignatureFromFourCharCode(0x61614763u),
          v39 = ColorSyncProfileContainsTag(a1, v38),
          CFRelease(v38),
          v39)
      && CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x61614263))
    {
      if ((a4 & 1) == 0)
      {
        v40 = 0;
        while (1)
        {
          result = (uint64_t)ColorSyncProfileGetTag((uint64_t)a1, off_1E2161C50[v40]);
          if (!result)
            break;
          v41 = (const __CFData *)result;
          v42 = CFDataGetBytePtr((CFDataRef)result);
          v43 = CFDataGetLength(v41);
          if (v42)
            v44 = v43 >= 0xC;
          else
            v44 = 0;
          if (!v44)
            return 0;
          result = *(_DWORD *)v42 == 538988880 || *(_DWORD *)v42 == 541543496;
          if ((_DWORD)result != 1 || v40++ >= 2)
            return result;
        }
        return result;
      }
    }
    else
    {
LABEL_59:
      if (!a4)
        return 0;
      v47 = ColorSyncCreateSignatureFromFourCharCode(0x72545243u);
      v48 = ColorSyncProfileContainsTag(a1, v47);
      CFRelease(v47);
      if (!v48)
        return 0;
      v49 = ColorSyncCreateSignatureFromFourCharCode(0x67545243u);
      v50 = ColorSyncProfileContainsTag(a1, v49);
      CFRelease(v49);
      if (!v50)
        return 0;
      v51 = ColorSyncCreateSignatureFromFourCharCode(0x62545243u);
      v52 = ColorSyncProfileContainsTag(a1, v51);
      CFRelease(v51);
      if (!v52)
        return 0;
      v53 = ColorSyncCreateSignatureFromFourCharCode(0x7258595Au);
      v54 = ColorSyncProfileContainsTag(a1, v53);
      CFRelease(v53);
      if (!v54
        || !CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6758595A)
        || !CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6258595A))
      {
        return 0;
      }
    }
    return 1;
  }
  v9 = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, CFSTR("cicp"));
  if (!v9)
    goto LABEL_27;
  v10 = v9;
  v11 = CFDataGetBytePtr(v9);
  v12 = CFDataGetLength(v10);
  result = 0;
  if (v11 && v12 >= 0xC)
  {
    if (*(_DWORD *)v11 != 1885563235)
      return 0;
    v14 = v11[9];
    v15 = v14 & 0xFFFFFFFD;
    v16 = v14 == 8 ? a4 : 0;
    result = 1;
    if (v15 != 16 && (v16 & 1) == 0)
      return 0;
  }
  return result;
}

uint64_t CMMProfileMaker::IsMatrixBased(const ColorSyncProfile *a1, int a2, int a3)
{
  int v4;
  const __CFString *SignatureFromFourCharCode;
  _BOOL4 v7;
  const __CFString *v8;
  _BOOL4 v9;
  const __CFString *v10;
  _BOOL4 v11;
  const __CFString *v12;
  _BOOL4 v13;

  if (a3 != 1482250784)
    return 0;
  if (a2 > 1282766367)
  {
    if (a2 <= 1482250783)
    {
      if (a2 == 1282766368)
        goto LABEL_16;
      v4 = 1380401696;
    }
    else
    {
      if (a2 == 1482250784 || a2 == 1501067552)
        goto LABEL_16;
      v4 = 1497588338;
    }
LABEL_15:
    if (a2 != v4)
      return 0;
    goto LABEL_16;
  }
  if (a2 <= 1212961567)
  {
    if (a2 == 860048466)
      goto LABEL_16;
    v4 = 1129142560;
    goto LABEL_15;
  }
  if (a2 != 1212961568 && a2 != 1213421088)
  {
    v4 = 1281450528;
    goto LABEL_15;
  }
LABEL_16:
  if ((ColorSyncProfileContainsSupportedCICP((uint64_t)a1, 0) & 1) != 0)
    return 1;
  SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x72545243u);
  v7 = ColorSyncProfileContainsTag(a1, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  if (v7)
  {
    v8 = ColorSyncCreateSignatureFromFourCharCode(0x67545243u);
    v9 = ColorSyncProfileContainsTag(a1, v8);
    CFRelease(v8);
    if (v9)
    {
      v10 = ColorSyncCreateSignatureFromFourCharCode(0x62545243u);
      v11 = ColorSyncProfileContainsTag(a1, v10);
      CFRelease(v10);
      if (v11)
      {
        v12 = ColorSyncCreateSignatureFromFourCharCode(0x7258595Au);
        v13 = ColorSyncProfileContainsTag(a1, v12);
        CFRelease(v12);
        if (v13
          && CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6758595A)
          && CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6258595A))
        {
          return 1;
        }
      }
    }
  }
  return 0;
}

BOOL CMMProfileMaker::TagExists(CMMProfileMaker *this, const ColorSyncProfile *a2)
{
  const __CFString *SignatureFromFourCharCode;
  _BOOL8 v4;

  SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(a2);
  v4 = ColorSyncProfileContainsTag(this, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  return v4;
}

_QWORD *CMMProfileMaker::MakeProfile(CMMProfileMaker *this, const ColorSyncProfile *a2, CMMMemMgr *a3)
{
  int v3;
  const __CFData *v6;
  const __CFData *v7;
  const UInt8 *BytePtr;
  int v9;
  int v10;
  int v11;
  const __CFString *v12;
  _BOOL4 v13;
  _QWORD *v14;
  uint64_t v15;
  void (**v16)(CMMMonoDisplayProfile *__hidden);
  const __CFString *v17;
  _BOOL4 v18;
  const __CFString *v19;
  _BOOL4 v20;
  const __CFString *v21;
  _BOOL4 v22;
  const __CFString *SignatureFromFourCharCode;
  _BOOL4 v24;
  const __CFString *v25;
  _BOOL4 v26;
  uint64_t v27;
  const __CFString *v28;
  _BOOL4 v29;
  const __CFString *v30;
  _BOOL4 v31;
  uint64_t v32;
  unsigned __int8 *Tag;
  _WORD *v34;
  const __CFString *v35;
  _BOOL4 v36;
  const __CFString *v37;
  _BOOL4 v38;
  const __CFString *v39;
  _BOOL4 v40;
  const __CFString *v41;
  _BOOL4 v42;
  uint64_t v44;
  const void *v45;
  _WORD *v46;
  _WORD *v47;
  _DWORD *exception;
  int v49;

  v3 = (int)a3;
  v6 = ColorSyncProfileCopyHeader(this);
  if (!v6)
  {
    exception = __cxa_allocate_exception(4uLL);
    v49 = -171;
LABEL_62:
    *exception = v49;
  }
  v7 = v6;
  BytePtr = CFDataGetBytePtr(v6);
  v10 = *((_DWORD *)BytePtr + 3);
  v9 = *((_DWORD *)BytePtr + 4);
  v11 = *((_DWORD *)BytePtr + 5);
  CFRelease(v7);
  if (v10 <= 1852662635)
  {
    if (v10 == 1633842036)
    {
      SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
      v24 = ColorSyncProfileContainsTag(this, SignatureFromFourCharCode);
      CFRelease(SignatureFromFourCharCode);
      if (v24)
      {
        v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
        v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
        v16 = off_1E215DDC8;
        goto LABEL_45;
      }
    }
    else
    {
      if (v10 != 1818848875)
      {
        if (v10 == 1835955314)
        {
          if (v9 == 1196573017)
          {
            v17 = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
            v18 = ColorSyncProfileContainsTag(this, v17);
            CFRelease(v17);
            if (v18)
            {
              v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
              v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              v16 = off_1E215F628;
              goto LABEL_45;
            }
          }
          else
          {
            if (CMMProfileMaker::IsMatrixHDRProfile(this, v9, v11, v3))
            {
              v14 = CMMBase::NewInternal(0x108uLL, (_QWORD **)a2);
              v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              *(_OWORD *)(v15 + 216) = 0u;
              *(_OWORD *)(v15 + 200) = 0u;
              *(_OWORD *)(v15 + 184) = 0u;
              v16 = off_1E215FA90;
              goto LABEL_45;
            }
            v41 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
            v42 = ColorSyncProfileContainsTag(this, v41);
            CFRelease(v41);
            if (v42 && CMMProfileMaker::TagExists(this, (const ColorSyncProfile *)0x42324130))
            {
              v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
              v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              v16 = off_1E215E4B0;
              goto LABEL_45;
            }
            if (CMMProfileMaker::IsMatrixBased(this, v9, v11))
            {
              v14 = CMMBase::NewInternal(0xE8uLL, (_QWORD **)a2);
              v44 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              *(_QWORD *)v44 = off_1E215F838;
              *(_OWORD *)(v44 + 184) = 0u;
              *(_OWORD *)(v44 + 200) = 0u;
              *(_OWORD *)(v44 + 216) = 0u;
              return v14;
            }
          }
        }
        goto LABEL_60;
      }
      v25 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
      v26 = ColorSyncProfileContainsTag(this, v25);
      CFRelease(v25);
      if (v26)
      {
        v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
        v27 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
        *(_QWORD *)v27 = off_1E215DCD0;
        *(_DWORD *)(v27 + 176) = 808464432;
        return v14;
      }
    }
LABEL_60:
    exception = __cxa_allocate_exception(4uLL);
    v49 = -170;
    goto LABEL_62;
  }
  if (v10 <= 1935896177)
  {
    if (v10 == 1852662636)
    {
      v21 = ColorSyncCreateSignatureFromFourCharCode(0x6E636C32u);
      v22 = ColorSyncProfileContainsTag(this, v21);
      CFRelease(v21);
      if (v22)
      {
        v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
        v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
        v16 = off_1E215E5B0;
        goto LABEL_45;
      }
    }
    else if (v10 == 1886549106)
    {
      if (v9 == 1196573017)
      {
        v12 = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
        v13 = ColorSyncProfileContainsTag(this, v12);
        CFRelease(v12);
        if (v13)
        {
          v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
          v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          v16 = off_1E215E530;
LABEL_45:
          *(_QWORD *)v15 = v16;
          return v14;
        }
      }
      else
      {
        v35 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
        v36 = ColorSyncProfileContainsTag(this, v35);
        CFRelease(v35);
        if (v36)
        {
          v37 = ColorSyncCreateSignatureFromFourCharCode(0x42324130u);
          v38 = ColorSyncProfileContainsTag(this, v37);
          CFRelease(v37);
          if (v38)
          {
            v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
            v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
            v16 = off_1E215E120;
            goto LABEL_45;
          }
        }
      }
    }
    goto LABEL_60;
  }
  if (v10 != 1936744803)
  {
    if (v10 == 1935896178)
    {
      if (v9 == 1196573017)
      {
        v19 = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
        v20 = ColorSyncProfileContainsTag(this, v19);
        CFRelease(v19);
        if (v20)
        {
          v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
          v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          v16 = off_1E215E1A0;
          goto LABEL_45;
        }
      }
      else
      {
        v39 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
        v40 = ColorSyncProfileContainsTag(this, v39);
        CFRelease(v39);
        if (v40)
        {
          v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
          v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          v16 = off_1E215E038;
          goto LABEL_45;
        }
        if (CMMProfileMaker::IsMatrixBased(this, v9, v11))
        {
          v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
          v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          v16 = off_1E215F5A8;
          goto LABEL_45;
        }
      }
    }
    goto LABEL_60;
  }
  v28 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
  v29 = ColorSyncProfileContainsTag(this, v28);
  CFRelease(v28);
  if (!v29)
    goto LABEL_60;
  v30 = ColorSyncCreateSignatureFromFourCharCode(0x42324130u);
  v31 = ColorSyncProfileContainsTag(this, v30);
  CFRelease(v30);
  if (!v31)
    goto LABEL_60;
  v14 = CMMBase::NewInternal(0xB8uLL, (_QWORD **)a2);
  v32 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
  *(_QWORD *)v32 = off_1E215E220;
  *(_BYTE *)(v32 + 180) = 0;
  if (*(_BYTE *)(v32 + 43) == 2 && *((_DWORD *)v14 + 12) == 1281450528 && *((_DWORD *)v14 + 13) == 1281450528)
  {
    Tag = CMMProfile::GetTag((uint64_t)v14, 1093812784);
    if (Tag)
    else
      v34 = 0;
    v45 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v14 + 88))(v14, 1110589744);
    if (v45)
    {
      if (v34)
      {
        v47 = v46;
        if (v46)
        {
          if ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v34 + 64))(v34) == 2
            && (*(uint64_t (**)(_WORD *))(*(_QWORD *)v47 + 64))(v47) == 2
            && v34[45] == 2
            && v47[45] == 2
            && v34[46] == 2
            && v47[46] == 2)
          {
            *((_BYTE *)v14 + 180) = 1;
          }
        }
      }
    }
  }
  return v14;
}

void sub_18B39F6C0(_Unwind_Exception *a1)
{
  CMMProfile *v1;

  CMMProfile::~CMMProfile(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMProfile::CMMProfile(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  const __CFData *v5;
  const __CFData *v6;
  const UInt8 *BytePtr;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _DWORD *exception;

  *(_QWORD *)a1 = off_1E215BD58;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 176) = 808464432;
  *(_QWORD *)(a1 + 16) = cf;
  *(_QWORD *)(a1 + 24) = a3;
  if (!cf)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  CFRetain(cf);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v5 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)cf);
  if (!v5)
    goto LABEL_5;
  v6 = v5;
  BytePtr = CFDataGetBytePtr(v5);
  v8 = *((_OWORD *)BytePtr + 3);
  v10 = *(_OWORD *)BytePtr;
  v9 = *((_OWORD *)BytePtr + 1);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)BytePtr + 2);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  v11 = *((_OWORD *)BytePtr + 7);
  v13 = *((_OWORD *)BytePtr + 4);
  v12 = *((_OWORD *)BytePtr + 5);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)BytePtr + 6);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v12;
  CFRelease(v6);
  return a1;
}

BOOL ColorSyncProfileIsMatrixBased(ColorSyncProfileRef a1)
{
  const ColorSyncProfile *v1;
  CFTypeID v2;
  const __CFData *v3;
  int v4;
  _BOOL4 v5;
  const UInt8 *Tag;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  CFStringRef *v11;

  if (!a1)
    return (char)a1;
  v1 = a1;
  v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    goto LABEL_28;
  v3 = ColorSyncProfileCopyHeader(v1);
  v4 = *((_DWORD *)CFDataGetBytePtr(v3) + 4);
  CFRelease(v3);
  v5 = ColorSyncProfileIsHLGBased(v1) || ColorSyncProfileIsPQBased(v1);
  if (v4 == 1380401696)
  {
    Tag = (const UInt8 *)getTag((uint64_t)v1, CFSTR("cicp"));
    if ((valid_cicp_tag(Tag, 0) & 1) != 0)
    {
      if (v5)
      {
        LOBYTE(a1) = 1;
        return (char)a1;
      }
      goto LABEL_16;
    }
    if (v5)
      v10 = 3;
    else
      v10 = 6;
    v11 = (CFStringRef *)off_1E2161B30;
    while (ColorSyncProfileContainsTag(v1, *v11))
    {
      ++v11;
      if (!--v10)
      {
        LODWORD(a1) = 1;
        goto LABEL_11;
      }
    }
LABEL_28:
    LOBYTE(a1) = 0;
    return (char)a1;
  }
  if (v4 != 1196573017)
    goto LABEL_28;
  LODWORD(a1) = ColorSyncProfileContainsTag(v1, CFSTR("kTRC"));
LABEL_11:
  if (((a1 ^ 1 | v5) & 1) == 0)
  {
LABEL_16:
    v7 = 0;
    do
    {
      v8 = ColorSyncProfileContainsTag(v1, ColorSyncProfileIsMatrixBased_must_not_have_tags[v7]);
      if (v8)
        break;
    }
    while (v7++ != 2);
    LOBYTE(a1) = !v8;
  }
  return (char)a1;
}

BOOL ColorSyncProfileIsHLGBased(ColorSyncProfileRef a1)
{
  const ColorSyncProfile *v1;
  CFTypeID v2;
  __CFData *v3;
  __CFData *v4;
  const UInt8 *BytePtr;
  const UInt8 *Tag;
  const __CFData *v7;
  const __CFData *v8;
  const UInt8 *v9;
  BOOL v10;
  const __CFData *v11;
  const void *v12;
  const void *v13;
  const UInt8 *v14;
  char v16;

  v1 = a1;
  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      v3 = copyHeaderData((uint64_t)v1);
      if (v3)
      {
        v4 = v3;
        BytePtr = CFDataGetBytePtr(v3);
        if (BytePtr && *((_DWORD *)BytePtr + 5) == 1482250784 && *((_DWORD *)BytePtr + 4) == 1380401696)
        {
          Tag = (const UInt8 *)getTag((uint64_t)v1, CFSTR("cicp"));
          v16 = 0;
          if (valid_cicp_tag(Tag, &v16) && v16 == 18)
          {
            LOBYTE(v1) = 1;
LABEL_33:
            CFRelease(v4);
            return (char)v1;
          }
          v7 = (const __CFData *)getTag((uint64_t)v1, CFSTR("hdTF"));
          if (v7)
          {
            v8 = v7;
            v9 = CFDataGetBytePtr(v7);
            LOBYTE(v1) = 0;
            if ((unint64_t)CFDataGetLength(v8) < 0xC || !v9)
              goto LABEL_33;
            v10 = *((_DWORD *)v9 + 2) == 541543496;
            goto LABEL_17;
          }
          if (ColorSyncProfileContainsTag(v1, CFSTR("aarg"))
            && ColorSyncProfileContainsTag(v1, CFSTR("aagg"))
            && ColorSyncProfileContainsTag(v1, CFSTR("aabg")))
          {
            v11 = (const __CFData *)getTag((uint64_t)v1, CFSTR("aarg"));
            v12 = getTag((uint64_t)v1, CFSTR("aagg"));
            v13 = getTag((uint64_t)v1, CFSTR("aabg"));
            if (CFEqual(v11, v12) == 1)
            {
              if (CFEqual(v12, v13))
              {
                v14 = CFDataGetBytePtr(v11);
                LOBYTE(v1) = 0;
                if ((unint64_t)CFDataGetLength(v11) < 0xC || !v14)
                  goto LABEL_33;
                if (get_preliminary_HLG_curve_data_predicate != -1)
                  dispatch_once(&get_preliminary_HLG_curve_data_predicate, &__block_literal_global_324);
                v10 = get_preliminary_HLG_curve_data_preliminary_HLG_data == *(_QWORD *)v14
                   && dword_1EDFB8AF8 == (unint64_t)*((unsigned int *)v14 + 2);
LABEL_17:
                LOBYTE(v1) = v10;
                goto LABEL_33;
              }
            }
          }
        }
        LOBYTE(v1) = 0;
        goto LABEL_33;
      }
    }
    LOBYTE(v1) = 0;
  }
  return (char)v1;
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  CFTypeID v2;
  __CFData *v3;

  if (!prof)
    return 0;
  v2 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
  v3 = copyHeaderData((uint64_t)prof);
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  return v3;
}

__CFData *copyHeaderData(uint64_t a1)
{
  const __CFData *Value;

  if (*(_DWORD *)(a1 + 148) == 1)
  {
    Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), CFSTR("iccHeader"));
    return copy_swapped_header(Value);
  }
  else
  {
    CFRetain(*(CFTypeRef *)(a1 + 112));
    return *(__CFData **)(a1 + 112);
  }
}

BOOL ColorSyncProfileIsPQBased(ColorSyncProfileRef a1)
{
  const ColorSyncProfile *v1;
  CFTypeID v2;
  __CFData *v3;
  __CFData *v4;
  const UInt8 *BytePtr;
  const UInt8 *Tag;
  const __CFData *v7;
  const __CFData *v8;
  const UInt8 *v9;
  BOOL v10;
  const __CFData *v11;
  const void *v12;
  const void *v13;
  const UInt8 *v14;
  char v16;

  v1 = a1;
  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      v3 = copyHeaderData((uint64_t)v1);
      if (v3)
      {
        v4 = v3;
        BytePtr = CFDataGetBytePtr(v3);
        if (BytePtr && *((_DWORD *)BytePtr + 5) == 1482250784 && *((_DWORD *)BytePtr + 4) == 1380401696)
        {
          Tag = (const UInt8 *)getTag((uint64_t)v1, CFSTR("cicp"));
          v16 = 0;
          if (valid_cicp_tag(Tag, &v16) && v16 == 16)
          {
            LOBYTE(v1) = 1;
LABEL_33:
            CFRelease(v4);
            return (char)v1;
          }
          v7 = (const __CFData *)getTag((uint64_t)v1, CFSTR("hdTF"));
          if (v7)
          {
            v8 = v7;
            v9 = CFDataGetBytePtr(v7);
            LOBYTE(v1) = 0;
            if ((unint64_t)CFDataGetLength(v8) < 0xC || !v9)
              goto LABEL_33;
            v10 = *((_DWORD *)v9 + 2) == 538988880;
            goto LABEL_17;
          }
          if (ColorSyncProfileContainsTag(v1, CFSTR("aarg"))
            && ColorSyncProfileContainsTag(v1, CFSTR("aagg"))
            && ColorSyncProfileContainsTag(v1, CFSTR("aabg")))
          {
            v11 = (const __CFData *)getTag((uint64_t)v1, CFSTR("aarg"));
            v12 = getTag((uint64_t)v1, CFSTR("aagg"));
            v13 = getTag((uint64_t)v1, CFSTR("aabg"));
            if (CFEqual(v11, v12) == 1)
            {
              if (CFEqual(v12, v13))
              {
                v14 = CFDataGetBytePtr(v11);
                LOBYTE(v1) = 0;
                if ((unint64_t)CFDataGetLength(v11) < 0xC || !v14)
                  goto LABEL_33;
                if (get_preliminary_PQ_curve_data_predicate != -1)
                  dispatch_once(&get_preliminary_PQ_curve_data_predicate, &__block_literal_global_322);
                v10 = get_preliminary_PQ_curve_data_preliminary_PQ_data == *(_QWORD *)v14
                   && dword_1EDFB8B10 == (unint64_t)*((unsigned int *)v14 + 2);
LABEL_17:
                LOBYTE(v1) = v10;
                goto LABEL_33;
              }
            }
          }
        }
        LOBYTE(v1) = 0;
        goto LABEL_33;
      }
    }
    LOBYTE(v1) = 0;
  }
  return (char)v1;
}

uint64_t ColorSyncProfileContainsSupportedCICP(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  CFTypeID v4;
  const UInt8 *Tag;

  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      Tag = (const UInt8 *)ColorSyncProfileGetTag(v3, CFSTR("cicp"));
      result = (uint64_t)valid_cicp_tag(Tag, 0);
      if (a2)
      {
        if ((_DWORD)result)
        {
          *a2 = *((_DWORD *)CFDataGetBytePtr((CFDataRef)Tag) + 2);
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const UInt8 *valid_cicp_tag(const UInt8 *result, _BYTE *a2)
{
  const __CFData *v3;
  CFTypeID v4;
  int v5;

  if (result)
  {
    v3 = (const __CFData *)result;
    v4 = CFGetTypeID(result);
    if (v4 != CFDataGetTypeID() || CFDataGetLength(v3) < 1 || (unint64_t)CFDataGetLength(v3) < 0xC)
      return 0;
    result = CFDataGetBytePtr(v3);
    if (!result)
      return result;
    if (*(_DWORD *)result == 1885563235
      && ((v5 = *((_DWORD *)result + 2), v5 == 12) || (v5 & 0xFB) == 1 || (v5 & 0xFD) == 9))
    {
      result = 0;
      if (BYTE1(v5) <= 0x12u && ((1 << SBYTE1(v5)) & 0x5E142) != 0)
      {
        if (a2)
          *a2 = BYTE1(v5);
        return (const UInt8 *)1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize(uint64_t a1, unint64_t a2)
{
  pthread_mutex_t **v4;
  pthread_mutex_t **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  pthread_mutex_t **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  pthread_mutex_t **v22;
  pthread_mutex_t **v23;
  pthread_mutex_t **v24;
  pthread_mutex_t *v25;
  BOOL v26;
  pthread_mutex_t **v27;
  pthread_mutex_t **v28;
  pthread_mutex_t **v29;
  pthread_mutex_t **v30;
  pthread_mutex_t **v31;
  pthread_mutex_t *v32;

  v5 = *(pthread_mutex_t ***)a1;
  v4 = *(pthread_mutex_t ***)(a1 + 8);
  v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v22 = &v5[5 * a2];
      if (v4 != v22)
      {
        v23 = v4 - 5;
        v24 = v4 - 5;
        do
        {
          v25 = *v24;
          v24 -= 5;
          ((void (*)(pthread_mutex_t **))v25->__sig)(v23);
          v26 = v23 == v22;
          v23 = v24;
        }
        while (!v26);
      }
      *(_QWORD *)(a1 + 8) = v22;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v4) >> 3) >= v7)
    {
      v27 = &v4[5 * v7];
      do
      {
        *v4 = (pthread_mutex_t *)off_1E215D1F0;
        v4[1] = 0;
        v4[2] = (pthread_mutex_t *)-1;
        v4[3] = 0;
        *(pthread_mutex_t **)((char *)v4 + 31) = 0;
        v4 += 5;
      }
      while (v4 != v27);
      *(_QWORD *)(a1 + 8) = v27;
    }
    else
    {
      if (a2 > 0x666666666666666)
        std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_length_error[abi:ne180100]();
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x333333333333333)
        v11 = 0x666666666666666;
      else
        v11 = v10;
      v12 = CMMBase::NewInternal(40 * v11, *(_QWORD ***)(a1 + 32));
      v13 = &v12[5 * a2];
      v14.n128_u64[0] = -1;
      v14.n128_u64[1] = -1;
      v15 = &v12[5 * v6];
      do
      {
        *v15 = off_1E215D1F0;
        v15[1] = 0;
        v15[2] = -1;
        v15[3] = 0;
        *(_QWORD *)((char *)v15 + 31) = 0;
        v15 += 5;
      }
      while (v15 != v13);
      v16 = 0;
      v18 = *(pthread_mutex_t ***)a1;
      v17 = *(_QWORD *)(a1 + 8);
      while (1)
      {
        v19 = &v12[5 * v6 + v16];
        v20 = v17 + v16 * 8;
        if ((pthread_mutex_t **)(v17 + v16 * 8) == v18)
          break;
        v21 = *(_QWORD *)(v20 - 32);
        *(v19 - 5) = off_1E215D1F0;
        *(v19 - 4) = v21;
        *(v19 - 3) = *(_QWORD *)(v20 - 24);
        v14.n128_u64[0] = *(_QWORD *)(v20 - 16);
        *(v19 - 2) = v14.n128_u64[0];
        *((_DWORD *)v19 - 2) = *(_DWORD *)(v20 - 8);
        *((_WORD *)v19 - 2) = *(_WORD *)(v20 - 4);
        *((_BYTE *)v19 - 2) = *(_BYTE *)(v20 - 2);
        v16 -= 5;
      }
      v29 = *(pthread_mutex_t ***)a1;
      v28 = *(pthread_mutex_t ***)(a1 + 8);
      *(_QWORD *)a1 = v19;
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = &v12[5 * v11];
      if (v28 != v29)
      {
        v30 = v28 - 5;
        v31 = v28 - 5;
        do
        {
          v32 = *v31;
          v31 -= 5;
          ((void (*)(pthread_mutex_t **, __n128))v32->__sig)(v30, v14);
          v26 = v30 == v29;
          v30 = v31;
        }
        while (!v26);
      }
      if (v29)
        CMMBase::operator delete(v29);
    }
  }
}

uint64_t CMMProfile::GenericGetConversionType(CMMProfile *this, const __CFString *a2)
{
  if (CFEqual(this, kColorSyncTransformDeviceToPCS))
    return 1;
  if (CFEqual(this, kColorSyncTransformPCSToDevice))
    return 2;
  if (CFEqual(this, kColorSyncTransformPCSToPCS))
    return 3;
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformSceneLinearToPCS))
    return 9;
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformPCSToSceneLinear))
    return 10;
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformDisplayLinearToPCS)
    || CFEqual(this, (CFTypeRef)kColorSyncTransformPCSToDisplayLinear))
  {
    return 11;
  }
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformDeviceToSceneLinearPCS))
    return 13;
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformSceneLinearPCSToDevice))
    return 14;
  if (CFEqual(this, kColorSyncTransformGamutCheck))
    return 4;
  CMMThrowExceptionOnError(4294967246);
  return 0xFFFFFFFFLL;
}

uint64_t CMMDisplayProfile::GetConversionType(CMMDisplayProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t ColorSyncProfileUsesITU_R709OETF(uint64_t a1)
{
  const __CFData *Tag;
  uint64_t result;
  const UInt8 *BytePtr;
  int v5;

  Tag = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("rTRC"));
  if (Tag || (result = (uint64_t)ColorSyncProfileGetTag(a1, CFSTR("aarg")), (Tag = (const __CFData *)result) != 0))
  {
    if (CFDataGetLength(Tag) >= 32)
    {
      BytePtr = CFDataGetBytePtr(Tag);
      if (*(_DWORD *)BytePtr == 1634886000 && *((_WORD *)BytePtr + 4) == 768 && *((_DWORD *)BytePtr + 3) == -466091520)
      {
        v5 = *((_DWORD *)BytePtr + 4);
        if (v5 == -521666560)
        {
          if (*((_DWORD *)BytePtr + 5) == 538378240 && *((_DWORD *)BytePtr + 6) == -466092032)
            return *((_DWORD *)BytePtr + 7) == -1139539968;
        }
        else if (v5 == -253231104
               && *((_DWORD *)BytePtr + 5) == 269942784
               && *((_DWORD *)BytePtr + 6) == -466092032
               && *((_DWORD *)BytePtr + 7) == -1139539968)
        {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

const __CFData *ColorSyncProfileUsesCoreVideoGamma(uint64_t a1)
{
  const __CFData *Tag;
  const __CFData *result;
  const UInt8 *BytePtr;

  Tag = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("rTRC"));
  if (Tag || (result = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("aarg")), (Tag = result) != 0))
  {
    if (CFDataGetLength(Tag) >= 14
      && (BytePtr = CFDataGetBytePtr(Tag), *(_DWORD *)BytePtr == 1987212643)
      && *((_DWORD *)BytePtr + 2) == 0x1000000)
    {
      return (const __CFData *)(*((__int16 *)BytePtr + 6) == -2559);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t create(CFTypeRef cf, int a2, uint64_t a3)
{
  CFTypeID v6;
  const UInt8 *BytePtr;
  uint64_t Instance;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  UInt8 *v12;
  unint64_t Length;
  unint64_t v14;
  CFDataRef TagData;
  CFDataRef v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  CFIndex v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  CFStringRef v26;
  CFDataRef v27;
  CFStringRef SignatureFromFourCharCode;
  __CFDictionary *v29;
  CFStringRef v30;
  CFStringRef v31;
  unsigned int v32;
  const __CFData *Value;
  __CFData *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  int *v40;
  int *v41;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  pthread_mutexattr_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 != CFDataGetTypeID())
      return 0;
    BytePtr = CFDataGetBytePtr((CFDataRef)cf);
    if ((unint64_t)CFDataGetLength((CFDataRef)cf) < 0x81 || *((_DWORD *)BytePtr + 9) != 1886610273)
      return 0;
  }
  else if (a2 != 1)
  {
    return 0;
  }
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  Instance = _CFRuntimeCreateInstance();
  v9 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 228) = 0u;
    *(_OWORD *)(Instance + 212) = 0u;
    *(_OWORD *)(Instance + 196) = 0u;
    *(_OWORD *)(Instance + 180) = 0u;
    *(_OWORD *)(Instance + 164) = 0u;
    *(_OWORD *)(Instance + 148) = 0u;
    *(_OWORD *)(Instance + 132) = 0u;
    *(_OWORD *)(Instance + 116) = 0u;
    *(_OWORD *)(Instance + 100) = 0u;
    *(_OWORD *)(Instance + 84) = 0u;
    *(_OWORD *)(Instance + 68) = 0u;
    *(_OWORD *)(Instance + 52) = 0u;
    *(_OWORD *)(Instance + 36) = 0u;
    *(_OWORD *)(Instance + 20) = 0u;
    *(_DWORD *)(Instance + 16) = 1;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v9 + 88) = Mutable;
    if (Mutable)
    {
      if (!cf)
        goto LABEL_37;
      v11 = Mutable;
      v12 = (UInt8 *)CFDataGetBytePtr((CFDataRef)cf);
      Length = CFDataGetLength((CFDataRef)cf);
      if (v12)
      {
        v14 = Length;
        if (Length >= 0x80)
        {
          TagData = createTagData(v12, 128, a2 == 1);
          if (TagData)
          {
            v16 = TagData;
            CFDictionarySetValue(v11, CFSTR("iccHeader"), TagData);
            CFRelease(v16);
            if (v14 >= 0x85)
            {
              v17 = *((_DWORD *)v12 + 32);
              if (v17)
              {
                if (v14 >= 0x90)
                {
                  v18 = 0;
                  v43 = bswap32(v17);
                  v44 = v14;
                  v45 = (unint64_t)&v12[v14 - 1];
                  v19 = (unsigned int *)(v12 + 132);
                  while ((unint64_t)(v19 + 3) <= v45)
                  {
                    v20 = bswap32(v19[2]);
                    if ((v20 & 0x80000000) != 0)
                      break;
                    v21 = v19[1];
                    v22 = bswap32(v21);
                    if (v20 + v22 > v14)
                      break;
                    v46 = v19 + 3;
                    v23 = bswap32(*v19);
                    if (v18)
                    {
                      v24 = v18;
                      v25 = (unsigned int *)(v12 + 132);
                      while (v25[1] != v21)
                      {
                        v25 += 3;
                        if (!--v24)
                          goto LABEL_26;
                      }
                      v32 = bswap32(*v25);
                      SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(v23);
                      v26 = ColorSyncCreateSignatureFromFourCharCode(v32);
                      v29 = v11;
                      v30 = SignatureFromFourCharCode;
                      v31 = v26;
                    }
                    else
                    {
LABEL_26:
                      v26 = ColorSyncCreateSignatureFromFourCharCode(v23);
                      if (CFDictionaryContainsValue(v11, v26) || (v27 = createTagData(&v12[v22], v20, a2 == 1)) == 0)
                      {
                        CFRelease(v26);
                        goto LABEL_58;
                      }
                      SignatureFromFourCharCode = (CFStringRef)v27;
                      v29 = v11;
                      v30 = v26;
                      v31 = SignatureFromFourCharCode;
                    }
                    CFDictionarySetValue(v29, v30, v31);
                    CFRelease(SignatureFromFourCharCode);
                    CFRelease(v26);
                    ++v18;
                    v19 = v46;
                    v14 = v44;
                    if (v18 == v43)
                      goto LABEL_31;
                  }
                }
                goto LABEL_58;
              }
            }
LABEL_31:
            if (a2 == 1)
            {
              *(_QWORD *)(v9 + 104) = CFRetain(cf);
LABEL_36:
              *(_QWORD *)(v9 + 128) = computeMD5((const __CFData *)cf);
              *(_QWORD *)(v9 + 136) = v35;
LABEL_37:
              *(_DWORD *)(v9 + 148) = a2;
              if (a2 == 1)
              {
                v47.__sig = 0;
                *(_QWORD *)v47.__opaque = 0;
                pthread_mutexattr_init(&v47);
                pthread_mutexattr_settype(&v47, 2);
                pthread_mutex_init((pthread_mutex_t *)(v9 + 24), &v47);
                pthread_mutexattr_destroy(&v47);
                *(_QWORD *)(v9 + 96) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              }
LABEL_39:
              if (a3 == 3)
              {
                if (BT2020_luminance_coefficients_predicate != -1)
                  dispatch_once(&BT2020_luminance_coefficients_predicate, &__block_literal_global_310);
                v39 = &BT2020_luminance_coefficients_coeffs_2;
                v40 = &BT2020_luminance_coefficients_coeffs_1;
                v41 = &BT2020_luminance_coefficients_coeffs_0;
              }
              else if (a3 == 2)
              {
                if (DisplayP3_luminance_coefficients_predicate != -1)
                  dispatch_once(&DisplayP3_luminance_coefficients_predicate, &__block_literal_global_308);
                v39 = &DisplayP3_luminance_coefficients_coeffs_2;
                v40 = &DisplayP3_luminance_coefficients_coeffs_1;
                v41 = &DisplayP3_luminance_coefficients_coeffs_0;
              }
              else
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                if (a3 != 1)
                  goto LABEL_52;
                if (BT709_luminance_coefficients_predicate != -1)
                  dispatch_once(&BT709_luminance_coefficients_predicate, &__block_literal_global_306);
                v39 = &BT709_luminance_coefficients_coeffs_2;
                v40 = &BT709_luminance_coefficients_coeffs_1;
                v41 = &BT709_luminance_coefficients_coeffs_0;
              }
              v38 = *v41;
              v36 = *v40;
              v37 = *v39;
LABEL_52:
              *(_DWORD *)(v9 + 152) = v38;
              *(_DWORD *)(v9 + 156) = v36;
              *(_DWORD *)(v9 + 160) = v37;
              *(_DWORD *)(v9 + 164) = 0;
              if (a2)
                *(_BYTE *)(v9 + 144) = a2 == 2;
              else
                *(_BYTE *)(v9 + 144) = AppleCMMValidateProfile((CMMProfileMaker *)v9);
              return v9;
            }
            Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 88), CFSTR("iccHeader"));
            v34 = copy_swapped_header(Value);
            *(_QWORD *)(v9 + 112) = v34;
            if (v34)
            {
              *(_QWORD *)(v9 + 104) = CFRetain(cf);
              if (a2 == 2)
              {
                *(_DWORD *)(v9 + 148) = 2;
                goto LABEL_39;
              }
              goto LABEL_36;
            }
          }
        }
      }
    }
LABEL_58:
    CFRelease((CFTypeRef)v9);
    return 0;
  }
  return v9;
}

CFStringRef ColorSyncCreateSignatureFromFourCharCode(unsigned int a1)
{
  const char *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  const char *v7;
  uint64_t v8;
  CFStringRef v9;
  UInt8 bytes[4];

  v1 = "0B2A";
  v2 = 59;
  while (v2)
  {
    if (*(_DWORD *)v1 == a1)
    {
      v2 = 0;
LABEL_15:
      v7 = &v1[16 * v2];
      v8 = *((_QWORD *)v7 + 1);
      if (v8)
      {
        CFRetain(*((CFTypeRef *)v7 + 1));
        return (CFStringRef)v8;
      }
      break;
    }
    v3 = v2--;
    v4 = *(_DWORD *)&v1[16 * v2];
    if (v4 == a1)
      goto LABEL_15;
    v2 = v3 >> 1;
    v5 = *(_DWORD *)&v1[16 * (v3 >> 1)];
    if (v5 == a1)
      goto LABEL_15;
    if (*(_DWORD *)v1 >= a1 || v5 <= a1)
    {
      v1 += 16 * v2;
      v2 = v3 - v2;
      if (v4 <= a1 || v5 >= a1)
        break;
    }
  }
  *(_DWORD *)bytes = bswap32(a1);
  v9 = CFStringCreateWithBytes(0, bytes, 4, 0x600u, 0);
  if (!v9)
    __assert_rtn("ColorSyncCreateSignatureFromFourCharCode", "ColorSyncTransform.c", 1248, "sig != NULL");
  return v9;
}

CFDataRef createTagData(UInt8 *bytes, CFIndex length, int a3)
{
  if (a3)
    return CFDataCreate(0, bytes, length);
  else
    return CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
}

__CFData *copy_swapped_header(CFDataRef theData)
{
  __CFData *MutableCopy;
  __CFData *v2;
  UInt8 *MutableBytePtr;
  int8x8_t v4;

  if (!theData)
    return 0;
  MutableCopy = CFDataCreateMutableCopy(0, 128, theData);
  v2 = MutableCopy;
  if (MutableCopy)
  {
    CFDataSetLength(MutableCopy, 128);
    MutableBytePtr = CFDataGetMutableBytePtr(v2);
    *(int8x16_t *)MutableBytePtr = vrev32q_s8(*(int8x16_t *)MutableBytePtr);
    v4 = vrev16_s8(*(int8x8_t *)(MutableBytePtr + 24));
    *((int8x8_t *)MutableBytePtr + 2) = vrev32_s8(*(int8x8_t *)(MutableBytePtr + 16));
    *((int8x8_t *)MutableBytePtr + 3) = v4;
    *((_WORD *)MutableBytePtr + 16) = bswap32(*((unsigned __int16 *)MutableBytePtr + 16)) >> 16;
    *((_WORD *)MutableBytePtr + 17) = bswap32(*((unsigned __int16 *)MutableBytePtr + 17)) >> 16;
    *(int8x16_t *)(MutableBytePtr + 36) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 36));
    *(int8x16_t *)(MutableBytePtr + 52) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 52));
    *(int8x16_t *)(MutableBytePtr + 68) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 68));
  }
  return v2;
}

int8x16_t ColorSyncSwapProfileHeader(uint64_t a1)
{
  int8x8_t v1;
  int8x16_t result;

  *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
  v1 = vrev16_s8(*(int8x8_t *)(a1 + 24));
  *(int8x8_t *)(a1 + 16) = vrev32_s8(*(int8x8_t *)(a1 + 16));
  *(int8x8_t *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = bswap32(*(unsigned __int16 *)(a1 + 32)) >> 16;
  *(_WORD *)(a1 + 34) = bswap32(*(unsigned __int16 *)(a1 + 34)) >> 16;
  *(int8x16_t *)(a1 + 36) = vrev32q_s8(*(int8x16_t *)(a1 + 36));
  *(int8x16_t *)(a1 + 52) = vrev32q_s8(*(int8x16_t *)(a1 + 52));
  result = vrev32q_s8(*(int8x16_t *)(a1 + 68));
  *(int8x16_t *)(a1 + 68) = result;
  return result;
}

uint64_t CMMColorSpaceProfile::GetConversionType(CMMColorSpaceProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

float ColorSyncMatrixGetOutputRange(float *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
  if (v2 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID)
    __assert_rtn("ColorSyncMatrixGetOutputRange", "ColorSyncTransformFunctions.c", 603, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  return a1[19];
}

float ColorSyncMatrixGetInputRange(float *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
  if (v2 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID)
    __assert_rtn("ColorSyncMatrixGetInputRange", "ColorSyncTransformFunctions.c", 596, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  return a1[17];
}

__CFDictionary *CMMConvGrayToRGB::FlattenConversion(CMMConvGrayToRGB *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void *v5;
  __CFArray *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  int v12;
  const CFArrayCallBacks *v13;
  CFMutableArrayRef v14;
  __CFArray *v15;
  int v16;
  CFNumberRef v17;
  int v19;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (!Mutable)
    return v4;
  v5 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), (const void *)*MEMORY[0x1E0C9AE50]);
  v6 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v19 = 1065353216;
  valuePtr = 0;
  v7 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v8 = CFNumberCreate(0, kCFNumberFloat32Type, &v19);
  v9 = v8;
  if (v6)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v7 != 0)
  {
    v12 = 0;
    v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v14 = CFArrayCreateMutable(0, 0, v13);
      if (!v14)
        break;
      v15 = v14;
      v16 = 3;
      do
      {
        if (v16 == 3)
          v17 = v9;
        else
          v17 = v7;
        CFArrayAppendValue(v15, v17);
        --v16;
      }
      while (v16);
      CFArrayAppendValue(v15, v7);
      CFArrayAppendValue(v6, v15);
      CFRelease(v15);
      if (++v12 == 3)
        goto LABEL_17;
    }
    CFRelease(v6);
    goto LABEL_20;
  }
LABEL_17:
  if (!v6)
  {
LABEL_20:
    v6 = v4;
    v4 = 0;
    goto LABEL_21;
  }
  CFDictionaryAddValue(v4, kColorSyncConversionMatrix, v6);
LABEL_21:
  CFRelease(v6);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(v4, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), v5);
  CMMConvNode::AddClampingInfo(this, v4);
  return v4;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

CFMutableArrayRef AppleCMMCreateTransformProperty(const __CFData **a1, __CFArray *a2, const __CFDictionary *a3)
{
  CFMutableArrayRef Mutable;
  const UInt8 *CMMStorage;
  uint64_t v7;
  void *ValueAtIndex;
  CFTypeID v10;
  const __CFNumber *Value;
  const void *v12;
  unint64_t A;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFNumber *v17;
  const void *v18;
  unint64_t v19;
  CFTypeID v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  CFTypeID v23;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v25;
  const __CFData *Data;
  const __CFData *v27;
  CC_LONG Length;
  const UInt8 *BytePtr;
  CFDataRef v30;
  CFDataRef v31;
  CFStringRef v32;
  CFArrayRef ProfileSequence;
  CC_MD5_CTX v34;
  void *newValues;
  unsigned __int8 md[8];
  uint64_t v37;
  uint64_t v38;
  CFRange v39;

  Mutable = a2;
  v38 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return Mutable;
  CMMStorage = GetCMMStorage(a1);
  if (!CMMStorage)
    return 0;
  v7 = (uint64_t)CMMStorage;
  if (CFEqual(Mutable, kColorSyncTransformParametricConversionData))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return Mutable;
    if (DoFlattenParametricConversion(v7, Mutable, (uint64_t)a3))
    {
LABEL_6:
      CFRelease(Mutable);
      return 0;
    }
    goto LABEL_30;
  }
  if (CFEqual(Mutable, (CFTypeRef)kColorSyncTransformIteratorFullType))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return Mutable;
    if (!collect_flattened_conversion(*(_QWORD **)(v7 + 72), 1, (uint64_t)a3, Mutable))
      goto LABEL_6;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(Mutable, 0);
    v10 = CFGetTypeID(ValueAtIndex);
    if (v10 == CFDictionaryGetTypeID())
      CFDictionarySetValue((CFMutableDictionaryRef)ValueAtIndex, kColorSyncTransformCodeFragmentType, kColorSyncTransformFullConversionData);
    goto LABEL_30;
  }
  if (CFEqual(Mutable, (CFTypeRef)kColorSyncTransformIteratorCompactType))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return Mutable;
    v34.A = 0;
    if (a3)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a3, kColorSyncConversionGridPoints);
      if (Value)
        CFNumberGetValue(Value, kCFNumberSInt32Type, &v34);
      v12 = CFDictionaryGetValue(a3, (const void *)kColorSyncNxMFormat);
      A = v34.A;
      v14 = v7;
      v15 = (uint64_t)Mutable;
      v16 = (uint64_t)a3;
    }
    else
    {
      v14 = v7;
      v15 = (uint64_t)Mutable;
      v16 = 0;
      v12 = 0;
      A = 0;
    }
    if (!DoFlattenCompactConversion(v14, v15, v16, v12, A))
      goto LABEL_29;
  }
  else
  {
    if (!CFEqual(Mutable, (CFTypeRef)kColorSyncTransformIteratorSimplifiedType))
      return 0;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return Mutable;
    v34.A = 0;
    if (a3)
    {
      v17 = (const __CFNumber *)CFDictionaryGetValue(a3, kColorSyncConversionGridPoints);
      if (v17)
        CFNumberGetValue(v17, kCFNumberSInt32Type, &v34);
      v18 = CFDictionaryGetValue(a3, (const void *)kColorSyncNxMFormat);
      v19 = v34.A;
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    if (!DoFlattenSimplifiedConversion(v7, Mutable, v18, v19))
      goto LABEL_29;
  }
  CFRelease(Mutable);
  Mutable = 0;
LABEL_29:
  if (!Mutable)
    return Mutable;
LABEL_30:
  v20 = CFGetTypeID(Mutable);
  if (v20 == CFArrayGetTypeID())
  {
    newValues = 0;
    v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0);
    if (v21)
    {
      v22 = v21;
      v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID())
      {
        MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v22);
        newValues = MutableCopy;
        if (MutableCopy)
        {
          v25 = MutableCopy;
          Data = CFPropertyListCreateData(0, MutableCopy, kCFPropertyListBinaryFormat_v1_0, 0, 0);
          if (Data)
          {
            v27 = Data;
            *(_QWORD *)md = 0;
            v37 = 0;
            Length = CFDataGetLength(Data);
            BytePtr = CFDataGetBytePtr(v27);
            memset(&v34, 0, sizeof(v34));
            CC_MD5_Init(&v34);
            CC_MD5_Update(&v34, BytePtr, Length);
            CC_MD5_Final(md, &v34);
            CFRelease(v27);
            v30 = CFDataCreate(0, md, 16);
            if (v30)
            {
              v31 = v30;
              CFDictionarySetValue(v25, kColorSyncTransformCodeFragmentMD5, v30);
              CFRelease(v31);
            }
          }
          v32 = kColorSyncTransformProfileSequnce;
          ProfileSequence = ColorSyncTransformGetProfileSequence((ColorSyncTransformRef)a1);
          CFDictionarySetValue(v25, v32, ProfileSequence);
          v39.location = 0;
          v39.length = 1;
          CFArrayReplaceValues(Mutable, v39, (const void **)&newValues, 1);
          CFRelease(newValues);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ColorSyncTransformIterate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeID v12;
  const void *v13;
  CFTypeID v14;
  pthread_mutex_t *v15;
  _OWORD *v16;
  _OWORD *v17;
  CFTypeID v18;
  CFTypeID v19;
  const void *v20;
  const void *v21;
  int v22;
  _OWORD *Instance;
  CFMutableDictionaryRef Mutable;
  void *v25;
  uint64_t v26;
  CFTypeID v27;
  CFTypeID v28;
  int v29;
  uint64_t v30;
  const __CFArray *v31;
  CFIndex Count;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  CFStringRef *v39;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v41;
  CFTypeID v42;
  int v43;
  const __CFDictionary *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  CFTypeID v47;
  const __CFNumber *v48;
  CFTypeID v49;
  const __CFArray *validated_param_array;
  const void *v51;
  float float_value;
  int v53;
  const __CFNumber *v54;
  const void *v55;
  unsigned int v56;
  const __CFArray *v57;
  const __CFArray *v58;
  const __CFArray *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  uint64_t v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  CFIndex v68;
  uint64_t v69;
  uint64_t v70;
  CFTypeID v71;
  const __CFArray *v72;
  const __CFArray *v73;
  CFTypeID v74;
  CFIndex v75;
  float *v76;
  const __CFArray *v77;
  const __CFArray *v78;
  CFTypeID v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  unsigned int properties;
  const void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  CFTypeID v90;
  const __CFData *v91;
  const __CFData *v92;
  CFTypeID v93;
  const __CFNumber *v94;
  const __CFNumber *v95;
  const __CFNumber *v96;
  const UInt8 *BytePtr;
  const __CFArray *v98;
  const __CFArray *v99;
  uint64_t v100;
  uint64_t v101;
  CFTypeID v102;
  uint64_t v103;
  unsigned int (*v104)(uint64_t, _OWORD *, uint64_t);
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t i;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  int v137;
  uint64_t *v138;
  CFTypeRef v139;
  uint64_t v140;
  const void *v141;
  const void *v142;
  CFArrayRef ProfileSequence;
  uint64_t v145;
  const __CFNumber *v146;
  void *value;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  const void *v151;
  BOOL v152;
  uint64_t int32_value;
  unsigned int cf;
  CFTypeRef cfa;
  CFArrayRef *v156;
  uint64_t *v157;
  CFIndex v158;
  uint64_t v159;
  _OWORD v160[3];
  _OWORD v161[2];
  __int128 v162[4];

  if (!a1)
    return 0;
  v12 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v12 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    return 0;
  if (a2)
    v13 = a2;
  else
    v13 = (const void *)kColorSyncTransformIteratorFullType;
  v14 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v14 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    return 0;
  v15 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 136), v13);
  if (v16)
  {
    v17 = v16;
    CFRetain(v16);
    goto LABEL_125;
  }
  v18 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v18 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    goto LABEL_119;
  v19 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v19 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    __assert_rtn("ColorSyncTransformIsNOP", "ColorSyncTransform.c", 1300, "transform != NULL && CFGetTypeID(transform) == ColorSyncTransformGetTypeID()");
  v20 = (const void *)ColorSyncTransformInternalCopyProperty(a1, CFSTR("com.apple.cmm.TransformType"), 0);
  if (v20)
  {
    v21 = v20;
    v22 = CFEqual(v20, CFSTR("NULLTransform"));
    CFRelease(v21);
    if (v22)
    {
LABEL_119:
      v17 = 0;
      goto LABEL_120;
    }
  }
  if (ColorSyncTransformIteratorGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformIteratorGetTypeID_predicate, &__block_literal_global_1035);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  v17 = Instance;
  if (!Instance)
    goto LABEL_120;
  Instance[1] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v156 = (CFArrayRef *)(v17 + 1);
  *((_QWORD *)v17 + 4) = Mutable;
  if (!Mutable)
    goto LABEL_118;
  v25 = (void *)kColorSyncTransformIteratorFullType;
  if (v13)
  {
    v26 = kColorSyncTransformIteratorFullType;
    v27 = CFGetTypeID(v13);
    if (v27 == CFStringGetTypeID())
      v26 = (uint64_t)v13;
    v28 = CFGetTypeID(v13);
    if (v28 == CFDictionaryGetTypeID())
    {
      v29 = CFDictionaryContainsKey((CFDictionaryRef)v13, (const void *)kColorSyncTransformIterationType);
      v30 = (uint64_t)v13;
      v25 = (void *)v26;
      if (v29)
      {
        v25 = (void *)CFDictionaryGetValue((CFDictionaryRef)v13, (const void *)kColorSyncTransformIterationType);
        v30 = (uint64_t)v13;
      }
    }
    else
    {
      v30 = 0;
      v25 = (void *)v26;
    }
  }
  else
  {
    v30 = 0;
  }
  value = v25;
  v31 = (const __CFArray *)ColorSyncTransformInternalCopyProperty(a1, v25, v30);
  *v156 = v31;
  if (!v31
    || (Count = CFArrayGetCount(v31)) == 0
    || (v33 = Count, v34 = malloc_type_calloc(1uLL, 56 * Count, 0x366C5C3DuLL), (*((_QWORD *)v17 + 18) = v34) == 0)
    || (v35 = malloc_type_calloc(1uLL, 152 * v33, 0x26733402uLL), (*((_QWORD *)v17 + 19) = v35) == 0))
  {
LABEL_118:
    CFRelease(v17);
    goto LABEL_119;
  }
  *((_QWORD *)v17 + 3) = v33;
  v36 = *((_QWORD *)v17 + 18) + 32 * v33;
  v37 = v36 + 8 * v33;
  *((_QWORD *)v17 + 15) = v36;
  *((_QWORD *)v17 + 16) = v37;
  *((_QWORD *)v17 + 17) = v37 + 8 * v33;
  *(_OWORD *)((char *)v17 + 52) = *(_OWORD *)(a1 + 88);
  if (v33 < 1)
  {
LABEL_175:
    v120 = 0;
    goto LABEL_176;
  }
  v38 = 0;
  v157 = (uint64_t *)((char *)v17 + 68);
  v148 = (const void *)*MEMORY[0x1E0C9AE50];
  v149 = a3;
  v39 = &kColorSyncSigMediaBlackPointTag;
  v150 = a6;
  v151 = v13;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v156, v38);
    if (!ValueAtIndex)
      __assert_rtn("get_step_type", "ColorSyncTransformIteration.c", 171, "stepInfo != NULL");
    v41 = ValueAtIndex;
    v42 = CFGetTypeID(ValueAtIndex);
    if (v42 != CFDictionaryGetTypeID())
      __assert_rtn("get_step_type", "ColorSyncTransformIteration.c", 172, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    v158 = v38;
    if (CFDictionaryContainsKey(v41, v39[148]) != 1)
    {
      if (CFDictionaryContainsKey(v41, kColorSyncConversionParamCurve0) == 1)
      {
        v43 = 0;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, kColorSyncConversionParamCurve1) == 1)
      {
        v43 = 1;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, kColorSyncConversionParamCurve2) == 1)
      {
        v43 = 2;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, kColorSyncConversionParamCurve3) == 1)
      {
        v43 = 3;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, kColorSyncConversionParamCurve4) == 1)
      {
        v43 = 4;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, (const void *)kColorSyncConversionParamPQEOTF) == 1)
      {
        v43 = 6;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, (const void *)kColorSyncConversionParamPQInvEOTF) == 1)
      {
        v43 = 7;
        goto LABEL_65;
      }
      v44 = v41;
      if (CFDictionaryContainsKey(v41, (const void *)kColorSyncConversionParamHLGInvOETF) == 1)
      {
        v43 = 8;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, (const void *)kColorSyncConversionParamHLGOETF) == 1)
      {
        v43 = 9;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, kColorSyncConversionEXRToneMappingGamma) == 1)
      {
        v43 = 10;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, (const void *)kColorSyncConversionFlexGlobalToneMappingCurve) == 1)
      {
        v43 = 11;
        goto LABEL_65;
      }
      if (CFDictionaryContainsKey(v41, kColorSyncConversionMatrix) == 1)
      {
        v70 = *((_QWORD *)v17 + 18) + 32 * v38;
        *(_DWORD *)v70 = 2;
        *(_QWORD *)(v70 + 8) = -1;
        v71 = CFGetTypeID(v41);
        if (v71 != CFDictionaryGetTypeID())
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 516, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
        memset(v160, 0, sizeof(v160));
        v72 = (const __CFArray *)CFDictionaryGetValue(v41, kColorSyncConversionMatrix);
        if (!v72)
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 522, "array != NULL");
        v73 = v72;
        v74 = CFGetTypeID(v72);
        if (v74 != CFArrayGetTypeID())
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 523, "CFGetTypeID(array) == CFArrayGetTypeID()");
        if (CFArrayGetCount(v73) != 3)
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 524, "CFArrayGetCount(array) == 3");
        v75 = 0;
        v76 = (float *)v160 + 2;
        do
        {
          v77 = (const __CFArray *)CFArrayGetValueAtIndex(v73, v75);
          if (!v77)
            __assert_rtn("get_matrix_row", "ColorSyncTransformIteration.c", 503, "row != NULL");
          v78 = v77;
          v79 = CFGetTypeID(v77);
          if (v79 != CFArrayGetTypeID())
            __assert_rtn("get_matrix_row", "ColorSyncTransformIteration.c", 504, "CFGetTypeID(row) == CFArrayGetTypeID()");
          if (CFArrayGetCount(v78) != 4)
            __assert_rtn("get_matrix_row", "ColorSyncTransformIteration.c", 505, "CFArrayGetCount(row) == 4");
          v80 = CFArrayGetValueAtIndex(v78, 0);
          *(v76 - 2) = get_float_value(v80);
          v81 = CFArrayGetValueAtIndex(v78, 1);
          *(v76 - 1) = get_float_value(v81);
          v82 = CFArrayGetValueAtIndex(v78, 2);
          *v76 = get_float_value(v82);
          v83 = CFArrayGetValueAtIndex(v78, 3);
          v76[1] = get_float_value(v83);
          ++v75;
          v76 += 4;
        }
        while (v75 != 3);
        properties = get_properties(v44, 1);
        v162[0] = v160[0];
        v162[1] = v160[1];
        v162[2] = v160[2];
        ColorSyncMatrixCreate(v162, properties);
        if (v85)
        {
          v86 = v85;
          v87 = *((_QWORD *)v17 + 16);
          if (*(uint64_t *)((char *)v17 + 76) < 1)
          {
            v88 = 0;
LABEL_115:
            CFRetain(v86);
            *(_QWORD *)(v87 + 8 * v88) = v86;
            ++*(_QWORD *)((char *)v17 + 76);
          }
          else
          {
            v88 = 0;
            while (CFEqual(*(CFTypeRef *)(v87 + 8 * v88), v86) != 1)
            {
              if (++v88 >= *(_QWORD *)((char *)v17 + 76))
                goto LABEL_115;
            }
          }
LABEL_116:
          v68 = v158;
          *(_QWORD *)(*((_QWORD *)v17 + 18) + 32 * v158 + 24) = v88;
          CFRelease(v86);
          goto LABEL_117;
        }
      }
      else
      {
        if (CFDictionaryContainsKey(v41, kColorSyncConversionNDLut) != 1)
          __assert_rtn("get_step_type", "ColorSyncTransformIteration.c", 241, "0");
        v89 = *((_QWORD *)v17 + 18) + 32 * v38;
        *(_DWORD *)v89 = 3;
        *(_QWORD *)(v89 + 8) = -1;
        v90 = CFGetTypeID(v41);
        if (v90 != CFDictionaryGetTypeID())
          __assert_rtn("create_nxm", "ColorSyncTransformIteration.c", 539, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
        v91 = (const __CFData *)CFDictionaryGetValue(v41, kColorSyncConversionNDLut);
        if (!v91)
          __assert_rtn("create_nxm", "ColorSyncTransformIteration.c", 543, "data != NULL");
        v92 = v91;
        v93 = CFGetTypeID(v91);
        if (v93 != CFDataGetTypeID())
          __assert_rtn("create_nxm", "ColorSyncTransformIteration.c", 544, "CFGetTypeID(data) == CFDataGetTypeID()");
        v94 = (const __CFNumber *)CFDictionaryGetValue(v41, kColorSyncConversionGridPoints);
        v95 = (const __CFNumber *)CFDictionaryGetValue(v41, kColorSyncConversionInpChan);
        v96 = (const __CFNumber *)CFDictionaryGetValue(v41, kColorSyncConversionOutChan);
        v146 = (const __CFNumber *)CFDictionaryGetValue(v44, (const void *)kColorSyncNxMFormat);
        BytePtr = CFDataGetBytePtr(v92);
        cfa = (CFTypeRef)(int)get_int32_value(v94);
        int32_value = (int)get_int32_value(v95);
        v145 = (int)get_int32_value(v96);
        LODWORD(v94) = get_int32_value(v146);
        LODWORD(v95) = get_properties(v44, 0);
        v98 = (const __CFArray *)CFDictionaryGetValue(v44, CFSTR("com.apple.cmm.FunctionInputRange"));
        v99 = (const __CFArray *)CFDictionaryGetValue(v44, CFSTR("com.apple.cmm.FunctionOutputRange"));
        LODWORD(v160[0]) = (_DWORD)v94;
        *(_QWORD *)((char *)v160 + 4) = int32_value;
        *(_QWORD *)((char *)v160 + 12) = v145;
        *(_QWORD *)((char *)&v160[1] + 4) = cfa;
        *(_QWORD *)((char *)&v160[1] + 12) = BytePtr;
        v100 = ColorSyncNxMCreate(v92, (uint64_t)v160, (int)v95, v98, v99);
        if (v100)
        {
          v86 = (const void *)v100;
          v101 = *((_QWORD *)v17 + 17);
          if (*(uint64_t *)((char *)v17 + 84) < 1)
          {
            v88 = 0;
LABEL_113:
            CFRetain(v86);
            *(_QWORD *)(v101 + 8 * v88) = v86;
            ++*(_QWORD *)((char *)v17 + 84);
          }
          else
          {
            v88 = 0;
            while (CFEqual(*(CFTypeRef *)(v101 + 8 * v88), v86) != 1)
            {
              if (++v88 >= *(_QWORD *)((char *)v17 + 84))
                goto LABEL_113;
            }
          }
          goto LABEL_116;
        }
      }
      v68 = v158;
      *(_QWORD *)(*((_QWORD *)v17 + 18) + 32 * v158 + 24) = -1;
LABEL_117:
      a3 = v149;
      a6 = v150;
      v13 = v151;
      v39 = &kColorSyncSigMediaBlackPointTag;
      goto LABEL_83;
    }
    v43 = 5;
LABEL_65:
    *(_DWORD *)(*((_QWORD *)v17 + 18) + 32 * v38) = 1;
    v45 = CFGetTypeID(v41);
    if (v45 != CFDictionaryGetTypeID())
      __assert_rtn("get_component_for_trc", "ColorSyncTransformIteration.c", 272, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    v46 = (const __CFNumber *)CFDictionaryGetValue(v41, kColorSyncConversionChannelID);
    *(_QWORD *)(*((_QWORD *)v17 + 18) + 32 * v38 + 8) = (int)get_int32_value(v46);
    v47 = CFGetTypeID(v41);
    if (v47 != CFDictionaryGetTypeID())
      __assert_rtn("get_channels_in_stage_count", "ColorSyncTransformIteration.c", 286, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    v48 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("com.apple.cmm.ChannelsInStageCount"));
    *(_QWORD *)(*((_QWORD *)v17 + 18) + 32 * v38 + 16) = (int)get_int32_value(v48);
    v49 = CFGetTypeID(v41);
    if (v49 != CFDictionaryGetTypeID())
      __assert_rtn("create_trc", "ColorSyncTransformIteration.c", 473, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    cf = v43;
    validated_param_array = get_validated_param_array(v41, 0, 1, (void *)kColorSyncConversionParamCurve0);
    v51 = CFArrayGetValueAtIndex(validated_param_array, 0);
    float_value = get_float_value(v51);
    v53 = get_properties(v41, 0);
    v54 = (const __CFNumber *)CFDictionaryGetValue(v41, (const void *)kColorSyncTransformGammaID);
    v55 = CFDictionaryGetValue(v41, (const void *)kColorSyncTransformPureGammaOriginalTRC);
    v56 = get_int32_value(v54);
    v152 = v55 == v148;
    v57 = (const __CFArray *)CFDictionaryGetValue(v41, CFSTR("com.apple.cmm.FunctionInputRange"));
    v58 = (const __CFArray *)CFDictionaryGetValue(v41, CFSTR("com.apple.cmm.FunctionOutputRange"));
    if (cf > 0xA || cf == 5)
      __assert_rtn("ColorSyncTRCCreateWithParams", "ColorSyncTransformFunctions.c", 365, "(trcType >= kColorSyncTRCParametricType0 && trcType <= kColorSyncTRCParametricType4) || (trcType == kColorSyncTRCParametricPQ_EOTF_Type || trcType == kColorSyncTRCParametricPQ_InvOETF_Type) || (trcType == kColorSyncTRCParametricHLG_InvOETF_Type || trcType == kColorSyncTRCParametricHLG_OETF_Type) || (trcType == kColorSyncTRCParametricEXRToneMappingGamma)");
    v59 = v58;
    create_trc_data();
    v61 = v60;
    if (v60)
    {
      v62 = 0x7F7FFFFFFF7FFFFFLL;
      if ((v53 & 4) != 0)
        v62 = 0x3F80000000000000;
      *(_QWORD *)(v60 + 68) = v62;
      *(_DWORD *)(v60 + 16) = cf;
      *(float *)(v60 + 20) = float_value;
      *(_DWORD *)(v60 + 24) = 0;
      *(_DWORD *)(v60 + 28) = 0;
      *(_DWORD *)(v60 + 32) = 0;
      *(_DWORD *)(v60 + 36) = 0;
      *(_DWORD *)(v60 + 40) = 0;
      *(_DWORD *)(v60 + 44) = 0;
      *(_DWORD *)(v60 + 48) = 0;
      *(_DWORD *)(v60 + 84) = v56;
      if (v57)
      {
        v63 = (const __CFNumber *)CFArrayGetValueAtIndex(v57, 0);
        CFNumberGetValue(v63, kCFNumberFloat32Type, (void *)(v61 + 68));
        v64 = (const __CFNumber *)CFArrayGetValueAtIndex(v57, 1);
        CFNumberGetValue(v64, kCFNumberFloat32Type, (void *)(v61 + 72));
      }
      v65 = 0x7F7FFFFFFF7FFFFFLL;
      if ((v53 & 2) != 0)
        v65 = 0x3F80000000000000;
      *(_QWORD *)(v61 + 76) = v65;
      v13 = v151;
      v39 = &kColorSyncSigMediaBlackPointTag;
      if (v59)
      {
        v66 = (const __CFNumber *)CFArrayGetValueAtIndex(v59, 0);
        CFNumberGetValue(v66, kCFNumberFloat32Type, (void *)(v61 + 76));
        v67 = (const __CFNumber *)CFArrayGetValueAtIndex(v59, 1);
        CFNumberGetValue(v67, kCFNumberFloat32Type, (void *)(v61 + 80));
      }
      *(_DWORD *)(v61 + 64) = v53;
      *(_BYTE *)(v61 + 88) = v152;
      a3 = v149;
      a6 = v150;
    }
    else
    {
      a3 = v149;
      a6 = v150;
      v13 = v151;
      v39 = &kColorSyncSigMediaBlackPointTag;
    }
    v68 = v158;
    *(_QWORD *)(*((_QWORD *)v17 + 18) + 32 * v158 + 24) = add_trc((CFTypeRef)v61, *((_QWORD *)v17 + 15), v157);
    if (v61)
      CFRelease((CFTypeRef)v61);
LABEL_83:
    v38 = v68 + 1;
    v69 = *((_QWORD *)v17 + 3);
  }
  while (v38 < v69);
  if (v69 < 1)
    goto LABEL_175;
  v113 = 0;
  v114 = *((_QWORD *)v17 + 19);
  v115 = 24;
  *(_QWORD *)&v116 = -1;
  *((_QWORD *)&v116 + 1) = -1;
  do
  {
    v117 = (_OWORD *)(v114 + v115);
    v117[6] = v116;
    v117[7] = v116;
    v117[4] = v116;
    v117[5] = v116;
    v117[2] = v116;
    v117[3] = v116;
    *v117 = v116;
    v117[1] = v116;
    ++v113;
    v118 = *((_QWORD *)v17 + 3);
    v115 += 152;
  }
  while (v113 < v118);
  if (v118 < 1)
    goto LABEL_175;
  v119 = 0;
  v120 = 0;
  v121 = (_QWORD *)(*((_QWORD *)v17 + 18) + 24);
  v122 = -1;
  do
  {
    v123 = *((_DWORD *)v121 - 6);
    if ((v123 - 2) >= 2)
    {
      if (v123 != 1)
        __assert_rtn("initialize_stages", "ColorSyncTransformIteration.c", 741, "0");
      if (v122 != 1 || v119 && *(v121 - 2) <= *(v121 - 6))
      {
        v126 = 152 * v120++;
        *(_DWORD *)(v114 + v126) = 1;
      }
      v127 = v114 + 152 * v120;
      v128 = v127 + 8 * *(v121 - 2);
      ++*(_QWORD *)(v127 - 144);
      *(_QWORD *)(v128 - 128) = *v121;
      *(_QWORD *)(v127 - 136) = *(v121 - 1);
    }
    else
    {
      v124 = v114 + 152 * v120++;
      *(_DWORD *)v124 = v123;
      v125 = *(_QWORD *)(v124 + 8);
      *(_QWORD *)(v124 + 8) = v125 + 1;
      *(_QWORD *)(v124 + 8 * v125 + 24) = *v121;
    }
    ++v119;
    v121 += 4;
    v122 = v123;
  }
  while (v119 < *((_QWORD *)v17 + 3));
  if (v120 >= 1)
  {
    v129 = 0;
    v130 = 24;
    do
    {
      v159 = v120;
      if (*(_DWORD *)(v114 + 152 * v129) == 1)
      {
        v131 = *(_QWORD *)(v114 + 152 * v129 + 16);
        if (v131 < 1)
        {
LABEL_162:
          v135 = 0;
        }
        else
        {
          v132 = (uint64_t *)(v114 + v130);
          while (1)
          {
            v134 = *v132++;
            v133 = v134;
            if (v134 != -1)
              break;
            if (!--v131)
              goto LABEL_162;
          }
          v135 = ColorSyncTRCGetProperties(*(unsigned int **)(*((_QWORD *)v17 + 15) + 8 * v133));
          v114 = *((_QWORD *)v17 + 19);
        }
        if (*(uint64_t *)(v114 + 152 * v129 + 16) >= 1)
        {
          v136 = 0;
          v137 = v135 & 6;
          do
          {
            if (*(_QWORD *)(v114 + v130 + 8 * v136) == -1)
            {
              if (linear_trc_predicate != -1)
                dispatch_once(&linear_trc_predicate, &__block_literal_global_49);
              v138 = &linear_trc_linear_clamp;
              if (!v137)
                v138 = &linear_trc_linear_no_clamp;
              v139 = (CFTypeRef)*v138;
              CFRetain((CFTypeRef)*v138);
              v140 = add_trc(v139, *((_QWORD *)v17 + 15), v157);
              v114 = *((_QWORD *)v17 + 19);
              *(_QWORD *)(v114 + v130 + 8 * v136) = v140;
            }
            ++v136;
          }
          while (v136 < *(_QWORD *)(v114 + 152 * v129 + 16));
        }
      }
      ++v129;
      v130 += 152;
      v120 = v159;
      v13 = v151;
    }
    while (v129 != v159);
    a3 = v149;
    a6 = v150;
  }
LABEL_176:
  *(_QWORD *)((char *)v17 + 44) = v120;
  if (*(uint64_t *)((char *)v17 + 68) >= 1)
    *(_QWORD *)((char *)v17 + 92) = *((_QWORD *)v17 + 15);
  if (*(uint64_t *)((char *)v17 + 76) >= 1)
    *(_QWORD *)((char *)v17 + 100) = *((_QWORD *)v17 + 16);
  if (*(uint64_t *)((char *)v17 + 84) >= 1)
    *(_QWORD *)((char *)v17 + 108) = *((_QWORD *)v17 + 17);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), (const void *)kColorSyncTransformIterationType, value);
  v141 = (const void *)ColorSyncTransformInternalCopyProperty(a1, kColorSyncTransformDstSpace, 0);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), kColorSyncTransformDstSpace, v141);
  CFRelease(v141);
  v142 = (const void *)ColorSyncTransformInternalCopyProperty(a1, kColorSyncTransformSrcSpace, 0);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), kColorSyncTransformSrcSpace, v142);
  CFRelease(v142);
  ProfileSequence = ColorSyncTransformGetProfileSequence((ColorSyncTransformRef)a1);
  if (ProfileSequence)
    CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), CFSTR("com.apple.cmm.ProfileSequence"), ProfileSequence);
LABEL_120:
  v102 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
  {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
    if (v17)
      goto LABEL_122;
    goto LABEL_185;
  }
  if (!v17)
    goto LABEL_185;
LABEL_122:
  if (!v13 || v102 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
LABEL_185:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if (v17)
      goto LABEL_126;
    return 0;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 136), v13, v17);
  v15 = (pthread_mutex_t *)(a1 + 16);
LABEL_125:
  pthread_mutex_unlock(v15);
LABEL_126:
  v103 = *((_QWORD *)v17 + 4);
  v104 = *(unsigned int (**)(uint64_t, _OWORD *, uint64_t))(a3 + 16);
  v105 = *(_OWORD *)((char *)v17 + 56);
  v106 = *(_OWORD *)((char *)v17 + 88);
  v160[2] = *(_OWORD *)((char *)v17 + 72);
  v161[0] = v106;
  *(_OWORD *)((char *)v161 + 12) = *(_OWORD *)((char *)v17 + 100);
  v160[0] = *(_OWORD *)((char *)v17 + 40);
  v160[1] = v105;
  if (v104(a3, v160, v103))
  {
    if (*(uint64_t *)((char *)v17 + 44) >= 1)
    {
      v107 = 0;
      for (i = 0; i < *(_QWORD *)((char *)v17 + 44); ++i)
      {
        v109 = *((_QWORD *)v17 + 19);
        v110 = *(_DWORD *)(v109 + v107);
        if (v110 == 1)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a4 + 16))(a4, i, *(_QWORD *)(v109 + v107 + 16), v109 + v107 + 24))goto LABEL_139;
        }
        else
        {
          if (v110 == 3)
          {
            v111 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a6 + 16))(a6, i, *(_QWORD *)(v109 + v107 + 24));
          }
          else
          {
            if (v110 != 2)
              __assert_rtn("ColorSyncTransformIterate", "ColorSyncTransformIteration.c", 943, "0");
            v111 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a5, i, *(_QWORD *)(v109 + v107 + 24));
          }
          if ((v111 & 1) == 0)
            goto LABEL_139;
        }
        v107 += 152;
      }
    }
    v112 = 1;
  }
  else
  {
LABEL_139:
    v112 = 0;
  }
  CFRelease(v17);
  return v112;
}

float get_float_value(const void *a1)
{
  CFTypeID v2;
  float valuePtr;

  valuePtr = 0.0;
  if (!a1)
    return 0.0;
  v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID())
    __assert_rtn("get_float_value", "ColorSyncTransformIteration.c", 262, "CFGetTypeID(num) == CFNumberGetTypeID()");
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat32Type, &valuePtr) != 1)
    __assert_rtn("get_float_value", "ColorSyncTransformIteration.c", 263, "CFNumberGetValue(num, kCFNumberFloat32Type, &val) == true");
  return valuePtr;
}

const __CFArray *get_validated_param_array(const __CFDictionary *a1, const __CFArray *a2, CFIndex a3, void *key)
{
  const __CFArray *v4;
  const __CFArray *Value;
  CFTypeID v7;

  v4 = a2;
  if (!a2)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
    if (!Value)
      __assert_rtn("get_validated_param_array", "ColorSyncTransformIteration.c", 372, "array != NULL");
    v4 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 != CFArrayGetTypeID())
      __assert_rtn("get_validated_param_array", "ColorSyncTransformIteration.c", 373, "CFGetTypeID(array) == CFArrayGetTypeID()");
    if (CFArrayGetCount(v4) < a3)
      __assert_rtn("get_validated_param_array", "ColorSyncTransformIteration.c", 374, "CFArrayGetCount(array) >= count");
  }
  return v4;
}

const __CFNumber *get_int32_value(const __CFNumber *result)
{
  const __CFNumber *v1;
  CFTypeID v2;
  unsigned int valuePtr;

  valuePtr = 0;
  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 != CFNumberGetTypeID())
      __assert_rtn("get_int32_value", "ColorSyncTransformIteration.c", 251, "CFGetTypeID(num) == CFNumberGetTypeID()");
    if (CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr) != 1)
      __assert_rtn("get_int32_value", "ColorSyncTransformIteration.c", 252, "CFNumberGetValue(num, kCFNumberSInt32Type, &val) == true");
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t ColorSyncTransformInternalCopyProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeID v6;
  uint64_t v7;
  const void *Value;
  uint64_t (*v9)(uint64_t, const void *, uint64_t);

  if (!a1)
    return 0;
  v6 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  v7 = 0;
  if (a2 && v6 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 112), a2))
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
      v7 = (uint64_t)Value;
      if (Value)
        CFRetain(Value);
    }
    else
    {
      v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(a1 + 80) + 64);
      if (v9)
        v7 = v9(a1, a2, a3);
      else
        v7 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  return v7;
}

uint64_t get_properties(const __CFDictionary *a1, int a2)
{
  const void *Value;
  const void *v5;
  const void *v6;
  const void *v7;
  int v8;

  Value = CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"));
  v5 = (const void *)*MEMORY[0x1E0C9AE50];
  v6 = CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.FunctionDoesOutputClamp"));
  v7 = CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.FunctionDoesInputClamp"));
  if (a2)
  {
    a2 = 16 * (CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.OneChannelActiveMatrix")) == v5);
    v8 = 8 * (CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.OneChannelInputMatrix")) == v5);
  }
  else
  {
    v8 = 0;
  }
  return (Value == v5) | (2 * (v6 == v5)) | (4 * (v7 == v5)) | a2 | v8;
}

double create_trc_data()
{
  _OWORD *Instance;
  double result;

  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    result = 0.0;
    Instance[4] = 0u;
    Instance[5] = 0u;
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
  }
  return result;
}

uint64_t add_trc(CFTypeRef cf2, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;

  if (!cf2)
    return -1;
  if (*a3 < 1)
  {
    v6 = 0;
LABEL_9:
    CFRetain(cf2);
    *(_QWORD *)(a2 + 8 * v6) = cf2;
    ++*a3;
  }
  else
  {
    v6 = 0;
    while (CFEqual(*(CFTypeRef *)(a2 + 8 * v6), cf2) != 1)
    {
      if (++v6 >= *a3)
        goto LABEL_9;
    }
  }
  return v6;
}

BOOL trc_equal_trc(unsigned int *cf, uint64_t a2)
{
  _BOOL8 result;
  CFTypeID v5;
  CFTypeID v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _BOOL4 v26;
  float v27;
  uint64_t v28;

  if (cf == (unsigned int *)a2)
    return 1;
  result = 0;
  if (cf && a2)
  {
    v5 = CFGetTypeID(cf);
    if (ColorSyncTRCGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
    if (v5 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
      return 0;
    v6 = CFGetTypeID((CFTypeRef)a2);
    if (ColorSyncTRCGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
    if (v6 == ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID && (v7 = cf[4], v7 == *(_DWORD *)(a2 + 16)))
    {
      v9 = cf[5];
      v8 = cf[6];
      v10 = *(const void **)(cf + 7);
      v12 = *((float *)cf + 9);
      v11 = *((float *)cf + 10);
      v14 = *(unsigned int *)(a2 + 20);
      v13 = *(unsigned int *)(a2 + 24);
      v15 = *(const void **)(a2 + 28);
      v16 = *(float *)&v10;
      v18 = *(float *)(a2 + 36);
      v17 = *(float *)(a2 + 40);
      v19 = *((float *)&v10 + 1);
      switch(v7)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
          if (*(float *)&v9 == *(float *)&v14)
            goto LABEL_13;
          return 0;
        case 5u:
          v28 = v9 | (v8 << 32);
          if (v28 != (v14 | (v13 << 32)) || v10 != v15 && memcmp(v10, v15, 4 * v28))
            return 0;
          goto LABEL_19;
        case 6u:
        case 7u:
        case 8u:
        case 0xAu:
LABEL_13:
          result = 0;
          if (*(float *)&v8 == *(float *)&v13 && v16 == *(float *)&v15)
          {
            result = 0;
            if (v19 == *((float *)&v15 + 1) && v12 == v18 && v11 == v17 && *((float *)cf + 11) == *(float *)(a2 + 44))
              goto LABEL_19;
          }
          return result;
        case 9u:
          result = 0;
          if (*(float *)&v8 != *(float *)&v13)
            return result;
          if (v16 != *(float *)&v15)
            return result;
          result = 0;
          if (v19 != *((float *)&v15 + 1) || v12 != v18 || v11 != v17)
            return result;
LABEL_19:
          v20 = ColorSyncTRCGetProperties(cf);
          if (v20 != ColorSyncTRCGetProperties((unsigned int *)a2))
            return 0;
          v21 = ColorSyncTRCGetInputRange((float *)cf);
          v22 = ColorSyncTRCGetInputRange((float *)a2);
          result = 0;
          if (v21 == v22)
          {
            v23 = ColorSyncTRCGetOutputRange((float *)cf);
            v25 = v24;
            v26 = v23 == ColorSyncTRCGetOutputRange((float *)a2);
            result = v25 == v27 && v26;
          }
          break;
        default:
          __assert_rtn("trc_equal_trc", "ColorSyncTransformFunctions.c", 139, "0");
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

float ColorSyncTRCGetOutputRange(float *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncTRCGetOutputRange", "ColorSyncTransformFunctions.c", 423, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  return a1[19];
}

float ColorSyncTRCGetInputRange(float *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncTRCGetInputRange", "ColorSyncTransformFunctions.c", 416, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  return a1[17];
}

uint64_t ColorSyncTRCGetProperties(unsigned int *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncTRCGetProperties", "ColorSyncTransformFunctions.c", 402, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  return a1[16];
}

CFArrayRef ColorSyncTransformGetProfileSequence(CFArrayRef transform)
{
  CFArrayRef v1;
  CFTypeID v2;

  if (transform)
  {
    v1 = transform;
    v2 = CFGetTypeID(transform);
    if (ColorSyncTransformGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
    if (v2 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
      return (CFArrayRef)*((_QWORD *)v1 + 15);
    else
      return 0;
  }
  return transform;
}

const UInt8 *GetCMMStorage(const __CFData **a1)
{
  CFTypeID v2;
  const __CFData *v3;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v2 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID && (v3 = a1[13]) != 0)
    return CFDataGetBytePtr(v3);
  else
    return 0;
}

CFIndex collect_flattened_conversion(_QWORD *a1, int a2, uint64_t a3, CFArrayRef theArray)
{
  _QWORD *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  CFRange v12;

  if (a1)
  {
    v7 = a1;
    do
    {
      if (!a2 || ((*(uint64_t (**)(_QWORD *))(*v7 + 224))(v7) & 1) == 0)
      {
        v8 = (const __CFArray *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 208))(v7, a3);
        if (!v8)
        {
          CFArrayRemoveAllValues(theArray);
          return CFArrayGetCount(theArray);
        }
        v9 = v8;
        v10 = CFGetTypeID(v8);
        if (v10 == CFArrayGetTypeID())
        {
          v12.length = CFArrayGetCount(v9);
          v12.location = 0;
          CFArrayAppendArray(theArray, v9, v12);
        }
        else
        {
          CFArrayAppendValue(theArray, v9);
        }
        CFRelease(v9);
      }
      v7 = (_QWORD *)v7[2];
    }
    while (v7);
  }
  return CFArrayGetCount(theArray);
}

__CFDictionary *CMMConvTRC::FlattenConversion(CMMConvTRC *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  int v9;
  CFStringRef *v10;
  const void *v11;
  const void *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  char *v15;
  CFNumberRef v16;
  char *v17;
  CFNumberRef v18;
  CFArrayRef v19;
  CFNumberRef v20;
  __CFArray *v21;
  CFArrayRef v22;
  CFArrayRef v23;
  CFStringRef v24;
  CFMutableArrayRef v25;
  uint64_t v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  const void *v30;
  const void *v31;
  __CFDictionary *v32;
  float v33;
  float v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFArrayRef v37;
  float v38;
  float v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFArrayRef v42;
  int v44;
  int valuePtr;
  void *v46[2];
  void *values;
  CFNumberRef v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.ChannelsInStageCount"), v7);
    CFRelease(v8);
  }
  v9 = *((_DWORD *)this + 22);
  if (v9)
  {
    if (v9 != 1)
      goto LABEL_37;
    v10 = &kColorSyncConversionParamCurve0;
    switch(*((_DWORD *)this + 25))
    {
      case 0:
        break;
      case 1:
        v10 = &kColorSyncConversionParamCurve1;
        break;
      case 2:
        v10 = &kColorSyncConversionParamCurve2;
        break;
      case 3:
        v10 = &kColorSyncConversionParamCurve3;
        break;
      case 4:
        v10 = &kColorSyncConversionParamCurve4;
        break;
      case 9:
        v10 = (CFStringRef *)&kColorSyncConversionEXRToneMappingGamma;
        break;
      case 0xA:
        __assert_rtn("FlattenConversion", "CMMConversionClasses.cpp", 1120, "0");
      default:
        __assert_rtn("FlattenConversion", "CMMConversionClasses.cpp", 1123, "0");
    }
    v24 = *v10;
    if (!*v10)
      goto LABEL_37;
    v25 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v25)
      goto LABEL_37;
    v21 = v25;
    v26 = 0;
    while (1)
    {
      v27 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v26 + 112);
      if (!v27)
        break;
      v28 = v27;
      CFArrayAppendValue(v21, v27);
      CFRelease(v28);
      v26 += 4;
      if (v26 == 28)
      {
        CFDictionaryAddValue(Mutable, v24, v21);
        break;
      }
    }
  }
  else
  {
    valuePtr = 4097;
    v11 = (const void *)(*(uint64_t (**)(CMMConvTRC *, const __CFDictionary *, int *))(*(_QWORD *)this + 248))(this, a2, &valuePtr);
    if (v11)
    {
      v12 = v11;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v11);
      CFRelease(v12);
    }
    v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v13)
    {
      v14 = v13;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v13);
      CFRelease(v14);
    }
    if (!*((_BYTE *)this + 33))
      goto LABEL_37;
    v44 = 0;
    if (*((_BYTE *)this + 34))
      v15 = (char *)&v44;
    else
      v15 = (char *)this + 144;
    v16 = CFNumberCreate(0, kCFNumberFloat32Type, v15);
    if (*((_BYTE *)this + 34))
      v17 = (char *)&v44;
    else
      v17 = (char *)this + 148;
    v18 = CFNumberCreate(0, kCFNumberFloat32Type, v17);
    values = v16;
    v48 = v18;
    v19 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v16);
    CFRelease(v18);
    if (v19)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionNegBoundary"), v19);
      CFRelease(v19);
    }
    v20 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    v21 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    v46[0] = v20;
    v46[1] = v21;
    v22 = CFArrayCreate(0, (const void **)v46, 2, MEMORY[0x1E0C9B378]);
    if (v22)
    {
      v23 = v22;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionPosBoundary"), v22);
      CFRelease(v23);
    }
    CFRelease(v20);
  }
  CFRelease(v21);
LABEL_37:
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v29);
  CFRelease(v29);
  v30 = (const void *)*MEMORY[0x1E0C9AE50];
  if (*((_BYTE *)this + 96))
    v31 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v31 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, v31);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v32, *((float *)this + 10), *((float *)this + 11));
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), v30);
  CMMConvNode::AddClampingInfo(this, Mutable);
  if (*((_BYTE *)this + 35))
  {
    v34 = *((float *)this + 10);
    v33 = *((float *)this + 11);
    valuePtr = LODWORD(v33);
    *(float *)v46 = v34;
    if (v34 != 0.0 || v33 != 1.0)
    {
      v35 = CFNumberCreate(0, kCFNumberFloat32Type, v46);
      v36 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      values = v35;
      v48 = v36;
      v37 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
      CFRelease(v35);
      CFRelease(v36);
      if (v37)
      {
        CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionInputRange"), v37);
        CFRelease(v37);
      }
    }
  }
  if (*((_BYTE *)this + 36))
  {
    v39 = *((float *)this + 10);
    v38 = *((float *)this + 11);
    valuePtr = LODWORD(v38);
    *(float *)v46 = v39;
    if (v39 != 0.0 || v38 != 1.0)
    {
      v40 = CFNumberCreate(0, kCFNumberFloat32Type, v46);
      v41 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      values = v40;
      v48 = v41;
      v42 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
      CFRelease(v40);
      CFRelease(v41);
      if (v42)
      {
        CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionOutputRange"), v42);
        CFRelease(v42);
      }
    }
  }
  return Mutable;
}

void CMMConvNode::AddClampingInfo(CMMConvNode *this, CFMutableDictionaryRef theDict)
{
  const void **v4;

  v4 = (const void **)MEMORY[0x1E0C9AE50];
  if (*((_BYTE *)this + 35))
    CFDictionaryAddValue(theDict, CFSTR("com.apple.cmm.FunctionDoesInputClamp"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (*((_BYTE *)this + 36))
    CFDictionaryAddValue(theDict, CFSTR("com.apple.cmm.FunctionDoesOutputClamp"), *v4);
}

void CMMConvNode::AddFixedPointClippingRange(CMMConvNode *this, __CFDictionary *a2, float a3, float a4)
{
  CFNumberRef v6;
  CFNumberRef v7;
  CFArrayRef v8;
  float v9;
  float valuePtr;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v9 = a4;
  valuePtr = a3;
  if (a3 != 0.0 || a4 != 1.0)
  {
    v6 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
    v7 = CFNumberCreate(0, kCFNumberFloat32Type, &v9);
    values[0] = v6;
    values[1] = v7;
    v8 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
    if (v6)
      CFRelease(v6);
    if (v7)
      CFRelease(v7);
    if (v8)
    {
      CFDictionaryAddValue(this, kColorSyncFixedPointRange, v8);
      CFRelease(v8);
    }
  }
}

int8x16_t ColorSyncMatrixCreate(__int128 *a1, unsigned int a2)
{
  uint64_t Instance;
  int8x16_t result;
  __int128 v6;
  __int128 v7;
  int8x16_t v8;

  if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(_QWORD *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    v6 = *a1;
    v7 = a1[2];
    *(_OWORD *)(Instance + 32) = a1[1];
    *(_OWORD *)(Instance + 48) = v7;
    *(_OWORD *)(Instance + 16) = v6;
    *(int32x2_t *)&v6 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a2), (int8x8_t)0x200000004));
    v8.i64[0] = (int)v6;
    v8.i64[1] = SDWORD1(v6);
    result = vbslq_s8(v8, (int8x16_t)vdupq_n_s64(0x7F7FFFFFFF7FFFFFuLL), (int8x16_t)vdupq_n_s64(0x3F80000000000000uLL));
    *(int8x16_t *)(Instance + 68) = result;
    *(_DWORD *)(Instance + 64) = a2;
  }
  return result;
}

uint64_t CMMConvNode::IsFloatingPointNOP(CMMConvNode *this)
{
  return 0;
}

uint64_t ColorSyncMatrixGetProperties(unsigned int *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
  if (v2 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID)
    __assert_rtn("ColorSyncMatrixGetProperties", "ColorSyncTransformFunctions.c", 584, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  return a1[16];
}

__n128 ColorSyncMatrixGetFunction@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v4;
  __int128 v5;
  __n128 result;

  v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
  if (v4 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID)
    __assert_rtn("ColorSyncMatrixGetFunction", "ColorSyncTransformFunctions.c", 577, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

BOOL ColorSyncVerifyGenericGrayGamma2_2(const ColorSyncProfile *a1)
{
  return verify_GenericGrayGamma2_2(a1, 0);
}

void *allocate(size_t a1, unint64_t a2, void *a3)
{
  return malloc_type_malloc(a1, 0xEAE56095uLL);
}

void CMMConvInvertedTRC::~CMMConvInvertedTRC(CMMConvInvertedTRC *this)
{
  pthread_mutex_t **v1;

  CMMConvInvertedTRC::~CMMConvInvertedTRC(this);
  CMMBase::operator delete(v1);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E215DE48;
  v2 = (_QWORD *)*((_QWORD *)this + 21);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  CMMConvTRC::~CMMConvTRC(this);
}

void CMMConvTRC::~CMMConvTRC(CMMConvTRC *this)
{
  pthread_mutex_t **v1;

  CMMConvTRC::~CMMConvTRC(this);
  CMMBase::operator delete(v1);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *exception;

  *(_QWORD *)this = off_1E215BB48;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  if (!*((_DWORD *)this + 22))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 13);
    if (!v5)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
    v6 = v5[1];
    if (v6)
    {
      v7 = v6 - 1;
      v5[1] = v7;
      if (!v7)
        (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    }
  }
}

CMMConvNode *ConversionManager::MakeConversionSequence()
{
  uint64_t v0;
  int *v1;
  const __CFDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  const __CFDictionary *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  _BOOL4 v13;
  float HDRMediaReferenceWhite;
  unsigned int v15;
  float v16;
  int v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  CMMProfile *v21;
  int v22;
  int v23;
  uint64_t v24;
  const UInt8 **v25;
  ConversionManager *v26;
  const ColorSyncProfile *v27;
  void *FlexTRCOptions;
  const void *v29;
  const UInt8 *CICPInfo;
  int v31;
  const __CFNumber *Value;
  const __CFNumber *v33;
  CFTypeID v34;
  int v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  int v39;
  unsigned __int8 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  uint64_t v44;
  const UInt8 *v45;
  int v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  int v60;
  int v61;
  const __CFDictionary *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 **v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  const ColorSyncProfile *v71;
  unint64_t FlexLumaScalingOptions;
  uint64_t v73;
  unsigned __int8 *Tag;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  _DWORD *v78;
  unsigned __int8 *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  const __CFData *v100;
  const __CFDictionary *v101;
  CMMTable *v102;
  const __CFArray *v103;
  unint64_t v104;
  CMMMemMgr *v105;
  _QWORD *FlexTRCLookup;
  uint64_t v107;
  CMMTable *v108;
  const __CFArray *v109;
  CMMTable **v110;
  unint64_t v111;
  CMMMemMgr *v112;
  _QWORD *v113;
  uint64_t v114;
  CMMTable *v115;
  const __CFArray *v116;
  unint64_t v117;
  CMMMemMgr *v118;
  _QWORD *v119;
  uint64_t v120;
  CMMTable *v121;
  const __CFArray *v122;
  unint64_t v123;
  CMMMemMgr *v124;
  _QWORD *v125;
  uint64_t v126;
  CMMPQCurveTag *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  CMMHLGCurveTag *v132;
  uint64_t v133;
  uint64_t v134;
  CMMCurveTag *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  unsigned int *v146;
  const void *v147;
  CMMLutTagBase *v148;
  const void *v149;
  CMMLutTag *v150;
  unsigned int *v151;
  CMMLutTag *v152;
  uint64_t v153;
  int v154;
  int v155;
  _BOOL4 HasCLUT;
  BOOL v157;
  unsigned int v158;
  int v159;
  uint64_t v161;
  unsigned int v162;
  int v163;
  uint64_t v165;
  char v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _DWORD *v173;
  _QWORD *MatrixConv;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _BOOL4 v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _DWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  uint64_t v203;
  unsigned int v204;
  int v205;
  uint64_t v207;
  unsigned int v208;
  char v209;
  uint64_t v210;
  __int128 *v211;
  uint64_t i;
  int v213;
  char *v214;
  float v215;
  CMMConvNode *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  const __CFDictionary *v223;
  _BOOL4 v225;
  uint64_t v226;
  _BOOL4 v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  uint64_t v236;
  uint64_t v237;
  int64x2_t v238;
  uint64x2_t v239;
  int8x16_t v240;
  int8x16_t v241;
  _QWORD *v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  uint64_t v246;
  int64x2_t v247;
  uint64x2_t v248;
  int8x16_t v249;
  int8x16_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  const __CFDictionary *v258;
  int v259;
  int *v260;
  uint64_t v261;
  int64x2_t v262;
  _DWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  int *v266;
  uint64_t v267;
  int64x2_t v268;
  _DWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  char v275;
  int v276;
  char v277;
  uint64_t v278;
  _QWORD *v279;
  int v280;
  float *v281;
  uint64_t v282;
  __int128 v283;
  int v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  float *RGBtoYCCMatrix;
  float *YCCtoRGBMatrix;
  BOOL v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  unsigned __int8 *v299;
  uint64_t v300;
  int v301;
  _BOOL4 v302;
  CMMPQCurveTag *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  CMMPQCurveTag *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  CMMPQCurveTag *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  float *LuminanceCoefficients;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  _BOOL4 v324;
  ConversionManager *v325;
  int v326;
  const void *v327;
  const void *v328;
  _BOOL4 v329;
  const void *v330;
  _BOOL4 v331;
  int v332;
  unsigned int v333;
  int v334;
  uint64_t v335;
  BOOL v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  ConversionManager *v343;
  float *v344;
  float *v345;
  uint64_t v346;
  float v347;
  float v348;
  float v349;
  float v350;
  uint64_t WhitePoint;
  int v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  ConversionManager *v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  char v363;
  int v364;
  _QWORD *v365;
  unint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _DWORD *v372;
  uint64_t v373;
  unint64_t v374;
  _QWORD *v375;
  _QWORD *v376;
  int v377;
  uint64_t v378;
  __int128 *v379;
  int v380;
  BOOL v381;
  uint64_t v382;
  int *v383;
  int v384;
  int v385;
  float v386;
  float v387;
  uint64_t v388;
  float v389;
  float v390;
  CMMConvNode *v391;
  float v392;
  int v393;
  float v394;
  uint64_t v395;
  int v396;
  float v397;
  float v398;
  uint64_t v399;
  uint64_t v400;
  float v401;
  float *v402;
  float *v403;
  uint64_t v404;
  float v405;
  double v406;
  float v407;
  uint64_t v408;
  float v409;
  float *v410;
  uint64_t v411;
  double v412;
  float v413;
  double v414;
  unint64_t v415;
  BOOL v416;
  uint64_t v417;
  unint64_t v418;
  double v419;
  uint64_t v420;
  float v421;
  float v422;
  uint64_t v423;
  uint64_t v424;
  double v425;
  uint64_t v426;
  float v427;
  uint64_t v428;
  float *v429;
  unint64_t v430;
  unint64_t v431;
  double v432;
  float *v434;
  uint64_t v435;
  float v436;
  float v437;
  float v438;
  float v439;
  double v440;
  int v441;
  unsigned int v442;
  CMMConvNode *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  CMMConvNode *v448;
  CMMConvNode *v449;
  int v450;
  uint64_t v451;
  int *v452;
  int v453;
  int v454;
  CFDictionaryRef v455;
  int v456;
  unint64_t v457;
  int v458;
  CMMConvNode *v459;
  void *v460;
  BOOL v461;
  _DWORD *v463;
  _DWORD *v464;
  _DWORD *v465;
  _DWORD *v466;
  _DWORD *v467;
  _DWORD *v468;
  _DWORD *exception;
  _DWORD *v470;
  _DWORD *v471;
  int v472;
  const void *v473;
  int *v474;
  _BOOL4 v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  unsigned int v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  uint64_t v484;
  CFDictionaryRef theDict;
  uint64_t v486;
  uint64_t v487;
  unsigned int *v488;
  CMMProfile *v489;
  unsigned int v490;
  unsigned int v491;
  uint64_t v492;
  char v493;
  uint64_t v494;
  int v495;
  unsigned int v496;
  int v497;
  CMMConvNode **v498;
  ConversionManager *v499;
  char v500;
  void (**v501)(CMMRGBCurves *__hidden);
  __int128 v502;
  unsigned __int8 *v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD v506[2];
  __int128 valuePtr[768];
  unint64_t v508;
  _OWORD v509[2];
  _BYTE v510[1024];
  _DWORD v511[256];
  uint64_t v512;
  int v513;
  _BYTE v514[1024];
  __int128 v515[3];
  uint64_t v516;
  uint64_t v517;
  float v518;
  _BYTE v519[4];
  uint64_t v520;
  int v521;
  uint64_t v522;
  int v523;
  _DWORD v524[9];
  uint64_t v525;

  v499 = (ConversionManager *)MEMORY[0x1E0C80A78]();
  v525 = *MEMORY[0x1E0C80C00];
  memset(v509, 0, 24);
  v501 = off_1E215C3F0;
  v502 = 0uLL;
  v504 = 0;
  v505 = 0;
  v503 = 0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16) - v3;
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = v2;
  v6 = v1;
  v7 = v0;
  v8 = v4 / 40;
  if (v8 <= 1)
    v9 = 1;
  else
    v9 = v8;
  if (*(_BYTE *)(v3 + 34))
  {
    v10 = 0;
    v11 = (unsigned __int8 *)(v3 + 74);
    while (v9 - 1 != v10)
    {
      v12 = *v11;
      v11 += 40;
      ++v10;
      if (!v12)
        goto LABEL_12;
    }
    v10 = v9;
LABEL_12:
    v13 = v10 < v8;
  }
  else
  {
    v13 = 1;
  }
  v475 = v13;
  *((_QWORD *)v499 + 2) = 0;
  *((_QWORD *)v499 + 3) = 0;
  HDRMediaReferenceWhite = ColorSyncOptionsGetHDRMediaReferenceWhite(v2);
  v15 = ColorSyncOptionsLegacyHDREcosystemRequested(v5);
  v16 = 100.0;
  if (HDRMediaReferenceWhite == 100.0)
    v17 = 1;
  else
    v17 = v15;
  *((_BYTE *)v499 + 61) = v17;
  if (!v17)
    v16 = HDRMediaReferenceWhite;
  v498 = (CMMConvNode **)((char *)v499 + 16);
  *((float *)v499 + 16) = v16;
  if (v5)
  {
    v18 = CFGetTypeID(v5);
    if (v18 == CFDictionaryGetTypeID()
      && CFDictionaryContainsKey(v5, CFSTR("com.apple.cmm.kColorSyncHDRMediaReferenceWhite"))
      && ColorSyncOptionsGetHDRMediaReferenceWhite(v5) == 203.0)
    {
      *((_DWORD *)v499 + 16) = 1128988672;
      *((_BYTE *)v499 + 61) = 0;
    }
  }
  if (ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(v5))
  {
    *((_DWORD *)v499 + 16) = 1128988672;
    *((_BYTE *)v499 + 61) = 0;
  }
  v474 = v6;
  theDict = v5;
  if (ColorSyncOptionsDisplayReferredToneMappingRequested(v5))
  {
    *((_DWORD *)v499 + 16) = 1128988672;
    *((_BYTE *)v499 + 61) = 0;
  }
  v19 = *(_QWORD *)(v7 + 8);
  v20 = *(_QWORD *)(v7 + 16);
  if (v19 == v20)
    goto LABEL_722;
  v21 = 0;
  v22 = 0;
  v473 = (const void *)*MEMORY[0x1E0C9AE50];
  v490 = -1;
  v23 = 1022739087;
  v472 = 1036831949;
  v481 = v7;
  do
  {
    v24 = v490;
    v25 = *(const UInt8 ***)(v19 + 8);
    v490 = *(_DWORD *)(v19 + 16);
    v480 = *(_DWORD *)(v19 + 20);
    v484 = *(_QWORD *)(v7 + 8);
    v500 = 0;
    v478 = *(unsigned __int8 *)(v19 + 33);
    v486 = v19;
    v489 = (CMMProfile *)v25;
    if (*v498)
    {
      v26 = v499;
      *((_QWORD *)v499 + 9) = 0;
LABEL_60:
      *((_QWORD *)v26 + 10) = 0;
      goto LABEL_61;
    }
    v27 = (const ColorSyncProfile *)v25[2];
    FlexTRCOptions = (void *)ColorSyncOptionsGetFlexTRCOptions(v27, theDict);
    if (FlexTRCOptions)
    {
      FlexTRCOptions = ColorSyncProfileCopyFlexGTCInfo((uint64_t)v27);
      if (!FlexTRCOptions)
        goto LABEL_56;
      v29 = FlexTRCOptions;
      CICPInfo = ColorSyncProfileGetCICPInfo((const UInt8 *)v27);
      if (!CICPInfo)
      {
        CFRelease(v29);
        FlexTRCOptions = 0;
LABEL_56:
        v19 = v486;
        goto LABEL_59;
      }
      v31 = *CICPInfo;
      Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v29, (const void *)kColorSyncPreGainMapCICP);
      if (Value && (v33 = Value, v34 = CFGetTypeID(Value), v34 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr[0]) = 0;
        if (CFNumberGetValue(v33, kCFNumberSInt32Type, valuePtr) == 1)
          v35 = LOBYTE(valuePtr[0]);
        else
          v35 = 0;
      }
      else
      {
        v35 = 0;
      }
      v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v29, (const void *)kColorSyncPostGainMapCICP);
      if (v36 && (v37 = v36, v38 = CFGetTypeID(v36), v38 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr[0]) = 0;
        v39 = CFNumberGetValue(v37, kCFNumberSInt32Type, valuePtr);
        v40 = valuePtr[0];
        if (v39 != 1)
          v40 = 0;
      }
      else
      {
        v40 = 0;
      }
      v41 = v31 == v35;
      if (!v40)
        v41 = 0;
      v42 = v31 != v40 && v41;
      CFRelease(v29);
      if (v31 == v35 && !v42)
        FlexTRCOptions = 0;
      else
        FlexTRCOptions = ColorSyncProfileCopyFlexGTCInfo((uint64_t)v27);
      v19 = v486;
      v25 = (const UInt8 **)v489;
    }
LABEL_59:
    v26 = v499;
    v44 = *((_QWORD *)v499 + 2);
    *((_QWORD *)v499 + 9) = FlexTRCOptions;
    if (v44)
      goto LABEL_60;
    v71 = (const ColorSyncProfile *)v25[2];
    FlexLumaScalingOptions = (unint64_t)ColorSyncOptionsGetFlexLumaScalingOptions(v71, theDict);
    if (FlexLumaScalingOptions)
      FlexLumaScalingOptions = (unint64_t)ColorSyncProfileCopyFlexGTCInfo((uint64_t)v71);
    v73 = *((_QWORD *)v499 + 2);
    *((_QWORD *)v499 + 10) = FlexLumaScalingOptions;
    if (!v73 && *((_QWORD *)v499 + 9) | FlexLumaScalingOptions)
    {
      *((_DWORD *)v499 + 16) = 1128988672;
      *((_BYTE *)v499 + 61) = 0;
    }
LABEL_61:
    v45 = ColorSyncProfileGetCICPInfo(v25[2]);
    if (v45)
      v46 = *(_DWORD *)v45;
    else
      v46 = 0;
    v483 = v20 - 40;
    *((_DWORD *)v499 + 22) = v46;
    *((_BYTE *)v499 + 40) = *(_BYTE *)(v19 + 34);
    *((_DWORD *)v499 + 8) = (*((uint64_t (**)(const UInt8 **, _QWORD))*v25 + 6))(v25, v490);
    *((_DWORD *)v499 + 9) = (*(uint64_t (**)(CMMProfile *, _QWORD, char *))(*(_QWORD *)v489 + 56))(v489, v490, &v500);
    v47 = v486;
    *(_WORD *)((char *)v499 + 45) = *(_WORD *)(v486 + 27);
    *(_DWORD *)((char *)v499 + 41) = *(_DWORD *)(v486 + 29);
    *(_DWORD *)((char *)v499 + 57) = *(_DWORD *)(v486 + 35);
    if (v19 == v20 - 40)
    {
      v48 = 0;
      v49 = 0;
    }
    else
    {
      v48 = *(_BYTE *)(v486 + 69);
      v49 = *(_BYTE *)(v486 + 70) != 0;
    }
    v51 = v20 - 40;
    v50 = v484;
    *((_BYTE *)v499 + 47) = v48;
    *((_BYTE *)v499 + 48) = v49;
    if (v486 == v484)
    {
      v52 = 0;
      v53 = 0;
    }
    else
    {
      v52 = *(_BYTE *)(v486 - 11);
      v53 = *(_BYTE *)(v486 - 10) != 0;
    }
    *((_BYTE *)v499 + 52) = v52;
    *((_BYTE *)v499 + 53) = v53;
    v54 = v486 != v483 && *(_BYTE *)(v486 + 68) != 0;
    *((_BYTE *)v499 + 50) = v54;
    v55 = v486 != v484 && *(_BYTE *)(v486 - 12) != 0;
    *((_BYTE *)v499 + 55) = v55;
    v56 = v486 != v483 && *(_BYTE *)(v486 + 67) != 0;
    *((_BYTE *)v499 + 49) = v56;
    v57 = v486 != v484 && *(_BYTE *)(v486 - 13) != 0;
    *((_BYTE *)v499 + 54) = v57;
    v58 = v486 != v483 && *(_BYTE *)(v486 + 74) != 0;
    *((_BYTE *)v499 + 51) = v58;
    v59 = v486 != v484 && *(_BYTE *)(v486 - 6) != 0;
    *((_BYTE *)v499 + 56) = v59;
    if (v490 == 4)
    {
      v482 = 0;
    }
    else
    {
      v482 = (*(uint64_t (**)(CMMProfile *, CMMProfile *, uint64_t))(*(_QWORD *)v489 + 72))(v489, v21, v24);
      v47 = v486;
      v51 = v20 - 40;
      v50 = v484;
    }
    if (v47 != v50)
    {
      v60 = *((_DWORD *)v499 + 8);
      if (v22 == 1347182946)
        v61 = 1145856354;
      else
        v61 = v22;
      if (v60 == 1347182946)
        v60 = 1145856354;
      if (v61 != v60)
      {
        v464 = __cxa_allocate_exception(4uLL);
        *v464 = -178;
      }
    }
    if (v47 == v51)
      v479 = 0;
    else
      v479 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v47 + 48) + 48))(*(_QWORD *)(v47 + 48), *(unsigned int *)(v47 + 56));
    if (ColorSyncOptionsGetFlexTRCOptions(*((const ColorSyncProfile **)v489 + 2), theDict))
      LODWORD(v62) = *((_QWORD *)v499 + 9) == 0;
    else
      LODWORD(v62) = 0;
    v63 = (uint64_t)v489;
    if (!(*(unsigned int (**)(CMMProfile *))(*(_QWORD *)v489 + 104))(v489))
      goto LABEL_241;
    v64 = *((_QWORD *)v489 + 25);
    if (v64)
    {
      v65 = (unsigned __int8 *)*((_QWORD *)v489 + 28);
LABEL_524:
      v502 = *(_OWORD *)(v63 + 208);
      v503 = v65;
      v509[0] = *(_OWORD *)(v63 + 184);
      *(_QWORD *)&v509[1] = v64;
      LuminanceCoefficients = ColorSyncProfileGetLuminanceCoefficients(*(float **)(v63 + 16));
      if (LuminanceCoefficients)
        v319 = 0;
      else
        v319 = 4294967126;
      CMMThrowExceptionOnError(v319);
      v321 = *(_DWORD *)LuminanceCoefficients;
      v320 = *((_DWORD *)LuminanceCoefficients + 1);
      v323 = *((_DWORD *)LuminanceCoefficients + 2);
      v322 = *((_DWORD *)LuminanceCoefficients + 3);
      switch(v490)
      {
        case 1u:
          v324 = v486 != v483 && *((_BYTE *)v499 + 51) == 0;
          v325 = theDict;
          v326 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(theDict);
          v327 = ColorSyncOptionsGetFlexLumaScalingOptions(*((const ColorSyncProfile **)v489 + 2), theDict);
          v328 = ColorSyncOptionsGetFlexTRCOptions(*((const ColorSyncProfile **)v489 + 2), theDict);
          if (v328 && !*((_QWORD *)v499 + 10))
          {
            v471 = __cxa_allocate_exception(4uLL);
            *v471 = -171;
          }
          if (v327 && !*((_QWORD *)v499 + 10))
          {
            v470 = __cxa_allocate_exception(4uLL);
            *v470 = -171;
          }
          if (theDict)
          {
            v329 = v327 != 0;
            v330 = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100"));
            v331 = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.SkipToneMappingForBT2100")) == v473;
            if (v330 == v473)
              v332 = 1;
            else
              v332 = v326;
            v326 = v332 | v329;
            v325 = theDict;
            v333 = ColorSyncOptionsDisplayReferredToneMappingRequested(theDict);
          }
          else
          {
            v333 = 0;
            v331 = 0;
            if (v327)
              v326 = 1;
          }
          if (v328)
            v334 = 1;
          else
            v334 = v326;
          if ((*((_BYTE *)v499 + 41) || *((_BYTE *)v499 + 46)) && (((v324 | v334) & 1) != 0 || *((_BYTE *)v499 + 48)))
          {
            if (((!v331 | v333) & 1) == 0)
              goto LABEL_561;
          }
          else if (!v333)
          {
LABEL_561:
            if (*((_BYTE *)v499 + 42))
            {
              valuePtr[0] = xmmword_18B3EA970;
              *(_QWORD *)&valuePtr[1] = 0;
              *((_QWORD *)&valuePtr[1] + 1) = __PAIR64__(v320, v321);
              *(_QWORD *)&valuePtr[2] = __PAIR64__(v322, v323);
              memset((char *)&valuePtr[2] + 8, 0, 72);
              ConversionManager::AddMatrixConv((uint64_t)v499, (const __CFDictionary *)v509, (uint64_t)&v501, *((unsigned __int8 *)v499 + 40), 1, (float32x2_t *)valuePtr, v325);
            }
            else
            {
              ConversionManager::AddMatrixConv((uint64_t)v499, (const __CFDictionary *)v509, (uint64_t)&v501, *((unsigned __int8 *)v499 + 40), 1, 0, v325);
            }
            goto LABEL_564;
          }
          valuePtr[0] = xmmword_18B3EA980;
          *(_QWORD *)&valuePtr[1] = 0;
          *((_QWORD *)&valuePtr[1] + 1) = __PAIR64__(v320, v321);
          *(_QWORD *)&valuePtr[2] = __PAIR64__(v322, v323);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          if (*((_BYTE *)v499 + 48))
            DWORD2(valuePtr[0]) = 1148846080;
          ConversionManager::AddMatrixConv((uint64_t)v499, (const __CFDictionary *)v509, (uint64_t)&v501, *((unsigned __int8 *)v499 + 40), 1, (float32x2_t *)valuePtr, v325);
          break;
        case 2u:
          valuePtr[0] = xmmword_18B3EA960;
          *(_QWORD *)&valuePtr[1] = 0;
          *((_QWORD *)&valuePtr[1] + 1) = __PAIR64__(v320, v321);
          *(_QWORD *)&valuePtr[2] = __PAIR64__(v322, v323);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 2, (uint64_t)valuePtr, theDict);
          goto LABEL_564;
        case 3u:
          goto LABEL_412;
        case 9u:
          valuePtr[0] = xmmword_18B3EA960;
          *(_QWORD *)&valuePtr[1] = 0;
          *((_QWORD *)&valuePtr[1] + 1) = __PAIR64__(v320, v321);
          *(_QWORD *)&valuePtr[2] = __PAIR64__(v322, v323);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddMatrixConv((uint64_t)v499, (const __CFDictionary *)v509, (uint64_t)&v501, *((unsigned __int8 *)v499 + 40), 9, (float32x2_t *)valuePtr, theDict);
          goto LABEL_564;
        case 0xAu:
          valuePtr[0] = xmmword_18B3EA960;
          *(_QWORD *)&valuePtr[1] = 0;
          *((_QWORD *)&valuePtr[1] + 1) = __PAIR64__(v320, v321);
          *(_QWORD *)&valuePtr[2] = __PAIR64__(v322, v323);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 10, (uint64_t)valuePtr, theDict);
          if (v486 != v483)
            goto LABEL_536;
          goto LABEL_564;
        case 0xDu:
          ConversionManager::AddMatrixConv((uint64_t)v499, (const __CFDictionary *)v509, (uint64_t)&v501, *((unsigned __int8 *)v499 + 40), 13, 0, theDict);
          goto LABEL_564;
        case 0xEu:
          ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 14, 0, theDict);
          if (v486 != v483)
          {
LABEL_536:
            ConversionManager::AddLinearMatrixConv((CMMMemMgr **)v499, (CMMXYZTag *(*)[3])v509);
            *((_DWORD *)v499 + 9) = 1482250784;
          }
          goto LABEL_564;
        default:
          goto LABEL_564;
      }
      goto LABEL_564;
    }
    v66 = (unsigned __int8 **)((char *)v489 + 184);
    LODWORD(valuePtr[0]) = 0;
    v67 = ColorSyncProfileContainsSupportedCICP(*((_QWORD *)v489 + 2), valuePtr);
    if (v67)
    {
      if (LOBYTE(valuePtr[0]) == 12)
      {
        v83 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
        if (ColorSyncProfileGetDisplayP3RedPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetDisplayP3RedPrimary_predicate, &__block_literal_global_193);
        v84 = *((_QWORD *)v489 + 20);
        while (v84)
        {
          v85 = v84;
          v84 = *(_QWORD *)(v84 + 16);
          if (!v84)
          {
            *v83 = off_1E215FD20;
            *((_DWORD *)v83 + 2) = 1918392666;
            v83[3] = v85;
            v83[4] = 20;
            v83[2] = 0;
            *(_QWORD *)(v85 + 16) = v83;
            goto LABEL_152;
          }
        }
        *v83 = off_1E215FD20;
        *((_DWORD *)v83 + 2) = 1918392666;
        v83[3] = 0;
        v83[4] = 20;
        v83[2] = 0;
LABEL_152:
        v83[5] = &ColorSyncProfileGetDisplayP3RedPrimary_rXYZ;
        *((_WORD *)v83 + 24) = 0;
        *v83 = off_1E215FEF0;
        *((_QWORD *)v489 + 23) = v83;
        v89 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
        if (ColorSyncProfileGetDisplayP3GreenPrimary_predicate[0] != -1)
          dispatch_once(ColorSyncProfileGetDisplayP3GreenPrimary_predicate, &__block_literal_global_195);
        v90 = *((_QWORD *)v489 + 20);
        while (v90)
        {
          v91 = v90;
          v90 = *(_QWORD *)(v90 + 16);
          if (!v90)
          {
            *v89 = off_1E215FD20;
            *((_DWORD *)v89 + 2) = 1733843290;
            v89[3] = v91;
            v89[4] = 20;
            v89[2] = 0;
            *(_QWORD *)(v91 + 16) = v89;
            goto LABEL_173;
          }
        }
        *v89 = off_1E215FD20;
        *((_DWORD *)v89 + 2) = 1733843290;
        v89[3] = 0;
        v89[4] = 20;
        v89[2] = 0;
LABEL_173:
        v89[5] = &ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ;
        *((_WORD *)v89 + 24) = 0;
        *v89 = off_1E215FEF0;
        *((_QWORD *)v489 + 24) = v89;
        v78 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
        if (ColorSyncProfileGetDisplayP3BluePrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetDisplayP3BluePrimary_predicate, &__block_literal_global_197);
        v63 = (uint64_t)v489;
        v98 = *((_QWORD *)v489 + 20);
        do
        {
          if (!v98)
          {
            *(_QWORD *)v78 = off_1E215FD20;
            v78[2] = 1649957210;
            *((_QWORD *)v78 + 4) = 20;
            v97 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
            goto LABEL_190;
          }
          v96 = v98;
          v98 = *(_QWORD *)(v98 + 16);
        }
        while (v98);
        *(_QWORD *)v78 = off_1E215FD20;
        v78[2] = 1649957210;
        *((_QWORD *)v78 + 3) = v96;
        *((_QWORD *)v78 + 4) = 20;
        *((_QWORD *)v78 + 2) = 0;
        v97 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
LABEL_186:
        *(_QWORD *)(v96 + 16) = v78;
      }
      else
      {
        if (LOBYTE(valuePtr[0]) == 9)
        {
          v80 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
          if (ColorSyncProfileGetBT2020RedPrimary_predicate != -1)
            dispatch_once(&ColorSyncProfileGetBT2020RedPrimary_predicate, &__block_literal_global_187);
          v81 = *((_QWORD *)v489 + 20);
          while (v81)
          {
            v82 = v81;
            v81 = *(_QWORD *)(v81 + 16);
            if (!v81)
            {
              *v80 = off_1E215FD20;
              *((_DWORD *)v80 + 2) = 1918392666;
              v80[3] = v82;
              v80[4] = 20;
              v80[2] = 0;
              *(_QWORD *)(v82 + 16) = v80;
              goto LABEL_145;
            }
          }
          *v80 = off_1E215FD20;
          *((_DWORD *)v80 + 2) = 1918392666;
          v80[3] = 0;
          v80[4] = 20;
          v80[2] = 0;
LABEL_145:
          v80[5] = &ColorSyncProfileGetBT2020RedPrimary_rXYZ;
          *((_WORD *)v80 + 24) = 0;
          *v80 = off_1E215FEF0;
          *((_QWORD *)v489 + 23) = v80;
          v86 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
          if (ColorSyncProfileGetBT2020GreenPrimary_predicate[0] != -1)
            dispatch_once(ColorSyncProfileGetBT2020GreenPrimary_predicate, &__block_literal_global_189);
          v87 = *((_QWORD *)v489 + 20);
          while (v87)
          {
            v88 = v87;
            v87 = *(_QWORD *)(v87 + 16);
            if (!v87)
            {
              *v86 = off_1E215FD20;
              *((_DWORD *)v86 + 2) = 1733843290;
              v86[3] = v88;
              v86[4] = 20;
              v86[2] = 0;
              *(_QWORD *)(v88 + 16) = v86;
              goto LABEL_166;
            }
          }
          *v86 = off_1E215FD20;
          *((_DWORD *)v86 + 2) = 1733843290;
          v86[3] = 0;
          v86[4] = 20;
          v86[2] = 0;
LABEL_166:
          v86[5] = &ColorSyncProfileGetBT2020GreenPrimary_gXYZ;
          *((_WORD *)v86 + 24) = 0;
          *v86 = off_1E215FEF0;
          *((_QWORD *)v489 + 24) = v86;
          v78 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
          if (ColorSyncProfileGetBT2020BluePrimary_predicate != -1)
            dispatch_once(&ColorSyncProfileGetBT2020BluePrimary_predicate, &__block_literal_global_191);
          v63 = (uint64_t)v489;
          v95 = *((_QWORD *)v489 + 20);
          while (v95)
          {
            v96 = v95;
            v95 = *(_QWORD *)(v95 + 16);
            if (!v95)
            {
              *(_QWORD *)v78 = off_1E215FD20;
              v78[2] = 1649957210;
              *((_QWORD *)v78 + 3) = v96;
              *((_QWORD *)v78 + 4) = 20;
              *((_QWORD *)v78 + 2) = 0;
              v97 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
              goto LABEL_186;
            }
          }
          *(_QWORD *)v78 = off_1E215FD20;
          v78[2] = 1649957210;
          *((_QWORD *)v78 + 4) = 20;
          v97 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
        }
        else
        {
          if (LOBYTE(valuePtr[0]) != 1)
            goto LABEL_240;
          v68 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
          if (ColorSyncProfileGetBT709RedPrimary_predicate != -1)
            dispatch_once(&ColorSyncProfileGetBT709RedPrimary_predicate, &__block_literal_global_181);
          v69 = *((_QWORD *)v489 + 20);
          while (v69)
          {
            v70 = v69;
            v69 = *(_QWORD *)(v69 + 16);
            if (!v69)
            {
              *v68 = off_1E215FD20;
              *((_DWORD *)v68 + 2) = 1918392666;
              v68[3] = v70;
              v68[4] = 20;
              v68[2] = 0;
              *(_QWORD *)(v70 + 16) = v68;
              goto LABEL_159;
            }
          }
          *v68 = off_1E215FD20;
          *((_DWORD *)v68 + 2) = 1918392666;
          v68[3] = 0;
          v68[4] = 20;
          v68[2] = 0;
LABEL_159:
          v68[5] = &ColorSyncProfileGetBT709RedPrimary_rXYZ;
          *((_WORD *)v68 + 24) = 0;
          *v68 = off_1E215FEF0;
          *((_QWORD *)v489 + 23) = v68;
          v92 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
          if (ColorSyncProfileGetBT709GreenPrimary_predicate[0] != -1)
            dispatch_once(ColorSyncProfileGetBT709GreenPrimary_predicate, &__block_literal_global_183);
          v93 = *((_QWORD *)v489 + 20);
          while (v93)
          {
            v94 = v93;
            v93 = *(_QWORD *)(v93 + 16);
            if (!v93)
            {
              *v92 = off_1E215FD20;
              *((_DWORD *)v92 + 2) = 1733843290;
              v92[3] = v94;
              v92[4] = 20;
              v92[2] = 0;
              *(_QWORD *)(v94 + 16) = v92;
              goto LABEL_180;
            }
          }
          *v92 = off_1E215FD20;
          *((_DWORD *)v92 + 2) = 1733843290;
          v92[3] = 0;
          v92[4] = 20;
          v92[2] = 0;
LABEL_180:
          v92[5] = &ColorSyncProfileGetBT709GreenPrimary_gXYZ;
          *((_WORD *)v92 + 24) = 0;
          *v92 = off_1E215FEF0;
          *((_QWORD *)v489 + 24) = v92;
          v78 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)v489 + 3));
          if (ColorSyncProfileGetBT709BluePrimary_predicate != -1)
            dispatch_once(&ColorSyncProfileGetBT709BluePrimary_predicate, &__block_literal_global_185);
          v63 = (uint64_t)v489;
          v99 = *((_QWORD *)v489 + 20);
          while (v99)
          {
            v96 = v99;
            v99 = *(_QWORD *)(v99 + 16);
            if (!v99)
            {
              *(_QWORD *)v78 = off_1E215FD20;
              v78[2] = 1649957210;
              *((_QWORD *)v78 + 3) = v96;
              *((_QWORD *)v78 + 4) = 20;
              *((_QWORD *)v78 + 2) = 0;
              v97 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
              goto LABEL_186;
            }
          }
          *(_QWORD *)v78 = off_1E215FD20;
          v78[2] = 1649957210;
          *((_QWORD *)v78 + 4) = 20;
          v97 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
        }
LABEL_190:
        *((_QWORD *)v78 + 2) = 0;
        *((_QWORD *)v78 + 3) = 0;
      }
      *((_QWORD *)v78 + 5) = v97;
      *((_WORD *)v78 + 24) = 0;
      *(_QWORD *)v78 = off_1E215FEF0;
LABEL_192:
      *(_QWORD *)(v63 + 200) = v78;
      if (!(_DWORD)v62)
        goto LABEL_201;
      goto LABEL_193;
    }
    Tag = CMMProfile::GetTag((uint64_t)v489, 1633768035);
    if (Tag)
    {
      *v66 = Tag;
      v63 = (uint64_t)v489;
    }
    else
    {
      v75 = CMMProfile::GetTag((uint64_t)v489, 1918392666);
      v63 = (uint64_t)v489;
      *((_QWORD *)v489 + 23) = v75;
      if (!v75)
        goto LABEL_240;
    }
    v76 = CMMProfile::GetTag(v63, 1633765219);
    if (v76)
    {
      v63 = (uint64_t)v489;
      *((_QWORD *)v489 + 24) = v76;
    }
    else
    {
      v77 = CMMProfile::GetTag((uint64_t)v489, 1733843290);
      v63 = (uint64_t)v489;
      *((_QWORD *)v489 + 24) = v77;
      if (!v77)
        goto LABEL_240;
    }
    v78 = CMMProfile::GetTag(v63, 1633763939);
    v63 = (uint64_t)v489;
    if (v78)
      goto LABEL_192;
    v79 = CMMProfile::GetTag((uint64_t)v489, 1649957210);
    v63 = (uint64_t)v489;
    *((_QWORD *)v489 + 25) = v79;
    if (!v79)
      goto LABEL_240;
    if (!(_DWORD)v62)
    {
LABEL_201:
      v100 = 0;
      if (!v67)
        goto LABEL_232;
      goto LABEL_214;
    }
LABEL_193:
    v62 = (const __CFDictionary *)ColorSyncOptionsGetFlexTRCOptions(*(const ColorSyncProfile **)(v63 + 16), theDict);
    if (!v62)
      goto LABEL_201;
    v100 = ColorSyncProfileCopyFlexGTCInfo(*(_QWORD *)(v63 + 16));
    if (!v100)
    {
      LOBYTE(v62) = 0;
      if (!v67)
        goto LABEL_232;
      goto LABEL_214;
    }
    v101 = (const __CFDictionary *)CMMBase::NewInternal(0x28uLL, *(_QWORD ***)(v63 + 24));
    *((_QWORD *)v101 + 2) = 0;
    *((_QWORD *)v101 + 3) = &kPQEOTFFloat1024Data;
    *(_QWORD *)v101 = off_1E215FE00;
    *((_QWORD *)v101 + 1) = 0;
    *((_QWORD *)v101 + 4) = 4096;
    if (CFDictionaryContainsKey(v100, (const void *)kColorSyncMonoFlexGTCNodeTable) == 1
      && CFDictionaryContainsKey(v100, (const void *)kColorSyncMonoGainMapParams) == 1)
    {
      v102 = (CMMTable *)CFDictionaryGetValue(v100, (const void *)kColorSyncMonoFlexGTCNodeTable);
      v103 = (const __CFArray *)CFDictionaryGetValue(v100, (const void *)kColorSyncMonoGainMapParams);
      FlexTRCLookup = CMMTable::CreateFlexTRCLookup(v102, v103, v62, v101, *((CMMTable **)v489 + 3), v104, v105);
      *((_QWORD *)v489 + 29) = FlexTRCLookup;
      if (FlexTRCLookup)
        v107 = 0;
      else
        v107 = 4294967246;
      CMMThrowExceptionOnError(v107);
      CFRelease(v100);
      LOBYTE(v62) = 0;
      v100 = (const __CFData *)*((_QWORD *)v489 + 29);
    }
    else
    {
      v108 = (CMMTable *)CFDictionaryGetValue(v100, (const void *)kColorSyncRedFlexGTCNodeTable);
      v109 = (const __CFArray *)CFDictionaryGetValue(v100, (const void *)kColorSyncRedGainMapParams);
      v110 = (CMMTable **)((char *)v489 + 24);
      v113 = CMMTable::CreateFlexTRCLookup(v108, v109, v62, v101, *((CMMTable **)v489 + 3), v111, v112);
      *((_QWORD *)v489 + 30) = v113;
      if (v113)
        v114 = 0;
      else
        v114 = 4294967246;
      CMMThrowExceptionOnError(v114);
      v115 = (CMMTable *)CFDictionaryGetValue(v100, (const void *)kColorSyncGrnFlexGTCNodeTable);
      v116 = (const __CFArray *)CFDictionaryGetValue(v100, (const void *)kColorSyncGrnGainMapParams);
      v119 = CMMTable::CreateFlexTRCLookup(v115, v116, v62, v101, *v110, v117, v118);
      *((_QWORD *)v489 + 31) = v119;
      if (v119)
        v120 = 0;
      else
        v120 = 4294967246;
      CMMThrowExceptionOnError(v120);
      v121 = (CMMTable *)CFDictionaryGetValue(v100, (const void *)kColorSyncBluFlexGTCNodeTable);
      v122 = (const __CFArray *)CFDictionaryGetValue(v100, (const void *)kColorSyncBluGainMapParams);
      v125 = CMMTable::CreateFlexTRCLookup(v121, v122, v62, v101, *v110, v123, v124);
      *((_QWORD *)v489 + 32) = v125;
      if (v125)
        v126 = 0;
      else
        v126 = 4294967246;
      CMMThrowExceptionOnError(v126);
      CFRelease(v100);
      v100 = 0;
      LOBYTE(v62) = 1;
    }
    v63 = (uint64_t)v489;
    if (!v67)
    {
LABEL_232:
      v138 = CMMProfile::GetTag(v63, 1751405638);
      if (v138)
      {
        v139 = bswap32(*(_DWORD *)(*((_QWORD *)v138 + 5) + 8));
        v63 = (uint64_t)v489;
        if (v139 == 1212958496)
        {
          v132 = (CMMHLGCurveTag *)CMMBase::NewInternal(0x58uLL, *((_QWORD ***)v489 + 3));
          v286 = *((_QWORD *)v489 + 20);
          while (1)
          {
            v134 = v286;
            if (!v286)
              break;
            v286 = *(_QWORD *)(v286 + 16);
            if (!v286)
            {
LABEL_225:
              CMMHLGCurveTag::CMMHLGCurveTag(v132, v134);
              goto LABEL_515;
            }
          }
LABEL_473:
          CMMHLGCurveTag::CMMHLGCurveTag(v132, 0);
        }
        else
        {
          if (v139 != 1347493920)
          {
LABEL_240:
            *v66 = 0;
            *((_QWORD *)v489 + 24) = 0;
            *((_QWORD *)v489 + 25) = 0;
            goto LABEL_241;
          }
          v127 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)v489 + 3));
          if ((v62 & 1) != 0)
          {
            v140 = *((_QWORD *)v489 + 30);
            v141 = *((_QWORD *)v489 + 20);
            while (1)
            {
              v142 = v141;
              if (!v141)
                break;
              v141 = *(_QWORD *)(v141 + 16);
              if (!v141)
              {
                CMMPQCurveTag::CMMPQCurveTag(v127, v140, v142);
                goto LABEL_510;
              }
            }
            CMMPQCurveTag::CMMPQCurveTag(v127, v140, 0);
LABEL_510:
            *((_QWORD *)v489 + 26) = v143;
            v312 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)v489 + 3));
            v313 = *((_QWORD *)v489 + 31);
            v314 = *((_QWORD *)v489 + 20);
            while (1)
            {
              v315 = v314;
              if (!v314)
                break;
              v314 = *(_QWORD *)(v314 + 16);
              if (!v314)
              {
                CMMPQCurveTag::CMMPQCurveTag(v312, v313, v315);
                goto LABEL_517;
              }
            }
            CMMPQCurveTag::CMMPQCurveTag(v312, v313, 0);
LABEL_517:
            *((_QWORD *)v489 + 27) = v316;
            v308 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)v489 + 3));
            v309 = *((_QWORD *)v489 + 32);
            v317 = *((_QWORD *)v489 + 20);
            while (1)
            {
              v311 = v317;
              if (!v317)
                break;
              v317 = *(_QWORD *)(v317 + 16);
              if (!v317)
              {
LABEL_507:
                CMMPQCurveTag::CMMPQCurveTag(v308, v309, v311);
                goto LABEL_522;
              }
            }
LABEL_521:
            CMMPQCurveTag::CMMPQCurveTag(v308, v309, 0);
LABEL_522:
            v63 = (uint64_t)v489;
            *((_QWORD *)v489 + 28) = v65;
            goto LABEL_523;
          }
          v300 = *((_QWORD *)v489 + 20);
          while (1)
          {
            v298 = v300;
            if (!v300)
              break;
            v300 = *(_QWORD *)(v300 + 16);
            if (!v300)
            {
LABEL_479:
              CMMPQCurveTag::CMMPQCurveTag(v127, (uint64_t)v100, v298);
              goto LABEL_515;
            }
          }
LABEL_514:
          CMMPQCurveTag::CMMPQCurveTag(v127, (uint64_t)v100, 0);
        }
LABEL_515:
        v63 = (uint64_t)v489;
        *((_QWORD *)v489 + 27) = v65;
        *((_QWORD *)v489 + 28) = v65;
        *((_QWORD *)v489 + 26) = v65;
LABEL_523:
        v64 = *(_QWORD *)(v63 + 200);
        goto LABEL_524;
      }
      v285 = CMMProfile::GetTag((uint64_t)v489, 1633776231);
      if (v285)
      {
        v63 = (uint64_t)v489;
        *((_QWORD *)v489 + 26) = v285;
        goto LABEL_464;
      }
      v287 = CMMProfile::GetTag((uint64_t)v489, 1918128707);
      v63 = (uint64_t)v489;
      *((_QWORD *)v489 + 26) = v287;
      if (v287)
      {
LABEL_464:
        v288 = CMMProfile::GetTag(v63, 1633773415);
        if (v288)
        {
          v63 = (uint64_t)v489;
          *((_QWORD *)v489 + 27) = v288;
LABEL_481:
          v65 = CMMProfile::GetTag(v63, 1633772135);
          if (v65)
            goto LABEL_522;
          v65 = CMMProfile::GetTag((uint64_t)v489, 1649693251);
          v63 = (uint64_t)v489;
          *((_QWORD *)v489 + 28) = v65;
          if (v65)
            goto LABEL_523;
        }
        else
        {
          v299 = CMMProfile::GetTag((uint64_t)v489, 1733579331);
          v63 = (uint64_t)v489;
          *((_QWORD *)v489 + 27) = v299;
          if (v299)
            goto LABEL_481;
        }
      }
      *v66 = 0;
      *((_QWORD *)v489 + 24) = 0;
      *((_QWORD *)v489 + 25) = 0;
      *(_QWORD *)(v63 + 216) = 0;
      *(_QWORD *)(v63 + 224) = 0;
      *(_QWORD *)(v63 + 208) = 0;
      goto LABEL_241;
    }
LABEL_214:
    switch(BYTE1(valuePtr[0]))
    {
      case 8u:
        v135 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(v63 + 24));
        v136 = *((_QWORD *)v489 + 20);
        while (1)
        {
          v137 = v136;
          if (!v136)
            break;
          v136 = *(_QWORD *)(v136 + 16);
          if (!v136)
          {
            CMMCurveTag::CMMCurveTag(v135, 0, (uint64_t)"curv", 16, v137);
            goto LABEL_475;
          }
        }
        CMMCurveTag::CMMCurveTag(v135, 0, (uint64_t)"curv", 16, 0);
LABEL_475:
        *(_QWORD *)v65 = off_1E215D188;
        goto LABEL_515;
      case 0x12u:
        v132 = (CMMHLGCurveTag *)CMMBase::NewInternal(0x58uLL, *(_QWORD ***)(v63 + 24));
        v133 = *((_QWORD *)v489 + 20);
        while (1)
        {
          v134 = v133;
          if (!v133)
            goto LABEL_473;
          v133 = *(_QWORD *)(v133 + 16);
          if (!v133)
            goto LABEL_225;
        }
      case 0x10u:
        v127 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(v63 + 24));
        if ((v62 & 1) != 0)
        {
          v128 = *((_QWORD *)v489 + 30);
          v129 = *((_QWORD *)v489 + 20);
          while (1)
          {
            v130 = v129;
            if (!v129)
              break;
            v129 = *(_QWORD *)(v129 + 16);
            if (!v129)
            {
              CMMPQCurveTag::CMMPQCurveTag(v127, v128, v130);
              goto LABEL_498;
            }
          }
          CMMPQCurveTag::CMMPQCurveTag(v127, v128, 0);
LABEL_498:
          *((_QWORD *)v489 + 26) = v131;
          v303 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)v489 + 3));
          v304 = *((_QWORD *)v489 + 31);
          v305 = *((_QWORD *)v489 + 20);
          while (1)
          {
            v306 = v305;
            if (!v305)
              break;
            v305 = *(_QWORD *)(v305 + 16);
            if (!v305)
            {
              CMMPQCurveTag::CMMPQCurveTag(v303, v304, v306);
              goto LABEL_504;
            }
          }
          CMMPQCurveTag::CMMPQCurveTag(v303, v304, 0);
LABEL_504:
          *((_QWORD *)v489 + 27) = v307;
          v308 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)v489 + 3));
          v309 = *((_QWORD *)v489 + 32);
          v310 = *((_QWORD *)v489 + 20);
          while (1)
          {
            v311 = v310;
            if (!v310)
              goto LABEL_521;
            v310 = *(_QWORD *)(v310 + 16);
            if (!v310)
              goto LABEL_507;
          }
        }
        v297 = *((_QWORD *)v489 + 20);
        while (1)
        {
          v298 = v297;
          if (!v297)
            goto LABEL_514;
          v297 = *(_QWORD *)(v297 + 16);
          if (!v297)
            goto LABEL_479;
        }
    }
    *(_OWORD *)((char *)v489 + 200) = 0u;
    *(_OWORD *)((char *)v489 + 216) = 0u;
    *(_OWORD *)v66 = 0u;
LABEL_241:
    v144 = v482;
    if (v490 != 2)
      v144 = 0;
    if ((v144 & 1) == 0)
    {
      v145 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v63 + 32))(v63, v490, v480);
      v487 = v145;
      v63 = (uint64_t)v489;
      if (v145)
      {
        v146 = *(unsigned int **)(v145 + 8);
        if (v146 == *(unsigned int **)(v145 + 16))
          goto LABEL_564;
        while (1)
        {
          v488 = v146;
          v147 = (const void *)(*(uint64_t (**)(CMMProfile *, _QWORD))(*(_QWORD *)v489 + 88))(v489, v146[2]);
          if (v147)
          else
            v148 = 0;
          v149 = (const void *)(*(uint64_t (**)(CMMProfile *, _QWORD))(*(_QWORD *)v489 + 88))(v489, v488[2]);
          if (v149)
          {
            v151 = v488;
            if (!v148)
            {
              v152 = v150;
              if (!v150)
                goto LABEL_771;
              v153 = v488[3];
              v491 = v488[4];
              v154 = *((unsigned __int8 *)v499 + 40);
              v155 = *((_BYTE *)v499 + 40) != 0;
              HasCLUT = CMMLutTag::HasCLUT(v150);
              v157 = CMMLutTag::HasCLUT(v152);
              v158 = (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)v152 + 48))(v152);
              v159 = v158;
              v477 = v158;
              if (v158 >= 0x10uLL || v158 == 0)
                v161 = 4294967126;
              else
                v161 = 0;
              CMMThrowExceptionOnError(v161);
              v162 = (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)v152 + 56))(v152);
              v163 = v162;
              v476 = v162;
              if (v162 >= 0x10uLL || v162 == 0)
                v165 = 4294967126;
              else
                v165 = 0;
              CMMThrowExceptionOnError(v165);
              memset(v515, 0, sizeof(v515));
              v516 = 0;
              LODWORD(v515[0]) = 1;
              if ((_DWORD)v153 == 1482250784)
              {
                if (v154)
                  v166 = 0;
                else
                  v166 = v490 == 1;
                if (v154)
                  v155 = 1;
                else
                  v155 = v490 == 1;
                ConversionManager::AddScalingDownFloatXYZ(v499, v166);
              }
              v495 = !HasCLUT;
              v493 = !v157;
              if (v490 == 1)
                v167 = v155 ^ 1;
              else
                v167 = 0;
              if (v159)
              {
                v168 = 0;
                do
                {
                  v169 = (*(uint64_t (**)(CMMLutTag *, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v152 + 96))(v152, v168, v515, *((_QWORD *)v499 + 1), v153);
                  if (v169)
                  {
                    v170 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(_QWORD *)v152 + 80))(v152, v168);
                    v171 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
                    v172 = CMMConvTRC::CMMConvTRC((uint64_t)v171, v168, v169, v170, v515, *((_QWORD *)v499 + 3), v159, v495, 1.0, v493, v167);
                    *((_QWORD *)v499 + 3) = v172;
                    v155 |= v167;
                    if (!*((_QWORD *)v499 + 2))
                      *v498 = (CMMConvNode *)v172;
                  }
                  v168 = (v168 + 1);
                }
                while (v159 != (_DWORD)v168);
              }
              v173 = (_DWORD *)(*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)v152 + 104))(v152);
              if (v173)
              {
                memset(valuePtr, 0, 112);
                CMMMatrix::CMMMatrix((uint64_t)valuePtr, v173, 1.0);
                MatrixConv = CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v499 + 1), *((CMMConvNode **)v499 + 3));
                *((_QWORD *)v499 + 3) = MatrixConv;
                if (!((v490 != 1) | v155 & 1))
                {
                  (*(void (**)(_QWORD *))(*MatrixConv + 24))(MatrixConv);
                  v155 = 1;
                }
                if (!*v498)
                  *((_QWORD *)v499 + 2) = *((_QWORD *)v499 + 3);
              }
              if (v159)
              {
                v175 = 0;
                v176 = (v490 == 1) & (v155 ^ 1);
                do
                {
                  v177 = (*(uint64_t (**)(CMMLutTag *, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v152 + 112))(v152, v175, v515, *((_QWORD *)v499 + 1), v153);
                  if (v177)
                  {
                    v178 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(_QWORD *)v152 + 144))(v152, v175);
                    v179 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
                    v180 = CMMConvTRC::CMMConvTRC((uint64_t)v179, v175, v177, v178, v515, *((_QWORD *)v499 + 3), v159, v495, 1.0, v493, v176);
                    *((_QWORD *)v499 + 3) = v180;
                    v155 |= v176;
                    if (!*((_QWORD *)v499 + 2))
                      *v498 = (CMMConvNode *)v180;
                  }
                  v175 = (v175 + 1);
                }
                while (v159 != (_DWORD)v175);
              }
              if (CMMLutTag::HasCLUT(v152))
              {
                ConversionManager::AddCLUTConv((uint64_t)v499, v152, v477, v476);
                v181 = *((_QWORD *)v499 + 3);
                v182 = v490 != 1;
                if (!v181)
                  v182 = 1;
                if (((v182 | v155) & 1) == 0)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v181 + 24))(v181);
                  LOBYTE(v155) = 1;
                }
              }
              if (v163)
              {
                v183 = 0;
                v184 = (v490 == 1) & (v155 ^ 1);
                do
                {
                  v185 = (*(uint64_t (**)(CMMLutTag *, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v152 + 120))(v152, v183, v515, *((_QWORD *)v499 + 1), v491);
                  if (v185)
                  {
                    v186 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(_QWORD *)v152 + 152))(v152, v183);
                    v187 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
                    v188 = CMMConvTRC::CMMConvTRC((uint64_t)v187, v183, v185, v186, v515, *((_QWORD *)v499 + 3), v163, v495, 1.0, v493, v184);
                    *((_QWORD *)v499 + 3) = v188;
                    LOBYTE(v155) = v184 | v155;
                    if (!*((_QWORD *)v499 + 2))
                      *v498 = (CMMConvNode *)v188;
                  }
                  v183 = (v183 + 1);
                }
                while (v163 != (_DWORD)v183);
              }
              v189 = (_DWORD *)(*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)v152 + 128))(v152);
              if (v189)
              {
                memset(valuePtr, 0, 112);
                CMMMatrix::CMMMatrix((uint64_t)valuePtr, v189, 1.0);
                v190 = CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v499 + 1), *((CMMConvNode **)v499 + 3));
                *((_QWORD *)v499 + 3) = v190;
                if (!((v490 != 1) | v155 & 1))
                {
                  (*(void (**)(_QWORD *))(*v190 + 24))(v190);
                  LOBYTE(v155) = 1;
                }
                if (!*v498)
                  *((_QWORD *)v499 + 2) = *((_QWORD *)v499 + 3);
              }
              if (v163)
              {
                v191 = 0;
                v192 = (v490 == 1) & (v155 ^ 1);
                do
                {
                  v193 = (*(uint64_t (**)(CMMLutTag *, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v152 + 136))(v152, v191, v515, *((_QWORD *)v499 + 1), v491);
                  if (v193)
                  {
                    v194 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(_QWORD *)v152 + 88))(v152, v191);
                    v195 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
                    v196 = CMMConvTRC::CMMConvTRC((uint64_t)v195, v191, v193, v194, v515, *((_QWORD *)v499 + 3), v163, v495, 1.0, v493, v192);
                    *((_QWORD *)v499 + 3) = v196;
                    LOBYTE(v155) = v192 | v155;
                    if (!*((_QWORD *)v499 + 2))
                      *v498 = (CMMConvNode *)v196;
                  }
                  v191 = (v191 + 1);
                }
                while (v163 != (_DWORD)v191);
              }
              if (v491 == 1482250784)
                ConversionManager::AddScalingUpFloatXYZ(v499);
              if ((v490 != 2) | v155 & 1)
                goto LABEL_378;
              goto LABEL_377;
            }
          }
          else
          {
            v151 = v488;
            if (!v148)
            {
LABEL_771:
              v463 = __cxa_allocate_exception(4uLL);
              *v463 = -171;
            }
          }
          v197 = v151[3];
          v496 = v151[4];
          v198 = *((unsigned __int8 *)v499 + 40);
          v199 = *((_BYTE *)v499 + 40) != 0;
          v200 = (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)v148 + 48))(v148);
          v201 = v200;
          v494 = v200;
          if (v200 >= 0x10uLL || v200 == 0)
            v203 = 4294967126;
          else
            v203 = 0;
          CMMThrowExceptionOnError(v203);
          v204 = (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)v148 + 56))(v148);
          v205 = v204;
          v492 = v204;
          if (v204 >= 0x10uLL || v204 == 0)
            v207 = 4294967126;
          else
            v207 = 0;
          CMMThrowExceptionOnError(v207);
          v208 = v490;
          if ((_DWORD)v197 == 1482250784)
          {
            if (v198)
              v209 = 0;
            else
              v209 = v490 == 1;
            if (v198)
              v199 = 1;
            else
              v199 = v490 == 1;
            ConversionManager::AddScalingDownFloatXYZ(v499, v209);
            if (((*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)v148 + 160))(v148) & 1) == 0)
            {
              v210 = 0;
              *(_QWORD *)&valuePtr[0] = off_1E215FED0;
              *((_QWORD *)&valuePtr[6] + 1) = 1065353216;
              memset((char *)valuePtr + 8, 0, 96);
              v211 = valuePtr;
              do
              {
                for (i = 0; i != 3; ++i)
                {
                  v213 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t, uint64_t))(*(_QWORD *)v148 + 168))(v148, v210, i);
                  v214 = (char *)v211 + 4 * i;
                  *((_DWORD *)v214 + 2) = v213;
                  v215 = (double)v213 * 0.0000152587891;
                  *((float *)v214 + 11) = v215;
                }
                ++v210;
                v211 = (__int128 *)((char *)v211 + 12);
              }
              while (v210 != 3);
              v216 = (CMMConvNode *)CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v499 + 1), *((CMMConvNode **)v499 + 3));
              *((_QWORD *)v499 + 3) = v216;
              if (!*((_QWORD *)v499 + 2))
                *v498 = v216;
            }
            v208 = v490;
          }
          if (v208 == 1)
            v217 = v199 ^ 1;
          else
            v217 = 0;
          if (v201)
          {
            v218 = 0;
            do
            {
              memset(valuePtr, 0, 56);
              LODWORD(valuePtr[0]) = 1;
              v219 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v148 + 112))(v148, v218, valuePtr, *((_QWORD *)v499 + 1), v197);
              v220 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t))(*(_QWORD *)v148 + 80))(v148, v218);
              v221 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
              v222 = CMMConvTRC::CMMConvTRC((uint64_t)v221, v218, v219, v220, valuePtr, *((_QWORD *)v499 + 3), v201, 1, 1.0, 1, v217);
              *((_QWORD *)v499 + 3) = v222;
              if (!*((_QWORD *)v499 + 2))
                *v498 = (CMMConvNode *)v222;
              v199 |= v217;
              v218 = (v218 + 1);
            }
            while (v201 != (_DWORD)v218);
            v225 = v490 == 1 && v201 == 3;
            if ((v225 & v199 & 1) != 0)
            {
              if (ConversionManager::exrToneMappingGammaIsRequested(theDict, v223))
                ConversionManager::AddEXRToneMapping(v499, theDict, 3);
              v199 = 1;
            }
          }
          if ((*(unsigned int (**)(CMMLutTagBase *))(*(_QWORD *)v148 + 192))(v148))
          {
            ConversionManager::AddCLUTConv((uint64_t)v499, v148, v494, v492);
            v226 = *((_QWORD *)v499 + 3);
            v227 = v490 != 1;
            if (!v226)
              v227 = 1;
            if (((v227 | v199) & 1) == 0)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v226 + 24))(v226);
              LOBYTE(v199) = 1;
            }
          }
          if (v205)
          {
            v228 = 0;
            v229 = (v490 == 1) & (v199 ^ 1);
            do
            {
              memset(valuePtr, 0, 56);
              LODWORD(valuePtr[0]) = 1;
              v230 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v148 + 120))(v148, v228, valuePtr, *((_QWORD *)v499 + 1), v496);
              v231 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t))(*(_QWORD *)v148 + 88))(v148, v228);
              v232 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
              v233 = CMMConvTRC::CMMConvTRC((uint64_t)v232, v228, v230, v231, valuePtr, *((_QWORD *)v499 + 3), v205, 1, 1.0, 1, v229);
              *((_QWORD *)v499 + 3) = v233;
              if (!*((_QWORD *)v499 + 2))
                *v498 = (CMMConvNode *)v233;
              LOBYTE(v199) = v229 | v199;
              v228 = (v228 + 1);
            }
            while (v205 != (_DWORD)v228);
          }
          if (v496 == 1482250784)
            ConversionManager::AddScalingUpFloatXYZ(v499);
          v234 = v487;
          if ((v490 != 2) | v199 & 1)
            goto LABEL_379;
LABEL_377:
          (*(void (**)(_QWORD))(**((_QWORD **)v499 + 3) + 48))(*((_QWORD *)v499 + 3));
LABEL_378:
          v234 = v487;
LABEL_379:
          v146 = v488 + 6;
          if (v488 + 6 == *(unsigned int **)(v234 + 16))
            goto LABEL_564;
        }
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 96))(v63))
    {
      if (v490 == 2)
      {
        pthread_mutex_lock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        if (!legacyPCSToLabChanLTable)
        {
          *(_QWORD *)&valuePtr[0] = 0;
          CMMMemMgr::CMMMemMgr((CMMMemMgr *)valuePtr);
          v260 = (int *)CMMBase::NewInternal(0x5408uLL, (_QWORD **)valuePtr);
          v261 = 0;
          legacyPCSToLabChanLDataPtr = (uint64_t)v260;
          v262 = (int64x2_t)xmmword_18B3EA6B0;
          v263 = v260 + 1;
          do
          {
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v262)).u8[0] & 1) != 0)
              *(v263 - 1) = (unint64_t)(v261 + 2048) >> 12;
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v262)).i32[1] & 1) != 0)
              *v263 = (unint64_t)(v261 + 16713983) >> 12;
            v262 = vaddq_s64(v262, vdupq_n_s64(2uLL));
            v263 += 2;
            v261 += 33423870;
          }
          while (v261 != 0xFF20DF1FELL);
          MakeLookups(v260);
          v264 = CMMBase::NewInternal(0x28uLL, (_QWORD **)valuePtr);
          v265 = legacyPCSToLabChanLDataPtr;
          v264[2] = 0;
          v264[3] = v265;
          *v264 = off_1E215FE00;
          v264[1] = 0;
          v264[4] = 21512;
          legacyPCSToLabChanLTable = (uint64_t)v264;
          v266 = (int *)CMMBase::NewInternal(0x5408uLL, (_QWORD **)valuePtr);
          v267 = 0;
          legacyPCSToLabChanAnBDataPtr = (uint64_t)v266;
          v268 = (int64x2_t)xmmword_18B3EA6B0;
          v269 = v266 + 1;
          do
          {
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v268)).u8[0] & 1) != 0)
              *(v269 - 1) = (unint64_t)(v267 + 2048) >> 12;
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v268)).i32[1] & 1) != 0)
              *v269 = (unint64_t)(v267 + 16713983) >> 12;
            v268 = vaddq_s64(v268, vdupq_n_s64(2uLL));
            v269 += 2;
            v267 += 33423870;
          }
          while (v267 != 0xFF20DF1FELL);
          MakeLookups(v266);
          v270 = CMMBase::NewInternal(0x28uLL, (_QWORD **)valuePtr);
          v271 = legacyPCSToLabChanAnBDataPtr;
          v270[2] = 0;
          v270[3] = v271;
          *v270 = off_1E215FE00;
          v270[1] = 0;
          v270[4] = 21512;
          legacyPCSToLabChanAnBTable = (uint64_t)v270;
          CMMMemMgr::ReleaseMemList((void **)valuePtr);
        }
        pthread_mutex_unlock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        v253 = legacyPCSToLabChanLTable;
        v254 = legacyPCSToLabChanAnBTable;
        if (legacyPCSToLabChanLTable)
        {
LABEL_428:
          if (v254)
          {
            *((_QWORD *)&valuePtr[0] + 1) = 0;
            *(_QWORD *)&valuePtr[1] = 0;
            v272 = *(_QWORD *)(v253 + 8);
            if (v272)
              *(_QWORD *)(v253 + 8) = v272 + 1;
            *(_QWORD *)&valuePtr[0] = 1;
            HIDWORD(valuePtr[0]) = 3;
            *(__int128 *)((char *)&valuePtr[1] + 8) = xmmword_18B3EA990;
            *(__int128 *)((char *)&valuePtr[2] + 8) = xmmword_18B3EA9A0;
            v273 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
            v274 = CMMConvTRC::CMMConvTRC((uint64_t)v273, 0, v253, 21512, valuePtr, *((_QWORD *)v499 + 3), 3, 1, 1.0, 0, 0);
            *((_QWORD *)v499 + 3) = v274;
            if (!*((_QWORD *)v499 + 2))
              *v498 = (CMMConvNode *)v274;
            v275 = 0;
            v276 = 1;
            do
            {
              v277 = v275;
              v278 = *(_QWORD *)(v254 + 8);
              if (v278)
                *(_QWORD *)(v254 + 8) = v278 + 1;
              v279 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)v499 + 1));
              *((_QWORD *)v499 + 3) = CMMConvTRC::CMMConvTRC((uint64_t)v279, v276, v254, 21512, valuePtr, *((_QWORD *)v499 + 3), 3, 1, 1.0, 0, 0);
              v276 = 2;
              v275 = 1;
            }
            while ((v277 & 1) == 0);
          }
        }
      }
      else if (v490 == 1)
      {
        pthread_mutex_lock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        if (!legacyLabChanLToPCSTable)
        {
          *(_QWORD *)&valuePtr[0] = 0;
          CMMMemMgr::CMMMemMgr((CMMMemMgr *)valuePtr);
          v235 = (int *)CMMBase::NewInternal(0x5408uLL, (_QWORD **)valuePtr);
          v236 = 0;
          v237 = 0;
          legacyLabChanLToPCSDataPtr = (uint64_t)v235;
          v238 = (int64x2_t)xmmword_18B3EA6B0;
          do
          {
            v239.i64[0] = v236;
            v239.i64[1] = v236 + 4112;
            v240 = (int8x16_t)vdupq_n_s64(0x1000000uLL);
            v241 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v240, v239), (int8x16_t)v239, v240);
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v238)).u8[0] & 1) != 0)
              v235[v237] = v241.i32[0];
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v238)).i32[1] & 1) != 0)
              v235[v237 + 1] = v241.i32[2];
            v237 += 2;
            v238 = vaddq_s64(v238, vdupq_n_s64(2uLL));
            v236 += 8224;
          }
          while (v237 != 4098);
          MakeLookups(v235);
          v242 = CMMBase::NewInternal(0x28uLL, (_QWORD **)valuePtr);
          v243 = legacyLabChanLToPCSDataPtr;
          v242[2] = 0;
          v242[3] = v243;
          *v242 = off_1E215FE00;
          v242[1] = 0;
          v242[4] = 21512;
          legacyLabChanLToPCSTable = (uint64_t)v242;
          v244 = (int *)CMMBase::NewInternal(0x5408uLL, (_QWORD **)valuePtr);
          v245 = 0;
          v246 = 0;
          legacyLabChanAnBToPCSDataPtr = (uint64_t)v244;
          v247 = (int64x2_t)xmmword_18B3EA6B0;
          do
          {
            v248.i64[0] = v245;
            v248.i64[1] = v245 + 4112;
            v249 = (int8x16_t)vdupq_n_s64(0x1000000uLL);
            v250 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v249, v248), (int8x16_t)v248, v249);
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v247)).u8[0] & 1) != 0)
              v244[v246] = v250.i32[0];
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v247)).i32[1] & 1) != 0)
              v244[v246 + 1] = v250.i32[2];
            v246 += 2;
            v247 = vaddq_s64(v247, vdupq_n_s64(2uLL));
            v245 += 8224;
          }
          while (v246 != 4098);
          MakeLookups(v244);
          v251 = CMMBase::NewInternal(0x28uLL, (_QWORD **)valuePtr);
          v252 = legacyLabChanAnBToPCSDataPtr;
          v251[2] = 0;
          v251[3] = v252;
          *v251 = off_1E215FE00;
          v251[1] = 0;
          v251[4] = 21512;
          legacyLabChanAnBToPCSTable = (uint64_t)v251;
          CMMMemMgr::ReleaseMemList((void **)valuePtr);
        }
        pthread_mutex_unlock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        v253 = legacyLabChanLToPCSTable;
        v254 = legacyLabChanAnBToPCSTable;
        *((_DWORD *)v499 + 9) = 1347182946;
        if (v253)
          goto LABEL_428;
      }
    }
    else
    {
      v255 = (*(uint64_t (**)(CMMProfile *, _OWORD *, void (***)(CMMRGBCurves *__hidden)))(*(_QWORD *)v489 + 40))(v489, v509, &v501);
      if (v490 == 1)
        v256 = v255;
      else
        v256 = 0;
      if (v256 == 1)
      {
        ConversionManager::AddMatrixConv((uint64_t)v499, (const __CFDictionary *)v509, (uint64_t)&v501, *((unsigned __int8 *)v499 + 40), 1, 0, theDict);
        goto LABEL_564;
      }
      v257 = v255 ^ 1;
      if (v490 != 2)
        v257 = 1;
      v258 = theDict;
      if (((v257 | v482) & 1) != 0)
      {
        if (v490 == 3)
          v259 = v255;
        else
          v259 = 0;
        if (v259 == 1)
        {
LABEL_412:
          ConversionManager::AddMatrixConvPCSToPCS(v499, (CMMXYZTag *(*)[3])v509, (CMMRGBCurves *)&v501, *((unsigned __int8 *)v499 + 40), theDict);
        }
        else
        {
          v284 = *((_DWORD *)v489 + 12);
          if ((v284 - 1296255029) < 4 || v284 == 1281450528)
          {
LABEL_773:
            v465 = __cxa_allocate_exception(4uLL);
            *v465 = -171;
          }
          if (v284 == 1196573017 && v490 == 1)
          {
            ConversionManager::AddGrayConv(v499, v489, *((unsigned __int8 *)v499 + 40), theDict);
          }
          else if (v490 == 2 && v284 == 1196573017)
          {
            ConversionManager::AddInvGrayConv((CMMMemMgr **)v499, v489, *((_BYTE *)v499 + 40));
          }
          else
          {
            if (v284 != 1196573017 || v490 != 3)
              goto LABEL_773;
            v301 = *((_DWORD *)v489 + 13);
            if (v301 == 1347182946 || v301 == 1281450528)
            {
              v302 = *((_BYTE *)v499 + 40) != 0;
              ConversionManager::AddInvGrayConv((CMMMemMgr **)v499, v489, *((_BYTE *)v499 + 40));
              ConversionManager::AddGrayConv(v499, v489, v302, 0);
            }
            else
            {
              *(_QWORD *)&valuePtr[0] = off_1E215FED0;
              *((_QWORD *)&valuePtr[6] + 1) = 1065353216;
              memset((char *)valuePtr + 8, 0, 96);
              ConversionManager::AddXYZToLab((uint64_t)v499);
              DWORD2(valuePtr[0]) = 0x10000;
              HIDWORD(valuePtr[2]) = 1065353216;
              v391 = (CMMConvNode *)CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v499 + 1), *((CMMConvNode **)v499 + 3));
              *((_QWORD *)v499 + 3) = v391;
              DWORD2(valuePtr[0]) = 0x10000;
              *(int32x2_t *)((char *)&valuePtr[5] + 4) = vdup_n_s32(0x808080u);
              HIDWORD(valuePtr[2]) = 1065353216;
              *(_QWORD *)&valuePtr[6] = 0x3F0000003F000000;
              *((_QWORD *)v499 + 3) = CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v499 + 1), v391);
              ConversionManager::AddLabToXYZ((uint64_t)v499);
            }
          }
        }
      }
      else
      {
        if (v21)
        {
          v280 = (*(uint64_t (**)(CMMProfile *))(*(_QWORD *)v21 + 104))(v21);
          v258 = theDict;
          if (v280)
          {
            v281 = ColorSyncProfileGetLuminanceCoefficients(*((float **)v489 + 2));
            if (v281)
              v282 = 0;
            else
              v282 = 4294967126;
            goto LABEL_443;
          }
        }
        if (!v258)
        {
          ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 2, 0, 0);
          goto LABEL_564;
        }
        if (CFDictionaryGetValue(v258, CFSTR("com.apple.cmm.ApplyYCCGammaScaling")) != v473)
        {
          if (CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.ApplyLuminanceScaling")) != v473)
          {
            ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 2, 0, theDict);
            goto LABEL_564;
          }
          v281 = ColorSyncProfileGetLuminanceCoefficients(*((float **)v489 + 2));
          if (v281)
            v282 = 0;
          else
            v282 = 4294967126;
LABEL_443:
          CMMThrowExceptionOnError(v282);
          v283 = *(_OWORD *)v281;
          valuePtr[0] = xmmword_18B3EA960;
          *(_QWORD *)&valuePtr[1] = 0;
          *(__int128 *)((char *)&valuePtr[1] + 8) = v283;
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 2, (uint64_t)valuePtr, theDict);
          goto LABEL_564;
        }
        RGBtoYCCMatrix = ColorSyncProfileGetRGBtoYCCMatrix(*((float **)v489 + 2));
        YCCtoRGBMatrix = ColorSyncProfileGetYCCtoRGBMatrix(*((float **)v489 + 2));
        if (YCCtoRGBMatrix)
          v291 = RGBtoYCCMatrix == 0;
        else
          v291 = 1;
        if (v291)
          v292 = 4294967126;
        else
          v292 = 0;
        CMMThrowExceptionOnError(v292);
        memset((char *)&valuePtr[4] + 8, 0, 40);
        memset((char *)&valuePtr[2] + 8, 0, 32);
        *(_QWORD *)&valuePtr[0] = 1120403456;
        DWORD2(valuePtr[0]) = 1120403456;
        memset((char *)valuePtr + 12, 0, 28);
        v293 = *(_OWORD *)RGBtoYCCMatrix;
        v294 = *((_OWORD *)RGBtoYCCMatrix + 1);
        *((float *)&valuePtr[4] + 2) = RGBtoYCCMatrix[8];
        *(__int128 *)((char *)&valuePtr[2] + 8) = v293;
        *(__int128 *)((char *)&valuePtr[3] + 8) = v294;
        v295 = *(_OWORD *)YCCtoRGBMatrix;
        v296 = *((_OWORD *)YCCtoRGBMatrix + 1);
        *((float *)&valuePtr[6] + 3) = YCCtoRGBMatrix[8];
        *(__int128 *)((char *)&valuePtr[4] + 12) = v295;
        *(__int128 *)((char *)&valuePtr[5] + 12) = v296;
        ConversionManager::AddInvMatrixConv((uint64_t)v499, (CMMXYZTag *(*)[3])v509, &v501, *((unsigned __int8 *)v499 + 40), 2, (uint64_t)valuePtr, theDict);
      }
    }
LABEL_564:
    v7 = v481;
    v335 = v486;
    v21 = v489;
    if (!v500)
      goto LABEL_634;
    if ((v482 & 1) == 0 && (v480 == 3 || v490 == 3 && *((_DWORD *)v489 + 24) == 3))
    {
      if (v486 == v483)
      {
        if (*((_DWORD *)v499 + 9) == 1482250784)
        {
          *(_QWORD *)&valuePtr[0] = CMMProfile::GetWhitePoint(*((CMMProfile **)v489 + 2));
          DWORD2(valuePtr[0]) = v358;
          ConversionManager::AddXYZToXYZ(v499, (int *)&qword_18B3FA238, (int *)valuePtr);
          goto LABEL_633;
        }
        goto LABEL_634;
      }
      if (!v479)
      {
        v466 = __cxa_allocate_exception(4uLL);
        *v466 = -171;
      }
      WhitePoint = CMMProfile::GetWhitePoint(*((CMMProfile **)v489 + 2));
      v353 = v352;
      *(_QWORD *)&valuePtr[0] = WhitePoint;
      DWORD2(valuePtr[0]) = v352;
      v354 = *(_QWORD *)(v486 + 48);
      if (!v354)
      {
        v467 = __cxa_allocate_exception(4uLL);
        *v467 = -171;
      }
      v355 = CMMProfile::GetWhitePoint(*(CMMProfile **)(v354 + 16));
      *(_QWORD *)&v515[0] = v355;
      DWORD2(v515[0]) = v356;
      if ((int)v355 - 7 < (int)WhitePoint
        && (int)v355 + 7 > (int)WhitePoint
        && HIDWORD(v355) - 7 < SHIDWORD(WhitePoint)
        && HIDWORD(v355) + 7 > SHIDWORD(WhitePoint)
        && v356 - 7 < v353
        && v356 + 7 > v353)
      {
        goto LABEL_633;
      }
      v357 = v499;
      if (*((_DWORD *)v499 + 9) != 1482250784)
      {
        ConversionManager::AddLabToXYZ((uint64_t)v499);
        v357 = v499;
      }
      ConversionManager::AddXYZToXYZ(v357, (int *)&qword_18B3FA238, (int *)valuePtr);
      ConversionManager::AddXYZToXYZ(v499, (int *)v515, (int *)&qword_18B3FA238);
      if (v479 == 1482250784)
      {
LABEL_633:
        v7 = v481;
        v335 = v486;
        v21 = v489;
        goto LABEL_634;
      }
LABEL_629:
      ConversionManager::AddXYZToLab((uint64_t)v499);
      goto LABEL_633;
    }
    if (v478)
      v336 = v486 == v484;
    else
      v336 = 0;
    v337 = v336;
    v338 = *((_DWORD *)v489 + 11);
    if (v338 == 1818848875)
      v339 = 0;
    else
      v339 = v337;
    if (v338 == 1852662636)
      v340 = 0;
    else
      v340 = v339;
    if (v337 != 1 || v338 == 1818848875 || v338 == 1852662636)
    {
      if (!v340)
        goto LABEL_626;
      v341 = 0;
      v342 = 0;
LABEL_583:
      v343 = v499;
      if (*((_DWORD *)v499 + 9) == 1347182946)
      {
        ConversionManager::AddLabToXYZ((uint64_t)v499);
        v343 = v499;
      }
      v344 = (float *)CMMBase::NewInternal(0x40uLL, *((_QWORD ***)v343 + 1));
      v345 = v344;
      v346 = *((_QWORD *)v499 + 3);
      *((_DWORD *)v344 + 2) = 1;
      *((_QWORD *)v344 + 2) = 0;
      *((_QWORD *)v344 + 3) = v346;
      if (v346)
        *(_QWORD *)(v346 + 16) = v344;
      v347 = (float)v342 * 0.000000059605;
      v348 = (float)v341 * 0.000000059605;
      *((_QWORD *)v344 + 5) = 0x3FFFFF0000000000;
      *((_WORD *)v344 + 17) = 0;
      *((_BYTE *)v344 + 36) = 0;
      *(_QWORD *)v344 = off_1E215FB10;
      *((_BYTE *)v344 + 33) = 1;
      v344[12] = v348;
      v344[13] = v347;
      v349 = DecodeL(v347 * 100.0);
      v350 = (1.0 - v349) / (1.0 - DecodeL(v348 * 100.0));
      v345[14] = v350;
      v345[15] = 1.0 - v350;
      *((_QWORD *)v499 + 3) = v345;
      v7 = v481;
      v21 = v489;
      if (!*((_QWORD *)v499 + 2))
        *v498 = (CMMConvNode *)v345;
      v335 = v486;
      if (v479 != 1347182946)
        goto LABEL_634;
      goto LABEL_629;
    }
    ConversionManager::GetProfileSrcBlackPointLightness();
    if (v486 + 40 == *(_QWORD *)(v481 + 16))
    {
      v468 = __cxa_allocate_exception(4uLL);
      *v468 = -171;
    }
    v341 = v359;
    v360 = *(_DWORD *)(*(_QWORD *)(v486 + 48) + 48);
    switch(v360)
    {
      case 1296255029:
        v361 = 893602898;
        break;
      case 1296255030:
        v361 = 910380114;
        break;
      case 1296255031:
        v361 = 927157330;
        break;
      case 1296255032:
        v361 = 943934546;
        break;
      default:
        v361 = 1145856354;
        if (v360 != 1281450528)
          v361 = *(_DWORD *)(*(_QWORD *)(v486 + 48) + 48);
        break;
    }
    if (*(_BYTE *)(v486 + 65) || *(_BYTE *)(v486 + 64) || v361 != 1129142603 && v361 != 1380401696)
    {
      ConversionManager::GetProfileSrcBlackPointLightness();
      v342 = v362;
LABEL_621:
      v335 = v486;
      v21 = v489;
      goto LABEL_622;
    }
    v508 = 0;
    v365 = (_QWORD *)ConversionManager::CreateBlackPointEstimationTransform((uint64_t)v499, 1, v486 + 40, *(_DWORD *)(v486 + 60), 1, &v508);
    v366 = v508;
    if (v508 - 5 >= 0xFFFFFFFFFFFFFFFELL)
      v367 = 0;
    else
      v367 = 4294967125;
    CMMThrowExceptionOnError(v367);
    bzero(valuePtr, 0x3000uLL);
    v513 = 0;
    v512 = 0;
    ConversionManager::GetProfileSrcBlackPointLightness();
    bzero(v511, 0x400uLL);
    bzero(v510, 0x400uLL);
    v368 = 0;
    v369 = 0;
    v370 = (HIDWORD(v512) << 24) / (0x1000000 - v512);
    v371 = 4 * v366;
    v372 = (_DWORD *)valuePtr + 2;
    v373 = (v513 << 24) / (0x1000000 - v512);
    do
    {
      v374 = v368 / 0xFFuLL;
      *(v372 - 2) = v374;
      *(v372 - 1) = (((0x1000000 - v374) * v370) >> 24) + 0x800000;
      *v372 = (((0x1000000 - v374) * v373) >> 24) + 0x800000;
      *(float *)&v510[v369] = (float)(int)v374;
      v369 += 4;
      v372 = (_DWORD *)((char *)v372 + v371);
      v368 += 0x1000000;
    }
    while (v369 != 1024);
    v506[0] = 0;
    v506[1] = 0;
    if (v365)
    {
      v375 = v365;
      do
      {
        (*(void (**)(_QWORD *, __int128 *, _QWORD *, unint64_t, uint64_t))(*v375 + 104))(v375, valuePtr, v506, v366, 256);
        v375 = (_QWORD *)v375[2];
      }
      while (v375);
      do
      {
        v376 = (_QWORD *)v365[2];
        (*(void (**)(_QWORD *))(*v365 + 8))(v365);
        v365 = v376;
      }
      while (v376);
    }
    v377 = *((_DWORD *)valuePtr + 255 * v366);
    if (v377 <= SLODWORD(valuePtr[0]))
    {
      v342 = 0;
      goto LABEL_621;
    }
    v378 = -255;
    v379 = valuePtr;
    v335 = v486;
    do
    {
      v380 = *((_DWORD *)v379 + 255 * v366);
      if (*((_DWORD *)v379 + 254 * v366) > v380)
        *((_DWORD *)v379 + 254 * v366) = v380;
      v379 = (__int128 *)((char *)v379 - 4 * v366);
      v381 = __CFADD__(v378++, 1);
    }
    while (!v381);
    v382 = 0;
    v383 = (int *)valuePtr;
    v384 = valuePtr[0];
    do
    {
      *(float *)&v511[v382++] = (float)*v383;
      v383 = (int *)((char *)v383 + v371);
    }
    while (v382 != 256);
    v385 = v377 - v384;
    v386 = 0.25;
    v387 = *(float *)&v23;
    v21 = v489;
    if (*(_DWORD *)(v486 + 60) == 1)
    {
      v388 = 0;
      v389 = floor((double)(v384 + (int)((double)v385 * 0.2)) + 0.5);
      while (1)
      {
        v390 = *(float *)&v510[v388 * 4];
        if (v390 > v389 && vabds_f32(*(float *)&v511[v388], v390) > 671090.0)
          break;
        if (++v388 == 256)
        {
          v342 = v512;
          goto LABEL_622;
        }
      }
      v386 = 0.5;
      v387 = *(float *)&v472;
    }
    v392 = 1.0 / (float)v385;
    bzero(v515, 0x400uLL);
    bzero(v514, 0x400uLL);
    v393 = -1;
    v394 = *(float *)v511;
    v395 = 1;
    v396 = -1;
    do
    {
      v397 = (float)(*(float *)&v511[v395] - v394) * v392;
      if (v393 == -1)
      {
        if (v397 >= v387)
          v393 = v395;
        else
          v393 = -1;
      }
      if (v396 == -1)
      {
        if (v397 < v386)
        {
          if (v393 != -1)
          {
            v398 = (double)(int)v395 * 0.00392156863;
            *((float *)v515 + v395 - v393) = v398;
            *(float *)&v514[4 * v395 + -4 * v393] = v397;
          }
          v396 = -1;
          goto LABEL_676;
        }
        v396 = v395;
      }
      if (v393 != -1)
        break;
LABEL_676:
      ++v395;
    }
    while (v395 != 255);
    v399 = (v396 - v393);
    if ((int)v399 < 3)
      goto LABEL_718;
    v497 = v23;
    v400 = 0;
    memset(v524, 0, sizeof(v524));
    v523 = 0;
    v522 = 0;
    v521 = 0;
    v520 = 0;
    do
    {
      v401 = 0.0;
      v402 = (float *)v515;
      v403 = (float *)v514;
      v404 = v399;
      do
      {
        v405 = *v403++;
        v406 = v405;
        v407 = *v402++;
        v401 = v401 + v406 * pow(v407, (double)(int)v400);
        --v404;
      }
      while (v404);
      v408 = 0;
      *((float *)&v520 + v400) = v401;
      do
      {
        v409 = 0.0;
        v410 = (float *)v515;
        v411 = v399;
        do
        {
          v412 = v409;
          v413 = *v410++;
          v414 = pow(v413, (double)(int)v408);
          v409 = v412 + v414 * pow(v413, (double)(int)v400);
          --v411;
        }
        while (v411);
        *(float *)&v524[3 * v400 + v408++] = v409;
      }
      while (v408 != 3);
      ++v400;
    }
    while (v400 != 3);
    v415 = 0;
    v416 = 0;
    v417 = 1;
    v21 = v489;
    v23 = v497;
    while (2)
    {
      v418 = v415;
LABEL_688:
      v419 = *(float *)&v524[3 * v415 + v418];
      if (v415)
      {
        v420 = v417;
        do
        {
          v419 = v419
               - (float)(*(float *)&v524[3 * v415 + (v420 - 2)]
                       * *(float *)&v524[3 * v418 + (v420 - 2)]);
          --v420;
        }
        while (v420 > 1);
      }
      if (v415 != v418)
      {
        v422 = v419 / *((float *)&v522 + v415);
        *(float *)&v524[3 * v418 + v415] = v422;
LABEL_695:
        if (++v418 == 3)
        {
          v416 = v415 > 1;
          ++v417;
          if (++v415 != 3)
            continue;
          goto LABEL_699;
        }
        goto LABEL_688;
      }
      break;
    }
    if (v419 > 0.0)
    {
      v421 = sqrt(v419);
      *((float *)&v522 + v415) = v421;
      goto LABEL_695;
    }
    if (!v416)
    {
      v441 = -1;
      v335 = v486;
      goto LABEL_719;
    }
LABEL_699:
    v423 = 0;
    v518 = 0.0;
    v517 = 0;
    v424 = 1;
    do
    {
      v425 = *((float *)&v520 + v423);
      if (v423)
      {
        v426 = v424;
        do
        {
          v425 = v425
               - (float)(*(float *)&v524[3 * v423 + (v426 - 2)]
                       * *((float *)&v517 + (v426 - 2)));
          --v426;
        }
        while (v426 > 1);
      }
      v427 = v425 / *((float *)&v522 + v423);
      *((float *)&v517 + v423++) = v427;
      ++v424;
    }
    while (v423 != 3);
    v428 = 0;
    v429 = (float *)&v525 + 1;
    v430 = 2;
    v335 = v486;
    do
    {
      v431 = v430;
      v432 = *((float *)&v517 + v430);
      if (v430-- <= 1)
      {
        v434 = v429;
        v435 = v428;
        do
        {
          v436 = *v434;
          v434 += 3;
          v432 = v432 - (float)(v436 * *(float *)&v519[4 * v435]);
          v381 = __CFADD__(v435++, 1);
        }
        while (!v381);
      }
      v437 = v432 / *((float *)&v522 + v431);
      *((float *)&v517 + v431) = v437;
      --v428;
      v429 -= 4;
    }
    while (v431);
    if (v518 <= 0.000001)
    {
      if (*((float *)&v517 + 1) <= 0.000001)
        goto LABEL_718;
      v440 = 0.5 - *(float *)&v517 / *((float *)&v517 + 1);
LABEL_717:
      v441 = vcvtmd_s64_f64(v440);
    }
    else
    {
      v438 = (float)(v518 * (float)(*(float *)&v517 * -4.0)) + (float)(*((float *)&v517 + 1) * *((float *)&v517 + 1));
      if (v438 >= 0.0)
      {
        v439 = (sqrtf(v438) - *((float *)&v517 + 1)) / (v518 + v518);
        if (v439 > 0.0)
        {
          v440 = v439 + 0.5;
          goto LABEL_717;
        }
      }
LABEL_718:
      v441 = -1;
    }
LABEL_719:
    v442 = v441 & ~(v441 >> 31);
    if (v442 >= 0x800000)
      v342 = 0x800000;
    else
      v342 = v442;
LABEL_622:
    if (v341 == v342)
      v363 = 0;
    else
      v363 = v340;
    if ((v363 & 1) != 0)
      goto LABEL_583;
LABEL_626:
    v7 = v481;
    if (v335 != v483)
    {
      v364 = *((_DWORD *)v499 + 9);
      if (v364 == 1482250784 && v479 == 1347182946)
        goto LABEL_629;
      if (v364 == 1347182946 && v479 == 1482250784)
      {
        ConversionManager::AddLabToXYZ((uint64_t)v499);
        goto LABEL_633;
      }
    }
LABEL_634:
    v22 = *((_DWORD *)v499 + 9);
    v19 = v335 + 40;
    v20 = *(_QWORD *)(v7 + 16);
  }
  while (v19 != v20);
LABEL_722:
  v443 = *v498;
  if (*v498)
  {
    v444 = 0;
    do
    {
      if (++v444 <= 0x64)
        v445 = 0;
      else
        v445 = 4294967125;
      CMMThrowExceptionOnError(v445);
      v443 = (CMMConvNode *)*((_QWORD *)v443 + 2);
    }
    while (v443);
  }
  else
  {
    v444 = 0;
  }
  if (v444 <= 1)
    v446 = 1;
  else
    v446 = v444;
  *(_QWORD *)&valuePtr[0] = 0;
  v447 = (2 * v446) | 1;
LABEL_735:
  v448 = *v498;
  *(_QWORD *)&v515[0] = v447;
  if (v448)
  {
    while (1)
    {
      v449 = CMMConvNode::RemoveNOPs(v448, (unint64_t *)v515, v475);
      *v498 = v449;
      if (!v449)
        break;
      v450 = 0;
      v451 = *((_QWORD *)v499 + 1);
      do
      {
        if (((*(uint64_t (**)(CMMConvNode *))(*(_QWORD *)v449 + 80))(v449) & 1) == 0)
          v450 |= (*(uint64_t (**)(CMMConvNode *, uint64_t, __int128 *))(*(_QWORD *)v449 + 16))(v449, v451, valuePtr);
        v449 = (CMMConvNode *)*((_QWORD *)v449 + 2);
      }
      while (v449);
      if ((v450 & 1) == 0)
      {
        v449 = *v498;
        break;
      }
      v448 = *(CMMConvNode **)&valuePtr[0];
      if (!*(_QWORD *)&valuePtr[0])
        goto LABEL_735;
      *v498 = *(CMMConvNode **)&valuePtr[0];
      *(_QWORD *)&v515[0] = v447;
    }
  }
  else
  {
    v449 = 0;
  }
  v452 = v474;
  if (v474)
  {
    if (v449)
    {
      if (*((_QWORD *)v449 + 2))
        v453 = 0;
      else
        v453 = 2
      v455 = theDict;
      v454 = 0;
      *v474 = v453;
      do
      {
        v456 = (*(uint64_t (**)(CMMConvNode *, CFDictionaryRef))(*(_QWORD *)v449 + 200))(v449, v455) | v454;
        else
          v454 = v456;
        v449 = (CMMConvNode *)*((_QWORD *)v449 + 2);
        v455 = theDict;
      }
      while (v449);
      if ((v454 & 8) != 0)
      {
        v458 = 8;
        v452 = v474;
      }
      else
      {
        v452 = v474;
        if ((v454 & 4) == 0)
          goto LABEL_759;
        v458 = 4;
      }
    }
    else
    {
      v454 = 0;
      *v474 = 1;
LABEL_759:
      if ((v454 & 2) != 0)
        v458 = 2;
      else
        v458 = v454;
    }
    v452[1] = v458;
    v449 = *v498;
    if (*v498)
    {
      v459 = *v498;
      while (1)
      {
        v461 = v460 != 0;
        if (v460)
          break;
        v459 = (CMMConvNode *)*((_QWORD *)v459 + 2);
        if (!v459)
          goto LABEL_768;
      }
    }
    else
    {
LABEL_768:
      v461 = 0;
    }
    *((_BYTE *)v452 + 8) = v461;
  }
  return v449;
}

void sub_18B3A86B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CMMConvNode *CMMConvNode::RemoveNOPs(CMMConvNode *this, unint64_t *a2, _BOOL4 a3)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  CMMConvNode *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  CMMConvNode *v14;
  uint64_t v15;

  if ((*a2)--)
    v7 = 0;
  else
    v7 = 4294967125;
  CMMThrowExceptionOnError(v7);
  if (((*(uint64_t (**)(CMMConvNode *))(*(_QWORD *)this + 80))(this) & 1) == 0
    && (!a3 || !(*(unsigned int (**)(CMMConvNode *))(*(_QWORD *)this + 224))(this)))
  {
    v10 = (CMMConvNode *)*((_QWORD *)this + 2);
    if (v10)
    {
      v11 = CMMConvNode::RemoveNOPs(v10, a2, a3);
      *((_QWORD *)this + 2) = v11;
      if (v11)
        *(_QWORD *)(v11 + 24) = this;
    }
    return this;
  }
  if (*((_BYTE *)this + 35))
  {
    v8 = (_QWORD *)*((_QWORD *)this + 3);
    if (v8)
    {
      v9 = 6;
    }
    else
    {
      v8 = (_QWORD *)*((_QWORD *)this + 2);
      if (!v8)
        goto LABEL_16;
      v9 = 3;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
LABEL_16:
  if (*((_BYTE *)this + 36))
  {
    v12 = (_QWORD *)*((_QWORD *)this + 2);
    if (v12)
    {
      v13 = 3;
LABEL_21:
      (*(void (**)(void))(*v12 + 8 * v13))();
      goto LABEL_22;
    }
    v12 = (_QWORD *)*((_QWORD *)this + 3);
    if (v12)
    {
      v13 = 6;
      goto LABEL_21;
    }
  }
LABEL_22:
  v14 = (CMMConvNode *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    *((_QWORD *)v14 + 3) = *((_QWORD *)this + 3);
    v15 = CMMConvNode::RemoveNOPs(v14, a2, a3);
  }
  else
  {
    v15 = 0;
  }
  (*(void (**)(CMMConvNode *))(*(_QWORD *)this + 8))(this);
  return (CMMConvNode *)v15;
}

BOOL CMMConvTRC::IsNOP(CMMConvTRC *this)
{
  _BOOL8 result;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  if (*((_BYTE *)this + 32))
    return 1;
  if (*((_BYTE *)this + 35) || *((_BYTE *)this + 36))
    return 0;
  if (*((_DWORD *)this + 23) == 7)
    return 1;
  v2 = CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 8) + 16), *(_QWORD *)(*((_QWORD *)this + 8) + 24));
  if (!v2)
    return 1;
  v3 = (int *)(v2 + 8);
  v4 = 0x2000;
  do
  {
    v5 = *v3++;
    result = v4 == v5;
    if (v4 != v5)
      break;
    v6 = v4 == 16769024;
    v4 += 4096;
  }
  while (!v6);
  return result;
}

BOOL CMMConvTRC::IsFloatingPointNOP(CMMConvTRC *this)
{
  return memcmp((char *)this + 88, &CMMConvTRC::IsFloatingPointNOP(void)const::identity, 0x38uLL) == 0;
}

uint64_t CMMTable::FloatData(uint64_t this, uint64_t a2)
{
  _DWORD *exception;

  if (this)
  {
    if (!a2)
      goto LABEL_3;
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (a2)
    return a2;
  return this;
}

uint64_t CMMConvTRC::Collapse@<X0>(CMMConvTRC *this@<X0>, CMMMemMgr *a2@<X1>, int a3@<W8>)
{
  CMMConvTRC *v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  const void *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE v55[56];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v6 = this;
  while (1)
  {
    v6 = (CMMConvTRC *)*((_QWORD *)v6 + 2);
    if (!v6)
      return (v6 != 0) & a3;
    if (!v7)
      break;
    v8 = (uint64_t)v7;
    a3 = v7[18];
    if (a3 == *((_DWORD *)this + 18))
    {
      v10 = v9;
      LOBYTE(a3) = 0;
      switch(*((_DWORD *)this + 23))
      {
        case 9:
          if (*(_DWORD *)(v8 + 92) != 8)
            goto LABEL_48;
          goto LABEL_84;
        case 0xB:
          return (v6 != 0) & a3;
        case 0xC:
          if (*(_DWORD *)(v8 + 92) != 13)
            goto LABEL_19;
          if (*((float *)this + 29) != *(float *)(v8 + 116))
            goto LABEL_43;
          goto LABEL_84;
        case 0xE:
          if (*(_DWORD *)(v8 + 92) != 15)
            goto LABEL_19;
          goto LABEL_84;
        default:
LABEL_19:
          if (v9)
          {
            if (!*((_BYTE *)v9 + 160))
            {
              v25 = v9[21];
              if (v25)
              {
                if (CMMTable::FloatData(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24)))
                {
                  if (*((_BYTE *)v10 + 160) || (v29 = v10[21]) == 0)
                    v26 = 0;
                  else
                    v26 = (int *)CMMTable::FloatData(*(_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 24));
                  v30 = (int *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 8) + 16), *(_QWORD *)(*((_QWORD *)this + 8) + 24));
                  if (v26)
                    v31 = v30 == 0;
                  else
                    v31 = 1;
                  v32 = v31;
                  v33 = v32 ^ 1;
                  if (v30 == v26)
                  {
                    v33 = 1;
                  }
                  else if ((v32 & 1) == 0)
                  {
                    v34 = 4097;
                    while (1)
                    {
                      v36 = *v30++;
                      v35 = v36;
                      v37 = *v26++;
                      v38 = v35 - v37;
                      if (v38 < 0)
                        v38 = -v38;
                      if (v38 >= 2)
                        goto LABEL_43;
                      if (!--v34)
                        goto LABEL_84;
                    }
                  }
LABEL_83:
                  if (v33)
                    goto LABEL_84;
                  goto LABEL_43;
                }
              }
            }
          }
          if (v17)
          {
            v18 = v17;
            if (!*((_BYTE *)v17 + 160))
            {
              v27 = v17[21];
              if (v27)
              {
                if (CMMTable::FloatData(*(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24)))
                {
                  if (*((_BYTE *)v18 + 160) || (v39 = v18[21]) == 0)
                    v28 = 0;
                  else
                    v28 = (int *)CMMTable::FloatData(*(_QWORD *)(v39 + 16), *(_QWORD *)(v39 + 24));
                  v40 = (int *)CMMTable::FloatData(*(_QWORD *)(*(_QWORD *)(v8 + 64) + 16), *(_QWORD *)(*(_QWORD *)(v8 + 64) + 24));
                  if (v28)
                    v41 = v40 == 0;
                  else
                    v41 = 1;
                  v42 = v41;
                  v33 = v42 ^ 1;
                  if (v28 == v40)
                  {
                    v33 = 1;
                  }
                  else if ((v42 & 1) == 0)
                  {
                    v43 = 4097;
                    while (1)
                    {
                      v45 = *v28++;
                      v44 = v45;
                      v46 = *v40++;
                      v47 = v44 - v46;
                      if (v47 < 0)
                        v47 = -v47;
                      if (v47 >= 2)
                        goto LABEL_43;
                      if (!--v43)
                        goto LABEL_84;
                    }
                  }
                  goto LABEL_83;
                }
              }
            }
          }
          v19 = (int *)CMMBase::NewInternal(0x8008uLL, (_QWORD **)a2);
          v20 = (const void *)CMMTable::FloatData(*(_QWORD *)(*(_QWORD *)(v8 + 64) + 16), *(_QWORD *)(*(_QWORD *)(v8 + 64) + 24));
          memcpy(v19, v20, 0x4004uLL);
          InvertLUT(v19, v19 + 4097);
          v21 = CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 8) + 16), *(_QWORD *)(*((_QWORD *)this + 8) + 24));
          v22 = (int *)v21;
          if ((int *)v21 == v19 || !v21)
          {
            CMMBase::operator delete((pthread_mutex_t **)v19);
            if (v22 == v19 || v22)
            {
LABEL_84:
              (*(void (**)(CMMConvTRC *))(*(_QWORD *)this + 72))(this);
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
              if (*((_BYTE *)this + 35) || *((_BYTE *)this + 36) || *(_BYTE *)(v8 + 35) || *(_BYTE *)(v8 + 36))
              {
                if (CMMInitializeLinearGammaTable(void)::predicate != -1)
                  dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
                v48 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
                *(_OWORD *)v55 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
                *(_OWORD *)&v55[16] = v48;
                *(_OWORD *)&v55[32] = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
                *(_QWORD *)&v55[48] = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
                v49 = CMMLinearGammaTable;
                v50 = *(_QWORD *)(CMMLinearGammaTable + 8);
                if (v50)
                  *(_QWORD *)(CMMLinearGammaTable + 8) = v50 + 1;
                v51 = *(_QWORD *)(v8 + 16);
                v52 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
                v53 = CMMConvTRC::CMMConvTRC((uint64_t)v52, *((_DWORD *)this + 18), v49, 0, (__int128 *)v55, v8, *((_DWORD *)this + 19), 1, 1.0, 1, 1);
                *(_QWORD *)(v53 + 16) = v51;
                if (v51)
                  *(_QWORD *)(v51 + 24) = v53;
                (*(void (**)(CMMConvTRC *))(*(_QWORD *)this + 32))(this);
                (*(void (**)(CMMConvTRC *))(*(_QWORD *)this + 56))(this);
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
              }
              goto LABEL_95;
            }
          }
          else
          {
            v23 = 0;
            while (1)
            {
              v24 = *(_DWORD *)(v21 + v23 * 4) - v19[v23];
              if (v24 < 0)
                v24 = v19[v23] - *(_DWORD *)(v21 + v23 * 4);
              if (v24 >= 2)
                break;
              if (++v23 == 4097)
              {
                CMMBase::operator delete((pthread_mutex_t **)v19);
                goto LABEL_84;
              }
            }
            CMMBase::operator delete((pthread_mutex_t **)v19);
          }
LABEL_43:
          if (*(_DWORD *)(v8 + 92) == 7 && *((unsigned __int8 *)this + 36) == *(unsigned __int8 *)(v8 + 36))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
            goto LABEL_95;
          }
          if (*((_DWORD *)this + 23) != 7 || *((unsigned __int8 *)this + 36) != *(unsigned __int8 *)(v8 + 36))
            goto LABEL_48;
          goto LABEL_10;
      }
    }
  }
  if (!v11)
    goto LABEL_48;
  v12 = v11[6];
  v56 = v11[7];
  v13 = v11[9];
  v57 = v11[8];
  v58 = v13;
  v14 = v11[5];
  *(_OWORD *)&v55[8] = v11[4];
  *(_OWORD *)&v55[24] = v14;
  v59 = 0;
  LODWORD(v59) = *((_DWORD *)v11 + 40);
  *(_OWORD *)&v55[40] = v12;
  v15 = *((unsigned int *)this + 18);
  if (v15 > 2)
    goto LABEL_10;
  if (*(_DWORD *)&v55[4 * v15 + 8] || (v16 = &v55[4 * v15], *((_DWORD *)v16 + 5)) || *((_DWORD *)v16 + 8))
  {
LABEL_48:
    LOBYTE(a3) = 0;
  }
  else
  {
LABEL_10:
    (*(void (**)(CMMConvTRC *))(*(_QWORD *)this + 72))(this);
LABEL_95:
    LOBYTE(a3) = 1;
  }
  return (v6 != 0) & a3;
}

BOOL CMMConvMatrix::IsNOP(CMMConvMatrix *this)
{
  BOOL v1;
  unint64_t v3;
  CMMConvMatrix *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  if (*((_BYTE *)this + 32))
  {
    return 1;
  }
  else if (*((float *)this + 40) == 1.0)
  {
    v3 = 0;
    v1 = 0;
    v4 = this;
LABEL_7:
    v5 = 0;
    while (*((_DWORD *)v4 + v5 + 16) == (v3 == v5) << 16)
    {
      if (v3 == v5)
      {
        v6 = *((float *)this + 3 * v3 + v3 + 25);
        if (v6 < 0.99999 || v6 > 1.00001)
          return v1;
      }
      else
      {
        v7 = *((float *)v4 + v5 + 25);
        if (v7 < -0.00001 || v7 > 0.00001)
          return v1;
      }
      if (++v5 == 3)
      {
        if (!*((_DWORD *)this + v3 + 34))
        {
          v8 = *((float *)this + v3 + 37);
          if (v8 >= -0.00001 && v8 <= 0.00001)
          {
            v1 = v3 > 1;
            v4 = (CMMConvMatrix *)((char *)v4 + 12);
            if (++v3 != 3)
              goto LABEL_7;
          }
        }
        return v1;
      }
    }
  }
  else
  {
    return 0;
  }
  return v1;
}

uint64_t CMMDisplayProfile::GetSrcColorSpace(_DWORD *a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  _DWORD *exception;

  if (a2 > 0xE)
    goto LABEL_17;
  if (((1 << a2) & 0x540C) != 0)
    goto LABEL_9;
  if (((1 << a2) & 0x2A02) == 0)
  {
    if (a2 == 4 && (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1))
    {
LABEL_9:
      v3 = a1[13];
      v6 = v3 == 1281450528;
      v5 = 1347182946;
LABEL_10:
      if (v6)
        return v5;
      else
        return v3;
    }
LABEL_17:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  v3 = a1[12];
  switch(v3)
  {
    case 0x4D434835u:
      result = 893602898;
      break;
    case 0x4D434836u:
      result = 910380114;
      break;
    case 0x4D434837u:
      result = 927157330;
      break;
    case 0x4D434838u:
      result = 943934546;
      break;
    default:
      v5 = 1145856354;
      v6 = v3 == 1281450528;
      goto LABEL_10;
  }
  return result;
}

uint64_t CMMDisplayProfile::GetDstColorSpace(unsigned int *a1, unsigned int a2, char *a3)
{
  char v4;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  if (a2 > 0xE)
    goto LABEL_20;
  if (((1 << a2) & 0x2A0A) != 0)
  {
    v6 = a1[13];
    v4 = 1;
    if ((_DWORD)v6 == 1281450528)
    {
      v7 = 0;
      v6 = 1347182946;
      goto LABEL_21;
    }
LABEL_17:
    if ((_DWORD)v6 != -1)
    {
      v7 = 0;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (((1 << a2) & 0x5404) != 0)
  {
    v6 = a1[12];
    switch((int)v6)
    {
      case 1296255029:
        goto LABEL_5;
      case 1296255030:
        goto LABEL_11;
      case 1296255031:
        goto LABEL_14;
      case 1296255032:
        goto LABEL_15;
      default:
        goto LABEL_12;
    }
  }
  if (a2 != 4)
  {
LABEL_20:
    v7 = 4294967246;
    v6 = 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  if (!(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = 0;
    goto LABEL_20;
  }
  v6 = a1[12];
  switch((int)v6)
  {
    case 1296255029:
LABEL_5:
      v4 = 0;
      v7 = 0;
      v6 = 893602898;
      break;
    case 1296255030:
LABEL_11:
      v4 = 0;
      v7 = 0;
      v6 = 910380114;
      break;
    case 1296255031:
LABEL_14:
      v4 = 0;
      v7 = 0;
      v6 = 927157330;
      break;
    case 1296255032:
LABEL_15:
      v4 = 0;
      v7 = 0;
      v6 = 943934546;
      break;
    default:
LABEL_12:
      if ((_DWORD)v6 != 1281450528)
      {
        v4 = 0;
        goto LABEL_17;
      }
      v4 = 0;
      v7 = 0;
      v6 = 1145856354;
      break;
  }
LABEL_21:
  CMMThrowExceptionOnError(v7);
  if (a3)
    *a3 = v4;
  return v6;
}

uint64_t CMMConvTRC::GetTransformType(CMMConvTRC *this, const __CFDictionary *a2)
{
  int v2;
  unsigned int v3;

  v2 = *((_DWORD *)this + 22);
  if (v2 == 1)
    v3 = 2;
  else
    v3 = 8;
  if (v2)
    return v3;
  else
    return 4;
}

BOOL CMMMatrix::IsFloatingPointNOP(CMMMatrix *this)
{
  BOOL v1;
  unint64_t v3;
  char *v4;
  uint64_t i;
  double v6;
  double v7;
  double v8;

  if (*((float *)this + 26) == 1.0)
  {
    v3 = 0;
    v1 = 0;
    v4 = (char *)this + 44;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        if (v3 == i)
        {
          v6 = *((float *)this + 3 * v3 + v3 + 11);
          if (v6 < 0.99999 || v6 > 1.00001)
            return v1;
        }
        else
        {
          v7 = *(float *)&v4[4 * i];
          if (v7 < -0.00001 || v7 > 0.00001)
            return v1;
        }
      }
      v8 = *((float *)this + v3 + 23);
      if (v8 < -0.00001)
        break;
      if (v8 > 0.00001)
        break;
      v1 = v3 > 1;
      v4 += 12;
      ++v3;
    }
    while (v3 != 3);
  }
  else
  {
    return 0;
  }
  return v1;
}

BOOL CMMConvMatrix::IsFloatingPointNOP(CMMConvMatrix *this)
{
  return CMMMatrix::IsFloatingPointNOP((CMMConvMatrix *)((char *)this + 56));
}

uint64_t CMMProfile::IsMatrixHDRProfile(CMMProfile *this)
{
  return 0;
}

BOOL CMMProfile::UseNamedColor(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  unsigned __int8 *Tag;
  unsigned int *v7;
  unsigned __int8 *v8;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;

  if (!a2)
    return 0;
  if (*(_DWORD *)(a2 + 44) == 1852662636 && (a3 == 6 || a3 == 3))
  {
    result = ColorSyncProfileContainsTag(*(ColorSyncProfileRef *)(a1 + 16), CFSTR("ncl2"));
    if (!result)
      return result;
    Tag = CMMProfile::GetTag(a1, 1852009522);
    if (Tag)
    else
      v7 = 0;
    v8 = CMMProfile::GetTag(a2, 1852009522);
    if (v8)
    else
      v9 = 0;
    if (v9)
      v10 = v7 == 0;
    else
      v10 = 1;
    if (v10)
      v11 = 4294967126;
    else
      v11 = 0;
    CMMThrowExceptionOnError(v11);
    v13 = *(_DWORD *)(a1 + 48);
    switch(v13)
    {
      case 1296255029:
        v14 = 893602898;
        break;
      case 1296255030:
        v14 = 910380114;
        break;
      case 1296255031:
        v14 = 927157330;
        break;
      case 1296255032:
        v14 = 943934546;
        break;
      default:
        if (v13 == 1281450528)
          v14 = 1145856354;
        else
          v14 = *(_DWORD *)(a1 + 48);
        break;
    }
    v12 = v7[22];
    if (CMMGetChannelCountFromCMMSpace(v14) == v12)
    {
      v15 = (const char *)(v7 + 23);
      if (*((_BYTE *)v7 + 92))
      {
        v17 = *((unsigned __int8 *)v7 + 124);
        v16 = (const char *)(v7 + 31);
        if (v17)
        {
          if (!strcmp(v15, v9 + 92) && !strcmp(v16, v9 + 124))
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t CMMProfile::IsLegacyGenericLab(CMMProfile *this)
{
  return 0;
}

uint64_t CMMConvMatrix::Collapse(CMMConvMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  const void *v3;
  uint64_t result;
  CMMConvMatrix *v7;
  CMMConvMatrix *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t j;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const CMMMatrix *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (**v34)();
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const CMMMatrix *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  const void *v44;
  _QWORD *v45;
  _QWORD *v46;
  const void *v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  const void *v56;
  _BYTE *v57;
  _BYTE *v58;
  int *v59;
  const void *v60;
  void (**v61)(CMMGrayToRGBMatrix *__hidden);
  void (**v62)(CMMGrayToRGBMatrix *__hidden);
  void (*v63)(CMMGrayToRGBMatrix *__hidden);
  _QWORD *v64;
  _QWORD *v65;
  const void *v66;
  _DWORD *v67;
  uint64_t v68;
  void (**v69)(CMMGrayToRGBMatrix *__hidden);
  int *v70;
  void (*v71)(CMMGrayToRGBMatrix *__hidden);
  int *v72;
  BOOL v73;
  _BOOL4 v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t i;
  uint64_t v83;
  int *v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  float32x4_t v104;
  uint64_t v105;
  _QWORD *MatrixConv;
  _QWORD *v107;
  _OWORD v108[7];
  void (**v109)(CMMGrayToRGBMatrix *__hidden);
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[40];
  uint64_t v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v3 = (const void *)*((_QWORD *)this + 2);
  if (!v3
    || ((*(uint64_t (**)(CMMConvMatrix *, CMMMemMgr *, CMMConvNode **))(*(_QWORD *)this + 64))(this, a2, a3) & 1) != 0
    || ((*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 40))(v3) & 1) != 0)
  {
    return 0;
  }
  v8 = v7;
  if (v7
    && !*((_DWORD *)this + 17)
    && !*((_DWORD *)this + 18)
    && !*((_DWORD *)this + 19)
    && !*((_DWORD *)this + 21)
    && !*((_DWORD *)this + 22)
    && !*((_DWORD *)this + 23)
    && !*((_DWORD *)this + 34)
    && !*((_DWORD *)this + 35)
    && !*((_DWORD *)this + 36)
    && *((float *)this + 26) == 0.0
    && *((float *)this + 27) == 0.0
    && *((float *)this + 28) == 0.0
    && *((float *)this + 30) == 0.0
    && *((float *)this + 31) == 0.0
    && *((float *)this + 32) == 0.0
    && *((float *)this + 37) == 0.0
    && *((float *)this + 38) == 0.0
    && *((float *)this + 39) == 0.0)
  {
    *((_BYTE *)this + 32) = 1;
    *((_BYTE *)v7 + 32) = 1;
    *((_QWORD *)&v108[6] + 1) = 0;
    *(_QWORD *)&v108[0] = off_1E215FED0;
    v92 = *((_OWORD *)v7 + 6);
    *(_OWORD *)((char *)&v108[3] + 8) = *((_OWORD *)v7 + 7);
    v93 = *((_OWORD *)v7 + 9);
    *(_OWORD *)((char *)&v108[4] + 8) = *((_OWORD *)v7 + 8);
    *(_OWORD *)((char *)&v108[5] + 8) = v93;
    DWORD2(v108[6]) = *((_DWORD *)v7 + 40);
    v94 = *((_OWORD *)v7 + 5);
    *(_OWORD *)((char *)v108 + 8) = *((_OWORD *)v7 + 4);
    *(_OWORD *)((char *)&v108[1] + 8) = v94;
    v95 = *((_DWORD *)this + 16);
    v96 = SDWORD1(v108[1]) * (uint64_t)v95;
    v97 = *((_DWORD *)this + 20);
    v98 = (int)v94 * (uint64_t)v97;
    DWORD2(v108[0]) = (unint64_t)(v95 * (uint64_t)SDWORD2(v108[0]) + 0x8000) >> 16;
    HIDWORD(v108[0]) = (unint64_t)(v97 * (uint64_t)SHIDWORD(v108[0]) + 0x8000) >> 16;
    *(_OWORD *)((char *)&v108[2] + 8) = v92;
    LODWORD(v108[2]) = (unint64_t)(SDWORD2(v94) * (uint64_t)v95 + 0x8000) >> 16;
    DWORD1(v108[2]) = (unint64_t)(SHIDWORD(v94) * (uint64_t)v97 + 0x8000) >> 16;
    v99 = *((_DWORD *)this + 24);
    v100 = v99 * (uint64_t)SLODWORD(v108[1]);
    v101 = SDWORD1(v94) * (uint64_t)v99;
    v102 = (int)v92 * (uint64_t)v99;
    LODWORD(v92) = *((_DWORD *)this + 25);
    v103 = *((_DWORD *)this + 29);
    LODWORD(v94) = *((_DWORD *)this + 33);
    v104.i64[0] = __PAIR64__(v103, v92);
    v104.i64[1] = __PAIR64__(v92, v94);
    *(float32x4_t *)((char *)&v108[2] + 12) = vmulq_f32(v104, *(float32x4_t *)((char *)&v108[2] + 12));
    v104.i64[0] = __PAIR64__(v94, v103);
    v104.i64[1] = __PAIR64__(v103, v92);
    *(float32x4_t *)((char *)&v108[3] + 12) = vmulq_f32(v104, *(float32x4_t *)((char *)&v108[3] + 12));
    *((float *)&v108[4] + 3) = *(float *)&v94 * *((float *)&v108[4] + 3);
    LODWORD(v108[1]) = (unint64_t)(v100 + 0x8000) >> 16;
    DWORD1(v108[1]) = (unint64_t)(v96 + 0x8000) >> 16;
    DWORD2(v108[1]) = (unint64_t)(v98 + 0x8000) >> 16;
    HIDWORD(v108[1]) = (unint64_t)(v101 + 0x8000) >> 16;
    DWORD2(v108[2]) = (unint64_t)(v102 + 0x8000) >> 16;
    v105 = *((_QWORD *)v7 + 2);
    MatrixConv = CMMMatrix::MakeMatrixConv((CMMMatrix *)v108, a2, v7);
    v107 = MatrixConv;
    MatrixConv[2] = v105;
    if (v105)
      *(_QWORD *)(v105 + 24) = MatrixConv;
    if ((*(unsigned int (**)(CMMConvMatrix *))(*(_QWORD *)this + 40))(this))
      (*(void (**)(_QWORD *))(*v107 + 24))(v107);
    if ((*(unsigned int (**)(CMMConvMatrix *))(*(_QWORD *)v8 + 64))(v8))
      (*(void (**)(_QWORD *))(*v107 + 48))(v107);
    return 1;
  }
  if (!v9)
  {
    if (v27)
    {
      v28 = v27;
      {
        *((_BYTE *)this + 32) = 1;
        v28[32] = 1;
        v29 = *((_QWORD *)v28 + 2);
        memset(&v108[5], 0, 32);
        DWORD2(v108[6]) = 1065353216;
        memset((char *)v108 + 8, 0, 72);
        CMMMatrix::InitializeGrayMatrix((uint64_t)v108, (CMMConvMatrix *)((char *)this + 56), (const CMMMatrix *)(v28 + 56), 0.0);
        v30 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)v30 + 2) = 1;
        v30[3] = v28;
        v30[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v30 + 33) = 1;
        v30[7] = off_1E215FED0;
        *((_DWORD *)v30 + 40) = DWORD2(v108[6]);
        v31 = *(_OWORD *)((char *)&v108[5] + 8);
        *((_OWORD *)v30 + 8) = *(_OWORD *)((char *)&v108[4] + 8);
        *((_OWORD *)v30 + 9) = v31;
        v32 = *(_OWORD *)((char *)&v108[3] + 8);
        v33 = *(_OWORD *)((char *)&v108[1] + 8);
        *((_OWORD *)v30 + 4) = *(_OWORD *)((char *)v108 + 8);
        *((_OWORD *)v30 + 5) = v33;
        *((_OWORD *)v30 + 6) = *(_OWORD *)((char *)&v108[2] + 8);
        *((_OWORD *)v30 + 7) = v32;
        *((_WORD *)v30 + 24) = 256;
        *((_BYTE *)v30 + 32) = 0;
        v34 = off_1E215EB58;
      }
      else
      {
        if (!result)
          return result;
        v47 = (const void *)*((_QWORD *)this + 3);
        if (v47)
        {
          if (v48)
          {
            v49 = v48;
            {
              v56 = (const void *)*((_QWORD *)v28 + 2);
              if (v56)
              {
                if (v57)
                {
                  v58 = v57;
                  if (v57[160] || (v83 = *((_QWORD *)v57 + 21)) == 0)
                    v59 = 0;
                  else
                    v59 = (int *)CMMTable::FloatData(*(_QWORD *)(v83 + 16), *(_QWORD *)(v83 + 24));
                  v84 = (int *)CMMTable::FloatData(*(_QWORD *)(v49[8] + 16), *(_QWORD *)(v49[8] + 24));
                  if (v59)
                    v85 = v84 == 0;
                  else
                    v85 = 1;
                  v86 = v85;
                  if (v84 == v59 || (v86 & 1) != 0)
                  {
                    if (v84 == v59 || v86 != 1)
                    {
LABEL_123:
                      (*(void (**)(_QWORD *))(*v49 + 72))(v49);
                      (*(void (**)(_BYTE *))(*(_QWORD *)v58 + 72))(v58);
                    }
                  }
                  else
                  {
                    v87 = 4097;
                    while (1)
                    {
                      v89 = *v84++;
                      v88 = v89;
                      v90 = *v59++;
                      v91 = v88 - v90;
                      if (v91 < 0)
                        v91 = -v91;
                      if (v91 >= 2)
                        break;
                      if (!--v87)
                        goto LABEL_123;
                    }
                  }
                }
              }
            }
          }
        }
        *((_BYTE *)this + 32) = 1;
        v28[32] = 1;
        v29 = *((_QWORD *)v28 + 2);
        memset(&v108[5], 0, 32);
        DWORD2(v108[6]) = 1065353216;
        memset((char *)v108 + 8, 0, 72);
        CMMMatrix::InitializeGrayMatrix((uint64_t)v108, (CMMConvMatrix *)((char *)this + 56), (const CMMMatrix *)(v28 + 56), 0.0);
        v30 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)v30 + 2) = 1;
        v30[3] = v28;
        v30[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v30 + 33) = 1;
        v30[7] = off_1E215FED0;
        *((_DWORD *)v30 + 40) = DWORD2(v108[6]);
        v50 = *(_OWORD *)((char *)&v108[5] + 8);
        *((_OWORD *)v30 + 8) = *(_OWORD *)((char *)&v108[4] + 8);
        *((_OWORD *)v30 + 9) = v50;
        v51 = *(_OWORD *)((char *)&v108[3] + 8);
        v52 = *(_OWORD *)((char *)&v108[1] + 8);
        *((_OWORD *)v30 + 4) = *(_OWORD *)((char *)v108 + 8);
        *((_OWORD *)v30 + 5) = v52;
        *((_OWORD *)v30 + 6) = *(_OWORD *)((char *)&v108[2] + 8);
        *((_OWORD *)v30 + 7) = v51;
        *((_WORD *)v30 + 24) = 257;
        *((_BYTE *)v30 + 32) = 0;
        v34 = off_1E215EC60;
      }
      *v30 = v34;
      *((_QWORD *)v28 + 2) = v30;
      v30[2] = v29;
      if (v29)
        *(_QWORD *)(v29 + 24) = v30;
      return 1;
    }
    if (v8)
    {
      result = CMMMatrix::Is3x3((CMMConvMatrix *)((char *)this + 56));
      if ((_DWORD)result)
      {
        result = CMMMatrix::Is3x3((CMMConvMatrix *)((char *)v8 + 56));
        if ((_DWORD)result)
          return CMMConvMatrix::Collapse3x3(this, v8, a2);
      }
      return result;
    }
    return 0;
  }
  v10 = v9;
  {
    if (!result)
      return result;
    v116 = 0;
    v115 = 0;
    if (*((_DWORD *)this + 16) == 31595 && *((_DWORD *)this + 19) == 0x8000 && *((_DWORD *)this + 22) == 27030)
    {
      v35 = 0;
      *((_QWORD *)&v108[6] + 1) = 0;
      v36 = *((_OWORD *)v10 + 8);
      *(_OWORD *)((char *)&v108[5] + 8) = *((_OWORD *)v10 + 9);
      DWORD2(v108[6]) = *((_DWORD *)v10 + 40);
      v37 = *((_OWORD *)v10 + 6);
      *(_OWORD *)((char *)&v108[3] + 8) = *((_OWORD *)v10 + 7);
      *(_OWORD *)((char *)&v108[4] + 8) = v36;
      v38 = *((_OWORD *)v10 + 5);
      *(_OWORD *)((char *)v108 + 8) = *((_OWORD *)v10 + 4);
      *(_OWORD *)((char *)&v108[1] + 8) = v38;
      v39 = (CMMConvMatrix *)((char *)this + 56);
      v40 = (char *)v108 + 8;
      *(_OWORD *)((char *)&v108[2] + 8) = v37;
      do
      {
        v41 = 0;
        v42 = 0;
        do
        {
          v42 += qword_18B43BD88[v41] * *(int *)&v40[4 * v41];
          ++v41;
        }
        while (v41 != 3);
        v43 = 0x1000000 - ((unint64_t)(v42 + 0x8000) >> 16);
        if (v43 < 0)
          v43 = -v43;
        *((_DWORD *)&v115 + v35++) = v43 >> 8;
        v40 += 12;
      }
      while (v35 != 3);
      if ((int)v115 > 1 || SHIDWORD(v115) > 1 || v116 >= 2)
      {
        *((_BYTE *)this + 32) = 1;
        v10[32] = 1;
        v16 = *((_QWORD *)v10 + 2);
        memset(&v114[8], 0, 32);
        *(_DWORD *)&v114[32] = 1065353216;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        v113 = 0u;
        *(_QWORD *)v114 = 0;
        v109 = off_1E215E018;
        CMMMatrix::InitializeRGBMatrix((uint64_t)&v109, v39, (const CMMMatrix *)(v10 + 56), 0.0);
        v18 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)v18 + 2) = 1;
        v18[3] = v10;
        v18[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v18 + 33) = 1;
        v18[7] = off_1E215FED0;
        *((_DWORD *)v18 + 40) = *(_DWORD *)&v114[32];
        v53 = *(_OWORD *)&v114[16];
        *((_OWORD *)v18 + 8) = *(_OWORD *)v114;
        *((_OWORD *)v18 + 9) = v53;
        v54 = v113;
        v55 = v111;
        *((_OWORD *)v18 + 4) = v110;
        *((_OWORD *)v18 + 5) = v55;
        *((_OWORD *)v18 + 6) = v112;
        *((_OWORD *)v18 + 7) = v54;
        *((_WORD *)v18 + 24) = 1;
        *((_BYTE *)v18 + 32) = 0;
        *v18 = off_1E215EA50;
      }
      else
      {
        v44 = (const void *)*((_QWORD *)this + 3);
        if (v44)
        {
          if (v45)
          {
            v46 = v45;
            {
              v60 = (const void *)*((_QWORD *)v10 + 2);
              if (v60)
              {
                v109 = v61;
                if (v61)
                {
                  v62 = v61;
                  v63 = v61[2];
                  if (v63)
                  {
                    *(_QWORD *)&v110 = v64;
                    if (v64)
                    {
                      v65 = v64;
                      v66 = (const void *)v64[2];
                      if (v66)
                      {
                        *((_QWORD *)&v110 + 1) = v67;
                        if (v67)
                        {
                          if (!*((_DWORD *)v62 + 18) && *((_DWORD *)v65 + 18) == 1 && v67[18] == 2)
                          {
                            v68 = 0;
                            while (1)
                            {
                              v69 = (&v109)[v68];
                              if (*((_BYTE *)v69 + 160) || (v71 = v69[21]) == 0)
                                v70 = 0;
                              else
                                v70 = (int *)CMMTable::FloatData(*((_QWORD *)v71 + 2), *((_QWORD *)v71 + 3));
                              v72 = (int *)CMMTable::FloatData(*(_QWORD *)(v46[8] + 16), *(_QWORD *)(v46[8] + 24));
                              v73 = !v70 || v72 == 0;
                              v74 = v73;
                              if (v72 != v70 && !v74)
                                break;
                              v80 = !v74;
                              if (v72 != v70 && v80 == 0)
                                goto LABEL_49;
LABEL_101:
                              if (++v68 == 3)
                              {
                                (*(void (**)(_QWORD *))(*v46 + 72))(v46);
                                for (i = 0; i != 3; ++i)
                                  (*((void (**)(_QWORD))*(&v109)[i] + 9))((&v109)[i]);
                                goto LABEL_49;
                              }
                            }
                            v75 = 4097;
                            while (1)
                            {
                              v77 = *v72++;
                              v76 = v77;
                              v78 = *v70++;
                              v79 = v76 - v78;
                              if (v79 < 0)
                                v79 = -v79;
                              if (v79 >= 2)
                                break;
                              if (!--v75)
                                goto LABEL_101;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_49:
        *((_BYTE *)this + 32) = 1;
        v10[32] = 1;
        v16 = *((_QWORD *)v10 + 2);
        v18 = CMMBase::NewInternal(0x30uLL, (_QWORD **)a2);
        *((_DWORD *)v18 + 2) = 1;
        v18[3] = v10;
        v18[5] = 0x3F80000000000000;
        *v18 = off_1E215D690;
        *(_DWORD *)((char *)v18 + 33) = 1;
      }
      *((_QWORD *)v10 + 2) = v18;
LABEL_27:
      v18[2] = v16;
      if (v16)
        *(_QWORD *)(v16 + 24) = v18;
      return 1;
    }
    return 0;
  }
  v11 = 0;
  v12 = (char *)this + 64;
  v13 = v10 + 276;
  while (2)
  {
    for (j = 0; j != 12; j += 4)
    {
      if (*(_DWORD *)&v12[j] != *(_DWORD *)&v13[j])
      {
        *((_BYTE *)this + 32) = 1;
        v22 = (CMMConvMatrix *)((char *)this + 56);
        v10[32] = 1;
        v17 = v10 + 16;
        v16 = *((_QWORD *)v10 + 2);
        memset(&v108[5], 0, 32);
        DWORD2(v108[6]) = 1065353216;
        memset((char *)v108 + 8, 0, 72);
        *(_QWORD *)&v108[0] = off_1E215DD88;
        CMMMatrix::InitializeRGBMatrix((uint64_t)v108, v22, (const CMMMatrix *)(v10 + 56), 0.0);
        v18 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)v18 + 2) = 1;
        v18[2] = 0;
        v18[3] = v10;
        *((_QWORD *)v10 + 2) = v18;
        v18[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v18 + 33) = 1;
        v18[7] = off_1E215FED0;
        v23 = *(_OWORD *)((char *)&v108[2] + 8);
        v24 = *(_OWORD *)((char *)&v108[1] + 8);
        *((_OWORD *)v18 + 4) = *(_OWORD *)((char *)v108 + 8);
        *((_OWORD *)v18 + 5) = v24;
        v25 = *(_OWORD *)((char *)&v108[3] + 8);
        *((_OWORD *)v18 + 6) = v23;
        *((_OWORD *)v18 + 7) = v25;
        v26 = *(_OWORD *)((char *)&v108[5] + 8);
        *((_OWORD *)v18 + 8) = *(_OWORD *)((char *)&v108[4] + 8);
        *((_OWORD *)v18 + 9) = v26;
        *((_DWORD *)v18 + 40) = DWORD2(v108[6]);
        *((_WORD *)v18 + 24) = 0;
        *((_BYTE *)v18 + 32) = 0;
        goto LABEL_26;
      }
    }
    ++v11;
    v13 += 12;
    v12 += 12;
    if (v11 != 3)
      continue;
    break;
  }
  v15 = *((float *)this + 40) * *((float *)v10 + 40);
  result = 1;
  *((_BYTE *)this + 32) = 1;
  v10[32] = 1;
  if (v15 != 1.0)
  {
    v17 = v10 + 16;
    v16 = *((_QWORD *)v10 + 2);
    memset(v108, 0, sizeof(v108));
    CMMMatrix::CMMMatrix((uint64_t)v108, CMMConvMatrix::CollapseToRGB(CMMConvInvMatrix *,CMMMemMgr &)::identityCMM3x4, v15);
    v18 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
    *((_DWORD *)v18 + 2) = 1;
    v18[2] = 0;
    v18[3] = v10;
    v18[5] = 0x3F80000000000000;
    *(_DWORD *)((char *)v18 + 33) = 0;
    *v18 = off_1E215C688;
    v18[7] = off_1E215FED0;
    v19 = *(_OWORD *)((char *)&v108[1] + 8);
    *((_OWORD *)v18 + 4) = *(_OWORD *)((char *)v108 + 8);
    *((_OWORD *)v18 + 5) = v19;
    v20 = *(_OWORD *)((char *)&v108[3] + 8);
    v21 = *(_OWORD *)((char *)&v108[5] + 8);
    *((_OWORD *)v18 + 8) = *(_OWORD *)((char *)&v108[4] + 8);
    *((_OWORD *)v18 + 9) = v21;
    *((_DWORD *)v18 + 40) = DWORD2(v108[6]);
    *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)&v108[2] + 8);
    *((_OWORD *)v18 + 7) = v20;
    *((_WORD *)v18 + 24) = 0;
    *((_WORD *)v18 + 16) = 256;
    *(_WORD *)((char *)v18 + 35) = 0;
LABEL_26:
    *v18 = off_1E215E948;
    *v17 = v18;
    goto LABEL_27;
  }
  return result;
}

uint64_t CMMConvNode::OutputClamp(CMMConvNode *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t CMMConvNode::InputClamp(CMMConvNode *this)
{
  return *((unsigned __int8 *)this + 35);
}

uint64_t CMMMatrixDisplayProfile::GetMatrixTags(CMMMatrixDisplayProfile *this, CMMXYZTag *(*a2)[3], CMMRGBCurves *a3)
{
  uint64_t result;

  if (*((_QWORD *)this + 25)
    || (result = CMMProfile::InnerGetMatrixTags(this, (CMMXYZTag *(*)[3])((char *)this + 184), (CMMCurveTag *(*)[3])((char *)this + 208)), (_DWORD)result))
  {
    *((_QWORD *)a3 + 1) = *((_QWORD *)this + 26);
    *((_QWORD *)a3 + 2) = *((_QWORD *)this + 27);
    *((_QWORD *)a3 + 3) = *((_QWORD *)this + 28);
    (*a2)[0] = (CMMXYZTag *)*((_QWORD *)this + 23);
    (*a2)[1] = (CMMXYZTag *)*((_QWORD *)this + 24);
    (*a2)[2] = (CMMXYZTag *)*((_QWORD *)this + 25);
    return 1;
  }
  return result;
}

_QWORD *CMMMatrixDisplayProfile::GetLutTags(_DWORD *a1, int a2)
{
  int v3;
  int v4;
  int v5;

  if (a2 != 4 || !(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1))
    return 0;
  v3 = a1[12];
  if (a1[13] == 1281450528)
    v4 = 1347182946;
  else
    v4 = a1[13];
  switch(v3)
  {
    case 1296255029:
      v5 = 893602898;
      break;
    case 1296255030:
      v5 = 910380114;
      break;
    case 1296255031:
      v5 = 927157330;
      break;
    case 1296255032:
      v5 = 943934546;
      break;
    default:
      if (v3 == 1281450528)
        v5 = 1145856354;
      else
        v5 = a1[12];
      break;
  }
  return CMMProfile::SingleTagContainer((uint64_t)a1, 1734438260, v4, v5);
}

uint64_t CMMProfile::InnerGetMatrixTags(CMMProfile *this, CMMXYZTag *(*a2)[3], CMMCurveTag *(*a3)[3])
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *Tag;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CMMCurveTag *v51;
  uint64_t v52;
  uint64_t v53;
  CMMCurveTag *v54;
  void (**v55)(CMMSRGBCurve *__hidden);
  CMMCurveTag *v56;
  uint64_t v57;
  uint64_t v58;
  CMMCurveTag *v59;
  uint64_t v60;
  uint64_t v61;
  CMMPQCurveTag *v62;
  uint64_t v63;
  uint64_t v64;
  CMMHLGCurveTag *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;

  v68 = 0;
  if (ColorSyncProfileContainsSupportedCICP(*((_QWORD *)this + 2), &v68))
  {
    switch((char)v68)
    {
      case 1:
        v6 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT709RedPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetBT709RedPrimary_predicate, &__block_literal_global_181);
        v7 = *((_QWORD *)this + 20);
        while (v7)
        {
          v8 = v7;
          v7 = *(_QWORD *)(v7 + 16);
          if (!v7)
          {
            *((_DWORD *)v6 + 2) = 1918392666;
            v6[3] = v8;
            v6[4] = 20;
            v6[2] = 0;
            *(_QWORD *)(v8 + 16) = v6;
LABEL_53:
            v6[5] = &ColorSyncProfileGetBT709RedPrimary_rXYZ;
            *((_WORD *)v6 + 24) = 0;
            *v6 = off_1E215FEF0;
            (*a2)[0] = (CMMXYZTag *)v6;
            v28 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
            if (ColorSyncProfileGetBT709GreenPrimary_predicate[0] != -1)
              dispatch_once(ColorSyncProfileGetBT709GreenPrimary_predicate, &__block_literal_global_183);
            v29 = *((_QWORD *)this + 20);
            while (v29)
            {
              v30 = v29;
              v29 = *(_QWORD *)(v29 + 16);
              if (!v29)
              {
                *((_DWORD *)v28 + 2) = 1733843290;
                v28[3] = v30;
                v28[4] = 20;
                v28[2] = 0;
                *(_QWORD *)(v30 + 16) = v28;
                goto LABEL_88;
              }
            }
            *((_DWORD *)v28 + 2) = 1733843290;
            v28[3] = 0;
            v28[4] = 20;
            v28[2] = 0;
LABEL_88:
            v28[5] = &ColorSyncProfileGetBT709GreenPrimary_gXYZ;
            *((_WORD *)v28 + 24) = 0;
            *v28 = off_1E215FEF0;
            (*a2)[1] = (CMMXYZTag *)v28;
            v43 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
            if (ColorSyncProfileGetBT709BluePrimary_predicate != -1)
              dispatch_once(&ColorSyncProfileGetBT709BluePrimary_predicate, &__block_literal_global_185);
            v44 = *((_QWORD *)this + 20);
            while (v44)
            {
              v45 = v44;
              v44 = *(_QWORD *)(v44 + 16);
              if (!v44)
              {
                *((_DWORD *)v43 + 2) = 1649957210;
                v43[3] = v45;
                v43[4] = 20;
                v43[2] = 0;
                v46 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
                goto LABEL_122;
              }
            }
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = 0;
            v43[4] = 20;
            v43[2] = 0;
            v46 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
            goto LABEL_123;
          }
        }
        *((_DWORD *)v6 + 2) = 1918392666;
        v6[3] = 0;
        v6[4] = 20;
        v6[2] = 0;
        goto LABEL_53;
      case 5:
        v16 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT601RedPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetBT601RedPrimary_predicate, &__block_literal_global_175);
        v17 = *((_QWORD *)this + 20);
        while (v17)
        {
          v18 = v17;
          v17 = *(_QWORD *)(v17 + 16);
          if (!v17)
          {
            *((_DWORD *)v16 + 2) = 1918392666;
            v16[3] = v18;
            v16[4] = 20;
            v16[2] = 0;
            *(_QWORD *)(v18 + 16) = v16;
            goto LABEL_60;
          }
        }
        *((_DWORD *)v16 + 2) = 1918392666;
        v16[3] = 0;
        v16[4] = 20;
        v16[2] = 0;
LABEL_60:
        v16[5] = &ColorSyncProfileGetBT601RedPrimary_rXYZ;
        *((_WORD *)v16 + 24) = 0;
        *v16 = off_1E215FEF0;
        (*a2)[0] = (CMMXYZTag *)v16;
        v31 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT601GreenPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetBT601GreenPrimary_predicate, &__block_literal_global_177);
        v32 = *((_QWORD *)this + 20);
        while (v32)
        {
          v33 = v32;
          v32 = *(_QWORD *)(v32 + 16);
          if (!v32)
          {
            *((_DWORD *)v31 + 2) = 1733843290;
            v31[3] = v33;
            v31[4] = 20;
            v31[2] = 0;
            *(_QWORD *)(v33 + 16) = v31;
            goto LABEL_95;
          }
        }
        *((_DWORD *)v31 + 2) = 1733843290;
        v31[3] = 0;
        v31[4] = 20;
        v31[2] = 0;
LABEL_95:
        v31[5] = &ColorSyncProfileGetBT601GreenPrimary_gXYZ;
        *((_WORD *)v31 + 24) = 0;
        *v31 = off_1E215FEF0;
        (*a2)[1] = (CMMXYZTag *)v31;
        v43 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT601BluePrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetBT601BluePrimary_predicate, &__block_literal_global_179);
        v47 = *((_QWORD *)this + 20);
        while (v47)
        {
          v45 = v47;
          v47 = *(_QWORD *)(v47 + 16);
          if (!v47)
          {
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = v45;
            v43[4] = 20;
            v43[2] = 0;
            v46 = &ColorSyncProfileGetBT601BluePrimary_bXYZ;
            goto LABEL_122;
          }
        }
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        v46 = &ColorSyncProfileGetBT601BluePrimary_bXYZ;
        goto LABEL_123;
      case 9:
        v19 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT2020RedPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetBT2020RedPrimary_predicate, &__block_literal_global_187);
        v20 = *((_QWORD *)this + 20);
        while (v20)
        {
          v21 = v20;
          v20 = *(_QWORD *)(v20 + 16);
          if (!v20)
          {
            *((_DWORD *)v19 + 2) = 1918392666;
            v19[3] = v21;
            v19[4] = 20;
            v19[2] = 0;
            *(_QWORD *)(v21 + 16) = v19;
            goto LABEL_67;
          }
        }
        *((_DWORD *)v19 + 2) = 1918392666;
        v19[3] = 0;
        v19[4] = 20;
        v19[2] = 0;
LABEL_67:
        v19[5] = &ColorSyncProfileGetBT2020RedPrimary_rXYZ;
        *((_WORD *)v19 + 24) = 0;
        *v19 = off_1E215FEF0;
        (*a2)[0] = (CMMXYZTag *)v19;
        v34 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT2020GreenPrimary_predicate[0] != -1)
          dispatch_once(ColorSyncProfileGetBT2020GreenPrimary_predicate, &__block_literal_global_189);
        v35 = *((_QWORD *)this + 20);
        while (v35)
        {
          v36 = v35;
          v35 = *(_QWORD *)(v35 + 16);
          if (!v35)
          {
            *((_DWORD *)v34 + 2) = 1733843290;
            v34[3] = v36;
            v34[4] = 20;
            v34[2] = 0;
            *(_QWORD *)(v36 + 16) = v34;
            goto LABEL_102;
          }
        }
        *((_DWORD *)v34 + 2) = 1733843290;
        v34[3] = 0;
        v34[4] = 20;
        v34[2] = 0;
LABEL_102:
        v34[5] = &ColorSyncProfileGetBT2020GreenPrimary_gXYZ;
        *((_WORD *)v34 + 24) = 0;
        *v34 = off_1E215FEF0;
        (*a2)[1] = (CMMXYZTag *)v34;
        v43 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetBT2020BluePrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetBT2020BluePrimary_predicate, &__block_literal_global_191);
        v48 = *((_QWORD *)this + 20);
        while (v48)
        {
          v45 = v48;
          v48 = *(_QWORD *)(v48 + 16);
          if (!v48)
          {
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = v45;
            v43[4] = 20;
            v43[2] = 0;
            v46 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
            goto LABEL_122;
          }
        }
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        v46 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
        goto LABEL_123;
      case 11:
        v22 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetDCIP3RedPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetDCIP3RedPrimary_predicate, &__block_literal_global_199);
        v23 = *((_QWORD *)this + 20);
        while (v23)
        {
          v24 = v23;
          v23 = *(_QWORD *)(v23 + 16);
          if (!v23)
          {
            *((_DWORD *)v22 + 2) = 1918392666;
            v22[3] = v24;
            v22[4] = 20;
            v22[2] = 0;
            *(_QWORD *)(v24 + 16) = v22;
            goto LABEL_74;
          }
        }
        *((_DWORD *)v22 + 2) = 1918392666;
        v22[3] = 0;
        v22[4] = 20;
        v22[2] = 0;
LABEL_74:
        v22[5] = &ColorSyncProfileGetDCIP3RedPrimary_rXYZ;
        *((_WORD *)v22 + 24) = 0;
        *v22 = off_1E215FEF0;
        (*a2)[0] = (CMMXYZTag *)v22;
        v37 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetDCIP3GreenPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetDCIP3GreenPrimary_predicate, &__block_literal_global_201);
        v38 = *((_QWORD *)this + 20);
        while (v38)
        {
          v39 = v38;
          v38 = *(_QWORD *)(v38 + 16);
          if (!v38)
          {
            *((_DWORD *)v37 + 2) = 1733843290;
            v37[3] = v39;
            v37[4] = 20;
            v37[2] = 0;
            *(_QWORD *)(v39 + 16) = v37;
            goto LABEL_109;
          }
        }
        *((_DWORD *)v37 + 2) = 1733843290;
        v37[3] = 0;
        v37[4] = 20;
        v37[2] = 0;
LABEL_109:
        v37[5] = &ColorSyncProfileGetDCIP3GreenPrimary_gXYZ;
        *((_WORD *)v37 + 24) = 0;
        *v37 = off_1E215FEF0;
        (*a2)[1] = (CMMXYZTag *)v37;
        v43 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetDCIP3BluePrimary_predicate[0] != -1)
          dispatch_once(ColorSyncProfileGetDCIP3BluePrimary_predicate, &__block_literal_global_203);
        v49 = *((_QWORD *)this + 20);
        while (v49)
        {
          v45 = v49;
          v49 = *(_QWORD *)(v49 + 16);
          if (!v49)
          {
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = v45;
            v43[4] = 20;
            v43[2] = 0;
            v46 = &ColorSyncProfileGetDCIP3BluePrimary_bXYZ;
            goto LABEL_122;
          }
        }
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        v46 = &ColorSyncProfileGetDCIP3BluePrimary_bXYZ;
        goto LABEL_123;
      case 12:
        v25 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        if (ColorSyncProfileGetDisplayP3RedPrimary_predicate != -1)
          dispatch_once(&ColorSyncProfileGetDisplayP3RedPrimary_predicate, &__block_literal_global_193);
        v26 = *((_QWORD *)this + 20);
        break;
      default:
LABEL_128:
        result = 0;
        (*a2)[0] = 0;
        (*a2)[1] = 0;
        (*a2)[2] = 0;
        (*a3)[0] = 0;
        (*a3)[1] = 0;
        (*a3)[2] = 0;
        return result;
    }
    while (v26)
    {
      v27 = v26;
      v26 = *(_QWORD *)(v26 + 16);
      if (!v26)
      {
        *((_DWORD *)v25 + 2) = 1918392666;
        v25[3] = v27;
        v25[4] = 20;
        v25[2] = 0;
        *(_QWORD *)(v27 + 16) = v25;
        goto LABEL_81;
      }
    }
    *((_DWORD *)v25 + 2) = 1918392666;
    v25[3] = 0;
    v25[4] = 20;
    v25[2] = 0;
LABEL_81:
    v25[5] = &ColorSyncProfileGetDisplayP3RedPrimary_rXYZ;
    *((_WORD *)v25 + 24) = 0;
    *v25 = off_1E215FEF0;
    (*a2)[0] = (CMMXYZTag *)v25;
    v40 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
    if (ColorSyncProfileGetDisplayP3GreenPrimary_predicate[0] != -1)
      dispatch_once(ColorSyncProfileGetDisplayP3GreenPrimary_predicate, &__block_literal_global_195);
    v41 = *((_QWORD *)this + 20);
    while (v41)
    {
      v42 = v41;
      v41 = *(_QWORD *)(v41 + 16);
      if (!v41)
      {
        *((_DWORD *)v40 + 2) = 1733843290;
        v40[3] = v42;
        v40[4] = 20;
        v40[2] = 0;
        *(_QWORD *)(v42 + 16) = v40;
        goto LABEL_116;
      }
    }
    *((_DWORD *)v40 + 2) = 1733843290;
    v40[3] = 0;
    v40[4] = 20;
    v40[2] = 0;
LABEL_116:
    v40[5] = &ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ;
    *((_WORD *)v40 + 24) = 0;
    *v40 = off_1E215FEF0;
    (*a2)[1] = (CMMXYZTag *)v40;
    v43 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
    if (ColorSyncProfileGetDisplayP3BluePrimary_predicate != -1)
      dispatch_once(&ColorSyncProfileGetDisplayP3BluePrimary_predicate, &__block_literal_global_197);
    v50 = *((_QWORD *)this + 20);
    do
    {
      if (!v50)
      {
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        v46 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
        goto LABEL_123;
      }
      v45 = v50;
      v50 = *(_QWORD *)(v50 + 16);
    }
    while (v50);
    *((_DWORD *)v43 + 2) = 1649957210;
    v43[3] = v45;
    v43[4] = 20;
    v43[2] = 0;
    v46 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
LABEL_122:
    *(_QWORD *)(v45 + 16) = v43;
LABEL_123:
    v43[5] = v46;
    *((_WORD *)v43 + 24) = 0;
    *v43 = off_1E215FEF0;
    (*a2)[2] = (CMMXYZTag *)v43;
    switch(BYTE1(v68))
    {
      case 1:
      case 6:
      case 0xE:
      case 0xF:
        v51 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, *((_QWORD ***)this + 3));
        v52 = *((_QWORD *)this + 20);
        do
        {
          v53 = v52;
          if (!v52)
            break;
          v52 = *(_QWORD *)(v52 + 16);
        }
        while (v52);
        v54 = CMMParaCurveTag::CMMParaCurveTag(v51, 1885434465, (uint64_t)"para", 32, v53);
        v55 = off_1E215D588;
        goto LABEL_137;
      case 8:
        v56 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
        v57 = *((_QWORD *)this + 20);
        do
        {
          v58 = v57;
          if (!v57)
            break;
          v57 = *(_QWORD *)(v57 + 16);
        }
        while (v57);
        CMMCurveTag::CMMCurveTag(v56, 0, (uint64_t)"curv", 16, v58);
        v55 = off_1E215D188;
        goto LABEL_137;
      case 0xD:
        v59 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, *((_QWORD ***)this + 3));
        v60 = *((_QWORD *)this + 20);
        do
        {
          v61 = v60;
          if (!v60)
            break;
          v60 = *(_QWORD *)(v60 + 16);
        }
        while (v60);
        v54 = CMMParaCurveTag::CMMParaCurveTag(v59, 1885434465, (uint64_t)"para", 32, v61);
        v55 = off_1E215C410;
LABEL_137:
        *(_QWORD *)v54 = v55;
        break;
      case 0x10:
        v62 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)this + 3));
        v63 = *((_QWORD *)this + 20);
        do
        {
          v64 = v63;
          if (!v63)
            break;
          v63 = *(_QWORD *)(v63 + 16);
        }
        while (v63);
        CMMPQCurveTag::CMMPQCurveTag(v62, 0, v64);
        break;
      case 0x12:
        v65 = (CMMHLGCurveTag *)CMMBase::NewInternal(0x58uLL, *((_QWORD ***)this + 3));
        v66 = *((_QWORD *)this + 20);
        do
        {
          v67 = v66;
          if (!v66)
            break;
          v66 = *(_QWORD *)(v66 + 16);
        }
        while (v66);
        CMMHLGCurveTag::CMMHLGCurveTag(v65, v67);
        break;
      default:
        goto LABEL_128;
    }
    (*a3)[1] = v54;
    (*a3)[2] = v54;
    (*a3)[0] = v54;
  }
  else
  {
    Tag = CMMProfile::GetTag((uint64_t)this, 1633776231);
    if (Tag)
    {
      (*a3)[0] = (CMMCurveTag *)Tag;
    }
    else
    {
      result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1918128707);
      (*a3)[0] = (CMMCurveTag *)result;
      if (!result)
        return result;
    }
    v11 = CMMProfile::GetTag((uint64_t)this, 1633773415);
    if (v11)
    {
      (*a3)[1] = (CMMCurveTag *)v11;
    }
    else
    {
      result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1733579331);
      (*a3)[1] = (CMMCurveTag *)result;
      if (!result)
        return result;
    }
    v12 = CMMProfile::GetTag((uint64_t)this, 1633772135);
    if (v12)
    {
      (*a3)[2] = (CMMCurveTag *)v12;
    }
    else
    {
      result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1649693251);
      (*a3)[2] = (CMMCurveTag *)result;
      if (!result)
        return result;
    }
    v13 = CMMProfile::GetTag((uint64_t)this, 1633768035);
    if (v13)
    {
      (*a2)[0] = (CMMXYZTag *)v13;
    }
    else
    {
      result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1918392666);
      (*a2)[0] = (CMMXYZTag *)result;
      if (!result)
        return result;
    }
    v14 = CMMProfile::GetTag((uint64_t)this, 1633765219);
    if (v14)
    {
      (*a2)[1] = (CMMXYZTag *)v14;
    }
    else
    {
      result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1733843290);
      (*a2)[1] = (CMMXYZTag *)result;
      if (!result)
        return result;
    }
    v15 = CMMProfile::GetTag((uint64_t)this, 1633763939);
    if (v15)
    {
      (*a2)[2] = (CMMXYZTag *)v15;
    }
    else
    {
      result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1649957210);
      (*a2)[2] = (CMMXYZTag *)result;
      if (!result)
        return result;
    }
  }
  return 1;
}

uint64_t CMMConvTRC::SetNOP(uint64_t this)
{
  *(_BYTE *)(this + 160) = 1;
  *(_BYTE *)(this + 32) = 1;
  return this;
}

float ColorSyncOptionsGetHDRMediaReferenceWhite(const void *a1)
{
  CFTypeID v2;
  const __CFNumber *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float result;
  const void *v13;
  double v15;
  float valuePtr;

  if (!a1)
    return 203.0;
  v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID())
    return 203.0;
  if (CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("com.apple.cmm.UseHLGOOTFForCoreVideo")) == (const void *)*MEMORY[0x1E0C9AE50])
    return 100.0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("com.apple.cmm.kColorSyncHDRMediaReferenceWhite"));
  if (!Value)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("com.apple.cmm.ApplyToneMaping")) == 1)
    {
      v13 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("com.apple.cmm.ApplyToneMaping"));
      if (v13)
      {
        CFGetTypeID(v13);
        CFDictionaryGetTypeID();
      }
    }
    return 203.0;
  }
  valuePtr = 0.0;
  if (CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr))
  {
    v10 = valuePtr;
  }
  else
  {
    valuePtr = 0.0;
    v10 = 0.0;
  }
  if (v10 == 0.0)
    result = 203.0;
  else
    result = v10;
  if (result != 203.0 && result != 100.0)
  {
    v15 = v10;
    ColorSyncLog(2, (uint64_t)"kColorSyncHDRMediaReferenceWhite %f is neither kColorSync_default_reference_white nor kColorSync_legacy_reference_white - ignored", v4, v5, v6, v7, v8, v9, SLOBYTE(v15));
    return 203.0;
  }
  return result;
}

uint64_t CMMProfile::GetMatrixTags()
{
  return 0;
}

uint64_t CMMProfile::GetLutTags()
{
  return 0;
}

uint64_t CMMConvNode::ResetOutputClamp(uint64_t this)
{
  *(_BYTE *)(this + 36) = 0;
  return this;
}

uint64_t CMMConvNode::ResetInputClamp(uint64_t this)
{
  *(_BYTE *)(this + 35) = 0;
  return this;
}

uint64_t CMMConvGrayToRGBMatrix::Collapse()
{
  return 0;
}

uint64_t CMMConvRGBToGrayMatrix::Collapse()
{
  return 0;
}

uint64_t CMMMatrix::InitializeRGBMatrix(uint64_t this, const CMMMatrix *a2, const CMMMatrix *a3, float a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  const CMMMatrix *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v34;
  float v35;
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[4];

  v4 = 0;
  v38[3] = *MEMORY[0x1E0C80C00];
  *(float *)(this + 104) = *((float *)a2 + 26) * *((float *)a3 + 26);
  v5 = (char *)a3 + 8;
  v6 = (char *)a2 + 8;
  v7 = this + 8;
  v8 = (float *)((char *)a3 + 44);
  do
  {
    v9 = 0;
    v10 = a2;
    do
    {
      v11 = 0;
      v12 = 0;
      v13 = 0.0;
      v14 = v8;
      do
      {
        v12 += *(int *)((char *)v10 + v11 + 8) * (uint64_t)*((int *)v14 - 9);
        v15 = *v14++;
        v13 = v13 + (float)(v15 * *(float *)((char *)v10 + v11 + 44));
        v11 += 12;
      }
      while (v11 != 36);
      *(_DWORD *)(v7 + 12 * v4 + 4 * v9) = (unint64_t)(v12 + 0x8000) >> 16;
      *(float *)(this + 12 * v4 + 4 * v9++ + 44) = v13;
      v10 = (const CMMMatrix *)((char *)v10 + 4);
    }
    while (v9 != 3);
    ++v4;
    v8 += 3;
  }
  while (v4 != 3);
  v16 = 0;
  memset(v38, 0, 24);
  memset(v37, 0, sizeof(v37));
  do
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v18 += (uint64_t)*(int *)&v6[v17] << 24;
      v17 += 4;
    }
    while (v17 != 12);
    v38[v16++] = v18 >> 16;
    v6 += 12;
  }
  while (v16 != 3);
  for (i = 0; i != 3; ++i)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v21 += v38[v20] * *(int *)&v5[4 * v20];
      ++v20;
    }
    while (v20 != 3);
    v37[i] = (v21 + 0x8000) >> 16;
    v5 += 12;
  }
  v22 = 0;
  memset(v36, 0, sizeof(v36));
  v23 = this + 8;
  do
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v25 += (uint64_t)*(int *)(v23 + v24) << 24;
      v24 += 4;
    }
    while (v24 != 12);
    v36[v22++] = (int)(v25 >> 16);
    v23 += 12;
  }
  while (v22 != 3);
  for (j = 0; j != 3; ++j)
  {
    v27 = 0;
    v28 = (double)(uint64_t)v37[j] / (double)(uint64_t)v36[j];
    do
    {
      *(_DWORD *)(v7 + v27) = vcvtmd_s64_f64(v28 * (double)*(int *)(v7 + v27) + 0.5);
      v27 += 4;
    }
    while (v27 != 12);
    v7 += 12;
  }
  v29 = 0;
  v30 = this + 44;
  do
  {
    v31 = 0;
    v32 = 0.0;
    do
    {
      v32 = v32 + *(float *)(v30 + v31);
      v31 += 4;
    }
    while (v31 != 12);
    if (v32 != 0.0 && v32 != 1.0)
    {
      v34 = 0;
      v35 = 1.0 / v32;
      do
      {
        *(float *)(v30 + v34) = v35 * *(float *)(v30 + v34);
        v34 += 4;
      }
      while (v34 != 12);
    }
    ++v29;
    v30 += 12;
  }
  while (v29 != 3);
  return this;
}

uint64_t CMMMatrix::InitializeGrayMatrix(uint64_t this, const CMMMatrix *a2, const CMMMatrix *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CMMMatrix *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  float v12;

  v4 = 0;
  *(float *)(this + 104) = *((float *)a2 + 26) * *((float *)a3 + 26);
  v5 = this + 8;
  do
  {
    v6 = 0;
    v7 = a2;
    do
    {
      if (v4)
      {
        *(_DWORD *)(v5 + 12 * v4 + 4 * v6) = 0;
        *(_DWORD *)(this + 12 * v4 + 4 * v6 + 44) = 0;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0.0;
        v11 = (float *)((char *)a3 + 44);
        do
        {
          v9 += *(int *)((char *)v7 + v8 + 8) * (uint64_t)*((int *)v11 - 9);
          v12 = *v11++;
          v10 = v10 + (float)(v12 * *(float *)((char *)v7 + v8 + 44));
          v8 += 12;
        }
        while (v8 != 36);
        *(_DWORD *)(v5 + 4 * v6) = (unint64_t)(v9 + 0x8000) >> 16;
        *(float *)(this + 44 + 4 * v6) = v10;
      }
      ++v6;
      v7 = (const CMMMatrix *)((char *)v7 + 4);
    }
    while (v6 != 3);
    ++v4;
  }
  while (v4 != 3);
  return this;
}

uint64_t CMMConvGrayToGrayMatrix::Collapse()
{
  return 0;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvNode::SetOutputClamp(uint64_t this)
{
  *(_BYTE *)(this + 36) = 1;
  return this;
}

BOOL CMMConvScaleFloatXYZ::IsNOP(CMMConvScaleFloatXYZ *this)
{
  float v2;

  if (*((_BYTE *)this + 32))
    return 1;
  v2 = *((float *)this + 12);
  return v2 >= 1.0 && v2 <= 1.0;
}

uint64_t CMMConvGrayToRGB::IsNOP(CMMConvGrayToRGB *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t CMMConvGrayToRGB::Collapse()
{
  return 0;
}

uint64_t CMMConvScaleFloatXYZ::Collapse(CMMConvScaleFloatXYZ *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  const void *v5;
  const void *v6;
  int v7;
  BOOL v8;
  char *v9;
  char *v10;
  BOOL IsFloatingPointNOP;
  BOOL v12;
  char *v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  int v20;
  int32x2_t v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float32x2_t v26;
  _QWORD *v27;
  uint64_t (**v28)();
  uint64_t (**v29)();
  uint64_t v30;
  _QWORD *v31;
  float v32;
  char v33;
  char v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  int v41;

  v5 = (const void *)*((_QWORD *)this + 2);
  v6 = (const void *)*((_QWORD *)this + 3);
  v7 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
    v8 = 1;
  else
    v8 = v5 == 0;
  if (v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = v10;
    if (v10)
    {
      IsFloatingPointNOP = CMMMatrix::IsFloatingPointNOP((CMMMatrix *)(v10 + 56));
      *((_BYTE *)this + 32) = !IsFloatingPointNOP;
      if (IsFloatingPointNOP)
        v7 = 0;
      else
        v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 80))(v9) ^ 1;
      *((_BYTE *)this + 32) = v7;
    }
    else
    {
      v7 = 0;
    }
  }
  if (v7)
    v12 = 1;
  else
    v12 = v6 == 0;
  if (!v12)
  {
    v9 = v13;
    if (v13)
    {
      v14 = CMMMatrix::IsFloatingPointNOP((CMMMatrix *)(v13 + 56));
      *((_BYTE *)this + 32) = !v14;
      if (v14)
        v7 = 0;
      else
        v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 80))(v9) ^ 1;
      *((_BYTE *)this + 32) = v7;
    }
    else
    {
      v7 = 0;
    }
  }
  if (v7)
    v15 = 1;
  else
    v15 = v5 == 0;
  if (v15)
  {
    v16 = 0;
    if (!v9)
      goto LABEL_45;
  }
  else
  {
    if (!result)
      return result;
    v16 = result;
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
    *((_BYTE *)this + 32) = v18 ^ 1;
    if ((v18 & 1) != 0)
      v7 = 0;
    else
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 80))(v16) ^ 1;
    *((_BYTE *)this + 32) = v7;
    if (!v9)
      goto LABEL_45;
  }
  if (v7)
  {
    (*(void (**)(char *))(*(_QWORD *)v9 + 72))(v9);
    v19 = *((_QWORD *)v9 + 2);
    v39 = *((_OWORD *)v9 + 4);
    v40 = *((_OWORD *)v9 + 5);
    v41 = *((_DWORD *)v9 + 24);
    v37 = *((_QWORD *)v9 + 17);
    v38 = *((_DWORD *)v9 + 36);
    v20 = *((_DWORD *)v9 + 40);
    v21.i32[0] = *((_DWORD *)this + 12);
    v22 = *((float *)v9 + 33) * *(float *)v21.i32;
    v23 = *((float *)v9 + 39) * *(float *)v21.i32;
    v24 = v9[48];
    v25 = v9[49];
    v35 = vmulq_n_f32(*(float32x4_t *)(v9 + 116), *(float *)v21.i32);
    v36 = vmulq_n_f32(*(float32x4_t *)(v9 + 100), *(float *)v21.i32);
    v26 = vmul_f32(*(float32x2_t *)(v9 + 148), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v21, 0));
    v27 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
    *((_DWORD *)v27 + 2) = 1;
    v27[3] = v9;
    *((_QWORD *)v9 + 2) = v27;
    v27[5] = 0x3F80000000000000;
    *(_DWORD *)((char *)v27 + 33) = 1;
    v27[7] = off_1E215FED0;
    *((_OWORD *)v27 + 4) = v39;
    *((_OWORD *)v27 + 5) = v40;
    *((_DWORD *)v27 + 24) = v41;
    *(float32x4_t *)((char *)v27 + 100) = v36;
    *(float32x4_t *)((char *)v27 + 116) = v35;
    *((float *)v27 + 33) = v22;
    v27[17] = v37;
    *((_DWORD *)v27 + 36) = v38;
    *(float32x2_t *)((char *)v27 + 148) = v26;
    *((float *)v27 + 39) = v23;
    v28 = off_1E215EB58;
    *((_DWORD *)v27 + 40) = v20;
    if (!v25)
      v28 = off_1E215E948;
    v29 = off_1E215EA50;
    if (v25)
      v29 = off_1E215EC60;
    if (v24)
      v28 = v29;
    *((_BYTE *)v27 + 48) = v24;
    *((_BYTE *)v27 + 49) = v25;
    *((_BYTE *)v27 + 32) = 0;
    *v27 = v28;
    v27[2] = v19;
    *((_QWORD *)v9 + 2) = v27;
    if (v19)
      *(_QWORD *)(v19 + 24) = v27;
    return 1;
  }
LABEL_45:
  result = 0;
  if (v16)
  {
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
      v30 = *(_QWORD *)(v16 + 16);
      v31 = CMMBase::NewInternal(0x38uLL, (_QWORD **)a2);
      v32 = *((float *)this + 12) * *(float *)(v16 + 48);
      v33 = *((_BYTE *)this + 35);
      v34 = *(_BYTE *)(v16 + 36);
      result = 1;
      *((_DWORD *)v31 + 2) = 1;
      v31[3] = v16;
      *(_QWORD *)(v16 + 16) = v31;
      v31[5] = 0x3FFFFF0000000000;
      *((_BYTE *)v31 + 34) = 0;
      *v31 = off_1E215E3A8;
      *((float *)v31 + 12) = v32;
      *((_BYTE *)v31 + 35) = v33;
      *((_BYTE *)v31 + 36) = v34;
      *((_WORD *)v31 + 16) = 256;
      v31[2] = v30;
      if (v30)
        *(_QWORD *)(v30 + 24) = v31;
    }
  }
  return result;
}

CMMTable *CMMLut16Tag::MakeOutputLutTable(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, int a5)
{
  _WORD *OutputTable;
  CMMTable *v11;
  _QWORD *v12;
  uint64_t v13;
  CMMLut16Tag *v14;
  BOOL *v15;
  CMMMemMgr *v16;
  float v17;
  _QWORD *FloatCopy;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *exception;
  char v25;

  if (!*(_QWORD *)(a1 + 112))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  OutputTable = (_WORD *)CMMLut16Tag::GetOutputTable((CMMLut16Tag *)a1, a2);
  if (*(_WORD *)(a1 + 90) != 2 || *OutputTable || (__int16)OutputTable[1] != -1)
  {
    v11 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
    *(_QWORD *)v11 = off_1E215FE00;
    *((_QWORD *)v11 + 1) = 1;
    *((_QWORD *)v11 + 3) = 0;
    *((_QWORD *)v11 + 4) = 21512;
    v12 = CMMBase::NewInternal(0x5408uLL, a4);
    *((_QWORD *)v11 + 2) = v12;
    v13 = CMMTable::FloatData((uint64_t)v12, *((_QWORD *)v11 + 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)a1 + 104))(a1, a2, v13, a5 == 1347182946);
    if (a3)
    {
      v25 = 0;
      v14 = (CMMLut16Tag *)CMMLut16Tag::GetOutputTable((CMMLut16Tag *)a1, a2);
      v17 = CMMLut16Tag::EvaluateGamma(v14, (unsigned __int16 *)*(unsigned __int16 *)(a1 + 92), &v25, v15);
      if (v25)
      {
        FloatCopy = 0;
        *(_DWORD *)a3 = 1;
        *(_DWORD *)(a3 + 12) = 0;
        *(_BYTE *)(a3 + 8) = 1;
        *(float *)(a3 + 24) = v17;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        FloatCopy = CMMTable::MakeFloatCopy(v11, a4, v16);
      }
      *(_QWORD *)(a3 + 16) = FloatCopy;
    }
    return v11;
  }
  if (CMMInitializeLinearGammaTable(void)::predicate == -1)
  {
    if (!a3)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
  if (a3)
  {
LABEL_13:
    v21 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
    v20 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
    v22 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
    *(_OWORD *)(a3 + 16) = v21;
    *(_OWORD *)(a3 + 32) = v20;
    *(_OWORD *)a3 = v22;
  }
LABEL_14:
  v11 = (CMMTable *)CMMLinearGammaTable;
  v23 = *(_QWORD *)(CMMLinearGammaTable + 8);
  if (v23)
    *(_QWORD *)(CMMLinearGammaTable + 8) = v23 + 1;
  return v11;
}

CMMTable *CMMLut16Tag::MakeInputLutTable(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, int a5)
{
  _WORD *InputTable;
  CMMTable *v11;
  _QWORD *v12;
  uint64_t v13;
  CMMLut16Tag *v14;
  BOOL *v15;
  CMMMemMgr *v16;
  float v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *exception;
  char v24;

  if (!*(_QWORD *)(a1 + 104))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  InputTable = (_WORD *)CMMLut16Tag::GetInputTable((CMMLut16Tag *)a1, a2);
  if (*(_WORD *)(a1 + 90) != 2 || *InputTable || (__int16)InputTable[1] != -1)
  {
    v11 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
    *(_QWORD *)v11 = off_1E215FE00;
    *((_QWORD *)v11 + 1) = 1;
    *((_QWORD *)v11 + 3) = 0;
    *((_QWORD *)v11 + 4) = 21512;
    v12 = CMMBase::NewInternal(0x5408uLL, a4);
    *((_QWORD *)v11 + 2) = v12;
    v13 = CMMTable::FloatData((uint64_t)v12, *((_QWORD *)v11 + 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)a1 + 96))(a1, a2, v13, a5 == 1347182946);
    if (a3)
    {
      v24 = 0;
      v14 = (CMMLut16Tag *)CMMLut16Tag::GetInputTable((CMMLut16Tag *)a1, a2);
      v17 = CMMLut16Tag::EvaluateGamma(v14, (unsigned __int16 *)*(unsigned __int16 *)(a1 + 90), &v24, v15);
      *(_DWORD *)a3 = 1;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_DWORD *)(a3 + 52) = 0;
      if (v24)
      {
        *(float *)(a3 + 24) = v17;
        *(_BYTE *)(a3 + 8) = 1;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 16) = CMMTable::MakeFloatCopy(v11, a4, v16);
      }
    }
    return v11;
  }
  if (CMMInitializeLinearGammaTable(void)::predicate == -1)
  {
    if (!a3)
      goto LABEL_13;
    goto LABEL_12;
  }
  dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
  if (a3)
  {
LABEL_12:
    v20 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
    v19 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
    v21 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
    *(_OWORD *)(a3 + 16) = v20;
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)a3 = v21;
  }
LABEL_13:
  v11 = (CMMTable *)CMMLinearGammaTable;
  v22 = *(_QWORD *)(CMMLinearGammaTable + 8);
  if (v22)
    *(_QWORD *)(CMMLinearGammaTable + 8) = v22 + 1;
  return v11;
}

uint64_t CMMLut16Tag::GetOutputLutSize(CMMLut16Tag *this)
{
  return *((unsigned __int16 *)this + 46);
}

uint64_t CMMLut16Tag::GetInputLutSize(CMMLut16Tag *this)
{
  return *((unsigned __int16 *)this + 45);
}

uint64_t CMMLut16Tag::GetOutputTable(CMMLut16Tag *this, int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 14);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return CMMTable::FloatData(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24))
       + 2 * *((unsigned __int16 *)this + 46) * a2;
}

_DWORD *CMMConvTRC::SetInputClamp(CMMConvTRC *this)
{
  _DWORD *result;

  *((_BYTE *)this + 35) = 1;
  result = (_DWORD *)*((_QWORD *)this + 2);
  if (result)
  {
    if (result)
    {
      if (result[18] > *((_DWORD *)this + 18))
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
    }
  }
  return result;
}

uint64_t CMMColorSpaceProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;
  _DWORD *exception;

  if (a2 == 1)
  {
    v2 = *(_DWORD *)(a1 + 48);
    switch(v2)
    {
      case 0x4D434835u:
        result = 893602898;
        break;
      case 0x4D434836u:
        result = 910380114;
        break;
      case 0x4D434837u:
        result = 927157330;
        break;
      case 0x4D434838u:
        result = 943934546;
        break;
      default:
        v5 = 1145856354;
        v4 = v2 == 1281450528;
        goto LABEL_7;
    }
  }
  else
  {
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = -50;
    }
    v2 = *(_DWORD *)(a1 + 52);
    v4 = v2 == 1281450528;
    v5 = 1347182946;
LABEL_7:
    if (v4)
      return v5;
    else
      return v2;
  }
  return result;
}

uint64_t CMMConvMatrix::SetNOP(uint64_t this)
{
  *(_BYTE *)(this + 32) = 1;
  return this;
}

unsigned __int8 *CMMProfile::GetTagByArbitration(uint64_t a1, int a2)
{
  unsigned __int8 *result;
  int v5;

  result = CMMProfile::GetTag(a1, a2);
  if (!result)
  {
    if ((a2 - 1093812785) < 2)
    {
      v5 = 1093812784;
      return CMMProfile::GetTag(a1, v5);
    }
    if ((a2 - 1886545201) < 2)
    {
      v5 = 1886545200;
      return CMMProfile::GetTag(a1, v5);
    }
    if ((a2 - 1110589745) <= 1)
    {
      v5 = 1110589744;
      return CMMProfile::GetTag(a1, v5);
    }
    return 0;
  }
  return result;
}

uint64_t CMMConvGrayToRGB::GetTransformType(CMMConvGrayToRGB *this, const __CFDictionary *a2)
{
  return 2;
}

_QWORD *CMMColorSpaceProfile::GetLutTags(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 180))
    return 0;
  else
    return CMMProfile::GetLutTagsGeneric(a1, a2, a3);
}

_QWORD *ConversionManager::AddScalingDownFloatXYZ(ConversionManager *this, char a2)
{
  _QWORD *result;
  uint64_t v5;

  result = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 1));
  v5 = *((_QWORD *)this + 3);
  *((_DWORD *)result + 2) = 1;
  result[2] = 0;
  result[3] = v5;
  if (v5)
    *(_QWORD *)(v5 + 16) = result;
  result[5] = 0x3FFFFF0000000000;
  *((_BYTE *)result + 34) = 0;
  *result = off_1E215E3A8;
  *((_DWORD *)result + 12) = 1056964736;
  *((_BYTE *)result + 35) = a2;
  *((_BYTE *)result + 36) = 0;
  *((_WORD *)result + 16) = 256;
  *((_QWORD *)this + 3) = result;
  if (!*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = result;
  return result;
}

_QWORD *ConversionManager::AddScalingUpFloatXYZ(ConversionManager *this)
{
  _QWORD *result;
  uint64_t v3;

  result = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 1));
  v3 = *((_QWORD *)this + 3);
  *((_DWORD *)result + 2) = 1;
  result[2] = 0;
  result[3] = v3;
  if (v3)
    *(_QWORD *)(v3 + 16) = result;
  result[5] = 0x3FFFFF0000000000;
  *result = off_1E215E3A8;
  *((_DWORD *)result + 12) = 1073741568;
  *((_BYTE *)result + 36) = 0;
  *((_DWORD *)result + 8) = 256;
  *((_QWORD *)this + 3) = result;
  if (!*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = result;
  return result;
}

BOOL CMMLut16Tag::IsMatrixNull(CMMLut16Tag *this)
{
  return *(_DWORD *)((char *)this + 54) == 0x10000
      && *(_DWORD *)((char *)this + 70) == 0x10000
      && *(_DWORD *)((char *)this + 86) == 0x10000
      && !*(_DWORD *)((char *)this + 58)
      && !*(_DWORD *)((char *)this + 62)
      && !*(_DWORD *)((char *)this + 66)
      && !*(_DWORD *)((char *)this + 74)
      && !*(_DWORD *)((char *)this + 78)
      && *(_DWORD *)((char *)this + 82) == 0;
}

_QWORD *CMMProfile::SingleTagContainer(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *result;
  _QWORD *v9;
  _DWORD *v10;

  result = *(_QWORD **)(a1 + 168);
  if (result)
  {
    if (result[2] - result[1] != 24)
    {
      std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize((uint64_t)(result + 1), 1uLL);
      result = *(_QWORD **)(a1 + 168);
    }
  }
  else
  {
    v9 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 24));
    result = TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(v9, 1uLL, *(_QWORD *)(a1 + 24));
    *(_QWORD *)(a1 + 168) = result;
  }
  v10 = (_DWORD *)result[1];
  if ((_DWORD *)result[2] == v10)
    std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  return result;
}

BOOL ColorSyncVerifyDisplayP3(const ColorSyncProfile *a1)
{
  return verify_DisplayP3(a1, 0);
}

unint64_t ColorSyncVerifySRGB(const ColorSyncProfile *a1)
{
  return verify_sRGB(a1, 0);
}

void ColorSyncProfileSetDescriptionTag(const ColorSyncProfile *a1, const __CFString *a2, const __CFString *a3)
{
  const __CFData *v6;
  const __CFData *v7;
  const UInt8 *BytePtr;
  unsigned int v9;
  CFTypeID v10;
  CFTypeID v11;
  CFIndex Length;
  CFIndex v13;
  CFTypeID v14;
  CFTypeID v15;
  CFIndex v16;
  __CFString *v17;
  CFTypeID v18;
  size_t v19;
  ColorSyncProfile *v20;
  UInt8 *v21;
  uint64_t v22;
  CFTypeID v23;
  CFDictionaryRef v24;
  CFDictionaryRef v25;
  CFIndex usedBufLen;
  UInt8 v27[8];
  char buffer[8];
  uint64_t v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = ColorSyncProfileCopyHeader(a1);
  if (!v6)
    goto LABEL_9;
  v7 = v6;
  BytePtr = CFDataGetBytePtr(v6);
  if (!BytePtr || *((_DWORD *)BytePtr + 9) != 1633907568)
  {
    CFRelease(v7);
    goto LABEL_9;
  }
  v9 = *((_DWORD *)BytePtr + 2);
  CFRelease(v7);
  if (!(v9 >> 26))
  {
LABEL_9:
    bzero(buffer, 0x401uLL);
    usedBufLen = 0;
    bzero(v27, 0x802uLL);
    if (!a2)
      goto LABEL_36;
    v11 = CFGetTypeID(a2);
    if (v11 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(a2);
      if (CFStringGetCString(a2, buffer, 1024, 0x600u))
      {
        v13 = 0;
      }
      else
      {
        v31.location = 0;
        v31.length = Length;
        CFStringGetBytes(a2, v31, 0x600u, 0x3Fu, 0, (UInt8 *)buffer, 1024, 0);
        v32.location = 0;
        v32.length = Length;
        CFStringGetBytes(a2, v32, 0x100u, 0x3Fu, 0, v27, 1024, &usedBufLen);
        v13 = ++usedBufLen;
      }
      v19 = strlen(buffer) + 1;
      v21 = v27;
      v20 = a1;
      v22 = v13;
      goto LABEL_29;
    }
    v14 = CFGetTypeID(a2);
    if (v14 == CFDictionaryGetTypeID())
    {
      ColorSyncProfileSetLocalizedStringDictionary(a1, CFSTR("dscm"), a2);
      if (!a3)
        return;
      v15 = CFGetTypeID(a3);
      if (v15 != CFStringGetTypeID())
        return;
      v16 = CFStringGetLength(a3);
      if (!v16)
        return;
      v30.length = v16;
      v30.location = 0;
      if (!CFStringGetBytes(a3, v30, 0x600u, 0x3Fu, 0, (UInt8 *)buffer, 1024, 0))
        return;
    }
    else
    {
LABEL_36:
      if (ColorSyncProfileContainsTag(a1, CFSTR("desc")) || ColorSyncProfileContainsTag(a1, CFSTR("dscm")))
        return;
      v17 = a3 ? (__CFString *)a3 : CFSTR("Unknown");
      v18 = CFGetTypeID(v17);
      if (v18 != CFStringGetTypeID())
        return;
      CFStringGetLength(v17);
      if (!CFStringGetCString(v17, buffer, 1024, 0x600u))
        return;
    }
    v19 = strlen(buffer) + 1;
    v20 = a1;
    v21 = 0;
    v22 = 0;
LABEL_29:
    setDESCTag(v20, buffer, v19, v21, v22);
    return;
  }
  if (a2)
  {
    v10 = CFGetTypeID(a2);
    if (v10 == CFDictionaryGetTypeID())
    {
      ColorSyncProfileSetLocalizedStringDictionary(a1, CFSTR("desc"), a2);
    }
    else
    {
      v23 = CFGetTypeID(a2);
      if (v23 == CFStringGetTypeID())
      {
        *(_QWORD *)v27 = CFSTR("en_US");
        *(_QWORD *)buffer = a2;
        v24 = CFDictionaryCreate(0, (const void **)v27, (const void **)buffer, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v24)
        {
          v25 = v24;
          ColorSyncProfileSetLocalizedStringDictionary(a1, CFSTR("desc"), v24);
          CFRelease(v25);
        }
      }
    }
  }
}

void ColorSyncProfileSetLocalizedStringDictionary(ColorSyncProfile *a1, const __CFString *a2, const void *a3)
{
  __CFData *Mutable;
  CFTypeID v7;
  CFIndex Count;
  const void **v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  const __CFString **v13;
  CFIndex v14;
  const __CFString *v15;
  uint64_t v16;
  const void **v17;
  uint64_t v18;
  const __CFString *v19;
  unsigned int v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  uint64_t i;
  CFIndex Length;
  UniChar *v26;
  UInt8 *v27;
  uint64_t v28;
  UInt8 *v29;
  const __CFString *signature;
  UInt8 v31[8];
  unsigned int v32;
  UInt8 bytes[6];
  __int16 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  CFRange v38;

  bytes[5] = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  strcpy((char *)bytes, "mluc");
  *(_QWORD *)v31 = 0;
  Mutable = CFDataCreateMutable(0, 0);
  if (!a3)
    goto LABEL_39;
  v7 = CFGetTypeID(a3);
  if (v7 != CFDictionaryGetTypeID() || !CFDictionaryGetCount((CFDictionaryRef)a3) || !Mutable)
    goto LABEL_39;
  Count = CFDictionaryGetCount((CFDictionaryRef)a3);
  v9 = (const void **)malloc_type_calloc(1uLL, 24 * Count, 0x36EAA99FuLL);
  if (v9)
  {
    v10 = v9;
    signature = a2;
    v11 = &v9[Count];
    CFDictionaryGetKeysAndValues((CFDictionaryRef)a3, v9, v11);
    if (Count < 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v13 = (const __CFString **)v10;
      v14 = Count;
      do
      {
        if (localeCFStrToChars(*v13, 0) && (v15 = v13[Count]) != 0 && CFStringGetLength(v15))
        {
          ++v12;
        }
        else
        {
          v13[Count] = 0;
          *v13 = 0;
        }
        ++v13;
        --v14;
      }
      while (v14);
    }
    v35 = bswap32(v12);
    LODWORD(v36) = 201326592;
    CFDataAppendBytes(Mutable, bytes, 16);
    if (Count >= 1)
    {
      v16 = 0;
      v17 = &v10[2 * Count];
      v18 = 12 * v12 + 16;
      do
      {
        v19 = (const __CFString *)v10[v16];
        if (v19)
        {
          localeCFStrToChars(v19, (uint64_t)v31);
          v20 = 2 * CFStringGetLength((CFStringRef)v11[v16]);
          *(_DWORD *)&v31[4] = v20;
          v32 = v18;
          v17[v16] = (const void *)v18;
          if (v16)
          {
            v21 = 0;
            while (1)
            {
              v22 = v11[v21];
              if (v22)
              {
                if (CFEqual(v11[v16], v22))
                  break;
              }
              if (v16 == ++v21)
              {
                v20 = *(_DWORD *)&v31[4];
                LODWORD(v23) = v32;
                goto LABEL_27;
              }
            }
            v20 = *(_DWORD *)&v31[4];
            v18 -= *(unsigned int *)&v31[4];
            v23 = v17[v21];
            v17[v16] = 0;
          }
          else
          {
            LODWORD(v23) = v18;
          }
LABEL_27:
          v18 += v20;
          *(_DWORD *)&v31[4] = bswap32(v20);
          v32 = bswap32(v23);
          CFDataAppendBytes(Mutable, v31, 12);
        }
        ++v16;
      }
      while (v16 != Count);
      for (i = 0; i != Count; ++i)
      {
        if (v10[i])
        {
          if (v17[i])
          {
            Length = CFStringGetLength((CFStringRef)v11[i]);
            v26 = (UniChar *)malloc_type_malloc(2 * Length, 0xF023BF07uLL);
            if (v26)
            {
              v27 = (UInt8 *)v26;
              v38.location = 0;
              v38.length = Length;
              CFStringGetCharacters((CFStringRef)v11[i], v38, v26);
              v28 = Length & 0x7FFFFFFFFFFFFFFFLL;
              if ((Length & 0x7FFFFFFFFFFFFFFFLL) != 0)
              {
                v29 = v27;
                do
                {
                  *(_WORD *)v29 = bswap32(*(unsigned __int16 *)v29) >> 16;
                  v29 += 2;
                  --v28;
                }
                while (v28);
              }
              CFDataAppendBytes(Mutable, v27, 2 * Length);
              free(v27);
            }
          }
        }
      }
    }
    ColorSyncProfileSetTag(a1, signature, Mutable);
    free(v10);
LABEL_39:
    if (!Mutable)
      return;
  }
  CFRelease(Mutable);
}

uint64_t localeCFStrToChars(const __CFString *a1, uint64_t a2)
{
  uint64_t result;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  char buffer[8];
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  *(_QWORD *)buffer = 0;
  if (a2)
    *(_DWORD *)a2 = 0;
  result = CFStringGetCString(a1, buffer, 9, 0x600u);
  if ((_DWORD)result)
  {
    v4 = strlen(buffer);
    result = 0;
    if (v4 <= 5 && ((1 << v4) & 0x34) != 0)
    {
      if (a2)
      {
        *(_WORD *)a2 = *(_WORD *)buffer;
        if (v4 == 4)
        {
          v5 = 3;
          v6 = 2;
          goto LABEL_11;
        }
        if (v4 == 5)
        {
          v5 = 4;
          v6 = 3;
LABEL_11:
          *(_BYTE *)(a2 + 2) = *(_BYTE *)((unint64_t)buffer | v6);
          *(_BYTE *)(a2 + 3) = *(_BYTE *)((unint64_t)buffer | v5);
        }
      }
      return 1;
    }
  }
  return result;
}

ColorSyncProfile *makeCalRGB(uint64_t a1, const __CFDictionary *a2)
{
  ColorSyncProfile *v4;
  double v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  const __CFString *v16;
  float v17;
  const __CFString *v18;
  float v19;
  const __CFString *v20;
  float v21;
  unsigned __int16 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned __int16 v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unsigned __int16 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[3];
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v4 = (ColorSyncProfile *)create(0, 1, 0);
  if (v4)
  {
    qmemcpy((void *)(a1 + 12), "rtnm BGR ZYX", 12);
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    memset(v47, 0, sizeof(v47));
    v48 = doubleFromDictionary(a2, CFSTR("whitePointx"));
    v5 = doubleFromDictionary(a2, CFSTR("whitePointy"));
    v49 = v5;
    if (v48 == 0.0 || v5 == 0.0 || !primariesFromDictionary(a2, (uint64_t)v47) || !checkPrimaries((double *)v47))
    {
      v6 = icXYZFromDictionary(a2, CFSTR("wtpt"));
      addXYZTag(v4, CFSTR("wtpt"), v6, v7);
      if (CFDictionaryContainsKey(a2, CFSTR("bkpt")) == 1)
      {
        v8 = icXYZFromDictionary(a2, CFSTR("bkpt"));
        addXYZTag(v4, CFSTR("bkpt"), v8, v9);
      }
      v10 = icXYZD50FromDictionary(a2, CFSTR("rXYZ"));
      addXYZTag(v4, CFSTR("rXYZ"), v10, v11);
      v12 = icXYZD50FromDictionary(a2, CFSTR("gXYZ"));
      addXYZTag(v4, CFSTR("gXYZ"), v12, v13);
      v14 = icXYZD50FromDictionary(a2, CFSTR("bXYZ"));
      addXYZTag(v4, CFSTR("bXYZ"), v14, v15);
    }
    else
    {
      ColorSyncProfileSetPrimaries(v4, (uint64_t)v47);
    }
    if (!CFDictionaryContainsKey(a2, CFSTR("paraR"))
      || !CFDictionaryContainsKey(a2, CFSTR("paraG"))
      || !CFDictionaryContainsKey(a2, CFSTR("paraB")))
    {
      v16 = CFSTR("rGamma");
      if (CFDictionaryContainsKey(a2, CFSTR("rGamma"))
        || (v16 = CFSTR("gammaR"), CFDictionaryContainsKey(a2, CFSTR("gammaR"))))
      {
        v17 = floatFromDictionary(a2, v16);
        addGammaTag(v4, CFSTR("rTRC"), v17);
      }
      v18 = CFSTR("gGamma");
      if (CFDictionaryContainsKey(a2, CFSTR("gGamma"))
        || (v18 = CFSTR("gammaG"), CFDictionaryContainsKey(a2, CFSTR("gammaG"))))
      {
        v19 = floatFromDictionary(a2, v18);
        addGammaTag(v4, CFSTR("gTRC"), v19);
      }
      if (CFDictionaryContainsKey(a2, CFSTR("bGamma")))
      {
        v20 = CFSTR("bGamma");
      }
      else
      {
        if (!CFDictionaryContainsKey(a2, CFSTR("gammaB")))
          return v4;
        v20 = CFSTR("gammaB");
      }
      v21 = floatFromDictionary(a2, v20);
      addGammaTag(v4, CFSTR("bTRC"), v21);
      return v4;
    }
    gammaCurveFromDictionary((uint64_t)&v39, a2, CFSTR("paraR"));
    ColorSyncProfileSetParametricTRCTag(v4, CFSTR("rTRC"), v39, v40, v41, v42, v43, v44, v45, v46);
    gammaCurveFromDictionary((uint64_t)&v31, a2, CFSTR("paraG"));
    ColorSyncProfileSetParametricTRCTag(v4, CFSTR("gTRC"), v31, v32, v33, v34, v35, v36, v37, v38);
    gammaCurveFromDictionary((uint64_t)&v23, a2, CFSTR("paraB"));
    ColorSyncProfileSetParametricTRCTag(v4, CFSTR("bTRC"), v23, v24, v25, v26, v27, v28, v29, v30);
  }
  return v4;
}

void addXYZTag(ColorSyncProfile *a1, const __CFString *a2, uint64_t a3, unsigned int a4)
{
  const __CFData *v6;
  UInt8 bytes[8];
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)bytes = 542792024;
  v8 = bswap32(a3);
  v9 = bswap32(HIDWORD(a3));
  v10 = bswap32(a4);
  v6 = CFDataCreateWithBytesNoCopy(0, bytes, 20, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  ColorSyncProfileSetTag(a1, a2, v6);
  if (v6)
    CFRelease(v6);
}

void ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof, CFStringRef signature, CFDataRef data)
{
  CFTypeID v6;
  CFTypeID v7;
  CFDataRef Copy;
  CFDataRef v9;
  const void *v10;
  CFDataRef v11;
  CFTypeRef cf2;

  if (prof)
  {
    v6 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v6 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      if (data)
      {
        if (*((_DWORD *)prof + 37) == 1)
        {
          v7 = CFGetTypeID(data);
          if (v7 == CFDataGetTypeID())
          {
            v11 = data;
            cf2 = 0;
            pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
            CFDictionaryApplyFunction(*((CFDictionaryRef *)prof + 11), (CFDictionaryApplierFunction)tagValueComparer, &v11);
            if (cf2 && !CFEqual(signature, cf2))
            {
              CFDictionarySetValue(*((CFMutableDictionaryRef *)prof + 11), signature, cf2);
            }
            else
            {
              Copy = CFDataCreateCopy(0, data);
              if (Copy)
              {
                v9 = Copy;
                if (CFDictionaryContainsValue(*((CFDictionaryRef *)prof + 11), signature))
                  removeReference((uint64_t)prof, signature);
                CFDictionarySetValue(*((CFMutableDictionaryRef *)prof + 11), signature, v9);
                v10 = (const void *)*((_QWORD *)prof + 13);
                if (v10)
                {
                  CFRelease(v10);
                  *((_QWORD *)prof + 13) = 0;
                }
                *((_QWORD *)prof + 16) = 0;
                *((_QWORD *)prof + 17) = 0;
                CFRelease(v9);
              }
            }
            pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
          }
        }
      }
    }
  }
}

double doubleFromDictionary(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *Value;
  double v3;
  const __CFNumber *v4;
  CFTypeID v5;
  double valuePtr;

  if (!a2)
    return 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  valuePtr = 0.0;
  v3 = 0.0;
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberIsFloatType(v4))
      {
        if (CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr))
          return valuePtr;
        else
          return 0.0;
      }
    }
  }
  return v3;
}

double gammaCurveFromDictionary(uint64_t a1, CFDictionaryRef theDict, void *key)
{
  const __CFArray *Value;
  double result;
  const __CFArray *v6;
  CFTypeID v7;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  double v16;
  unsigned __int16 valuePtr;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = 255;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID() && CFArrayGetCount(v6) == 8)
    {
      valuePtr = 255;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 0);
      if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr) == 1 && valuePtr <= 4u)
      {
        *(_WORD *)a1 = valuePtr;
        v16 = 0.0;
        v9 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 1);
        if (CFNumberGetValue(v9, kCFNumberDoubleType, &v16) == 1)
          *(double *)(a1 + 8) = v16;
        v10 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 2);
        if (CFNumberGetValue(v10, kCFNumberDoubleType, &v16) == 1)
          *(double *)(a1 + 16) = v16;
        v11 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 3);
        if (CFNumberGetValue(v11, kCFNumberDoubleType, &v16) == 1)
          *(double *)(a1 + 24) = v16;
        v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 4);
        if (CFNumberGetValue(v12, kCFNumberDoubleType, &v16) == 1)
          *(double *)(a1 + 32) = v16;
        v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 5);
        if (CFNumberGetValue(v13, kCFNumberDoubleType, &v16) == 1)
          *(double *)(a1 + 40) = v16;
        v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 6);
        if (CFNumberGetValue(v14, kCFNumberDoubleType, &v16) == 1)
          *(double *)(a1 + 48) = v16;
        v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 7);
        if (CFNumberGetValue(v15, kCFNumberDoubleType, &v16) == 1)
        {
          result = v16;
          *(double *)(a1 + 56) = v16;
        }
      }
    }
  }
  return result;
}

void ColorSyncProfileSetParametricTRCTag(ColorSyncProfile *a1, const __CFString *a2, unsigned int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  const __CFData *v12;
  UInt8 bytes[8];
  __int16 v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)bytes = 1634886000;
  v14 = __rev16(a3);
  v15 = 0;
  v16 = bswap32((int)(a4 * 65536.0 + 0.5));
  v17 = bswap32((int)(a5 * 65536.0 + 0.5));
  v18 = bswap32((int)(a6 * 65536.0 + 0.5));
  v19 = bswap32((int)(a7 * 65536.0 + 0.5));
  v20 = bswap32((int)(a8 * 65536.0 + 0.5));
  v21 = bswap32((int)(a9 * 65536.0 + 0.5));
  v22 = bswap32((int)(a10 * 65536.0 + 0.5));
  v23 = 0;
  if (a3 <= 4)
  {
    v12 = CFDataCreateWithBytesNoCopy(0, bytes, qword_18B3EAD58[a3], (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    ColorSyncProfileSetTag(a1, a2, v12);
    if (v12)
      CFRelease(v12);
  }
}

unint64_t icXYZD50FromDictionary(const __CFDictionary *a1, const void *a2)
{
  const __CFArray *Value;
  const __CFArray *v4;
  CFTypeID v5;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  unsigned int v15;
  uint64_t v16;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t valuePtr;
  uint64_t v23;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value)
    goto LABEL_12;
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFArrayGetTypeID())
    goto LABEL_12;
  valuePtr = 0uLL;
  v23 = 0;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 0);
  if (!CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr))
    goto LABEL_12;
  v7 = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 1);
  if (!CFNumberGetValue(v7, kCFNumberDoubleType, &valuePtr.f64[1]))
    goto LABEL_12;
  v8 = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 2);
  if (!CFNumberGetValue(v8, kCFNumberDoubleType, &v23))
    goto LABEL_12;
  v9 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("wtpt"));
  if (!v9)
    goto LABEL_12;
  v10 = v9;
  v11 = CFGetTypeID(v9);
  if (v11 == CFArrayGetTypeID()
    && (v20 = 0uLL,
        v21 = 0,
        v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, 0),
        CFNumberGetValue(v12, kCFNumberDoubleType, &v20))
    && (v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, 1),
        CFNumberGetValue(v13, kCFNumberDoubleType, &v20.f64[1]))
    && (v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, 2), CFNumberGetValue(v14, kCFNumberDoubleType, &v21)))
  {
    v18 = 0uLL;
    v19 = 0;
    ColorSyncConvertDoubleXYZToD50(&valuePtr, &v20, &v18, 3, 0);
    v15 = (int)(v18.f64[0] * 65536.0 + 0.5);
    v16 = (int)(v18.f64[1] * 65536.0 + 0.5);
  }
  else
  {
LABEL_12:
    v16 = 0;
    v15 = 0;
  }
  return v15 | (unint64_t)(v16 << 32);
}

double ColorSyncConvertDoubleXYZToD50(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, int a4, uint64_t a5)
{
  float64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v23 = xmmword_18B3EA890;
  v24 = 0x3FEA6594AF4F0D84;
  v7 = a1[1].f64[0];
  *a3 = *a1;
  a3[1].f64[0] = v7;
  v29 = 0.0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  ColorSyncGetAdaptationMtx(a4, (double *)&v25, a2, (float64x2_t *)&v23);
  if (a5)
  {
    v8 = v25;
    v9 = v26;
    *(_OWORD *)a5 = v25;
    *(_OWORD *)(a5 + 16) = v9;
    v11 = v27;
    v10 = v28;
    *(_OWORD *)(a5 + 32) = v27;
    *(_OWORD *)(a5 + 48) = v10;
    v12 = v29;
    *(double *)(a5 + 64) = v29;
    v13 = *((double *)&v8 + 1);
    v14 = *((double *)&v9 + 1);
    v15 = *((double *)&v11 + 1);
    v16 = *((double *)&v10 + 1);
  }
  else
  {
    v13 = *((double *)&v25 + 1);
    *(_QWORD *)&v8 = v25;
    v14 = *((double *)&v26 + 1);
    *(_QWORD *)&v9 = v26;
    v15 = *((double *)&v27 + 1);
    *(_QWORD *)&v11 = v27;
    v16 = *((double *)&v28 + 1);
    *(_QWORD *)&v10 = v28;
    v12 = v29;
  }
  v17 = *a3;
  v18 = a3[1].f64[0];
  v19 = a3->f64[1];
  v20 = vmlad_n_f64(vmuld_lane_f64(*(double *)&v11, *a3, 1), v14, a3->f64[0]) + v18 * v15;
  v21 = 0.0;
  if (v20 < 0.0 || (v21 = 1.0, v20 > 1.0))
    v20 = v21;
  result = v19 * v13 + v17.f64[0] * *(double *)&v8 + v18 * *(double *)&v9;
  a3->f64[0] = result;
  a3->f64[1] = v20;
  a3[1].f64[0] = v19 * v16 + v17.f64[0] * *(double *)&v10 + v18 * v12;
  return result;
}

double MatrixMatrix(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[6];
  v19 = a2[7];
  v20 = a2[8];
  v21 = v7 * v13 + v4 * *a2 + v10 * v14;
  *a3 = v6 * v13 + *a1 * *a2 + v9 * v14;
  a3[1] = v21;
  a3[2] = v8 * v13 + v5 * v12 + v11 * v14;
  a3[3] = v6 * v16 + v3 * v15 + v9 * v17;
  a3[4] = v7 * v16 + v4 * v15 + v10 * v17;
  a3[5] = v8 * v16 + v5 * v15 + v11 * v17;
  a3[6] = v6 * v19 + v3 * v18 + v9 * v20;
  a3[7] = v7 * v19 + v4 * v18 + v10 * v20;
  result = v8 * v19 + v5 * v18 + v11 * v20;
  a3[8] = result;
  return result;
}

double ColorSyncGetAdaptationMtx(int a1, double *a2, float64x2_t *a3, float64x2_t *a4)
{
  int v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v27[10];

  v27[9] = *(double *)MEMORY[0x1E0C80C00];
  if (a1)
    v5 = a1;
  else
    v5 = 2;
  if ((v5 - 4) < 0xFFFFFFFD)
    v5 = 3;
  v6 = (double *)&Bradford_mtx;
  if (v5 == 2)
  {
    v6 = (double *)&vonKries_mtx;
    v7 = (double *)&invVonKries_mtx;
  }
  else
  {
    v7 = (double *)&invBradford_mtx;
  }
  if (v5 == 1)
    v8 = (double *)&identity_mtx;
  else
    v8 = v6;
  if (v5 == 1)
    v9 = (double *)&identity_mtx;
  else
    v9 = v7;
  v10 = a3[1].f64[0];
  v11 = v8[1];
  v12 = v8[2];
  v13 = v8[3];
  v14 = vmlad_n_f64(vmuld_lane_f64(v11, *a3, 1), *v8, a3->f64[0]) + v10 * v12;
  v15 = v8[4];
  v16 = v8[5];
  v17 = vmlad_n_f64(vmuld_lane_f64(v15, *a3, 1), v13, a3->f64[0]) + v10 * v16;
  v18 = v8[6];
  v19 = v8[7];
  v20 = v8[8];
  v21 = vmlad_n_f64(vmuld_lane_f64(v19, *a3, 1), v18, a3->f64[0]) + v10 * v20;
  v22 = a4[1].f64[0];
  v23 = vmlad_n_f64(vmuld_lane_f64(v11, *a4, 1), *v8, a4->f64[0]) + v22 * v12;
  v24 = vmlad_n_f64(vmuld_lane_f64(v15, *a4, 1), v13, a4->f64[0]) + v22 * v16;
  v25 = vmlad_n_f64(vmuld_lane_f64(v19, *a4, 1), v18, a4->f64[0]);
  v27[0] = v23 / v14;
  memset(&v27[1], 0, 24);
  v27[4] = v24 / v17;
  memset(&v27[5], 0, 24);
  v27[8] = (v25 + v22 * v20) / v21;
  MatrixMatrix(v8, v27, a2);
  return MatrixMatrix(a2, v9, a2);
}

unint64_t icXYZFromDictionary(const __CFDictionary *a1, const void *a2)
{
  const __CFArray *Value;
  const __CFArray *v3;
  CFTypeID v4;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v6;
  const __CFNumber *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t valuePtr;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value
    && (v3 = Value, v4 = CFGetTypeID(Value), v4 == CFArrayGetTypeID())
    && (v12 = 0,
        valuePtr = 0,
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 0),
        CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &valuePtr))
    && (v6 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 1),
        CFNumberGetValue(v6, kCFNumberFloatType, (char *)&valuePtr + 4))
    && (v7 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 2), CFNumberGetValue(v7, kCFNumberFloatType, &v12)))
  {
    v8 = (int)(float)((float)(*(float *)&valuePtr * 65536.0) + 0.5);
    v9 = (int)(float)((float)(*((float *)&valuePtr + 1) * 65536.0) + 0.5);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  return v8 | (unint64_t)(v9 << 32);
}

float floatFromDictionary(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *Value;
  float v3;
  const __CFNumber *v4;
  CFTypeID v5;
  float valuePtr;

  if (!a2)
    return 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  valuePtr = 0.0;
  v3 = 0.0;
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberIsFloatType(v4))
      {
        if (CFNumberGetValue(v4, kCFNumberFloatType, &valuePtr))
          return valuePtr;
        else
          return 0.0;
      }
    }
  }
  return v3;
}

void addGammaTag(ColorSyncProfile *a1, const __CFString *a2, float a3)
{
  const __CFData *v5;
  uint64_t v6;
  int v7;
  __int16 v8;

  v6 = 1987212643;
  v7 = (a3 != 0.0) << 24;
  v8 = __rev16((int)(a3 * 256.0 + 0.5));
  v5 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v6, 14, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  ColorSyncProfileSetTag(a1, a2, v5);
  if (v5)
    CFRelease(v5);
}

void setDESCTag(ColorSyncProfile *a1, const void *a2, size_t a3, const void *a4, uint64_t a5)
{
  uint64_t v10;
  __CFData *Mutable;
  __CFData *v12;
  UInt8 *MutableBytePtr;
  UInt8 *v14;
  uint64_t v15;
  UInt8 *v16;

  v10 = a3 + 2 * a5 + 90;
  Mutable = CFDataCreateMutable(0, v10);
  if (Mutable)
  {
    v12 = Mutable;
    CFDataSetLength(Mutable, v10);
    MutableBytePtr = CFDataGetMutableBytePtr(v12);
    if (MutableBytePtr)
    {
      v14 = MutableBytePtr;
      bzero(MutableBytePtr, v10);
      *(_DWORD *)v14 = 1668506980;
      *((_DWORD *)v14 + 2) = bswap32(a3);
      if (a3)
      {
        memcpy(v14 + 12, a2, a3);
        v15 = a3 + 12;
      }
      else
      {
        v15 = 12;
      }
      v16 = &v14[v15];
      *(_DWORD *)v16 = 0;
      *((_DWORD *)v16 + 1) = bswap32(a5);
      if (a5)
        swab(a4, &v14[v15 + 8], 2 * a5);
      ColorSyncProfileSetTag(a1, CFSTR("desc"), v12);
    }
    CFRelease(v12);
  }
}

void ___ZL34CMMInitializeTwoPointTwoGammaTablev_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v4 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v4);
  v0 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v4);
  v0[2] = 0;
  v0[3] = &kTwoPointTwoGammaData;
  *v0 = off_1E215FE00;
  v0[1] = 0;
  v0[4] = 21512;
  CMMTwoPointTwoGammaTable = (uint64_t)v0;
  v1 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v4);
  v1[2] = 0;
  v1[3] = &kInvTwoPointTwoGammaData;
  *v1 = off_1E215FE00;
  v1[1] = 0;
  v1[4] = 21512;
  CMMInvTwoPointTwoGammaTable = (uint64_t)v1;
  v2 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v4);
  CMMTwoPointTwoGammaFloatLutInfo = (uint64_t)v2;
  *v2 = 0x200000001;
  *((_BYTE *)v2 + 8) = 1;
  *((_DWORD *)v2 + 3) = 3;
  v2[2] = 0;
  *(_OWORD *)(v2 + 3) = xmmword_18B3EA900;
  *((_DWORD *)v2 + 10) = 1036726266;
  v3 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v4);
  CMMInvTwoPointTwoGammaFloatLutInfo = (uint64_t)v3;
  *v3 = 0x500000001;
  *((_BYTE *)v3 + 8) = 1;
  *((_DWORD *)v3 + 3) = 3;
  v3[2] = 0;
  *(_OWORD *)(v3 + 3) = xmmword_18B3EA910;
  *((_DWORD *)v3 + 10) = 1003171834;
  CMMMemMgr::ReleaseMemList(&v4);
}

void sub_18B3AD9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void ___ZL36CMMInitializeOnePointEightGammaTablev_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v4 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v4);
  v0 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v4);
  v0[2] = 0;
  v0[3] = &kOnePointEightGammaData;
  *v0 = off_1E215FE00;
  v0[1] = 0;
  v0[4] = 21512;
  CMMOnePointEightGammaTable = (uint64_t)v0;
  v1 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v4);
  v1[2] = 0;
  v1[3] = &kInvOnePointEightGammaData;
  *v1 = off_1E215FE00;
  v1[1] = 0;
  v1[4] = 21512;
  CMMInvOnePointEightGammaTable = (uint64_t)v1;
  v2 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v4);
  CMMOnePointEightGammaFloatLutInfo = (uint64_t)v2;
  *v2 = 0x300000001;
  *((_BYTE *)v2 + 8) = 1;
  *((_DWORD *)v2 + 3) = 3;
  v2[2] = 0;
  *(_OWORD *)(v2 + 3) = xmmword_18B3EA920;
  *((_DWORD *)v2 + 10) = 1023410176;
  v3 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v4);
  CMMInvOnePointEightGammaFloatLutInfo = (uint64_t)v3;
  *v3 = 0x600000001;
  *((_BYTE *)v3 + 8) = 1;
  *((_DWORD *)v3 + 3) = 3;
  v3[2] = 0;
  *(_OWORD *)(v3 + 3) = xmmword_18B3EA930;
  *((_DWORD *)v3 + 10) = 989855744;
  CMMMemMgr::ReleaseMemList(&v4);
}

void sub_18B3ADB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t verify_AdobeRGB(ColorSyncProfileRef prof, const __CFData *cf)
{
  const __CFData *v4;
  CFDataRef v5;
  BOOL v6;
  const UInt8 *BytePtr;
  size_t Length;
  const UInt8 *v9;
  uint64_t Tag;
  ColorSyncProfileRef v11;
  CFIndex v12;
  const __CFString *v13;
  const __CFString *v14;
  unint64_t v15;
  __CFString *v16;
  const __CFData *v17;
  const __CFData *v18;
  const UInt8 *v19;
  unint64_t v20;
  const UInt8 *v21;
  size_t v22;
  BOOL v23;
  BOOL v24;
  unsigned int *v25;
  CFIndex v26;
  uint64_t v27;
  unsigned int v28;
  CMMCurveTag *v29;
  CFTypeID v30;
  CFTypeID v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL4 v34;
  unsigned int *v35;
  signed int v36;
  unsigned int *v37;
  unsigned int v38;
  signed int v39;
  unsigned int v40;
  signed int v41;
  unsigned int v42;
  signed int v43;
  signed int v44;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void *v57;
  CFRange v58;

  if (getAdobeRGBData_predicate != -1)
    dispatch_once(&getAdobeRGBData_predicate, &__block_literal_global_362);
  v4 = (const __CFData *)getAdobeRGBData_adobeRGBData;
  if (cf)
  {
    v5 = 0;
  }
  else
  {
    v5 = ColorSyncProfileCopyData(prof, 0);
    cf = v5;
  }
  if (v4)
    v6 = cf == 0;
  else
    v6 = 1;
  if (v6
    || (BytePtr = CFDataGetBytePtr(v4),
        Length = CFDataGetLength(v4),
        v9 = CFDataGetBytePtr(cf),
        CFDataGetLength(cf) < Length))
  {
    Tag = 0;
    if (!v4)
      goto LABEL_77;
  }
  else
  {
    Tag = memcmp(BytePtr, v9, Length) == 0;
    if (!v4)
      goto LABEL_77;
  }
  if ((_DWORD)Tag || !cf)
  {
LABEL_77:
    if (!v5)
      return Tag;
LABEL_78:
    CFRelease(v5);
    return Tag;
  }
  if (prof)
  {
    v11 = 0;
  }
  else
  {
    prof = (ColorSyncProfileRef)create(cf, 0, 0);
    v11 = prof;
    if (!prof)
      goto LABEL_77;
  }
  v12 = CFStringGetLength(CFSTR("Nikon Adobe RGB 4.0.0.3001"));
  v13 = (const __CFString *)ColorSyncProfileCopyASCIIDescriptionString(prof);
  v14 = v13;
  if (v13)
    v13 = (const __CFString *)CFStringGetLength(v13);
  if ((uint64_t)v13 < v12
    || (v58.location = 0,
        v58.length = v12,
        CFStringCompareWithOptions(v14, CFSTR("Nikon Adobe RGB 4.0.0.3001"), v58, 0)))
  {
    if (v14)
      CFRelease(v14);
    v15 = 0;
    while (1)
    {
      v16 = off_1E2161B30[v15];
      Tag = (uint64_t)getTag((uint64_t)prof, v16);
      if (!Tag)
      {
LABEL_75:
        if (v11)
          CFRelease(v11);
        goto LABEL_77;
      }
      if (getAdobeRGBProfile_predicate != -1)
        dispatch_once(&getAdobeRGBProfile_predicate, &__block_literal_global_364);
      v17 = (const __CFData *)getTag(getAdobeRGBProfile_adobeRGB, v16);
      if (!v17
        || ((v18 = v17,
             v19 = CFDataGetBytePtr((CFDataRef)Tag),
             v20 = CFDataGetLength((CFDataRef)Tag),
             v21 = CFDataGetBytePtr(v18),
             v22 = CFDataGetLength(v18),
             v20 >= v22)
          ? (v23 = v19 == 0)
          : (v23 = 1),
            !v23 ? (v24 = v21 == 0) : (v24 = 1),
            v24))
      {
LABEL_74:
        Tag = 0;
        goto LABEL_75;
      }
      if (!memcmp(v21, v19, v22))
      {
        Tag = 1;
        goto LABEL_71;
      }
      if ((v15 - 3) <= 2)
        break;
      v30 = CFGetTypeID(v18);
      if (v30 != CFDataGetTypeID())
        goto LABEL_74;
      v31 = CFGetTypeID((CFTypeRef)Tag);
      if (v31 != CFDataGetTypeID())
        goto LABEL_74;
      *(_QWORD *)&v53 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v53);
      v32 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v53);
      CMMXYZTag::CMMXYZTag((uint64_t)v32, v18);
      v33 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v53);
      CMMXYZTag::CMMXYZTag((uint64_t)v33, (CFDataRef)Tag);
      v34 = 0;
      v35 = (unsigned int *)v32[5];
      v36 = bswap32(v35[2]);
      v37 = (unsigned int *)v33[5];
      v38 = bswap32(v37[2]);
      if (v36 >= (int)(v38 - 1) && v36 <= (int)(v38 + 1))
      {
        v34 = 0;
        v39 = bswap32(v35[3]);
        v40 = bswap32(v37[3]);
        if (v39 >= (int)(v40 - 1) && v39 <= (int)(v40 + 1))
        {
          v41 = bswap32(v35[4]);
          v42 = bswap32(v37[4]);
          v43 = v42 - 1;
          v44 = v42 + 1;
          v34 = v41 >= v43 && v41 <= v44;
        }
      }
      (*(void (**)(_QWORD *))(*v32 + 8))(v32);
      (*(void (**)(_QWORD *))(*v33 + 8))(v33);
      CMMMemMgr::ReleaseMemList((void **)&v53);
      Tag = v34;
LABEL_71:
      if (v15 <= 4)
      {
        ++v15;
        if ((Tag & 1) != 0)
          continue;
      }
      goto LABEL_75;
    }
    v25 = (unsigned int *)CFDataGetBytePtr((CFDataRef)Tag);
    v26 = CFDataGetLength((CFDataRef)Tag);
    Tag = 0;
    if (!v25)
      goto LABEL_75;
    v27 = v26;
    if (!v26)
      goto LABEL_75;
    v57 = 0;
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v57);
    v28 = bswap32(*v25);
    if (v28 == 1668641398)
    {
      v29 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, (_QWORD **)&v57);
      CMMCurveTag::CMMCurveTag(v29, 0, (uint64_t)v25, v27, 0);
    }
    else
    {
      if (v28 != 1885434465)
      {
        Tag = 0;
LABEL_70:
        CMMMemMgr::ReleaseMemList(&v57);
        goto LABEL_71;
      }
      v29 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, (_QWORD **)&v57);
      CMMParaCurveTag::CMMParaCurveTag(v29, 0, (uint64_t)v25, v27, 0);
    }
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    LODWORD(v53) = 1;
    v46 = (_QWORD *)(*(uint64_t (**)(CMMCurveTag *, __int128 *, void **, _QWORD, float))(*(_QWORD *)v29 + 64))(v29, &v53, &v57, 0, 1.0);
    if (v46)
    {
      Tag = DWORD1(v53) == 2;
      v47 = v46[1];
      if (v47)
      {
        v48 = v47 - 1;
        v46[1] = v48;
        if (!v48)
          (*(void (**)(_QWORD *))(*v46 + 8))(v46);
      }
    }
    else
    {
      Tag = 0;
    }
    v49 = v54;
    if ((_QWORD)v54)
    {
      v50 = *(_QWORD *)(v54 + 8);
      if (v50)
      {
        v51 = v50 - 1;
        *(_QWORD *)(v54 + 8) = v51;
        if (!v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    (*(void (**)(CMMCurveTag *))(*(_QWORD *)v29 + 8))(v29);
    goto LABEL_70;
  }
  CFRelease(v14);
  Tag = 1;
  v5 = v11;
  if (v11)
    goto LABEL_78;
  return Tag;
}

void sub_18B3AE0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMXYZTag::CMMXYZTag(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v6;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = Length;
  *(_QWORD *)(a1 + 40) = BytePtr;
  *(_WORD *)(a1 + 48) = 0;
  if (Length >= 0x14)
    v6 = 0;
  else
    v6 = 4294967126;
  *(_QWORD *)a1 = off_1E215FEF0;
  CMMThrowExceptionOnError(v6);
  return a1;
}

void sub_18B3AE148(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

CFTypeRef ColorSyncProfileCopyASCIIDescriptionString(CFTypeRef result)
{
  CFTypeRef v1;
  CFTypeID v2;
  const __CFData *Value;
  const __CFData *v4;
  CFTypeID v5;
  CFTypeID v6;
  unsigned int *v7;
  unsigned int v8;
  const UInt8 *BytePtr;
  unint64_t Length;
  unsigned int v11;
  CFIndex v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  CFTypeID v20;
  unsigned int *v21;
  __CFString **v22;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
      return 0;
    result = (CFTypeRef)*((_QWORD *)v1 + 11);
    if (!result)
      return result;
    Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("desc"));
    if (Value
      && ((v4 = Value, v5 = CFGetTypeID(Value), v5 != CFStringGetTypeID())
       || (v4 = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), v4)) != 0)
      && (v6 = CFGetTypeID(v4), v6 == CFDataGetTypeID())
      && CFDataGetLength(v4) >= 9
      && (v7 = (unsigned int *)CFDataGetBytePtr(v4)) != 0)
    {
      if (*v7 == 1668506980)
      {
        v8 = 1684370275;
        BytePtr = CFDataGetBytePtr(v4);
        Length = CFDataGetLength(v4);
        if (Length >= 0xD)
        {
          v11 = *((_DWORD *)BytePtr + 2);
          if (v11)
          {
            v12 = bswap32(v11);
            if (Length >= v12 + 12)
            {
              result = CFStringCreateWithBytes(0, BytePtr + 12, v12, 0x600u, 0);
              if (result)
                return result;
            }
          }
        }
      }
      else
      {
        v8 = bswap32(*v7);
      }
    }
    else
    {
      v8 = 0;
    }
    v13 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), CFSTR("dscm"));
    if (v13)
    {
      v14 = v13;
      v15 = CFGetTypeID(v13);
      if (v15 != CFStringGetTypeID() || (v14 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), v14)) != 0)
      {
        v16 = CFGetTypeID(v14);
        if (v16 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v14) >= 9)
        {
          if (CFDataGetBytePtr((CFDataRef)v14))
            v8 = bswap32(*(_DWORD *)CFDataGetBytePtr((CFDataRef)v14));
          if (v8 == 1835824483)
          {
            result = copy_description_from_DSCMTag((const __CFData *)v14, 0, 0);
            if (result)
              return result;
            v8 = 1835824483;
          }
          else
          {
            v8 = 0;
          }
        }
      }
    }
    v17 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), CFSTR("desc"));
    if (!v17
      || (v18 = v17, v19 = CFGetTypeID(v17), v19 == CFStringGetTypeID())
      && (v18 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), v18)) == 0)
    {
      v22 = kColorSyncMissingDescription;
      return CFRetain(*v22);
    }
    v20 = CFGetTypeID(v18);
    if (v20 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v18) >= 9)
    {
      v21 = (unsigned int *)CFDataGetBytePtr((CFDataRef)v18);
      if (v21)
        v8 = bswap32(*v21);
    }
    if (v8 == 1684370275)
    {
      result = descriptionFromDESCTag((const __CFData *)v18, 0, 0);
    }
    else
    {
      if (v8 != 1835824483)
      {
LABEL_45:
        v22 = kColorSyncBadDescription;
        return CFRetain(*v22);
      }
      result = copy_description_from_DSCMTag((const __CFData *)v18, 0, 0);
    }
    if (!result)
      goto LABEL_45;
  }
  return result;
}

const void *ColorSyncCreateOutputPoppyProfile(const ColorSyncProfile *a1)
{
  uint64_t poppy_index_from_profile;

  poppy_index_from_profile = get_poppy_index_from_profile(a1);
  return acquire_output_profile(poppy_index_from_profile);
}

void ___ZL29CMMInitializeLinearGammaTablev_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;

  v2 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v2);
  v0 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v2);
  v0[2] = 0;
  v0[3] = &kLinearGammaData;
  *v0 = off_1E215FE00;
  v0[1] = 0;
  v0[4] = 21512;
  CMMLinearGammaTable = (uint64_t)v0;
  v1 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v2);
  CMMLinearGammaFloatLutInfo = (uint64_t)v1;
  *v1 = 0x700000001;
  *((_BYTE *)v1 + 8) = 1;
  *((_DWORD *)v1 + 3) = 0;
  v1[2] = 0;
  *((_DWORD *)v1 + 6) = 1065353216;
  CMMMemMgr::ReleaseMemList(&v2);
}

void sub_18B3AE514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void ___ZL27CMMInitializeSRGBGammaTablev_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  void *v10;

  v10 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v10);
  v0 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v10);
  v0[2] = 0;
  v0[3] = &ksRGBGammaData;
  *v0 = off_1E215FE00;
  v0[1] = 0;
  v0[4] = 21512;
  CMMsRGBGammaTable = (uint64_t)v0;
  v1 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v10);
  v1[2] = 0;
  v1[3] = &kInvsRGBGammaData;
  *v1 = off_1E215FE00;
  v1[1] = 0;
  v1[4] = 21512;
  CMMInvsRGBGammaTable = (uint64_t)v1;
  v2 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v10);
  CMMsRGBGammaFloatLutInfo = (uint64_t)v2;
  *v2 = 0x100000001;
  *((_DWORD *)v2 + 3) = 3;
  v2[2] = 0;
  *((_BYTE *)v2 + 8) = 0;
  *(_OWORD *)(v2 + 3) = xmmword_18B3EA8E0;
  *(_OWORD *)(v2 + 5) = xmmword_18B3EA8F0;
  v3 = CMMBase::NewInternal(0x38uLL, (_QWORD **)&v10);
  CMMInvsRGBGammaFloatLutInfo = (uint64_t)v3;
  v4 = *(float *)(CMMsRGBGammaFloatLutInfo + 24);
  v5 = *(float *)(CMMsRGBGammaFloatLutInfo + 28);
  v6 = *(float *)(CMMsRGBGammaFloatLutInfo + 32);
  v7 = *(float *)(CMMsRGBGammaFloatLutInfo + 36);
  v8 = *(float *)(CMMsRGBGammaFloatLutInfo + 40);
  *v3 = 0x400000001;
  *((_DWORD *)v3 + 3) = 4;
  v3[2] = 0;
  *((_BYTE *)v3 + 8) = 0;
  *((float *)v3 + 6) = 1.0 / v4;
  *((float *)v3 + 7) = 1.0 / powf(v5, v4);
  *((_DWORD *)v3 + 8) = 0;
  v9 = 1.0 / v7;
  if (v7 == 0.0)
    v9 = 0.0;
  *((float *)v3 + 9) = v9;
  *((float *)v3 + 10) = v7 * v8;
  *((float *)v3 + 11) = (float)-v6 / v5;
  v3[6] = 0;
  CMMMemMgr::ReleaseMemList(&v10);
}

void sub_18B3AE6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

ColorSyncTransformRef ColorSyncTransformCreate(CFArrayRef profileSequence, CFDictionaryRef options)
{
  CFTypeID v4;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *Value;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  const __CFData *v12;
  const UInt8 *v13;
  _DWORD *v14;
  const UInt8 *BytePtr;
  CFTypeID v16;
  CFIndex Count;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  const void *v21;
  const void *v22;
  const void *v23;
  CFTypeID v24;
  unsigned int v25;
  const __CFData *v26;
  const UInt8 *v27;
  unsigned int *v28;
  const UInt8 *v29;
  _OWORD *RuntimeInstance;
  _QWORD *v31;
  _QWORD *v32;
  CFTypeID v33;
  CFTypeID v34;
  unsigned int (*v35)(_OWORD *, CFArrayRef, CFDictionaryRef);
  CFTypeRef v36;
  CFTypeID v38;

  if (!profileSequence)
  {
    LODWORD(v6) = 0;
    goto LABEL_43;
  }
  v4 = CFGetTypeID(profileSequence);
  if (v4 != CFArrayGetTypeID())
    goto LABEL_21;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(profileSequence, 0);
  v6 = ValueAtIndex;
  if (ValueAtIndex)
  {
    v7 = CFGetTypeID(ValueAtIndex);
    if (v7 != CFDictionaryGetTypeID())
      goto LABEL_21;
    Value = CFDictionaryGetValue(v6, kColorSyncProfile);
    v9 = CFDictionaryGetValue(v6, kColorSyncTransformTag);
    if (!Value)
      goto LABEL_21;
    v10 = v9;
    v11 = CFGetTypeID(Value);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    LODWORD(v6) = 0;
    if (v11 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && v10)
    {
      v12 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)Value);
      if (!CFEqual(v10, kColorSyncTransformDeviceToPCS))
      {
        if (CFEqual(v10, kColorSyncTransformPCSToPCS) || CFEqual(v10, kColorSyncTransformPCSToDevice))
        {
          if (v12)
          {
            BytePtr = CFDataGetBytePtr(v12);
            if (BytePtr)
            {
              v14 = BytePtr + 20;
              goto LABEL_20;
            }
LABEL_37:
            LODWORD(v6) = 0;
            goto LABEL_38;
          }
          goto LABEL_21;
        }
        if (!CFEqual(v10, kColorSyncTransformDeviceToDevice)
          && !CFEqual(v10, (CFTypeRef)kColorSyncTransformSceneLinearToPCS)
          && !CFEqual(v10, (CFTypeRef)kColorSyncTransformDisplayLinearToPCS)
          && !CFEqual(v10, (CFTypeRef)kColorSyncTransformDeviceToSceneLinearPCS))
        {
          LODWORD(v6) = 0;
          if (!v12)
            goto LABEL_22;
          goto LABEL_38;
        }
      }
      if (v12)
      {
        v13 = CFDataGetBytePtr(v12);
        if (v13)
        {
          v14 = v13 + 16;
LABEL_20:
          LODWORD(v6) = *v14;
LABEL_38:
          CFRelease(v12);
          goto LABEL_22;
        }
        goto LABEL_37;
      }
LABEL_21:
      LODWORD(v6) = 0;
    }
  }
LABEL_22:
  v16 = CFGetTypeID(profileSequence);
  if (v16 != CFArrayGetTypeID())
    goto LABEL_43;
  if (CFArrayGetCount(profileSequence) < 1)
    goto LABEL_43;
  Count = CFArrayGetCount(profileSequence);
  v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(profileSequence, Count - 1);
  if (!v18)
    goto LABEL_43;
  v19 = v18;
  v20 = CFGetTypeID(v18);
  if (v20 != CFDictionaryGetTypeID())
    goto LABEL_43;
  v21 = CFDictionaryGetValue(v19, kColorSyncProfile);
  v22 = CFDictionaryGetValue(v19, kColorSyncTransformTag);
  if (!v21)
    goto LABEL_43;
  v23 = v22;
  v24 = CFGetTypeID(v21);
  if (ColorSyncProfileGetTypeID_predicate != -1)
  {
    v38 = v24;
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    v24 = v38;
  }
  v25 = 0;
  if (v24 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && v23)
  {
    v26 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)v21);
    if (CFEqual(v23, kColorSyncTransformDeviceToPCS) || CFEqual(v23, kColorSyncTransformPCSToPCS))
    {
LABEL_33:
      if (v26)
      {
        v27 = CFDataGetBytePtr(v26);
        if (v27)
        {
          v28 = (unsigned int *)(v27 + 20);
LABEL_36:
          v25 = *v28;
LABEL_58:
          CFRelease(v26);
          goto LABEL_44;
        }
        goto LABEL_57;
      }
      goto LABEL_43;
    }
    if (CFEqual(v23, kColorSyncTransformPCSToDevice))
    {
LABEL_40:
      if (v26)
      {
        v29 = CFDataGetBytePtr(v26);
        if (v29)
        {
          v28 = (unsigned int *)(v29 + 16);
          goto LABEL_36;
        }
LABEL_57:
        v25 = 0;
        goto LABEL_58;
      }
LABEL_43:
      v25 = 0;
      goto LABEL_44;
    }
    if (CFEqual(v23, kColorSyncTransformDeviceToDevice))
      goto LABEL_33;
    if (CFEqual(v23, kColorSyncTransformGamutCheck))
    {
      v25 = 1734438260;
    }
    else
    {
      if (CFEqual(v23, (CFTypeRef)kColorSyncTransformPCSToSceneLinear)
        || CFEqual(v23, (CFTypeRef)kColorSyncTransformPCSToDisplayLinear)
        || CFEqual(v23, (CFTypeRef)kColorSyncTransformSceneLinearPCSToDevice))
      {
        goto LABEL_40;
      }
      v25 = 0;
    }
    if (v26)
      goto LABEL_58;
  }
LABEL_44:
  RuntimeInstance = createRuntimeInstance(v6, v25, profileSequence);
  if (RuntimeInstance)
  {
    v31 = ColorSyncCMMCreateAppleCMM();
    if (profileSequence
      && (v32 = v31, v33 = CFGetTypeID(profileSequence), v33 == CFArrayGetTypeID())
      && (!options || (v34 = CFGetTypeID(options), v34 == CFDictionaryGetTypeID()))
      && (v35 = (unsigned int (*)(_OWORD *, CFArrayRef, CFDictionaryRef))v32[6]) != 0
      && v35(RuntimeInstance, profileSequence, options))
    {
      *((_QWORD *)RuntimeInstance + 10) = CFRetain(v32);
      CFDictionarySetValue(*((CFMutableDictionaryRef *)RuntimeInstance + 14), kColorSyncTransformCreator, CFSTR("Apple CMM"));
      CFRelease(CFSTR("Apple CMM"));
      if (options)
        v36 = CFRetain(options);
      else
        v36 = 0;
      *((_QWORD *)RuntimeInstance + 16) = v36;
    }
    else
    {
      CFRelease(RuntimeInstance);
      return 0;
    }
  }
  return (ColorSyncTransformRef)RuntimeInstance;
}

_OWORD *createRuntimeInstance(unsigned int a1, unsigned int a2, const void *a3)
{
  uint64_t ColorSpacetNofComponents;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *Instance;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  CFStringRef SignatureFromFourCharCode;
  CFStringRef v14;
  CFStringRef v15;
  pthread_mutexattr_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  ColorSpacetNofComponents = getColorSpacetNofComponents(a1);
  v7 = getColorSpacetNofComponents(a2);
  v8 = 0;
  if (ColorSpacetNofComponents)
  {
    v9 = v7;
    if (v7)
    {
      if (ColorSyncTransformGetTypeID_predicate != -1)
        dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
      Instance = (_OWORD *)_CFRuntimeCreateInstance();
      v8 = Instance;
      if (Instance)
      {
        Instance[1] = 0u;
        Instance[7] = 0u;
        Instance[8] = 0u;
        Instance[5] = 0u;
        Instance[6] = 0u;
        Instance[3] = 0u;
        Instance[4] = 0u;
        Instance[2] = 0u;
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *((_QWORD *)v8 + 14) = Mutable;
        if (Mutable
          && (v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
              (*((_QWORD *)v8 + 17) = v12) != 0))
        {
          SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(a1);
          v14 = ColorSyncCreateSignatureFromFourCharCode(a2);
          v17.__sig = 0;
          *(_QWORD *)v17.__opaque = 0;
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v8 + 14), kColorSyncTransformSrcSpace, SignatureFromFourCharCode);
          if (a2 == 1734438260)
            v15 = kColorSyncTransformGamutCheck;
          else
            v15 = v14;
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v8 + 14), kColorSyncTransformDstSpace, v15);
          CFRelease(SignatureFromFourCharCode);
          CFRelease(v14);
          pthread_mutexattr_init(&v17);
          pthread_mutexattr_settype(&v17, 2);
          pthread_mutex_init((pthread_mutex_t *)(v8 + 1), &v17);
          pthread_mutexattr_destroy(&v17);
          *((_QWORD *)v8 + 11) = ColorSpacetNofComponents;
          *((_QWORD *)v8 + 12) = v9;
          if (a3)
            *((_QWORD *)v8 + 15) = CFRetain(a3);
        }
        else
        {
          CFRelease(v8);
          return 0;
        }
      }
    }
  }
  return v8;
}

uint64_t getColorSpacetNofComponents(int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v1 = 0;
  if (a1 > 1145261137)
  {
    if (a1 <= 1281450527)
    {
      if (a1 <= 1196573016)
      {
        v2 = 1145261138;
        v3 = 13;
        v7 = 1162038354;
        v8 = 14;
        v9 = a1 == 1178815570;
        v10 = 15;
        goto LABEL_24;
      }
      if (a1 != 1196573017)
      {
        if (a1 == 1212961568)
          return 3;
        v5 = 1213421088;
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 <= 1482250783)
      {
        if (a1 == 1281450528 || a1 == 1282766368)
          return 3;
        v5 = 1380401696;
        goto LABEL_35;
      }
      if (a1 <= 1501067551)
      {
        if (a1 == 1482250784)
          return 3;
        v5 = 1497588338;
LABEL_35:
        if (a1 != v5)
          return v1;
        return 3;
      }
      if (a1 == 1501067552)
        return 3;
      if (a1 != 1734438260)
        return v1;
    }
    return 1;
  }
  if (a1 <= 943934545)
  {
    if (a1 <= 893602897)
    {
      if (a1 == 843271250)
        return 2;
      if (a1 != 860048466)
      {
        v6 = 876825682;
        goto LABEL_39;
      }
      return 3;
    }
    v2 = 893602898;
    v3 = 5;
    v7 = 910380114;
    v8 = 6;
    v9 = a1 == 927157330;
    v10 = 7;
LABEL_24:
    if (!v9)
      v10 = 0;
    if (a1 == v7)
      v4 = v8;
    else
      v4 = v10;
    goto LABEL_29;
  }
  if (a1 <= 1111706705)
  {
    v2 = 943934546;
    v3 = 8;
    v7 = 960711762;
    v8 = 9;
    v9 = a1 == 1094929490;
    v10 = 10;
    goto LABEL_24;
  }
  if (a1 <= 1129142559)
  {
    v2 = 1111706706;
    v3 = 11;
    v4 = 12;
    if (a1 != 1128483922)
      v4 = 0;
LABEL_29:
    if (a1 == v2)
      return v3;
    else
      return v4;
  }
  if (a1 == 1129142560)
    return 3;
  v6 = 1129142603;
LABEL_39:
  if (a1 == v6)
    return 4;
  return v1;
}

CFTypeRef ColorSyncCMMCreateAppleCMM()
{
  uint64_t Instance;

  pthread_mutex_lock(&ColorSyncCMMCreateAppleCMM_mtx);
  if (!ColorSyncCMMCreateAppleCMM_appleCMM)
  {
    if (ColorSyncCMMGetTypeID_predicate[0] != -1)
      dispatch_once(ColorSyncCMMGetTypeID_predicate, &__block_literal_global_1201);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      *(_BYTE *)(Instance + 16) = 1;
      *(_QWORD *)(Instance + 24) = 0;
      *(_QWORD *)(Instance + 32) = CFSTR("Apple CMM");
      *(_QWORD *)(Instance + 17) = 0;
      *(_QWORD *)(Instance + 40) = CFSTR("com.apple.cmm");
      *(_QWORD *)(Instance + 48) = AppleCMMInitializeTransform;
      *(_QWORD *)(Instance + 56) = AppleCMMApplyTransform;
      *(_QWORD *)(Instance + 64) = AppleCMMCreateTransformProperty;
      *(_QWORD *)(Instance + 72) = AppleCMMInitializeLinkProfile;
    }
    ColorSyncCMMCreateAppleCMM_appleCMM = Instance;
  }
  pthread_mutex_unlock(&ColorSyncCMMCreateAppleCMM_mtx);
  return CFRetain((CFTypeRef)ColorSyncCMMCreateAppleCMM_appleCMM);
}

uint64_t AppleCMMValidateProfile(CMMProfileMaker *a1)
{
  _DWORD *Profile;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v8;

  v8 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v8);
  Profile = CMMProfileMaker::MakeProfile(a1, (const ColorSyncProfile *)&v8, 0);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)Profile + 16))();
  v4 = Profile[2] - 1;
  Profile[2] = v4;
  if (!v4)
    (*(void (**)(_DWORD *))(*(_QWORD *)Profile + 8))(Profile);
  if (v8)
  {
    v5 = *v8;
    if (*v8)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        free(v5);
        v5 = v6;
      }
      while (v6);
    }
  }
  CMMMemMgr::ReleaseMemList((void **)&v8);
  return v3;
}

void sub_18B3AF13C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  _DWORD *v10;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v10)
    {
      v12 = v10[2] - 1;
      v10[2] = v12;
      if (!v12)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    }
    if (a10)
    {
      v13 = *a10;
      if (*a10)
      {
        do
        {
          v14 = (_QWORD *)*v13;
          free(v13);
          v13 = v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    if (v10)
    {
      v15 = v10[2] - 1;
      v10[2] = v15;
      if (!v15)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    }
    if (a10)
    {
      v16 = *a10;
      if (*a10)
      {
        do
        {
          v17 = (_QWORD *)*v16;
          free(v16);
          v16 = v17;
        }
        while (v17);
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18B3AF118);
}

void sub_18B3AF1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

BOOL AppleCMMInitializeTransform(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3)
{
  uint64_t v6;
  CFDataRef v7;
  CFDataRef v8;
  __CFArray *MutableCopy;
  CFDictionaryRef pq_dict;
  CFDictionaryRef hlg_dict;
  CFDictionaryRef v12;
  __CFArray *v13;
  CFTypeID v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v19;
  CFTypeID v20;
  const void *Value;
  CFTypeID v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  char v27;
  int v28;
  CMMProfileInfoContainer *v30;
  int v31;
  CFTypeID v32;
  const void *v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  unsigned int v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  uint64_t v43;
  CMMConvNode *v44;
  CMMConvNode *ColorMatchSequence;
  int v46;
  int v47;
  _BOOL4 v48;
  int v49;
  unint64_t MaxNofChannels;
  uint64_t v52;
  CMMConvNode *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  const __CFString *v59;
  _DWORD *exception;
  void *v61;
  _QWORD v62[2];
  uint64_t v63;
  int v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  if (a1)
  {
    v6 = operator new();
    *(_QWORD *)v6 = 850045863;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_QWORD *)(v6 + 120) = 0;
    if (CMMBytesDeallocator(void)::predicate != -1)
      dispatch_once(&CMMBytesDeallocator(void)::predicate, &__block_literal_global_179_651);
    v7 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v6, 8, (CFAllocatorRef)CMMBytesDeallocator(void)::cmmAllocator);
    if (v7)
    {
      v8 = v7;
      ColorSyncTransformInternalSetCMMStorage(a1, v7);
      CFRelease(v8);
      if (ColorSyncOptionsDisplayReferredToneMappingRequested(a3))
      {
        MutableCopy = CFArrayCreateMutableCopy(0, 0, a2);
        if (MutableCopy)
        {
          pq_dict = create_pq_dict(kColorSyncTransformPCSToDevice);
          hlg_dict = create_pq_dict(kColorSyncTransformDeviceToPCS);
LABEL_12:
          v12 = hlg_dict;
          CFArrayInsertValueAtIndex(MutableCopy, 1, pq_dict);
          CFArrayInsertValueAtIndex(MutableCopy, 2, v12);
          CFRelease(pq_dict);
          CFRelease(v12);
        }
      }
      else
      {
        if (!ColorSyncOptionsSceneReferredToneMappingRequested(a3))
        {
          MutableCopy = 0;
          goto LABEL_14;
        }
        MutableCopy = CFArrayCreateMutableCopy(0, 0, a2);
        if (MutableCopy)
        {
          pq_dict = create_hlg_dict(kColorSyncTransformPCSToDevice);
          hlg_dict = create_hlg_dict(kColorSyncTransformDeviceToPCS);
          goto LABEL_12;
        }
      }
LABEL_14:
      if (MutableCopy)
        v13 = MutableCopy;
      else
        v13 = a2;
      if (!v13)
        goto LABEL_49;
      v14 = CFGetTypeID(v13);
      if (v14 != CFArrayGetTypeID())
        goto LABEL_49;
      Count = CFArrayGetCount(v13);
      if (!Count)
        goto LABEL_49;
      v16 = Count;
      for (i = 0; i != v16; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, i);
        if (ValueAtIndex && (v19 = ValueAtIndex, v20 = CFGetTypeID(ValueAtIndex), v20 == CFDictionaryGetTypeID()))
        {
          Value = CFDictionaryGetValue(v19, kColorSyncProfile);
          if (!Value)
            goto LABEL_49;
          v22 = CFGetTypeID(Value);
          if (ColorSyncProfileGetTypeID_predicate != -1)
            dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
          if (v22 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
            goto LABEL_49;
          v23 = CFDictionaryGetValue(v19, kColorSyncRenderingIntent);
          if (!v23)
            goto LABEL_49;
          v24 = v23;
          if (!CFEqual(v23, kColorSyncRenderingIntentPerceptual)
            && !CFEqual(v24, kColorSyncRenderingIntentRelative)
            && !CFEqual(v24, kColorSyncRenderingIntentSaturation)
            && !CFEqual(v24, kColorSyncRenderingIntentAbsolute)
            && !CFEqual(v24, kColorSyncRenderingIntentUseProfileHeader))
          {
            goto LABEL_49;
          }
          v25 = CFDictionaryGetValue(v19, kColorSyncTransformTag);
          if (!v25)
            goto LABEL_49;
          v26 = v25;
          if (!CFEqual(v25, kColorSyncTransformDeviceToPCS)
            && !CFEqual(v26, kColorSyncTransformPCSToPCS)
            && !CFEqual(v26, kColorSyncTransformPCSToDevice)
            && !CFEqual(v26, kColorSyncTransformDeviceToDevice)
            && !CFEqual(v26, (CFTypeRef)kColorSyncTransformSceneLinearToPCS)
            && !CFEqual(v26, (CFTypeRef)kColorSyncTransformDisplayLinearToPCS)
            && !CFEqual(v26, (CFTypeRef)kColorSyncTransformPCSToSceneLinear)
            && !CFEqual(v26, (CFTypeRef)kColorSyncTransformPCSToDisplayLinear)
            && !CFEqual(v26, (CFTypeRef)kColorSyncTransformSceneLinearPCSToDevice)
            && !CFEqual(v26, (CFTypeRef)kColorSyncTransformDeviceToSceneLinearPCS)
            && !CFEqual(v26, kColorSyncTransformGamutCheck))
          {
            goto LABEL_49;
          }
          v27 = 0;
        }
        else
        {
          v27 = 1;
        }
      }
      if ((v27 & 1) != 0)
        goto LABEL_49;
      v61 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v61);
      v30 = (CMMProfileInfoContainer *)CMMBase::NewInternal(0x38uLL, (_QWORD **)&v61);
      CMMProfileInfoContainer::CMMProfileInfoContainer(v30, v13, a3, (CMMMemMgr *)&v61);
      v31 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v30 + 1) + 8) + 76);
      if (!a3)
        goto LABEL_66;
      v32 = CFGetTypeID(a3);
      if (v32 == CFDictionaryGetTypeID())
      {
        if (CFDictionaryContainsKey(a3, kColorSyncConvertQuality))
        {
          v33 = CFDictionaryGetValue(a3, kColorSyncConvertQuality);
          if (!CFEqual(v33, kColorSyncBestQuality))
          {
            v34 = CFDictionaryGetValue(a3, kColorSyncConvertQuality);
            if (!CFEqual(v34, kColorSyncNormalQuality))
            {
              v35 = CFDictionaryGetValue(a3, kColorSyncConvertQuality);
              CFEqual(v35, kColorSyncDraftQuality);
            }
          }
        }
      }
      v36 = CFGetTypeID(a3);
      if (v36 == CFDictionaryGetTypeID())
      {
        v37 = 0x20000;
        if (CFDictionaryContainsKey(a3, kColorSyncConvertQuality))
        {
          v38 = CFDictionaryGetValue(a3, kColorSyncConvertQuality);
          CFEqual(v38, kColorSyncBestQuality);
          v39 = CFDictionaryGetValue(a3, kColorSyncConvertQuality);
          CFEqual(v39, kColorSyncNormalQuality);
          v40 = CFDictionaryGetValue(a3, kColorSyncConvertQuality);
          if (CFEqual(v40, kColorSyncDraftQuality))
            v37 = 196608;
          else
            v37 = 0x20000;
        }
        if (CFDictionaryContainsKey(a3, kColorSyncBlackPointCompensation))
        {
          v41 = CFDictionaryGetValue(a3, kColorSyncBlackPointCompensation);
          if (CFEqual(v41, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
            v37 |= 4u;
          v42 = CFDictionaryGetValue(a3, kColorSyncBlackPointCompensation);
          CFEqual(v42, (CFTypeRef)*MEMORY[0x1E0C9AE40]);
        }
      }
      else
      {
LABEL_66:
        v37 = 0x20000;
      }
      v43 = *((_QWORD *)v30 + 2);
      if (*(_DWORD *)(v43 - 24) != 4)
      {
        if (v43 == *((_QWORD *)v30 + 1))
        {
          exception = __cxa_allocate_exception(4uLL);
          *exception = -171;
        }
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        v65[0] = off_1E215DDA8;
        v65[1] = &v61;
        *(_QWORD *)(v6 + 96) = CMMProfileInfoContainer::GetMaxNofChannels(v30);
        *(_DWORD *)(v6 + 84) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v30 + 1) + 8)
                                                                         + 48))(*(_QWORD *)(*((_QWORD *)v30 + 1) + 8), *(unsigned int *)(*((_QWORD *)v30 + 1) + 16));
        *(_DWORD *)(v6 + 88) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v30 + 2)
                                                                                               - 32)
                                                                                 + 56))(*(_QWORD *)(*((_QWORD *)v30 + 2) - 32), *(unsigned int *)(*((_QWORD *)v30 + 2) - 24), 0);
        *(_DWORD *)(v6 + 112) = HIWORD(v37);
        v64 = 0;
        v63 = 0;
        ColorMatchSequence = ConversionManager::MakeColorMatchSequence((int)v65, v30, (uint64_t)&v63, a3);
        v46 = v63;
        v47 = HIDWORD(v63);
        *(_DWORD *)(v6 + 80) = v63;
        *(_BYTE *)(v6 + 116) = v64;
        *(_DWORD *)(v6 + 120) = v47;
        v48 = (v31 & 0x40000) != 0 || *(_DWORD *)(v6 + 112) == 1;
        if (!v46)
        {
          v49 = *(_DWORD *)(v6 + 112);
          if (v49 != 2 || v48)
          {
            v62[1] = 0;
            v62[0] = 1;
            ColorMatchSequence = ConversionManager::MakeNDimLutConversion((uint64_t)v65, ColorMatchSequence, (uint64_t)v62, *(_DWORD *)(v6 + 84), *(_DWORD *)(v6 + 88), *(_QWORD *)(v6 + 96), v49);
          }
        }
        if (ColorMatchSequence)
        {
          MaxNofChannels = ConversionManager::GetMaxNofChannels(ColorMatchSequence, v44);
          v52 = 0;
          *(_QWORD *)(v6 + 96) = MaxNofChannels;
          v53 = ColorMatchSequence;
          do
          {
            ++v52;
            v53 = (CMMConvNode *)*((_QWORD *)v53 + 2);
          }
          while (v53);
          *(_QWORD *)(v6 + 104) = v52;
          ConversionManager::~ConversionManager((ConversionManager *)v65);
LABEL_87:
          (*(void (**)(CMMProfileInfoContainer *))(*(_QWORD *)v30 + 8))(v30);
          *(_QWORD *)(v6 + 64) = CMMMemMgr::RetainMemList((CMMMemMgr *)&v61);
          *(_QWORD *)(v6 + 72) = ColorMatchSequence;
          *(_BYTE *)(v6 + 124) = 1;
          if (MutableCopy)
            CFRelease(MutableCopy);
          CMMMemMgr::ReleaseMemList(&v61);
          v57 = *(_DWORD *)(v6 + 80);
          if (v57 == 2)
          {
            v59 = CFSTR("DeviceTransform");
          }
          else if (v57 == 1)
          {
            v59 = CFSTR("NULLTransform");
          }
          else
          {
            if (v57)
              goto LABEL_103;
            *(_QWORD *)(a1 + 88) = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(v6 + 84));
            *(_QWORD *)(a1 + 96) = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(v6 + 88));
            v58 = *(_DWORD *)(v6 + 120);
            if ((v58 & 2) != 0)
            {
              v59 = CFSTR("RegularTransform.Parametric");
            }
            else
            {
              if ((v58 & 4) == 0)
              {
                if ((v58 & 8) != 0)
                {
                  if (*(_DWORD *)(v6 + 84) == 1 || *(_DWORD *)(v6 + 88) == 1)
                    v59 = CFSTR("NamedColorTarnsform");
                  else
                    v59 = CFSTR("RegularTransform.NDim");
                  goto LABEL_102;
                }
LABEL_103:
                v28 = 0;
                return v28 == 0;
              }
              v59 = CFSTR("RegularTransform.LUT");
            }
          }
LABEL_102:
          ColorSyncTransformInternalSetProperty((CFMutableDictionaryRef *)a1, CFSTR("com.apple.cmm.TransformType"), v59);
          goto LABEL_103;
        }
        v54 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(v6 + 84));
        v55 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(v6 + 88));
        if (v54 <= v55)
          v56 = v55;
        else
          v56 = v54;
        *(_QWORD *)(v6 + 96) = v56;
        *(_QWORD *)(v6 + 104) = 0;
        ConversionManager::~ConversionManager((ConversionManager *)v65);
      }
      ColorMatchSequence = 0;
      goto LABEL_87;
    }
    DoCMMDisposeStorage((pthread_mutex_t *)v6);
  }
LABEL_49:
  v28 = -50;
  return v28 == 0;
}

void sub_18B3AFA68(void *a1, int a2, uint64_t a3, _QWORD **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  const void *v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  va_list va;

  va_start(va, a8);
  ConversionManager::~ConversionManager((ConversionManager *)va);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      CFRelease(v8);
    if (a4)
    {
      v12 = *a4;
      if (*a4)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          free(v12);
          v12 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      CFRelease(v8);
    if (a4)
    {
      v14 = *a4;
      if (*a4)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          free(v14);
          v14 = v15;
        }
        while (v15);
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18B3AF940);
}

void sub_18B3AFB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void CMMMemMgr::CMMMemMgr(CMMMemMgr *this)
{
  char *v2;

  v2 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x1A8617E5uLL);
  *(_QWORD *)this = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 18) = 1;
    pthread_mutex_init((pthread_mutex_t *)(v2 + 8), 0);
  }
}

void CMMMemMgr::ReleaseMemList(void **this)
{
  char *v2;
  int v3;

  if (*this)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)*this + 8));
    v2 = (char *)*this;
    v3 = *((_DWORD *)*this + 18) - 1;
    *((_DWORD *)v2 + 18) = v3;
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
    if (!v3)
    {
      pthread_mutex_destroy((pthread_mutex_t *)((char *)*this + 8));
      free(*this);
      *this = 0;
    }
  }
}

const __CFDictionary *ColorSyncOptionsDisplayReferredToneMappingRequested(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  const __CFDictionary *v3;
  CFTypeID v4;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("com.apple.cmm.ApplyToneMaping"));
    if (result)
    {
      v1 = result;
      v2 = CFGetTypeID(result);
      if (v2 != CFDictionaryGetTypeID())
        return 0;
      result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("com.apple.cmm.ApplyDisplayReferredToneMapping"));
      if (!result)
        return result;
      v3 = result;
      v4 = CFGetTypeID(result);
      if (v4 == CFDictionaryGetTypeID())
      {
        if (CFDictionaryContainsKey(v3, CFSTR("com.apple.cmm.ApplyReferenceWhiteToneMapping")))
          return (const __CFDictionary *)1;
        else
          return (const __CFDictionary *)(CFDictionaryContainsKey(v3, CFSTR("com.apple.cmm.ApplyPQEETFToneMapping")) != 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void CMMProfileInfoContainer::~CMMProfileInfoContainer(CMMProfileInfoContainer *this)
{
  pthread_mutex_t **v1;

  CMMProfileInfoContainer::~CMMProfileInfoContainer(this);
  CMMBase::operator delete(v1);
}

{
  pthread_mutex_t ***v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  BOOL v7;
  pthread_mutex_t ***v8;

  *(_QWORD *)this = off_1E215F8B8;
  v2 = (pthread_mutex_t ***)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  while (v3 != v4)
  {
    v5 = *(_DWORD **)(v3 + 8);
    v6 = v5[2] - 1;
    v5[2] = v6;
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v4 = *((_QWORD *)this + 2);
    }
    v3 += 40;
  }
  v8 = v2;
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

uint64_t CMMMemMgr::RetainMemList(CMMMemMgr *this)
{
  uint64_t v2;

  if (!*(_QWORD *)this)
    return 0;
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)this + 8));
  v2 = *(_QWORD *)this;
  *(_DWORD *)(v2 + 72) = *(_DWORD *)(*(_QWORD *)this + 72) + 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  return *(_QWORD *)this;
}

void CMMMatrixDisplayProfile::~CMMMatrixDisplayProfile(CMMMatrixDisplayProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

unint64_t CMMProfileInfoContainer::GetMaxNofChannels(CMMProfileInfoContainer *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;

  v1 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (!v1)
    return 3;
  v3 = 0;
  v4 = 0;
  v5 = v1 / 40;
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  v7 = 3;
  do
  {
    v8 = *((_QWORD *)this + 1);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 2) - v8) >> 3) <= v4)
      std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
    v9 = *(_QWORD *)(v8 + v3 + 8);
    v10 = *(_DWORD *)(v9 + 48);
    switch(v10)
    {
      case 1296255029:
        v11 = 893602898;
        break;
      case 1296255030:
        v11 = 910380114;
        break;
      case 1296255031:
        v11 = 927157330;
        break;
      case 1296255032:
        v11 = 943934546;
        break;
      default:
        if (v10 == 1281450528)
          v11 = 1145856354;
        else
          v11 = *(_DWORD *)(v9 + 48);
        break;
    }
    v12 = *(_DWORD *)(v9 + 52);
    if (v12 == 1281450528)
      v13 = 1347182946;
    else
      v13 = v12;
    if (*(_DWORD *)(v8 + v3 + 16) != 4)
    {
      v14 = CMMGetChannelCountFromCMMSpace(v11);
      if (v7 <= v14)
        v7 = v14;
    }
    v15 = CMMGetChannelCountFromCMMSpace(v13);
    if (v7 <= v15)
      v7 = v15;
    ++v4;
    v3 += 40;
  }
  while (v6 != v4);
  return v7;
}

CMMConvNode *ConversionManager::MakeColorMatchSequence(int a1, _QWORD *a2, uint64_t a3, CFDictionaryRef theDict)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  const void **v12;
  BOOL v13;
  const void **v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  CMMProfile *v19;
  CMMMemMgr *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t PoppyIndex;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (***v36)(_QWORD);
  void (***v37)(_QWORD);
  void (**v38)(_QWORD);
  _DWORD *exception;
  uint64_t v42;
  BOOL v43;

  v5 = a2[1];
  v4 = a2[2];
  if (v4 == v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (theDict)
  {
    v43 = CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.ApplyToneMaping")) == 1;
    v5 = a2[1];
    v4 = a2[2];
  }
  else
  {
    v43 = 0;
  }
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3);
  v9 = v8 < 2 || v5 == v4 - 40;
  if (v9)
  {
    v10 = v5;
    goto LABEL_84;
  }
  v42 = a3;
  v11 = 0;
  while (1)
  {
    v12 = *(const void ***)(v5 + 8);
    if (!v12)
      goto LABEL_55;
    v13 = *(_BYTE *)(v5 + 24) && *(_BYTE *)(v5 + 64)
       || *(_BYTE *)(v5 + 25) && *(_BYTE *)(v5 + 65)
       || *(_BYTE *)(v5 + 24) && *(_BYTE *)(v5 + 65)
       || *(_BYTE *)(v5 + 25) && *(_BYTE *)(v5 + 64);
    v14 = *(const void ***)(v5 + 48);
    v15 = *(_DWORD *)(v5 + 16);
    v16 = *(unsigned int *)(v5 + 56);
    v17 = (*((uint64_t (**)(_QWORD, _QWORD))*v12 + 6))(*(_QWORD *)(v5 + 8), v15);
    v18 = (*((uint64_t (**)(const void **, uint64_t, _QWORD))*v14 + 7))(v14, v16, 0);
    if (v13)
    {
      v21 = 0;
      v22 = 0;
    }
    else
    {
      v21 = *(_DWORD *)(v5 + 20);
      v22 = *(_DWORD *)(v5 + 60);
    }
    v23 = *(unsigned __int8 *)(v5 + 34);
    v24 = *(unsigned __int8 *)(v5 + 74);
    if (v15 == 1)
    {
      v25 = v17 == v18 && (_DWORD)v16 == 2;
      if (v25 && v23 == v24)
      {
        if (v43)
          goto LABEL_55;
        if (!CMMProfileInfoContainer::ProfilesIdentical((CMMProfileInfoContainer *)v12, (CMMProfile *)v14, v19, v20))
        {
          PoppyIndex = ColorSyncProfileGetPoppyIndex(v12[2]);
          v28 = ColorSyncProfileGetPoppyIndex(v14[2]);
          if (PoppyIndex == -1 || PoppyIndex != v28)
            goto LABEL_55;
        }
        *(_QWORD *)(v5 + 48) = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v29 = *((_DWORD *)v12 + 2) - 1;
        *((_DWORD *)v12 + 2) = v29;
        if (!v29)
          (*((void (**)(const void **))*v12 + 1))(v12);
LABEL_52:
        v31 = *((_DWORD *)v14 + 2) - 1;
        *((_DWORD *)v14 + 2) = v31;
        if (!v31)
LABEL_53:
          (*((void (**)(const void **))*v14 + 1))(v14);
LABEL_54:
        v11 = 1;
        goto LABEL_55;
      }
    }
    if (v15 != 3 || (_DWORD)v16 != 2 || v21 != v22 || v23 != v24)
    {
      if (v15 != 1
        || (_DWORD)v16 != 3
        || v21 != v22
        || v23 != v24
        || !CMMProfileInfoContainer::ProfilesIdentical((CMMProfileInfoContainer *)v12, (CMMProfile *)v14, v19, v20))
      {
        goto LABEL_55;
      }
      *(_QWORD *)(v5 + 48) = 0;
      goto LABEL_52;
    }
    if (CMMProfileInfoContainer::ProfilesIdentical((CMMProfileInfoContainer *)v12, (CMMProfile *)v14, v19, v20))
    {
      *(_QWORD *)(v5 + 8) = 0;
      v14 = v12;
      v30 = *((_DWORD *)v12 + 2) - 1;
      *((_DWORD *)v12 + 2) = v30;
      if (!v30)
        goto LABEL_53;
      goto LABEL_54;
    }
LABEL_55:
    v5 += 40;
    v10 = a2[1];
    v4 = a2[2];
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v10) >> 3);
    if (v8 < 2 || v5 == v4 - 40)
    {
      if ((v11 & 1) == 0)
        goto LABEL_83;
      if (v10 == v4)
      {
        v5 = a2[2];
      }
      else
      {
        do
        {
          if (*(_QWORD *)(v10 + 8))
          {
            v10 += 40;
          }
          else
          {
            v33 = v10;
            if (v10 + 40 != v4)
            {
              v33 = v10;
              do
              {
                *(_QWORD *)(v33 + 8) = *(_QWORD *)(v33 + 48);
                v34 = *(_QWORD *)(v33 + 64);
                *(_QWORD *)(v33 + 16) = *(_QWORD *)(v33 + 56);
                *(_QWORD *)(v33 + 24) = v34;
                *(_DWORD *)(v33 + 32) = *(_DWORD *)(v33 + 72);
                *(_BYTE *)(v33 + 36) = *(_BYTE *)(v33 + 76);
                *(_WORD *)(v33 + 37) = *(_WORD *)(v33 + 77);
                v35 = v33 + 80;
                v33 += 40;
              }
              while (v35 != v4);
              v4 = a2[2];
            }
            if (v4 != v33)
            {
              v36 = (void (***)(_QWORD))(v4 - 40);
              v37 = (void (***)(_QWORD))(v4 - 40);
              do
              {
                v38 = *v37;
                v37 -= 5;
                (*v38)(v36);
                v9 = v36 == (void (***)(_QWORD))v33;
                v36 = v37;
              }
              while (!v9);
            }
            a2[2] = v33;
            v4 = v33;
          }
        }
        while (v10 != v4);
        v5 = a2[1];
      }
      v11 = 0;
      if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) < 2 || v5 == v4 - 40)
        break;
    }
  }
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3);
  v10 = v5;
LABEL_83:
  a3 = v42;
LABEL_84:
  a2[6] = v8;
  if (v4 != v10)
    return ConversionManager::MakeConversionSequence();
  if (a3)
  {
    *(_QWORD *)a3 = 1;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return 0;
}

void ColorSyncTransformInternalSetProperty(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFTypeID v6;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (ColorSyncTransformGetTypeID_predicate == -1)
    {
      if (!a3)
        return;
    }
    else
    {
      dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
      if (!a3)
        return;
    }
    if (a2)
    {
      if (v6 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
        CFDictionarySetValue(a1[14], a2, a3);
    }
  }
}

void ColorSyncTransformInternalSetCMMStorage(uint64_t a1, const void *a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v4 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 112), CFSTR("com.apple.cmm.cmmstorage"), a2);
    *(_QWORD *)(a1 + 104) = a2;
  }
}

const __CFDictionary *ColorSyncOptionsSceneReferredToneMappingRequested(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  CFTypeID v2;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("com.apple.cmm.ApplyToneMaping"));
    if (result)
    {
      v1 = result;
      v2 = CFGetTypeID(result);
      if (v2 == CFDictionaryGetTypeID())
        return (const __CFDictionary *)(CFDictionaryGetValue(v1, CFSTR("com.apple.cmm.ApplySceneReferredToneMapping")) == (const void *)*MEMORY[0x1E0C9AE50]);
      else
        return 0;
    }
  }
  return result;
}

void CMMMonoDisplayProfile::~CMMMonoDisplayProfile(CMMMonoDisplayProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

unint64_t ConversionManager::GetMaxNofChannels(ConversionManager *this, CMMConvNode *a2)
{
  unint64_t v3;
  unint64_t v4;
  _DWORD *exception;

  v3 = 0;
  do
  {
    v4 = (*(uint64_t (**)(ConversionManager *, CMMConvNode *))(*(_QWORD *)this + 176))(this, a2);
    if (v3 <= v4)
      v3 = v4;
    this = (ConversionManager *)*((_QWORD *)this + 2);
  }
  while (this);
  if (v3 >= 0xF)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return v3;
}

uint64_t CMMConvTRC::GetMaxNofChannels(CMMConvTRC *this)
{
  return (*((_DWORD *)this + 18) + 1);
}

uint64_t CMMConvMatrix::GetMaxNofChannels(CMMConvMatrix *this)
{
  return 3;
}

uint64_t get_poppy_index_from_profile(const ColorSyncProfile *a1)
{
  const __CFData *Tag;
  const __CFData *v3;
  const UInt8 *BytePtr;
  int v5;

  if (!ColorSyncProfileContainsTag(a1, CFSTR("aapy")))
    return -1;
  Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, CFSTR("aapy"));
  if (!Tag)
    return -1;
  v3 = Tag;
  if (CFDataGetLength(Tag) < 14)
    return -1;
  BytePtr = CFDataGetBytePtr(v3);
  if (*(_DWORD *)BytePtr != 1635017060)
    return -1;
  v5 = BytePtr[12];
  if ((v5 - 1) >= 0xA)
    LOBYTE(v5) = -1;
  return (char)v5;
}

uint64_t ColorSyncProfileGetPoppyIndex(const void *a1)
{
  CFTypeID v2;

  if (!a1)
    goto LABEL_6;
  v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
LABEL_6:
    __assert_rtn("ColorSyncProfileGetPoppyIndex", "ColorSyncPoppyProfile.c", 612, "profile != NULL && CFGetTypeID(profile) == ColorSyncProfileGetTypeID()");
  return get_poppy_index_from_profile((const ColorSyncProfile *)a1);
}

void CMMMatrixHDRDisplayProfile::~CMMMatrixHDRDisplayProfile(CMMMatrixHDRDisplayProfile *this)
{
  pthread_mutex_t **v1;

  CMMMatrixHDRDisplayProfile::~CMMMatrixHDRDisplayProfile(this);
  CMMBase::operator delete(v1);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_1E215FA90;
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 30);
  if (v5)
  {
    v6 = v5[1];
    if (v6)
    {
      v7 = v6 - 1;
      v5[1] = v7;
      if (!v7)
        (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)this + 31);
  if (v8)
  {
    v9 = v8[1];
    if (v9)
    {
      v10 = v9 - 1;
      v8[1] = v10;
      if (!v10)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  v11 = (_QWORD *)*((_QWORD *)this + 32);
  if (v11)
  {
    v12 = v11[1];
    if (v12)
    {
      v13 = v12 - 1;
      v11[1] = v13;
      if (!v13)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  CMMProfile::~CMMProfile(this);
}

BOOL CMMProfileInfoContainer::ProfilesIdentical(CMMProfileInfoContainer *this, CMMProfile *a2, CMMProfile *a3, CMMMemMgr *a4)
{
  int v4;
  int v6;
  uint64_t RelevantTags;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  __CFString *SignatureFromFourCharCode;
  const void *Tag;
  const void *v17;
  int v19;
  _BOOL8 v20;
  unint64_t v23;
  unint64_t v24;

  v4 = *((_DWORD *)this + 11);
  if (v4 == 1852662636)
    return 0;
  v6 = *((_DWORD *)a2 + 11);
  if (v6 == 1852662636 || v4 != v6)
    return 0;
  if (*((_DWORD *)this + 12) != *((_DWORD *)a2 + 12))
    return 0;
  if (*((_DWORD *)this + 13) != *((_DWORD *)a2 + 13))
    return 0;
  v23 = 0;
  v24 = 0;
  RelevantTags = CMMProfile::GetRelevantTags(this, &v24);
  v10 = CMMProfile::GetRelevantTags(a2, &v23);
  v11 = *(_QWORD *)(RelevantTags + 8);
  v12 = *(_QWORD *)(RelevantTags + 16);
  if (v12 - v11 != *(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8) || v24 != v23)
    return 0;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      SignatureFromFourCharCode = (__CFString *)ColorSyncCreateSignatureFromFourCharCode(*(_DWORD *)(v11 + 24 * v13 + 8));
      if (!ColorSyncProfileContainsTag(*((ColorSyncProfileRef *)a2 + 2), SignatureFromFourCharCode))
        break;
      Tag = ColorSyncProfileGetTag(*((_QWORD *)this + 2), SignatureFromFourCharCode);
      v17 = ColorSyncProfileGetTag(*((_QWORD *)a2 + 2), SignatureFromFourCharCode);
      if (!Tag || v17 == 0)
        break;
      v19 = CFEqual(Tag, v17);
      v20 = v19 != 0;
      CFRelease(SignatureFromFourCharCode);
      if (!v19)
        return v20;
      v13 = v14;
      v11 = *(_QWORD *)(RelevantTags + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(RelevantTags + 16) - v11) >> 3) <= v14++)
        return 1;
    }
    CFRelease(SignatureFromFourCharCode);
    return 0;
  }
  return 1;
}

uint64_t CMMProfile::GetRelevantTags(CMMProfile *this, unint64_t *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  CFIndex i;
  __CFString *ValueAtIndex;
  int FourCharCodeFromSignature;
  unsigned int v15;
  int v16;
  int v17;
  const __CFData *Tag;
  unint64_t Length;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t j;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *exception;

  *a2 = 0;
  v4 = ColorSyncProfileCopyTagSignatures(*((ColorSyncProfileRef *)this + 2));
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = v4;
  Count = CFArrayGetCount(v4);
  v7 = *((_QWORD *)this + 21);
  if (!v7)
  {
    v11 = CMMBase::NewInternal(0x38uLL, *((_QWORD ***)this + 3));
    *((_QWORD *)this + 21) = TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(v11, Count, *((_QWORD *)this + 3));
    if (!Count)
      goto LABEL_39;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  v8 = v7 + 8;
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) != Count)
    std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(v8, Count);
  if (Count)
  {
LABEL_8:
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v5, i);
      FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(ValueAtIndex);
      v15 = FourCharCodeFromSignature;
      if (FourCharCodeFromSignature <= 1667851119)
      {
        if (FourCharCodeFromSignature <= 1110589743)
        {
          v16 = -1093812784;
LABEL_20:
          if ((FourCharCodeFromSignature + v16) < 3)
            goto LABEL_31;
          continue;
        }
        if (FourCharCodeFromSignature <= 1649693250)
        {
          v16 = -1110589744;
          goto LABEL_20;
        }
        if (FourCharCodeFromSignature == 1649693251 || FourCharCodeFromSignature == 1649957210)
        {
LABEL_31:
          Tag = (const __CFData *)ColorSyncProfileGetTag(*((_QWORD *)this + 2), ValueAtIndex);
          if (Tag)
          {
            Length = CFDataGetLength(Tag);
            v20 = *a2;
            if (*a2 <= Length)
              v20 = Length;
            *a2 = v20;
            v21 = (_QWORD *)*((_QWORD *)this + 21);
            v22 = v21[1];
            v23 = v21[6];
            for (j = v21[2]; ; j = v21[2])
            {
              v25 = 0xAAAAAAAAAAAAAAABLL * ((j - v22) >> 3);
              if (v23 < v25)
                break;
              std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize((uint64_t)(v21 + 1), v25 + 10);
              v23 = v21[6];
              v22 = v21[1];
            }
            v21[6] = v23 + 1;
            v26 = v22 + 24 * v23;
            *(_QWORD *)(v26 + 8) = v15;
            *(_DWORD *)(v26 + 16) = 0;
          }
          continue;
        }
        v17 = 1651208308;
      }
      else if (FourCharCodeFromSignature <= 1886545199)
      {
        if (FourCharCodeFromSignature > 1733843289)
        {
          if (FourCharCodeFromSignature == 1733843290)
            goto LABEL_31;
          v17 = 1800688195;
        }
        else
        {
          if (FourCharCodeFromSignature == 1667851120)
            goto LABEL_31;
          v17 = 1733579331;
        }
      }
      else
      {
        if (FourCharCodeFromSignature <= 1918128706)
        {
          v16 = -1886545200;
          goto LABEL_20;
        }
        if (FourCharCodeFromSignature == 1918128707 || FourCharCodeFromSignature == 2004119668)
          goto LABEL_31;
        v17 = 1918392666;
      }
      if (FourCharCodeFromSignature == v17)
        goto LABEL_31;
    }
  }
LABEL_39:
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(*((_QWORD *)this + 21) + 8, *(_QWORD *)(*((_QWORD *)this + 21) + 48));
  v27 = (*(_DWORD *)a2 + 3) & 0xFFFFFFFC;
  if (v27 >= *(_DWORD *)a2)
    v28 = 0;
  else
    v28 = 4294967246;
  CMMThrowExceptionOnError(v28);
  *a2 = v27;
  CFRelease(v5);
  return *((_QWORD *)this + 21);
}

_QWORD *TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = off_1E215BE30;
  a1[5] = a3;
  *a1 = off_1E215FD58;
  a1[6] = 0;
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_18B3B0B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100]((pthread_mutex_t ****)va);
  _Unwind_Resume(a1);
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  pthread_mutex_t **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  pthread_mutex_t **v17;
  pthread_mutex_t **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  pthread_mutex_t **v22;
  pthread_mutex_t **v23;
  pthread_mutex_t **v24;
  pthread_mutex_t *v25;
  BOOL v26;
  pthread_mutex_t **v27;
  pthread_mutex_t **v28;
  pthread_mutex_t **v29;
  pthread_mutex_t *v30;
  uint64_t v31;

  v5 = *(pthread_mutex_t ***)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v27 = &v5[3 * a2];
      if ((pthread_mutex_t **)v4 != v27)
      {
        v28 = (pthread_mutex_t **)(v4 - 24);
        v29 = (pthread_mutex_t **)(v4 - 24);
        do
        {
          v30 = *v29;
          v29 -= 3;
          ((void (*)(pthread_mutex_t **))v30->__sig)(v28);
          v26 = v28 == v27;
          v28 = v29;
        }
        while (!v26);
      }
      *(_QWORD *)(a1 + 8) = v27;
    }
    return;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3) >= v7)
  {
    v31 = v4 + 24 * v7;
    do
    {
      *(_QWORD *)v4 = off_1E215BDD8;
      *(_QWORD *)(v4 + 8) = 0xFFFFFFFFLL;
      *(_DWORD *)(v4 + 16) = 0;
      v4 += 24;
    }
    while (v4 != v31);
    *(_QWORD *)(a1 + 8) = v31;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v10;
  v12 = CMMBase::NewInternal(24 * v11, *(_QWORD ***)(a1 + 32));
  v13 = &v12[3 * v6];
  v14 = &v12[3 * a2];
  v15 = v13;
  do
  {
    *v15 = off_1E215BDD8;
    v15[1] = 0xFFFFFFFFLL;
    *((_DWORD *)v15 + 4) = 0;
    v15 += 3;
  }
  while (v15 != v14);
  v16 = &v12[3 * v11];
  v17 = *(pthread_mutex_t ***)a1;
  v18 = *(pthread_mutex_t ***)(a1 + 8);
  if (v18 == *(pthread_mutex_t ***)a1)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v13[v19];
      *(v20 - 3) = off_1E215BDD8;
      *(v20 - 2) = v18[v19 - 2];
      *((_DWORD *)v20 - 2) = v18[v19 - 1];
      v19 -= 3;
    }
    while (&v18[v19] != v17);
    v21 = &v13[v19];
    v18 = *(pthread_mutex_t ***)a1;
    v22 = *(pthread_mutex_t ***)(a1 + 8);
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v16;
    if (v22 == v18)
    {
      v18 = v22;
      if (v22)
        goto LABEL_30;
      return;
    }
    v23 = v22 - 3;
    v24 = v22 - 3;
    do
    {
      v25 = *v24;
      v24 -= 3;
      ((void (*)(pthread_mutex_t **))v25->__sig)(v23);
      v26 = v23 == v18;
      v23 = v24;
    }
    while (!v26);
  }
  if (v18)
LABEL_30:
    CMMBase::operator delete(v18);
}

uint64_t CMMColorSpaceProfile::GetDstColorSpace(uint64_t a1, int a2, BOOL *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    v5 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v5 == 1281450528)
    {
      v6 = 0;
      v5 = 1347182946;
      goto LABEL_12;
    }
LABEL_9:
    if ((_DWORD)v5 != -1)
    {
      v6 = 0;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (a2 != 2)
  {
LABEL_11:
    v6 = 4294967246;
    v5 = 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  v5 = *(unsigned int *)(a1 + 48);
  switch((int)v5)
  {
    case 1296255029:
      v6 = 0;
      v5 = 893602898;
      break;
    case 1296255030:
      v6 = 0;
      v5 = 910380114;
      break;
    case 1296255031:
      v6 = 0;
      v5 = 927157330;
      break;
    case 1296255032:
      v6 = 0;
      v5 = 943934546;
      break;
    default:
      if ((_DWORD)v5 != 1281450528)
        goto LABEL_9;
      v6 = 0;
      v5 = 1145856354;
      break;
  }
LABEL_12:
  CMMThrowExceptionOnError(v6);
  if (a3)
    *a3 = v4 == 1;
  return v5;
}

uint64_t CMMConvGrayToRGB::GetMaxNofChannels(CMMConvGrayToRGB *this)
{
  return 3;
}

void CMMColorSpaceProfile::~CMMColorSpaceProfile(CMMColorSpaceProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

CMMMemMgr *ConversionManager::AddInvGrayConv(CMMMemMgr **this, CMMProfile *a2, char a3)
{
  unsigned __int8 *Tag;
  void *v7;
  int v8;
  uint64_t v9;
  CMMMemMgr *MatrixConv;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  CMMMemMgr *result;
  __int128 v15[3];
  uint64_t v16;
  uint64_t v17;
  void (**v18)(CMMMatrix *__hidden);
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  Tag = CMMProfile::GetTag((uint64_t)a2, 1800688195);
  if (Tag)
  else
    v7 = 0;
  if (*((_DWORD *)a2 + 13) == 1281450528)
    v8 = 1347182946;
  else
    v8 = *((_DWORD *)a2 + 13);
  if (v7)
    v9 = 0;
  else
    v9 = 4294967125;
  CMMThrowExceptionOnError(v9);
  v18 = off_1E215FED0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v27 = 1065353216;
  v23 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  if (v8 == 1482250784)
  {
    DWORD1(v19) = 0x20000;
    DWORD2(v21) = 1065353216;
  }
  else
  {
    if (v8 != 1347182946)
      goto LABEL_16;
    LODWORD(v19) = 0x10000;
    DWORD1(v21) = 1065353216;
  }
  MatrixConv = (CMMMemMgr *)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v18, this[1], this[3]);
  this[3] = MatrixConv;
  if (!this[2])
    this[2] = MatrixConv;
LABEL_16:
  v16 = 0;
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  LODWORD(v15[0]) = 1;
  v11 = (*(uint64_t (**)(void *, __int128 *, CMMMemMgr *, uint64_t *, float))(*(_QWORD *)v7 + 72))(v7, v15, this[1], &v17, 1.0);
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 40))(v7);
  v13 = CMMBase::NewInternal(0xB0uLL, (_QWORD **)this[1]);
  result = (CMMMemMgr *)CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v13, 0, v11, v12, v17, v15, (uint64_t)this[3], 1, a3 ^ 1u);
  this[3] = result;
  if (!this[2])
    this[2] = result;
  return result;
}

uint64_t ConversionManager::AddGrayConv(ConversionManager *this, CMMProfile *a2, int a3, const __CFDictionary *a4)
{
  unsigned __int8 *Tag;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  const __CFDictionary *v16;
  void (**v17)(CMMMatrix *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[3];
  uint64_t v27;

  Tag = CMMProfile::GetTag((uint64_t)a2, 1800688195);
  if (Tag)
  else
    v9 = 0;
  if (*((_DWORD *)a2 + 13) == 1281450528)
    v10 = 1347182946;
  else
    v10 = *((_DWORD *)a2 + 13);
  if (v9)
    v11 = 0;
  else
    v11 = 4294967125;
  CMMThrowExceptionOnError(v11);
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  LODWORD(v26[0]) = 1;
  v12 = (*(uint64_t (**)(void *, __int128 *, _QWORD, BOOL, float))(*(_QWORD *)v9 + 64))(v9, v26, *((_QWORD *)this + 1), v10 != 1482250784, 1.0);
  v13 = (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 40))(v9);
  v14 = CMMBase::NewInternal(0xA8uLL, *((_QWORD ***)this + 1));
  result = CMMConvTRC::CMMConvTRC((uint64_t)v14, 0, v12, v13, v26, *((_QWORD *)this + 3), 1, 1, 1.0, 1, a3 ^ 1u);
  *((_QWORD *)this + 3) = result;
  if (*((_QWORD *)this + 2))
  {
    if (!a3)
      goto LABEL_16;
  }
  else
  {
    *((_QWORD *)this + 2) = result;
    if (!a3)
      goto LABEL_16;
  }
  result = (uint64_t)ConversionManager::exrToneMappingGammaIsRequested(a4, v16);
  if ((_DWORD)result)
    result = (uint64_t)ConversionManager::AddEXRToneMapping(this, a4, 1);
LABEL_16:
  v17 = off_1E215FED0;
  v24 = 0;
  v23 = 0uLL;
  v25 = 1065353216;
  v22 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  if (v10 == 1347182946)
  {
    *(int32x2_t *)((char *)&v23 + 4) = vdup_n_s32(0x808080u);
    LODWORD(v18) = 0x10000;
    DWORD1(v20) = 1065353216;
    v24 = 0x3F0000003F000000;
  }
  else
  {
    if (v10 != 1482250784)
      return result;
    LODWORD(v18) = 31595;
    HIDWORD(v18) = 0x8000;
    DWORD2(v19) = 27030;
    DWORD1(v20) = 1064752592;
    LODWORD(v21) = 1065353216;
    HIDWORD(v21) = 1062415525;
  }
  result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v17, *((CMMMemMgr **)this + 1), *((CMMConvNode **)this + 3));
  *((_QWORD *)this + 3) = result;
  return result;
}

uint64_t ConversionManager::AddMatrixConv(uint64_t a1, const __CFDictionary *a2, uint64_t a3, int a4, int a5, float32x2_t *a6, ConversionManager *this)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  float v22;
  float v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  CFTypeID v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  CFTypeID v29;
  const void *v30;
  CFTypeID v31;
  unsigned int v32;
  float32x2_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  const void *Value;
  BOOL v38;
  _BOOL4 v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t v44;
  float v45;
  const __CFNumber *v47;
  int v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  int v54;
  float v55;
  int v56;
  uint64_t TRC;
  _QWORD *v58;
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  CFTypeID v61;
  const __CFDictionary *v62;
  const __CFDictionary *v63;
  CFTypeID v64;
  const __CFDictionary *v65;
  const __CFDictionary *v66;
  CFTypeID v67;
  const __CFNumber *v68;
  int v69;
  float v70;
  const __CFNumber *v71;
  float v72;
  const __CFNumber *v73;
  int v74;
  float v75;
  _QWORD *v76;
  uint64_t v77;
  float SDRToPQScale;
  const __CFNumber *v79;
  int32x4_t v80;
  const __CFNumber *v81;
  CFTypeID v82;
  int v83;
  int v84;
  __int128 v85;
  int v86;
  float v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  const __CFDictionary *v91;
  const __CFDictionary *v92;
  CFTypeID v93;
  const __CFDictionary *v94;
  const __CFDictionary *v95;
  CFTypeID v96;
  const __CFDictionary *v97;
  const __CFDictionary *v98;
  CFTypeID v99;
  const __CFDictionary *v100;
  const __CFDictionary *v101;
  CFTypeID v102;
  const __CFNumber *v103;
  int v104;
  float v105;
  _QWORD *MatrixConv;
  const void *FlexLumaScalingOptions;
  const void *FlexTRCOptions;
  uint64_t result;
  const __CFDictionary *v110;
  const __CFDictionary *v111;
  const __CFNumber *v112;
  const __CFNumber *v113;
  CFTypeID v114;
  unsigned __int8 v115;
  const __CFDictionary *ReferenceWhiteToneMappingOptions;
  float v117;
  float v118;
  float v119;
  const __CFDictionary *v120;
  CFTypeID v121;
  float v122;
  float v123;
  const __CFNumber *v124;
  const __CFNumber *v125;
  CFTypeID v126;
  unsigned __int8 v127;
  const __CFNumber *v128;
  CFTypeID v129;
  int v130;
  CMMConvInvMatrix *v131;
  float v132;
  float v133;
  _QWORD *v134;
  CMMConvRWToneMapping *v135;
  _QWORD *v136;
  uint64_t v137;
  const __CFDictionary *v138;
  float v139;
  float v140;
  float v141;
  const __CFDictionary *v142;
  CFTypeID v143;
  float v144;
  float v145;
  CMMConvInvMatrix *v146;
  float v147;
  float v148;
  _QWORD *v149;
  int32x4_t v150;
  CMMConvInvMatrix *v151;
  float v152;
  float v153;
  _QWORD *v154;
  int v155;
  CMMConvInvMatrix *v156;
  float v157;
  float v158;
  _QWORD *v159;
  CMMConvRWToneMapping *v160;
  uint64_t v161;
  CMMConvInvMatrix *v162;
  float v163;
  float v164;
  _QWORD *v165;
  CMMConvInvMatrix *v166;
  float v167;
  float v168;
  _QWORD *v169;
  CMMTable *v170;
  const __CFArray *v171;
  unint64_t v172;
  CMMMemMgr *v173;
  _QWORD *FlexTRCLookup;
  uint64_t v175;
  CMMPQCurveTag *v176;
  uint64_t v177;
  CMMPQCurveTag *v178;
  CMMPQCurveTag *v179;
  CMMTable *v180;
  const __CFArray *v181;
  CMMTable **v182;
  unint64_t v183;
  CMMMemMgr *v184;
  _QWORD *v185;
  uint64_t v186;
  CMMTable *v187;
  const __CFArray *v188;
  unint64_t v189;
  CMMMemMgr *v190;
  _QWORD *v191;
  uint64_t v192;
  CMMTable *v193;
  const __CFArray *v194;
  unint64_t v195;
  CMMMemMgr *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  const __CFNumber *v208;
  CFTypeID v209;
  unsigned __int8 v210;
  CMMConvInvMatrix *v211;
  float v212;
  float v213;
  _QWORD *v214;
  _DWORD *exception;
  unsigned int v217;
  uint64_t v218;
  char v219;
  const void *v220;
  uint64_t *v223;
  int v224;
  int v225[2];
  uint64_t v226;
  uint64_t *v227;
  void (**v229)(CMMMatrix *__hidden);
  _OWORD v230[6];
  uint64_t v231;
  __int128 v232[3];
  uint64_t v233;
  __int128 v234[3];
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  __int128 v238[4];
  void (**v239)(CMMMatrix *__hidden);
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __int128 valuePtr[5];
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  int v260;
  CMMXYZTag *v261[3];
  CMMXYZTag *v262[3];
  CMMPQCurveTag *v263;
  uint64_t v264;
  uint64_t v265;
  CMMXYZTag *v266[3];
  uint64_t v267;

  v8 = 0;
  v9 = 0;
  v267 = *MEMORY[0x1E0C80C00];
  memset(v238, 0, 56);
  v223 = (uint64_t *)(a1 + 24);
  LODWORD(v238[0]) = 1;
  v236 = 0;
  v237 = 0;
  v235 = 0;
  memset(v234, 0, sizeof(v234));
  LODWORD(v234[0]) = 1;
  v233 = 0;
  memset(v232, 0, sizeof(v232));
  LODWORD(v232[0]) = 1;
  v260 = 0;
  v258 = 0u;
  v259 = 0u;
  v257 = 0u;
  v220 = (const void *)*MEMORY[0x1E0C9AE50];
  v10 = 1.0;
  v219 = a4 ^ 1;
  v227 = (uint64_t *)(a1 + 16);
  *(_QWORD *)v225 = a6;
  v226 = a3 + 8;
  v11 = 1;
  v224 = a5;
  do
  {
    v12 = *(_DWORD *)(*(_QWORD *)(v226 + 8 * v8) + 52);
    if (v12 != 1212958496)
    {
      if (v12 == 1347493920)
      {
        if (a5 != 9)
        {
          v217 = v11;
          v218 = v9;
          if (a5 != 1)
            __assert_rtn("AddMatrixConv", "CMMConversionManager.cpp", 2049, "0");
          if (this)
          {
            v13 = (CFDictionaryGetValue(this, CFSTR("com.apple.cmm.SkipPQEETF")) == v220
                || CFDictionaryGetValue(this, CFSTR("com.apple.cmm.SkipToneMappingForBT2100")) == v220)
               && *(_BYTE *)(a1 + 51) == 0;
            Value = CFDictionaryGetValue(this, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100"));
            if (*(_BYTE *)(a1 + 51))
              v38 = Value == v220;
            else
              v38 = 1;
            if (v38)
              v39 = v13;
            else
              v39 = 1;
            if (v39)
              v40 = 100.0;
            else
              v40 = 10000.0;
            if (CFDictionaryGetValue(this, CFSTR("com.apple.cmm.PQEETF3DLut")) == v220)
              v41 = v13;
            else
              v41 = 1;
            if (!v41)
              v40 = 1.0;
            a6 = *(float32x2_t **)v225;
            if (!*(_QWORD *)v225)
            {
LABEL_92:
              if (this)
              {
                if (CFDictionaryContainsKey(this, CFSTR("com.apple.cmm.PQEOTFOpticalScale")) == 1)
                {
                  v47 = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("com.apple.cmm.PQEOTFOpticalScale"));
                  if (v47)
                  {
                    LODWORD(valuePtr[0]) = 0;
                    v48 = CFNumberGetValue(v47, kCFNumberFloatType, valuePtr);
                    v49 = *(float *)valuePtr;
                    if (!v48)
                      v49 = 0.0;
                    if (v49 != 0.0)
                      v40 = v49;
                  }
                }
              }
              v50 = ColorSyncOptionsDisplayReferredToneMappingRequested(this);
              v51 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
              if (*(_BYTE *)(a1 + 89) == 16)
              {
                v52 = ColorSyncOptionsGetFlexTRCOptions(0, this) != 0;
                if (*(_BYTE *)(a1 + 89) == 16)
                {
                  v53 = ColorSyncOptionsGetFlexLumaScalingOptions(0, this) != 0;
                  goto LABEL_104;
                }
              }
              else
              {
                v52 = 0;
              }
              v53 = 0;
LABEL_104:
              v54 = v51 | (v52 || v53);
              if (v54)
                v55 = 1.0;
              else
                v55 = v40;
              if (*(_BYTE *)(a1 + 48))
                v56 = 0;
              else
                v56 = (v54 | v39) ^ 1;
              if ((v50 & 1) == 0)
              {
                memset(valuePtr, 0, 56);
                LODWORD(valuePtr[0]) = 1;
                TRC = CMMRGBCurves::MakeTRC(a3, v55, (uint64_t)valuePtr, *(_QWORD *)(a1 + 8), v8);
                v58 = CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
                *(_QWORD *)(a1 + 24) = CMMConvPQEOTF::CMMConvPQEOTF(v58, v8, TRC, valuePtr, *(_QWORD *)(a1 + 24), v55);
              }
              if ((_DWORD)v8 == 2 && (v56 | v50 | v51 | v53 | v52) == 1)
              {
                if (v50)
                {
                  v59 = (const __CFDictionary *)CFDictionaryGetValue(this, CFSTR("com.apple.cmm.ApplyToneMaping"));
                  v60 = v59;
                  if (v59)
                  {
                    v61 = CFGetTypeID(v59);
                    if (v61 == CFDictionaryGetTypeID())
                    {
                      v62 = (const __CFDictionary *)CFDictionaryGetValue(v60, CFSTR("com.apple.cmm.ApplyDisplayReferredToneMapping"));
                      v63 = v62;
                      if (v62)
                      {
                        v64 = CFGetTypeID(v62);
                        if (v64 == CFDictionaryGetTypeID())
                        {
                          v65 = (const __CFDictionary *)CFDictionaryGetValue(v63, CFSTR("com.apple.cmm.ApplyPQEETFToneMapping"));
                          v66 = v65;
                          if (v65 && (v67 = CFGetTypeID(v65), v67 == CFDictionaryGetTypeID()))
                          {
                            v68 = (const __CFNumber *)CFDictionaryGetValue(v66, CFSTR("com.apple.cmm.PQEOTFOpticalScale"));
                            if (v68)
                            {
                              LODWORD(valuePtr[0]) = 0;
                              v69 = CFNumberGetValue(v68, kCFNumberFloatType, valuePtr);
                              v70 = *(float *)valuePtr;
                              if (!v69)
                                v70 = 0.0;
                              if (v70 != 0.0)
                                v55 = v70;
                            }
                            v71 = (const __CFNumber *)CFDictionaryGetValue(v66, CFSTR("com.apple.cmm.TargetDisplayWhite"));
                            if (v71)
                            {
                              LODWORD(valuePtr[0]) = 0;
                              if (CFNumberGetValue(v71, kCFNumberFloatType, valuePtr))
                              {
                                if (*(float *)valuePtr != 0.0)
                                  *(_DWORD *)(*(_QWORD *)v225 + 8) = valuePtr[0];
                              }
                            }
                            ConversionManager::AddPQEETFToneMapping((_QWORD *)a1, *(float **)v225, 0, v55);
                          }
                          else
                          {
                            v91 = (const __CFDictionary *)CFDictionaryGetValue(v63, CFSTR("com.apple.cmm.ApplyReferenceWhiteToneMapping"));
                            v92 = v91;
                            if (!v91 || (v93 = CFGetTypeID(v91), v93 != CFDictionaryGetTypeID()))
                            {
                              exception = __cxa_allocate_exception(4uLL);
                              *exception = -178;
                            }
                            ConversionManager::AddExtendedRangeReferenceWhiteToneMapping((ConversionManager *)a1, v92);
                          }
                          v10 = 1.0;
                          goto LABEL_190;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v10 = 1.0;
                  if ((v51 & 1) != 0)
                    goto LABEL_190;
                  if (v53)
                  {
                    v79 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), (const void *)kColorSyncPreGainMapCICP);
                    v81 = v79;
                    if (v79 && (v82 = CFGetTypeID(v79), v82 == CFNumberGetTypeID()))
                    {
                      LODWORD(valuePtr[0]) = 0;
                      v83 = CFNumberGetValue(v81, kCFNumberSInt32Type, valuePtr);
                      v84 = LOBYTE(valuePtr[0]);
                      if (v83 != 1)
                        v84 = 0;
                    }
                    else
                    {
                      v84 = 0;
                    }
                    if (*(unsigned __int8 *)(a1 + 88) == v84)
                      ConversionManager::AddFlexLuminanceToneMapping(a1, this, v80);
                    goto LABEL_190;
                  }
                  if (v52)
                  {
LABEL_190:
                    a5 = v224;
                    v9 = v218;
                    v11 = v217;
                    goto LABEL_191;
                  }
                  ConversionManager::AddPQEETFToneMapping((_QWORD *)a1, *(float **)v225, this, v55);
                }
              }
              if (*(_BYTE *)(a1 + 48))
              {
                if (*(_BYTE *)(a1 + 61))
                  v10 = 1.0;
                else
                  v10 = 2.03;
              }
              else if ((*(_BYTE *)(a1 + 51) == 0) & ~v13 | v56 & 1)
              {
                if ((v56 & (v55 != 10000.0)) != 0)
                  v10 = 10000.0 / v55;
                else
                  v10 = 1.0;
              }
              else
              {
                v10 = v55 / *(float *)(a1 + 64);
              }
              goto LABEL_190;
            }
          }
          else
          {
            v13 = 0;
            v39 = *(_BYTE *)(a1 + 51) != 0;
            if (*(_BYTE *)(a1 + 51))
              v40 = 100.0;
            else
              v40 = 10000.0;
            if (!a6)
              goto LABEL_92;
          }
          v44 = a6[2];
          if (v44)
          {
            v45 = (float)(int)bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v44 + 40) + 12)) * 0.000015259;
            if (v45 != v40 && v45 != 0.0)
              v40 = v45;
          }
          goto LABEL_92;
        }
        if (a6)
        {
          v32 = v8;
          if (!(_DWORD)v8)
          {
            v33 = a6[2];
            if (v33)
            {
              v34 = v11;
              v35 = (float)(int)bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v33 + 40) + 12)) * 0.000015259;
LABEL_132:
              if (v35 == 0.0)
                v72 = v35;
              else
                v72 = v35 / 100.0;
              if (this)
              {
                if (CFDictionaryContainsKey(this, CFSTR("com.apple.cmm.PQOOTFOpticalScale")) == 1)
                {
                  v73 = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("com.apple.cmm.PQOOTFOpticalScale"));
                  if (v73)
                  {
                    LODWORD(valuePtr[0]) = 0;
                    v74 = CFNumberGetValue(v73, kCFNumberFloatType, valuePtr);
                    v75 = *(float *)valuePtr;
                    if (!v74)
                      v75 = 0.0;
                    if (v75 != 0.0)
                      v72 = v75;
                  }
                }
              }
              v251 = 0u;
              v252 = 0u;
              v250 = 0u;
              memset(valuePtr, 0, sizeof(valuePtr));
              CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)valuePtr, 1885434465, (uint64_t)"para", 32, 0);
              *(_QWORD *)&valuePtr[0] = off_1E215D588;
              v76 = CMMParaCurveTag::MakeTRC((uint64_t)valuePtr, (uint64_t)v232, *(_QWORD ***)(a1 + 8), 0, v72);
              DWORD1(v232[0]) = 14;
              v236 = v76;
              v242 = 0u;
              v243 = 0u;
              v241 = 0u;
              *(_QWORD *)&v240 = LODWORD(v72) | 0x3F99999A00000000;
              v239 = off_1E215D9B8;
              v244 = LODWORD(v72);
              *((_QWORD *)&v240 + 1) = 0xC00000001;
              LOBYTE(v241) = 1;
              DWORD1(v241) = 1;
              LODWORD(v242) = 1075419546;
              DWORD1(v242) = powf(v72, 0.41667);
              v243 = 0uLL;
              *((_QWORD *)&v242 + 1) = 0;
              v237 = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)&v239, (uint64_t)v234, *(_QWORD ***)(a1 + 8));
              *(_QWORD *)&valuePtr[0] = off_1E215FD20;
              v77 = *(_QWORD *)&valuePtr[1];
              if (*(_QWORD *)&valuePtr[1])
                *(_QWORD *)(*(_QWORD *)&valuePtr[1] + 24) = *((_QWORD *)&valuePtr[1] + 1);
              if (*((_QWORD *)&valuePtr[1] + 1))
                *(_QWORD *)(*((_QWORD *)&valuePtr[1] + 1) + 16) = v77;
              if (LOBYTE(valuePtr[3]))
                CMMBase::operator delete(*((pthread_mutex_t ***)&valuePtr[2] + 1));
              v32 = 0;
LABEL_149:
              ConversionManager::AddTRCSequence(a1, v32, v227, v223, v232, (uint64_t *)&v236, v234, (uint64_t *)&v237);
              a5 = v224;
              v11 = v34;
              goto LABEL_191;
            }
LABEL_131:
            v34 = v11;
            v35 = 100.0;
            goto LABEL_132;
          }
        }
        else
        {
          if (!(_DWORD)v8)
            goto LABEL_131;
          v32 = v8;
        }
        v42 = v237[1];
        if (v42)
          v237[1] = v42 + 1;
        v34 = v11;
        v43 = v236[1];
        if (v43)
          v236[1] = v43 + 1;
        goto LABEL_149;
      }
      if (!*(_BYTE *)(a1 + 43) && !*(_BYTE *)(a1 + 44))
        goto LABEL_26;
      if (*(_BYTE *)(a1 + 57) && !*(_BYTE *)(a1 + 49))
      {
        v18 = v237;
        if (v237)
        {
          v17 = v9;
          v36 = v237[1];
          v19 = 0;
          if (v36)
            v237[1] = v36 + 1;
        }
        else
        {
          if (*(_BYTE *)(a1 + 47))
            SDRToPQScale = ColorSyncOptionsGetSDRToPQScale(this);
          else
            SDRToPQScale = 1.0;
          v86 = *(unsigned __int8 *)(a1 + 59);
          if (*(_BYTE *)(a1 + 59))
          {
            v17 = v9;
          }
          else
          {
            v17 = v9;
            if (*(_BYTE *)(a1 + 48))
              SDRToPQScale = 2.03;
          }
          memset((char *)&valuePtr[2] + 8, 0, 32);
          *(__int128 *)((char *)&valuePtr[1] + 8) = 0u;
          *((_QWORD *)&valuePtr[0] + 1) = LODWORD(SDRToPQScale) | 0x3F99999A00000000;
          *(_QWORD *)&valuePtr[0] = off_1E215D9B8;
          *((_QWORD *)&valuePtr[4] + 1) = LODWORD(SDRToPQScale);
          *(_QWORD *)&valuePtr[1] = 0xC00000001;
          BYTE8(valuePtr[1]) = 1;
          HIDWORD(valuePtr[1]) = 1;
          DWORD2(valuePtr[2]) = 1075419546;
          HIDWORD(valuePtr[2]) = powf(SDRToPQScale, 0.41667);
          memset(&valuePtr[3], 0, 24);
          if (v86)
          {
            DWORD1(valuePtr[1]) = 0;
            DWORD2(valuePtr[2]) = 0x40000000;
            v87 = fabsf(sqrtf(SDRToPQScale));
            if (SDRToPQScale == -INFINITY)
              v87 = INFINITY;
            *((float *)&valuePtr[2] + 3) = v87;
          }
          v18 = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)valuePtr, (uint64_t)v238, *(_QWORD ***)(a1 + 8));
          v19 = 0;
          v237 = v18;
        }
        goto LABEL_174;
      }
      if (*(_BYTE *)(a1 + 43) && *(_BYTE *)(a1 + 60) && !*(_BYTE *)(a1 + 49) && (a4 & 1) == 0)
      {
        if (v9)
        {
          v15 = *(_QWORD *)(v9 + 8);
          if (v15)
            *(_QWORD *)(v9 + 8) = v15 + 1;
          v16 = v11;
        }
        else
        {
          if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1)
            dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
          v9 = CMMsRGBGammaTable;
          v16 = *(unsigned int *)CMMsRGBGammaFloatLutInfo;
          v85 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 20);
          v257 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 4);
          v258 = v85;
          v259 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 36);
          v260 = *(_DWORD *)(CMMsRGBGammaFloatLutInfo + 52);
        }
        v19 = 0;
        v11 = v16;
        LODWORD(v238[0]) = v16;
        *(__int128 *)((char *)v238 + 4) = v257;
        *(__int128 *)((char *)&v238[1] + 4) = v258;
        *(__int128 *)((char *)&v238[2] + 4) = v259;
        DWORD1(v238[3]) = v260;
        v17 = v9;
        v18 = (_QWORD *)v9;
      }
      else
      {
LABEL_26:
        v17 = v9;
        v18 = (_QWORD *)CMMRGBCurves::MakeTRC(a3, 1.0, (uint64_t)v238, *(_QWORD *)(a1 + 8), v8);
        v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v226 + 8 * v8) + 40))(*(_QWORD *)(v226 + 8 * v8));
        if (*(_BYTE *)(a1 + 43))
          DWORD1(v238[0]) = 14;
        v20 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
        if (!*(_BYTE *)(a1 + 47) || (v20 & 1) != 0)
        {
          if ((a4 & v20) != 0)
            v10 = 0.203;
        }
        else
        {
          if (*(_BYTE *)(a1 + 56))
            v21 = 1;
          else
            v21 = a4;
          v22 = default_PQInvEOTFOpticalScale(this, v21);
          v23 = custom_PQInvEOTFOpticalScale(this, v22);
          if (!ColorSyncOptionsDisplayReferredToneMappingRequested(this))
            goto LABEL_52;
          v24 = (const __CFDictionary *)CFDictionaryGetValue(this, CFSTR("com.apple.cmm.ApplyToneMaping"));
          v25 = v24;
          if (!v24)
            goto LABEL_52;
          v26 = CFGetTypeID(v24);
          if (v26 == CFDictionaryGetTypeID()
            && (v27 = (const __CFDictionary *)CFDictionaryGetValue(v25, CFSTR("com.apple.cmm.ApplyDisplayReferredToneMapping")), (v28 = v27) != 0)&& (v29 = CFGetTypeID(v27), v29 == CFDictionaryGetTypeID())&& (v30 = CFDictionaryGetValue(v28, CFSTR("com.apple.cmm.ApplyReferenceWhiteToneMapping"))) != 0&& (v31 = CFGetTypeID(v30), v31 == CFDictionaryGetTypeID()))
          {
            v10 = 0.203;
          }
          else
          {
LABEL_52:
            if (v23 == 0.0)
            {
              if (a4)
              {
                if (*(float *)(a1 + 64) != 100.0)
                  v10 = v22 * ColorSyncOptionsGetSDRToPQScale(this);
              }
              else
              {
                v10 = ColorSyncOptionsGetSDRToPQScale(this);
              }
            }
          }
        }
      }
LABEL_174:
      v88 = CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
      *(_QWORD *)(a1 + 24) = CMMConvTRC::CMMConvTRC((uint64_t)v88, v8, (uint64_t)v18, v19, v238, *(_QWORD *)(a1 + 24), 3, 1, 1.0, 1, v219);
      if (v18)
      {
        v89 = v18[1];
        if (v89)
        {
          v90 = v89 - 1;
          v18[1] = v90;
          if (!v90)
            (*(void (**)(_QWORD *))(*v18 + 8))(v18);
        }
      }
      a5 = v224;
      v9 = v17;
      goto LABEL_191;
    }
    switch(a5)
    {
      case 13:
        ConversionManager::AddHLGDevToPCS(a1, v8, a3, a6, this);
        break;
      case 9:
        if (v8 != 2)
          goto LABEL_191;
        ConversionManager::AddHLGOOTF(a1, a6, this);
        break;
      case 1:
        ConversionManager::AddHLGDevToPCS(a1, v8, a3, a6, this);
        v10 = v14;
        break;
      default:
        __assert_rtn("AddMatrixConv", "CMMConversionManager.cpp", 2081, "0");
    }
    a5 = v224;
LABEL_191:
    if (!*v227)
      *v227 = *v223;
    ++v8;
    a6 = *(float32x2_t **)v225;
  }
  while (v8 != 3);
  if ((a4 & 1) != 0)
  {
    if (ConversionManager::exrToneMappingGammaIsRequested(this, a2))
    {
      ConversionManager::AddEXRToneMapping((ConversionManager *)a1, this, 3);
    }
    else if (*(_BYTE *)(a1 + 46))
    {
      if (ColorSyncOptionsDisplayReferredToneMappingRequested(this))
        ConversionManager::AddPQEETFToneMapping((_QWORD *)a1, *(float **)v225, this, 100.0);
    }
    else if (*(_BYTE *)(a1 + 47))
    {
      if (ColorSyncOptionsDisplayReferredToneMappingRequested(this))
      {
        v94 = (const __CFDictionary *)CFDictionaryGetValue(this, CFSTR("com.apple.cmm.ApplyToneMaping"));
        v95 = v94;
        if (v94)
        {
          v96 = CFGetTypeID(v94);
          if (v96 == CFDictionaryGetTypeID())
          {
            v97 = (const __CFDictionary *)CFDictionaryGetValue(v95, CFSTR("com.apple.cmm.ApplyDisplayReferredToneMapping"));
            v98 = v97;
            if (v97)
            {
              v99 = CFGetTypeID(v97);
              if (v99 == CFDictionaryGetTypeID())
              {
                v100 = (const __CFDictionary *)CFDictionaryGetValue(v98, CFSTR("com.apple.cmm.ApplyPQEETFToneMapping"));
                v101 = v100;
                if (v100)
                {
                  v102 = CFGetTypeID(v100);
                  if (v102 == CFDictionaryGetTypeID())
                  {
                    v103 = (const __CFNumber *)CFDictionaryGetValue(v101, CFSTR("com.apple.cmm.XRReflectanceScale"));
                    if (v103)
                    {
                      LODWORD(valuePtr[0]) = 0;
                      v104 = CFNumberGetValue(v103, kCFNumberFloatType, valuePtr);
                      v105 = *(float *)valuePtr;
                      if (!v104)
                        v105 = 0.0;
                      if (v105 != 0.0)
                        v10 = v105;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v231 = 0;
  memset(v230, 0, sizeof(v230));
  v229 = off_1E215FED0;
  CMMMatrix::InitializeMatrix((uint64_t)&v229, (uint64_t)v230, a2, v10);
  MatrixConv = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v229, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = MatrixConv;
  if (!*(_QWORD *)(a1 + 16))
    *v227 = (uint64_t)MatrixConv;
  if (*(_BYTE *)(a1 + 89) != 16)
  {
    result = (uint64_t)ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
    goto LABEL_236;
  }
  FlexLumaScalingOptions = ColorSyncOptionsGetFlexLumaScalingOptions(0, this);
  if (*(_BYTE *)(a1 + 89) != 16)
  {
    result = (uint64_t)ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
    if (FlexLumaScalingOptions)
    {
LABEL_242:
      v124 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), (const void *)kColorSyncPreGainMapCICP);
      v125 = v124;
      if (v124 && (v126 = CFGetTypeID(v124), v126 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr[0]) = 0;
        if (CFNumberGetValue(v125, kCFNumberSInt32Type, valuePtr) == 1)
          v127 = valuePtr[0];
        else
          v127 = 0;
      }
      else
      {
        v127 = 0;
      }
      result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), (const void *)kColorSyncPostGainMapCICP);
      v128 = (const __CFNumber *)result;
      if (result)
      {
        v129 = CFGetTypeID((CFTypeRef)result);
        result = CFNumberGetTypeID();
        if (v129 == result)
        {
          LODWORD(valuePtr[0]) = 0;
          result = CFNumberGetValue(v128, kCFNumberSInt32Type, valuePtr);
          if ((_DWORD)result == 1)
            LOBYTE(v128) = valuePtr[0];
          else
            LOBYTE(v128) = 0;
        }
        else
        {
          LOBYTE(v128) = 0;
        }
      }
      if (*(unsigned __int8 *)(a1 + 88) != v127)
      {
        memset(v262, 0, sizeof(v262));
        ConversionManager::ColorantsForPrimaries(a1, v262, v127);
        v256 = 0;
        v254 = 0u;
        v255 = 0u;
        v252 = 0u;
        v253 = 0u;
        v250 = 0u;
        v251 = 0u;
        memset(valuePtr, 0, sizeof(valuePtr));
        CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v262, (int (*)[3])dword_18B43BEE0);
        v146 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
        CMMConvInvMatrix::CMMConvInvMatrix(v146, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v147, v148);
        *v149 = off_1E215E840;
        *(_QWORD *)(a1 + 24) = v149;
        ConversionManager::AddFlexLuminanceToneMapping(a1, this, v150);
        v244 = 0;
        v248 = 0;
        v243 = 0u;
        v242 = 0u;
        v241 = 0u;
        v240 = 0u;
        v239 = off_1E215FED0;
        v245 = 0;
        v247 = 0;
        v246 = 0;
        CMMMatrix::InitializeMatrix((uint64_t)&v239, (uint64_t)&v240, v262, 1.0);
        result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v239, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
        *v223 = result;
      }
      if ((_BYTE)v128)
      {
        memset(v262, 0, sizeof(v262));
        ConversionManager::ColorantsForPrimaries(a1, v262, v128);
        v256 = 0;
        v254 = 0u;
        v255 = 0u;
        v252 = 0u;
        v253 = 0u;
        v250 = 0u;
        v251 = 0u;
        memset(valuePtr, 0, sizeof(valuePtr));
        CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v262, (int (*)[3])dword_18B43BEE0);
        v151 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
        CMMConvInvMatrix::CMMConvInvMatrix(v151, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v152, v153);
        *v154 = off_1E215E840;
        *(_QWORD *)(a1 + 24) = v154;
        v244 = 0;
        v248 = 0;
        v243 = 0u;
        v242 = 0u;
        v241 = 0u;
        v240 = 0u;
        v239 = off_1E215FED0;
        v245 = 0;
        v247 = 0;
        v246 = 0;
        CMMMatrix::InitializeMatrix((uint64_t)&v239, (uint64_t)&v240, v262, 1.0);
        result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v239, *(CMMMemMgr **)(a1 + 8), v151);
        *v223 = result;
      }
      return result;
    }
LABEL_236:
    if ((result & 1) == 0)
      return result;
    goto LABEL_237;
  }
  FlexTRCOptions = ColorSyncOptionsGetFlexTRCOptions(0, this);
  result = (uint64_t)ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
  if (FlexLumaScalingOptions)
    goto LABEL_242;
  if (FlexTRCOptions)
  {
    v110 = *(const __CFDictionary **)(a1 + 72);
    if (v110)
    {
      if (*(_BYTE *)(a1 + 89) == 16)
      {
        result = (uint64_t)ColorSyncOptionsGetFlexTRCOptions(0, this);
        if (result)
        {
          v111 = (const __CFDictionary *)result;
          v112 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), (const void *)kColorSyncPreGainMapCICP);
          v113 = v112;
          if (v112 && (v114 = CFGetTypeID(v112), v114 == CFNumberGetTypeID()))
          {
            LODWORD(valuePtr[0]) = 0;
            if (CFNumberGetValue(v113, kCFNumberSInt32Type, valuePtr) == 1)
              v115 = valuePtr[0];
            else
              v115 = 0;
          }
          else
          {
            v115 = 0;
          }
          memset(v266, 0, sizeof(v266));
          if (*(unsigned __int8 *)(a1 + 88) != v115)
          {
            ConversionManager::ColorantsForPrimaries(a1, v266, v115);
            v256 = 0;
            v254 = 0u;
            v255 = 0u;
            v252 = 0u;
            v253 = 0u;
            v250 = 0u;
            v251 = 0u;
            memset(valuePtr, 0, sizeof(valuePtr));
            CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v266, (int (*)[3])dword_18B43BEE0);
            v166 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
            CMMConvInvMatrix::CMMConvInvMatrix(v166, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v167, v168);
            *v169 = off_1E215E840;
            *(_QWORD *)(a1 + 24) = v169;
          }
          if (CFDictionaryContainsKey(v110, (const void *)kColorSyncMonoFlexGTCNodeTable) == 1
            && CFDictionaryContainsKey(v110, (const void *)kColorSyncMonoGainMapParams) == 1)
          {
            v170 = (CMMTable *)CFDictionaryGetValue(v110, (const void *)kColorSyncMonoFlexGTCNodeTable);
            v171 = (const __CFArray *)CFDictionaryGetValue(v110, (const void *)kColorSyncMonoGainMapParams);
            FlexTRCLookup = CMMTable::CreateFlexTRCLookup(v170, v171, v111, 0, *(CMMTable **)(a1 + 8), v172, v173);
            if (FlexTRCLookup)
              v175 = 0;
            else
              v175 = 4294967246;
            CMMThrowExceptionOnError(v175);
            if (FlexTRCLookup)
            {
              v176 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 8));
              CMMPQCurveTag::CMMPQCurveTag(v176, (uint64_t)FlexTRCLookup, 0);
              v177 = FlexTRCLookup[1];
              if (v177)
              {
                v178 = v176;
                v179 = v176;
                goto LABEL_313;
              }
              v178 = v176;
              v179 = v176;
              goto LABEL_317;
            }
            v185 = 0;
            FlexTRCLookup = 0;
            v191 = 0;
          }
          else
          {
            v180 = (CMMTable *)CFDictionaryGetValue(v110, (const void *)kColorSyncRedFlexGTCNodeTable);
            v181 = (const __CFArray *)CFDictionaryGetValue(v110, (const void *)kColorSyncRedGainMapParams);
            v182 = (CMMTable **)(a1 + 8);
            v185 = CMMTable::CreateFlexTRCLookup(v180, v181, v111, 0, *(CMMTable **)(a1 + 8), v183, v184);
            v186 = v185 ? 0 : 4294967246;
            CMMThrowExceptionOnError(v186);
            v187 = (CMMTable *)CFDictionaryGetValue(v110, (const void *)kColorSyncGrnFlexGTCNodeTable);
            v188 = (const __CFArray *)CFDictionaryGetValue(v110, (const void *)kColorSyncGrnGainMapParams);
            v191 = CMMTable::CreateFlexTRCLookup(v187, v188, v111, 0, *v182, v189, v190);
            v192 = v191 ? 0 : 4294967246;
            CMMThrowExceptionOnError(v192);
            v193 = (CMMTable *)CFDictionaryGetValue(v110, (const void *)kColorSyncBluFlexGTCNodeTable);
            v194 = (const __CFArray *)CFDictionaryGetValue(v110, (const void *)kColorSyncBluGainMapParams);
            FlexTRCLookup = CMMTable::CreateFlexTRCLookup(v193, v194, v111, 0, *v182, v195, v196);
            v197 = FlexTRCLookup ? 0 : 4294967246;
            CMMThrowExceptionOnError(v197);
          }
          v176 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 8));
          CMMPQCurveTag::CMMPQCurveTag(v176, (uint64_t)v185, 0);
          v178 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 8));
          CMMPQCurveTag::CMMPQCurveTag(v178, (uint64_t)v191, 0);
          v179 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 8));
          CMMPQCurveTag::CMMPQCurveTag(v179, (uint64_t)FlexTRCLookup, 0);
          if (v185)
          {
            v198 = v185[1];
            if (v198)
            {
              v199 = v198 - 1;
              v185[1] = v199;
              if (!v199)
                (*(void (**)(_QWORD *))(*v185 + 8))(v185);
            }
          }
          if (v191)
          {
            v200 = v191[1];
            if (v200)
            {
              v201 = v200 - 1;
              v191[1] = v201;
              if (!v201)
                (*(void (**)(_QWORD *))(*v191 + 8))(v191);
            }
          }
          if (FlexTRCLookup)
          {
            v177 = FlexTRCLookup[1];
            if (v177)
            {
LABEL_313:
              v202 = v177 - 1;
              FlexTRCLookup[1] = v202;
              if (!v202)
                (*(void (**)(_QWORD *))(*FlexTRCLookup + 8))(FlexTRCLookup);
            }
          }
LABEL_317:
          v203 = 0;
          v264 = 0;
          v265 = 0;
          v262[0] = (CMMXYZTag *)off_1E215C3F0;
          v262[1] = v176;
          v262[2] = v178;
          v263 = v179;
          do
          {
            memset(valuePtr, 0, 56);
            LODWORD(valuePtr[0]) = 1;
            v204 = (_QWORD *)CMMRGBCurves::MakeTRC((uint64_t)v262, 1.0, (uint64_t)valuePtr, *(_QWORD *)(a1 + 8), v203);
            v205 = CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
            *(_QWORD *)(a1 + 24) = CMMConvPQEOTF::CMMConvPQEOTF(v205, v203, (uint64_t)v204, valuePtr, *(_QWORD *)(a1 + 24), 1.0);
            if (v204)
            {
              v206 = v204[1];
              if (v206)
              {
                v207 = v206 - 1;
                v204[1] = v207;
                if (!v207)
                  (*(void (**)(_QWORD *))(*v204 + 8))(v204);
              }
            }
            ++v203;
          }
          while (v203 != 3);
          if (*(unsigned __int8 *)(a1 + 88) != v115)
          {
            memset((char *)valuePtr + 8, 0, 72);
            *(_QWORD *)&valuePtr[0] = off_1E215FED0;
            v250 = 0uLL;
            v251 = 0uLL;
            CMMMatrix::InitializeMatrix((uint64_t)valuePtr, (uint64_t)valuePtr + 8, v266, 1.0);
            *(_QWORD *)(a1 + 24) = CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
          }
          result = (uint64_t)CFDictionaryGetValue(v110, (const void *)kColorSyncPostGainMapCICP);
          v208 = (const __CFNumber *)result;
          if (result)
          {
            v209 = CFGetTypeID((CFTypeRef)result);
            result = CFNumberGetTypeID();
            if (v209 == result)
            {
              LODWORD(valuePtr[0]) = 0;
              result = CFNumberGetValue(v208, kCFNumberSInt32Type, valuePtr);
              v210 = valuePtr[0];
              if ((_DWORD)result != 1)
                v210 = 0;
              if (v210)
              {
                memset(v261, 0, sizeof(v261));
                ConversionManager::ColorantsForPrimaries(a1, v261, v210);
                v256 = 0;
                v254 = 0u;
                v255 = 0u;
                v252 = 0u;
                v253 = 0u;
                v250 = 0u;
                v251 = 0u;
                memset(valuePtr, 0, sizeof(valuePtr));
                CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v261, (int (*)[3])dword_18B43BEE0);
                v211 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
                CMMConvInvMatrix::CMMConvInvMatrix(v211, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v212, v213);
                *v214 = off_1E215E840;
                v136 = (_QWORD *)(a1 + 24);
                *(_QWORD *)(a1 + 24) = v214;
                v244 = 0;
                v248 = 0;
                v243 = 0u;
                v242 = 0u;
                v241 = 0u;
                v240 = 0u;
                v239 = off_1E215FED0;
                v245 = 0;
                v247 = 0;
                v246 = 0;
                CMMMatrix::InitializeMatrix((uint64_t)&v239, (uint64_t)&v240, v261, 1.0);
                result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v239, *(CMMMemMgr **)(a1 + 8), v211);
                goto LABEL_278;
              }
            }
          }
        }
      }
    }
    return result;
  }
  if (!(_DWORD)result)
    return result;
LABEL_237:
  if (*(_BYTE *)(a1 + 42))
  {
    ReferenceWhiteToneMappingOptions = (const __CFDictionary *)ColorSyncOptionsGetReferenceWhiteToneMappingOptions(this);
    v117 = 0.5;
    v118 = 1.0;
    v119 = 2.6667;
    if (ReferenceWhiteToneMappingOptions
      && (v120 = ReferenceWhiteToneMappingOptions,
          v121 = CFGetTypeID(ReferenceWhiteToneMappingOptions),
          v121 == CFDictionaryGetTypeID()))
    {
      v122 = float_from_dictionary_with_default(v120, CFSTR("com.apple.cmm.RWTMSourcePeak"), 1000.0);
      v123 = float_from_dictionary_with_default(v120, CFSTR("com.apple.cmm.RWTMSourceReferenceWhite"), 203.0);
      v118 = float_from_dictionary_with_default(v120, CFSTR("com.apple.cmm.RWTMEDRHeadroom"), 1.0);
      v117 = float_from_dictionary_with_default(v120, CFSTR("com.apple.cmm.RWTMTargetReferenceWhiteBase"), 0.5);
      v119 = float_from_dictionary_with_default(v120, CFSTR("com.apple.cmm.RWTMReferenceWhiteThreshold"), 2.6667);
    }
    else
    {
      v123 = 203.0;
      v122 = 1000.0;
    }
    v130 = *(unsigned __int8 *)(a1 + 51);
    memset(v262, 0, sizeof(v262));
    ConversionManager::ColorantsForPrimaries(a1, v262, 9);
    v256 = 0;
    v254 = 0u;
    v255 = 0u;
    v252 = 0u;
    v253 = 0u;
    v250 = 0u;
    v251 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v262, (int (*)[3])dword_18B43BEE0);
    v131 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
    CMMConvInvMatrix::CMMConvInvMatrix(v131, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v132, v133);
    *v134 = off_1E215E840;
    *(_QWORD *)(a1 + 24) = v134;
    if (!*(_QWORD *)(a1 + 16))
      *v227 = (uint64_t)v134;
    if (!v130)
      v118 = 1.0;
    v135 = (CMMConvRWToneMapping *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 8));
    CMMConvRWToneMapping::CMMConvRWToneMapping(v135, 1000.0, v122, v123, v118, v117, v119, *(CMMConvNode **)(a1 + 24));
    v136 = (_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v137;
    v244 = 0;
    v248 = 0;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = off_1E215FED0;
    v245 = 0;
    v247 = 0;
    v246 = 0;
    CMMMatrix::InitializeMatrix((uint64_t)&v239, (uint64_t)&v240, v262, 1.0);
    result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v239, *(CMMMemMgr **)(a1 + 8), v135);
  }
  else if (*(_BYTE *)(a1 + 41))
  {
    v138 = (const __CFDictionary *)ColorSyncOptionsGetReferenceWhiteToneMappingOptions(this);
    v139 = 0.5;
    v140 = 1.0;
    v141 = 2.6667;
    if (v138 && (v142 = v138, v143 = CFGetTypeID(v138), v143 == CFDictionaryGetTypeID()))
    {
      v144 = float_from_dictionary_with_default(v142, CFSTR("com.apple.cmm.RWTMSourcePeak"), 1000.0);
      v145 = float_from_dictionary_with_default(v142, CFSTR("com.apple.cmm.RWTMSourceReferenceWhite"), 203.0);
      v140 = float_from_dictionary_with_default(v142, CFSTR("com.apple.cmm.RWTMEDRHeadroom"), 1.0);
      v139 = float_from_dictionary_with_default(v142, CFSTR("com.apple.cmm.RWTMTargetReferenceWhiteBase"), 0.5);
      v141 = float_from_dictionary_with_default(v142, CFSTR("com.apple.cmm.RWTMReferenceWhiteThreshold"), 2.6667);
    }
    else
    {
      v145 = 203.0;
      v144 = 1000.0;
    }
    v155 = *(unsigned __int8 *)(a1 + 51);
    memset(v262, 0, sizeof(v262));
    ConversionManager::ColorantsForPrimaries(a1, v262, 9);
    v256 = 0;
    v254 = 0u;
    v255 = 0u;
    v252 = 0u;
    v253 = 0u;
    v250 = 0u;
    v251 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v262, (int (*)[3])dword_18B43BEE0);
    v156 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
    CMMConvInvMatrix::CMMConvInvMatrix(v156, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v157, v158);
    *v159 = off_1E215E840;
    *(_QWORD *)(a1 + 24) = v159;
    if (!*(_QWORD *)(a1 + 16))
      *v227 = (uint64_t)v159;
    if (!v155)
      v140 = 1.0;
    v160 = (CMMConvRWToneMapping *)CMMBase::NewInternal(0x60uLL, *(_QWORD ***)(a1 + 8));
    CMMConvRWToneMapping::CMMConvRWToneMapping(v160, 10000.0, v144, v145, v140, v139, v141, *(CMMConvNode **)(a1 + 24));
    v136 = (_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v161;
    v244 = 0;
    v248 = 0;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = off_1E215FED0;
    v245 = 0;
    v247 = 0;
    v246 = 0;
    CMMMatrix::InitializeMatrix((uint64_t)&v239, (uint64_t)&v240, v262, 1.0);
    result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v239, *(CMMMemMgr **)(a1 + 8), v160);
  }
  else
  {
    if (!a4)
      return result;
    memset(v262, 0, sizeof(v262));
    ConversionManager::ColorantsForPrimaries(a1, v262, 9);
    v256 = 0;
    v254 = 0u;
    v255 = 0u;
    v252 = 0u;
    v253 = 0u;
    v250 = 0u;
    v251 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v262, (int (*)[3])dword_18B43BEE0);
    v162 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
    CMMConvInvMatrix::CMMConvInvMatrix(v162, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v163, v164);
    *v165 = off_1E215E840;
    *(_QWORD *)(a1 + 24) = v165;
    if (!*(_QWORD *)(a1 + 16))
      *v227 = (uint64_t)v165;
    ConversionManager::AddExtendedRangeReferenceWhiteToneMapping((ConversionManager *)a1, this);
    v244 = 0;
    v248 = 0;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = off_1E215FED0;
    v245 = 0;
    v247 = 0;
    v246 = 0;
    CMMMatrix::InitializeMatrix((uint64_t)&v239, (uint64_t)&v240, v262, 1.0);
    v136 = (_QWORD *)(a1 + 24);
    result = (uint64_t)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v239, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
  }
LABEL_278:
  *v136 = result;
  return result;
}

void sub_18B3B30E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CMMRGBCurves::MakeTRC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (!a5)
  {
    result = (*(uint64_t (**)(float))(*(_QWORD *)v7 + 64))(a2);
LABEL_7:
    *(_QWORD *)(a1 + 32) = result;
    return result;
  }
  v8 = (_QWORD *)(a1 + 8 + 8 * a5);
  if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 56))(v7, *v8, *(_QWORD *)(a1 + 8 + 8 * (a5 - 1))))
  {
    result = (*(uint64_t (**)(float))(*(_QWORD *)*v8 + 64))(a2);
    goto LABEL_7;
  }
  result = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(result + 8);
  if (v10)
    *(_QWORD *)(result + 8) = v10 + 1;
  return result;
}

_QWORD *CMMMatrix::MakeMatrixConv(CMMMatrix *this, CMMMemMgr *a2, CMMConvNode *a3)
{
  char *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _QWORD *result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v4 = (char *)this + 8;
  v5 = *((_DWORD *)this + 3);
  v6 = *((_DWORD *)this + 4);
  v7 = v6 == 0;
  if (v5)
  {
    if (v6)
    {
      if (*((_DWORD *)this + 5)
        && *((_DWORD *)this + 7)
        && *((_DWORD *)this + 8)
        && *((_DWORD *)this + 9)
        && !*((_DWORD *)this + 20)
        && !*((_DWORD *)this + 21)
        && !*((_DWORD *)this + 22))
      {
        goto LABEL_75;
      }
      goto LABEL_12;
    }
  }
  else
  {
    if (v6)
    {
LABEL_12:
      v8 = *(_DWORD *)v4 == 0;
      goto LABEL_39;
    }
    if (!*((_DWORD *)this + 6)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 9)
      && !*((_DWORD *)this + 10)
      && !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22))
    {
      result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
      *((_DWORD *)result + 2) = 1;
      result[2] = 0;
      result[3] = a3;
      if (a3)
        *((_QWORD *)a3 + 2) = result;
      result[5] = 0x3FFFFF0000000000;
      *(_DWORD *)((char *)result + 33) = 0;
      *result = off_1E215C688;
      result[7] = off_1E215FED0;
      v36 = *(_OWORD *)v4;
      v37 = *((_OWORD *)v4 + 2);
      *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
      *((_OWORD *)result + 6) = v37;
      *((_OWORD *)result + 4) = v36;
      v38 = *((_OWORD *)v4 + 3);
      v39 = *((_OWORD *)v4 + 4);
      v40 = *((_OWORD *)v4 + 5);
      *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
      *((_OWORD *)result + 8) = v39;
      *((_OWORD *)result + 9) = v40;
      *((_OWORD *)result + 7) = v38;
      *((_WORD *)result + 24) = 1;
      *((_WORD *)result + 16) = 256;
      *(_WORD *)((char *)result + 35) = 0;
      v15 = off_1E215F188;
      goto LABEL_74;
    }
    if (!*((_DWORD *)this + 5)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 8)
      && !*((_DWORD *)this + 9)
      && !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22))
    {
      result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
      *((_DWORD *)result + 2) = 1;
      result[2] = 0;
      result[3] = a3;
      if (a3)
        *((_QWORD *)a3 + 2) = result;
      result[5] = 0x3F80000000000000;
      *(_DWORD *)((char *)result + 33) = 0;
      *result = off_1E215C688;
      result[7] = off_1E215FED0;
      v41 = *(_OWORD *)v4;
      v42 = *((_OWORD *)v4 + 2);
      *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
      *((_OWORD *)result + 6) = v42;
      *((_OWORD *)result + 4) = v41;
      v43 = *((_OWORD *)v4 + 3);
      v44 = *((_OWORD *)v4 + 4);
      v45 = *((_OWORD *)v4 + 5);
      *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
      *((_OWORD *)result + 8) = v44;
      *((_OWORD *)result + 9) = v45;
      *((_OWORD *)result + 7) = v43;
      *((_WORD *)result + 24) = 0;
      *((_WORD *)result + 16) = 256;
      *(_WORD *)((char *)result + 35) = 0;
      v15 = off_1E215E630;
      goto LABEL_74;
    }
  }
  if (*(_DWORD *)v4)
  {
    v8 = 0;
    v6 = 0;
  }
  else
  {
    if (*((_DWORD *)this + 5)
      || *((_DWORD *)this + 6)
      || *((_DWORD *)this + 7)
      || *((_DWORD *)this + 8)
      || *((_DWORD *)this + 9)
      || *((_DWORD *)this + 10)
      || *((_DWORD *)this + 20)
      || *((_DWORD *)this + 21))
    {
      v6 = 0;
      v7 = 1;
      v8 = 1;
      goto LABEL_39;
    }
    if (!*((_DWORD *)this + 22))
    {
      result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
      *((_DWORD *)result + 2) = 1;
      result[2] = 0;
      result[3] = a3;
      if (a3)
        *((_QWORD *)a3 + 2) = result;
      result[5] = 0x3F80000000000000;
      *(_DWORD *)((char *)result + 33) = 0;
      *result = off_1E215C688;
      result[7] = off_1E215FED0;
      v56 = *(_OWORD *)v4;
      v57 = *((_OWORD *)v4 + 2);
      *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
      *((_OWORD *)result + 6) = v57;
      *((_OWORD *)result + 4) = v56;
      v58 = *((_OWORD *)v4 + 3);
      v59 = *((_OWORD *)v4 + 4);
      v60 = *((_OWORD *)v4 + 5);
      *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
      *((_OWORD *)result + 8) = v59;
      *((_OWORD *)result + 9) = v60;
      *((_OWORD *)result + 7) = v58;
      *((_WORD *)result + 24) = 256;
      *((_WORD *)result + 16) = 256;
      *(_WORD *)((char *)result + 35) = 0;
      v15 = off_1E215F398;
      goto LABEL_74;
    }
    v6 = 0;
    v8 = 1;
  }
  v7 = 1;
LABEL_39:
  if (*(_QWORD *)((char *)this + 20)
    || *((_DWORD *)this + 7)
    || *((_DWORD *)this + 8)
    || *((_DWORD *)this + 9)
    || *((_DWORD *)this + 10)
    || *((_DWORD *)this + 20)
    || *((_DWORD *)this + 21)
    || *((_DWORD *)this + 22))
  {
    if (v7)
    {
      if (!*((_DWORD *)this + 6) && !*((_DWORD *)this + 7) && !*((_DWORD *)this + 9) && !*((_DWORD *)this + 21))
      {
        result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)result + 2) = 1;
        result[2] = 0;
        result[3] = a3;
        if (a3)
          *((_QWORD *)a3 + 2) = result;
        result[5] = 0x3FFFFF0000000000;
        *(_DWORD *)((char *)result + 33) = 0;
        *result = off_1E215C688;
        result[7] = off_1E215FED0;
        v26 = *(_OWORD *)v4;
        v27 = *((_OWORD *)v4 + 2);
        *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
        *((_OWORD *)result + 6) = v27;
        *((_OWORD *)result + 4) = v26;
        v28 = *((_OWORD *)v4 + 3);
        v29 = *((_OWORD *)v4 + 4);
        v30 = *((_OWORD *)v4 + 5);
        *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
        *((_OWORD *)result + 8) = v29;
        *((_OWORD *)result + 9) = v30;
        *((_OWORD *)result + 7) = v28;
        *((_WORD *)result + 24) = 0;
        *((_WORD *)result + 16) = 256;
        *(_WORD *)((char *)result + 35) = 0;
        v15 = off_1E215EE70;
        goto LABEL_74;
      }
      if (v8 && !*((_DWORD *)this + 7) && !*((_DWORD *)this + 8) && !*((_DWORD *)this + 20))
      {
        result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)result + 2) = 1;
        result[2] = 0;
        result[3] = a3;
        if (a3)
          *((_QWORD *)a3 + 2) = result;
        result[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)result + 33) = 0;
        *result = off_1E215C688;
        result[7] = off_1E215FED0;
        v21 = *(_OWORD *)v4;
        v22 = *((_OWORD *)v4 + 2);
        *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
        *((_OWORD *)result + 6) = v22;
        *((_OWORD *)result + 4) = v21;
        v23 = *((_OWORD *)v4 + 3);
        v24 = *((_OWORD *)v4 + 4);
        v25 = *((_OWORD *)v4 + 5);
        *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
        *((_OWORD *)result + 8) = v24;
        *((_OWORD *)result + 9) = v25;
        *((_OWORD *)result + 7) = v23;
        *((_WORD *)result + 24) = 0;
        *((_WORD *)result + 16) = 256;
        *(_WORD *)((char *)result + 35) = 0;
        v15 = off_1E215EF78;
        goto LABEL_74;
      }
    }
    if (!(v5 | v6 | *((_DWORD *)this + 5))
      && !*((_DWORD *)this + 6)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 8)
      && !*((_DWORD *)this + 9))
    {
      if (!*((_DWORD *)this + 10) && !*((_DWORD *)this + 20))
      {
        result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)result + 2) = 1;
        result[2] = 0;
        result[3] = a3;
        if (a3)
          *((_QWORD *)a3 + 2) = result;
        result[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)result + 33) = 0;
        *result = off_1E215C688;
        result[7] = off_1E215FED0;
        v31 = *(_OWORD *)v4;
        v32 = *((_OWORD *)v4 + 2);
        *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
        *((_OWORD *)result + 6) = v32;
        *((_OWORD *)result + 4) = v31;
        v33 = *((_OWORD *)v4 + 3);
        v34 = *((_OWORD *)v4 + 4);
        v35 = *((_OWORD *)v4 + 5);
        *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
        *((_OWORD *)result + 8) = v34;
        *((_OWORD *)result + 9) = v35;
        *((_OWORD *)result + 7) = v33;
        *((_WORD *)result + 24) = 1;
        *((_WORD *)result + 16) = 256;
        *(_WORD *)((char *)result + 35) = 0;
        v15 = off_1E215F080;
        goto LABEL_74;
      }
      if (!*((_DWORD *)this + 9)
        && !*((_DWORD *)this + 10)
        && !*((_DWORD *)this + 20)
        && !*((_DWORD *)this + 21)
        && !*((_DWORD *)this + 22))
      {
        result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
        *((_DWORD *)result + 2) = 1;
        result[2] = 0;
        result[3] = a3;
        if (a3)
          *((_QWORD *)a3 + 2) = result;
        result[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)result + 33) = 0;
        *result = off_1E215C688;
        result[7] = off_1E215FED0;
        v51 = *(_OWORD *)v4;
        v52 = *((_OWORD *)v4 + 2);
        *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
        *((_OWORD *)result + 6) = v52;
        *((_OWORD *)result + 4) = v51;
        v53 = *((_OWORD *)v4 + 3);
        v54 = *((_OWORD *)v4 + 4);
        v55 = *((_OWORD *)v4 + 5);
        *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
        *((_OWORD *)result + 8) = v54;
        *((_OWORD *)result + 9) = v55;
        *((_OWORD *)result + 7) = v53;
        *((_WORD *)result + 24) = 256;
        *((_WORD *)result + 16) = 256;
        *(_WORD *)((char *)result + 35) = 0;
        v15 = off_1E215F290;
        goto LABEL_74;
      }
    }
    if (!*((_DWORD *)this + 20) && !*((_DWORD *)this + 21) && !*((_DWORD *)this + 22))
    {
LABEL_75:
      result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
      *((_DWORD *)result + 2) = 1;
      result[2] = 0;
      result[3] = a3;
      if (a3)
        *((_QWORD *)a3 + 2) = result;
      result[5] = 0x3FFFFF0000000000;
      *(_DWORD *)((char *)result + 33) = 0;
      *result = off_1E215C688;
      result[7] = off_1E215FED0;
      v16 = *(_OWORD *)v4;
      v17 = *((_OWORD *)v4 + 2);
      *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
      *((_OWORD *)result + 6) = v17;
      *((_OWORD *)result + 4) = v16;
      v18 = *((_OWORD *)v4 + 3);
      v19 = *((_OWORD *)v4 + 4);
      v20 = *((_OWORD *)v4 + 5);
      *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
      *((_OWORD *)result + 8) = v19;
      *((_OWORD *)result + 9) = v20;
      *((_OWORD *)result + 7) = v18;
      *((_WORD *)result + 24) = 0;
      *((_WORD *)result + 16) = 256;
      *(_WORD *)((char *)result + 35) = 0;
      v15 = off_1E215E738;
      goto LABEL_74;
    }
    result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
    *((_DWORD *)result + 2) = 1;
    result[2] = 0;
    result[3] = a3;
    if (a3)
      *((_QWORD *)a3 + 2) = result;
    result[5] = 0x3F80000000000000;
    *(_DWORD *)((char *)result + 33) = 0;
    *result = off_1E215C688;
    result[7] = off_1E215FED0;
    v10 = *(_OWORD *)v4;
    v11 = *((_OWORD *)v4 + 2);
    *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
    *((_OWORD *)result + 6) = v11;
    *((_OWORD *)result + 4) = v10;
    v12 = *((_OWORD *)v4 + 3);
    v13 = *((_OWORD *)v4 + 4);
    v14 = *((_OWORD *)v4 + 5);
    *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
    *((_OWORD *)result + 8) = v13;
    *((_OWORD *)result + 9) = v14;
    *((_OWORD *)result + 7) = v12;
    *((_WORD *)result + 24) = 0;
    *((_WORD *)result + 16) = 256;
    *(_WORD *)((char *)result + 35) = 0;
    v15 = off_1E215ED68;
  }
  else
  {
    result = CMMBase::NewInternal(0xA8uLL, (_QWORD **)a2);
    *((_DWORD *)result + 2) = 1;
    result[2] = 0;
    result[3] = a3;
    if (a3)
      *((_QWORD *)a3 + 2) = result;
    result[5] = 0x3F80000000000000;
    *(_DWORD *)((char *)result + 33) = 0;
    *result = off_1E215C688;
    result[7] = off_1E215FED0;
    v46 = *(_OWORD *)v4;
    v47 = *((_OWORD *)v4 + 2);
    *((_OWORD *)result + 5) = *((_OWORD *)v4 + 1);
    *((_OWORD *)result + 6) = v47;
    *((_OWORD *)result + 4) = v46;
    v48 = *((_OWORD *)v4 + 3);
    v49 = *((_OWORD *)v4 + 4);
    v50 = *((_OWORD *)v4 + 5);
    *((_DWORD *)result + 40) = *((_DWORD *)v4 + 24);
    *((_OWORD *)result + 8) = v49;
    *((_OWORD *)result + 9) = v50;
    *((_OWORD *)result + 7) = v48;
    *((_WORD *)result + 24) = 0;
    *((_WORD *)result + 16) = 256;
    *(_WORD *)((char *)result + 35) = 0;
    v15 = off_1E215F4A0;
  }
LABEL_74:
  *result = v15;
  return result;
}

void ConversionManager::AddInvMatrixConv(uint64_t a1, CMMXYZTag *(*a2)[3], _QWORD *a3, int a4, int a5, uint64_t a6, const __CFDictionary *a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  float v16;
  float v17;
  uint64_t v18;
  float *v19;
  _QWORD *TRC;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  BOOL v31;
  float v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  CMMConvNode *v36;
  float v37;
  const __CFNumber *Value;
  int v39;
  float v40;
  CMMTable *InvertedTRC;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  float v52;
  CMMConvInvMatrix *v53;
  float v54;
  float v55;
  _QWORD *v56;
  _BOOL4 v57;
  BOOL v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unint64_t FlexTRCOptions;
  unint64_t FlexLumaScalingOptions;
  BOOL v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 v69;
  CMMTable *v70;
  CMMConvNode *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  const void *v77;
  char v78;
  char v79;
  _OWORD v82[2];
  int v83;
  _OWORD v84[7];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  void *v91[2];
  __int128 v92;
  uint64_t v93;
  int v94;
  __int16 v95;
  _OWORD v96[2];
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 valuePtr[5];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113[3];
  uint64_t v114;
  __int128 v115[3];
  uint64_t v116;
  CMMTable *v117;
  _QWORD *v118;
  __int128 v119[3];
  uint64_t v120;
  CMMConvNode *v121;
  CMMConvHLGOOTF *v122;
  int v123[3];
  uint64_t v124;

  v10 = 0;
  v11 = 0;
  v78 = 0;
  v124 = *MEMORY[0x1E0C80C00];
  v121 = 0;
  v122 = 0;
  memset(v123, 0, sizeof(v123));
  v120 = 0;
  v79 = a4 ^ 1;
  memset(v119, 0, sizeof(v119));
  LODWORD(v119[0]) = 1;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  memset(v115, 0, sizeof(v115));
  LODWORD(v115[0]) = 1;
  v114 = 0;
  memset(v113, 0, sizeof(v113));
  LODWORD(v113[0]) = 1;
  v77 = (const void *)*MEMORY[0x1E0C9AE50];
  do
  {
    v12 = &a3[v11];
    v14 = v12[1];
    v13 = v12 + 1;
    v15 = *(_DWORD *)(v14 + 52);
    if (v15 == 1212958496)
    {
      if (a5 == 14)
      {
        ConversionManager::AddHLGPCSToDev(a1, v11, &v122, &v121, a3, 14, (float32x2_t *)a6, a7);
      }
      else if (a5 != 10)
      {
        if (a5 != 2)
          __assert_rtn("AddInvMatrixConv", "CMMConversionManager.cpp", 2608, "0");
        ConversionManager::AddHLGPCSToDev(a1, v11, &v122, &v121, a3, 2, (float32x2_t *)a6, a7);
      }
      goto LABEL_74;
    }
    if (v15 != 1347493920)
    {
      *(_QWORD *)&v98 = 0;
      if (*(_BYTE *)(a1 + 43) || *(_BYTE *)(a1 + 44))
      {
        if (*(_BYTE *)(a1 + 58) && !*(_BYTE *)(a1 + 49))
        {
          TRC = v118;
          if (v118)
            goto LABEL_95;
          v31 = *(_BYTE *)(a1 + 52) != 0;
          if (*(_BYTE *)(a1 + 52))
            v32 = 0.0049261;
          else
            v32 = 1.0;
          if (*(_BYTE *)(a1 + 53))
          {
            if (CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::predicate[0] != -1)
              dispatch_once(CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::predicate, &__block_literal_global_183_595);
            if (a7 && CFDictionaryContainsKey(a7, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == 1)
            {
              v33 = CFDictionaryGetValue(a7, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == v77;
              CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::enabled = v33;
            }
            else
            {
              v33 = CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::enabled;
            }
            memset((char *)valuePtr + 8, 0, 64);
            *((float *)valuePtr + 2) = v32;
            *(_QWORD *)&valuePtr[0] = off_1E215E100;
            if (!v33)
            {
              if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1)
                dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
              valuePtr[1] = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
              valuePtr[2] = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
              valuePtr[3] = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
              *(_QWORD *)&valuePtr[4] = *(_QWORD *)(CMMInvsRGBGammaFloatLutInfo + 48);
              goto LABEL_113;
            }
          }
          else
          {
            valuePtr[1] = 0uLL;
            *((_QWORD *)&valuePtr[0] + 1) = LODWORD(v32);
            *(_QWORD *)&valuePtr[0] = off_1E215E100;
          }
          *(_QWORD *)&valuePtr[1] = 0xD00000001;
          HIDWORD(valuePtr[1]) = 1;
          *(_QWORD *)&valuePtr[2] = 0;
          BYTE8(valuePtr[1]) = 1;
          DWORD2(valuePtr[2]) = 1054168405;
          *((float *)&valuePtr[2] + 3) = v32;
          memset(&valuePtr[3], 0, 24);
LABEL_113:
          TRC = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)valuePtr, (uint64_t)v119, *(_QWORD ***)(a1 + 8));
          v21 = 0;
          v78 |= v31;
          v118 = TRC;
          goto LABEL_23;
        }
        if (*(_BYTE *)(a1 + 43)
          && *(_BYTE *)(a1 + 61)
          && !*(_BYTE *)(a1 + 49)
          && (*(_BYTE *)(a1 + 52) || *(_BYTE *)(a1 + 53)))
        {
          TRC = v118;
          if (v118)
          {
LABEL_95:
            v50 = TRC[1];
            v21 = 0;
            if (v50)
              TRC[1] = v50 + 1;
            goto LABEL_23;
          }
          v51 = *(unsigned __int8 *)(a1 + 53);
          v31 = *(_BYTE *)(a1 + 52) != 0;
          if (*(_BYTE *)(a1 + 52))
            v52 = 0.0049261;
          else
            v52 = 1.0;
          memset((char *)valuePtr + 8, 0, 64);
          *((float *)valuePtr + 2) = v52;
          *(_QWORD *)&valuePtr[0] = off_1E215E100;
          if (v51)
          {
            if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1)
              dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
            valuePtr[1] = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
            valuePtr[2] = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
            valuePtr[3] = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
            *(_QWORD *)&valuePtr[4] = *(_QWORD *)(CMMInvsRGBGammaFloatLutInfo + 48);
          }
          else
          {
            *(_QWORD *)&valuePtr[1] = 0xD00000001;
            BYTE8(valuePtr[1]) = 1;
            HIDWORD(valuePtr[1]) = 1;
            DWORD2(valuePtr[2]) = 1054168405;
            *((float *)&valuePtr[2] + 3) = v52;
            memset(&valuePtr[3], 0, 24);
          }
          goto LABEL_113;
        }
      }
      TRC = (_QWORD *)CMMRGBCurves::MakeInvertedTRC(a3, (uint64_t)v119, *(_QWORD *)(a1 + 8), v11, &v98, 1.0);
      v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
      if (*(_BYTE *)(a1 + 43))
        DWORD1(v119[0]) = 15;
LABEL_23:
      v19 = (float *)CMMBase::NewInternal(0xB0uLL, *(_QWORD ***)(a1 + 8));
      v22 = v21;
      v23 = (_QWORD *)v98;
      CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v19, v11, (uint64_t)TRC, v22, v98, v119, v10, 3, v79);
      if (TRC && (v24 = TRC[1]) != 0 && (v25 = v24 - 1, (TRC[1] = v25) == 0))
      {
        (*(void (**)(_QWORD *))(*TRC + 8))(TRC);
        if (v23)
          goto LABEL_27;
      }
      else if (v23)
      {
LABEL_27:
        v26 = v23[1];
        if (v26)
        {
          v27 = v26 - 1;
          v23[1] = v27;
          if (!v27)
            (*(void (**)(_QWORD *))(*v23 + 8))(v23);
        }
      }
LABEL_51:
      if (v122)
        v36 = v122;
      else
        v36 = (CMMConvNode *)v19;
      v121 = (CMMConvNode *)v19;
      v122 = v36;
      goto LABEL_78;
    }
    if (a5 == 10)
    {
      if (a6)
      {
        v28 = v11;
        if (!(_DWORD)v11)
        {
          v29 = *(_QWORD *)(a6 + 16);
          if (v29)
          {
            v30 = (float)(int)bswap32(*(_DWORD *)(*(_QWORD *)(v29 + 40) + 12)) * 0.000015259;
LABEL_56:
            if (v30 == 0.0)
              v37 = v30;
            else
              v37 = v30 / 100.0;
            if (a7)
            {
              if (CFDictionaryContainsKey(a7, CFSTR("com.apple.cmm.PQInvOOTFOpticalScale")) == 1)
              {
                Value = (const __CFNumber *)CFDictionaryGetValue(a7, CFSTR("com.apple.cmm.PQInvOOTFOpticalScale"));
                if (Value)
                {
                  LODWORD(valuePtr[0]) = 0;
                  v39 = CFNumberGetValue(Value, kCFNumberFloatType, valuePtr);
                  v40 = *(float *)valuePtr;
                  if (!v39)
                    v40 = 0.0;
                  if (v40 != 0.0)
                    v37 = v40;
                }
              }
            }
            *((_QWORD *)&v99 + 1) = 0x100000001;
            *((_QWORD *)&v98 + 1) = LODWORD(v37);
            *(_QWORD *)&v98 = off_1E215E100;
            *(_QWORD *)&v99 = 0xD00000001;
            *(_QWORD *)&v100 = 0;
            DWORD2(v100) = 1054168405;
            *((float *)&v100 + 3) = v37;
            *(_QWORD *)&v102 = 0;
            v101 = 0uLL;
            v118 = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)&v98, (uint64_t)v115, *(_QWORD ***)(a1 + 8));
            v107 = 0u;
            v108 = 0u;
            v106 = 0u;
            memset(valuePtr, 0, sizeof(valuePtr));
            CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)valuePtr, 1885434465, (uint64_t)"para", 32, 0);
            *(_QWORD *)&valuePtr[0] = off_1E215D588;
            InvertedTRC = CMMParaCurveTag::MakeInvertedTRC();
            DWORD1(v113[0]) = 15;
            v117 = InvertedTRC;
            *(_QWORD *)&valuePtr[0] = off_1E215FD20;
            v42 = *(_QWORD *)&valuePtr[1];
            if (*(_QWORD *)&valuePtr[1])
              *(_QWORD *)(*(_QWORD *)&valuePtr[1] + 24) = *((_QWORD *)&valuePtr[1] + 1);
            if (*((_QWORD *)&valuePtr[1] + 1))
              *(_QWORD *)(*((_QWORD *)&valuePtr[1] + 1) + 16) = v42;
            if (LOBYTE(valuePtr[3]))
              CMMBase::operator delete(*((pthread_mutex_t ***)&valuePtr[2] + 1));
            v28 = 0;
LABEL_73:
            ConversionManager::AddTRCSequence(a1, v28, (uint64_t *)&v122, (uint64_t *)&v121, v115, (uint64_t *)&v118, v113, (uint64_t *)&v117);
            goto LABEL_74;
          }
LABEL_55:
          v30 = 100.0;
          goto LABEL_56;
        }
      }
      else
      {
        v28 = v11;
        if (!(_DWORD)v11)
          goto LABEL_55;
      }
      v34 = v118[1];
      if (v34)
        v118[1] = v34 + 1;
      v35 = *((_QWORD *)v117 + 1);
      if (v35)
        *((_QWORD *)v117 + 1) = v35 + 1;
      goto LABEL_73;
    }
    if (a5 != 2)
      __assert_rtn("AddInvMatrixConv", "CMMConversionManager.cpp", 2595, "0");
    if ((ColorSyncOptionsDisplayReferredToneMappingRequested(a7) & 1) == 0)
    {
      v16 = default_PQInvEOTFOpticalScale(a7, *(unsigned __int8 *)(a1 + 56));
      v17 = custom_PQInvEOTFOpticalScale(a7, v16);
      if (v17 != 0.0)
        v16 = v17;
      memset(valuePtr, 0, 56);
      LODWORD(valuePtr[0]) = 1;
      *(_QWORD *)&v98 = 0;
      v18 = CMMRGBCurves::MakeInvertedTRC(a3, (uint64_t)valuePtr, *(_QWORD *)(a1 + 8), v11, &v98, v16);
      v19 = (float *)CMMBase::NewInternal(0xB8uLL, *(_QWORD ***)(a1 + 8));
      CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v19, v11, v18, 0, v98, valuePtr, v10, 3, 1);
      *(_QWORD *)v19 = off_1E215D8A0;
      v19[44] = v16;
      goto LABEL_51;
    }
LABEL_74:
    v19 = (float *)v121;
    if (v122)
      v36 = v122;
    else
      v36 = v121;
    v122 = v36;
    if (!v121)
    {
      v10 = 0;
      v49 = 1;
      goto LABEL_90;
    }
LABEL_78:
    if (v43)
    {
      v44 = CMMTable::FloatData(*(_QWORD *)(v43[8] + 16), *(_QWORD *)(v43[8] + 24));
      v45 = 4098;
      do
      {
        v46 = v45 - 1;
        if (v45 == 1)
        {
          v48 = 0x1000000;
          goto LABEL_87;
        }
        v47 = *(_DWORD *)(v44 + 4 * (v45-- - 2));
      }
      while (v47 > 0xFFFFFF);
      if (v46 >= 0x1000)
        v46 = 4096;
      v48 = v46 << 12;
LABEL_87:
      v49 = 0;
      v123[v11] = v48;
    }
    else
    {
      v49 = 0;
    }
    v10 = (uint64_t)v19;
LABEL_90:
    ++v11;
  }
  while (v11 != 3);
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  memset(valuePtr, 0, sizeof(valuePtr));
  CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, a2, (int (*)[3])v123);
  v53 = (CMMConvInvMatrix *)CMMBase::NewInternal(0x160uLL, *(_QWORD ***)(a1 + 8));
  CMMConvInvMatrix::CMMConvInvMatrix(v53, (const CMMInvMatrix *)valuePtr, *(CMMConvNode **)(a1 + 24), v54, v55);
  *v56 = off_1E215E840;
  *(_QWORD *)(a1 + 24) = v56;
  if (a7
    && (CFDictionaryGetValue(a7, CFSTR("com.apple.cmm.SkipPQEETF")) == v77
      ? (v57 = 1)
      : (v57 = CFDictionaryGetValue(a7, CFSTR("com.apple.cmm.SkipToneMappingForBT2100")) == v77),
        *(_BYTE *)(a1 + 52)))
  {
    v58 = CFDictionaryGetValue(a7, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100")) == v77;
  }
  else
  {
    v57 = 0;
    v58 = 0;
  }
  v59 = ColorSyncOptionsDisplayReferredToneMappingRequested(a7);
  v60 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(a7);
  FlexTRCOptions = (unint64_t)ColorSyncOptionsGetFlexTRCOptions(0, a7);
  FlexLumaScalingOptions = (unint64_t)ColorSyncOptionsGetFlexLumaScalingOptions(0, a7);
  v63 = 1;
  if ((v60 & 1) == 0 && (v59 & 1) == 0)
    v63 = (FlexTRCOptions | FlexLumaScalingOptions) != 0;
  if (*(_BYTE *)(a1 + 42))
    goto LABEL_132;
  if (*(_BYTE *)(a1 + 41))
    v63 = 1;
  if (v63 || *(_BYTE *)(a1 + 43))
    goto LABEL_132;
  v64 = a4;
  if (!*(_BYTE *)(a1 + 52))
    v64 = 1;
  if ((v64 | v57) == 1)
  {
LABEL_132:
    if (!(v78 & 1 | !v58))
      goto LABEL_133;
  }
  else if ((v78 & 1) == 0)
  {
LABEL_133:
    v65 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
    v66 = *(_QWORD *)(a1 + 24);
    *((_DWORD *)v65 + 2) = 1;
    v65[2] = 0;
    v65[3] = v66;
    if (v66)
      *(_QWORD *)(v66 + 16) = v65;
    v65[5] = 0x3FFFFF0000000000;
    *v65 = off_1E215E3A8;
    *((_DWORD *)v65 + 12) = 1000434481;
    *((_BYTE *)v65 + 36) = 0;
    *((_DWORD *)v65 + 8) = 256;
    *(_QWORD *)(a1 + 24) = v65;
  }
  if (a7)
  {
    if (CFDictionaryGetValue(a7, CFSTR("com.apple.cmm.ApplyYCCGammaScaling")) == v77)
    {
      v69 = *(_OWORD *)(a6 + 56);
      v96[0] = *(_OWORD *)(a6 + 40);
      v96[1] = v69;
      v97 = *(_DWORD *)(a6 + 72);
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v98 = 0u;
      CMMMatrix::CMMMatrix((uint64_t)&v98, (uint64_t)v96);
      *(_QWORD *)(a1 + 24) = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v98, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
      v93 = 1987212643;
      v94 = 0x1000000;
      v95 = 14337;
      *(_OWORD *)v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      CMMCurveTag::CMMCurveTag((CMMCurveTag *)&v89, 0, (uint64_t)&v93, 14, 0);
      *(_QWORD *)&v89 = off_1E215FD98;
      DWORD2(v92) = 1067198710;
      v88 = 0;
      v86 = 0u;
      v87 = 0u;
      v85 = 0u;
      LODWORD(v85) = 1;
      v70 = CMMCurveTag::MakeTRC((uint64_t)&v89, (uint64_t)&v85, *(_QWORD ***)(a1 + 8), 0);
      *(_QWORD *)&v85 = 1;
      HIDWORD(v85) = 1;
      *(_QWORD *)&v86 = 0;
      BYTE8(v85) = 1;
      *((_QWORD *)&v86 + 1) = DWORD2(v92) | 0x3F80000000000000;
      v88 = 0;
      v87 = 0uLL;
      v71 = (CMMConvNode *)CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
      CMMConvTRC::CMMConvTRC((uint64_t)v71, 0, (uint64_t)v70, 0, &v85, *(_QWORD *)(a1 + 24), 1, 1, 1.0, 1, 0);
      *(_QWORD *)(a1 + 24) = v71;
      v72 = *(_OWORD *)(a6 + 92);
      v82[0] = *(_OWORD *)(a6 + 76);
      v82[1] = v72;
      v83 = *(_DWORD *)(a6 + 108);
      memset(v84, 0, sizeof(v84));
      CMMMatrix::CMMMatrix((uint64_t)v84, (uint64_t)v82);
      *(_QWORD *)(a1 + 24) = CMMMatrix::MakeMatrixConv((CMMMatrix *)v84, *(CMMMemMgr **)(a1 + 8), v71);
      *(_QWORD *)&v89 = off_1E215FD20;
      v73 = v90;
      if ((_QWORD)v90)
        *(_QWORD *)(v90 + 24) = *((_QWORD *)&v90 + 1);
      if (*((_QWORD *)&v90 + 1))
        *(_QWORD *)(*((_QWORD *)&v90 + 1) + 16) = v73;
      if ((_BYTE)v92)
        CMMBase::operator delete((pthread_mutex_t **)v91[1]);
    }
    else if (CFDictionaryGetValue(a7, CFSTR("com.apple.cmm.ApplyLuminanceScaling")) == v77)
    {
      v67 = CMMBase::NewInternal(0x48uLL, *(_QWORD ***)(a1 + 8));
      v68 = *(_QWORD *)(a1 + 24);
      *((_DWORD *)v67 + 2) = 1;
      v67[2] = 0;
      v67[3] = v68;
      if (v68)
        *(_QWORD *)(v68 + 16) = v67;
      v67[5] = 0x3F80000000000000;
      *(_DWORD *)((char *)v67 + 33) = 16777217;
      *v67 = off_1E215F6A8;
      *((_DWORD *)v67 + 12) = 1062284383;
      *((_DWORD *)v67 + 13) = *(_DWORD *)(a6 + 24);
      *((_DWORD *)v67 + 14) = *(_DWORD *)(a6 + 28);
      *((_DWORD *)v67 + 15) = *(_DWORD *)(a6 + 32);
      *((_DWORD *)v67 + 16) = *(_DWORD *)(a6 + 36);
      *(_QWORD *)(a1 + 24) = v67;
    }
  }
  v74 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)(a1 + 16))
    *(_QWORD *)(a1 + 16) = v74;
  *(_QWORD *)(v74 + 16) = v36;
  if (v36)
    *((_QWORD *)v36 + 3) = v74;
  if ((v49 & 1) == 0)
    *(_QWORD *)(a1 + 24) = v10;
}

void sub_18B3B4768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,pthread_mutex_t **a54,char a55)
{
  if (a51)
    *(_QWORD *)(a51 + 24) = a52;
  if (a52)
    *(_QWORD *)(a52 + 16) = a51;
  if (a55)
    CMMBase::operator delete(a54);
  _Unwind_Resume(a1);
}

uint64_t CMMConvInvertedTRC::CMMConvInvertedTRC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, int a8, char a9)
{
  uint64_t result;
  uint64_t v11;

  result = CMMConvTRC::CMMConvTRC(a1, a2, a3, a4, a6, a7, a8, 1, 1.0, 1, a9);
  *(_QWORD *)result = off_1E215DE48;
  *(_QWORD *)(result + 168) = a5;
  *(_BYTE *)(result + 35) = 0;
  *(_BYTE *)(result + 36) = a9;
  if (a5)
  {
    v11 = *(_QWORD *)(a5 + 8);
    if (v11)
      *(_QWORD *)(a5 + 8) = v11 + 1;
  }
  return result;
}

uint64_t CMMConvTRC::CMMConvTRC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, int a7, int a8, float a9, char a10, char a11)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  BOOL v27;
  _DWORD *exception;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a6;
  if (a6)
    *(_QWORD *)(a6 + 16) = a1;
  *(_DWORD *)(a1 + 40) = 0;
  *(float *)(a1 + 44) = a9;
  *(_BYTE *)(a1 + 33) = a8;
  *(_BYTE *)(a1 + 34) = a10;
  *(_BYTE *)(a1 + 35) = a11;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)a1 = off_1E215BB48;
  *(_QWORD *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a7;
  *(_QWORD *)(a1 + 80) = a4;
  v13 = *a5;
  v14 = a5[1];
  v15 = a5[2];
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a5 + 6);
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 88) = v13;
  v16 = a3;
  if (!*(_DWORD *)(a1 + 88))
  {
    v17 = *(_QWORD **)(a1 + 104);
    if (!v17)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
    v18 = v17[1];
    if (v18)
      v17[1] = v18 + 1;
    v16 = a3;
    if (a8)
    {
      v19 = (float *)CMMTable::FloatData(v17[2], v17[3]);
      v20 = (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32) >> 2) - 1;
      v21 = *(float *)((char *)v19 + ((2 * v20) & 0xFFFFFFFFFFFFFFFCLL));
      v22 = *v19;
      v23 = (float)(v21 - *v19) + (float)(v21 - *v19);
      v24 = v19[v20];
      v25 = (float)(v24 - v21) + (float)(v24 - v21);
      *(float *)(a1 + 144) = v23;
      *(float *)(a1 + 148) = v22;
      *(float *)(a1 + 152) = v25;
      *(float *)(a1 + 156) = v24 - v25;
      v16 = *(_QWORD *)(a1 + 64);
    }
  }
  v26 = *(_QWORD *)(v16 + 8);
  if (v26)
    *(_QWORD *)(v16 + 8) = v26 + 1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 48) = CMMTable::FloatData(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24)) + 16388;
  *(_QWORD *)(a1 + 56) = CMMTable::FloatData(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24)) + 17412;
  v27 = (_UNKNOWN *)CMMTable::FloatData(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24)) == &kOnePointEightGammaData|| CMMTable::FloatData(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24)) == (_QWORD)&kInvOnePointEightGammaData;
  *(_BYTE *)(a1 + 161) = v27;
  return a1;
}

uint64_t CMMRGBCurves::MakeInvertedTRC(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, float a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = a1[1];
  if (!a4)
    goto LABEL_8;
  v12 = &a1[a4 + 1];
  if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 56))(v11, *v12, a1[a4]))
  {
    v11 = *v12;
LABEL_8:
    a1[5] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, float))(*(_QWORD *)v11 + 72))(v11, a2, a3, a1 + 4, a6);
    goto LABEL_9;
  }
  v13 = a1[4];
  v14 = *(_QWORD *)(v13 + 8);
  if (v14)
    *(_QWORD *)(v13 + 8) = v14 + 1;
  v15 = a1[5];
  v16 = *(_QWORD *)(v15 + 8);
  if (v16)
    *(_QWORD *)(v15 + 8) = v16 + 1;
LABEL_9:
  *a5 = a1[4];
  return a1[5];
}

BOOL CMMCurveTag::SameCurve(CMMCurveTag *this, CMMCurveTag *a2, CMMCurveTag *a3)
{
  unsigned int v5;
  const void *v6;
  const void *v7;

  v5 = (*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)a2 + 40))(a2);
  if (v5 != (*(unsigned int (**)(CMMCurveTag *))(*(_QWORD *)a3 + 40))(a3))
    return 0;
  if (!v5)
    return 1;
  v6 = (const void *)(*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)a2 + 48))(a2);
  v7 = (const void *)(*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)a3 + 48))(a3);
  if (v6 == v7)
    return 1;
  return memcmp(v6, v7, 2 * v5) == 0;
}

uint64_t CMMCurveTag::GetCurveData(CMMCurveTag *this)
{
  return *((_QWORD *)this + 5) + 12;
}

double InvertMatrix3x3(double (*a1)[3][3])
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double result;
  double v12;
  double v13;
  double v14;

  v12 = (*a1)[0][1];
  v13 = (*a1)[0][0];
  v2 = (*a1)[0][2];
  v3 = (*a1)[1][0];
  v4 = (*a1)[1][1];
  v5 = (*a1)[1][2];
  v6 = (*a1)[2][0];
  v7 = (*a1)[2][1];
  v8 = (*a1)[2][2];
  v14 = -((*a1)[0][0] * v5);
  v9 = v2 * -(v6 * v4) + (*a1)[0][0] * v4 * v8 + v2 * v3 * v7 + -(v3 * v12) * v8 + v12 * v5 * v6 + v14 * v7;
  if (fabs(v9) <= 1.17549435e-38)
    v10 = 4294967126;
  else
    v10 = 0;
  CMMThrowExceptionOnError(v10);
  (*a1)[0][0] = (v4 * v8 - v7 * v5) / v9;
  (*a1)[0][1] = (v7 * v2 - v12 * v8) / v9;
  (*a1)[0][2] = (v12 * v5 - v4 * v2) / v9;
  (*a1)[1][0] = (v6 * v5 - v3 * v8) / v9;
  (*a1)[1][1] = (v13 * v8 - v6 * v2) / v9;
  (*a1)[1][2] = (v14 + v3 * v2) / v9;
  (*a1)[2][0] = (v3 * v7 - v6 * v4) / v9;
  (*a1)[2][1] = (v6 * v12 - v13 * v7) / v9;
  result = (v13 * v4 - v3 * v12) / v9;
  (*a1)[2][2] = result;
  return result;
}

uint64_t CMMMatrix::InitializeMatrix(uint64_t result, uint64_t a2, _QWORD *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  int8x16_t v9;
  int8x16_t v10;
  int64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int8x16_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t i;
  double v18;
  double v19;
  uint64_t j;
  uint64_t v21;
  double v22;
  float v23;
  uint64_t v24;
  double v25;
  float v26;
  uint64_t v27;

  v4 = 0;
  *(float *)(result + 104) = a4;
  v5 = a3[1];
  v6 = *(unsigned int **)(*a3 + 40);
  *(_DWORD *)a2 = bswap32(v6[2]);
  *(_DWORD *)(a2 + 12) = bswap32(v6[3]);
  *(_DWORD *)(a2 + 24) = bswap32(v6[4]);
  v7 = *(unsigned int **)(v5 + 40);
  *(_DWORD *)(a2 + 4) = bswap32(v7[2]);
  *(_DWORD *)(a2 + 16) = bswap32(v7[3]);
  *(_DWORD *)(a2 + 28) = bswap32(v7[4]);
  v8 = *(unsigned int **)(a3[2] + 40);
  *(_DWORD *)(a2 + 8) = bswap32(v8[2]);
  *(_DWORD *)(a2 + 20) = bswap32(v8[3]);
  *(_DWORD *)(a2 + 32) = bswap32(v8[4]);
  v9.i32[0] = v6[2];
  v9.i32[1] = v7[2];
  v9.i32[2] = v8[2];
  v9.i32[3] = v6[3];
  v10 = vrev32q_s8(v9);
  v11.i64[0] = v10.i32[0];
  v11.i64[1] = v10.i32[1];
  v12 = vcvtq_f64_s64(v11);
  v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
  v11.i64[0] = v10.i32[0];
  v11.i64[1] = v10.i32[1];
  v13 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
  v10.i32[0] = v7[3];
  v10.i32[1] = v8[3];
  v10.i32[2] = v6[4];
  v10.i32[3] = v7[4];
  *(float32x4_t *)(a2 + 36) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v12, v13)), vmulq_f64(vcvtq_f64_s64(v11), v13));
  v14 = vrev32q_s8(v10);
  v11.i64[0] = v14.i32[0];
  v11.i64[1] = v14.i32[1];
  v15 = vcvtq_f64_s64(v11);
  v14.i64[0] = vextq_s8(v14, v14, 8uLL).u64[0];
  v11.i64[0] = v14.i32[0];
  v11.i64[1] = v14.i32[1];
  *(float32x4_t *)(a2 + 52) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v15, v13)), vmulq_f64(vcvtq_f64_s64(v11), v13));
  *(float *)v14.i32 = (double)(int)bswap32(v8[4]) * 0.0000152587891;
  *(_DWORD *)(a2 + 68) = v14.i32[0];
  v16 = a2;
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      v18 = (double)*(int *)(v16 + i) * 0.0000152587891;
      if (v18 >= 0.0)
        v19 = v18 * 32768.0 + 0.5;
      else
        v19 = v18 * 32768.0 + -0.5;
      *(_DWORD *)(v16 + i) = (int)v19;
    }
    ++v4;
    v16 += 12;
  }
  while (v4 != 3);
  for (j = 0; j != 3; ++j)
  {
    v21 = 0;
    v22 = 0.0;
    v23 = 0.0;
    do
    {
      v22 = v22 + (double)*(int *)(a2 + v21);
      v23 = v23 + *(float *)(a2 + v21 + 36);
      v21 += 4;
    }
    while (v21 != 12);
    if (v22 != 0.0 && v23 != 0.0)
    {
      v24 = 0;
      v25 = (double)dword_18B43BC34[j] / v22;
      v26 = flt_18B43BC40[j] / v23;
      do
      {
        v27 = a2 + v24;
        *(_DWORD *)v27 = vcvtmd_s64_f64(v25 * (double)*(int *)(a2 + v24) + 0.5);
        *(float *)(v27 + 36) = v26 * *(float *)(a2 + v24 + 36);
        v24 += 4;
      }
      while (v24 != 12);
    }
    a2 += 12;
  }
  return result;
}

CMMTable *CMMCurveTag::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3, int a4)
{
  unsigned int v8;
  unsigned __int16 *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CMMTable *v14;
  uint64_t v15;
  _QWORD *v17;
  unsigned int *v18;
  int *v19;
  CMMMemMgr *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v9 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (a2)
    *(_DWORD *)(a2 + 4) = 0;
  if (!(v8 | a4))
  {
    if (CMMInitializeLinearGammaTable(void)::predicate == -1)
    {
      if (!a2)
      {
LABEL_13:
        v14 = (CMMTable *)CMMLinearGammaTable;
        goto LABEL_14;
      }
LABEL_12:
      v12 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
      v11 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
      v13 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
      *(_OWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 32) = v11;
      *(_OWORD *)a2 = v13;
      goto LABEL_13;
    }
LABEL_42:
    dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
    if (!a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (a4 || v8 != 1)
  {
    if (a4)
      goto LABEL_18;
  }
  else
  {
    v10 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    if (v10 == 1)
    {
      if (CMMInitializeLinearGammaTable(void)::predicate == -1)
      {
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
      goto LABEL_42;
    }
    if ((v10 & 0xFFFFFEFF) == 0xCC01)
    {
      if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] == -1)
      {
        if (!a2)
        {
LABEL_25:
          v14 = (CMMTable *)CMMOnePointEightGammaTable;
          goto LABEL_14;
        }
      }
      else
      {
        dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_212);
        if (!a2)
          goto LABEL_25;
      }
      v22 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 16);
      v21 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 32);
      v23 = *(_OWORD *)CMMOnePointEightGammaFloatLutInfo;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMOnePointEightGammaFloatLutInfo + 48);
      *(_OWORD *)(a2 + 16) = v22;
      *(_OWORD *)(a2 + 32) = v21;
      *(_OWORD *)a2 = v23;
      goto LABEL_25;
    }
    if (v10 == 13058)
    {
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate == -1)
      {
        if (!a2)
          goto LABEL_41;
        goto LABEL_40;
      }
      goto LABEL_48;
    }
  }
  if (IsSRGBGammaCurve(v8, v9))
  {
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] == -1)
    {
      if (!a2)
      {
LABEL_34:
        v14 = (CMMTable *)CMMsRGBGammaTable;
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
      if (!a2)
        goto LABEL_34;
    }
    v25 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 16);
    v24 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 32);
    v26 = *(_OWORD *)CMMsRGBGammaFloatLutInfo;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMsRGBGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v25;
    *(_OWORD *)(a2 + 32) = v24;
    *(_OWORD *)a2 = v26;
    goto LABEL_34;
  }
  v30 = 2.2;
  if (IsPureGammaCurve(v8, v9, &v30) && v30 > 2.19 && v30 < 2.21)
  {
    if (CMMInitializeTwoPointTwoGammaTable(void)::predicate == -1)
    {
      if (!a2)
      {
LABEL_41:
        v14 = (CMMTable *)CMMTwoPointTwoGammaTable;
LABEL_14:
        v15 = *((_QWORD *)v14 + 1);
        if (v15)
          *((_QWORD *)v14 + 1) = v15 + 1;
        return v14;
      }
LABEL_40:
      v28 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 16);
      v27 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 32);
      v29 = *(_OWORD *)CMMTwoPointTwoGammaFloatLutInfo;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 48);
      *(_OWORD *)(a2 + 16) = v28;
      *(_OWORD *)(a2 + 32) = v27;
      *(_OWORD *)a2 = v29;
      goto LABEL_41;
    }
LABEL_48:
    dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_205);
    if (!a2)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_18:
  v14 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a3);
  *(_QWORD *)v14 = off_1E215FE00;
  *((_QWORD *)v14 + 1) = 1;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = 21512;
  v17 = CMMBase::NewInternal(0x5408uLL, a3);
  *((_QWORD *)v14 + 2) = v17;
  v18 = (unsigned int *)CMMTable::FloatData((uint64_t)v17, *((_QWORD *)v14 + 3));
  CMMCurveTag::MakeLut(a1, a2, v18, a4);
  v19 = (int *)CMMTable::FloatData(*((_QWORD *)v14 + 2), *((_QWORD *)v14 + 3));
  MakeLookups(v19);
  if (a2 && !*(_DWORD *)a2)
    *(_QWORD *)(a2 + 16) = CMMTable::MakeFloatCopy(v14, a3, v20);
  return v14;
}

CMMTable *CMMCurveTag::MakeInvertedTRC()
{
  uint64_t v0;
  CMMTable **v1;
  CMMTable **v2;
  _QWORD **v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  int v10;
  CMMTable *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CMMTable *v26;
  unsigned int *v27;
  _QWORD *v28;
  void *v29;
  CMMMemMgr *v30;
  int v31[4097];
  uint64_t v32;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v32 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 48))(v0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) == 1)
  {
    v10 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    if (v10 == 1)
    {
      if (CMMInitializeLinearGammaTable(void)::predicate != -1)
        dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
      v11 = (CMMTable *)CMMLinearGammaTable;
      v12 = *(_QWORD *)(CMMLinearGammaTable + 8);
      if (v12)
        *(_QWORD *)(CMMLinearGammaTable + 8) = ++v12;
      *v2 = v11;
      if (!v6)
        goto LABEL_28;
      v14 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
      v13 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
      v15 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
      *(_OWORD *)(v6 + 16) = v14;
      *(_OWORD *)(v6 + 32) = v13;
      *(_OWORD *)v6 = v15;
LABEL_27:
      v12 = *((_QWORD *)v11 + 1);
LABEL_28:
      if (v12)
        *((_QWORD *)v11 + 1) = v12 + 1;
      return v11;
    }
    if ((v10 & 0xFFFFFEFF) == 0xCC01)
    {
      if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] != -1)
        dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_212);
      *v2 = (CMMTable *)CMMOnePointEightGammaTable;
      if (v6)
      {
        v17 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 16);
        v16 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 32);
        v18 = *(_OWORD *)CMMInvOnePointEightGammaFloatLutInfo;
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v17;
        *(_OWORD *)(v6 + 32) = v16;
        *(_OWORD *)v6 = v18;
      }
      v11 = (CMMTable *)CMMInvOnePointEightGammaTable;
      goto LABEL_27;
    }
    if (v10 == 13058)
    {
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1)
        dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_205);
      *v2 = (CMMTable *)CMMTwoPointTwoGammaTable;
      if (v6)
      {
        v20 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 16);
        v19 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 32);
        v21 = *(_OWORD *)CMMInvTwoPointTwoGammaFloatLutInfo;
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v20;
        *(_OWORD *)(v6 + 32) = v19;
        *(_OWORD *)v6 = v21;
      }
      v11 = (CMMTable *)CMMInvTwoPointTwoGammaTable;
      goto LABEL_27;
    }
  }
  if (IsSRGBGammaCurve(v9, v8))
  {
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1)
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
    *v2 = (CMMTable *)CMMsRGBGammaTable;
    if (v6)
    {
      v23 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
      v22 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
      v24 = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMInvsRGBGammaFloatLutInfo + 48);
      *(_OWORD *)(v6 + 16) = v23;
      *(_OWORD *)(v6 + 32) = v22;
      *(_OWORD *)v6 = v24;
    }
    v11 = (CMMTable *)CMMInvsRGBGammaTable;
    goto LABEL_27;
  }
  v26 = (CMMTable *)CMMBase::NewInternal(0x28uLL, v4);
  *(_QWORD *)v26 = off_1E215FE00;
  *((_QWORD *)v26 + 1) = 1;
  *((_QWORD *)v26 + 3) = 0;
  *((_QWORD *)v26 + 4) = 21512;
  *((_QWORD *)v26 + 2) = CMMBase::NewInternal(0x5408uLL, v4);
  *v2 = v26;
  v27 = (unsigned int *)CMMTable::FloatData(*((_QWORD *)v26 + 2), *((_QWORD *)v26 + 3));
  CMMCurveTag::MakeLut(v7, v6, v27, 0);
  v11 = (CMMTable *)CMMBase::NewInternal(0x28uLL, v4);
  *(_QWORD *)v11 = off_1E215FE00;
  *((_QWORD *)v11 + 1) = 1;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 21512;
  v28 = CMMBase::NewInternal(0x5408uLL, v4);
  *((_QWORD *)v11 + 2) = v28;
  v29 = (void *)CMMTable::FloatData((uint64_t)v28, *((_QWORD *)v11 + 3));
  memcpy(v29, v27, 0x5408uLL);
  bzero(v31, 0x4004uLL);
  InvertLUT((int *)v29, v31);
  MakeLookups((int *)v29);
  if (v6)
  {
    if (*(_DWORD *)v6)
      CMMCurveTag::InvertFloatParametricLUT(v6);
    else
      *(_QWORD *)(v6 + 16) = CMMTable::MakeFloatCopy(v11, v4, v30);
  }
  return v11;
}

BOOL IsSRGBGammaCurve(unsigned int a1, unsigned __int16 *__s1)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  unint64_t v9;
  uint64_t v11;
  double v12;
  unsigned int v13;
  double v14;

  if (a1 != 26)
  {
    if (a1 >= 0x80)
    {
      if (a1 == 1024)
      {
        if (sRGBTRCDataPtr(void)::predicate != -1)
          dispatch_once(&sRGBTRCDataPtr(void)::predicate, &__block_literal_global_187_572);
        if (sRGBTRCDataPtr(void)::ptr && !memcmp(__s1, (const void *)sRGBTRCDataPtr(void)::ptr, 0x800uLL))
          return 1;
      }
      if ((double)(bswap32(*__s1) >> 16) / 65535.0 <= 0.0001)
      {
        v9 = a1 - 1;
        if (fabs((double)(bswap32(__s1[v9]) >> 16) / 65535.0 + -1.0) <= 0.0001
          && vabdd_f64((double)(bswap32(__s1[a1 >> 1]) >> 16) / 65535.0, pow(((double)(a1 >> 1) / (double)v9 + 0.055) / 1.055, 2.4)) <= 0.0001)
        {
          v7 = 0;
          v11 = 1;
          do
          {
            v12 = (double)v11 / (double)v9;
            v13 = __s1[v11];
            if (v12 <= 0.04045)
              v14 = v12 / 12.92;
            else
              v14 = pow((v12 + 0.055) / 1.055, 2.4);
            if (vabdd_f64((double)(bswap32(v13) >> 16) / 65535.0, v14) > 0.0001)
              break;
            v7 = ++v11 >= v9;
          }
          while (v9 != v11);
          return v7;
        }
      }
    }
    return 0;
  }
  if (*__s1)
    return 0;
  v3 = 1;
  v4 = 25;
  while (v3 != 26)
  {
    v5 = __s1[v3];
    v6 = IsSRGBGammaCurve(unsigned int,unsigned short *)::instagramGamma[v3++];
    if (v5 != v6)
    {
      v4 = v3 - 2;
      break;
    }
  }
  return v4 > 0x18;
}

const __CFDictionary *ConversionManager::exrToneMappingGammaIsRequested(const __CFDictionary *this, const __CFDictionary *a2)
{
  const __CFDictionary *v2;
  CFTypeID v3;
  CFTypeID v4;

  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, CFSTR("com.apple.cmm.ApplyToneMaping"));
    if (this)
    {
      v2 = this;
      v3 = CFGetTypeID(this);
      if (v3 == CFDictionaryGetTypeID())
      {
        this = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("com.apple.cmm.ApplyEXRToneMappingGamma"));
        if (this)
        {
          v4 = CFGetTypeID(this);
          return (const __CFDictionary *)(v4 == CFDictionaryGetTypeID());
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CMMParaCurveTag::GetCurveCount(CMMParaCurveTag *this)
{
  return 0;
}

uint64_t CMMParaCurveTag::SameCurve(CMMParaCurveTag *this, CMMCurveTag *lpsrc, CMMCurveTag *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_6:
  if (!(v5 | v6))
    return (*(uint64_t (**)(CMMCurveTag *, CMMCurveTag *, CMMCurveTag *))(*(_QWORD *)lpsrc + 56))(lpsrc, lpsrc, a3);
  v8 = 0;
  if (v5 && v6)
    return *(unsigned __int16 *)(v5 + 56) == *(unsigned __int16 *)(v6 + 56)
        && memcmp((const void *)(v5 + 64), (const void *)(v6 + 64), 4 * *(unsigned int *)(v6 + 60)) == 0;
  return v8;
}

_QWORD *CMMParaCurveTag::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3, int a4, float a5)
{
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int *v26;
  int *v27;

  if (*(_WORD *)(a1 + 56) == 3)
  {
    if (*(_DWORD *)(a1 + 64) != 157286
      || *(_DWORD *)(a1 + 68) != 62119
      || *(_DWORD *)(a1 + 72) != 3417
      || *(_DWORD *)(a1 + 76) != 5072
      || *(_DWORD *)(a1 + 84)
      || *(_DWORD *)(a1 + 88))
    {
      goto LABEL_30;
    }
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] == -1)
    {
      if (!a2)
      {
LABEL_17:
        v14 = (_QWORD *)CMMsRGBGammaTable;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
      if (!a2)
        goto LABEL_17;
    }
    v16 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 16);
    v15 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 32);
    v17 = *(_OWORD *)CMMsRGBGammaFloatLutInfo;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMsRGBGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)a2 = v17;
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 56))
    goto LABEL_30;
  v10 = *(_DWORD *)(a1 + 64);
  if (v10 == 0x10000)
  {
    if (CMMInitializeLinearGammaTable(void)::predicate == -1)
    {
      if (!a2)
      {
LABEL_7:
        v14 = (_QWORD *)CMMLinearGammaTable;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
      if (!a2)
        goto LABEL_7;
    }
    v12 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
    v11 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
    v13 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)a2 = v13;
    goto LABEL_7;
  }
  if (v10 >> 1 == 58982)
  {
    if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] == -1)
    {
      if (!a2)
      {
LABEL_22:
        v14 = (_QWORD *)CMMOnePointEightGammaTable;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_212);
      if (!a2)
        goto LABEL_22;
    }
    v19 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 16);
    v18 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 32);
    v20 = *(_OWORD *)CMMOnePointEightGammaFloatLutInfo;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMOnePointEightGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v18;
    *(_OWORD *)a2 = v20;
    goto LABEL_22;
  }
  if (v10 != 144179)
  {
LABEL_30:
    v14 = CMMBase::NewInternal(0x28uLL, a3);
    *v14 = off_1E215FE00;
    v14[1] = 1;
    v14[3] = 0;
    v14[4] = 21512;
    v25 = CMMBase::NewInternal(0x5408uLL, a3);
    v14[2] = v25;
    v26 = (int *)CMMTable::FloatData((uint64_t)v25, v14[3]);
    CMMParaCurveTag::MakeLut(a1, a2, v26, a4, a5);
    v27 = (int *)CMMTable::FloatData(v14[2], v14[3]);
    MakeLookups(v27);
    return v14;
  }
  if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1)
  {
    dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_205);
    if (!a2)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (a2)
  {
LABEL_26:
    v22 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 16);
    v21 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 32);
    v23 = *(_OWORD *)CMMTwoPointTwoGammaFloatLutInfo;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v21;
    *(_OWORD *)a2 = v23;
  }
LABEL_27:
  v14 = (_QWORD *)CMMTwoPointTwoGammaTable;
LABEL_28:
  v24 = v14[1];
  if (v24)
    v14[1] = v24 + 1;
  return v14;
}

CMMTable *CMMParaCurveTag::MakeInvertedTRC()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  CMMTable *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  int *v30;
  _QWORD *v31;
  void *v32;
  CMMMemMgr *v33;
  int v35[4097];
  uint64_t v36;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v7 = v0;
  v36 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(v0 + 56) == 3)
  {
    if (*(_DWORD *)(v0 + 64) == 157286
      && *(_DWORD *)(v0 + 68) == 62119
      && *(_DWORD *)(v0 + 72) == 3417
      && *(_DWORD *)(v0 + 76) == 5072
      && !*(_DWORD *)(v0 + 84)
      && !*(_DWORD *)(v0 + 88))
    {
      if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1)
        dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
      v14 = CMMsRGBGammaTable;
      v15 = *(_QWORD *)(CMMsRGBGammaTable + 8);
      if (v15)
        *(_QWORD *)(CMMsRGBGammaTable + 8) = v15 + 1;
      *v3 = v14;
      if (v6)
      {
        v17 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
        v16 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
        v18 = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMInvsRGBGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v17;
        *(_OWORD *)(v6 + 32) = v16;
        *(_OWORD *)v6 = v18;
      }
      v9 = (CMMTable *)CMMInvsRGBGammaTable;
      goto LABEL_39;
    }
  }
  else if (!*(_WORD *)(v0 + 56))
  {
    v8 = *(_DWORD *)(v0 + 64);
    if (v8 == 0x10000)
    {
      if (CMMInitializeLinearGammaTable(void)::predicate != -1)
        dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_210);
      v9 = (CMMTable *)CMMLinearGammaTable;
      v10 = *(_QWORD *)(CMMLinearGammaTable + 8);
      if (v10)
        *(_QWORD *)(CMMLinearGammaTable + 8) = ++v10;
      *v3 = (uint64_t)v9;
      if (!v6)
        goto LABEL_40;
      v12 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
      v11 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
      v13 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMLinearGammaFloatLutInfo + 48);
      *(_OWORD *)(v6 + 16) = v12;
      *(_OWORD *)(v6 + 32) = v11;
      *(_OWORD *)v6 = v13;
LABEL_39:
      v10 = *((_QWORD *)v9 + 1);
LABEL_40:
      if (v10)
        *((_QWORD *)v9 + 1) = v10 + 1;
      return v9;
    }
    if (v8 >> 1 == 58982)
    {
      if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] != -1)
        dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_212);
      v19 = CMMOnePointEightGammaTable;
      v20 = *(_QWORD *)(CMMOnePointEightGammaTable + 8);
      if (v20)
        *(_QWORD *)(CMMOnePointEightGammaTable + 8) = v20 + 1;
      *v3 = v19;
      if (v6)
      {
        v22 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 16);
        v21 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 32);
        v23 = *(_OWORD *)CMMInvOnePointEightGammaFloatLutInfo;
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v22;
        *(_OWORD *)(v6 + 32) = v21;
        *(_OWORD *)v6 = v23;
      }
      v9 = (CMMTable *)CMMInvOnePointEightGammaTable;
      goto LABEL_39;
    }
    if (v8 == 144179)
    {
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1)
        dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_205);
      v24 = CMMTwoPointTwoGammaTable;
      v25 = *(_QWORD *)(CMMTwoPointTwoGammaTable + 8);
      if (v25)
        *(_QWORD *)(CMMTwoPointTwoGammaTable + 8) = v25 + 1;
      *v3 = v24;
      if (v6)
      {
        v27 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 16);
        v26 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 32);
        v28 = *(_OWORD *)CMMInvTwoPointTwoGammaFloatLutInfo;
        *(_QWORD *)(v6 + 48) = *(_QWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v27;
        *(_OWORD *)(v6 + 32) = v26;
        *(_OWORD *)v6 = v28;
      }
      v9 = (CMMTable *)CMMInvTwoPointTwoGammaTable;
      goto LABEL_39;
    }
  }
  v29 = CMMBase::NewInternal(0x28uLL, v1);
  *v29 = off_1E215FE00;
  v29[1] = 1;
  v29[3] = 0;
  v29[4] = 21512;
  v29[2] = CMMBase::NewInternal(0x5408uLL, v4);
  *v3 = (uint64_t)v29;
  v30 = (int *)CMMTable::FloatData(v29[2], v29[3]);
  CMMParaCurveTag::MakeLut(v7, v6, v30, 0, 1.0);
  v9 = (CMMTable *)CMMBase::NewInternal(0x28uLL, v4);
  *(_QWORD *)v9 = off_1E215FE00;
  *((_QWORD *)v9 + 1) = 1;
  *((_QWORD *)v9 + 3) = 0;
  *((_QWORD *)v9 + 4) = 21512;
  v31 = CMMBase::NewInternal(0x5408uLL, v4);
  *((_QWORD *)v9 + 2) = v31;
  v32 = (void *)CMMTable::FloatData((uint64_t)v31, *((_QWORD *)v9 + 3));
  memcpy(v32, v30, 0x5408uLL);
  bzero(v35, 0x4004uLL);
  InvertLUT((int *)v32, v35);
  MakeLookups((int *)v32);
  if (v6)
  {
    if (*(_DWORD *)v6)
      CMMCurveTag::InvertFloatParametricLUT(v6);
    else
      *(_QWORD *)(v6 + 16) = CMMTable::MakeFloatCopy(v9, v4, v33);
  }
  return v9;
}

CMMTable *CMMLinearGamma::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  return CMMCurveTag::MakeTRC(a1, a2, a3, 0);
}

void CMMParaCurveTag::MakeLut(uint64_t a1, uint64_t a2, int *a3, int a4, double a5)
{
  int v5;
  int v11;
  double v12;
  double v14;
  double v15;
  double v16;
  float v17;
  double v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  int64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  double v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  int *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v57;
  int v59;
  int v60;
  double v61;
  long double v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _DWORD *exception;
  int v69;
  double v70;
  float64_t v71;
  double v72;

  v5 = *(unsigned __int16 *)(a1 + 56);
  switch(*(_WORD *)(a1 + 56))
  {
    case 0:
      v11 = *(_DWORD *)(a1 + 64);
      v12 = (double)v11 * 0.0000152587891;
      if (v12 >= 2.4023 || v12 <= 2.398)
        v14 = (double)v11 * 0.0000152587891;
      else
        v14 = 2.4;
      v15 = 1.0;
      v16 = 16.0;
      if (v14 >= 1.0)
        v16 = 1.0;
      if (v14 > 1.0)
        v16 = 0.0625;
      v17 = v16;
      v18 = v17;
      v19 = v14;
      v72 = 0.0;
      if (v19 != 1.0 && v19 != 0.0)
      {
        v20 = v19;
        if (v19 <= 1.0)
          v21 = v19;
        else
          v21 = 1.0 / v19;
        v70 = v18;
        v22 = exp2(1.0 / (v21 + -1.0) * 4.0);
        v18 = v70;
        v23 = 16.0;
        if (v21 == v20)
          v23 = 1.0;
        v24 = v23 * v22;
        v72 = v24;
      }
      v25 = 0;
      *(_DWORD *)(a1 + 60) = 5;
      *(_QWORD *)(a1 + 68) = 0x10000;
      *(_DWORD *)(a1 + 76) = (int)(v18 * 65536.0 + 0.5);
      *(_DWORD *)(a1 + 80) = (int)(v72 * 65536.0 + 0.5);
      v26 = 0uLL;
      v27.f64[0] = 0.0;
      v27.f64[1] = v18;
      v28 = 3;
      v29 = 1;
      v30 = 0x10000;
      break;
    case 1:
      v29 = 0;
      v11 = *(_DWORD *)(a1 + 64);
      v30 = *(_DWORD *)(a1 + 68);
      v14 = (double)v11 * 0.0000152587891;
      v15 = (double)v30 * 0.0000152587891;
      v25 = *(_DWORD *)(a1 + 72);
      v26 = 0uLL;
      v27.f64[1] = 0.0;
      v27.f64[0] = (double)v25 * 0.0000152587891;
      v72 = 0.0;
      v28 = 1;
      break;
    case 2:
      v29 = 0;
      v11 = *(_DWORD *)(a1 + 64);
      v30 = *(_DWORD *)(a1 + 68);
      v14 = (double)v11 * 0.0000152587891;
      v15 = (double)v30 * 0.0000152587891;
      v31 = *(_QWORD *)(a1 + 72);
      v32.i64[0] = (int)v31;
      v32.i64[1] = SHIDWORD(v31);
      v27 = vmulq_f64(vcvtq_f64_s64(v32), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
      v25 = v31;
      v26 = 0uLL;
      v72 = 0.0;
      v28 = 2;
      break;
    case 3:
      v29 = 0;
      v11 = *(_DWORD *)(a1 + 64);
      v30 = *(_DWORD *)(a1 + 68);
      v14 = (double)v11 * 0.0000152587891;
      v15 = (double)v30 * 0.0000152587891;
      v33 = *(_QWORD *)(a1 + 72);
      v34.i64[0] = (int)v33;
      v34.i64[1] = SHIDWORD(v33);
      v27 = vmulq_f64(vcvtq_f64_s64(v34), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
      v72 = (double)*(int *)(a1 + 80) * 0.0000152587891;
      v25 = v33;
      v26 = 0uLL;
      v28 = 3;
      break;
    case 4:
      v29 = 0;
      v11 = *(_DWORD *)(a1 + 64);
      v30 = *(_DWORD *)(a1 + 68);
      v35 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      v14 = (double)v11 * 0.0000152587891;
      v15 = (double)v30 * 0.0000152587891;
      v36 = *(_QWORD *)(a1 + 72);
      v37.i64[0] = (int)v36;
      v37.i64[1] = SHIDWORD(v36);
      v27 = vmulq_f64(vcvtq_f64_s64(v37), v35);
      v72 = (double)*(int *)(a1 + 80) * 0.0000152587891;
      v38 = *(_QWORD *)(a1 + 84);
      v37.i64[0] = (int)v38;
      v37.i64[1] = SHIDWORD(v38);
      v26 = vmulq_f64(vcvtq_f64_s64(v37), v35);
      v25 = v36;
      v28 = 4;
      break;
    default:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -170;
  }
  v39 = v27.f64[1];
  if (a5 != 1.0 && a5 != 0.0)
  {
    if ((v28 - 3) < 2)
    {
      v39 = v27.f64[1] * a5;
      v15 = v15 * a5;
      v72 = v72 / a5;
    }
    else if ((v28 - 1) <= 1)
    {
      v72 = -v27.f64[0] / v15 / a5;
      v15 = v15 * a5;
    }
  }
  v69 = a4;
  if (a2)
  {
    *(_BYTE *)(a2 + 8) = v29;
    *(_DWORD *)(a2 + 12) = v28;
    *(_QWORD *)(a2 + 16) = 0;
    v40 = v14;
    v41 = v15;
    v42 = v27.f64[0];
    v43 = v72;
    *(_QWORD *)a2 = 1;
    *(float *)(a2 + 24) = v40;
    *(float *)(a2 + 28) = v41;
    v44 = v39;
    *(float *)(a2 + 32) = v42;
    *(float *)(a2 + 36) = v44;
    *(float *)(a2 + 40) = v43;
    *(float32x2_t *)(a2 + 44) = vcvt_f32_f64(v26);
    *(_DWORD *)(a2 + 52) = 0;
    if (v5 == 3
      && v11 == 145636
      && v30 == 59616
      && v25 == 5920
      && *(_DWORD *)(a1 + 76) == 14564
      && *(_DWORD *)(a1 + 80) == 5308
      && !*(_DWORD *)(a1 + 84)
      && !*(_DWORD *)(a1 + 88))
    {
      *(_DWORD *)(a2 + 4) = 14;
    }
  }
  v45 = 0;
  v46 = ceil(v14);
  v47 = floor(v14);
  v48 = v26;
  v49 = a3;
  v50 = -v27.f64[0] / v15;
  v71 = v27.f64[0];
  while (2)
  {
    v51 = 0.0;
    v52 = (double)v45 * 0.0000000596046448;
    switch(v5)
    {
      case 0:
        if (v52 > 0.0 || v14 >= 0.0)
        {
          v53 = (double)v45 * 0.0000000596046448;
          goto LABEL_64;
        }
        goto LABEL_69;
      case 1:
        if (v52 >= v50)
          goto LABEL_59;
        goto LABEL_69;
      case 2:
        v54 = v39;
        if (v52 < v50)
          goto LABEL_65;
        v55 = v27.f64[0] + v15 * v52;
        if (v55 > 0.0 || v46 == v47)
        {
          v57 = pow(v55, v14);
          v27.f64[0] = v71;
          v54 = v39 + v57;
          goto LABEL_65;
        }
        goto LABEL_69;
      case 3:
        if (v52 < v72)
        {
          v54 = v39 * v52;
          goto LABEL_65;
        }
LABEL_59:
        v53 = v27.f64[0] + v15 * v52;
        if (v53 > 0.0 || v46 == v47)
        {
LABEL_64:
          v54 = pow(v53, v14);
          v27.f64[0] = v71;
          goto LABEL_65;
        }
        goto LABEL_69;
      case 4:
        if (v52 >= v72)
        {
          v61 = v27.f64[0] + v15 * v52;
          if (v61 <= 0.0 && v46 != v47)
            goto LABEL_69;
          v63 = pow(v61, v14);
          v27.f64[0] = v71;
          v54 = v48.f64[0] + v63;
        }
        else
        {
          v54 = v48.f64[1] + v39 * v52;
        }
LABEL_65:
        if (fabs(v54) == INFINITY || v54 >= 0.0 && (v51 = v54, v54 > 1.0))
          v51 = 1.0;
LABEL_69:
        v59 = vcvtmd_s64_f64(v51 * 16777216.0 + 0.5);
        *v49 = v59;
        v60 = 0x1000000;
        if (v59 <= 0x1000000)
        {
          if ((v59 & 0x80000000) == 0)
            goto LABEL_73;
          v60 = 0;
        }
        *v49 = v60;
LABEL_73:
        v45 += 4096;
        ++v49;
        if (v45 != 16781312)
          continue;
        if (v69)
        {
          if (v69 == 1)
          {
            v64 = a3[2056];
            memmove(a3 + 2058, a3 + 2057, 0x1FD8uLL);
            a3[2057] = v64;
            a3[2055] = v64;
          }
        }
        else
        {
          v65 = a3[4096];
          v66 = a3[1] - *a3;
          if (v66 < 0)
            v66 = *a3 - a3[1];
          if (v66 <= 0xFFF)
            a3[1] = *a3;
          v67 = v65 - a3[4095];
          if (v67 < 0)
            v67 = a3[4095] - v65;
          if (v67 <= 0xFFF)
            a3[4095] = v65;
        }
        return;
      default:
        goto LABEL_69;
    }
  }
}

int *MakeLookups(int *result)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;

  v1 = 0;
  v2 = 0x8000;
  do
  {
    v3 = (v2 >> 16) >> 12;
    v4 = (v2 >> 16) & 0xFFF;
    v5 = result[v3];
    if ((_DWORD)v4)
      v5 += (unint64_t)(v4 * (result[v3 + 1] - (uint64_t)v5) + 2048) >> 12;
    result[v1 + 4097] = v5 >> 12;
    ++v1;
    v2 += 0x101010100;
  }
  while (v1 != 256);
  v6 = result + 4353;
  v7 = 4097;
  do
  {
    v8 = *result++;
    *v6++ = (255 * v8 + 0x800000) >> 24;
    --v7;
  }
  while (v7);
  return result;
}

CFDataRef ColorSyncVerifyGenericLab(const ColorSyncProfile *a1)
{
  return verify_GenericLab(a1, 0);
}

CFDataRef ColorSyncVerifyDisplayP3ITU709(const ColorSyncProfile *a1)
{
  return verify_DisplayP3ITU709(a1, 0);
}

unint64_t ColorSyncVerifyCoreVideo709(const ColorSyncProfile *a1)
{
  return verify_CoreVideo709(a1, 0);
}

uint64_t ColorSyncVerifyAdobeRGB(const ColorSyncProfile *a1)
{
  return verify_AdobeRGB(a1, 0);
}

CFAllocatorRef ___ZL19CMMBytesDeallocatorv_block_invoke()
{
  CFAllocatorRef result;

  result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE38], &context);
  CMMBytesDeallocator(void)::cmmAllocator = (uint64_t)result;
  return result;
}

void CMMLut16Tag::~CMMLut16Tag(CMMLut16Tag *this)
{
  pthread_mutex_t **v1;

  CMMLut16Tag::~CMMLut16Tag(this);
  CMMBase::operator delete(v1);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E215C2F8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 13);
  if (v5)
  {
    v6 = v5[1];
    if (v6)
    {
      v7 = v6 - 1;
      v5[1] = v7;
      if (!v7)
        (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)this + 14);
  if (v8)
  {
    v9 = v8[1];
    if (v9)
    {
      v10 = v9 - 1;
      v8[1] = v10;
      if (!v10)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  CMMTag::~CMMTag(this);
}

void CMMLutAtoBTag::~CMMLutAtoBTag(CMMLutAtoBTag *this)
{
  pthread_mutex_t **v1;

  CMMLutTag::~CMMLutTag(this);
  CMMBase::operator delete(v1);
}

void CMMLutTag::~CMMLutTag(CMMLutTag *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E215FE20;
  v2 = (_QWORD *)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  CMMTag::~CMMTag(this);
}

void CMMTable::~CMMTable(CMMTable *this)
{
  pthread_mutex_t **v2;

  *(_QWORD *)this = off_1E215FE00;
  v2 = (pthread_mutex_t **)*((_QWORD *)this + 2);
  if (v2)
    CMMBase::operator delete(v2);
  CMMBase::operator delete((pthread_mutex_t **)this);
}

{
  pthread_mutex_t **v1;

  *(_QWORD *)this = off_1E215FE00;
  v1 = (pthread_mutex_t **)*((_QWORD *)this + 2);
  if (v1)
    CMMBase::operator delete(v1);
}

CFTypeRef create_GenericCMYKProfile()
{
  if (create_GenericCMYKProfile_predicate != -1)
    dispatch_once(&create_GenericCMYKProfile_predicate, &__block_literal_global_115);
  return CFRetain((CFTypeRef)create_GenericCMYKProfile_profile);
}

ColorSyncProfileRef __get_dispP3_profile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncDisplayP3Profile);
  get_dispP3_profile_dispP3 = (uint64_t)result;
  return result;
}

CFTypeRef create_DisplayP3Profile()
{
  if (create_DisplayP3Profile_predicate[0] != -1)
    dispatch_once(create_DisplayP3Profile_predicate, &__block_literal_global_117);
  return CFRetain((CFTypeRef)create_DisplayP3Profile_profile);
}

CFDataRef __getAdobeRGBData_block_invoke()
{
  CFDataRef result;

  if (getAdobeRGBProfile_predicate != -1)
    dispatch_once(&getAdobeRGBProfile_predicate, &__block_literal_global_364);
  result = ColorSyncProfileCopyData((ColorSyncProfileRef)getAdobeRGBProfile_adobeRGB, 0);
  getAdobeRGBData_adobeRGBData = (uint64_t)result;
  return result;
}

ColorSyncProfileRef __bt2020PQProfile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2020_PQProfile);
  bt2020PQProfile_profile = (uint64_t)result;
  return result;
}

CFTypeRef create_ITUR2020_PQProfile()
{
  if (create_ITUR2020_PQProfile_predicate != -1)
    dispatch_once(&create_ITUR2020_PQProfile_predicate, &__block_literal_global_149);
  return CFRetain((CFTypeRef)create_ITUR2020_PQProfile_profile);
}

ColorSyncProfileRef __getAdobeRGBProfile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncAdobeRGB1998Profile);
  getAdobeRGBProfile_adobeRGB = (uint64_t)result;
  return result;
}

CFTypeRef create_AdobeRGB1998Profile()
{
  if (create_AdobeRGB1998Profile_predicate != -1)
    dispatch_once(&create_AdobeRGB1998Profile_predicate, &__block_literal_global_127);
  return CFRetain((CFTypeRef)create_AdobeRGB1998Profile_profile);
}

ColorSyncProfileRef __bt2020HLGProfile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2020_HLGProfile);
  bt2020HLGProfile_profile = (uint64_t)result;
  return result;
}

CFTypeRef create_ITUR2020_HLGProfile()
{
  if (create_ITUR2020_HLGProfile_predicate != -1)
    dispatch_once(&create_ITUR2020_HLGProfile_predicate, &__block_literal_global_147);
  return CFRetain((CFTypeRef)create_ITUR2020_HLGProfile_profile);
}

CFDataRef __getGenericGrayGamma2_2Data_block_invoke()
{
  CFDataRef result;

  if (getGenericGrayGamma2_2Profile_predicate != -1)
    dispatch_once(&getGenericGrayGamma2_2Profile_predicate, &__block_literal_global_358);
  result = ColorSyncProfileCopyData((ColorSyncProfileRef)getGenericGrayGamma2_2Profile_genericGray2_2, 0);
  getGenericGrayGamma2_2Data_genericGray2_2Data = (uint64_t)result;
  return result;
}

ColorSyncProfileRef __getGenericGrayGamma2_2Profile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncGenericGrayGamma22Profile);
  getGenericGrayGamma2_2Profile_genericGray2_2 = (uint64_t)result;
  return result;
}

CFTypeRef create_GenericGrayGamma22Profile()
{
  if (create_GenericGrayGamma22Profile_predicate[0] != -1)
    dispatch_once(create_GenericGrayGamma22Profile_predicate, &__block_literal_global_111);
  return CFRetain((CFTypeRef)create_GenericGrayGamma22Profile_profile);
}

CFTypeRef create_ITUR709_HLGProfile()
{
  if (create_ITUR709_HLGProfile_predicate != -1)
    dispatch_once(&create_ITUR709_HLGProfile_predicate, &__block_literal_global_141);
  return CFRetain((CFTypeRef)create_ITUR709_HLGProfile_profile);
}

CFTypeRef create_ITUR2100_PQProfile()
{
  if (create_ITUR2100_PQProfile_predicate != -1)
    dispatch_once(&create_ITUR2100_PQProfile_predicate, &__block_literal_global_153);
  return CFRetain((CFTypeRef)create_ITUR2100_PQProfile_profile);
}

CFTypeRef create_GenericLabProfile()
{
  if (create_GenericLabProfile_predicate != -1)
    dispatch_once(&create_GenericLabProfile_predicate, &__block_literal_global_129);
  return CFRetain((CFTypeRef)create_GenericLabProfile_profile);
}

CFTypeRef create_DisplayP3_709OETFProfile()
{
  if (create_DisplayP3_709OETFProfile_predicate != -1)
    dispatch_once(&create_DisplayP3_709OETFProfile_predicate, &__block_literal_global_123);
  return CFRetain((CFTypeRef)create_DisplayP3_709OETFProfile_profile);
}

CFTypeRef create_ITUR2100_HLGProfile()
{
  if (create_ITUR2100_HLGProfile_predicate != -1)
    dispatch_once(&create_ITUR2100_HLGProfile_predicate, &__block_literal_global_151);
  return CFRetain((CFTypeRef)create_ITUR2100_HLGProfile_profile);
}

CFTypeRef create_DisplayP3_PQProfile()
{
  if (create_DisplayP3_PQProfile_predicate != -1)
    dispatch_once(&create_DisplayP3_PQProfile_predicate, &__block_literal_global_121);
  return CFRetain((CFTypeRef)create_DisplayP3_PQProfile_profile);
}

CFTypeRef create_DisplayP3_HLGProfile()
{
  if (create_DisplayP3_HLGProfile_predicate != -1)
    dispatch_once(&create_DisplayP3_HLGProfile_predicate, &__block_literal_global_119);
  return CFRetain((CFTypeRef)create_DisplayP3_HLGProfile_profile);
}

CFTypeRef create_ITUR2020sRGBGammaProfile()
{
  if (create_ITUR2020sRGBGammaProfile_predicate != -1)
    dispatch_once(&create_ITUR2020sRGBGammaProfile_predicate, &__block_literal_global_145);
  return CFRetain((CFTypeRef)create_ITUR2020sRGBGammaProfile_profile);
}

CFTypeRef create_ITUR709_PQProfile()
{
  if (create_ITUR709_PQProfile_predicate != -1)
    dispatch_once(&create_ITUR709_PQProfile_predicate, &__block_literal_global_139);
  return CFRetain((CFTypeRef)create_ITUR709_PQProfile_profile);
}

BOOL ColorSyncVerifyProfileByName(const void *a1, const ColorSyncProfile *a2)
{
  CFTypeID v4;
  uint64_t v5;
  const ColorSyncProfile *v6;
  const __CFData *v7;
  uint64_t v8;
  int v9;
  const __CFString *v10;
  __CFData *Data;

  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return 0;
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_PQProfile) == 1)
  {
    if (bt2020PQProfile_predicate != -1)
      dispatch_once(&bt2020PQProfile_predicate, &__block_literal_global_383);
    v5 = bt2020PQProfile_profile;
    v6 = a2;
    v7 = 0;
LABEL_13:
    v9 = 1;
    v10 = 0;
    return verify_hdr(v6, 0, v7, v5, v9, (uint64_t)v10);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_PQProfile) == 1)
  {
    if (displayP3PQ_CICP_tag_predicate != -1)
      dispatch_once(&displayP3PQ_CICP_tag_predicate, &__block_literal_global_385);
    v8 = displayP3PQ_CICP_tag_cicp;
    if (pre_cicp_DisplayP3PQProfile_predicate != -1)
      dispatch_once(&pre_cicp_DisplayP3PQProfile_predicate, &__block_literal_global_387);
    v5 = pre_cicp_DisplayP3PQProfile_profile;
    v6 = a2;
    v7 = (const __CFData *)v8;
    goto LABEL_13;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_HLGProfile) == 1)
  {
    if (bt2020HLGProfile_predicate != -1)
      dispatch_once(&bt2020HLGProfile_predicate, &__block_literal_global_389);
    v5 = bt2020HLGProfile_profile;
    v10 = CFSTR("aaOO");
    v6 = a2;
    v7 = 0;
    v9 = 2;
    return verify_hdr(v6, 0, v7, v5, v9, (uint64_t)v10);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_HLGProfile) == 1)
    return verify_displayP3_HLG(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_PQProfile) == 1)
    return verify_BT709_PQ(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_HLGProfile) == 1)
    return verify_BT709_HLG(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_sRGBGammaProfile) == 1)
  {
    Data = ColorSyncProfileGetData((uint64_t)a2);
    return verify_ITUR2020_sRGBGamma_data(Data);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_PQProfile) == 1)
    return verify_BT2100_PQ(a2);
  return CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_HLGProfile) == 1 && verify_BT2100_HLG(a2);
}

unint64_t verify_CoreVideo709(ColorSyncProfileRef prof, const __CFData *cf)
{
  unint64_t v2;
  const void *v4;
  CFTypeID v5;
  const UInt8 *BytePtr;
  const UInt8 *v7;
  CFTypeID v8;
  const UInt8 *v9;
  const UInt8 *v10;

  v2 = (unint64_t)cf;
  if (verify_CoreVideo709_predicate != -1)
  {
    dispatch_once(&verify_CoreVideo709_predicate, &__block_literal_global_368);
    if (v2)
      goto LABEL_3;
LABEL_5:
    v2 = (unint64_t)ColorSyncProfileCopyData(prof, 0);
    v4 = (const void *)v2;
    if (!v2)
      return v2;
    goto LABEL_6;
  }
  if (!cf)
    goto LABEL_5;
LABEL_3:
  v4 = 0;
LABEL_6:
  v5 = CFGetTypeID((CFTypeRef)v2);
  if (v5 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v2) >= verify_CoreVideo709_corevideo709_profile_data_length)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)verify_CoreVideo709_corevideo709_profile_data);
    v7 = CFDataGetBytePtr((CFDataRef)v2);
    if (!memcmp(BytePtr, v7, verify_CoreVideo709_corevideo709_profile_data_length))
    {
      v2 = 1;
      if (!v4)
        return v2;
      goto LABEL_14;
    }
  }
  v8 = CFGetTypeID((CFTypeRef)v2);
  if (v8 != CFDataGetTypeID()
    || CFDataGetLength((CFDataRef)v2) < verify_CoreVideo709_corevideo709_legacy_profile_data_length)
  {
    v2 = 0;
    if (!v4)
      return v2;
    goto LABEL_14;
  }
  v9 = CFDataGetBytePtr((CFDataRef)verify_CoreVideo709_corevideo709_legacy_profile_data);
  v10 = CFDataGetBytePtr((CFDataRef)v2);
  v2 = memcmp(v9, v10, verify_CoreVideo709_corevideo709_legacy_profile_data_length) == 0;
  if (v4)
LABEL_14:
    CFRelease(v4);
  return v2;
}

CFDataRef verify_DisplayP3ITU709(ColorSyncProfileRef prof, const __CFData *cf)
{
  CFDataRef v2;
  const void *v4;
  CFTypeID v5;
  const UInt8 *BytePtr;
  const UInt8 *v8;

  v2 = cf;
  if (verify_DisplayP3ITU709_predicate[0] != -1)
  {
    dispatch_once(verify_DisplayP3ITU709_predicate, &__block_literal_global_370);
    if (v2)
      goto LABEL_3;
LABEL_5:
    v2 = ColorSyncProfileCopyData(prof, 0);
    v4 = v2;
    if (!v2)
      return v2;
    goto LABEL_6;
  }
  if (!cf)
    goto LABEL_5;
LABEL_3:
  v4 = 0;
LABEL_6:
  v5 = CFGetTypeID(v2);
  if (v5 == CFDataGetTypeID() && CFDataGetLength(v2) >= verify_DisplayP3ITU709_displayP3ITU709_profile_data_length)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)verify_DisplayP3ITU709_displayP3ITU709_profile_data);
    v8 = CFDataGetBytePtr(v2);
    v2 = (CFDataRef)(memcmp(BytePtr, v8, verify_DisplayP3ITU709_displayP3ITU709_profile_data_length) == 0);
    if (!v4)
      return v2;
    goto LABEL_9;
  }
  v2 = 0;
  if (v4)
LABEL_9:
    CFRelease(v4);
  return v2;
}

CFDataRef verify_GenericLab(ColorSyncProfileRef prof, const __CFData *cf)
{
  CFDataRef v2;
  const void *v4;
  CFTypeID v5;
  const UInt8 *BytePtr;
  const UInt8 *v8;

  v2 = cf;
  if (verify_GenericLab_predicate != -1)
  {
    dispatch_once(&verify_GenericLab_predicate, &__block_literal_global_366);
    if (v2)
      goto LABEL_3;
LABEL_5:
    v2 = ColorSyncProfileCopyData(prof, 0);
    v4 = v2;
    if (!v2)
      return v2;
    goto LABEL_6;
  }
  if (!cf)
    goto LABEL_5;
LABEL_3:
  v4 = 0;
LABEL_6:
  v5 = CFGetTypeID(v2);
  if (v5 == CFDataGetTypeID() && CFDataGetLength(v2) >= verify_GenericLab_lab_profile_data_length)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)verify_GenericLab_lab_profile_data);
    v8 = CFDataGetBytePtr(v2);
    v2 = (CFDataRef)(memcmp(BytePtr, v8, verify_GenericLab_lab_profile_data_length) == 0);
    if (!v4)
      return v2;
    goto LABEL_9;
  }
  v2 = 0;
  if (v4)
LABEL_9:
    CFRelease(v4);
  return v2;
}

CFDataRef __getSRGBData_block_invoke()
{
  CFDataRef result;

  if (getSRGBProfile_predicate != -1)
    dispatch_once(&getSRGBProfile_predicate, &__block_literal_global_415);
  result = ColorSyncProfileCopyData((ColorSyncProfileRef)getSRGBProfile_sRGBProfile, 0);
  getSRGBData_sRGBData = (uint64_t)result;
  return result;
}

ColorSyncProfileRef __get_itu709_profile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncITUR709Profile);
  get_itu709_profile_itu709 = (uint64_t)result;
  return result;
}

CFTypeRef create_ITUR709Profile()
{
  if (create_ITUR709Profile_predicate != -1)
    dispatch_once(&create_ITUR709Profile_predicate, &__block_literal_global_137);
  return CFRetain((CFTypeRef)create_ITUR709Profile_profile);
}

BOOL verify_DisplayP3(ColorSyncProfileRef prof, const __CFData *cf)
{
  ColorSyncProfileRef v2;
  CFDataRef v3;
  CFDataRef v4;
  CFTypeID v5;
  const UInt8 *BytePtr;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  ColorSyncProfileRef v11;
  _BOOL8 v12;
  ColorSyncProfileRef v13;
  unint64_t v14;
  __CFString *v15;
  const void *Tag;
  const void *v17;
  const void *v18;
  int v19;
  CFTypeRef v21;
  unint64_t v22;
  __CFString *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  int v27;

  v2 = prof;
  if (cf)
  {
    v3 = cf;
    v4 = 0;
  }
  else
  {
    v3 = ColorSyncProfileCopyData(prof, 0);
    v4 = v3;
    if (!v3)
      return 0;
  }
  v5 = CFGetTypeID(v3);
  if (v5 == CFDataGetTypeID() && (CFDataGetLength(v3) == 536 || CFDataGetLength(v3) == 548))
  {
    BytePtr = CFDataGetBytePtr(v3);
    v7 = *(_QWORD *)(BytePtr + 84) == 0xC34785388EA3FDECLL && *(_QWORD *)(BytePtr + 92) == 0x2F18DA7A4FBDB46DLL;
    if (v7
      || (*(_QWORD *)(BytePtr + 84) == 0xCD46BD67980EBBE5
        ? (v8 = *(_QWORD *)(BytePtr + 92) == 0x98751BBD6E44BE4BLL)
        : (v8 = 0),
          v8
       || (*(_QWORD *)(BytePtr + 84) == 0x4D107F2582951ACALL
         ? (v9 = *(_QWORD *)(BytePtr + 92) == 0x8215EAD1D5139938)
         : (v9 = 0),
           v9
        || (*(_QWORD *)(BytePtr + 84) == 0xBC27C634E15DDCC1
          ? (v10 = *(_QWORD *)(BytePtr + 92) == 0xC7C26BEAD5AF03B7)
          : (v10 = 0),
            v10))))
    {
      v12 = 1;
      goto LABEL_35;
    }
    if (v2)
    {
      v11 = 0;
      goto LABEL_28;
    }
    v2 = (ColorSyncProfileRef)create(v3, 0, 0);
    v11 = v2;
    if (v2)
    {
LABEL_28:
      v13 = ColorSyncProfileCreateWithName(kColorSyncDisplayP3Profile);
      v14 = 0;
      while (1)
      {
        v15 = off_1E2161B30[v14];
        Tag = getTag((uint64_t)v2, v15);
        if (!Tag)
          break;
        v17 = Tag;
        v18 = getTag((uint64_t)v13, v15);
        v19 = CFEqual(v18, v17);
        if (v14 <= 4)
        {
          ++v14;
          if (v19)
            continue;
        }
        if (v19)
        {
          v12 = 1;
          goto LABEL_46;
        }
        break;
      }
      if (create_DisplayP3_legacy_Profile_predicate != -1)
        dispatch_once(&create_DisplayP3_legacy_Profile_predicate, &__block_literal_global_107);
      v21 = CFRetain((CFTypeRef)create_DisplayP3_legacy_Profile_profile);
      v22 = 0;
      while (1)
      {
        v23 = off_1E2161B30[v22];
        v24 = getTag((uint64_t)v2, v23);
        if (!v24)
          break;
        v25 = v24;
        v26 = getTag((uint64_t)v21, v23);
        v27 = CFEqual(v26, v25);
        v12 = v27 != 0;
        if (v22 <= 4)
        {
          ++v22;
          if (v27)
            continue;
        }
        goto LABEL_46;
      }
      v12 = 0;
LABEL_46:
      if (v11)
        CFRelease(v11);
      goto LABEL_35;
    }
  }
  v12 = 0;
LABEL_35:
  if (v4)
    CFRelease(v4);
  return v12;
}

ColorSyncProfileRef __getSRGBProfile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncSRGBProfile);
  getSRGBProfile_sRGBProfile = (uint64_t)result;
  return result;
}

ColorSyncProfileRef ColorSyncProfileCreateWithName(CFStringRef name)
{
  CFStringRef *v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t (*Value)(void);

  if (!name)
    return 0;
  if (ColorSyncProfileCreateWithName_predicate != -1)
    dispatch_once(&ColorSyncProfileCreateWithName_predicate, &__block_literal_global_845);
  v2 = (CFStringRef *)ColorSyncProfileCreateWithName_name_creator_pair_array;
  v3 = 28;
  if (!ColorSyncProfileCreateWithName_name_creator_pair_count)
    v3 = 0;
  while (v3)
  {
    if (*v2 == name)
    {
      v3 = 0;
LABEL_19:
      Value = (uint64_t (*)(void))v2[2 * v3 + 1];
      if (Value)
        return (ColorSyncProfileRef)Value();
      break;
    }
    v4 = v3--;
    v5 = v2[2 * v3];
    if (v5 == name)
      goto LABEL_19;
    v3 = v4 >> 1;
    v6 = v2[2 * (v4 >> 1)];
    if (v6 == name)
      goto LABEL_19;
    if (*v2 >= name || v6 <= name)
    {
      v2 += 2 * v3;
      v3 = v4 - v3;
      if (v5 <= name || v6 >= name)
        break;
    }
  }
  Value = (uint64_t (*)(void))CFDictionaryGetValue((CFDictionaryRef)ColorSyncProfileCreateWithName_name_to_function_map, name);
  if (!Value)
    return 0;
  return (ColorSyncProfileRef)Value();
}

CFTypeRef create_sRGBProfile()
{
  if (create_sRGBProfile_predicate != -1)
    dispatch_once(&create_sRGBProfile_predicate, &__block_literal_global_125);
  return CFRetain((CFTypeRef)create_sRGBProfile_profile);
}

CFDataRef ColorSyncProfileCopyTag(ColorSyncProfileRef prof, CFStringRef signature)
{
  CFTypeID v4;
  const __CFData *Tag;
  const __CFData *Copy;

  if (!prof)
    return 0;
  v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
  Tag = (const __CFData *)getTag((uint64_t)prof, (void *)signature);
  if (Tag)
    Copy = CFDataCreateCopy(0, Tag);
  else
    Copy = 0;
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  return Copy;
}

CFTypeRef create_CoreVideoLegacy709Profile()
{
  if (create_CoreVideoLegacy709Profile_predicate != -1)
    dispatch_once(&create_CoreVideoLegacy709Profile_predicate, &__block_literal_global_161);
  return CFRetain((CFTypeRef)create_CoreVideoLegacy709Profile_profile);
}

CFTypeRef create_CoreVideo709Profile()
{
  if (create_CoreVideo709Profile_predicate != -1)
    dispatch_once(&create_CoreVideo709Profile_predicate, &__block_literal_global_159);
  return CFRetain((CFTypeRef)create_CoreVideo709Profile_profile);
}

BOOL verify_GenericGrayGamma2_2(const ColorSyncProfile *a1, const __CFData *cf)
{
  const __CFData *v4;
  const __CFData *v5;
  BOOL v6;
  const UInt8 *BytePtr;
  size_t Length;
  const UInt8 *v9;
  _BOOL8 v10;
  const ColorSyncProfile *v11;
  const __CFData *Tag;
  const __CFData *v13;
  __CFData *v14;
  __CFData *v15;
  const UInt8 *v16;
  const __CFData *v17;
  const __CFData *v18;
  const UInt8 *v19;
  unint64_t v20;
  const UInt8 *v21;
  size_t v22;

  if (getGenericGrayGamma2_2Data_predicate != -1)
    dispatch_once(&getGenericGrayGamma2_2Data_predicate, &__block_literal_global_356);
  v4 = (const __CFData *)getGenericGrayGamma2_2Data_genericGray2_2Data;
  if (cf)
  {
    v5 = 0;
  }
  else
  {
    cf = ColorSyncProfileCopyData(a1, 0);
    v5 = cf;
  }
  if (v4)
    v6 = cf == 0;
  else
    v6 = 1;
  if (v6
    || (BytePtr = CFDataGetBytePtr(v4),
        Length = CFDataGetLength(v4),
        v9 = CFDataGetBytePtr(cf),
        CFDataGetLength(cf) < Length))
  {
    v10 = 0;
    if (!v4)
      goto LABEL_36;
  }
  else
  {
    v10 = memcmp(BytePtr, v9, Length) == 0;
    if (!v4)
      goto LABEL_36;
  }
  if (!v10 && cf)
  {
    if (a1)
    {
      v11 = 0;
    }
    else
    {
      v11 = (const ColorSyncProfile *)create(cf, 0, 0);
      a1 = v11;
      if (!v11)
        goto LABEL_36;
    }
    Tag = (const __CFData *)getTag((uint64_t)a1, CFSTR("kTRC"));
    if (Tag)
    {
      v13 = Tag;
      v14 = copyHeaderData((uint64_t)a1);
      if (v14)
      {
        v15 = v14;
        v16 = CFDataGetBytePtr(v14);
        if (v16 && *((_DWORD *)v16 + 4) == 1196573017)
        {
          if (getGenericGrayGamma2_2Profile_predicate != -1)
            dispatch_once(&getGenericGrayGamma2_2Profile_predicate, &__block_literal_global_358);
          v17 = (const __CFData *)getTag(getGenericGrayGamma2_2Profile_genericGray2_2, CFSTR("kTRC"));
          if (v17)
          {
            v18 = v17;
            v19 = CFDataGetBytePtr(v13);
            v20 = CFDataGetLength(v13);
            v21 = CFDataGetBytePtr(v18);
            v22 = CFDataGetLength(v18);
            if (v20 >= v22 && v19 && v21)
              v10 = memcmp(v21, v19, v22) == 0;
            if (!v10 && v20 >= 0xE)
              v10 = AppleCMMVerifySRGBGamma(v13);
          }
        }
        CFRelease(v15);
      }
    }
    if (v11)
      CFRelease(v11);
  }
LABEL_36:
  if (v5)
    CFRelease(v5);
  return v10;
}

unint64_t verify_sRGB(ColorSyncProfileRef prof, CFDataRef cf)
{
  CFDataRef v3;
  unint64_t v4;
  const ColorSyncProfile *v5;
  const ColorSyncProfile *v6;

  if (cf)
  {
    v3 = 0;
    if (prof)
      goto LABEL_3;
  }
  else
  {
    cf = ColorSyncProfileCopyData(prof, 0);
    v3 = cf;
    if (prof)
    {
LABEL_3:
      v4 = verifyProfileAgainstSRGB(prof);
      if (!v3)
        return v4;
      goto LABEL_8;
    }
  }
  v5 = (const ColorSyncProfile *)create(cf, 0, 0);
  if (!v5)
  {
    v4 = 0;
    if (!v3)
      return v4;
    goto LABEL_8;
  }
  v6 = v5;
  v4 = verifyProfileAgainstSRGB(v5);
  CFRelease(v6);
  if (v3)
LABEL_8:
    CFRelease(v3);
  return v4;
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  ColorSyncMutableProfileRef result;
  ColorSyncMutableProfileRef v2;
  ColorSyncProfile *v3;

  result = ColorSyncProfileCopyData(prof, 0);
  if (result)
  {
    v2 = result;
    v3 = (ColorSyncProfile *)create(result, 1, 0);
    CFRelease(v2);
    return v3;
  }
  return result;
}

ColorSyncProfile *ColorSyncProfileCreateSanitizedCopy(ColorSyncProfileRef prof, CFErrorRef *a2, CFErrorRef *a3)
{
  ColorSyncProfileRef v5;
  ColorSyncMutableProfileRef MutableCopy;
  ColorSyncProfile *v7;
  __CFData *v8;
  const __CFData *v9;
  UInt8 *MutableBytePtr;
  ColorSyncProfile *Profile;
  CFDictionaryRef v13;
  void *values[3];
  void *keys[2];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
    *(_BYTE *)a2 = 0;
  if (!ColorSyncProfileVerify(prof, a2, a3))
    return 0;
  if (verifyProfileAgainstSRGB(prof))
  {
    *(_BYTE *)a2 = 1;
    if (getSRGBProfile_predicate != -1)
      dispatch_once(&getSRGBProfile_predicate, &__block_literal_global_415);
    v5 = (ColorSyncProfileRef)getSRGBProfile_sRGBProfile;
    return (ColorSyncProfile *)CFRetain(v5);
  }
  MutableCopy = ColorSyncProfileCreateMutableCopy(prof);
  if (!MutableCopy)
    return 0;
  v7 = MutableCopy;
  v8 = copyHeaderData((uint64_t)MutableCopy);
  if (v8)
  {
    v9 = v8;
    MutableBytePtr = CFDataGetMutableBytePtr(v8);
    if (MutableBytePtr)
    {
      if (!(*((_DWORD *)MutableBytePtr + 2) >> 26))
      {
        *((_OWORD *)MutableBytePtr + 7) = 0u;
        *(_OWORD *)(MutableBytePtr + 100) = 0u;
        *(_OWORD *)(MutableBytePtr + 84) = 0u;
      }
      *((_DWORD *)MutableBytePtr + 19) = 54061;
      *(_QWORD *)(MutableBytePtr + 68) = 0x100000000F6D6;
      ColorSyncProfileSetHeader(v7, v9);
    }
    CFRelease(v9);
  }
  if (colorSyncProfileEqual(prof, v7))
  {
    CFRelease(v7);
    v5 = prof;
    return (ColorSyncProfile *)CFRetain(v5);
  }
  *(_OWORD *)keys = xmmword_1E2160F90;
  v16 = 0;
  values[0] = CFSTR("appleCopy");
  values[1] = v7;
  values[2] = 0;
  v13 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, 0, 0);
  Profile = ColorSyncMakeProfile(v13);
  if (v13)
    CFRelease(v13);
  CFRelease(v7);
  if (!Profile)
    return (ColorSyncProfile *)CFRetain(prof);
  return Profile;
}

BOOL ColorSyncProfileVerify(ColorSyncProfileRef prof, CFErrorRef *errors, CFErrorRef *warnings)
{
  ColorSyncProfileRef v3;
  CFTypeID v4;
  int v5;
  pthread_mutex_t *v6;
  char v7;

  if (prof)
  {
    v3 = prof;
    v4 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      v5 = *((_DWORD *)v3 + 37);
      if (v5 == 2)
      {
        LOBYTE(prof) = 1;
      }
      else if (v5)
      {
        v6 = (pthread_mutex_t *)((char *)v3 + 24);
        pthread_mutex_lock((pthread_mutex_t *)((char *)v3 + 24));
        v7 = AppleCMMValidateProfile(v3);
        pthread_mutex_unlock(v6);
        LOBYTE(prof) = v7;
      }
      else
      {
        LOBYTE(prof) = *((_BYTE *)v3 + 144) != 0;
      }
    }
    else
    {
      LOBYTE(prof) = 0;
    }
  }
  return (char)prof;
}

unint64_t verifyProfileAgainstSRGB(ColorSyncProfileRef prof)
{
  const __CFData *v2;
  CFDataRef v3;
  const __CFData *v4;
  BOOL v5;
  unint64_t Tag;
  const UInt8 *BytePtr;
  size_t Length;
  const UInt8 *v9;
  unint64_t v10;
  __CFString *v11;
  const __CFData *v12;
  const __CFData *v13;
  const UInt8 *v14;
  unint64_t v15;
  const UInt8 *v16;
  size_t v17;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;

  if (getSRGBData_predicate[0] != -1)
    dispatch_once(getSRGBData_predicate, &__block_literal_global_413);
  v2 = (const __CFData *)getSRGBData_sRGBData;
  v3 = ColorSyncProfileCopyData(prof, 0);
  v4 = v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    BytePtr = CFDataGetBytePtr(v2);
    Length = CFDataGetLength(v2);
    v9 = CFDataGetBytePtr(v4);
    Tag = CFDataGetLength(v4) >= Length && memcmp(BytePtr, v9, Length) == 0;
LABEL_14:
    CFRelease(v4);
    if (!prof)
      return Tag;
    goto LABEL_15;
  }
  Tag = 0;
  if (v3)
    goto LABEL_14;
  if (!prof)
    return Tag;
LABEL_15:
  if ((Tag & 1) == 0)
  {
    v10 = 0;
    while (1)
    {
      v11 = off_1E2161B30[v10];
      Tag = (unint64_t)getTag((uint64_t)prof, v11);
      if (!Tag)
        return Tag;
      if (getSRGBProfile_predicate != -1)
        dispatch_once(&getSRGBProfile_predicate, &__block_literal_global_415);
      v12 = (const __CFData *)getTag(getSRGBProfile_sRGBProfile, v11);
      if (!v12)
        return 0;
      v13 = v12;
      v14 = CFDataGetBytePtr((CFDataRef)Tag);
      v15 = CFDataGetLength((CFDataRef)Tag);
      v16 = CFDataGetBytePtr(v13);
      v17 = CFDataGetLength(v13);
      if (v15 < v17 || v14 == 0 || v16 == 0)
      {
        v22 = 0;
      }
      else
      {
        v20 = memcmp(v16, v14, v17);
        v21 = v20 != 0;
        v22 = v20 == 0;
        if (!v21)
        {
LABEL_34:
          if ((v10 - 3) <= 2 && !v22 && v15 >= 0xF)
            v22 = AppleCMMVerifySRGBGamma((const __CFData *)Tag);
          goto LABEL_38;
        }
      }
      if (v15 < 0x14 || v10 > 2)
        goto LABEL_34;
      v22 = memcmp(off_1E2161BF8[v10], v14, v17) == 0;
LABEL_38:
      Tag = v22;
      if (v10 <= 4)
      {
        ++v10;
        if (v22)
          continue;
      }
      return Tag;
    }
  }
  return Tag;
}

CFDataRef ColorSyncProfileCopyData(ColorSyncProfileRef prof, CFErrorRef *error)
{
  CFTypeID v4;
  const void *v5;
  __CFData *ProfileData;
  const __CFData *v7;
  vm_address_t BytePtr;
  unint64_t Length;
  unint64_t v11;
  void *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  vm_address_t v16;
  char *v17;
  BOOL v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFAllocatorContext context;

  if (!prof)
    goto LABEL_10;
  v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
  {
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  if (*((_DWORD *)prof + 37) == 1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
    v5 = (const void *)*((_QWORD *)prof + 13);
    if (v5)
      CFRelease(v5);
    ProfileData = createProfileData((CFDictionaryRef *)prof);
    *((_QWORD *)prof + 13) = ProfileData;
    if (!ProfileData)
      goto LABEL_17;
  }
  else
  {
    ProfileData = (__CFData *)*((_QWORD *)prof + 13);
    if (!ProfileData)
      goto LABEL_17;
  }
  if (CFDataGetLength(ProfileData) >= 1)
  {
    BytePtr = (vm_address_t)CFDataGetBytePtr(*((CFDataRef *)prof + 13));
    Length = CFDataGetLength(*((CFDataRef *)prof + 13));
    if (!(Length >> 31))
    {
      v11 = Length;
      v12 = 0;
      v13 = 0;
      if (BytePtr && Length)
      {
        v14 = (_QWORD *)MEMORY[0x1E0C85AD8];
        v15 = -*MEMORY[0x1E0C85AD8];
        v16 = v15 & BytePtr;
        v12 = (void *)(((BytePtr + Length + *MEMORY[0x1E0C85AD8] - 1) & v15) - (v15 & BytePtr));
        v17 = (char *)mmap(0, (size_t)v12, 3, 4098, 1744830464, 0);
        if (v17 == (char *)-1)
        {
          v12 = 0;
          v13 = 0;
        }
        else
        {
          v13 = &v17[BytePtr - v16];
          v18 = v11 > 4 * *v14;
          v19 = (unsigned int *)MEMORY[0x1E0C83DA0];
          if (!v18 || vm_copy(*MEMORY[0x1E0C83DA0], BytePtr, v11, (vm_address_t)v13))
            memcpy(v13, (const void *)BytePtr, v11);
          if (MEMORY[0x18D779970](*v19, v13, v11, 1, 1))
            ColorSyncLog(2, (uint64_t)"%s: vm_protect failed: status %d.", v20, v21, v22, v23, v24, v25, (char)"copy_read_only");
        }
      }
      if (v13 == (char *)BytePtr)
      {
        v7 = CFDataCreate(0, (const UInt8 *)BytePtr, v11);
      }
      else
      {
        context.version = 0;
        memset(&context.retain, 0, 40);
        context.info = v12;
        context.deallocate = (CFAllocatorDeallocateCallBack)vm_allocator_deallocate;
        context.preferredSize = 0;
        v26 = CFAllocatorCreate(0, &context);
        v7 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v13, v11, v26);
        CFRelease(v26);
      }
      goto LABEL_18;
    }
  }
LABEL_17:
  v7 = 0;
LABEL_18:
  if (*((_DWORD *)prof + 37) == 1)
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
LABEL_11:
  if (error)
    *error = 0;
  return v7;
}

BOOL colorSyncProfileEqual(const ColorSyncProfile *a1, const ColorSyncProfile *a2)
{
  __CFData *Data;
  __CFData *v5;
  const __CFData *v6;
  CFIndex Length;
  ColorSyncMD5 MD5;
  ColorSyncMD5 v9;

  Data = ColorSyncProfileGetData((uint64_t)a1);
  v5 = ColorSyncProfileGetData((uint64_t)a2);
  if (Data)
  {
    v6 = v5;
    if (v5)
    {
      Length = CFDataGetLength(Data);
      if (Length != CFDataGetLength(v6))
        return 0;
    }
  }
  MD5 = ColorSyncProfileGetMD5(a1);
  v9 = ColorSyncProfileGetMD5(a2);
  return *(_QWORD *)MD5.digest == *(_QWORD *)v9.digest && *(_QWORD *)&MD5.digest[8] == *(_QWORD *)&v9.digest[8];
}

__CFData *ColorSyncProfileGetData(uint64_t a1)
{
  CFTypeID v2;
  const void *v3;
  __CFData *ProfileData;

  if (!a1)
    return 0;
  v2 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  if (*(_DWORD *)(a1 + 148) != 1)
    return *(__CFData **)(a1 + 104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v3 = *(const void **)(a1 + 104);
  if (v3)
    CFRelease(v3);
  ProfileData = createProfileData((CFDictionaryRef *)a1);
  *(_QWORD *)(a1 + 104) = ProfileData;
  if (*(_DWORD *)(a1 + 148) == 1)
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  return ProfileData;
}

BOOL AppleCMMVerifySRGBGamma(const __CFData *a1)
{
  unsigned int *BytePtr;
  CFIndex Length;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int v6;
  CMMCurveTag *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;

  BytePtr = (unsigned int *)CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v4 = 0;
  if (BytePtr)
  {
    v5 = Length;
    if (Length)
    {
      v19 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v19);
      v6 = bswap32(*BytePtr);
      if (v6 == 1668641398)
      {
        v7 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, (_QWORD **)&v19);
        CMMCurveTag::CMMCurveTag(v7, 0, (uint64_t)BytePtr, v5, 0);
      }
      else
      {
        if (v6 != 1885434465)
        {
          v4 = 0;
LABEL_18:
          CMMMemMgr::ReleaseMemList(&v19);
          return v4;
        }
        v7 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, (_QWORD **)&v19);
        CMMParaCurveTag::CMMParaCurveTag(v7, 0, (uint64_t)BytePtr, v5, 0);
      }
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      LODWORD(v15) = 1;
      v8 = (_QWORD *)(*(uint64_t (**)(CMMCurveTag *, __int128 *, void **, _QWORD, float))(*(_QWORD *)v7 + 64))(v7, &v15, &v19, 0, 1.0);
      if (v8)
      {
        v4 = DWORD1(v15) == 1;
        v9 = v8[1];
        if (v9)
        {
          v10 = v9 - 1;
          v8[1] = v10;
          if (!v10)
            (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        }
      }
      else
      {
        v4 = 0;
      }
      v11 = v16;
      if ((_QWORD)v16)
      {
        v12 = *(_QWORD *)(v16 + 8);
        if (v12)
        {
          v13 = v12 - 1;
          *(_QWORD *)(v16 + 8) = v13;
          if (!v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
      }
      (*(void (**)(CMMCurveTag *))(*(_QWORD *)v7 + 8))(v7);
      goto LABEL_18;
    }
  }
  return v4;
}

void sub_18B3B8BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CMMMemMgr::ReleaseMemList((void **)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t CMMLutTag::CMMLutTag(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD **a5, unsigned int a6, unsigned int a7)
{
  unint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint32x4_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t i;
  int v73;
  uint64_t v74;
  float v75;
  int v76;
  float v77;
  uint64_t v78;
  uint64_t j;
  _QWORD *v80;
  _DWORD *exception;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;

  *(_QWORD *)(a1 + 32) = 0;
  v12 = (unint64_t *)(a1 + 32);
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a4;
  if (a4)
    *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)a1 = off_1E215FE20;
  v13 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 32) = v13;
  if ((unint64_t)v13 <= 0x20)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v14 = (unsigned __int8 *)(a1 + 52);
  if (*(_QWORD *)(a3 + 32))
  {
    if (v13 >= 36)
      v15 = 28;
    else
      v15 = v13 - 8;
    if (v15 <= 0)
      v16 = 4294967126;
    else
      v16 = 0;
    CMMThrowExceptionOnError(v16);
    memcpy((void *)(a1 + 52), (const void *)(*(_QWORD *)(a3 + 32) + 8), v15);
  }
  v17 = 56;
  do
  {
    *(_DWORD *)(a1 + v17) = bswap32(*(_DWORD *)(a1 + v17));
    v17 += 4;
  }
  while ((_DWORD)v17 != 76);
  CMMThrowExceptionOnCondition(*v14 - 16 < 0xFFFFFFF1);
  CMMThrowExceptionOnCondition(*(unsigned __int8 *)(a1 + 53) - 16 < 0xFFFFFFF1);
  v18 = *(uint32x4_t *)(a1 + 56);
  LODWORD(v19) = *(_DWORD *)(a1 + 72);
  v20 = vmaxvq_u32(v18);
  if (v20 <= v19)
    v19 = v19;
  else
    v19 = v20;
  if (*(_QWORD *)(a1 + 32) <= v19)
  {
    v83 = __cxa_allocate_exception(4uLL);
    *v83 = -171;
  }
  *(_DWORD *)(a1 + 104) = 0;
  v21 = v18.u32[3];
  v22 = (_QWORD *)(a1 + 80);
  if (v18.i32[3])
  {
    if (*(_QWORD *)(a3 + 32))
    {
      v23 = *(_QWORD *)(a3 + 40);
      if (v18.u32[3] + 21 <= v23)
        v24 = 21;
      else
        v24 = v23 - v18.u32[3];
      if (v24 <= 0)
        v25 = 4294967126;
      else
        v25 = 0;
      CMMThrowExceptionOnError(v25);
      memcpy((void *)(a1 + 80), (const void *)(*(_QWORD *)(a3 + 32) + v21), v24);
    }
    v26 = *(unsigned __int8 *)(a1 + 52);
    v27 = *(unsigned __int8 *)(a1 + 53);
    if (*(unsigned __int8 *)(a1 + 96) - 1 >= 2)
      v28 = 4294967126;
    else
      v28 = 0;
    CMMThrowExceptionOnError(v28);
    v87 = a6;
    v29 = a7;
    v30 = *(unsigned __int8 *)v22;
    if (v26 >= 2)
    {
      v31 = v26 - 1;
      v32 = (unsigned __int8 *)(a1 + 81);
      do
      {
        if (v30)
        {
          v33 = (v30 * (unsigned __int128)*v32) >> 64;
          v30 *= *v32;
          if (v33)
            v34 = 4294967126;
          else
            v34 = 0;
        }
        else
        {
          v34 = 0;
        }
        CMMThrowExceptionOnError(v34);
        ++v32;
        --v31;
      }
      while (v31);
    }
    if (v30)
    {
      v35 = *(unsigned __int8 *)(a1 + 96) * (unint64_t)v27;
      v36 = v35 * v30;
      if (is_mul_ok(v30, v35))
        v37 = 0;
      else
        v37 = 4294967126;
    }
    else
    {
      v36 = 0;
      v37 = 0;
    }
    a7 = v29;
    CMMThrowExceptionOnError(v37);
    a6 = v87;
    if (v36)
      v39 = 0;
    else
      v39 = 4294967126;
    CMMThrowExceptionOnError(v39);
    v40 = (*(_DWORD *)(a1 + 68) + 20);
    if (*(_QWORD *)(a1 + 32) < (unint64_t)(v36 + v40))
    {
      v86 = __cxa_allocate_exception(4uLL);
      *v86 = -171;
    }
    v41 = CMMBase::NewInternal(0x28uLL, a5);
    v42 = *(_QWORD *)(a3 + 32);
    if (v42)
    {
      v43 = *(_QWORD *)(a3 + 40);
      if (v36 + v40 <= v43)
        v44 = v36;
      else
        v44 = v43 - v40;
      if (v44 <= 0)
        v45 = 4294967126;
      else
        v45 = 0;
      CMMThrowExceptionOnError(v45);
      v42 = *(_QWORD *)(a3 + 32) + v40;
    }
    *v41 = off_1E215FE00;
    v41[1] = 1;
    v41[3] = v42;
    v41[4] = v36;
    v41[2] = 0;
    *(_QWORD *)(a1 + 112) = v41;
    v38 = v36 + 20;
    v46 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)(a1 + 104) = v46;
    v47 = *(unsigned __int8 *)(a1 + 52);
    if (v47 >= 2)
    {
      v48 = (unsigned __int8 *)(a1 + 81);
      v49 = v47 - 1;
      while (1)
      {
        v50 = *v48++;
        if (v46 != v50)
          break;
        if (!--v49)
          goto LABEL_62;
      }
      *(_DWORD *)(a1 + 104) = 0;
    }
  }
  else
  {
    v38 = 0;
    *v22 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 93) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
LABEL_62:
  v89 = 0;
  v88 = 0;
  CMMLutTag::InitializeCurveTable(a1, (_DWORD *)(a1 + 488), a5, a6, *(_DWORD *)(a1 + 72), a3, (_DWORD *)&v89 + 1);
  CMMLutTag::InitializeCurveTable(a1, (_DWORD *)(a1 + 216), a5, a7, *(_DWORD *)(a1 + 56), a3, &v89);
  CMMLutTag::InitializeCurveTable(a1, (_DWORD *)(a1 + 352), a5, 3u, *(_DWORD *)(a1 + 64), a3, &v88);
  v51 = *(_DWORD *)(a1 + 72);
  v52 = *(_DWORD *)(a1 + 56);
  v53 = *(_DWORD *)(a1 + 64);
  if (v51 == v52)
  {
    v55 = v89;
    v54 = HIDWORD(v89);
    if (v51 == v53)
    {
      v56 = 0;
      v57 = 0;
      if (v89 <= v88)
        v55 = v88;
      if (HIDWORD(v89) <= v55)
        v54 = v55;
    }
    else
    {
      v57 = 0;
      if (HIDWORD(v89) <= v89)
        v54 = v89;
      v56 = v88;
    }
  }
  else
  {
    if (v89 <= v88)
      v58 = v88;
    else
      v58 = v89;
    v59 = v52 == v53;
    if (v52 == v53)
      v56 = 0;
    else
      v56 = v88;
    if (v59)
      v57 = v58;
    else
      v57 = v89;
    v54 = HIDWORD(v89);
  }
  v60 = v57 + v54 + v56;
  v61 = *v12;
  v62 = v38 + v60 + 32;
  if (*v12 < v62)
  {
    v84 = __cxa_allocate_exception(4uLL);
    *v84 = -171;
  }
  v63 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v63)
  {
    if (*(_QWORD *)(a3 + 40) >= (unint64_t)(v63 + 48))
      v64 = 0;
    else
      v64 = 4294967294;
    CMMThrowExceptionOnError(v64);
    v65 = *(_QWORD *)(a3 + 32);
    if (v65)
    {
      v66 = *(_QWORD *)(a3 + 40);
      if (v66 - v63 > 0 || v63 + 48 <= v66)
        v68 = 0;
      else
        v68 = 4294967126;
      CMMThrowExceptionOnError(v68);
      v65 = *(_QWORD *)(a3 + 32) + v63;
    }
    v69 = 0;
    v70 = 0;
    v71 = a1;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v73 = bswap32(*(_DWORD *)(v65 + 4 * (v70 + i)));
        v74 = v71 + 4 * i;
        *(_DWORD *)(v74 + 120) = v73;
        v75 = (double)v73 * 0.0000152587891;
        *(float *)(v74 + 168) = v75;
      }
      v70 += 3;
      v76 = bswap32(*(_DWORD *)(v65 + 4 * v69 + 36));
      *(_DWORD *)(a1 + 120 + 16 * v69 + 12) = v76;
      v77 = (double)v76 * 0.0000152587891;
      *(float *)(a1 + 16 * v69++ + 180) = v77;
      v71 += 16;
    }
    while (v69 != 3);
    v61 = *v12;
    v78 = 48;
  }
  else
  {
    for (j = 0; j != 48; j += 16)
    {
      v80 = (_QWORD *)(a1 + j);
      v80[15] = 0;
      v80[16] = 0;
      v80[21] = 0;
      v80[22] = 0;
    }
    v78 = 0;
    *(_DWORD *)(a1 + 160) = 0x10000;
    *(_DWORD *)(a1 + 140) = 0x10000;
    *(_DWORD *)(a1 + 120) = 0x10000;
    *(_DWORD *)(a1 + 208) = 1065353216;
    *(_DWORD *)(a1 + 188) = 1065353216;
    *(_DWORD *)(a1 + 168) = 1065353216;
  }
  if (v61 < v62 + v78)
  {
    v85 = __cxa_allocate_exception(4uLL);
    *v85 = -171;
  }
  return a1;
}

void sub_18B3B91CC(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMThrowExceptionOnCondition(uint64_t result)
{
  _DWORD *exception;

  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -170;
  }
  return result;
}

BOOL verify_hdr(ColorSyncProfileRef a1, CFTypeRef cf, const __CFData *a3, uint64_t a4, int a5, uint64_t a6)
{
  const ColorSyncProfile *v10;
  const ColorSyncProfile *v11;
  const UInt8 *Tag;
  const __CFData *v13;
  const UInt8 *BytePtr;
  const UInt8 *v15;
  _BOOL8 v16;
  unint64_t v17;
  __CFString *v18;
  const __CFData *v19;
  const __CFData *v20;
  BOOL v21;
  const __CFData *v22;
  const __CFData *v23;
  const __CFData *v24;
  unint64_t v25;
  const __CFData *v26;
  const __CFData *v27;
  const UInt8 *v28;
  BOOL v29;
  int v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  _BOOL4 v34;
  const __CFData *v35;
  const __CFData *v36;
  const UInt8 *v37;
  char v40;

  if (a1)
  {
    v10 = a1;
    v11 = 0;
  }
  else
  {
    v10 = (const ColorSyncProfile *)create(cf, 0, 0);
    v11 = v10;
  }
  if (ColorSyncProfileIsHLGBased(v10) || ColorSyncProfileIsPQBased(v10))
  {
    Tag = (const UInt8 *)ColorSyncProfileGetTag((uint64_t)v10, CFSTR("cicp"));
    v40 = 0;
    if (a3)
    {
      v13 = (const __CFData *)Tag;
      if (Tag)
      {
        if (valid_cicp_tag(Tag, &v40))
        {
          BytePtr = CFDataGetBytePtr(a3);
          v15 = CFDataGetBytePtr(v13);
          v16 = 0;
          if (BytePtr && v15)
            return BytePtr[8] == v15[8] && BytePtr[10] == v15[10] && BytePtr[9] == v15[9] && BytePtr[11] == v15[11];
          return v16;
        }
      }
    }
    if (v10)
    {
      v17 = 0;
      while (1)
      {
        v18 = off_1E2161700[v17];
        v19 = (const __CFData *)getTag((uint64_t)v10, v18);
        if (!v19)
        {
          v19 = (const __CFData *)getTag((uint64_t)v10, off_1E21616E8[v17]);
          if (!v19)
            break;
        }
        v20 = (const __CFData *)getTag(a4, v18);
        if (!v20)
          break;
        v21 = tags_are_equal(v19, v20);
        if (v17 <= 1)
        {
          ++v17;
          if (v21)
            continue;
        }
        if (!v21)
          break;
        v22 = (const __CFData *)getTag((uint64_t)v10, CFSTR("hdTF"));
        if (v22)
        {
          v23 = v22;
          v24 = (const __CFData *)getTag(a4, CFSTR("hdTF"));
          if (!v24)
            __assert_rtn("verify_hdr", "ColorSyncProfile.c", 6476, "hdrProfileTagData != NULL");
          v16 = tags_are_equal(v23, v24);
          goto LABEL_66;
        }
        v25 = 0;
        while (1)
        {
          v26 = (const __CFData *)getTag((uint64_t)v10, off_1E2161718[v25]);
          if (!v26)
            goto LABEL_65;
          v27 = v26;
          v28 = CFDataGetBytePtr(v26);
          v29 = (unint64_t)CFDataGetLength(v27) <= 0xB || v28 == 0;
          v30 = !v29;
          if (a5 == 1 && v30)
          {
            if (get_preliminary_PQ_curve_data_predicate != -1)
              dispatch_once(&get_preliminary_PQ_curve_data_predicate, &__block_literal_global_322);
            v31 = &get_preliminary_PQ_curve_data_preliminary_PQ_data;
          }
          else
          {
            v32 = v30 ^ 1;
            if (a5 != 2)
              v32 = 1;
            if ((v32 & 1) != 0)
              goto LABEL_65;
            if (get_preliminary_HLG_curve_data_predicate != -1)
              dispatch_once(&get_preliminary_HLG_curve_data_predicate, &__block_literal_global_324);
            v31 = &get_preliminary_HLG_curve_data_preliminary_HLG_data;
          }
          v33 = *v31 ^ *(_QWORD *)v28 | (*((_DWORD *)v31 + 2) ^ *((_DWORD *)v28 + 2));
          v29 = v33 == 0;
          v34 = v33 != 0;
          v16 = v29;
          if (v25 <= 1)
          {
            ++v25;
            if (!v34)
              continue;
          }
          if (a5 == 2 && a6 && !v34)
          {
            v35 = (const __CFData *)getTag((uint64_t)v10, CFSTR("aaOO"));
            if (!v35)
              goto LABEL_65;
            v36 = v35;
            v37 = CFDataGetBytePtr(v35);
            v16 = 0;
            if ((unint64_t)CFDataGetLength(v36) >= 0x20 && v37)
            {
              if (get_preliminary_OOTF_tag_data_predicate != -1)
                dispatch_once(&get_preliminary_OOTF_tag_data_predicate, &__block_literal_global_381);
              v16 = get_preliminary_OOTF_tag_data_preliminary_OOTF_data == *(_QWORD *)v37
                 && *(_QWORD *)&dword_1EDFB90C8 == *((_QWORD *)v37 + 1);
            }
          }
          goto LABEL_66;
        }
      }
    }
  }
LABEL_65:
  v16 = 0;
LABEL_66:
  if (v11)
    CFRelease(v11);
  return v16;
}

CFTypeRef create_GenericRGBProfile()
{
  if (create_GenericRGBProfile_predicate != -1)
    dispatch_once(&create_GenericRGBProfile_predicate, &__block_literal_global_113);
  return CFRetain((CFTypeRef)create_GenericRGBProfile_profile);
}

BOOL CMMLut16Tag::HasCLUT(CMMLut16Tag *this)
{
  const void *v3;

  if ((unint64_t)(*(uint64_t (**)(CMMLut16Tag *))(*(_QWORD *)this + 64))(this) > 2)
    return 1;
  if ((*(uint64_t (**)(CMMLut16Tag *))(*(_QWORD *)this + 64))(this) != 2)
    return 0;
  if ((*(uint64_t (**)(CMMLut16Tag *))(*(_QWORD *)this + 48))(this) != 3
    || (*(uint64_t (**)(CMMLut16Tag *))(*(_QWORD *)this + 56))(this) != 3)
  {
    return 1;
  }
  v3 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 12) + 16), *(_QWORD *)(*((_QWORD *)this + 12) + 24));
  return memcmp(v3, &k3x3LinearCLUT16bit, 0x30uLL) != 0;
}

uint64_t CMMLut16Tag::GetInputTable(CMMLut16Tag *this, int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return CMMTable::FloatData(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24))
       + 2 * *((unsigned __int16 *)this + 45) * a2;
}

uint64_t CMMLut16Tag::GetCLutPoints(CMMLut16Tag *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t CMMLut16Tag::GetOutputChan(CMMLut16Tag *this)
{
  return *((unsigned __int8 *)this + 51);
}

uint64_t CMMLut16Tag::GetInputChan(CMMLut16Tag *this)
{
  return *((unsigned __int8 *)this + 50);
}

const void *acquire_output_profile(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *result;
  dispatch_once_t *v5;
  _QWORD block[9];

  if ((unint64_t)(a1 - 1) > 9)
    return 0;
  block[7] = v1;
  block[8] = v2;
  if (use_poppy_profiles_from_file_predicate[0] != -1)
    dispatch_once(use_poppy_profiles_from_file_predicate, &__block_literal_global_8_1066);
  if (use_poppy_profiles_from_file_enabled)
  {
    if (acquire_output_profile_predicate != -1)
      dispatch_once(&acquire_output_profile_predicate, &__block_literal_global_1067);
    if (acquire_output_profile_fd < 0)
      goto LABEL_13;
  }
  else
  {
    acquire_output_profile_fd = 0;
    acquire_output_profile_data = (uint64_t)"ypaa";
    acquire_output_profile_header = (uint64_t)"ypaa";
  }
  v5 = (dispatch_once_t *)((char *)&acquire_output_profile_predicates + 8 * a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __acquire_output_profile_block_invoke_2;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = a1;
  if (*v5 != -1)
    dispatch_once(v5, block);
LABEL_13:
  result = (const void *)acquire_output_profile_profiles[a1];
  if (result)
  {
    CFRetain(result);
    return (const void *)acquire_output_profile_profiles[a1];
  }
  return result;
}

BOOL verify_BT709_PQ(ColorSyncProfileRef a1)
{
  const __CFData *v2;

  if (bt709PQ_CICP_tag_predicate != -1)
    dispatch_once(&bt709PQ_CICP_tag_predicate, &__block_literal_global_395);
  v2 = (const __CFData *)bt709PQ_CICP_tag_cicp;
  if (pre_cicp_BT709_PQProfile_predicate != -1)
    dispatch_once(&pre_cicp_BT709_PQProfile_predicate, &__block_literal_global_397);
  return verify_hdr(a1, 0, v2, pre_cicp_BT709_PQProfile_profile, 1, 0);
}

BOOL verify_BT709_HLG(ColorSyncProfileRef a1)
{
  const __CFData *v2;

  if (bt709HLG_CICP_tag_predicate != -1)
    dispatch_once(&bt709HLG_CICP_tag_predicate, &__block_literal_global_399);
  v2 = (const __CFData *)bt709HLG_CICP_tag_cicp;
  if (pre_cicp_ITUR709_HLGProfile_predicate != -1)
    dispatch_once(&pre_cicp_ITUR709_HLGProfile_predicate, &__block_literal_global_401);
  return verify_hdr(a1, 0, v2, pre_cicp_ITUR709_HLGProfile_profile, 1, 0);
}

BOOL verify_BT2100_PQ(ColorSyncProfileRef a1)
{
  const __CFData *v2;

  if (bt2100PQ_CICP_tag_predicate[0] != -1)
    dispatch_once(bt2100PQ_CICP_tag_predicate, &__block_literal_global_405);
  v2 = (const __CFData *)bt2100PQ_CICP_tag_cicp;
  if (pre_cicp_BT2100PQProfile_predicate != -1)
    dispatch_once(&pre_cicp_BT2100PQProfile_predicate, &__block_literal_global_407);
  return verify_hdr(a1, 0, v2, pre_cicp_BT2100PQProfile_profile, 1, 0);
}

BOOL verify_displayP3_HLG(ColorSyncProfileRef a1)
{
  const __CFData *v2;

  if (displayP3HLG_CICP_tag_predicate != -1)
    dispatch_once(&displayP3HLG_CICP_tag_predicate, &__block_literal_global_391);
  v2 = (const __CFData *)displayP3HLG_CICP_tag_cicp;
  if (pre_cicp_DisplayP3HLGProfile_predicate != -1)
    dispatch_once(&pre_cicp_DisplayP3HLGProfile_predicate, &__block_literal_global_393);
  return verify_hdr(a1, 0, v2, pre_cicp_DisplayP3HLGProfile_profile, 2, (uint64_t)CFSTR("aaOO"));
}

BOOL verify_BT2100_HLG(ColorSyncProfileRef a1)
{
  const __CFData *v2;

  if (bt2100HLG_CICP_tag_predicate != -1)
    dispatch_once(&bt2100HLG_CICP_tag_predicate, &__block_literal_global_409);
  v2 = (const __CFData *)bt2100HLG_CICP_tag_cicp;
  if (pre_cicp_BT2100HLGProfile_predicate != -1)
    dispatch_once(&pre_cicp_BT2100HLGProfile_predicate, &__block_literal_global_411);
  return verify_hdr(a1, 0, v2, pre_cicp_BT2100HLGProfile_profile, 2, (uint64_t)CFSTR("aaOO"));
}

BOOL verify_ITUR2020_sRGBGamma_data(CFTypeRef cf)
{
  CFTypeID v2;
  const UInt8 *BytePtr;
  const UInt8 *v5;

  if (verify_ITUR2020_sRGBGamma_data_predicate[0] != -1)
  {
    dispatch_once(verify_ITUR2020_sRGBGamma_data_predicate, &__block_literal_global_403);
    if (cf)
      goto LABEL_3;
    return 0;
  }
  if (!cf)
    return 0;
LABEL_3:
  v2 = CFGetTypeID(cf);
  if (v2 != CFDataGetTypeID()
    || CFDataGetLength((CFDataRef)cf) < verify_ITUR2020_sRGBGamma_data_itu2020_sRGBGamma_profile_data_length)
  {
    return 0;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)verify_ITUR2020_sRGBGamma_data_itu2020_sRGBGamma_profile_data);
  v5 = CFDataGetBytePtr((CFDataRef)cf);
  return memcmp(BytePtr, v5, verify_ITUR2020_sRGBGamma_data_itu2020_sRGBGamma_profile_data_length) == 0;
}

CFTypeRef create_ROMMRGBProfile()
{
  if (create_ROMMRGBProfile_predicate != -1)
    dispatch_once(&create_ROMMRGBProfile_predicate, &__block_literal_global_155);
  return CFRetain((CFTypeRef)create_ROMMRGBProfile_profile);
}

CFTypeRef create_ITUR2020Profile()
{
  if (create_ITUR2020Profile_predicate != -1)
    dispatch_once(&create_ITUR2020Profile_predicate, &__block_literal_global_143);
  return CFRetain((CFTypeRef)create_ITUR2020Profile_profile);
}

CFStringRef ColorSyncProfileCopyDescriptionString(ColorSyncProfileRef prof)
{
  _CFBundleGetLanguageAndRegionCodes();
  return (CFStringRef)ColorSyncProfileCopyLocalizedDescriptionString(prof, 0, 0);
}

CFTypeRef ColorSyncProfileCopyLocalizedDescriptionString(CFTypeRef result, unsigned int a2, unsigned int a3)
{
  CFTypeRef v5;
  CFTypeID v6;
  const void *v7;
  const void *v8;
  CFTypeID v9;
  CFTypeID v10;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  CFTypeID v14;
  unsigned int *BytePtr;
  unsigned int v16;
  __CFString **v17;

  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v6 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
      return 0;
    result = (CFTypeRef)*((_QWORD *)v5 + 11);
    if (result)
    {
      if ((v7 = CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("dscm"))) == 0
        || (v8 = v7, v9 = CFGetTypeID(v7), v9 == CFStringGetTypeID())
        && (v8 = CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 11), v8)) == 0
        || (v10 = CFGetTypeID(v8), v10 != CFDataGetTypeID())
        || CFDataGetLength((CFDataRef)v8) < 9
        || !CFDataGetBytePtr((CFDataRef)v8)
        || *(_DWORD *)CFDataGetBytePtr((CFDataRef)v8) != 1668639853
        || (result = copy_description_from_DSCMTag((const __CFData *)v8, a2, a3)) == 0)
      {
        Value = CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 11), CFSTR("desc"));
        if (!Value
          || (v12 = Value, v13 = CFGetTypeID(Value), v13 == CFStringGetTypeID())
          && (v12 = CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 11), v12)) == 0)
        {
          v17 = kColorSyncMissingDescription;
          return copyLoacalizedStringFromResources(*v17, 1);
        }
        v14 = CFGetTypeID(v12);
        if (v14 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v12) >= 9)
        {
          BytePtr = (unsigned int *)CFDataGetBytePtr((CFDataRef)v12);
          if (BytePtr)
          {
            v16 = bswap32(*BytePtr);
            if (v16 == 1684370275)
            {
              result = descriptionFromDESCTag((const __CFData *)v12, a2, a3);
LABEL_27:
              if (!result)
                goto LABEL_28;
              return result;
            }
            if (v16 == 1835824483)
            {
              result = copy_description_from_DSCMTag((const __CFData *)v12, a2, a3);
              goto LABEL_27;
            }
          }
        }
LABEL_28:
        v17 = kColorSyncBadDescription;
        return copyLoacalizedStringFromResources(*v17, 1);
      }
    }
  }
  return result;
}

const __CFString *descriptionFromDESCTag(const __CFData *a1, unsigned int a2, unsigned int a3)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  unint64_t v8;
  CFIndex v9;
  const UInt8 *v10;
  CFIndex v11;
  CFIndex v12;
  unint64_t v13;
  unint64_t v14;
  const UInt8 *v15;
  unint64_t v16;
  const UInt8 *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  const __CFString *v21;
  unint64_t v22;
  const UInt8 *v23;
  char v24;
  const UInt8 *v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  CFIndex v29;
  unsigned __int16 *v30;
  _WORD *v31;
  CFIndex v32;
  unsigned int v33;
  _WORD *v34;
  CFIndex v35;
  unsigned int v36;
  UniChar *v37;
  UniChar *v38;
  const UInt8 *v39;
  uint64_t v40;
  CFIndex v41;
  int v42;
  __int16 v43;
  CFTypeRef v45;
  CFTypeRef v46;
  const UInt8 *v48;
  unsigned int v49;
  CFStringEncoding v50;
  unint64_t v51;
  _BYTE chars[17];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[31];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (Length < 0xD)
    return 0;
  v8 = Length;
  v49 = *((_DWORD *)BytePtr + 2);
  v9 = bswap32(v49);
  v10 = BytePtr + 12;
  if (Length < v9 + 12)
    v11 = 0;
  else
    v11 = v9;
  if (Length < v9 + 12)
    v10 = 0;
  v48 = v10;
  v12 = v11 + 12;
  if (Length >= v11 + 16)
    v12 = v11 + 16;
  if (Length >= v12 + 4)
  {
    v13 = bswap32(*(_DWORD *)&BytePtr[v12]);
    v12 += 4;
  }
  else
  {
    v13 = 0;
  }
  v14 = v12 + 2 * v13;
  v15 = &BytePtr[v12];
  if (Length >= v14)
    v16 = v13;
  else
    v16 = 0;
  if (Length >= v14)
    v17 = &BytePtr[v12];
  else
    v17 = 0;
  v18 = v12 + 2 * v16;
  if (Length >= v18 + 2)
  {
    v50 = bswap32(*(unsigned __int16 *)&BytePtr[v18]) >> 16;
    v18 += 2;
  }
  else
  {
    v50 = 0;
  }
  v51 = __PAIR64__(a3, a2);
  if (Length <= v18)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    v19 = BytePtr[v18++];
    v26 = v19 != 0;
    v20 = v19 - 1;
    if (!v26)
      v20 = 0;
    if (v20 >= 0x43)
      LOBYTE(v20) = 67;
  }
  v21 = 0;
  v22 = v18 + v20;
  v23 = &BytePtr[v18];
  if (Length >= v22)
    v24 = v20;
  else
    v24 = 0;
  if (Length >= v22)
    v25 = v23;
  else
    v25 = 0;
  if (v17)
    v26 = v16 >= 2;
  else
    v26 = 0;
  if (v26)
  {
    bzero(chars, 0x802uLL);
    v27 = 1024;
    if (v16 < 0x400)
      v27 = v16;
    v28 = *(unsigned __int16 *)v17;
    if (v28 == 65279)
    {
      v29 = v27 - 2;
      __memcpy_chk();
    }
    else if (v28 == 65534)
    {
      v29 = v27 - 2;
      if (v27 != 2)
      {
        v30 = (unsigned __int16 *)(v17 + 2);
        v31 = chars;
        v32 = v29;
        do
        {
          v33 = *v30++;
          *v31++ = bswap32(v33) >> 16;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      v29 = v27 - 1;
      v34 = chars;
      v35 = v29;
      do
      {
        v36 = *(unsigned __int16 *)v15;
        v15 += 2;
        *v34++ = bswap32(v36) >> 16;
        --v35;
      }
      while (v35);
    }
    v21 = CFStringCreateWithCharacters(0, (const UniChar *)chars, v29);
  }
  if (v24 && !v21 && v25)
  {
    if (v50 != 1536 && v50)
    {
      v21 = 0;
    }
    else
    {
      memset(v66, 0, sizeof(v66));
      v65 = 0u;
      v64 = 0u;
      v63 = 0u;
      v62 = 0u;
      v61 = 0u;
      v60 = 0u;
      v59 = 0u;
      v58 = 0u;
      v57 = 0u;
      v56 = 0u;
      v55 = 0u;
      v54 = 0u;
      v53 = 0u;
      *(_OWORD *)&chars[1] = 0u;
      chars[0] = v24;
      __memcpy_chk();
      v21 = CFStringCreateWithPascalString(0, chars, v50);
    }
  }
  if (v8 < v9 + 12 || !v11 || v21)
    goto LABEL_75;
  v37 = (UniChar *)malloc_type_malloc(2 * v11, 0x1000040BDFB0063uLL);
  if (!v37)
    return 0;
  v38 = v37;
  if (v49)
  {
    v39 = v48 - 1;
    LOBYTE(v40) = 1;
    v41 = v9;
    do
    {
      v42 = v39[v41];
      v40 = (v39[v41] == 0) & v40;
      if ((_DWORD)v40)
        v43 = v39[v41];
      else
        v43 = 63;
      v9 -= v40;
      if ((v42 - 127) < 0xA1u && v42 != 0)
        LOWORD(v42) = v43;
      v37[--v41] = v42;
    }
    while (v41);
  }
  if (!v9)
  {
    *v37 = 63;
    v9 = 1;
  }
  v21 = CFStringCreateWithCharacters(0, v37, v9);
  free(v38);
LABEL_75:
  if (v21)
  {
    if (v51)
    {
      v45 = copyLoacalizedStringFromResources(v21, 1);
      if (v45)
      {
        v46 = v45;
        CFRelease(v21);
        return (const __CFString *)v46;
      }
    }
  }
  return v21;
}

CFTypeRef copy_description_from_DSCMTag(const __CFData *a1, int a2, int a3)
{
  int v6;
  const void *v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  const void *Value;
  CFTypeRef v11;
  const __CFString *v13;
  const __CFString *v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  CFIndex Count;
  const void **v19;
  const void **v20;
  const __CFArray *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  const void *ValueAtIndex;
  const void *v25;
  const void *v26;
  const void *v27;

  if ((unint64_t)CFDataGetLength(a1) >= 0x11)
  {
    v6 = a3 | a2;
    if (!(a3 | a2) || (v7 = (const void *)CFBundleCopyLocalizationForLocalizationInfo()) == 0)
      v7 = CFRetain(CFSTR("en_US"));
    v8 = copy_description_dict_from_DSCMTag(a1);
    if (!v8)
    {
      v11 = 0;
      goto LABEL_11;
    }
    v9 = v8;
    Value = CFDictionaryGetValue(v8, v7);
    if (Value)
    {
      v11 = Value;
      CFRetain(Value);
LABEL_8:
      CFRelease(v9);
LABEL_11:
      CFRelease(v7);
      return v11;
    }
    v13 = (const __CFString *)CFDictionaryGetValue(v9, CFSTR("en_US"));
    v14 = v13;
    if (v6)
    {
      if (v13)
      {
        v11 = copyLoacalizedStringFromResources(v13, 0);
        if (v11)
          goto LABEL_8;
      }
    }
    v15 = (const void *)CFBundleCopyLocalizationForLocalizationInfo();
    if (!v15)
      v15 = CFRetain(CFSTR("en_US"));
    v26 = v15;
    v27 = 0;
    CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)findDescByLanguage, &v26);
    v16 = v27;
    CFRelease(v15);
    if (v16)
    {
      v11 = CFRetain(v16);
      if (v11)
        goto LABEL_8;
    }
    v17 = CFGetTypeID(v9);
    if (v17 != CFDictionaryGetTypeID())
      goto LABEL_33;
    Count = CFDictionaryGetCount(v9);
    v11 = (CFTypeRef)Count;
    if (Count)
    {
      v19 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
      if (!v19)
        goto LABEL_33;
      v20 = v19;
      CFDictionaryGetKeysAndValues(v9, v19, 0);
      v21 = CFArrayCreate(0, v20, (CFIndex)v11, MEMORY[0x1E0C9B378]);
      v11 = v21;
      if (v21)
      {
        v22 = CFBundleCopyPreferredLocalizationsFromArray(v21);
        if (v22)
        {
          v23 = v22;
          if (CFArrayGetCount(v22) < 1)
          {
            v25 = 0;
          }
          else
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v23, 0);
            v25 = CFDictionaryGetValue(v9, ValueAtIndex);
          }
          CFRelease(v23);
        }
        else
        {
          v25 = 0;
        }
        CFRelease(v11);
        free(v20);
        if (v25)
        {
          v11 = CFRetain(v25);
          goto LABEL_34;
        }
LABEL_33:
        v11 = 0;
        goto LABEL_34;
      }
      free(v20);
    }
LABEL_34:
    if (v14 && !v11)
      v11 = CFRetain(v14);
    goto LABEL_8;
  }
  return 0;
}

__CFDictionary *copy_description_dict_from_DSCMTag(const __CFData *a1)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __CFDictionary *Mutable;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const UInt8 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  int v22;
  UniChar v23;
  CFStringRef v24;
  CFStringRef v25;
  const UInt8 *v26;
  int v27;
  CFIndex v28;
  const UInt8 *v29;
  UniChar *p_chars;
  CFIndex v31;
  unsigned int v32;
  UniChar *v33;
  CFIndex v34;
  unsigned int v35;
  CFStringRef v36;
  CFStringRef v37;
  UniChar chars;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (Length < 0x1C)
    return 0;
  v4 = *((_DWORD *)BytePtr + 2);
  if (!v4)
    return 0;
  v5 = Length;
  v6 = bswap32(v4);
  v7 = 4 * (v6 + 2 * v6);
  if (v7 > Length - 8)
    return 0;
  if (v7 > Length - 12 || *((_DWORD *)BytePtr + 3) != 201326592)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v10 = 0;
    v11 = v5;
    if (v6 <= 1)
      v12 = 1;
    else
      v12 = v6;
    do
    {
      v13 = (12 * v10);
      v14 = v13 + 16;
      if (v11 < v13 + 28 || v14 > 0xFFFFFFF2)
        goto LABEL_48;
      v16 = &BytePtr[v14];
      v17 = *((_DWORD *)v16 + 1);
      v18 = bswap32(v17);
      v19 = bswap32(*((_DWORD *)v16 + 2));
      v20 = v17 && v5 >= v19 + v18;
      if (!v20 || v19 >= ~v18)
        goto LABEL_48;
      v22 = *((unsigned __int16 *)v16 + 1);
      v23 = *(_WORD *)v16;
      v40 = 0;
      chars = v23;
      if (v22)
      {
        LOBYTE(v40) = 95;
        *(_WORD *)((char *)&v40 + 1) = v22;
      }
      v24 = CFStringCreateWithFormat(0, 0, CFSTR("%s"), &chars);
      v25 = v24;
      if (v18 > 1)
      {
        v26 = &BytePtr[v19];
        v27 = *(unsigned __int16 *)v26;
        LODWORD(v28) = v18 >> 1;
        bzero(&chars, 0x802uLL);
        if (v28 >= 0x400)
          v28 = 1024;
        else
          v28 = v28;
        if (v27 == 65279)
        {
          --v28;
          __memcpy_chk();
          v11 = v5;
        }
        else if (v27 == 65534)
        {
          --v28;
          v11 = v5;
          if (v28)
          {
            v29 = &BytePtr[v19 + 2];
            p_chars = &chars;
            v31 = v28;
            do
            {
              v32 = *(unsigned __int16 *)v29;
              v29 += 2;
              *p_chars++ = bswap32(v32) >> 16;
              --v31;
            }
            while (v31);
          }
        }
        else
        {
          v33 = &chars;
          v34 = v28;
          v11 = v5;
          do
          {
            v35 = *(unsigned __int16 *)v26;
            v26 += 2;
            *v33++ = bswap32(v35) >> 16;
            --v34;
          }
          while (v34);
        }
        v36 = CFStringCreateWithCharacters(0, &chars, v28);
        v37 = v36;
        if (v25 && v36)
        {
          CFDictionarySetValue(Mutable, v25, v36);
          CFRelease(v25);
          v25 = v37;
        }
        else
        {
          if (v25)
            CFRelease(v25);
          v25 = v37;
          if (!v37)
            goto LABEL_48;
        }
      }
      else if (!v24)
      {
        goto LABEL_48;
      }
      CFRelease(v25);
LABEL_48:
      ++v10;
    }
    while (v10 != v12);
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

ColorSyncProfile *makeDisplayRGB()
{
  uint64_t v0;
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  uint64_t v3;
  const __CFNumber *v4;
  double v5;
  ColorSyncProfile *v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  const void *v16;
  int v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  const void *v21;
  const void *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  const __CFData *v29;
  const __CFData *v30;
  CFTypeID v31;
  void *v32;
  const void *v33;
  const void *v34;
  CFTypeID v35;
  const void *v36;
  const void *v37;
  CFTypeID v38;
  const void *v39;
  const void *v40;
  CFTypeID v41;
  const void *v42;
  const void *v43;
  CFTypeID v44;
  const void *v45;
  const void *v46;
  CFTypeID v47;
  ColorSyncProfile *v48;
  double v49;
  unint64_t v54;
  UInt8 *v55;
  unint64_t v56;
  uint64_t v57;
  double *v58;
  ColorSyncProfile *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  BOOL v77;
  BOOL v78;
  double v79;
  double v80;
  double v82;
  uint64_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  uint64x2_t v87;
  long double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned __int16 *v99;
  _WORD *v100;
  uint64_t v101;
  unsigned int v102;
  const __CFData *v103;
  int v104;
  double v105;
  double v106;
  BOOL v107;
  double v108;
  double v109;
  int v110;
  BOOL v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64x2_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  long double v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  int16x8_t *v133;
  long double v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  long double v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  int64x2_t v144;
  double v145;
  double v146;
  int v147;
  int v148;
  uint64_t v149;
  const __CFAllocator *v150;
  const __CFData *v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  signed int v171;
  int v172;
  int v173;
  double v174;
  double v175;
  double v176;
  double v177;
  UInt8 *v178;
  char *v179;
  char *v180;
  const __CFData *Tag;
  const __CFData *v182;
  const __CFData *v183;
  const UInt8 *BytePtr;
  const UInt8 *v185;
  const UInt8 *v186;
  uint64_t v187;
  UInt8 *v188;
  float64x2_t v189;
  uint64_t v190;
  int v191;
  int v192;
  int8x8_t v193;
  int64x2_t v194;
  int8x8_t v195;
  int64x2_t v196;
  int8x8_t v197;
  int v198;
  int8x8_t v199;
  int64x2_t v200;
  int8x8_t v201;
  int v202;
  int8x8_t v203;
  int64x2_t v204;
  int8x8_t v205;
  int8x8_t v206;
  uint64_t v207;
  float64x2_t v208;
  const __CFData *v209;
  int v210;
  unsigned int v211;
  double v212;
  double v213;
  double v214;
  double v215;
  int v216;
  int v217;
  unsigned int v218;
  const __CFData *v219;
  int v220;
  UInt8 *v221;
  const UInt8 *v222;
  double v223;
  double v224;
  uint64_t v225;
  UInt8 *v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  BOOL v237;
  double v238;
  double v239;
  __int16 v240;
  double v241;
  double v242;
  __int16 v243;
  double v244;
  __int16 v245;
  const __CFData *v246;
  UInt8 *v247;
  double v248;
  double v249;
  double v250;
  double v251;
  int v252;
  double v253;
  int v254;
  double v255;
  double v256;
  BOOL v257;
  double v258;
  double v259;
  BOOL v260;
  BOOL v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  unint64_t v267;
  _DWORD *v268;
  uint64_t v269;
  char *v270;
  float64x2_t v271;
  double v273;
  double v274;
  double v275;
  float64x2_t v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  uint64_t i;
  uint64_t v286;
  double v287;
  double v288;
  double v289;
  double v290;
  __int16 v291;
  double v292;
  double v293;
  __int16 v294;
  double v295;
  __int16 v296;
  const __CFData *v297;
  double v298;
  double v299;
  unsigned int v300;
  double v301;
  double v302;
  unsigned int v303;
  double v304;
  double v305;
  unsigned int v306;
  double v307;
  double v308;
  unsigned int v309;
  double v310;
  double v311;
  unsigned int v312;
  double v313;
  double v314;
  unsigned int v315;
  double v316;
  double v317;
  unsigned int v318;
  double v319;
  double v320;
  unsigned int v321;
  double v322;
  double v323;
  unsigned int v324;
  double v325;
  double v326;
  unsigned int v327;
  double v328;
  double v329;
  unsigned int v330;
  ssize_t v331;
  UInt8 *v332;
  UInt8 *v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  const __CFData *v337;
  const __CFData *v338;
  const __CFData *v339;
  const __CFData *v340;
  const void *v341;
  CFTypeID v342;
  const __CFDictionary *v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  double v347;
  double v348;
  double v349;
  long double v350;
  long double v351;
  long double v352;
  float64x2_t v353;
  float64x2_t v354;
  int64x2_t v355;
  long double v356;
  long double v357;
  float64x2_t v358;
  int64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  double v362;
  float64x2_t v363;
  long double v364;
  float64x2_t v365;
  float64x2_t v366;
  long double v367;
  float64x2_t v368;
  long double v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  long double v373;
  float64x2_t v374;
  int64x2_t v375;
  float64x2_t v376;
  CFIndex length[2];
  CFIndex lengtha[2];
  float64x2_t __xa;
  float64x2_t __xb;
  const UInt8 *__x;
  ColorSyncMutableProfileRef profa[2];
  ColorSyncMutableProfileRef profb[2];
  ColorSyncProfile *prof;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  int64x2_t v388;
  int64x2_t v389;
  double v390;
  float64x2_t v391;
  int64x2_t v392;
  int64x2_t v393;
  int v394;
  double v395;
  float64x2_t v396;
  int64x2_t __ya;
  int64x2_t __yb;
  void *__y;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  _OWORD v405[16];
  void *v406[2];
  __int128 v407;
  __int128 v408;
  uint64_t v409;
  __int16 v410;
  char v411;
  UInt8 v412[16];
  __int128 v413;
  __int128 v414;
  UInt8 bytes[64];
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  _OWORD v420[376];
  _BYTE v421[56];
  int8x16_t v422;
  double v423;
  uint64_t v424;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v424 = *MEMORY[0x1E0C80C00];
  v409 = 0;
  v407 = 0u;
  v408 = 0u;
  *(_OWORD *)v406 = 0u;
  v404 = 0u;
  memset(v405, 0, sizeof(v405));
  v402 = 0u;
  v403 = 0u;
  v400 = 0u;
  v401 = 0u;
  LODWORD(v409) = *(_DWORD *)(v0 + 8);
  v4 = longFromDictionary(v1, CFSTR("whiteTemp"));
  if (v4)
  {
    if ((xyFromTemp((unsigned __int16)v4, (double *)&v403, (double *)&v403 + 1) & 1) == 0)
      return 0;
  }
  else
  {
    *(_QWORD *)&v403 = doubleFromDictionary(v2, CFSTR("whitePointx"));
    v5 = doubleFromDictionary(v2, CFSTR("whitePointy"));
    v6 = 0;
    *((double *)&v403 + 1) = v5;
    if (*(double *)&v403 == 0.0 || v5 == 0.0)
      return v6;
  }
  if (CFDictionaryContainsKey(v2, CFSTR("phosphorSet")))
  {
    Value = CFDictionaryGetValue(v2, CFSTR("phosphorSet"));
    if (!Value)
      return 0;
    v8 = Value;
    v9 = CFGetTypeID(Value);
    if (v9 != CFStringGetTypeID())
      return 0;
    v10 = CFEqual(v8, CFSTR("P22-EBU"));
    v11 = xmmword_18B3EA5B0;
    v12 = xmmword_18B3EA5C0;
    v13 = xmmword_18B3EA5D0;
    if (!v10)
    {
      v14 = CFEqual(v8, CFSTR("HDTV"));
      v12 = xmmword_18B3EA5C0;
      v13 = xmmword_18B3EA5D0;
      v11 = xmmword_18B3EA5B0;
      if (!v14)
      {
        v15 = CFEqual(v8, CFSTR("CCIR709"));
        v11 = xmmword_18B3EA5E0;
        v12 = xmmword_18B3EA5F0;
        v13 = xmmword_18B3EA600;
        if (!v15)
        {
          if (CFEqual(v8, CFSTR("sRGB")))
          {
            v13 = xmmword_18B3EA600;
            v11 = xmmword_18B3EA5E0;
            v12 = xmmword_18B3EA5F0;
          }
          else if (CFEqual(v8, CFSTR("AdobeRGB98")))
          {
            v12 = xmmword_18B3EA610;
            v13 = xmmword_18B3EA600;
            v11 = xmmword_18B3EA5E0;
          }
          else
          {
            v17 = CFEqual(v8, CFSTR("WideRGB"));
            v11 = xmmword_18B3EA620;
            v12 = xmmword_18B3EA630;
            v13 = xmmword_18B3EA640;
            if (!v17)
            {
              v18 = CFEqual(v8, CFSTR("700/525/450nm"));
              v12 = xmmword_18B3EA630;
              v13 = xmmword_18B3EA640;
              v11 = xmmword_18B3EA620;
              if (!v18)
              {
                if (!CFEqual(v8, CFSTR("Trinitron")))
                  return 0;
                v11 = xmmword_18B3EA650;
                v12 = xmmword_18B3EA660;
                v13 = xmmword_18B3EA670;
              }
            }
          }
        }
      }
    }
    v400 = v13;
    v401 = v12;
    v402 = v11;
  }
  else
  {
    v16 = CFDictionaryGetValue(v2, CFSTR("skipPhosphorsCheck"));
    if (!primariesFromDictionary(v2, (uint64_t)&v400)
      || v16 != (const void *)*MEMORY[0x1E0C9AE50] && !checkPrimaries((double *)&v400))
    {
      return 0;
    }
  }
  v19 = CFDictionaryContainsKey(v2, CFSTR("paraR"))
     && CFDictionaryContainsKey(v2, CFSTR("paraG"))
     && CFDictionaryContainsKey(v2, CFSTR("paraB")) != 0;
  v20 = CFDictionaryContainsKey(v2, CFSTR("tableR"))
     && CFDictionaryContainsKey(v2, CFSTR("tableG"))
     && CFDictionaryContainsKey(v2, CFSTR("tableB")) != 0;
  v21 = CFDictionaryGetValue(v2, CFSTR("sRGBGamma"));
  v22 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v21 == (const void *)*MEMORY[0x1E0C9AE50])
  {
    BYTE9(v407) = 1;
    *(_OWORD *)((char *)v405 + 8) = ksRGBCurve;
    *(_OWORD *)((char *)&v405[1] + 8) = unk_18B3EACE0;
    *(_OWORD *)((char *)&v405[2] + 8) = xmmword_18B3EACF0;
    *(_OWORD *)((char *)&v405[3] + 8) = unk_18B3EAD00;
    *(_OWORD *)((char *)&v405[4] + 8) = ksRGBCurve;
    *(_OWORD *)((char *)&v405[5] + 8) = unk_18B3EACE0;
    *(_OWORD *)((char *)&v405[6] + 8) = xmmword_18B3EACF0;
    *(_OWORD *)((char *)&v405[7] + 8) = unk_18B3EAD00;
    *(_OWORD *)((char *)&v405[11] + 8) = unk_18B3EAD00;
    *(_OWORD *)((char *)&v405[8] + 8) = ksRGBCurve;
    *(_OWORD *)((char *)&v405[9] + 8) = unk_18B3EACE0;
    *(_OWORD *)((char *)&v405[10] + 8) = xmmword_18B3EACF0;
    goto LABEL_40;
  }
  if (v19)
  {
    BYTE9(v407) = 1;
    gammaCurveFromDictionary((uint64_t)v405 + 8, v2, CFSTR("paraR"));
    gammaCurveFromDictionary((uint64_t)&v405[4] + 8, v2, CFSTR("paraG"));
    gammaCurveFromDictionary((uint64_t)&v405[8] + 8, v2, CFSTR("paraB"));
    v6 = 0;
    if (WORD4(v405[0]) == 255 || WORD4(v405[4]) == 255 || WORD4(v405[8]) == 255)
      return v6;
    goto LABEL_40;
  }
  if (v20)
  {
    BYTE10(v407) = 1;
    v61 = gammaTableFromDictionary(v2, CFSTR("tableR"));
    v63 = v62;
    *((_QWORD *)&v405[12] + 1) = v61;
    *(_QWORD *)&v405[13] = v62;
    v64 = gammaTableFromDictionary(v2, CFSTR("tableG"));
    v66 = v65;
    *((_QWORD *)&v405[14] + 1) = v64;
    *(_QWORD *)&v405[15] = v65;
    *((_QWORD *)&v405[13] + 1) = gammaTableFromDictionary(v2, CFSTR("tableB"));
    *(_QWORD *)&v405[14] = v67;
    if (v63)
    {
      v6 = 0;
      if (!v66 || !v67)
        return v6;
      goto LABEL_40;
    }
    return 0;
  }
  gammaFromDictionary(v2, CFSTR("gammaR"));
  v72 = v71;
  *(double *)&v404 = v71;
  gammaFromDictionary(v2, CFSTR("gammaG"));
  v74 = v73;
  *((double *)&v404 + 1) = v73;
  gammaFromDictionary(v2, CFSTR("gammaB"));
  v6 = 0;
  *(double *)v405 = v75;
  if (v72 == 0.0 || v74 == 0.0 || v75 == 0.0)
    return v6;
LABEL_40:
  if (CFDictionaryContainsKey(v2, CFSTR("tableChans"))
    || CFDictionaryContainsKey(v2, CFSTR("tableEntries"))
    || CFDictionaryContainsKey(v2, CFSTR("tableEntrySize"))
    || CFDictionaryContainsKey(v2, CFSTR("tableData")))
  {
    v23 = longFromDictionary(v2, CFSTR("tableChans"));
    if (((unint64_t)v23 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      v24 = v23;
      v25 = longFromDictionary(v2, CFSTR("tableEntries"));
      if ((unint64_t)v25 - 2 <= 0x3FE)
      {
        v26 = v25;
        v27 = longFromDictionary(v2, CFSTR("tableEntrySize"));
        if ((unint64_t)v27 - 1 <= 1)
        {
          v28 = v27;
          v29 = (const __CFData *)CFDictionaryGetValue(v2, CFSTR("tableData"));
          if (v29)
          {
            v30 = v29;
            v31 = CFGetTypeID(v29);
            if (v31 == CFDataGetTypeID() && CFDataGetLength(v30) >= (_QWORD)v26 * (_QWORD)v24 * (_QWORD)v28)
            {
              WORD4(v405[15]) = (_WORD)v24;
              WORD5(v405[15]) = (_WORD)v26;
              WORD6(v405[15]) = (_WORD)v28;
              v406[0] = (void *)CFDataGetBytePtr(v30);
            }
          }
        }
      }
    }
  }
  *(_QWORD *)&v407 = longFromDictionary(v2, CFSTR("targetWhite"));
  gammaFromDictionary(v2, CFSTR("targetGamma"));
  v406[1] = v32;
  BYTE11(v407) = 1;
  if (CFDictionaryContainsKey(v2, CFSTR("slopeLimitGamma")))
  {
    v33 = CFDictionaryGetValue(v2, CFSTR("slopeLimitGamma"));
    if (v33)
    {
      v34 = v33;
      v35 = CFGetTypeID(v33);
      if (v35 == CFBooleanGetTypeID())
      {
        if (CFEqual(v34, v22))
          BYTE11(v407) = 0;
      }
    }
  }
  if (CFDictionaryContainsKey(v2, CFSTR("noVCGT")))
  {
    v36 = CFDictionaryGetValue(v2, CFSTR("noVCGT"));
    if (v36)
    {
      v37 = v36;
      v38 = CFGetTypeID(v36);
      if (v38 == CFBooleanGetTypeID())
      {
        if (CFEqual(v37, v22))
          BYTE13(v407) = 1;
      }
    }
  }
  if (CFDictionaryContainsKey(v2, CFSTR("noNDIN")))
  {
    v39 = CFDictionaryGetValue(v2, CFSTR("noNDIN"));
    if (v39)
    {
      v40 = v39;
      v41 = CFGetTypeID(v39);
      if (v41 == CFBooleanGetTypeID())
      {
        if (CFEqual(v40, v22))
          BYTE14(v407) = 1;
      }
    }
  }
  if (CFDictionaryContainsKey(v2, CFSTR("noParametricVCGT")))
  {
    v42 = CFDictionaryGetValue(v2, CFSTR("noParametricVCGT"));
    if (v42)
    {
      v43 = v42;
      v44 = CFGetTypeID(v42);
      if (v44 == CFBooleanGetTypeID())
      {
        if (CFEqual(v43, v22))
          HIBYTE(v407) = 1;
      }
    }
  }
  if (CFDictionaryContainsKey(v2, CFSTR("allowLargeVCGT")))
  {
    v45 = CFDictionaryGetValue(v2, CFSTR("allowLargeVCGT"));
    if (v45)
    {
      v46 = v45;
      v47 = CFGetTypeID(v45);
      if (v47 == CFBooleanGetTypeID())
      {
        if (CFEqual(v46, v22))
          LOBYTE(v408) = 1;
      }
    }
  }
  v48 = (ColorSyncProfile *)create(0, 1, 0);
  v6 = v48;
  if (!v48)
    goto LABEL_570;
  qmemcpy((void *)(v3 + 12), "rtnm BGR ZYX", 12);
  ColorSyncProfileSetPrimaries(v48, (uint64_t)&v400);
  *(_WORD *)&v412[4] = 0;
  *(_DWORD *)v412 = 0;
  v49 = *(double *)&v406[1];
  __asm { FMOV            V2.2D, #0.5 }
  if (_ZF && !BYTE9(v407))
  {
    v54 = WORD4(v405[15]);
    if (WORD4(v405[15]) && BYTE8(v407))
    {
      *(_OWORD *)bytes = v404;
      *(_QWORD *)&bytes[16] = *(_QWORD *)&v405[0];
      v55 = (UInt8 *)v406[0];
      v56 = WORD5(v405[15]);
      v57 = WORD6(v405[15]);
      v58 = (double *)bytes;
      v59 = v6;
      v60 = 0;
LABEL_193:
      fillCurvTable(v59, (uint64_t)v55, v54, v56, v57, v58, v60);
      goto LABEL_219;
    }
    v76 = *(double *)&v404;
    v77 = *(double *)v405 <= 1.8 && *((double *)&v404 + 1) <= 1.8;
    v78 = v77 && *(double *)&v404 <= 1.8;
    if (!v78 && !BYTE11(v407))
    {
      *(_OWORD *)lengtha = _Q2;
      bzero(bytes, 0x1800uLL);
      *(double *)v421 = v76;
      *(_QWORD *)&v421[8] = *((_QWORD *)&v404 + 1);
      *(_QWORD *)&v421[16] = *(_QWORD *)&v405[0];
      v79 = 2.2;
      if (v76 >= 2.25 || (v80 = 2.2, v76 <= 2.15))
      {
        if (v76 >= 1.85 || (v80 = 1.8, v76 <= 1.75))
        {
          _NF = v76 > 0.95 && v76 < 1.05;
          v80 = 1.0;
          if (!_NF)
            v80 = v76;
        }
      }
      if (*((double *)&v404 + 1) >= 2.25 || (v82 = 2.2, *((double *)&v404 + 1) <= 2.15))
      {
        if (*((double *)&v404 + 1) >= 1.85 || *((double *)&v404 + 1) <= 1.75)
        {
          v107 = *((double *)&v404 + 1) > 0.95 && *((double *)&v404 + 1) < 1.05;
          v82 = 1.0;
          if (!v107)
            v82 = *((double *)&v404 + 1);
        }
        else
        {
          v82 = 1.8;
        }
      }
      if (*(double *)v405 >= 2.25 || *(double *)v405 <= 2.15)
      {
        if (*(double *)v405 >= 1.85 || *(double *)v405 <= 1.75)
        {
          v111 = *(double *)v405 > 0.95 && *(double *)v405 < 1.05;
          v79 = 1.0;
          if (!v111)
            v79 = *(double *)v405;
        }
        else
        {
          v79 = 1.8;
        }
      }
      v112 = 1.8;
      if (v80 > 1.8)
        v112 = (v80 + -1.8) * 0.6 / 0.4 + 1.8;
      v113 = 1.8;
      if (v82 > 1.8)
        v113 = (v82 + -1.8) * 0.6 / 0.4 + 1.8;
      v114 = 1.8;
      if (v79 > 1.8)
        v114 = (v79 + -1.8) * 0.6 / 0.4 + 1.8;
      v115 = 0.0;
      v116 = 0.0;
      if (v80 > 1.8)
        v116 = (v80 + -1.8) * 0.0521327014 / 0.4;
      if (v82 > 1.8)
        v115 = (v82 + -1.8) * 0.0521327014 / 0.4;
      v117 = 0.0;
      if (v79 > 1.8)
        v117 = (v79 + -1.8) * 0.0521327014 / 0.4;
      v118 = 0;
      v349 = 1.0 - v117;
      v347 = 1.0 - v116;
      v348 = 1.0 - v115;
      v345 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v115, 0);
      v346 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v116, 0);
      v344 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v117, 0);
      v119 = (uint64x2_t)xmmword_18B3EA680;
      v120 = (uint64x2_t)xmmword_18B3EA690;
      v121 = (uint64x2_t)xmmword_18B3EA6A0;
      v122 = (uint64x2_t)xmmword_18B3EA6B0;
      do
      {
        v359 = (int64x2_t)v122;
        v389 = (int64x2_t)v121;
        v393 = (int64x2_t)v120;
        __yb = (int64x2_t)v119;
        v123 = vcvtq_f64_u64(v122);
        v124 = vcvtq_f64_u64(v121);
        v125 = vcvtq_f64_u64(v120);
        v126 = vcvtq_f64_u64(v119);
        v127 = (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL);
        v365 = vaddq_f64(v346, vdivq_f64(vmulq_n_f64(v126, v347), v127));
        v363 = vaddq_f64(v346, vdivq_f64(vmulq_n_f64(v125, v347), v127));
        v361 = vaddq_f64(v346, vdivq_f64(vmulq_n_f64(v124, v347), v127));
        v354 = vaddq_f64(v346, vdivq_f64(vmulq_n_f64(v123, v347), v127));
        v374 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v126, v348), v127));
        v372 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v125, v348), v127));
        v368 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v123, v348), v127));
        v370 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v124, v348), v127));
        *(float64x2_t *)profb = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v125, v349), v127));
        v386 = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v126, v349), v127));
        __xb = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v124, v349), v127));
        v376 = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v123, v349), v127));
        v356 = pow(v354.f64[0], v112);
        v354.f64[0] = pow(v354.f64[1], v112);
        v352 = pow(v361.f64[0], v112);
        v361.f64[0] = pow(v361.f64[1], v112);
        v351 = pow(v363.f64[0], v112);
        v363.f64[0] = pow(v363.f64[1], v112);
        v350 = pow(v365.f64[0], v112);
        v128 = pow(v365.f64[1], v112);
        v130.f64[0] = v350;
        v129.f64[0] = v351;
        v130.f64[1] = v128;
        v129.f64[1] = v363.f64[0];
        v131.f64[0] = v352;
        v131.f64[1] = v361.f64[0];
        v132.f64[0] = v356;
        v132.f64[1] = v354.f64[0];
        v366 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
        v133 = (int16x8_t *)&bytes[v118];
        *(int16x8_t *)&bytes[v118] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v132))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v131)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v129))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v130)))));
        v363.f64[0] = pow(v368.f64[0], v113);
        v368.f64[0] = pow(v368.f64[1], v113);
        v361.f64[0] = pow(v370.f64[0], v113);
        v370.f64[0] = pow(v370.f64[1], v113);
        v357 = pow(v372.f64[0], v113);
        v372.f64[0] = pow(v372.f64[1], v113);
        v354.f64[0] = pow(v374.f64[0], v113);
        v134 = pow(v374.f64[1], v113);
        v136.f64[0] = v354.f64[0];
        v135.f64[0] = v357;
        v136.f64[1] = v134;
        v135.f64[1] = v372.f64[0];
        v138.f64[0] = v361.f64[0];
        v137.f64[0] = v363.f64[0];
        v138.f64[1] = v370.f64[0];
        v137.f64[1] = v368.f64[0];
        v133[128] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v137))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v138)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v135))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v136)))));
        v374.f64[0] = pow(v376.f64[0], v114);
        v376.f64[0] = pow(v376.f64[1], v114);
        v372.f64[0] = pow(__xb.f64[0], v114);
        __xb.f64[0] = pow(__xb.f64[1], v114);
        v370.f64[0] = pow(*(long double *)profb, v114);
        profb[0] = COERCE_COLORSYNCMUTABLEPROFILEREF(pow(*(long double *)&profb[1], v114));
        v368.f64[0] = pow(v386.f64[0], v114);
        v139 = pow(v386.f64[1], v114);
        v141.f64[0] = v368.f64[0];
        v140.f64[0] = v370.f64[0];
        v141.f64[1] = v139;
        *(ColorSyncMutableProfileRef *)&v140.f64[1] = profb[0];
        v143.f64[0] = v372.f64[0];
        v142.f64[0] = v374.f64[0];
        v143.f64[1] = __xb.f64[0];
        v142.f64[1] = v376.f64[0];
        v133[256] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v142))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v143)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v140))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)lengtha, v366, v141)))));
        v144 = vdupq_n_s64(8uLL);
        v120 = (uint64x2_t)vaddq_s64(v393, v144);
        v121 = (uint64x2_t)vaddq_s64(v389, v144);
        v122 = (uint64x2_t)vaddq_s64(v359, v144);
        v119 = (uint64x2_t)vaddq_s64(__yb, v144);
        v118 += 16;
      }
      while (v118 != 2048);
      v55 = bytes;
      v58 = (double *)v421;
      v59 = v6;
      v54 = 3;
      goto LABEL_192;
    }
    v93 = *(double *)&v404 * 256.0;
    if (*(double *)&v404 * 256.0 <= 0.0)
    {
      if (*(double *)&v404 * 256.0 >= 0.0)
        goto LABEL_146;
      v94 = -0.5;
    }
    else
    {
      v94 = 0.5;
    }
    v93 = v93 + v94;
LABEL_146:
    if (v93 >= 32767.0)
    {
      LOWORD(v104) = 0x7FFF;
    }
    else if (v93 <= -32768.0)
    {
      LOWORD(v104) = 0x8000;
    }
    else
    {
      v104 = (int)v93;
    }
    *(_WORD *)v412 = v104;
    v108 = *((double *)&v404 + 1) * 256.0;
    if (*((double *)&v404 + 1) * 256.0 <= 0.0)
    {
      if (*((double *)&v404 + 1) * 256.0 >= 0.0)
        goto LABEL_168;
      v109 = -0.5;
    }
    else
    {
      v109 = 0.5;
    }
    v108 = v108 + v109;
LABEL_168:
    if (v108 >= 32767.0)
    {
      LOWORD(v110) = 0x7FFF;
    }
    else if (v108 <= -32768.0)
    {
      LOWORD(v110) = 0x8000;
    }
    else
    {
      v110 = (int)v108;
    }
    *(_WORD *)&v412[2] = v110;
    v145 = *(double *)v405 * 256.0;
    if (*(double *)v405 * 256.0 <= 0.0)
    {
      if (*(double *)v405 * 256.0 >= 0.0)
      {
LABEL_200:
        if (v145 >= 32767.0)
        {
          LOWORD(v147) = 0x7FFF;
        }
        else if (v145 <= -32768.0)
        {
          LOWORD(v147) = 0x8000;
        }
        else
        {
          v147 = (int)v145;
        }
        *(_WORD *)&v412[4] = v147;
        goto LABEL_215;
      }
      v146 = -0.5;
    }
    else
    {
      v146 = 0.5;
    }
    v145 = v145 + v146;
    goto LABEL_200;
  }
  v69 = 1.8;
  if (*(double *)&v406[1] > 1.8 && !BYTE11(v407) && !BYTE9(v407))
  {
    *(_OWORD *)length = _Q2;
    bzero(bytes, 0x800uLL);
    *(double *)v421 = v49;
    *(double *)&v421[8] = v49;
    *(double *)&v421[16] = v49;
    if (v49 >= 2.25 || v49 <= 2.15)
    {
      v70 = 0.0;
      if (v49 < 1.85 && v49 > 1.75 || v49 < 1.05 && v49 > 0.95)
        goto LABEL_129;
    }
    else
    {
      v49 = 2.2;
    }
    v69 = (v49 + -1.8) * 0.6 / 0.4 + 1.8;
    v70 = (v49 + -1.8) * 0.0521327014 / 0.4;
LABEL_129:
    v83 = 0;
    v362 = 1.0 - v70;
    v84 = (uint64x2_t)xmmword_18B3EA680;
    v85 = (uint64x2_t)xmmword_18B3EA690;
    v86 = (uint64x2_t)xmmword_18B3EA6A0;
    v87 = (uint64x2_t)xmmword_18B3EA6B0;
    v358 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    v360 = (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL);
    v353 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v70, 0);
    v355 = vdupq_n_s64(8uLL);
    do
    {
      v375 = (int64x2_t)v87;
      v388 = (int64x2_t)v86;
      v392 = (int64x2_t)v85;
      __ya = (int64x2_t)v84;
      *(float64x2_t *)profa = vaddq_f64(v353, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v85), v362), v360));
      v385 = vaddq_f64(v353, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v84), v362), v360));
      __xa = vaddq_f64(v353, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v86), v362), v360));
      v371 = vaddq_f64(v353, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v87), v362), v360));
      v373 = pow(v371.f64[0], v69);
      v371.f64[0] = pow(v371.f64[1], v69);
      v369 = pow(__xa.f64[0], v69);
      __xa.f64[0] = pow(__xa.f64[1], v69);
      v367 = pow(*(long double *)profa, v69);
      profa[0] = COERCE_COLORSYNCMUTABLEPROFILEREF(pow(*(long double *)&profa[1], v69));
      v364 = pow(v385.f64[0], v69);
      v88 = pow(v385.f64[1], v69);
      v89.f64[0] = v373;
      v91.f64[0] = v364;
      v90.f64[0] = v367;
      v91.f64[1] = v88;
      *(ColorSyncMutableProfileRef *)&v90.f64[1] = profa[0];
      v92.f64[0] = v369;
      v92.f64[1] = __xa.f64[0];
      v89.f64[1] = v371.f64[0];
      *(int16x8_t *)&bytes[v83] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)length, v358, v89))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)length, v358, v92)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)length, v358, v90))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)length, v358, v91)))));
      v85 = (uint64x2_t)vaddq_s64(v392, v355);
      v86 = (uint64x2_t)vaddq_s64(v388, v355);
      v87 = (uint64x2_t)vaddq_s64(v375, v355);
      v84 = (uint64x2_t)vaddq_s64(__ya, v355);
      v83 += 16;
    }
    while (v83 != 2048);
    v55 = bytes;
    v58 = (double *)v421;
    v59 = v6;
    v54 = 1;
LABEL_192:
    v56 = 1024;
    v57 = 2;
    v60 = 1;
    goto LABEL_193;
  }
  if (BYTE9(v407))
  {
    ColorSyncProfileSetParametricTRCTag(v6, CFSTR("rTRC"), WORD4(v405[0]), *(double *)&v405[1], *((double *)&v405[1] + 1), *(double *)&v405[2], *((double *)&v405[2] + 1), *(double *)&v405[3], *((double *)&v405[3] + 1), *(double *)&v405[4]);
    ColorSyncProfileSetParametricTRCTag(v6, CFSTR("gTRC"), WORD4(v405[4]), *(double *)&v405[5], *((double *)&v405[5] + 1), *(double *)&v405[6], *((double *)&v405[6] + 1), *(double *)&v405[7], *((double *)&v405[7] + 1), *(double *)&v405[8]);
    ColorSyncProfileSetParametricTRCTag(v6, CFSTR("bTRC"), WORD4(v405[8]), *(double *)&v405[9], *((double *)&v405[9] + 1), *(double *)&v405[10], *((double *)&v405[10] + 1), *(double *)&v405[11], *((double *)&v405[11] + 1), *(double *)&v405[12]);
    goto LABEL_219;
  }
  if (!BYTE10(v407))
  {
    v105 = *(double *)&v406[1] * 256.0;
    if (*(double *)&v406[1] * 256.0 <= 0.0)
    {
      if (*(double *)&v406[1] * 256.0 >= 0.0)
      {
LABEL_209:
        if (v105 >= 32767.0)
        {
          LOWORD(v148) = 0x7FFF;
        }
        else if (v105 <= -32768.0)
        {
          LOWORD(v148) = 0x8000;
        }
        else
        {
          v148 = (int)v105;
        }
        *(_WORD *)&v412[4] = v148;
        *(_WORD *)&v412[2] = v148;
        *(_WORD *)v412 = v148;
LABEL_215:
        v149 = 0;
        v150 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
        do
        {
          *(_QWORD *)bytes = 1987212643;
          *(_DWORD *)&bytes[8] = 0x1000000;
          *(_WORD *)&bytes[12] = bswap32(*(unsigned __int16 *)&v412[2 * v149]) >> 16;
          v151 = CFDataCreateWithBytesNoCopy(0, bytes, 14, v150);
          ColorSyncProfileSetTag(v6, off_1E21629A0[v149], v151);
          if (v151)
            CFRelease(v151);
          ++v149;
        }
        while (v149 != 3);
        goto LABEL_219;
      }
      v106 = -0.5;
    }
    else
    {
      v106 = 0.5;
    }
    v105 = v105 + v106;
    goto LABEL_209;
  }
  v95 = 0;
  *(_OWORD *)bytes = *(_OWORD *)((char *)&v405[12] + 8);
  *(_OWORD *)&bytes[16] = *(_OWORD *)((char *)&v405[13] + 8);
  *(_OWORD *)&bytes[32] = *(_OWORD *)((char *)&v405[14] + 8);
  v96 = *((_QWORD *)&v405[12] + 1);
  v97 = 2 * *((_QWORD *)&v405[12] + 1) + 12;
  do
  {
    v98 = (char *)malloc_type_calloc(1uLL, v97, 0x5D67B0A5uLL);
    *(_DWORD *)v98 = 1987212643;
    *((_DWORD *)v98 + 2) = bswap32(*(_DWORD *)&bytes[16 * v95]);
    if (v96)
    {
      v99 = *(unsigned __int16 **)&bytes[16 * v95 + 8];
      v100 = v98 + 12;
      v101 = v96;
      do
      {
        v102 = *v99++;
        *v100++ = bswap32(v102) >> 16;
        --v101;
      }
      while (v101);
    }
    v103 = CFDataCreate(0, (const UInt8 *)v98, v97);
    ColorSyncProfileSetTag(v6, off_1E21629A0[v95], v103);
    if (v103)
      CFRelease(v103);
    ++v95;
  }
  while (v95 != 3);
LABEL_219:
  if (!BYTE13(v407) || BYTE10(v407))
  {
    v413 = xmmword_18B3EA6D0;
    v414 = xmmword_18B3EA6C0;
    *(_OWORD *)v412 = xmmword_18B3EA6E0;
    prof = v6;
    v343 = v2;
    if (!(_WORD)v407)
    {
      v171 = 0x10000;
      v172 = 0x10000;
      v173 = 0x10000;
      goto LABEL_266;
    }
    *(_QWORD *)bytes = 0;
    *(_QWORD *)v421 = 0;
    xyFromTemp((unsigned __int16)v407, (double *)bytes, (double *)v421);
    v152 = *(double *)bytes / *(double *)v421;
    v153 = (1.0 - *(double *)bytes) / *(double *)v421 + -1.0;
    v416 = 0u;
    v417 = 0u;
    memset(bytes, 0, sizeof(bytes));
    convertSpecToXYZ((uint64_t)&v400, (uint64_t)bytes, 0);
    v154 = *(double *)&bytes[32] * *(double *)&v416 - *(double *)&bytes[40] * *(double *)&bytes[56];
    v155 = *(double *)&bytes[24] * *(double *)&v416 - *(double *)&bytes[40] * *(double *)&bytes[48];
    v156 = -v155;
    v157 = *(double *)&bytes[24] * *(double *)&bytes[56] - *(double *)&bytes[32] * *(double *)&bytes[48];
    v158 = -(*(double *)&bytes[8] * *(double *)&v416 - *(double *)&bytes[16] * *(double *)&bytes[56]);
    v159 = *(double *)bytes * v154 - v155 * *(double *)&bytes[8] + *(double *)&bytes[16] * v157;
    v160 = v156 / v159;
    v161 = -(*(double *)bytes * *(double *)&bytes[56] - *(double *)&bytes[8] * *(double *)&bytes[48]) / v159;
    v162 = v160 + v154 / v159 * v152 + v157 / v159 * v153;
    v163 = (*(double *)bytes * *(double *)&v416 - *(double *)&bytes[16] * *(double *)&bytes[48]) / v159
         + v158 / v159 * v152
         + v161 * v153;
    v164 = -(*(double *)bytes * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[24]) / v159
         + (*(double *)&bytes[8] * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[32]) / v159 * v152
         + (*(double *)bytes * *(double *)&bytes[32] - *(double *)&bytes[8] * *(double *)&bytes[24]) / v159 * v153;
    if (v163 <= v162)
      v165 = v162;
    else
      v165 = (*(double *)bytes * *(double *)&v416 - *(double *)&bytes[16] * *(double *)&bytes[48]) / v159
           + v158 / v159 * v152
           + v161 * v153;
    if (v164 <= v165)
      v166 = v165;
    else
      v166 = -(*(double *)bytes * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[24]) / v159
           + (*(double *)&bytes[8] * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[32])
           / v159
           * v152
           + (*(double *)bytes * *(double *)&bytes[32] - *(double *)&bytes[8] * *(double *)&bytes[24]) / v159 * v153;
    v167 = v163 / v166;
    *(double *)v421 = v162 / v166;
    *(double *)&v421[8] = v163 / v166;
    v168 = v164 / v166;
    *(double *)&v421[16] = v164 / v166;
    if (v162 / v166 > 1.0)
      *(_QWORD *)v421 = 0x3FF0000000000000;
    if (v167 > 1.0)
      *(_QWORD *)&v421[8] = 0x3FF0000000000000;
    if (v168 > 1.0)
      *(_QWORD *)&v421[16] = 0x3FF0000000000000;
    inverseNativeGammaLookup((uint64_t)&v400, (long double *)v421, v168, 1.0, v164, v166, v162 / v166, v162, v160, v157 / v159);
    v169 = *(double *)v421 * 65536.0;
    if (*(double *)v421 * 65536.0 <= 0.0)
    {
      if (v169 >= 0.0)
        goto LABEL_240;
      v170 = -0.5;
    }
    else
    {
      v170 = 0.5;
    }
    v169 = v169 + v170;
LABEL_240:
    if (v169 >= 2147483650.0)
    {
      v173 = 0x7FFFFFFF;
    }
    else if (v169 <= -2147483650.0)
    {
      v173 = 0x80000000;
    }
    else
    {
      v173 = (int)v169;
    }
    DWORD1(v413) = v173;
    v174 = *(double *)&v421[8] * 65536.0;
    if (*(double *)&v421[8] * 65536.0 <= 0.0)
    {
      if (v174 >= 0.0)
        goto LABEL_250;
      v175 = -0.5;
    }
    else
    {
      v175 = 0.5;
    }
    v174 = v174 + v175;
LABEL_250:
    if (v174 >= 2147483650.0)
    {
      v172 = 0x7FFFFFFF;
    }
    else if (v174 <= -2147483650.0)
    {
      v172 = 0x80000000;
    }
    else
    {
      v172 = (int)v174;
    }
    LODWORD(v414) = v172;
    v176 = *(double *)&v421[16] * 65536.0;
    if (*(double *)&v421[16] * 65536.0 <= 0.0)
    {
      if (v176 >= 0.0)
      {
LABEL_260:
        if (v176 >= 2147483650.0)
        {
          v171 = 0x7FFFFFFF;
        }
        else if (v176 <= -2147483650.0)
        {
          v171 = 0x80000000;
        }
        else
        {
          v171 = (int)v176;
        }
        HIDWORD(v414) = v171;
LABEL_266:
        __y = v406[1];
        if (*(double *)&v406[1] == 0.0)
        {
          v216 = 0x10000;
          v217 = 0x10000;
          v218 = 0x10000;
          goto LABEL_291;
        }
        v419 = 0u;
        memset(v420, 0, 64);
        v417 = 0u;
        v418 = 0u;
        v416 = 0u;
        memset(bytes, 0, sizeof(bytes));
        *(_WORD *)bytes = -1;
        LOWORD(v416) = -1;
        LOWORD(v420[0]) = -1;
        if (ColorSyncProfileGetTag((uint64_t)prof, CFSTR("aarg"))
          && ColorSyncProfileGetTag((uint64_t)prof, CFSTR("aabg"))
          && ColorSyncProfileGetTag((uint64_t)prof, CFSTR("aagg")))
        {
          v394 = v173;
          v178 = bytes;
          v179 = (char *)&v416;
          v180 = (char *)v420;
          Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)prof, CFSTR("aarg"));
          v182 = (const __CFData *)ColorSyncProfileGetTag((uint64_t)prof, CFSTR("aabg"));
          v183 = (const __CFData *)ColorSyncProfileGetTag((uint64_t)prof, CFSTR("aagg"));
          BytePtr = CFDataGetBytePtr(Tag);
          v422.i64[0] = (uint64_t)BytePtr;
          v185 = CFDataGetBytePtr(v182);
          v422.i64[1] = (uint64_t)v185;
          v186 = CFDataGetBytePtr(v183);
          v187 = 0;
          v423 = *(double *)&v186;
          v188 = bytes;
          v189 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
          do
          {
            v190 = v422.i64[v187];
            switch(bswap32(*(unsigned __int16 *)(v190 + 8)) >> 16)
            {
              case 0u:
                v191 = bswap32(*(_DWORD *)(v190 + 12));
                *(_WORD *)v188 = 0;
                *((double *)v188 + 1) = (double)v191 * 0.0000152587891;
                break;
              case 1u:
                v192 = bswap32(*(_DWORD *)(v190 + 20));
                *(_WORD *)v188 = 1;
                v193 = vrev32_s8(*(int8x8_t *)(v190 + 12));
                v194.i64[0] = v193.i32[0];
                v194.i64[1] = v193.i32[1];
                *(float64x2_t *)(v188 + 8) = vmulq_f64(vcvtq_f64_s64(v194), v189);
                *((double *)v188 + 3) = (double)v192 * 0.0000152587891;
                break;
              case 2u:
                *(_WORD *)v188 = 2;
                v195 = vrev32_s8(*(int8x8_t *)(v190 + 12));
                v196.i64[0] = v195.i32[0];
                v196.i64[1] = v195.i32[1];
                *(float64x2_t *)(v188 + 8) = vmulq_f64(vcvtq_f64_s64(v196), v189);
                v197 = vrev32_s8(*(int8x8_t *)(v190 + 20));
                v196.i64[0] = v197.i32[0];
                v196.i64[1] = v197.i32[1];
                *(float64x2_t *)(v188 + 24) = vmulq_f64(vcvtq_f64_s64(v196), v189);
                break;
              case 3u:
                v198 = bswap32(*(_DWORD *)(v190 + 28));
                *(_WORD *)v188 = 3;
                v199 = vrev32_s8(*(int8x8_t *)(v190 + 12));
                v200.i64[0] = v199.i32[0];
                v200.i64[1] = v199.i32[1];
                *(float64x2_t *)(v188 + 8) = vmulq_f64(vcvtq_f64_s64(v200), v189);
                v201 = vrev32_s8(*(int8x8_t *)(v190 + 20));
                v200.i64[0] = v201.i32[0];
                v200.i64[1] = v201.i32[1];
                *(float64x2_t *)(v188 + 24) = vmulq_f64(vcvtq_f64_s64(v200), v189);
                *((double *)v188 + 5) = (double)v198 * 0.0000152587891;
                break;
              case 4u:
                v202 = bswap32(*(_DWORD *)(v190 + 36));
                *(_WORD *)v188 = 3;
                v203 = vrev32_s8(*(int8x8_t *)(v190 + 12));
                v204.i64[0] = v203.i32[0];
                v204.i64[1] = v203.i32[1];
                *(float64x2_t *)(v188 + 8) = vmulq_f64(vcvtq_f64_s64(v204), v189);
                v205 = vrev32_s8(*(int8x8_t *)(v190 + 20));
                v204.i64[0] = v205.i32[0];
                v204.i64[1] = v205.i32[1];
                *(float64x2_t *)(v188 + 24) = vmulq_f64(vcvtq_f64_s64(v204), v189);
                v206 = vrev32_s8(*(int8x8_t *)(v190 + 28));
                v204.i64[0] = v206.i32[0];
                v204.i64[1] = v206.i32[1];
                *(float64x2_t *)(v188 + 40) = vmulq_f64(vcvtq_f64_s64(v204), v189);
                *((double *)v188 + 7) = (double)v202 * 0.0000152587891;
                break;
              default:
                break;
            }
            v188 += 64;
            ++v187;
          }
          while (v187 != 3);
          if (!HIBYTE(v407))
          {
            *(_DWORD *)&v421[52] = 0;
            *(_OWORD *)&v421[36] = 0u;
            *(_OWORD *)&v421[20] = 0u;
            *(_OWORD *)&v421[4] = 0u;
            *(_DWORD *)v421 = 1885823862;
            *(_QWORD *)&v421[8] = *((_QWORD *)BytePtr + 1);
            *(_QWORD *)&v421[16] = *((_QWORD *)v185 + 1);
            v207 = *((_QWORD *)v186 + 1);
            *(_QWORD *)&v208.f64[0] = v404;
            v208.f64[1] = *(float64_t *)v405;
            *(int8x16_t *)&v421[32] = vrev64q_s8((int8x16_t)vcvtq_n_s64_f64(v208, 0x20uLL));
            *(_QWORD *)&v421[24] = v207;
            *(_QWORD *)&v421[48] = bswap64(vcvtd_n_s64_f64(*((double *)&v404 + 1), 0x20uLL));
            v209 = CFDataCreateWithBytesNoCopy(0, v421, 56, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
            ColorSyncProfileSetTag(prof, CFSTR("vcgp"), v209);
            if (v209)
              CFRelease(v209);
          }
          v210 = 1;
          v173 = v394;
        }
        else
        {
          v210 = 0;
          v178 = (UInt8 *)v405 + 8;
          v179 = (char *)&v405[4] + 8;
          v180 = (char *)&v405[8] + 8;
        }
        v211 = WORD4(v405[15]);
        if (WORD4(v405[15]) && BYTE8(v407))
        {
          v411 = 0;
          v410 = 0;
          v212 = *(double *)&v406[1] / *(double *)&v404;
          v213 = *(double *)&v406[1] / *((double *)&v404 + 1);
          v214 = 2.2;
          if (*(double *)&v406[1] / *(double *)&v404 >= 2.25 || (v215 = 2.2, v212 <= 2.15))
          {
            if (v212 >= 1.85 || v212 <= 1.75)
            {
              v257 = v212 > 0.95 && v212 < 1.05;
              v215 = 1.0;
              if (!v257)
                v215 = *(double *)&v406[1] / *(double *)&v404;
            }
            else
            {
              v215 = 1.8;
            }
          }
          v258 = *(double *)&v406[1] / *(double *)v405;
          if (v213 >= 2.25 || (v259 = 2.2, v213 <= 2.15))
          {
            if (v213 >= 1.85 || v213 <= 1.75)
            {
              v260 = v213 > 0.95 && v213 < 1.05;
              v259 = 1.0;
              if (!v260)
                v259 = *(double *)&v406[1] / *((double *)&v404 + 1);
            }
            else
            {
              v259 = 1.8;
            }
          }
          if (v258 >= 2.25 || v258 <= 2.15)
          {
            if (v258 >= 1.85 || v258 <= 1.75)
            {
              v261 = v258 > 0.95 && v258 < 1.05;
              v214 = 1.0;
              if (!v261)
                v214 = *(double *)&v406[1] / *(double *)v405;
            }
            else
            {
              v214 = 1.8;
            }
          }
          v262 = 0.0;
          v263 = 0.0;
          if (v215 > 1.8)
            v263 = (v215 + -1.8) * 0.04045 / 0.4;
          if (v259 > 1.8)
            v262 = (v259 + -1.8) * 0.04045 / 0.4;
          v395 = 0.0;
          v264 = 0.0;
          if (v214 > 1.8)
            v264 = (v214 + -1.8) * 0.04045 / 0.4;
          if (v215 > 1.8 && v263 > 0.0)
            v395 = (v215 + -1.8) * 0.0773993808 / 0.4;
          v265 = 0.0;
          v266 = 0.0;
          if (v259 > 1.8)
          {
            v266 = 0.0;
            if (v262 > 0.0)
              v266 = (v259 + -1.8) * 0.0773993808 / 0.4;
          }
          v390 = v266;
          if (v214 > 1.8 && v264 > 0.0)
            v265 = (v214 + -1.8) * 0.0773993808 / 0.4;
          if (*(double *)&v406[1] == 0.0)
            v267 = 48;
          else
            v267 = ((unint64_t)WORD4(v405[15]) << 9) | 0x12;
          v268 = malloc_type_calloc(1uLL, v267, 0xD95F99AuLL);
          if (!v268)
            goto LABEL_448;
          v269 = 0;
          *v268 = 1952932726;
          v268[2] = 0;
          *((_WORD *)v268 + 6) = __rev16(v211);
          *(_DWORD *)((char *)v268 + 14) = 33554433;
          __x = (const UInt8 *)v268;
          v270 = (char *)v268 + 18;
          v271.f64[0] = v395;
          v271.f64[1] = v390;
          v396 = v271;
          __asm { FMOV            V0.2D, #1.0 }
          v387 = _Q0;
          v391 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
          do
          {
            v273 = (double)(unint64_t)(255 - v269);
            v274 = v273 / 255.0;
            v275 = v265 * v273 / 255.0;
            v276 = vdivq_f64(vmulq_n_f64(v396, v273), v391);
            v422 = vbslq_s8((int8x16_t)vcgtq_f64(v276, v387), (int8x16_t)v387, (int8x16_t)v276);
            if (v275 <= 1.0)
              v277 = v275;
            else
              v277 = 1.0;
            v423 = v277;
            *(_QWORD *)&v421[8] = pow(v274, *(long double *)&__y);
            *(_QWORD *)&v421[16] = *(_QWORD *)&v421[8];
            *(_QWORD *)v421 = *(_QWORD *)&v421[8];
            inverseNativeGammaLookup((uint64_t)&v400, (long double *)v421, *(double *)&v421[8], v278, v279, v280, v281, v282, v283, v284);
            for (i = 0; i != 3; ++i)
            {
              if (i == 1)
                v286 = 8;
              else
                v286 = 16;
              if (!i)
                v286 = 0;
              if (*((_BYTE *)&v410 + i))
              {
                *(_QWORD *)&v421[v286] = v422.i64[i];
              }
              else
              {
                v287 = *(double *)&v422.i64[i];
                if (*(double *)&v421[v286] < v287)
                {
                  *(double *)&v421[v286] = v287;
                  *((_BYTE *)&v410 + i) = 1;
                }
              }
            }
            v288 = *(double *)&v421[8];
            v289 = *(double *)&v421[16];
            v290 = (double)v173 * 0.0000152587891 * *(double *)v421 * 65535.0;
            if (v290 <= 0.0)
            {
              if (v290 < 0.0)
                v290 = v290 + -0.5;
            }
            else
            {
              v290 = v290 + 0.5;
            }
            if (v290 >= 65535.0)
            {
              v291 = -1;
            }
            else if (v290 <= 0.0)
            {
              v291 = 0;
            }
            else
            {
              v291 = __rev16((int)v290);
            }
            *(_WORD *)&v270[2 * (255 - v269)] = v291;
            if (v211 == 3)
            {
              v292 = (double)v172 * 0.0000152587891 * v288 * 65535.0;
              if (v292 <= 0.0)
              {
                if (v292 < 0.0)
                  v292 = v292 + -0.5;
              }
              else
              {
                v292 = v292 + 0.5;
              }
              v293 = (double)v171 * 0.0000152587891 * v289;
              v294 = __rev16((int)v292);
              if (v292 <= 0.0)
                v294 = 0;
              if (v292 >= 65535.0)
                v294 = -1;
              *(_WORD *)&v270[2 * (511 - v269)] = v294;
              v295 = v293 * 65535.0;
              if (v295 <= 0.0)
              {
                if (v295 < 0.0)
                  v295 = v295 + -0.5;
              }
              else
              {
                v295 = v295 + 0.5;
              }
              if (v295 >= 65535.0)
              {
                v296 = -1;
              }
              else if (v295 <= 0.0)
              {
                v296 = 0;
              }
              else
              {
                v296 = __rev16((int)v295);
              }
              *(_WORD *)&v270[2 * (767 - v269)] = v296;
            }
            ++v269;
          }
          while (v269 != 256);
          v297 = CFDataCreateWithBytesNoCopy(0, __x, v267, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
          ColorSyncProfileSetTag(prof, CFSTR("vcgt"), v297);
          if (v297)
            CFRelease(v297);
          v247 = (UInt8 *)__x;
          goto LABEL_447;
        }
        if (((BYTE9(v407) == 0) & ~v210) == 0 && (_BYTE)v408)
        {
          v220 = v173;
          v221 = (UInt8 *)malloc_type_calloc(1uLL, 0x1812uLL, 0x8853B790uLL);
          if (!v221)
          {
LABEL_448:
            v6 = prof;
LABEL_449:
            v2 = v343;
            goto LABEL_450;
          }
          v222 = v221;
          *(_DWORD *)v221 = 1952932726;
          *((_QWORD *)v221 + 1) = 0x4030000000000;
          *((_WORD *)v221 + 8) = 512;
          v223 = (double)v220 * 0.0000152587891;
          v224 = (double)v171 * 0.0000152587891;
          v225 = 2056;
          v226 = v221;
          do
          {
            *(_QWORD *)v421 = applyParametricGamma((uint64_t)v178, (double)(unint64_t)(v225 - 1033) / 1023.0);
            *(_QWORD *)&v421[8] = applyParametricGamma((uint64_t)v179, (double)(unint64_t)(v225 - 1033) / 1023.0);
            *(_QWORD *)&v421[16] = applyParametricGamma((uint64_t)v180, (double)(unint64_t)(v225 - 1033) / 1023.0);
            inverseNativeGammaLookup((uint64_t)&v400, (long double *)v421, *(double *)&v421[16], v227, v228, v229, v230, v231, v232, v233);
            v234 = (double)v172 * 0.0000152587891 * *(double *)&v421[8];
            v235 = *(double *)&v421[16];
            v236 = v223 * *(double *)v421 * 65535.0;
            v237 = v236 <= 0.0;
            v238 = v236 + -0.5;
            if (v236 >= 0.0)
              v238 = v223 * *(double *)v421 * 65535.0;
            v239 = v236 + 0.5;
            if (v237)
              v239 = v238;
            v240 = __rev16((int)v239);
            if (v239 <= 0.0)
              v240 = 0;
            if (v239 >= 65535.0)
              v240 = -1;
            *((_WORD *)v226 + 1032) = v240;
            v241 = v234 * 65535.0;
            if (v241 <= 0.0)
            {
              if (v241 < 0.0)
                v241 = v241 + -0.5;
            }
            else
            {
              v241 = v241 + 0.5;
            }
            v242 = v224 * v235;
            v243 = __rev16((int)v241);
            if (v241 <= 0.0)
              v243 = 0;
            if (v241 >= 65535.0)
              v243 = -1;
            *((_WORD *)v226 + 2056) = v243;
            v244 = v242 * 65535.0;
            if (v244 <= 0.0)
            {
              if (v244 < 0.0)
                v244 = v244 + -0.5;
            }
            else
            {
              v244 = v244 + 0.5;
            }
            if (v244 >= 65535.0)
            {
              v245 = -1;
            }
            else if (v244 <= 0.0)
            {
              v245 = 0;
            }
            else
            {
              v245 = __rev16((int)v244);
            }
            *((_WORD *)v226 + 3080) = v245;
            --v225;
            v226 -= 2;
          }
          while (v225 != 1032);
          v246 = CFDataCreateWithBytesNoCopy(0, v222, 6162, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
          ColorSyncProfileSetTag(prof, CFSTR("vcgt"), v246);
          if (v246)
            CFRelease(v246);
          v247 = (UInt8 *)v222;
LABEL_447:
          free(v247);
          goto LABEL_448;
        }
        v248 = *(double *)&__y / *(double *)&v404 * 65536.0;
        if (v248 < 0.0)
          v249 = v248 + -0.5;
        else
          v249 = *(double *)&__y / *(double *)&v404 * 65536.0;
        v250 = 0.5;
        v77 = v248 <= 0.0;
        v251 = v248 + 0.5;
        if (!v77)
          v249 = v251;
        if (v249 > -2147483650.0)
          v252 = (int)v249;
        else
          v252 = 0x80000000;
        if (v249 < 2147483650.0)
          v218 = v252;
        else
          v218 = 0x7FFFFFFF;
        v253 = *(double *)&__y / *((double *)&v404 + 1) * 65536.0;
        if (v253 <= 0.0)
        {
          if (v253 >= 0.0)
            goto LABEL_341;
          v250 = -0.5;
        }
        v253 = v253 + v250;
LABEL_341:
        if (v253 > -2147483650.0)
          v254 = (int)v253;
        else
          v254 = 0x80000000;
        if (v253 < 2147483650.0)
          v217 = v254;
        else
          v217 = 0x7FFFFFFF;
        v255 = *(double *)&__y / *(double *)v405 * 65536.0;
        if (v255 <= 0.0)
        {
          if (v255 >= 0.0)
            goto LABEL_362;
          v256 = -0.5;
        }
        else
        {
          v256 = 0.5;
        }
        v255 = v255 + v256;
LABEL_362:
        if (v255 >= 2147483650.0)
        {
          v216 = 0x7FFFFFFF;
        }
        else if (v255 <= -2147483650.0)
        {
          v216 = 0x80000000;
        }
        else
        {
          v216 = (int)v255;
        }
LABEL_291:
        *(_QWORD *)((char *)&v413 + 4) = _byteswap_uint64(__PAIR64__(v173, v217));
        *(_DWORD *)&v412[12] = bswap32(v218);
        *(_QWORD *)&v414 = _byteswap_uint64(__PAIR64__(v172, v216));
        HIDWORD(v414) = bswap32(v171);
        v219 = CFDataCreateWithBytesNoCopy(0, v412, 48, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        v6 = prof;
        ColorSyncProfileSetTag(prof, CFSTR("vcgt"), v219);
        if (v219)
          CFRelease(v219);
        goto LABEL_449;
      }
      v177 = -0.5;
    }
    else
    {
      v177 = 0.5;
    }
    v176 = v176 + v177;
    goto LABEL_260;
  }
LABEL_450:
  if (BYTE14(v407) && !BYTE10(v407))
    goto LABEL_570;
  memset(&bytes[4], 0, 60);
  *(_DWORD *)bytes = 1852400750;
  v298 = *(double *)&v400 * 65536.0;
  if (*(double *)&v400 * 65536.0 <= 0.0)
  {
    if (*(double *)&v400 * 65536.0 >= 0.0)
      goto LABEL_457;
    v299 = -0.5;
  }
  else
  {
    v299 = 0.5;
  }
  v298 = v298 + v299;
LABEL_457:
  if (v298 >= 2147483650.0)
  {
    v300 = 0x7FFFFFFF;
  }
  else if (v298 <= -2147483650.0)
  {
    v300 = 0x80000000;
  }
  else
  {
    v300 = (int)v298;
  }
  *(_DWORD *)&bytes[12] = bswap32(v300);
  v301 = *((double *)&v400 + 1) * 65536.0;
  if (*((double *)&v400 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v400 + 1) * 65536.0 >= 0.0)
      goto LABEL_467;
    v302 = -0.5;
  }
  else
  {
    v302 = 0.5;
  }
  v301 = v301 + v302;
LABEL_467:
  if (v301 >= 2147483650.0)
  {
    v303 = 0x7FFFFFFF;
  }
  else if (v301 <= -2147483650.0)
  {
    v303 = 0x80000000;
  }
  else
  {
    v303 = (int)v301;
  }
  *(_DWORD *)&bytes[16] = bswap32(v303);
  v304 = *(double *)&v401 * 65536.0;
  if (*(double *)&v401 * 65536.0 <= 0.0)
  {
    if (*(double *)&v401 * 65536.0 >= 0.0)
      goto LABEL_477;
    v305 = -0.5;
  }
  else
  {
    v305 = 0.5;
  }
  v304 = v304 + v305;
LABEL_477:
  if (v304 >= 2147483650.0)
  {
    v306 = 0x7FFFFFFF;
  }
  else if (v304 <= -2147483650.0)
  {
    v306 = 0x80000000;
  }
  else
  {
    v306 = (int)v304;
  }
  *(_DWORD *)&bytes[20] = bswap32(v306);
  v307 = *((double *)&v401 + 1) * 65536.0;
  if (*((double *)&v401 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v401 + 1) * 65536.0 >= 0.0)
      goto LABEL_487;
    v308 = -0.5;
  }
  else
  {
    v308 = 0.5;
  }
  v307 = v307 + v308;
LABEL_487:
  if (v307 >= 2147483650.0)
  {
    v309 = 0x7FFFFFFF;
  }
  else if (v307 <= -2147483650.0)
  {
    v309 = 0x80000000;
  }
  else
  {
    v309 = (int)v307;
  }
  *(_DWORD *)&bytes[24] = bswap32(v309);
  v310 = *(double *)&v402 * 65536.0;
  if (*(double *)&v402 * 65536.0 <= 0.0)
  {
    if (*(double *)&v402 * 65536.0 >= 0.0)
      goto LABEL_497;
    v311 = -0.5;
  }
  else
  {
    v311 = 0.5;
  }
  v310 = v310 + v311;
LABEL_497:
  if (v310 >= 2147483650.0)
  {
    v312 = 0x7FFFFFFF;
  }
  else if (v310 <= -2147483650.0)
  {
    v312 = 0x80000000;
  }
  else
  {
    v312 = (int)v310;
  }
  *(_DWORD *)&bytes[28] = bswap32(v312);
  v313 = *((double *)&v402 + 1) * 65536.0;
  if (*((double *)&v402 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v402 + 1) * 65536.0 >= 0.0)
      goto LABEL_507;
    v314 = -0.5;
  }
  else
  {
    v314 = 0.5;
  }
  v313 = v313 + v314;
LABEL_507:
  if (v313 >= 2147483650.0)
  {
    v315 = 0x7FFFFFFF;
  }
  else if (v313 <= -2147483650.0)
  {
    v315 = 0x80000000;
  }
  else
  {
    v315 = (int)v313;
  }
  *(_DWORD *)&bytes[32] = bswap32(v315);
  v316 = *(double *)&v403 * 65536.0;
  if (*(double *)&v403 * 65536.0 <= 0.0)
  {
    if (*(double *)&v403 * 65536.0 >= 0.0)
      goto LABEL_517;
    v317 = -0.5;
  }
  else
  {
    v317 = 0.5;
  }
  v316 = v316 + v317;
LABEL_517:
  if (v316 >= 2147483650.0)
  {
    v318 = 0x7FFFFFFF;
  }
  else if (v316 <= -2147483650.0)
  {
    v318 = 0x80000000;
  }
  else
  {
    v318 = (int)v316;
  }
  *(_DWORD *)&bytes[36] = bswap32(v318);
  v319 = *((double *)&v403 + 1) * 65536.0;
  if (*((double *)&v403 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v403 + 1) * 65536.0 >= 0.0)
      goto LABEL_527;
    v320 = -0.5;
  }
  else
  {
    v320 = 0.5;
  }
  v319 = v319 + v320;
LABEL_527:
  if (v319 >= 2147483650.0)
  {
    v321 = 0x7FFFFFFF;
  }
  else if (v319 <= -2147483650.0)
  {
    v321 = 0x80000000;
  }
  else
  {
    v321 = (int)v319;
  }
  *(_DWORD *)&bytes[40] = bswap32(v321);
  v322 = *(double *)&v404 * 65536.0;
  if (*(double *)&v404 * 65536.0 <= 0.0)
  {
    if (*(double *)&v404 * 65536.0 >= 0.0)
      goto LABEL_537;
    v323 = -0.5;
  }
  else
  {
    v323 = 0.5;
  }
  v322 = v322 + v323;
LABEL_537:
  if (v322 >= 2147483650.0)
  {
    v324 = 0x7FFFFFFF;
  }
  else if (v322 <= -2147483650.0)
  {
    v324 = 0x80000000;
  }
  else
  {
    v324 = (int)v322;
  }
  *(_DWORD *)&bytes[44] = bswap32(v324);
  v325 = *((double *)&v404 + 1) * 65536.0;
  if (*((double *)&v404 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v404 + 1) * 65536.0 >= 0.0)
      goto LABEL_547;
    v326 = -0.5;
  }
  else
  {
    v326 = 0.5;
  }
  v325 = v325 + v326;
LABEL_547:
  if (v325 >= 2147483650.0)
  {
    v327 = 0x7FFFFFFF;
  }
  else if (v325 <= -2147483650.0)
  {
    v327 = 0x80000000;
  }
  else
  {
    v327 = (int)v325;
  }
  *(_DWORD *)&bytes[48] = bswap32(v327);
  v328 = *(double *)v405 * 65536.0;
  if (*(double *)v405 * 65536.0 > 0.0)
  {
    v329 = 0.5;
LABEL_556:
    v328 = v328 + v329;
    goto LABEL_557;
  }
  if (*(double *)v405 * 65536.0 < 0.0)
  {
    v329 = -0.5;
    goto LABEL_556;
  }
LABEL_557:
  if (v328 >= 2147483650.0)
  {
    v330 = 0x7FFFFFFF;
  }
  else if (v328 <= -2147483650.0)
  {
    v330 = 0x80000000;
  }
  else
  {
    v330 = (int)v328;
  }
  v331 = WORD5(v405[15]) * WORD4(v405[15]) * WORD6(v405[15]);
  *(_DWORD *)&bytes[52] = bswap32(v330);
  *(_DWORD *)&bytes[8] = bswap32(v331 + 54);
  *(_WORD *)&bytes[56] = __rev16(WORD4(v405[15]));
  *(_WORD *)&bytes[58] = __rev16(WORD5(v405[15]));
  *(_WORD *)&bytes[60] = __rev16(WORD6(v405[15]));
  if (!(_DWORD)v331)
  {
    v337 = CFDataCreateWithBytesNoCopy(0, bytes, 62, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v333 = 0;
    goto LABEL_566;
  }
  v332 = (UInt8 *)malloc_type_malloc(v331 + 62, 0xBD586ABBuLL);
  if (v332)
  {
    v333 = v332;
    v334 = *(_OWORD *)bytes;
    v335 = *(_OWORD *)&bytes[16];
    v336 = *(_OWORD *)&bytes[48];
    *((_OWORD *)v332 + 2) = *(_OWORD *)&bytes[32];
    *((_OWORD *)v332 + 3) = v336;
    *(_OWORD *)v332 = v334;
    *((_OWORD *)v332 + 1) = v335;
    swab(v406[0], v332 + 62, v331);
    v337 = CFDataCreateWithBytesNoCopy(0, v333, v331 + 62, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
LABEL_566:
    if (v337)
    {
      ColorSyncProfileSetTag(v6, CFSTR("ndin"), v337);
      CFRelease(v337);
    }
    if (v333)
      free(v333);
  }
LABEL_570:
  if (CFDictionaryContainsKey(v2, CFSTR("rXYZ")))
  {
    v338 = (const __CFData *)CFDictionaryGetValue(v2, CFSTR("rXYZ"));
    ColorSyncProfileSetTag(v6, CFSTR("rXYZ"), v338);
  }
  if (CFDictionaryContainsKey(v2, CFSTR("gXYZ")))
  {
    v339 = (const __CFData *)CFDictionaryGetValue(v2, CFSTR("gXYZ"));
    ColorSyncProfileSetTag(v6, CFSTR("gXYZ"), v339);
  }
  if (CFDictionaryContainsKey(v2, CFSTR("bXYZ")))
  {
    v340 = (const __CFData *)CFDictionaryGetValue(v2, CFSTR("bXYZ"));
    ColorSyncProfileSetTag(v6, CFSTR("bXYZ"), v340);
  }
  if (CFDictionaryContainsKey(v2, CFSTR("cicp")))
  {
    v341 = CFDictionaryGetValue(v2, CFSTR("cicp"));
    v342 = CFGetTypeID(v341);
    if (v342 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v341) >= 12)
      ColorSyncProfileSetTag(v6, CFSTR("cicp"), (CFDataRef)v341);
  }
  return v6;
}

const __CFNumber *longFromDictionary(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  const __CFNumber *v3;
  CFTypeID v4;
  uint64_t valuePtr;

  if (!a2)
    return 0;
  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  valuePtr = 0;
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID() && !CFNumberIsFloatType(v3))
    {
      if (CFNumberGetValue(v3, kCFNumberLongType, &valuePtr))
        return (const __CFNumber *)valuePtr;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *gammaFromDictionary(const __CFDictionary *a1, const void *a2)
{
  doubleFromDictionary(a1, a2);
  return CFDictionaryGetValue(a1, CFSTR("unrestrictedGamma"));
}

BOOL primariesFromDictionary(const __CFDictionary *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double *i;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v29;
  double v30;
  double v31;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  double v39;

  *(double *)a2 = doubleFromDictionary(a1, CFSTR("phosphorRx"));
  *(double *)(a2 + 8) = doubleFromDictionary(a1, CFSTR("phosphorRy"));
  *(double *)(a2 + 16) = doubleFromDictionary(a1, CFSTR("phosphorGx"));
  *(double *)(a2 + 24) = doubleFromDictionary(a1, CFSTR("phosphorGy"));
  *(double *)(a2 + 32) = doubleFromDictionary(a1, CFSTR("phosphorBx"));
  v4 = doubleFromDictionary(a1, CFSTR("phosphorBy"));
  v5 = 0;
  *(double *)(a2 + 40) = v4;
  v6 = *(double *)a2;
  for (i = (double *)&qword_1E2160640; ; i += 9)
  {
    v8 = *(i - 4);
    v9 = v8 + -0.00001;
    v10 = v8 + 0.00001;
    if (v9 < v6 && v10 > v6)
    {
      v12 = *(double *)(a2 + 8);
      v13 = *(i - 3);
      v14 = v13 + -0.00001;
      v15 = v13 + 0.00001;
      if (v14 < v12 && v15 > v12)
      {
        v17 = *(double *)(a2 + 16);
        v18 = *(i - 2);
        v19 = v18 + -0.00001;
        v20 = v18 + 0.00001;
        if (v19 < v17 && v20 > v17)
        {
          v22 = *(double *)(a2 + 24);
          v23 = *(i - 1);
          v24 = v23 + -0.00001;
          v25 = v23 + 0.00001;
          if (v24 < v22 && v25 > v22)
          {
            v27 = *(double *)(a2 + 32);
            if (*i + -0.00001 < v27 && *i + 0.00001 > v27)
            {
              v29 = i[1];
              v30 = v29 + -0.00001;
              v31 = v29 + 0.00001;
              if (v30 < v4 && v31 > v4)
              {
                v33 = *(double *)(a2 + 48);
                v34 = i[2];
                v35 = v34 + -0.00001;
                v36 = v34 + 0.00001;
                if (v35 < v33 && v36 > v33)
                {
                  v38 = *(double *)(a2 + 56);
                  v39 = i[3];
                  if (v39 + -0.00001 < v38 && v39 + 0.00001 > v38)
                    break;
                }
              }
            }
          }
        }
      }
    }
    if (++v5 == 4)
      return v6 != 0.0
          && *(double *)(a2 + 8) != 0.0
          && *(double *)(a2 + 16) != 0.0
          && *(double *)(a2 + 24) != 0.0
          && *(double *)(a2 + 32) != 0.0
          && v4 != 0.0;
  }
  *(_QWORD *)(a2 + 376) = *((_QWORD *)&primariesFromDictionary_primaries + 9 * v5 + 8);
  return v6 != 0.0
      && *(double *)(a2 + 8) != 0.0
      && *(double *)(a2 + 16) != 0.0
      && *(double *)(a2 + 24) != 0.0
      && *(double *)(a2 + 32) != 0.0
      && v4 != 0.0;
}

void ColorSyncProfileSetPrimaries(ColorSyncProfile *a1, uint64_t a2)
{
  char v4;
  const void *v5;
  CFAllocatorRef *v6;
  uint64_t *v7;
  double v8;
  double v9;
  unsigned int v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  unsigned int v16;
  const __CFAllocator *v17;
  const __CFData *v18;
  double v19;
  double v20;
  unsigned int v21;
  double v22;
  double v23;
  unsigned int v24;
  double v25;
  double v26;
  unsigned int v27;
  const __CFData *v28;
  double v29;
  double v30;
  unsigned int v31;
  double v32;
  double v33;
  unsigned int v34;
  double v35;
  double v36;
  unsigned int v37;
  const __CFData *v38;
  float64x2_t v39;
  const __CFData *v45;
  uint64_t v46;
  unsigned int v47;
  const __CFData *Tag;
  const __CFData *v49;
  const __CFData *v50;
  const __CFData *v51;
  char v52;
  double v53;
  double v54;
  unsigned int v55;
  double v56;
  double v57;
  unsigned int v58;
  double v59;
  double v60;
  unsigned int v61;
  const __CFData *v62;
  UInt8 bytes[6];
  __int16 v64;
  unsigned int v65;
  uint64_t v66;
  float64x2_t v67;
  __int128 v68;
  __int128 v69;
  float64x2_t v70[3];
  UInt8 v71[8];
  int8x16_t v72;
  int8x16_t v73;
  unsigned int v74;
  float64x2_t v75[2];
  float64x2_t v76[2];
  double v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v75[1].f64[1] = 0.0;
  *(float64x2_t *)((char *)v76 + 8) = 0u;
  *(float64x2_t *)((char *)v75 + 8) = 0u;
  v75[0].f64[0] = 1.0;
  v76[0].f64[0] = 1.0;
  v76[1].f64[1] = 0.0;
  v77 = 1.0;
  v69 = 0u;
  memset(v70, 0, sizeof(v70));
  v67 = 0u;
  v68 = 0u;
  convertSpecToXYZ(a2, (uint64_t)&v67, 1);
  if (v70[1].f64[1] <= 0.9639
    || v70[1].f64[1] >= 0.9645
    || v70[2].f64[0] <= 0.99997
    || v70[2].f64[0] >= 1.00003
    || v70[2].f64[1] <= 0.8246
    || v70[2].f64[1] >= 0.8252)
  {
    ColorSyncConvertDoubleXYZToD50(&v67, (float64x2_t *)&v70[1].f64[1], &v67, 3, (uint64_t)v75);
    ColorSyncConvertDoubleXYZToD50((float64x2_t *)((char *)&v68 + 8), (float64x2_t *)&v70[1].f64[1], (float64x2_t *)((char *)&v68 + 8), 3, (uint64_t)v75);
    ColorSyncConvertDoubleXYZToD50(v70, (float64x2_t *)&v70[1].f64[1], v70, 3, (uint64_t)v75);
    v4 = 0;
  }
  else
  {
    *(float64x2_t *)((char *)&v70[1] + 8) = (float64x2_t)xmmword_18B3EA890;
    v70[2].f64[1] = 0.8249;
    v4 = 1;
  }
  bytes[5] = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  strcpy((char *)bytes, "XYZ ");
  v5 = *(const void **)(a2 + 376);
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE20];
  if (v5)
  {
    if (CFEqual(v5, CFSTR("ITU_R709")))
    {
      if (get_itu709_profile_predicate != -1)
        dispatch_once(&get_itu709_profile_predicate, &__block_literal_global_857);
      v7 = &get_itu709_profile_itu709;
    }
    else if (CFEqual(*(CFTypeRef *)(a2 + 376), CFSTR("ITU_R2020")))
    {
      if (get_itu2020_profile_predicate != -1)
        dispatch_once(&get_itu2020_profile_predicate, &__block_literal_global_21);
      v7 = &get_itu2020_profile_itu2020;
    }
    else if (CFEqual(*(CFTypeRef *)(a2 + 376), CFSTR("P3_D65")))
    {
      if (get_dispP3_profile_predicate != -1)
        dispatch_once(&get_dispP3_profile_predicate, &__block_literal_global_23);
      v7 = &get_dispP3_profile_dispP3;
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a2 + 376), CFSTR("DCI_P3")))
        __assert_rtn("setPrimariesByName", "ColorSyncMakeDisplayProfile.c", 551, "0");
      if (get_dciP3_profile_predicate != -1)
        dispatch_once(&get_dciP3_profile_predicate, &__block_literal_global_25);
      v7 = &get_dciP3_profile_dciP3;
    }
    v46 = *v7;
    v47 = *(_DWORD *)(a2 + 384);
    Tag = (const __CFData *)ColorSyncProfileGetTag(*v7, CFSTR("rXYZ"));
    ColorSyncProfileSetTag(a1, CFSTR("rXYZ"), Tag);
    v49 = (const __CFData *)ColorSyncProfileGetTag(v46, CFSTR("gXYZ"));
    ColorSyncProfileSetTag(a1, CFSTR("gXYZ"), v49);
    v50 = (const __CFData *)ColorSyncProfileGetTag(v46, CFSTR("bXYZ"));
    ColorSyncProfileSetTag(a1, CFSTR("bXYZ"), v50);
    if (v47 >> 26)
    {
      v51 = (const __CFData *)ColorSyncProfileGetTag(v46, CFSTR("chad"));
      ColorSyncProfileSetTag(a1, CFSTR("chad"), v51);
    }
    goto LABEL_127;
  }
  v8 = v67.f64[0] * 65536.0;
  if (v67.f64[0] * 65536.0 <= 0.0)
  {
    if (v67.f64[0] * 65536.0 >= 0.0)
      goto LABEL_23;
    v9 = -0.5;
  }
  else
  {
    v9 = 0.5;
  }
  v8 = v8 + v9;
LABEL_23:
  if (v8 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else if (v8 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v8;
  }
  v65 = bswap32(v10);
  v11 = v67.f64[1] * 65536.0;
  if (v67.f64[1] * 65536.0 <= 0.0)
  {
    if (v67.f64[1] * 65536.0 >= 0.0)
      goto LABEL_33;
    v12 = -0.5;
  }
  else
  {
    v12 = 0.5;
  }
  v11 = v11 + v12;
LABEL_33:
  if (v11 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    v13 = 0x80000000;
  }
  else
  {
    v13 = (int)v11;
  }
  LODWORD(v66) = bswap32(v13);
  v14 = *(double *)&v68 * 65536.0;
  if (*(double *)&v68 * 65536.0 <= 0.0)
  {
    if (*(double *)&v68 * 65536.0 >= 0.0)
      goto LABEL_43;
    v15 = -0.5;
  }
  else
  {
    v15 = 0.5;
  }
  v14 = v14 + v15;
LABEL_43:
  if (v14 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v14;
  }
  HIDWORD(v66) = bswap32(v16);
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v18 = CFDataCreateWithBytesNoCopy(0, bytes, 20, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  ColorSyncProfileSetTag(a1, CFSTR("rXYZ"), v18);
  if (v18)
    CFRelease(v18);
  v19 = *((double *)&v68 + 1) * 65536.0;
  if (*((double *)&v68 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v68 + 1) * 65536.0 >= 0.0)
      goto LABEL_55;
    v20 = -0.5;
  }
  else
  {
    v20 = 0.5;
  }
  v19 = v19 + v20;
LABEL_55:
  if (v19 >= 2147483650.0)
  {
    v21 = 0x7FFFFFFF;
  }
  else if (v19 <= -2147483650.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v19;
  }
  v65 = bswap32(v21);
  v22 = *(double *)&v69 * 65536.0;
  if (*(double *)&v69 * 65536.0 <= 0.0)
  {
    if (*(double *)&v69 * 65536.0 >= 0.0)
      goto LABEL_65;
    v23 = -0.5;
  }
  else
  {
    v23 = 0.5;
  }
  v22 = v22 + v23;
LABEL_65:
  if (v22 >= 2147483650.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147483650.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v22;
  }
  LODWORD(v66) = bswap32(v24);
  v25 = *((double *)&v69 + 1) * 65536.0;
  if (*((double *)&v69 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v69 + 1) * 65536.0 >= 0.0)
      goto LABEL_75;
    v26 = -0.5;
  }
  else
  {
    v26 = 0.5;
  }
  v25 = v25 + v26;
LABEL_75:
  if (v25 >= 2147483650.0)
  {
    v27 = 0x7FFFFFFF;
  }
  else if (v25 <= -2147483650.0)
  {
    v27 = 0x80000000;
  }
  else
  {
    v27 = (int)v25;
  }
  HIDWORD(v66) = bswap32(v27);
  v28 = CFDataCreateWithBytesNoCopy(0, bytes, 20, v17);
  ColorSyncProfileSetTag(a1, CFSTR("gXYZ"), v28);
  if (v28)
    CFRelease(v28);
  v29 = v70[0].f64[0] * 65536.0;
  if (v70[0].f64[0] * 65536.0 <= 0.0)
  {
    if (v70[0].f64[0] * 65536.0 >= 0.0)
      goto LABEL_87;
    v30 = -0.5;
  }
  else
  {
    v30 = 0.5;
  }
  v29 = v29 + v30;
LABEL_87:
  if (v29 >= 2147483650.0)
  {
    v31 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    v31 = 0x80000000;
  }
  else
  {
    v31 = (int)v29;
  }
  v65 = bswap32(v31);
  v32 = v70[0].f64[1] * 65536.0;
  if (v70[0].f64[1] * 65536.0 <= 0.0)
  {
    if (v70[0].f64[1] * 65536.0 >= 0.0)
      goto LABEL_97;
    v33 = -0.5;
  }
  else
  {
    v33 = 0.5;
  }
  v32 = v32 + v33;
LABEL_97:
  if (v32 >= 2147483650.0)
  {
    v34 = 0x7FFFFFFF;
  }
  else if (v32 <= -2147483650.0)
  {
    v34 = 0x80000000;
  }
  else
  {
    v34 = (int)v32;
  }
  LODWORD(v66) = bswap32(v34);
  v35 = v70[1].f64[0] * 65536.0;
  if (v70[1].f64[0] * 65536.0 > 0.0)
  {
    v36 = 0.5;
LABEL_106:
    v35 = v35 + v36;
    goto LABEL_107;
  }
  if (v70[1].f64[0] * 65536.0 < 0.0)
  {
    v36 = -0.5;
    goto LABEL_106;
  }
LABEL_107:
  if (v35 >= 2147483650.0)
  {
    v37 = 0x7FFFFFFF;
  }
  else if (v35 <= -2147483650.0)
  {
    v37 = 0x80000000;
  }
  else
  {
    v37 = (int)v35;
  }
  HIDWORD(v66) = bswap32(v37);
  v38 = CFDataCreateWithBytesNoCopy(0, bytes, 20, v17);
  ColorSyncProfileSetTag(a1, CFSTR("bXYZ"), v38);
  if (v38)
    CFRelease(v38);
  if (*(_DWORD *)(a2 + 384) >> 26)
  {
    *(_QWORD *)v71 = 842229363;
    v39 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
    __asm { FMOV            V3.2D, #0.5 }
    v72 = vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v75[0])), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v75[1]))));
    v73 = vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v76[0])), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v76[1]))));
    v74 = bswap32((int)(v77 * 65536.0 + 0.5));
    v45 = CFDataCreateWithBytesNoCopy(0, v71, 44, v17);
    ColorSyncProfileSetTag(a1, CFSTR("chad"), v45);
    if (v45)
      CFRelease(v45);
  }
LABEL_127:
  if (*(_DWORD *)(a2 + 384) >> 26)
    v52 = v4;
  else
    v52 = 1;
  if ((v52 & 1) == 0)
  {
    *(float64x2_t *)((char *)&v70[1] + 8) = (float64x2_t)xmmword_18B3EA890;
    v70[2].f64[1] = 0.8249;
    v53 = 63189.8112;
    goto LABEL_135;
  }
  v53 = v70[1].f64[1] * 65536.0;
  if (v70[1].f64[1] * 65536.0 > 0.0)
  {
LABEL_135:
    v54 = 0.5;
    goto LABEL_136;
  }
  if (v70[1].f64[1] * 65536.0 >= 0.0)
    goto LABEL_137;
  v54 = -0.5;
LABEL_136:
  v53 = v53 + v54;
LABEL_137:
  if (v53 >= 2147483650.0)
  {
    v55 = 0x7FFFFFFF;
  }
  else if (v53 <= -2147483650.0)
  {
    v55 = 0x80000000;
  }
  else
  {
    v55 = (int)v53;
  }
  v65 = bswap32(v55);
  v56 = v70[2].f64[0] * 65536.0;
  if (v70[2].f64[0] * 65536.0 <= 0.0)
  {
    if (v70[2].f64[0] * 65536.0 >= 0.0)
      goto LABEL_147;
    v57 = -0.5;
  }
  else
  {
    v57 = 0.5;
  }
  v56 = v56 + v57;
LABEL_147:
  if (v56 >= 2147483650.0)
  {
    v58 = 0x7FFFFFFF;
  }
  else if (v56 <= -2147483650.0)
  {
    v58 = 0x80000000;
  }
  else
  {
    v58 = (int)v56;
  }
  LODWORD(v66) = bswap32(v58);
  v59 = v70[2].f64[1] * 65536.0;
  if (v70[2].f64[1] * 65536.0 <= 0.0)
  {
    if (v70[2].f64[1] * 65536.0 >= 0.0)
      goto LABEL_157;
    v60 = -0.5;
  }
  else
  {
    v60 = 0.5;
  }
  v59 = v59 + v60;
LABEL_157:
  if (v59 >= 2147483650.0)
  {
    v61 = 0x7FFFFFFF;
  }
  else if (v59 <= -2147483650.0)
  {
    v61 = 0x80000000;
  }
  else
  {
    v61 = (int)v59;
  }
  HIDWORD(v66) = bswap32(v61);
  v62 = CFDataCreateWithBytesNoCopy(0, bytes, 20, *v6);
  ColorSyncProfileSetTag(a1, CFSTR("wtpt"), v62);
  if (v62)
    CFRelease(v62);
}

double convertSpecToXYZ(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double result;
  uint64_t v33;
  uint64_t v34;

  if (a3 && (v5 = *(_QWORD *)(a1 + 352)) != 0)
  {
    v33 = 0;
    v34 = 0;
    v6 = (double *)&v34;
    v7 = (double *)&v33;
    xyFromTemp((unsigned __int16)v5, (double *)&v34, (double *)&v33);
  }
  else
  {
    v6 = (double *)(a1 + 48);
    v7 = (double *)(a1 + 56);
  }
  v8 = *v7;
  v9 = *(double *)(a1 + 8);
  v10 = *(double *)(a1 + 16);
  v11 = *(double *)(a1 + 24);
  v12 = *(double *)(a1 + 32);
  v13 = *(double *)(a1 + 40);
  v14 = *(double *)a1 - v12;
  v15 = *(double *)a1 - v10;
  v16 = *v7 * ((v10 - v12) * v9 - v14 * v11 + v15 * v13);
  v17 = *v6 - v12;
  v18 = *v6 - v10;
  v19 = v9 * ((v10 - v12) * *v7 - v17 * v11 + v18 * v13) / v16;
  v20 = v14 * *v7 - v17 * v9;
  v21 = *v6 - *(double *)a1;
  v22 = -(v11 * (v20 + v21 * v13)) / v16;
  v23 = v13 * (v15 * *v7 - v18 * v9 + v21 * v11) / v16;
  v24 = *(double *)a1 * v19 / v9;
  v25 = ((1.0 - *(double *)a1) / v9 + -1.0) * v19;
  v26 = v10 * v22 / v11;
  v27 = ((1.0 - v10) / v11 + -1.0) * v22;
  v28 = v12 * v23 / v13;
  v29 = ((1.0 - v12) / v13 + -1.0) * v23;
  v30 = *v6 / *v7;
  v31 = 1.0 - *v6 - *v7;
  *(double *)a2 = v24;
  *(double *)(a2 + 8) = v19;
  *(double *)(a2 + 16) = v25;
  *(double *)(a2 + 24) = v26;
  *(double *)(a2 + 32) = v22;
  *(double *)(a2 + 40) = v27;
  *(double *)(a2 + 48) = v28;
  *(double *)(a2 + 56) = v23;
  *(double *)(a2 + 64) = v29;
  *(double *)(a2 + 72) = v30;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  result = v31 / v8;
  *(double *)(a2 + 88) = result;
  return result;
}

BOOL checkPrimaries(double *a1)
{
  _BOOL8 result;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  result = 0;
  v3 = *a1;
  if (*a1 > 0.0)
  {
    v4 = a1[1];
    if (v4 > 0.0)
    {
      result = 0;
      if (v3 + v4 <= 1.0 && v3 + v4 * -2.0 < 0.2)
      {
        result = 0;
        if (v3 + v4 > 0.7 && v4 - v3 < 0.0)
        {
          result = 0;
          v5 = a1[2];
          if (v5 > 0.0)
          {
            v6 = a1[3];
            if (v6 > 0.0)
            {
              result = 0;
              if (v5 + v6 < 1.0 && v5 + v6 > 0.6 && v6 - v5 > 0.0)
              {
                result = 0;
                v7 = a1[4];
                if (v7 > 0.0)
                {
                  v8 = a1[5];
                  if (v8 > 0.0)
                  {
                    result = 0;
                    if (v7 + v8 < 1.0 && v7 + v8 * -2.0 < 0.2)
                    {
                      result = 0;
                      if (v7 + v8 < 0.5 && v8 - v7 < 0.2)
                      {
                        result = 0;
                        v9 = a1[6];
                        v10 = a1[7];
                        if (v9 + v10 < 0.9 && v9 + v10 > 0.4)
                          return v10 - v9 < 0.1 && v9 - v10 < 0.1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

CFTypeRef create_GenericXYZProfile()
{
  if (create_GenericXYZProfile_predicate != -1)
    dispatch_once(&create_GenericXYZProfile_predicate, &__block_literal_global_131);
  return CFRetain((CFTypeRef)create_GenericXYZProfile_profile);
}

CFTypeRef create_GenericGrayProfile()
{
  if (create_GenericGrayProfile_predicate != -1)
    dispatch_once(&create_GenericGrayProfile_predicate, &__block_literal_global_109);
  return CFRetain((CFTypeRef)create_GenericGrayProfile_profile);
}

_QWORD *CMMProfile::GetLutTagsGeneric(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  int AToBTagSignature;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  const __CFString *SignatureFromFourCharCode;
  int v11;
  int BToATagSignature;
  int v13;
  int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *exception;

  v4 = a1;
  switch(a2)
  {
    case 1:
      AToBTagSignature = CMMProfile::GetAToBTagSignature(a3);
      if (AToBTagSignature == -1)
        return 0;
      v6 = AToBTagSignature;
      v7 = *(_DWORD *)(v4 + 48);
      switch(v7)
      {
        case 1296255029:
          v8 = 893602898;
          break;
        case 1296255030:
          v8 = 910380114;
          break;
        case 1296255031:
          v8 = 927157330;
          break;
        case 1296255032:
          v8 = 943934546;
          break;
        default:
          if (v7 == 1281450528)
            v8 = 1145856354;
          else
            v8 = *(_DWORD *)(v4 + 48);
          break;
      }
      if (*(_DWORD *)(v4 + 52) == 1281450528)
        v11 = 1347182946;
      else
        v11 = *(_DWORD *)(v4 + 52);
      goto LABEL_53;
    case 2:
      BToATagSignature = CMMProfile::GetBToATagSignature(a3);
      if (BToATagSignature == -1)
        return 0;
      v6 = BToATagSignature;
      v13 = *(_DWORD *)(v4 + 48);
      if (*(_DWORD *)(v4 + 52) == 1281450528)
        v8 = 1347182946;
      else
        v8 = *(_DWORD *)(v4 + 52);
      switch(v13)
      {
        case 1296255029:
          v11 = 893602898;
          break;
        case 1296255030:
          v11 = 910380114;
          break;
        case 1296255031:
          v11 = 927157330;
          break;
        case 1296255032:
          v11 = 943934546;
          break;
        default:
          if (v13 == 1281450528)
            v11 = 1145856354;
          else
            v11 = *(_DWORD *)(v4 + 48);
          break;
      }
LABEL_53:
      a1 = v4;
      return CMMProfile::SingleTagContainer(a1, v6, v8, v11);
    case 3:
      if (a3 >= 4)
        goto LABEL_77;
      v9 = dword_18B3EAB10[a3];
      SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(v9);
      if (ColorSyncProfileContainsTag(*(ColorSyncProfileRef *)(v4 + 16), SignatureFromFourCharCode))
      {
        if (*(_DWORD *)(v4 + 52) == 1281450528)
          v8 = 1347182946;
        else
          v8 = *(_DWORD *)(v4 + 52);
        a1 = v4;
        v6 = v9;
        v11 = v8;
        return CMMProfile::SingleTagContainer(a1, v6, v8, v11);
      }
      else
      {
        v16 = *(_QWORD *)(v4 + 168);
        if (v16)
        {
          v18 = *(_QWORD *)(v16 + 8);
          v19 = *(_QWORD *)(v16 + 16);
          v17 = v16 + 8;
          if (v19 - v18 != 48)
            std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(v17, 2uLL);
        }
        else
        {
          v20 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(v4 + 24));
          *(_QWORD *)(v4 + 168) = TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(v20, 2uLL, *(_QWORD *)(v4 + 24));
        }
        v21 = 1145856354;
        v22 = *(_DWORD *)(v4 + 48);
        if (*(_DWORD *)(v4 + 52) == 1281450528)
          v23 = 1347182946;
        else
          v23 = *(_DWORD *)(v4 + 52);
        switch(v22)
        {
          case 1296255029:
            v24 = 893602898;
            break;
          case 1296255030:
            v24 = 910380114;
            break;
          case 1296255031:
            v24 = 927157330;
            break;
          case 1296255032:
            v24 = 943934546;
            break;
          default:
            v24 = 1145856354;
            if (v22 != 1281450528)
              v24 = *(_DWORD *)(v4 + 48);
            break;
        }
        v25 = CMMProfile::GetBToATagSignature(a3);
        v26 = *(_DWORD *)(v4 + 48);
        switch(v26)
        {
          case 1296255029:
            v21 = 893602898;
            break;
          case 1296255030:
            v21 = 910380114;
            break;
          case 1296255031:
            v21 = 927157330;
            break;
          case 1296255032:
            v21 = 943934546;
            break;
          default:
            if (v26 != 1281450528)
              v21 = *(_DWORD *)(v4 + 48);
            break;
        }
        if (*(_DWORD *)(v4 + 52) == 1281450528)
          v27 = 1347182946;
        else
          v27 = *(_DWORD *)(v4 + 52);
        if (*(_DWORD *)(v4 + 96) >= 4u)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v4 + 96);
        v29 = CMMProfile::GetAToBTagSignature(v28);
        result = *(_QWORD **)(v4 + 168);
        v30 = (_DWORD *)result[1];
        v31 = result[2] - (_QWORD)v30;
        if (!v31 || (v30[2] = v25, v30[3] = v23, v30[4] = v24, 0xAAAAAAAAAAAAAAABLL * (v31 >> 3) <= 1))
          std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
        v30[8] = v29;
        v30[9] = v21;
        v30[10] = v27;
      }
      return result;
    case 4:
      v14 = *(_DWORD *)(a1 + 48);
      if (*(_DWORD *)(a1 + 52) == 1281450528)
        v8 = 1347182946;
      else
        v8 = *(_DWORD *)(a1 + 52);
      switch(v14)
      {
        case 1296255029:
          v11 = 893602898;
          break;
        case 1296255030:
          v11 = 910380114;
          break;
        case 1296255031:
          v11 = 927157330;
          break;
        case 1296255032:
          v11 = 943934546;
          break;
        default:
          if (v14 == 1281450528)
            v11 = 1145856354;
          else
            v11 = *(_DWORD *)(a1 + 48);
          break;
      }
      v6 = 1734438260;
      return CMMProfile::SingleTagContainer(a1, v6, v8, v11);
    default:
LABEL_77:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
  }
}

uint64_t CMMProfile::GetBToATagSignature(unsigned int a1)
{
  _DWORD *exception;

  if (a1 >= 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return dword_18B3EAB00[a1];
}

BOOL matrix_equal_matrix(char *cf, uint64_t a2)
{
  _BOOL8 result;
  CFTypeID v5;
  CFTypeID v6;
  int Properties;
  float InputRange;
  float v9;
  float OutputRange;
  float v11;
  float v12;
  _BOOL4 v13;
  float v14;
  CFTypeID v15;
  CFTypeID v16;

  if (cf == (char *)a2)
    return 1;
  result = 0;
  if (cf && a2)
  {
    v5 = CFGetTypeID(cf);
    if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    {
      v15 = v5;
      dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
      v5 = v15;
    }
    if (v5 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID)
      return 0;
    v6 = CFGetTypeID((CFTypeRef)a2);
    if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    {
      v16 = v6;
      dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_6_1156);
      v6 = v16;
    }
    if (v6 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID || *((float *)cf + 4) != *(float *)(a2 + 16))
      return 0;
    result = 0;
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(*(float32x4_t *)(cf + 20), *(float32x4_t *)(a2 + 20)), (int16x8_t)vceqq_f32(*(float32x4_t *)(cf + 36), *(float32x4_t *)(a2 + 36)))), 7uLL))) & 1) == 0|| *((float *)cf + 13) != *(float *)(a2 + 52)|| *((float *)cf + 14) != *(float *)(a2 + 56)|| *((float *)cf + 15) != *(float *)(a2 + 60))
    {
      return result;
    }
    Properties = ColorSyncMatrixGetProperties((unsigned int *)cf);
    if (Properties != ColorSyncMatrixGetProperties((unsigned int *)a2))
      return 0;
    InputRange = ColorSyncMatrixGetInputRange((float *)cf);
    v9 = ColorSyncMatrixGetInputRange((float *)a2);
    result = 0;
    if (InputRange == v9)
    {
      OutputRange = ColorSyncMatrixGetOutputRange((float *)cf);
      v12 = v11;
      v13 = OutputRange == ColorSyncMatrixGetOutputRange((float *)a2);
      return v12 == v14 && v13;
    }
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvCLUTBase::IsNOP(CMMConvCLUTBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  unsigned int i;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t result;
  _DWORD *exception;

  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    if (v8 != 2)
      return 0;
    v10 = *((_QWORD *)this + 8);
    if (v10 != *((_QWORD *)this + 9))
      return 0;
    v11 = 1;
    if (!v10)
      goto LABEL_15;
    v12 = *((_QWORD *)this + 8);
    do
    {
      v13 = v11 < 0;
      v11 *= 2;
      v15 = !v13 && v11 != 0;
      CMMThrowExceptionWithLog(v15, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      --v12;
    }
    while (v12);
    if (v10 >= 0x10)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
    if (v11)
    {
LABEL_15:
      for (i = 0; ; ++i)
      {
        v17 = CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 10) + 16), *(_QWORD *)(*((_QWORD *)this + 10) + 24));
        v18 = i + 1;
        if (v10)
          break;
LABEL_20:
        result = 1;
        if (v11 <= v18)
          return result;
      }
      v19 = 0;
      v20 = 0;
      while (*(unsigned __int16 *)(v17 + 2 * v10 * v18 - 2 - 2 * v19) == (unsigned __int16)((__int16)((unsigned __int16)(i >> v20) << 15) >> 15))
      {
        v19 = ++v20;
        if (v10 <= v20)
          goto LABEL_20;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t CMMConvCLUTBase::GetMaxNofChannels(CMMConvCLUTBase *this)
{
  if (*((_QWORD *)this + 8) <= *((_QWORD *)this + 9))
    return *((_QWORD *)this + 9);
  else
    return *((_QWORD *)this + 8);
}

__CFDictionary *CMMConvCLUTBase::FlattenConversion(CMMConvCLUTBase *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFTypeID v11;
  const void *Value;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  CFNumberRef v16;
  CFDataRef v17;
  CFDataRef v18;
  int v20;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    valuePtr = *((_QWORD *)this + 7);
    v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v5);
      CFRelease(v6);
    }
    valuePtr = *((_QWORD *)this + 8);
    v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v7)
    {
      v8 = v7;
      CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v7);
      CFRelease(v8);
    }
    valuePtr = *((_QWORD *)this + 9);
    v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v9)
    {
      v10 = v9;
      CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v9);
      CFRelease(v10);
    }
    v20 = 0;
    if (a2)
    {
      v11 = CFGetTypeID(a2);
      if (v11 == CFDictionaryGetTypeID())
      {
        Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        v20 = NxMTransformFormatFromValue(Value);
      }
    }
    v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v20);
    if (v13)
    {
      v16 = v13;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v13);
      CFRelease(v16);
    }
    v17 = NxMLUTCreateData(v20, *((UInt8 **)this + 11), 0, *((_QWORD *)this + 7), *((_QWORD *)this + 8), *((_QWORD *)this + 9), v14, v15);
    if (v17)
    {
      v18 = v17;
      CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v17);
      CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v18);
      CFRelease(v18);
    }
    if (CFDictionaryGetCount(Mutable) > 5)
    {
      if (*((_BYTE *)this + 34))
        CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
      CMMConvNode::AddClampingInfo(this, Mutable);
    }
    else
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMLutOutputProfile::~CMMLutOutputProfile(CMMLutOutputProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

int *ConversionManager::InitLabToXYZLut(int *a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _DWORD *exception;

  v2 = 8;
  if (a2 == 1)
    v2 = 4;
  if (!a2)
    v2 = 0;
  v3 = *(_DWORD *)((char *)&qword_18B3FA238 + v2);
  if ((v3 - 1) > 0x1FFFC)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = 0;
  v6 = (double)v3;
  do
  {
    v7 = (double)(int)v5 * 100.0 * 2.00784314 * 0.000244140625;
    if (v7 <= 8.0)
      v8 = v7 * 0.00110705646;
    else
      v8 = pow((v7 + 16.0) / 116.0, 3.0);
    v9 = v8 * v6 * 128.0;
    if (v9 <= 16777216.0)
      v10 = v9 + 0.5;
    else
      v10 = 16777216.5;
    a1[v5++] = vcvtmd_s64_f64(v10);
  }
  while (v5 != 4097);
  return MakeLookups(a1);
}

_QWORD *ConversionManager::AddLabToXYZ(uint64_t a1)
{
  float64x2_t v2;
  float v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CMMConvNode *v17;
  _QWORD *result;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  void (**v23)(CMMMatrix *__hidden);
  __int128 v24;
  __int128 v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  __int128 v35;
  _QWORD v36[4];
  float64x2_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[40];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v23 = off_1E215FED0;
  v33 = 1065353216;
  v24 = xmmword_18B3EA9B0;
  v25 = xmmword_18B3EA9C0;
  v26 = -48464;
  v30 = 4292476157;
  LODWORD(v31) = 6227719;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  memset(&v47[8], 0, 32);
  v42 = 0u;
  v43 = 0u;
  v41 = 0x3FF0000000000000;
  *(_QWORD *)&v44 = 0x3FF0000000000000;
  *(_QWORD *)&v45 = 0xBFE0000000000000;
  *(_OWORD *)v47 = xmmword_18B3EA9D0;
  v48 = 0x3FF0000000000000;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  memset(v36, 0, sizeof(v36));
  v34 = 0u;
  v35 = 0u;
  MatrixMatrix4x4<double>(v34.f64, dbl_18B43BE60, (double *)&v41);
  *(_QWORD *)&v2.f64[0] = v35;
  *(_QWORD *)&v2.f64[1] = v36[0];
  v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), v2);
  v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v36[1]), v37);
  *(float *)v2.f64 = *(double *)&v38;
  v3 = *((double *)&v35 + 1);
  v29 = LODWORD(v2.f64[0]);
  *(float *)v2.f64 = *(double *)&v36[3];
  *(float *)&v4 = *((double *)&v38 + 1);
  *((float *)&v31 + 1) = v3;
  v32 = __PAIR64__(v4, LODWORD(v2.f64[0]));
  v5 = 0;
  *(_QWORD *)(a1 + 24) = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v23, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
  do
  {
    pthread_mutex_lock(&ConversionManager::CreateLabToXYZLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (!labDecodeTableChan0)
    {
      *(_QWORD *)&v19 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v19);
      labDecodeDataChan0Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (_QWORD **)&v19);
      labDecodeDataChan1Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (_QWORD **)&v19);
      labDecodeDataChan2Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (_QWORD **)&v19);
      ConversionManager::InitLabToXYZLut((int *)labDecodeDataChan0Ptr, 0);
      ConversionManager::InitLabToXYZLut((int *)labDecodeDataChan1Ptr, 1);
      ConversionManager::InitLabToXYZLut((int *)labDecodeDataChan2Ptr, 2);
      v6 = labDecodeDataChan1Ptr;
      v7 = *(_DWORD *)(labDecodeDataChan1Ptr + 8160);
      *(_DWORD *)(labDecodeDataChan1Ptr + 8164) = v7;
      *(_DWORD *)(v6 + 8156) = v7;
      v8 = labDecodeDataChan2Ptr;
      v9 = *(_DWORD *)(labDecodeDataChan2Ptr + 8160);
      *(_DWORD *)(labDecodeDataChan2Ptr + 8164) = v9;
      *(_DWORD *)(v8 + 8156) = v9;
      v10 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v19);
      v11 = labDecodeDataChan0Ptr;
      v10[2] = 0;
      v10[3] = v11;
      *v10 = off_1E215FE00;
      v10[1] = 0;
      v10[4] = 21512;
      labDecodeTableChan0 = (uint64_t)v10;
      v12 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v19);
      v13 = labDecodeDataChan1Ptr;
      v12[2] = 0;
      v12[3] = v13;
      *v12 = off_1E215FE00;
      v12[1] = 0;
      v12[4] = 21512;
      labDecodeTableChan1 = (uint64_t)v12;
      v14 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v19);
      v15 = labDecodeDataChan2Ptr;
      v14[2] = 0;
      v14[3] = v15;
      *v14 = off_1E215FE00;
      v14[1] = 0;
      v14[4] = 21512;
      labDecodeTableChan2 = (uint64_t)v14;
      CMMMemMgr::ReleaseMemList((void **)&v19);
    }
    pthread_mutex_unlock(&ConversionManager::CreateLabToXYZLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (v5 == 1)
    {
      v16 = labDecodeTableChan1;
    }
    else if (v5)
    {
      if (v5 == 2)
        v16 = labDecodeTableChan2;
      else
        v16 = 0;
    }
    else
    {
      v16 = labDecodeTableChan0;
    }
    *((_QWORD *)&v19 + 1) = 0x400000000;
    v20 = 0;
    *(_QWORD *)&v19 = 1;
    v21 = xmmword_18B3EA9E0;
    v22 = xmmword_18B3EA9F0;
    v17 = (CMMConvNode *)CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
    CMMConvTRC::CMMConvTRC((uint64_t)v17, v5, v16, 21512, &v19, *(_QWORD *)(a1 + 24), 3, 1, 2.0, 0, 0);
    *(_QWORD *)(a1 + 24) = v17;
    ++v5;
  }
  while (v5 != 3);
  v24 = xmmword_18B3EAA00;
  v25 = xmmword_18B3EAA00;
  v26 = 0x10000;
  v30 = 0;
  v31 = 0;
  v27 = (float32x4_t)xmmword_18B3EAA10;
  v28 = (float32x4_t)xmmword_18B3EAA20;
  v29 = 1062415525;
  v32 = 0;
  result = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v23, *(CMMMemMgr **)(a1 + 8), v17);
  *(_QWORD *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 36) = 1482250784;
  return result;
}

void sub_18B3C0984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ConversionManager::AddCLUTConv(uint64_t a1, CMMLutTagBase *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  CMMConvCLUTBase *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t v28;
  CMMMemMgr *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  _BOOL8 v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  _BOOL8 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BOOL8 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  _BOOL8 v100;
  int v101;
  int v102;
  uint64_t v103;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;

  v5 = a1;
  if (a3 == 1)
  {
    v6 = a1;
    if (a4 == 3 && (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)a2 + 64))(a2) == 2)
    {
      v18 = (*(uint64_t (**)(CMMLutTagBase *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(v5 + 8));
      if (v18)
      {
        v19 = v18;
        v20 = 0;
        v21 = 1;
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = CMMTable::FloatData(*(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24));
          v25 = 0;
          v26 = (unsigned __int16 *)(v24 + 2 * v20);
          do
          {
            v27 = *v26--;
            v22 &= v27 == (unsigned __int16)((__int16)((unsigned __int16)(v20 >> v25++) << 15) >> 15);
          }
          while (v25 != 3);
          v21 = 0;
          v20 = 1;
        }
        while ((v23 & 1) != 0);
        if ((v22 & 1) != 0)
        {
          v5 = v6;
          result = (uint64_t)CMMBase::NewInternal(0x30uLL, *(_QWORD ***)(v6 + 8));
          v7 = (CMMConvCLUTBase *)result;
          v28 = *(_QWORD *)(v6 + 24);
          *(_DWORD *)(result + 8) = 1;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v28;
          if (v28)
            *(_QWORD *)(v28 + 16) = result;
          *(_QWORD *)(result + 40) = 0x3F80000000000000;
          *(_QWORD *)result = off_1E215D690;
          *(_DWORD *)(result + 33) = 1;
          goto LABEL_111;
        }
      }
    }
  }
  else
  {
    if (a3 == 4)
    {
      v7 = (CMMConvCLUTBase *)CMMBase::NewInternal(0xA0uLL, *(_QWORD ***)(a1 + 8));
      CMMConvCLUTBase::CMMConvCLUTBase(v7, a2, *(CMMMemMgr **)(v5 + 8), *(CMMConvNode **)(v5 + 24));
      *v43 = off_1E215CD58;
      if (v43[8] == 4)
        v44 = 0;
      else
        v44 = 4294967125;
      result = CMMThrowExceptionOnError(v44);
      v45 = *((_DWORD *)v7 + 18);
      v46 = *((_DWORD *)v7 + 14);
      v47 = v46 * v45;
      *((_DWORD *)v7 + 24) = v45;
      *((_DWORD *)v7 + 25) = v46 * v45;
      v48 = v46 * v45 * v46;
      v49 = v48 * v46;
      *((_DWORD *)v7 + 26) = v48;
      *((_DWORD *)v7 + 27) = v49;
      *((_DWORD *)v7 + 28) = v47 + v45;
      *((_DWORD *)v7 + 29) = v48 + v45;
      *((_DWORD *)v7 + 30) = v48 + v47;
      *((_DWORD *)v7 + 31) = v48 + v47 + v45;
      v50 = v49 + v47;
      *((_DWORD *)v7 + 32) = v49 + v45;
      *((_DWORD *)v7 + 33) = v49 + v47;
      v51 = v49 + v48;
      *((_DWORD *)v7 + 34) = v50 + v45;
      *((_DWORD *)v7 + 35) = v51;
      v52 = v51 + v45;
      v53 = v51 + v47;
      *((_DWORD *)v7 + 36) = v52;
      *((_DWORD *)v7 + 37) = v53;
      *((_DWORD *)v7 + 38) = v53 + v45;
      v17 = off_1E215C188;
      goto LABEL_33;
    }
    v6 = a1;
    if (a3 == 3)
    {
      v7 = (CMMConvCLUTBase *)CMMBase::NewInternal(0x80uLL, *(_QWORD ***)(a1 + 8));
      CMMConvCLUTBase::CMMConvCLUTBase(v7, a2, *(CMMMemMgr **)(v6 + 8), *(CMMConvNode **)(v6 + 24));
      *v8 = off_1E215C580;
      if (v8[8] == 3)
        v9 = 0;
      else
        v9 = 4294967125;
      result = CMMThrowExceptionOnError(v9);
      v11 = *((_DWORD *)v7 + 18);
      v12 = *((_DWORD *)v7 + 14);
      v13 = v12 * v11;
      *((_DWORD *)v7 + 24) = v11;
      *((_DWORD *)v7 + 25) = v12 * v11;
      v14 = v12 * v11 * v12;
      *((_DWORD *)v7 + 26) = v14;
      *((_DWORD *)v7 + 27) = v13 + v11;
      v15 = v14 + v11;
      v16 = v14 + v13;
      *((_DWORD *)v7 + 28) = v15;
      *((_DWORD *)v7 + 29) = v16;
      *((_DWORD *)v7 + 30) = v16 + v11;
      v17 = off_1E215BF78;
LABEL_33:
      *(_QWORD *)v7 = v17;
      goto LABEL_111;
    }
  }
  v7 = (CMMConvCLUTBase *)CMMBase::NewInternal(0x88uLL, *(_QWORD ***)(v6 + 8));
  v29 = *(CMMMemMgr **)(v6 + 8);
  v106 = v6;
  CMMConvCLUTBase::CMMConvCLUTBase(v7, a2, v29, *(CMMConvNode **)(v6 + 24));
  *v30 = off_1E215CBE8;
  v37 = (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)a2 + 48))(a2);
  if (v37)
  {
    v38 = 1;
    do
    {
      v39 = v38;
      v38 *= 2;
      v41 = v39 >= 0 && v38 != 0;
      CMMThrowExceptionWithLog(v41, "Overflow in Power", v31, v32, v33, v34, v35, v36);
      --v37;
    }
    while (v37);
    v42 = 8 * v39;
  }
  else
  {
    v42 = 4;
  }
  *((_QWORD *)v7 + 12) = off_1E215FE00;
  *((_QWORD *)v7 + 13) = 1;
  *((_QWORD *)v7 + 15) = 0;
  *((_QWORD *)v7 + 16) = v42;
  *((_QWORD *)v7 + 14) = CMMBase::NewInternal(v42, (_QWORD **)v29);
  *((_QWORD *)v7 + 12) = &off_1E215FF28;
  if (*((_QWORD *)v7 + 8) <= 0xFuLL)
    v54 = 0;
  else
    v54 = 4294967125;
  CMMThrowExceptionOnError(v54);
  result = CMMTable::FloatData(*((_QWORD *)v7 + 14), *((_QWORD *)v7 + 15));
  v61 = (_DWORD *)result;
  v62 = *((_QWORD *)v7 + 8);
  *(_DWORD *)result = *((_QWORD *)v7 + 9);
  if (v62 < 2)
    goto LABEL_110;
  v63 = 0;
  LODWORD(v64) = 1;
  do
  {
    if ((_DWORD)v64 == 1)
    {
      v70 = *v61 * *((_DWORD *)v7 + 14);
    }
    else
    {
      v65 = 1;
      v66 = v63;
      do
      {
        v67 = 2 * v65;
        v69 = v65 >= 0 && v67 != 0;
        result = CMMThrowExceptionWithLog(v69, "Overflow in Power", v55, v56, v57, v58, v59, v60);
        v65 = v67;
        --v66;
      }
      while (v66);
      v70 = v61[v67 - 1] * *((_DWORD *)v7 + 14);
      if (!(_DWORD)v64)
      {
        v71 = 1;
        goto LABEL_60;
      }
    }
    v72 = 1;
    v73 = v64;
    do
    {
      v71 = (2 * v72);
      v75 = v72 >= 0 && (_DWORD)v71 != 0;
      result = CMMThrowExceptionWithLog(v75, "Overflow in Power", v55, v56, v57, v58, v59, v60);
      v72 = v71;
      --v73;
    }
    while (v73);
LABEL_60:
    v61[v71 - 1] = v70;
    v64 = (v64 + 1);
    v76 = *((_QWORD *)v7 + 8);
    ++v63;
  }
  while (v76 > v64);
  if (v76 >= 2)
  {
    v77 = 1;
    v78 = 2;
    while (1)
    {
      v79 = v77;
      v80 = 1;
      do
      {
        v81 = v80 < 0;
        v80 *= 2;
        v83 = !v81 && v80 != 0;
        CMMThrowExceptionWithLog(v83, "Overflow in Power", v55, v56, v57, v58, v59, v60);
        --v79;
      }
      while (v79);
      v84 = v77 + 1;
      v85 = v78;
      v86 = 1;
      do
      {
        v87 = 2 * v86;
        v89 = v86 >= 0 && v87 != 0;
        result = CMMThrowExceptionWithLog(v89, "Overflow in Power", v55, v56, v57, v58, v59, v60);
        v86 = v87;
        --v85;
      }
      while (v85);
      v107 = v78;
      v108 = v84;
      v90 = v80 | 1;
      v91 = *((_QWORD *)v7 + 8);
      if ((v80 | 1uLL) < v87)
        break;
LABEL_109:
      v77 = v108;
      v78 = v107 + 1;
      if (v108 >= v91)
        goto LABEL_110;
    }
    v92 = *((_QWORD *)v7 + 8);
    while (1)
    {
      v93 = v90;
      if (v92)
        break;
      v95 = 0;
LABEL_108:
      v61[v80] = v95;
      v90 = v93 + 1;
      v80 = v93;
      if (v93 + 1 == v87)
        goto LABEL_109;
    }
    LODWORD(v94) = 0;
    v95 = 0;
    while (2)
    {
      if ((_DWORD)v94)
      {
        v96 = 1;
        v97 = v94;
        do
        {
          v98 = (2 * v96);
          v100 = v96 >= 0 && (_DWORD)v98 != 0;
          result = CMMThrowExceptionWithLog(v100, "Overflow in Power", v55, v56, v57, v58, v59, v60);
          v96 = v98;
          --v97;
        }
        while (v97);
        if ((v93 & v98) != 0)
        {
          v101 = 1;
          v102 = v94;
          do
          {
            v103 = (2 * v101);
            v105 = v101 >= 0 && (_DWORD)v103 != 0;
            result = CMMThrowExceptionWithLog(v105, "Overflow in Power", v55, v56, v57, v58, v59, v60);
            v101 = v103;
            --v102;
          }
          while (v102);
LABEL_104:
          v95 += v61[v103 - 1];
        }
      }
      else if ((v93 & 1) != 0)
      {
        v103 = 1;
        goto LABEL_104;
      }
      v94 = (v94 + 1);
      v91 = *((_QWORD *)v7 + 8);
      if (v91 <= v94)
      {
        v92 = *((_QWORD *)v7 + 8);
        goto LABEL_108;
      }
      continue;
    }
  }
LABEL_110:
  *(_QWORD *)v7 = off_1E215C080;
  v5 = v106;
LABEL_111:
  *(_QWORD *)(v5 + 24) = v7;
  if (!*(_QWORD *)(v5 + 16))
    *(_QWORD *)(v5 + 16) = v7;
  return result;
}

void sub_18B3C0F34(_Unwind_Exception *a1)
{
  CMMConvCLUTBase *v1;

  CMMConvCLUTBase::~CMMConvCLUTBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMOutputProfile::GetConversionType(CMMOutputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t CMMOutputProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;
  _DWORD *exception;

  if (a2 == 1)
  {
    v2 = *(_DWORD *)(a1 + 48);
    switch(v2)
    {
      case 0x4D434835u:
        result = 893602898;
        break;
      case 0x4D434836u:
        result = 910380114;
        break;
      case 0x4D434837u:
        result = 927157330;
        break;
      case 0x4D434838u:
        result = 943934546;
        break;
      default:
        v5 = 1145856354;
        v4 = v2 == 1281450528;
        goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0xFFFFFFFE) != 2 && a2 != 4)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = -50;
    }
    v2 = *(_DWORD *)(a1 + 52);
    v4 = v2 == 1281450528;
    v5 = 1347182946;
LABEL_8:
    if (v4)
      return v5;
    else
      return v2;
  }
  return result;
}

uint64_t CMMOutputProfile::GetDstColorSpace(uint64_t a1, int a2, BOOL *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    v5 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v5 == 1281450528)
    {
      v6 = 0;
      v5 = 1347182946;
      goto LABEL_14;
    }
LABEL_11:
    if ((_DWORD)v5 != -1)
    {
      v6 = 0;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (a2 != 4)
  {
    if (a2 == 2)
    {
      v5 = *(unsigned int *)(a1 + 48);
      switch((int)v5)
      {
        case 1296255029:
          goto LABEL_8;
        case 1296255030:
          goto LABEL_17;
        case 1296255031:
          goto LABEL_18;
        case 1296255032:
          goto LABEL_19;
        default:
          goto LABEL_9;
      }
    }
LABEL_13:
    v6 = 4294967246;
    v5 = 0xFFFFFFFFLL;
    goto LABEL_14;
  }
  v5 = *(unsigned int *)(a1 + 48);
  switch((int)v5)
  {
    case 1296255029:
LABEL_8:
      v6 = 0;
      v5 = 893602898;
      break;
    case 1296255030:
LABEL_17:
      v6 = 0;
      v5 = 910380114;
      break;
    case 1296255031:
LABEL_18:
      v6 = 0;
      v5 = 927157330;
      break;
    case 1296255032:
LABEL_19:
      v6 = 0;
      v5 = 943934546;
      break;
    default:
LABEL_9:
      if ((_DWORD)v5 != 1281450528)
        goto LABEL_11;
      v6 = 0;
      v5 = 1145856354;
      break;
  }
LABEL_14:
  CMMThrowExceptionOnError(v6);
  if (a3)
    *a3 = v4 == 1;
  return v5;
}

void CMMConvCLUTBase::CMMConvCLUTBase(CMMConvCLUTBase *this, CMMLutTagBase *a2, CMMMemMgr *a3, CMMConvNode *a4)
{
  uint64_t v7;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a4;
  if (a4)
    *((_QWORD *)a4 + 2) = this;
  *((_QWORD *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 0;
  *(_QWORD *)this = off_1E215D378;
  *((_QWORD *)this + 7) = (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)a2 + 64))(a2);
  *((_QWORD *)this + 8) = (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)a2 + 48))(a2);
  *((_QWORD *)this + 9) = (*(uint64_t (**)(CMMLutTagBase *))(*(_QWORD *)a2 + 56))(a2);
  v7 = (*(uint64_t (**)(CMMLutTagBase *, CMMMemMgr *))(*(_QWORD *)a2 + 40))(a2, a3);
  *((_QWORD *)this + 10) = v7;
  *((_QWORD *)this + 11) = CMMTable::FloatData(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  *((_BYTE *)this + 35) = 1;
}

uint64_t CMMConvCLUTBase::Collapse(CMMConvCLUTBase *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

unint64_t CMMLutTagBase::CalculateProtectionZone(unint64_t this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
    return 0;
  v11 = 0;
  for (i = 0; i != a2; ++i)
  {
    if (i)
    {
      v13 = i;
      v14 = 1;
      do
      {
        v15 = v14 * this;
        v16 = v14 * this >= v14 && v15 >= this;
        v17 = v16;
        CMMThrowExceptionWithLog(v17, "Overflow in Power", a3, a4, a5, a6, a7, a8);
        v14 = v15;
        --v13;
      }
      while (v13);
    }
    else
    {
      v15 = 1;
    }
    if (is_mul_ok(a3, v15))
      v18 = 0;
    else
      v18 = -170;
    if (a3)
      v19 = v15 * a3;
    else
      v19 = 0;
    if (a3)
      v20 = v18;
    else
      v20 = 0;
    CMMThrowExceptionOnError(v20);
    v16 = __CFADD__(v19, v11);
    v11 += v19;
    if (v16)
      v21 = 4294967126;
    else
      v21 = 0;
    CMMThrowExceptionOnError(v21);
  }
  if (v11 > 0x20000000)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return v11;
}

uint64_t CMMConvNode::GetTransformType(CMMConvNode *this, const __CFDictionary *a2)
{
  return 8;
}

uint64_t CMMConvNode::SetInputClamp(uint64_t this)
{
  *(_BYTE *)(this + 35) = 1;
  return this;
}

uint64_t CMMProfile::GetAToBTagSignature(unsigned int a1)
{
  _DWORD *exception;

  if (a1 >= 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return dword_18B3EAAF0[a1];
}

void CMMLut8Tag::~CMMLut8Tag(CMMLut8Tag *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E215BC80;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 13);
  if (v5)
  {
    v6 = v5[1];
    if (v6)
    {
      v7 = v6 - 1;
      v5[1] = v7;
      if (!v7)
        (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)this + 14);
  if (v8)
  {
    v9 = v8[1];
    if (v9)
    {
      v10 = v9 - 1;
      v8[1] = v10;
      if (!v10)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  CMMTag::~CMMTag(this);
}

{
  pthread_mutex_t **v1;

  CMMLut8Tag::~CMMLut8Tag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMLut8Tag::EncodeLut(uint64_t result, _DWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *exception;

  v3 = 0;
  for (i = 0; i != 16781312; i += 4096)
  {
    v5 = v3 >> 24;
    v6 = *(unsigned __int8 *)(result + (v3 >> 24));
    if (a3)
      LODWORD(v6) = (_DWORD)v6 << 16;
    else
      v6 = ((65792 * v6 + 0x8000) + 0x101000000 * v6) >> 16;
    if (i != (v3 & 0xFF000000) / 0xFF)
    {
      if (v5 >= 0xFF)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      v7 = *(unsigned __int8 *)(result + (v5 + 1));
      if (a3)
        LODWORD(v7) = (_DWORD)v7 << 16;
      else
        v7 = ((65792 * v7 + 0x8000) + 0x101000000 * v7) >> 16;
      v8 = (i - (v5 << 24) / 0xFF) * ((int)v7 - (int)v6);
      if (v8)
      {
        v9 = 255 * v8;
        v11 = v9 + 0x800000;
        v10 = v9 < -8388608;
        v12 = v9 + 25165823;
        if (!v10)
          v12 = v11;
        LODWORD(v6) = v6 + (v12 >> 24);
      }
    }
    if ((int)v6 >= 0x1000000)
      LODWORD(v6) = 0x1000000;
    *a2++ = v6;
    v3 += 1044480;
  }
  return result;
}

_QWORD *CMMLut8Tag::CopyClut(CMMLut8Tag *this, CMMMemMgr *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;

  if (*((_QWORD *)this + 12))
    v4 = 0;
  else
    v4 = 4294967246;
  CMMThrowExceptionOnError(v4);
  v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  v6 = (*(uint64_t (**)(CMMLut8Tag *))(*(_QWORD *)this + 72))(this);
  v7 = v6 + v5;
  if (__CFADD__(v6, v5))
    v8 = 4294967246;
  else
    v8 = 0;
  CMMThrowExceptionOnError(v8);
  CMMThrowExceptionOnError((v7 >> 63) & 0xFFFFFFCELL);
  v9 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
  v10 = 1;
  *v9 = off_1E215FE00;
  v9[1] = 1;
  v9[3] = 0;
  v9[4] = 2 * v7;
  v11 = CMMBase::NewInternal(2 * v7, (_QWORD **)a2);
  v9[2] = v11;
  v12 = (_WORD *)CMMTable::FloatData((uint64_t)v11, v9[3]);
  v19 = (unsigned __int8 *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 12) + 16), *(_QWORD *)(*((_QWORD *)this + 12) + 24));
  v20 = *((unsigned __int8 *)this + 50);
  if (!*((_BYTE *)this + 50))
    goto LABEL_17;
  v21 = *((unsigned __int8 *)this + 52);
  v10 = 1;
  do
  {
    v22 = v10;
    v10 *= v21;
    v24 = v10 >= v22 && v10 >= v21;
    CMMThrowExceptionWithLog(v24, "Overflow in Power", v13, v14, v15, v16, v17, v18);
    --v20;
  }
  while (v20);
  if (v10)
  {
LABEL_17:
    v25 = 0;
    v26 = *((unsigned __int8 *)this + 51);
    do
    {
      v27 = v26;
      if ((_DWORD)v26)
      {
        do
        {
          v28 = *v19++;
          *v12++ = v28 | (v28 << 8);
          --v27;
        }
        while (v27);
      }
      ++v25;
    }
    while (v25 != v10);
  }
  return v9;
}

BOOL CMMLut8Tag::HasCLUT(CMMLut8Tag *this)
{
  _QWORD *v3;

  if ((unint64_t)(*(uint64_t (**)(CMMLut8Tag *))(*(_QWORD *)this + 64))(this) > 2)
    return 1;
  if ((*(uint64_t (**)(CMMLut8Tag *))(*(_QWORD *)this + 64))(this) != 2)
    return 0;
  if ((*(uint64_t (**)(CMMLut8Tag *))(*(_QWORD *)this + 48))(this) != 3
    || (*(uint64_t (**)(CMMLut8Tag *))(*(_QWORD *)this + 56))(this) != 3)
  {
    return 1;
  }
  v3 = (_QWORD *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 12) + 16), *(_QWORD *)(*((_QWORD *)this + 12) + 24));
  return *v3 != 0xFF00FF0000000000 || v3[1] != 0xFF0000FFFFFF0000 || v3[2] != 0xFFFFFF00FFFFFF00;
}

unint64_t CMMLut8Tag::InterpolationProtectionZone(CMMLut8Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((unsigned __int8 *)this + 50);
  if ((v8 - 3) > 1)
    return 0;
  else
    return CMMLutTagBase::CalculateProtectionZone(*((unsigned __int8 *)this + 52), v8, *((unsigned __int8 *)this + 51), a4, a5, a6, a7, a8);
}

CMMTable *CMMLut8Tag::MakeOutputLutTable(CMMLut8Tag **a1, uint64_t a2, uint64_t a3, _QWORD **a4, int a5)
{
  CMMTable *v10;
  _QWORD *v11;
  uint64_t v12;
  CMMLut8Tag *OutputTable;
  BOOL *v14;
  long double v15;
  double v16;
  CMMMemMgr *v17;
  float v18;
  _QWORD *FloatCopy;
  unsigned __int8 v21;

  v10 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
  *(_QWORD *)v10 = off_1E215FE00;
  *((_QWORD *)v10 + 1) = 1;
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 21512;
  v11 = CMMBase::NewInternal(0x5408uLL, a4);
  *((_QWORD *)v10 + 2) = v11;
  v12 = CMMTable::FloatData((uint64_t)v11, *((_QWORD *)v10 + 3));
  (*((void (**)(CMMLut8Tag **, uint64_t, uint64_t, BOOL))*a1 + 13))(a1, a2, v12, a5 == 1347182946);
  if (a3)
  {
    v21 = 0;
    OutputTable = (CMMLut8Tag *)CMMLut8Tag::GetOutputTable(a1[14], a2);
    CMMLut8Tag::EvaluateGamma(OutputTable, &v21, v14, v15, v16);
    if (v21 && v18 == 1.0)
    {
      FloatCopy = 0;
      *(_DWORD *)a3 = 1;
      *(_BYTE *)(a3 + 8) = 1;
      *(_DWORD *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 24) = 1065353216;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      FloatCopy = CMMTable::MakeFloatCopy(v10, a4, v17);
    }
    *(_QWORD *)(a3 + 16) = FloatCopy;
  }
  return v10;
}

CMMTable *CMMLut8Tag::MakeInputLutTable(CMMLut8Tag **a1, uint64_t a2, uint64_t a3, _QWORD **a4, int a5)
{
  CMMTable *v10;
  _QWORD *v11;
  uint64_t v12;
  CMMLut8Tag *OutputTable;
  BOOL *v14;
  long double v15;
  double v16;
  CMMMemMgr *v17;
  float v18;
  unsigned __int8 v20;

  v10 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
  *(_QWORD *)v10 = off_1E215FE00;
  *((_QWORD *)v10 + 1) = 1;
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 21512;
  v11 = CMMBase::NewInternal(0x5408uLL, a4);
  *((_QWORD *)v10 + 2) = v11;
  v12 = CMMTable::FloatData((uint64_t)v11, *((_QWORD *)v10 + 3));
  (*((void (**)(CMMLut8Tag **, uint64_t, uint64_t, BOOL))*a1 + 12))(a1, a2, v12, a5 == 1347182946);
  if (a3)
  {
    v20 = 0;
    OutputTable = (CMMLut8Tag *)CMMLut8Tag::GetOutputTable(a1[13], a2);
    CMMLut8Tag::EvaluateGamma(OutputTable, &v20, v14, v15, v16);
    *(_DWORD *)a3 = 1;
    *(_OWORD *)(a3 + 4) = 0u;
    *(_OWORD *)(a3 + 20) = 0u;
    *(_OWORD *)(a3 + 36) = 0u;
    *(_DWORD *)(a3 + 52) = 0;
    if (v20 && v18 == 1.0)
    {
      *(_DWORD *)(a3 + 24) = 1065353216;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 16) = CMMTable::MakeFloatCopy(v10, a4, v17);
    }
  }
  return v10;
}

uint64_t CMMLut8Tag::GetOutputLutSize(CMMLut8Tag *this)
{
  return 256;
}

uint64_t CMMLut8Tag::GetInputLutSize(CMMLut8Tag *this)
{
  return 256;
}

uint64_t CMMLut8Tag::GetOutputTable(CMMLut8Tag *this, int a2)
{
  _DWORD *exception;

  if (!this)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return CMMTable::FloatData(*((_QWORD *)this + 2), *((_QWORD *)this + 3)) + (a2 << 8);
}

uint64_t CMMLut8Tag::MakeOutputLut(CMMLut8Tag *this, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t OutputTable;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  int v16;
  int v17;
  _BYTE v18[8216];
  _BYTE v19[8152];
  uint64_t v20;

  v3 = MEMORY[0x1E0C80A78](this, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v20 = *MEMORY[0x1E0C80C00];
  OutputTable = CMMLut8Tag::GetOutputTable(*(CMMLut8Tag **)(v3 + 112), v8);
  v11 = (unsigned __int8 *)OutputTable;
  if ((v9 - 1) <= 1 && v5)
  {
    bzero(&v17, 0x4004uLL);
    memset(v7, 255, 0x4004uLL);
    CMMLut8Tag::EncodeLut((uint64_t)v11, &v17, 0);
    v12 = (65792 * *v11 + 0x8000 + 0x101000000 * (unint64_t)*v11) >> 16;
    v13 = (65792 * v11[128] + 0x8000 + 0x101000000 * (unint64_t)v11[128]) >> 16;
    v14 = (65792 * v11[255] + 0x8000 + 0x101000000 * (unint64_t)v11[255]) >> 16;
    *v7 = v12;
    memcpy(v7 + 1, v18, 0x2018uLL);
    v7[2057] = v13;
    v7[2056] = v13;
    v7[2055] = v13;
    result = (uint64_t)memcpy(v7 + 2058, v19, 0x1FD8uLL);
    v7[4096] = v14;
  }
  else
  {
    result = CMMLut8Tag::EncodeLut(OutputTable, v7, 0);
    v16 = v7[4096];
    v7[1] = *v7;
    v7[4095] = v16;
  }
  return result;
}

uint64_t CMMLut8Tag::GetOutputChan(CMMLut8Tag *this)
{
  return *((unsigned __int8 *)this + 51);
}

uint64_t CMMLut8Tag::GetCLutPoints(CMMLut8Tag *this)
{
  return *((unsigned __int8 *)this + 52);
}

void CMMLut8Tag::EvaluateGamma(CMMLut8Tag *this, unsigned __int8 *a2, BOOL *a3, long double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  double v12;
  uint64_t v13;
  double v14;

  v6 = 0;
  while (v6 == *((unsigned __int8 *)this + v6))
  {
    if (++v6 == 256)
    {
      *a2 = 1;
      return;
    }
  }
  v7 = 0;
  v8 = 0;
  *a2 = 0;
  v9 = 0.0;
  do
  {
    if (v7 != 255 && v7)
    {
      LOBYTE(a4) = *((_BYTE *)this + v7);
      a4 = (double)*(unint64_t *)&a4;
      v10 = a4 / 255.0;
      if (a4 / 255.0 != 0.0 && v10 != 1.0)
      {
        v12 = log((double)v7 / 255.0);
        a4 = log(v10) / v12;
        v9 = v9 + a4;
        ++v8;
      }
    }
    ++v7;
  }
  while (v7 != 256);
  if (v8)
  {
    v13 = 0;
    v14 = v9 / (double)v8;
    do
    {
      LOBYTE(a5) = *((_BYTE *)this + v13);
      if (vabdd_f64((double)*(unint64_t *)&a5 / 255.0, pow((double)v13 / 255.0, v14)) > 0.001)
        break;
      ++v13;
    }
    while (v13 != 256);
  }
}

uint64_t CMMLut8Tag::MakeInputLut(CMMLut8Tag *this, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t OutputTable;
  unsigned __int8 *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  int v16;
  int v17;
  _BYTE v18[8216];
  _BYTE v19[8152];
  uint64_t v20;

  v3 = MEMORY[0x1E0C80A78](this, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v20 = *MEMORY[0x1E0C80C00];
  OutputTable = CMMLut8Tag::GetOutputTable(*(CMMLut8Tag **)(v3 + 104), v8);
  v11 = (unsigned __int8 *)OutputTable;
  if ((v9 - 1) <= 1 && v5)
  {
    bzero(&v17, 0x4004uLL);
    memset(v7, 255, 0x4004uLL);
    CMMLut8Tag::EncodeLut((uint64_t)v11, &v17, 1);
    v12 = (65792 * *v11 + 0x8000 + 0x101000000 * (unint64_t)*v11) >> 16;
    v13 = v11[128] << 16;
    v14 = (65792 * v11[255] + 0x8000 + 0x101000000 * (unint64_t)v11[255]) >> 16;
    *v7 = v12;
    memcpy(v7 + 1, v18, 0x2018uLL);
    v7[2057] = v13;
    v7[2056] = v13;
    v7[2055] = v13;
    result = (uint64_t)memcpy(v7 + 2058, v19, 0x1FD8uLL);
    v7[4096] = v14;
  }
  else
  {
    result = CMMLut8Tag::EncodeLut(OutputTable, v7, 0);
    v16 = v7[4096];
    v7[1] = *v7;
    v7[4095] = v16;
  }
  return result;
}

uint64_t CMMLut8Tag::GetInputChan(CMMLut8Tag *this)
{
  return *((unsigned __int8 *)this + 50);
}

uint64_t NxMTransformFormatFromValue(const void *a1)
{
  CFTypeID v2;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (v2 != CFStringGetTypeID())
    return 0;
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBX8))
    return 3;
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBX16))
    return 4;
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBXFloat16))
    return 5;
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBXFloat32))
    return 6;
  if (CFEqual(a1, (CFTypeRef)kColorSyncNxMLUTFormatFixed16))
    return 0;
  if (CFEqual(a1, (CFTypeRef)kColorSyncNxMLUTFormatFloat16))
    return 1;
  if (!CFEqual(a1, (CFTypeRef)kColorSyncNxMLUTFormatFloat32))
    return 0;
  return 2;
}

CFDataRef NxMLUTCreateData(int a1, UInt8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BOOL8 v18;
  unint64_t v19;
  CFIndex v20;
  __CFData *Mutable;
  __CFData *v22;
  uint64_t (*v23)();
  uint64_t (*v24)();
  __CFData *v25;
  __CFData *v27;
  UInt8 *v28;
  _BYTE *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  __CFData *v35;
  UInt8 *v36;
  _WORD *v37;
  __int16 *v38;
  __int16 v39;
  CFIndex v40;
  __CFData *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  void *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  __CFData *v50;
  UInt8 *v51;
  _DWORD *v52;
  int *v53;
  int v54;
  UInt8 **p_MutableBytePtr;
  __CFData *v56;
  CFIndex v57;
  __CFData *v58;
  uint64_t v59;
  UInt8 *v60;
  _WORD *v61;
  __int16 *v62;
  __int16 v63;
  __CFData *v64;
  UInt8 *v65;
  int8x8_t v66;
  unsigned __int16 *v67;
  float32x2_t v68;
  uint32x2_t v73;
  float32x2_t v74;
  unint64_t v75;
  __CFData *v76;
  UInt8 *v77;
  uint64_t v78;
  UInt8 *v79;
  UInt8 *v80;
  uint64_t v81;
  UInt8 *v82;
  UInt8 *v83;
  uint64_t v84;
  unsigned __int16 *v85;
  UInt8 *v86;
  unsigned __int16 *v87;
  UInt8 *v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  __CFData *v94;
  UInt8 *v95;
  uint64_t v96;
  UInt8 *v97;
  UInt8 *v98;
  uint64_t v99;
  UInt8 *v100;
  UInt8 *v101;
  UInt8 *v102;
  UInt8 *v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  __CFData *v108;
  UInt8 *v109;
  __CFData *v110;
  unsigned __int16 *v111;
  unint64_t v112;
  unint64_t v113;
  __CFData *v114;
  size_t v115;
  char *v116;
  uint64_t v117;
  UInt8 *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  UInt8 *v122;
  uint64_t v123;
  char *v124;
  UInt8 *v125;
  char *v126;
  UInt8 *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  __CFData *v131;
  size_t v132;
  char *v133;
  uint64_t v134;
  UInt8 *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  UInt8 *v139;
  char *v140;
  UInt8 *v141;
  unint64_t v142;
  unint64_t v143;
  __CFData *v144;
  UInt8 *v145;
  uint64_t v146;
  UInt8 *v147;
  UInt8 *v148;
  uint64_t v149;
  UInt8 *v150;
  UInt8 *v151;
  uint64_t v152;
  UInt8 *v153;
  UInt8 *v154;
  UInt8 *v155;
  UInt8 *v156;
  unint64_t v157;
  unint64_t v158;
  __CFData *v159;
  UInt8 *v160;
  uint64_t v161;
  UInt8 *v162;
  UInt8 *v163;
  uint64_t v164;
  UInt8 *v165;
  UInt8 *v166;
  UInt8 *v167;
  UInt8 *v168;
  unint64_t v169;
  unint64_t v170;
  __CFData *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  unint64_t v174;
  __CFData *v175;
  unint64_t v176;
  __CFData *v177;
  UInt8 *v178;
  int8x8_t v179;
  uint64_t v180;
  UInt8 *v181;
  float32x2_t v182;
  uint64_t v184;
  UInt8 *v185;
  UInt8 *v186;
  uint64_t v187;
  UInt8 *v188;
  unsigned __int16 *v189;
  UInt8 *v190;
  unsigned __int16 *v191;
  unint64_t v192;
  uint32x2_t v193;
  float32x2_t v194;
  unint64_t v195;
  __CFData *v196;
  UInt8 *v197;
  int8x8_t v198;
  uint64_t v199;
  UInt8 *v200;
  float32x2_t v201;
  uint64_t v203;
  UInt8 *v204;
  UInt8 *v205;
  UInt8 *v206;
  UInt8 *v207;
  unint64_t v208;
  uint32x2_t v209;
  float32x2_t v210;
  UInt8 *MutableBytePtr;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v10 = a4;
  v11 = a3;
  if (a5)
  {
    v14 = 1;
    v15 = a5;
    do
    {
      v16 = v14 * v10;
      v18 = v14 * v10 >= v14 && v16 >= v10;
      CMMThrowExceptionWithLog(v18, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      v14 = v16;
      --v15;
    }
    while (v15);
  }
  else
  {
    v16 = 1;
  }
  v19 = v16 * a6;
  switch(a1)
  {
    case 0:
      v20 = 2 * v19;
      if (!v11)
        return CFDataCreate(0, a2, v20);
      Mutable = CFDataCreateMutable(0, 2 * v19);
      v22 = Mutable;
      if (Mutable)
      {
        CFDataSetLength(Mutable, 2 * v19);
        v215 = a2;
        v216 = 1;
        v217 = v19;
        v218 = 4 * v19;
        MutableBytePtr = CFDataGetMutableBytePtr(v22);
        v212 = 1;
        v213 = v19;
        v214 = 2 * v19;
        v23 = (uint64_t (*)())ColorSync_vImageConvert_Fto16U_ptr__;
        if (!ColorSync_vImageConvert_Fto16U_ptr__)
        {
          if (ColorSyncLoadvImageDYLD_once != -1)
            dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1230);
          v24 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
          if (ColorSyncLoadvImageDYLD_handle)
            v24 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_FTo16U");
          v23 = vImage_smart_null;
          if (v24)
            v23 = v24;
          ColorSync_vImageConvert_Fto16U_ptr__ = v23;
        }
        ((void (*)(void **, UInt8 **, _QWORD, float, float))v23)(&v215, &MutableBytePtr, 0, 0.0, 0.000015259);
      }
      return v22;
    case 1:
      v25 = CFDataCreateMutable(0, 2 * v19);
      v22 = v25;
      if (v11)
      {
        if (v25)
        {
          CFDataSetLength(v25, 2 * v19);
          v215 = a2;
          v216 = 1;
          v217 = v19;
          v218 = 4 * v19;
          MutableBytePtr = CFDataGetMutableBytePtr(v22);
          v212 = 1;
          v213 = v19;
          v214 = 2 * v19;
          ColorSync_vImageConvert_Fto16F((uint64_t)&v215, (uint64_t)&MutableBytePtr);
        }
        return v22;
      }
      if (!v25)
        return v22;
      CFDataSetLength(v25, 2 * v19);
      v215 = a2;
      v216 = 1;
      v217 = v19;
      v218 = 2 * v19;
      MutableBytePtr = CFDataGetMutableBytePtr(v22);
      v212 = 1;
      v213 = v19;
      v214 = 2 * v19;
      p_MutableBytePtr = &MutableBytePtr;
      goto LABEL_214;
    case 2:
      v20 = 4 * v19;
      if (v11)
        return CFDataCreate(0, a2, v20);
      v56 = CFDataCreateMutable(0, 4 * v19);
      v22 = v56;
      if (v56)
      {
        CFDataSetLength(v56, 4 * v19);
        v215 = a2;
        v216 = 1;
        v217 = v19;
        v218 = 2 * v19;
        MutableBytePtr = CFDataGetMutableBytePtr(v22);
        v212 = 1;
        v213 = v19;
        v214 = 4 * v19;
        ColorSync_vImageConvert_16UToF((uint64_t)&v215, (uint64_t)&MutableBytePtr);
      }
      return v22;
    case 3:
      if (v11)
        __assert_rtn("NxMLUTCreateData", "CMMNxMUtils.cpp", 819, "dataIsFloat == false");
      switch(a5)
      {
        case 4:
          if (a6 != 3)
            __assert_rtn("nxm_copy_CMYK_to_RGBX8_data", "CMMNxMUtils.cpp", 164, "inpChannels == 4 && outChannels == 3");
          v75 = v10 * v10;
          v76 = CFDataCreateMutable(0, 4 * v75 * v75);
          v22 = v76;
          if (v76)
          {
            CFDataSetLength(v76, 4 * v75 * v75);
            v77 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v77)
              {
                v78 = 0;
                v79 = v77 + 3;
                v80 = a2 + 4;
                do
                {
                  v81 = 0;
                  v82 = v80;
                  v83 = v79;
                  do
                  {
                    v84 = 0;
                    v85 = (unsigned __int16 *)v82;
                    v86 = v83;
                    do
                    {
                      v87 = v85;
                      v88 = v86;
                      v89 = v10;
                      do
                      {
                        v90 = (*(v87 - 2) + 128) >> 8;
                        if (v90 >= 0xFF)
                          LOBYTE(v90) = -1;
                        *(v88 - 3) = v90;
                        v91 = (*(v87 - 1) + 128) >> 8;
                        if (v91 >= 0xFF)
                          LOBYTE(v91) = -1;
                        *(v88 - 2) = v91;
                        v92 = (*v87 + 128) >> 8;
                        if (v92 >= 0xFF)
                          LOBYTE(v92) = -1;
                        *(v88 - 1) = v92;
                        *v88 = -1;
                        v88 += 4;
                        v87 += 3 * v10 * v75;
                        --v89;
                      }
                      while (v89);
                      ++v84;
                      v86 += 4 * v10;
                      v85 += 3 * v75;
                    }
                    while (v84 != v10);
                    ++v81;
                    v83 += 4 * v75;
                    v82 += 6 * v10;
                  }
                  while (v81 != v10);
                  ++v78;
                  v79 += 4 * v10 * v75;
                  v80 += 6;
                }
                while (v78 != v10);
              }
            }
          }
          break;
        case 3:
          if (a6 != 3)
            __assert_rtn("nxm_copy_RGB_to_RGBX8_data", "CMMNxMUtils.cpp", 134, "inpChannels == 3 && outChannels == 3");
          v93 = v10 * v10;
          v94 = CFDataCreateMutable(0, 4 * v10 * v10 * v10);
          v22 = v94;
          if (v94)
          {
            CFDataSetLength(v94, 4 * v10 * v10 * v10);
            v95 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v95)
              {
                v96 = 0;
                v97 = v95 + 3;
                v98 = a2 + 4;
                do
                {
                  v99 = 0;
                  v100 = v98;
                  v101 = v97;
                  do
                  {
                    v102 = v100;
                    v103 = v101;
                    v104 = v10;
                    do
                    {
                      v105 = (*((unsigned __int16 *)v102 - 2) + 128) >> 8;
                      if (v105 >= 0xFF)
                        LOBYTE(v105) = -1;
                      *(v103 - 3) = v105;
                      v106 = (*((unsigned __int16 *)v102 - 1) + 128) >> 8;
                      if (v106 >= 0xFF)
                        LOBYTE(v106) = -1;
                      *(v103 - 2) = v106;
                      v107 = (*(unsigned __int16 *)v102 + 128) >> 8;
                      if (v107 >= 0xFF)
                        LOBYTE(v107) = -1;
                      *(v103 - 1) = v107;
                      *v103 = -1;
                      v103 += 4;
                      v102 += 6 * v93;
                      --v104;
                    }
                    while (v104);
                    ++v99;
                    v101 += 4 * v10;
                    v100 += 6 * v10;
                  }
                  while (v99 != v10);
                  ++v96;
                  v97 += 4 * v93;
                  v98 += 6;
                }
                while (v96 != v10);
              }
            }
          }
          break;
        case 1:
          if (a6 != 3)
            __assert_rtn("nxm_copy_GRAY_to_RGBX8_data", "CMMNxMUtils.cpp", 109, "inpChannels == 1 && outChannels == 3");
          v27 = CFDataCreateMutable(0, 4 * v10);
          v22 = v27;
          if (v27)
          {
            CFDataSetLength(v27, 4 * v10);
            v28 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v28)
              {
                v29 = v28 + 3;
                v30 = (unsigned __int16 *)(a2 + 4);
                do
                {
                  v31 = (*(v30 - 2) + 128) >> 8;
                  if (v31 >= 0xFF)
                    LOBYTE(v31) = -1;
                  *(v29 - 3) = v31;
                  v32 = (*(v30 - 1) + 128) >> 8;
                  if (v32 >= 0xFF)
                    LOBYTE(v32) = -1;
                  *(v29 - 2) = v32;
                  v33 = *v30;
                  v30 += 3;
                  v34 = (v33 + 128) >> 8;
                  if (v34 >= 0xFF)
                    LOBYTE(v34) = -1;
                  *(v29 - 1) = v34;
                  *v29 = -1;
                  v29 += 4;
                  --v10;
                }
                while (v10);
              }
            }
          }
          break;
        default:
          __assert_rtn("nxm_create_NxM_to_RGBX8_from_fixed16", "CMMNxMUtils.cpp", 204, "0");
      }
      return v22;
    case 4:
      if (v11)
        __assert_rtn("NxMLUTCreateData", "CMMNxMUtils.cpp", 823, "dataIsFloat == false");
      switch(a5)
      {
        case 4:
          if (a6 != 3)
            __assert_rtn("nxm_copy_CMYK_to_RGBX16_data", "CMMNxMUtils.cpp", 352, "inpChannels == 4 && outChannels == 3");
          v108 = CFDataCreateMutable(0, 8 * v10 * v10 * v10 * v10);
          v22 = v108;
          if (v108)
          {
            CFDataSetLength(v108, 8 * v10 * v10 * v10 * v10);
            v109 = CFDataGetMutableBytePtr(v22);
            repackage_CMYK16_to_RGBX16((uint64_t)v109, (unsigned __int16 *)a2, v10);
          }
          break;
        case 3:
          if (a6 != 3)
            __assert_rtn("nxm_copy_RGB_to_RGBX16_data", "CMMNxMUtils.cpp", 294, "inpChannels == 3 && outChannels == 3");
          v110 = CFDataCreateMutable(0, 8 * v10 * v10 * v10);
          v22 = v110;
          if (v110)
          {
            CFDataSetLength(v110, 8 * v10 * v10 * v10);
            v111 = (unsigned __int16 *)CFDataGetMutableBytePtr(v22);
            repackage_RGB16_to_RGBX16(v111, (unsigned __int16 *)a2, v10);
          }
          break;
        case 1:
          if (a6 != 3)
            __assert_rtn("nxm_copy_GRAY_to_RGBX16_data", "CMMNxMUtils.cpp", 240, "inpChannels == 1 && outChannels == 3");
          v35 = CFDataCreateMutable(0, 8 * v10);
          v22 = v35;
          if (v35)
          {
            CFDataSetLength(v35, 8 * v10);
            v36 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v36)
              {
                v37 = v36 + 4;
                v38 = (__int16 *)(a2 + 4);
                do
                {
                  *(v37 - 2) = *(v38 - 2);
                  *(v37 - 1) = *(v38 - 1);
                  v39 = *v38;
                  v38 += 3;
                  *v37 = v39;
                  v37[1] = -1;
                  v37 += 4;
                  --v10;
                }
                while (v10);
              }
            }
          }
          break;
        default:
          __assert_rtn("nxm_create_NxM_to_RGBX16_from_fixed16", "CMMNxMUtils.cpp", 376, "0");
      }
      return v22;
    case 5:
      if (!v11)
      {
        switch(a5)
        {
          case 4:
            if (a6 != 3)
              __assert_rtn("nxm_copy_CMYK_fixed16_to_RGBX_float16", "CMMNxMUtils.cpp", 430, "inpChannels == 4 && outChannels == 3");
            v170 = v10 * v10 * v10 * v10;
            v57 = 8 * v170;
            v171 = CFDataCreateMutable(0, 8 * v170);
            v22 = v171;
            if (!v171)
              return v22;
            v172 = 4 * v170;
            CFDataSetLength(v171, v57);
            v173 = (unsigned __int16 *)CFDataGetMutableBytePtr(v22);
            repackage_CMYK16_to_RGBX16((uint64_t)v173, (unsigned __int16 *)a2, v10);
            break;
          case 3:
            if (a6 != 3)
              __assert_rtn("nxm_copy_RGB_fixed16_to_RGBX_float16", "CMMNxMUtils.cpp", 407, "inpChannels == 3 && outChannels == 3");
            v174 = v10 * v10 * v10;
            v57 = 8 * v174;
            v175 = CFDataCreateMutable(0, 8 * v174);
            v22 = v175;
            if (!v175)
              return v22;
            v172 = 4 * v174;
            CFDataSetLength(v175, 8 * v174);
            v173 = (unsigned __int16 *)CFDataGetMutableBytePtr(v22);
            repackage_RGB16_to_RGBX16(v173, (unsigned __int16 *)a2, v10);
            break;
          case 1:
            if (a6 != 3)
              __assert_rtn("nxm_copy_GRAY_fixed16_to_RGBX_float16", "CMMNxMUtils.cpp", 384, "inpChannels == 1 && outChannels == 3");
            v57 = 8 * v10;
            v58 = CFDataCreateMutable(0, 8 * v10);
            v22 = v58;
            if (!v58)
              return v22;
            v59 = 4 * v10;
            CFDataSetLength(v58, 8 * v10);
            v60 = CFDataGetMutableBytePtr(v22);
            if (v10 && v60)
            {
              v61 = v60 + 4;
              v62 = (__int16 *)(a2 + 4);
              do
              {
                *(v61 - 2) = *(v62 - 2);
                *(v61 - 1) = *(v62 - 1);
                v63 = *v62;
                v62 += 3;
                *v61 = v63;
                v61[1] = -1;
                v61 += 4;
                --v10;
              }
              while (v10);
            }
            v215 = v60;
            v216 = 1;
            v217 = v59;
            goto LABEL_213;
          default:
            __assert_rtn("nxm_create_NxM_to_RGBX_float16_from_fixed16", "CMMNxMUtils.cpp", 460, "0");
        }
        v215 = v173;
        v216 = 1;
        v217 = v172;
LABEL_213:
        v218 = v57;
        p_MutableBytePtr = (UInt8 **)&v215;
LABEL_214:
        ColorSync_vImageConvert_16Uto16F((uint64_t)&v215, (uint64_t)p_MutableBytePtr);
        return v22;
      }
      switch(a5)
      {
        case 4:
          if (a6 != 3)
            __assert_rtn("nxm_copy_CMYK_float_to_RGBX_float16", "CMMNxMUtils.cpp", 523, "inpChannels == 4 && outChannels == 3");
          v112 = v10 * v10;
          v113 = v112 * v112;
          v40 = 8 * v112 * v112;
          v114 = CFDataCreateMutable(0, v40);
          v22 = v114;
          if (v114)
          {
            v42 = 4 * v113;
            CFDataSetLength(v114, 8 * v112 * v112);
            v43 = 16 * v113;
            if (((v113 >> 58) & 3) != 0)
              v115 = -1;
            else
              v115 = v113 << 6;
            v116 = (char *)operator new[](v115, MEMORY[0x1E0DE4E10]);
            v46 = v116;
            if (v10 && v116)
            {
              v117 = 0;
              v118 = a2 + 4;
              v119 = v116;
              do
              {
                v120 = 0;
                v121 = v119;
                v122 = v118;
                do
                {
                  v123 = 0;
                  v124 = v121;
                  v125 = v122;
                  do
                  {
                    v126 = v124;
                    v127 = v125;
                    v128 = v10;
                    do
                    {
                      *(_DWORD *)v126 = *((_DWORD *)v127 - 1);
                      *(_QWORD *)(v126 + 4) = *(_QWORD *)v127;
                      *((_DWORD *)v126 + 3) = 1065353216;
                      v127 += 12 * v10 * v112;
                      v126 += 16;
                      --v128;
                    }
                    while (v128);
                    ++v123;
                    v125 += 12 * v112;
                    v124 += 16 * v10;
                  }
                  while (v123 != v10);
                  ++v120;
                  v122 += 12 * v10;
                  v121 += 16 * v112;
                }
                while (v120 != v10);
                ++v117;
                v118 += 12;
                v119 += 16 * v10 * v112;
              }
              while (v117 != v10);
            }
            goto LABEL_179;
          }
          break;
        case 3:
          if (a6 != 3)
            return 0;
          v129 = v10 * v10;
          v130 = v10 * v10 * v10;
          v40 = 8 * v130;
          v131 = CFDataCreateMutable(0, 8 * v130);
          v22 = v131;
          if (!v131)
            return v22;
          v42 = 4 * v130;
          CFDataSetLength(v131, 8 * v130);
          v43 = 16 * v130;
          if (((v130 >> 58) & 3) != 0)
            v132 = -1;
          else
            v132 = v130 << 6;
          v133 = (char *)operator new[](v132, MEMORY[0x1E0DE4E10]);
          v46 = v133;
          if (v10 && v133)
          {
            v134 = 0;
            v135 = a2 + 4;
            v136 = v133;
            do
            {
              v137 = 0;
              v138 = v136;
              v139 = v135;
              do
              {
                v140 = v138;
                v141 = v139;
                v142 = v10;
                do
                {
                  *(_DWORD *)v140 = *((_DWORD *)v141 - 1);
                  *(_QWORD *)(v140 + 4) = *(_QWORD *)v141;
                  *((_DWORD *)v140 + 3) = 1065353216;
                  v141 += 12 * v129;
                  v140 += 16;
                  --v142;
                }
                while (v142);
                ++v137;
                v139 += 12 * v10;
                v138 += 16 * v10;
              }
              while (v137 != v10);
              ++v134;
              v135 += 12;
              v136 += 16 * v129;
            }
            while (v134 != v10);
          }
          goto LABEL_179;
        case 1:
          if (a6 != 3)
            __assert_rtn("nxm_copy_GRAY_float_to_RGBX_float16", "CMMNxMUtils.cpp", 468, "inpChannels == 1 && outChannels == 3");
          v40 = 8 * v10;
          v41 = CFDataCreateMutable(0, 8 * v10);
          v22 = v41;
          if (v41)
          {
            v42 = 4 * v10;
            CFDataSetLength(v41, 8 * v10);
            v43 = 16 * v10;
            if (((v10 >> 58) & 3) != 0)
              v44 = -1;
            else
              v44 = v10 << 6;
            v45 = (char *)operator new[](v44, MEMORY[0x1E0DE4E10]);
            v46 = v45;
            if (v10 && v45)
            {
              v47 = a2 + 4;
              v48 = v45;
              do
              {
                *(_DWORD *)v48 = *((_DWORD *)v47 - 1);
                v49 = *v47;
                v47 = (_QWORD *)((char *)v47 + 12);
                *(_QWORD *)(v48 + 4) = v49;
                *((_DWORD *)v48 + 3) = 1065353216;
                v48 += 16;
                --v10;
              }
              while (v10);
            }
LABEL_179:
            v215 = v46;
            v216 = 1;
            v217 = v42;
            v218 = v43;
            MutableBytePtr = CFDataGetMutableBytePtr(v22);
            v212 = 1;
            v213 = v42;
            v214 = v40;
            ColorSync_vImageConvert_Fto16F((uint64_t)&v215, (uint64_t)&MutableBytePtr);
            if (v46)
              MEMORY[0x18D77955C](v46, 0x1000C8052888210);
          }
          break;
        default:
          __assert_rtn("nxm_create_NxM_to_RGBX_float16_from_float", "CMMNxMUtils.cpp", 561, "0");
      }
      return v22;
    case 6:
      if (v11)
      {
        switch(a5)
        {
          case 4:
            if (a6 != 3)
              __assert_rtn("nxm_copy_CMYK_float_to_RGBX_float32", "CMMNxMUtils.cpp", 727, "inpChannels == 4 && outChannels == 3");
            v143 = v10 * v10;
            v144 = CFDataCreateMutable(0, 16 * v143 * v143);
            v22 = v144;
            if (v144)
            {
              CFDataSetLength(v144, 16 * v143 * v143);
              v145 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v145)
                {
                  v146 = 0;
                  v147 = v145 + 8;
                  v148 = a2 + 8;
                  do
                  {
                    v149 = 0;
                    v150 = v148;
                    v151 = v147;
                    do
                    {
                      v152 = 0;
                      v153 = v150;
                      v154 = v151;
                      do
                      {
                        v155 = v153;
                        v156 = v154;
                        v157 = v10;
                        do
                        {
                          *((_DWORD *)v156 - 2) = *((_DWORD *)v155 - 2);
                          *((_DWORD *)v156 - 1) = *((_DWORD *)v155 - 1);
                          *(_DWORD *)v156 = *(_DWORD *)v155;
                          *((_DWORD *)v156 + 1) = 1065353216;
                          v156 += 16;
                          v155 += 12 * v10 * v143;
                          --v157;
                        }
                        while (v157);
                        ++v152;
                        v154 += 16 * v10;
                        v153 += 12 * v143;
                      }
                      while (v152 != v10);
                      ++v149;
                      v151 += 16 * v143;
                      v150 += 12 * v10;
                    }
                    while (v149 != v10);
                    ++v146;
                    v147 += 16 * v10 * v143;
                    v148 += 12;
                  }
                  while (v146 != v10);
                }
              }
            }
            break;
          case 3:
            if (a6 != 3)
              __assert_rtn("nxm_copy_RGB_float_to_RGBX_float32", "CMMNxMUtils.cpp", 697, "inpChannels == 3 && outChannels == 3");
            v158 = v10 * v10;
            v159 = CFDataCreateMutable(0, 16 * v10 * v10 * v10);
            v22 = v159;
            if (v159)
            {
              CFDataSetLength(v159, 16 * v10 * v10 * v10);
              v160 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v160)
                {
                  v161 = 0;
                  v162 = v160 + 8;
                  v163 = a2 + 8;
                  do
                  {
                    v164 = 0;
                    v165 = v163;
                    v166 = v162;
                    do
                    {
                      v167 = v165;
                      v168 = v166;
                      v169 = v10;
                      do
                      {
                        *((_DWORD *)v168 - 2) = *((_DWORD *)v167 - 2);
                        *((_DWORD *)v168 - 1) = *((_DWORD *)v167 - 1);
                        *(_DWORD *)v168 = *(_DWORD *)v167;
                        *((_DWORD *)v168 + 1) = 1065353216;
                        v168 += 16;
                        v167 += 12 * v158;
                        --v169;
                      }
                      while (v169);
                      ++v164;
                      v166 += 16 * v10;
                      v165 += 12 * v10;
                    }
                    while (v164 != v10);
                    ++v161;
                    v162 += 16 * v158;
                    v163 += 12;
                  }
                  while (v161 != v10);
                }
              }
            }
            break;
          case 1:
            if (a6 != 3)
              __assert_rtn("nxm_copy_GRAY_float_to_RGBX_float32", "CMMNxMUtils.cpp", 672, "inpChannels == 1 && outChannels == 3");
            v50 = CFDataCreateMutable(0, 16 * v10);
            v22 = v50;
            if (v50)
            {
              CFDataSetLength(v50, 16 * v10);
              v51 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v51)
                {
                  v52 = v51 + 8;
                  v53 = (int *)(a2 + 8);
                  do
                  {
                    *(v52 - 2) = *(v53 - 2);
                    *(v52 - 1) = *(v53 - 1);
                    v54 = *v53;
                    v53 += 3;
                    *v52 = v54;
                    v52[1] = 1065353216;
                    v52 += 4;
                    --v10;
                  }
                  while (v10);
                }
              }
            }
            break;
          default:
            __assert_rtn("nxm_copy_NxM_to_RGBX_float32_from_float", "CMMNxMUtils.cpp", 767, "0");
        }
      }
      else
      {
        switch(a5)
        {
          case 4:
            if (a6 != 3)
              __assert_rtn("nxm_copy_CMYK_fixed16_to_RGBX_float32", "CMMNxMUtils.cpp", 624, "inpChannels == 4 && outChannels == 3");
            v176 = v10 * v10;
            v177 = CFDataCreateMutable(0, 16 * v176 * v176);
            v22 = v177;
            if (v177)
            {
              CFDataSetLength(v177, 16 * v176 * v176);
              v178 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v178)
                {
                  v180 = 0;
                  v181 = a2 + 2;
                  v182 = (float32x2_t)vdup_n_s32(0x477FFF00u);
                  __asm { FMOV            V3.2S, #1.0 }
                  do
                  {
                    v184 = 0;
                    v185 = v178;
                    v186 = v181;
                    do
                    {
                      v187 = 0;
                      v188 = v185;
                      v189 = (unsigned __int16 *)v186;
                      do
                      {
                        v190 = v188;
                        v191 = v189;
                        v192 = v10;
                        do
                        {
                          v179.i16[0] = *(v191 - 1);
                          *(float *)v179.i32 = (float)v179.u32[0] / 65535.0;
                          if (*(float *)v179.i32 > 1.0)
                            *(float *)v179.i32 = 1.0;
                          *(_DWORD *)v190 = v179.i32[0];
                          v193.i32[0] = *v191;
                          v193.i32[1] = v191[1];
                          v194 = vdiv_f32(vcvt_f32_u32(v193), v182);
                          v179 = vbsl_s8((int8x8_t)vcgt_f32(v194, _D3), (int8x8_t)_D3, (int8x8_t)v194);
                          *(int8x8_t *)(v190 + 4) = v179;
                          *((_DWORD *)v190 + 3) = 1065353216;
                          v191 += 3 * v10 * v176;
                          v190 += 16;
                          --v192;
                        }
                        while (v192);
                        ++v187;
                        v189 += 3 * v176;
                        v188 += 16 * v10;
                      }
                      while (v187 != v10);
                      ++v184;
                      v186 += 6 * v10;
                      v185 += 16 * v176;
                    }
                    while (v184 != v10);
                    ++v180;
                    v181 += 6;
                    v178 += 16 * v10 * v176;
                  }
                  while (v180 != v10);
                }
              }
            }
            break;
          case 3:
            if (a6 != 3)
              __assert_rtn("nxm_copy_RGB_fixed16_to_RGBX_float32", "CMMNxMUtils.cpp", 594, "inpChannels == 3 && outChannels == 3");
            v195 = v10 * v10;
            v196 = CFDataCreateMutable(0, 16 * v10 * v10 * v10);
            v22 = v196;
            if (v196)
            {
              CFDataSetLength(v196, 16 * v10 * v10 * v10);
              v197 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v197)
                {
                  v199 = 0;
                  v200 = a2 + 2;
                  v201 = (float32x2_t)vdup_n_s32(0x477FFF00u);
                  __asm { FMOV            V3.2S, #1.0 }
                  do
                  {
                    v203 = 0;
                    v204 = v197;
                    v205 = v200;
                    do
                    {
                      v206 = v204;
                      v207 = v205;
                      v208 = v10;
                      do
                      {
                        v198.i16[0] = *((_WORD *)v207 - 1);
                        *(float *)v198.i32 = (float)v198.u32[0] / 65535.0;
                        if (*(float *)v198.i32 > 1.0)
                          *(float *)v198.i32 = 1.0;
                        *(_DWORD *)v206 = v198.i32[0];
                        v209.i32[0] = *(unsigned __int16 *)v207;
                        v209.i32[1] = *((unsigned __int16 *)v207 + 1);
                        v210 = vdiv_f32(vcvt_f32_u32(v209), v201);
                        v198 = vbsl_s8((int8x8_t)vcgt_f32(v210, _D3), (int8x8_t)_D3, (int8x8_t)v210);
                        *(int8x8_t *)(v206 + 4) = v198;
                        *((_DWORD *)v206 + 3) = 1065353216;
                        v207 += 6 * v195;
                        v206 += 16;
                        --v208;
                      }
                      while (v208);
                      ++v203;
                      v205 += 6 * v10;
                      v204 += 16 * v10;
                    }
                    while (v203 != v10);
                    ++v199;
                    v200 += 6;
                    v197 += 16 * v195;
                  }
                  while (v199 != v10);
                }
              }
            }
            break;
          case 1:
            if (a6 != 3)
              __assert_rtn("nxm_copy_GRAY_fixed16_to_RGBX_float32", "CMMNxMUtils.cpp", 569, "inpChannels == 1 && outChannels == 3");
            v64 = CFDataCreateMutable(0, 16 * v10);
            v22 = v64;
            if (v64)
            {
              CFDataSetLength(v64, 16 * v10);
              v65 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v65)
                {
                  v67 = (unsigned __int16 *)(a2 + 2);
                  v68 = (float32x2_t)vdup_n_s32(0x477FFF00u);
                  __asm { FMOV            V3.2S, #1.0 }
                  do
                  {
                    v66.i16[0] = *(v67 - 1);
                    *(float *)v66.i32 = (float)v66.u32[0] / 65535.0;
                    if (*(float *)v66.i32 > 1.0)
                      *(float *)v66.i32 = 1.0;
                    *(_DWORD *)v65 = v66.i32[0];
                    v73.i32[0] = *v67;
                    v73.i32[1] = v67[1];
                    v74 = vdiv_f32(vcvt_f32_u32(v73), v68);
                    v66 = vbsl_s8((int8x8_t)vcgt_f32(v74, _D3), (int8x8_t)_D3, (int8x8_t)v74);
                    *(int8x8_t *)(v65 + 4) = v66;
                    *((_DWORD *)v65 + 3) = 1065353216;
                    v67 += 3;
                    v65 += 16;
                    --v10;
                  }
                  while (v10);
                }
              }
            }
            break;
          default:
            __assert_rtn("nxm_copy_NxM_to_RGBX_float32_from_fixed16", "CMMNxMUtils.cpp", 664, "0");
        }
      }
      return v22;
    default:
      return 0;
  }
}

double MatrixMatrix4x4<double>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double result;

  v4 = *a3;
  v3 = a3[1];
  v6 = a3[2];
  v5 = a3[3];
  v8 = a3[4];
  v7 = a3[5];
  v10 = a3[6];
  v9 = a3[7];
  v12 = a3[8];
  v11 = a3[9];
  v14 = a3[10];
  v13 = a3[11];
  v16 = a3[12];
  v15 = a3[13];
  v18 = a3[14];
  v17 = a3[15];
  *a1 = v8 * a2[1] + *a2 * *a3 + a2[2] * v12 + a2[3] * v16;
  a1[1] = v7 * a2[1] + *a2 * v3 + a2[2] * v11 + a2[3] * v15;
  a1[2] = v10 * a2[1] + *a2 * v6 + a2[2] * v14 + a2[3] * v18;
  a1[3] = v9 * a2[1] + *a2 * v5 + a2[2] * v13 + a2[3] * v17;
  a1[4] = v8 * a2[5] + a2[4] * v4 + a2[6] * v12 + a2[7] * v16;
  a1[5] = v7 * a2[5] + a2[4] * v3 + a2[6] * v11 + a2[7] * v15;
  a1[6] = v10 * a2[5] + a2[4] * v6 + a2[6] * v14 + a2[7] * v18;
  a1[7] = v9 * a2[5] + a2[4] * v5 + a2[6] * v13 + a2[7] * v17;
  a1[8] = v8 * a2[9] + a2[8] * v4 + a2[10] * v12 + a2[11] * v16;
  a1[9] = v7 * a2[9] + a2[8] * v3 + a2[10] * v11 + a2[11] * v15;
  a1[10] = v10 * a2[9] + a2[8] * v6 + a2[10] * v14 + a2[11] * v18;
  a1[11] = v9 * a2[9] + a2[8] * v5 + a2[10] * v13 + a2[11] * v17;
  a1[12] = v8 * a2[13] + a2[12] * v4 + a2[14] * v12 + a2[15] * v16;
  a1[13] = v7 * a2[13] + a2[12] * v3 + a2[14] * v11 + a2[15] * v15;
  a1[14] = v10 * a2[13] + a2[12] * v6 + a2[14] * v14 + a2[15] * v18;
  result = v9 * a2[13] + a2[12] * v5 + a2[14] * v13 + a2[15] * v17;
  a1[15] = result;
  return result;
}

__n128 ColorSyncNxMGetFunction@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v4;
  __n128 result;
  __int128 v6;

  v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncNxMGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
  if (v4 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID)
    __assert_rtn("ColorSyncNxMGetFunction", "ColorSyncTransformFunctions.c", 829, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  result = *(__n128 *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 48);
  return result;
}

uint64_t ColorSyncNxMCreate(const void *a1, uint64_t a2, int a3, const __CFArray *a4, const __CFArray *a5)
{
  CFTypeID v10;
  uint64_t Instance;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v17;
  uint64_t v18;
  const __CFNumber *v19;
  const __CFNumber *v20;

  v10 = CFGetTypeID(a1);
  if (v10 != CFDataGetTypeID())
    __assert_rtn("ColorSyncNxMCreate", "ColorSyncTransformFunctions.c", 794, "tableData != NULL && CFGetTypeID(tableData) == CFDataGetTypeID()");
  if (ColorSyncNxMGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
  Instance = _CFRuntimeCreateInstance();
  v12 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_QWORD *)(Instance + 56) = CFRetain(a1);
    v13 = *(_DWORD *)(a2 + 32);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v12 + 32) = v14;
    *(_DWORD *)(v12 + 48) = v13;
    if ((a3 & 4) != 0)
      v15 = 0x3F80000000000000;
    else
      v15 = 0x7F7FFFFFFF7FFFFFLL;
    *(_QWORD *)(v12 + 68) = v15;
    if (a4)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a4, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(v12 + 68));
      v17 = (const __CFNumber *)CFArrayGetValueAtIndex(a4, 1);
      CFNumberGetValue(v17, kCFNumberFloat32Type, (void *)(v12 + 72));
    }
    if ((a3 & 2) != 0)
      v18 = 0x3F80000000000000;
    else
      v18 = 0x7F7FFFFFFF7FFFFFLL;
    *(_QWORD *)(v12 + 76) = v18;
    if (a5)
    {
      v19 = (const __CFNumber *)CFArrayGetValueAtIndex(a5, 0);
      CFNumberGetValue(v19, kCFNumberFloat32Type, (void *)(v12 + 76));
      v20 = (const __CFNumber *)CFArrayGetValueAtIndex(a5, 1);
      CFNumberGetValue(v20, kCFNumberFloat32Type, (void *)(v12 + 80));
    }
    *(_DWORD *)(v12 + 64) = a3;
  }
  return v12;
}

uint64_t ColorSyncProfileProducesMatrixTransform(void *a1)
{
  ColorSyncProfileRef v2;
  ColorSyncTransformRef colorsync_transform;
  int v4;
  ColorSyncTransformRef v5;
  uint64_t v6;

  v2 = ColorSyncProfileCreateWithName(kColorSyncSRGBProfile);
  colorsync_transform = create_colorsync_transform(v2, a1);
  v4 = ColorSyncTransformIterate((uint64_t)colorsync_transform, 0, (uint64_t)&__block_literal_global, (uint64_t)&__block_literal_global_3, (uint64_t)&__block_literal_global_6, (uint64_t)&__block_literal_global_8);
  if (colorsync_transform)
    CFRelease(colorsync_transform);
  if (!v4)
    return 0;
  v5 = create_colorsync_transform(a1, v2);
  v6 = ColorSyncTransformIterate((uint64_t)v5, 0, (uint64_t)&__block_literal_global_10, (uint64_t)&__block_literal_global_12, (uint64_t)&__block_literal_global_14, (uint64_t)&__block_literal_global_16);
  if (v5)
    CFRelease(v5);
  return v6;
}

ColorSyncTransformRef create_colorsync_transform(void *a1, void *a2)
{
  ColorSyncTransformRef v2;
  void *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  const __CFArray *v8;
  const void *v10[3];
  void *v11[4];
  void *v12[4];
  void *values[4];
  void *keys[5];

  v2 = 0;
  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    keys[0] = (void *)kColorSyncProfile;
    keys[1] = (void *)kColorSyncRenderingIntent;
    keys[2] = (void *)kColorSyncTransformTag;
    keys[3] = (void *)kColorSyncBlackPointCompensation;
    values[0] = a1;
    values[1] = (void *)kColorSyncRenderingIntentPerceptual;
    v3 = (void *)*MEMORY[0x1E0C9AE40];
    values[2] = (void *)kColorSyncTransformDeviceToPCS;
    values[3] = v3;
    v12[0] = (void *)kColorSyncProfile;
    v12[1] = (void *)kColorSyncRenderingIntent;
    v12[2] = (void *)kColorSyncTransformTag;
    v12[3] = (void *)kColorSyncBlackPointCompensation;
    v11[0] = a2;
    v11[1] = (void *)kColorSyncRenderingIntentRelative;
    v11[2] = (void *)kColorSyncTransformPCSToDevice;
    v11[3] = v3;
    v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = CFDictionaryCreate(0, (const void **)v12, (const void **)v11, 4, v4, v5);
    v10[0] = v6;
    v10[1] = v7;
    v10[2] = 0;
    v8 = CFArrayCreate(0, v10, 2, MEMORY[0x1E0C9B378]);
    if (v6)
      CFRelease(v6);
    if (v7)
      CFRelease(v7);
    v2 = ColorSyncTransformCreate(v8, 0);
    if (v8)
      CFRelease(v8);
  }
  return v2;
}

BOOL InvertMatrix(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = -(*a1 * v6);
  v11 = v4 * -(v7 * v5) + *a1 * v5 * v9 + v4 * v3 * v8 + -(v3 * v2) * v9 + v2 * v6 * v7 + v10 * v8;
  v12 = fabs(v11);
  if (v12 >= 1.17549435e-38)
  {
    *a1 = (v5 * v9 - v8 * v6) / v11;
    a1[1] = (v8 * v4 - v2 * v9) / v11;
    a1[2] = (v2 * v6 - v5 * v4) / v11;
    a1[3] = (v9 * -v3 + v7 * v6) / v11;
    a1[4] = (v4 * -v7 + v1 * v9) / v11;
    a1[5] = (v10 + v3 * v4) / v11;
    a1[6] = (v3 * v8 - v7 * v5) / v11;
    a1[7] = (v8 * -v1 + v7 * v2) / v11;
    a1[8] = (v1 * v5 - v3 * v2) / v11;
  }
  return v12 >= 1.17549435e-38;
}

void ColorSyncLog(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const __CFAllocator *v11;
  const __CFString *v12;
  const __CFString *v13;
  const char *CStringPtr;
  const char *v15;
  char *v16;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  NSObject *v19;
  NSObject *v20;
  uint8_t buf[4];
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1 >= 1)
  {
    if (ColorSyncLog_predicate != -1)
      dispatch_once(&ColorSyncLog_predicate, &__block_literal_global_1);
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s"), a2);
    v13 = CFStringCreateWithFormatAndArguments(v11, 0, v12, &a9);
    if (v12)
      CFRelease(v12);
    if (v13)
    {
      CStringPtr = CFStringGetCStringPtr(v13, 0x8000100u);
      if (CStringPtr)
      {
        v15 = CStringPtr;
        v16 = 0;
      }
      else
      {
        Length = CFStringGetLength(v13);
        MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        v16 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0x72FA25BDuLL);
        if (v16 && CFStringGetCString(v13, v16, MaximumSizeForEncoding, 0x8000100u))
          v15 = v16;
        else
          v15 = (const char *)&unk_18B51FDEA;
      }
      switch(a1)
      {
        case 3:
          puts(v15);
          break;
        case 2:
          v20 = ColorSyncLog_log;
          if (os_log_type_enabled((os_log_t)ColorSyncLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            v22 = v15;
            _os_log_error_impl(&dword_18B398000, v20, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
          }
          break;
        case 1:
          v19 = ColorSyncLog_log;
          if (os_log_type_enabled((os_log_t)ColorSyncLog_log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            v22 = v15;
            _os_log_impl(&dword_18B398000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          }
          break;
      }
      free(v16);
      CFRelease(v13);
    }
  }
}

uint64_t xyFromTemp(unsigned int a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  *a2 = 0.0;
  *a3 = 0.0;
  if (a1 >= 0xFA0)
  {
    v3 = (double)a1 * 1.00055633;
    if (a1 >> 3 <= 0x36A)
    {
      v4 = 2967800.0 / (v3 * v3) + -4607000000.0 / (v3 * (v3 * v3));
      v5 = 0.244063;
      v6 = 99.11;
LABEL_6:
      v7 = v6 / v3 + v4 + v5;
      *a2 = v7;
      *a3 = v7 * 2.87 + v7 * v7 * -3.0 + -0.2751;
      return 1;
    }
    if (a1 >> 3 <= 0xC34)
    {
      v4 = 1901800.0 / (v3 * v3) + -2006400000.0 / (v3 * (v3 * v3));
      v5 = 0.23704;
      v6 = 247.48;
      goto LABEL_6;
    }
  }
  return 0;
}

void addAbstractA2B(ColorSyncProfile *a1, uint64_t a2, void (*a3)(float *, float *, float *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  __CFData *Mutable;
  __CFData *v10;
  UInt8 *MutableBytePtr;
  UInt8 *v12;
  UInt8 *v13;
  UInt8 *v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  double v22;
  float v23;
  double v24;
  uint64_t v25;
  float v26;
  unsigned int v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  const __CFData *v32;
  ColorSyncProfile *v33;
  double v34;
  double v35;
  float v36;
  float v37;
  float v38;

  v8 = a2 * a2 * a2;
  Mutable = CFDataCreateMutable(0, 6 * v8 + 76);
  if (Mutable)
  {
    v10 = Mutable;
    CFDataSetLength(Mutable, 6 * v8 + 76);
    MutableBytePtr = CFDataGetMutableBytePtr(v10);
    if (MutableBytePtr)
    {
      v12 = MutableBytePtr;
      v32 = v10;
      v33 = a1;
      v13 = CFDataGetMutableBytePtr(v10);
      bzero(v12, 6 * v8 + 76);
      *(_DWORD *)v12 = 846489197;
      *((_WORD *)v13 + 4) = 771;
      v13[10] = a2;
      *(_QWORD *)(v13 + 44) = 0x200020000000100;
      *((_DWORD *)v13 + 7) = 256;
      *((_DWORD *)v13 + 3) = 256;
      v14 = &v13[6 * v8];
      *((_WORD *)v13 + 31) = -1;
      *((_WORD *)v13 + 29) = -1;
      *((_WORD *)v13 + 27) = -1;
      *((_WORD *)v14 + 37) = -1;
      *((_WORD *)v14 + 35) = -1;
      *((_WORD *)v14 + 33) = -1;
      v15 = a2 - 1;
      if (a2 >= 1)
      {
        v16 = 0;
        v34 = 100.0 / (double)v15;
        v17 = v13 + 64;
        v18 = 0.0;
        v19 = 256.0 / (double)v15;
        do
        {
          v20 = 0;
          v35 = v18;
          v21 = v18;
          v22 = -128.0;
          do
          {
            v24 = -128.0;
            v25 = a2;
            do
            {
              v23 = v22;
              v37 = v23;
              v38 = v21;
              v26 = v24;
              v36 = v26;
              a3(&v38, &v37, &v36, a4);
              v27 = (int)(v38 * 652.8 + 0.5) & ~((int)(v38 * 652.8 + 0.5) >> 31);
              if (v27 >= 0xFF00)
                v27 = 65280;
              v28 = v37 + 128.0;
              *v17 = bswap32(v27) >> 16;
              v29 = (int)(v28 * 255.0 + 0.5) & ~((int)(v28 * 255.0 + 0.5) >> 31);
              if (v29 >= 0xFFFF)
                v29 = 0xFFFF;
              v30 = bswap32(v29) >> 16;
              v31 = (int)((v36 + 128.0) * 255.0 + 0.5) & ~((int)((v36 + 128.0) * 255.0 + 0.5) >> 31);
              if (v31 >= 0xFFFF)
                v31 = 0xFFFF;
              v17[1] = v30;
              v17[2] = bswap32(v31) >> 16;
              v17 += 3;
              v24 = v19 + v24;
              --v25;
            }
            while (v25);
            ++v20;
            v22 = v19 + v22;
          }
          while (v20 != a2);
          ++v16;
          v18 = v34 + v35;
        }
        while (v16 != a2);
      }
      v10 = v32;
      ColorSyncProfileSetTag(v33, CFSTR("A2B0"), v32);
    }
    CFRelease(v10);
  }
}

float _LabToLabValsProc(float *a1, float *a2, float *a3, double *a4)
{
  double v8;
  double v9;
  long double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BOOL4 v15;
  _BOOL4 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  __double2 v42;
  float v43;
  float result;

  v8 = a4[8];
  v9 = a4[9];
  if (v8 == 0.0 && v9 == 0.0)
  {
    v10 = *a3;
    v11 = 1.0;
  }
  else
  {
    v12 = v8;
    v13 = v9;
    v10 = *a3;
    v14 = atan2(v10, *a2) * 57.2957795;
    v15 = v14 < v12;
    if (v14 > v13)
      v15 = 1;
    if (v12 >= v13)
      v15 = 0;
    v16 = v12 > v13;
    if (v14 >= v12)
      v16 = 0;
    if (v14 <= v13)
      v16 = 0;
    v11 = 1.0;
    if (v16 || v15)
      v11 = 0.0;
  }
  v17 = *a1 / 100.0;
  v18 = (float)(v17 * 2.0) + -1.0;
  v19 = (float)(v17 * -2.0) + 2.0;
  if (v17 < 0.5)
    v19 = v17 + v17;
  v20 = (float)(v17 * -2.0) + 1.0;
  if (v18 < 0.0)
    v18 = 0.0;
  if (v19 < 0.0)
    v19 = 0.0;
  if (v20 < 0.0)
    v20 = 0.0;
  v21 = a4[6];
  v22 = v10 + (float)(v11 * v18) * a4[5];
  v23 = v22 + (float)(v11 * v19) * a4[4];
  v24 = v23 + (float)(v11 * v20) * a4[3];
  *a3 = v24;
  v25 = *a2;
  v26 = sqrtf((float)(v24 * v24) + (float)(v25 * v25));
  v27 = v11;
  v28 = a4[7] * v11;
  if (v28 <= 0.0)
  {
    v30 = (v28 / 100.0 + 1.0) * v26;
  }
  else
  {
    if (v26 >= 130.0)
      goto LABEL_27;
    v29 = v28 / 50.0 + 1.0;
    v30 = pow(v26 / -130.0 + 1.0, v29) * -130.0 + 130.0;
  }
  v26 = v30;
LABEL_27:
  v31 = 0.0 - v27 * *a4;
  v32 = 50.0 - v27 * a4[1];
  v33 = 100.0 - v27 * a4[2];
  v34 = v33 - v31;
  v35 = log(1.0 / (float)((float)(v32 - v31) / (float)(v33 - v31)));
  v36 = (float)(*a1 - v31) / v34;
  v37 = 0.0;
  if (v36 >= 0.0)
  {
    if (v36 <= 1.0)
    {
      v38 = 0.693147181 / v35;
      v37 = pow(v36, v38) * 100.0;
    }
    else
    {
      v37 = 100.0;
    }
  }
  *a1 = v37;
  v39 = atan2(v24, v25) * 57.2957795;
  v40 = v39 + v27 * v21;
  v41 = v40 * 0.0174532925;
  v42 = __sincos_stret(v41);
  v43 = v42.__cosval * v26;
  *a2 = v43;
  result = v42.__sinval * v26;
  *a3 = result;
  return result;
}

const ColorSyncProfile *makeAppleCopy(uint64_t a1, CFDictionaryRef theDict)
{
  const ColorSyncProfile *result;
  ColorSyncProfile *v4;
  const __CFData *v5;
  const UInt8 *BytePtr;
  __int128 v7;
  __int128 v8;

  result = (const ColorSyncProfile *)CFDictionaryGetValue(theDict, CFSTR("profileToCopy"));
  if (result)
  {
    v4 = result;
    v5 = ColorSyncProfileCopyHeader(result);
    BytePtr = CFDataGetBytePtr(v5);
    if (BytePtr)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(BytePtr + 8);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)BytePtr + 16);
      v7 = *(_OWORD *)(BytePtr + 84);
      v8 = *(_OWORD *)(BytePtr + 100);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)BytePtr + 7);
      *(_OWORD *)(a1 + 100) = v8;
      *(_OWORD *)(a1 + 84) = v7;
    }
    if (v5)
      CFRelease(v5);
    ColorSyncProfileRemoveTag(v4, CFSTR("cprt"));
    return (const ColorSyncProfile *)CFRetain(v4);
  }
  return result;
}

const ColorSyncProfile *makeConcatenated(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFArray *Value;
  const ColorSyncProfile *Link;
  const ColorSyncProfile *v7;
  const ColorSyncProfile *MutableCopy;
  const __CFData *v9;
  const __CFData *v10;
  const UInt8 *BytePtr;
  const void *v12;

  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("profileSequence"));
  Link = ColorSyncProfileCreateLink(Value, 0);
  if (!Link)
    return 0;
  v7 = Link;
  MutableCopy = ColorSyncProfileCreateMutableCopy(Link);
  v9 = ColorSyncProfileCopyHeader(MutableCopy);
  if (v9)
  {
    v10 = v9;
    BytePtr = CFDataGetBytePtr(v9);
    if (BytePtr)
    {
      *(_QWORD *)(a1 + 12) = *(_QWORD *)(BytePtr + 12);
      *(_DWORD *)(a1 + 20) = *((_DWORD *)BytePtr + 5);
    }
    CFRelease(v10);
  }
  v12 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("profileClass"));
  if (v12)
    *(_DWORD *)(a1 + 12) = classSignatureFromClassString(v12);
  CFRelease(v7);
  return MutableCopy;
}

ColorSyncProfile *makeTableBasedRGB(uint64_t a1, const void *a2)
{
  ColorSyncProfile *v4;
  CFTypeID v5;
  const void *Value;
  const void *v7;
  const __CFNumber *v8;
  uint64_t i;
  const __CFData *v10;
  const UInt8 *BytePtr;
  const UInt8 *v12;
  uint64_t v13;
  char *v14;
  UInt8 *v15;
  int v16;
  int v17;
  _WORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  UInt8 *v25;
  const __CFData *v26;
  const __CFData *v27;
  const void *v28;
  unsigned int valuePtr;
  const void *v31;
  const void *v32;
  const void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (ColorSyncProfile *)create(0, 1, 0);
  v5 = CFGetTypeID(a2);
  if (v5 == CFDictionaryGetTypeID())
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("A2B0"));
    v31 = Value;
    v32 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("A2B1"));
    v7 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("A2B2"));
    v33 = v7;
    if (!v32)
      v32 = Value;
    if (!v7)
      v33 = Value;
    v8 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("gridPoints"));
    valuePtr = 0;
    CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
    for (i = 0; i != 3; ++i)
    {
      if (valuePtr)
      {
        v10 = (const __CFData *)*(&v31 + i);
        if (v10)
        {
          BytePtr = CFDataGetBytePtr(v10);
          if (BytePtr)
          {
            v12 = BytePtr;
            v13 = valuePtr;
            v14 = (char *)malloc_type_calloc((6 * (v13 * v13 * v13) + 81) & 0xFFFFFFFFCLL, 1uLL, 0xD86013C9uLL);
            if (v14)
            {
              v15 = (UInt8 *)v14;
              *(_DWORD *)v14 = 846489197;
              *((_WORD *)v14 + 4) = 771;
              v14[10] = v13;
              *(_QWORD *)(v14 + 44) = 0x200020000000100;
              *((_DWORD *)v14 + 7) = 256;
              *((_DWORD *)v14 + 3) = 256;
              *((_WORD *)v14 + 31) = -1;
              *((_WORD *)v14 + 29) = -1;
              *((_WORD *)v14 + 27) = -1;
              if ((_DWORD)v13)
              {
                v16 = 0;
                v17 = 0;
                v18 = v14 + 64;
                do
                {
                  v19 = 0;
                  v20 = v16;
                  do
                  {
                    v21 = 0;
                    v22 = v18;
                    do
                    {
                      v23 = bswap32(*(unsigned __int16 *)&v12[2 * (v20 + v21 + 1)]);
                      v24 = bswap32(*(unsigned __int16 *)&v12[2 * (v20 + v21 + 2)]) >> 16;
                      *v22 = bswap32(*(unsigned __int16 *)&v12[2 * (v20 + v21)]) >> 16;
                      v22[1] = HIWORD(v23);
                      v18 = v22 + 3;
                      v22[2] = v24;
                      ++v21;
                      v22 += 3;
                    }
                    while (v13 != v21);
                    ++v19;
                    v20 += v13;
                  }
                  while (v19 != (_DWORD)v13);
                  ++v17;
                  v16 += v13 * v13;
                }
                while (v17 != (_DWORD)v13);
              }
              v25 = &v15[6 * (v13 * v13 * v13) + 52];
              *((_WORD *)v25 + 11) = -1;
              *((_WORD *)v25 + 9) = -1;
              *((_WORD *)v25 + 7) = -1;
              v26 = CFDataCreate(0, v15, (6 * (v13 * v13 * v13) + 81) & 0xFFFFFFFFCLL);
              free(v15);
              if (v26)
              {
                ColorSyncProfileSetTag(v4, off_1E2160740[i], v26);
                CFRelease(v26);
              }
            }
          }
        }
      }
    }
    v27 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("aapy"));
    if (v27)
      ColorSyncProfileSetTag(v4, CFSTR("aapy"), v27);
    v28 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("profileClass"));
    *(_QWORD *)(a1 + 16) = 0x58595A2052474220;
    addXYZTag(v4, CFSTR("wtpt"), *(_QWORD *)(a1 + 68), *(_DWORD *)(a1 + 76));
    if (v28)
      *(_DWORD *)(a1 + 12) = classSignatureFromClassString(v28);
  }
  return v4;
}

void *makeByCopyingTags(uint64_t a1, const void *a2)
{
  void *v4;
  CFTypeID v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  CFTypeID v8;
  const void *v9;
  const __CFString *v10;
  const __CFString *v11;

  v4 = (void *)create(0, 1, 0);
  v5 = CFGetTypeID(a2);
  if (v5 == CFDictionaryGetTypeID() && CFDictionaryContainsKey((CFDictionaryRef)a2, CFSTR("tags")))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("tags"));
    if (Value)
    {
      v7 = Value;
      v8 = CFGetTypeID(Value);
      if (v8 == CFDictionaryGetTypeID())
        CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)tag_adder, v4);
    }
    v9 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("profileClass"));
    if (v9)
      *(_DWORD *)(a1 + 12) = classSignatureFromClassString(v9);
    v10 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("profileColorSpace"));
    if (v10)
      *(_DWORD *)(a1 + 16) = ColorSyncGetFourCharCodeFromSignature(v10);
    v11 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("profilePCS"));
    if (v11)
      *(_DWORD *)(a1 + 20) = ColorSyncGetFourCharCodeFromSignature(v11);
    if (!ColorSyncProfileGetTag((uint64_t)v4, CFSTR("wtpt")))
      addXYZTag((ColorSyncProfile *)v4, CFSTR("wtpt"), *(_QWORD *)(a1 + 68), *(_DWORD *)(a1 + 76));
  }
  return v4;
}

ColorSyncProfile *makeCopyWithFlexGTC(uint64_t a1, CFDictionaryRef theDict)
{
  const ColorSyncProfile *Value;
  const UInt8 *v5;
  const UInt8 *CICPInfo;
  const UInt8 *v7;
  ColorSyncProfile *MutableCopy;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  CC_LONG A;
  _BOOL4 v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  CC_LONG v17;
  _BOOL4 v18;
  CFTypeID v19;
  CFTypeID v20;
  uint64_t v21;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v23;
  CFTypeID v24;
  int v25;
  char v27;
  size_t v28;
  char *v29;
  char *v30;
  const __CFDictionary *v31;
  const __CFDictionary *v32;
  CFTypeID v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  const __CFUUID *v42;
  const __CFUUID *v43;
  CFTypeID v44;
  CFIndex v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _DWORD *v51;
  const __CFDictionary *v52;
  const __CFDictionary *v53;
  uint64_t v54;
  uint64_t v55;
  const __CFData *v56;
  const __CFData *v57;
  __CFString *v58;
  __CFString *v59;
  CFStringRef v60;
  unint64_t v61;
  CFStringRef v62;
  const __CFString *v63;
  CFDataRef v64;
  const __CFData *v65;
  CFTypeID v66;
  const UInt8 *BytePtr;
  char *data;
  CFIndex Count;
  _BOOL4 v71;
  _BOOL4 v72;
  int v73;
  CFTypeRef cf;
  CC_MD5_CTX valuePtr;
  unsigned __int8 md[8];
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  Value = (const ColorSyncProfile *)CFDictionaryGetValue(theDict, CFSTR("profileToCopy"));
  if (Value)
  {
    v5 = (const UInt8 *)Value;
    if (ColorSyncProfileIsPQBased(Value))
    {
      CICPInfo = ColorSyncProfileGetCICPInfo(v5);
      if (CICPInfo)
      {
        v7 = CICPInfo;
        v73 = *(_DWORD *)CICPInfo;
        MutableCopy = ColorSyncProfileCreateMutableCopy((ColorSyncProfileRef)v5);
        if (MutableCopy)
        {
          v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)kColorSyncPreGainMapCICP);
          if (v9 && (v10 = v9, v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID()))
          {
            valuePtr.A = 0;
            if (CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr) == 1)
              A = valuePtr.A;
            else
              A = 0;
          }
          else
          {
            A = 0;
          }
          v13 = (A & 0xFF00) != 0 && A != 0;
          v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)kColorSyncPostGainMapCICP);
          v72 = v13;
          if (v14 && (v15 = v14, v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
          {
            valuePtr.A = 0;
            if (CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr) == 1)
              v17 = valuePtr.A;
            else
              v17 = 0;
          }
          else
          {
            v17 = 0;
          }
          v18 = v17 == 0;
          if ((v17 & 0xFF00) == 0)
            v18 = 1;
          v71 = v18;
          v19 = CFGetTypeID(theDict);
          if (v19 == CFDictionaryGetTypeID())
          {
            cf = CFDictionaryGetValue(theDict, (const void *)kColorSyncMonoFlexGTCNodeTable);
            if (cf)
            {
              v20 = CFGetTypeID(cf);
              if (v20 == CFArrayGetTypeID())
              {
                Count = CFArrayGetCount((CFArrayRef)cf);
                if (Count >= 1)
                {
                  v21 = 1;
                  do
                  {
                    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v21 - 1);
                    if (!ValueAtIndex)
                      goto LABEL_80;
                    v23 = ValueAtIndex;
                    v24 = CFGetTypeID(ValueAtIndex);
                    if (v24 != CFDictionaryGetTypeID()
                      || !verified_float_from_dictionary(v23, (const void *)kColorSyncFlexGTCNodeX, 0)
                      || !verified_float_from_dictionary(v23, (const void *)kColorSyncFlexGTCNodeY, 0))
                    {
                      goto LABEL_80;
                    }
                    v25 = verified_float_from_dictionary(v23, (const void *)kColorSyncFlexGTCNodeSlope, 0);
                    if (!v25)
                      break;
                  }
                  while (v21++ < Count);
                  v27 = v25 ^ 1;
                  if (!(_DWORD)Count)
                    v27 = 1;
                  if ((v27 & 1) == 0)
                  {
                    v28 = (12 * Count + 158);
                    v29 = (char *)malloc_type_calloc(1uLL, v28, 0xDB310F58uLL);
                    if (v29)
                    {
                      v30 = v29;
                      v31 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)kColorSyncMonoGainMapParams);
                      *(_QWORD *)(v30 + 114) = 0;
                      *(_QWORD *)(v30 + 106) = 0;
                      if (!v31)
                        goto LABEL_79;
                      v32 = v31;
                      data = v30;
                      v33 = CFGetTypeID(v31);
                      v34 = v33 == CFDictionaryGetTypeID();
                      v30 = data;
                      if (!v34)
                        goto LABEL_79;
                      valuePtr.A = 0;
                      v35 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapMin, &valuePtr);
                      *(_DWORD *)(data + 122) = bswap32(valuePtr.A);
                      if (!v35)
                        goto LABEL_79;
                      v36 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapMax, &valuePtr);
                      *(_DWORD *)(data + 126) = bswap32(valuePtr.A);
                      if (!v36)
                        goto LABEL_79;
                      v37 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapGamma, &valuePtr);
                      *(_DWORD *)(data + 130) = bswap32(valuePtr.A);
                      if (!v37)
                        goto LABEL_79;
                      v38 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapBaselineConst, &valuePtr);
                      *(_DWORD *)(data + 134) = bswap32(valuePtr.A);
                      if (!v38)
                        goto LABEL_79;
                      v39 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapAlternateConst, &valuePtr);
                      *(_DWORD *)(data + 138) = bswap32(valuePtr.A);
                      if (!v39)
                        goto LABEL_79;
                      v40 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapBaselineHeadroom, &valuePtr);
                      *(_DWORD *)(data + 142) = bswap32(valuePtr.A);
                      if (!v40)
                        goto LABEL_79;
                      v41 = verified_float_from_dictionary(v32, (const void *)kColorSyncGainMapAlternateHeadroom, &valuePtr);
                      *(_DWORD *)(data + 146) = bswap32(valuePtr.A);
                      if (!v41)
                        goto LABEL_79;
                      if (CFDictionaryContainsKey(v32, (const void *)kColorSyncGUID) == 1)
                      {
                        v42 = (const __CFUUID *)CFDictionaryGetValue(v32, (const void *)kColorSyncGUID);
                        v30 = data;
                        if (!v42
                          || (v43 = v42, v44 = CFGetTypeID(v42), v34 = v44 == CFUUIDGetTypeID(), v30 = data, !v34))
                        {
LABEL_79:
                          free(v30);
                          goto LABEL_80;
                        }
                        *(CFUUIDBytes *)(data + 106) = CFUUIDGetUUIDBytes(v43);
                      }
                      v45 = 0;
                      *(_DWORD *)data = 1885433191;
                      *((_DWORD *)data + 2) = 0;
                      *((_DWORD *)data + 3) = bswap32(v28);
                      v46 = v73 & 0xFFFF00FF | 0x800;
                      if (v72)
                        v46 = A;
                      *((_OWORD *)data + 1) = xmmword_18B3EA6F0;
                      if (v71)
                        v47 = 0;
                      else
                        v47 = 1711276032;
                      if (v71)
                        v48 = 0;
                      else
                        v48 = v17;
                      *((_DWORD *)data + 8) = v47;
                      *((_DWORD *)data + 9) = -1778384896;
                      v49 = bswap32(v48);
                      v50 = bswap32(12 * Count + 8);
                      *((_DWORD *)data + 10) = v50;
                      *((_DWORD *)data + 11) = -1778384896;
                      *((_DWORD *)data + 12) = v50;
                      *((_DWORD *)data + 13) = -1778384896;
                      *((_QWORD *)data + 7) = v50;
                      *((_QWORD *)data + 8) = 0;
                      *(_DWORD *)(data + 98) = bswap32(v46);
                      *(_DWORD *)(data + 102) = v49;
                      *(_DWORD *)(data + 150) = 0;
                      v51 = data + 166;
                      *(_DWORD *)(data + 154) = bswap32(Count);
                      do
                      {
                        v52 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v45);
                        valuePtr.A = 0;
                        verified_float_from_dictionary(v52, (const void *)kColorSyncFlexGTCNodeX, &valuePtr);
                        *(v51 - 2) = bswap32(valuePtr.A);
                        verified_float_from_dictionary(v52, (const void *)kColorSyncFlexGTCNodeY, &valuePtr);
                        *(v51 - 1) = bswap32(valuePtr.A);
                        verified_float_from_dictionary(v52, (const void *)kColorSyncFlexGTCNodeSlope, &valuePtr);
                        *v51 = bswap32(valuePtr.A);
                        v51 += 3;
                        ++v45;
                      }
                      while (Count != v45);
                      v53 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)kColorSyncMonoGainMapParams);
                      if (CFDictionaryGetValue(v53, (const void *)kColorSyncGUID))
                      {
                        v54 = *(_QWORD *)(data + 106);
                        v55 = *(_QWORD *)(data + 114);
                      }
                      else
                      {
                        *(_QWORD *)md = 0;
                        v77 = 0;
                        memset(&valuePtr, 0, sizeof(valuePtr));
                        CC_MD5_Init(&valuePtr);
                        CC_MD5_Update(&valuePtr, data, v28);
                        CC_MD5_Final(md, &valuePtr);
                        v54 = *(_QWORD *)md;
                        v55 = v77;
                      }
                      v30 = data;
                      v56 = CFDataCreate(0, (const UInt8 *)data, v28);
                      if (v56)
                      {
                        v57 = v56;
                        ColorSyncProfileSetTag(MutableCopy, CFSTR("hdgm"), v56);
                        CFRelease(v57);
                        v58 = *v7 - 1 > 0xB
                            ? CFSTR("Unknown primaries")
                            : off_1E2160758[(*v7 - 1)];
                        v59 = v7[1] - 1 > 0x11 ? 0 : *(&off_1E21607B8 + (v7[1] - 1));
                        v60 = CFStringCreateWithFormat(0, 0, CFSTR("%@; %@"), v58, v59);
                        *(_QWORD *)&valuePtr.A = v54;
                        *(_QWORD *)&valuePtr.C = v55;
                        v61 = XXH64((uint64_t)&valuePtr);
                        v62 = CFStringCreateWithFormat(0, 0, CFSTR("Gain Map Preview %02X%02X%02X%02X%02X%02X%02X%02X"), v61, BYTE1(v61), BYTE2(v61), BYTE3(v61), BYTE4(v61), BYTE5(v61), BYTE6(v61), HIBYTE(v61));
                        v63 = CFStringCreateWithFormat(0, 0, CFSTR("%@ (%@)"), v60, v62);
                        CFRelease(v60);
                        CFRelease(v62);
                        v30 = data;
                        if (v63)
                        {
                          ColorSyncProfileRemoveTag(MutableCopy, CFSTR("dscm"));
                          ColorSyncProfileSetDescriptionTag(MutableCopy, v63, 0);
                          CFRelease(v63);
                          v64 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)v5);
                          if (v64)
                          {
                            v65 = v64;
                            v66 = CFGetTypeID(v64);
                            if (v66 == CFDataGetTypeID())
                            {
                              BytePtr = CFDataGetBytePtr(v65);
                              if (BytePtr)
                              {
                                if (*((_DWORD *)BytePtr + 9) == 1633907568)
                                {
                                  *(_OWORD *)(a1 + 8) = *(_OWORD *)(BytePtr + 8);
                                  CFRelease(v65);
                                  free(data);
                                  return MutableCopy;
                                }
                              }
                            }
                            CFRelease(v65);
                            v30 = data;
                          }
                        }
                      }
                      goto LABEL_79;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_80:
        CFRelease(MutableCopy);
      }
    }
  }
  return 0;
}

ColorSyncProfile *makeXYZProfile(uint64_t a1)
{
  ColorSyncProfile *v2;
  const __CFData *v3;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;

  v2 = (ColorSyncProfile *)create(0, 1, 0);
  if (v2)
  {
    qmemcpy((void *)(a1 + 12), "caps ZYX ZYX", 12);
    v5 = 846489197;
    v6 = 131843;
    v7 = xmmword_18B3EA700;
    v8 = xmmword_18B3EA700;
    v10 = xmmword_18B3EAD10;
    v11 = unk_18B3EAD20;
    v12 = xmmword_18B3EAD30;
    v9 = 0x200020000000100;
    v14 = 0xFFFF0000FFFF0000;
    v13 = unk_18B3EAD40;
    v3 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v5, 124, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    ColorSyncProfileSetTag(v2, CFSTR("A2B0"), v3);
    ColorSyncProfileSetTag(v2, CFSTR("B2A0"), v3);
    CFRelease(v3);
    ColorSyncProfileSetDescriptionTag(v2, CFSTR("Custom XYZ Profile"), 0);
    addXYZTag(v2, CFSTR("wtpt"), *(_QWORD *)(a1 + 68), *(_DWORD *)(a1 + 76));
  }
  return v2;
}

ColorSyncProfile *makeLabProfile(uint64_t a1, const __CFDictionary *a2)
{
  ColorSyncProfile *v4;
  const __CFData *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;

  v4 = (ColorSyncProfile *)create(0, 1, 0);
  if (v4)
  {
    qmemcpy((void *)(a1 + 12), "caps baL baL", 12);
    v11 = 846489197;
    v12 = 131843;
    v13 = xmmword_18B3EA700;
    v14 = xmmword_18B3EA700;
    v16 = xmmword_18B3EAD10;
    v17 = unk_18B3EAD20;
    v18 = xmmword_18B3EAD30;
    v15 = 0x200020000000100;
    v20 = 0xFFFF0000FFFF0000;
    v19 = unk_18B3EAD40;
    v5 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v11, 124, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    ColorSyncProfileSetTag(v4, CFSTR("A2B0"), v5);
    ColorSyncProfileSetTag(v4, CFSTR("B2A0"), v5);
    CFRelease(v5);
    ColorSyncProfileSetDescriptionTag(v4, CFSTR("Custom Lab Profile"), 0);
    v6 = icXYZFromDictionary(a2, CFSTR("wtpt"));
    addXYZTag(v4, CFSTR("wtpt"), v6, v7);
    v8 = icXYZFromDictionary(a2, CFSTR("bkpt"));
    addXYZTag(v4, CFSTR("bkpt"), v8, v9);
  }
  return v4;
}

unint64_t verified_float_from_dictionary(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  unint64_t result;
  const __CFNumber *v5;
  CFTypeID v6;
  int Value;
  int valuePtr;

  result = (unint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = (const __CFNumber *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFNumberGetTypeID())
    {
      result = CFNumberIsFloatType(v5);
      if ((_DWORD)result)
      {
        valuePtr = 0;
        Value = CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
        result = Value != 0;
        if (a3)
        {
          if (Value)
            *a3 = valuePtr;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void tag_adder(CFStringRef signature, CFDataRef data, ColorSyncMutableProfileRef prof)
{
  ColorSyncProfileSetTag(prof, signature, data);
}

uint64_t classSignatureFromClassString(const void *a1)
{
  uint64_t v2;
  CFTypeID v3;

  v2 = 1935896178;
  v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
  {
    if (CFEqual(a1, kColorSyncSigDisplayClass))
    {
      return 1835955314;
    }
    else if (CFEqual(a1, kColorSyncSigOutputClass))
    {
      return 1886549106;
    }
    else if (CFEqual(a1, kColorSyncSigLinkClass))
    {
      return 1818848875;
    }
    else if (CFEqual(a1, kColorSyncSigAbstractClass))
    {
      return 1633842036;
    }
    else if (CFEqual(a1, kColorSyncSigColorSpaceClass))
    {
      return 1936744803;
    }
    else if (CFEqual(a1, kColorSyncSigColorSpaceClass))
    {
      return 1852662636;
    }
    else
    {
      return 1935896178;
    }
  }
  return v2;
}

uint64_t gammaTableFromDictionary(const __CFDictionary *a1, const void *a2)
{
  const __CFData *Value;
  const __CFData *v3;
  CFTypeID v4;
  CFIndex Length;
  uint64_t v6;
  uint64_t v7;

  Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFDataGetTypeID() || (CFDataGetLength(v3) & 1) != 0)
    return 0;
  Length = CFDataGetLength(v3);
  if (Length >= 0)
    v6 = Length;
  else
    v6 = Length + 1;
  v7 = v6 >> 1;
  CFDataGetBytePtr(v3);
  return v7;
}

uint64_t colorSyncTransformFinalize(uint64_t result)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (result)
  {
    v1 = result;
    v2 = *(const void **)(result + 80);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(v1 + 112);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(v1 + 120);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(v1 + 128);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(v1 + 136);
    if (v6)
      CFRelease(v6);
    return pthread_mutex_destroy((pthread_mutex_t *)(v1 + 16));
  }
  return result;
}

uint64_t colorSyncTransformEqual(_QWORD *cf, _QWORD *a2)
{
  uint64_t result;
  CFTypeID v5;
  CFTypeID v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID v16;

  if (cf == a2)
    return 1;
  result = 0;
  if (!cf || !a2)
    return result;
  v5 = CFGetTypeID(cf);
  if (ColorSyncTransformGetTypeID_predicate != -1)
  {
    v15 = v5;
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
    v5 = v15;
  }
  if (v5 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    return 0;
  v6 = CFGetTypeID(a2);
  if (ColorSyncTransformGetTypeID_predicate != -1)
  {
    v16 = v6;
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
    v6 = v16;
  }
  if (v6 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    return 0;
  v7 = (const void *)cf[15];
  v8 = (const void *)a2[15];
  if (v7)
  {
    if (!v8)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  v9 = (const void *)cf[14];
  v10 = a2[14];
  if (v9)
  {
    if (!v10)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v11 = a2[16];
  if (cf[16])
  {
    if (v11)
      goto LABEL_21;
    return 0;
  }
  if (v11)
    return 0;
LABEL_21:
  if (v7 && v8)
  {
    result = CFEqual(v7, v8);
    if (!(_DWORD)result)
      return result;
    v9 = (const void *)cf[14];
  }
  if (!v9 || (v12 = (const void *)a2[14]) == 0 || (result = CFEqual(v9, v12), (_DWORD)result))
  {
    v13 = (const void *)cf[16];
    if (!v13)
      return 1;
    v14 = (const void *)a2[16];
    if (!v14)
      return 1;
    result = CFEqual(v13, v14);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

CFStringRef colorSyncTransformCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<ColorSyncTransform %p>"), a1);
}

CFStringRef colorSyncTransformCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  const __CFAllocator *v7;
  CFRange v8;

  if (a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v3 = *(const __CFArray **)(a1 + 120);
      if (v3)
      {
        v8.length = CFArrayGetCount(v3);
        v8.location = 0;
        CFArrayApplyFunction(*(CFArrayRef *)(a1 + 120), v8, (CFArrayApplierFunction)description_adder, Mutable);
      }
    }
    v4 = CFGetAllocator((CFTypeRef)a1);
    v5 = CFStringCreateWithFormat(v4, 0, CFSTR("<ColorSyncTransform %p;cmm:%@;\nproperties:%@;\noptions:%@;\nsequence:%@>"),
           a1,
           *(_QWORD *)(a1 + 80),
           *(_QWORD *)(a1 + 112),
           *(_QWORD *)(a1 + 128),
           Mutable);
    if (Mutable)
      CFRelease(Mutable);
    return v5;
  }
  else
  {
    v7 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v7, 0, CFSTR("<NULL ColorSyncTransform>"));
  }
}

void description_adder(const void *a1, __CFArray *a2)
{
  CFTypeID v4;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v6;
  const ColorSyncProfile *Value;
  CFStringRef v8;
  CFStringRef v9;

  v4 = CFGetTypeID(a1);
  if (v4 == CFDictionaryGetTypeID())
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)a1);
    if (MutableCopy)
    {
      v6 = MutableCopy;
      Value = (const ColorSyncProfile *)CFDictionaryGetValue(MutableCopy, kColorSyncProfile);
      if (Value)
      {
        v8 = ColorSyncProfileCopyDescriptionString(Value);
        if (v8)
        {
          v9 = v8;
          CFDictionarySetValue(v6, kColorSyncProfile, v8);
          CFRelease(v9);
          CFArrayAppendValue(a2, v6);
        }
      }
      CFRelease(v6);
    }
  }
}

void ColorSyncTransformSetProperty(ColorSyncTransformRef transform, CFTypeRef key, CFTypeRef property)
{
  CFTypeID v6;

  if (!key
    || (v6 = CFGetTypeID(key), v6 != CFStringGetTypeID())
    || !CFStringHasPrefix((CFStringRef)key, CFSTR("com.apple.cmm"))
    && !CFEqual(key, kColorSyncTransformCreator)
    && !CFEqual(key, kColorSyncTransformSrcSpace)
    && !CFEqual(key, kColorSyncTransformDstSpace))
  {
    ColorSyncTransformInternalSetProperty((CFMutableDictionaryRef *)transform, key, property);
  }
}

BOOL ColorSyncTransformConvert(ColorSyncTransformRef transform, size_t width, size_t height, void *dst, ColorSyncDataDepth dstDepth, ColorSyncDataLayout dstLayout, size_t dstBytesPerRow, const void *src, ColorSyncDataDepth srcDepth, ColorSyncDataLayout srcLayout, size_t srcBytesPerRow, CFDictionaryRef options)
{
  uint64_t v14;
  uint64_t v15;
  CFTypeID v20;
  uint64_t (*v21)(ColorSyncTransformRef, size_t, size_t, uint64_t, _QWORD *, uint64_t, uint64_t, size_t, uint64_t, const void **, unint64_t, size_t, CFDictionaryRef);
  char v23;
  const void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (!transform)
    goto LABEL_11;
  v14 = *(_QWORD *)&dstLayout;
  v15 = *(_QWORD *)&dstDepth;
  v20 = CFGetTypeID(transform);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v20 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
    if (((_DWORD)v15 != 8 || !(_DWORD)v14) && (srcDepth != kColorSync10BitInteger || !srcLayout))
    {
      v24 = src;
      v25[0] = dst;
      v21 = *(uint64_t (**)(ColorSyncTransformRef, size_t, size_t, uint64_t, _QWORD *, uint64_t, uint64_t, size_t, uint64_t, const void **, unint64_t, size_t, CFDictionaryRef))(*((_QWORD *)transform + 10) + 56);
      if (v21)
        return v21(transform, width, height, 1, v25, v15, v14, dstBytesPerRow, 1, &v24, __PAIR64__(srcLayout, srcDepth), srcBytesPerRow, options);
    }
  }
  else
  {
LABEL_11:
    ColorSyncLog(2, (uint64_t)"ColorSync: ColorSyncTransform is not valid\n", height, (uint64_t)dst, *(uint64_t *)&dstDepth, *(uint64_t *)&dstLayout, dstBytesPerRow, (uint64_t)src, v23);
  }
  return 0;
}

CFMutableDictionaryRef *ColorSyncTransformCreateWithName(const void *a1)
{
  CFMutableDictionaryRef *RuntimeInstance;
  uint64_t v3;
  CFDataRef v4;
  CFDataRef v5;
  int32x4_t *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int32x2_t v19;
  int32x2_t v20;
  int *v21;
  int32x4_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  const __CFString *v36;
  CFTypeRef cf;
  void *v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  RuntimeInstance = (CFMutableDictionaryRef *)createRuntimeInstance(0x52474220u, 0x52474220u, 0);
  if (RuntimeInstance)
  {
    cf = ColorSyncCMMCreateAppleCMM();
    v3 = operator new();
    *(_QWORD *)v3 = 850045863;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_QWORD *)(v3 + 120) = 0;
    if (CMMBytesDeallocator(void)::predicate != -1)
      dispatch_once(&CMMBytesDeallocator(void)::predicate, &__block_literal_global_179_651);
    v4 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v3, 8, (CFAllocatorRef)CMMBytesDeallocator(void)::cmmAllocator);
    if (v4)
    {
      v5 = v4;
      ColorSyncTransformInternalSetCMMStorage((uint64_t)RuntimeInstance, v4);
      CFRelease(v5);
      v39 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v39);
      v41 = 0;
      v40 = xmmword_18B3EA710;
      v6 = (int32x4_t *)CMMBase::NewInternal(0x740uLL, (_QWORD **)&v39);
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1)
        dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_205);
      v7 = CMMTwoPointTwoGammaTable;
      v8 = (__int128 *)CMMTwoPointTwoGammaFloatLutInfo;
      if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1)
        dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_208);
      v9 = CMMInvsRGBGammaTable;
      v10 = (__int128 *)CMMInvsRGBGammaFloatLutInfo;
      v6[2].i64[1] = 0x3F80000000000000;
      v6[2].i32[0] = 0;
      v6[2].i8[4] = 0;
      v6->i64[0] = (uint64_t)off_1E215D480;
      v11 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)&v39);
      v12 = 0;
      v6[3].i64[0] = CMMConvTRC::CMMConvTRC((uint64_t)v11, 0, v7, 21512, v8, 0, 3, 1, 1.0, 1, 0);
      do
      {
        v13 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)&v39);
        v6[3].i64[v12 + 1] = CMMConvTRC::CMMConvTRC((uint64_t)v13, (int)v12 + 1, v7, 21512, v8, v6[3].i64[v12], 3, 1, 1.0, 1, 0);
        ++v12;
      }
      while (v12 != 2);
      v6[7].i64[0] = (uint64_t)&unk_18B419FE8;
      v6[7].i64[1] = (uint64_t)&unk_18B419FE8;
      v6[6].i64[1] = (uint64_t)&unk_18B419FE8;
      v14 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)&v39);
      v15 = v6[4].i64[0];
      *((_DWORD *)v14 + 2) = 1;
      v14[2] = 0;
      v14[3] = v15;
      if (v15)
        *(_QWORD *)(v15 + 16) = v14;
      v14[5] = 0x3F80000000000000;
      *(_DWORD *)((char *)v14 + 33) = 1;
      v14[7] = off_1E215FED0;
      *((_OWORD *)v14 + 4) = xmmword_18B3EA720;
      *((_OWORD *)v14 + 5) = xmmword_18B3EA730;
      *((_DWORD *)v14 + 24) = 68346;
      *(_OWORD *)((char *)v14 + 100) = xmmword_18B3EA740;
      *(_OWORD *)((char *)v14 + 116) = xmmword_18B3EA750;
      *((_DWORD *)v14 + 33) = 1065711138;
      v14[17] = 0;
      *((_DWORD *)v14 + 36) = 0;
      *(_OWORD *)((char *)v14 + 148) = v40;
      *((_WORD *)v14 + 24) = 0;
      *((_BYTE *)v14 + 32) = 0;
      *v14 = off_1E215E948;
      v6[4].i64[1] = (uint64_t)v14;
      v16 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)&v39);
      v17 = 0;
      v6[5].i64[0] = CMMConvTRC::CMMConvTRC((uint64_t)v16, 0, v9, 21512, v10, v6[4].i64[1], 3, 1, 1.0, 1, 0);
      do
      {
        v18 = CMMBase::NewInternal(0xA8uLL, (_QWORD **)&v39);
        v6[5].i64[v17 + 1] = CMMConvTRC::CMMConvTRC((uint64_t)v18, (int)v17 + 1, v9, 21512, v10, v6[5].i64[v17], 3, 1, 1.0, 1, 0);
        ++v17;
      }
      while (v17 != 2);
      v6[8].i64[1] = (uint64_t)&unk_18B41F7F0;
      v6[9].i64[0] = (uint64_t)&unk_18B41F7F0;
      v6[8].i64[0] = (uint64_t)&unk_18B41F7F0;
      v6[115].i8[1] = 1;
      v21 = (int *)v6[4].i64[1];
      v20.i32[0] = v21[17];
      *(float *)v19.i32 = (float)v21[16];
      v22 = vdupq_lane_s32(v19, 0);
      v23 = v21[18];
      v24 = v21[19];
      v25 = v21[20];
      v26 = v21[21];
      v27 = v21[22];
      v28 = v21[23];
      v29 = v21[24];
      v6[106] = v22;
      *(float *)v22.i32 = (float)v20.i32[0];
      v30 = vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
      *(float *)v20.i32 = (float)v23;
      v31 = vdupq_lane_s32(v20, 0);
      v6[107] = v30;
      v6[108] = v31;
      *(float *)v30.i32 = (float)v24;
      v32 = vdupq_lane_s32(*(int32x2_t *)v30.i8, 0);
      v6[109] = v32;
      *(float *)v32.i32 = (float)v25;
      v33 = vdupq_lane_s32(*(int32x2_t *)v32.i8, 0);
      *(float *)v31.i32 = (float)v26;
      v34 = vdupq_lane_s32(*(int32x2_t *)v31.i8, 0);
      v6[110] = v33;
      v6[111] = v34;
      *(float *)v33.i32 = (float)v27;
      v35 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
      v6[112] = v35;
      *(float *)v35.i32 = (float)v28;
      *(float *)v34.i32 = (float)v29;
      v6[113] = vdupq_lane_s32(*(int32x2_t *)v35.i8, 0);
      v6[114] = vdupq_lane_s32(*(int32x2_t *)v34.i8, 0);
      *(_QWORD *)(v3 + 96) = 3;
      *(_DWORD *)(v3 + 88) = 1380401696;
      *(_DWORD *)(v3 + 112) = 2;
      *(_QWORD *)(v3 + 80) = 0x5247422000000000;
      *(_BYTE *)(v3 + 116) = 0;
      *(_DWORD *)(v3 + 120) = 2;
      *(_QWORD *)(v3 + 64) = CMMMemMgr::RetainMemList((CMMMemMgr *)&v39);
      *(_QWORD *)(v3 + 72) = v6;
      *(_BYTE *)(v3 + 124) = 1;
      CMMMemMgr::ReleaseMemList(&v39);
      ColorSyncTransformInternalSetProperty(RuntimeInstance, CFSTR("com.apple.cmm.TransformType"), CFSTR("RegularTransform.Parametric"));
      ColorSyncTransformInternalSetProperty(RuntimeInstance, CFSTR("com.apple.cmm.TransformName"), a1);
      RuntimeInstance[10] = (CFMutableDictionaryRef)CFRetain(cf);
      v36 = CFSTR("Apple CMM");
      CFDictionarySetValue(RuntimeInstance[14], kColorSyncTransformCreator, CFSTR("Apple CMM"));
    }
    else
    {
      DoCMMDisposeStorage((pthread_mutex_t *)v3);
      v36 = (const __CFString *)RuntimeInstance;
      RuntimeInstance = 0;
    }
    CFRelease(v36);
  }
  return RuntimeInstance;
}

void sub_18B3C61F4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_18B3C620C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD **a12)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      if (a12)
      {
        v13 = *a12;
        if (*a12)
        {
          do
          {
            v14 = (_QWORD *)*v13;
            free(v13);
            v13 = v14;
          }
          while (v14);
        }
      }
    }
    else if (a12)
    {
      v15 = *a12;
      if (*a12)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          free(v15);
          v15 = v16;
        }
        while (v16);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x18B3C60E8);
  }
  JUMPOUT(0x18B3C61FCLL);
}

void sub_18B3C6294(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CMMMemMgr::ReleaseMemList((void **)va);
  JUMPOUT(0x18B3C61FCLL);
}

CFTypeRef ColorSyncCreateCodeFragmentPriv(const void *a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  CFTypeRef v6;
  ColorSyncTransformRef v7;
  ColorSyncTransformRef v8;
  const __CFString *Value;
  BOOL v10;
  CFStringRef v11;
  const void *v12;

  pthread_mutex_lock(&ColorSyncCreateCodeFragmentPriv_mtx);
  v4 = 0;
  if (a1 && ColorSyncCreateCodeFragmentPriv_lastSequence)
    v4 = CFEqual(a1, (CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastSequence) != 0;
  if (a2 | ColorSyncCreateCodeFragmentPriv_lastOptions)
  {
    v5 = 0;
    if (a2 && ColorSyncCreateCodeFragmentPriv_lastOptions)
      v5 = CFEqual((CFTypeRef)a2, (CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastOptions) != 0;
  }
  else
  {
    v5 = 1;
  }
  if (!v4)
    goto LABEL_14;
  if (!ColorSyncCreateCodeFragmentPriv_lastCodeFragment)
    v5 = 0;
  if (!v5)
  {
LABEL_14:
    if (ColorSyncCreateCodeFragmentPriv_lastSequence)
      CFRelease((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastSequence);
    ColorSyncCreateCodeFragmentPriv_lastSequence = (uint64_t)a1;
    if (a1)
      CFRetain(a1);
    if (ColorSyncCreateCodeFragmentPriv_lastOptions)
      CFRelease((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastOptions);
    ColorSyncCreateCodeFragmentPriv_lastOptions = a2;
    if (a2)
      CFRetain((CFTypeRef)a2);
    if (ColorSyncCreateCodeFragmentPriv_lastCodeFragment)
      CFRelease((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastCodeFragment);
    v7 = ColorSyncTransformCreate((CFArrayRef)a1, (CFDictionaryRef)a2);
    v8 = v7;
    if (a2)
    {
      Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, kColorSyncTransformCodeFragmentType);
      v10 = Value != 0;
      if (Value)
        v11 = Value;
      else
        v11 = kColorSyncTransformParametricConversionData;
      v12 = (const void *)ColorSyncTransformInternalCopyProperty((uint64_t)v8, v11, a2);
    }
    else
    {
      v12 = (const void *)ColorSyncTransformInternalCopyProperty((uint64_t)v7, kColorSyncTransformParametricConversionData, 0);
      v10 = 0;
    }
    ColorSyncCreateCodeFragmentPriv_lastCodeFragment = (uint64_t)v12;
    if (!v10 && !v12)
    {
      v12 = (const void *)ColorSyncTransformInternalCopyProperty((uint64_t)v8, kColorSyncTransformSimplifiedConversionData, a2);
      ColorSyncCreateCodeFragmentPriv_lastCodeFragment = (uint64_t)v12;
    }
    if (v12)
    {
      v6 = CFRetain(v12);
      if (!v8)
        goto LABEL_36;
    }
    else
    {
      v6 = 0;
      if (!v8)
        goto LABEL_36;
    }
    CFRelease(v8);
    goto LABEL_36;
  }
  v6 = CFRetain((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastCodeFragment);
LABEL_36:
  pthread_mutex_unlock(&ColorSyncCreateCodeFragmentPriv_mtx);
  return v6;
}

uint64_t ColorSyncDefaultsGetBoolean(const char *a1, char *a2)
{
  char *v4;
  const __CFString *v5;
  CFTypeID v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  int valuePtr;

  v4 = getenv(a1);
  if (v4)
  {
    v5 = CFStringCreateWithCString(0, v4, 0x600u);
    if (v5)
      goto LABEL_3;
    return 0;
  }
  v10 = CFStringCreateWithCString(0, a1, 0x600u);
  v9 = (uint64_t)v10;
  if (v10)
  {
    v11 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v12 = (const __CFString *)*MEMORY[0x1E0C9B230];
    v5 = (const __CFString *)CFPreferencesCopyValue(v10, (CFStringRef)*MEMORY[0x1E0C9B248], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    if (!v5)
    {
      v5 = (const __CFString *)CFPreferencesCopyValue((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E0C9B228], v11, v12);
      if (!v5)
        v5 = (const __CFString *)CFPreferencesCopyValue((CFStringRef)v9, CFSTR("com.apple.ColorSync"), v11, v12);
    }
    CFRelease((CFTypeRef)v9);
    if (v5)
    {
LABEL_3:
      v6 = CFGetTypeID(v5);
      if (v6 == CFBooleanGetTypeID())
      {
        if (a2)
        {
          v7 = CFBooleanGetValue((CFBooleanRef)v5) == 0;
LABEL_6:
          v8 = !v7;
          *a2 = v8;
        }
      }
      else
      {
        if (v6 == CFStringGetTypeID())
        {
          if (CFStringCompare(v5, CFSTR("Yes"), 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, CFSTR("True"), 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, CFSTR("1"), 1uLL) == kCFCompareEqualTo)
          {
            v9 = 1;
            if (a2)
              *a2 = 1;
            goto LABEL_31;
          }
          if (CFStringCompare(v5, CFSTR("No"), 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, CFSTR("False"), 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, CFSTR("0"), 1uLL) == kCFCompareEqualTo)
          {
            if (a2)
              *a2 = 0;
            goto LABEL_10;
          }
        }
        if (v6 != CFNumberGetTypeID()
          || (valuePtr = 0, !CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr)))
        {
          v9 = 0;
          goto LABEL_31;
        }
        if (a2)
        {
          v7 = valuePtr == 0;
          goto LABEL_6;
        }
      }
LABEL_10:
      v9 = 1;
LABEL_31:
      CFRelease(v5);
      return v9;
    }
    return 0;
  }
  return v9;
}

CFStringRef colorSyncProfileCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<ColorSyncProfile %p>"), a1);
}

CFStringRef colorSyncProfileCopyDebugDescription(const ColorSyncProfile *a1)
{
  CFStringRef v2;
  CFStringRef v3;
  CFDataRef v4;
  const __CFData *v5;
  CFTypeID v6;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  int v9;
  const __CFString *v10;
  const __CFAllocator *v11;
  const __CFString *v12;
  CFArrayRef v13;
  const __CFAllocator *v14;
  CFStringRef v15;
  const __CFString *v17;
  const __CFString *v18;

  if (!a1)
  {
    v11 = CFGetAllocator(0);
    v12 = CFSTR("<NULL ColorSyncProfile>");
    return CFStringCreateWithFormat(v11, 0, v12);
  }
  v2 = ColorSyncProfileCopyDescriptionString(a1);
  if (!v2)
  {
    v11 = CFGetAllocator(a1);
    v12 = CFSTR("<NULL ColorSyncProfile description>");
    return CFStringCreateWithFormat(v11, 0, v12);
  }
  v3 = v2;
  v4 = ColorSyncProfileCopyHeader(a1);
  v5 = v4;
  if (v4 && (v6 = CFGetTypeID(v4), v6 == CFDataGetTypeID()) && (unint64_t)CFDataGetLength(v5) >= 0x80)
  {
    Mutable = CFStringCreateMutable(0, 0);
    if (Mutable)
    {
      BytePtr = CFDataGetBytePtr(v5);
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\tProfile size:\t%d"), *(unsigned int *)BytePtr);
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\tVersion:\t\t%x"), *((unsigned int *)BytePtr + 2));
      v9 = *((_DWORD *)BytePtr + 3);
      v10 = CFSTR("???");
      if (v9 <= 1852662635)
      {
        switch(v9)
        {
          case 1633842036:
            v10 = CFSTR("Abstract profile");
            break;
          case 1818848875:
            v10 = CFSTR("Link profile");
            break;
          case 1835955314:
            v10 = CFSTR("Display profile");
            break;
        }
      }
      else if (v9 > 1935896177)
      {
        if (v9 == 1936744803)
        {
          v10 = CFSTR("Color Space profile");
        }
        else if (v9 == 1935896178)
        {
          v10 = CFSTR("Input profile");
        }
      }
      else if (v9 == 1852662636)
      {
        v10 = CFSTR("Named Color profile");
      }
      else if (v9 == 1886549106)
      {
        v10 = CFSTR("Output profile");
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\tClass:\t\t\t%@"), v10);
      v17 = color_space(*((_DWORD *)BytePtr + 4));
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\tColor Space:\t%@"), v17);
      v18 = color_space(*((_DWORD *)BytePtr + 5));
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\tPCS:\t\t\t%@"), v18);
    }
  }
  else
  {
    Mutable = 0;
  }
  v13 = ColorSyncProfileCopyTagSignatures(a1);
  v14 = CFGetAllocator(a1);
  v15 = CFStringCreateWithFormat(v14, 0, CFSTR("<ColorSyncProfile %p\nheader:%@\ntags:\n%@;\ntagCopies:\n%@;\ndata: %@;\nurl:  %@;\ndesc: %@>"),
          a1,
          Mutable,
          v13,
          *((_QWORD *)a1 + 12),
          *((_QWORD *)a1 + 13),
          *((_QWORD *)a1 + 15),
          v3);
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
    CFRelease(v13);
  CFRelease(v3);
  return v15;
}

const __CFString *color_space(int a1)
{
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  const __CFString *v9;
  int v10;
  BOOL v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;

  v1 = CFSTR("???");
  if (a1 <= 1129142602)
  {
    if (a1 > 943934545)
    {
      v2 = 1111706705;
      v4 = CFSTR("11 Color");
      v15 = CFSTR("CMY");
      if (a1 != 1129142560)
        v15 = CFSTR("???");
      if (a1 == 1128483922)
        v16 = CFSTR("12 Color");
      else
        v16 = v15;
      if (a1 != 1111706706)
        v4 = v16;
      v7 = 943934546;
      v8 = CFSTR("2 Color");
      v9 = CFSTR("8 Color");
      v10 = 960711762;
      v11 = a1 == 1094929490;
      v12 = CFSTR("10 Color");
    }
    else
    {
      v2 = 893602897;
      v4 = CFSTR("5 Color");
      v5 = CFSTR("7 Color");
      if (a1 != 927157330)
        v5 = CFSTR("???");
      if (a1 == 910380114)
        v6 = CFSTR("6 Color");
      else
        v6 = v5;
      if (a1 != 893602898)
        v4 = v6;
      v7 = 843271250;
      v8 = CFSTR("2 Color");
      v9 = CFSTR("3 Color");
      v10 = 860048466;
      v11 = a1 == 876825682;
      v12 = CFSTR("4 Color");
    }
    goto LABEL_39;
  }
  if (a1 <= 1213421087)
  {
    v2 = 1178815569;
    v4 = CFSTR("15 Color");
    v13 = CFSTR("HLS");
    if (a1 != 1212961568)
      v13 = CFSTR("???");
    if (a1 == 1196573017)
      v14 = CFSTR("GRAY");
    else
      v14 = v13;
    if (a1 != 1178815570)
      v4 = v14;
    v7 = 1129142603;
    v8 = CFSTR("CMYK");
    v9 = CFSTR("13 Color");
    v10 = 1145261138;
    v11 = a1 == 1162038354;
    v12 = CFSTR("14 Color");
LABEL_39:
    if (v11)
      v1 = v12;
    if (a1 == v10)
      v1 = v9;
    if (a1 == v7)
      v1 = v8;
    goto LABEL_45;
  }
  if (a1 > 1380401695)
  {
    v2 = 1497588337;
    v3 = CFSTR("Yxy");
    if (a1 != 1501067552)
      v3 = CFSTR("???");
    if (a1 == 1497588338)
      v4 = CFSTR("YCbCr");
    else
      v4 = v3;
    if (a1 == 1482250784)
      v1 = CFSTR("XYZ");
    if (a1 == 1380401696)
      v1 = CFSTR("RGB");
LABEL_45:
    if (a1 <= v2)
      return v1;
    else
      return v4;
  }
  if (a1 == 1282766368)
    v1 = CFSTR("Luv");
  if (a1 == 1281450528)
    v1 = CFSTR("Lab");
  if (a1 == 1213421088)
    return CFSTR("HSV");
  else
    return v1;
}

CFTypeRef copyLoacalizedStringFromResources(const __CFString *cf, int a2)
{
  const __CFString *v3;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v5;

  v3 = cf;
  if (copyLoacalizedStringFromResources_predicate == -1)
  {
    if (!cf)
      return 0;
  }
  else
  {
    dispatch_once(&copyLoacalizedStringFromResources_predicate, &__block_literal_global_316);
    if (!v3)
      return 0;
  }
  if (!copyLoacalizedStringFromResources_csBundle)
    return CFRetain(v3);
  ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey((CFBundleRef)copyLoacalizedStringFromResources_csBundle, v3);
  v5 = a2 ? v3 : 0;
  v3 = ValueForInfoDictionaryKey ? ValueForInfoDictionaryKey : v5;
  if (v3)
    return CFRetain(v3);
  return 0;
}

CFBundleRef __copyLoacalizedStringFromResources_block_invoke()
{
  CFBundleRef result;

  result = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.ColorSync"));
  copyLoacalizedStringFromResources_csBundle = (uint64_t)result;
  return result;
}

uint64_t findDescByLanguage(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = CFStringHasPrefix(a1, *(CFStringRef *)a3);
  if ((_DWORD)result)
    *(_QWORD *)(a3 + 8) = a2;
  return result;
}

char *__use_xpc_only_block_invoke()
{
  char *result;

  result = getenv("COLORSYNC_XPC_ONLY");
  if (result)
    use_xpc_only_xpc_only = 1;
  return result;
}

ColorSyncProfileRef ColorSyncProfileCreateWithURL(CFURLRef url, CFErrorRef *error)
{
  CFTypeID v4;
  CFTypeID v5;
  int v6;
  int v7;
  const ColorSyncProfile *v8;
  void *v10;
  void *v11;
  ssize_t v12;
  CFIndex v13;
  CFDataRef v14;
  CFDataRef v15;
  stat v16;
  UInt8 buffer[1025];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!url)
    goto LABEL_12;
  v4 = CFGetTypeID(url);
  if (v4 != CFURLGetTypeID())
    goto LABEL_12;
  v5 = CFGetTypeID(url);
  if (v5 != CFURLGetTypeID())
    goto LABEL_12;
  bzero(buffer, 0x401uLL);
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1025) || access((const char *)buffer, 4))
    goto LABEL_12;
  if (use_xpc_only_predicate != -1)
    dispatch_once(&use_xpc_only_predicate, &__block_literal_global_312);
  if ((use_xpc_only_xpc_only & 1) != 0)
    goto LABEL_12;
  v6 = open((const char *)buffer, 0, 0);
  if (v6 < 0)
    goto LABEL_12;
  v7 = v6;
  memset(&v16, 0, sizeof(v16));
  if (fstat(v6, &v16))
    goto LABEL_11;
  if ((v16.st_mode & 0xF000) != 0x8000)
    goto LABEL_11;
  if (v16.st_size < 1)
    goto LABEL_11;
  if (v16.st_size > 0x1FFFFFFF)
    goto LABEL_11;
  v10 = malloc_type_malloc(v16.st_size, 0x9758719DuLL);
  if (!v10)
    goto LABEL_11;
  v11 = v10;
  bzero(v10, v16.st_size);
  v12 = read(v7, v11, v16.st_size);
  if (v12 != v16.st_size)
  {
    free(v11);
LABEL_11:
    close(v7);
LABEL_12:
    v8 = 0;
    goto LABEL_13;
  }
  v13 = v12;
  close(v7);
  if (colorSyncBytesDeallocator_predicate != -1)
    dispatch_once(&colorSyncBytesDeallocator_predicate, &__block_literal_global_847);
  v14 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v11, v13, (CFAllocatorRef)colorSyncBytesDeallocator_colorSyncAllocator);
  if (!v14)
    goto LABEL_12;
  v15 = v14;
  v8 = (const ColorSyncProfile *)create(v14, 0, 0);
  CFRelease(v15);
  if (v8)
    *((_QWORD *)v8 + 15) = CFRetain(url);
LABEL_13:
  if (error)
    *error = 0;
  return v8;
}

CFURLRef ColorSyncProfileGetURL(CFURLRef prof, CFErrorRef *error)
{
  CFURLRef v3;
  CFTypeID v4;

  if (!prof)
  {
LABEL_6:
    if (!error)
      return prof;
    goto LABEL_7;
  }
  v3 = prof;
  v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
  {
    prof = (CFURLRef)*((_QWORD *)v3 + 15);
    goto LABEL_6;
  }
  prof = 0;
  if (!error)
    return prof;
LABEL_7:
  *error = 0;
  return prof;
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutable(void)
{
  return (ColorSyncMutableProfileRef)create(0, 1, 0);
}

ColorSyncProfileRef ColorSyncProfileCreateLink(CFArrayRef profileInfo, CFDictionaryRef options)
{
  CFTypeID v4;
  const void *v5;
  _QWORD *v6;
  CFTypeID v7;
  CFTypeID v8;
  uint64_t (*v9)(const void *, CFArrayRef, CFDictionaryRef);

  if (!profileInfo)
    return 0;
  v4 = CFGetTypeID(profileInfo);
  if (v4 != CFArrayGetTypeID())
    return 0;
  v5 = (const void *)create(0, 1, 0);
  if (v5)
  {
    if ((v6 = ColorSyncCMMCreateAppleCMM(), v7 = CFGetTypeID(profileInfo), v7 != CFArrayGetTypeID())
      || options && (v8 = CFGetTypeID(options), v8 != CFDictionaryGetTypeID())
      || (v9 = (uint64_t (*)(const void *, CFArrayRef, CFDictionaryRef))v6[9]) == 0
      || (v9(v5, profileInfo, options) & 1) == 0)
    {
      CFRelease(v5);
      return 0;
    }
  }
  return (ColorSyncProfileRef)v5;
}

__CFDictionary *ColorSyncProfileCopyLocalizedStringDictionary(_QWORD *a1, const void *a2)
{
  CFTypeID v4;
  const __CFDictionary *v5;
  const __CFData *Value;
  const __CFData *v7;

  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID
    && (v5 = (const __CFDictionary *)a1[11]) != 0
    && (Value = (const __CFData *)CFDictionaryGetValue(v5, a2)) != 0
    && (v7 = Value, *(_DWORD *)CFDataGetBytePtr(Value) == 1668639853)
    && *(_DWORD *)CFDataGetBytePtr(v7) == 1668639853)
  {
    return copy_description_dict_from_DSCMTag(v7);
  }
  else
  {
    return 0;
  }
}

void removeReference(uint64_t a1, const void *a2)
{
  void *v4;
  const __CFDictionary *v5;
  const void *Value;
  void *v7;
  const void *v8;
  void *key;

  v8 = a2;
  key = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 88), (CFDictionaryApplierFunction)tagValueComparer, &v8);
  v4 = key;
  if (key)
  {
    v5 = *(const __CFDictionary **)(a1 + 88);
    Value = CFDictionaryGetValue(v5, a2);
    CFDictionarySetValue(v5, v4, Value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 88), a2);
    v7 = key;
    do
    {
      key = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 88), (CFDictionaryApplierFunction)tagValueComparer, &v8);
      if (!key)
        break;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 88), key, v7);
    }
    while (key);
  }
}

void ColorSyncProfileRemoveTag(ColorSyncMutableProfileRef prof, CFStringRef signature)
{
  CFTypeID v4;
  CFTypeID v5;
  const void *v6;

  if (prof)
  {
    v4 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      if (signature)
      {
        if (*((_DWORD *)prof + 37) == 1)
        {
          v5 = CFGetTypeID(signature);
          if (v5 == CFStringGetTypeID())
          {
            pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
            if (CFDictionaryContainsKey(*((CFDictionaryRef *)prof + 11), signature))
            {
              if (CFDictionaryContainsValue(*((CFDictionaryRef *)prof + 11), signature))
                removeReference((uint64_t)prof, signature);
              else
                CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)prof + 11), signature);
              v6 = (const void *)*((_QWORD *)prof + 13);
              if (v6)
              {
                CFRelease(v6);
                *((_QWORD *)prof + 13) = 0;
              }
              *((_QWORD *)prof + 16) = 0;
              *((_QWORD *)prof + 17) = 0;
            }
            pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
          }
        }
      }
    }
  }
}

void ColorSyncIterateInstalledProfiles(ColorSyncProfileIterateCallback callBack, uint32_t *seed, void *userInfo, CFErrorRef *error)
{
  __CFArray *Mutable;
  uint64_t v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  const ColorSyncProfile *v10;
  __CFDictionary *v11;
  CFURLRef URL;
  const __CFData *v13;
  const __CFData *v14;
  unsigned int *BytePtr;
  CFStringRef SignatureFromFourCharCode;
  CFStringRef v17;
  CFStringRef v18;
  CFStringRef v19;
  CFStringRef v20;
  CFTypeRef v21;
  const void *v22;
  CFDataRef v23;
  CFDataRef v24;
  CFIndex Count;
  CFIndex v26;
  CFIndex v27;
  const void *ValueAtIndex;
  uint32_t *v30;
  _QWORD v31[15];
  ColorSyncMD5 bytes;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (error)
    *error = 0;
  if (callBack)
  {
    v30 = seed;
    v31[0] = kColorSyncACESCGLinearProfile;
    v31[1] = kColorSyncAdobeRGB1998Profile;
    v31[2] = kColorSyncDCIP3Profile;
    v31[3] = kColorSyncDisplayP3Profile;
    v31[4] = kColorSyncGenericCMYKProfile;
    v31[5] = kColorSyncGenericGrayGamma22Profile;
    v31[6] = kColorSyncGenericGrayProfile;
    v31[7] = kColorSyncGenericLabProfile;
    v31[8] = kColorSyncGenericRGBProfile;
    v31[9] = kColorSyncGenericXYZProfile;
    v31[10] = kColorSyncITUR2020Profile;
    v31[11] = kColorSyncITUR709Profile;
    v31[12] = kColorSyncROMMRGBProfile;
    v31[13] = kColorSyncSRGBProfile;
    v31[14] = kColorSyncWebSafeColorsProfile;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v7 = 0;
      v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v10 = ColorSyncProfileCreateWithName((CFStringRef)v31[v7]);
        v11 = CFDictionaryCreateMutable(0, 0, v8, v9);
        if (v11)
        {
          URL = ColorSyncProfileGetURL(v10, 0);
          if (URL)
            CFDictionarySetValue(v11, kColorSyncProfileURL, URL);
          v13 = ColorSyncProfileCopyHeader(v10);
          if (v13)
          {
            v14 = v13;
            BytePtr = (unsigned int *)CFDataGetBytePtr(v13);
            CFDictionarySetValue(v11, kColorSyncProfileHeader, v14);
            SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(BytePtr[3]);
            CFDictionarySetValue(v11, kColorSyncProfileClass, SignatureFromFourCharCode);
            CFRelease(SignatureFromFourCharCode);
            v17 = ColorSyncCreateSignatureFromFourCharCode(BytePtr[4]);
            CFDictionarySetValue(v11, kColorSyncProfileColorSpace, v17);
            CFRelease(v17);
            v18 = ColorSyncCreateSignatureFromFourCharCode(BytePtr[5]);
            CFDictionarySetValue(v11, kColorSyncProfilePCS, v18);
            CFRelease(v18);
            v19 = ColorSyncProfileCopyDescriptionString(v10);
            if (v19)
            {
              v20 = v19;
              CFDictionarySetValue(v11, kColorSyncProfileDescription, v19);
              CFRelease(v20);
            }
            v21 = ColorSyncProfileCopyASCIIDescriptionString(v10);
            if (v21)
            {
              v22 = v21;
              CFDictionarySetValue(v11, (const void *)kColorSyncProfileASCIIDescription, v21);
              CFRelease(v22);
            }
            bytes = ColorSyncProfileGetMD5(v10);
            v23 = CFDataCreate(0, bytes.digest, 16);
            if (v23)
            {
              v24 = v23;
              CFDictionarySetValue(v11, kColorSyncProfileMD5Digest, v23);
              CFRelease(v24);
            }
          }
        }
        if (v10)
          CFRelease(v10);
        CFArrayAppendValue(Mutable, v11);
        CFRelease(v11);
        ++v7;
      }
      while (v7 != 15);
    }
    seed = v30;
    if (v30)
      goto LABEL_20;
  }
  else
  {
    Mutable = 0;
    if (seed)
LABEL_20:
      ++*seed;
  }
  if (Mutable)
  {
    Count = CFArrayGetCount(Mutable);
    v26 = Count - 1;
    if (Count >= 1)
    {
      v27 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v27);
        if (!((unsigned int (*)(const void *, void *))callBack)(ValueAtIndex, userInfo))
          break;
      }
      while (v26 != v27++);
    }
    CFRelease(Mutable);
  }
}

const UInt8 *ColorSyncProfileGetCICPInfo(const UInt8 *result)
{
  uint64_t v1;
  CFTypeID v2;
  int v3;
  const __CFData *Tag;
  const UInt8 *BytePtr;

  if (result)
  {
    v1 = (uint64_t)result;
    v2 = CFGetTypeID(result);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      result = *(const UInt8 **)(v1 + 240);
      if (!result)
      {
        v3 = ColorSyncProfileContainsSupportedCICP(v1, 0);
        result = 0;
        if (v3)
        {
          Tag = (const __CFData *)ColorSyncProfileGetTag(v1, CFSTR("cicp"));
          BytePtr = CFDataGetBytePtr(Tag);
          if (BytePtr)
            return BytePtr + 8;
          else
            return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ColorSyncProfileWriteToFile(const ColorSyncProfile *a1, char *a2)
{
  _BOOL8 v2;
  char *v3;
  CFDataRef v4;
  const __CFData *v5;
  FILE *v6;
  FILE *v7;
  const UInt8 *BytePtr;
  size_t Length;
  const char *v11;
  char __str[1025];
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      v4 = ColorSyncProfileCopyData(a1, 0);
      if (v4)
      {
        v5 = v4;
        bzero(__str, 0x401uLL);
        if (*v3 == 42 && v3[1] == 47)
        {
          if (ColorSyncGetTempDirPath_predicate != -1)
            dispatch_once(&ColorSyncGetTempDirPath_predicate, &__block_literal_global_533);
          v11 = v3 + 2;
          v3 = __str;
          snprintf(__str, 0x400uLL, "%s%s", &ColorSyncGetTempDirPath_tempDirPath, v11);
        }
        v6 = fopen(v3, "wb");
        if (v6)
        {
          v7 = v6;
          BytePtr = CFDataGetBytePtr(v5);
          Length = CFDataGetLength(v5);
          v2 = fwrite(BytePtr, Length, 1uLL, v7) == 1;
          fclose(v7);
        }
        else
        {
          v2 = 0;
        }
        CFRelease(v5);
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

BOOL ColorSyncVerifyGenericGrayGamma2_2Data(const __CFData *cf)
{
  return verify_GenericGrayGamma2_2(0, cf);
}

uint64_t ColorSyncVerifyAdobeRGBData(const __CFData *cf)
{
  return verify_AdobeRGB(0, cf);
}

unint64_t ColorSyncVerifySRGBData(const __CFData *cf)
{
  return verify_sRGB(0, cf);
}

BOOL ColorSyncVerifyDisplayP3Data(const __CFData *cf)
{
  return verify_DisplayP3(0, cf);
}

CFDataRef ColorSyncVerifyGenericLabData(const __CFData *cf)
{
  return verify_GenericLab(0, cf);
}

unint64_t ColorSyncVerifyCoreVideo709Data(const __CFData *cf)
{
  return verify_CoreVideo709(0, cf);
}

CFDataRef ColorSyncVerifyDisplayP3ITU709Data(const __CFData *cf)
{
  return verify_DisplayP3ITU709(0, cf);
}

BOOL ColorSyncVerifyICC_DataByName(const void *a1, const void *a2)
{
  CFTypeID v4;
  uint64_t v5;
  const void *v6;
  const __CFData *v7;
  uint64_t v8;
  int v9;
  const __CFString *v10;

  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return 0;
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_PQProfile) == 1)
  {
    if (bt2020PQProfile_predicate != -1)
      dispatch_once(&bt2020PQProfile_predicate, &__block_literal_global_383);
    v5 = bt2020PQProfile_profile;
    v6 = a2;
    v7 = 0;
LABEL_13:
    v9 = 1;
    v10 = 0;
    return verify_hdr(0, v6, v7, v5, v9, (uint64_t)v10);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_PQProfile) == 1)
  {
    if (displayP3PQ_CICP_tag_predicate != -1)
      dispatch_once(&displayP3PQ_CICP_tag_predicate, &__block_literal_global_385);
    v8 = displayP3PQ_CICP_tag_cicp;
    if (pre_cicp_DisplayP3PQProfile_predicate != -1)
      dispatch_once(&pre_cicp_DisplayP3PQProfile_predicate, &__block_literal_global_387);
    v5 = pre_cicp_DisplayP3PQProfile_profile;
    v6 = a2;
    v7 = (const __CFData *)v8;
    goto LABEL_13;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_HLGProfile) == 1)
  {
    if (bt2020HLGProfile_predicate != -1)
      dispatch_once(&bt2020HLGProfile_predicate, &__block_literal_global_389);
    v5 = bt2020HLGProfile_profile;
    v10 = CFSTR("aaOO");
    v6 = a2;
    v7 = 0;
    v9 = 2;
    return verify_hdr(0, v6, v7, v5, v9, (uint64_t)v10);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_HLGProfile) == 1)
    return verify_displayP3_HLG_data(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_PQProfile) == 1)
    return verify_BT709_PQ_data(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_HLGProfile) == 1)
    return vverify_BT709_HLG_data(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_sRGBGammaProfile) == 1)
    return verify_ITUR2020_sRGBGamma_data(a2);
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_PQProfile) == 1)
    return verify_BT2100_PQ_data(a2);
  return CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_HLGProfile) == 1 && verify_BT2100_HLG_data(a2);
}

BOOL verify_displayP3_HLG_data(CFTypeRef cf)
{
  const __CFData *v2;

  if (displayP3HLG_CICP_tag_predicate != -1)
    dispatch_once(&displayP3HLG_CICP_tag_predicate, &__block_literal_global_391);
  v2 = (const __CFData *)displayP3HLG_CICP_tag_cicp;
  if (pre_cicp_DisplayP3HLGProfile_predicate != -1)
    dispatch_once(&pre_cicp_DisplayP3HLGProfile_predicate, &__block_literal_global_393);
  return verify_hdr(0, cf, v2, pre_cicp_DisplayP3HLGProfile_profile, 2, (uint64_t)CFSTR("aaOO"));
}

BOOL verify_BT709_PQ_data(CFTypeRef cf)
{
  const __CFData *v2;

  if (bt709PQ_CICP_tag_predicate != -1)
    dispatch_once(&bt709PQ_CICP_tag_predicate, &__block_literal_global_395);
  v2 = (const __CFData *)bt709PQ_CICP_tag_cicp;
  if (pre_cicp_BT709_PQProfile_predicate != -1)
    dispatch_once(&pre_cicp_BT709_PQProfile_predicate, &__block_literal_global_397);
  return verify_hdr(0, cf, v2, pre_cicp_BT709_PQProfile_profile, 1, 0);
}

BOOL vverify_BT709_HLG_data(CFTypeRef cf)
{
  const __CFData *v2;

  if (bt709HLG_CICP_tag_predicate != -1)
    dispatch_once(&bt709HLG_CICP_tag_predicate, &__block_literal_global_399);
  v2 = (const __CFData *)bt709HLG_CICP_tag_cicp;
  if (pre_cicp_ITUR709_HLGProfile_predicate != -1)
    dispatch_once(&pre_cicp_ITUR709_HLGProfile_predicate, &__block_literal_global_401);
  return verify_hdr(0, cf, v2, pre_cicp_ITUR709_HLGProfile_profile, 1, 0);
}

BOOL verify_BT2100_PQ_data(CFTypeRef cf)
{
  const __CFData *v2;

  if (bt2100PQ_CICP_tag_predicate[0] != -1)
    dispatch_once(bt2100PQ_CICP_tag_predicate, &__block_literal_global_405);
  v2 = (const __CFData *)bt2100PQ_CICP_tag_cicp;
  if (pre_cicp_BT2100PQProfile_predicate != -1)
    dispatch_once(&pre_cicp_BT2100PQProfile_predicate, &__block_literal_global_407);
  return verify_hdr(0, cf, v2, pre_cicp_BT2100PQProfile_profile, 1, 0);
}

BOOL verify_BT2100_HLG_data(CFTypeRef cf)
{
  const __CFData *v2;

  if (bt2100HLG_CICP_tag_predicate != -1)
    dispatch_once(&bt2100HLG_CICP_tag_predicate, &__block_literal_global_409);
  v2 = (const __CFData *)bt2100HLG_CICP_tag_cicp;
  if (pre_cicp_BT2100HLGProfile_predicate != -1)
    dispatch_once(&pre_cicp_BT2100HLGProfile_predicate, &__block_literal_global_411);
  return verify_hdr(0, cf, v2, pre_cicp_BT2100HLGProfile_profile, 2, (uint64_t)CFSTR("aaOO"));
}

BOOL tags_are_equal(const __CFData *a1, const __CFData *a2)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  const UInt8 *v6;
  size_t v7;
  _BOOL8 result;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v6 = CFDataGetBytePtr(a2);
  v7 = CFDataGetLength(a2);
  result = 0;
  if (Length >= v7 && BytePtr)
  {
    if (v6)
      return memcmp(v6, BytePtr, v7) == 0;
  }
  return result;
}

const ColorSyncProfile *ColorSyncDataCanBeIgnoredOnSRGBDevice(const void *a1)
{
  const ColorSyncProfile *result;
  const ColorSyncProfile *v2;
  _BOOL8 v3;

  result = (const ColorSyncProfile *)create(a1, 0, 0);
  if (result)
  {
    v2 = result;
    v3 = ColorSyncProfileContainsTag(result, CFSTR("aapy"));
    CFRelease(v2);
    return (const ColorSyncProfile *)v3;
  }
  return result;
}

double ColorSyncProfileGetWhitePoint(const void *a1)
{
  unint64_t XYZColor;
  double v3;
  double v4;
  int v5;
  double v6;
  CFTypeID v7;
  const __CFData *v8;
  const __CFData *v9;
  const UInt8 *BytePtr;
  unsigned int v11;
  const __CFData *Tag;
  const __CFData *v13;
  const UInt8 *v14;
  int8x8_t *v15;
  int8x8_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x8_t v20;
  float64x2_t v21;
  int8x8_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  XYZColor = ColorSyncProfileGetXYZColor(a1, CFSTR("wtpt"));
  v3 = (double)(int)XYZColor * 0.0000152587891;
  v4 = (double)SHIDWORD(XYZColor) * 0.0000152587891;
  v6 = (double)v5 * 0.0000152587891;
  if (a1)
  {
    v7 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
    if (v7 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      v8 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)a1);
      if (v8)
      {
        v9 = v8;
        BytePtr = CFDataGetBytePtr(v8);
        if (BytePtr && *((_DWORD *)BytePtr + 9) == 1633907568)
        {
          v11 = *((_DWORD *)BytePtr + 2);
          CFRelease(v9);
          if (v11 >> 26)
          {
            Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, CFSTR("chad"));
            if (Tag)
            {
              v13 = Tag;
              v14 = CFDataGetBytePtr(Tag);
              if (v14)
              {
                v15 = (int8x8_t *)v14;
                if (CFDataGetLength(v13) >= 1 && (unint64_t)CFDataGetLength(v13) >= 0x2C)
                {
                  v16 = vrev32_s8(v15[1]);
                  v17.i64[0] = v16.i32[0];
                  v17.i64[1] = v16.i32[1];
                  v18 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
                  v19 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  v20 = vrev32_s8(v15[2]);
                  v17.i64[0] = v20.i32[0];
                  v17.i64[1] = v20.i32[1];
                  v24 = v19;
                  v25 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  *(int8x8_t *)&v19.f64[0] = vrev32_s8(v15[3]);
                  v17.i64[0] = SLODWORD(v19.f64[0]);
                  v17.i64[1] = SHIDWORD(v19.f64[0]);
                  v21 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  v22 = vrev32_s8(v15[4]);
                  v17.i64[0] = v22.i32[0];
                  v17.i64[1] = v22.i32[1];
                  v26 = v21;
                  v27 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  v28 = (double)(int)bswap32(v15[5].u32[0]) * 0.0000152587891;
                  if (InvertMatrix(v24.f64))
                    return v4 * v24.f64[1] + v3 * v24.f64[0] + v6 * v25.f64[0];
                }
              }
            }
          }
        }
        else
        {
          CFRelease(v9);
        }
      }
    }
  }
  return v3;
}

float *ColorSyncProfileGetLuminanceCoefficients(float *a1)
{
  CFTypeID v2;
  float *v3;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  v3 = a1 + 38;
  if (a1[38] == 0.0)
  {
    add_basic_formulas((uint64_t)a1);
    if (a1[38] == 0.0)
      return 0;
  }
  return v3;
}

void add_basic_formulas(uint64_t a1)
{
  const __CFData *v2;
  const __CFData *v3;
  const UInt8 *BytePtr;
  const __CFData *Tag;
  const __CFData *v6;
  const __CFData *v7;
  const __CFData *v8;
  const __CFData *v9;
  const UInt8 *v10;
  int8x8_t *v11;
  int8x8_t *v12;
  const UInt8 *v13;
  int8x8_t *v14;
  double WhitePoint;
  float64_t v16;
  double v17;
  double v18;
  double v19;
  int8x8_t v20;
  int64x2_t v21;
  float64x2_t v22;
  int8x8_t v23;
  int v24;
  int8x8_t v25;
  int v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float v37;
  float v38;
  float v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;
  float v46;
  float v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float v62;
  float v63;
  float v64;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  double v78;
  const __CFData *v79;
  const __CFData *v80;
  const __CFData *v81;
  float64x2_t v82[4];
  uint64_t v83;
  double v84[9];
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94[10];

  v94[9] = *(double *)MEMORY[0x1E0C80C00];
  v2 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)a1);
  if (v2)
  {
    v3 = v2;
    BytePtr = CFDataGetBytePtr(v2);
    if (!BytePtr || *((_DWORD *)BytePtr + 4) != 1380401696)
      goto LABEL_41;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
    if (*(float *)(a1 + 152) == 0.0 || *(float *)(a1 + 168) == 0.0 || *(float *)(a1 + 204) == 0.0)
    {
      Tag = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("wtpt"));
      v6 = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("rXYZ"));
      v81 = v6;
      v7 = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("gXYZ"));
      v80 = v7;
      v8 = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("bXYZ"));
      v79 = v8;
      if (v6)
      {
        if (v7)
        {
          v9 = v8;
          if (v8)
          {
LABEL_12:
            v10 = verified_icXYZType_data_ptr(Tag);
            v11 = (int8x8_t *)verified_icXYZType_data_ptr(v6);
            v12 = (int8x8_t *)verified_icXYZType_data_ptr(v7);
            v13 = verified_icXYZType_data_ptr(v9);
            if (v10)
            {
              if (v11)
              {
                if (v12)
                {
                  v14 = (int8x8_t *)v13;
                  if (v13)
                  {
                    WhitePoint = ColorSyncProfileGetWhitePoint((const void *)a1);
                    v17 = v16;
                    v19 = v18;
                    v77.f64[0] = WhitePoint;
                    v77.f64[1] = v16;
                    v20 = vrev32_s8(v11[1]);
                    v21.i64[0] = v20.i32[0];
                    v21.i64[1] = v20.i32[1];
                    v22 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
                    v75 = vmulq_f64(vcvtq_f64_s64(v21), v22);
                    v76 = (double)(int)bswap32(v11[2].u32[0]) * 0.0000152587891;
                    v23 = vrev32_s8(v12[1]);
                    v21.i64[0] = v23.i32[0];
                    v21.i64[1] = v23.i32[1];
                    v73 = vmulq_f64(vcvtq_f64_s64(v21), v22);
                    v24 = bswap32(v12[2].u32[0]);
                    v78 = v18;
                    v74 = (double)v24 * 0.0000152587891;
                    v25 = vrev32_s8(v14[1]);
                    v21.i64[0] = v25.i32[0];
                    v21.i64[1] = v25.i32[1];
                    v26 = bswap32(v14[2].u32[0]);
                    v71 = vmulq_f64(vcvtq_f64_s64(v21), v22);
                    v72 = (double)v26 * 0.0000152587891;
                    v69 = 0uLL;
                    v70 = 0.0;
                    v67 = 0uLL;
                    v68 = 0.0;
                    v65 = 0uLL;
                    v66 = 0.0;
                    ColorSyncConvertDoubleXYZFromD50(&v75, &v77, &v69, 3, 0);
                    ColorSyncConvertDoubleXYZFromD50(&v73, &v77, &v67, 3, 0);
                    ColorSyncConvertDoubleXYZFromD50(&v71, &v77, &v65, 3, 0);
                    v27 = v69.f64[0] + v69.f64[1] + v70;
                    v28 = v67.f64[0] + v67.f64[1] + v68;
                    v29 = v65.f64[0] + v65.f64[1] + v66;
                    v94[0] = v69.f64[0] / v27;
                    v94[1] = v67.f64[0] / v28;
                    v94[2] = v65.f64[0] / v29;
                    v94[3] = v69.f64[1] / v27;
                    v94[4] = v67.f64[1] / v28;
                    v94[5] = v65.f64[1] / v29;
                    v94[6] = v70 / v27;
                    v94[7] = v68 / v28;
                    v94[8] = v66 / v29;
                    v85 = v69.f64[0] / v27;
                    v86 = v67.f64[0] / v28;
                    v87 = v65.f64[0] / v29;
                    v88 = v69.f64[1] / v27;
                    v89 = v67.f64[1] / v28;
                    v90 = v65.f64[1] / v29;
                    v91 = v70 / v27;
                    v92 = v68 / v28;
                    v93 = v66 / v29;
                    if (InvertMatrix(&v85))
                    {
                      v30 = WhitePoint + v17 + v19;
                      v31 = v19 / v30;
                      v32 = v17 / v30;
                      v33 = WhitePoint / v30 / (v17 / v30);
                      v34 = v31 / v32;
                      v84[0] = v86 + v33 * v85 + v34 * v87;
                      memset(&v84[1], 0, 24);
                      v84[4] = v89 + v33 * v88 + v34 * v90;
                      memset(&v84[5], 0, 24);
                      v84[8] = v92 + v33 * v91 + v34 * v93;
                      v83 = 0;
                      memset(v82, 0, sizeof(v82));
                      MatrixMatrix(v84, v94, v82[0].f64);
                      v35 = v82[2].f64[1];
                      v36 = *(float64x2_t *)((char *)&v82[1] + 8);
                      v37 = v82[1].f64[1];
                      if (v37 <= 0.2626
                        || v37 >= 0.2628
                        || (v38 = v82[2].f64[0], v38 <= 0.6779)
                        || v38 >= 0.6781
                        || (v39 = v82[2].f64[1], v39 <= 0.0592)
                        || v39 >= 0.0594)
                      {
                        if (v37 <= 0.2289
                          || v37 >= 0.2291
                          || (v46 = v82[2].f64[0], v46 <= 0.6916)
                          || v46 >= 0.6918
                          || (v47 = v82[2].f64[1], v47 <= 0.0792)
                          || v47 >= 0.0794)
                        {
                          v48 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
                          v49 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v82[1] + 8), v48)), v48);
                          v50 = round(v82[2].f64[1] * 10000.0) / 10000.0;
                          v44 = vcvt_f32_f64(v49);
                          v45 = v50;
                          __asm { FMOV            V5.2D, #-0.5 }
                          v56 = vmulq_f64(v49, _Q5);
                          *(_QWORD *)&v57.f64[0] = vdupq_laneq_s64((int64x2_t)v56, 1).u64[0];
                          v57.f64[1] = v50 * -0.5;
                          v58 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49.f64[0], 0);
                          v58.f64[0] = v50;
                          __asm { FMOV            V3.2D, #1.0 }
                          v60 = vsubq_f64(_Q3, v58);
                          v43 = vcvt_f32_f64(vdivq_f64(v56, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60.f64[0], 0)));
                          v42 = vcvt_f32_f64(vdivq_f64(v57, (float64x2_t)vdupq_laneq_s64((int64x2_t)v60, 1)));
                          __asm { FMOV            V3.2D, #-2.0 }
                          v41 = vcvt_f32_f64(vdivq_f64(vmulq_f64(v58, vmulq_f64(v60, _Q3)), (float64x2_t)vdupq_laneq_s64((int64x2_t)v49, 1)));
                          v40 = vcvt_f32_f64(vaddq_f64(v60, v60));
                          if (v37 > 0.2125 && v37 < 0.2127)
                          {
                            v62 = v82[2].f64[0];
                            if (v62 > 0.7151 && v62 < 0.7153)
                            {
                              v63 = v82[2].f64[1];
                              if (v63 > 0.0721 && v63 < 0.0723)
                              {
                                v40 = (float32x2_t)0x3FC98FC53FED844DLL;
                                v36 = (float64x2_t)xmmword_18B3EA880;
                                v41 = (float32x2_t)0xBEEFB7E9BE3FCB92;
                                v42 = (float32x2_t)0xBD3B98C8BEE88CE7;
                                v43 = (float32x2_t)0xBEC55326BDEAB368;
                                v44 = (float32x2_t)0x3F3717593E59B3D0;
                                v45 = 0.0722;
                                v35 = 0.0722000003;
                              }
                            }
                          }
                        }
                        else
                        {
                          v40 = (float32x2_t)0x3FC563883FEBB2FFLL;
                          v36 = (float64x2_t)xmmword_18B3EA870;
                          v41 = (float32x2_t)0xBF02A993BE582A99;
                          v42 = (float32x2_t)0xBD52934BBEE5AEE6;
                          v43 = (float32x2_t)0xBEC05BC0BDFE9100;
                          v44 = (float32x2_t)0x3F3113403E6A7EFALL;
                          v45 = 0.0793;
                          v35 = 0.0793000013;
                        }
                      }
                      else
                      {
                        v40 = (float32x2_t)0x3FBCBFB13FF0D1B7;
                        v36 = (float64x2_t)xmmword_18B3EA860;
                        v41 = (float32x2_t)0xBF124745BE288CE7;
                        v42 = (float32x2_t)0xBD24A8C1BEEB6AE8;
                        v43 = (float32x2_t)0xBEB88659BE0EF34DLL;
                        v44 = (float32x2_t)0x3F2D91683E86809DLL;
                        v45 = 0.0593;
                        v35 = 0.0593000017;
                      }
                      *(float32x2_t *)(a1 + 152) = vcvt_f32_f64(v36);
                      v64 = v35;
                      *(float *)(a1 + 160) = v64;
                      *(float32x2_t *)(a1 + 168) = v44;
                      *(float *)(a1 + 176) = v45;
                      *(float32x2_t *)(a1 + 180) = v43;
                      *(_QWORD *)(a1 + 188) = 0x3F0000003F000000;
                      *(float32x2_t *)(a1 + 196) = v42;
                      *(_QWORD *)(a1 + 204) = 1065353216;
                      *(_DWORD *)(a1 + 212) = v40.i32[1];
                      *(_DWORD *)(a1 + 216) = 1065353216;
                      *(float32x2_t *)(a1 + 220) = v41;
                      *(_DWORD *)(a1 + 228) = 1065353216;
                      *(_DWORD *)(a1 + 232) = v40.i32[0];
                      *(_DWORD *)(a1 + 236) = 0;
                    }
                  }
                }
              }
            }
            goto LABEL_40;
          }
        }
      }
      if (get_primaries_data_from_cicp(a1, &v81, &v80, (uint64_t *)&v79))
      {
        v7 = v80;
        v6 = v81;
        v9 = v79;
        goto LABEL_12;
      }
    }
LABEL_40:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
LABEL_41:
    CFRelease(v3);
  }
}

float *ColorSyncProfileGetRGBtoYCCMatrix(float *a1)
{
  CFTypeID v2;
  float *v3;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  v3 = a1 + 42;
  if (a1[42] == 0.0)
  {
    add_basic_formulas((uint64_t)a1);
    if (a1[42] == 0.0)
      return 0;
  }
  return v3;
}

float *ColorSyncProfileGetYCCtoRGBMatrix(float *a1)
{
  CFTypeID v2;
  float *v3;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  v3 = a1 + 51;
  if (a1[51] == 0.0)
  {
    add_basic_formulas((uint64_t)a1);
    if (a1[51] == 0.0)
      return 0;
  }
  return v3;
}

ColorSyncProfile *ColorSyncProfileCreateCopyWithFlexGTC(const ColorSyncProfile *a1, CFErrorRef *a2, CFErrorRef *a3)
{
  CFIndex Count;
  const void **v6;
  const void **v7;
  CFArrayRef v8;
  uint64_t i;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  CFDictionaryRef v13;
  ColorSyncProfile *Profile;
  void *values[7];

  values[6] = *(void **)MEMORY[0x1E0C80C00];
  if (!ColorSyncProfileVerify(a1, a2, a3) || !ColorSyncProfileIsPQBased(a1))
    return 0;
  Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  v6 = (const void **)malloc_type_calloc(1uLL, 16 * (Count + 3), 0x168882EDuLL);
  v7 = &v6[Count + 3];
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v6, v7);
  values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &ColorSyncProfileCreateCopyWithFlexGTC_iccDate);
  values[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B3EAD96);
  values[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B3EAD98);
  values[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B3EAD9A);
  values[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B3EAD9C);
  values[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B3EAD9E);
  v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 6, MEMORY[0x1E0C9B378]);
  for (i = 0; i != 6; ++i)
  {
    v10 = values[i];
    if (v10)
      CFRelease(v10);
  }
  v6[Count] = CFSTR("profileType");
  v11 = 8 * Count + 8;
  *(const void **)((char *)v6 + v11) = CFSTR("profileToCopy");
  v12 = 8 * Count + 16;
  *(const void **)((char *)v6 + v12) = CFSTR("Date");
  v7[Count] = CFSTR("copyWithGTC");
  *(const void **)((char *)v7 + v11) = a1;
  *(const void **)((char *)v7 + v12) = v8;
  v13 = CFDictionaryCreate(0, v6, v7, Count + 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(v8);
  free(v6);
  Profile = ColorSyncMakeProfile(v13);
  CFRelease(v13);
  return Profile;
}

const __CFData *ColorSyncProfileCopyFlexGTCInfo(uint64_t a1)
{
  CFTypeID v2;
  const __CFData *Tag;
  const __CFData *v4;
  CFTypeID v5;
  const void *v6;
  unint64_t Length;
  unint64_t v9;
  const UInt8 *BytePtr;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unint64_t v36;
  char *v37;
  unsigned int v38;
  CFIndex v39;
  __CFArray *Mutable;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  CFDictionaryRef v44;
  uint64_t i;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  CFIndex v49;
  CFNumberRef v50;
  uint64_t j;
  const void *v52;
  char v53;
  CFDictionaryRef v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int valuePtr;
  void *values;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  void *keys;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncProfileGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_475);
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    return 0;
  Tag = (const __CFData *)ColorSyncProfileGetTag(a1, CFSTR("hdgm"));
  v4 = Tag;
  if (Tag)
  {
    v5 = CFGetTypeID(Tag);
    if (v5 == CFDataGetTypeID())
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
      v6 = *(const void **)(a1 + 248);
      if (v6)
      {
        v4 = (const __CFData *)CFRetain(v6);
      }
      else
      {
        Length = CFDataGetLength(v4);
        if (Length >= 0x62)
        {
          v9 = Length;
          BytePtr = CFDataGetBytePtr(v4);
          if (BytePtr)
          {
            if (*(_DWORD *)BytePtr == 1885433191
              && !*((_DWORD *)BytePtr + 2)
              && v9 >= bswap32(*((_DWORD *)BytePtr + 3)))
            {
              v17 = *((_DWORD *)BytePtr + 4);
              if (v17)
              {
                v4 = 0;
                v18 = bswap32(v17);
                if (v18 < 0x59 || v9 - 4 < v18)
                  goto LABEL_17;
              }
              v19 = *((_DWORD *)BytePtr + 5);
              v20 = bswap32(v19);
              if (v19)
              {
                v4 = 0;
                if (v20 < 0x59 || v9 - 44 < v20)
                  goto LABEL_17;
              }
              v21 = *((_DWORD *)BytePtr + 6);
              if (v21)
              {
                v4 = 0;
                v22 = bswap32(v21);
                if (v22 < 0x59 || v9 - 44 < v22)
                  goto LABEL_17;
              }
              v23 = *((_DWORD *)BytePtr + 7);
              if (v23)
              {
                v4 = 0;
                v24 = bswap32(v23);
                if (v24 < 0x59 || v9 - 44 < v24)
                  goto LABEL_17;
              }
              v25 = *((_DWORD *)BytePtr + 8);
              if (v25)
              {
                v4 = 0;
                v26 = bswap32(v25);
                if (v26 < 0x59 || v9 - 4 < v26)
                  goto LABEL_17;
              }
              v28 = *((_DWORD *)BytePtr + 9);
              v27 = *((_DWORD *)BytePtr + 10);
              v29 = bswap32(v28);
              if (v28)
              {
                v4 = 0;
                if (v29 < 0x59 || v9 - bswap32(v27) < v29)
                  goto LABEL_17;
              }
              v30 = *((_DWORD *)BytePtr + 11);
              v31 = *((_DWORD *)BytePtr + 12);
              if (v30)
              {
                v4 = 0;
                v32 = bswap32(v30);
                if (v32 < 0x59 || v9 - bswap32(v31) < v32)
                  goto LABEL_17;
              }
              v33 = *((_DWORD *)BytePtr + 13);
              v34 = *((_DWORD *)BytePtr + 14);
              v35 = (unsigned int *)BytePtr;
              if (v33)
              {
                v4 = 0;
                v36 = bswap32(v33);
                if (v36 < 0x59)
                  goto LABEL_17;
                v11 = v9 - bswap32(v34);
                if (v11 < v36)
                  goto LABEL_17;
              }
              if (v27 == v31 && v19 == v21 && v21 == v23 && v28 == v30 && v30 == v33 && v27 == v34)
              {
                if (v28
                  && 12 * (unint64_t)bswap32(*(unsigned int *)((char *)v35 + v29 + 4)) + 8 <= bswap32(v27))
                {
                  v54 = craete_gain_map_info((uint64_t)v35 + v20);
                  v37 = (char *)v35 + bswap32(v35[9]);
                  v38 = *((_DWORD *)v37 + 1);
                  v39 = bswap32(v38);
                  Mutable = CFArrayCreateMutable(0, v39, MEMORY[0x1E0C9B378]);
                  if (v38)
                  {
                    v41 = 0;
                    do
                    {
                      v42 = v41;
                      v43 = (unsigned int *)&v37[12 * v41 + 8];
                      valuePtr = bswap32(*v43);
                      v56 = bswap32(v43[1]);
                      v55 = bswap32(v43[2]);
                      keys = (void *)kColorSyncFlexGTCNodeX;
                      v63 = kColorSyncFlexGTCNodeY;
                      v64 = kColorSyncFlexGTCNodeSlope;
                      values = 0;
                      v59 = 0;
                      v60 = 0;
                      values = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
                      v59 = CFNumberCreate(0, kCFNumberFloat32Type, &v56);
                      v60 = CFNumberCreate(0, kCFNumberFloat32Type, &v55);
                      v44 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      for (i = 0; i != 24; i += 8)
                        CFRelease(*(void **)((char *)&values + i));
                      CFArrayAppendValue(Mutable, v44);
                      CFRelease(v44);
                      v41 = v42 + 1;
                    }
                    while (v42 + 1 != v39);
                  }
                  v46 = bswap32(*(unsigned int *)((char *)v35 + bswap32(v35[4])));
                  v47 = v35[8];
                  if (v47)
                    v48 = bswap32(*(unsigned int *)((char *)v35 + bswap32(v47)));
                  else
                    v48 = 0;
                  keys = (void *)kColorSyncMonoGainMapParams;
                  v63 = kColorSyncMonoFlexGTCNodeTable;
                  v64 = kColorSyncPreGainMapCICP;
                  v65 = kColorSyncPostGainMapCICP;
                  values = v54;
                  v59 = Mutable;
                  valuePtr = v46;
                  v49 = 3;
                  v60 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  if (v48)
                  {
                    valuePtr = v48;
                    v50 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                    v49 = 4;
                  }
                  else
                  {
                    v50 = 0;
                  }
                  v61 = v50;
                  v4 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, v49, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  for (j = 0; j != 32; j += 8)
                  {
                    v52 = *(void **)((char *)&values + j);
                    if (v52)
                      CFRelease(v52);
                  }
                  if (v4)
                    *(_QWORD *)(a1 + 248) = CFRetain(v4);
                  goto LABEL_17;
                }
              }
              else
              {
                ColorSyncLog(2, (uint64_t)"Not able to use gmap tag", v11, v12, v13, v14, v15, v16, v53);
              }
            }
          }
        }
        v4 = 0;
      }
LABEL_17:
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
      return v4;
    }
    return 0;
  }
  return v4;
}

CFDictionaryRef craete_gain_map_info(uint64_t a1)
{
  CFDictionaryRef v2;
  uint64_t i;
  unsigned int valuePtr;
  void *values[8];
  void *keys[9];

  keys[8] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = (void *)kColorSyncGUID;
  keys[1] = (void *)kColorSyncGainMapMin;
  keys[2] = (void *)kColorSyncGainMapMax;
  keys[3] = (void *)kColorSyncGainMapGamma;
  keys[4] = (void *)kColorSyncGainMapBaselineConst;
  keys[5] = (void *)kColorSyncGainMapAlternateConst;
  keys[6] = (void *)kColorSyncGainMapBaselineHeadroom;
  keys[7] = (void *)kColorSyncGainMapAlternateHeadroom;
  values[0] = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)a1);
  valuePtr = bswap32(*(_DWORD *)(a1 + 16));
  values[1] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  valuePtr = bswap32(*(_DWORD *)(a1 + 20));
  values[2] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  valuePtr = bswap32(*(_DWORD *)(a1 + 24));
  values[3] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  valuePtr = bswap32(*(_DWORD *)(a1 + 28));
  values[4] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  valuePtr = bswap32(*(_DWORD *)(a1 + 32));
  values[5] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  valuePtr = bswap32(*(_DWORD *)(a1 + 36));
  values[6] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  valuePtr = bswap32(*(_DWORD *)(a1 + 40));
  values[7] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 8; ++i)
    CFRelease(values[i]);
  return v2;
}

double ColorSyncConvertDoubleXYZFromD50(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, int a4, double *a5)
{
  float64_t v8;
  __int128 v9;
  __int128 v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = xmmword_18B3EA890;
  v19 = 0x3FEA6594AF4F0D84;
  v8 = a1[1].f64[0];
  *a3 = *a1;
  a3[1].f64[0] = v8;
  v24 = 0.0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  if (!a5
    || (v9 = *((_OWORD *)a5 + 1),
        v20 = *(_OWORD *)a5,
        v21 = v9,
        v10 = *((_OWORD *)a5 + 3),
        v22 = *((_OWORD *)a5 + 2),
        v23 = v10,
        v24 = a5[8],
        !InvertMatrix((double *)&v20)))
  {
    ColorSyncGetAdaptationMtx(a4, (double *)&v20, (float64x2_t *)&v18, a2);
  }
  v11 = *a3;
  v12 = a3[1].f64[0];
  v13 = a3->f64[1];
  v14 = vmlad_n_f64(vmuld_lane_f64(*(double *)&v22, *a3, 1), *((double *)&v21 + 1), a3->f64[0])
      + v12 * *((double *)&v22 + 1);
  v15 = 0.0;
  if (v14 < 0.0 || (v15 = 1.0, v14 > 1.0))
    v14 = v15;
  v16 = v13 * *((double *)&v23 + 1) + v11.f64[0] * *(double *)&v23 + v12 * v24;
  result = v13 * *((double *)&v20 + 1) + v11.f64[0] * *(double *)&v20 + v12 * *(double *)&v21;
  a3->f64[0] = result;
  a3->f64[1] = v14;
  a3[1].f64[0] = v16;
  return result;
}

float64x2_t *ColorSyncConvertXYZToXYZWithChromaticAdaptationMatrix(float64x2_t *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;

  v3 = result[1].f64[0];
  v4 = vmlad_n_f64(vmuld_lane_f64(a3[1], *result, 1), *a3, result->f64[0]) + v3 * a3[2];
  v5 = vmlad_n_f64(vmuld_lane_f64(a3[4], *result, 1), a3[3], result->f64[0]) + v3 * a3[5];
  v6 = vmlad_n_f64(vmuld_lane_f64(a3[7], *result, 1), a3[6], result->f64[0]);
  *(double *)&v7 = 0.0;
  if (v4 < 0.0 || (*(double *)&v7 = 1.99996948, v4 > 1.99996948))
    v4 = *(double *)&v7;
  v8 = v6 + v3 * a3[8];
  v9 = 0.0;
  if (v5 < 0.0 || (v9 = 1.0, v5 > 1.0))
    v5 = v9;
  *(double *)&v10 = 0.0;
  if (v8 < 0.0 || (*(double *)&v10 = 1.99996948, v8 > 1.99996948))
    v8 = *(double *)&v10;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v8;
  return result;
}

void CMMFloatBitNChanEncoder::DoEncode()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

_QWORD *CMMFloatBitNChanEncoder::DoEncode(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _DWORD *exception;

  v5 = 0;
  result[18] = result[21] + result[16] * result[22];
  do
  {
    v6 = result[20];
    if (!v6)
      break;
    v7 = result[19];
    v8 = result[22];
    v9 = v7 - v8;
    if (v7 - v8 >= result[1] - *a4)
      v9 = result[1] - *a4;
    if (v9)
    {
      v10 = result[3];
      v11 = v9;
      while (1)
      {
        if (v5 >= v10)
          goto LABEL_40;
        --v11;
        v12 = result[2];
        v13 = (uint64_t *)result[13];
        v14 = *v13;
        if (*v13)
          break;
        if (!v5)
        {
          v17 = result[18];
          goto LABEL_28;
        }
LABEL_25:
        if (v5 < v12)
          goto LABEL_40;
        *(float *)(a2 + 4 * v5 - 4) = *(float *)(a2 + 4 * v5 - 4) + 1.0;
        result[18] += result[16];
LABEL_29:
        if (!v11)
          goto LABEL_32;
      }
      v15 = 0;
      v16 = v5 - v12;
      v17 = result[18];
      v18 = result[14];
      v19 = v5;
      do
      {
        if (v18)
        {
          v20 = (int *)(v13[v15 + 1] + 4 * v17);
          v21 = v18;
          do
          {
            v22 = *v20++;
            v23 = v19 + 1;
            *(_DWORD *)(a2 + 4 * v19++) = v22;
            --v21;
          }
          while (v21);
        }
        else
        {
          v23 = v19;
        }
        ++v15;
        v19 = v23;
      }
      while (v15 != v14);
      if (v5)
      {
        v24 = 0;
        v25 = (float *)(a2 + 4 * v5);
        v26 = v5;
        while (!v18)
        {
LABEL_22:
          ++v24;
          v25 += v18;
          if (v24 == v14)
            goto LABEL_25;
        }
        v26 += v18;
        v16 += v18;
        v27 = v18;
        v28 = v25;
        while (v28[-v12] == *v28)
        {
          ++v28;
          if (!--v27)
            goto LABEL_22;
        }
      }
LABEL_28:
      v5 += v12;
      *(_DWORD *)(a2 + 4 * v5 - 4) = 1065353216;
      result[18] = v17 + result[16];
      if (v5 >= v10)
        goto LABEL_32;
      goto LABEL_29;
    }
    v11 = 0;
LABEL_32:
    v29 = v9 - v11;
    v30 = v29 + v8;
    if (v30 == v7)
    {
      v30 = 0;
      v31 = result[21] + result[17];
      result[18] = v31;
      result[20] = v6 - 1;
      result[21] = v31;
    }
    else if (v30 >= v7)
    {
      goto LABEL_40;
    }
    result[22] = v30;
    v32 = *a4 + v29;
    *a4 = v32;
    v33 = result[3];
    if (v5 <= v33)
    {
      v34 = result[1];
      if (v32 <= v34)
        continue;
    }
LABEL_40:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  while (v5 != v33 && v32 != v34);
  *a5 = v5 / result[2];
  return result;
}

BOOL CMMFloatBitNChanEncoder::IsInPlace(uint64_t a1, uint64_t a2)
{
  return CMMDataBaseClass::IsSameData(*(_QWORD *)(a1 + 48), a2);
}

BOOL CMMDataBaseClass::IsSameData(uint64_t a1, uint64_t a2)
{
  _DWORD *exception;

  if (!a1 || !*(_QWORD *)a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 8);
}

void CMMFloatBitNChanDecoder::DoDecode()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

_QWORD *CMMFloatBitNChanDecoder::DoDecode(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *exception;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = result[1];
  v9 = v8 * a4;
  v10 = result[14];
  v11 = result[19];
  v12 = result[20];
  v13 = result[18];
  v14 = v11 + v12 * v10;
  result[16] = v14;
  do
  {
    if (!v13)
      break;
    v15 = result[17];
    if (v15 == v12)
    {
      v16 = 0;
    }
    else
    {
      v16 = v15 - v12;
      while (1)
      {
        if (v4 >= 0xC00 / v8 * v8)
          goto LABEL_37;
        v17 = (uint64_t *)result[11];
        v18 = *v17;
        if (v7)
        {
          if (v18)
          {
            v19 = 0;
            v20 = result[12];
            do
            {
              if (v20)
              {
                v21 = v17[v19 + 1];
                v22 = (_DWORD *)(v21 + 4 * v14);
                v23 = (int *)(v21 + 4 * v5);
                v24 = v20;
                do
                {
                  v25 = *v23++;
                  *v22++ = v25;
                  --v24;
                }
                while (v24);
              }
              ++v19;
            }
            while (v19 != v18);
          }
        }
        else
        {
          if (v18)
          {
            v26 = 0;
            v27 = result[12];
            v28 = v4;
            do
            {
              if (v27)
              {
                v29 = (_DWORD *)(v17[v26 + 1] + 4 * v14);
                v30 = v27;
                do
                {
                  v31 = v28 + 1;
                  *v29++ = *(_DWORD *)(a2 + 4 * v28++);
                  --v30;
                }
                while (v30);
              }
              else
              {
                v31 = v28;
              }
              ++v26;
              v28 = v31;
            }
            while (v26 != v18);
          }
          LODWORD(v6) = (int)*(float *)(a2 + 4 * (v8 - 1 + v4));
          if (!(_DWORD)v6)
            goto LABEL_37;
          v6 = (int)v6;
          v5 = v14;
        }
        if (!v6)
          goto LABEL_37;
        --v16;
        v14 += v10;
        v7 = --v6 != 0;
        if (!v6)
        {
          v4 += v8;
          if (v4 == v9)
            break;
        }
        if (!v16)
          goto LABEL_31;
      }
      v6 = 0;
      v7 = 0;
      v4 = v9;
    }
LABEL_31:
    v12 = v15 - v16;
    if (v15 - v16 == v15)
    {
      v12 = 0;
      v11 += result[15];
      result[18] = --v13;
      result[19] = v11;
      v14 = v11;
    }
    else if (v12 >= v15)
    {
      goto LABEL_37;
    }
    result[20] = v12;
    if (v4 > v9)
    {
LABEL_37:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
  }
  while (v4 != v9);
  result[16] = v14;
  return result;
}

uint64_t CMMAlphaCopier::Copy(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t j;
  char v23;
  unint64_t i;
  unint64_t m;
  unsigned int v26;
  unint64_t k;
  _DWORD *exception;

  while (a2)
  {
    v3 = *(_QWORD *)(this + 24);
    v2 = *(_QWORD *)(this + 32);
    v5 = *(_QWORD *)(this + 88);
    v4 = *(_QWORD *)(this + 96);
    v7 = *(_QWORD *)(this + 40);
    v6 = *(_QWORD *)(this + 48);
    v8 = *(unsigned __int8 *)(this + 120);
    if (*(_BYTE *)(this + 120))
    {
      v9 = *(_QWORD *)(this + 80);
      v10 = v9 - v4;
      if (v9 - v4 >= a2)
        v10 = a2;
    }
    else
    {
      v11 = *(_QWORD *)(this + 72);
      v9 = *(_QWORD *)(this + 80);
      v10 = v11 - v5;
      if (v11 - v5 >= v9 - v4)
        v10 = v9 - v4;
      if (v10 >= a2)
        v10 = a2;
      v12 = v10 + v5;
      *(_QWORD *)(this + 88) = (v10 + v5) % v11;
      if ((v10 + v5) / v11 != 1 && v11 <= v12)
      {
LABEL_56:
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      if (v11 <= v12)
        *(_QWORD *)(this + 24) = v3 + *(_QWORD *)(this + 56);
    }
    *(_QWORD *)(this + 96) = (v10 + v4) % v9;
    if (v9 <= v10 + v4 && (v10 + v4) / v9 != 1)
      goto LABEL_56;
    if (v9 <= v10 + v4)
      *(_QWORD *)(this + 32) = v2 + *(_QWORD *)(this + 64);
    v14 = (_BYTE *)(v2 + v6 * v4);
    if (v8)
    {
      if (*(_QWORD *)(this + 112) == 1)
      {
        if (v10)
        {
          v15 = v10;
          do
          {
            *v14 = -1;
            v14 += *(_QWORD *)(this + 48);
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        for (i = v10; i; --i)
        {
          *(_WORD *)v14 = -1;
          v14 += v6;
        }
      }
    }
    else
    {
      v16 = (char *)(v3 + v7 * v5);
      v17 = *(_QWORD *)(this + 104);
      v18 = *(_QWORD *)(this + 112);
      if (v17 == v18)
      {
        if (v10)
        {
          v19 = v7 - v17;
          v20 = v6 - v17;
          v21 = v10;
          do
          {
            for (j = *(_QWORD *)(this + 112); j; --j)
            {
              v23 = *v16++;
              *v14++ = v23;
            }
            v16 += v19;
            v14 += v20;
            --v21;
          }
          while (v21);
        }
      }
      else if (v17 <= v18)
      {
        if (v17 != 1 || v18 != 2)
          goto LABEL_56;
        for (k = v10; k; --k)
        {
          *(_WORD *)v14 = *v16 | (*v16 << 8);
          v16 += v7;
          v14 += v6;
        }
      }
      else
      {
        if (v17 != 2 || v18 != 1)
          goto LABEL_56;
        for (m = v10; m; --m)
        {
          if (*(_WORD *)v16)
          {
            v26 = *(unsigned __int16 *)v16 / 0x101u;
            if (v26 - 1 > v26 || v26 + 1 < v26)
              goto LABEL_56;
          }
          else
          {
            LOBYTE(v26) = 0;
          }
          *v14 = v26;
          v16 += *(_QWORD *)(this + 40);
          v14 += *(_QWORD *)(this + 48);
        }
      }
    }
    a2 -= v10;
  }
  return this;
}

uint64_t CMMFloatAlphaCopier::Copy(uint64_t this, unint64_t a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *exception;

  if (a2)
  {
    v2 = *(unsigned __int8 *)(this + 120);
    do
    {
      if (v2)
      {
        v3 = 0;
        v4 = *(_QWORD *)(this + 152);
        v5 = *(_QWORD *)(this + 216);
        v6 = *(_QWORD *)(this + 168);
        v7 = (_DWORD *)(v4 + 4 * v6 * v5);
        v8 = *(_QWORD *)(this + 200);
        v9 = v8 - v5;
        if (v8 - v5 >= a2)
          v9 = a2;
      }
      else
      {
        v10 = *(_QWORD *)(this + 144);
        v4 = *(_QWORD *)(this + 152);
        v11 = *(_QWORD *)(this + 208);
        v5 = *(_QWORD *)(this + 216);
        v12 = *(_QWORD *)(this + 160);
        v6 = *(_QWORD *)(this + 168);
        v13 = *(_QWORD *)(this + 192);
        v8 = *(_QWORD *)(this + 200);
        v9 = v13 - v11;
        if (v13 - v11 >= v8 - v5)
          v9 = v8 - v5;
        if (v9 >= a2)
          v9 = a2;
        v14 = v9 + v11;
        *(_QWORD *)(this + 208) = (v9 + v11) % v13;
        if ((v9 + v11) / v13 != 1 && v13 <= v14)
        {
LABEL_30:
          exception = __cxa_allocate_exception(4uLL);
          *exception = -171;
        }
        v3 = (_DWORD *)(v10 + 4 * v12 * v11);
        v7 = (_DWORD *)(v4 + 4 * v6 * v5);
        if (v13 <= v14)
          *(_QWORD *)(this + 144) = v10 + 4 * *(_QWORD *)(this + 176);
      }
      v16 = v5 + v9;
      *(_QWORD *)(this + 216) = v16 % v8;
      if (v8 <= v16 && v16 / v8 != 1)
        goto LABEL_30;
      if (v8 <= v16)
        *(_QWORD *)(this + 152) = v4 + 4 * *(_QWORD *)(this + 184);
      if (v9)
      {
        v17 = 4 * v6;
        v18 = 4 * *(_QWORD *)(this + 160);
        v19 = v9;
        do
        {
          if (v2)
            v20 = (_DWORD *)(this + 224);
          else
            v20 = v3;
          *v7 = *v20;
          v7 = (_DWORD *)((char *)v7 + v17);
          v3 = (_DWORD *)((char *)v3 + v18);
          --v19;
        }
        while (v19);
      }
      a2 -= v9;
    }
    while (a2);
  }
  return this;
}

_DWORD *CMMConvTRC::SetOutputClamp(CMMConvTRC *this)
{
  _DWORD *result;

  *((_BYTE *)this + 36) = 1;
  result = (_DWORD *)*((_QWORD *)this + 3);
  if (result)
  {
    if (result)
    {
      if (result[18] < *((_DWORD *)this + 18))
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 48))(result);
    }
  }
  return result;
}

uint64_t CMMConvTRC::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  _DWORD *exception;

  v5 = a4;
  v8 = a5 * a4;
  result = CMMTable::FloatData(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24));
  v10 = *(unsigned int *)(a1 + 72);
  if (v8 > v10)
  {
    v11 = v10 + v5;
    do
    {
      v12 = *(unsigned int *)(a2 + 4 * v10);
      if (v12 >= 0x1000001)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      v13 = v12 >> 12;
      v14 = *(_DWORD *)(result + 4 * (v12 >> 12));
      v15 = v12 & 0xFFF;
      if ((_DWORD)v15)
        v14 += (unint64_t)((*(int *)(result + 4 * (v13 + 1)) - (uint64_t)v14) * v15 + 2048) >> 12;
      *(_DWORD *)(a2 + 4 * v10) = v14;
      v10 = v11;
      v16 = v8 > v11;
      v11 += v5;
    }
    while (v16);
  }
  return result;
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 256))(a1, a2, a4, a5, *(unsigned __int8 *)(a3 + 1));
}

uint64_t CMMConvTRC::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  float v5;
  float v6;
  float v7;

  for (i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    v5 = *(float *)(a2 + 4 * i);
    v6 = *(float *)(result + 44);
    if (v5 <= v6)
      v6 = *(float *)(a2 + 4 * i);
    if (v5 >= *(float *)(result + 40))
      v7 = v6;
    else
      v7 = *(float *)(result + 40);
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvTRC::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  float v5;
  float v6;
  float v7;

  for (i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    v5 = *(float *)(a2 + 4 * i);
    v6 = *(float *)(result + 44);
    if (v5 <= v6)
      v6 = *(float *)(a2 + 4 * i);
    if (v5 >= *(float *)(result + 40))
      v7 = v6;
    else
      v7 = *(float *)(result + 40);
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvNode::GetCLUTPoints(CMMConvNode *this)
{
  return 0;
}

uint64_t CMMConvNode::GetNofSubNodes(CMMConvNode *this)
{
  return 1;
}

uint64_t CMMConvNode::GetPrecision(CMMConvNode *this)
{
  return 2;
}

uint64_t CMMConvTRC::GetFunctionType(CMMConvTRC *this)
{
  return 1;
}

uint64_t CMMConvNode::GetNodeAggregate(CMMConvNode *this)
{
  return 0;
}

void CMMConvNode::PrintInfo(CMMConvNode *this)
{
  const void *v2;
  const void *v3;
  void *v4;

  v4 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v4);
  v2 = (const void *)(*(uint64_t (**)(CMMConvNode *, _QWORD))(*(_QWORD *)this + 208))(this, 0);
  v3 = v2;
  if (v2)
  {
    CFShow(v2);
    CFRelease(v3);
  }
  CMMMemMgr::ReleaseMemList(&v4);
}

void sub_18B3CA60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

CFDataRef CMMConvTRC::create_flattened_TRC_data(CMMConvTRC *this, CFDictionaryRef theDict, unsigned int *a3)
{
  const __CFNumber *Value;
  unsigned int v7;
  CFIndex v8;
  __CFData *Mutable;
  __CFData *v10;
  uint64_t v11;
  UInt8 *MutableBytePtr;
  uint64_t v13;
  uint64_t i;
  float v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  float v19;
  const UInt8 *v20;
  unsigned int valuePtr;

  *a3 = 4097;
  if (!theDict || !CFDictionaryContainsKey(theDict, (const void *)kColorSyncTransformTRCSize))
    goto LABEL_21;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)kColorSyncTransformTRCSize);
  valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    v7 = valuePtr;
    *a3 = valuePtr;
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    v7 = *a3;
    if (!*a3)
    {
LABEL_8:
      v7 = *((_DWORD *)this + 20);
      *a3 = v7;
    }
  }
  if (v7 == 4097 || (v8 = 4 * v7, (Mutable = CFDataCreateMutable(0, v8)) == 0))
  {
LABEL_21:
    v20 = (const UInt8 *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 13) + 16), *(_QWORD *)(*((_QWORD *)this + 13) + 24));
    return CFDataCreate(0, v20, 16388);
  }
  v10 = Mutable;
  CFDataSetLength(Mutable, v8);
  v11 = CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 13) + 16), *(_QWORD *)(*((_QWORD *)this + 13) + 24));
  MutableBytePtr = CFDataGetMutableBytePtr(v10);
  v13 = *a3;
  if ((_DWORD)v13)
  {
    for (i = 0; i != v13; ++i)
    {
      v15 = (float)((float)i * 4096.0) / (float)(v13 - 1);
      v16 = vcvtms_u32_f32(v15);
      if (v16 >= 0x1000)
        v17 = 4096;
      else
        v17 = v16;
      v18 = *(float *)(v11 + 4 * v17);
      if (v16 <= 0xFFF)
      {
        v19 = v15 - (float)v17;
        if (v19 != 0.0)
          v18 = v18 + (float)((float)(*(float *)(v11 + 4 * (v17 + 1)) - v18) * v19);
      }
      *(float *)&MutableBytePtr[4 * i] = v18;
    }
  }
  return v10;
}

void CMMConvTRC::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL4 v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  float v35;
  unint64_t v36;
  float v37;
  float v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  BOOL v48;
  BOOL v49;
  float v50;
  float v51;
  float v52;
  unint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  BOOL v69;
  float v70;
  float v71;
  unint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  unint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  BOOL v105;
  float v106;
  float v107;
  BOOL v108;
  float v109;
  float v110;
  unint64_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  BOOL v127;
  _BOOL4 v128;
  float v129;
  BOOL v130;
  float v131;
  float v132;
  unint64_t v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  unint64_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  unint64_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  unint64_t v164;
  float v165;
  float v166;
  float v167;
  double v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  unint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  _DWORD *exception;
  float *v188;
  float v189;
  float v190;
  float v191;
  _BOOL4 v192;
  float v193;
  float v194;
  char __str[1024];
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  if (a5 && *(_BYTE *)(a1 + 33))
  {
    v8 = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 35))
    {
      v192 = 0;
      goto LABEL_8;
    }
    v8 = *(_BYTE *)(a1 + 36) == 0;
  }
  v192 = v8;
LABEL_8:
  v9 = a4 * a3;
  v10 = *(_DWORD *)(a1 + 88);
  if (v10 == 1)
  {
    switch(*(_DWORD *)(a1 + 100))
    {
      case 0:
        v36 = *(unsigned int *)(a1 + 72);
        if (v9 > v36)
        {
          v37 = *(float *)(a1 + 112);
          do
          {
            v38 = *(float *)(a2 + 4 * v36);
            v39 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v38) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v38);
              CMMThrowExceptionWithLog(0, __str, v40, v41, v42, v43, v44, v45);
            }
            if (v37 != 1.0)
            {
              v46 = fabsf(v38);
              if (!v39)
                v46 = v38;
              v47 = powf(v46, v37);
              if (v39)
                v48 = v38 < 0.0;
              else
                v48 = 0;
              if (v48)
                v47 = -v47;
              *(float *)(a2 + 4 * v36) = v47;
            }
            v49 = v192;
            if (!*(_BYTE *)(a1 + 33))
              v49 = 0;
            if (!v49)
            {
              v50 = *(float *)(a2 + 4 * v36);
              if (v50 <= 1.0)
                v51 = *(float *)(a2 + 4 * v36);
              else
                v51 = 1.0;
              if (v50 >= 0.0)
                v52 = v51;
              else
                v52 = 0.0;
              *(float *)(a2 + 4 * v36) = v52;
            }
            v36 += a3;
          }
          while (v36 < v9);
        }
        break;
      case 1:
        v53 = *(unsigned int *)(a1 + 72);
        if (v9 > v53)
        {
          v54 = *(float *)(a1 + 112);
          v55 = *(float *)(a1 + 116);
          v56 = *(float *)(a1 + 120);
          do
          {
            v57 = *(float *)(a2 + 4 * v53);
            v58 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v57) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v57);
              CMMThrowExceptionWithLog(0, __str, v59, v60, v61, v62, v63, v64);
            }
            v65 = fabsf(v57);
            if (v58)
              v66 = v65;
            else
              v66 = v57;
            v67 = 0.0;
            if (v66 >= (float)((float)-v56 / v55))
            {
              v67 = powf(v56 + (float)(v55 * v66), v54);
              if (v58 && v57 < 0.0)
                v67 = -v67;
            }
            *(float *)(a2 + 4 * v53) = v67;
            v69 = v192;
            if (!*(_BYTE *)(a1 + 33))
              v69 = 0;
            if (!v69)
            {
              if (v67 <= 1.0)
                v70 = v67;
              else
                v70 = 1.0;
              if (v67 >= 0.0)
                v71 = v70;
              else
                v71 = 0.0;
              *(float *)(a2 + 4 * v53) = v71;
            }
            v53 += a3;
          }
          while (v53 < v9);
        }
        break;
      case 2:
        v72 = *(unsigned int *)(a1 + 72);
        if (v9 > v72)
        {
          v73 = *(float *)(a1 + 116);
          v189 = *(float *)(a1 + 112);
          v74 = *(float *)(a1 + 120);
          v75 = *(float *)(a1 + 124);
          do
          {
            v76 = *(float *)(a2 + 4 * v72);
            v77 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v76) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v76);
              CMMThrowExceptionWithLog(0, __str, v78, v79, v80, v81, v82, v83);
            }
            v84 = fabsf(v76);
            if (v77)
            {
              v85 = v76 < 0.0;
            }
            else
            {
              v84 = v76;
              v85 = 0;
            }
            if (v85)
              v86 = -1.0;
            else
              v86 = 1.0;
            if (v84 >= (float)((float)-v74 / v73))
              v87 = v75 + (float)(v86 * powf(v74 + (float)(v73 * v84), v189));
            else
              v87 = v75 * v86;
            *(float *)(a2 + 4 * v72) = v87;
            v88 = v192;
            if (!*(_BYTE *)(a1 + 33))
              v88 = 0;
            if (!v88)
            {
              if (v87 <= 1.0)
                v89 = v87;
              else
                v89 = 1.0;
              if (v87 >= 0.0)
                v90 = v89;
              else
                v90 = 0.0;
              *(float *)(a2 + 4 * v72) = v90;
            }
            v72 += a3;
          }
          while (v72 < v9);
        }
        break;
      case 3:
        v91 = *(unsigned int *)(a1 + 72);
        if (v9 > v91)
        {
          v92 = *(float *)(a1 + 112);
          v190 = *(float *)(a1 + 116);
          v93 = *(float *)(a1 + 120);
          v94 = *(float *)(a1 + 124);
          v95 = *(float *)(a1 + 128);
          do
          {
            v96 = *(float *)(a2 + 4 * v91);
            v97 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v96) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v96);
              CMMThrowExceptionWithLog(0, __str, v98, v99, v100, v101, v102, v103);
            }
            v104 = fabsf(v96);
            if (v97)
            {
              v105 = v96 < 0.0;
            }
            else
            {
              v104 = v96;
              v105 = 0;
            }
            if (v105)
              v106 = -1.0;
            else
              v106 = 1.0;
            if (v104 >= v95)
              v107 = v106 * powf(v93 + (float)(v190 * v104), v92);
            else
              v107 = v104 * (float)(v94 * v106);
            *(float *)(a2 + 4 * v91) = v107;
            v108 = v192;
            if (!*(_BYTE *)(a1 + 33))
              v108 = 0;
            if (!v108)
            {
              if (v107 <= 1.0)
                v109 = v107;
              else
                v109 = 1.0;
              if (v107 >= 0.0)
                v110 = v109;
              else
                v110 = 0.0;
              *(float *)(a2 + 4 * v91) = v110;
            }
            v91 += a3;
          }
          while (v91 < v9);
        }
        break;
      case 4:
        v111 = *(unsigned int *)(a1 + 72);
        if (v9 > v111)
        {
          v112 = *(float *)(a1 + 112);
          v191 = *(float *)(a1 + 116);
          v113 = *(float *)(a1 + 120);
          v114 = *(float *)(a1 + 124);
          v115 = *(float *)(a1 + 128);
          v116 = *(float *)(a1 + 132);
          v117 = *(float *)(a1 + 136);
          do
          {
            v118 = *(float *)(a2 + 4 * v111);
            v119 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v118) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v118);
              CMMThrowExceptionWithLog(0, __str, v120, v121, v122, v123, v124, v125);
            }
            v126 = fabsf(v118);
            v127 = v119 == 0;
            if (v119)
              v128 = v118 < 0.0;
            else
              v128 = 0;
            if (v127)
              v126 = v118;
            if (v126 >= v115)
              v129 = v116 + powf(v113 + (float)(v191 * v126), v112);
            else
              v129 = v117 + (float)(v114 * v126);
            if (v128)
              v129 = -v129;
            *(float *)(a2 + 4 * v111) = v129;
            v130 = v192;
            if (!*(_BYTE *)(a1 + 33))
              v130 = 0;
            if (!v130)
            {
              if (v129 <= 1.0)
                v131 = v129;
              else
                v131 = 1.0;
              v48 = v129 < 0.0;
              v132 = 0.0;
              if (!v48)
                v132 = v131;
              *(float *)(a2 + 4 * v111) = v132;
            }
            v111 += a3;
          }
          while (v111 < v9);
        }
        break;
      case 5:
        v133 = *(unsigned int *)(a1 + 72);
        if (v9 > v133)
        {
          v134 = *(float *)(a1 + 116);
          v135 = *(float *)(a1 + 120);
          v136 = *(float *)(a1 + 124);
          v137 = *(float *)(a1 + 128);
          v138 = *(float *)(a1 + 136);
          v139 = -*(float *)(a1 + 132);
          do
          {
            v140 = *(float *)(a2 + 4 * v133);
            v141 = powf(fabsf(v140), v134);
            v142 = v138 * powf(fmaxf(v141 - v136, 0.0) / (float)(v137 + (float)(v139 * v141)), v135);
            v143 = -v142;
            if (v140 >= 0.0)
              v143 = v142;
            *(float *)(a2 + 4 * v133) = v143;
            v133 += a3;
          }
          while (v133 < v9);
        }
        break;
      case 6:
        v144 = *(unsigned int *)(a1 + 72);
        if (v9 > v144)
        {
          v145 = *(float *)(a1 + 116);
          v146 = *(float *)(a1 + 120);
          v147 = *(float *)(a1 + 124);
          v148 = *(float *)(a1 + 128);
          v149 = *(float *)(a1 + 132);
          v150 = 1.0 / *(float *)(a1 + 136);
          do
          {
            v151 = *(float *)(a2 + 4 * v144);
            v152 = powf(v150 * fabsf(v151), v145);
            v153 = (float)(v147 + (float)(v148 * v152)) / ((float)(v149 * v152) + 1.0);
            v154 = powf(v153, v146);
            if (v151 < 0.0)
              v154 = -v154;
            *(float *)(a2 + 4 * v144) = v154;
            v144 += a3;
          }
          while (v144 < v9);
        }
        break;
      case 7:
        v155 = *(unsigned int *)(a1 + 72);
        if (v9 > v155)
        {
          v156 = *(float *)(a1 + 120);
          v193 = *(float *)(a1 + 116);
          v157 = *(float *)(a1 + 124);
          v158 = *(float *)(a1 + 128);
          v159 = *(float *)(a1 + 132);
          do
          {
            v160 = *(float *)(a2 + 4 * v155);
            if (v160 >= 0.0)
              v161 = 1.0;
            else
              v161 = -1.0;
            v162 = fabsf(v160);
            if (v162 <= 0.5)
              v163 = (float)(v160 * v160) / 3.0;
            else
              v163 = v158 * (float)(v156 + expf((float)(v162 - v157) / v193));
            if (v161 <= 0.0)
              v163 = -v163;
            *(float *)(a2 + 4 * v155) = v159 * v163;
            v155 += a3;
          }
          while (v155 < v9);
        }
        break;
      case 8:
        v164 = *(unsigned int *)(a1 + 72);
        if (v9 > v164)
        {
          v165 = *(float *)(a1 + 124);
          v166 = *(float *)(a1 + 128);
          v167 = *(float *)(a1 + 116);
          v168 = -*(float *)(a1 + 120);
          do
          {
            v169 = *(float *)(a2 + 4 * v164);
            if (v169 >= 0.0)
              v170 = 1.0;
            else
              v170 = -1.0;
            v171 = fabsf(v169);
            if (v171 <= v166)
            {
              v173 = sqrtf(v171 * 3.0);
            }
            else
            {
              v172 = v168 + v171 * 12.0;
              v173 = v165 + (float)(v167 * logf(v172));
            }
            if (v170 <= 0.0)
              v173 = -v173;
            *(float *)(a2 + 4 * v164) = v173;
            v164 += a3;
          }
          while (v164 < v9);
        }
        break;
      case 9:
        v174 = *(unsigned int *)(a1 + 72);
        if (v9 > v174)
        {
          v175 = *(float *)(a1 + 116);
          v194 = *(float *)(a1 + 112);
          v176 = *(float *)(a1 + 120);
          v177 = *(float *)(a1 + 124);
          v178 = *(float *)(a1 + 128);
          v179 = *(float *)(a1 + 132);
          do
          {
            v180 = *(float *)(a2 + 4 * v174);
            if (v180 >= 0.0)
              v181 = 1.0;
            else
              v181 = -1.0;
            v182 = fabsf(v180) - v194;
            if (v182 < 0.0)
              v182 = 0.0;
            v183 = v175 * v182;
            if (v183 > v176)
              v183 = v176 + (float)(logf((float)((float)(v183 - v176) * v177) + 1.0) / v177);
            v184 = v179 * powf(v183, v178);
            if (v184 <= 1.0)
              v185 = v184;
            else
              v185 = 1.0;
            if (v184 >= 0.0)
              v186 = v185;
            else
              v186 = 0.0;
            if (v181 <= 0.0)
              v186 = -v186;
            *(float *)(a2 + 4 * v174) = v186;
            v174 += a3;
          }
          while (v174 < v9);
        }
        break;
      case 0xA:
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      default:
        return;
    }
  }
  else if (!v10)
  {
    v11 = *(uint64_t **)(a1 + 104);
    v12 = v11[4];
    v13 = CMMTable::FloatData(v11[2], v11[3]);
    v14 = *(unsigned int *)(a1 + 72);
    if (v9 > v14)
    {
      v15 = (float *)v13;
      v16 = (v12 >> 2) - 1;
      v17 = *(float *)(a1 + 144);
      v18 = *(float *)(a1 + 148);
      v19 = *(float *)(a1 + 152);
      v20 = *(float *)(a1 + 156);
      v188 = (float *)(v13 + 0x4000);
      do
      {
        v21 = *(float *)(a2 + 4 * v14);
        v22 = *(unsigned __int8 *)(a1 + 34);
        if ((LODWORD(v21) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          bzero(__str, 0x400uLL);
          snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v21);
          CMMThrowExceptionWithLog(0, __str, v23, v24, v25, v26, v27, v28);
        }
        v29 = v21 < 0.0;
        v30 = fabsf(v21);
        if (!v22)
        {
          v29 = 0;
          v30 = v21;
        }
        if (v30 <= 1.0)
        {
          if (v30 >= 0.0)
          {
            v32 = v30 * (float)v16;
            v34 = v32 + 1;
            if (v16 < v34)
              v34 = (v12 >> 2) - 1;
            v33 = v15[v32];
            v35 = v33 + (float)((float)(v15[v34] - v33) * (float)(v32 - (float)v32));
            v31 = -v35;
            if (!v29)
              v31 = v35;
          }
          else if (v192)
          {
            v31 = v18 + (float)(v17 * v30);
          }
          else
          {
            v31 = *v15;
          }
        }
        else if (v192)
        {
          v31 = v20 + (float)(v19 * v30);
        }
        else
        {
          v31 = *v188;
        }
        *(float *)(a2 + 4 * v14) = v31;
        v14 += a3;
      }
      while (v14 < v9);
    }
  }
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

int *InvertLUT(int *result, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;

  v2 = 0;
  v3 = *result;
  v4 = result[4096];
  v5 = 4096;
  do
  {
    if (v3 <= v4)
      v6 = v2;
    else
      v6 = v5;
    v7 = result[v6];
    if (v2)
    {
      if (v7 <= 1)
        v7 = 1;
      if (a2[(v2 - 1)] > v7)
        v7 = a2[(v2 - 1)];
      a2[v2] = v7;
    }
    else
    {
      *a2 = v7;
    }
    ++v2;
    --v5;
  }
  while (v2 != 4097);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = a2 + 2;
  v12 = *a2;
  v13 = a2[1];
  v14 = 4096;
  do
  {
    v15 = v8 << 12;
    if (v10 <= 4094)
    {
      v16 = v10;
      if (v15 < a2[v10 + 1])
      {
LABEL_20:
        v10 = v16;
      }
      else
      {
        v17 = v14 - (v10 << 12);
        v9 = v17 + 16769024;
        v18 = v17 + 16773120;
        while (1)
        {
          v12 = v13;
          v13 = v11[v16];
          if (v16 == 4094)
            break;
          v14 += 4096;
          v19 = v11[v16++];
          if (v15 < v19)
          {
            v9 = v14 - 4096;
            goto LABEL_20;
          }
        }
        v10 = 4095;
        v14 = v18;
      }
    }
    v20 = (v13 - v12);
    v21 = v14;
    if ((int)v20 >= 1)
      v21 = v9 + ((v20 >> 1) + ((v15 - v12) << 12)) / v20;
    result[v8] = v21;
    if ((v21 & 0x80000000) != 0)
    {
      v21 = 0;
    }
    else
    {
      if (v21 < 0x1000001)
        goto LABEL_29;
      v21 = 0x1000000;
    }
    result[v8] = v21;
LABEL_29:
    if (v3 > v4)
      result[v8] = 0x1000000 - v21;
    ++v8;
  }
  while (v8 != 4097);
  v22 = result[4096];
  v23 = result[1] - *result;
  if (v23 < 0)
    v23 = *result - result[1];
  if (v23 < 0x800)
    result[1] = *result;
  v24 = v22 - result[4095];
  if (v24 < 0)
    v24 = result[4095] - v22;
  if (v24 <= 0x7FF)
    result[4095] = v22;
  return result;
}

void CMMConvPQEOTF::~CMMConvPQEOTF(CMMConvPQEOTF *this)
{
  pthread_mutex_t **v1;

  CMMConvTRC::~CMMConvTRC(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMConvPQEOTF::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  float v5;
  float v6;
  float v7;

  for (i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    v5 = *(float *)(a2 + 4 * i);
    if (v5 <= 1.0)
      v6 = *(float *)(a2 + 4 * i);
    else
      v6 = 1.0;
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvPQEOTF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  float v5;
  float v6;
  float v7;

  for (i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    v5 = *(float *)(a2 + 4 * i);
    v6 = *(float *)(result + 164);
    if (v5 <= v6)
      v6 = *(float *)(a2 + 4 * i);
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvPQEOTF::GetPrecision(CMMConvPQEOTF *this)
{
  return 5;
}

__CFDictionary *CMMConvPQEOTF::FlattenConversion(CMMConvPQEOTF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const void **v9;
  const void *v10;
  CFMutableArrayRef v11;
  __CFArray *v12;
  uint64_t v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  __CFArray *v18;
  const UInt8 *v19;
  CFDataRef v20;
  CFDataRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFArrayRef v28;
  const void *v30;
  const void *v31;
  float v32;
  int v33;
  const void *valuePtr[3];

  valuePtr[2] = *(const void **)MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.ChannelsInStageCount"), v7);
    CFRelease(v8);
  }
  v9 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a2 || CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.PQEOTFTable")) != *v9)
  {
    if (*((_DWORD *)this + 23) != 17)
    {
      v10 = (const void *)kColorSyncConversionParamPQEOTF;
      v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (v11)
      {
        v12 = v11;
        v13 = 0;
        while (1)
        {
          v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
          if (!v14)
            break;
          v15 = v14;
          CFArrayAppendValue(v12, v14);
          CFRelease(v15);
          v13 += 4;
          if (v13 == 24)
          {
            v16 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 140);
            if (v16)
            {
              v17 = v16;
              CFArrayAppendValue(v12, v16);
              CFRelease(v17);
            }
            CFDictionaryAddValue(Mutable, v10, v12);
            break;
          }
        }
        v18 = v12;
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  if (*((_DWORD *)this + 23) == 17)
  {
LABEL_18:
    v19 = (const UInt8 *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 13) + 16), *(_QWORD *)(*((_QWORD *)this + 13) + 24));
    v20 = CFDataCreate(0, v19, *(_QWORD *)(*((_QWORD *)this + 13) + 32));
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v20);
      CFRelease(v21);
    }
    LODWORD(valuePtr[0]) = 1024;
    goto LABEL_21;
  }
  LODWORD(valuePtr[0]) = 0;
  v30 = (const void *)(*(uint64_t (**)(CMMConvPQEOTF *, const __CFDictionary *, const void **))(*(_QWORD *)this + 248))(this, a2, valuePtr);
  if (v30)
  {
    v31 = v30;
    CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v30);
    CFRelease(v31);
  }
LABEL_21:
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v22)
  {
    v23 = v22;
    CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v22);
    v18 = v23;
LABEL_23:
    CFRelease(v18);
  }
LABEL_24:
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v24);
  CFRelease(v24);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E0C9AE40]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v25, *((float *)this + 10), *((float *)this + 11));
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v9);
  CMMConvNode::AddClampingInfo(this, Mutable);
  v33 = 0;
  v32 = *((float *)this + 41);
  if (v32 != 1.0)
  {
    v26 = CFNumberCreate(0, kCFNumberFloat32Type, &v33);
    v27 = CFNumberCreate(0, kCFNumberFloat32Type, &v32);
    valuePtr[0] = v26;
    valuePtr[1] = v27;
    v28 = CFArrayCreate(0, valuePtr, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v26);
    CFRelease(v27);
    if (v28)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionOutputRange"), v28);
      CFRelease(v28);
    }
  }
  return Mutable;
}

CFDataRef CMMConvPQEOTF::create_flattened_TRC_data(CMMConvPQEOTF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  const __CFNumber *Value;
  unsigned int v6;
  CFIndex v7;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  int32x2_t v11;
  uint64_t v12;
  float v13;
  float32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  uint64x2_t v17;
  float *v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int64x2_t v27;
  uint64x2_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int32x2_t v33;
  int64x2_t v34;
  unsigned int valuePtr;

  *a3 = 0;
  if (!theDict)
  {
    valuePtr = 4097;
LABEL_10:
    v6 = 65552;
    *a3 = 65552;
    goto LABEL_11;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.PQEOTFTableSize"));
  valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    v6 = valuePtr;
    *a3 = valuePtr;
  }
  else
  {
    v6 = *a3;
  }
  if (v6 != 1024)
  {
    if (v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*((float *)this + 41) == 1.0)
    return CFDataCreate(0, kPQEOTFFloat1024Data, 4096);
  v6 = 1024;
LABEL_11:
  v7 = 4 * v6;
  Mutable = CFDataCreateMutable(0, v7);
  v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    MutableBytePtr = CFDataGetMutableBytePtr(v9);
    v12 = *a3;
    if ((_DWORD)v12)
    {
      v13 = *((float *)this + 41);
      *(float *)v11.i32 = (float)(v12 - 1);
      v28 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = (float32x2_t)vdup_lane_s32(v11, 0);
      v15 = (v12 + 1) & 0x1FFFFFFFELL;
      v16 = (int32x2_t)0x100000000;
      v17 = (uint64x2_t)xmmword_18B3EA6B0;
      v18 = (float *)(MutableBytePtr + 4);
      v19 = (float32x2_t)vdup_n_s32(0xBF560000);
      v20 = (float32x2_t)vdup_n_s32(0xC1958000);
      v21 = (float32x2_t)vdup_n_s32(0x4196D000u);
      v27 = vdupq_n_s64(2uLL);
      do
      {
        v33 = vmovn_s64((int64x2_t)vcgeq_u64(v28, v17));
        v34 = (int64x2_t)v17;
        v22 = vdiv_f32(vcvt_f32_u32((uint32x2_t)v16), v14);
        v29 = v22.f32[0];
        v31 = powf(v22.f32[1], 0.012683);
        v23.f32[0] = powf(v29, 0.012683);
        v23.f32[1] = v31;
        v24 = vdiv_f32(vmaxnm_f32(vadd_f32(v23, v19), 0), vmla_f32(v21, v20, v23));
        v30 = v24.f32[0];
        v32 = powf(v24.f32[1], 6.2774);
        v25.f32[0] = powf(v30, 6.2774);
        v25.f32[1] = v32;
        if ((v33.i8[0] & 1) != 0)
          *(v18 - 1) = v13 * v25.f32[0];
        if ((v33.i8[4] & 1) != 0)
          *v18 = vmuls_lane_f32(v13, v25, 1);
        v17 = (uint64x2_t)vaddq_s64(v34, v27);
        v16 = vadd_s32(v16, (int32x2_t)0x200000002);
        v18 += 2;
        v15 -= 2;
      }
      while (v15);
    }
  }
  return v9;
}

void CMMConvPQEOTF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;

  if (*(_DWORD *)(a1 + 92) == 17)
  {
    CMMConvTRC::ConvertFloat(a1, a2, a3, a4, 0);
  }
  else
  {
    v7 = a4 * a3;
    v8 = *(unsigned int *)(a1 + 72);
    if (a4 * a3 > v8)
    {
      do
      {
        v9 = *(float *)(a2 + 4 * v8);
        v10 = powf(fabsf(v9), 0.012683);
        v11 = powf(fmaxf(v10 + -0.83594, 0.0) / (float)((float)(v10 * -18.688) + 18.852), 6.2774);
        if (v9 < 0.0)
          v11 = -v11;
        *(float *)(a2 + 4 * v8) = *(float *)(a1 + 164) * v11;
        v8 += a3;
      }
      while (v8 < v7);
    }
  }
}

void CMMConvHLGInvOETF::~CMMConvHLGInvOETF(CMMConvHLGInvOETF *this)
{
  pthread_mutex_t **v1;

  CMMConvTRC::~CMMConvTRC(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMConvHLGInvOETF::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  float v5;
  float v6;
  float v7;

  for (i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    v5 = *(float *)(a2 + 4 * i);
    if (v5 <= 1.0)
      v6 = *(float *)(a2 + 4 * i);
    else
      v6 = 1.0;
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvHLGInvOETF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  float v5;
  float v6;
  float v7;

  for (i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    v5 = *(float *)(a2 + 4 * i);
    v6 = *(float *)(result + 164);
    if (v5 <= v6)
      v6 = *(float *)(a2 + 4 * i);
    if (v5 >= 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvHLGInvOETF::GetPrecision(CMMConvHLGInvOETF *this)
{
  return 5;
}

__CFDictionary *CMMConvHLGInvOETF::FlattenConversion(CMMConvHLGInvOETF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const void **v9;
  const void *v10;
  CFMutableArrayRef v11;
  CFNumberRef v12;
  uint64_t v13;
  CFNumberRef v14;
  CFNumberRef v15;
  float v16;
  float v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFArrayRef v26;
  CFNumberRef v27;
  CFArrayRef v28;
  CFArrayRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFArrayRef v34;
  int v36;
  float v37;
  const void *valuePtr[2];
  void *values;
  CFNumberRef v40;
  CFNumberRef v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.ChannelsInStageCount"), v7);
    CFRelease(v8);
  }
  v9 = (const void **)MEMORY[0x1E0C9AE50];
  if (a2 && CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGInvOETFTable")) == *v9)
  {
    v37 = 0.0;
    v20 = (const void *)(*(uint64_t (**)(CMMConvHLGInvOETF *, const __CFDictionary *, float *))(*(_QWORD *)this + 248))(this, a2, &v37);
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v20);
      CFRelease(v21);
    }
    v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v37);
    if (v22)
    {
      v23 = v22;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v22);
      CFRelease(v23);
    }
    if (!*((_BYTE *)this + 33))
      goto LABEL_28;
    v24 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 144);
    v25 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 148);
    values = v24;
    v40 = v25;
    v26 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v24);
    CFRelease(v25);
    if (v26)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionNegBoundary"), v26);
      CFRelease(v26);
    }
    v27 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    v12 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    valuePtr[0] = v27;
    valuePtr[1] = v12;
    v28 = CFArrayCreate(0, valuePtr, 2, MEMORY[0x1E0C9B378]);
    if (v28)
    {
      v29 = v28;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionPosBoundary"), v28);
      CFRelease(v29);
    }
    CFRelease(v27);
    goto LABEL_27;
  }
  v10 = (const void *)kColorSyncConversionParamHLGInvOETF;
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    while (1)
    {
      v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
      if (!v14)
        break;
      v15 = v14;
      CFArrayAppendValue(v12, v14);
      CFRelease(v15);
      v13 += 4;
      if (v13 == 16)
      {
        v16 = *((float *)this + 34);
        v17 = *((float *)this + 32) * v16;
        v37 = v16 * *((float *)this + 33);
        *(float *)valuePtr = v17;
        v36 = 0;
        values = CFNumberCreate(0, kCFNumberFloat32Type, valuePtr);
        v40 = CFNumberCreate(0, kCFNumberFloat32Type, &v37);
        v18 = 0;
        v41 = CFNumberCreate(0, kCFNumberFloat32Type, &v36);
        do
        {
          v19 = *(void **)((char *)&values + v18);
          if (v19)
          {
            CFArrayAppendValue(v12, *(void **)((char *)&values + v18));
            CFRelease(v19);
          }
          v18 += 8;
        }
        while (v18 != 24);
        CFDictionaryAddValue(Mutable, v10, v12);
        break;
      }
    }
LABEL_27:
    CFRelease(v12);
  }
LABEL_28:
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v30);
  CFRelease(v30);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E0C9AE40]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v31, *((float *)this + 10), *((float *)this + 11));
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v9);
  CMMConvNode::AddClampingInfo(this, Mutable);
  LODWORD(valuePtr[0]) = 0;
  v37 = *((float *)this + 41);
  if (v37 != 1.0)
  {
    v32 = CFNumberCreate(0, kCFNumberFloat32Type, valuePtr);
    v33 = CFNumberCreate(0, kCFNumberFloat32Type, &v37);
    values = v32;
    v40 = v33;
    v34 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v32);
    CFRelease(v33);
    if (v34)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionOutputRange"), v34);
      CFRelease(v34);
    }
  }
  return Mutable;
}

__CFData *CMMConvHLGInvOETF::create_flattened_TRC_data(CMMConvHLGInvOETF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  const __CFNumber *Value;
  unsigned int v6;
  CFIndex v7;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  UInt8 *v12;
  uint64_t i;
  float v14;
  float v15;
  float v16;
  double v17;
  float v18;
  unsigned int valuePtr;

  *a3 = 0;
  if (!theDict)
  {
    valuePtr = 4097;
LABEL_9:
    v6 = 65552;
    *a3 = 65552;
    goto LABEL_10;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGInvOETFTableSize"));
  valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    v6 = valuePtr;
    *a3 = valuePtr;
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    v6 = *a3;
    if (!*a3)
      goto LABEL_9;
  }
LABEL_10:
  v7 = 4 * v6;
  Mutable = CFDataCreateMutable(0, v7);
  v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    MutableBytePtr = CFDataGetMutableBytePtr(v9);
    v11 = *a3;
    if ((_DWORD)v11)
    {
      v12 = MutableBytePtr;
      for (i = 0; i != v11; ++i)
      {
        v14 = (float)i / (float)(v11 - 1);
        v15 = *((float *)this + 34);
        if (v14 <= 0.5)
        {
          v16 = v14 * v14;
          v17 = 3.0;
        }
        else
        {
          v16 = expf((float)(v14 + -0.55991) / 0.17883) + 0.28467;
          v17 = 12.0;
        }
        v18 = v16 / v17;
        *(float *)&v12[4 * i] = v15 * v18;
      }
    }
  }
  return v9;
}

void CMMConvHLGInvOETF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  float v14;
  float v15;

  v4 = a4 * a3;
  v5 = *(unsigned int *)(a1 + 72);
  if (a4 * a3 > v5)
  {
    do
    {
      v9 = *(float *)(a2 + 4 * v5);
      v10 = *(float *)(a1 + 136);
      v11 = fabsf(v9);
      if (v11 <= 0.5)
      {
        v12 = v9 * v9;
        v13 = 3.0;
      }
      else
      {
        v12 = expf((float)(v11 + -0.55991) / 0.17883) + 0.28467;
        v13 = 12.0;
      }
      v14 = v12 / v13;
      v15 = -v10;
      if (v9 >= 0.0)
        v15 = v10;
      *(float *)(a2 + 4 * v5) = v15 * v14;
      v5 += a3;
    }
    while (v5 < v4);
  }
}

void CMMConvPQInvEOTF::~CMMConvPQInvEOTF(CMMConvPQInvEOTF *this)
{
  pthread_mutex_t **v1;

  CMMConvInvertedTRC::~CMMConvInvertedTRC(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMConvPQInvEOTF::GetPrecision(CMMConvPQInvEOTF *this)
{
  return 5;
}

__CFDictionary *CMMConvPQInvEOTF::FlattenConversion(CMMConvPQInvEOTF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const void **v9;
  const void *v10;
  CFMutableArrayRef v11;
  CFNumberRef v12;
  uint64_t v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const void *v18;
  const void *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFArrayRef v24;
  CFNumberRef v25;
  CFArrayRef v26;
  CFArrayRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  int valuePtr;
  void *v32[2];
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.ChannelsInStageCount"), v7);
    CFRelease(v8);
  }
  v9 = (const void **)MEMORY[0x1E0C9AE50];
  if (a2 && CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.PQInvEOTFTable")) == *v9)
  {
    valuePtr = 0;
    v18 = (const void *)(*(uint64_t (**)(CMMConvPQInvEOTF *, const __CFDictionary *, int *))(*(_QWORD *)this + 248))(this, a2, &valuePtr);
    if (v18)
    {
      v19 = v18;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v18);
      CFRelease(v19);
    }
    v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v20);
      CFRelease(v21);
    }
    if (!*((_BYTE *)this + 33))
      goto LABEL_28;
    v22 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 144);
    v23 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 148);
    values[0] = v22;
    values[1] = v23;
    v24 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v22);
    CFRelease(v23);
    if (v24)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionNegBoundary"), v24);
      CFRelease(v24);
    }
    v25 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    v12 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    v32[0] = v25;
    v32[1] = v12;
    v26 = CFArrayCreate(0, (const void **)v32, 2, MEMORY[0x1E0C9B378]);
    if (v26)
    {
      v27 = v26;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionPosBoundary"), v26);
      CFRelease(v27);
    }
    CFRelease(v25);
    goto LABEL_27;
  }
  v10 = (const void *)kColorSyncConversionParamPQInvEOTF;
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    while (1)
    {
      v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
      if (!v14)
        break;
      v15 = v14;
      CFArrayAppendValue(v12, v14);
      CFRelease(v15);
      v13 += 4;
      if (v13 == 24)
        goto LABEL_14;
    }
    CFRelease(v12);
    v12 = 0;
LABEL_14:
    v16 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 176);
    if (v16)
    {
      v17 = v16;
      CFArrayAppendValue(v12, v16);
      CFRelease(v17);
    }
    CFDictionaryAddValue(Mutable, v10, v12);
LABEL_27:
    CFRelease(v12);
  }
LABEL_28:
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v28);
  CFRelease(v28);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E0C9AE40]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v29, *((float *)this + 10), *((float *)this + 11));
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v9);
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

__CFData *CMMConvPQInvEOTF::create_flattened_TRC_data(CMMConvPQInvEOTF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  const __CFNumber *Value;
  unsigned int v6;
  CFIndex v7;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  UInt8 *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unsigned int valuePtr;

  *a3 = 0;
  if (!theDict)
  {
    valuePtr = 4097;
LABEL_9:
    v6 = 65552;
    *a3 = 65552;
    goto LABEL_10;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.PQInvEOTFTableSize"));
  valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    v6 = valuePtr;
    *a3 = valuePtr;
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    v6 = *a3;
    if (!*a3)
      goto LABEL_9;
  }
LABEL_10:
  v7 = 4 * v6;
  Mutable = CFDataCreateMutable(0, v7);
  v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    MutableBytePtr = CFDataGetMutableBytePtr(v9);
    v11 = *a3;
    if ((_DWORD)v11)
    {
      v12 = MutableBytePtr;
      v13 = 0;
      v14 = *((float *)this + 44);
      do
      {
        v15 = v14 * (float)((float)v13 / (float)(v11 - 1));
        v16 = powf(fabsf(v15), 0.1593);
        v17 = powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
        if (v15 < 0.0)
          v17 = -v17;
        *(float *)&v12[4 * v13++] = v17;
      }
      while (v11 != v13);
    }
  }
  return v9;
}

void CMMConvPQInvEOTF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float v8;
  float v9;
  float v10;
  float v11;

  v4 = a4 * a3;
  v5 = *(unsigned int *)(a1 + 72);
  if (a4 * a3 > v5)
  {
    v8 = *(float *)(a1 + 176);
    do
    {
      v9 = v8 * *(float *)(a2 + 4 * v5);
      v10 = powf(fabsf(v9), 0.1593);
      v11 = powf((float)((float)(v10 * 18.852) + 0.83594) / (float)((float)(v10 * 18.688) + 1.0), 78.844);
      if (v9 < 0.0)
        v11 = -v11;
      *(float *)(a2 + 4 * v5) = v11;
      v5 += a3;
    }
    while (v5 < v4);
  }
}

void CMMConvHLGOETF::~CMMConvHLGOETF(CMMConvHLGOETF *this)
{
  pthread_mutex_t **v1;

  CMMConvInvertedTRC::~CMMConvInvertedTRC(this);
  CMMBase::operator delete(v1);
}

__CFDictionary *CMMConvHLGOETF::FlattenConversion(CMMConvHLGOETF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const void **v9;
  const void *v10;
  CFMutableArrayRef v11;
  CFNumberRef v12;
  uint64_t v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const void *v18;
  const void *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFArrayRef v24;
  CFNumberRef v25;
  CFArrayRef v26;
  CFArrayRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  int v31;
  void *values[2];
  const void *valuePtr[3];

  valuePtr[2] = *(const void **)MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.ChannelsInStageCount"), v7);
    CFRelease(v8);
  }
  v9 = (const void **)MEMORY[0x1E0C9AE50];
  if (a2 && CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGOETFTable")) == *v9)
  {
    v31 = 0;
    v18 = (const void *)(*(uint64_t (**)(CMMConvHLGOETF *, const __CFDictionary *, int *))(*(_QWORD *)this + 248))(this, a2, &v31);
    if (v18)
    {
      v19 = v18;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v18);
      CFRelease(v19);
    }
    v20 = CFNumberCreate(0, kCFNumberSInt32Type, &v31);
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v20);
      CFRelease(v21);
    }
    if (!*((_BYTE *)this + 33))
      goto LABEL_26;
    v22 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 144);
    v23 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 148);
    valuePtr[0] = v22;
    valuePtr[1] = v23;
    v24 = CFArrayCreate(0, valuePtr, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v22);
    CFRelease(v23);
    if (v24)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionNegBoundary"), v24);
      CFRelease(v24);
    }
    v25 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    v12 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    values[0] = v25;
    values[1] = v12;
    v26 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
    if (v26)
    {
      v27 = v26;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionPosBoundary"), v26);
      CFRelease(v27);
    }
    CFRelease(v25);
    goto LABEL_25;
  }
  v10 = (const void *)kColorSyncConversionParamHLGOETF;
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    while (1)
    {
      v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
      if (!v14)
        break;
      v15 = v14;
      CFArrayAppendValue(v12, v14);
      CFRelease(v15);
      v13 += 4;
      if (v13 == 20)
      {
        LODWORD(valuePtr[0]) = *((_DWORD *)this + 33);
        v16 = CFNumberCreate(0, kCFNumberFloat32Type, valuePtr);
        if (v16)
        {
          v17 = v16;
          CFArrayAppendValue(v12, v16);
          CFRelease(v17);
        }
        CFDictionaryAddValue(Mutable, v10, v12);
        break;
      }
    }
LABEL_25:
    CFRelease(v12);
  }
LABEL_26:
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v28);
  CFRelease(v28);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E0C9AE40]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v29, *((float *)this + 10), *((float *)this + 11));
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v9);
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

__CFData *CMMConvHLGOETF::create_flattened_TRC_data(CMMConvHLGOETF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  const __CFNumber *Value;
  unsigned int v6;
  CFIndex v7;
  __CFData *Mutable;
  __CFData *v9;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  UInt8 *v12;
  uint64_t i;
  float v14;
  float v15;
  float v16;
  unsigned int valuePtr;

  *a3 = 0;
  if (!theDict)
  {
    valuePtr = 4097;
LABEL_9:
    v6 = 65552;
    *a3 = 65552;
    goto LABEL_10;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGOETFCTableSize"));
  valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    v6 = valuePtr;
    *a3 = valuePtr;
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    v6 = *a3;
    if (!*a3)
      goto LABEL_9;
  }
LABEL_10:
  v7 = 4 * v6;
  Mutable = CFDataCreateMutable(0, v7);
  v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    MutableBytePtr = CFDataGetMutableBytePtr(v9);
    v11 = *a3;
    if ((_DWORD)v11)
    {
      v12 = MutableBytePtr;
      for (i = 0; i != v11; ++i)
      {
        v14 = (float)((float)i / (float)(v11 - 1)) * *((float *)this + 33);
        if (v14 <= 0.0833333333)
        {
          v16 = sqrtf(v14 * 3.0);
        }
        else
        {
          v15 = v14 * 12.0 + -0.284668922;
          v16 = (float)(logf(v15) * 0.17883) + 0.55991;
        }
        *(float *)&v12[4 * i] = v16;
      }
    }
  }
  return v9;
}

void CMMConvHLGOETF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v4 = a4 * a3;
  v5 = *(unsigned int *)(a1 + 72);
  if (a4 * a3 > v5)
  {
    do
    {
      v9 = *(float *)(a2 + 4 * v5);
      v10 = fabsf(v9) * *(float *)(a1 + 132);
      if (v10 <= 0.0833333333)
      {
        v12 = sqrtf(v10 * 3.0);
      }
      else
      {
        v11 = v10 * 12.0 + -0.284668922;
        v12 = (float)(logf(v11) * 0.17883) + 0.55991;
      }
      if (v9 >= 0.0)
        v13 = 1.0;
      else
        v13 = -1.0;
      if (v13 <= 0.0)
        v12 = -v12;
      *(float *)(a2 + 4 * v5) = v12;
      v5 += a3;
    }
    while (v5 < v4);
  }
}

uint64_t CMMConvNode::FlattenConversion(CMMConvNode *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t CMMConvNode::GetFunctionType(CMMConvNode *this)
{
  return 0xFFFFFFFFLL;
}

BOOL CMMMatrix::Is3x3(CMMMatrix *this)
{
  return !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22)
      && *((float *)this + 23) == 0.0
      && *((float *)this + 24) == 0.0
      && *((float *)this + 25) == 0.0;
}

uint64_t CMMConvMatrix::Collapse3x3(CMMConvMatrix *this, CMMConvMatrix *a2, CMMMemMgr *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  float64x2_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *MatrixConv;
  void (**v23)(CMMMatrix *__hidden);
  _OWORD v24[2];
  _DWORD v25[5];
  float32x4_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  float v31;
  float v32;
  uint64_t v33;
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  __int128 v39;
  uint64_t v40;
  float64x2_t v41;
  __int128 v42;
  float64x2_t v43[2];
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51;
  double v52;
  double v53;
  float64x2_t v54;
  double v55;
  double v56;
  __int128 v57;
  __int128 v58;
  float64x2_t v59;
  double v60;
  uint64_t v61;
  float64x2_t v62;
  double v63;
  double v64;
  float64x2_t v65;
  double v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(CMMConvMatrix *))(*(_QWORD *)this + 224))(this);
  if ((v6 & 1) == 0)
  {
    *((_BYTE *)this + 32) = 1;
    *((_BYTE *)a2 + 32) = 1;
    v40 = 0;
    v7 = *((_OWORD *)a2 + 6);
    *(_OWORD *)v38 = *((_OWORD *)a2 + 7);
    v8 = *((_OWORD *)a2 + 9);
    *(_OWORD *)&v38[16] = *((_OWORD *)a2 + 8);
    v39 = v8;
    LODWORD(v40) = *((_DWORD *)a2 + 40);
    v9 = *((_OWORD *)a2 + 5);
    v35 = *((_OWORD *)a2 + 4);
    v36 = v9;
    v37 = v7;
    v10 = (char *)this + 64;
    v59 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 100));
    LODWORD(v9) = *((_DWORD *)this + 38);
    *(double *)&v7 = *((float *)this + 37);
    v60 = *((float *)this + 27);
    v61 = v7;
    v62 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112));
    v63 = *((float *)this + 30);
    v64 = *(float *)&v9;
    v65 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 124));
    *(double *)&v7 = *((float *)this + 39);
    v66 = *((float *)this + 33);
    v67 = v7;
    v68 = xmmword_18B43BDC8;
    v69 = unk_18B43BDD8;
    v48 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v37 + 4));
    v49 = *((float *)&v37 + 3);
    v50 = *((float *)&v39 + 1);
    v51 = vcvtq_f64_f32(*(float32x2_t *)v38);
    v52 = *(float *)&v38[8];
    v53 = *((float *)&v39 + 2);
    v54 = vcvtq_f64_f32(*(float32x2_t *)&v38[12]);
    v55 = *(float *)&v38[20];
    v56 = *((float *)&v39 + 3);
    v57 = xmmword_18B43BDC8;
    v58 = unk_18B43BDD8;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    memset(v43, 0, sizeof(v43));
    v41 = 0u;
    v42 = 0u;
    MatrixMatrix4x4<double>(v41.f64, v48.f64, v59.f64);
    v11 = 0;
    v23 = off_1E215FED0;
    v33 = 0;
    v28 = 0;
    v29 = 0;
    *(_QWORD *)&v12.f64[0] = v42;
    v12.f64[1] = v43[0].f64[0];
    v25[0] = 0;
    memset(v24, 0, sizeof(v24));
    *(float32x4_t *)&v25[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v41), v12);
    v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)v43 + 8)), v44);
    *(float *)v12.f64 = *(double *)&v45;
    v27 = LODWORD(v12.f64[0]);
    *(float *)v12.f64 = *((double *)&v42 + 1);
    v13 = v43[1].f64[1];
    v30 = LODWORD(v12.f64[0]);
    v31 = v13;
    v14 = *((double *)&v45 + 1);
    *(float *)v12.f64 = *((float *)this + 40) * *((float *)a2 + 40);
    v32 = v14;
    LODWORD(v33) = LODWORD(v12.f64[0]);
    do
    {
      v15 = 0;
      v16 = 8;
      do
      {
        v17 = 0;
        v18 = 0;
        v19 = v16;
        do
        {
          v18 += *(int *)&v34[v19] * (uint64_t)*(int *)&v10[v17];
          v17 += 4;
          v19 += 12;
        }
        while (v17 != 12);
        *((_DWORD *)v24 + 3 * v11 + v15++) = (unint64_t)(v18 + 0x8000) >> 16;
        v16 += 4;
      }
      while (v15 != 3);
      ++v11;
      v10 += 12;
    }
    while (v11 != 3);
    v20 = *((_QWORD *)a2 + 2);
    MatrixConv = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v23, a3, a2);
    *((_QWORD *)a2 + 2) = MatrixConv;
    MatrixConv[2] = v20;
    if (v20)
      *(_QWORD *)(v20 + 24) = MatrixConv;
  }
  return v6 ^ 1u;
}

int *CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::Convert(int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = a5 * a4;
  if (a5 * a4)
  {
    v6 = 0;
    v7 = result[34];
    v8 = result[35];
    v9 = result[36];
    v11 = result[23];
    v10 = result[24];
    v13 = result[21];
    v12 = result[22];
    v14 = result[19];
    v15 = result[20];
    v17 = result[17];
    v16 = result[18];
    result = (int *)result[16];
    do
    {
      v18 = (int *)(a2 + 4 * v6);
      v19 = v18[1];
      v20 = v18[2];
      v21 = v7
          + ((unint64_t)(v17 * (uint64_t)v19 + (int)result * (uint64_t)*v18 + v16 * (uint64_t)v20 + 0x8000) >> 16);
      v22 = v8 + ((unint64_t)(v15 * (uint64_t)v19 + v14 * (uint64_t)*v18 + v13 * (uint64_t)v20 + 0x8000) >> 16);
      v23 = v9 + ((unint64_t)(v11 * (uint64_t)v19 + v12 * (uint64_t)*v18 + v10 * (uint64_t)v20 + 0x8000) >> 16);
      if (v21 >= 0x1000000)
        v24 = 0x1000000;
      else
        v24 = v7
            + ((unint64_t)(v17 * (uint64_t)v19 + (int)result * (uint64_t)*v18 + v16 * (uint64_t)v20 + 0x8000) >> 16);
      if (v21 < 0)
        v24 = 0;
      if (v22 >= 0x1000000)
        v25 = 0x1000000;
      else
        v25 = v22;
      if (v22 < 0)
        v25 = 0;
      *v18 = v24;
      v18[1] = v25;
      if (v23 >= 0x1000000)
        v26 = 0x1000000;
      else
        v26 = v23;
      if (v23 >= 0)
        v27 = v26;
      else
        v27 = 0;
      v18[2] = v27;
      v6 += a4;
    }
    while (v6 < v5);
  }
  return result;
}

float *CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v6 = result[25];
  v5 = result[26];
  v7 = result[27];
  v8 = result[28];
  v9 = result[29];
  v10 = result[30];
  v11 = result[31];
  v12 = result[32];
  v13 = result[40];
  v14 = v13 == 1.0;
  v15 = v6 * v13;
  v16 = v5 * v13;
  v17 = v7 * v13;
  v18 = v8 * v13;
  v19 = v9 * v13;
  v20 = v10 * v13;
  v21 = v11 * v13;
  v22 = v12 * v13;
  v23 = result[33] * v13;
  if (v14)
  {
    v23 = result[33];
  }
  else
  {
    v7 = v17;
    v8 = v18;
    v9 = v19;
    v10 = v20;
    v11 = v21;
    v12 = v22;
    v5 = v16;
  }
  if (!v14)
    v6 = v15;
  if (a5 * a4)
  {
    v24 = 0;
    v25 = result[37];
    v26 = result[38];
    v27 = result[39];
    do
    {
      v28 = (float *)(a2 + 4 * v24);
      v29 = v28[1];
      v30 = v28[2];
      v31 = v26 + (float)((float)((float)(v9 * v29) + (float)(*v28 * v8)) + (float)(v30 * v10));
      v32 = v27 + (float)((float)((float)(v12 * v29) + (float)(*v28 * v11)) + (float)(v30 * v23));
      *v28 = v25 + (float)((float)((float)(v5 * v29) + (float)(*v28 * v6)) + (float)(v30 * v7));
      v28[1] = v31;
      v28[2] = v32;
      v24 += a4;
    }
    while (v24 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::Convert(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(result + 64);
    do
    {
      v7 = (unint64_t)(*a2 * (uint64_t)v6 + 0x8000) >> 16;
      if (v7 >= 0x1000000)
        v8 = 0x1000000;
      else
        v8 = (unint64_t)(*a2 * (uint64_t)v6 + 0x8000) >> 16;
      if ((v7 & 0x80000000) == 0)
        v9 = v8;
      else
        v9 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = v9;
      v5 += a4;
      a2 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  float v6;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(float *)(result + 100) * *(float *)(result + 160);
    do
    {
      *(float *)a2 = v6 * *(float *)a2;
      *(_DWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      v5 += a4;
      a2 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::Convert(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int8x8_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(result + 64);
    v7 = vand_s8((int8x8_t)vcgez_s32(*(int32x2_t *)(result + 140)), (int8x8_t)vmin_u32(*(uint32x2_t *)(result + 140), (uint32x2_t)0x100000001000000));
    do
    {
      v8 = (unint64_t)(v6 * (uint64_t)*a2 + 0x8000) >> 16;
      if (v8 >= 0x1000000)
        v9 = 0x1000000;
      else
        v9 = (unint64_t)(v6 * (uint64_t)*a2 + 0x8000) >> 16;
      if ((v8 & 0x80000000) == 0)
        v10 = v9;
      else
        v10 = 0;
      *a2 = v10;
      *(int8x8_t *)(a2 + 1) = v7;
      v5 += a4;
      a2 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  float v7;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(result + 152);
    v7 = *(float *)(result + 100) * *(float *)(result + 160);
    do
    {
      *(float *)a2 = v7 * *(float *)a2;
      *(_QWORD *)(a2 + 4) = v6;
      v5 += a4;
      a2 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::Convert(uint64_t result, int8x8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int8x8_t *v13;
  __int32 v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = a5 * a4;
  if (a5 * a4)
  {
    v7 = *(_DWORD *)(result + 92);
    v6 = *(_DWORD *)(result + 96);
    v9 = *(_DWORD *)(result + 76);
    v8 = *(_DWORD *)(result + 80);
    v10 = *(_DWORD *)(result + 68);
    v11 = *(_DWORD *)(result + 140) + 24;
    v12 = *(_DWORD *)(result + 144) + 24;
    v13 = a2 + 1;
    result = 1;
    do
    {
      v14 = v13[-1].i32[1];
      v15 = (unint64_t)(v10 * (uint64_t)v14 + 0x8000) >> 16;
      v16 = (unint64_t)(v8 * (uint64_t)v14 + v9 * (uint64_t)v13[-1].i32[0] + 0x8000) >> 16;
      v17 = v16 - 24;
      if ((int)v16 <= 24)
        v17 = 0;
      if ((int)v16 >= -24)
        LODWORD(v16) = -24;
      v18 = v11 + v16 + v17;
      v19 = (unint64_t)(v6 * (uint64_t)v13->i32[0] + v7 * (uint64_t)v14 + 0x8000) >> 16;
      v20 = v19 - 24;
      if ((int)v19 <= 24)
        v20 = 0;
      if ((int)v19 >= -24)
        LODWORD(v19) = -24;
      v21 = v12 + v19 + v20;
      v13[-1] = vand_s8((int8x8_t)vcgez_s32((int32x2_t)__PAIR64__(v18, v15)), (int8x8_t)vmin_u32((uint32x2_t)__PAIR64__(v18, v15), (uint32x2_t)0x100000001000000));
      if (v21 >= 0x1000000)
        v22 = 0x1000000;
      else
        v22 = v21;
      if (v21 < 0)
        v22 = 0;
      v13->i32[0] = v22;
      result += a4;
      v13 = (int8x8_t *)((char *)v13 + 4 * a4);
    }
    while (result - 1 < v5);
  }
  return result;
}

float *CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = result[26];
  v7 = result[28];
  v6 = result[29];
  v8 = result[32];
  v9 = result[33];
  v10 = result[40];
  v11 = v10 == 1.0;
  v12 = v5 * v10;
  v13 = v7 * v10;
  v14 = v6 * v10;
  v15 = v8 * v10;
  v16 = v9 * v10;
  if (!v11)
  {
    v6 = v14;
    v8 = v15;
    v9 = v16;
    v7 = v13;
    v5 = v12;
  }
  if (a5 * a4)
  {
    v17 = 0;
    v18 = result[37];
    v19 = result[38];
    v20 = result[39];
    do
    {
      v21 = (float *)(a2 + 4 * v17);
      v22 = v21[1];
      v23 = v18 + (float)(v22 * v5);
      v24 = v19 + (float)((float)(v6 * v22) + (float)(*v21 * v7));
      v25 = v20 + (float)((float)(v9 * v21[2]) + (float)(v22 * v8));
      *v21 = v23;
      v21[1] = v24;
      v21[2] = v25;
      v17 += a4;
    }
    while (v17 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

int *CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::Convert(int *result, int8x8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int8x8_t *v11;
  uint64_t v12;
  int v13;
  int *v14;
  __int32 v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = a5 * a4;
  if (a5 * a4)
  {
    v6 = result[34];
    v7 = result[36];
    v8 = result[24];
    v9 = result[22];
    v10 = result[19];
    v11 = a2 + 1;
    v12 = 1;
    v14 = result + 16;
    result = (int *)result[16];
    v13 = v14[1];
    do
    {
      v15 = v11[-1].i32[0];
      v16 = v6 + ((unint64_t)(v13 * (uint64_t)v11[-1].i32[1] + (int)result * (uint64_t)v15 + 0x8000) >> 16);
      v17 = (unint64_t)(v10 * (uint64_t)v15 + 0x8000) >> 16;
      v18 = v7 + ((unint64_t)(v8 * (uint64_t)v11->i32[0] + v9 * (uint64_t)v15 + 0x8000) >> 16);
      v11[-1] = vand_s8((int8x8_t)vcgez_s32((int32x2_t)__PAIR64__(v17, v16)), (int8x8_t)vmin_u32((uint32x2_t)__PAIR64__(v17, v16), (uint32x2_t)0x100000001000000));
      if (v18 >= 0x1000000)
        v19 = 0x1000000;
      else
        v19 = v18;
      if (v18 >= 0)
        v20 = v19;
      else
        v20 = 0;
      v11->i32[0] = v20;
      v12 += a4;
      v11 = (int8x8_t *)((char *)v11 + 4 * a4);
    }
    while (v12 - 1 < v5);
  }
  return result;
}

float *CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v6 = result[25];
  v5 = result[26];
  v7 = result[28];
  v8 = result[31];
  v9 = result[33];
  v10 = result[40];
  v11 = v10 == 1.0;
  v12 = v6 * v10;
  v13 = v5 * v10;
  v14 = v7 * v10;
  v15 = v8 * v10;
  v16 = v9 * v10;
  if (!v11)
  {
    v7 = v14;
    v8 = v15;
    v9 = v16;
    v5 = v13;
    v6 = v12;
  }
  if (a5 * a4)
  {
    v17 = 0;
    v18 = result[37];
    v19 = result[38];
    v20 = result[39];
    do
    {
      v21 = (float *)(a2 + 4 * v17);
      v22 = v19 + (float)(*v21 * v7);
      v23 = v20 + (float)((float)(v9 * v21[2]) + (float)(*v21 * v8));
      *v21 = v18 + (float)((float)(v5 * v21[1]) + (float)(*v21 * v6));
      v21[1] = v22;
      v21[2] = v23;
      v17 += a4;
    }
    while (v17 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  unint64_t v10;
  int v11;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v7 = *(_DWORD *)(result + 68);
    v6 = *(_DWORD *)(result + 72);
    v8 = (int *)(a2 + 4);
    v9 = *(_DWORD *)(result + 64);
    do
    {
      v10 = (unint64_t)(v7 * (uint64_t)*v8
                             + v9 * (uint64_t)*(v8 - 1)
                             + v6 * (uint64_t)*(int *)(a2 + 8 + 4 * v5)
                             + 0x8000) >> 16;
      if (v10 >= 0x1000000)
        result = 0x1000000;
      else
        result = v10;
      if ((v10 & 0x80000000) == 0)
        v11 = result;
      else
        v11 = 0;
      *(v8 - 1) = v11;
      *(_QWORD *)v8 = 0;
      v5 += a4;
      v8 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

float *CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = result[40];
    v7 = result[27] * v6;
    v8 = result[26] * v6;
    v9 = result[25] * v6;
    v10 = (float *)(a2 + 4);
    do
    {
      *(v10 - 1) = (float)((float)(v8 * *v10) + (float)(*(v10 - 1) * v9)) + (float)(*(float *)(a2 + 8 + 4 * v5) * v7);
      *(_QWORD *)v10 = 0;
      v5 += a4;
      v10 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(result + 68);
    v7 = 4;
    do
    {
      v8 = (unint64_t)(*(int *)(a2 + v7) * (uint64_t)v6 + 0x8000) >> 16;
      if (v8 >= 0x1000000)
        v9 = 0x1000000;
      else
        v9 = (unint64_t)(*(int *)(a2 + v7) * (uint64_t)v6 + 0x8000) >> 16;
      if ((v8 & 0x80000000) == 0)
        v10 = v9;
      else
        v10 = 0;
      *(_DWORD *)(a2 + 4 * v5) = v10;
      *(_QWORD *)(a2 + v7) = 0;
      v5 += a4;
      v7 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

{
  unint64_t v5;
  float v6;
  uint64_t v7;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(float *)(result + 104) * *(float *)(result + 160);
    v7 = 4;
    do
    {
      *(float *)(a2 + 4 * v5) = v6 * *(float *)(a2 + v7);
      *(_QWORD *)(a2 + v7) = 0;
      v5 += a4;
      v7 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(result + 96);
    v7 = *(_DWORD *)(result + 80);
    v8 = *(_DWORD *)(result + 64);
    do
    {
      v9 = (int *)(a2 + 4 * v5);
      v10 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      v11 = (unint64_t)(v7 * (uint64_t)v9[1] + 0x8000) >> 16;
      v12 = (unint64_t)(v6 * (uint64_t)v9[2] + 0x8000) >> 16;
      if (v10 >= 0x1000000)
        v13 = 0x1000000;
      else
        v13 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      if ((v10 & 0x80000000) == 0)
        v14 = v13;
      else
        v14 = 0;
      if (v11 >= 0x1000000)
        result = 0x1000000;
      else
        result = v11;
      if ((v11 & 0x80000000) == 0)
        v15 = result;
      else
        v15 = 0;
      *v9 = v14;
      v9[1] = v15;
      if (v12 >= 0x1000000)
        v16 = 0x1000000;
      else
        v16 = v12;
      if ((v12 & 0x80000000) != 0)
        v16 = 0;
      v9[2] = v16;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

float CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::Convert(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float32x2_t v11;
  float32x2_t *v12;
  float32_t v13;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v6 = 0;
    v7.i32[0] = *(_DWORD *)(a1 + 100);
    a6 = *(double *)(a1 + 148);
    v8 = *(float *)(a1 + 156);
    v9 = *(float *)(a1 + 160);
    v10 = *(float *)(a1 + 132) * v9;
    v7.i32[1] = *(_DWORD *)(a1 + 116);
    v11 = vmul_n_f32(v7, v9);
    v12 = a2 + 1;
    do
    {
      v13 = v8 + (float)(v12->f32[v6] * v10);
      *a2 = vmla_f32(*(float32x2_t *)&a6, v11, *a2);
      v12->f32[v6] = v13;
      v6 += a4;
      a2 = (float32x2_t *)((char *)a2 + 4 * a4);
    }
    while (v6 < a5 * a4);
  }
  return *(float *)&a6;
}

void CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(result + 88);
    v7 = *(_DWORD *)(result + 76);
    v8 = *(_DWORD *)(result + 64);
    do
    {
      v9 = (int *)(a2 + 4 * v5);
      v10 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      v11 = (unint64_t)(v7 * (uint64_t)*v9 + 0x8000) >> 16;
      v12 = (unint64_t)(v6 * (uint64_t)*v9 + 0x8000) >> 16;
      if (v10 >= 0x1000000)
        v13 = 0x1000000;
      else
        v13 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      if ((v10 & 0x80000000) == 0)
        v14 = v13;
      else
        v14 = 0;
      if (v11 >= 0x1000000)
        result = 0x1000000;
      else
        result = v11;
      if ((v11 & 0x80000000) == 0)
        v15 = result;
      else
        v15 = 0;
      *v9 = v14;
      v9[1] = v15;
      if (v12 >= 0x1000000)
        v16 = 0x1000000;
      else
        v16 = v12;
      if ((v12 & 0x80000000) == 0)
        v17 = v16;
      else
        v17 = 0;
      v9[2] = v17;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

float *CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a5 * a4)
  {
    v5 = 0;
    v6 = result[40];
    v7 = result[31] * v6;
    v8 = result[28] * v6;
    v9 = result[25] * v6;
    do
    {
      v10 = (float *)(a2 + 4 * v5);
      v11 = v8 * *v10;
      v12 = v7 * *v10;
      *v10 = v9 * *v10;
      v10[1] = v11;
      v10[2] = v12;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMMtxOnly::ConvertFloat(float *result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v6 = result[9];
  v5 = result[10];
  v8 = result[11];
  v7 = result[12];
  v9 = result[13];
  v10 = a5 == 1.0;
  v11 = v6 * a5;
  v12 = v5 * a5;
  v13 = v8 * a5;
  v14 = v7 * a5;
  v15 = v9 * a5;
  v16 = result[15] * a5;
  v17 = result[16] * a5;
  v18 = result[17] * a5;
  if (a5 == 1.0)
    v19 = result[14];
  else
    v19 = result[14] * a5;
  if (v10)
    v20 = result[15];
  else
    v20 = v16;
  if (v10)
    v21 = result[16];
  else
    v21 = v17;
  if (v10)
    v22 = result[17];
  else
    v22 = v18;
  if (!v10)
  {
    v9 = v15;
    v7 = v14;
    v8 = v13;
    v5 = v12;
    v6 = v11;
  }
  if (a4 * a3)
  {
    v23 = 0;
    do
    {
      v24 = (float *)(a2 + 4 * v23);
      v25 = v24[1];
      v26 = v24[2];
      v27 = (float)((float)(v9 * v25) + (float)(*v24 * v7)) + (float)(v26 * v19);
      v28 = (float)((float)(v21 * v25) + (float)(*v24 * v20)) + (float)(v26 * v22);
      *v24 = (float)((float)(v5 * v25) + (float)(*v24 * v6)) + (float)(v26 * v8);
      v24[1] = v27;
      v24[2] = v28;
      v23 += a3;
    }
    while (v23 < a4 * a3);
  }
  return result;
}

int *CMMMtxOnly::ConvertMax(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (int *)(a2 + 4 * v4);
      v6 = v5[1];
      v7 = v5[2];
      v8 = (unint64_t)(result[1] * (uint64_t)v6 + *result * (uint64_t)*v5 + result[2] * (uint64_t)v7 + 0x8000) >> 16;
      v9 = (unint64_t)(result[4] * (uint64_t)v6 + result[3] * (uint64_t)*v5 + result[5] * (uint64_t)v7 + 0x8000) >> 16;
      v10 = (unint64_t)(result[7] * (uint64_t)v6 + result[6] * (uint64_t)*v5 + result[8] * (uint64_t)v7 + 0x8000) >> 16;
      if (v8 >= 0x1000000)
        v11 = 0x1000000;
      else
        v11 = (unint64_t)(result[1] * (uint64_t)v6 + *result * (uint64_t)*v5 + result[2] * (uint64_t)v7 + 0x8000) >> 16;
      if ((v8 & 0x80000000) != 0)
        v11 = 0;
      if (v9 >= 0x1000000)
        v12 = 0x1000000;
      else
        v12 = v9;
      if ((v9 & 0x80000000) != 0)
        v12 = 0;
      *v5 = v11;
      v5[1] = v12;
      if (v10 >= 0x1000000)
        v13 = 0x1000000;
      else
        v13 = v10;
      if ((v10 & 0x80000000) == 0)
        v14 = v13;
      else
        v14 = 0;
      v5[2] = v14;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMMatrix::CMMMatrix(uint64_t result, _DWORD *a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  v3 = 0;
  *(_QWORD *)result = off_1E215FED0;
  *(_DWORD *)(result + 80) = a2[3] << 8;
  *(_DWORD *)(result + 84) = a2[7] << 8;
  *(_DWORD *)(result + 88) = a2[11] << 8;
  *(_DWORD *)(result + 92) = a2[15];
  *(_DWORD *)(result + 96) = a2[19];
  *(_DWORD *)(result + 100) = a2[23];
  *(float *)(result + 104) = a3;
  v4 = result;
  do
  {
    for (i = 0; i != 3; ++i)
    {
      v6 = v4 + i * 4;
      *(_DWORD *)(v6 + 8) = a2[i];
      *(_DWORD *)(v6 + 44) = a2[i + 12];
    }
    ++v3;
    v4 += 12;
    a2 += 4;
  }
  while (v3 != 3);
  return result;
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvNode::SetNOP(uint64_t this)
{
  *(_BYTE *)(this + 32) = 1;
  return this;
}

void CMMConvGrayToRGB::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int *v6;
  int v7;

  if (a5 * a4)
  {
    v5 = 0;
    do
    {
      v6 = (int *)(a2 + 4 * v5);
      v7 = *v6;
      v6[1] = *v6;
      v6[2] = v7;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
}

float CMMConvGrayToRGB::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  float result;

  if (a5 * a4)
  {
    v5 = 0;
    do
    {
      v6 = a2 + 4 * v5;
      result = *(float *)v6;
      *(_DWORD *)(v6 + 4) = *(_DWORD *)v6;
      *(float *)(v6 + 8) = result;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvGrayToRGB::ClampInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = *(float *)(a2 + 4 * v4);
      if (v5 <= 1.0)
        v6 = *(float *)(a2 + 4 * v4);
      else
        v6 = 1.0;
      if (v5 >= 0.0)
        v7 = v6;
      else
        v7 = 0.0;
      *(float *)(a2 + 4 * v4) = v7;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvGrayToRGB::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvGrayToRGB::GetCLUTPoints(CMMConvGrayToRGB *this, int a2)
{
  if (a2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t CMMConvGrayToRGB::GetPrecision(CMMConvGrayToRGB *this)
{
  return 1;
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvRGBToRGB::~CMMConvRGBToRGB(CMMConvRGBToRGB *this)
{
  pthread_mutex_t **v1;

  CMMConvRGBToRGB::~CMMConvRGBToRGB(this);
  CMMBase::operator delete(v1);
}

{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0;
  *(_QWORD *)this = off_1E215D480;
  do
  {
    v3 = (char *)this + v2;
    v4 = *(_QWORD *)((char *)this + v2 + 48);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *((_QWORD *)v3 + 6) = 0;
    }
    v5 = *((_QWORD *)v3 + 10);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      *((_QWORD *)v3 + 10) = 0;
    }
    v2 += 8;
  }
  while (v2 != 24);
}

uint64_t CMMConvRGBToRGB::Collapse(CMMConvRGBToRGB *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvRGBToRGB::IsNOP(CMMConvRGBToRGB *this)
{
  return 0;
}

uint64_t CMMConvRGBToRGB::RuntimeAdjust(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 416))
  {
    v2 = *(unsigned __int8 *)(result + 1841);
    *(_BYTE *)(a2 + 416) = v2;
    if (v2 && !*(_BYTE *)(result + 1840))
    {
      v3 = 0;
      v4 = *(_QWORD *)(result + 104);
      do
      {
        *(float32x4_t *)(result + 672 + v3) = vcvtq_f32_s32(*(int32x4_t *)(v4 + v3));
        v3 += 16;
      }
      while (v3 != 1024);
      *(_BYTE *)(result + 1840) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 416) = 0;
  }
  return result;
}

void CMMConvRGBToRGB::Convert(float32x4_t *a1, unsigned __int8 *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unsigned __int8 *v6;
  float32x4_t *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint16x4_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  _DWORD *exception;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  _BYTE v63[1536];
  uint64_t v64;

  v5 = a5;
  v6 = a2;
  v64 = *MEMORY[0x1E0C80C00];
  if (*a3 && a1[115].i8[1])
  {
    if (a4 == 2)
    {
      if ((int)a5 >= 1)
      {
        v7 = a1 + 42;
        v8 = a2 + 2;
        v9 = a2 + 1;
        v10 = a1[8].i64[0];
        v61 = a1[107];
        v62 = a1[106];
        v59 = a1[109];
        v60 = a1[108];
        v57 = a1[111];
        v58 = a1[110];
        v55 = a1[113];
        v56 = a1[112];
        v54 = a1[114];
        do
        {
          v11 = (uint16x4_t *)v63;
          bzero(v63, 0x600uLL);
          v12 = 0;
          if (v5 >= 64)
            v13 = 64;
          else
            v13 = v5;
          v14 = v8;
          v15 = v9;
          v16 = v6;
          do
          {
            v17.i32[0] = v7->i32[*v16];
            v18.i32[0] = v7->i32[*v15];
            v17.i32[1] = v7->i32[v16[8]];
            v18.i32[1] = v7->i32[v15[8]];
            v17.i32[2] = v7->i32[v16[16]];
            v18.i32[2] = v7->i32[v15[16]];
            v17.i32[3] = v7->i32[v16[24]];
            v18.i32[3] = v7->i32[v15[24]];
            v19.i32[0] = v7->i32[*v14];
            v19.i32[1] = v7->i32[v14[8]];
            v19.i32[2] = v7->i32[v14[16]];
            v19.i32[3] = v7->i32[v14[24]];
            *v11 = vmin_u16((uint16x4_t)vraddhn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v62, v17), v61, v18), v60, v19)), (int32x4_t)0), (uint16x4_t)0x1000100010001000);
            v11[1] = vmin_u16((uint16x4_t)vraddhn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v59, v17), v58, v18), v57, v19)), (int32x4_t)0), (uint16x4_t)0x1000100010001000);
            v11[2] = vmin_u16((uint16x4_t)vraddhn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v56, v17), v55, v18), v54, v19)), (int32x4_t)0), (uint16x4_t)0x1000100010001000);
            v16 += 32;
            v15 += 32;
            v14 += 32;
            v12 += 4;
            v11 += 3;
          }
          while (v12 < v13);
          v20 = 0;
          v21 = (unsigned __int16 *)v63;
          do
          {
            *v6 = *(_BYTE *)(v10 + *v21);
            *v9 = *(_BYTE *)(v10 + v21[4]);
            *v8 = *(_BYTE *)(v10 + v21[8]);
            v6[8] = *(_BYTE *)(v10 + v21[1]);
            v9[8] = *(_BYTE *)(v10 + v21[5]);
            v8[8] = *(_BYTE *)(v10 + v21[9]);
            v6[16] = *(_BYTE *)(v10 + v21[2]);
            v9[16] = *(_BYTE *)(v10 + v21[6]);
            v8[16] = *(_BYTE *)(v10 + v21[10]);
            v6[24] = *(_BYTE *)(v10 + v21[3]);
            v9[24] = *(_BYTE *)(v10 + v21[7]);
            v8[24] = *(_BYTE *)(v10 + v21[11]);
            v6 += 32;
            v9 += 32;
            v8 += 32;
            v20 += 4;
            v21 += 12;
          }
          while (v20 < v13);
          v5 -= v13;
        }
        while (v5 > 0);
      }
      return;
    }
LABEL_35:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (a4 != 2)
    goto LABEL_35;
  v22 = 2 * a5;
  if (2 * a5)
  {
    v23 = 0;
    v24 = (_DWORD *)a1[4].i64[1];
    v25 = v24[16];
    v26 = v24[17];
    v27 = v24[18];
    v28 = v24[19];
    v29 = v24[20];
    v30 = v24[21];
    v31 = v24[22];
    v32 = v24[23];
    v33 = v24[24];
    v34 = a1[6].i64[1];
    v35 = a1[7].i64[0];
    v36 = a1[7].i64[1];
    v37 = a1[8].i64[0];
    v39 = a1[8].i64[1];
    v38 = a1[9].i64[0];
    do
    {
      v40 = *(_DWORD *)&v6[4 * v23];
      v41 = *(_DWORD *)(v34 + 4 * v40);
      v42 = *(_DWORD *)(v35 + 4 * BYTE1(v40));
      v43 = *(_DWORD *)(v36 + 4 * BYTE2(v40));
      v44 = v25 * v41 + v26 * v42 + v27 * v43;
      v45 = v28 * v41 + v29 * v42 + v30 * v43;
      v46 = v31 * v41 + v32 * v42 + v33 * v43;
      v47 = (v46 + 0x8000) >> 16;
      if (((v44 + 0x8000) >> 16) >= 0x1000)
        v48 = 4096;
      else
        v48 = (v44 + 0x8000) >> 16;
      if (v44 < -32768)
        v48 = 0;
      v49 = *(unsigned __int8 *)(v37 + v48);
      if (((v45 + 0x8000) >> 16) >= 0x1000)
        v50 = 4096;
      else
        v50 = (v45 + 0x8000) >> 16;
      if (v45 < -32768)
        v50 = 0;
      v51 = *(unsigned __int8 *)(v39 + v50);
      if (v47 >= 0x1000)
        v47 = 4096;
      if (v46 >= -32768)
        v52 = v47;
      else
        v52 = 0;
      *(_DWORD *)&v6[4 * v23] = v49 | (v51 << 8) | (*(unsigned __int8 *)(v38 + v52) << 16);
      v23 += 2;
    }
    while (v23 < v22);
  }
}

uint64_t CMMConvRGBToRGB::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;

  v9 = (uint64_t **)(a1 + 48);
  v10 = -7;
  do
  {
    v11 = *v9;
    v12 = **v9;
    v9 = (uint64_t **)(*v9 + 2);
    result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, a2, a3, a4, a5);
  }
  while (!__CFADD__(v10++, 1));
  return result;
}

{
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t result;

  v9 = (_QWORD *)(a1 + 48);
  v10 = -7;
  do
  {
    v11 = (_QWORD *)*v9;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 40))(*v9))
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + 136))(v11, a2, a4, a5);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 112))(v11, a2, a3, a4, a5);
    result = (*(uint64_t (**)(_QWORD *))(*v11 + 64))(v11);
    if ((_DWORD)result)
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + 160))(v11, a2, a4, a5);
    v9 = v11 + 2;
  }
  while (!__CFADD__(v10++, 1));
  return result;
}

void CMMConvRGBToRGB::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvRGBToRGB::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvRGBToRGB::GetCLUTPoints(CMMConvRGBToRGB *this, int a2)
{
  if (a2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t CMMConvRGBToRGB::GetMaxNofChannels(CMMConvRGBToRGB *this)
{
  return 3;
}

uint64_t CMMConvRGBToRGB::GetNofSubNodes(CMMConvRGBToRGB *this)
{
  return 7;
}

uint64_t CMMConvRGBToRGB::GetPrecision(CMMConvRGBToRGB *this)
{
  return 1;
}

uint64_t CMMConvRGBToRGB::GetTransformType(CMMConvRGBToRGB *this, const __CFDictionary *a2)
{
  uint64_t v3;
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  LODWORD(v3) = 0;
  v4 = (uint64_t **)((char *)this + 48);
  v5 = -7;
  do
  {
    v6 = *v4;
    v7 = **v4;
    v4 = (uint64_t **)(*v4 + 2);
    v3 = (*(unsigned int (**)(uint64_t *, const __CFDictionary *))(v7 + 200))(v6, a2) | v3;
  }
  while (!__CFADD__(v5++, 1));
  return v3;
}

__CFArray *CMMConvRGBToRGB::FlattenConversion(CMMConvRGBToRGB *this, const __CFDictionary *a2)
{
  __CFArray *Mutable;
  _QWORD *i;
  const void *v6;
  const void *v7;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    for (i = (_QWORD *)*((_QWORD *)this + 6); i; i = (_QWORD *)i[2])
    {
      if (((*(uint64_t (**)(_QWORD *))(*i + 224))(i) & 1) == 0)
      {
        v6 = (const void *)(*(uint64_t (**)(_QWORD *, const __CFDictionary *))(*i + 208))(i, a2);
        if (!v6)
        {
          CFArrayRemoveAllValues(Mutable);
          return Mutable;
        }
        v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
    }
  }
  return Mutable;
}

uint64_t CMMConvRGBToRGB::GetFunctionType(CMMConvRGBToRGB *this)
{
  return 4;
}

uint64_t CMMConvRGBToRGB::GetNodeAggregate(CMMConvRGBToRGB *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t CMMConvHLGOOTF::Collapse(CMMConvHLGOOTF *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvHLGOOTF::IsNOP(CMMConvHLGOOTF *this)
{
  return 0;
}

void CMMConvHLGOOTF::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

void CMMConvHLGOOTF::Convert(CMMConvHLGOOTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  float *v10;
  int v11;
  int v12;

  v5 = a5 * a4;
  if (a5 * a4)
  {
    v9 = 0;
    do
    {
      v10 = (float *)(a2 + 4 * v9);
      *v10 = CMMConvHLGOOTF::Reference_HLG_OOTF(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvHLGOOTF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvHLGOOTF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (float *)(a2 + 4 * v4);
      v6 = v5[1];
      v7 = *(float *)(result + 56);
      if (*v5 <= v7)
        v7 = *v5;
      if (*v5 >= 0.0)
        v8 = v7;
      else
        v8 = 0.0;
      *v5 = v8;
      v9 = *(float *)(result + 56);
      v10 = v5[2];
      if (v6 <= v9)
        v9 = v6;
      if (v6 < 0.0)
        v9 = 0.0;
      v5[1] = v9;
      v11 = *(float *)(result + 56);
      if (v10 <= v11)
        v11 = v10;
      if (v10 < 0.0)
        v11 = 0.0;
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

uint64_t CMMConvHLGOOTF::GetMaxNofChannels(CMMConvHLGOOTF *this)
{
  return 3;
}

uint64_t CMMConvHLGOOTF::GetPrecision(CMMConvHLGOOTF *this)
{
  return 5;
}

uint64_t CMMConvHLGOOTF::GetTransformType(CMMConvHLGOOTF *this, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t v4;

  if (!cf)
    return 2;
  v3 = CFGetTypeID(cf);
  v4 = 2;
  if (v3 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("com.apple.cmm.HLGOOTF3DLut")) == (const void *)*MEMORY[0x1E0C9AE50])
      return 8;
    else
      return 2;
  }
  return v4;
}

__CFDictionary *CMMConvHLGOOTF::FlattenConversion(CMMConvHLGOOTF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeID v7;
  CFNumberRef v8;
  CFNumberRef v9;
  __int128 v10;
  CFDataRef v11;
  CFTypeID v12;
  const void *Value;
  CFNumberRef v14;
  CFNumberRef v15;
  int v16;
  const __CFNumber *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const __CFNumber *v23;
  unsigned int v24;
  unint64_t v25;
  __CFData *v26;
  __CFData *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  UInt8 *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  int v44;
  int v45;
  CFNumberRef v46;
  CFNumberRef v47;
  float v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFArrayRef v51;
  UInt8 *MutableBytePtr;
  __CFData *cf;
  int v55;
  __CFDictionary *v56;
  float *v57;
  uint64_t v58;
  UInt8 *v59;
  uint64_t v60;
  unint64_t v61;
  int valuePtr;
  UInt8 bytes[16];
  uint64_t v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  valuePtr = 3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (a2)
  {
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID()
      && CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGOOTF3DLut")) == (const void *)*MEMORY[0x1E0C9AE50])
    {
      HIDWORD(v61) = 0;
      v12 = CFGetTypeID(a2);
      if (v12 == CFDictionaryGetTypeID())
      {
        Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        HIDWORD(v61) = NxMTransformFormatFromValue(Value);
      }
      v14 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
      if (v14)
      {
        v15 = v14;
        CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v14);
        CFRelease(v15);
      }
      v16 = HIDWORD(v61);
      LODWORD(v61) = 0;
      v17 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGOOTF3DLutGridPoints"));
      *(_DWORD *)bytes = 0;
      if (v17 && CFNumberGetValue(v17, kCFNumberSInt32Type, bytes) == 1)
      {
        v22 = *(_DWORD *)bytes;
        LODWORD(v61) = *(_DWORD *)bytes;
      }
      else
      {
        v22 = v61;
      }
      if (!v22)
      {
        v23 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
        if (v23)
          CFNumberGetValue(v23, kCFNumberSInt32Type, &v61);
      }
      v24 = v61;
      if (!(_DWORD)v61)
      {
        v24 = 32;
        LODWORD(v61) = 32;
      }
      v25 = calculate_clut_capacity(v24, 3, 3, 4, v18, v19, v20, v21);
      v26 = CFDataCreateMutable(0, v25);
      if (v26)
      {
        v27 = v26;
        v55 = v16;
        v56 = Mutable;
        CFDataSetLength(v26, v25);
        cf = v27;
        MutableBytePtr = CFDataGetMutableBytePtr(v27);
        if (v25 >> 62)
          v28 = -1;
        else
          v28 = 4 * v25;
        v57 = (float *)operator new[](v28, MEMORY[0x1E0DE4E10]);
        if (NxMLUTFillWithFloatUniformGridData(v57, v61, (v61 * v61 * v61)))
        {
          v31 = v61;
          if ((_DWORD)v61)
          {
            v32 = 0;
            v33 = MutableBytePtr + 8;
            v34 = 12 * v61;
            v58 = v34 * v61;
            v35 = v57 + 2;
            do
            {
              v59 = v33;
              v60 = v32;
              v36 = 0;
              v37 = v35;
              do
              {
                v38 = v37;
                v39 = (float *)v33;
                v40 = v31;
                do
                {
                  v41 = *(v38 - 2);
                  v42 = *(v38 - 1);
                  v43 = *v38;
                  v38 += 3;
                  *(v39 - 2) = CMMConvHLGOOTF::Reference_HLG_OOTF(this, v41, v42, v43);
                  *((_DWORD *)v39 - 1) = v44;
                  *(_DWORD *)v39 = v45;
                  v39 += 3;
                  --v40;
                }
                while (v40);
                ++v36;
                v33 += v34;
                v37 = (float *)((char *)v37 + v34);
              }
              while (v36 != v31);
              v32 = v60 + 1;
              v33 = &v59[v58];
              v35 = (float *)((char *)v35 + v58);
            }
            while (v60 + 1 != v31);
          }
        }
        if (v55 == 2)
        {
          v11 = cf;
        }
        else
        {
          v11 = NxMLUTCreateData(v55, MutableBytePtr, 1, v61, 3, 3, v29, v30);
          CFRelease(cf);
        }
        Mutable = v56;
        if (v57)
          MEMORY[0x18D77955C](v57, 0x1000C8052888210);
        v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v61);
        if (v11)
        {
          v47 = v46;
          if (v46)
          {
            CFDictionaryAddValue(v56, kColorSyncConversionGridPoints, v46);
            CFRelease(v47);
          }
          goto LABEL_10;
        }
      }
      else
      {
        CFNumberCreate(0, kCFNumberSInt32Type, &v61);
      }
LABEL_45:
      v11 = Mutable;
      Mutable = 0;
      goto LABEL_46;
    }
  }
  HIDWORD(v61) = 7;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
  if (v8)
  {
    v9 = v8;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v8);
    CFRelease(v9);
  }
  *(_QWORD *)&v10 = *((_QWORD *)this + 6);
  *((_QWORD *)&v10 + 1) = *(_QWORD *)((char *)this + 60);
  *(_OWORD *)bytes = v10;
  v64 = *(_QWORD *)((char *)this + 68);
  v65 = 0;
  v11 = CFDataCreate(0, bytes, 28);
  if (!v11)
    goto LABEL_45;
LABEL_10:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v11);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v11);
LABEL_46:
  CFRelease(v11);
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
  CMMConvNode::AddClampingInfo(this, Mutable);
  v48 = *((float *)this + 14);
  v61 = LODWORD(v48);
  if (v48 != 1.0)
  {
    v49 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)&v61 + 4);
    v50 = CFNumberCreate(0, kCFNumberFloat32Type, &v61);
    *(_QWORD *)bytes = v49;
    *(_QWORD *)&bytes[8] = v50;
    v51 = CFArrayCreate(0, (const void **)bytes, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v49);
    CFRelease(v50);
    if (v51)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionOutputRange"), v51);
      CFRelease(v51);
    }
  }
  return Mutable;
}

uint64_t CMMConvHLGOOTF::GetFunctionType(CMMConvHLGOOTF *this)
{
  return 3;
}

unint64_t calculate_clut_capacity(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v10 = a2;
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= a1;
      v15 = v12 >= v13 && v12 >= a1;
      CMMThrowExceptionWithLog(v15, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      --v10;
    }
    while (v10);
    if (!v12)
    {
      v16 = 0;
      v17 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = 1;
  }
  v18 = (v12 * (unsigned __int128)(unint64_t)(a4 * a3)) >> 64;
  v16 = a4 * a3 * v12;
  if (v18)
    v17 = 4294967246;
  else
    v17 = 0;
LABEL_16:
  CMMThrowExceptionOnError(v17);
  return v16;
}

uint64_t NxMLUTFillWithFloatUniformGridData(float *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  _QWORD v10[4];
  _QWORD v11[4];

  v3 = 0;
  if (a1 && a2 <= 0x100)
  {
    v6 = 3 * a3;
    v7 = 12 * a3;
    v8 = (unsigned __int16 *)operator new[](12 * a3, MEMORY[0x1E0DE4E10]);
    v3 = NxMLUTFillWith16BitUniformGridData(v8, a2, 3uLL, v6);
    if ((_DWORD)v3)
    {
      v11[0] = v8;
      v11[1] = 1;
      v11[2] = v6;
      v11[3] = 2 * v6;
      v10[0] = a1;
      v10[1] = 1;
      v10[2] = v6;
      v10[3] = v7;
      ColorSync_vImageConvert_16UToF((uint64_t)v11, (uint64_t)v10);
    }
    if (v8)
      MEMORY[0x18D77955C](v8, 0x1000C80BDFB0063);
  }
  return v3;
}

float CMMConvHLGOOTF::Reference_HLG_OOTF(CMMConvHLGOOTF *this, float a2, float a3, float a4)
{
  float v5;
  float v6;
  float v7;
  float v8;

  v5 = (float)((float)(*((float *)this + 16) * a3) + (float)(a2 * *((float *)this + 15)))
     + (float)(a4 * *((float *)this + 17));
  if (a3 <= a4)
    a3 = a4;
  if (a3 < a2)
    a3 = a2;
  v6 = v5 + (float)(a3 * *((float *)this + 18));
  v7 = fmaxf(fabsf(v6), 1.1755e-38);
  if (v6 >= 0.0)
    v8 = *((float *)this + 13);
  else
    v8 = -*((float *)this + 13);
  return (float)(v8 * powf(v7, *((float *)this + 12))) * a2;
}

unsigned __int16 *repackage_RGB16_to_RGBX16(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;

  if (result && a3)
  {
    v3 = 0;
    v4 = (uint64_t)(result + 2);
    v5 = a2 + 2;
    do
    {
      v6 = 0;
      v7 = v5;
      result = (unsigned __int16 *)v4;
      do
      {
        v8 = v7;
        v9 = result;
        v10 = a3;
        do
        {
          *(v9 - 2) = *(v8 - 2);
          *(v9 - 1) = *(v8 - 1);
          *v9 = *v8;
          v9[1] = -1;
          v9 += 4;
          v8 += 3 * a3 * a3;
          --v10;
        }
        while (v10);
        ++v6;
        result += 4 * a3;
        v7 += 3 * a3;
      }
      while (v6 != a3);
      ++v3;
      v4 += 8 * a3 * a3;
      v5 += 3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t repackage_CMYK16_to_RGBX16(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;

  if (result && a3)
  {
    v3 = 0;
    v4 = a3 * a3 * a3;
    v5 = 8 * v4;
    v6 = (unsigned __int16 *)(result + 4);
    v7 = a2 + 2;
    v8 = 6 * v4;
    do
    {
      result = 0;
      v9 = v7;
      v10 = v6;
      do
      {
        v11 = 0;
        v12 = v9;
        v13 = v10;
        do
        {
          v14 = v12;
          v15 = v13;
          v16 = a3;
          do
          {
            *(v15 - 2) = *(v14 - 2);
            *(v15 - 1) = *(v14 - 1);
            *v15 = *v14;
            v15[1] = -1;
            v15 += 4;
            v14 = (unsigned __int16 *)((char *)v14 + v8);
            --v16;
          }
          while (v16);
          ++v11;
          v13 += 4 * a3;
          v12 += 3 * a3 * a3;
        }
        while (v11 != a3);
        ++result;
        v10 += 4 * a3 * a3;
        v9 += 3 * a3;
      }
      while (result != a3);
      ++v3;
      v6 = (unsigned __int16 *)((char *)v6 + v5);
      v7 += 3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t NxMLUTFillWith16BitUniformGridData(unsigned __int16 *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v21;
  uint64_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  float64x2_t v26;
  int64x2_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64x2_t v33;
  int32x2_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  _BOOL8 v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  _OWORD v48[4];
  _OWORD v49[4];
  _WORD v50[1024];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = (a2 > 0x100 || a3 <= 1) && (a2 > 0x400 || a3 != 1);
  result = 0;
  if (!a1 || v8)
    return result;
  bzero(v50, 0x800uLL);
  memset(v48, 0, sizeof(v48));
  if (a3)
  {
    v17 = 1;
    v18 = a3;
    do
    {
      v19 = v17 * a2;
      v21 = v17 * a2 >= v17 && v19 >= a2;
      CMMThrowExceptionWithLog(v21, "Overflow in Power", v11, v12, v13, v14, v15, v16);
      v17 = v19;
      --v18;
    }
    while (v18);
    if (!a2)
      goto LABEL_30;
LABEL_24:
    v22 = 0;
    v23 = (uint64x2_t)vdupq_n_s64(a2 - 1);
    v24 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(a2 - 1)), 0);
    v25 = (int64x2_t)xmmword_18B3EA6B0;
    v26 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    __asm { FMOV            V4.2D, #0.5 }
    v30 = vdupq_n_s64(2uLL);
    do
    {
      v31 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v25));
      v32 = v22 + 1;
      v33.i64[0] = v22;
      v33.i64[1] = v22 + 1;
      v34 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q4, v26, vdivq_f64(vcvtq_f64_u64(v33), v24)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
      if ((v31.i8[0] & 1) != 0)
        v50[v22] = v34.i16[0];
      if ((v31.i8[4] & 1) != 0)
        v50[v22 + 1] = v34.i16[2];
      v25 = vaddq_s64(v25, v30);
      v22 += 2;
    }
    while (v32 + 1 != ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL));
    goto LABEL_30;
  }
  v19 = 1;
  if (a2)
    goto LABEL_24;
LABEL_30:
  if (a3)
  {
    v35 = 0;
    do
    {
      if ((_DWORD)v35)
      {
        v36 = 1;
        v37 = v35;
        do
        {
          v38 = v36 * a2;
          v40 = v36 * a2 >= v36 && v38 >= a2;
          CMMThrowExceptionWithLog(v40, "Overflow in Power", v11, v12, v13, v14, v15, v16);
          v36 = v38;
          --v37;
        }
        while (v37);
      }
      else
      {
        v38 = 1;
      }
      *((_DWORD *)v48 + v35++) = v38;
    }
    while (v35 != a3);
  }
  if (!v19)
    return 1;
  v41 = 0;
  v42 = 0;
  while (1)
  {
    memset(v49, 0, sizeof(v49));
    if (a3 == 1)
      break;
    v43 = a3 - 1;
    do
    {
      v44 = *((unsigned int *)v48 + v43);
      *((_DWORD *)v49 + v43) = v41 / v44;
      v41 %= v44;
      --v43;
    }
    while (v43);
    if (v41 < a2)
      goto LABEL_53;
    if (a3)
      goto LABEL_54;
LABEL_57:
    v41 = ++v42;
    if (v19 <= v42)
      return 1;
  }
  if (v41 >= a2)
    return 0;
LABEL_53:
  LODWORD(v49[0]) = v41;
  if (!a3)
    goto LABEL_57;
LABEL_54:
  v45 = 0;
  v46 = a3 + a3 * v42 - 1;
  v47 = 1;
  while (v46 < a4)
  {
    a1[v46] = v50[*((unsigned int *)v49 + v45)];
    v45 = v47;
    --v46;
    ++v47;
    if (v45 >= a3)
      goto LABEL_57;
  }
  return 0;
}

void CMMConvInvHLGOOTF::Convert(CMMConvInvHLGOOTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  float *v10;
  int v11;
  int v12;

  v5 = a5 * a4;
  if (a5 * a4)
  {
    v9 = 0;
    do
    {
      v10 = (float *)(a2 + 4 * v9);
      *v10 = CMMConvInvHLGOOTF::Reference_Inv_HLG_OOTF(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvInvHLGOOTF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v9;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    v6 = (float32x2_t)vdup_n_s32(0x447A0000u);
    do
    {
      v7 = v5->f32[v4];
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, v6), (int8x8_t)v6, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v8 = 1000.0;
      if (v7 <= 1000.0)
        v8 = v7;
      if (v7 >= 0.0)
        v9 = v8;
      else
        v9 = 0.0;
      v5->f32[v4] = v9;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvInvHLGOOTF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (float *)(a2 + 4 * v4);
      v6 = v5[1];
      v7 = 1.0 / *(float *)(result + 84);
      if (*v5 <= v7)
        v7 = *v5;
      v8 = v5[2];
      if (*v5 < 0.0)
        v7 = 0.0;
      *v5 = v7;
      v9 = 1.0 / *(float *)(result + 84);
      if (v6 <= v9)
        v9 = v6;
      if (v6 >= 0.0)
        v10 = v9;
      else
        v10 = 0.0;
      v5[1] = v10;
      v11 = 1.0 / *(float *)(result + 84);
      if (v8 <= v11)
        v11 = v8;
      if (v8 >= 0.0)
        v12 = v11;
      else
        v12 = 0.0;
      v5[2] = v12;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

uint64_t CMMConvInvHLGOOTF::GetMaxNofChannels(CMMConvInvHLGOOTF *this)
{
  return 3;
}

uint64_t CMMConvInvHLGOOTF::GetPrecision(CMMConvInvHLGOOTF *this)
{
  return 5;
}

uint64_t CMMConvInvHLGOOTF::GetTransformType(CMMConvInvHLGOOTF *this, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t v4;

  if (!cf)
    return 2;
  v3 = CFGetTypeID(cf);
  v4 = 2;
  if (v3 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("com.apple.cmm.InvHLGOOTF3DLut")) == (const void *)*MEMORY[0x1E0C9AE50])
      return 8;
    else
      return 2;
  }
  return v4;
}

__CFDictionary *CMMConvInvHLGOOTF::FlattenConversion(CMMConvInvHLGOOTF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeID v7;
  CFNumberRef v8;
  CFNumberRef v9;
  __int128 v10;
  CFDataRef v11;
  CFTypeID v12;
  const void *Value;
  CFNumberRef v14;
  CFNumberRef v15;
  int v16;
  const __CFNumber *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const __CFNumber *v23;
  unsigned int v24;
  unint64_t v25;
  __CFData *v26;
  __CFData *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  UInt8 *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  int v44;
  int v45;
  CFNumberRef v46;
  CFNumberRef v47;
  unsigned int v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFArrayRef v51;
  UInt8 *MutableBytePtr;
  __CFData *cf;
  int v55;
  __CFDictionary *v56;
  float *v57;
  uint64_t v58;
  UInt8 *v59;
  uint64_t v60;
  unint64_t v61;
  int valuePtr;
  UInt8 bytes[16];
  uint64_t v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  valuePtr = 3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (a2)
  {
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID()
      && CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.InvHLGOOTF3DLut")) == (const void *)*MEMORY[0x1E0C9AE50])
    {
      HIDWORD(v61) = 2;
      v12 = CFGetTypeID(a2);
      if (v12 == CFDictionaryGetTypeID())
      {
        Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        HIDWORD(v61) = NxMTransformFormatFromValue(Value);
      }
      v14 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
      if (v14)
      {
        v15 = v14;
        CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v14);
        CFRelease(v15);
      }
      v16 = HIDWORD(v61);
      LODWORD(v61) = 0;
      v17 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.InvHLGOOTF3DLutGridPoints"));
      *(_DWORD *)bytes = 0;
      if (v17 && CFNumberGetValue(v17, kCFNumberSInt32Type, bytes) == 1)
      {
        v22 = *(_DWORD *)bytes;
        LODWORD(v61) = *(_DWORD *)bytes;
      }
      else
      {
        v22 = v61;
      }
      if (!v22)
      {
        v23 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
        if (v23)
          CFNumberGetValue(v23, kCFNumberSInt32Type, &v61);
      }
      v24 = v61;
      if (!(_DWORD)v61)
      {
        v24 = 32;
        LODWORD(v61) = 32;
      }
      v25 = calculate_clut_capacity(v24, 3, 3, 4, v18, v19, v20, v21);
      v26 = CFDataCreateMutable(0, v25);
      if (v26)
      {
        v27 = v26;
        v55 = v16;
        v56 = Mutable;
        CFDataSetLength(v26, v25);
        cf = v27;
        MutableBytePtr = CFDataGetMutableBytePtr(v27);
        if (v25 >> 62)
          v28 = -1;
        else
          v28 = 4 * v25;
        v57 = (float *)operator new[](v28, MEMORY[0x1E0DE4E10]);
        if (NxMLUTFillWithFloatUniformGridData(v57, v61, (v61 * v61 * v61)))
        {
          v31 = v61;
          if ((_DWORD)v61)
          {
            v32 = 0;
            v33 = MutableBytePtr + 8;
            v34 = 12 * v61;
            v58 = v34 * v61;
            v35 = v57 + 2;
            do
            {
              v59 = v33;
              v60 = v32;
              v36 = 0;
              v37 = v35;
              do
              {
                v38 = v37;
                v39 = (float *)v33;
                v40 = v31;
                do
                {
                  v41 = *(v38 - 2);
                  v42 = *(v38 - 1);
                  v43 = *v38;
                  v38 += 3;
                  *(v39 - 2) = CMMConvInvHLGOOTF::Reference_Inv_HLG_OOTF(this, v41, v42, v43);
                  *((_DWORD *)v39 - 1) = v44;
                  *(_DWORD *)v39 = v45;
                  v39 += 3;
                  --v40;
                }
                while (v40);
                ++v36;
                v33 += v34;
                v37 = (float *)((char *)v37 + v34);
              }
              while (v36 != v31);
              v32 = v60 + 1;
              v33 = &v59[v58];
              v35 = (float *)((char *)v35 + v58);
            }
            while (v60 + 1 != v31);
          }
        }
        if (v55 == 2)
        {
          v11 = cf;
        }
        else
        {
          v11 = NxMLUTCreateData(v55, MutableBytePtr, 1, v61, 3, 3, v29, v30);
          CFRelease(cf);
        }
        Mutable = v56;
        if (v57)
          MEMORY[0x18D77955C](v57, 0x1000C8052888210);
        v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v61);
        if (v11)
        {
          v47 = v46;
          if (v46)
          {
            CFDictionaryAddValue(v56, kColorSyncConversionGridPoints, v46);
            CFRelease(v47);
          }
          goto LABEL_10;
        }
      }
      else
      {
        CFNumberCreate(0, kCFNumberSInt32Type, &v61);
      }
LABEL_45:
      v11 = Mutable;
      Mutable = 0;
      goto LABEL_46;
    }
  }
  HIDWORD(v61) = 7;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
  if (v8)
  {
    v9 = v8;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v8);
    CFRelease(v9);
  }
  *(_QWORD *)&v10 = *(_QWORD *)((char *)this + 76);
  *((_QWORD *)&v10 + 1) = *(_QWORD *)((char *)this + 60);
  *(_OWORD *)bytes = v10;
  v64 = *(_QWORD *)((char *)this + 68);
  v65 = 1;
  v11 = CFDataCreate(0, bytes, 28);
  if (!v11)
    goto LABEL_45;
LABEL_10:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v11);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v11);
LABEL_46:
  CFRelease(v11);
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
  CMMConvNode::AddClampingInfo(this, Mutable);
  *(float *)&v48 = 1.0 / *((float *)this + 21);
  v61 = v48;
  if (*(float *)&v48 != 1.0)
  {
    v49 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)&v61 + 4);
    v50 = CFNumberCreate(0, kCFNumberFloat32Type, &v61);
    *(_QWORD *)bytes = v49;
    *(_QWORD *)&bytes[8] = v50;
    v51 = CFArrayCreate(0, (const void **)bytes, 2, MEMORY[0x1E0C9B378]);
    CFRelease(v49);
    CFRelease(v50);
    if (v51)
    {
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionOutputRange"), v51);
      CFRelease(v51);
    }
  }
  return Mutable;
}

float CMMConvInvHLGOOTF::Reference_Inv_HLG_OOTF(CMMConvInvHLGOOTF *this, float a2, float a3, float a4)
{
  float v5;
  float v6;
  float v7;
  float v8;

  v5 = (float)((float)(*((float *)this + 16) * a3) + (float)(a2 * *((float *)this + 15)))
     + (float)(a4 * *((float *)this + 17));
  if (a3 <= a4)
    a3 = a4;
  if (a3 < a2)
    a3 = a2;
  v6 = v5 + (float)(a3 * *((float *)this + 18));
  v7 = fmaxf(fabsf(v6), 1.1755e-38);
  if (v6 >= 0.0)
    v8 = *((float *)this + 20);
  else
    v8 = -*((float *)this + 20);
  return (float)(v8 * powf(v7, *((float *)this + 19))) * a2;
}

uint64_t CMMConvPQEETFBase::GetPrecision(CMMConvPQEETFBase *this)
{
  return 5;
}

uint64_t CMMConvPQEETF::Collapse(CMMConvPQEETF *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvPQEETF::IsNOP(CMMConvPQEETF *this)
{
  return 0;
}

void CMMConvPQEETF::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

void CMMConvPQEETF::Convert(CMMConvPQEETFBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  float *v10;
  int v11;
  int v12;

  v5 = a5 * a4;
  if (a5 * a4)
  {
    v9 = 0;
    do
    {
      v10 = (float *)(a2 + 4 * v9);
      *v10 = CMMConvPQEETFBase::ToneMap(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvPQEETF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvPQEETF::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvPQEETF::GetMaxNofChannels(CMMConvPQEETF *this)
{
  return 3;
}

uint64_t CMMConvPQEETF::GetTransformType(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  return 8;
}

__CFDictionary *CMMConvPQEETF::FlattenConversion(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeID v7;
  const void *Value;
  CFNumberRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFNumberRef v14;
  CFDataRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  int v21[4];
  int v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  valuePtr = 3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (!*((_BYTE *)this + 60))
  {
    v28 = 9;
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v28);
    if (v18)
    {
      v19 = v18;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v18);
      CFRelease(v19);
    }
    *(_OWORD *)v21 = xmmword_18B3EA8A0;
    v22 = 1100316672;
    v23 = *((_OWORD *)this + 1);
    v24 = *((_QWORD *)this + 4);
    v25 = *((_DWORD *)this + 10);
    v26 = 0;
    v27 = *(_OWORD *)((char *)this + 44);
    v15 = CFDataCreate(0, (const UInt8 *)v21, 72);
    if (v15)
      goto LABEL_16;
LABEL_17:
    v15 = Mutable;
    Mutable = 0;
    goto LABEL_18;
  }
  v21[0] = 2;
  if (a2)
  {
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
      v21[0] = NxMTransformFormatFromValue(Value);
    }
  }
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, v21);
  if (v9)
  {
    v14 = v9;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v9);
    CFRelease(v14);
  }
  v28 = 0;
  v15 = CMMConvPQEETFBase::create_3DLUT((float *)this, v21[0], a2, &v28, v10, v11, v12, v13);
  v16 = CFNumberCreate(0, kCFNumberSInt32Type, &v28);
  if (!v15)
    goto LABEL_17;
  v17 = v16;
  if (v16)
  {
    CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v16);
    CFRelease(v17);
  }
LABEL_16:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v15);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v15);
LABEL_18:
  CFRelease(v15);
  if (*((_BYTE *)this + 98))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
  CMMConvNode::AddClampingInfo((CMMConvPQEETF *)((char *)this + 64), Mutable);
  return Mutable;
}

uint64_t CMMConvPQEETF::GetFunctionType(CMMConvPQEETF *this)
{
  return 3;
}

uint64_t CMMConvPQEETF::PrintInfo(CMMConvPQEETF *this)
{
  return printf("{\nPQ tone mapping params:\n\tparams->pq_eotf.m1 = % 3.10f\n\tparams->pq_eotf.m2 = % 3.10f\n\n\tparams->pq_eotf.c1 = % 3.10f\n\tparams->pq_eotf.c2 = % 3.10f\n\tparams->pq_eotf.c3 = % 3.10f\n\n\tparams->pq_eetf.masterPeakInv = % 3.10f\n\tparams->pq_eetf.masterBlackInv = % 3.10f\n\tparams->pq_eetf.maxLum = % 3.10f\n\tparams->pq_eetf.minLum = % 3.10f\n\tparams->pq_eetf.KneeStart = % 3.10f\n\tparams->pq_eetf.KneeStartScale = % 3.10f\n\n\tparams->pq_eetf.optical_scale = % 3.10f\n\tparams->luminance_coefficients[0] = % 3.10f\n\tparams->luminance_coefficients[1] = % 3.10f\n"
           "\tparams->luminance_coefficients[2] = % 3.10f\n"
           "\tparams->luminance_coefficients[3] = % 3.10f\n"
           "}\n",
           0.159301758,
           78.84375,
           0.8359375,
           18.8515625,
           18.6875,
           *((float *)this + 4),
           *((float *)this + 5),
           *((float *)this + 6),
           *((float *)this + 7),
           *((float *)this + 8),
           *((float *)this + 9),
           *((float *)this + 10),
           *((float *)this + 11),
           *((float *)this + 12),
           *((float *)this + 13),
           *((float *)this + 14));
}

void `non-virtual thunk to'CMMConvPQEETF::~CMMConvPQEETF(pthread_mutex_t **this)
{
  CMMBase::operator delete(this - 8);
}

uint64_t `non-virtual thunk to'CMMConvPQEETF::Collapse(CMMConvPQEETF *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t `non-virtual thunk to'CMMConvPQEETF::IsNOP(CMMConvPQEETF *this)
{
  return 0;
}

void `non-virtual thunk to'CMMConvPQEETF::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

void `non-virtual thunk to'CMMConvPQEETF::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CMMConvPQEETF::Convert((CMMConvPQEETFBase *)(a1 - 64), a2, a3, a4, a5);
}

void `non-virtual thunk to'CMMConvPQEETF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void `non-virtual thunk to'CMMConvPQEETF::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t `non-virtual thunk to'CMMConvPQEETF::GetMaxNofChannels(CMMConvPQEETF *this)
{
  return 3;
}

uint64_t `non-virtual thunk to'CMMConvPQEETF::GetTransformType(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  return 8;
}

__CFDictionary *`non-virtual thunk to'CMMConvPQEETF::FlattenConversion(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  return CMMConvPQEETF::FlattenConversion((CMMConvPQEETF *)((char *)this - 64), a2);
}

uint64_t `non-virtual thunk to'CMMConvPQEETF::GetFunctionType(CMMConvPQEETF *this)
{
  return 3;
}

uint64_t `non-virtual thunk to'CMMConvPQEETF::PrintInfo(CMMConvPQEETF *this)
{
  return CMMConvPQEETF::PrintInfo((CMMConvPQEETF *)((char *)this - 64));
}

__CFData *CMMConvPQEETFBase::create_3DLUT(float *a1, int a2, CFDictionaryRef theDict, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFNumber *Value;
  unsigned int v13;
  const __CFNumber *v14;
  unint64_t v15;
  __CFData *Mutable;
  __CFData *v17;
  UInt8 *MutableBytePtr;
  size_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  __CFData *cf;
  int v49;
  UInt8 *v50;
  float *v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  unsigned int valuePtr;

  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.PQEETF3DLutGridPoints"));
    valuePtr = 0;
    if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
    {
      v13 = valuePtr;
      *a4 = valuePtr;
      if (v13)
        goto LABEL_12;
    }
    else
    {
      v13 = *a4;
      if (*a4)
        goto LABEL_12;
    }
    v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, kColorSyncConversionGridPoints);
    if (v14)
      CFNumberGetValue(v14, kCFNumberSInt32Type, a4);
  }
  else
  {
    valuePtr = 0;
  }
  v13 = *a4;
  if (!*a4)
  {
    v13 = 32;
    *a4 = 32;
  }
LABEL_12:
  v15 = calculate_clut_capacity(v13, 3, 3, 4, a5, a6, a7, a8);
  Mutable = CFDataCreateMutable(0, v15);
  v17 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v15);
    MutableBytePtr = CFDataGetMutableBytePtr(v17);
    if (v15 >> 62)
      v19 = -1;
    else
      v19 = 4 * v15;
    v20 = (float *)operator new[](v19, MEMORY[0x1E0DE4E10]);
    if (NxMLUTFillWithFloatUniformGridData(v20, *a4, *a4 * *a4 * *a4))
    {
      v50 = MutableBytePtr;
      v51 = v20;
      cf = v17;
      v49 = a2;
      v23 = *a4;
      if ((_DWORD)v23)
      {
        v24 = 0;
        v25 = (float *)(MutableBytePtr + 8);
        v26 = 12 * v23;
        v52 = 12 * v23 * v23;
        v27 = v20 + 2;
        do
        {
          v53 = v25;
          v54 = v24;
          v28 = 0;
          v29 = v27;
          do
          {
            v30 = v29;
            v31 = v25;
            v32 = v23;
            do
            {
              v33 = *(v30 - 2) * 10000.0;
              v34 = *(v30 - 1) * 10000.0;
              v35 = *v30;
              v30 += 3;
              v36 = CMMConvPQEETFBase::ToneMap((CMMConvPQEETFBase *)a1, v33, v34, v35 * 10000.0);
              v39 = a1[3];
              if (v36 <= v39)
                v40 = v36;
              else
                v40 = a1[3];
              if (v36 >= 0.0)
                v41 = v40;
              else
                v41 = 0.0;
              *(v31 - 2) = v41 / v39;
              v42 = a1[3];
              if (v37 <= v42)
                v43 = v37;
              else
                v43 = a1[3];
              if (v37 >= 0.0)
                v44 = v43;
              else
                v44 = 0.0;
              *(v31 - 1) = v44 / v42;
              v45 = a1[3];
              if (v38 <= v45)
                v46 = v38;
              else
                v46 = a1[3];
              if (v38 < 0.0)
                v46 = 0.0;
              *v31 = v46 / v45;
              v31 += 3;
              --v32;
            }
            while (v32);
            ++v28;
            v25 = (float *)((char *)v25 + v26);
            v29 = (float *)((char *)v29 + v26);
          }
          while (v28 != v23);
          v24 = v54 + 1;
          v25 = (float *)((char *)v53 + v52);
          v27 = (float *)((char *)v27 + v52);
        }
        while (v54 + 1 != v23);
      }
      if (v49 == 2)
      {
        v17 = cf;
      }
      else
      {
        v17 = NxMLUTCreateData(v49, v50, 1, v23, 3, 3, v21, v22);
        CFRelease(cf);
      }
      v20 = v51;
    }
    if (v20)
      MEMORY[0x18D77955C](v20, 0x1000C8052888210);
  }
  return v17;
}

float CMMConvPQEETFBase::ToneMap(CMMConvPQEETFBase *this, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v4 = a2;
  v5 = (float)((float)(*((float *)this + 12) * a3) + (float)(*((float *)this + 11) * a2))
     + (float)(*((float *)this + 13) * a4);
  if (v5 != 0.0)
  {
    v7 = *((float *)this + 10);
    v8 = powf(fabsf(v5 / v7), 0.1593);
    v9 = powf((float)((float)(v8 * 18.852) + 0.83594) / (float)((float)(v8 * 18.688) + 1.0), 78.844);
    v10 = -v9;
    if ((float)(v5 / v7) >= 0.0)
      v10 = v9;
    v11 = *((float *)this + 5);
    v12 = v10 - v11;
    v13 = *((float *)this + 4) - v11;
    v14 = v12 / v13;
    v15 = *((float *)this + 8);
    if (v14 >= v15)
    {
      v16 = (float)(v14 - v15) * *((float *)this + 9);
      v14 = (1.0 - v15) * (float)(v16 - (float)((float)(v16 * (float)(v16 + v16)) - (float)((float)(v16 * v16) * v16)))
          + ((float)-(float)((float)(v16 * (float)(v16 * 3.0)) - (float)((float)(v16 * (float)(v16 + v16)) * v16)) + 1.0)
          * v15
          + (float)(*((float *)this + 6)
                  * (float)((float)(v16 * (float)(v16 * 3.0)) + (float)((float)(v16 * (float)(v16 * -2.0)) * v16)));
    }
    v17 = *((float *)this + 7);
    if (v14 >= 0.0)
    {
      if (v14 >= 1.0)
        v17 = v14;
      else
        v17 = v14
            + (float)((float)((float)(1.0 - v14) * (float)((float)(1.0 - v14) * (float)(v17 * (float)(1.0 - v14))))
                    * (float)(1.0 - v14));
    }
    v18 = v11 + (float)(v17 * v13);
    v19 = powf(fabsf(v18), 0.012683);
    v20 = powf(fmaxf(v19 + -0.83594, 0.0) / (float)((float)(v19 * -18.688) + 18.852), 6.2774);
    if (v18 < 0.0)
      v20 = -v20;
    return (float)((float)(v7 * v20) / v5) * v4;
  }
  return v4;
}

uint64_t CMMConvHLGSceneReferredMapping::Collapse(CMMConvHLGSceneReferredMapping *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvHLGSceneReferredMapping::IsNOP(CMMConvHLGSceneReferredMapping *this)
{
  return 0;
}

void CMMConvHLGSceneReferredMapping::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

void CMMConvHLGSceneReferredMapping::Convert(CMMConvHLGSceneReferredMapping *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  float *v10;
  int v11;
  int v12;

  v5 = a5 * a4;
  if (a5 * a4)
  {
    v9 = 0;
    do
    {
      v10 = (float *)(a2 + 4 * v9);
      *v10 = CMMConvHLGSceneReferredMapping::Reference_HLG_SceneReferredMapping(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvHLGSceneReferredMapping::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvHLGSceneReferredMapping::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvHLGSceneReferredMapping::GetMaxNofChannels(CMMConvHLGSceneReferredMapping *this)
{
  return 3;
}

uint64_t CMMConvHLGSceneReferredMapping::GetPrecision(CMMConvHLGSceneReferredMapping *this)
{
  return 5;
}

uint64_t CMMConvHLGSceneReferredMapping::GetTransformType(CMMConvHLGSceneReferredMapping *this, const __CFDictionary *a2)
{
  if (*((_BYTE *)this + 48))
    return 8;
  else
    return 2;
}

__CFDictionary *CMMConvHLGSceneReferredMapping::FlattenConversion(CMMConvHLGSceneReferredMapping *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeID v7;
  const void *Value;
  CFNumberRef v9;
  CFNumberRef v10;
  int v11;
  const __CFNumber *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFDataRef v19;
  const __CFNumber *v20;
  unsigned int v21;
  unint64_t v22;
  __CFData *v23;
  __CFData *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  UInt8 *v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  int v41;
  int v42;
  CFNumberRef v43;
  CFNumberRef v44;
  UInt8 *MutableBytePtr;
  __CFData *cf;
  int v48;
  __CFDictionary *v49;
  float *v50;
  uint64_t v51;
  UInt8 *v52;
  uint64_t v53;
  _DWORD v54[5];
  uint64_t v55;
  int v56;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  valuePtr = 3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (!*((_BYTE *)this + 48))
  {
    v56 = 8;
    v17 = CFNumberCreate(0, kCFNumberSInt32Type, &v56);
    if (v17)
    {
      v18 = v17;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v17);
      CFRelease(v18);
    }
    *(_OWORD *)&v54[1] = *(_OWORD *)((char *)this + 52);
    v55 = *(_QWORD *)((char *)this + 68);
    v19 = CFDataCreate(0, (const UInt8 *)&v54[1], 24);
    if (v19)
      goto LABEL_46;
LABEL_47:
    v19 = Mutable;
    Mutable = 0;
    goto LABEL_48;
  }
  v56 = 0;
  if (a2)
  {
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
      v56 = NxMTransformFormatFromValue(Value);
    }
  }
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v56);
  if (v9)
  {
    v10 = v9;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v9);
    CFRelease(v10);
  }
  v11 = v56;
  v54[0] = 0;
  if (a2)
  {
    v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGSRLS3DLutGridPoints"));
    v54[1] = 0;
    if (v12)
    {
      if (CFNumberGetValue(v12, kCFNumberSInt32Type, &v54[1]) == 1)
      {
        v54[0] = v54[1];
        if (v54[1])
          goto LABEL_23;
      }
    }
  }
  else
  {
    v54[1] = 0;
  }
  v20 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
  if (v20)
    CFNumberGetValue(v20, kCFNumberSInt32Type, v54);
LABEL_23:
  v21 = v54[0];
  if (!v54[0])
  {
    v21 = 32;
    v54[0] = 32;
  }
  v22 = calculate_clut_capacity(v21, 3, 3, 4, v13, v14, v15, v16);
  v23 = CFDataCreateMutable(0, v22);
  if (!v23)
  {
    CFNumberCreate(0, kCFNumberSInt32Type, v54);
    goto LABEL_47;
  }
  v24 = v23;
  v48 = v11;
  v49 = Mutable;
  CFDataSetLength(v23, v22);
  cf = v24;
  MutableBytePtr = CFDataGetMutableBytePtr(v24);
  if (v22 >> 62)
    v25 = -1;
  else
    v25 = 4 * v22;
  v50 = (float *)operator new[](v25, MEMORY[0x1E0DE4E10]);
  if (NxMLUTFillWithFloatUniformGridData(v50, v54[0], (v54[0] * v54[0] * v54[0])))
  {
    v28 = v54[0];
    if (v54[0])
    {
      v29 = 0;
      v30 = MutableBytePtr + 8;
      v31 = 12 * v54[0];
      v51 = v31 * v54[0];
      v32 = v50 + 2;
      do
      {
        v52 = v30;
        v53 = v29;
        v33 = 0;
        v34 = v32;
        do
        {
          v35 = v34;
          v36 = (float *)v30;
          v37 = v28;
          do
          {
            v38 = *(v35 - 2);
            v39 = *(v35 - 1);
            v40 = *v35;
            v35 += 3;
            *(v36 - 2) = CMMConvHLGSceneReferredMapping::Reference_HLG_SceneReferredMapping(this, v38, v39, v40);
            *((_DWORD *)v36 - 1) = v41;
            *(_DWORD *)v36 = v42;
            v36 += 3;
            --v37;
          }
          while (v37);
          ++v33;
          v30 += v31;
          v34 = (float *)((char *)v34 + v31);
        }
        while (v33 != v28);
        v29 = v53 + 1;
        v30 = &v52[v51];
        v32 = (float *)((char *)v32 + v51);
      }
      while (v53 + 1 != v28);
    }
  }
  if (v48 == 2)
  {
    v19 = cf;
  }
  else
  {
    v19 = NxMLUTCreateData(v48, MutableBytePtr, 1, v54[0], 3, 3, v26, v27);
    CFRelease(cf);
  }
  Mutable = v49;
  if (v50)
    MEMORY[0x18D77955C](v50, 0x1000C8052888210);
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, v54);
  if (!v19)
    goto LABEL_47;
  v44 = v43;
  if (v43)
  {
    CFDictionaryAddValue(v49, kColorSyncConversionGridPoints, v43);
    CFRelease(v44);
  }
LABEL_46:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v19);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v19);
LABEL_48:
  CFRelease(v19);
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

uint64_t CMMConvHLGSceneReferredMapping::GetFunctionType(CMMConvHLGSceneReferredMapping *this)
{
  return 3;
}

float CMMConvHLGSceneReferredMapping::Reference_HLG_SceneReferredMapping(CMMConvHLGSceneReferredMapping *this, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;
  float v19;

  v4 = *((float *)this + 17);
  v18 = *((float *)this + 16);
  v19 = *((float *)this + 15);
  if (a3 <= a4)
    v5 = a4;
  else
    v5 = a3;
  if (v5 < a2)
    v5 = a2;
  v17 = v5;
  v7 = *((float *)this + 13);
  v6 = *((float *)this + 14);
  v8 = v6 * a2;
  v9 = v6 * a3;
  v10 = v6 * a4;
  v11 = *((float *)this + 18);
  v12 = powf(v6 * a2, v7);
  v13 = powf(v9, v7);
  v14 = (float)((float)((float)(v18 * v13) + (float)(v19 * v12)) + (float)(v4 * powf(v10, v7))) + (float)(v17 * v11);
  if (v14 == 0.0)
    v15 = 1.0;
  else
    v15 = (float)((float)((float)((float)(v18 * v9) + (float)(v8 * v19)) + (float)(v10 * v4)) + (float)(v17 * v11))
        / v14;
  return v12 * v15;
}

uint64_t CMMConvLuminanceScaling::Collapse(CMMConvLuminanceScaling *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvLuminanceScaling::IsNOP(CMMConvLuminanceScaling *this)
{
  return 0;
}

void CMMConvLuminanceScaling::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

void CMMConvLuminanceScaling::Convert(CMMConvLuminanceScaling *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  float *v10;
  int v11;
  int v12;

  v5 = a5 * a4;
  if (a5 * a4)
  {
    v9 = 0;
    do
    {
      v10 = (float *)(a2 + 4 * v9);
      *v10 = CMMConvLuminanceScaling::scale_RGB(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvLuminanceScaling::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvLuminanceScaling::GetMaxNofChannels(CMMConvLuminanceScaling *this)
{
  return 3;
}

uint64_t CMMConvLuminanceScaling::GetPrecision(CMMConvLuminanceScaling *this)
{
  return 5;
}

uint64_t CMMConvLuminanceScaling::GetTransformType(CMMConvLuminanceScaling *this, CFTypeRef cf)
{
  CFTypeID v3;
  uint64_t v4;

  if (!cf)
    return 2;
  v3 = CFGetTypeID(cf);
  v4 = 2;
  if (v3 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("com.apple.cmm.HLGOOTF3DLut")) == (const void *)*MEMORY[0x1E0C9AE50])
      return 8;
    else
      return 2;
  }
  return v4;
}

__CFDictionary *CMMConvLuminanceScaling::FlattenConversion(CMMConvLuminanceScaling *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFTypeID v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFDataRef v10;
  CFTypeID v11;
  const void *Value;
  CFNumberRef v13;
  CFNumberRef v14;
  int v15;
  const __CFNumber *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  const __CFNumber *v22;
  unint64_t v23;
  __CFData *v24;
  __CFData *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  UInt8 *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  int v42;
  int v43;
  CFNumberRef v44;
  CFNumberRef v45;
  UInt8 *MutableBytePtr;
  int v48;
  __CFData *cf;
  __CFDictionary *v50;
  float *v51;
  uint64_t v52;
  UInt8 *v53;
  uint64_t v54;
  _BYTE v55[20];
  int v56;
  int v57;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  valuePtr = 3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (a2)
  {
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID()
      && CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGOOTF3DLut")) == (const void *)*MEMORY[0x1E0C9AE50])
    {
      v57 = 0;
      v11 = CFGetTypeID(a2);
      if (v11 == CFDictionaryGetTypeID())
      {
        Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        v57 = NxMTransformFormatFromValue(Value);
      }
      v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
      if (v13)
      {
        v14 = v13;
        CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v13);
        CFRelease(v14);
      }
      v15 = v57;
      *(_QWORD *)v55 = 0;
      v16 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("com.apple.cmm.HLGOOTF3DLutGridPoints"));
      if (!v16
        || CFNumberGetValue(v16, kCFNumberSInt32Type, &v55[4]) != 1
        || (v21 = *(_DWORD *)&v55[4], (*(_DWORD *)v55 = *(_DWORD *)&v55[4]) == 0))
      {
        v22 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
        if (v22)
          CFNumberGetValue(v22, kCFNumberSInt32Type, v55);
        v21 = *(_DWORD *)v55;
        if (!*(_DWORD *)v55)
        {
          v21 = 32;
          *(_DWORD *)v55 = 32;
        }
      }
      v23 = calculate_clut_capacity(v21, 3, 3, 4, v17, v18, v19, v20);
      v24 = CFDataCreateMutable(0, v23);
      if (v24)
      {
        v25 = v24;
        v48 = v15;
        v50 = Mutable;
        CFDataSetLength(v24, v23);
        cf = v25;
        MutableBytePtr = CFDataGetMutableBytePtr(v25);
        if (v23 >> 62)
          v26 = -1;
        else
          v26 = 4 * v23;
        v51 = (float *)operator new[](v26, MEMORY[0x1E0DE4E10]);
        if (NxMLUTFillWithFloatUniformGridData(v51, *(unsigned int *)v55, (*(_DWORD *)v55 * *(_DWORD *)v55 * *(_DWORD *)v55)))
        {
          v29 = *(unsigned int *)v55;
          if (*(_DWORD *)v55)
          {
            v30 = 0;
            v31 = MutableBytePtr + 8;
            v32 = 12 * *(unsigned int *)v55;
            v52 = v32 * *(unsigned int *)v55;
            v33 = v51 + 2;
            do
            {
              v53 = v31;
              v54 = v30;
              v34 = 0;
              v35 = v33;
              do
              {
                v36 = v35;
                v37 = (float *)v31;
                v38 = v29;
                do
                {
                  v39 = *(v36 - 2);
                  v40 = *(v36 - 1);
                  v41 = *v36;
                  v36 += 3;
                  *(v37 - 2) = CMMConvLuminanceScaling::scale_RGB(this, v39, v40, v41);
                  *((_DWORD *)v37 - 1) = v42;
                  *(_DWORD *)v37 = v43;
                  v37 += 3;
                  --v38;
                }
                while (v38);
                ++v34;
                v31 += v32;
                v35 = (float *)((char *)v35 + v32);
              }
              while (v34 != v29);
              v30 = v54 + 1;
              v31 = &v53[v52];
              v33 = (float *)((char *)v33 + v52);
            }
            while (v54 + 1 != v29);
          }
        }
        if (v48 == 2)
        {
          v10 = cf;
        }
        else
        {
          v10 = NxMLUTCreateData(v48, MutableBytePtr, 1, *(unsigned int *)v55, 3, 3, v27, v28);
          CFRelease(cf);
        }
        Mutable = v50;
        if (v51)
          MEMORY[0x18D77955C](v51, 0x1000C8052888210);
        v44 = CFNumberCreate(0, kCFNumberSInt32Type, v55);
        if (v10)
        {
          v45 = v44;
          if (v44)
          {
            CFDictionaryAddValue(v50, kColorSyncConversionGridPoints, v44);
            CFRelease(v45);
          }
          goto LABEL_10;
        }
      }
      else
      {
        CFNumberCreate(0, kCFNumberSInt32Type, v55);
      }
LABEL_43:
      v10 = Mutable;
      Mutable = 0;
      goto LABEL_44;
    }
  }
  v57 = 12;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  if (v8)
  {
    v9 = v8;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v8);
    CFRelease(v9);
  }
  *(_OWORD *)&v55[4] = *((_OWORD *)this + 3);
  v56 = *((_DWORD *)this + 16);
  v10 = CFDataCreate(0, &v55[4], 20);
  if (!v10)
    goto LABEL_43;
LABEL_10:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v10);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v10);
LABEL_44:
  CFRelease(v10);
  if (*((_BYTE *)this + 34))
    CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

uint64_t CMMConvLuminanceScaling::GetFunctionType(CMMConvLuminanceScaling *this)
{
  return 3;
}

float CMMConvLuminanceScaling::scale_RGB(CMMConvLuminanceScaling *this, float a2, float a3, float a4)
{
  float v5;
  float v6;
  float v7;
  float v8;

  v5 = (float)((float)(*((float *)this + 14) * a3) + (float)(a2 * *((float *)this + 13)))
     + (float)(a4 * *((float *)this + 15));
  if (a3 > a4)
    a4 = a3;
  if (a4 < a2)
    a4 = a2;
  v6 = v5 + (float)(a4 * *((float *)this + 16));
  v7 = fmaxf(fabsf(v6), 1.1755e-38);
  v8 = powf(v7, *((float *)this + 12));
  if (v6 < 0.0)
    v8 = -v8;
  return (float)(v8 / v7) * a2;
}

uint64_t CMMConvRWToneMapping::Collapse(CMMConvRWToneMapping *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvRWToneMapping::IsNOP(CMMConvRWToneMapping *this)
{
  return 0;
}

void CMMConvRWToneMapping::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

float *CMMConvRWToneMapping::Convert(float *result, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  float32x2_t *v6;
  float v7;
  float32x2_t v8;
  float v9;
  float v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  float v15;

  if (a5 * a4)
  {
    v5 = 0;
    v6 = a2 + 1;
    do
    {
      v7 = result[12];
      v8 = vmul_n_f32(*a2, v7);
      v9 = v7 * v6->f32[v5];
      v10 = v8.f32[1];
      if (v8.f32[0] > v8.f32[1])
        v10 = v8.f32[0];
      if (v10 <= v9)
        v10 = v9;
      if (v10 == 0.0)
      {
        v11 = 0;
        v12 = 0.0;
      }
      else
      {
        if (v10 >= 1.0)
        {
          if (result[14] >= v10)
          {
            v15 = result[21] * (float)(result[20] + sqrtf(result[19] + (float)(result[18] * v10)));
            v14 = (float)(v15 * (float)(result[16] * (float)(v15 + (float)((float)(1.0 - v15) * 2.0))))
                + (float)((float)((float)(1.0 - v15) * (float)(1.0 - v15)) * result[17]);
          }
          else
          {
            v14 = result[16];
          }
          v13 = v14 / v10;
        }
        else
        {
          v13 = result[17];
        }
        v11 = vmul_n_f32(v8, v13);
        v12 = v9 * v13;
      }
      *a2 = v11;
      v6->f32[v5] = v12;
      v5 += a4;
      a2 = (float32x2_t *)((char *)a2 + 4 * a4);
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvRWToneMapping::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (float *)(a2 + 4 * v4);
      v6 = v5[1];
      v7 = *(float *)(result + 52);
      if (*v5 <= v7)
        v7 = *v5;
      if (*v5 >= 0.0)
        v8 = v7;
      else
        v8 = 0.0;
      *v5 = v8;
      v9 = *(float *)(result + 52);
      v10 = v5[2];
      if (v6 <= v9)
        v9 = v6;
      if (v6 < 0.0)
        v9 = 0.0;
      v5[1] = v9;
      v11 = *(float *)(result + 52);
      if (v10 <= v11)
        v11 = v10;
      if (v10 < 0.0)
        v11 = 0.0;
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

uint64_t CMMConvRWToneMapping::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (float *)(a2 + 4 * v4);
      v6 = v5[1];
      v7 = *(float *)(result + 64);
      if (*v5 <= v7)
        v7 = *v5;
      if (*v5 >= 0.0)
        v8 = v7;
      else
        v8 = 0.0;
      *v5 = v8;
      v9 = *(float *)(result + 64);
      v10 = v5[2];
      if (v6 <= v9)
        v9 = v6;
      if (v6 < 0.0)
        v9 = 0.0;
      v5[1] = v9;
      v11 = *(float *)(result + 64);
      if (v10 <= v11)
        v11 = v10;
      if (v10 < 0.0)
        v11 = 0.0;
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

uint64_t CMMConvRWToneMapping::GetMaxNofChannels(CMMConvRWToneMapping *this)
{
  return 3;
}

uint64_t CMMConvRWToneMapping::GetPrecision(CMMConvRWToneMapping *this)
{
  return 5;
}

uint64_t CMMConvRWToneMapping::GetTransformType(CMMConvRWToneMapping *this, const __CFDictionary *a2)
{
  return 2;
}

__CFDictionary *CMMConvRWToneMapping::FlattenConversion(CMMConvRWToneMapping *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  int v8;
  CFDataRef v9;
  CFDataRef v10;
  _DWORD v12[2];
  uint64_t v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    valuePtr = 3;
    v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      v5 = v4;
      CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v4);
      CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v5);
      CFRelease(v5);
    }
    v17 = 10;
    v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
    if (v6)
    {
      v7 = v6;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v6);
      CFRelease(v7);
    }
    v8 = *((_DWORD *)this + 14);
    v12[0] = *((_DWORD *)this + 12);
    v12[1] = v8;
    v13 = *((_QWORD *)this + 8);
    v14 = 0;
    v15 = *(_OWORD *)((char *)this + 72);
    v16 = *((_DWORD *)this + 22);
    v9 = CFDataCreate(0, (const UInt8 *)v12, 40);
    if (v9)
    {
      v10 = v9;
      CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v9);
      CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v10);
    }
    else
    {
      v10 = Mutable;
      Mutable = 0;
    }
    CFRelease(v10);
    if (*((_BYTE *)this + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
    CMMConvNode::AddClampingInfo(this, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvRWToneMapping::GetFunctionType(CMMConvRWToneMapping *this)
{
  return 3;
}

uint64_t CMMConvFlexGTCLumaScaling::Collapse(CMMConvFlexGTCLumaScaling *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvFlexGTCLumaScaling::IsNOP(CMMConvFlexGTCLumaScaling *this)
{
  return 0;
}

void CMMConvFlexGTCLumaScaling::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

uint64_t CMMConvFlexGTCLumaScaling::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v5 = a5 * a4;
  if (a5 * a4)
  {
    v8 = result;
    v9 = 0;
    v10 = *(uint64_t **)(result + 80);
    do
    {
      v11 = (float *)(a2 + 4 * v9);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      if (v13 <= v14)
        v15 = v11[2];
      else
        v15 = v11[1];
      if (v15 < v12)
        v15 = *v11;
      v16 = (float)((float)((float)(*(float *)(v8 + 60) * v13) + (float)(*v11 * *(float *)(v8 + 56)))
                  + (float)(v14 * *(float *)(v8 + 64)))
          + (float)(v15 * *(float *)(v8 + 68));
      v17 = fmaxf(fabsf(v16), 1.1755e-38);
      result = CMMTable::FloatData(v10[2], v10[3]);
      v10 = *(uint64_t **)(v8 + 80);
      v18 = ((unint64_t)v10[4] >> 2) - 1;
      v19 = (float)v18;
      v20 = v17 * (float)v18;
      if (v20 <= (float)v18)
        v19 = v17 * (float)v18;
      if (v20 < 0.0)
        v19 = 0.0;
      v21 = v19;
      v22 = v19 - (float)v19;
      if (v18 >= v21 + 1)
        v18 = v21 + 1;
      v23 = *(float *)(result + 4 * v21)
          + (float)((float)(*(float *)(result + 4 * v18) - *(float *)(result + 4 * v21)) * v22);
      v24 = -v23;
      if (v16 >= 0.0)
        v24 = v23;
      v25 = *(float *)(v8 + 72) * v24;
      *v11 = v25 * v12;
      v11[1] = v25 * v13;
      v11[2] = v25 * v14;
      v9 += a4;
    }
    while (v9 < v5);
  }
  return result;
}

void CMMConvFlexGTCLumaScaling::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvFlexGTCLumaScaling::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (float *)(a2 + 4 * v4);
      v6 = v5[1];
      v7 = *(float *)(result + 52);
      if (*v5 <= v7)
        v7 = *v5;
      if (*v5 >= 0.0)
        v8 = v7;
      else
        v8 = 0.0;
      *v5 = v8;
      v9 = *(float *)(result + 52);
      v10 = v5[2];
      if (v6 <= v9)
        v9 = v6;
      if (v6 < 0.0)
        v9 = 0.0;
      v5[1] = v9;
      v11 = *(float *)(result + 52);
      if (v10 <= v11)
        v11 = v10;
      if (v10 < 0.0)
        v11 = 0.0;
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

uint64_t CMMConvFlexGTCLumaScaling::GetMaxNofChannels(CMMConvFlexGTCLumaScaling *this)
{
  return 3;
}

uint64_t CMMConvFlexGTCLumaScaling::GetPrecision(CMMConvFlexGTCLumaScaling *this)
{
  return 5;
}

uint64_t CMMConvFlexGTCLumaScaling::GetTransformType(CMMConvFlexGTCLumaScaling *this, const __CFDictionary *a2)
{
  return 2;
}

__CFDictionary *CMMConvFlexGTCLumaScaling::FlattenConversion(CMMConvFlexGTCLumaScaling *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  const void *v11;
  CFDataRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFArrayRef v15;
  float v17;
  int v18;
  int v19;
  int valuePtr;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    valuePtr = 3;
    v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      v5 = v4;
      CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v4);
      CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v5);
      CFRelease(v5);
    }
    v19 = 11;
    v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v19);
    if (v6)
    {
      v7 = v6;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v6);
      CFRelease(v7);
    }
    v8 = *(_QWORD *)(*((_QWORD *)this + 10) + 32) + 40;
    v9 = (char *)malloc_type_calloc(1uLL, v8, 0x4AFAF73CuLL);
    *(_QWORD *)v9 = *((_QWORD *)this + 6);
    *((_DWORD *)v9 + 2) = *((_DWORD *)this + 14);
    *((_DWORD *)v9 + 3) = *((_DWORD *)this + 15);
    *((_DWORD *)v9 + 4) = *((_DWORD *)this + 16);
    *((_DWORD *)v9 + 5) = *((_DWORD *)this + 17);
    *((_DWORD *)v9 + 6) = *((_DWORD *)this + 18);
    v10 = (uint64_t *)*((_QWORD *)this + 10);
    *(_QWORD *)(v9 + 28) = (unint64_t)v10[4] >> 2;
    v11 = (const void *)CMMTable::FloatData(v10[2], v10[3]);
    memcpy(v9 + 36, v11, *(_QWORD *)(*((_QWORD *)this + 10) + 32));
    v12 = CFDataCreate(0, (const UInt8 *)v9, v8);
    free(v9);
    if (v12)
    {
      CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v12);
      CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v12);
    }
    else
    {
      v12 = Mutable;
      Mutable = 0;
    }
    CFRelease(v12);
    if (*((_BYTE *)this + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), (const void *)*MEMORY[0x1E0C9AE50]);
    CMMConvNode::AddClampingInfo(this, Mutable);
    v18 = 0;
    v17 = *((float *)this + 13);
    if (v17 != 1.0)
    {
      v13 = CFNumberCreate(0, kCFNumberFloat32Type, &v18);
      v14 = CFNumberCreate(0, kCFNumberFloat32Type, &v17);
      values[0] = v13;
      values[1] = v14;
      v15 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
      CFRelease(v13);
      CFRelease(v14);
      if (v15)
      {
        CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionOutputRange"), v15);
        CFRelease(v15);
      }
    }
  }
  return Mutable;
}

uint64_t CMMConvFlexGTCLumaScaling::GetFunctionType(CMMConvFlexGTCLumaScaling *this)
{
  return 3;
}

uint64_t CMMConvCLUTBase::GetCLUTPoints(CMMConvCLUTBase *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t CMMConvCLUTBase::GetFunctionType(CMMConvCLUTBase *this)
{
  return 3;
}

unsigned __int8 *CMMProfile::GetGamutTag(CMMProfile *this)
{
  return CMMProfile::GetTag((uint64_t)this, 1734438260);
}

uint64_t CMMProfile::GetDevConv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t CMMTextDescTag::CMMTextDescTag(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E215FD20;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  if (a5)
    *(_QWORD *)(a5 + 16) = a1;
  *(_QWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E215D210;
  if (a4 >= 0xD)
    v6 = 0;
  else
    v6 = 4294967126;
  CMMThrowExceptionOnError(v6);
  return a1;
}

void sub_18B3D43C0(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMTag::GetTagType(CMMTag *this)
{
  unsigned int *v1;
  _DWORD *exception;

  v1 = (unsigned int *)*((_QWORD *)this + 5);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  return bswap32(*v1);
}

_QWORD *CMMTag::GetWholeCloth(_QWORD *this, unsigned __int8 *__dst, unint64_t *a3)
{
  const void *v3;
  size_t v4;
  _DWORD *exception;
  int v6;

  v3 = (const void *)this[5];
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    v6 = -171;
LABEL_9:
    *exception = v6;
  }
  if (!a3)
  {
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    v6 = -50;
    goto LABEL_9;
  }
  if (__dst)
  {
    v4 = *a3;
    if (v4 == this[4])
      return memcpy(__dst, v3, v4);
    goto LABEL_7;
  }
  *a3 = this[4];
  return this;
}

void CMMSignatureTag::~CMMSignatureTag(CMMSignatureTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMHLGOOTFTag::~CMMHLGOOTFTag(CMMHLGOOTFTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMHLGCurveTag::Initialize(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_DWORD **)(this + 40);
  *(_DWORD *)(this + 52) = bswap32(v1);
  if (v1 == 541543496)
  {
    v2 = this;
    if (*(_QWORD *)(this + 32) >= 0xCuLL)
      v3 = 0;
    else
      v3 = 4294967126;
    CMMThrowExceptionOnError(v3);
    if (*(_DWORD *)(*(_QWORD *)(v2 + 40) + 8) == 1728774144)
      return CMMThrowExceptionOnError(0);
    else
      return CMMThrowExceptionOnError(4294967126);
  }
  return this;
}

void CMMHLGCurveTag::~CMMHLGCurveTag(CMMHLGCurveTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMHLGCurveTag::Validate(CMMHLGCurveTag *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a3 == 3 && a2 == 3)
    v5 = 0;
  else
    v5 = 4294967126;
  CMMThrowExceptionOnError(v5);
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 8) == 1728774144)
    return 0;
  else
    return 4294967126;
}

uint64_t CMMHLGCurveTag::GetCurveCount(CMMHLGCurveTag *this)
{
  return 0;
}

uint64_t CMMHLGCurveTag::GetCurveData(CMMHLGCurveTag *this)
{
  return 0;
}

uint64_t CMMHLGCurveTag::SameCurve(CMMHLGCurveTag *this, CMMCurveTag *lpsrc, CMMCurveTag *a3)
{
  void *v5;
  _BOOL4 v6;

  if (lpsrc)
  {
    if (a3)
      goto LABEL_3;
LABEL_6:
    v6 = 1;
    if (v5)
      return 0;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  if (v5)
    return 0;
LABEL_7:
  if (v6)
    return (*(uint64_t (**)(CMMCurveTag *, CMMCurveTag *, CMMCurveTag *))(*(_QWORD *)lpsrc + 56))(lpsrc, lpsrc, a3);
  return 0;
}

uint64_t CMMHLGCurveTag::MakeTRC(uint64_t a1, uint64_t a2, float a3)
{
  *(float *)(a1 + 56) = a3;
  return CMMHLGCurveTag::copy_hlg_curve_table(a1, a2);
}

uint64_t CMMHLGCurveTag::MakeInvertedTRC(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  unsigned __int8 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  *(float *)(a1 + 60) = a3;
  if ((v8 & 1) == 0
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::m, &dword_18B398000);
  }
  v9 = *(_OWORD *)(a1 + 64);
  v10 = *(_DWORD *)(a1 + 60);
  if (CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::predicate == -1)
  {
    if (!a2)
      goto LABEL_6;
  }
  else
  {
    v16 = *(_OWORD *)(a1 + 64);
    dispatch_once(&CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_162);
    v9 = v16;
    if (!a2)
      goto LABEL_6;
  }
  *(_OWORD *)a2 = xmmword_18B3EA8C0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 28) = v9;
  *(_DWORD *)(a2 + 44) = v10;
  *(_QWORD *)(a2 + 48) = 0;
  v11 = CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  *(_QWORD *)(a2 + 16) = CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    *(_QWORD *)(v11 + 8) = v12 + 1;
LABEL_6:
  v13 = CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table;
  v14 = *(_QWORD *)(CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v14)
    *(_QWORD *)(CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + 8) = v14 + 1;
  *a5 = CMMHLGCurveTag::copy_hlg_curve_table(a1, 0);
  return v13;
}

void sub_18B3D47B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float CMMHLGCurveTag::EvaluateGamma(CMMHLGCurveTag *this, BOOL *a2, double a3)
{
  return 0.0;
}

uint64_t CMMHLGCurveTag::copy_hlg_curve_table(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;

  if ((v4 & 1) == 0
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::m, &dword_18B398000);
  }
  v5 = *(_OWORD *)(a1 + 64);
  v6 = *(_DWORD *)(a1 + 80);
  v7 = *(_DWORD *)(a1 + 56);
  if (CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::predicate[0] == -1)
  {
    if (!a2)
      goto LABEL_6;
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 64);
    dispatch_once(CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_160);
    v5 = v12;
    if (!a2)
      goto LABEL_6;
  }
  *(_OWORD *)a2 = xmmword_18B3EA8D0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 44) = v6;
  *(_DWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a2 + 52) = 0;
  v8 = CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  *(_QWORD *)(a2 + 16) = CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
    *(_QWORD *)(v8 + 8) = v9 + 1;
LABEL_6:
  result = CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table;
  v11 = *(_QWORD *)(CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v11)
    *(_QWORD *)(CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + 8) = v11 + 1;
  return result;
}

void sub_18B3D48F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CMMMemMgr::~CMMMemMgr(void **this)
{
  CMMMemMgr::ReleaseMemList(this);
}

void CMMCurveTag::EvaluateGamma(CMMCurveTag *this, BOOL *a2, double a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  double v23;

  v23 = 0.0;
  v6 = (*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 40))(this);
  if (*((_QWORD *)this + 4) >= 2 * (unint64_t)v6 + 12)
    v7 = 0;
  else
    v7 = 4294967126;
  CMMThrowExceptionOnError(v7);
  if (!v6)
  {
    v23 = 1.0;
    goto LABEL_33;
  }
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      if ((*(_WORD *)(*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this) & 0xFEFF) == 0xCC01)
      {
        if (a2)
          *a2 = 1;
        return;
      }
      v23 = (double)(bswap32(*(unsigned __int16 *)(*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this)) >> 16)
          * 0.00390625;
      goto LABEL_33;
    }
    v9 = (unsigned __int16 *)(*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this);
    if (!IsPureGammaCurve(v6, v9, &v23))
    {
      v10 = (*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this);
      v11 = 0;
      v12 = 0;
      v13 = (double)(v6 - 1);
      v14 = 0.0;
      v15 = 0.0;
      do
      {
        if ((_DWORD)v11)
        {
          v16 = (double)(bswap32(*(unsigned __int16 *)(v10 + 2 * v11)) >> 16) / 65535.0;
          if (v16 != 0.0 && (_DWORD)v11 - v6 != -1 && v16 != 1.0)
          {
            v19 = log(v14 / v13);
            v15 = log(v16) / v19 + v15;
            ++v12;
          }
        }
        ++v11;
        v14 = v14 + 1.0;
      }
      while ((_DWORD)v11 != v6);
      if (v12)
      {
        v23 = v15 / (double)v12;
        v20 = (*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this);
        v21 = 0;
        while (vabdd_f64((double)(bswap32(*(unsigned __int16 *)(v20 + 2 * v21)) >> 16) / 65535.0, pow((double)v21 / v13, v15 / (double)v12)) <= a3)
        {
          if (v6 == ++v21)
            goto LABEL_37;
        }
        v23 = 0.0;
      }
      else
      {
        v23 = 1.0;
      }
LABEL_37:
      if (!a2)
        return;
      goto LABEL_38;
    }
LABEL_33:
    if (!a2)
      return;
    v22 = 1;
    goto LABEL_39;
  }
  v23 = 1.0;
  if (*(_WORD *)(*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this))
    goto LABEL_37;
  v8 = (*(uint64_t (**)(CMMCurveTag *))(*(_QWORD *)this + 48))(this);
  if (a2 && *(unsigned __int16 *)(v8 + 2) != 0xFFFF)
  {
LABEL_38:
    v22 = 0;
LABEL_39:
    *a2 = v22;
  }
}

BOOL IsPureGammaCurve(unsigned int a1, unsigned __int16 *a2, double *a3)
{
  unsigned int v5;
  double v6;
  BOOL v8;
  double v10;
  double v11;
  long double v12;
  double v13;
  uint64_t v14;
  long double v15;

  v5 = a1 - 1;
  if (a1 == 1)
  {
    v6 = (double)(bswap32(*a2) >> 16) * 0.00390625;
    if (v6 < 2.4023 && v6 > 2.398)
      v6 = 2.4;
    *a3 = v6;
    return 1;
  }
  else if (a1 >= 0x80)
  {
    v8 = 0;
    v10 = (double)(bswap32(a2[a1 >> 1]) >> 16) / 65535.0;
    if (v10 >= 0.01 && v10 <= 0.99)
    {
      v11 = (double)v5;
      v12 = (double)(a1 >> 1) / (double)v5;
      v13 = log(v10);
      v14 = 0;
      v8 = 0;
      v15 = v13 / log(v12);
      *a3 = v15;
      do
      {
        if (vabdd_f64((double)(bswap32(a2[v14]) >> 16) / 65535.0, pow((double)v14 / v11, v15)) > 0.0001)
          break;
        v8 = ++v14 >= (unint64_t)a1;
      }
      while (a1 != v14);
    }
  }
  else
  {
    return 0;
  }
  return v8;
}

void CMMCurveTag::MakeLut(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  double v21;
  BOOL v22;
  double v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  signed int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  _DWORD *exception;
  unsigned int *v52;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v8 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v9 = v8;
  v10 = v7 - 1;
  if (v7 == 1)
  {
    v11 = *v8;
    v12 = __rev16(v11);
    if ((v12 & 0xFFFE) == 0x1CC)
    {
      v13 = 1.8;
      if (!a2)
        goto LABEL_48;
    }
    else if (v11 == 13058)
    {
      v13 = 2.2;
      if (!a2)
        goto LABEL_48;
    }
    else
    {
      v21 = (double)v12 * 0.00390625;
      v22 = v21 >= 2.4023 || v21 <= 2.398;
      if (v22)
        v13 = (double)v12 * 0.00390625;
      else
        v13 = 2.4;
      if (!a2)
        goto LABEL_48;
    }
    v23 = 1.0;
    if (v13 < 1.0)
      v23 = 16.0;
    v24 = v23;
    v25 = 0.0625;
    if (v13 <= 1.0)
      v25 = v24;
    *(_DWORD *)a2 = 1;
    *(_DWORD *)(a2 + 12) = 3;
    *(_BYTE *)(a2 + 8) = 1;
    *(_QWORD *)(a2 + 16) = 0;
    v26 = v13;
    *(float *)(a2 + 24) = v26;
    *(_QWORD *)(a2 + 28) = 1065353216;
    *(float *)(a2 + 36) = v25;
    v27 = 0.0;
    if (v26 != 1.0 && v26 != 0.0)
    {
      v28 = v26;
      if (v26 <= 1.0)
        v29 = v26;
      else
        v29 = 1.0 / v26;
      v30 = exp2(1.0 / (v29 + -1.0) * 4.0);
      v31 = 16.0;
      if (v29 == v28)
        v31 = 1.0;
      v27 = v31 * v30;
    }
    *(float *)(a2 + 40) = v27;
    goto LABEL_47;
  }
  v13 = 0.0;
  if (IsSRGBGammaCurve(v7, v8))
  {
    if (a2)
    {
      *(_DWORD *)a2 = 1;
      *(_DWORD *)(a2 + 12) = 3;
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_OWORD *)(a2 + 24) = xmmword_18B3EA8E0;
      *(_OWORD *)(a2 + 40) = xmmword_18B3EA8F0;
    }
  }
  else if (a2)
  {
    v14 = (*(float (**)(uint64_t, _QWORD, double))(*(_QWORD *)a1 + 80))(a1, 0, 0.001);
    if (v14 != 0.0)
    {
      v15 = 16.0;
      if (v14 >= 1.0)
        v15 = 1.0;
      if (v14 > 1.0)
        v15 = 0.0625;
      *(_DWORD *)a2 = 1;
      *(_BYTE *)(a2 + 8) = 1;
      *(_DWORD *)(a2 + 12) = 3;
      *(_QWORD *)(a2 + 16) = 0;
      *(float *)(a2 + 24) = v14;
      *(_QWORD *)(a2 + 28) = 1065353216;
      *(float *)(a2 + 36) = v15;
      if (v14 == 1.0)
      {
        v20 = 0.0;
      }
      else
      {
        v16 = v14;
        if (v14 <= 1.0)
          v17 = v14;
        else
          v17 = 1.0 / v14;
        v18 = exp2(1.0 / (v17 + -1.0) * 4.0);
        v19 = 16.0;
        if (v17 == v16)
          v19 = 1.0;
        v20 = v19 * v18;
      }
      *(float *)(a2 + 40) = v20;
LABEL_47:
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 44) = 0;
      goto LABEL_48;
    }
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = -1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 48) = 0;
  }
LABEL_48:
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v52 = a3;
  do
  {
    if (v7)
    {
      if (v7 == 1)
      {
        v36 = vcvtmd_s64_f64(pow((double)(int)v35 * 0.0000000596046448, v13) * 16777216.0 + 0.5);
        if (v33 > (int)v36)
          v36 = v33;
        if (v36 >= v34)
          v36 = v34;
      }
      else
      {
        v37 = v32 >> 24;
        if (v7 <= (v32 >> 24))
        {
          exception = __cxa_allocate_exception(4uLL);
          *exception = -171;
        }
        v38 = ((uint64_t)(int)v37 << 24) / v10;
        v39 = bswap32(v9[(int)v37]);
        HIDWORD(v40) = HIWORD(v39);
        LODWORD(v40) = v39;
        v36 = ((v40 >> 23) + 1) >> 1;
        if (v35 != v38)
        {
          v41 = bswap32(*(unsigned __int16 *)((char *)v9 + ((uint64_t)((v37 << 32) + 0x100000000) >> 31)));
          HIDWORD(v42) = HIWORD(v41);
          LODWORD(v42) = v41;
          v43 = (v35 - (int)v38) * v10 * (int)((((v42 >> 23) + 1) >> 1) - v36);
          if (v43)
          {
            v44 = v43 + 0x800000;
            v22 = v43 < -8388608;
            v45 = v43 + 25165823;
            if (!v22)
              v45 = v44;
            v36 += v45 >> 24;
          }
        }
      }
    }
    else
    {
      v36 = v35;
    }
    *a3++ = v36;
    v35 += 4096;
    v34 += 0x10000;
    v33 += 256;
    v32 += (unint64_t)(v7 - 1) << 12;
  }
  while (v35 != 16781312);
  if (a4 == 1 && v7 > 2)
  {
    v46 = v52[2056];
    memmove(v52 + 2058, v52 + 2057, 0x1FD8uLL);
    v52[2057] = v46;
    v52[2055] = v46;
  }
  else if (!a4 && v7 >= 3)
  {
    v47 = v52[4096];
    v48 = v52[1] - *v52;
    if (v48 < 0)
      v48 = *v52 - v52[1];
    if (v48 <= 0x7FF)
      v52[1] = *v52;
    v49 = v47 - v52[4095];
    if (v49 < 0)
      v49 = v52[4095] - v47;
    if (v49 <= 0x7FF)
      v52[4095] = v47;
  }
}

_QWORD *CMMTable::MakeFloatCopy(CMMTable *this, _QWORD **a2, CMMMemMgr *a3)
{
  _QWORD *v5;
  int *v6;
  float *v7;
  uint64_t v8;
  int v9;
  _DWORD *exception;

  if (*((_QWORD *)this + 4) <= 0x1000uLL)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = CMMBase::NewInternal(0x28uLL, a2);
  *v5 = off_1E215FE00;
  v5[1] = 1;
  v5[3] = 0;
  v5[4] = 16388;
  v5[2] = CMMBase::NewInternal(0x4004uLL, a2);
  v6 = (int *)CMMTable::FloatData(*((_QWORD *)this + 2), *((_QWORD *)this + 3));
  v7 = (float *)CMMTable::FloatData(v5[2], v5[3]);
  v8 = 4097;
  do
  {
    v9 = *v6++;
    *v7++ = (float)v9 * 0.000000059605;
    --v8;
  }
  while (v8);
  return v5;
}

void CMMCurveTag::InvertFloatParametricLUT(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;

  if (*(_DWORD *)a1 == 1)
  {
    v2 = *(float *)(a1 + 24);
    v3 = *(float *)(a1 + 28);
    v5 = *(float *)(a1 + 32);
    v4 = *(float *)(a1 + 36);
    v6 = *(float *)(a1 + 40);
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        v2 = 1.0 / v2;
        break;
      case 1:
        *(_DWORD *)(a1 + 12) = 4;
        v7 = 1.0 / v2;
        v8 = powf(v3, v2);
        v9 = (float)-v5 / v3;
        v3 = 1.0 / v8;
        *(float *)(a1 + 44) = v9;
        *(_QWORD *)(a1 + 48) = 0;
        v6 = 0.0;
        v4 = 0.0;
        v5 = 0.0;
        v2 = v7;
        break;
      case 2:
        *(_DWORD *)(a1 + 12) = 4;
        v10 = 1.0;
        v11 = 1.0 / v2;
        v12 = powf(v3, v2);
        v13 = -v5;
        v5 = v4 / v12;
        *(float *)(a1 + 44) = v13 / v3;
        *(_QWORD *)(a1 + 48) = 0;
        v6 = v4;
        v4 = 0.0;
        goto LABEL_10;
      case 3:
        *(_DWORD *)(a1 + 12) = 4;
        v10 = 1.0;
        v11 = 1.0 / v2;
        v12 = powf(v3, v2);
        v6 = v4 * v6;
        if (v4 == 0.0)
          v4 = 0.0;
        else
          v4 = 1.0 / v4;
        *(float *)(a1 + 44) = (float)-v5 / v3;
        *(_QWORD *)(a1 + 48) = 0;
        v5 = 0.0;
LABEL_10:
        v3 = v10 / v12;
        v2 = v11;
        break;
      case 4:
        v15 = *(float *)(a1 + 44);
        v14 = *(float *)(a1 + 48);
        *(_DWORD *)(a1 + 12) = 4;
        v16 = 1.0 / v2;
        v17 = powf(v3, v2);
        v18 = -v5;
        v5 = v15 / v17;
        v19 = v4 == 0.0;
        v6 = v14 + (float)(v4 * v6);
        v20 = v14 / v4;
        if (v4 == 0.0)
          v4 = 0.0;
        else
          v4 = 1.0 / v4;
        v21 = v18 / v3;
        if (v19)
          v22 = 0.0;
        else
          v22 = v20;
        *(float *)(a1 + 44) = v21;
        *(float *)(a1 + 48) = v22;
        *(_DWORD *)(a1 + 52) = 0;
        v3 = 1.0 / v17;
        v2 = v16;
        break;
      default:
        break;
    }
    *(float *)(a1 + 24) = v2;
    *(float *)(a1 + 28) = v3;
    *(float *)(a1 + 32) = v5;
    *(float *)(a1 + 36) = v4;
    *(float *)(a1 + 40) = v6;
    *(int8x8_t *)(a1 + 44) = vand_s8(*(int8x8_t *)(a1 + 44), vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)(a1 + 44)), (int8x8_t)vcgez_f32(*(float32x2_t *)(a1 + 44))));
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52);
  }
}

uint64_t CMMPQCurveTag::Initialize(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_DWORD **)(this + 40);
  *(_DWORD *)(this + 52) = bswap32(v1);
  if (v1 == 538988880)
  {
    v2 = this;
    if (*(_QWORD *)(this + 32) >= 0xCuLL)
      v3 = 0;
    else
      v3 = 4294967126;
    CMMThrowExceptionOnError(v3);
    if (*(_DWORD *)(*(_QWORD *)(v2 + 40) + 8) == -2078277632)
      return CMMThrowExceptionOnError(0);
    else
      return CMMThrowExceptionOnError(4294967126);
  }
  return this;
}

void CMMPQCurveTag::~CMMPQCurveTag(CMMPQCurveTag *this)
{
  pthread_mutex_t **v1;

  CMMPQCurveTag::~CMMPQCurveTag(this);
  CMMBase::operator delete(v1);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E215CCF0;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  CMMTag::~CMMTag(this);
}

uint64_t CMMPQCurveTag::Validate(CMMPQCurveTag *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a3 == 3 && a2 == 3)
    v5 = 0;
  else
    v5 = 4294967126;
  CMMThrowExceptionOnError(v5);
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 8) == -2078277632)
    return 0;
  else
    return 4294967126;
}

uint64_t CMMPQCurveTag::GetCurveCount(CMMPQCurveTag *this)
{
  return 0;
}

uint64_t CMMPQCurveTag::GetCurveData(CMMPQCurveTag *this)
{
  return 0;
}

uint64_t CMMPQCurveTag::SameCurve(CMMPQCurveTag *this, CMMCurveTag *lpsrc, CMMCurveTag *a3)
{
  void *v5;
  _BOOL4 v6;

  if (lpsrc)
  {
    if (a3)
      goto LABEL_3;
LABEL_6:
    v6 = 1;
    if (v5)
      return 0;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  if (v5)
    return 0;
LABEL_7:
  if (v6)
    return (*(uint64_t (**)(CMMCurveTag *, CMMCurveTag *, CMMCurveTag *))(*(_QWORD *)lpsrc + 56))(lpsrc, lpsrc, a3);
  return 0;
}

uint64_t CMMPQCurveTag::MakeTRC(uint64_t a1, uint64_t a2, float a3)
{
  if (*(_QWORD *)(a1 + 64))
    a3 = 1.0;
  *(float *)(a1 + 56) = a3;
  return CMMPQCurveTag::copy_pq_curve_table(a1, a2);
}

uint64_t CMMPQCurveTag::MakeInvertedTRC(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  CFStringRef *v10;
  unsigned __int8 v11;
  CFStringRef *v12;
  unsigned __int8 v13;
  CFStringRef *v14;
  unsigned __int8 v15;
  CFStringRef *v16;
  unsigned __int8 v17;
  CFStringRef *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;

  *(float *)(a1 + 60) = a3;
  if ((v8 & 1) == 0
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m, &dword_18B398000);
  }
  v10 = &kColorSyncSigMediaBlackPointTag;
  if ((v9 & 1) == 0)
  {
    v10 = &kColorSyncSigMediaBlackPointTag;
    if (v30)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::a = *(_DWORD *)(a1 + 72);
      v10 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v12 = &kColorSyncSigMediaBlackPointTag;
  if ((v11 & 1) == 0)
  {
    v12 = &kColorSyncSigMediaBlackPointTag;
    v10 = &kColorSyncSigMediaBlackPointTag;
    if (v31)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::b = *(_DWORD *)(a1 + 76);
      v12 = &kColorSyncSigMediaBlackPointTag;
      v10 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v14 = &kColorSyncSigMediaBlackPointTag;
  if ((v13 & 1) == 0)
  {
    v14 = &kColorSyncSigMediaBlackPointTag;
    v12 = &kColorSyncSigMediaBlackPointTag;
    v10 = &kColorSyncSigMediaBlackPointTag;
    if (v32)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::c = *(_DWORD *)(a1 + 80);
      v14 = &kColorSyncSigMediaBlackPointTag;
      v12 = &kColorSyncSigMediaBlackPointTag;
      v10 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v16 = &kColorSyncSigMediaBlackPointTag;
  if ((v15 & 1) == 0)
  {
    v16 = &kColorSyncSigMediaBlackPointTag;
    v14 = &kColorSyncSigMediaBlackPointTag;
    v12 = &kColorSyncSigMediaBlackPointTag;
    v10 = &kColorSyncSigMediaBlackPointTag;
    if (v33)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::d = *(_DWORD *)(a1 + 84);
      v16 = &kColorSyncSigMediaBlackPointTag;
      v14 = &kColorSyncSigMediaBlackPointTag;
      v12 = &kColorSyncSigMediaBlackPointTag;
      v10 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v18 = &kColorSyncSigMediaBlackPointTag;
  if ((v17 & 1) == 0)
  {
    v18 = &kColorSyncSigMediaBlackPointTag;
    v16 = &kColorSyncSigMediaBlackPointTag;
    v14 = &kColorSyncSigMediaBlackPointTag;
    v12 = &kColorSyncSigMediaBlackPointTag;
    v10 = &kColorSyncSigMediaBlackPointTag;
    if (v34)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::e = *(_DWORD *)(a1 + 88);
      v18 = &kColorSyncSigMediaBlackPointTag;
      v16 = &kColorSyncSigMediaBlackPointTag;
      v14 = &kColorSyncSigMediaBlackPointTag;
      v12 = &kColorSyncSigMediaBlackPointTag;
      v10 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v19 = *((_DWORD *)v10 + 490);
  v20 = *((_DWORD *)v12 + 494);
  v21 = *((_DWORD *)v14 + 498);
  v22 = *((_DWORD *)v16 + 502);
  v23 = *((_DWORD *)v18 + 506);
  v24 = *(_DWORD *)(a1 + 60);
  if (CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::predicate == -1)
  {
    if (!a2)
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_158);
    if (!a2)
      goto LABEL_11;
  }
  *(_OWORD *)a2 = xmmword_18B3EA940;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_DWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 40) = v22;
  *(_DWORD *)(a2 + 44) = v23;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = v24;
  v25 = CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::float_table;
  *(_QWORD *)(a2 + 16) = CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::float_table;
  v26 = *(_QWORD *)(v25 + 8);
  if (v26)
    *(_QWORD *)(v25 + 8) = v26 + 1;
LABEL_11:
  v27 = CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table;
  v28 = *(_QWORD *)(CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v28)
    *(_QWORD *)(CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 8) = v28 + 1;
  *a5 = CMMPQCurveTag::copy_pq_curve_table(a1, 0);
  return v27;
}

void sub_18B3D5A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float CMMPQCurveTag::EvaluateGamma(CMMPQCurveTag *this, BOOL *a2, double a3)
{
  return 0.0;
}

uint64_t CMMPQCurveTag::copy_pq_curve_table(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  CFStringRef *v6;
  unsigned __int8 v7;
  CFStringRef *v8;
  unsigned __int8 v9;
  CFStringRef *v10;
  unsigned __int8 v11;
  CFStringRef *v12;
  unsigned __int8 v13;
  CFStringRef *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  int v30;
  CFStringRef *v31;
  int v32;
  CFStringRef *v33;
  int v34;
  CFStringRef *v35;
  int v36;

  if ((v4 & 1) == 0
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::m, &dword_18B398000);
  }
  v6 = &kColorSyncSigMediaBlackPointTag;
  if ((v5 & 1) == 0)
  {
    v6 = &kColorSyncSigMediaBlackPointTag;
    if (v29)
    {
      *(float *)&CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::a = 1.0 / *(float *)(a1 + 76);
      v6 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v8 = &kColorSyncSigMediaBlackPointTag;
  if ((v7 & 1) == 0)
  {
    v8 = &kColorSyncSigMediaBlackPointTag;
    v6 = &kColorSyncSigMediaBlackPointTag;
    if (v30)
    {
      *(float *)&CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::b = 1.0 / *(float *)(a1 + 72);
      v8 = &kColorSyncSigMediaBlackPointTag;
      v6 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v10 = &kColorSyncSigMediaBlackPointTag;
  if ((v9 & 1) == 0)
  {
    v31 = v8;
    v10 = &kColorSyncSigMediaBlackPointTag;
    v8 = v31;
    v6 = &kColorSyncSigMediaBlackPointTag;
    if (v32)
    {
      CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::c = *(_DWORD *)(a1 + 80);
      v10 = &kColorSyncSigMediaBlackPointTag;
      v8 = v31;
      v6 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v12 = &kColorSyncSigMediaBlackPointTag;
  if ((v11 & 1) == 0)
  {
    v33 = v8;
    v12 = &kColorSyncSigMediaBlackPointTag;
    v10 = &kColorSyncSigMediaBlackPointTag;
    v8 = v33;
    v6 = &kColorSyncSigMediaBlackPointTag;
    if (v34)
    {
      CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::d = *(_DWORD *)(a1 + 84);
      v12 = &kColorSyncSigMediaBlackPointTag;
      v10 = &kColorSyncSigMediaBlackPointTag;
      v8 = v33;
      v6 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v14 = &kColorSyncSigMediaBlackPointTag;
  if ((v13 & 1) == 0)
  {
    v35 = v8;
    v14 = &kColorSyncSigMediaBlackPointTag;
    v12 = &kColorSyncSigMediaBlackPointTag;
    v10 = &kColorSyncSigMediaBlackPointTag;
    v8 = v35;
    v6 = &kColorSyncSigMediaBlackPointTag;
    if (v36)
    {
      CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::e = *(_DWORD *)(a1 + 88);
      v14 = &kColorSyncSigMediaBlackPointTag;
      v12 = &kColorSyncSigMediaBlackPointTag;
      v10 = &kColorSyncSigMediaBlackPointTag;
      v8 = v35;
      v6 = &kColorSyncSigMediaBlackPointTag;
    }
  }
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *((_DWORD *)v6 + 544);
  v17 = *((_DWORD *)v8 + 548);
  v18 = *((_DWORD *)v10 + 552);
  v19 = *((_DWORD *)v12 + 556);
  v20 = *((_DWORD *)v14 + 560);
  v21 = *(_DWORD *)(a1 + 56);
  if (CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::predicate[0] == -1)
  {
    if (!a2)
      goto LABEL_16;
  }
  else
  {
    dispatch_once(CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_574);
    if (!a2)
      goto LABEL_16;
  }
  if (v15)
    v22 = 17;
  else
    v22 = 8;
  *(_DWORD *)a2 = v15 == 0;
  *(_DWORD *)(a2 + 4) = v22;
  *(_QWORD *)(a2 + 8) = 0x500000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v16;
  *(_DWORD *)(a2 + 32) = v17;
  *(_DWORD *)(a2 + 36) = v18;
  *(_DWORD *)(a2 + 40) = v19;
  *(_DWORD *)(a2 + 44) = v20;
  *(_DWORD *)(a2 + 48) = 893662952;
  *(_DWORD *)(a2 + 52) = v21;
  v23 = *(_QWORD *)(a1 + 64);
  if (!v23)
    v23 = CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::float_table;
  *(_QWORD *)(a2 + 16) = v23;
  v26 = *(_QWORD *)(v23 + 8);
  v24 = (_QWORD *)(v23 + 8);
  v25 = v26;
  if (v26)
    *v24 = v25 + 1;
LABEL_16:
  result = CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table;
  v28 = *(_QWORD *)(CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v28)
    *(_QWORD *)(CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 8) = v28 + 1;
  return result;
}

void sub_18B3D5DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CMMTable::MutableFloatData(uint64_t this)
{
  _DWORD *exception;

  if (!this)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  return this;
}

void CMMLutTag::GetWholeCloth(CMMLutTag *this, unsigned __int8 *a2, unint64_t *a3)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

_QWORD *CMMLutTag::CopyClut(CMMLutTag *this, CMMMemMgr *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  const void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BOOL8 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL8 v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t i;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _BOOL8 v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  _BOOL8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BOOL8 v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BOOL8 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL8 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int16 *v161;
  uint64_t v162;
  int v163;
  uint64_t j;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _BOOL8 v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int *v173;
  uint64_t v174;
  int v175;
  CMMLutTag *v176;
  CMMLutTag *v177;
  unsigned int v178;
  int v179;
  char *v180;
  unsigned __int8 *v181;
  int *v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int16 *v188;
  int *v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *exception;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t MaxCLUTPoints;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  CMMLutTag *v213;
  unsigned int v214;
  unsigned int v215[16];
  _OWORD v216[2];
  unsigned int v217[16];
  _WORD v218[256];
  _DWORD v219[16];
  _DWORD v220[18];
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 14);
  if (!v2)
    return 0;
  if (*((_DWORD *)this + 26))
  {
    if (*((_BYTE *)this + 96) == 2)
    {
      v5 = *(_QWORD *)(v2 + 32);
      v6 = (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 72))(this);
      v7 = v6 + v5;
      if (__CFADD__(v6, v5))
        v8 = 4294967246;
      else
        v8 = 0;
      CMMThrowExceptionOnError(v8);
      v9 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
      v10 = 1;
      *v9 = off_1E215FE00;
      v9[1] = 1;
      v9[3] = 0;
      v9[4] = v7;
      v9[2] = CMMBase::NewInternal(v7, (_QWORD **)a2);
      v11 = (unsigned __int16 *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 14) + 16), *(_QWORD *)(*((_QWORD *)this + 14) + 24));
      v18 = (_WORD *)CMMTable::FloatData(v9[2], v9[3]);
      v19 = *((unsigned __int8 *)this + 52);
      if (!*((_BYTE *)this + 52))
        goto LABEL_17;
      v20 = *((_DWORD *)this + 26);
      LODWORD(v10) = 1;
      do
      {
        v21 = v10;
        v10 = v10 * v20;
        v22 = v10 >= v21 && v10 >= v20;
        v23 = v22;
        CMMThrowExceptionWithLog(v23, "Overflow in Power", v12, v13, v14, v15, v16, v17);
        --v19;
      }
      while (v19);
      if ((_DWORD)v10)
      {
LABEL_17:
        v24 = 0;
        v25 = *((unsigned __int8 *)this + 53);
        do
        {
          v26 = v25;
          if ((_DWORD)v25)
          {
            do
            {
              v27 = *v11++;
              *v18++ = bswap32(v27) >> 16;
              --v26;
            }
            while (v26);
          }
          ++v24;
        }
        while (v24 != v10);
      }
    }
    else
    {
      v57 = (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 72))(this);
      v58 = 2 * v57;
      CMMThrowExceptionOnError((v57 >> 63) & 0xFFFFFFCELL);
      v59 = *(_QWORD *)(*((_QWORD *)this + 14) + 32);
      v60 = v58 + 2 * v59;
      if (__CFADD__(v58, 2 * v59))
        v61 = 4294967246;
      else
        v61 = 0;
      CMMThrowExceptionOnError(v61);
      v9 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
      v62 = 1;
      *v9 = off_1E215FE00;
      v9[1] = 1;
      v9[3] = 0;
      v9[4] = v60;
      v9[2] = CMMBase::NewInternal(v60, (_QWORD **)a2);
      v63 = (unsigned __int8 *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 14) + 16), *(_QWORD *)(*((_QWORD *)this + 14) + 24));
      v70 = (_WORD *)CMMTable::FloatData(v9[2], v9[3]);
      v71 = *((unsigned __int8 *)this + 52);
      if (!*((_BYTE *)this + 52))
        goto LABEL_50;
      v72 = *((_DWORD *)this + 26);
      LODWORD(v62) = 1;
      do
      {
        v73 = v62;
        v62 = v62 * v72;
        v75 = v62 >= v73 && v62 >= v72;
        CMMThrowExceptionWithLog(v75, "Overflow in Power", v64, v65, v66, v67, v68, v69);
        --v71;
      }
      while (v71);
      if ((_DWORD)v62)
      {
LABEL_50:
        v76 = 0;
        v77 = *((unsigned __int8 *)this + 53);
        do
        {
          v78 = v77;
          if ((_DWORD)v77)
          {
            do
            {
              v79 = *v63++;
              *v70++ = v79 | (v79 << 8);
              --v78;
            }
            while (v78);
          }
          ++v76;
        }
        while (v76 != v62);
      }
    }
    return v9;
  }
  MaxCLUTPoints = CMMLutTag::GetMaxCLUTPoints(*((unsigned __int8 *)this + 52), (unsigned __int8 *)this + 80);
  v28 = (_QWORD *)*((_QWORD *)this + 14);
  v29 = *((unsigned __int8 *)this + 96);
  v30 = v28[4];
  v31 = (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 72))(this);
  v22 = __CFADD__(v31, v30);
  v32 = v31 + v30;
  if (v22)
    v33 = 4294967246;
  else
    v33 = 0;
  CMMThrowExceptionOnError(v33);
  v34 = 2 * v32;
  CMMThrowExceptionOnError((v32 >> 63) & 0xFFFFFFCELL);
  v35 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
  *v35 = off_1E215FE00;
  v35[1] = 1;
  v35[3] = 0;
  v35[4] = v34;
  v36 = CMMBase::NewInternal(v34, (_QWORD **)a2);
  v201 = v35;
  v35[2] = v36;
  v37 = *((unsigned __int8 *)this + 80);
  v38 = *((unsigned __int8 *)this + 52);
  if (v38 >= 2)
  {
    v39 = v38 - 1;
    v40 = (unsigned __int8 *)this + 81;
    do
    {
      v41 = *v40++;
      v37 *= v41;
      --v39;
    }
    while (v39);
  }
  v42 = (_WORD *)CMMTable::FloatData((uint64_t)v36, v201[3]);
  v43 = v28[2];
  v44 = v28[3];
  if (v29 == 1)
  {
    v45 = (unsigned __int8 *)CMMTable::FloatData(v43, v44);
    v52 = MaxCLUTPoints;
    if (v37)
    {
      v53 = 0;
      v54 = *((unsigned __int8 *)this + 53);
      do
      {
        if (v54)
        {
          v55 = 0;
          do
          {
            v56 = *v45++;
            *v42++ = __rev16(v56 | (v56 << 8));
            ++v55;
          }
          while (v54 > (unsigned __int16)v55);
        }
        ++v53;
      }
      while (v53 != v37);
    }
  }
  else
  {
    v80 = (const void *)CMMTable::FloatData(v43, v44);
    memcpy(v42, v80, (2 * v37));
    v52 = MaxCLUTPoints;
  }
  v81 = *((unsigned __int8 *)this + 52);
  v210 = *((unsigned __int8 *)this + 53);
  v203 = 2 * v210;
  v206 = v81;
  v82 = 1;
  if (!*((_BYTE *)this + 52))
    goto LABEL_65;
  do
  {
    v83 = v82;
    v82 *= v52;
    v85 = v82 >= v83 && v82 >= v52;
    CMMThrowExceptionWithLog(v85, "Overflow in Power", v46, v47, v48, v49, v50, v51);
    --v81;
  }
  while (v81);
  if (!v82)
  {
    v86 = 0;
    v87 = 0;
  }
  else
  {
LABEL_65:
    v86 = v203 * v82;
    if (is_mul_ok(v82, v203))
      v87 = 0;
    else
      v87 = 4294967246;
  }
  CMMThrowExceptionOnError(v87);
  v88 = (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 72))(this);
  v202 = v86;
  v89 = v88 + v86;
  if (__CFADD__(v88, v86))
    v90 = 4294967246;
  else
    v90 = 0;
  CMMThrowExceptionOnError(v90);
  v199 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
  *v199 = off_1E215FE00;
  v199[1] = 1;
  v199[3] = 0;
  v199[4] = v89;
  v199[2] = CMMBase::NewInternal(v89, (_QWORD **)a2);
  v91 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
  v207 = (char *)this + 80;
  v98 = v206;
  v200 = v91;
  v204 = v82;
  if ((_DWORD)v206)
  {
    v99 = 1;
    do
    {
      v100 = v99;
      v99 *= 2;
      v102 = v100 >= 0 && v99 != 0;
      CMMThrowExceptionWithLog(v102, "Overflow in Power", v92, v93, v94, v95, v96, v97);
      --v98;
    }
    while (v98);
    v103 = 8 * v100;
    v104 = v200;
  }
  else
  {
    v104 = v91;
    v103 = 4;
  }
  *v104 = off_1E215FE00;
  v104[1] = 1;
  v104[3] = 0;
  v104[4] = v103;
  v105 = CMMBase::NewInternal(v103, (_QWORD **)a2);
  v104[2] = v105;
  v106 = (_DWORD *)CMMTable::FloatData((uint64_t)v105, v104[3]);
  v213 = this;
  v113 = *((unsigned __int8 *)this + 52);
  *v106 = *((unsigned __int8 *)this + 53);
  if (v113 >= 2)
  {
    v114 = v106;
    v115 = 0;
    for (i = 1; i != v113; ++i)
    {
      if (i == 1)
      {
        v119 = 1;
      }
      else
      {
        v117 = 1;
        v118 = v115;
        do
        {
          v119 = (2 * v117);
          v121 = v117 >= 0 && (_DWORD)v119 != 0;
          CMMThrowExceptionWithLog(v121, "Overflow in Power", v107, v108, v109, v110, v111, v112);
          v117 = v119;
          --v118;
        }
        while (v118);
      }
      v122 = v114[v119 - 1];
      v123 = v207[i];
      v124 = 1;
      v125 = i;
      do
      {
        v126 = 2 * v124;
        v128 = v124 >= 0 && v126 != 0;
        CMMThrowExceptionWithLog(v128, "Overflow in Power", v107, v108, v109, v110, v111, v112);
        v124 = v126;
        --v125;
      }
      while (v125);
      v114[v126 - 1] = v122 * v123;
      ++v115;
    }
    v129 = 1;
    v130 = 2;
    while (1)
    {
      v211 = v129;
      v131 = 1;
      do
      {
        v132 = v131 < 0;
        v131 *= 2;
        v134 = !v132 && v131 != 0;
        CMMThrowExceptionWithLog(v134, "Overflow in Power", v107, v108, v109, v110, v111, v112);
        --v129;
      }
      while (v129);
      v208 = v130;
      v135 = v130;
      v136 = 1;
      do
      {
        v137 = 2 * v136;
        v139 = v136 >= 0 && v137 != 0;
        CMMThrowExceptionWithLog(v139, "Overflow in Power", v107, v108, v109, v110, v111, v112);
        v136 = v137;
        --v135;
      }
      while (v135);
      v140 = v131 | 1;
      if ((v131 | 1uLL) < v137)
        break;
LABEL_148:
      v129 = v211 + 1;
      v130 = v208 + 1;
      if (v211 + 1 == v113)
        goto LABEL_149;
    }
LABEL_123:
    v141 = 0;
    v142 = 0;
    v143 = v140;
    while (!v141)
    {
      if ((v143 & 1) != 0)
      {
        v151 = 1;
LABEL_145:
        v142 += v114[v151 - 1];
      }
LABEL_146:
      if (++v141 == v113)
      {
        v114[v131] = v142;
        v140 = v143 + 1;
        v131 = v143;
        if (v143 + 1 == v137)
          goto LABEL_148;
        goto LABEL_123;
      }
    }
    v144 = v141;
    v145 = 1;
    do
    {
      v146 = 2 * v145;
      v148 = v145 >= 0 && v146 != 0;
      CMMThrowExceptionWithLog(v148, "Overflow in Power", v107, v108, v109, v110, v111, v112);
      v145 = v146;
      --v144;
    }
    while (v144);
    if ((v146 & v143) == 0)
      goto LABEL_146;
    v149 = v141;
    v150 = 1;
    do
    {
      v151 = 2 * v150;
      v153 = v150 >= 0 && v151 != 0;
      CMMThrowExceptionWithLog(v153, "Overflow in Power", v107, v108, v109, v110, v111, v112);
      v150 = v151;
      --v149;
    }
    while (v149);
    goto LABEL_145;
  }
LABEL_149:
  v154 = CMMTable::FloatData(v199[2], v199[3]);
  v209 = CMMTable::FloatData(v201[2], v201[3]);
  v161 = (unsigned __int16 *)CMMTable::FloatData(v200[2], v200[3]);
  memset(v218, 0, sizeof(v218));
  memset(v216, 0, sizeof(v216));
  memset(v215, 0, sizeof(v215));
  if (MaxCLUTPoints)
  {
    v162 = 0;
    do
    {
      v163 = (int)((double)v162 / (double)(MaxCLUTPoints - 1) * 65535.0 + 0.5);
      if (v163 >= 0xFFFF)
        v163 = 0xFFFF;
      v218[v162++] = v163 & ~(unsigned __int16)(v163 >> 31);
    }
    while (MaxCLUTPoints > v162);
  }
  if ((_DWORD)v206)
  {
    for (j = 0; j != v206; ++j)
    {
      if (j)
      {
        v165 = j;
        v166 = 1;
        do
        {
          v167 = v166 * MaxCLUTPoints;
          v169 = v166 * MaxCLUTPoints >= v166 && v167 >= MaxCLUTPoints;
          CMMThrowExceptionWithLog(v169, "Overflow in Power", v155, v156, v157, v158, v159, v160);
          v166 = v167;
          --v165;
        }
        while (v165);
      }
      else
      {
        LODWORD(v167) = 1;
      }
      v215[j] = v167;
    }
  }
  if (v204)
  {
    v170 = 0;
    v171 = 0;
    do
    {
      v212 = v171;
      memset(v217, 0, sizeof(v217));
      DecodeN(v170, v206, (unsigned int (*)[16])v217, (unsigned int (*)[16])v215, MaxCLUTPoints);
      if ((_DWORD)v206)
      {
        v173 = v217;
        v174 = 2 * v206;
        do
        {
          v175 = *v173++;
          *(_WORD *)((char *)&v215[15] + v174 + 2) = v218[v175];
          v174 -= 2;
        }
        while (v174);
      }
      memset(v219, 0, sizeof(v219));
      v176 = (CMMLutTag *)*((unsigned __int8 *)v213 + 52);
      if (*((_BYTE *)v213 + 52))
      {
        v177 = 0;
        memset(v220, 0, 64);
        do
        {
          v178 = (*((unsigned __int8 *)v177 + (_QWORD)v207) - 1) * *((unsigned __int16 *)v216 + (_QWORD)v177) + 1;
          v220[(_QWORD)v177] = HIWORD(v178);
          v219[(_QWORD)v177] = (unsigned __int16)v178 >> 1;
          v177 = (CMMLutTag *)((char *)v177 + 1);
        }
        while (v176 != v177);
        v179 = v220[0];
        if (v176 >= 2)
        {
          v180 = (char *)v176 - 1;
          v181 = (unsigned __int8 *)v213 + 81;
          v182 = &v220[1];
          do
          {
            v184 = *v181++;
            v183 = v184;
            v185 = *v182++;
            v179 = v185 + v179 * v183;
            --v180;
          }
          while (v180);
        }
      }
      else
      {
        v179 = 0;
      }
      v186 = *((unsigned __int8 *)v213 + 53);
      if (*((_BYTE *)v213 + 53))
      {
        v187 = 0;
        v188 = (unsigned __int16 *)(v209 + 2 * (v179 * v186));
        do
        {
          v189 = (int *)(bswap32(*v188) >> 16);
          v214 = 0;
          if ((_DWORD)v176)
          {
            v190 = 0;
            do
              v189 = CMMLutTag::Interpolate(v176, v190++, (uint64_t)v219, v189, (uint64_t)v188, v161, &v214, v172);
            while ((_DWORD)v176 != v190);
          }
          *((_WORD *)v216 + v187) = (_WORD)v189;
          ++v188;
          ++v187;
        }
        while (v187 != v186);
      }
      if ((_DWORD)v210)
      {
        v191 = v210 + v210 * (unint64_t)v212 - 1;
        v192 = 2 * v210;
        do
        {
          if (v191 >= v202 >> 1)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = -171;
          }
          *(_WORD *)(v154 + 2 * v191--) = *(_WORD *)((char *)&v215[15] + v192 + 2);
          v192 -= 2;
        }
        while (v192);
      }
      v170 = v212 + 1;
      v171 = v212 + 1;
    }
    while (v204 > v170);
  }
  v193 = v201[1];
  if (v193)
  {
    v194 = v193 - 1;
    v201[1] = v194;
    if (!v194)
      (*(void (**)(_QWORD *))(*v201 + 8))(v201);
  }
  v9 = v199;
  v195 = v200[1];
  if (v195)
  {
    v196 = v195 - 1;
    v200[1] = v196;
    if (!v196)
      (*(void (**)(_QWORD *))(*v200 + 8))(v200);
  }
  return v9;
}

unint64_t CMMLutTag::GetCLutPoints(CMMLutTag *this)
{
  if (*((_DWORD *)this + 26))
    return *((unsigned int *)this + 26);
  else
    return CMMLutTag::GetMaxCLUTPoints(*((unsigned __int8 *)this + 52), (unsigned __int8 *)this + 80);
}

unint64_t CMMLutTag::InterpolationProtectionZone(CMMLutTag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t MaxCLUTPoints;
  uint64_t v10;

  MaxCLUTPoints = *((unsigned int *)this + 26);
  if (!(_DWORD)MaxCLUTPoints)
  {
    if (*((_BYTE *)this + 80))
      v10 = 0;
    else
      v10 = 4294967246;
    CMMThrowExceptionOnError(v10);
    MaxCLUTPoints = CMMLutTag::GetMaxCLUTPoints(*((unsigned __int8 *)this + 52), (unsigned __int8 *)this + 80);
  }
  return CMMLutTagBase::CalculateProtectionZone(MaxCLUTPoints, *((unsigned __int8 *)this + 52), *((unsigned __int8 *)this + 53), a4, a5, a6, a7, a8)* *((unsigned __int8 *)this + 96);
}

uint64_t CMMLutTag::GetInputLutSize(CMMLutTag *this)
{
  return (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 144))(this);
}

uint64_t CMMLutTag::GetOutputLutSize(CMMLutTag *this)
{
  return (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 152))(this);
}

uint64_t CMMLutBtoATag::MakeInputTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 216) <= a2)
    return 0;
  v6 = a2 - 1 < 2 && a5 == 1347182946;
  v7 = *(_QWORD *)(a1 + 8 * a2 + 224);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutBtoATag::GetInputMatrix(CMMLutBtoATag *this)
{
  uint64_t result;
  int v3;
  int32x4_t v4;
  uint8x8_t v5;

  v3 = *((_DWORD *)this + 30);
  result = (uint64_t)this + 120;
  if (v3 == 0x10000 && *((_DWORD *)this + 35) == 0x10000 && *((_DWORD *)this + 40) == 0x10000)
  {
    v4.i64[0] = vrev64q_s32(*(int32x4_t *)((char *)this + 124)).u64[0];
    v4.i64[1] = *(_QWORD *)((char *)this + 132);
    v5 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v4), (int16x8_t)vceqzq_s32(*((int32x4_t *)this + 9)))));
    v5.i8[0] = vmaxv_u8(v5);
    if (((*((_DWORD *)this + 41) == 0) & ~v5.i32[0]) != 0)
      return 0;
  }
  return result;
}

uint64_t CMMLutBtoATag::MakePreCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 352) <= a2)
    return 0;
  v6 = a2 - 1 < 2 && a5 == 1347182946;
  v7 = *(_QWORD *)(a1 + 8 * a2 + 360);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutBtoATag::MakePostCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 488) <= a2)
    return 0;
  v6 = a2 - 1 < 2 && a5 == 1347182946;
  v7 = *(_QWORD *)(a1 + 8 * a2 + 496);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutBtoATag::GetOutputMatrix(CMMLutBtoATag *this)
{
  return 0;
}

uint64_t CMMLutBtoATag::MakeOutputTRC()
{
  return 0;
}

uint64_t CMMLutBtoATag::GetPreCLUTLutSize(CMMLutBtoATag *this, unsigned int a2)
{
  uint64_t result;

  result = *((_QWORD *)this + a2 + 45);
  if (result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t CMMLutBtoATag::GetPostCLUTLutSize(CMMLutBtoATag *this, unsigned int a2)
{
  uint64_t result;

  result = *((_QWORD *)this + a2 + 62);
  if (result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

unint64_t CMMLutTag::GetMaxCLUTPoints(unsigned int a1, unsigned __int8 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v4 = *a2;
  if (v4 <= 1)
    v5 = 4294967126;
  else
    v5 = 0;
  CMMThrowExceptionOnError(v5);
  if (a1 >= 2)
  {
    v6 = a1 - 1;
    v7 = a2 + 1;
    do
    {
      if (*v7 <= 1u)
        v8 = 4294967126;
      else
        v8 = 0;
      CMMThrowExceptionOnError(v8);
      v10 = *v7++;
      v9 = v10;
      if (v4 <= v10)
        v4 = v9;
      --v6;
    }
    while (v6);
  }
  return v4;
}

unint64_t DecodeN(unint64_t result, uint64_t a2, unsigned int (*a3)[16], unsigned int (*a4)[16], unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  _DWORD *exception;

  v5 = a2 - 1;
  if (a2 != 1)
  {
    do
    {
      v6 = (*a4)[v5];
      (*a3)[v5] = result / v6;
      result %= v6;
      --v5;
    }
    while (v5);
  }
  if (result >= a5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  (*a3)[0] = result;
  return result;
}

int *CMMLutTag::Interpolate(CMMLutTag *this, int a2, uint64_t a3, int *a4, uint64_t a5, unsigned __int16 *a6, unsigned int *a7, unsigned int *a8)
{
  int v10;
  int *v11;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BOOL8 v26;

  v10 = a5;
  v11 = a4;
  if (a2)
  {
    v14 = a2;
    v15 = (~a2 + (_DWORD)this);
    if (*(_DWORD *)(a3 + 4 * v15))
    {
      v16 = 0;
      v17 = *a7;
      *a7 = v17 + 1;
      v18 = (int *)(bswap32(*(unsigned __int16 *)(a5 + 2 * *(unsigned int *)&a6[2 * v17])) >> 16);
      do
      {
        v19 = CMMLutTag::Interpolate(this, v16, a3, v18, v10, a6, a7, a8);
        v18 = (int *)v19;
        ++v16;
      }
      while (v14 != v16);
      v20 = *(_DWORD *)(a3 + 4 * v15);
      v21 = v19 - (_DWORD)v11;
      return (int *)((_DWORD)v11 + ((v20 * v21 + 0x4000) >> 15));
    }
    v23 = 1;
    do
    {
      v24 = 2 * v23;
      v26 = v23 >= 0 && v24 != 0;
      CMMThrowExceptionWithLog(v26, "Overflow in Power", a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
      v23 = v24;
      --v14;
    }
    while (v14);
    *a7 += v24;
  }
  else
  {
    v22 = *a7;
    *a7 = v22 + 1;
    v21 = *(_DWORD *)(a3 + 4 * ((_DWORD)this - 1));
    if (v21)
    {
      v20 = *(unsigned __int16 *)(a5 + 2 * *(unsigned int *)&a6[2 * v22]) - (_DWORD)a4;
      return (int *)((_DWORD)v11 + ((v20 * v21 + 0x4000) >> 15));
    }
  }
  return v11;
}

uint64_t CMMLutAtoBTag::MakeInputTRC()
{
  return 0;
}

uint64_t CMMLutAtoBTag::GetInputMatrix(CMMLutAtoBTag *this)
{
  return 0;
}

uint64_t CMMLutAtoBTag::MakePreCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 488) <= a2)
    return 0;
  v6 = a2 - 1 < 2 && a5 == 1347182946;
  v7 = *(_QWORD *)(a1 + 8 * a2 + 496);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutAtoBTag::MakePostCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 352) <= a2)
    return 0;
  v6 = a2 - 1 < 2 && a5 == 1347182946;
  v7 = *(_QWORD *)(a1 + 8 * a2 + 360);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutAtoBTag::GetOutputMatrix(CMMLutAtoBTag *this)
{
  uint64_t result;
  int v3;
  int32x4_t v4;
  uint8x8_t v5;

  v3 = *((_DWORD *)this + 30);
  result = (uint64_t)this + 120;
  if (v3 == 0x10000 && *((_DWORD *)this + 35) == 0x10000 && *((_DWORD *)this + 40) == 0x10000)
  {
    v4.i64[0] = vrev64q_s32(*(int32x4_t *)((char *)this + 124)).u64[0];
    v4.i64[1] = *(_QWORD *)((char *)this + 132);
    v5 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v4), (int16x8_t)vceqzq_s32(*((int32x4_t *)this + 9)))));
    v5.i8[0] = vmaxv_u8(v5);
    if (((*((_DWORD *)this + 41) == 0) & ~v5.i32[0]) != 0)
      return 0;
  }
  return result;
}

uint64_t CMMLutAtoBTag::MakeOutputTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  _BOOL8 v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 216) <= a2)
    return 0;
  v6 = a2 - 1 < 2 && a5 == 1347182946;
  v7 = *(_QWORD *)(a1 + 8 * a2 + 224);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, float))(*(_QWORD *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutAtoBTag::GetPreCLUTLutSize(CMMLutAtoBTag *this, unsigned int a2)
{
  uint64_t result;

  result = *((_QWORD *)this + a2 + 62);
  if (result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t CMMLutAtoBTag::GetPostCLUTLutSize(CMMLutAtoBTag *this, unsigned int a2)
{
  uint64_t result;

  result = *((_QWORD *)this + a2 + 45);
  if (result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t CMMParaCurveTag::GetCurveData(CMMParaCurveTag *this)
{
  return 0;
}

void CMMParaCurveTag::EvaluateGamma(CMMParaCurveTag *this, BOOL *a2, double a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD **v22;

  if (*((_WORD *)this + 28))
  {
    v22 = 0;
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v22);
    v5 = CMMBase::NewInternal(0x28uLL, &v22);
    *v5 = off_1E215FE00;
    v5[1] = 1;
    v5[3] = 0;
    v5[4] = 16388;
    v6 = CMMBase::NewInternal(0x4004uLL, &v22);
    v5[2] = v6;
    v7 = (int *)CMMTable::FloatData((uint64_t)v6, v5[3]);
    CMMParaCurveTag::MakeLut((uint64_t)this, 0, v7, -1, 1.0);
    v8 = CMMTable::FloatData(v5[2], v5[3]);
    v10 = 0;
    v11 = 0;
    v12 = 0.0;
    v13 = 0.0;
    do
    {
      if ((v10 & 0x7FFFEFFF) != 0)
      {
        LODWORD(v9) = *(_DWORD *)(v8 + 4 * v10);
        v9 = (double)*(unint64_t *)&v9;
        v14 = v9 * 0.0000000596046448;
        if (v9 * 0.0000000596046448 != 0.0 && v14 != 1.0)
        {
          v16 = log(v13 * 0.000244140625);
          v9 = log(v14) / v16;
          v12 = v12 + v9;
          ++v11;
        }
      }
      v13 = v13 + 1.0;
      ++v10;
    }
    while ((_DWORD)v10 != 4097);
    if (v11)
    {
      v17 = CMMTable::FloatData(v5[2], v5[3]);
      for (i = 0; i != 4097; ++i)
      {
        HIDWORD(v19) = 1060110336;
        LODWORD(v19) = *(_DWORD *)(v17 + 4 * i);
        if (vabdd_f64((double)v19 * 0.0000000596046448, pow((double)i * 0.000244140625, v12 / (double)v11)) > a3)break;
      }
    }
    if (v22)
    {
      v20 = *v22;
      if (*v22)
      {
        do
        {
          v21 = (_QWORD *)*v20;
          free(v20);
          v20 = v21;
        }
        while (v21);
      }
    }
    CMMMemMgr::ReleaseMemList((void **)&v22);
  }
  else if (*((_DWORD *)this + 16) >> 1 == 58982)
  {
    if (a2)
      *a2 = 1;
  }
  else if (a2)
  {
    *a2 = 1;
  }
}

void sub_18B3D744C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMLut16Tag::GetTagType(CMMLut16Tag *this)
{
  return 1835430962;
}

char *CMMLut16Tag::GetWholeCloth(char *this, unsigned __int8 *a2, unint64_t *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL8 v19;
  uint64_t v20;
  unsigned int v21;
  size_t v22;
  unsigned int v23;
  size_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *exception;

  if (!a3)
    goto LABEL_22;
  v4 = this;
  if (!a2)
  {
    *a3 = *((_QWORD *)this + 4);
    return this;
  }
  if (*a3 != *((_QWORD *)this + 4))
  {
LABEL_22:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  bzero(a2, *a3);
  *(_DWORD *)a2 = 846489197;
  v11 = *(_OWORD *)(v4 + 50);
  v12 = *(_OWORD *)(v4 + 66);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(v4 + 78);
  *(_OWORD *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 8) = v11;
  v13 = 12;
  do
  {
    *(_DWORD *)&a2[v13] = bswap32(*(_DWORD *)&a2[v13]);
    v13 += 4;
  }
  while ((_DWORD)v13 != 48);
  *((_WORD *)a2 + 24) = bswap32(*((unsigned __int16 *)a2 + 24)) >> 16;
  *((_WORD *)a2 + 25) = bswap32(*((unsigned __int16 *)a2 + 25)) >> 16;
  v14 = v4[50];
  if (v4[50])
  {
    v15 = v4[52];
    v16 = 1;
    do
    {
      v17 = v16 * v15;
      v19 = v16 * v15 >= v16 && v17 >= v15;
      CMMThrowExceptionWithLog(v19, "Overflow in Power", v5, v6, v7, v8, v9, v10);
      v16 = v17;
      --v14;
    }
    while (v14);
    v20 = 2 * v17;
    v21 = 2 * v4[50];
  }
  else
  {
    v21 = 0;
    v20 = 2;
  }
  v22 = v20 * v4[51];
  v23 = *((unsigned __int16 *)v4 + 45);
  v24 = v21 * (unint64_t)*((unsigned __int16 *)v4 + 45);
  v25 = v4[51] * (unint64_t)*((unsigned __int16 *)v4 + 46);
  v26 = a2 + 52;
  v27 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)v4 + 13) + 16), *(_QWORD *)(*((_QWORD *)v4 + 13) + 24));
  memcpy(v26, v27, v24);
  v28 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)v4 + 12) + 16), *(_QWORD *)(*((_QWORD *)v4 + 12) + 24));
  memcpy(&v26[v21 * (unint64_t)v23], v28, v22);
  v29 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)v4 + 14) + 16), *(_QWORD *)(*((_QWORD *)v4 + 14) + 24));
  this = (char *)memcpy(&v26[v21 * (unint64_t)v23 + v22], v29, 2 * v25);
  v30 = v22 + v21 * (unint64_t)v23 + 2 * v25;
  if (v30)
  {
    v31 = v30 >> 1;
    do
    {
      *(_WORD *)v26 = bswap32(*(unsigned __int16 *)v26) >> 16;
      v26 += 2;
      --v31;
    }
    while (v31);
  }
  return this;
}

_QWORD *CMMLut16Tag::CopyClut(CMMLut16Tag *this, CMMMemMgr *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  if (*((_QWORD *)this + 12))
    v4 = 0;
  else
    v4 = 4294967246;
  CMMThrowExceptionOnError(v4);
  v5 = (*(uint64_t (**)(CMMLut16Tag *))(*(_QWORD *)this + 72))(this);
  CMMThrowExceptionOnError((v5 >> 63) & 0xFFFFFFCELL);
  v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  v7 = v6 + 2 * v5;
  if (__CFADD__(v6, 2 * v5))
    v8 = 4294967246;
  else
    v8 = 0;
  CMMThrowExceptionOnError(v8);
  v9 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a2);
  v10 = 1;
  *v9 = off_1E215FE00;
  v9[1] = 1;
  v9[3] = 0;
  v9[4] = v7;
  v9[2] = CMMBase::NewInternal(v7, (_QWORD **)a2);
  v11 = (unsigned __int16 *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 12) + 16), *(_QWORD *)(*((_QWORD *)this + 12) + 24));
  v18 = (_WORD *)CMMTable::FloatData(v9[2], v9[3]);
  v19 = *((unsigned __int8 *)this + 50);
  if (!*((_BYTE *)this + 50))
    goto LABEL_17;
  v20 = *((unsigned __int8 *)this + 52);
  v10 = 1;
  do
  {
    v21 = v10;
    v10 *= v20;
    v23 = v10 >= v21 && v10 >= v20;
    CMMThrowExceptionWithLog(v23, "Overflow in Power", v12, v13, v14, v15, v16, v17);
    --v19;
  }
  while (v19);
  if (v10)
  {
LABEL_17:
    v24 = 0;
    v25 = *((unsigned __int8 *)this + 51);
    do
    {
      v26 = v25;
      if ((_DWORD)v25)
      {
        do
        {
          v27 = *v11++;
          *v18++ = bswap32(v27) >> 16;
          --v26;
        }
        while (v26);
      }
      ++v24;
    }
    while (v24 != v10);
  }
  return v9;
}

unint64_t CMMLut16Tag::InterpolationProtectionZone(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((unsigned __int8 *)this + 50);
  if ((v8 - 3) > 1)
    return 0;
  else
    return 2
         * CMMLutTagBase::CalculateProtectionZone(*((unsigned __int8 *)this + 52), v8, *((unsigned __int8 *)this + 51), a4, a5, a6, a7, a8);
}

uint64_t CMMLut16Tag::MakeInputLut(CMMLut16Tag *this, uint64_t a2, int *a3)
{
  CMMLut16Tag *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  CMMLut16Tag *v10;
  CMMLut16Tag *InputTable;
  char v12;
  int *v13;
  unsigned int v14;
  CMMLut16Tag *v15;
  CMMLut16Tag *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  float64x2_t v23;
  double v24;
  double v25;
  double v26;
  int64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v35;
  int8x16_t v36;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t result;
  int v49;
  int v50;
  int v51;
  int v52;
  _DWORD *exception;
  int v54;
  _BYTE v55[8216];
  int v56;
  _BYTE v57[8152];
  int v58;
  uint64_t v59;

  v3 = (CMMLut16Tag *)MEMORY[0x1E0C80A78](this, a2, a3);
  v59 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)v3 + 13))
    goto LABEL_45;
  v7 = v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  InputTable = (CMMLut16Tag *)CMMLut16Tag::GetInputTable(v3, v4);
  bzero(&v54, 0x4004uLL);
  v12 = ((v9 - 1) < 2) & v7;
  if (v12)
    v13 = &v54;
  else
    v13 = v8;
  memset(v13, 255, 0x4004uLL);
  v14 = 0xFFFF;
  if (!v7)
    goto LABEL_33;
  if (!*((_QWORD *)v10 + 13))
    goto LABEL_45;
  v15 = (CMMLut16Tag *)CMMLut16Tag::GetInputTable(v10, v9);
  v16 = v15;
  v17 = (unsigned __int16 *)*((unsigned __int16 *)v10 + 45);
  if (!v9)
  {
    if ((int)CMMLut16Tag::ApplyLut(v15, (unsigned __int16 *)*((unsigned __int16 *)v10 + 45), 16711935) <= 16744575)
      v14 = 0xFFFF;
    else
      v14 = 65280;
    goto LABEL_33;
  }
  v18 = *((unsigned __int8 *)v10 + 52);
  v19 = CMMLut16Tag::ApplyLut(v15, (unsigned __int16 *)*((unsigned __int16 *)v10 + 45), 0x800000);
  v20 = CMMLut16Tag::ApplyLut(v16, v17, 8388736);
  v21 = CMMLut16Tag::ApplyLut(v16, v17, 8421505);
  v22 = (double)(v18 - 1);
  v23 = (float64x2_t)vdupq_n_s64(0x3E70000000000000uLL);
  v24 = (double)v20 * 0.0000000596046448 * v22;
  v25 = vabdd_f64(v24, floor(v24));
  v26 = vabdd_f64(v24, floor(v24 + 1.0));
  if (v25 >= v26)
    v25 = v26;
  v27.i64[0] = v19;
  v27.i64[1] = v21;
  v28 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v27), v23), v22);
  v29 = vrndmq_f64(v28);
  __asm { FMOV            V5.2D, #1.0 }
  v35 = vrndmq_f64(vaddq_f64(v28, _Q5));
  v36 = vbslq_s8((int8x16_t)vcagtq_f64(vsubq_f64(v28, v35), vsubq_f64(v28, v29)), (int8x16_t)vabdq_f64(v28, v29), (int8x16_t)vabdq_f64(v28, v35));
  if (*(double *)v36.i64 <= v25 && *(double *)v36.i64 <= *(double *)&v36.i64[1])
  {
    v38 = vabdd_f64(v28.f64[0], floor(v28.f64[0] + 0.5));
    if (v28.f64[0] == 0.5)
      v38 = 0.0;
    v39 = vabdd_f64(v24, floor(v24 + 0.5));
    if (v24 == 0.5)
      v40 = 0.0;
    else
      v40 = v39;
    if (v38 <= v40)
    {
      v41 = vabdd_f64(v28.f64[1], floor(v28.f64[1] + 0.5));
      v42 = v28.f64[1] == 0.5 ? 0.0 : v41;
      if (v38 <= v42)
      {
        v14 = 65280;
        goto LABEL_33;
      }
    }
LABEL_45:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (v25 <= *(double *)&v36.i64[1])
  {
    v28.f64[0] = v24;
    __asm { FMOV            V1.2D, #0.5 }
    v44 = (float64x2_t)vbicq_s8((int8x16_t)vabdq_f64(v28, vrndmq_f64(vaddq_f64(v28, _Q1))), (int8x16_t)vceqq_f64(v28, _Q1));
    if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1), v44))).u8[0] & 1) == 0)
    {
      v14 = 65281;
      goto LABEL_33;
    }
    goto LABEL_45;
  }
  v14 = 0xFFFF;
LABEL_33:
  v45 = 0;
  v46 = 0x7FFFLL;
  do
  {
    if (v14 == 0xFFFF)
      LODWORD(v47) = v45;
    else
      v47 = v46 / 0xFFFF;
    result = CMMLut16Tag::ApplyLut(InputTable, (unsigned __int16 *)*((unsigned __int16 *)v10 + 45), v47);
    if ((int)result >= 0x1000000)
      v49 = 0x1000000;
    else
      v49 = result;
    *v13++ = v49;
    v45 += 4096;
    v46 += (unint64_t)v14 << 12;
  }
  while (v45 != 16781312);
  if ((v12 & 1) != 0)
  {
    v50 = v56;
    v51 = v58;
    *v8 = v54;
    memcpy(v8 + 1, v55, 0x2018uLL);
    v8[2057] = v50;
    v8[2056] = v50;
    v8[2055] = v50;
    result = (uint64_t)memcpy(v8 + 2058, v57, 0x1FD8uLL);
    v8[4096] = v51;
  }
  else
  {
    v52 = v8[4096];
    v8[1] = *v8;
    v8[4095] = v52;
  }
  return result;
}

uint64_t CMMLut16Tag::MakeOutputLut(CMMLut16Tag *this, uint64_t a2, int *a3)
{
  CMMLut16Tag *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  CMMLut16Tag *v10;
  CMMLut16Tag *OutputTable;
  char v12;
  int *v13;
  int v14;
  CMMLut16Tag *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CMMLut16Tag *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int16 *v32;
  int AZero;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int BZero;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  _DWORD *exception;
  int v53;
  _DWORD v54[4096];
  uint64_t v55;

  v3 = (CMMLut16Tag *)MEMORY[0x1E0C80A78](this, a2, a3);
  v55 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)v3 + 14))
    goto LABEL_37;
  v7 = v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  OutputTable = (CMMLut16Tag *)CMMLut16Tag::GetOutputTable(v3, v4);
  bzero(&v53, 0x4004uLL);
  v12 = ((v9 - 1) < 2) & v7;
  if (v12)
    v13 = &v53;
  else
    v13 = v8;
  memset(v13, 255, 0x4004uLL);
  v14 = 0xFFFF;
  if (!v7)
    goto LABEL_23;
  if (!*((_QWORD *)v10 + 14))
    goto LABEL_37;
  v15 = (CMMLut16Tag *)CMMLut16Tag::GetOutputTable(v10, v9);
  v23 = v15;
  if (v9 == 1)
  {
    v32 = (unsigned __int16 *)*((unsigned __int16 *)v10 + 46);
    AZero = CMMLut16Tag::GetAZero(v10, v16, v17, v18, v19, v20, v21, v22);
LABEL_18:
    v34 = 8421504 - CMMLut16Tag::ApplyLut(v23, v32, AZero);
    if (v34 < 0)
      v34 = -v34;
    if (v34 >= 0x100)
      v14 = 65792;
    else
      v14 = 0xFFFF;
    goto LABEL_23;
  }
  if (v9)
  {
    v32 = (unsigned __int16 *)*((unsigned __int16 *)v10 + 46);
    AZero = CMMLut16Tag::GetBZero(v10, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_18;
  }
  if ((int)CMMLut16Tag::ApplyLut(v15, (unsigned __int16 *)*((unsigned __int16 *)v10 + 46), 0x1000000) < 16776961)
  {
LABEL_15:
    v14 = 65792;
    goto LABEL_23;
  }
  if (!*((_QWORD *)v10 + 12) || *((_BYTE *)v10 + 51) != 3)
  {
LABEL_37:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v31 = *((unsigned __int16 *)v10 + 60);
  if (!*((_WORD *)v10 + 60))
  {
    CMMLut16Tag::GetLabCriticalValues(v10, v24, v25, v26, v27, v28, v29, v30);
    v31 = *((unsigned __int16 *)v10 + 60);
  }
  v14 = 0xFFFF;
  if (v31 != 0xFFFF)
    goto LABEL_15;
LABEL_23:
  v35 = 0;
  v36 = v14;
  do
  {
    result = CMMLut16Tag::ApplyLut(OutputTable, (unsigned __int16 *)*((unsigned __int16 *)v10 + 46), v35);
    if (v36 != 0xFFFF)
      result = ((v36 * (int)result + 0x7FFF) / 0xFFFF);
    if ((int)result >= 0x1000000)
      v45 = 0x1000000;
    else
      v45 = result;
    *v13++ = v45;
    v35 += 4096;
  }
  while (v35 != 16781312);
  if ((v12 & 1) != 0)
  {
    if (v9 == 1)
      BZero = CMMLut16Tag::GetAZero(v10, v38, v39, v40, v41, v42, v43, v44);
    else
      BZero = CMMLut16Tag::GetBZero(v10, v38, v39, v40, v41, v42, v43, v44);
    v48 = BZero;
    v49 = BZero >> 12;
    v50 = v54[(BZero >> 12) - 1];
    v51 = v54[4095];
    *v8 = v53;
    memcpy(v8 + 1, v54, 4 * ((BZero >> 12) - 2));
    v8[v49 + 1] = v50;
    v8[v49] = v50;
    v8[v49 - 1] = v50;
    result = (uint64_t)memcpy(&v8[v49 + 2], &v54[v49], 4 * (4094 - (v48 >> 12)));
    v8[4096] = v51;
  }
  else
  {
    v47 = v8[4096];
    v8[1] = *v8;
    v8[4095] = v47;
  }
  return result;
}

uint64_t CMMLut16Tag::SetCLut(uint64_t this, CMMTable *a2)
{
  *(_QWORD *)(this + 96) = a2;
  return this;
}

uint64_t CMMLut16Tag::GetCLutPtr(CMMLut16Tag *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return CMMTable::FloatData(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  else
    return 0;
}

uint64_t CMMLut16Tag::SetInputTables(uint64_t this, CMMTable *a2)
{
  *(_QWORD *)(this + 104) = a2;
  return this;
}

uint64_t CMMLut16Tag::SetOutputTables(uint64_t this, CMMTable *a2)
{
  *(_QWORD *)(this + 112) = a2;
  return this;
}

uint64_t CMMLut16Tag::GetMatrixComp(CMMLut16Tag *this, int a2, int a3)
{
  return *(unsigned int *)((char *)this + 12 * a2 + 4 * a3 + 54);
}

uint64_t CMMLut16Tag::SetNULLInputTables(CMMLut16Tag *this, CMMMemMgr *a2)
{
  _QWORD *NULLTable;

  NULLTable = CMMLut16Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 50));
  return (*(uint64_t (**)(CMMLut16Tag *, _QWORD *))(*(_QWORD *)this + 144))(this, NULLTable);
}

uint64_t CMMLut16Tag::SetNULLOutputTables(CMMLut16Tag *this, CMMMemMgr *a2)
{
  _QWORD *NULLTable;

  NULLTable = CMMLut16Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 51));
  return (*(uint64_t (**)(CMMLut16Tag *, _QWORD *))(*(_QWORD *)this + 152))(this, NULLTable);
}

_QWORD *CMMLut16Tag::MakeNULLTable(CMMLut16Tag *this, CMMMemMgr *a2)
{
  unsigned int v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  v4 = (4 * (_DWORD)a2);
  v5 = CMMBase::NewInternal(0x28uLL, (_QWORD **)this);
  *v5 = off_1E215FE00;
  v5[1] = 1;
  v5[3] = 0;
  v5[4] = v4;
  v6 = CMMBase::NewInternal(v4, (_QWORD **)this);
  v5[2] = v6;
  v7 = CMMTable::FloatData((uint64_t)v6, v5[3]);
  if (v2)
  {
    v8 = 0;
    do
    {
      *(_DWORD *)(v7 + 2 * (v8 & 0xFFFFFFFE)) = -65536;
      v8 += 2;
    }
    while (2 * v2 != v8);
  }
  return v5;
}

float CMMLut16Tag::EvaluateGamma(CMMLut16Tag *this, unsigned __int16 *a2, _BYTE *a3, BOOL *a4)
{
  unsigned int v5;
  BOOL v7;
  long double v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v19;
  uint64_t v20;
  double v22;

  v5 = a2;
  v22 = 0.0;
  *a3 = 0;
  if ((_DWORD)a2 == 2 && (!*(_WORD *)this ? (v7 = *((unsigned __int16 *)this + 1) == 0xFFFF) : (v7 = 0), v7))
  {
    *a3 = 1;
    return 1.0;
  }
  else
  {
    v8 = 0.0;
    if (*(_WORD *)this)
      v9 = 0;
    else
      v9 = *((unsigned __int16 *)this + a2 - 1) == 0xFFFF;
    if (v9)
    {
      if (IsPureGammaCurve(a2, (unsigned __int16 *)this, &v22))
      {
        *a3 = 1;
        return v22;
      }
      else if (v5)
      {
        v10 = 0;
        v11 = 0;
        v12 = v5;
        v13 = (double)(v5 - 1);
        v14 = -v5;
        v15 = 0.0;
        do
        {
          if ((_DWORD)v10)
          {
            v16 = (double)(bswap32(*((unsigned __int16 *)this + v10)) >> 16) / 65535.0;
            if (v16 != 0.0 && v14 + (_DWORD)v10 != -1 && v16 != 1.0)
            {
              v19 = log(v15 / v13);
              v8 = log(v16) / v19 + v8;
              ++v11;
            }
          }
          ++v10;
          v15 = v15 + 1.0;
        }
        while (v14 + (_DWORD)v10);
        if (v11)
        {
          v20 = 0;
          v8 = v8 / (double)v11;
          while (vabdd_f64((double)(bswap32(*((unsigned __int16 *)this + v20)) >> 16) / 65535.0, pow((double)v20 / v13, v8)) <= 0.001)
          {
            if (v12 == ++v20)
              return v8;
          }
          return 0.0;
        }
      }
    }
  }
  return v8;
}

uint64_t CMMLut16Tag::ApplyLut(CMMLut16Tag *this, unsigned __int16 *a2, int a3)
{
  int v3;
  unint64_t v4;
  unsigned int v6;
  unint64_t v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *exception;

  v3 = (_DWORD)a2 - 1;
  v4 = (unint64_t)(a3 * (uint64_t)((int)a2 - 1)) >> 24;
  if ((int)v4 >= (int)a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v6 = bswap32(*((unsigned __int16 *)this + (int)v4));
  HIDWORD(v7) = HIWORD(v6);
  LODWORD(v7) = v6;
  result = ((v7 >> 23) + 1) >> 1;
  v9 = a3 - ((uint64_t)(int)v4 << 24) / v3;
  if (v9)
  {
    v10 = bswap32(*(unsigned __int16 *)((char *)this + ((uint64_t)((v4 << 32) + 0x100000000) >> 31)));
    HIDWORD(v11) = HIWORD(v10);
    LODWORD(v11) = v10;
    v12 = v3 * (uint64_t)v9 * (int)((((v11 >> 23) + 1) >> 1) - result);
    if (v12)
    {
      v14 = __OFADD__(v12, 0x800000);
      v15 = v12 + 0x800000;
      v13 = v12 + 0x800000 < 0;
      v16 = v12 + 25165823;
      if (v13 == v14)
        v16 = v15;
      return result + (v16 >> 24);
    }
  }
  return result;
}

uint64_t CMMLut16Tag::GetAZero(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _DWORD *exception;

  if (!*((_QWORD *)this + 12) || *((_BYTE *)this + 51) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  result = *((unsigned int *)this + 33);
  if (!(_DWORD)result)
  {
    CMMLut16Tag::GetLabCriticalValues(this, a2, a3, a4, a5, a6, a7, a8);
    return *((unsigned int *)this + 33);
  }
  return result;
}

uint64_t CMMLut16Tag::GetBZero(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _DWORD *exception;

  if (!*((_QWORD *)this + 12) || *((_BYTE *)this + 51) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  result = *((unsigned int *)this + 34);
  if (!(_DWORD)result)
  {
    CMMLut16Tag::GetLabCriticalValues(this, a2, a3, a4, a5, a6, a7, a8);
    return *((unsigned int *)this + 34);
  }
  return result;
}

uint64_t CMMLut16Tag::GetLabCriticalValues(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL8 v15;
  uint64_t result;
  int v17;
  unsigned __int16 v18;
  unsigned __int16 *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  signed int v27;
  signed int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  int v34;
  _DWORD *exception;

  v8 = *((_QWORD *)this + 12);
  if (!v8 || *((_BYTE *)this + 51) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v10 = *((unsigned __int8 *)this + 50);
  if (*((_BYTE *)this + 50))
  {
    v11 = *((unsigned __int8 *)this + 52);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= v11;
      v15 = v12 >= v13 && v12 >= v11;
      CMMThrowExceptionWithLog(v15, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      --v10;
    }
    while (v10);
    result = CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 12) + 16), *(_QWORD *)(*((_QWORD *)this + 12) + 24));
    if (!v12)
    {
      v17 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    result = CMMTable::FloatData(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
    v12 = 1;
  }
  v18 = *((_WORD *)this + 60);
  v19 = (unsigned __int16 *)(result + 4);
  v20 = v12;
  do
  {
    v21 = bswap32(*(v19 - 2)) >> 16;
    if (v21 > v18)
    {
      *((_WORD *)this + 60) = v21;
      v22 = bswap32(*v19) >> 16;
      *((_DWORD *)this + 33) = bswap32(*(v19 - 1)) >> 16;
      *((_DWORD *)this + 34) = v22;
      v18 = v21;
    }
    v19 += 3;
    --v20;
  }
  while (v20);
  v17 = 0;
LABEL_20:
  if (*((_BYTE *)this + 52) == 2)
  {
    result = CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)this + 12) + 16), *(_QWORD *)(*((_QWORD *)this + 12) + 24));
    if (v17)
    {
      v23 = *((_WORD *)this + 61);
      v24 = *((_WORD *)this + 63);
      v25 = *((_WORD *)this + 62);
      v26 = *((_WORD *)this + 64);
    }
    else
    {
      v29 = bswap32(*(unsigned __int16 *)(result + 2)) >> 16;
      v30 = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
      v23 = *((_WORD *)this + 61);
      v24 = *((_WORD *)this + 63);
      v25 = *((_WORD *)this + 62);
      v26 = *((_WORD *)this + 64);
      v31 = 1;
      do
      {
        if (v29 > v23)
        {
          *((_WORD *)this + 61) = v29;
          v23 = v29;
        }
        if (v29 < v24)
        {
          *((_WORD *)this + 63) = v29;
          v24 = v29;
        }
        if (v30 > v25)
        {
          *((_WORD *)this + 62) = v30;
          v25 = v30;
        }
        if (v30 < v26)
        {
          *((_WORD *)this + 64) = v30;
          v26 = v30;
        }
      }
      while (v12 > v31++);
    }
    v27 = (v23 + v24 + 1) >> 1;
    v28 = (v25 + v26 + 1) >> 1;
  }
  else
  {
    v27 = *((_DWORD *)this + 33);
    v28 = *((_DWORD *)this + 34);
  }
  if (v27 <= 32832)
    v33 = 0x800000;
  else
    v33 = 8421504;
  if (v28 <= 32832)
    v34 = 0x800000;
  else
    v34 = 8421504;
  *((_DWORD *)this + 33) = v33;
  *((_DWORD *)this + 34) = v34;
  return result;
}

uint64_t CMMLut8Tag::GetTagType(CMMLut8Tag *this)
{
  return 1835430961;
}

char *CMMLut8Tag::GetWholeCloth(char *this, unsigned __int8 *a2, unint64_t *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL8 v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  unsigned __int8 *v24;
  const void *v25;
  unsigned __int8 *v26;
  const void *v27;
  const void *v28;
  _DWORD *exception;

  if (!a3)
    goto LABEL_19;
  v4 = this;
  if (!a2)
  {
    *a3 = *((_QWORD *)this + 4);
    return this;
  }
  if (*a3 != *((_QWORD *)this + 4))
  {
LABEL_19:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  bzero(a2, *a3);
  *(_DWORD *)a2 = 829711981;
  v11 = *(_OWORD *)(v4 + 50);
  v12 = *(_OWORD *)(v4 + 66);
  *((_QWORD *)a2 + 5) = *(_QWORD *)(v4 + 82);
  *(_OWORD *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 8) = v11;
  v13 = 12;
  do
  {
    *(_DWORD *)&a2[v13] = bswap32(*(_DWORD *)&a2[v13]);
    v13 += 4;
  }
  while ((_DWORD)v13 != 48);
  v14 = v4[50];
  if (v4[50])
  {
    v15 = v4[52];
    v16 = 1;
    do
    {
      v17 = v16;
      v16 *= v15;
      v19 = v16 >= v17 && v16 >= v15;
      CMMThrowExceptionWithLog(v19, "Overflow in Power", v5, v6, v7, v8, v9, v10);
      --v14;
    }
    while (v14);
    v20 = (unint64_t)v4[50] << 8;
  }
  else
  {
    v20 = 0;
    v16 = 1;
  }
  v21 = v4[51];
  v22 = v16 * v21;
  v23 = v21 << 8;
  v24 = a2 + 48;
  v25 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)v4 + 13) + 16), *(_QWORD *)(*((_QWORD *)v4 + 13) + 24));
  memcpy(v24, v25, v20);
  v26 = &v24[v20];
  v27 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)v4 + 12) + 16), *(_QWORD *)(*((_QWORD *)v4 + 12) + 24));
  memcpy(v26, v27, v22);
  v28 = (const void *)CMMTable::FloatData(*(_QWORD *)(*((_QWORD *)v4 + 14) + 16), *(_QWORD *)(*((_QWORD *)v4 + 14) + 24));
  return (char *)memcpy(&v26[v22], v28, v23);
}

uint64_t CMMLut8Tag::SetCLut(uint64_t this, CMMTable *a2)
{
  *(_QWORD *)(this + 96) = a2;
  return this;
}

uint64_t CMMLut8Tag::GetCLutPtr(CMMLut8Tag *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return CMMTable::FloatData(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  else
    return 0;
}

uint64_t CMMLut8Tag::SetInputTables(uint64_t this, CMMTable *a2)
{
  *(_QWORD *)(this + 104) = a2;
  return this;
}

uint64_t CMMLut8Tag::SetOutputTables(uint64_t this, CMMTable *a2)
{
  *(_QWORD *)(this + 112) = a2;
  return this;
}

BOOL CMMLut8Tag::IsMatrixNull(CMMLut8Tag *this)
{
  return *(_DWORD *)((char *)this + 54) == 0x10000
      && *(_DWORD *)((char *)this + 70) == 0x10000
      && *(_DWORD *)((char *)this + 86) == 0x10000
      && !*(_DWORD *)((char *)this + 58)
      && !*(_DWORD *)((char *)this + 62)
      && !*(_DWORD *)((char *)this + 66)
      && !*(_DWORD *)((char *)this + 74)
      && !*(_DWORD *)((char *)this + 78)
      && *(_DWORD *)((char *)this + 82) == 0;
}

uint64_t CMMLut8Tag::GetMatrixComp(CMMLut8Tag *this, int a2, int a3)
{
  return *(unsigned int *)((char *)this + 12 * a2 + 4 * a3 + 54);
}

uint64_t CMMLut8Tag::SetNULLInputTables(CMMLut8Tag *this, CMMMemMgr *a2)
{
  _QWORD *NULLTable;

  NULLTable = CMMLut8Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 50));
  return (*(uint64_t (**)(CMMLut8Tag *, _QWORD *))(*(_QWORD *)this + 144))(this, NULLTable);
}

uint64_t CMMLut8Tag::SetNULLOutputTables(CMMLut8Tag *this, CMMMemMgr *a2)
{
  _QWORD *NULLTable;

  NULLTable = CMMLut8Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 51));
  return (*(uint64_t (**)(CMMLut8Tag *, _QWORD *))(*(_QWORD *)this + 152))(this, NULLTable);
}

_QWORD *CMMLut8Tag::MakeNULLTable(CMMLut8Tag *this, CMMMemMgr *a2)
{
  int v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;

  v2 = (int)a2;
  v4 = ((_DWORD)a2 << 8);
  v5 = CMMBase::NewInternal(0x28uLL, (_QWORD **)this);
  *v5 = off_1E215FE00;
  v5[1] = 1;
  v5[3] = 0;
  v5[4] = v4;
  v6 = CMMBase::NewInternal(v4, (_QWORD **)this);
  v5[2] = v6;
  v7 = CMMTable::FloatData((uint64_t)v6, v5[3]);
  if (v2)
  {
    v8 = 0;
    v9.i64[0] = 0x1010101010101010;
    v9.i64[1] = 0x1010101010101010;
    do
    {
      v10 = 0;
      v11 = (int8x16_t)xmmword_18B3EA950;
      do
      {
        *(int8x16_t *)(v7 + ((v8 & 0xFFFFFF) << 8) + v10) = v11;
        v10 += 16;
        v11 = vaddq_s8(v11, v9);
      }
      while (v10 != 256);
      ++v8;
    }
    while (v8 != v2);
  }
  return v5;
}

void CMMCICPTag::~CMMCICPTag(CMMCICPTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMCICPTag::Validate(CMMCICPTag *this)
{
  int v1;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *(_DWORD *)((char *)this + 50);
  if (v1 == 12 || (v1 & 0xFB) == 1 || (v1 & 0xFD) == 9)
  {
    v4 = BYTE1(v1);
    if (((0x5E142u >> SBYTE1(v1)) & 1) != 0)
      v5 = 0;
    else
      v5 = -170;
    if (v4 <= 0x12)
      v6 = v5;
    else
      v6 = 4294967126;
  }
  else
  {
    v6 = 4294967126;
  }
  CMMThrowExceptionOnError(v6);
  return 0;
}

void CMMProfileSequenceDescTag::~CMMProfileSequenceDescTag(CMMProfileSequenceDescTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMTechnologyTag::~CMMTechnologyTag(CMMTechnologyTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMNamedColorTag::~CMMNamedColorTag(CMMNamedColorTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMNamedColorTag::GetWholeCloth(CMMNamedColorTag *this, unsigned __int8 *a2, unint64_t *a3)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

void CMMTextTag::~CMMTextTag(CMMTextTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMTextDescTag::~CMMTextDescTag(CMMTextDescTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](pthread_mutex_t ****a1)
{
  pthread_mutex_t ***v1;
  pthread_mutex_t **v2;
  pthread_mutex_t **v4;
  pthread_mutex_t **v5;
  pthread_mutex_t **v6;
  pthread_mutex_t **v7;
  pthread_mutex_t *v8;
  BOOL v9;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 5;
      v7 = v4 - 5;
      do
      {
        v8 = *v7;
        v7 -= 5;
        ((void (*)(pthread_mutex_t **))v8->__sig)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    CMMBase::operator delete(v5);
  }
}

void CMMMatrixInputProfile::~CMMMatrixInputProfile(CMMMatrixInputProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

double CMMMatrixInputProfile::GetMatrixTags(CMMMatrixInputProfile *this, CMMXYZTag *(*a2)[3], CMMRGBCurves *a3)
{
  double result;
  CMMCurveTag *v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  if (CMMProfile::InnerGetMatrixTags(this, a2, (CMMCurveTag *(*)[3])v5))
  {
    result = *(double *)v5;
    *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)v5;
    *((CMMCurveTag **)a3 + 3) = v5[2];
  }
  return result;
}

uint64_t CMMInputProfile::GetSrcColorSpace(unsigned int *lpsrc, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *Tag;

  if (a2 != 1)
  {
    if (lpsrc)
    {
      {
        if ((a2 & 0xFFFFFFFE) != 2)
          goto LABEL_22;
        goto LABEL_18;
      }
      v6 = (uint64_t)lpsrc;
    }
    else
    {
      v6 = 0;
    }
    Tag = CMMProfile::GetTag(v6, 1110589744);
    if ((a2 & 0xFFFFFFFE) != 2 || !Tag)
      goto LABEL_22;
LABEL_18:
    v3 = lpsrc[13];
    if ((_DWORD)v3 == 1281450528)
    {
      v4 = 0;
      v3 = 1347182946;
      goto LABEL_23;
    }
LABEL_20:
    if ((_DWORD)v3 != -1)
    {
      v4 = 0;
      goto LABEL_23;
    }
LABEL_22:
    v4 = 4294967246;
    v3 = 0xFFFFFFFFLL;
    goto LABEL_23;
  }
  v3 = lpsrc[12];
  switch((int)v3)
  {
    case 1296255029:
      v4 = 0;
      v3 = 893602898;
      break;
    case 1296255030:
      v4 = 0;
      v3 = 910380114;
      break;
    case 1296255031:
      v4 = 0;
      v3 = 927157330;
      break;
    case 1296255032:
      v4 = 0;
      v3 = 943934546;
      break;
    default:
      if ((_DWORD)v3 != 1281450528)
        goto LABEL_20;
      v4 = 0;
      v3 = 1145856354;
      break;
  }
LABEL_23:
  CMMThrowExceptionOnError(v4);
  return v3;
}

uint64_t CMMInputProfile::GetDstColorSpace(unsigned int *lpsrc, int a2, _BYTE *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  if (a2 == 1)
  {
    v6 = lpsrc[13];
    goto LABEL_15;
  }
  if (lpsrc)
  {
    {
      goto LABEL_9;
    }
    v7 = (uint64_t)lpsrc;
  }
  else
  {
    v7 = 0;
  }
  if (!CMMProfile::GetTag(v7, 1110589744))
    goto LABEL_13;
LABEL_9:
  if (v4 == 3)
  {
    v6 = lpsrc[13];
    LOBYTE(v4) = 1;
LABEL_15:
    if ((_DWORD)v6 == 1281450528)
    {
      v8 = 0;
      v6 = 1347182946;
      goto LABEL_26;
    }
LABEL_23:
    if ((_DWORD)v6 != -1)
    {
      v8 = 0;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v4 != 2)
  {
LABEL_13:
    LOBYTE(v4) = 0;
LABEL_25:
    v8 = 4294967246;
    v6 = 0xFFFFFFFFLL;
    goto LABEL_26;
  }
  v6 = lpsrc[12];
  switch((int)v6)
  {
    case 1296255029:
      LOBYTE(v4) = 0;
      v8 = 0;
      v6 = 893602898;
      break;
    case 1296255030:
      LOBYTE(v4) = 0;
      v8 = 0;
      v6 = 910380114;
      break;
    case 1296255031:
      LOBYTE(v4) = 0;
      v8 = 0;
      v6 = 927157330;
      break;
    case 1296255032:
      LOBYTE(v4) = 0;
      v8 = 0;
      v6 = 943934546;
      break;
    default:
      if ((_DWORD)v6 != 1281450528)
      {
        LOBYTE(v4) = 0;
        goto LABEL_23;
      }
      LOBYTE(v4) = 0;
      v8 = 0;
      v6 = 1145856354;
      break;
  }
LABEL_26:
  CMMThrowExceptionOnError(v8);
  if (a3)
    *a3 = v4;
  return v6;
}

uint64_t CMMMatrixInputProfile::GetConversionType(CMMMatrixInputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

void CMMPQCurveTag::CMMPQCurveTag(CMMPQCurveTag *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)this = off_1E215CCF0;
  if (CMMPQCurveTag::get_dafault_data(void)::predicate != -1)
    dispatch_once(&CMMPQCurveTag::get_dafault_data(void)::predicate, &__block_literal_global_214);
  CMMCurveTag::CMMCurveTag(this, 1751405638, (uint64_t)&CMMPQCurveTag::get_dafault_data(void)::default_data, 12, a3);
  *(_QWORD *)this = off_1E215CCF0;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      *(_QWORD *)(a2 + 8) = v6 + 1;
  }
  *((_QWORD *)this + 8) = a2;
  *(_OWORD *)((char *)this + 72) = xmmword_18B3EA8A0;
  *((_DWORD *)this + 22) = 1100316672;
  CMMPQCurveTag::Initialize((uint64_t)this);
}

void sub_18B3D8F78(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void CMMHLGCurveTag::CMMHLGCurveTag(CMMHLGCurveTag *this, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)this = off_1E215D120;
  if (CMMHLGCurveTag::get_dafault_data(void)::predicate[0] != -1)
    dispatch_once(CMMHLGCurveTag::get_dafault_data(void)::predicate, &__block_literal_global_216);
  CMMCurveTag::CMMCurveTag(this, 1751405638, (uint64_t)&CMMHLGCurveTag::get_dafault_data(void)::default_data, 12, a2);
  *(_QWORD *)this = off_1E215D120;
  *((_OWORD *)this + 4) = xmmword_18B3EA8B0;
  *((_DWORD *)this + 20) = 1051372203;
  CMMHLGCurveTag::Initialize(v4);
}

void sub_18B3D902C(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void ___ZN14CMMHLGCurveTag16get_dafault_dataEv_block_invoke()
{
  CMMHLGCurveTag::get_dafault_data(void)::default_data = 541543496;
  dword_1EDFB8AA0 = 1728774144;
}

void ___ZN13CMMPQCurveTag16get_dafault_dataEv_block_invoke()
{
  CMMPQCurveTag::get_dafault_data(void)::default_data = 538988880;
  dword_1EDFB8868 = -2078277632;
}

void CMMSRGBCurve::~CMMSRGBCurve(CMMSRGBCurve *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

_QWORD *CMMSRGBCurve::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  return CMMParaCurveTag::MakeTRC(a1, a2, a3, 0, 1.0);
}

void CMMLinearGamma::~CMMLinearGamma(CMMLinearGamma *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

void CMMITUBT709OETF::~CMMITUBT709OETF(CMMITUBT709OETF *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

_QWORD *CMMITUBT709OETF::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3, float a4)
{
  _QWORD *result;

  result = CMMParaCurveTag::MakeTRC(a1, a2, a3, 0, a4);
  if (a2)
    *(_DWORD *)(a2 + 4) = 14;
  return result;
}

CMMTable *CMMITUBT709OETF::MakeInvertedTRC(uint64_t a1, uint64_t a2)
{
  CMMTable *result;

  result = CMMParaCurveTag::MakeInvertedTRC();
  if (a2)
    *(_DWORD *)(a2 + 4) = 15;
  return result;
}

_DWORD *CMMMatrixDisplayProfile::GetGamutTag(CMMMatrixDisplayProfile *this)
{
  _DWORD *result;
  unsigned __int8 *Tag;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  result = CMMProfile::GetTag((uint64_t)this, 1734438260);
  if (!result)
  {
    Tag = CMMProfile::GetTag((uint64_t)this, 1918392666);
    v4 = CMMProfile::GetTag((uint64_t)this, 1733843290);
    v5 = CMMProfile::GetTag((uint64_t)this, 1649957210);
    result = CMMBase::NewInternal(0x50uLL, *((_QWORD ***)this + 3));
    v6 = *((_QWORD *)this + 20);
    while (v6)
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 16);
      if (!v6)
      {
        result[2] = 1734438260;
        *((_QWORD *)result + 4) = 0;
        *((_QWORD *)result + 5) = 0;
        *((_WORD *)result + 24) = 0;
        *((_QWORD *)result + 2) = 0;
        *((_QWORD *)result + 3) = v7;
        *(_QWORD *)(v7 + 16) = result;
        goto LABEL_7;
      }
    }
    result[2] = 1734438260;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_WORD *)result + 24) = 0;
LABEL_7:
    *(_QWORD *)result = off_1E215DD50;
    *((_QWORD *)result + 7) = Tag;
    *((_QWORD *)result + 8) = v4;
    *((_QWORD *)result + 9) = v5;
  }
  return result;
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]();
}

void std::__throw_out_of_range[abi:ne180100]()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E215A588, MEMORY[0x1E0DE42E0]);
}

void sub_18B3D9254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]();
}

void std::__throw_length_error[abi:ne180100]()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E215A580, MEMORY[0x1E0DE42D0]);
}

void sub_18B3D92D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100](pthread_mutex_t ****a1)
{
  pthread_mutex_t ***v1;
  pthread_mutex_t **v2;
  pthread_mutex_t **v4;
  pthread_mutex_t **v5;
  pthread_mutex_t **v6;
  pthread_mutex_t **v7;
  pthread_mutex_t *v8;
  BOOL v9;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 3;
      v7 = v4 - 3;
      do
      {
        v8 = *v7;
        v7 -= 3;
        ((void (*)(pthread_mutex_t **))v8->__sig)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    CMMBase::operator delete(v5);
  }
}

uint64_t TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::~TVector(uint64_t a1)
{
  pthread_mutex_t ***v3;

  v3 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void CMMMatrixGamutTag::~CMMMatrixGamutTag(CMMMatrixGamutTag *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMMatrixHDRDisplayProfile::GetGamutTag(CMMMatrixHDRDisplayProfile *this)
{
  return 0;
}

uint64_t CMMMatrixHDRDisplayProfile::IsMatrixHDRProfile(CMMMatrixHDRDisplayProfile *this)
{
  return 1;
}

void CMMDevLinkProfile::~CMMDevLinkProfile(CMMDevLinkProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

_QWORD *CMMDevLinkProfile::GetLutTags(_DWORD *a1, int a2, unsigned int a3)
{
  int v4;
  int v5;
  int v6;
  uint64_t AToBTagSignature;
  int v8;

  if (a2 != 5)
    return 0;
  v4 = a1[12];
  switch(v4)
  {
    case 1296255029:
      v5 = 893602898;
      break;
    case 1296255030:
      v5 = 910380114;
      break;
    case 1296255031:
      v5 = 927157330;
      break;
    case 1296255032:
      v5 = 943934546;
      break;
    default:
      if (v4 == 1281450528)
        v5 = 1145856354;
      else
        v5 = a1[12];
      break;
  }
  v6 = a1[13] == 1281450528 ? 1347182946 : a1[13];
  AToBTagSignature = CMMProfile::GetAToBTagSignature(a3);
  if ((_DWORD)AToBTagSignature != -1
    && (v8 = AToBTagSignature,
        (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, AToBTagSignature)))
  {
    return CMMProfile::SingleTagContainer((uint64_t)a1, v8, v5, v6);
  }
  else
  {
    return 0;
  }
}

uint64_t CMMDevLinkProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t result;
  _DWORD *exception;

  if (a2 != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  v2 = *(_DWORD *)(a1 + 48);
  switch(v2)
  {
    case 0x4D434835u:
      result = 893602898;
      break;
    case 0x4D434836u:
      result = 910380114;
      break;
    case 0x4D434837u:
      result = 927157330;
      break;
    case 0x4D434838u:
      result = 943934546;
      break;
    default:
      if (v2 == 1281450528)
        result = 1145856354;
      else
        result = v2;
      break;
  }
  return result;
}

uint64_t CMMDevLinkProfile::GetDstColorSpace(uint64_t a1, int a2, _BYTE *a3)
{
  unsigned int v3;
  _DWORD *exception;

  if (a3)
    *a3 = 0;
  if (a2 != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  v3 = *(_DWORD *)(a1 + 52);
  if (v3 == 1281450528)
    v3 = 1347182946;
  if (v3 == 1347182946)
    return 1145856354;
  else
    return v3;
}

uint64_t CMMDevLinkProfile::GetConversionType(CMMDevLinkProfile *this, const __CFString *a2)
{
  return 5;
}

uint64_t CMMColorSpaceProfile::IsLegacyGenericLab(CMMColorSpaceProfile *this)
{
  return *((unsigned __int8 *)this + 180);
}

void CMMAbstractProfile::~CMMAbstractProfile(CMMAbstractProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

_QWORD *CMMAbstractProfile::GetLutTags(uint64_t a1, int a2, unsigned int a3)
{
  int v4;
  int AToBTagSignature;
  int v6;

  if (a2 != 3)
    return 0;
  v4 = *(_DWORD *)(a1 + 52);
  AToBTagSignature = CMMProfile::GetAToBTagSignature(a3);
  if (AToBTagSignature == -1)
    return 0;
  if (v4 == 1281450528)
    v6 = 1347182946;
  else
    v6 = v4;
  return CMMProfile::SingleTagContainer(a1, AToBTagSignature, v6, v6);
}

uint64_t CMMAbstractProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t result;
  _DWORD *exception;

  if (a2 != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  v2 = *(_DWORD *)(a1 + 48);
  result = 893602898;
  switch(v2)
  {
    case 0x4D434835u:
      return result;
    case 0x4D434836u:
      result = 910380114;
      break;
    case 0x4D434837u:
      result = 927157330;
      break;
    case 0x4D434838u:
      result = 943934546;
      break;
    default:
      if (v2 == 1145856354 || v2 == 1281450528)
        result = 1347182946;
      else
        result = v2;
      break;
  }
  return result;
}

uint64_t CMMAbstractProfile::GetDstColorSpace(uint64_t a1, int a2, _BYTE *a3)
{
  unsigned int v3;
  _DWORD *exception;

  if (a3)
    *a3 = 1;
  if (a2 != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  v3 = *(_DWORD *)(a1 + 52);
  if (v3 == 1281450528)
    return 1347182946;
  else
    return v3;
}

uint64_t CMMAbstractProfile::GetConversionType(CMMAbstractProfile *this, const __CFString *a2)
{
  return 3;
}

void CMMNamedColorProfile::~CMMNamedColorProfile(CMMNamedColorProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMNamedColorProfile::GetSrcColorSpace(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  _DWORD *exception;

  if (a2 > 8)
    goto LABEL_7;
  result = 1;
  if (((1 << a2) & 0x10C) == 0)
  {
    if (((1 << a2) & 0xC0) != 0)
      return result;
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  v4 = *(_DWORD *)(a1 + 52);
  if (v4 == 1281450528)
    return 1347182946;
  else
    return v4;
}

uint64_t CMMNamedColorProfile::GetDstColorSpace(uint64_t a1, int a2, _BYTE *a3)
{
  int v5;
  uint64_t result;
  unsigned __int8 *Tag;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *exception;
  int v12;

  LOBYTE(v5) = 0;
  result = 1;
  switch(a2)
  {
    case 2:
    case 7:
      Tag = CMMProfile::GetTag(a1, 1852009522);
      if (!Tag
      {
        exception = __cxa_allocate_exception(4uLL);
        v12 = -171;
LABEL_24:
        *exception = v12;
      }
      v5 = v8[22];
      if (v5)
      {
        v9 = *(_DWORD *)(a1 + 48);
        switch(v9)
        {
          case 0x4D434835u:
            LOBYTE(v5) = 0;
            result = 893602898;
            break;
          case 0x4D434836u:
            LOBYTE(v5) = 0;
            result = 910380114;
            break;
          case 0x4D434837u:
            LOBYTE(v5) = 0;
            result = 927157330;
            break;
          case 0x4D434838u:
            LOBYTE(v5) = 0;
            result = 943934546;
            break;
          default:
            if (v9 == 1281450528)
              result = 1145856354;
            else
              result = v9;
            LOBYTE(v5) = 0;
            break;
        }
      }
      else
      {
        result = 0;
      }
LABEL_19:
      if (a3)
        *a3 = v5;
      return result;
    case 3:
    case 6:
      v10 = *(_DWORD *)(a1 + 52);
      if (v10 == 1281450528)
        result = 1347182946;
      else
        result = v10;
      LOBYTE(v5) = 1;
      goto LABEL_19;
    case 8:
      goto LABEL_19;
    default:
      exception = __cxa_allocate_exception(4uLL);
      v12 = -50;
      goto LABEL_24;
  }
}

uint64_t CMMNamedColorProfile::GetConversionType(CMMNamedColorProfile *this, CFTypeRef cf1, int a3, int a4)
{
  _DWORD *exception;

  if (CFEqual(cf1, kColorSyncTransformDeviceToPCS))
  {
    if (a3 && !a4)
      return 6;
    if (a3 && (a4 & 1) != 0)
      return 7;
LABEL_14:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  if (CFEqual(cf1, kColorSyncTransformPCSToDevice))
  {
    if (a4)
      return 8;
    else
      return 2;
  }
  else
  {
    if (!CFEqual(cf1, kColorSyncTransformPCSToPCS))
      goto LABEL_14;
    return 3;
  }
}

uint64_t CMMNamedColorProfile::UseNamedColor()
{
  return 1;
}

void CMMGamma::~CMMGamma(CMMGamma *this)
{
  pthread_mutex_t **v1;

  CMMTag::~CMMTag(this);
  CMMBase::operator delete(v1);
}

float CMMGamma::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  float result;

  CMMCurveTag::MakeTRC(a1, a2, a3, 0);
  *(_QWORD *)a2 = 1;
  *(_DWORD *)(a2 + 12) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 8) = 1;
  result = *(float *)(a1 + 56);
  *(float *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 28) = 1065353216;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

void CMMThreadManager::~CMMThreadManager(CMMThreadManager *this)
{
  void *v2;

  *(_QWORD *)this = off_1E215DA68;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E215DA68;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 1) = 0;
  }
  CMMBase::operator delete((pthread_mutex_t **)this);
}

uint64_t CMMGetPrecisionFromData(int a1, char a2)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  BOOL v5;
  unsigned int v6;
  _DWORD *exception;

  v2 = a1 - 1;
  v3 = (a2 & 0x1F) - 1;
  result = 2;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      v5 = v3 >= 2;
      v6 = 1;
      goto LABEL_6;
    case 2:
      v5 = v3 >= 2;
      v6 = 3;
LABEL_6:
      if (v5)
        result = v6;
      else
        result = v6 + 1;
      break;
    case 3:
    case 6:
      result = 5;
      break;
    case 5:
    case 7:
      result = 4;
      break;
    default:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -181;
  }
  return result;
}

_QWORD *CMMDataBaseClass::CMMDataBaseClass(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *exception;

  result[1] = 0;
  result[2] = a3;
  v4 = a2[18];
  result[3] = a4;
  result[4] = a4 - v4 * a3;
  if (*a2 != 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  *result = a2;
  result[5] = a2[19];
  result[6] = v4;
  result[7] = 0;
  return result;
}

{
  uint64_t v4;
  _DWORD *exception;

  result[1] = a2;
  result[2] = a3;
  v4 = a2[18];
  result[3] = a4;
  result[4] = a4 - v4 * a3;
  if (*a2 != 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  *result = 0;
  result[5] = a2[19];
  result[6] = v4;
  result[7] = 0;
  return result;
}

uint64_t CMM8Bit3ChanData::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a2 + 184)) == 3)
    v4 = 0;
  else
    v4 = 4294967115;
  CMMThrowExceptionOnError(v4);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 168))
    v5 = 0;
  else
    v5 = 4294967115;
  result = CMMThrowExceptionOnError(v5);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 72) = v7;
  if ((*(_DWORD *)(a2 + 180) & 0x1D) == 4)
    *(_QWORD *)(a1 + 72) = v7 + 1;
  return result;
}

uint64_t CMM16BitNChanData::SetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)(a2 + 168) == 2 * a1[2])
    v4 = 0;
  else
    v4 = 4294967115;
  CMMThrowExceptionOnError(v4);
  if (*(_QWORD *)(a2 + 160) == 2 * a1[3])
    v5 = 0;
  else
    v5 = 4294967115;
  CMMThrowExceptionOnError(v5);
  result = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a2 + 184));
  a1[8] = result;
  a1[9] = result ^ 0xF;
  a1[10] = 2 * result;
  v7 = *(_QWORD *)(a2 + 8);
  a1[16] = v7;
  if ((*(_DWORD *)(a2 + 180) & 0x1D) == 4)
    a1[16] = v7 + 2;
  return result;
}

void CMMDataEncoder::DoEncode()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

uint64_t CMM8Bit3ChanNoConvEncoder::DoEncode(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *exception;

  v5 = 0;
  v6 = *(unsigned __int8 **)(result + 112);
  v7 = *(_QWORD *)(result + 56);
  v8 = &v6[v7 * *(_QWORD *)(result + 96)];
  *(_QWORD *)(result + 104) = v8;
  v9 = (((*v8 << 16) | (v8[1] << 8) | v8[2]) + 1) & 0xFFFFFF;
  *(_DWORD *)(result + 120) = v9;
  v10 = *(_QWORD *)(result + 80);
  v11 = *(_QWORD *)(result + 16);
  v12 = *(_QWORD *)(result + 24);
  do
  {
    if (!v10)
      break;
    v14 = *(_QWORD *)(result + 88);
    v13 = *(_QWORD *)(result + 96);
    v15 = v14 - v13;
    if (v14 - v13 >= *(_QWORD *)(result + 8) - *a4)
      v15 = *(_QWORD *)(result + 8) - *a4;
    if (!v15)
    {
LABEL_13:
      v16 = 0;
      goto LABEL_15;
    }
    v16 = v15 - 1;
    while (1)
    {
      if (v5 >= v12)
        goto LABEL_23;
      v17 = (v8[2] << 16) | (v8[1] << 8) | *v8;
      if (v17 == v9)
      {
        if (v5 < v11)
          goto LABEL_23;
        ++*(_DWORD *)(a2 + 4 * v5 - 4);
        v8 += v7;
        goto LABEL_12;
      }
      *(_DWORD *)(a2 + 4 * v5) = v17;
      v5 += v11;
      *(_DWORD *)(a2 + 4 * v5 - 4) = 1;
      v8 += v7;
      v9 = v17;
      if (v5 >= v12)
        break;
LABEL_12:
      if (--v16 == -1)
        goto LABEL_13;
    }
    v9 = v17;
LABEL_15:
    v18 = v15 - v16;
    v19 = v18 + v13;
    if (v19 != v14)
    {
      if (v19 < v14)
        goto LABEL_18;
LABEL_23:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
    v19 = 0;
    v8 = &v6[*(_QWORD *)(result + 64)];
    --v10;
    v6 = v8;
LABEL_18:
    *(_QWORD *)(result + 96) = v19;
    v20 = *a4 + v18;
    *a4 = v20;
    if (v5 <= *(_QWORD *)(result + 24))
    {
      v21 = *(_QWORD *)(result + 8);
      if (v20 <= v21)
        continue;
    }
    goto LABEL_23;
  }
  while (v5 != v12 && v20 != v21);
  *(_QWORD *)(result + 104) = v8;
  *(_QWORD *)(result + 112) = v6;
  *(_QWORD *)(result + 80) = v10;
  *a5 = v5 / v11;
  return result;
}

void CMM8Bit3ChanNoConvEncoder::DoEncode()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

BOOL CMM8Bit3ChanNoConvEncoder::IsInPlace(uint64_t a1, uint64_t a2)
{
  return CMMDataBaseClass::IsSameData(*(_QWORD *)(a1 + 48), a2);
}

void CMMDataDecoder::DoDecode()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

_QWORD *CMM8Bit3ChanNoConvDecoder::DoDecode(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *exception;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = result[1];
  v9 = v8 * a4;
  v10 = result[5];
  v11 = result[12];
  v12 = result[8];
  v13 = result[10];
  v14 = v11 + v13 * v10;
  result[11] = v14;
  do
  {
    if (!v12)
      break;
    v15 = result[9];
    v16 = v15 - v13;
    if (v15 == v13)
    {
      v17 = 0;
    }
    else
    {
      v17 = ~v13 + v15;
      while (1)
      {
        v18 = v14;
        if (v7)
        {
          *(_WORD *)v14 = v6;
          *(_BYTE *)(v14 + 2) = BYTE2(v6);
        }
        else
        {
          v6 = *(_DWORD *)(a2 + 4 * v4);
          *(_WORD *)v14 = v6;
          *(_BYTE *)(v14 + 2) = BYTE2(v6);
          v5 = *(_DWORD *)(a2 + 4 * (v8 - 1 + v4));
        }
        if (v5 <= 0)
          goto LABEL_22;
        v7 = --v5 != 0;
        if (!v5)
        {
          v4 += v8;
          if (v4 == v9)
            break;
        }
        v14 += v10;
        if (--v17 == -1)
        {
          v17 = 0;
          v14 = v18 + v10;
          goto LABEL_15;
        }
      }
      v5 = 0;
      v7 = 0;
      v14 += v10;
      v4 = v9;
LABEL_15:
      v15 = result[9];
      v13 = result[10];
    }
    v13 += v16 - v17;
    if (v13 == v15)
    {
      v13 = 0;
      v11 += result[6];
      --v12;
      v14 = v11;
    }
    else if (v13 >= v15)
    {
      goto LABEL_22;
    }
    result[10] = v13;
    if (v4 > v9)
    {
LABEL_22:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
  }
  while (v4 != v9);
  result[11] = v14;
  result[12] = v11;
  result[8] = v12;
  return result;
}

void CMM8Bit3ChanNoConvDecoder::DoDecode()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -171;
}

char *CMMEncoderTemplate<CMM16BitNChanData>::DoEncode(char *result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  __int16 *v6;
  __int16 *v7;
  char *v9;
  unsigned __int16 *v10;
  __int16 *v11;
  _WORD *v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  __int16 *v76;
  unsigned __int16 *v77;
  unsigned __int16 v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  unsigned __int16 v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  unsigned __int16 v87;
  unsigned __int16 v88;
  unsigned __int16 v89;
  unsigned __int16 v90;
  _WORD *v91;
  unsigned int *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _DWORD *exception;
  unint64_t *v99;
  __int16 *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int16 *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[3];

  v108[2] = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 13);
  v6 = (__int16 *)*((_QWORD *)result + 21);
  v7 = &v6[*((_QWORD *)result + 7) * *((_QWORD *)result + 12)];
  *((_QWORD *)result + 20) = v7;
  v9 = result;
  v100 = v6;
  v10 = (unsigned __int16 *)(result + 128);
  v11 = v7;
  v12 = result + 128;
  switch(v5)
  {
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_13;
    case 5:
      goto LABEL_12;
    case 6:
      goto LABEL_11;
    case 7:
      goto LABEL_10;
    case 8:
      goto LABEL_9;
    case 9:
      goto LABEL_8;
    case 10:
      goto LABEL_7;
    case 11:
      goto LABEL_6;
    case 12:
      goto LABEL_5;
    case 13:
      goto LABEL_4;
    case 14:
      goto LABEL_3;
    case 15:
      v11 = v7 + 1;
      v12 = result + 130;
      *((_WORD *)result + 64) = *v7 + 1;
LABEL_3:
      v13 = *v11++;
      *v12++ = v13 + 1;
LABEL_4:
      v14 = *v11++;
      *v12++ = v14 + 1;
LABEL_5:
      v15 = *v11++;
      *v12++ = v15 + 1;
LABEL_6:
      v16 = *v11++;
      *v12++ = v16 + 1;
LABEL_7:
      v17 = *v11++;
      *v12++ = v17 + 1;
LABEL_8:
      v18 = *v11++;
      *v12++ = v18 + 1;
LABEL_9:
      v19 = *v11++;
      *v12++ = v19 + 1;
LABEL_10:
      v20 = *v11++;
      *v12++ = v20 + 1;
LABEL_11:
      v21 = *v11++;
      *v12++ = v21 + 1;
LABEL_12:
      v22 = *v11++;
      *v12++ = v22 + 1;
LABEL_13:
      v23 = *v11++;
      *v12++ = v23 + 1;
LABEL_14:
      v24 = *v11++;
      *v12++ = v24 + 1;
LABEL_15:
      v25 = *v11++;
      *v12++ = v25 + 1;
LABEL_16:
      v26 = 0;
      v104 = (unsigned __int16 *)(result + 130);
      *v12 = *v11 + 1;
      v99 = a4;
      break;
    default:
      goto LABEL_87;
  }
  do
  {
    v27 = *((_QWORD *)v9 + 10);
    if (!v27)
      break;
    v28 = *((_QWORD *)v9 + 11);
    v29 = *((_QWORD *)v9 + 12);
    if (v28 - v29 >= *((_QWORD *)v9 + 1) - *a4)
      v30 = *((_QWORD *)v9 + 1) - *a4;
    else
      v30 = v28 - v29;
    v105 = v30;
    if (v30)
    {
      v101 = *((_QWORD *)v9 + 12);
      v102 = *((_QWORD *)v9 + 11);
      v103 = *((_QWORD *)v9 + 10);
      v31 = *((_QWORD *)v9 + 3);
      while (2)
      {
        if (v26 >= v31)
          goto LABEL_87;
        v32 = *((_QWORD *)v9 + 13);
        v33 = v32 - 1;
        --v30;
        v34 = (unsigned __int16 *)v7;
        v35 = v10;
        switch(v32)
        {
          case 1:
            goto LABEL_40;
          case 2:
            goto LABEL_39;
          case 3:
            goto LABEL_38;
          case 4:
            goto LABEL_37;
          case 5:
            goto LABEL_36;
          case 6:
            goto LABEL_35;
          case 7:
            goto LABEL_34;
          case 8:
            goto LABEL_33;
          case 9:
            goto LABEL_32;
          case 10:
            goto LABEL_31;
          case 11:
            goto LABEL_30;
          case 12:
            goto LABEL_29;
          case 13:
            goto LABEL_28;
          case 14:
            goto LABEL_27;
          case 15:
            v34 = (unsigned __int16 *)(v7 + 1);
            v36 = (unsigned __int16)*v7;
            if (*v10 != v36)
            {
LABEL_45:
              v76 = v7 + 1;
              *v10 = v36;
              v77 = v104;
LABEL_46:
              v78 = *v76++;
              *v77++ = v78;
LABEL_47:
              v79 = *v76++;
              *v77++ = v79;
LABEL_48:
              v80 = *v76++;
              *v77++ = v80;
LABEL_49:
              v81 = *v76++;
              *v77++ = v81;
LABEL_50:
              v82 = *v76++;
              *v77++ = v82;
LABEL_51:
              v83 = *v76++;
              *v77++ = v83;
LABEL_52:
              v84 = *v76++;
              *v77++ = v84;
LABEL_53:
              v85 = *v76++;
              *v77++ = v85;
LABEL_54:
              v86 = *v76++;
              *v77++ = v86;
LABEL_55:
              v87 = *v76++;
              *v77++ = v87;
LABEL_56:
              v88 = *v76++;
              *v77++ = v88;
LABEL_57:
              v89 = *v76++;
              *v77++ = v89;
LABEL_58:
              v90 = *v76++;
              *v77++ = v90;
LABEL_59:
              *v77 = *v76;
              v106 = 0;
              v107 = 0;
              *(_QWORD *)((char *)v108 + 6) = 0;
              v108[0] = 0;
              v91 = (_WORD *)&v106 + *((_QWORD *)v9 + 14);
              result = (char *)memcpy(v91, v7, *((_QWORD *)v9 + 15));
              if (v9[176])
              {
                do
                {
                  *v91 = bswap32((unsigned __int16)*v91) >> 16;
                  ++v91;
                  --v32;
                }
                while (v32);
              }
              v92 = (unsigned int *)(a2 + 4 * v26);
              switch(v33)
              {
                case 0:
                  goto LABEL_76;
                case 1:
                  goto LABEL_75;
                case 2:
                  goto LABEL_74;
                case 3:
                  goto LABEL_73;
                case 4:
                  goto LABEL_72;
                case 5:
                  goto LABEL_71;
                case 6:
                  goto LABEL_70;
                case 7:
                  goto LABEL_69;
                case 8:
                  goto LABEL_68;
                case 9:
                  goto LABEL_67;
                case 10:
                  goto LABEL_66;
                case 11:
                  goto LABEL_65;
                case 12:
                  goto LABEL_64;
                case 13:
                  goto LABEL_63;
                case 14:
                  *v92++ = ((((unsigned __int16)v106 >> 7) | ((unsigned __int16)v106 << 9)) + 1) >> 1;
LABEL_63:
                  *v92++ = (((WORD1(v106) >> 7) | (WORD1(v106) << 9)) + 1) >> 1;
LABEL_64:
                  *v92++ = (((WORD2(v106) >> 7) | (WORD2(v106) << 9)) + 1) >> 1;
LABEL_65:
                  *v92++ = (((HIWORD(v106) >> 7) | (HIWORD(v106) << 9)) + 1) >> 1;
LABEL_66:
                  *v92++ = ((((unsigned __int16)v107 >> 7) | ((unsigned __int16)v107 << 9)) + 1) >> 1;
LABEL_67:
                  *v92++ = (((WORD1(v107) >> 7) | (WORD1(v107) << 9)) + 1) >> 1;
LABEL_68:
                  *v92++ = (((WORD2(v107) >> 7) | (WORD2(v107) << 9)) + 1) >> 1;
LABEL_69:
                  *v92++ = (((HIWORD(v107) >> 7) | (HIWORD(v107) << 9)) + 1) >> 1;
LABEL_70:
                  *v92++ = (((LOWORD(v108[0]) >> 7) | (LOWORD(v108[0]) << 9)) + 1) >> 1;
LABEL_71:
                  *v92++ = (((WORD1(v108[0]) >> 7) | (WORD1(v108[0]) << 9)) + 1) >> 1;
LABEL_72:
                  *v92++ = (((WORD2(v108[0]) >> 7) | (WORD2(v108[0]) << 9)) + 1) >> 1;
LABEL_73:
                  *v92++ = (((HIWORD(v108[0]) >> 7) | (HIWORD(v108[0]) << 9)) + 1) >> 1;
LABEL_74:
                  *v92++ = (((LOWORD(v108[1]) >> 7) | (LOWORD(v108[1]) << 9)) + 1) >> 1;
LABEL_75:
                  *v92++ = (((WORD1(v108[1]) >> 7) | (WORD1(v108[1]) << 9)) + 1) >> 1;
LABEL_76:
                  *v92 = (((WORD2(v108[1]) >> 7) | (WORD2(v108[1]) << 9)) + 1) >> 1;
                  v26 += *((_QWORD *)v9 + 2);
                  *(_DWORD *)(a2 + 4 * v26 - 4) = 1;
                  v7 += *((_QWORD *)v9 + 7);
                  *((_QWORD *)v9 + 20) = v7;
                  if (v26 < v31)
                    goto LABEL_77;
                  goto LABEL_78;
                default:
                  goto LABEL_87;
              }
            }
            v35 = v104;
LABEL_27:
            v38 = *v35++;
            v37 = v38;
            v39 = *v34++;
            if (v37 != v39)
              goto LABEL_43;
LABEL_28:
            v41 = *v35++;
            v40 = v41;
            v42 = *v34++;
            if (v40 != v42)
              goto LABEL_43;
LABEL_29:
            v44 = *v35++;
            v43 = v44;
            v45 = *v34++;
            if (v43 != v45)
              goto LABEL_43;
LABEL_30:
            v47 = *v35++;
            v46 = v47;
            v48 = *v34++;
            if (v46 != v48)
              goto LABEL_43;
LABEL_31:
            v50 = *v35++;
            v49 = v50;
            v51 = *v34++;
            if (v49 != v51)
              goto LABEL_43;
LABEL_32:
            v53 = *v35++;
            v52 = v53;
            v54 = *v34++;
            if (v52 != v54)
              goto LABEL_43;
LABEL_33:
            v56 = *v35++;
            v55 = v56;
            v57 = *v34++;
            if (v55 != v57)
              goto LABEL_43;
LABEL_34:
            v59 = *v35++;
            v58 = v59;
            v60 = *v34++;
            if (v58 != v60)
              goto LABEL_43;
LABEL_35:
            v62 = *v35++;
            v61 = v62;
            v63 = *v34++;
            if (v61 != v63)
              goto LABEL_43;
LABEL_36:
            v65 = *v35++;
            v64 = v65;
            v66 = *v34++;
            if (v64 != v66)
              goto LABEL_43;
LABEL_37:
            v68 = *v35++;
            v67 = v68;
            v69 = *v34++;
            if (v67 != v69)
              goto LABEL_43;
LABEL_38:
            v71 = *v35++;
            v70 = v71;
            v72 = *v34++;
            if (v70 != v72)
              goto LABEL_43;
LABEL_39:
            v74 = *v35++;
            v73 = v74;
            v75 = *v34++;
            if (v73 != v75)
              goto LABEL_43;
LABEL_40:
            if (*v35 != *v34)
            {
LABEL_43:
              v76 = v7;
              v77 = v10;
              switch(v32)
              {
                case 1:
                  goto LABEL_59;
                case 2:
                  goto LABEL_58;
                case 3:
                  goto LABEL_57;
                case 4:
                  goto LABEL_56;
                case 5:
                  goto LABEL_55;
                case 6:
                  goto LABEL_54;
                case 7:
                  goto LABEL_53;
                case 8:
                  goto LABEL_52;
                case 9:
                  goto LABEL_51;
                case 10:
                  goto LABEL_50;
                case 11:
                  goto LABEL_49;
                case 12:
                  goto LABEL_48;
                case 13:
                  goto LABEL_47;
                case 14:
                  goto LABEL_46;
                case 15:
                  LOWORD(v36) = *v7;
                  goto LABEL_45;
                default:
                  goto LABEL_87;
              }
            }
            if (v26 < *((_QWORD *)v9 + 2))
              goto LABEL_87;
            ++*(_DWORD *)(a2 + 4 * v26 - 4);
            v7 += *((_QWORD *)v9 + 7);
            *((_QWORD *)v9 + 20) = v7;
LABEL_77:
            if (v30)
              continue;
LABEL_78:
            a4 = v99;
            v28 = v102;
            v27 = v103;
            v29 = v101;
            break;
          default:
            goto LABEL_87;
        }
        break;
      }
    }
    v93 = v29 + v105 - v30;
    if (v93 == v28)
    {
      v93 = 0;
      v7 = &v100[*((_QWORD *)v9 + 8)];
      *((_QWORD *)v9 + 20) = v7;
      *((_QWORD *)v9 + 21) = v7;
      *((_QWORD *)v9 + 10) = v27 - 1;
      v100 = v7;
    }
    else if (v93 >= v28)
    {
      goto LABEL_87;
    }
    *((_QWORD *)v9 + 12) = v93;
    v94 = *a4 + v105 - v30;
    *a4 = v94;
    v95 = *((_QWORD *)v9 + 3);
    if (v26 <= v95)
    {
      v96 = *((_QWORD *)v9 + 1);
      if (v94 <= v96)
        continue;
    }
LABEL_87:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  while (v26 != v95 && v94 != v96);
  *a5 = v26 / *((_QWORD *)v9 + 2);
  return result;
}

BOOL CMMEncoderTemplate<CMM16BitNChanData>::IsInPlace(uint64_t a1, uint64_t a2)
{
  return CMMDataBaseClass::IsSameData(*(_QWORD *)(a1 + 48), a2);
}

uint64_t CMMDecoderTemplate<CMM16BitNChanData>::DoDecode(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __int16 *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int16 *v11;
  unint64_t v12;
  __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 *v17;
  __int16 *v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  int *v33;
  __int16 *v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _WORD *v66;
  _DWORD *exception;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(result + 8);
  v9 = v8 * a4;
  v10 = *(_QWORD *)(result + 40);
  v11 = *(__int16 **)(result + 152);
  v12 = *(_QWORD *)(result + 80);
  v13 = &v11[v12 * v10];
  *(_QWORD *)(result + 144) = v13;
  v14 = *(_QWORD *)(result + 64);
  while (v14)
  {
    v15 = *(_QWORD *)(result + 72);
    if (v15 == v12)
    {
      v16 = 0;
      goto LABEL_81;
    }
    v16 = v15 - v12;
    while (2)
    {
      if (v7)
      {
        if (v5)
        {
          v17 = v5;
          v18 = v13;
          switch(*(_QWORD *)(result + 88))
          {
            case 1:
              goto LABEL_22;
            case 2:
              goto LABEL_21;
            case 3:
              goto LABEL_20;
            case 4:
              goto LABEL_19;
            case 5:
              goto LABEL_18;
            case 6:
              goto LABEL_17;
            case 7:
              goto LABEL_16;
            case 8:
              goto LABEL_15;
            case 9:
              goto LABEL_14;
            case 0xALL:
              goto LABEL_13;
            case 0xBLL:
              goto LABEL_12;
            case 0xCLL:
              goto LABEL_11;
            case 0xDLL:
              goto LABEL_10;
            case 0xELL:
              goto LABEL_9;
            case 0xFLL:
              v17 = v5 + 1;
              *v13 = *v5;
              v18 = v13 + 1;
LABEL_9:
              v19 = *v17++;
              *v18++ = v19;
LABEL_10:
              v20 = *v17++;
              *v18++ = v20;
LABEL_11:
              v21 = *v17++;
              *v18++ = v21;
LABEL_12:
              v22 = *v17++;
              *v18++ = v22;
LABEL_13:
              v23 = *v17++;
              *v18++ = v23;
LABEL_14:
              v24 = *v17++;
              *v18++ = v24;
LABEL_15:
              v25 = *v17++;
              *v18++ = v25;
LABEL_16:
              v26 = *v17++;
              *v18++ = v26;
LABEL_17:
              v27 = *v17++;
              *v18++ = v27;
LABEL_18:
              v28 = *v17++;
              *v18++ = v28;
LABEL_19:
              v29 = *v17++;
              *v18++ = v29;
LABEL_20:
              v30 = *v17++;
              *v18++ = v30;
LABEL_21:
              v31 = *v17++;
              *v18++ = v31;
LABEL_22:
              *v18 = *v17;
              goto LABEL_74;
            default:
              break;
          }
        }
LABEL_87:
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      v32 = *(_QWORD *)(result + 88);
      v33 = (int *)(a2 + 4 * v4);
      v34 = v13;
      switch(v32)
      {
        case 1:
          goto LABEL_67;
        case 2:
          goto LABEL_64;
        case 3:
          goto LABEL_61;
        case 4:
          goto LABEL_58;
        case 5:
          goto LABEL_55;
        case 6:
          goto LABEL_52;
        case 7:
          goto LABEL_49;
        case 8:
          goto LABEL_46;
        case 9:
          goto LABEL_43;
        case 10:
          goto LABEL_40;
        case 11:
          goto LABEL_37;
        case 12:
          goto LABEL_34;
        case 13:
          goto LABEL_31;
        case 14:
          goto LABEL_28;
        case 15:
          v35 = *v33++;
          v36 = (v35 + 128) >> 8;
          if (v36 >= 0xFFFF)
            v37 = -1;
          else
            v37 = v36;
          *v13 = v37;
          v34 = v13 + 1;
LABEL_28:
          v38 = *v33++;
          v39 = (v38 + 128) >> 8;
          if (v39 >= 0xFFFF)
            LOWORD(v39) = -1;
          *v34++ = v39;
LABEL_31:
          v40 = *v33++;
          v41 = (v40 + 128) >> 8;
          if (v41 >= 0xFFFF)
            LOWORD(v41) = -1;
          *v34++ = v41;
LABEL_34:
          v42 = *v33++;
          v43 = (v42 + 128) >> 8;
          if (v43 >= 0xFFFF)
            LOWORD(v43) = -1;
          *v34++ = v43;
LABEL_37:
          v44 = *v33++;
          v45 = (v44 + 128) >> 8;
          if (v45 >= 0xFFFF)
            LOWORD(v45) = -1;
          *v34++ = v45;
LABEL_40:
          v46 = *v33++;
          v47 = (v46 + 128) >> 8;
          if (v47 >= 0xFFFF)
            LOWORD(v47) = -1;
          *v34++ = v47;
LABEL_43:
          v48 = *v33++;
          v49 = (v48 + 128) >> 8;
          if (v49 >= 0xFFFF)
            LOWORD(v49) = -1;
          *v34++ = v49;
LABEL_46:
          v50 = *v33++;
          v51 = (v50 + 128) >> 8;
          if (v51 >= 0xFFFF)
            LOWORD(v51) = -1;
          *v34++ = v51;
LABEL_49:
          v52 = *v33++;
          v53 = (v52 + 128) >> 8;
          if (v53 >= 0xFFFF)
            LOWORD(v53) = -1;
          *v34++ = v53;
LABEL_52:
          v54 = *v33++;
          v55 = (v54 + 128) >> 8;
          if (v55 >= 0xFFFF)
            LOWORD(v55) = -1;
          *v34++ = v55;
LABEL_55:
          v56 = *v33++;
          v57 = (v56 + 128) >> 8;
          if (v57 >= 0xFFFF)
            LOWORD(v57) = -1;
          *v34++ = v57;
LABEL_58:
          v58 = *v33++;
          v59 = (v58 + 128) >> 8;
          if (v59 >= 0xFFFF)
            LOWORD(v59) = -1;
          *v34++ = v59;
LABEL_61:
          v60 = *v33++;
          v61 = (v60 + 128) >> 8;
          if (v61 >= 0xFFFF)
            LOWORD(v61) = -1;
          *v34++ = v61;
LABEL_64:
          v62 = *v33++;
          v63 = (v62 + 128) >> 8;
          if (v63 >= 0xFFFF)
            LOWORD(v63) = -1;
          *v34++ = v63;
LABEL_67:
          v64 = (*v33 + 128) >> 8;
          if (v64 >= 0xFFFF)
            LOWORD(v64) = -1;
          *v34 = v64;
          if (*(_BYTE *)(result + 160))
          {
            v65 = -v32;
            v66 = v34 + 1;
            do
              v66[v65] = bswap32((unsigned __int16)v66[v65]) >> 16;
            while (!__CFADD__(v65++, 1));
          }
          v6 = *(_DWORD *)(a2 + 4 * (v8 - 1 + v4));
          v5 = v13;
LABEL_74:
          if (v6 <= 0)
            goto LABEL_87;
          --v16;
          v13 += v10;
          v7 = --v6 != 0;
          if (v6 || (v4 += v8, v4 != v9))
          {
            if (!v16)
              goto LABEL_81;
            continue;
          }
          v6 = 0;
          v7 = 0;
          v4 = v8 * a4;
LABEL_81:
          v12 = v15 - v16;
          if (v15 - v16 == v15)
          {
            v12 = 0;
            v11 += *(_QWORD *)(result + 48);
            *(_QWORD *)(result + 152) = v11;
            *(_QWORD *)(result + 64) = --v14;
            v13 = v11;
            goto LABEL_84;
          }
          if (v12 >= v15)
            goto LABEL_87;
LABEL_84:
          *(_QWORD *)(result + 80) = v12;
          if (v4 > v9)
            goto LABEL_87;
          if (v4 == v9)
            goto LABEL_86;
          break;
        default:
          goto LABEL_87;
      }
      break;
    }
  }
LABEL_86:
  *(_QWORD *)(result + 144) = v13;
  return result;
}

uint64_t CMMAlphaCopier::CMMAlphaCopier(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *exception;

  *(_QWORD *)a1 = off_1E215CE60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 120) = a4;
  if ((a4 & 1) != 0)
  {
    v7 = 0;
    v8 = a2;
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = v9 + CMMAlphaByteOffset((_DWORD *)a3);
    v8 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 24) = v7;
  v10 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(a1 + 32) = v10 + CMMAlphaByteOffset((_DWORD *)v8);
  v11 = *(unsigned __int8 *)(a1 + 120);
  if (*(_BYTE *)(a1 + 120))
  {
    v12 = 0;
    v13 = *(_QWORD **)(a1 + 8);
    v15 = v13[20];
    v14 = v13[21];
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = v15;
    v16 = v13[18];
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  else
  {
    v18 = *(_QWORD **)(a1 + 8);
    v17 = *(_QWORD **)(a1 + 16);
    v19 = v17[20];
    v21 = v18[20];
    v20 = v18[21];
    *(_QWORD *)(a1 + 40) = v17[21];
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v19;
    *(_QWORD *)(a1 + 64) = v21;
    v22 = v18[18];
    *(_QWORD *)(a1 + 72) = v17[18];
    *(_QWORD *)(a1 + 80) = v22;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if ((*(_BYTE *)(a3 + 180) & 0x1F) != 0 && (v23 = *(_DWORD *)(a3 + 176) - 2, v23 <= 5))
      v12 = qword_18B43CDD0[v23];
    else
      v12 = 0;
  }
  *(_QWORD *)(a1 + 104) = v12;
  if ((*(_BYTE *)(a2 + 180) & 0x1F) != 0 && (v24 = *(_DWORD *)(a2 + 176) - 2, v24 <= 5))
    v25 = qword_18B43CDD0[v24];
  else
    v25 = 0;
  *(_QWORD *)(a1 + 112) = v25;
  if (!v11 && (unint64_t)(v12 - 1) >= 2 || (unint64_t)(v25 - 1) >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -181;
  }
  return a1;
}

uint64_t CMMAlphaByteOffset(_DWORD *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  unsigned int v5;
  uint64_t v6;

  v1 = a1[45] & 0x1F;
  v2 = v1 > 5;
  v3 = (1 << v1) & 0x2A;
  if (v2 || v3 == 0)
    return 0;
  v5 = a1[44] - 2;
  if (v5 > 5)
    v6 = 0;
  else
    v6 = qword_18B43CDD0[v5];
  return CMMGetChannelCountFromCMMSpace(a1[46]) * v6;
}

_DWORD *CMMConvPQEOTF::CMMConvPQEOTF(_DWORD *a1, int a2, uint64_t a3, __int128 *a4, uint64_t a5, float a6)
{
  float *v8;

  v8 = (float *)CMMConvTRC::CMMConvTRC((uint64_t)a1, a2, a3, 0, a4, a5, 3, 1, 1.0, 1, 1);
  *(_QWORD *)v8 = off_1E215C938;
  v8[41] = a6;
  CMMConvTRC::SetInputClamp((CMMConvTRC *)v8);
  if (a1[23] != 17)
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_18B3DAFEC(_Unwind_Exception *a1)
{
  CMMConvTRC *v1;

  CMMConvTRC::~CMMConvTRC(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMMatrix::CMMMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t i;
  float v6;
  uint64_t v7;
  __int128 v8;
  int v9;

  v2 = 0;
  *(_QWORD *)result = off_1E215FED0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  v9 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 104) = 1065353216;
  v3 = &v8;
  v4 = result;
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      v6 = *(float *)((char *)v3 + i);
      v7 = v4 + i;
      *(_DWORD *)(v7 + 8) = (int)(v6 * 65536.0 + 0.5);
      *(float *)(v7 + 44) = v6;
    }
    ++v2;
    v4 += 12;
    v3 = (__int128 *)((char *)v3 + 12);
  }
  while (v2 != 3);
  return result;
}

void CMMInvMatrix::CMMInvMatrix(CMMInvMatrix *this, CMMXYZTag *(*a2)[3], int (*a3)[3])
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  CMMInvMatrix *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float *v29;
  uint64_t v30;
  double v31;
  float v32;
  double v33[3][3];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 1065353216;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_1E215C3D0;
  CMMMatrix::InitializeMatrix((uint64_t)this, (uint64_t)this + 108, a2, 1.0);
  v5 = 0;
  v6 = 0;
  memset(v33, 0, sizeof(v33));
  do
  {
    v7 = v5;
    v8 = 3;
    do
    {
      v33[0][v7] = (double)*((int *)this + v7 + 27) * 0.0000152587891;
      ++v7;
      --v8;
    }
    while (v8);
    ++v6;
    v5 += 3;
  }
  while (v6 != 3);
  InvertMatrix3x3((double (*)[3][3])v33);
  v9 = 0;
  for (i = 0; i != 3; ++i)
  {
    v11 = v9;
    v12 = 3;
    do
    {
      v13 = v33[0][v11];
      if (v13 >= 0.0)
        v14 = v13 * 65536.0 + 0.5;
      else
        v14 = v13 * 65536.0 + -0.5;
      *((_DWORD *)this + v11++ + 2) = (int)v14;
      --v12;
    }
    while (v12);
    v9 += 3;
  }
  v15 = 0;
  for (j = 0; j != 3; ++j)
  {
    v17 = v15;
    v18 = 3;
    do
    {
      v33[0][v17] = *((float *)this + v17 + 36);
      ++v17;
      --v18;
    }
    while (v18);
    v15 += 3;
  }
  InvertMatrix3x3((double (*)[3][3])v33);
  v19 = 0;
  for (k = 0; k != 3; ++k)
  {
    v21 = v19;
    v22 = 3;
    do
    {
      v23 = v33[0][v21];
      *((float *)this + v21++ + 11) = v23;
      --v22;
    }
    while (v22);
    v19 += 3;
  }
  v24 = 0;
  v25 = this;
  do
  {
    v26 = 0;
    v27 = 0;
    v28 = 0.0;
    do
    {
      v29 = (float *)((char *)v25 + 4 * v26);
      v27 += qword_18B43BD88[v26] * *((int *)v29 + 2);
      v28 = v28 + (float)(v29[11] * flt_18B43BC40[v26++]);
    }
    while (v26 != 3);
    if (v27 != (__int16)v27 && v28 != 0.0)
    {
      v30 = 0;
      v31 = (double)(*a3)[v24] / (double)((v27 + 0x8000) >> 16);
      v32 = 1.0 / v28;
      do
      {
        if (v31 > 1.0)
          *(_DWORD *)((char *)v25 + v30 + 8) = vcvtmd_s64_f64(v31 * (double)*(int *)((char *)v25 + v30 + 8) + 0.5);
        *(float *)((char *)v25 + v30 + 44) = v32 * *(float *)((char *)v25 + v30 + 44);
        v30 += 4;
      }
      while (v30 != 12);
    }
    ++v24;
    v25 = (CMMInvMatrix *)((char *)v25 + 12);
  }
  while (v24 != 3);
}

void CMMConvInvMatrix::CMMConvInvMatrix(CMMConvInvMatrix *this, const CMMInvMatrix *a2, CMMConvNode *a3, float a4, float a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a3;
  if (a3)
    *((_QWORD *)a3 + 2) = this;
  *((_QWORD *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 0;
  *(_QWORD *)this = off_1E215C688;
  *((_QWORD *)this + 7) = off_1E215FED0;
  v5 = *(_OWORD *)((char *)a2 + 8);
  v6 = *(_OWORD *)((char *)a2 + 40);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 6) = v6;
  *((_OWORD *)this + 4) = v5;
  v7 = *(_OWORD *)((char *)a2 + 56);
  v8 = *(_OWORD *)((char *)a2 + 72);
  v9 = *(_OWORD *)((char *)a2 + 88);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 26);
  *((_OWORD *)this + 8) = v8;
  *((_OWORD *)this + 9) = v9;
  *((_OWORD *)this + 7) = v7;
  *((_WORD *)this + 24) = 0;
  *((_WORD *)this + 16) = 256;
  *(_WORD *)((char *)this + 35) = 0;
  *(_QWORD *)this = off_1E215D798;
  *((_QWORD *)this + 21) = off_1E215FED0;
  v10 = *(_OWORD *)((char *)a2 + 8);
  v11 = *(_OWORD *)((char *)a2 + 40);
  *((_OWORD *)this + 12) = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 13) = v11;
  *((_OWORD *)this + 11) = v10;
  v12 = *(_OWORD *)((char *)a2 + 56);
  v13 = *(_OWORD *)((char *)a2 + 72);
  v14 = *(_OWORD *)((char *)a2 + 88);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 26);
  *((_OWORD *)this + 15) = v13;
  *((_OWORD *)this + 16) = v14;
  *((_OWORD *)this + 14) = v12;
  *((_QWORD *)this + 21) = off_1E215C3D0;
  *(_OWORD *)((char *)this + 276) = *(_OWORD *)((char *)a2 + 108);
  v15 = *(_OWORD *)((char *)a2 + 124);
  v16 = *(_OWORD *)((char *)a2 + 140);
  v17 = *(_OWORD *)((char *)a2 + 156);
  *(_QWORD *)((char *)this + 340) = *(_QWORD *)((char *)a2 + 172);
  *(_OWORD *)((char *)this + 324) = v17;
  *(_OWORD *)((char *)this + 308) = v16;
  *(_OWORD *)((char *)this + 292) = v15;
}

uint64_t CMMConvInvMatrix::Collapse(CMMConvInvMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

void CMMConvHLGOOTF::CMMConvHLGOOTF(CMMConvHLGOOTF *this, float a2, float a3, float a4, float a5, float a6, float *a7, CMMConvNode *a8)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a8;
  if (a8)
    *((_QWORD *)a8 + 2) = this;
  *((_QWORD *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 16777217;
  *(_QWORD *)this = off_1E215CFA0;
  *((float *)this + 13) = a3;
  *((float *)this + 14) = a2;
  if (a5 == 0.0)
  {
    v12 = a2 / 1000.0;
    if (a2 < 400.0 || a2 > 2000.0)
    {
      v17 = log2f(v12);
      v13 = powf(1.111, v17) * 1.2;
    }
    else
    {
      v13 = log10f(v12) * 0.42 + 1.20000005;
    }
  }
  else
  {
    v14 = log2f(a2 / 1000.0);
    v15 = powf(1.111, v14) * 1.2;
    v16 = log2f(a5 / 5.0);
    v13 = v15 * powf(0.98, v16);
  }
  *((float *)this + 12) = v13 + -1.0;
  *((float *)this + 15) = *a7;
  *((float *)this + 16) = a7[1];
  *((float *)this + 17) = a7[2];
  *((float *)this + 18) = a7[3];
  if (a4 != 1.0)
  {
    *((float *)this + 15) = *a7 / a4;
    *((float *)this + 16) = a7[1] / a4;
    *((float *)this + 17) = a7[2] / a4;
    *((float *)this + 18) = a7[3] / a4;
  }
}

void CMMConvPQEETFBase::CMMConvPQEETFBase(CMMConvPQEETFBase *this, float a2, float a3, float a4, float a5, float a6, float *a7, char a8)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  float v26;
  float v28;

  *(_QWORD *)this = off_1E215DCA8;
  *((float *)this + 2) = a2;
  *((float *)this + 3) = a4;
  *((float *)this + 10) = a6;
  *((_BYTE *)this + 60) = a8;
  v11 = a2 / 10000.0;
  v12 = powf(fabsf(a2 / 10000.0), 0.1593);
  v13 = powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  if (v11 < 0.0)
    v13 = -v13;
  v28 = v13;
  *((float *)this + 4) = v13;
  v14 = a3 / 10000.0;
  v15 = powf(fabsf(v14), 0.1593);
  v16 = powf((float)((float)(v15 * 18.852) + 0.83594) / (float)((float)(v15 * 18.688) + 1.0), 78.844);
  if (v14 >= 0.0)
    v17 = v16;
  else
    v17 = -v16;
  *((float *)this + 5) = v17;
  v18 = powf(fabsf(a4 / 10000.0), 0.1593);
  v19 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  if ((float)(a4 / 10000.0) >= 0.0)
    v20 = v19;
  else
    v20 = -v19;
  v21 = powf(fabsf(a5 / 10000.0), 0.1593);
  v22 = powf((float)((float)(v21 * 18.852) + 0.83594) / (float)((float)(v21 * 18.688) + 1.0), 78.844);
  if ((float)(a5 / 10000.0) < 0.0)
    v22 = -v22;
  v23 = (float)(v20 - v17) / (float)(v28 - v17);
  *((float *)this + 6) = v23;
  *((float *)this + 7) = (float)(v22 - v17) / (float)(v28 - v17);
  v24 = v23 * 1.5 + -0.5;
  *((float *)this + 8) = v24;
  v25 = 1.0 - v24;
  if (v25 == 0.0)
    v26 = 1.1755e-38;
  else
    v26 = 1.0 / v25;
  *((float *)this + 9) = v26;
  *((float *)this + 11) = *a7;
  *((float *)this + 12) = a7[1];
  *((float *)this + 13) = a7[2];
  *((float *)this + 14) = a7[3];
}

void CMMConvRWToneMapping::CMMConvRWToneMapping(CMMConvRWToneMapping *this, float a2, float a3, float a4, float a5, float a6, float a7, CMMConvNode *a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a8;
  if (a8)
    *((_QWORD *)a8 + 2) = this;
  *((_QWORD *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 16777217;
  *(_QWORD *)this = off_1E215E2A0;
  v8 = a2 / a4;
  if (a3 <= a4)
    a3 = a4;
  *((float *)this + 12) = v8;
  *((float *)this + 13) = a3;
  v9 = a3 / a4;
  if ((float)(a3 / a4) <= a5)
    v9 = a5;
  *((float *)this + 14) = v9;
  *((float *)this + 15) = a4;
  v10 = fminf((float)(1.0 - (float)((float)(1.0 - a6) * fminf((float)(v9 + -1.0) / 3.9261, 1.0)))+ (float)((float)((float)(1.0 - a6) / (float)(a7 + -1.0)) * (float)(a5 + -1.0)), 1.0);
  *((float *)this + 16) = a5;
  *((float *)this + 17) = v10;
  v11 = a5 * 0.00033333;
  v12 = a5 / v10;
  v13 = (float)(v9 + 1.0) + (float)(v12 * -2.0);
  v14 = fabsf(v13);
  v15 = v9 + (float)(v11 - v13);
  v16 = v14 < v11;
  if (v14 >= v11)
    v17 = (float)(v9 + 1.0) + (float)(v12 * -2.0);
  else
    v17 = (float)(v15 + 1.0) + (float)(v12 * -2.0);
  if (v16)
    v9 = v15;
  *((float *)this + 18) = v17;
  *((float *)this + 19) = -(float)(v9 - (float)(v12 * v12));
  *((float *)this + 20) = 1.0 - v12;
  *((float *)this + 21) = 1.0 / v17;
  *((_DWORD *)this + 22) = 0;
}

void Compute_FlexGTC(float *a1, CFArrayRef theArray, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFIndex Count;
  float *v9;
  CFIndex v10;
  float *v11;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float *v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t valuePtr;

  Count = CFArrayGetCount(theArray);
  v9 = (float *)malloc_type_calloc(1uLL, 12 * Count + 12, 0x10000403E1C8BA9uLL);
  if (a1 && v9)
  {
    v52 = v9;
    if (Count)
    {
      v10 = 0;
      v11 = v9;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v10);
        Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)kColorSyncFlexGTCNodeX);
        v14 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)kColorSyncFlexGTCNodeY);
        v15 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)kColorSyncFlexGTCNodeSlope);
        CFNumberGetValue(Value, kCFNumberFloatType, v11);
        CFNumberGetValue(v14, kCFNumberFloatType, v11 + 1);
        CFNumberGetValue(v15, kCFNumberFloatType, v11 + 2);
        ++v10;
        v11 += 3;
      }
      while (Count != v10);
    }
    valuePtr = 0;
    v55 = 1.0;
    v56 = 0.0;
    v54 = 1.0;
    v16 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("com.apple.cmm.FlexGTCTargetHeadroom"));
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberFloatType, (char *)&valuePtr + 4);
      if (*((float *)&valuePtr + 1) != 0.0)
        HIDWORD(valuePtr) = log2f(*((float *)&valuePtr + 1));
    }
    v17 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapAlternateHeadroom);
    if (v17)
      CFNumberGetValue(v17, kCFNumberFloatType, &valuePtr);
    v18 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapBaselineHeadroom);
    if (v18)
      CFNumberGetValue(v18, kCFNumberFloatType, &v56);
    v19 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapMax);
    if (v19)
      CFNumberGetValue(v19, kCFNumberFloatType, &v55);
    v20 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapMin);
    if (v20)
      CFNumberGetValue(v20, kCFNumberFloatType, &v54);
    if (*((float *)&valuePtr + 1) <= v56)
      v21 = *((float *)&valuePtr + 1);
    else
      v21 = v56;
    v22 = 0.0;
    if (*((float *)&valuePtr + 1) >= 0.0)
      v22 = v21;
    *((float *)&valuePtr + 1) = v22;
    v53 = 1.0;
    if (v22 != 0.0 && (float)(*(float *)&valuePtr - v56) != 0.0)
    {
      v23 = (float)(v22 - v56) / (float)(*(float *)&valuePtr - v56);
      v24 = 1.0;
      if (v23 <= 1.0)
        v24 = v23;
      v25 = v23 < 0.0;
      v26 = 0.0;
      if (!v25)
        v26 = v24;
      v53 = v26;
    }
    v27 = 0;
    v28 = (unint64_t)&v52[3 * Count - 3];
    v29 = *v52;
    v30 = v52[5];
    v31 = v52[3];
    v32 = v52[2];
    v33 = v31 - v29;
    v34 = v52[1];
    v35 = (v32 + v30 - (v52[4] - v34 + v52[4] - v34) / v33) / ((v29 - v31) * (v29 - v31));
    v36 = (v30 - v32) / (v33 + v33) + (v31 + v29) * -1.5 * v35;
    v37 = v32 + v29 * -3.0 * v29 * v35 + v29 * -2.0 * v36;
    v38 = v34 + -(v29 * v29) * v29 * v35 + -(v29 * v29) * v36 - v29 * v37;
    v39 = v54;
    v40 = v55 - v54;
    v41 = v52;
    do
    {
      v42 = (float)v27 / 1023.0;
      if (v42 > v31 && (unint64_t)(v41 + 3) < v28)
      {
        v44 = v41 + 6;
        do
        {
          v41 = v44 - 3;
          v31 = *v44;
          v45 = v42 <= *v44 || (unint64_t)v44 >= v28;
          v44 += 3;
        }
        while (!v45);
        v46 = *(v44 - 6);
        v47 = *(v44 - 5);
        v48 = *(v44 - 4);
        v49 = *(v44 - 1);
        v50 = v31 - v46;
        v35 = (v48 + v49 - (*(v44 - 2) - v47 + *(v44 - 2) - v47) / v50) / ((v46 - v31) * (v46 - v31));
        v36 = (v49 - v48) / (v50 + v50) + (v31 + v46) * -1.5 * v35;
        v37 = v48 + v46 * -3.0 * v46 * v35 + v46 * -2.0 * v36;
        v38 = v47 + -(v46 * v46) * v46 * v35 + -(v46 * v46) * v36 - v46 * v37;
      }
      v51 = v38 + v36 * v42 * v42 + v35 * v42 * v42 * v42 + v37 * v42;
      a1[v27++] = exp2f(v53 * (float)(v39 + (float)(v51 * v40)));
    }
    while (v27 != 1024);
    free(v52);
  }
}

void CMMConvCLUTBase::~CMMConvCLUTBase(CMMConvCLUTBase *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  *(_QWORD *)this = off_1E215D378;
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v3 - 1;
      v2[1] = v4;
      if (!v4)
        (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  v5 = (const void *)*((_QWORD *)this + 6);
  if (v5)
    CFRelease(v5);
}

float DecodeL(float a1)
{
  float v1;
  double v3;

  if (a1 >= 0.0)
  {
    v3 = a1;
    if (a1 <= 8.0)
      return v3 * 0.00885645168 * 0.125;
    else
      return pow((v3 + 16.0) / 116.0, 3.0);
  }
  else
  {
    DecodeL(-a1);
    return -v1;
  }
}

uint64_t CMMConvBlackPointCompensation::Collapse(CMMConvBlackPointCompensation *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvBlackPointCompensation::IsNOP(CMMConvBlackPointCompensation *this)
{
  return 0;
}

void CMMConvBlackPointCompensation::Convert()
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  *exception = -181;
}

uint64_t CMMConvBlackPointCompensation::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  double v6;
  double v7;
  int *v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  if (a5 * a4)
  {
    v5 = 0;
    v6 = *(float *)(result + 56);
    v7 = *(float *)(result + 60) * 16777216.0 / 1.99996948;
    do
    {
      v8 = (int *)(a2 + 4 * v5);
      v9 = v7 + (double)*v8 * 1.03712923 * v6;
      v10 = 16777216.0;
      if (v9 <= 16777216.0)
      {
        v10 = v7 + (double)*v8 * 1.03712923 * v6;
        if (v9 < 0.0)
          v10 = 0.0;
      }
      v11 = v8[1];
      v12 = v8[2];
      v13 = v7 + (double)v11 * v6;
      v14 = v7 + (double)v12 * 1.21226815 * v6;
      if (v13 < 0.0)
        v15 = 0.0;
      else
        v15 = v7 + (double)v11 * v6;
      if (v13 <= 16777216.0)
        v16 = v15;
      else
        v16 = 16777216.0;
      v17 = 16777216.0;
      if (v14 <= 16777216.0)
      {
        v17 = v7 + (double)v12 * 1.21226815 * v6;
        if (v14 < 0.0)
          v17 = 0.0;
      }
      *(_DWORD *)(a2 + 4 * v5) = (int)(v10 * 0.9642);
      v8[1] = (int)v16;
      v8[2] = (int)(v17 * 0.8249);
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

float CMMConvBlackPointCompensation::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  float result;
  float *v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  double v17;
  float v18;
  float v19;

  if (a5 * a4)
  {
    v5 = 0;
    result = -2.7254e10;
    do
    {
      v7 = (float *)(a2 + 4 * v5);
      v8 = *(float *)(a1 + 56);
      v9 = *(float *)(a1 + 60);
      v10 = v8;
      v11 = v9 + *v7 * 1.03712923 * v8;
      v12 = 3.40282347e38;
      if (v11 <= 3.40282347e38)
      {
        v12 = v9 + *v7 * 1.03712923 * v8;
        if (v11 < 0.0)
          v12 = 0.0;
      }
      v13 = v9 + (float)(v7[1] * v8);
      v14 = v9 + v7[2] * 1.21226815 * v10;
      if (v13 < 0.0)
        v15 = 0.0;
      else
        v15 = v13;
      if (v13 <= 3.4028e38)
        v16 = v15;
      else
        v16 = 3.4028e38;
      v17 = 3.40282347e38;
      if (v14 <= 3.40282347e38)
      {
        v17 = v14;
        if (v14 < 0.0)
          v17 = 0.0;
      }
      v18 = v12;
      *(float *)(a2 + 4 * v5) = v18;
      v19 = v17;
      v7[1] = v16;
      v7[2] = v19;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvBlackPointCompensation::GetCLUTPoints(CMMConvBlackPointCompensation *this, int a2)
{
  if (a2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t CMMConvBlackPointCompensation::GetMaxNofChannels(CMMConvBlackPointCompensation *this)
{
  return 3;
}

uint64_t CMMConvBlackPointCompensation::GetPrecision(CMMConvBlackPointCompensation *this)
{
  return 2;
}

uint64_t CMMConvBlackPointCompensation::GetTransformType(CMMConvBlackPointCompensation *this, const __CFDictionary *a2)
{
  return 2;
}

__CFDictionary *CMMConvBlackPointCompensation::FlattenConversion(CMMConvBlackPointCompensation *this, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v4;
  __CFArray *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  int v12;
  const CFArrayCallBacks *v13;
  CFMutableArrayRef v14;
  __CFArray *v15;
  int v16;
  double v17;
  float v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  __CFDictionary *v23;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v4)
    {
      v5 = v4;
      v6 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 48);
      if (v6)
      {
        v7 = v6;
        CFArrayAppendValue(v5, v6);
        CFRelease(v7);
      }
      v8 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 52);
      if (v8)
      {
        v9 = v8;
        CFArrayAppendValue(v5, v8);
        CFRelease(v9);
      }
      if (CFArrayGetCount(v5) == 2)
      {
        CFDictionaryAddValue(Mutable, kColorSyncConversionBPC, v5);
        CFRelease(v5);
        v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (v10)
        {
          v11 = v10;
          v12 = 0;
          v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          while (1)
          {
            v14 = CFArrayCreateMutable(0, 0, v13);
            if (!v14)
              goto LABEL_28;
            v15 = v14;
            v16 = 0;
            while (1)
            {
              valuePtr = 0.0;
              if (v12 != v16)
                goto LABEL_21;
              if (v12 == 2)
              {
                v17 = *((float *)this + 14) / 0.8249;
              }
              else
              {
                if (v12 == 1)
                {
                  v18 = *((float *)this + 14);
                  goto LABEL_20;
                }
                if (v12)
                  goto LABEL_21;
                v17 = *((float *)this + 14) / 0.9642;
              }
              v18 = v17;
LABEL_20:
              valuePtr = v18;
LABEL_21:
              v19 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
              if (!v19)
                break;
              v20 = v19;
              CFArrayAppendValue(v15, v19);
              CFRelease(v20);
              if (++v16 == 3)
                goto LABEL_25;
            }
            CFRelease(v15);
            v15 = 0;
LABEL_25:
            v21 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 60);
            if (!v21)
            {
              CFRelease(v15);
LABEL_32:
              CFRelease(v11);
              v11 = 0;
              goto LABEL_33;
            }
            v22 = v21;
            CFArrayAppendValue(v15, v21);
            CFRelease(v22);
            if (!v15)
              goto LABEL_32;
            CFArrayAppendValue(v11, v15);
            CFRelease(v15);
LABEL_28:
            if (++v12 == 3)
            {
LABEL_33:
              CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v11);
              CFRelease(v11);
              CMMConvNode::AddFixedPointClippingRange(Mutable, v23, *((float *)this + 10), *((float *)this + 11));
              CMMConvNode::AddClampingInfo(this, Mutable);
              return Mutable;
            }
          }
        }
      }
      else
      {
        CFRelease(Mutable);
        CFRelease(v5);
        return 0;
      }
    }
  }
  return Mutable;
}

void CMMConv3DPQEETF::~CMMConv3DPQEETF(CMMConv3DPQEETF *this)
{
  pthread_mutex_t **v1;

  CMMConvCLUTBase::~CMMConvCLUTBase(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMConv3DPQEETF::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;

  if (a4 == 4)
    v9 = 0;
  else
    v9 = 4294967125;
  CMMThrowExceptionOnError(v9);
  return CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  unsigned int v15;
  float *v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  float *v22;

  if (a4 == 4)
    v9 = 0;
  else
    v9 = 4294967125;
  result = CMMThrowExceptionOnError(v9);
  if (a5)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 64);
    v13 = 4 * a4;
    v14 = (float *)a2;
    do
    {
      if (v12)
      {
        v15 = 1;
        v16 = v14;
        do
        {
          v17 = roundf(*v16 * 16777000.0);
          if (v17 > 16777000.0)
            v17 = 16777000.0;
          if (v17 < 0.0)
            v17 = 0.0;
          *(_DWORD *)v16++ = (int)v17;
          v18 = v12 > v15++;
        }
        while (v18);
      }
      ++v11;
      v14 = (float *)((char *)v14 + v13);
    }
    while (v11 != a5);
    result = CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 72);
    do
    {
      if (v20)
      {
        v21 = 1;
        v22 = (float *)a2;
        do
        {
          *v22 = (float)*(int *)v22 * 0.000000059605;
          ++v22;
          v18 = v20 > v21++;
        }
        while (v18);
      }
      ++v19;
      a2 += v13;
    }
    while (v19 != a5);
  }
  return result;
}

void `non-virtual thunk to'CMMConv3DPQEETF::~CMMConv3DPQEETF(CMMConv3DPQEETF *this)
{
  CMMConvCLUTBase::~CMMConvCLUTBase((CMMConv3DPQEETF *)((char *)this - 128));
}

{
  pthread_mutex_t **v1;

  CMMConvCLUTBase::~CMMConvCLUTBase((CMMConv3DPQEETF *)((char *)this - 128));
  CMMBase::operator delete(v1);
}

uint64_t CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  int v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  int v36;
  int v37;
  int v38;
  char v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  int v43;
  unsigned __int16 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  _DWORD *exception;

  if (a4)
  {
    v4 = *(_QWORD *)(result + 88);
    v5 = *(_DWORD *)(result + 56);
    v6 = v5 - 1;
    v7 = *(_DWORD *)(result + 72);
    v8 = (unsigned int *)(a2 + 8);
    v9 = 4 * a3;
    while (1)
    {
      v10 = *(v8 - 2);
      if (v10 >= 0x1000001 || (v11 = *(v8 - 1), v11 >= 0x1000001) || *v8 >= 0x1000001)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      v12 = v10 * v6 + 256;
      v13 = HIBYTE(v12);
      v14 = (v12 >> 9) & 0x7FFF;
      v15 = v11 * v6 + 256;
      v16 = (v15 >> 9) & 0x7FFF;
      v17 = *v8 * v6 + 256;
      v18 = (v17 >> 9) & 0x7FFF;
      v19 = (unsigned __int16 *)(v4 + 2 * ((v13 * v5 + HIBYTE(v15)) * v5 + HIBYTE(v17)) * v7);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      if (!v18)
        break;
      v23 = &v19[*(unsigned int *)(result + 96)];
      v20 += (int)((*v23 - v20) * v18 + 0x4000) >> 15;
      v21 += (int)((v23[1] - v21) * v18 + 0x4000) >> 15;
      v22 += (int)((v23[2] - v22) * v18 + 0x4000) >> 15;
      if (v16)
      {
        v24 = &v19[*(unsigned int *)(result + 100)];
        v25 = *v24;
        v26 = v24[1];
        v27 = v24[2];
        v28 = &v19[*(unsigned int *)(result + 108)];
        v29 = v28[1];
        v30 = v28[2];
        v31 = v25 + (((*v28 - v25) * v18 + 0x4000) >> 15);
        v32 = v26 + (((v29 - v26) * v18 + 0x4000) >> 15);
        v33 = v27 + (((v30 - v27) * v18 + 0x4000) >> 15);
LABEL_11:
        v20 += (int)((v31 - v20) * v16 + 0x4000) >> 15;
        v21 += (int)((v32 - v21) * v16 + 0x4000) >> 15;
        v22 += (int)((v33 - v22) * v16 + 0x4000) >> 15;
        if (v14)
        {
          v35 = &v19[*(unsigned int *)(result + 104)];
          v36 = *v35;
          v37 = v35[1];
          v38 = v35[2];
          if (v18)
          {
            v39 = 0;
            goto LABEL_16;
          }
          v50 = &v19[*(unsigned int *)(result + 116)];
          v47 = *v50;
          v48 = v50[1];
          v49 = v50[2];
LABEL_19:
          v36 += ((v47 - v36) * v16 + 0x4000) >> 15;
          v37 += ((v48 - v37) * v16 + 0x4000) >> 15;
          v38 += ((v49 - v38) * v16 + 0x4000) >> 15;
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (v14)
      {
        v40 = &v19[*(unsigned int *)(result + 104)];
        v36 = *v40;
        v37 = v40[1];
        v38 = v40[2];
        v39 = 1;
LABEL_16:
        v41 = &v19[*(unsigned int *)(result + 112)];
        v36 += ((*v41 - v36) * v18 + 0x4000) >> 15;
        v37 += ((v41[1] - v37) * v18 + 0x4000) >> 15;
        v38 += ((v41[2] - v38) * v18 + 0x4000) >> 15;
        if ((v39 & 1) == 0)
        {
          v42 = &v19[*(unsigned int *)(result + 116)];
          v43 = v42[2];
          v44 = &v19[*(unsigned int *)(result + 120)];
          v45 = v44[1];
          v46 = v44[2];
          v47 = *v42 + (((*v44 - *v42) * v18 + 0x4000) >> 15);
          v48 = v42[1] + (((v45 - v42[1]) * v18 + 0x4000) >> 15);
          v49 = v43 + (((v46 - v43) * v18 + 0x4000) >> 15);
          goto LABEL_19;
        }
LABEL_22:
        v20 += (int)((v36 - v20) * v14 + 0x4000) >> 15;
        v21 += (int)((v37 - v21) * v14 + 0x4000) >> 15;
        v22 += (int)((v38 - v22) * v14 + 0x4000) >> 15;
      }
LABEL_23:
      *(v8 - 2) = ((v20 >> 7) + (v20 << 9) + 1) >> 1;
      *(v8 - 1) = ((v21 >> 7) + (v21 << 9) + 1) >> 1;
      *v8 = ((v22 >> 7) + (v22 << 9) + 1) >> 1;
      v8 = (unsigned int *)((char *)v8 + v9);
      if (!--a4)
        return result;
    }
    if (!v16)
    {
      if (v14)
      {
        v51 = &v19[*(unsigned int *)(result + 104)];
        v36 = *v51;
        v37 = v51[1];
        v38 = v51[2];
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    v34 = &v19[*(unsigned int *)(result + 100)];
    v31 = *v34;
    v32 = v34[1];
    v33 = v34[2];
    goto LABEL_11;
  }
  return result;
}

void CMMCLUTConv<CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  pthread_mutex_t **v1;

  CMMConvCLUTBase::~CMMConvCLUTBase(a1);
  CMMBase::operator delete(v1);
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned int v12;
  float *v13;
  float v14;
  BOOL v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  float *v19;

  if (a5)
  {
    v5 = a5;
    v6 = (float *)a2;
    v7 = result;
    LODWORD(v8) = 0;
    v9 = *(_QWORD *)(result + 64);
    v10 = 4 * a4;
    v11 = (float *)a2;
    do
    {
      if (v9)
      {
        v12 = 1;
        v13 = v11;
        do
        {
          v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0)
            v14 = 16777000.0;
          if (v14 < 0.0)
            v14 = 0.0;
          *(_DWORD *)v13++ = (int)v14;
          v15 = v9 > v12++;
        }
        while (v15);
      }
      v8 = (v8 + 1);
      v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    result = CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    v16 = 0;
    v17 = *(_QWORD *)(v7 + 72);
    do
    {
      if (v17)
      {
        v18 = 1;
        v19 = v6;
        do
        {
          *v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

pthread_mutex_t *DoCMMDisposeStorage(pthread_mutex_t *result)
{
  pthread_mutex_t *v1;
  _QWORD **sig;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    sig = (_QWORD **)result[1].__sig;
    if (sig)
    {
      v5 = result[1].__sig;
      CMMMemMgr::RetainMemList((CMMMemMgr *)&v5);
      v3 = *sig;
      if (*sig)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          free(v3);
          v3 = v4;
        }
        while (v4);
      }
      CMMMemMgr::ReleaseMemList((void **)&v5);
      CMMMemMgr::ReleaseMemList((void **)&v5);
    }
    pthread_mutex_destroy(v1);
    JUMPOUT(0x18D779568);
  }
  return result;
}

void sub_18B3DC9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef create_pq_dict(const __CFString *a1)
{
  void *v2;
  void *v3;
  void *values[6];
  void *keys[7];

  keys[6] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = (void *)kColorSyncProfile;
  keys[1] = (void *)kColorSyncRenderingIntent;
  keys[2] = (void *)kColorSyncTransformTag;
  keys[3] = (void *)kColorSyncBlackPointCompensation;
  keys[4] = (void *)kColorSyncExtendedRange;
  keys[5] = (void *)kColorSyncHDRDerivative;
  values[0] = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2100_PQProfile);
  values[1] = (void *)kColorSyncRenderingIntentPerceptual;
  v2 = (void *)*MEMORY[0x1E0C9AE40];
  values[2] = (void *)a1;
  values[3] = v2;
  v3 = (void *)*MEMORY[0x1E0C9B0D0];
  values[4] = *(void **)MEMORY[0x1E0C9AE50];
  values[5] = v3;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

CFDictionaryRef create_hlg_dict(const __CFString *a1)
{
  void *v2;
  void *v3;
  void *values[6];
  void *keys[7];

  keys[6] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = (void *)kColorSyncProfile;
  keys[1] = (void *)kColorSyncRenderingIntent;
  keys[2] = (void *)kColorSyncTransformTag;
  keys[3] = (void *)kColorSyncBlackPointCompensation;
  keys[4] = (void *)kColorSyncExtendedRange;
  keys[5] = (void *)kColorSyncHDRDerivative;
  values[0] = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2100_HLGProfile);
  values[1] = (void *)kColorSyncRenderingIntentPerceptual;
  v2 = (void *)*MEMORY[0x1E0C9AE40];
  values[2] = (void *)a1;
  values[3] = v2;
  v3 = (void *)*MEMORY[0x1E0C9B0D0];
  values[4] = v2;
  values[5] = v3;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

ConversionManager *ConversionManager::MakeNDimLutConversion(uint64_t a1, ConversionManager *a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  unint64_t v14;
  ConversionManager *v15;
  unint64_t v16;
  unint64_t v17;
  ConversionManager *v18;
  unint64_t v19;
  CMMLutTagBase *LutTypeTagFromSequence;
  uint64_t v21;
  uint64_t v22;

  if ((unint64_t)CMMGetChannelCountFromCMMSpace(a4) > 4)
    return a2;
  if (a7 == 1)
  {
    if (a2)
    {
      v14 = 0;
      v15 = a2;
      do
      {
        v16 = (*(uint64_t (**)(ConversionManager *, uint64_t))(*(_QWORD *)v15 + 168))(v15, 1);
        if (v16 > v14)
          v14 = v16;
        if (v14 == 0xFFFFFFFF)
          return a2;
        v15 = (ConversionManager *)*((_QWORD *)v15 + 2);
      }
      while (v15);
    }
LABEL_16:
    LutTypeTagFromSequence = (CMMLutTagBase *)ConversionManager::MakeLutTypeTagFromSequence(a1, a2, a3, a4, a5, a6, 0x11uLL);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v21 = CMMGetChannelCountFromCMMSpace(a4);
    v22 = CMMGetChannelCountFromCMMSpace(a5);
    ConversionManager::AddCLUTConv(a1, LutTypeTagFromSequence, v21, v22);
    (*(void (**)(CMMLutTagBase *))(*(_QWORD *)LutTypeTagFromSequence + 8))(LutTypeTagFromSequence);
    return *(ConversionManager **)(a1 + 16);
  }
  if (!a2)
    goto LABEL_16;
  v17 = 0;
  v18 = a2;
  while (1)
  {
    v19 = (*(uint64_t (**)(ConversionManager *, _QWORD))(*(_QWORD *)v18 + 168))(v18, 0);
    if (v19 > v17)
      v17 = v19;
    if (v17 == 0xFFFFFFFF)
      return a2;
    v18 = (ConversionManager *)*((_QWORD *)v18 + 2);
    if (!v18)
      goto LABEL_16;
  }
}

void ConversionManager::~ConversionManager(ConversionManager *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_1E215DDA8;
  v2 = (const void *)*((_QWORD *)this + 9);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 10);
  if (v3)
    CFRelease(v3);
}

{
  pthread_mutex_t **v1;

  ConversionManager::~ConversionManager(this);
  CMMBase::operator delete(v1);
}

_QWORD *ConversionManager::MakeLutTypeTagFromSequence(uint64_t a1, ConversionManager *a2, uint64_t a3, int a4, int a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v13;
  CMMConvNode *v14;
  unint64_t MaxCLUTNofPoints;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL8 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BOOL8 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64x2_t v53;
  float64x2_t v54;
  int64x2_t v55;
  float64x2_t v56;
  int64x2_t v61;
  int32x2_t v62;
  uint64_t v63;
  uint64x2_t v64;
  int32x2_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  _BOOL8 v72;
  _QWORD *v73;
  _QWORD **v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD **v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _BOOL8 v105;
  _QWORD *v106;
  _QWORD *v107;
  ConversionManager *v108;
  ConversionManager *v109;
  _DWORD *exception;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  ConversionManager *v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *lpsrc;
  unint64_t v121;
  _QWORD v122[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  void (**v134)(CMMEncoDec *__hidden);
  __int128 *v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned int v138[16];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  unsigned int v147[16];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;

  v7 = a7;
  v208 = *MEMORY[0x1E0C80C00];
  if (!a7)
  {
    v13 = CMMGetChannelCountFromCMMSpace(a4);
    MaxCLUTNofPoints = ConversionManager::GetMaxCLUTNofPoints(a2, 0, v14);
    v16 = 17;
    if (v13 == 4)
      v16 = 8;
    if (MaxCLUTNofPoints)
      v16 = MaxCLUTNofPoints;
    if (v16 > 9 && v13 > 4)
      v7 = 9;
    else
      v7 = v16;
  }
  v115 = a4;
  v18 = CMMGetChannelCountFromCMMSpace(a4);
  v116 = a5;
  v19 = CMMGetChannelCountFromCMMSpace(a5);
  v20 = CMMBase::NewInternal(0x90uLL, *(_QWORD ***)(a1 + 8));
  *((_DWORD *)v20 + 2) = 1093812784;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_WORD *)v20 + 24) = 0;
  *v20 = off_1E215C2F8;
  v121 = v18;
  *((_BYTE *)v20 + 50) = v18;
  *((_BYTE *)v20 + 51) = v19;
  *((_BYTE *)v20 + 52) = v7;
  *((_BYTE *)v20 + 53) = 0;
  *(_DWORD *)((char *)v20 + 54) = 0x10000;
  *(_QWORD *)((char *)v20 + 58) = 0;
  *(_QWORD *)((char *)v20 + 66) = 0x1000000000000;
  *(_QWORD *)((char *)v20 + 74) = 0;
  *(_DWORD *)((char *)v20 + 82) = 0;
  *(_QWORD *)((char *)v20 + 86) = 0x2000200010000;
  *(_OWORD *)((char *)v20 + 110) = 0u;
  *(_OWORD *)((char *)v20 + 94) = 0u;
  *(_DWORD *)((char *)v20 + 126) = -1;
  *((_DWORD *)v20 + 33) = 0;
  *((_DWORD *)v20 + 34) = 0;
  lpsrc = v20;
  if (!(_BYTE)v18 || !(_BYTE)v19)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -170;
  }
  v27 = 1;
  v28 = v18;
  do
  {
    v29 = v27 * v7;
    v31 = v29 >= v27 && v29 >= v7;
    CMMThrowExceptionWithLog(v31, "Overflow in Power", v21, v22, v23, v24, v25, v26);
    v27 = v29;
    --v28;
  }
  while (v28);
  lpsrc[4] = 2
           * ((v29 + *((unsigned __int16 *)lpsrc + 46)) * *((unsigned __int8 *)lpsrc + 51)
            + *((unsigned __int16 *)lpsrc + 45) * (unint64_t)*((unsigned __int8 *)lpsrc + 50))
           + 52;
  v39 = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 72))(v32);
  v117 = a2;
  v114 = a6;
  if (v18)
  {
    v40 = 1;
    do
    {
      v41 = v40;
      v40 *= v7;
      v43 = v40 >= v41 && v40 >= v7;
      CMMThrowExceptionWithLog(v43, "Overflow in Power", v33, v34, v35, v36, v37, v38);
      --v18;
    }
    while (v18);
    v18 = v121;
    v44 = calculate_clut_capacity(v7, v121, v121, 2, v35, v36, v37, v38);
  }
  else
  {
    CMMThrowExceptionOnError(0);
    v44 = 0;
    v40 = 1;
  }
  v207 = 0u;
  v206 = 0u;
  v205 = 0u;
  v204 = 0u;
  v203 = 0u;
  v202 = 0u;
  v201 = 0u;
  v200 = 0u;
  v199 = 0u;
  v198 = 0u;
  v197 = 0u;
  v196 = 0u;
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v177 = 0u;
  v176 = 0u;
  memset(&v138[8], 0, 32);
  v112 = ~v39;
  if (v44 <= ~v39)
    v45 = 0;
  else
    v45 = 4294967246;
  memset(v138, 0, 32);
  CMMThrowExceptionOnError(v45);
  if (v7)
  {
    v52 = 0;
    v53 = (uint64x2_t)vdupq_n_s64(v7 - 1);
    v54 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v7 - 1)), 0);
    v55 = (int64x2_t)xmmword_18B3EA6B0;
    v56 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    __asm { FMOV            V4.2D, #0.5 }
    v61 = vdupq_n_s64(2uLL);
    do
    {
      v62 = vmovn_s64((int64x2_t)vcgeq_u64(v53, (uint64x2_t)v55));
      v63 = v52 + 1;
      v64.i64[0] = v52;
      v64.i64[1] = v52 + 1;
      v65 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q4, v56, vdivq_f64(vcvtq_f64_u64(v64), v54)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
      if ((v62.i8[0] & 1) != 0)
        *((_WORD *)&v176 + v52) = v65.i16[0];
      if ((v62.i8[4] & 1) != 0)
        *((_WORD *)&v176 + v52 + 1) = v65.i16[2];
      v55 = vaddq_s64(v55, v61);
      v52 += 2;
    }
    while (v63 + 1 != ((v7 + 1) & 0xFFFFFFFFFFFFFFFELL));
  }
  v118 = v19;
  v113 = v39;
  v66 = v39 + v44;
  if (v18)
  {
    v67 = 0;
    do
    {
      if ((_DWORD)v67)
      {
        v68 = 1;
        v69 = v67;
        do
        {
          v70 = v68 * v7;
          v72 = v68 * v7 >= v68 && v70 >= v7;
          CMMThrowExceptionWithLog(v72, "Overflow in Power", v46, v47, v48, v49, v50, v51);
          v68 = v70;
          --v69;
        }
        while (v69);
      }
      else
      {
        v70 = 1;
      }
      v138[v67++] = v70;
    }
    while (v67 != v121);
  }
  v73 = CMMBase::NewInternal(0x28uLL, *(_QWORD ***)(a1 + 8));
  v119 = a1;
  v74 = *(_QWORD ***)(a1 + 8);
  *v73 = off_1E215FE00;
  v73[1] = 1;
  v73[3] = 0;
  v73[4] = v66;
  v75 = CMMBase::NewInternal(v66, v74);
  v73[2] = v75;
  v76 = CMMTable::FloatData((uint64_t)v75, v73[3]);
  if (v40)
  {
    v81 = v76;
    v82 = 0;
    v83 = 0;
    v84 = v44 >> 1;
    do
    {
      memset(v147, 0, sizeof(v147));
      DecodeN(v82, v121, (unsigned int (*)[16])v147, (unsigned int (*)[16])v138, v7);
      if (v121)
      {
        v85 = v121;
        v86 = v85 + v85 * v83 - 1;
        v87 = v147;
        do
        {
          if (v86 >= v84)
            v88 = 4294967246;
          else
            v88 = 0;
          CMMThrowExceptionOnError(v88);
          v89 = *v87++;
          *(_WORD *)(v81 + 2 * v86--) = *((_WORD *)&v176 + v89);
          --v85;
        }
        while (v85);
      }
      v82 = ++v83;
    }
    while (v40 > v83);
  }
  v90 = calculate_clut_capacity(v7, v121, v118, 2, v77, v78, v79, v80);
  v91 = v113 + v90;
  if (v90 <= v112)
    v92 = 0;
  else
    v92 = 4294967246;
  CMMThrowExceptionOnError(v92);
  v93 = CMMBase::NewInternal(0x28uLL, *(_QWORD ***)(v119 + 8));
  v94 = *(_QWORD ***)(v119 + 8);
  v95 = 1;
  *v93 = off_1E215FE00;
  v93[1] = 1;
  v93[3] = 0;
  v93[4] = v91;
  v93[2] = CMMBase::NewInternal(v91, v94);
  v134 = off_1E215BC60;
  v137 = 0;
  if (v121)
  {
    v102 = 1;
    v103 = v121;
    do
    {
      v95 = v102 * v7;
      v105 = v102 * v7 >= v102 && v95 >= v7;
      CMMThrowExceptionWithLog(v105, "Overflow in Power", v96, v97, v98, v99, v100, v101);
      v102 = v95;
      --v103;
    }
    while (v103);
  }
  v207 = 0u;
  v206 = 0u;
  v205 = 0u;
  v204 = 0u;
  v203 = 0u;
  v202 = 0u;
  v201 = 0u;
  v200 = 0u;
  v199 = 0u;
  v198 = 0u;
  v197 = 0u;
  v196 = 0u;
  v195 = 0u;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v174 = 0u;
  v175 = 0u;
  v172 = 0u;
  v173 = 0u;
  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v160 = 0u;
  v161 = 0u;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  memset(&v147[4], 0, 48);
  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  memset(&v138[4], 0, 48);
  *(_QWORD *)v138 = 1;
  *(_QWORD *)&v138[2] = CMMTable::FloatData(v73[2], v73[3]);
  *(_QWORD *)&v144 = v95;
  *((_QWORD *)&v144 + 1) = 1;
  *(_QWORD *)&v145 = v95 * 2 * v121;
  *((_QWORD *)&v145 + 1) = 2 * v121;
  *(_QWORD *)&v146 = 3;
  DWORD2(v146) = v115;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v123 = 0u;
  v122[0] = 1;
  v122[1] = CMMTable::FloatData(v93[2], v93[3]);
  *(_QWORD *)&v131 = v95;
  *((_QWORD *)&v131 + 1) = 1;
  *(_QWORD *)&v132 = v95 * 2 * v118;
  *((_QWORD *)&v132 + 1) = 2 * v118;
  *(_QWORD *)&v133 = 3;
  DWORD2(v133) = v116;
  *(_QWORD *)&v176 = off_1E215D0E0;
  *((_QWORD *)&v176 + 1) = v95;
  *(_QWORD *)&v177 = v114 + 1;
  *((_QWORD *)&v177 + 1) = 0xC00uLL / (v114 + 1) * (v114 + 1);
  LODWORD(v178) = 4;
  v106 = CMMDataBaseClass::CMMDataBaseClass((_QWORD *)&v178 + 1, v138, v121, (v95 * 2 * v121) >> 1);
  LOBYTE(v187) = 0;
  CMM16BitNChanData::SetParams(v106, (uint64_t)v138);
  *(_QWORD *)&v176 = off_1E215DFD8;
  v135 = &v176;
  *(_QWORD *)v147 = off_1E215D0A8;
  *(_QWORD *)&v147[2] = v114 + 1;
  v147[4] = 4;
  v107 = CMMDataBaseClass::CMMDataBaseClass(&v147[6], v122, v118, (unint64_t)v132 >> 1);
  LOBYTE(v154) = 0;
  CMM16BitNChanData::SetParams(v107, (uint64_t)v122);
  *(_QWORD *)v147 = off_1E215DFA0;
  v136 = v147;
  ConversionManager::ApplySequenceToBitmap();
  (*(void (**)(_QWORD *))(*v73 + 8))(v73);
  v108 = v117;
  if (v117)
  {
    do
    {
      v109 = (ConversionManager *)*((_QWORD *)v108 + 2);
      (*(void (**)(ConversionManager *))(*(_QWORD *)v108 + 8))(v108);
      v108 = v109;
    }
    while (v109);
  }
  (*(void (**)(_QWORD *, _QWORD *))(*lpsrc + 128))(lpsrc, v93);
  (*(void (**)(_QWORD *, _QWORD))(*lpsrc + 176))(lpsrc, *(_QWORD *)(v119 + 8));
  (*(void (**)(_QWORD *, _QWORD))(*lpsrc + 184))(lpsrc, *(_QWORD *)(v119 + 8));
  return lpsrc;
}

void sub_18B3DD62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CMMTag *a18)
{
  CMMTag::~CMMTag(a18);
  _Unwind_Resume(a1);
}

void CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  pthread_mutex_t **v1;

  CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::~CMMCLUTConv(a1);
  CMMBase::operator delete(v1);
}

unint64_t CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::Convert(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

unint64_t CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::Convert(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v5;
  float *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned int v12;
  float *v13;
  float v14;
  BOOL v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  float *v19;

  if (a5)
  {
    v5 = a5;
    v6 = (float *)a2;
    v7 = result;
    LODWORD(v8) = 0;
    v9 = *(_QWORD *)(result + 64);
    v10 = 4 * a4;
    v11 = (float *)a2;
    do
    {
      if (v9)
      {
        v12 = 1;
        v13 = v11;
        do
        {
          v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0)
            v14 = 16777000.0;
          if (v14 < 0.0)
            v14 = 0.0;
          *(_DWORD *)v13++ = (int)v14;
          v15 = v9 > v12++;
        }
        while (v15);
      }
      v8 = (v8 + 1);
      v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    result = CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    v16 = 0;
    v17 = *(_QWORD *)(v7 + 72);
    do
    {
      if (v17)
      {
        v18 = 1;
        v19 = v6;
        do
        {
          *v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

unint64_t CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Interpolate<CMMMaxBits>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *exception;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  int v35;
  _OWORD v36[4];
  _OWORD v37[4];
  _DWORD v38[18];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  memset(v38, 0, 64);
  memset(v36, 0, sizeof(v36));
  if (a4)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(result + 88);
    v9 = *(_DWORD *)(result + 56) - 1;
    memset(v37, 0, sizeof(v37));
    v30 = v8;
    v31 = 4 * a3;
    do
    {
      v10 = *(_QWORD *)(v5 + 64);
      v11 = v6;
      if (v10)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          v14 = *(_DWORD *)(a2 + 4 * v12);
          if (v14 >= 0x1000001)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = -171;
          }
          v15 = v14 * v9 + 256;
          v38[v12] = HIBYTE(v15);
          *((_DWORD *)v37 + v12) = (v15 >> 9) & 0x7FFF;
          v12 = v13;
          v16 = v10 > v13++;
        }
        while (v16);
        v6 = v38[0];
        if (v10 < 2)
        {
          v11 = v38[0];
        }
        else
        {
          v17 = 2;
          v18 = 1;
          v11 = v38[0];
          do
          {
            v11 = v38[v18] + v11 * *(_DWORD *)(v5 + 56);
            v18 = v17;
            v16 = v10 > v17++;
          }
          while (v16);
        }
      }
      v34 = v6;
      v19 = *(_QWORD *)(v5 + 72);
      result = CMMTable::FloatData(*(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120));
      v21 = *(_QWORD *)(v5 + 72);
      if (v21)
      {
        v22 = result;
        v33 = v7;
        v23 = 0;
        v24 = 0;
        v25 = (unsigned __int16 *)(v30 + 2 * v19 * v11);
        result = *(_QWORD *)(v5 + 64);
        do
        {
          v26 = *v25;
          v35 = 0;
          if (result)
          {
            LODWORD(v27) = 0;
            do
            {
              v26 = InnerInterpolate<CMMMaxBits>(result, v27, (uint64_t)v37, v26, (uint64_t)v25, v22, &v35, v20);
              v27 = (v27 + 1);
              result = *(_QWORD *)(v5 + 64);
            }
            while (result > v27);
            v21 = *(_QWORD *)(v5 + 72);
          }
          *((_DWORD *)v36 + v23) = v26;
          ++v25;
          v23 = ++v24;
        }
        while (v21 > v24);
        v7 = v33;
        if (v21)
        {
          v28 = 0;
          do
          {
            *(_DWORD *)(a2 + 4 * v28) = ((*((_DWORD *)v36 + v28) >> 7) + (*((_DWORD *)v36 + v28) << 9) + 1) >> 1;
            ++v28;
          }
          while (v21 > v28);
        }
      }
      a2 += v31;
      ++v7;
      v6 = v34;
    }
    while (v7 != a4);
  }
  return result;
}

uint64_t InnerInterpolate<CMMMaxBits>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BOOL8 v26;

  v11 = a4;
  if (a2)
  {
    v14 = a2;
    v15 = (~a2 + a1);
    if (*(_DWORD *)(a3 + 4 * v15))
    {
      v16 = 0;
      v17 = *a7;
      *a7 = v17 + 1;
      v18 = *(unsigned __int16 *)(a5 + 2 * *(unsigned int *)(a6 + 4 * v17));
      do
      {
        v19 = InnerInterpolate<CMMMaxBits>(a1, v16, a3, v18, a5, a6, a7);
        v18 = v19;
        v16 = (v16 + 1);
      }
      while (v14 != (_DWORD)v16);
      v20 = *(_DWORD *)(a3 + 4 * v15);
      v21 = v19 - v11;
      return (v11 + ((v20 * v21 + 0x4000) >> 15));
    }
    v23 = 1;
    do
    {
      v24 = 2 * v23;
      v26 = v23 >= 0 && v24 != 0;
      CMMThrowExceptionWithLog(v26, "Overflow in Power", a3, a4, a5, a6, (uint64_t)a7, a8);
      v23 = v24;
      --v14;
    }
    while (v14);
    *a7 += v24;
  }
  else
  {
    v22 = *a7;
    *a7 = v22 + 1;
    v21 = *(_DWORD *)(a3 + 4 * (a1 - 1));
    if (v21)
    {
      v20 = *(unsigned __int16 *)(a5 + 2 * *(unsigned int *)(a6 + 4 * v22)) - (_DWORD)a4;
      return (v11 + ((v20 * v21 + 0x4000) >> 15));
    }
  }
  return v11;
}

void CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::~CMMCLUTConv(CMMConvCLUTBase *this)
{
  pthread_mutex_t **v2;

  *(_QWORD *)this = off_1E215CBE8;
  *((_QWORD *)this + 12) = off_1E215FE00;
  v2 = (pthread_mutex_t **)*((_QWORD *)this + 14);
  if (v2)
    CMMBase::operator delete(v2);
  CMMConvCLUTBase::~CMMConvCLUTBase(this);
}

_QWORD *CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Offsets::~Offsets(_QWORD *a1)
{
  pthread_mutex_t **v2;

  *a1 = off_1E215FE00;
  v2 = (pthread_mutex_t **)a1[2];
  if (v2)
    CMMBase::operator delete(v2);
  return a1;
}

void CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Offsets::~Offsets(pthread_mutex_t **a1)
{
  pthread_mutex_t **v2;

  *a1 = (pthread_mutex_t *)off_1E215FE00;
  v2 = (pthread_mutex_t **)a1[2];
  if (v2)
    CMMBase::operator delete(v2);
  CMMBase::operator delete(a1);
}

void CMMCLUTConv<CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  pthread_mutex_t **v1;

  CMMConvCLUTBase::~CMMConvCLUTBase(a1);
  CMMBase::operator delete(v1);
}

uint64_t CMMCLUTConv<CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>>::Convert(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

uint64_t CMMCLUTConv<CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>>::Convert(uint64_t result, float *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned int v12;
  float *v13;
  float v14;
  BOOL v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  float *v19;

  if (a5)
  {
    v5 = a5;
    v6 = a2;
    v7 = result;
    LODWORD(v8) = 0;
    v9 = *(_QWORD *)(result + 64);
    v10 = 4 * a4;
    v11 = a2;
    do
    {
      if (v9)
      {
        v12 = 1;
        v13 = v11;
        do
        {
          v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0)
            v14 = 16777000.0;
          if (v14 < 0.0)
            v14 = 0.0;
          *(_DWORD *)v13++ = (int)v14;
          v15 = v9 > v12++;
        }
        while (v15);
      }
      v8 = (v8 + 1);
      v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    result = CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    v16 = 0;
    v17 = *(_QWORD *)(v7 + 72);
    do
    {
      if (v17)
      {
        v18 = 1;
        v19 = v6;
        do
        {
          *v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

uint64_t CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>::Interpolate<CMMMaxBits>(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *exception;
  _OWORD v71[4];
  _OWORD v72[4];
  _OWORD v73[4];
  _OWORD v74[4];
  _OWORD v75[4];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  memset(v71, 0, sizeof(v71));
  if (a4)
  {
    v4 = *(_QWORD *)(result + 88);
    v5 = *(_DWORD *)(result + 56);
    v6 = v5 - 1;
    v7 = *(_QWORD *)(result + 72);
    memset(v75, 0, sizeof(v75));
    memset(v74, 0, sizeof(v74));
    memset(v73, 0, sizeof(v73));
    memset(v72, 0, sizeof(v72));
    while (1)
    {
      if (*a2 >= 0x1000001u
        || (v8 = a2[1], v8 >= 0x1000001)
        || (v9 = a2[2], v9 >= 0x1000001)
        || (v10 = a2[3], v10 >= 0x1000001))
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      if (!v7)
        goto LABEL_89;
      v11 = 0;
      v12 = *a2 * v6 + 256;
      v13 = HIBYTE(v12);
      v14 = (v12 >> 9) & 0x7FFF;
      v15 = v8 * v6 + 256;
      v16 = HIBYTE(v15);
      v17 = (v15 >> 9) & 0x7FFF;
      v18 = v9 * v6 + 256;
      v19 = (v18 >> 9) & 0x7FFF;
      v20 = v10 * v6 + 256;
      v21 = (v20 >> 9) & 0x7FFF;
      v22 = v4 + 2 * (((v16 + v13 * v5) * v5 + HIBYTE(v18)) * v5 + HIBYTE(v20)) * v7;
      do
      {
        *((_DWORD *)v75 + v11) = *(unsigned __int16 *)(v22 + 2 * v11);
        ++v11;
      }
      while (v7 > v11);
      if (v21)
      {
        v23 = 0;
        v24 = v22 + 2 * *(unsigned int *)(result + 96);
        do
        {
          *((_DWORD *)v72 + v23) = *(unsigned __int16 *)(v24 + 2 * v23);
          ++v23;
        }
        while (v7 > v23);
        v25 = 0;
        do
        {
          *((_DWORD *)v75 + v25) += ((*((_DWORD *)v72 + v25) - *((_DWORD *)v75 + v25)) * v21 + 0x4000) >> 15;
          ++v25;
        }
        while (v7 > v25);
      }
      if (v19)
      {
        v26 = 0;
        v27 = v22 + 2 * *(unsigned int *)(result + 100);
        do
        {
          *((_DWORD *)v73 + v26) = *(unsigned __int16 *)(v27 + 2 * v26);
          ++v26;
        }
        while (v7 > v26);
        if (v21)
        {
          v28 = 0;
          v29 = v22 + 2 * *(unsigned int *)(result + 112);
          do
          {
            *((_DWORD *)v72 + v28) = *(unsigned __int16 *)(v29 + 2 * v28);
            ++v28;
          }
          while (v7 > v28);
          v30 = 0;
          do
          {
            *((_DWORD *)v73 + v30) += ((*((_DWORD *)v72 + v30) - *((_DWORD *)v73 + v30)) * v21 + 0x4000) >> 15;
            ++v30;
          }
          while (v7 > v30);
        }
        v31 = 0;
        do
        {
          *((_DWORD *)v75 + v31) += ((*((_DWORD *)v73 + v31) - *((_DWORD *)v75 + v31)) * v19 + 0x4000) >> 15;
          ++v31;
        }
        while (v7 > v31);
      }
      if (v17)
        break;
      v44 = 1;
      if (v14)
        goto LABEL_46;
LABEL_87:
      v69 = 0;
      do
      {
        a2[v69] = ((*((_DWORD *)v75 + v69) >> 7) + (*((_DWORD *)v75 + v69) << 9) + 1) >> 1;
        ++v69;
      }
      while (v7 > v69);
LABEL_89:
      a2 += a3;
      if (!--a4)
        return result;
    }
    v32 = 0;
    v33 = v22 + 2 * *(unsigned int *)(result + 104);
    do
    {
      *((_DWORD *)v74 + v32) = *(unsigned __int16 *)(v33 + 2 * v32);
      ++v32;
    }
    while (v7 > v32);
    if (v21)
    {
      v34 = 0;
      v35 = v22 + 2 * *(unsigned int *)(result + 116);
      do
      {
        *((_DWORD *)v72 + v34) = *(unsigned __int16 *)(v35 + 2 * v34);
        ++v34;
      }
      while (v7 > v34);
      v36 = 0;
      do
      {
        *((_DWORD *)v74 + v36) += ((*((_DWORD *)v72 + v36) - *((_DWORD *)v74 + v36)) * v21 + 0x4000) >> 15;
        ++v36;
      }
      while (v7 > v36);
    }
    if (v19)
    {
      v37 = 0;
      v38 = v22 + 2 * *(unsigned int *)(result + 120);
      do
      {
        *((_DWORD *)v73 + v37) = *(unsigned __int16 *)(v38 + 2 * v37);
        ++v37;
      }
      while (v7 > v37);
      if (v21)
      {
        v39 = 0;
        v40 = v22 + 2 * *(unsigned int *)(result + 124);
        do
        {
          *((_DWORD *)v72 + v39) = *(unsigned __int16 *)(v40 + 2 * v39);
          ++v39;
        }
        while (v7 > v39);
        v41 = 0;
        do
        {
          *((_DWORD *)v73 + v41) += ((*((_DWORD *)v72 + v41) - *((_DWORD *)v73 + v41)) * v21 + 0x4000) >> 15;
          ++v41;
        }
        while (v7 > v41);
      }
      v42 = 0;
      do
      {
        *((_DWORD *)v74 + v42) += ((*((_DWORD *)v73 + v42) - *((_DWORD *)v74 + v42)) * v19 + 0x4000) >> 15;
        ++v42;
      }
      while (v7 > v42);
    }
    v43 = 0;
    do
    {
      *((_DWORD *)v75 + v43) += ((*((_DWORD *)v74 + v43) - *((_DWORD *)v75 + v43)) * v17 + 0x4000) >> 15;
      ++v43;
    }
    while (v7 > v43);
    v44 = 0;
    if (!v14)
      goto LABEL_87;
LABEL_46:
    v45 = 0;
    v46 = v22 + 2 * *(unsigned int *)(result + 108);
    do
    {
      *((_DWORD *)v74 + v45) = *(unsigned __int16 *)(v46 + 2 * v45);
      ++v45;
    }
    while (v7 > v45);
    if (v21)
    {
      v47 = 0;
      v48 = v22 + 2 * *(unsigned int *)(result + 128);
      do
      {
        *((_DWORD *)v71 + v47) = *(unsigned __int16 *)(v48 + 2 * v47);
        ++v47;
      }
      while (v7 > v47);
      v49 = 0;
      do
      {
        *((_DWORD *)v74 + v49) += ((*((_DWORD *)v71 + v49) - *((_DWORD *)v74 + v49)) * v21 + 0x4000) >> 15;
        ++v49;
      }
      while (v7 > v49);
    }
    if (v19)
    {
      v50 = 0;
      v51 = v22 + 2 * *(unsigned int *)(result + 132);
      do
      {
        *((_DWORD *)v72 + v50) = *(unsigned __int16 *)(v51 + 2 * v50);
        ++v50;
      }
      while (v7 > v50);
      if (v21)
      {
        v52 = 0;
        v53 = v22 + 2 * *(unsigned int *)(result + 136);
        do
        {
          *((_DWORD *)v71 + v52) = *(unsigned __int16 *)(v53 + 2 * v52);
          ++v52;
        }
        while (v7 > v52);
        v54 = 0;
        do
        {
          *((_DWORD *)v72 + v54) += ((*((_DWORD *)v71 + v54) - *((_DWORD *)v72 + v54)) * v21 + 0x4000) >> 15;
          ++v54;
        }
        while (v7 > v54);
      }
      v55 = 0;
      do
      {
        *((_DWORD *)v74 + v55) += ((*((_DWORD *)v72 + v55) - *((_DWORD *)v74 + v55)) * v19 + 0x4000) >> 15;
        ++v55;
      }
      while (v7 > v55);
    }
    if ((v44 & 1) == 0)
    {
      v56 = 0;
      v57 = v22 + 2 * *(unsigned int *)(result + 140);
      do
      {
        *((_DWORD *)v73 + v56) = *(unsigned __int16 *)(v57 + 2 * v56);
        ++v56;
      }
      while (v7 > v56);
      if (v21)
      {
        v58 = 0;
        v59 = v22 + 2 * *(unsigned int *)(result + 144);
        do
        {
          *((_DWORD *)v71 + v58) = *(unsigned __int16 *)(v59 + 2 * v58);
          ++v58;
        }
        while (v7 > v58);
        v60 = 0;
        do
        {
          *((_DWORD *)v73 + v60) += ((*((_DWORD *)v71 + v60) - *((_DWORD *)v73 + v60)) * v21 + 0x4000) >> 15;
          ++v60;
        }
        while (v7 > v60);
      }
      if (v19)
      {
        v61 = 0;
        v62 = v22 + 2 * *(unsigned int *)(result + 148);
        do
        {
          *((_DWORD *)v72 + v61) = *(unsigned __int16 *)(v62 + 2 * v61);
          ++v61;
        }
        while (v7 > v61);
        if (v21)
        {
          v63 = 0;
          v64 = v22 + 2 * *(unsigned int *)(result + 152);
          do
          {
            *((_DWORD *)v71 + v63) = *(unsigned __int16 *)(v64 + 2 * v63);
            ++v63;
          }
          while (v7 > v63);
          v65 = 0;
          do
          {
            *((_DWORD *)v72 + v65) += ((*((_DWORD *)v71 + v65) - *((_DWORD *)v72 + v65)) * v21 + 0x4000) >> 15;
            ++v65;
          }
          while (v7 > v65);
        }
        v66 = 0;
        do
        {
          *((_DWORD *)v73 + v66) += ((*((_DWORD *)v72 + v66) - *((_DWORD *)v73 + v66)) * v19 + 0x4000) >> 15;
          ++v66;
        }
        while (v7 > v66);
      }
      v67 = 0;
      do
      {
        *((_DWORD *)v74 + v67) += ((*((_DWORD *)v73 + v67) - *((_DWORD *)v74 + v67)) * v17 + 0x4000) >> 15;
        ++v67;
      }
      while (v7 > v67);
    }
    v68 = 0;
    do
    {
      *((_DWORD *)v75 + v68) += ((*((_DWORD *)v74 + v68) - *((_DWORD *)v75 + v68)) * v14 + 0x4000) >> 15;
      ++v68;
    }
    while (v7 > v68);
    goto LABEL_87;
  }
  return result;
}

void CMMCLUTConv<CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  pthread_mutex_t **v1;

  CMMConvCLUTBase::~CMMConvCLUTBase(a1);
  CMMBase::operator delete(v1);
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>>::Convert(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>>::Convert(uint64_t result, float *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned int v12;
  float *v13;
  float v14;
  BOOL v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  float *v19;

  if (a5)
  {
    v5 = a5;
    v6 = a2;
    v7 = result;
    LODWORD(v8) = 0;
    v9 = *(_QWORD *)(result + 64);
    v10 = 4 * a4;
    v11 = a2;
    do
    {
      if (v9)
      {
        v12 = 1;
        v13 = v11;
        do
        {
          v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0)
            v14 = 16777000.0;
          if (v14 < 0.0)
            v14 = 0.0;
          *(_DWORD *)v13++ = (int)v14;
          v15 = v9 > v12++;
        }
        while (v15);
      }
      v8 = (v8 + 1);
      v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    result = CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    v16 = 0;
    v17 = *(_QWORD *)(v7 + 72);
    do
    {
      if (v17)
      {
        v18 = 1;
        v19 = v6;
        do
        {
          *v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

uint64_t CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>::Interpolate<CMMMaxBits>(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *exception;
  _OWORD v42[4];
  _OWORD v43[4];
  _OWORD v44[4];
  _OWORD v45[4];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memset(v42, 0, sizeof(v42));
  if (a4)
  {
    v4 = *(_QWORD *)(result + 88);
    v5 = *(_DWORD *)(result + 56);
    v6 = v5 - 1;
    v7 = *(_QWORD *)(result + 72);
    memset(v45, 0, sizeof(v45));
    memset(v44, 0, sizeof(v44));
    memset(v43, 0, sizeof(v43));
    do
    {
      if (*a2 >= 0x1000001u || (v8 = a2[1], v8 >= 0x1000001) || (v9 = a2[2], v9 >= 0x1000001))
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = -171;
      }
      if (v7)
      {
        v10 = 0;
        v11 = *a2 * v6 + 256;
        v12 = HIBYTE(v11);
        v13 = (v11 >> 9) & 0x7FFF;
        v14 = v8 * v6 + 256;
        v15 = (v14 >> 9) & 0x7FFF;
        v16 = v9 * v6 + 256;
        v17 = (v16 >> 9) & 0x7FFF;
        v18 = v4 + 2 * ((v12 * v5 + HIBYTE(v14)) * v5 + HIBYTE(v16)) * v7;
        do
        {
          *((_DWORD *)v45 + v10) = *(unsigned __int16 *)(v18 + 2 * v10);
          ++v10;
        }
        while (v7 > v10);
        if (v17)
        {
          v19 = 0;
          v20 = v18 + 2 * *(unsigned int *)(result + 96);
          do
          {
            *((_DWORD *)v44 + v19) = *(unsigned __int16 *)(v20 + 2 * v19);
            ++v19;
          }
          while (v7 > v19);
          v21 = 0;
          do
          {
            *((_DWORD *)v45 + v21) += ((*((_DWORD *)v44 + v21) - *((_DWORD *)v45 + v21)) * v17 + 0x4000) >> 15;
            ++v21;
          }
          while (v7 > v21);
        }
        if (v15)
        {
          v22 = 0;
          v23 = v18 + 2 * *(unsigned int *)(result + 100);
          do
          {
            *((_DWORD *)v44 + v22) = *(unsigned __int16 *)(v23 + 2 * v22);
            ++v22;
          }
          while (v7 > v22);
          if (v17)
          {
            v24 = 0;
            v25 = v18 + 2 * *(unsigned int *)(result + 108);
            do
            {
              *((_DWORD *)v43 + v24) = *(unsigned __int16 *)(v25 + 2 * v24);
              ++v24;
            }
            while (v7 > v24);
            v26 = 0;
            do
            {
              *((_DWORD *)v44 + v26) += ((*((_DWORD *)v43 + v26) - *((_DWORD *)v44 + v26)) * v17 + 0x4000) >> 15;
              ++v26;
            }
            while (v7 > v26);
          }
          v27 = 0;
          do
          {
            *((_DWORD *)v45 + v27) += ((*((_DWORD *)v44 + v27) - *((_DWORD *)v45 + v27)) * v15 + 0x4000) >> 15;
            ++v27;
          }
          while (v7 > v27);
        }
        if (v13)
        {
          v28 = 0;
          v29 = v18 + 2 * *(unsigned int *)(result + 104);
          do
          {
            *((_DWORD *)v44 + v28) = *(unsigned __int16 *)(v29 + 2 * v28);
            ++v28;
          }
          while (v7 > v28);
          if (v17)
          {
            v30 = 0;
            v31 = v18 + 2 * *(unsigned int *)(result + 112);
            do
            {
              *((_DWORD *)v43 + v30) = *(unsigned __int16 *)(v31 + 2 * v30);
              ++v30;
            }
            while (v7 > v30);
            v32 = 0;
            do
            {
              *((_DWORD *)v44 + v32) += ((*((_DWORD *)v43 + v32) - *((_DWORD *)v44 + v32)) * v17 + 0x4000) >> 15;
              ++v32;
            }
            while (v7 > v32);
          }
          if (v15)
          {
            v33 = 0;
            v34 = v18 + 2 * *(unsigned int *)(result + 116);
            do
            {
              *((_DWORD *)v43 + v33) = *(unsigned __int16 *)(v34 + 2 * v33);
              ++v33;
            }
            while (v7 > v33);
            if (v17)
            {
              v35 = 0;
              v36 = v18 + 2 * *(unsigned int *)(result + 120);
              do
              {
                *((_DWORD *)v42 + v35) = *(unsigned __int16 *)(v36 + 2 * v35);
                ++v35;
              }
              while (v7 > v35);
              v37 = 0;
              do
              {
                *((_DWORD *)v43 + v37) += ((*((_DWORD *)v42 + v37) - *((_DWORD *)v43 + v37)) * v17 + 0x4000) >> 15;
                ++v37;
              }
              while (v7 > v37);
            }
            v38 = 0;
            do
            {
              *((_DWORD *)v44 + v38) += ((*((_DWORD *)v43 + v38) - *((_DWORD *)v44 + v38)) * v15 + 0x4000) >> 15;
              ++v38;
            }
            while (v7 > v38);
          }
          v39 = 0;
          do
          {
            *((_DWORD *)v45 + v39) += ((*((_DWORD *)v44 + v39) - *((_DWORD *)v45 + v39)) * v13 + 0x4000) >> 15;
            ++v39;
          }
          while (v7 > v39);
        }
        v40 = 0;
        do
        {
          a2[v40] = ((*((_DWORD *)v45 + v40) >> 7) + (*((_DWORD *)v45 + v40) << 9) + 1) >> 1;
          ++v40;
        }
        while (v7 > v40);
      }
      a2 += a3;
      --a4;
    }
    while (a4);
  }
  return result;
}

unint64_t ConversionManager::GetMaxCLUTNofPoints(ConversionManager *this, CMMConvNode *a2, CMMConvNode *a3)
{
  unint64_t v5;
  CMMConvNode *v6;
  unint64_t v7;
  uint64_t v8;

  if (this == a2)
  {
    if (this)
      return 17;
    else
      return 2;
  }
  else
  {
    v5 = 0;
    v6 = this;
    do
    {
      v7 = (*(uint64_t (**)(CMMConvNode *, uint64_t, CMMConvNode *))(*(_QWORD *)v6 + 168))(v6, 2, a3);
      if (v7 > v5)
        v5 = v7;
      if (v5 == 0xFFFFFFFF)
        return 0;
      v6 = (CMMConvNode *)*((_QWORD *)v6 + 2);
    }
    while (v6 != a2);
    v8 = 17;
    if (!this)
      v8 = 2;
    if (!v5)
      return v8;
  }
  return v5;
}

uint64_t ConversionManager::ApplySequenceToBitmap()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  BOOL v11;
  const char *v12;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _DWORD *exception;
  char v44;
  unint64_t v45;
  _BYTE v46[36864];
  uint64_t v47;
  _QWORD v48[3];

  v0 = MEMORY[0x1E0C80A78]();
  v45 = v4;
  v8 = (_QWORD *)v0;
  v10 = *(_DWORD **)(v2 + 8);
  v9 = *(_DWORD **)(v2 + 16);
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    v12 = "ColorSync: Inavlid Codec\n";
    goto LABEL_7;
  }
  v14 = (_BYTE *)v3;
  v15 = (_QWORD *)v2;
  v16 = v1;
  if (v10[8] <= v9[4])
    v17 = v9[4];
  else
    v17 = v10[8];
  if (v8)
    goto LABEL_15;
  if (!v18)
    goto LABEL_78;
  if (v15[3] || ((*(uint64_t (**)(_DWORD *, void *))(*(_QWORD *)v10 + 40))(v10, v18) & 1) == 0)
  {
LABEL_15:
    if (v17 == 1)
    {
      bzero(v46, 0x9000uLL);
      v19 = (_QWORD *)v15[1];
      if (v19)
      {
        v20 = v15[2];
        if (v20)
        {
          v21 = v15[3];
          v47 = 0;
          v48[0] = 0;
          v22 = v19[2];
          v23 = 4 * v45 * v22 + 4;
          if (v23 >> 12 > 8)
            v23 = 36864;
          bzero(v46, v23);
          if (v14 && v45 <= 0x3FF)
            *v14 = 0;
          if (v45)
          {
            v24 = 0;
            do
            {
              (*(void (**)(_QWORD *, _BYTE *, _BYTE *, _QWORD *, uint64_t *))(*v19 + 16))(v19, v46, v14, v48, &v47);
              if (v8 != v16)
              {
                v25 = v8;
                do
                {
                  if (((*(uint64_t (**)(_QWORD *))(*v25 + 80))(v25) & 1) == 0)
                    (*(void (**)(_QWORD *, _BYTE *, _BYTE *, uint64_t, uint64_t))(*v25 + 96))(v25, v46, v14, v22, v47);
                  v25 = (_QWORD *)v25[2];
                }
                while (v25 != v16);
              }
              if (v21)
              {
                v26 = v48[0];
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v48[0] - v24);
                v24 = v26;
              }
              (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v46, v14, v47);
            }
            while (v48[0] < v45);
          }
          return 0;
        }
      }
LABEL_78:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
    if ((v17 - 3) <= 1)
    {
      bzero(v46, 0x3000uLL);
      v27 = (_QWORD *)v15[1];
      if (v27)
      {
        v28 = v15[2];
        if (v28)
        {
          v29 = v15[3];
          v47 = 0;
          v48[0] = 0;
          v30 = v27[2];
          v31 = 4 * v45 * v30 + 4;
          if (v31 >> 12 > 2)
            v31 = 12288;
          bzero(v46, v31);
          if (v14 && v45 <= 0x3FF)
            *v14 = 0;
          if (v45)
          {
            v32 = 0;
            do
            {
              (*(void (**)(_QWORD *, _BYTE *, _BYTE *, _QWORD *, uint64_t *))(*v27 + 24))(v27, v46, v14, v48, &v47);
              if (v8 != v16)
              {
                v33 = v8;
                do
                {
                  if (((*(uint64_t (**)(_QWORD *))(*v33 + 80))(v33) & 1) == 0)
                    (*(void (**)(_QWORD *, _BYTE *, _BYTE *, uint64_t, uint64_t))(*v33 + 104))(v33, v46, v14, v30, v47);
                  v33 = (_QWORD *)v33[2];
                }
                while (v33 != v16);
              }
              if (v29)
              {
                v34 = v48[0];
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v48[0] - v32);
                v32 = v34;
              }
              (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v28 + 24))(v28, v46, v14, v47);
            }
            while (v48[0] < v45);
          }
          return 0;
        }
      }
      goto LABEL_78;
    }
    if (v17 == 5)
    {
      bzero(v46, 0x3000uLL);
      v35 = (_QWORD *)v15[1];
      if (v35)
      {
        v36 = v15[2];
        if (v36)
        {
          v37 = v15[3];
          v47 = 0;
          v48[0] = 0;
          v38 = v35[2];
          v39 = 4 * v45 * v38 + 4;
          if (v39 >> 12 > 2)
            v39 = 12288;
          bzero(v46, v39);
          if (v14 && v45 <= 0x3FF)
            *v14 = 0;
          if (v45)
          {
            v40 = 0;
            do
            {
              (*(void (**)(_QWORD *, _BYTE *, _BYTE *, _QWORD *, uint64_t *))(*v35 + 32))(v35, v46, v14, v48, &v47);
              if (v8 != v16)
              {
                v41 = v8;
                do
                {
                  if (((*(uint64_t (**)(_QWORD *))(*v41 + 224))(v41) & 1) == 0
                    && ((*(uint64_t (**)(_QWORD *))(*v41 + 80))(v41) & 1) == 0)
                  {
                    if ((*(unsigned int (**)(_QWORD *))(*v41 + 40))(v41))
                      (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t))(*v41 + 136))(v41, v46, v38, v47);
                    (*(void (**)(_QWORD *, _BYTE *, _BYTE *, uint64_t, uint64_t))(*v41 + 112))(v41, v46, v14, v38, v47);
                    if ((*(unsigned int (**)(_QWORD *))(*v41 + 64))(v41))
                      (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t))(*v41 + 160))(v41, v46, v38, v47);
                  }
                  v41 = (_QWORD *)v41[2];
                }
                while (v41 != v16);
              }
              if (v37)
              {
                v42 = v40;
                v40 = v48[0];
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v48[0] - v42);
              }
              (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v36 + 32))(v36, v46, v14, v47);
            }
            while (v48[0] < v45);
          }
          return 0;
        }
      }
      goto LABEL_78;
    }
    v12 = "ColorSync: DoConvert failed (cmUnsupportedDataType)\n";
LABEL_7:
    ColorSyncLog(2, (uint64_t)v12, v2, v3, v4, v5, v6, v7, v44);
    return 4294967115;
  }
  return 0;
}

CMMMemMgr *ConversionManager::AddLinearMatrixConv(CMMMemMgr **this, CMMXYZTag *(*a2)[3])
{
  CMMMemMgr *result;
  void (**v4)(CMMMatrix *__hidden);
  _OWORD v5[6];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v4 = off_1E215FED0;
  CMMMatrix::InitializeMatrix((uint64_t)&v4, (uint64_t)v5, a2, 1.0);
  result = (CMMMemMgr *)CMMMatrix::MakeMatrixConv((CMMMatrix *)&v4, this[1], this[3]);
  this[3] = result;
  return result;
}

uint64_t ConversionManager::AddMatrixConvPCSToPCS(ConversionManager *this, CMMXYZTag *(*a2)[3], CMMRGBCurves *a3, int a4, const __CFDictionary *a5)
{
  ConversionManager::AddInvMatrixConv((uint64_t)this, a2, a3, a4, 2, 0, a5);
  return ConversionManager::AddMatrixConv((uint64_t)this, (const __CFDictionary *)a2, (uint64_t)a3, a4, 1, 0, a5);
}

double ConversionManager::GetProfileSrcBlackPointLightness()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL4 v9;
  _QWORD *v10;
  int32x2_t v11;
  int32x2_t v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD v20[2];
  _OWORD v21[768];
  unint64_t v22;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v4 = v1;
  v22 = 0;
  v5 = *(_QWORD *)(v1 + 8);
  v7 = *(_DWORD *)(v5 + 44);
  v6 = *(_DWORD *)(v5 + 48);
  v9 = v7 == 1886549106 && v6 == 1129142603;
  v10 = (_QWORD *)ConversionManager::CreateBlackPointEstimationTransform(v0, v9, v1, 0, *(_DWORD *)(v1 + 20), &v22);
  bzero(v21, 0x3000uLL);
  if (v9)
  {
    v13 = 0;
    *(int32x2_t *)&v14 = vdup_n_s32(0x808080u);
    *(_QWORD *)((char *)v21 + 4) = v14;
  }
  else if (*(_DWORD *)(*(_QWORD *)(v4 + 8) + 48) == 1129142603)
  {
    *(_QWORD *)&v14 = 0x100000001000000;
    *((_QWORD *)&v14 + 1) = 0x100000001000000;
    v21[0] = v14;
    v13 = 0x1000000;
  }
  else
  {
    v13 = 0;
    *(_QWORD *)&v14 = 0;
    memset(v21, 0, 64);
  }
  v20[0] = 0;
  v20[1] = 0;
  if (v10)
  {
    v15 = v22;
    v16 = v10;
    do
    {
      (*(void (**)(_QWORD *, _OWORD *, _QWORD *, unint64_t, uint64_t))(*v16 + 104))(v16, v21, v20, v15, 1);
      v16 = (_QWORD *)v16[2];
    }
    while (v16);
    do
    {
      v17 = (_QWORD *)v10[2];
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
      v10 = v17;
    }
    while (v17);
    v13 = v21[0];
  }
  if (v13 >= 0x800000)
    v18 = 0x800000;
  else
    v18 = v13;
  if (v3)
  {
    *(_DWORD *)v3 = v18;
    v11.i32[0] = 1129142603;
    v12.i32[0] = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 48);
    *(int8x8_t *)&v14 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v12, v11), 0), (int8x8_t)0x80000000800000, *(int8x8_t *)((char *)v21 + 4));
    *(_QWORD *)(v3 + 4) = v14;
  }
  return *(double *)&v14;
}

uint64_t CMMProfile::GetWhitePoint(CMMProfile *this)
{
  double WhitePoint;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;

  WhitePoint = ColorSyncProfileGetWhitePoint(this);
  if (WhitePoint >= 0.0)
    v4 = WhitePoint * 65536.0 + 0.5;
  else
    v4 = WhitePoint * 65536.0 + -0.5;
  v5 = (int)v4;
  v6 = v2 * 65536.0 + 0.5;
  if (v2 < 0.0)
    v6 = v2 * 65536.0 + -0.5;
  v7 = (int)v6;
  v8 = v3 * 65536.0 + 0.5;
  if (v3 < 0.0)
    v8 = v3 * 65536.0 + -0.5;
  if ((int)v8)
    v9 = 0;
  else
    v9 = -170;
  if ((_DWORD)v7)
    v10 = (_DWORD)v5 == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 4294967126;
  else
    v11 = v9;
  CMMThrowExceptionOnError(v11);
  return v5 | (v7 << 32);
}

_QWORD *ConversionManager::AddXYZToXYZ(_QWORD *result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v14;
  BOOL v15;
  BOOL v16;
  double v17;
  int v18;
  double v19;
  double v20;
  BOOL v21;
  BOOL v22;
  double v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35;
  void (**v36)(CMMMatrix *__hidden);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = *a2;
  v4 = a2[1];
  v6 = *a3;
  v5 = a3[1];
  if (*a2 - *a3 >= 0)
    v7 = *a2 - *a3;
  else
    v7 = *a3 - *a2;
  if (v4 - v5 >= 0)
    v8 = v4 - v5;
  else
    v8 = v5 - v4;
  v9 = a2[2];
  v10 = a3[2];
  v11 = v9 - v10;
  if (v9 - v10 < 0)
    v11 = v10 - v9;
  if (v7 > 1 || v8 > 1 || v11 >= 2)
  {
    v14 = result;
    if (v3)
      v15 = v4 == 0;
    else
      v15 = 1;
    v16 = v15 || v9 == 0;
    v17 = (double)v3;
    v18 = v16;
    v19 = (double)v4;
    v20 = (double)v9;
    if (v6)
      v21 = v5 == 0;
    else
      v21 = 1;
    v22 = v21 || v10 == 0;
    v23 = (double)v6;
    v24 = (double)v5;
    v25 = v22;
    v26 = (double)v10;
    v36 = off_1E215FED0;
    v44 = 0;
    v42 = 0;
    v43 = 0;
    v45 = 1065353216;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    if (v18)
    {
      v17 = 63190.0;
      v19 = 65536.0;
      v20 = 54061.0;
    }
    if (v25)
      v23 = 63190.0;
    v27 = v23 / v17;
    v28 = v27 * 65536.0 + 0.5;
    if (v25)
    {
      v24 = 65536.0;
      v26 = 54061.0;
    }
    if (v27 < 0.0)
      v28 = v27 * 65536.0 + -0.5;
    v29 = v24 / v19;
    v30 = v29 * 65536.0 + 0.5;
    if (v29 < 0.0)
      v30 = v29 * 65536.0 + -0.5;
    LODWORD(v37) = (int)v28;
    LODWORD(v38) = (int)v30;
    v31 = v26 / v20;
    v32 = v31 * 65536.0 + 0.5;
    if (v31 < 0.0)
      v32 = v31 * 65536.0 + -0.5;
    LODWORD(v39) = (int)v32;
    v33 = v27;
    *((float *)&v39 + 1) = v33;
    v34 = v29;
    *((float *)&v40 + 1) = v34;
    v35 = v31;
    *((float *)&v41 + 1) = v35;
    result = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v36, (CMMMemMgr *)result[1], (CMMConvNode *)result[3]);
    v14[3] = result;
  }
  return result;
}

_QWORD *ConversionManager::AddXYZToLab(uint64_t a1)
{
  int i;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  double v11;
  unsigned int v12;
  CMMConvNode *v13;
  _QWORD *result;
  uint64_t v15;
  _BYTE v16[20];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  int v24;

  for (i = 0; i != 3; ++i)
  {
    pthread_mutex_lock(&ConversionManager::CreateXYZToLabLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (!labEncodeTableChan0)
    {
      v15 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v15);
      labEncodeDataChan0Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (_QWORD **)&v15);
      labEncodeDataChan1Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (_QWORD **)&v15);
      labEncodeDataChan2Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (_QWORD **)&v15);
      ConversionManager::InitXYZToLabLut((int *)labEncodeDataChan0Ptr, 0);
      ConversionManager::InitXYZToLabLut((int *)labEncodeDataChan1Ptr, 1);
      ConversionManager::InitXYZToLabLut((int *)labEncodeDataChan2Ptr, 2);
      v3 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v15);
      v4 = labEncodeDataChan0Ptr;
      v3[2] = 0;
      v3[3] = v4;
      *v3 = off_1E215FE00;
      v3[1] = 0;
      v3[4] = 21512;
      labEncodeTableChan0 = (uint64_t)v3;
      v5 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v15);
      v6 = labEncodeDataChan1Ptr;
      v5[2] = 0;
      v5[3] = v6;
      *v5 = off_1E215FE00;
      v5[1] = 0;
      v5[4] = 21512;
      labEncodeTableChan1 = (uint64_t)v5;
      v7 = CMMBase::NewInternal(0x28uLL, (_QWORD **)&v15);
      v8 = labEncodeDataChan2Ptr;
      v7[2] = 0;
      v7[3] = v8;
      *v7 = off_1E215FE00;
      v7[1] = 0;
      v7[4] = 21512;
      labEncodeTableChan2 = (uint64_t)v7;
      CMMMemMgr::ReleaseMemList((void **)&v15);
    }
    pthread_mutex_unlock(&ConversionManager::CreateXYZToLabLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (i == 1)
    {
      v9 = labEncodeTableChan1;
    }
    else if (i)
    {
      if (i == 2)
        v9 = labEncodeTableChan2;
      else
        v9 = 0;
    }
    else
    {
      v9 = labEncodeTableChan0;
    }
    *(_QWORD *)v16 = 0;
    *(_QWORD *)&v16[8] = 0;
    if (i == 1)
      v10 = 1.0;
    else
      v10 = 0.8249;
    if (!i)
      v10 = 0.9642;
    v15 = 1;
    *(_DWORD *)&v16[4] = 4;
    *(_DWORD *)&v16[16] = 1051372203;
    v11 = v10;
    *(float *)&v17 = 1.0 / v10;
    DWORD1(v17) = 0;
    *(float *)&v12 = 7.787 / v10;
    *(float *)&v11 = v11 * 0.008856;
    *((_QWORD *)&v17 + 1) = __PAIR64__(LODWORD(v11), v12);
    *(_QWORD *)&v18 = 0x3E0D3DCB00000000;
    DWORD2(v18) = 0;
    v13 = (CMMConvNode *)CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
    *(_QWORD *)(a1 + 24) = CMMConvTRC::CMMConvTRC((uint64_t)v13, i, v9, 21512, (__int128 *)&v15, *(_QWORD *)(a1 + 24), 3, 1, 2.0, 0, 0);
  }
  v24 = 0;
  v15 = (uint64_t)off_1E215FED0;
  *(_DWORD *)v16 = 0;
  *(_OWORD *)&v16[4] = xmmword_18B3EAA30;
  v17 = xmmword_18B3EAA40;
  v21 = 0x80808000000000;
  v22 = 8421504;
  v18 = xmmword_18B3EAA50;
  v19 = xmmword_18B3EAA60;
  v20 = -1085749047;
  v23 = xmmword_18B3EAA70;
  result = CMMMatrix::MakeMatrixConv((CMMMatrix *)&v15, *(CMMMemMgr **)(a1 + 8), v13);
  *(_QWORD *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 36) = 1347182946;
  return result;
}

void sub_18B3DF5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

int *ConversionManager::InitXYZToLabLut(int *a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  _DWORD *exception;

  v2 = 8;
  if (a2 == 1)
    v2 = 4;
  if (!a2)
    v2 = 0;
  v3 = *(_DWORD *)((char *)&qword_18B3FA238 + v2);
  if ((v3 - 1) >= 0x1FFFD)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = 0;
  v6 = 0.000244140625 / ((double)v3 * 0.0000152587891 * 0.5);
  do
  {
    v7 = v6 * (double)(int)v5;
    if (v7 <= 0.00885645168)
      v8 = v7 * 903.296296;
    else
      v8 = pow(v7, 0.333333333) * 116.0 + -16.0;
    a1[v5++] = vcvtmd_s64_f64(v8 * 16777216.0 * 0.01 + 0.5);
  }
  while (v5 != 4097);
  return MakeLookups(a1);
}

uint64_t ConversionManager::CreateBlackPointEstimationTransform(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unint64_t *a6)
{
  ColorSyncProfileRef v12;
  ColorSyncProfileRef v13;
  unsigned int v14;
  CFStringRef *v15;
  unsigned int v16;
  CFStringRef *v17;
  void *v18;
  void *v19;
  CFStringRef *v20;
  CFStringRef *v21;
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  CFDictionaryRef v24;
  CFDictionaryRef v25;
  const __CFArray *v26;
  void *v27;
  CFStringRef *v28;
  CFDictionaryRef v29;
  CFDictionaryRef v30;
  CMMProfileInfoContainer *v31;
  const __CFString *v32;
  uint64_t ConversionSequence;
  _DWORD *exception;
  CFStringRef v36;
  CFStringRef v37;
  unsigned __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43[5];
  void *v44[5];
  void *v45;
  void *v46;
  CFStringRef v47;
  void *v48;
  uint64_t v49;
  void *v50;
  CFStringRef v51;
  CFStringRef v52;
  void *v53;
  uint64_t v54;
  void *values;
  CFStringRef v56;
  CFStringRef v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v12 = ColorSyncProfileCreateWithName(kColorSyncGenericLabProfile);
  if (!v12)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v13 = v12;
  if (a2)
  {
    v36 = kColorSyncProfile;
    v37 = kColorSyncRenderingIntent;
    v38 = __PAIR128__((unint64_t)kColorSyncBlackPointCompensation, (unint64_t)kColorSyncTransformTag);
    *(_QWORD *)&v39 = 0;
    values = v12;
    v14 = a4 - 1;
    if ((a4 - 1) > 2)
      v15 = &kColorSyncRenderingIntentPerceptual;
    else
      v15 = (CFStringRef *)off_1E2161BE0[v14];
    v56 = *v15;
    v57 = kColorSyncTransformDeviceToPCS;
    v18 = (void *)*MEMORY[0x1E0C9AE40];
    v58 = *MEMORY[0x1E0C9AE40];
    v59 = 0;
    v19 = *(void **)(*(_QWORD *)(a3 + 8) + 16);
    v50 = v19;
    v20 = &kColorSyncRenderingIntentPerceptual;
    v21 = &kColorSyncRenderingIntentPerceptual;
    if (v14 <= 2)
      v21 = (CFStringRef *)off_1E2161BE0[v14];
    v51 = *v21;
    v52 = kColorSyncTransformPCSToDevice;
    v53 = v18;
    v54 = 0;
    v45 = v19;
    if ((a5 - 1) < 3)
      v20 = (CFStringRef *)off_1E2161BE0[a5 - 1];
    v46 = (void *)*v20;
    v47 = kColorSyncTransformDeviceToPCS;
    v48 = v18;
    v49 = 0;
    v44[0] = v12;
    v44[1] = (void *)*v20;
    v44[2] = (void *)kColorSyncTransformPCSToDevice;
    v44[3] = v18;
    v44[4] = 0;
    v22 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&values, 4, 0, 0);
    v23 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&v50, 4, 0, 0);
    v24 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&v45, 4, 0, 0);
    v25 = CFDictionaryCreate(0, (const void **)&v36, (const void **)v44, 4, 0, 0);
    v43[0] = v22;
    v43[1] = v23;
    v43[2] = v24;
    v43[3] = v25;
    v43[4] = 0;
    v26 = CFArrayCreate(0, (const void **)v43, 4, MEMORY[0x1E0C9B378]);
    if (v22)
      CFRelease(v22);
    if (v23)
      CFRelease(v23);
    if (v24)
      CFRelease(v24);
    if (v25)
      CFRelease(v25);
  }
  else
  {
    v36 = kColorSyncProfile;
    v37 = kColorSyncRenderingIntent;
    v38 = __PAIR128__((unint64_t)kColorSyncBlackPointCompensation, (unint64_t)kColorSyncTransformTag);
    *(_QWORD *)&v39 = 0;
    values = *(void **)(*(_QWORD *)(a3 + 8) + 16);
    v16 = a5 - 1;
    if ((a5 - 1) > 2)
      v17 = &kColorSyncRenderingIntentPerceptual;
    else
      v17 = (CFStringRef *)off_1E2161BE0[v16];
    v56 = *v17;
    v57 = kColorSyncTransformDeviceToPCS;
    v27 = (void *)*MEMORY[0x1E0C9AE40];
    v58 = *MEMORY[0x1E0C9AE40];
    v59 = 0;
    v50 = v12;
    if (v16 > 2)
      v28 = &kColorSyncRenderingIntentPerceptual;
    else
      v28 = (CFStringRef *)off_1E2161BE0[v16];
    v51 = *v28;
    v52 = kColorSyncTransformPCSToDevice;
    v53 = v27;
    v54 = 0;
    v29 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&values, 4, 0, 0);
    v30 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&v50, 4, 0, 0);
    v45 = v29;
    v46 = v30;
    v47 = 0;
    v26 = CFArrayCreate(0, (const void **)&v45, 2, MEMORY[0x1E0C9B378]);
    if (v29)
      CFRelease(v29);
    if (v30)
      CFRelease(v30);
  }
  v31 = (CMMProfileInfoContainer *)CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
  CMMProfileInfoContainer::CMMProfileInfoContainer(v31, v26, 0, *(CMMMemMgr **)(a1 + 8));
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  v32 = *(const __CFString **)(a1 + 8);
  v36 = (CFStringRef)off_1E215DDA8;
  v37 = v32;
  ConversionSequence = ConversionManager::MakeConversionSequence(&v36, v31, 0, 0);
  *a6 = CMMProfileInfoContainer::GetMaxNofChannels(v31);
  (*(void (**)(CMMProfileInfoContainer *))(*(_QWORD *)v31 + 8))(v31);
  CFRelease(v13);
  if (v26)
    CFRelease(v26);
  ConversionManager::~ConversionManager((ConversionManager *)&v36);
  return ConversionSequence;
}

void sub_18B3DFB68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  int v13;
  _DWORD *exception;

  ConversionManager::~ConversionManager((ConversionManager *)&a9);
  if (a2 == 1)
  {
    v13 = *(_DWORD *)__cxa_begin_catch(a1);
    CFRelease(v9);
    if (v10)
      CFRelease(v10);
    exception = __cxa_allocate_exception(4uLL);
    *exception = v13;
  }
  _Unwind_Resume(a1);
}

_QWORD *ConversionManager::AddEXRToneMapping(ConversionManager *this, CFDictionaryRef theDict, int a3)
{
  _QWORD *result;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  CFTypeID v10;
  float v11;
  float float_for_key;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  _QWORD **v31;
  _QWORD *v32;
  _QWORD *v33;
  int *v34;
  uint64_t v35;
  double v36;
  int *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  result = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.ApplyToneMaping"));
  if (!result)
    return result;
  v6 = (const __CFDictionary *)result;
  v7 = CFGetTypeID(result);
  result = (_QWORD *)CFDictionaryGetTypeID();
  if ((_QWORD *)v7 != result)
    return result;
  result = CFDictionaryGetValue(v6, CFSTR("com.apple.cmm.ApplyEXRToneMappingGamma"));
  if (!result)
    return result;
  v8 = result;
  v9 = CFGetTypeID(result);
  result = (_QWORD *)CFDictionaryGetTypeID();
  if ((_QWORD *)v9 != result)
    return result;
  v10 = CFGetTypeID(v8);
  if (v10 != CFDictionaryGetTypeID())
    v8 = 0;
  v11 = 0.0;
  float_for_key = get_float_for_key((const __CFDictionary *)v8, CFSTR("com.apple.cmm.ToneMappingGammaDefog"), 0.0);
  v13 = 0.01;
  if (float_for_key <= 0.01)
    v13 = float_for_key;
  if (float_for_key >= 0.0)
    v14 = v13;
  else
    v14 = 0.0;
  v52 = v14;
  v15 = get_float_for_key((const __CFDictionary *)v8, CFSTR("com.apple.cmm.ToneMappingGammaExposure"), 0.0);
  v16 = 10.0;
  if (v15 <= 10.0)
    v16 = v15;
  if (v15 >= -10.0)
    v17 = v16;
  else
    v17 = -10.0;
  v18 = get_float_for_key((const __CFDictionary *)v8, CFSTR("com.apple.cmm.ToneMappingGammaKneeLow"), 0.0);
  v19 = 3.0;
  if (v18 <= 3.0)
    v19 = v18;
  if (v18 >= -2.85)
    v20 = v19;
  else
    v20 = -2.85;
  v21 = get_float_for_key((const __CFDictionary *)v8, CFSTR("com.apple.cmm.ToneMappingGammaKneeHigh"), 5.0);
  v22 = 7.5;
  if (v21 <= 7.5)
    v22 = v21;
  if (v21 >= 3.5)
    v23 = v22;
  else
    v23 = 3.5;
  v24 = exp2f(v20);
  v25 = exp2f(v23) - v24;
  v26 = 11.314 - v24;
  v27 = 1.0;
  if (logf(v25 + 1.0) > (float)(11.314 - v24))
  {
    do
    {
      v11 = v27;
      v27 = v27 + v27;
    }
    while ((float)(logf((float)(v25 * v27) + 1.0) / v27) > v26);
  }
  v28 = 30;
  do
  {
    if ((float)(logf((float)(v25 * (float)((float)(v11 + v27) * 0.5)) + 1.0) / (float)((float)(v11 + v27) * 0.5)) >= v26)
      v11 = (float)(v11 + v27) * 0.5;
    else
      v27 = (float)(v11 + v27) * 0.5;
    --v28;
  }
  while (v28);
  v29 = v17 + 2.47393;
  v30 = exp2f(v29);
  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  LODWORD(v53) = 1;
  v31 = (_QWORD **)*((_QWORD *)this + 1);
  v32 = CMMBase::NewInternal(0x28uLL, v31);
  *v32 = off_1E215FE00;
  v32[1] = 1;
  v32[3] = 0;
  v32[4] = 21512;
  v33 = CMMBase::NewInternal(0x5408uLL, v31);
  v32[2] = v33;
  v34 = (int *)CMMTable::FloatData((uint64_t)v33, v32[3]);
  v35 = 0;
  v36 = v24;
  v37 = v34;
  do
  {
    v38 = (double)v35 * 0.0000000596046448 - v52;
    if (v38 < 0.0)
      v38 = 0.0;
    v39 = v38 * v30;
    if (v39 > v36)
      v39 = log((v39 - v36) * (float)((float)(v27 + v11) * 0.5) + 1.0) / (float)((float)(v27 + v11) * 0.5) + v36;
    v40 = v39 * 0.0883883461;
    v41 = 0.0;
    if (fabs(v40) == INFINITY || v40 >= 0.0 && (v41 = v40, v40 > 1.0))
      v41 = 1.0;
    v42 = vcvtmd_s64_f64(v41 * 16777216.0 + 0.5);
    *v37 = v42;
    v43 = 0x1000000;
    if (v42 <= 0x1000000)
    {
      if ((v42 & 0x80000000) == 0)
        goto LABEL_47;
      v43 = 0;
    }
    *v37 = v43;
LABEL_47:
    v35 += 4096;
    ++v37;
  }
  while (v35 != 16781312);
  v44 = v34[4096];
  v45 = v34[1] - *v34;
  if (v45 < 0)
    v45 = *v34 - v34[1];
  if (v45 < 0x1000)
    v34[1] = *v34;
  v46 = v44 - v34[4095];
  if (v46 < 0)
    v46 = v34[4095] - v44;
  if (v46 <= 0xFFF)
    v34[4095] = v44;
  *(_QWORD *)&v53 = 0x1000000001;
  *((_QWORD *)&v53 + 1) = 0x900000000;
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = __PAIR64__(LODWORD(v30), LODWORD(v52));
  *(float *)&v55 = v24;
  *((float *)&v55 + 1) = (float)(v27 + v11) * 0.5;
  *((_QWORD *)&v55 + 1) = 0x3DB504F33F800000;
  v56 = 0;
  v47 = (int *)CMMTable::FloatData(v32[2], v32[3]);
  MakeLookups(v47);
  v48 = 0;
  do
  {
    v49 = CMMBase::NewInternal(0xB0uLL, *((_QWORD ***)this + 1));
    result = (_QWORD *)CMMConvTRC::CMMConvTRC((uint64_t)v49, v48, (uint64_t)v32, 0, &v53, *((_QWORD *)this + 3), a3, 1, 1.0, 1, 1);
    *result = off_1E215DE48;
    result[21] = 0;
    *(_WORD *)((char *)result + 35) = 256;
    *((_QWORD *)this + 3) = result;
    if (!*((_QWORD *)this + 2))
      *((_QWORD *)this + 2) = result;
    ++v48;
  }
  while (a3 != v48);
  v50 = v32[1];
  if (v50)
  {
    v51 = v50 - 1;
    v32[1] = v51;
    if (!v51)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v32 + 8))(v32);
  }
  return result;
}

float get_float_for_key(const __CFDictionary *a1, const __CFString *a2, float a3)
{
  float v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID v6;
  _DWORD *exception;
  float valuePtr;

  v3 = a3;
  valuePtr = a3;
  if (a1)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      v5 = Value;
      v6 = CFGetTypeID(Value);
      if (v6 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr) != 1)
        {
          exception = __cxa_allocate_exception(4uLL);
          *exception = -171;
        }
        return valuePtr;
      }
    }
  }
  return v3;
}

BOOL CMMLutTag::HasCLUT(CMMLutTag *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  const void *v10;

  if (!*((_QWORD *)this + 14))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 64))(this) > 2
    || (*(uint64_t (**)(CMMLutTag *))(*(_QWORD *)this + 64))(this) != 2
    || *((_BYTE *)this + 52) != 3
    || *((_BYTE *)this + 53) != 3)
  {
    return 1;
  }
  v2 = *((_QWORD *)this + 14);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  if (*((_BYTE *)this + 96) == 1)
  {
    v5 = (unint64_t *)CMMTable::FloatData(v3, v4);
    v6 = 16711935;
    v7 = bswap64(*v5);
    if (v7 == 16711935
      && (v6 = 0xFFFFFF0000FFLL, v7 = bswap64(v5[1]), v7 == 0xFFFFFF0000FFLL)
      && (v7 = bswap64(v5[2]), v6 = 0xFFFFFF00FFFFFFLL, v7 == 0xFFFFFF00FFFFFFLL))
    {
      v8 = 0;
    }
    else if (v7 < v6)
    {
      v8 = -1;
    }
    else
    {
      v8 = 1;
    }
  }
  else
  {
    v10 = (const void *)CMMTable::FloatData(v3, v4);
    v8 = memcmp(v10, &k3x3LinearCLUT16bit, 0x30uLL);
  }
  return v8 != 0;
}

float32_t CMMConvScaleFloatXYZ::Convert(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  float32x2_t *v6;
  float v7;
  float32_t result;

  if (a5 * a4)
  {
    v5 = 0;
    v6 = a2 + 1;
    do
    {
      v7 = *(float *)(a1 + 48);
      result = v6->f32[v5] * v7;
      *a2 = vmul_n_f32(*a2, v7);
      v6->f32[v5] = result;
      v5 += a4;
      a2 = (float32x2_t *)((char *)a2 + 4 * a4);
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvScaleFloatXYZ::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvScaleFloatXYZ::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvScaleFloatXYZ::GetMaxNofChannels(CMMConvScaleFloatXYZ *this)
{
  return 3;
}

uint64_t CMMConvScaleFloatXYZ::GetTransformType(CMMConvScaleFloatXYZ *this, const __CFDictionary *a2)
{
  return 2;
}

CFMutableDictionaryRef CMMConvScaleFloatXYZ::FlattenConversion(CMMConvScaleFloatXYZ *this, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable;
  __CFArray *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  BOOL v8;
  int v10;
  const CFArrayCallBacks *v11;
  CFMutableArrayRef v12;
  __CFArray *v13;
  int i;
  CFNumberRef v15;
  __CFDictionary *v16;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v5 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 48);
  valuePtr = 0;
  v6 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  v7 = v6;
  if (v4)
    v8 = v5 == 0;
  else
    v8 = 1;
  if (!v8 && v6 != 0)
  {
    v10 = 0;
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v12 = CFArrayCreateMutable(0, 0, v11);
      if (!v12)
        break;
      v13 = v12;
      for (i = 0; i != 3; ++i)
      {
        if (v10 == i)
          v15 = v5;
        else
          v15 = v7;
        CFArrayAppendValue(v13, v15);
      }
      CFArrayAppendValue(v13, v7);
      CFArrayAppendValue(v4, v13);
      CFRelease(v13);
      if (++v10 == 3)
        goto LABEL_17;
    }
    CFRelease(v4);
LABEL_21:
    CFRelease(Mutable);
    Mutable = 0;
    if (!v5)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_17:
  if (!v4)
    goto LABEL_21;
  CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v4);
  CFRelease(v4);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v16, *((float *)this + 10), *((float *)this + 11));
  CMMConvNode::AddClampingInfo(this, Mutable);
  if (v5)
LABEL_22:
    CFRelease(v5);
LABEL_23:
  if (v7)
    CFRelease(v7);
  return Mutable;
}

CMMConvNode *ConversionManager::AddHLGPCSToDev(uint64_t a1, unsigned int a2, CMMConvHLGOOTF **a3, CMMConvNode **a4, _QWORD *a5, int a6, float32x2_t *a7, CFDictionaryRef theDict)
{
  const void **v16;
  BOOL v17;
  char v18;
  float v19;
  const __CFNumber *Value;
  int v21;
  float v22;
  BOOL v23;
  char v24;
  BOOL v25;
  float v26;
  float v27;
  const __CFNumber *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  CFTypeID v31;
  CFIndex v32;
  float32x2_t *v33;
  const __CFNumber *ValueAtIndex;
  _QWORD *v35;
  CMMConvNode *v36;
  CMMConvHLGOOTF *v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t InvertedTRC;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  CMMConvNode *result;
  _QWORD *v48;
  CMMConvNode *v49;
  uint64_t v50;
  __int128 valuePtr[3];
  uint64_t v52;

  v16 = (const void **)MEMORY[0x1E0C9AE50];
  if (theDict)
    v17 = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100")) != *v16;
  else
    v17 = 1;
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 61))
      v18 = v17;
    else
      v18 = 0;
    if (*(_BYTE *)(a1 + 52))
      v19 = 0.083333;
    else
      v19 = 1.0;
    if (theDict)
    {
      if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.HLGOETFOpticalScale")) == 1)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGOETFOpticalScale"));
        if (Value)
        {
          LODWORD(valuePtr[0]) = 0;
          v21 = CFNumberGetValue(Value, kCFNumberFloatType, valuePtr);
          v22 = *(float *)valuePtr;
          if (!v21)
            v22 = 0.0;
          if (v22 != 0.0)
            v19 = v22;
        }
      }
    }
  }
  else
  {
    v18 = 0;
    if (*(_BYTE *)(a1 + 52))
      v19 = 0.083333;
    else
      v19 = 1.0;
  }
  if ((ColorSyncOptionsSceneReferredToneMappingRequested(theDict) & 1) == 0)
  {
    v23 = !a2 && a6 == 2;
    v24 = v23 ? v18 : 1;
    if ((v24 & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 59))
      {
        if (theDict)
          v25 = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGSceneMapping3DLut")) == *v16;
        else
          v25 = 0;
        v35 = CMMBase::NewInternal(0x50uLL, *(_QWORD ***)(a1 + 8));
        v36 = *a4;
        *((_DWORD *)v35 + 2) = 1;
        v35[2] = 0;
        v35[3] = v36;
        if (v36)
          *((_QWORD *)v36 + 2) = v35;
        v35[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v35 + 33) = 65537;
        *v35 = off_1E215FC18;
        *((_BYTE *)v35 + 48) = v25;
        *(_QWORD *)((char *)v35 + 52) = 0x3E87AE143F8CCCCDLL;
        *(_OWORD *)((char *)v35 + 60) = xmmword_18B3EAA80;
        *a4 = (CMMConvNode *)v35;
        if (!*a3)
          *a3 = (CMMConvHLGOOTF *)v35;
        goto LABEL_67;
      }
      if (!*(_QWORD *)(a1 + 16))
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(a1 + 60))
        v26 = 100.0;
      else
        v26 = 1000.0;
      v27 = 5.0;
      if (!*(_BYTE *)(a1 + 56))
      {
        v27 = 0.0;
        if (*(float *)(a1 + 64) == 203.0)
          v27 = 5.0;
      }
      *(float *)valuePtr = v27;
      if (theDict)
      {
        if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.HLGSurroundLuminance")) == 1)
        {
          v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGSurroundLuminance"));
          CFNumberGetValue(v28, kCFNumberFloatType, valuePtr);
        }
        if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.HLGLuminanceCoefficients")) == 1)
        {
          v29 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGLuminanceCoefficients"));
          if (v29)
          {
            v30 = v29;
            v31 = CFGetTypeID(v29);
            if (v31 == CFArrayGetTypeID() && CFArrayGetCount(v30) >= 4)
            {
              v32 = 0;
              v33 = a7 + 3;
              do
              {
                ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v30, v32);
                CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, v33);
                ++v32;
                v33 = (float32x2_t *)((char *)v33 + 4);
              }
              while (v32 != 4);
            }
          }
          goto LABEL_61;
        }
        if (*(float *)(a1 + 64) == 100.0
          || CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.kColorSyncUseHLGReferenceLuminance")) == (const void *)*MEMORY[0x1E0C9AE50])
        {
LABEL_61:
          v37 = (CMMConvHLGOOTF *)CMMBase::NewInternal(0x58uLL, *(_QWORD ***)(a1 + 8));
          v38 = *(float *)valuePtr;
          CMMConvHLGOOTF::CMMConvHLGOOTF(v37, 1000.0, v26, 1.0 / v19, *(float *)valuePtr, v39, (float *)&a7[3], *a4);
          *(_QWORD *)v40 = off_1E215DBA0;
          *(float *)(v40 + 84) = v19;
          *(_DWORD *)(v40 + 60) = a7[3].i32[0];
          *(_DWORD *)(v40 + 64) = a7[3].i32[1];
          *(_DWORD *)(v40 + 68) = a7[4].i32[0];
          *(_DWORD *)(v40 + 72) = a7[4].i32[1];
          v41 = (1.0 - (float)(*(float *)(v40 + 48) + 1.0)) / (float)(*(float *)(v40 + 48) + 1.0);
          if (v38 == 0.0)
          {
            v42 = (float)(1.0 / v26) * powf(1.0 / v26, v41);
            *((_DWORD *)v37 + 18) = 0;
          }
          else
          {
            v42 = (float)(203.0 / v26) * powf(203.0 / v26, v41);
          }
          *((float *)v37 + 19) = v41;
          *((float *)v37 + 20) = v42 * v19;
          *a4 = v37;
          if (!*a3)
            *a3 = v37;
          v16 = (const void **)MEMORY[0x1E0C9AE50];
          goto LABEL_67;
        }
      }
      else if (*(float *)(a1 + 64) == 100.0)
      {
        goto LABEL_61;
      }
      a7[3] = vmul_f32(a7[3], (float32x2_t)0x3F0000003F000000);
      a7[4].f32[0] = a7[4].f32[0] * 0.5;
      a7[4].i32[1] = 1056964608;
      goto LABEL_61;
    }
  }
LABEL_67:
  v52 = 0;
  memset(valuePtr, 0, sizeof(valuePtr));
  LODWORD(valuePtr[0]) = 1;
  v50 = 0;
  InvertedTRC = CMMRGBCurves::MakeInvertedTRC(a5, (uint64_t)valuePtr, *(_QWORD *)(a1 + 8), a2, &v50, v19);
  v44 = a5[a2 + 1];
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGOETFTable")) == *v16)
    {
      v45 = 65552;
      LODWORD(valuePtr[0]) = 0;
      if (!a2 && v19 != 1.0)
      {
        v48 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
        v49 = *a4;
        *((_DWORD *)v48 + 2) = 1;
        v48[2] = 0;
        v48[3] = v49;
        if (v49)
          *((_QWORD *)v49 + 2) = v48;
        v48[5] = 0x3FFFFF0000000000;
        *v48 = off_1E215E3A8;
        *((float *)v48 + 12) = 1.0 / v19;
        *((_BYTE *)v48 + 36) = 0;
        *((_DWORD *)v48 + 8) = 256;
        *a4 = (CMMConvNode *)v48;
        if (!*a3)
          *a3 = (CMMConvHLGOOTF *)v48;
      }
    }
  }
  v46 = CMMBase::NewInternal(0xB0uLL, *(_QWORD ***)(a1 + 8));
  result = (CMMConvNode *)CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v46, a2, InvertedTRC, v45, v50, valuePtr, (uint64_t)*a4, 3, 1);
  *(_QWORD *)result = off_1E215CE88;
  *a4 = result;
  return result;
}

_QWORD *CMMITUBT1886InvEOTF::MakeTRC(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  _QWORD *v6;
  _QWORD *v7;
  float v8;
  float v9;
  int *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;

  v6 = CMMBase::NewInternal(0x28uLL, a3);
  *v6 = off_1E215FE00;
  v6[1] = 1;
  v6[3] = 0;
  v6[4] = 21512;
  v7 = CMMBase::NewInternal(0x5408uLL, a3);
  v6[2] = v7;
  v8 = *(float *)(a1 + 40);
  v9 = *(float *)(a1 + 44);
  v10 = (int *)CMMTable::FloatData((uint64_t)v7, v6[3]);
  CMMITUBT1886Base::MakeLut(v10, v8, v9);
  v11 = *(_OWORD *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)a2 = v11;
  v14 = (int *)CMMTable::FloatData(v6[2], v6[3]);
  MakeLookups(v14);
  return v6;
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  _DWORD *exception;
  _OWORD v9[4];
  uint64_t v10;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  v10 = *(_QWORD *)(a1 + 128);
  v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  float v11;
  float v12;
  float v13;

  if (a4 * a3)
  {
    v4 = 0;
    v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      v11 = v5->f32[v4];
      if (v11 <= 1.0)
        v12 = v5->f32[v4];
      else
        v12 = 1.0;
      if (v11 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::GetTransformType()
{
  return 2;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::FlattenConversion(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFMutableArrayRef v3;
  const void **v4;
  __CFArray *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  float v22;
  float valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if (v3)
    {
      v5 = v3;
      v6 = (const void *)*MEMORY[0x1E0C9AE50];
      v7 = (const void *)*MEMORY[0x1E0C9AE40];
      if (*(_BYTE *)(a1 + 49))
        v8 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v8 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelActiveMatrix"), v8);
      if (*(_BYTE *)(a1 + 48))
        v9 = v6;
      else
        v9 = v7;
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.OneChannelInputMatrix"), v9);
      v10 = 0;
      v11 = a1 + 100;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = 0;
        while (1)
        {
          valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16)
            break;
          v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12)
            goto LABEL_16;
        }
        CFRelease(v14);
        v14 = 0;
LABEL_16:
        v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14)
          break;
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    v5 = Mutable;
    Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(_BYTE *)(a1 + 34))
      CFDictionaryAddValue(Mutable, CFSTR("com.apple.cmm.FunctionDoesSignedReflection"), *v4);
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

void CMMITUBT1886Base::MakeLut(int *a1, float a2, float a3)
{
  uint64_t v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  int *v9;
  double v10;
  double v11;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v4 = 0;
  v5 = a2;
  v6 = a3;
  v7 = ceil(a2);
  v8 = floor(a2);
  v9 = a1;
  do
  {
    v10 = (double)v4 * 0.0000000596046448 * v6;
    v11 = 0.0;
    if (v10 > 0.0 || v7 == v8)
    {
      v13 = pow(v10, v5);
      if (fabs(v13) == INFINITY || v13 >= 0.0 && (v11 = v13, v13 > 1.0))
        v11 = 1.0;
    }
    v14 = vcvtmd_s64_f64(v11 * 16777216.0 + 0.5);
    *v9 = v14;
    v15 = 0x1000000;
    if (v14 <= 0x1000000)
    {
      if ((v14 & 0x80000000) == 0)
        goto LABEL_15;
      v15 = 0;
    }
    *v9 = v15;
LABEL_15:
    v4 += 4096;
    ++v9;
  }
  while (v4 != 16781312);
  v16 = a1[4096];
  v17 = a1[1] - *a1;
  if (v17 < 0)
    v17 = *a1 - a1[1];
  if (v17 < 0x1000)
    a1[1] = *a1;
  v18 = v16 - a1[4095];
  if (v18 < 0)
    v18 = a1[4095] - v16;
  if (v18 <= 0xFFF)
    a1[4095] = v16;
}

uint64_t ___ZL42CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLGPK14__CFDictionary_block_invoke()
{
  uint64_t result;
  char v1;

  v1 = 1;
  result = ColorSyncDefaultsGetBoolean("CMMITUBT1886INVEOTF_USE_SPEC_GAMMA_FOR_HLG", &v1);
  if ((_DWORD)result)
    CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::enabled = v1;
  return result;
}

uint64_t ConversionManager::AddTRCSequence(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, __int128 *a5, uint64_t *a6, __int128 *a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;

  v16 = *a4;
  v17 = 0;
  if (a2)
  {
    v18 = a2 - 1;
    do
    {
      v19 = v18;
      if (v16)
      {
        v16 = *(_QWORD *)(v16 + 24);
        if (v16)
          v17 = *(_QWORD *)(v16 + 16);
      }
      v18 = 0;
    }
    while (v19);
  }
  v20 = CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
  v21 = CMMConvTRC::CMMConvTRC((uint64_t)v20, a2, *a6, 0, a5, v16, 3, 1, 1.0, 1, 0);
  *(_QWORD *)(v21 + 16) = v17;
  if (v17)
    *(_QWORD *)(v17 + 24) = v21;
  v22 = *a3;
  if (!*a3)
  {
    *a3 = v21;
    v22 = v21;
  }
  do
  {
    *a4 = v22;
    v22 = *(_QWORD *)(v22 + 16);
  }
  while (v22);
  v23 = CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
  result = CMMConvTRC::CMMConvTRC((uint64_t)v23, a2, *a8, 0, a7, *a4, 3, 1, 1.0, 1, 0);
  *a4 = result;
  return result;
}

float default_PQInvEOTFOpticalScale(const __CFDictionary *a1, int a2)
{
  const void *Value;
  const void *v5;
  _BOOL4 v6;
  float result;

  v6 = !a1
    || (Value = CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.SkipPQEETF")),
        v5 = (const void *)*MEMORY[0x1E0C9AE50],
        Value == (const void *)*MEMORY[0x1E0C9AE50])
    || CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.SkipToneMappingForBT2100")) == v5
    || CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100")) != v5;
  result = 0.0001;
  if ((a2 & v6) != 0)
    return 0.01;
  return result;
}

float custom_PQInvEOTFOpticalScale(const __CFDictionary *a1, float a2)
{
  float v2;
  const __CFNumber *Value;
  float valuePtr;

  v2 = 0.0;
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, CFSTR("com.apple.cmm.PQInvEOTFOpticalScale")) == 1)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.PQInvEOTFOpticalScale"));
      if (Value)
      {
        valuePtr = 0.0;
        if (CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr))
        {
          if (valuePtr != 0.0 && valuePtr != a2)
            return valuePtr;
        }
      }
    }
  }
  return v2;
}

void ConversionManager::AddHLGDevToPCS(uint64_t a1, unsigned int a2, uint64_t a3, float32x2_t *a4, const __CFDictionary *a5)
{
  unsigned __int8 v10;
  const void *Value;
  const void *v12;
  BOOL v13;
  char v14;
  float HLGInvOETFOpticalScale;
  uint64_t TRC;
  _QWORD *v17;
  float *v18;
  BOOL v19;
  __int128 v20[3];
  uint64_t v21;

  v10 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(a5);
  if (a5)
  {
    Value = CFDictionaryGetValue(a5, CFSTR("com.apple.cmm.UseHLGOOTFForCoreVideo"));
    v12 = (const void *)*MEMORY[0x1E0C9AE50];
    v13 = Value == (const void *)*MEMORY[0x1E0C9AE50];
    if (CFDictionaryGetValue(a5, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100")) == v12)
    {
      v14 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = v10 | v13;
LABEL_6:
  HLGInvOETFOpticalScale = 1.0;
  if ((v10 & 1) == 0)
    HLGInvOETFOpticalScale = ConversionManager::GetHLGInvOETFOpticalScale((ConversionManager *)a1, a5);
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  LODWORD(v20[0]) = 1;
  TRC = CMMRGBCurves::MakeTRC(a3, HLGInvOETFOpticalScale, (uint64_t)v20, *(_QWORD *)(a1 + 8), a2);
  v17 = CMMBase::NewInternal(0xA8uLL, *(_QWORD ***)(a1 + 8));
  v18 = (float *)CMMConvTRC::CMMConvTRC((uint64_t)v17, a2, TRC, 0, v20, *(_QWORD *)(a1 + 24), 3, 1, 1.0, 1, 1);
  *(_QWORD *)v18 = off_1E215DA88;
  v18[41] = HLGInvOETFOpticalScale;
  CMMConvTRC::SetInputClamp((CMMConvTRC *)v18);
  (*(void (**)(_QWORD *))(*v17 + 48))(v17);
  *(_QWORD *)(a1 + 24) = v17;
  v19 = (v14 & 1) == 0 && *(_BYTE *)(a1 + 61) != 0;
  if (a2 == 2 && !v19)
    ConversionManager::AddHLGOOTF(a1, a4, a5);
}

void sub_18B3E1520(_Unwind_Exception *a1)
{
  CMMConvTRC *v1;

  CMMConvTRC::~CMMConvTRC(v1);
  _Unwind_Resume(a1);
}

void ConversionManager::AddHLGOOTF(uint64_t a1, float32x2_t *a2, const __CFDictionary *a3)
{
  float v6;
  float v7;
  float HLGInvOETFOpticalScale;
  CMMConvHLGOOTF *v9;
  float v10;
  uint64_t v11;
  const void **v12;
  _BOOL4 v13;
  int v14;
  const void *Value;
  const void *v16;
  _BOOL4 v17;
  int v18;
  float v19;
  const __CFNumber *v20;
  int v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float v26;
  const __CFNumber *v27;
  float v28;
  const __CFNumber *v29;
  float v30;
  const __CFArray *v31;
  const __CFArray *v32;
  CFTypeID v33;
  CFIndex v34;
  float32x2_t *v35;
  const __CFNumber *ValueAtIndex;
  float v37;
  float valuePtr;
  float v39;

  if (!*(_QWORD *)(a1 + 16))
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 24);
  v39 = 0.0;
  if ((ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(a3) & 1) != 0)
  {
    v6 = 1.0;
    v7 = 1000.0;
    HLGInvOETFOpticalScale = 1.0;
    goto LABEL_5;
  }
  v12 = (const void **)MEMORY[0x1E0C9AE50];
  if (a3)
  {
    v13 = CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.UseHLGOOTFForCoreVideo")) == *v12;
    if (CFDictionaryContainsKey(a3, CFSTR("com.apple.cmm.HLGSurroundLuminance")) == 1)
      goto LABEL_11;
  }
  else
  {
    v13 = 0;
  }
  if (*(float *)(a1 + 64) != 203.0)
  {
    v14 = 0;
    if (a3)
      goto LABEL_12;
LABEL_17:
    v17 = 0;
    goto LABEL_19;
  }
LABEL_11:
  v14 = !v13;
  if (!a3)
    goto LABEL_17;
LABEL_12:
  Value = CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100"));
  v16 = *v12;
  if (Value == *v12)
    v13 = 1;
  v17 = CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.SkipHLGOOTF")) == v16
     || CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.SkipToneMappingForBT2100")) == v16;
LABEL_19:
  v18 = *(unsigned __int8 *)(a1 + 47);
  if (*(_BYTE *)(a1 + 47))
  {
    v19 = 1000.0;
    v7 = 1000.0;
    if (a3)
    {
LABEL_21:
      if (CFDictionaryContainsKey(a3, CFSTR("com.apple.cmm.TargetDisplayWhite")) == 1)
      {
        valuePtr = 0.0;
        v20 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.TargetDisplayWhite"));
        if (v20)
        {
          v21 = CFNumberGetValue(v20, kCFNumberFloatType, &valuePtr);
          v22 = valuePtr;
          if (!v21)
            v22 = 0.0;
        }
        else
        {
          v22 = 0.0;
        }
        if (v22 != 0.0)
          v7 = v22;
      }
      HLGInvOETFOpticalScale = ConversionManager::GetHLGInvOETFOpticalScale((ConversionManager *)a1, a3);
      v26 = 1.0;
      if (CFDictionaryContainsKey(a3, CFSTR("com.apple.cmm.HLGOOTFGainScale")) == 1)
      {
        v37 = 0.0;
        v27 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.HLGOOTFGainScale"));
        if (v27)
        {
          if (CFNumberGetValue(v27, kCFNumberFloatType, &v37) == 1)
            v26 = v37;
          else
            v26 = 1.0;
        }
      }
      v28 = 0.0;
      if (v14)
        v28 = 5.0;
      v39 = v28;
      if (CFDictionaryContainsKey(a3, CFSTR("com.apple.cmm.HLGSurroundLuminance")) == 1)
      {
        v29 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.HLGSurroundLuminance"));
        CFNumberGetValue(v29, kCFNumberFloatType, &v39);
      }
      if (*(_BYTE *)(a1 + 47))
        v30 = v7;
      else
        v30 = v26;
      v6 = v30 / HLGInvOETFOpticalScale;
      if (CFDictionaryContainsKey(a3, CFSTR("com.apple.cmm.HLGLuminanceCoefficients")) == 1)
      {
        v31 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.HLGLuminanceCoefficients"));
        if (v31)
        {
          v32 = v31;
          v33 = CFGetTypeID(v31);
          if (v33 == CFArrayGetTypeID() && CFArrayGetCount(v32) >= 4)
          {
            v34 = 0;
            v35 = a2 + 3;
            do
            {
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v32, v34);
              CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, v35);
              ++v34;
              v35 = (float32x2_t *)((char *)v35 + 4);
            }
            while (v34 != 4);
          }
        }
        goto LABEL_5;
      }
      if (*(_BYTE *)(a1 + 47)
        || CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.kColorSyncUseHLGReferenceLuminance")) == *v12)
      {
        goto LABEL_5;
      }
LABEL_68:
      a2[3] = vmul_f32(a2[3], (float32x2_t)0x3F0000003F000000);
      a2[4].f32[0] = a2[4].f32[0] * 0.5;
      a2[4].i32[1] = 1056964608;
      goto LABEL_5;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 51))
      v23 = v13;
    else
      v23 = 1;
    v19 = 1.0;
    v24 = 100.0;
    if (v14)
      v24 = 203.0;
    if (v17)
      v24 = 1000.0;
    if (v23 == 1)
      v7 = v24;
    else
      v7 = 1000.0;
    if (a3)
      goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a1 + 51) | v18)
    HLGInvOETFOpticalScale = 12.0;
  else
    HLGInvOETFOpticalScale = 1.0;
  v25 = 0.0;
  if (v14)
    v25 = 5.0;
  v39 = v25;
  v6 = v19 / HLGInvOETFOpticalScale;
  if (!v18)
    goto LABEL_68;
LABEL_5:
  v9 = (CMMConvHLGOOTF *)CMMBase::NewInternal(0x50uLL, *(_QWORD ***)(a1 + 8));
  CMMConvHLGOOTF::CMMConvHLGOOTF(v9, v7, v6, HLGInvOETFOpticalScale, v39, v10, (float *)&a2[3], *(CMMConvNode **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = v11;
}

void ConversionManager::AddPQEETFToneMapping(_QWORD *a1, float *a2, CFDictionaryRef theDict, float a4)
{
  const void *Value;
  _BOOL4 v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  _QWORD **v14;
  float *v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _QWORD **v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFData *_3DLUT;
  _QWORD *v36;
  const UInt8 *BytePtr;
  CFIndex Length;
  CMMConvPQEETFBase *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float valuePtr;

  if (a2)
  {
    if (theDict)
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.PQEETF3DLut"));
      v9 = Value == (const void *)*MEMORY[0x1E0C9AE50];
      if (Value == (const void *)*MEMORY[0x1E0C9AE50])
        a4 = 1.0;
      if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.PQMasteringDisplayWhite")) == 1)
      {
        valuePtr = 0.0;
        v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.PQMasteringDisplayWhite"));
        if (v10)
        {
          if (CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0)
            *a2 = valuePtr;
        }
      }
      if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.PQMasteringDisplayBlack")) == 1)
      {
        valuePtr = 0.0;
        v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.PQMasteringDisplayBlack"));
        if (v11)
        {
          if (CFNumberGetValue(v11, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0)
            a2[1] = valuePtr;
        }
      }
      if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.TargetDisplayWhite")) == 1)
      {
        valuePtr = 0.0;
        v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.TargetDisplayWhite"));
        if (v12)
        {
          if (CFNumberGetValue(v12, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0)
            a2[2] = valuePtr;
        }
      }
      if (CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.TargetDisplayBlack")) == 1)
      {
        valuePtr = 0.0;
        v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.TargetDisplayBlack"));
        if (v13)
        {
          if (CFNumberGetValue(v13, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0)
            a2[1] = valuePtr;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    if (*a2 > a2[2] || a2[1] < a2[3])
    {
      v14 = (_QWORD **)a1[1];
      v15 = a2 + 6;
      if (v9)
      {
        v16 = CMMBase::NewInternal(0xC0uLL, v14);
        v17 = v16;
        v18 = *a2;
        v19 = a2[1];
        v20 = a2[2];
        v21 = a2[3];
        v22 = (_QWORD **)a1[1];
        v23 = a1[3];
        *((_DWORD *)v16 + 2) = 1;
        v16[2] = 0;
        v16[3] = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v16;
        v16[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v16 + 33) = 0x10000;
        *(_OWORD *)(v16 + 7) = xmmword_18B3EAA90;
        v16[9] = 3;
        *v16 = off_1E215C478;
        CMMThrowExceptionOnError(0);
        v24 = *((_DWORD *)v17 + 18);
        v25 = *((_DWORD *)v17 + 14);
        v26 = v25 * v24;
        *((_DWORD *)v17 + 24) = v24;
        *((_DWORD *)v17 + 25) = v25 * v24;
        v27 = v25 * v24 * v25;
        *((_DWORD *)v17 + 26) = v27;
        *((_DWORD *)v17 + 27) = v26 + v24;
        v28 = v27 + v24;
        v29 = v27 + v26;
        *((_DWORD *)v17 + 28) = v28;
        *((_DWORD *)v17 + 29) = v29;
        *((_DWORD *)v17 + 30) = v29 + v24;
        *v17 = off_1E215BE70;
        CMMConvPQEETFBase::CMMConvPQEETFBase((CMMConvPQEETFBase *)(v17 + 16), v18, v19, v20, v21, a4, v15, 1);
        *v17 = off_1E215D248;
        v17[16] = &unk_1E215D350;
        LODWORD(valuePtr) = 32;
        _3DLUT = CMMConvPQEETFBase::create_3DLUT(v30, 0, 0, (unsigned int *)&valuePtr, v31, v32, v33, v34);
        if (_3DLUT)
        {
          v36 = CMMBase::NewInternal(0x28uLL, v22);
          BytePtr = CFDataGetBytePtr(_3DLUT);
          Length = CFDataGetLength(_3DLUT);
          v36[2] = 0;
          v36[3] = BytePtr;
          *v36 = off_1E215FE00;
          v36[1] = 0;
          v36[4] = Length;
          v17[6] = CFRetain(_3DLUT);
          v17[10] = v36;
          v17[11] = CMMTable::FloatData(v36[2], v36[3]);
          CFRelease(_3DLUT);
        }
      }
      else
      {
        v39 = (CMMConvPQEETFBase *)CMMBase::NewInternal(0x70uLL, v14);
        v40 = *a2;
        v41 = a2[1];
        v42 = a2[2];
        v43 = a2[3];
        v44 = a1[3];
        CMMConvPQEETFBase::CMMConvPQEETFBase(v39, v40, v41, v42, v43, a4, v15, 0);
        *(_DWORD *)(v45 + 72) = 1;
        v17 = (_QWORD *)(v45 + 64);
        *(_QWORD *)(v45 + 80) = 0;
        *(_QWORD *)(v45 + 88) = v44;
        if (v44)
          *(_QWORD *)(v44 + 16) = v17;
        *(_QWORD *)(v45 + 104) = 0x3F80000000000000;
        *(_DWORD *)(v45 + 97) = 0;
        *(_QWORD *)v45 = off_1E215C790;
        *(_QWORD *)(v45 + 64) = &unk_1E215C830;
      }
      a1[3] = v17;
      if (!a1[2])
        a1[2] = v17;
    }
  }
}

void sub_18B3E1D04(_Unwind_Exception *a1)
{
  CMMConvCLUTBase *v1;

  CMMConvCLUTBase::~CMMConvCLUTBase(v1);
  _Unwind_Resume(a1);
}

void ConversionManager::ColorantsForPrimaries(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *exception;

  switch(a3)
  {
    case 12:
      v9 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetDisplayP3RedPrimary_predicate != -1)
        dispatch_once(&ColorSyncProfileGetDisplayP3RedPrimary_predicate, &__block_literal_global_193);
      *((_DWORD *)v9 + 2) = 1918392666;
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = 20;
      v9[5] = &ColorSyncProfileGetDisplayP3RedPrimary_rXYZ;
      *((_WORD *)v9 + 24) = 0;
      *v9 = off_1E215FEF0;
      *a2 = v9;
      v10 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetDisplayP3GreenPrimary_predicate[0] != -1)
        dispatch_once(ColorSyncProfileGetDisplayP3GreenPrimary_predicate, &__block_literal_global_195);
      *((_DWORD *)v10 + 2) = 1733843290;
      v10[2] = 0;
      v10[3] = 0;
      v10[4] = 20;
      v10[5] = &ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ;
      *((_WORD *)v10 + 24) = 0;
      *v10 = off_1E215FEF0;
      a2[1] = v10;
      v7 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetDisplayP3BluePrimary_predicate != -1)
        dispatch_once(&ColorSyncProfileGetDisplayP3BluePrimary_predicate, &__block_literal_global_197);
      v8 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
      break;
    case 9:
      v11 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetBT2020RedPrimary_predicate != -1)
        dispatch_once(&ColorSyncProfileGetBT2020RedPrimary_predicate, &__block_literal_global_187);
      *((_DWORD *)v11 + 2) = 1918392666;
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = 20;
      v11[5] = &ColorSyncProfileGetBT2020RedPrimary_rXYZ;
      *((_WORD *)v11 + 24) = 0;
      *v11 = off_1E215FEF0;
      *a2 = v11;
      v12 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetBT2020GreenPrimary_predicate[0] != -1)
        dispatch_once(ColorSyncProfileGetBT2020GreenPrimary_predicate, &__block_literal_global_189);
      *((_DWORD *)v12 + 2) = 1733843290;
      v12[2] = 0;
      v12[3] = 0;
      v12[4] = 20;
      v12[5] = &ColorSyncProfileGetBT2020GreenPrimary_gXYZ;
      *((_WORD *)v12 + 24) = 0;
      *v12 = off_1E215FEF0;
      a2[1] = v12;
      v7 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetBT2020BluePrimary_predicate != -1)
        dispatch_once(&ColorSyncProfileGetBT2020BluePrimary_predicate, &__block_literal_global_191);
      v8 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
      break;
    case 1:
      v5 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetBT709RedPrimary_predicate != -1)
        dispatch_once(&ColorSyncProfileGetBT709RedPrimary_predicate, &__block_literal_global_181);
      *((_DWORD *)v5 + 2) = 1918392666;
      v5[2] = 0;
      v5[3] = 0;
      v5[4] = 20;
      v5[5] = &ColorSyncProfileGetBT709RedPrimary_rXYZ;
      *((_WORD *)v5 + 24) = 0;
      *v5 = off_1E215FEF0;
      *a2 = v5;
      v6 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetBT709GreenPrimary_predicate[0] != -1)
        dispatch_once(ColorSyncProfileGetBT709GreenPrimary_predicate, &__block_literal_global_183);
      *((_DWORD *)v6 + 2) = 1733843290;
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = 20;
      v6[5] = &ColorSyncProfileGetBT709GreenPrimary_gXYZ;
      *((_WORD *)v6 + 24) = 0;
      *v6 = off_1E215FEF0;
      a2[1] = v6;
      v7 = CMMBase::NewInternal(0x38uLL, *(_QWORD ***)(a1 + 8));
      if (ColorSyncProfileGetBT709BluePrimary_predicate != -1)
        dispatch_once(&ColorSyncProfileGetBT709BluePrimary_predicate, &__block_literal_global_185);
      v8 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      exception = __cxa_allocate_exception(4uLL);
      *exception = -170;
  }
  *((_DWORD *)v7 + 2) = 1649957210;
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = 20;
  v7[5] = v8;
  *((_WORD *)v7 + 24) = 0;
  *v7 = off_1E215FEF0;
  a2[2] = v7;
}

void ConversionManager::AddExtendedRangeReferenceWhiteToneMapping(ConversionManager *this, const __CFDictionary *a2)
{
  const __CFDictionary *ReferenceWhiteToneMappingOptions;
  float v4;
  float v5;
  const __CFDictionary *v6;
  CFTypeID v7;
  float v8;
  float v9;
  float v10;
  CMMConvRWToneMapping *v11;
  uint64_t v12;

  ReferenceWhiteToneMappingOptions = (const __CFDictionary *)ColorSyncOptionsGetReferenceWhiteToneMappingOptions(a2);
  v4 = 0.5;
  v5 = 2.6667;
  if (ReferenceWhiteToneMappingOptions
    && (v6 = ReferenceWhiteToneMappingOptions,
        v7 = CFGetTypeID(ReferenceWhiteToneMappingOptions),
        v7 == CFDictionaryGetTypeID()))
  {
    v8 = float_from_dictionary_with_default(v6, CFSTR("com.apple.cmm.RWTMSourcePeak"), 1000.0);
    v9 = float_from_dictionary_with_default(v6, CFSTR("com.apple.cmm.RWTMSourceReferenceWhite"), 203.0);
    v10 = float_from_dictionary_with_default(v6, CFSTR("com.apple.cmm.RWTMEDRHeadroom"), 1.0);
    v4 = float_from_dictionary_with_default(v6, CFSTR("com.apple.cmm.RWTMTargetReferenceWhiteBase"), 0.5);
    v5 = float_from_dictionary_with_default(v6, CFSTR("com.apple.cmm.RWTMReferenceWhiteThreshold"), 2.6667);
  }
  else
  {
    v9 = 203.0;
    v8 = 1000.0;
    v10 = 1.0;
  }
  if (!*((_BYTE *)this + 51))
    v10 = 1.0;
  v11 = (CMMConvRWToneMapping *)CMMBase::NewInternal(0x60uLL, *((_QWORD ***)this + 1));
  CMMConvRWToneMapping::CMMConvRWToneMapping(v11, 1000.0, v8, v9, v10, v4, v5, *((CMMConvNode **)this + 3));
  *((_QWORD *)this + 3) = v12;
  if (!*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = v12;
}

float float_from_dictionary_with_default(const __CFDictionary *a1, const __CFString *a2, float a3)
{
  CFTypeID v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  float valuePtr;

  v6 = CFGetTypeID(a1);
  if (v6 == CFDictionaryGetTypeID())
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      v8 = Value;
      v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        if (CFNumberGetValue(v8, kCFNumberFloatType, &valuePtr) == 1)
          return valuePtr;
      }
    }
  }
  return a3;
}

_QWORD *CMMTable::CreateFlexTRCLookup(CMMTable *this, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4, CMMTable *a5, unint64_t a6, CMMMemMgr *a7)
{
  _QWORD *v12;
  float *v13;
  float *v14;
  const __CFNumber *Value;
  const __CFNumber *v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v32;
  float valuePtr;

  if ((unint64_t)CFArrayGetCount(this) < 2)
    return 0;
  v12 = CMMBase::NewInternal(0x28uLL, (_QWORD **)a5);
  *v12 = off_1E215FE00;
  v12[1] = 1;
  v12[3] = 0;
  v12[4] = 4096;
  v13 = (float *)CMMBase::NewInternal(0x1000uLL, (_QWORD **)a5);
  v12[2] = v13;
  CMMTable::MutableFloatData((uint64_t)v13);
  if (a4)
    a4 = (const __CFDictionary *)CMMTable::FloatData(*((_QWORD *)a4 + 2), *((_QWORD *)a4 + 3));
  v14 = (float *)malloc_type_calloc(1uLL, 0x1000uLL, 0x100004052888210uLL);
  Compute_FlexGTC(v14, this, a2, a3);
  v32 = 1065353216;
  valuePtr = 1.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("com.apple.cmm.FlexGTCTargetHeadroom"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
  v16 = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)kColorSyncGainMapBaselineHeadroom);
  v17 = 1.0;
  if (v16)
  {
    CFNumberGetValue(v16, kCFNumberFloatType, &v32);
    v17 = *(float *)&v32;
  }
  v18 = 0;
  if (valuePtr <= v17)
    v19 = valuePtr;
  else
    v19 = v17;
  if (valuePtr >= 1.0)
    v20 = v19;
  else
    v20 = 1.0;
  do
  {
    if (a4)
      v21 = *((float *)a4 + v18);
    else
      v21 = (float)v18 / 1023.0;
    v22 = (float)((float)(v21 * 49.261) * 1023.0) / v17;
    if (v22 <= 1023.0)
      v23 = v22;
    else
      v23 = 1023.0;
    if (v22 >= 0.0)
      v24 = v23;
    else
      v24 = 0.0;
    v25 = v24;
    if (v24 + 1 < 0x3FF)
      v26 = v25 + 1;
    else
      v26 = 1023;
    if (a4)
      v27 = *((float *)a4 + v18);
    else
      v27 = (float)v18 / 1023.0;
    v28 = (float)(v14[v25] + (float)((float)(v14[v26] - v14[v25]) * (float)(v24 - (float)v24)))
        * (float)(v27 * 49.261);
    if (v28 <= v20)
      v29 = v28;
    else
      v29 = v20;
    if (v28 >= 0.0)
      v30 = v29;
    else
      v30 = 0.0;
    v13[v18++] = v30;
  }
  while (v18 != 1024);
  free(v14);
  return v12;
}

double ConversionManager::AddFlexLuminanceToneMapping(uint64_t a1, const void *a2, int32x4_t a3)
{
  const __CFDictionary *v3;
  const __CFDictionary *FlexLumaScalingOptions;
  const __CFDictionary *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  uint64_t v10;
  float *v11;
  const __CFNumber *Value;
  const __CFDictionary *v13;
  float *v14;
  const __CFNumber *v15;
  float v16;
  const __CFArray *v17;
  const __CFDictionary *v18;
  _QWORD *v19;
  _QWORD *v20;
  float *v21;
  uint64_t v22;
  const float *v23;
  int32x4_t v24;

  v3 = *(const __CFDictionary **)(a1 + 80);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 89) == 16)
    {
      FlexLumaScalingOptions = (const __CFDictionary *)ColorSyncOptionsGetFlexLumaScalingOptions(0, a2);
      if (FlexLumaScalingOptions)
      {
        v6 = FlexLumaScalingOptions;
        v7 = CMMBase::NewInternal(0x58uLL, *(_QWORD ***)(a1 + 8));
        v8 = v7;
        v9 = *(_QWORD ***)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 24);
        *((_DWORD *)v7 + 2) = 1;
        v7[2] = 0;
        v7[3] = v10;
        if (v10)
          *(_QWORD *)(v10 + 16) = v7;
        *(_DWORD *)((char *)v7 + 33) = 16777217;
        *v7 = off_1E215F950;
        v11 = (float *)v7 + 13;
        *(_OWORD *)(v7 + 5) = xmmword_18B3EAAA0;
        Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("com.apple.cmm.FlexGTCTargetHeadroom"));
        v13 = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)kColorSyncMonoGainMapParams);
        if (Value)
          CFNumberGetValue(Value, kCFNumberFloatType, (char *)v8 + 52);
        v14 = (float *)(v8 + 6);
        v15 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)kColorSyncGainMapBaselineHeadroom);
        if (v15)
        {
          CFNumberGetValue(v15, kCFNumberFloatType, v8 + 6);
          v16 = exp2f(*v14);
          *v14 = v16;
        }
        else
        {
          v16 = *v14;
        }
        if (*v11 <= v16)
          v16 = *v11;
        if (*v11 < 1.0)
          v16 = 1.0;
        *v11 = v16;
        if (CFDictionaryContainsKey(v3, (const void *)kColorSyncMonoFlexGTCNodeTable) == 1
          && CFDictionaryContainsKey(v3, (const void *)kColorSyncMonoGainMapParams) == 1
          && (v17 = (const __CFArray *)CFDictionaryGetValue(v3, (const void *)kColorSyncMonoFlexGTCNodeTable),
              v18 = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)kColorSyncMonoGainMapParams),
              (unint64_t)CFArrayGetCount(v17) >= 2))
        {
          v19 = CMMBase::NewInternal(0x28uLL, v9);
          *v19 = off_1E215FE00;
          v19[1] = 1;
          v19[3] = 0;
          v19[4] = 4096;
          v20 = CMMBase::NewInternal(0x1000uLL, v9);
          v19[2] = v20;
          v21 = (float *)CMMTable::MutableFloatData((uint64_t)v20);
          Compute_FlexGTC(v21, v17, v18, v6);
        }
        else
        {
          v19 = 0;
        }
        v8[10] = v19;
        if (v19)
          v22 = 0;
        else
          v22 = 4294967246;
        CMMThrowExceptionOnError(v22);
        v23 = (const float *)(v8 + 6);
        *(float32x2_t *)a3.i8 = vld1_dup_f32(v23);
        *(float32x2_t *)a3.i8 = vdiv_f32((float32x2_t)0x41C50B5A41035CE7, *(float32x2_t *)a3.i8);
        v24 = vzip1q_s32(a3, a3);
        v24.i32[2] = a3.i32[0];
        *(int32x4_t *)(v8 + 7) = v24;
        *((_DWORD *)v8 + 18) = 1111821146;
        *(_QWORD *)(a1 + 24) = v8;
      }
    }
  }
  return *(double *)a3.i64;
}

float ConversionManager::GetHLGInvOETFOpticalScale(ConversionManager *this, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  BOOL v6;
  float result;
  const void *v8;
  const void *v9;
  int v11;
  const __CFNumber *v12;
  int v13;
  float valuePtr;

  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.SkipHLGOOTF"));
    v5 = (const void *)*MEMORY[0x1E0C9AE50];
    v6 = Value == (const void *)*MEMORY[0x1E0C9AE50]
      || CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.SkipToneMappingForBT2100")) == v5;
    v8 = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.UseHLGOOTFForCoreVideo"));
    v9 = CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100"));
    if (*((_BYTE *)this + 51))
    {
      if (v9 != v5 && v8 != v5)
        goto LABEL_16;
    }
    result = 1.0;
    if (v6 || *((_BYTE *)this + 47) != 0)
      result = 12.0;
    if (v6)
    {
LABEL_16:
      valuePtr = 0.0;
      v11 = CFDictionaryContainsKey(theDict, CFSTR("com.apple.cmm.HLGInvOETFOpticalScale"));
      result = 0.0;
      if (v11 == 1)
      {
        v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("com.apple.cmm.HLGInvOETFOpticalScale"));
        v13 = CFNumberGetValue(v12, kCFNumberFloatType, &valuePtr);
        result = valuePtr;
        if (!v13)
          result = 0.0;
      }
      goto LABEL_19;
    }
  }
  else
  {
    if (*((_BYTE *)this + 51))
    {
      result = 0.0;
LABEL_19:
      if (result == 0.0)
        return 12.0;
      return result;
    }
    result = 12.0;
    if (!*((_BYTE *)this + 47))
      return 1.0;
  }
  return result;
}

uint64_t ___ZL34disable_ITUBT1886Inv_on_HLG_to_SDRv_block_invoke()
{
  uint64_t result;
  char v1;

  v1 = 0;
  result = ColorSyncDefaultsGetBoolean("ColorSyncDisableInvBT1886inHLG2SDR", &v1);
  if ((_DWORD)result)
    disable_ITUBT1886Inv_on_HLG_to_SDR(void)::disabled = v1;
  return result;
}

uint64_t ___ZL38display_referred_mapping_on_SDR_to_HLGv_block_invoke()
{
  uint64_t result;
  char v1;

  v1 = 0;
  result = ColorSyncDefaultsGetBoolean("ColorSyncDisplayReferredMappingInSDR2HLG", &v1);
  if ((_DWORD)result)
    display_referred_mapping_on_SDR_to_HLG(void)::enabled = v1;
  return result;
}

uint64_t ___ZL26get_useITUBT1886ForEngammaPK14__CFDictionary_block_invoke()
{
  uint64_t result;

  result = ColorSyncDefaultsGetBoolean("USEBT1886FORCOREVIDEOGAMMA", &get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs);
  if ((result & 1) == 0)
    get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs = 0;
  return result;
}

uint64_t ___ZL26get_useITUBT1886ForDegammaPK14__CFDictionary_block_invoke()
{
  uint64_t result;

  result = ColorSyncDefaultsGetBoolean("USEBT1886FORCOREVIDEOGAMMA", &get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs);
  if ((result & 1) == 0)
    get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs = 0;
  return result;
}

void CMMMonoOutputProfile::~CMMMonoOutputProfile(CMMMonoOutputProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

void CMMLutDisplayProfile::~CMMLutDisplayProfile(CMMLutDisplayProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

void CMMLutInputProfile::~CMMLutInputProfile(CMMLutInputProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMLutInputProfile::GetConversionType(CMMLutInputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

void CMMMonoInputProfile::~CMMMonoInputProfile(CMMMonoInputProfile *this)
{
  pthread_mutex_t **v1;

  CMMProfile::~CMMProfile(this);
  CMMBase::operator delete(v1);
}

uint64_t CMMMonoInputProfile::GetConversionType(CMMMonoInputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t TVector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::~TVector(uint64_t a1)
{
  pthread_mutex_t ***v3;

  v3 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void TVector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::~TVector(uint64_t a1)
{
  pthread_mutex_t ***v2;

  v2 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](&v2);
  CMMBase::operator delete((pthread_mutex_t **)a1);
}

BOOL DoApplyTransform(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9, unint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, const __CFDictionary *a15)
{
  uint64_t v20;
  _QWORD *v21;
  char v22;
  const __CFNumber *Value;
  int v24;
  const __CFBoolean *v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL8 v28;
  _BYTE __dst[432];
  _QWORD valuePtr[54];
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41[2];

  v20 = a1 + 64;
  v41[0] = *(void **)(a1 + 64);
  CMMMemMgr::RetainMemList((CMMMemMgr *)v41);
  v21 = *(_QWORD **)(v20 + 8);
  v22 = *(_BYTE *)(v20 + 60);
  if (a15)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a15, (const void *)kColorSyncConvertThreadCount);
    v24 = 1;
    if (Value)
    {
      LODWORD(valuePtr[0]) = 1;
      if (CFNumberGetValue(Value, kCFNumberIntType, valuePtr))
        v24 = valuePtr[0];
      else
        v24 = 1;
    }
    v25 = (const __CFBoolean *)CFDictionaryGetValue(a15, (const void *)kColorSyncConvertUseVectorUnit);
    if (v25)
      v22 = CFBooleanGetValue(v25) != 0;
  }
  else
  {
    v24 = 1;
  }
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  v35[0] = off_1E215DDA8;
  v35[1] = v41;
  memset(&valuePtr[5], 0, 368);
  valuePtr[0] = v21;
  valuePtr[1] = 0;
  valuePtr[2] = v35;
  valuePtr[3] = v20;
  LOBYTE(valuePtr[52]) = v22;
  BYTE1(valuePtr[52]) = 1;
  WORD1(valuePtr[52]) = 0;
  HIDWORD(valuePtr[52]) = v24;
  valuePtr[53] = 0;
  v26 = 17;
  if (a4 < 0x11)
    v26 = a4;
  valuePtr[51] = 0;
  valuePtr[4] = a4;
  if (v26)
    memcpy(&valuePtr[5], a5, 8 * v26);
  valuePtr[22] = a2;
  valuePtr[23] = a3;
  valuePtr[24] = a8;
  valuePtr[25] = a9;
  valuePtr[26] = __PAIR64__(a7, a6);
  LODWORD(valuePtr[27]) = *(_DWORD *)(a1 + 88);
  v27 = 17;
  if (a10 < 0x11)
    v27 = a10;
  valuePtr[28] = a10;
  if (v27)
    memcpy(&valuePtr[29], a11, 8 * v27);
  valuePtr[46] = a2;
  valuePtr[47] = a3;
  valuePtr[48] = a13;
  valuePtr[49] = a14;
  valuePtr[50] = a12;
  LODWORD(valuePtr[51]) = *(_DWORD *)(a1 + 84);
  pthread_mutex_lock((pthread_mutex_t *)a1);
  for (; v21; v21 = (_QWORD *)v21[2])
    (*(void (**)(_QWORD *, _QWORD *))(*v21 + 88))(v21, valuePtr);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  memcpy(__dst, valuePtr, sizeof(__dst));
  v28 = apply_cmm_transform((pthread_mutex_t *)a1, (uint64_t)__dst);
  ConversionManager::~ConversionManager((ConversionManager *)v35);
  CMMMemMgr::ReleaseMemList(v41);
  return v28;
}

void sub_18B3E2CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CMMMemMgr::ReleaseMemList((void **)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL apply_cmm_transform(pthread_mutex_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  NSObject *v17;
  int *v18;
  void *v20;

  pthread_mutex_lock(a1);
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  while (v4 != v5)
  {
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 88))(v4, a2);
    v4 = (_QWORD *)v4[2];
  }
  pthread_mutex_unlock(a1);
  if (*(_DWORD *)(a2 + 420) != 1 && *(_QWORD *)(a2 + 368) * *(_QWORD *)(a2 + 376) >= 0x2801uLL)
  {
    v20 = 0;
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v20);
    v8 = CMMBase::NewInternal(0x10uLL, (_QWORD **)&v20);
    *v8 = off_1E215DA68;
    v8[1] = 0;
    if (CMMThreadManager::GetNofCPUs(void)::predicate != -1)
      dispatch_once(&CMMThreadManager::GetNofCPUs(void)::predicate, &__block_literal_global_165);
    if ((unint64_t)CMMThreadManager::GetNofCPUs(void)::nofCPUs >= 2
      && ((v9 = *(_DWORD *)(a2 + 420)) == 0
        ? ((unint64_t)CMMThreadManager::GetNofCPUs(void)::nofCPUs <= 1
         ? (v10 = 1)
         : (v10 = CMMThreadManager::GetNofCPUs(void)::nofCPUs))
        : v9 >= 0x100
        ? (v10 = 256)
        : (v10 = v9),
          v11 = malloc_type_calloc(1uLL, 456 * (v10 - 1) + 472, 0xACDEC48CuLL),
          v12 = (uint64_t)v11,
          (v8[1] = v11) != 0))
    {
      v13 = 0;
      v11[1] = v10 - 1;
      v14 = v11 + 57;
      do
      {
        *(v14 - 1) = v11;
        *v14 = v13++;
        v14 += 57;
      }
      while (v10 != v13);
      *(_QWORD *)(a2 + 424) = v11;
      v15 = *(_QWORD *)(a2 + 376);
      if (v15 < 2 || v15 >= v10)
      {
        if (v15 == 1)
        {
          if (*(_QWORD *)(a2 + 368) >= v10)
            v15 = v10;
          else
            v15 = *(_QWORD *)(a2 + 368);
        }
        else
        {
          v15 = v10;
        }
      }
      v17 = dispatch_group_create();
      CMMThreadManager::ActivateTask(v17, v12, v15, (_QWORD *)a2);
      dispatch_release(v17);
      if (v15)
      {
        v18 = (int *)(v12 + 468);
        while (1)
        {
          v7 = *v18;
          if (*v18)
            break;
          v18 += 114;
          if (!--v15)
            goto LABEL_37;
        }
      }
      else
      {
LABEL_37:
        v7 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 424) = 0;
      v7 = CMMProcessBitmap(a2);
    }
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    CMMMemMgr::ReleaseMemList(&v20);
  }
  else
  {
    v7 = CMMProcessBitmap(a2);
  }
  return v7 == 0;
}

void sub_18B3E2F38(void *a1, int a2)
{
  uint64_t v2;
  void *v4;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v4 = *(void **)(v2 + 8);
    if (!v4)
      goto LABEL_6;
  }
  else
  {
    v4 = *(void **)(v2 + 8);
    if (!v4)
    {
LABEL_6:
      __cxa_end_catch();
      JUMPOUT(0x18B3E2EE8);
    }
  }
  free(v4);
  *(_QWORD *)(v2 + 8) = 0;
  goto LABEL_6;
}

void sub_18B3E2F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMProcessBitmap(uint64_t a1)
{
  int v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int8x16_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  BOOL v25;
  BOOL v26;
  char v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  int8x16_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  _QWORD *v39;
  uint64_t (**v40)();
  _QWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  BOOL v46;
  _QWORD *v47;
  uint64_t (**v48)();
  _QWORD *v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *exception;
  int v61;
  _QWORD *v62;
  _OWORD v63[7];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void (**v73)(CMMDataDecodeMaker *__hidden);
  __int128 v74;
  _QWORD v75[8];
  __int128 v76;
  __int128 v77;
  int8x16_t v78;
  _QWORD v79[4];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void (**v102)(CMMDataEncodeMaker *__hidden);
  __int128 v103;
  __int128 v104;
  _QWORD v105[8];
  __int128 v106;
  __int128 v107;
  int8x16_t v108;
  _QWORD v109[4];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;

  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  memset(v109, 0, sizeof(v109));
  v108 = 0u;
  v107 = 0u;
  v106 = 0u;
  memset(v105, 0, sizeof(v105));
  v104 = 0u;
  v103 = 0u;
  v102 = off_1E215DF80;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v85 = 0u;
  v84 = 0u;
  v83 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  memset(v79, 0, sizeof(v79));
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  memset(v75, 0, sizeof(v75));
  v74 = 0u;
  v73 = off_1E215DF60;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  memset(v63, 0, sizeof(v63));
  v2 = CMMGetPrecisionFromData(*(_DWORD *)(a1 + 400), *(_DWORD *)(a1 + 404));
  v3 = CMMGetPrecisionFromData(*(_DWORD *)(a1 + 208), *(_DWORD *)(a1 + 212));
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(v6 + 52);
  if (*(_QWORD **)a1 == v5)
  {
    v8 = 0;
  }
  else
  {
    v61 = *(unsigned __int8 *)(v6 + 52);
    v8 = 0;
    do
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*v4 + 192))(v4);
      if (v9 > v8)
        v8 = v9;
      v4 = (_QWORD *)v4[2];
    }
    while (v4 != v5);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = v61;
  }
  v62 = (_QWORD *)(a1 + 32);
  if (v8 >= 4 || v8 <= 0 || v7 == 0)
    v12 = v8;
  else
    v12 = 4;
  if (v2 > v12)
    v12 = v2;
  if (v12 <= v3)
    v13 = v3;
  else
    v13 = v12;
  if (v13 == 1)
    v14 = 2;
  else
    v14 = *(_QWORD *)(v6 + 32) + 1;
  v15 = (_BYTE *)(a1 + 416);
  if (v13 == 5)
  {
    if (v14 >= 0x10)
      goto LABEL_94;
    v16 = *(_DWORD *)(a1 + 408);
    if (v16 == 1281450528)
      v16 = 1145856354;
    if (v16 == *(_DWORD *)(v6 + 20))
    {
      v17 = *(_QWORD *)(a1 + 376) * *(_QWORD *)(a1 + 368);
      *(_QWORD *)&v103 = off_1E215D0E0;
      *((_QWORD *)&v103 + 1) = v17;
      *(_QWORD *)&v104 = v14;
      *((_QWORD *)&v104 + 1) = 0xC00 / v14 * v14;
      LODWORD(v105[0]) = 5;
      CMMDataBaseClass::CMMDataBaseClass(&v105[1], (_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 392) >> 2, *(_QWORD *)(a1 + 384) >> 2);
      *(_QWORD *)&v103 = off_1E215F7F0;
      *((_QWORD *)&v106 + 1) = a1 + 224;
      v18 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 408));
      v19 = *(_OWORD *)(a1 + 368);
      v20 = (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(a1 + 384), 2uLL);
      v108 = vextq_s8(v20, v20, 8uLL);
      *(_OWORD *)&v109[1] = v19;
      v107 = (unint64_t)v18;
      *(_QWORD *)&v110 = 0;
      v109[3] = 0;
      v6 = *(_QWORD *)(a1 + 24);
    }
    v29 = *(_DWORD *)(v6 + 24);
    v30 = *(_DWORD *)(a1 + 216);
    if (v30 == 1281450528)
      v30 = 1145856354;
    if (v30 == v29)
    {
      *(_QWORD *)&v74 = off_1E215D0A8;
      *((_QWORD *)&v74 + 1) = v14;
      LODWORD(v75[0]) = 5;
      CMMDataBaseClass::CMMDataBaseClass(&v75[1], v62, *(_QWORD *)(a1 + 200) >> 2, *(_QWORD *)(a1 + 192) >> 2);
      *(_QWORD *)&v74 = off_1E215F7B0;
      *((_QWORD *)&v76 + 1) = a1 + 32;
      v31 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 216));
      v32 = *(_OWORD *)(a1 + 176);
      v33 = (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(a1 + 192), 2uLL);
      v78 = vextq_s8(v33, v33, 8uLL);
      *(_OWORD *)&v79[1] = v32;
      v77 = (unint64_t)v31;
      v79[3] = 0;
      *(_QWORD *)&v80 = 0;
    }
    if ((*(_DWORD *)(a1 + 212) & 0x1Fu) - 1 <= 3)
    {
      v34 = (*(_DWORD *)(a1 + 404) & 0x1F) - 5;
      *(_QWORD *)&v63[0] = off_1E215E0D8;
      *(_QWORD *)&v65 = a1 + 32;
      *((_QWORD *)&v65 + 1) = a1 + 224;
      BYTE8(v64) = v34 < 0xFFFFFFFC;
      if (v34 >= 0xFFFFFFFC)
      {
        if (*(_QWORD *)(a1 + 224) != 1)
          goto LABEL_94;
        v50 = *(_QWORD *)(a1 + 232);
        v35 = v50 + (CMMAlphaByteOffset((_DWORD *)(a1 + 224)) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v35 = 0;
      }
      *(_QWORD *)&v66 = v35;
      if (*v62 == 1)
      {
        if (BYTE8(v64))
        {
          v51 = *(float *)"";
          if ((*(_DWORD *)(a1 + 212) & 0x7000) != 0x4000)
            v51 = 1.0;
          *(float *)&v71 = v51;
          goto LABEL_89;
        }
        if (((*(_DWORD *)(a1 + 212) ^ *(_DWORD *)(a1 + 404)) & 0x7000) == 0)
        {
          LODWORD(v71) = 1065353216;
LABEL_89:
          v52 = *(_QWORD *)(a1 + 40);
          *((_QWORD *)&v66 + 1) = v52 + (CMMAlphaByteOffset((_DWORD *)v65) & 0xFFFFFFFFFFFFFFFCLL);
          if (BYTE8(v64))
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
          }
          else
          {
            v53 = *(_QWORD *)(a1 + 392) >> 2;
            v54 = *(_QWORD *)(a1 + 384) >> 2;
            v55 = *(_QWORD *)(a1 + 368);
          }
          v56 = *(_QWORD *)(a1 + 192) >> 2;
          v57 = *(_QWORD *)(a1 + 200) >> 2;
          *(_QWORD *)&v67 = v53;
          *((_QWORD *)&v67 + 1) = v57;
          *(_QWORD *)&v68 = v54;
          *((_QWORD *)&v68 + 1) = v56;
          v58 = *(_QWORD *)(a1 + 176);
          *(_QWORD *)&v69 = v55;
          *((_QWORD *)&v69 + 1) = v58;
          v70 = 0uLL;
          return ConversionManager::ApplySequenceToBitmap();
        }
      }
LABEL_94:
      exception = __cxa_allocate_exception(4uLL);
      *exception = -171;
    }
  }
  else
  {
    if (v14 >= 0x10)
      goto LABEL_94;
    v21 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 408));
    v22 = *(_DWORD *)(a1 + 400);
    v23 = (*(_DWORD *)(a1 + 404) & 0x1F) - 1;
    v25 = (*(_DWORD *)(a1 + 404) & 0x7000) == 0x3000 || (*(_DWORD *)(a1 + 404) & 0x7000) == 0x4000;
    v26 = v21 == 3 && v22 == 2;
    v27 = !v26;
    v28 = v26 && *v15 != 0;
    *(_BYTE *)(a1 + 416) = v28;
    v36 = *(_QWORD *)(a1 + 376) * *(_QWORD *)(a1 + 368);
    if (v13 == 1 && v23 >= 2)
      v38 = v27;
    else
      v38 = 1;
    if ((v38 & 1) != 0)
    {
      if (v22 != 3)
        goto LABEL_94;
      *(_QWORD *)&v103 = off_1E215D0E0;
      *((_QWORD *)&v103 + 1) = v36;
      *(_QWORD *)&v104 = v14;
      *((_QWORD *)&v104 + 1) = (unsigned __int16)(0xC00u / (unsigned __int16)v14 * v14);
      LODWORD(v105[0]) = v13;
      v39 = CMMDataBaseClass::CMMDataBaseClass(&v105[1], (_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 392) >> 1, *(_QWORD *)(a1 + 384) >> 1);
      LOBYTE(v110) = v25;
      CMM16BitNChanData::SetParams(v39, a1 + 224);
      v40 = off_1E215DFD8;
    }
    else
    {
      *(_QWORD *)&v103 = off_1E215D0E0;
      *((_QWORD *)&v103 + 1) = v36;
      *(_QWORD *)&v104 = v14;
      *((_QWORD *)&v104 + 1) = 0xC00 / v14 * v14;
      LODWORD(v105[0]) = 1;
      v41 = CMMDataBaseClass::CMMDataBaseClass(&v105[1], (_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 392), *(_QWORD *)(a1 + 384));
      CMM8Bit3ChanData::SetParams((uint64_t)v41, a1 + 224);
      v40 = (uint64_t (**)())off_1E215F910;
    }
    *(_QWORD *)&v103 = v40;
    v42 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 216));
    v44 = *(_DWORD *)(a1 + 208);
    v43 = *(_DWORD *)(a1 + 212);
    v46 = (v43 & 0x7000) == 0x3000 || (v43 & 0x7000) == 0x4000;
    if (v42 == 3 && v44 == 2)
    {
      if (v13 != 1 || (v43 & 0x1Fu) - 1 < 2)
        goto LABEL_94;
      *(_QWORD *)&v74 = off_1E215D0A8;
      *((_QWORD *)&v74 + 1) = v14;
      LODWORD(v75[0]) = 1;
      v47 = CMMDataBaseClass::CMMDataBaseClass(&v75[1], v62, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 192));
      CMM8Bit3ChanData::SetParams((uint64_t)v47, (uint64_t)v62);
      v48 = (uint64_t (**)())off_1E215F8D8;
    }
    else
    {
      *v15 = 0;
      if (v44 != 3)
        goto LABEL_94;
      *(_QWORD *)&v74 = off_1E215D0A8;
      *((_QWORD *)&v74 + 1) = v14;
      LODWORD(v75[0]) = v13;
      v49 = CMMDataBaseClass::CMMDataBaseClass(&v75[1], v62, *(_QWORD *)(a1 + 200) >> 1, *(_QWORD *)(a1 + 192) >> 1);
      LOBYTE(v80) = v46;
      CMM16BitNChanData::SetParams(v49, (uint64_t)v62);
      v48 = off_1E215DFA0;
    }
    *(_QWORD *)&v74 = v48;
    if ((*(_DWORD *)(a1 + 212) & 0x1Fu) - 1 <= 3)
      CMMAlphaCopier::CMMAlphaCopier((uint64_t)v63, (uint64_t)v62, a1 + 224, (*(_DWORD *)(a1 + 404) & 0x1Fu) - 5 < 0xFFFFFFFC);
  }
  return ConversionManager::ApplySequenceToBitmap();
}

void sub_18B3E36FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18B3E36B0);
}

intptr_t CMMThreadManager::ActivateTask(NSObject *a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  NSObject *global_queue;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _DWORD *exception;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *group;
  _OWORD v67[4];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD __src[27];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (!a4)
    goto LABEL_10;
  memcpy(__src, a4, sizeof(__src));
  if (!a3)
    return dispatch_group_wait(a1, 0xFFFFFFFFFFFFFFFFLL);
  v8 = a2 + 456 * (a3 - 1) + 16;
  memcpy((void *)v8, a4, 0x1B0uLL);
  v10 = a4[28];
  v9 = a4 + 28;
  v11 = *((_OWORD *)v9 + 6);
  v96 = *((_OWORD *)v9 + 5);
  v97 = v11;
  v12 = *((_OWORD *)v9 + 8);
  v98 = *((_OWORD *)v9 + 7);
  v99 = v12;
  v13 = *((_OWORD *)v9 + 2);
  v92 = *((_OWORD *)v9 + 1);
  v93 = v13;
  v14 = *((_OWORD *)v9 + 4);
  v94 = *((_OWORD *)v9 + 3);
  v95 = v14;
  v15 = *((_OWORD *)v9 + 11);
  v79 = *((_OWORD *)v9 + 10);
  v80 = v15;
  v16 = *((_OWORD *)v9 - 11);
  v17 = *((_OWORD *)v9 - 10);
  v18 = *((_OWORD *)v9 - 8);
  v86 = *((_OWORD *)v9 - 9);
  v87 = v18;
  v19 = *((_OWORD *)v9 - 9);
  v20 = *((_OWORD *)v9 - 11);
  v85 = *((_OWORD *)v9 - 10);
  v83 = v15;
  v84 = v16;
  v21 = *((_OWORD *)v9 - 6);
  v22 = *((_OWORD *)v9 - 4);
  v90 = *((_OWORD *)v9 - 5);
  v91 = v22;
  v23 = *((_OWORD *)v9 - 8);
  v24 = *((_OWORD *)v9 - 6);
  v88 = *((_OWORD *)v9 - 7);
  v89 = v24;
  v25 = *((_OWORD *)v9 - 1);
  v77 = *((_OWORD *)v9 - 2);
  v78 = v25;
  v70 = v17;
  v71 = v19;
  v68 = *((_OWORD *)v9 - 12);
  v69 = v20;
  v26 = *((_OWORD *)v9 - 4);
  v75 = v90;
  v76 = v26;
  v27 = v9[1];
  v28 = v9[18];
  v29 = v9[19];
  v31 = v9[20];
  v30 = v9[21];
  v33 = *(v9 - 24);
  v32 = *(v9 - 23);
  v35 = *(v9 - 6);
  v34 = *(v9 - 5);
  v73 = v88;
  v74 = v21;
  v72 = v23;
  v37 = *(v9 - 4);
  v36 = *(v9 - 3);
  v82 = *((_OWORD *)v9 - 1);
  v65 = a2;
  group = a1;
  v63 = v10;
  v64 = a3 - 1;
  v61 = v36;
  v62 = v33;
  v60 = v37;
  if (v29 < 2)
  {
    if (a3 <= v28)
    {
      v41 = v28 / a3;
      v58 = v35 - v28 / a3;
      v42 = v35 / a3;
      v40 = v30 * v41;
      *(_QWORD *)&v59 = v35 - v42;
      *((_QWORD *)&v59 + 1) = v34;
      v38 = v29;
      v39 = v34;
      v43 = v36;
      v44 = v42;
      goto LABEL_9;
    }
LABEL_10:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -171;
  }
  if (v29 < a3)
    goto LABEL_10;
  v38 = v29 / a3;
  v29 = v34 - v29 / a3;
  v39 = v34 / a3;
  v40 = v31 * v38;
  *(_QWORD *)&v59 = v35;
  *((_QWORD *)&v59 + 1) = v34 - v34 / a3;
  v41 = v28;
  v42 = v35;
  v43 = v37;
  v44 = v39;
  v58 = v28;
LABEL_9:
  v46 = v27 + v40;
  v57 = v32 + v43 * v44;
  memmove((void *)(v8 + 224), v9, 0x90uLL);
  *(_QWORD *)(v8 + 368) = v41;
  *(_QWORD *)(v8 + 376) = v38;
  *(_QWORD *)(v8 + 384) = v31;
  *(_QWORD *)(v8 + 392) = v30;
  *(_OWORD *)(v8 + 400) = v83;
  v47 = v75;
  *(_OWORD *)(v8 + 128) = v74;
  *(_OWORD *)(v8 + 144) = v47;
  *(_OWORD *)(v8 + 160) = v76;
  v48 = v71;
  *(_OWORD *)(v8 + 64) = v70;
  *(_OWORD *)(v8 + 80) = v48;
  v49 = v73;
  *(_OWORD *)(v8 + 96) = v72;
  *(_OWORD *)(v8 + 112) = v49;
  v50 = v69;
  *(_OWORD *)(v8 + 32) = v68;
  *(_OWORD *)(v8 + 48) = v50;
  *(_QWORD *)(v8 + 176) = v42;
  *(_QWORD *)(v8 + 184) = v39;
  *(_QWORD *)(v8 + 192) = v60;
  *(_QWORD *)(v8 + 200) = v61;
  *(_OWORD *)(v8 + 208) = v82;
  *(_QWORD *)&__src[14] = v63;
  *((_QWORD *)&__src[14] + 1) = v46;
  __src[19] = v96;
  __src[20] = v97;
  __src[21] = v98;
  __src[22] = v99;
  __src[15] = v92;
  __src[16] = v93;
  __src[17] = v94;
  __src[18] = v95;
  *(_QWORD *)&__src[23] = v58;
  *((_QWORD *)&__src[23] + 1) = v29;
  __src[24] = v79;
  __src[25] = v80;
  *(_QWORD *)&__src[2] = v62;
  *((_QWORD *)&__src[2] + 1) = v57;
  __src[5] = v86;
  __src[6] = v87;
  __src[3] = v84;
  __src[4] = v85;
  __src[9] = v90;
  __src[10] = v91;
  __src[7] = v88;
  __src[8] = v89;
  __src[11] = v59;
  __src[12] = v77;
  __src[13] = v78;
  global_queue = dispatch_get_global_queue(2, 0);
  dispatch_group_async_f(group, global_queue, (void *)v8, (dispatch_function_t)CMMConvTask);
  v52 = *(__int128 **)(v8 + 24);
  v53 = v52[3];
  v55 = *v52;
  v54 = v52[1];
  v67[2] = v52[2];
  v67[3] = v53;
  v67[0] = v55;
  v67[1] = v54;
  *((_QWORD *)&__src[1] + 1) = v67;
  return CMMThreadManager::ActivateTask(group, v65, v64, __src);
}

uint64_t CMMConvTask(_QWORD *a1)
{
  uint64_t result;

  result = CMMProcessBitmap(a1[54] + 456 * a1[55] + 16);
  *((_DWORD *)a1 + 113) = result;
  return result;
}

uint64_t ___ZN16CMMThreadManager10GetNofCPUsEv_block_invoke()
{
  host_t v0;
  uint64_t result;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[4];
  __int128 v4;
  __int128 v5;

  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)host_info_out = 0u;
  host_info_outCnt = 12;
  v0 = MEMORY[0x18D7797C0]();
  if (host_info(v0, 1, host_info_out, &host_info_outCnt))
    CMMThreadManager::GetNofCPUs(void)::nofCPUs = 0;
  result = mach_port_deallocate(*MEMORY[0x1E0C83DA0], v0);
  CMMThreadManager::GetNofCPUs(void)::nofCPUs = host_info_out[1];
  return result;
}

uint64_t DoFlattenParametricConversion(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  void *ValueAtIndex;
  CFTypeID v5;

  if ((*(_BYTE *)(a1 + 120) & 2) == 0 || !collect_flattened_conversion(*(_QWORD **)(a1 + 72), 0, a3, theArray))
    return 4294967115;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
  v5 = CFGetTypeID(ValueAtIndex);
  if (v5 == CFDictionaryGetTypeID())
    CFDictionarySetValue((CFMutableDictionaryRef)ValueAtIndex, kColorSyncTransformCodeFragmentType, kColorSyncTransformParametricConversionData);
  return 0;
}

uint64_t DoFlattenSimplifiedConversion(uint64_t a1, __CFArray *a2, const void *a3, unint64_t a4)
{
  ConversionManager *v8;
  CFDictionaryRef v9;
  uint64_t v10;
  void *v12;

  v8 = *(ConversionManager **)(a1 + 72);
  v12 = *(void **)(a1 + 64);
  CMMMemMgr::RetainMemList((CMMMemMgr *)&v12);
  v9 = compact_and_flatten_sequence((pthread_mutex_t *)a1, v8, 0, (uint64_t)&v12, *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 88), (void *)kColorSyncTransformSimplifiedConversionData, a3, a4);
  if (v9)
  {
    CFArrayAppendValue(a2, v9);
    v10 = 0;
    CFRelease(v9);
  }
  else
  {
    v10 = 0x7FFFFFFFLL;
  }
  CMMMemMgr::ReleaseMemList(&v12);
  return v10;
}

void sub_18B3E3CB8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1)
    JUMPOUT(0x18B3E3C90);
  JUMPOUT(0x18B3E3C80);
}

void sub_18B3E3CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef compact_and_flatten_sequence(pthread_mutex_t *a1, ConversionManager *this, CMMConvNode *a3, uint64_t a4, int a5, int a6, void *a7, const void *a8, unint64_t a9)
{
  unint64_t v15;
  unint64_t MaxCLUTNofPoints;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  CFDictionaryRef v32;
  unsigned __int16 *v33;
  size_t v34;
  const std::nothrow_t *v35;
  void *v36;
  size_t v37;
  UInt8 *v38;
  UInt8 *v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  CFDataRef v44;
  CFNumberRef v45;
  uint64_t v46;
  void *v48;
  unsigned __int16 *v50;
  int v51;
  ConversionManager *v52;
  CMMConvNode *v53;
  int v54;
  int v55;
  int v56;
  int valuePtr;
  int v58;
  _QWORD v59[6];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  char v92;
  char v93;
  __int16 v94;
  int v95;
  uint64_t v96;
  _QWORD v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *values;
  uint64_t v104;
  unint64_t v105;
  CFNumberRef v106;
  CFNumberRef v107;
  CFNumberRef v108;
  CFNumberRef v109;
  uint64_t v110;
  uint64_t v111;
  void *keys;
  uint64_t v113;
  CFStringRef v114;
  CFStringRef v115;
  CFStringRef v116;
  CFStringRef v117;
  uint64_t v118;
  const __CFString *v119;
  uint64_t v120;
  uint64_t v121;

  v15 = a9;
  v121 = *MEMORY[0x1E0C80C00];
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v97[0] = off_1E215DDA8;
  v97[1] = a4;
  if (!a9)
  {
    MaxCLUTNofPoints = ConversionManager::GetMaxCLUTNofPoints(this, a3, a3);
    if (MaxCLUTNofPoints)
      v15 = MaxCLUTNofPoints;
    else
      v15 = 17;
  }
  v17 = CMMGetChannelCountFromCMMSpace(a5);
  v24 = CMMGetChannelCountFromCMMSpace(a6);
  v52 = this;
  v53 = a3;
  v54 = a6;
  if (v17)
  {
    v25 = 1;
    v26 = v17;
    do
    {
      v27 = v25;
      v25 *= v15;
      v29 = v25 >= v27 && v25 >= v15;
      CMMThrowExceptionWithLog(v29, "Overflow in Power", v18, v19, v20, v21, v22, v23);
      --v26;
    }
    while (v26);
    if (!is_mul_ok(v17, v25))
      goto LABEL_23;
    v30 = v25 * v17;
    if (v25 * v17)
    {
      if (v30 >> 62)
        goto LABEL_23;
    }
  }
  else
  {
    v30 = 0;
    v25 = 1;
  }
  v51 = a5;
  if (v24)
  {
    if (!is_mul_ok(v24, v25) || (v31 = v25 * v24) != 0 && v31 >> 62)
    {
LABEL_23:
      v32 = 0;
      goto LABEL_56;
    }
  }
  else
  {
    v31 = 0;
  }
  v33 = (unsigned __int16 *)operator new[](4 * v30, MEMORY[0x1E0DE4E10]);
  if (!NxMLUTFillWith16BitUniformGridData(v33, v15, v17, v30))
  {
    v39 = 0;
    v40 = 0;
    goto LABEL_47;
  }
  v50 = v33;
  v48 = a7;
  if (v30 >> 60)
    v34 = -1;
  else
    v34 = 16 * v30;
  v35 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v36 = operator new[](v34, MEMORY[0x1E0DE4E10]);
  if (v31 >> 60)
    v37 = -1;
  else
    v37 = 16 * v31;
  v38 = (UInt8 *)operator new[](v37, v35);
  v39 = v38;
  v32 = 0;
  if (!v36 || !v38)
  {
    v40 = v36;
    v33 = v50;
    goto LABEL_50;
  }
  keys = v50;
  v113 = 1;
  v114 = (CFStringRef)v30;
  v115 = (CFStringRef)(2 * v30);
  values = v36;
  v104 = 1;
  v105 = v30;
  v106 = (CFNumberRef)(4 * v30);
  ColorSync_vImageConvert_16UToF((uint64_t)&keys, (uint64_t)&values);
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v40 = v36;
  v41 = a1[1].__opaque[52];
  v59[0] = v52;
  v59[1] = v53;
  v59[2] = v97;
  v59[3] = a1 + 1;
  v59[4] = 1;
  v59[5] = v39;
  v68 = v25;
  v69 = 1;
  v70 = v25 * 4 * v24;
  v71 = 4 * v24;
  v72 = 7;
  v73 = v54;
  v74 = 0;
  v75 = 1;
  v76 = v36;
  v85 = v25;
  v86 = 1;
  v87 = v25 * 4 * v17;
  v88 = 4 * v17;
  v89 = 7;
  v90 = v51;
  v91 = 0;
  v92 = v41;
  v93 = 1;
  v94 = 0;
  v95 = 1;
  v96 = 0;
  if (!apply_cmm_transform(a1, (uint64_t)v59))
  {
    v32 = 0;
    v33 = v50;
    if (!v50)
      goto LABEL_52;
    goto LABEL_51;
  }
  v33 = v50;
  v58 = NxMTransformFormatFromValue(a8);
  v44 = NxMLUTCreateData(v58, v39, 1, v15, v17, v24, v42, v43);
  if (!v44)
  {
LABEL_47:
    v32 = 0;
    if (!v33)
      goto LABEL_52;
    goto LABEL_51;
  }
  keys = (void *)kColorSyncTransformCodeFragmentType;
  v113 = (uint64_t)kColorSyncConversion3DLut;
  v114 = kColorSyncConversionNDLut;
  v115 = kColorSyncConversionInpChan;
  v116 = kColorSyncConversionOutChan;
  v117 = kColorSyncConversionGridPoints;
  v118 = kColorSyncNxMFormat;
  v119 = CFSTR("com.apple.cmm.FunctionDoesInputClamp");
  v120 = 0;
  v56 = v24;
  valuePtr = v17;
  v55 = v15;
  values = v48;
  v104 = (uint64_t)v44;
  v105 = (unint64_t)v44;
  v106 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v107 = CFNumberCreate(0, kCFNumberSInt32Type, &v56);
  v108 = CFNumberCreate(0, kCFNumberSInt32Type, &v55);
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &v58);
  v46 = *MEMORY[0x1E0C9AE50];
  v109 = v45;
  v110 = v46;
  v111 = 0;
  v32 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v104)
    CFRelease((CFTypeRef)v104);
  if (v106)
    CFRelease(v106);
  if (v107)
    CFRelease(v107);
  if (v108)
    CFRelease(v108);
  if (v109)
    CFRelease(v109);
LABEL_50:
  if (v33)
LABEL_51:
    MEMORY[0x18D77955C](v33, 0x1000C80BDFB0063);
LABEL_52:
  if (v40)
    MEMORY[0x18D77955C](v40, 0x1000C8052888210);
  if (v39)
    MEMORY[0x18D77955C](v39, 0x1000C8052888210);
LABEL_56:
  ConversionManager::~ConversionManager((ConversionManager *)v97);
  return v32;
}

void sub_18B3E41CC(_Unwind_Exception *a1)
{
  ConversionManager::~ConversionManager((ConversionManager *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t DoFlattenCompactConversion(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  const void *v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;
  ConversionManager *v16;
  CFIndex Count;
  CFIndex v18;
  char v19;
  unsigned int v20;
  CMMConvNode **v21;
  CMMConvNode *v22;
  CMMConvNode **v23;
  CMMConvNode **v24;
  unsigned int v25;
  const void *v26;
  uint64_t v27;
  CMMConvNode *v28;
  uint64_t v29;
  ConversionManager *v30;
  uint64_t v31;
  CFDictionaryRef v32;
  CFDictionaryRef v33;
  CMMConvNode *v35;
  const void *v36;
  char v37;
  ConversionManager *lpsrc;
  void *v39;

  if ((*(_BYTE *)(a1 + 120) & 2) != 0)
  {
    v10 = channels_per_space(*(_DWORD *)(a1 + 88));
    if (*(_QWORD *)(a1 + 104) <= (unint64_t)(v10 + channels_per_space(*(_DWORD *)(a1 + 84)) + 1))
      return DoFlattenParametricConversion(a1, (CFArrayRef)a2, a3);
  }
  v11 = *(_QWORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    if (!v11
    {
      __assert_rtn("flatten_device_to_compact_conversion", "CMMTransform.cpp", 1147, "dynamic_cast <CMMConvGrayToRGB *> (devConv) != NULL");
    }
    v12 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 208))(v11, a3);
    if (v12)
    {
      CFArrayAppendValue((CFMutableArrayRef)a2, v12);
      CFRelease(v12);
      return 0;
    }
    else
    {
      CFArrayRemoveAllValues((CFMutableArrayRef)a2);
      return 4294967126;
    }
  }
  v39 = *(void **)(a1 + 64);
  CMMMemMgr::RetainMemList((CMMMemMgr *)&v39);
  if (v11)
  {
    v13 = -1;
    while (1)
    {
      while ((*(unsigned int (**)(_QWORD *))(*v11 + 216))(v11) != 1)
      {
        if ((*(unsigned int (**)(_QWORD *))(*v11 + 216))(v11) != 4)
          goto LABEL_22;
        v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 232))(v11);
        if (!v11)
          goto LABEL_19;
      }
      if (v13 != -1 && v14 < v13)
      {
LABEL_22:
        v16 = (ConversionManager *)v11;
        goto LABEL_23;
      }
      v15 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 208))(v11, a3);
      if (!v15)
        break;
      CFArrayAppendValue((CFMutableArrayRef)a2, v15);
      CFRelease(v15);
      v11 = (_QWORD *)v11[2];
      v13 = v14;
      v16 = 0;
      if (!v11)
        goto LABEL_23;
    }
    CFArrayRemoveAllValues((CFMutableArrayRef)a2);
    v16 = (ConversionManager *)v11;
  }
  else
  {
LABEL_19:
    v16 = 0;
  }
LABEL_23:
  Count = CFArrayGetCount((CFArrayRef)a2);
  if (v16)
  {
    v18 = Count;
    v36 = a4;
    v19 = 0;
    v20 = -1;
    lpsrc = v16;
    v21 = (CMMConvNode **)v16;
    while (1)
    {
      v37 = v19;
      v22 = v21[2];
      v23 = v21;
      do
      {
        v24 = v23;
        v23 = (CMMConvNode **)v23[2];
      }
      while (v23);
      while ((*((unsigned int (**)(CMMConvNode **))*v24 + 27))(v24) == 1)
      {
        if (v20 != -1 && v25 > v20)
          goto LABEL_45;
        v26 = (const void *)(*((uint64_t (**)(CMMConvNode **, uint64_t))*v24 + 26))(v24, a3);
        if (!v26)
        {
          CFArrayRemoveAllValues((CFMutableArrayRef)a2);
LABEL_45:
          if ((v37 & 1) == 0)
            goto LABEL_47;
LABEL_46:
          v22 = v35;
          goto LABEL_47;
        }
        CFArrayInsertValueAtIndex((CFMutableArrayRef)a2, v18, v26);
        CFRelease(v26);
        if (v24 == v21)
        {
          v22 = (CMMConvNode *)v21;
          goto LABEL_45;
        }
        v24 = (CMMConvNode **)v24[3];
        v20 = v25;
        if (!v24)
          goto LABEL_45;
      }
      if ((*((unsigned int (**)(CMMConvNode **))*v24 + 27))(v24) != 4)
        break;
      v27 = (*((uint64_t (**)(CMMConvNode **))*v24 + 29))(v24);
      v21 = (CMMConvNode **)v27;
      v28 = v35;
      if ((v37 & 1) == 0)
        v28 = v22;
      v35 = v28;
      v19 = 1;
      if (!v27)
        goto LABEL_46;
    }
    if ((v37 & 1) != 0)
      goto LABEL_46;
    v22 = v24[2];
LABEL_47:
    v30 = lpsrc;
    if (v22 == lpsrc)
      goto LABEL_57;
    v31 = -1;
    do
    {
      v30 = (ConversionManager *)*((_QWORD *)v30 + 2);
      ++v31;
    }
    while (v30 != v22);
    v30 = lpsrc;
    if (!v31
    {
      v32 = (CFDictionaryRef)(*(uint64_t (**)(ConversionManager *, uint64_t))(*(_QWORD *)lpsrc + 208))(lpsrc, a3);
    }
    else
    {
      v32 = compact_and_flatten_sequence((pthread_mutex_t *)a1, lpsrc, v22, (uint64_t)&v39, *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 88), (void *)kColorSyncTransformIteratorCompactType, v36, a5);
    }
    v33 = v32;
    if (v32)
    {
      CFArrayInsertValueAtIndex((CFMutableArrayRef)a2, v18, v32);
      CFRelease(v33);
LABEL_57:
      v29 = 0;
      goto LABEL_59;
    }
    CFArrayRemoveAllValues((CFMutableArrayRef)a2);
    v29 = 4294967126;
  }
  else
  {
    v29 = 4294967126;
    if (CFArrayGetCount((CFArrayRef)a2) <= 0)
      a2 = 4294967126;
    else
      a2 = 0;
    v30 = 0;
  }
LABEL_59:
  CMMMemMgr::ReleaseMemList(&v39);
  if (v30)
    return v29;
  return a2;
}

void sub_18B3E4698(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CMMMemMgr::ReleaseMemList((void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18B3E462CLL);
}

uint64_t channels_per_space(int a1)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  result = 0;
  if (a1 > 1145261137)
  {
    if (a1 > 1282766367)
    {
      if (a1 <= 1482250783)
      {
        if (a1 == 1282766368 || a1 == 1347182946)
          return 3;
        v10 = 1380401696;
        goto LABEL_44;
      }
      if (a1 <= 1501067551)
      {
        if (a1 == 1482250784)
          return 3;
        v10 = 1497588338;
        goto LABEL_44;
      }
      if (a1 == 1501067552)
        return 3;
      v5 = 1734438260;
    }
    else
    {
      if (a1 <= 1178815569)
      {
        if (a1 == 1145261138)
          return 13;
        if (a1 != 1145856354)
        {
          v3 = a1 == 1162038354;
          v4 = 14;
LABEL_25:
          if (v3)
            return v4;
          else
            return 0;
        }
        return 3;
      }
      if (a1 > 1212961567)
      {
        if (a1 == 1212961568)
          return 3;
        v10 = 1213421088;
        goto LABEL_44;
      }
      if (a1 == 1178815570)
        return 15;
      v5 = 1196573017;
    }
    if (a1 != v5)
      return result;
    return 1;
  }
  if (a1 <= 943934545)
  {
    if (a1 > 876825681)
    {
      if (a1 <= 910380113)
      {
        if (a1 != 876825682)
        {
          v3 = a1 == 893602898;
          v4 = 5;
          goto LABEL_25;
        }
        return 4;
      }
      v6 = 910380114;
      v7 = 6;
      v8 = a1 == 927157330;
      v9 = 7;
      goto LABEL_37;
    }
    if (a1 != 1)
    {
      if (a1 == 843271250)
        return 2;
      v10 = 860048466;
LABEL_44:
      if (a1 != v10)
        return result;
      return 3;
    }
    return 1;
  }
  if (a1 <= 1111706705)
  {
    v6 = 943934546;
    v7 = 8;
    v11 = 10;
    if (a1 != 1094929490)
      v11 = 0;
    if (a1 == 960711762)
      v9 = 9;
    else
      v9 = v11;
    goto LABEL_39;
  }
  if (a1 > 1129142559)
  {
    if (a1 != 1129142560)
    {
      if (a1 != 1129142603)
        return result;
      return 4;
    }
    return 3;
  }
  v6 = 1111706706;
  v7 = 11;
  v8 = a1 == 1128483922;
  v9 = 12;
LABEL_37:
  if (!v8)
    v9 = 0;
LABEL_39:
  if (a1 == v6)
    return v7;
  else
    return v9;
}

uint64_t AppleCMMInitializeLinkProfile(ColorSyncProfile *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  CMMProfileInfoContainer *v6;
  unint64_t MaxNofChannels;
  int v8;
  int v9;
  CMMConvNode *ColorMatchSequence;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *Tag;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  int8x8_t *v25;
  int8x8_t *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  int8x8_t *v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned int *v41;
  int32x4_t *v42;
  __int16 v43;
  __int16 v44;
  int16x4_t v45;
  tm *v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD **v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD **v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *i;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  const __CFData *v76;
  _QWORD *v77;
  unsigned int j;
  uint64_t v79;
  UInt8 *v80;
  uint64_t k;
  unsigned int v82;
  const __CFData *v83;
  const __CFString *SignatureFromFourCharCode;
  int v85;
  _QWORD *v86;
  _QWORD *v87;
  _DWORD *v89;
  _DWORD *exception;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  int v95;
  _QWORD *LutTypeTagFromSequence;
  _QWORD **v97;
  _QWORD v98[2];
  time_t v99;
  time_t length[6];
  UInt8 bytes[16];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v97 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v97);
  v6 = (CMMProfileInfoContainer *)CMMBase::NewInternal(0x38uLL, &v97);
  CMMProfileInfoContainer::CMMProfileInfoContainer(v6, a2, a3, (CMMMemMgr *)&v97);
  if (*((_QWORD *)v6 + 2) == *((_QWORD *)v6 + 1))
    goto LABEL_88;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v102 = 0u;
  *(_QWORD *)bytes = off_1E215DDA8;
  *(_QWORD *)&bytes[8] = &v97;
  MaxNofChannels = CMMProfileInfoContainer::GetMaxNofChannels(v6);
  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v6 + 1) + 8) + 48))(*(_QWORD *)(*((_QWORD *)v6 + 1) + 8), *(unsigned int *)(*((_QWORD *)v6 + 1) + 16));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v6 + 2) - 32) + 56))(*(_QWORD *)(*((_QWORD *)v6 + 2) - 32), *(unsigned int *)(*((_QWORD *)v6 + 2) - 24), 0);
  ColorMatchSequence = ConversionManager::MakeColorMatchSequence((int)bytes, v6, 0, 0);
  v98[1] = 0;
  v98[0] = 1;
  LutTypeTagFromSequence = ConversionManager::MakeLutTypeTagFromSequence((uint64_t)bytes, ColorMatchSequence, (uint64_t)v98, v8, v9, MaxNofChannels, 0);
  v11 = CMMBase::NewInternal(0x38uLL, &v97);
  *((_DWORD *)v11 + 2) = 1886610801;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_WORD *)v11 + 24) = 0;
  *v11 = off_1E215FA58;
  v12 = *((_QWORD *)v6 + 1);
  if (v12 == *((_QWORD *)v6 + 2))
  {
    v21 = 16;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(v12 + 8);
      Tag = CMMProfile::GetTag(v14, 1684893284);
      if (Tag)
      {
        if (!v16)
          goto LABEL_85;
        v17 = v13 + 21 + ((v16[4] - 5) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v17 = v13 + 25;
      }
      v18 = CMMProfile::GetTag(v14, 1684890724);
      if (v18)
      {
        if (!v19)
        {
LABEL_85:
          exception = __cxa_allocate_exception(4uLL);
          *exception = -171;
        }
        v20 = (v19[4] - 5) & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v20 = 4;
      }
      v13 = v17 + v20 + 4;
      v12 += 40;
    }
    while (v12 != *((_QWORD *)v6 + 2));
    v21 = v13 + 16;
  }
  v94 = v9;
  v95 = v8;
  v11[4] = v21;
  v22 = CMMBase::NewInternal(v21, &v97);
  v11[5] = v22;
  *((_BYTE *)v11 + 48) = 1;
  *v22 = 1902474096;
  v23 = *((_QWORD *)v6 + 1);
  v24 = *((_QWORD *)v6 + 2) - v23;
  v22[2] = bswap32(-858993459 * (v24 >> 3));
  if (v24)
  {
    v25 = (int8x8_t *)(v22 + 3);
    do
    {
      v26 = *(int8x8_t **)(v23 + 8);
      v28 = v26[11].u32[0];
      v27 = v26[11].u32[1];
      *v25 = vrev32_s8(v26[10]);
      v25[1].i32[0] = bswap32(v28);
      v25[1].i32[1] = bswap32(v27);
      v29 = CMMProfile::GetTag((uint64_t)v26, 1952801640);
      if (v29)
      {
        if (!v30)
        {
          v92 = __cxa_allocate_exception(4uLL);
          *v92 = -171;
        }
        v25[2].i32[0] = *(_DWORD *)(v30[5] + 8);
      }
      v31 = CMMProfile::GetTag((uint64_t)v26, 1684893284);
      if (v31)
      {
        if (!v32)
          goto LABEL_86;
        v33 = (char *)&v25[2] + 4;
        v34 = v32[4];
        memcpy(v33, (const void *)(v32[5] + 8), v34 - 8);
        v35 = (int8x8_t *)&v33[(v34 - 5) & 0xFFFFFFFFFFFFFFFCLL];
      }
      else
      {
        v35 = v25 + 3;
      }
      v36 = CMMProfile::GetTag((uint64_t)v26, 1684890724);
      if (v36)
      {
        if (!v37)
        {
LABEL_86:
          v91 = __cxa_allocate_exception(4uLL);
          *v91 = -171;
        }
        v38 = v37[4];
        memcpy(v35, (const void *)(v37[5] + 8), v38 - 8);
        v39 = (v38 - 5) & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v39 = 4;
      }
      v25 = (int8x8_t *)((char *)v35 + v39);
      v23 += 40;
    }
    while (v23 != *((_QWORD *)v6 + 2));
  }
  (*(void (**)(CMMProfileInfoContainer *))(*(_QWORD *)v6 + 8))(v6);
  v40 = CMMBase::NewInternal(0xB8uLL, &v97);
  *v40 = off_1E215BD58;
  *((_DWORD *)v40 + 2) = 1;
  *((_DWORD *)v40 + 44) = 808464432;
  v40[2] = 0;
  v40[3] = &v97;
  *((_OWORD *)v40 + 2) = 0u;
  v41 = (unsigned int *)(v40 + 4);
  *((_OWORD *)v40 + 5) = 0u;
  *((_OWORD *)v40 + 6) = 0u;
  *((_OWORD *)v40 + 3) = 0u;
  *((_OWORD *)v40 + 4) = 0u;
  *((_OWORD *)v40 + 7) = 0u;
  *((_OWORD *)v40 + 8) = 0u;
  *((_OWORD *)v40 + 9) = 0u;
  *((_OWORD *)v40 + 10) = 0u;
  *((_DWORD *)v40 + 20) = 1852796517;
  *(_QWORD *)((char *)v40 + 100) = 0x100000000F6D6;
  *((_DWORD *)v40 + 27) = 63190;
  *(_QWORD *)((char *)v40 + 36) = 0x21000006170706CLL;
  length[0] = 0;
  time(length);
  v42 = (int32x4_t *)localtime(length);
  if (v42)
  {
    v43 = v42[1].i16[2] + 1900;
    v44 = v42[1].i16[0] + 1;
    v45 = vmovn_s32(*v42);
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
  }
  *((_WORD *)v40 + 28) = v43;
  *((_WORD *)v40 + 29) = v44;
  *(int16x4_t *)((char *)v40 + 60) = vrev64_s16(v45);
  *(_QWORD *)((char *)v40 + 68) = 0x4150504C61637370;
  *((_DWORD *)v40 + 24) = 0;
  *((_DWORD *)v40 + 28) = 1634758764;
  v99 = 0;
  time(&v99);
  v46 = localtime(&v99);
  v47 = v46 ? v46->tm_year + 1900 : 1999;
  memset((char *)&length[3] + 7, 0, 7);
  strcpy((char *)length, "Copyright Apple Computer Inc. ");
  *((_BYTE *)length + strlen((const char *)length)) = v47 / 1000 + 48;
  v48 = v47 % 1000;
  v49 = ((5243 * v48) >> 19) + ((5243 * v48) >> 31);
  *((_BYTE *)length + strlen((const char *)length)) = v49 + 48;
  LOBYTE(v48) = v48 - 100 * v49;
  v50 = (((103 * (char)v48) >> 15) & 1) + ((103 * (char)v48) >> 10);
  *((_BYTE *)length + strlen((const char *)length)) = v50 + 48;
  *((_BYTE *)length + strlen((const char *)length)) = v48 - 10 * v50 + 48;
  v51 = CMMBase::NewInternal(0x38uLL, (_QWORD **)v40[3]);
  v52 = (_QWORD **)v40[3];
  *((_DWORD *)v51 + 2) = 1668313716;
  *((_OWORD *)v51 + 1) = 0u;
  *((_OWORD *)v51 + 2) = 0u;
  *((_WORD *)v51 + 24) = 0;
  *v51 = off_1E215BDF8;
  v53 = strlen((const char *)length) + 9;
  v51[4] = v53;
  v54 = CMMBase::NewInternal(v53, v52);
  v51[5] = v54;
  *((_BYTE *)v51 + 48) = 1;
  bzero(v54, v51[4]);
  v55 = v51[5];
  *(_DWORD *)v55 = 1954047348;
  strcpy((char *)(v55 + 8), (const char *)length);
  v40[20] = v51;
  v56 = CMMBase::NewInternal(0x38uLL, (_QWORD **)v40[3]);
  v57 = (_QWORD **)v40[3];
  v58 = v40[20];
  while (1)
  {
    v59 = v58;
    if (!v58)
      break;
    v58 = *(_QWORD *)(v58 + 16);
    if (!v58)
    {
      CMMTextDescTag::CMMTextDescTag((uint64_t)v56, v57, v59);
      goto LABEL_40;
    }
  }
  CMMTextDescTag::CMMTextDescTag((uint64_t)v56, v57, 0);
LABEL_40:
  *v40 = off_1E215DCD0;
  if (v95 == 1347182946)
    v60 = 1281450528;
  else
    v60 = v95;
  if (v95 == 1145856354)
    v60 = 1281450528;
  *((_DWORD *)v40 + 11) = 1818848875;
  *((_DWORD *)v40 + 12) = v60;
  v61 = v94 == 1347182946 ? 1281450528 : v94;
  v62 = v94 == 1145856354 ? 1281450528 : v61;
  *((_DWORD *)v40 + 13) = v62;
  v63 = v40[20];
  do
  {
    if (!v63)
    {
      v89 = __cxa_allocate_exception(4uLL);
      *v89 = -171;
    }
    v64 = v63;
    v63 = *(_QWORD *)(v63 + 16);
  }
  while (v63);
  *(_QWORD *)(v64 + 16) = LutTypeTagFromSequence;
  LutTypeTagFromSequence[2] = v11;
  LutTypeTagFromSequence[3] = v64;
  v11[3] = LutTypeTagFromSequence;
  ConversionManager::~ConversionManager((ConversionManager *)bytes);
  v65 = v40[20];
  if (v65)
  {
    v66 = 0;
    do
    {
      ++v66;
      v65 = *(_QWORD *)(v65 + 16);
    }
    while (v65);
    LODWORD(v65) = 12 * v66;
  }
  v67 = (v65 + 135) & 0xFFFFFFFC;
  if (v67 >= (int)v65 + 132)
    v68 = 0;
  else
    v68 = 4294967246;
  CMMThrowExceptionOnError(v68);
  for (i = (_QWORD *)v40[20]; i; i = (_QWORD *)i[2])
  {
    *(_QWORD *)bytes = 0;
    (*(void (**)(_QWORD *, _QWORD, UInt8 *))(*i + 24))(i, 0, bytes);
    v70 = (*(_DWORD *)bytes + 3) & 0xFFFFFFFC;
    if (v70 >= *(_DWORD *)bytes)
      v71 = 0;
    else
      v71 = 4294967246;
    CMMThrowExceptionOnError(v71);
    v67 += v70;
  }
  *v41 = v67;
  v72 = *((_OWORD *)v40 + 7);
  v105 = *((_OWORD *)v40 + 6);
  v106 = v72;
  v73 = *((_OWORD *)v40 + 9);
  v107 = *((_OWORD *)v40 + 8);
  v108 = v73;
  v74 = *((_OWORD *)v40 + 3);
  *(_OWORD *)bytes = *(_OWORD *)v41;
  v102 = v74;
  v75 = *((_OWORD *)v40 + 5);
  v103 = *((_OWORD *)v40 + 4);
  v104 = v75;
  v76 = CFDataCreateWithBytesNoCopy(0, bytes, 128, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v76)
  {
LABEL_88:
    v93 = __cxa_allocate_exception(4uLL);
    *v93 = -171;
  }
  ColorSyncProfileSetHeader(a1, v76);
  CFRelease(v76);
  v77 = (_QWORD *)v40[20];
  length[0] = 0;
  for (j = 0; v77; v77 = (_QWORD *)v77[2])
  {
    (*(void (**)(_QWORD *, _QWORD, time_t *))(*v77 + 24))(v77, 0, length);
    if (j <= LODWORD(length[0]))
      j = length[0];
  }
  if (((j + 3) & 0xFFFFFFFC) >= j)
    v79 = 0;
  else
    v79 = 4294967246;
  CMMThrowExceptionOnError(v79);
  v80 = (UInt8 *)CMMBase::NewInternal((j + 3) & 0xFFFFFFFC, (_QWORD **)v40[3]);
  for (k = v40[20]; k; k = *(_QWORD *)(k + 16))
  {
    v82 = *(_DWORD *)(k + 8);
    (*(void (**)(uint64_t, _QWORD, time_t *))(*(_QWORD *)k + 24))(k, 0, length);
    (*(void (**)(uint64_t, UInt8 *, time_t *))(*(_QWORD *)k + 24))(k, v80, length);
    v83 = CFDataCreate(0, v80, length[0]);
    if (v83)
    {
      SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(v82);
      ColorSyncProfileSetTag(a1, SignatureFromFourCharCode, v83);
      CFRelease(SignatureFromFourCharCode);
      CFRelease(v83);
    }
  }
  CMMBase::operator delete((pthread_mutex_t **)v80);
  v85 = *((_DWORD *)v40 + 2) - 1;
  *((_DWORD *)v40 + 2) = v85;
  if (!v85)
    (*(void (**)(_QWORD *))(*v40 + 8))(v40);
  if (v97)
  {
    v86 = *v97;
    if (*v97)
    {
      do
      {
        v87 = (_QWORD *)*v86;
        free(v86);
        v86 = v87;
      }
      while (v87);
    }
  }
  CMMMemMgr::ReleaseMemList((void **)&v97);
  return 1;
}

void sub_18B3E5378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  CMMTag *v21;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  if (a2)
  {
    CMMTag::~CMMTag(v21);
    ConversionManager::~ConversionManager((ConversionManager *)&a21);
    __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      if (a11)
      {
        v24 = *a11;
        if (*a11)
        {
          do
          {
            v25 = (_QWORD *)*v24;
            free(v24);
            v24 = v25;
          }
          while (v25);
        }
      }
      __cxa_end_catch();
      JUMPOUT(0x18B3E5268);
    }
    if (a11)
    {
      v26 = *a11;
      if (*a11)
      {
        do
        {
          v27 = (_QWORD *)*v26;
          free(v26);
          v26 = v27;
        }
        while (v27);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x18B3E5264);
  }
  _Unwind_Resume(exception_object);
}

void sub_18B3E54B4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  JUMPOUT(0x18B3E53C4);
}

uint64_t CMMTextDescTag::CMMTextDescTag(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v4;

  *(_QWORD *)a1 = off_1E215FD20;
  *(_DWORD *)(a1 + 8) = 1684370275;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  if (a3)
    *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)a1 = off_1E215D210;
  *(_QWORD *)(a1 + 32) = 116;
  v4 = CMMBase::NewInternal(0x74uLL, a2);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = 1;
  *(_DWORD *)v4 = 1668506980;
  *((_DWORD *)v4 + 2) = 419430400;
  strcpy((char *)v4 + 12, "Apple CMM DevLinkProfile");
  return a1;
}

void sub_18B3E556C(_Unwind_Exception *a1)
{
  CMMTag *v1;

  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void *reallocate(void *a1, size_t a2, unint64_t a3, void *a4)
{
  return malloc_type_realloc(a1, a2, 0x2E4EAA0AuLL);
}

BOOL AppleCMMApplyTransform(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, unsigned int a6, unsigned int a7, uint64_t a8, unint64_t a9, void *a10, uint64_t a11, uint64_t a12, const __CFDictionary *a13)
{
  const UInt8 *CMMStorage;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  CMMStorage = GetCMMStorage((const __CFData **)a1);
  if ((_DWORD)a11 == 8)
  {
    v22 = 4;
  }
  else
  {
    if (a1)
      v23 = *(_QWORD *)(a1 + 88);
    else
      v23 = 0;
    if ((a11 & 0x1F00000000) != 0)
      ++v23;
    if ((a11 - 1) > 6)
      v24 = 0;
    else
      v24 = qword_18B43CE00[(a11 - 1)];
    v22 = v24 * v23;
  }
  if (a6 == 8)
    return DoApplyTransform((uint64_t)CMMStorage, a2, a3, a4, a5, 8u, a7, a8, 4, a9, a10, a11, a12, v22, a13);
  if (a1)
    v26 = *(_QWORD *)(a1 + 96);
  else
    v26 = 0;
  if ((a7 & 0x1F) != 0)
    ++v26;
  if (a6 - 1 > 6)
    v27 = 0;
  else
    v27 = qword_18B43CE00[a6 - 1];
  return DoApplyTransform((uint64_t)CMMStorage, a2, a3, a4, a5, a6, a7, a8, v27 * v26, a9, a10, a11, a12, v22, a13);
}

CFTypeRef create_ACESCGLinearProfile()
{
  if (create_ACESCGLinearProfile_predicate != -1)
    dispatch_once(&create_ACESCGLinearProfile_predicate, &__block_literal_global_133);
  return CFRetain((CFTypeRef)create_ACESCGLinearProfile_profile);
}

CFTypeRef create_DCIP3Profile()
{
  if (create_DCIP3Profile_predicate != -1)
    dispatch_once(&create_DCIP3Profile_predicate, &__block_literal_global_135);
  return CFRetain((CFTypeRef)create_DCIP3Profile_profile);
}

CFTypeRef create_WebSafeColorsProfile()
{
  if (create_WebSafeColorsProfile_predicate != -1)
    dispatch_once(&create_WebSafeColorsProfile_predicate, &__block_literal_global_163);
  return CFRetain((CFTypeRef)create_WebSafeColorsProfile_profile);
}

CFTypeRef create_PerceptualStandardRGBProfile()
{
  if (create_PerceptualStandardRGBProfile_predicate != -1)
    dispatch_once(&create_PerceptualStandardRGBProfile_predicate, &__block_literal_global_157);
  return CFRetain((CFTypeRef)create_PerceptualStandardRGBProfile_profile);
}

CFAllocatorRef __colorSyncBytesDeallocator_block_invoke()
{
  CFAllocatorRef result;

  result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE38], &context);
  colorSyncBytesDeallocator_colorSyncAllocator = (uint64_t)result;
  return result;
}

void *allocate(size_t a1)
{
  return malloc_type_malloc(a1, 0xF6D8049FuLL);
}

void *reallocate(void *a1, size_t a2)
{
  return malloc_type_realloc(a1, a2, 0xBA37827AuLL);
}

unint64_t XXH64(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = 0;
  v2 = 0x27D4EB2F165667D5;
  do
  {
    v2 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * *(_QWORD *)(a1 + v1), 33)) ^ v2, 37);
    v1 += 8;
  }
  while (v1 != 16);
  v3 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v3 ^ HIDWORD(v3);
}

ColorSyncProfileRef __get_dciP3_profile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncDCIP3Profile);
  get_dciP3_profile_dciP3 = (uint64_t)result;
  return result;
}

ColorSyncProfileRef __get_itu2020_profile_block_invoke()
{
  ColorSyncProfileRef result;

  result = ColorSyncProfileCreateWithName(kColorSyncITUR2020Profile);
  get_itu2020_profile_itu2020 = (uint64_t)result;
  return result;
}

void fillCurvTable(ColorSyncProfile *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, double *a6, int a7)
{
  uint64_t v12;
  UInt8 *v13;
  const UInt8 *v14;
  unint64_t v15;
  const __CFAllocator *v16;
  char *v17;
  double v18;
  double v19;
  int v20;
  double v21;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  double v32;
  UInt8 *v33;
  const __CFData *v34;
  double v35;
  double v36;
  double v37;
  double v39;
  double v40;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v66 = 0.0;
  v67 = 0.0;
  v68 = 0.0;
  v12 = 2 * a4 + 12;
  v13 = (UInt8 *)malloc_type_calloc(1uLL, v12, 0x71FC3208uLL);
  if (!v13)
    return;
  v14 = v13;
  v61 = a7;
  v15 = 0;
  *(_DWORD *)v13 = 1987212643;
  *((_DWORD *)v13 + 2) = bswap32(a4);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v17 = (char *)(v13 + 10);
  do
  {
    v18 = a6[v15];
    if (v18 < 2.25)
    {
      v19 = 2.2;
      if (v18 > 2.15)
        goto LABEL_5;
    }
    v21 = 0.0;
    if (v18 >= 1.85 || v18 <= 1.75)
    {
      if (v18 >= 1.05 || v18 <= 0.95)
      {
        if (v18 <= 1.8)
        {
          v20 = 0;
          if (!a4)
            goto LABEL_33;
          goto LABEL_20;
        }
        v19 = a6[v15];
LABEL_5:
        if ((v19 + -1.8) * 0.04045 / 0.4 <= 0.0)
        {
          v21 = 0.0;
          v20 = 1;
          v18 = v19;
          if (!a4)
            goto LABEL_33;
        }
        else
        {
          v20 = 1;
          v18 = v19;
          v21 = (v19 + -1.8) * 0.0773993808 / 0.4;
          if (!a4)
            goto LABEL_33;
        }
        goto LABEL_20;
      }
      v20 = 0;
      v18 = 1.0;
      if (!a4)
        goto LABEL_33;
    }
    else
    {
      v20 = 0;
      v18 = 1.8;
      if (!a4)
        goto LABEL_33;
    }
LABEL_20:
    v23 = 0;
    v24 = a3 - 1;
    if (v15 < a3)
      v24 = v15;
    v25 = a4 + a4 * v24 - 1;
    v26 = a4;
    do
    {
      v27 = v26 - 1;
      v28 = vcvtmd_u64_f64(v21 * (double)(v26 - 1) / (double)a4 * 65535.0 + 0.5);
      if (v28 >= 0xFFFF)
        v28 = 0xFFFF;
      if (a5 == 1)
        v29 = *(unsigned __int8 *)(a2 + v25) | (*(unsigned __int8 *)(a2 + v25) << 8);
      else
        v29 = *(unsigned __int16 *)(a2 + 2 * v25);
      v30 = v28 & ~(v28 >> 31);
      v31 = v29 <= (unsigned __int16)v30;
      if (v29 <= (unsigned __int16)v30)
        v29 = (unsigned __int16)v30;
      if ((v23 & 1) == 0)
        v30 = v29;
      v23 |= v31;
      *(_WORD *)&v17[2 * v26] = bswap32(v30) >> 16;
      --v25;
      --v26;
    }
    while (v27);
LABEL_33:
    v32 = 0.0;
    if (v20)
      v32 = (v18 + -1.8) * 0.04045 / 0.4;
    *(&v66 + v15) = v32;
    v33 = (UInt8 *)v14;
    v34 = CFDataCreateWithBytesNoCopy(0, v14, v12, v16);
    ColorSyncProfileSetTag(a1, off_1E21629A0[v15], v34);
    if (v34)
      CFRelease(v34);
    ++v15;
    v14 = v33;
  }
  while (v15 != 3);
  if (v61)
  {
    v35 = *a6;
    v36 = 2.2;
    if (*a6 >= 2.25 || (v37 = 2.2, v35 <= 2.15))
    {
      if (v35 >= 1.85 || v35 <= 1.75)
      {
        if (v35 > 0.95 && v35 < 1.05)
          v37 = 1.0;
        else
          v37 = *a6;
      }
      else
      {
        v37 = 1.8;
      }
    }
    v39 = a6[1];
    if (v39 >= 2.25 || (v40 = 2.2, v39 <= 2.15))
    {
      if (v39 >= 1.85 || v39 <= 1.75)
      {
        if (v39 > 0.95 && v39 < 1.05)
          v40 = 1.0;
        else
          v40 = a6[1];
      }
      else
      {
        v40 = 1.8;
      }
    }
    v42 = a6[2];
    if (v42 >= 2.25 || v42 <= 2.15)
    {
      if (v42 >= 1.85 || v42 <= 1.75)
      {
        v43 = v42 > 0.95 && v42 < 1.05;
        v36 = 1.0;
        if (!v43)
          v36 = a6[2];
      }
      else
      {
        v36 = 1.8;
      }
    }
    v44 = 1.8;
    if (v37 > 1.8)
      v44 = (v37 + -1.8) * 0.6 / 0.4 + 1.8;
    v45 = 1.8;
    if (v40 > 1.8)
      v45 = (v40 + -1.8) * 0.6 / 0.4 + 1.8;
    v46 = 1.8;
    if (v36 > 1.8)
      v46 = (v36 + -1.8) * 0.6 / 0.4 + 1.8;
    v47 = 0.0;
    v48 = 0.0;
    if (v37 > 1.8)
      v48 = (v37 + -1.8) * 0.0521327014 / 0.4;
    if (v40 > 1.8)
      v47 = (v40 + -1.8) * 0.0521327014 / 0.4;
    v49 = 0.0;
    v50 = 0.0;
    if (v36 > 1.8)
      v50 = (v36 + -1.8) * 0.0521327014 / 0.4;
    if (v37 > 1.8)
      v49 = (v37 + -1.8) * 0.0521327014 / 0.4;
    v51 = 0.0;
    v52 = 0.0;
    if (v40 > 1.8)
      v52 = (v40 + -1.8) * 0.0521327014 / 0.4;
    if (v36 > 1.8)
      v51 = (v36 + -1.8) * 0.0521327014 / 0.4;
    v53 = 0.0;
    v54 = 0.0;
    if (v37 > 1.8 && v66 > 0.0)
      v54 = (v37 + -1.8) * 0.0773993808 / 0.4;
    v55 = v67;
    if (v40 > 1.8 && v67 > 0.0)
      v53 = (v40 + -1.8) * 0.0773993808 / 0.4;
    v56 = v68;
    v57 = 0.0;
    v65 = v51;
    v62 = v53;
    v58 = v46;
    if (v36 > 1.8 && v68 > 0.0)
      v57 = (v36 + -1.8) * 0.0773993808 / 0.4;
    v59 = 1.0 - v50;
    v60 = 1.0 - v47;
    ColorSyncProfileSetParametricTRCTag(a1, CFSTR("aarg"), 3u, v44, 1.0 - v48, v49, v54, v66, 0.0, 0.0);
    ColorSyncProfileSetParametricTRCTag(a1, CFSTR("aagg"), 3u, v45, v60, v52, v62, v55, 0.0, 0.0);
    ColorSyncProfileSetParametricTRCTag(a1, CFSTR("aabg"), 3u, v58, v59, v65, v57, v56, 0.0, 0.0);
  }
  free(v33);
}

void inverseNativeGammaLookup(uint64_t a1, long double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  _WORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  __int16 v31;
  double v32;
  long double v33;

  v12 = *(unsigned __int16 *)(a1 + 328);
  if (!*(_WORD *)(a1 + 328) || !*(_BYTE *)(a1 + 360))
  {
    *a2 = pow(*a2, 1.0 / *(double *)(a1 + 64));
    v33 = 1.0 / *(double *)(a1 + 80);
    a2[1] = pow(a2[1], v33);
    a2[2] = pow(a2[2], v33);
    return;
  }
  v13 = 0;
  v14 = *(unsigned __int16 *)(a1 + 330);
  v15 = *(unsigned __int16 *)(a1 + 332);
  v16 = *(_QWORD *)(a1 + 336);
  v17 = 16.0;
  if (v15 == 2)
    v17 = 4112.0;
  v18 = (double)(v14 - 1);
  v19 = v17 * v18;
  do
  {
    if ((_WORD)v14 == 1)
      goto LABEL_32;
    v20 = a2[v13];
    if (v13 >= v12)
      v21 = v12 - 1;
    else
      v21 = v13;
    v22 = v21 * v14;
    v23 = v16 - 1 + v22;
    v24 = (_WORD *)(v16 + 2 * ((unsigned __int16)(v14 - 1) + (uint64_t)v22));
    v25 = v14 - (unsigned __int16)(v14 - 1);
    v26 = (unsigned __int16)(v14 - 1);
    while (1)
    {
      if (v15 == 1)
      {
        LOBYTE(a10) = *(_BYTE *)(v23 + v26);
        *(double *)&v27 = (double)*(unint64_t *)&a10;
        v28 = *(double *)&v27 / 255.0;
        LOBYTE(v27) = *(_BYTE *)(v23 + v26 + 1);
        v29 = (double)v27 / 255.0;
      }
      else
      {
        LOWORD(a10) = *(v24 - 1);
        *(double *)&v30 = (double)*(unint64_t *)&a10;
        v28 = *(double *)&v30 / 65535.0;
        LOWORD(v30) = *v24;
        v29 = (double)v30 / 65535.0;
      }
      v31 = v26 - 1;
      a10 = (double)((int)v26 - 1);
      if (v28 < a10 / v19)
        v28 = a10 / v19;
      v32 = (double)(unsigned __int16)v26;
      if (v28 > 1.0 - (double)v25 / v19)
        v28 = 1.0 - (double)v25 / v19;
      if (v29 < v32 / v19)
        v29 = v32 / v19;
      if (v29 > 1.0 - (double)(v25 - 1) / v19)
        v29 = 1.0 - (double)(v25 - 1) / v19;
      if (v20 == v28)
        break;
      if (v20 == v29)
        goto LABEL_30;
      if (v28 < v20 && v29 > v20)
      {
        a10 = (v20 - v28) / (v29 - v28) + a10;
        break;
      }
LABEL_28:
      ++v25;
      --v24;
      --v26;
      if (!v31)
        goto LABEL_32;
    }
    v32 = a10;
    if (a10 == -1.0)
      goto LABEL_28;
LABEL_30:
    if (v32 / v18 != -1.0)
      a2[v13] = v32 / v18;
LABEL_32:
    ++v13;
  }
  while (v13 != 3);
}

double applyParametricGamma(uint64_t a1, long double a2)
{
  double v2;
  double v4;
  double v5;
  long double v6;
  double v7;
  double v8;
  double result;
  double v10;
  double v11;

  v2 = 0.0;
  switch(*(_WORD *)a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v5 = *(double *)(a1 + 16);
      v4 = *(double *)(a1 + 24);
      if (-v4 / v5 > a2)
        goto LABEL_16;
      a2 = v4 + v5 * a2;
LABEL_4:
      v6 = *(double *)(a1 + 8);
      goto LABEL_13;
    case 2:
      v8 = *(double *)(a1 + 16);
      v7 = *(double *)(a1 + 24);
      if (-v7 / v8 > a2)
      {
        v2 = *(double *)(a1 + 32);
        goto LABEL_16;
      }
      v10 = pow(v7 + v8 * a2, *(long double *)(a1 + 8));
      v11 = *(double *)(a1 + 32);
      goto LABEL_15;
    case 3:
      if (*(double *)(a1 + 40) > a2)
      {
        v2 = *(double *)(a1 + 32) * a2;
        goto LABEL_16;
      }
      v6 = *(double *)(a1 + 8);
      a2 = *(double *)(a1 + 24) + *(double *)(a1 + 16) * a2;
LABEL_13:
      result = pow(a2, v6);
      break;
    case 4:
      if (*(double *)(a1 + 40) <= a2)
      {
        v10 = pow(*(double *)(a1 + 24) + *(double *)(a1 + 16) * a2, *(long double *)(a1 + 8));
        v11 = *(double *)(a1 + 48);
LABEL_15:
        v2 = v10 + v11;
LABEL_16:
        result = v2;
      }
      else
      {
        result = *(double *)(a1 + 56) + *(double *)(a1 + 32) * a2;
      }
      break;
    default:
      goto LABEL_16;
  }
  return result;
}

void ColorSyncTransformShowSteps(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID v9;
  uint64_t colorsync_transform_steps_info;
  const void *v11;

  if (!cf)
    goto LABEL_7;
  v9 = CFGetTypeID(cf);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v9 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID
    && (colorsync_transform_steps_info = create_colorsync_transform_steps_info((uint64_t)cf)) != 0)
  {
    v11 = (const void *)colorsync_transform_steps_info;
    ColorSyncLog(3, (uint64_t)"%@", a3, a4, a5, a6, a7, a8, colorsync_transform_steps_info);
    CFRelease(v11);
  }
  else
  {
LABEL_7:
    ColorSyncLog(3, (uint64_t)"Nothing to show for <%p> ColorSyncTransform", a3, a4, a5, a6, a7, a8, (char)cf);
  }
}

uint64_t create_colorsync_transform_steps_info(uint64_t a1)
{
  uint64_t *v1;
  const __CFString *v2;
  CFIndex Length;
  const void *v4;
  uint64_t v5;
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[7];
  _QWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[28];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x6800000000;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __create_colorsync_transform_steps_info_block_invoke;
  v10[3] = &unk_1E21629C0;
  v10[4] = v11;
  v10[5] = &v16;
  v10[6] = a1;
  v8[5] = v11;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __create_colorsync_transform_steps_info_block_invoke_2;
  v9[3] = &unk_1E21629E8;
  v9[4] = &v16;
  v9[5] = v11;
  v7[5] = v11;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __create_colorsync_transform_steps_info_block_invoke_3;
  v8[3] = &unk_1E2162A10;
  v8[4] = &v16;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __create_colorsync_transform_steps_info_block_invoke_4;
  v7[3] = &unk_1E2162A38;
  v7[4] = &v16;
  if ((ColorSyncTransformIterate(a1, 0, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7) & 1) != 0)
  {
    v1 = v17;
    v2 = (const __CFString *)v17[3];
    if (v2)
    {
      Length = CFStringGetLength(v2);
      v1 = v17;
      if (Length >= 1)
      {
        CFStringAppend((CFMutableStringRef)v17[3], CFSTR("---------------------------------------------------------------------------------\n"));
        v1 = v17;
      }
    }
  }
  else
  {
    fwrite("create_colorsync_transform_steps_info: no steps\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v1 = v17;
    v4 = (const void *)v17[3];
    if (v4)
    {
      CFRelease(v4);
      v1 = v17;
    }
    v1[3] = 0;
  }
  v5 = v1[3];
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v16, 8);
  return v5;
}

__CFString *__create_colorsync_transform_steps_info_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const __CFAllocator *v10;
  __CFString *result;
  CFStringRef v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFDictionary *MutableCopy;
  CFStringRef v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 84) = v9;
  *(_OWORD *)(v6 + 72) = v7;
  *(_OWORD *)(v6 + 56) = v8;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  v10 = CFGetAllocator(*(CFTypeRef *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFStringCreateMutable(v10, 0);
  result = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (result)
  {
    CFStringAppend(result, CFSTR("\n*************************************************************************\n"));
    CFStringAppendFormat(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0, CFSTR("\nColorSyncTransform show steps\n"));
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("\n*************************************************************************\n"));
    v12 = CFCopyDescription(*(CFTypeRef *)(a1 + 48));
    CFStringAppendFormat(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0, CFSTR("ColorSyncTransform info:\n %@\n"), v12);
    CFRelease(v12);
    v13 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v14 = *(_QWORD *)(a2 + 4);
    v15 = *(_QWORD *)(a2 + 12);
    v16 = *(_QWORD *)(a2 + 20);
    v17 = *(_QWORD *)(a2 + 28);
    v18 = *(_QWORD *)(a2 + 36);
    v19 = *(_QWORD *)(a2 + 44);
    CFStringAppendFormat(v13, 0, CFSTR("    %d stages\n"), v14);
    CFStringAppendFormat(v13, 0, CFSTR("    %d input components\n"), v15);
    CFStringAppendFormat(v13, 0, CFSTR("    %d output components\n"), v16);
    CFStringAppendFormat(v13, 0, CFSTR("    %d TRCs\n"), v17);
    CFStringAppendFormat(v13, 0, CFSTR("    %d Matrices\n"), v18);
    CFStringAppendFormat(v13, 0, CFSTR("    %d NxM Transforms\n"), v19);
    if (CFDictionaryContainsKey(a3, CFSTR("com.apple.cmm.ProfileSequence")) == 1)
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a3);
      CFDictionarySetValue(MutableCopy, CFSTR("com.apple.cmm.ProfileSequence"), CFSTR(" included "));
      v21 = CFCopyDescription(MutableCopy);
      CFRelease(MutableCopy);
    }
    else
    {
      v21 = CFCopyDescription(a3);
    }
    CFStringAppendFormat(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0, CFSTR("ColorSyncTransformIterate hints:\n%@\n"), v21);
    CFRelease(v21);
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("----------------------------------------\n"));
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("               STAGES \n"));
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), CFSTR("----------------------------------------\n"));
    return (__CFString *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0);
  }
  return result;
}

uint64_t __create_colorsync_transform_steps_info_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  const char *v12;
  char v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  float v30;

  v6 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 76);
  CFStringAppendFormat(v6, 0, CFSTR("Stage = %ld, %ld TRCs\n"), a2, a3);
  if (a3 >= 1)
  {
    v8 = 0;
    do
    {
      v30 = 0.0;
      v28 = 0u;
      v29 = 0u;
      ColorSyncTRCGetFunction(*(_QWORD *)(v7 + 8 * *(_QWORD *)(a4 + 8 * v8)), (uint64_t)&v28);
      v9 = ColorSyncTRCGetGammaID(*(unsigned int **)(v7 + 8 * *(_QWORD *)(a4 + 8 * v8)));
      if (v9 >= 0x12)
        __assert_rtn("gamma_id_by_name", "ColorSyncTransformShowSteps.c", 220, "0");
      v10 = v28;
      v11 = (v28 - 6) >= 4 && v28 >= 5uLL;
      v12 = "NO";
      if (!v11)
        v12 = "YES";
      CFStringAppendFormat(v6, 0, CFSTR("    TRC channel %d --> TRCs[%ld], parametric = %s gammaID = %s\n"), v8, *(_QWORD *)(a4 + 8 * v8), v12, off_1E2162A58[v9]);
      v13 = ColorSyncTRCGetProperties(*(unsigned int **)(v7 + 8 * *(_QWORD *)(a4 + 8 * v8)));
      switch(v10)
      {
        case 0:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tType0: Y = X^% 3.10f \n"), *((float *)&v28 + 1), v21, v22, v23, v24, v25, v26, v27);
          break;
        case 1:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tType1: Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), v25, v26, v27);
          break;
        case 2:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tType2: Y = (%g*X+%g)^%g + % 3.10f [X >= %g],  Y = %g [X < %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), *(float *)&v29, (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), *(float *)&v29, (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), v27);
          break;
        case 3:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tType3: Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), *((float *)&v29 + 1), *(float *)&v29, *((float *)&v29 + 1), v26, v27);
          break;
        case 4:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tType4: Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), *((float *)&v29 + 2), *((float *)&v29 + 1), *(float *)&v29, *((float *)&v29 + 3), *((float *)&v29 + 1));
          break;
        case 5:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tTable: entries = %zu\n"), *(_QWORD *)((char *)&v28 + 4));
          CFStringAppendFormat(v6, 0, CFSTR("\t\t\tColorSyncBoundaryExtension neg: slope = %g intercept = %g\n"), *((float *)&v29 + 3), v30);
          CFStringAppendFormat(v6, 0, CFSTR("\t\t\tColorSyncBoundaryExtension pos: slope = %g intercept = %g\n"), *((float *)&v29 + 1), *((float *)&v29 + 2), v22, v23, v24, v25, v26, v27);
          break;
        case 6:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tPQ_EOTF_Type: Y = Reference_PQ_EOTF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v26, v27);
          break;
        case 7:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tPQ_InvEOTF_Type: Y = Reference_PQ_InvEOTF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g, g = %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v30, v27);
          break;
        case 8:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tHLG_InvOETF_Type: Y = Reference_HLG_InvOETF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v26, v27);
          break;
        case 9:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tHLG_OETF_Type: Y = Reference_HLG_OETF(X)  [a = %g, b = %g, c = %g, d = %g e = %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), v25, v26, v27);
          break;
        case 10:
          CFStringAppendFormat(v6, 0, CFSTR("\t\tEXRToneMap_Type: Y = EXR Tone Mapping Gamma(X)  [defog = %g, exposure_scale = %g, kneeLow = %g, kneeHigh = %g, intermediate_gamma = %g, intensity_scale = %g]\n"), *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v26, v27);
          break;
        default:
          break;
      }
      append_properties_info(v6, v13);
      v14 = *(float **)(v7 + 8 * *(_QWORD *)(a4 + 8 * v8));
      v15 = ColorSyncTRCGetInputRange(v14);
      v17 = v16;
      v18 = ColorSyncTRCGetOutputRange(v14);
      CFStringAppendFormat(v6, 0, CFSTR("\t\tInput range: [%+g, %+g] Output range: [%+g, %+g]\n"), v15, v17, v18, v19);
      ++v8;
    }
    while (a3 != v8);
  }
  return 1;
}

uint64_t __create_colorsync_transform_steps_info_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v5;
  uint64_t v6;
  _OWORD *v7;
  char Properties;
  uint64_t i;
  uint64_t j;
  float *v11;
  float InputRange;
  float v13;
  float v14;
  float OutputRange;
  float v16;
  _OWORD v18[3];

  v5 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 84);
  memset(v18, 0, sizeof(v18));
  v7 = v18;
  ColorSyncMatrixGetFunction(*(_QWORD *)(v6 + 8 * a3), (uint64_t)v18);
  Properties = ColorSyncMatrixGetProperties(*(unsigned int **)(v6 + 8 * a3));
  CFStringAppendFormat(v5, 0, CFSTR("Stage = %ld, matrix index = %ld\n"), a2, a3);
  for (i = 0; i != 3; ++i)
  {
    CFStringAppend(v5, CFSTR("\t"));
    for (j = 0; j != 16; j += 4)
      CFStringAppendFormat(v5, 0, CFSTR("% 3.10f "), *(float *)((char *)v7 + j));
    CFStringAppend(v5, CFSTR("\n"));
    ++v7;
  }
  append_properties_info(v5, Properties);
  v11 = *(float **)(v6 + 8 * a3);
  InputRange = ColorSyncMatrixGetInputRange(v11);
  v14 = v13;
  OutputRange = ColorSyncMatrixGetOutputRange(v11);
  CFStringAppendFormat(v5, 0, CFSTR("\t\tInput range: [%+g, %+g] Output range: [%+g, %+g]\n"), InputRange, v14, OutputRange, v16);
  return 1;
}

uint64_t __create_colorsync_transform_steps_info_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  const __CFString *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  _OWORD v42[3];

  v5 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 92);
  memset(v42, 0, 36);
  ColorSyncNxMGetFunction(*(_QWORD *)(v6 + 8 * a3), (uint64_t)v42);
  v7 = ColorSyncNxMGetProperties(*(unsigned int **)(v6 + 8 * a3));
  v8 = v42[0];
  v9 = "?";
  if (LODWORD(v42[0]) <= 0xC)
    v9 = off_1E2162AE8[LODWORD(v42[0])];
  CFStringAppendFormat(v5, 0, CFSTR("Stage = %ld, %zu inputs x %zu outputs %s index = %ld\n"), a2, *(_OWORD *)((char *)v42 + 4), v9, a3);
  switch(v8)
  {
    case 7u:
      v10 = *(_DWORD *)(*(_QWORD *)((char *)&v42[1] + 12) + 24);
      v11 = "HLG Inverted OOTF";
      if (v10 != 1)
        v11 = "?";
      if (v10)
        v12 = v11;
      else
        v12 = "HLG OOTF";
      CFStringAppendFormat(v5, 0, CFSTR("\tHLG Luminance scaling (%s) params: \n\t\tgamma = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n"), v12, **(float **)((char *)&v42[1] + 12), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 4), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 8), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 12), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 16), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 20));
      break;
    case 8u:
      CFStringAppendFormat(v5, 0, CFSTR("\tHLG Scene Referred Mapping params: \n\t\tgamma = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n"), **(float **)((char *)&v42[1] + 12), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 4), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 8), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 12), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 16), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 20));
      break;
    case 9u:
      v13 = **(float **)((char *)&v42[1] + 12);
      v14 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 4);
      v15 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 8);
      v16 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 12);
      v40 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 64);
      v41 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 68);
      v38 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 56);
      v39 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 60);
      v36 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 40);
      v37 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 44);
      v34 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 32);
      v35 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 36);
      v32 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 24);
      v33 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 28);
      v30 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 16);
      v31 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 20);
      v17 = CFSTR("\tPQ tone mapping params:\n\t\tparams->pq_eotf.m1 = % 3.10f\n\t\tparams->pq_eotf.m2 = % 3.10f\n\n\t\tparams->pq_eotf.c1 = % 3.10f\n\t\tparams->pq_eotf.c2 = % 3.10f\n\t\tparams->pq_eotf.c3 = % 3.10f\n\n\t\tparams->pq_eetf.masterPeakInv = % 3.10f\n\t\tparams->pq_eetf.masterBlackInv = % 3.10f\n\t\tparams->pq_eetf.maxLum = % 3.10f\n\t\tparams->pq_eetf.minLum = % 3.10f\n\t\tparams->pq_eetf.KneeStart = % 3.10f\n\t\tparams->pq_eetf.KneeStartScale = % 3.10f\n\t\tparams->pq_eetf.optical_scale = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n");
      goto LABEL_14;
    case 0xAu:
      v13 = **(float **)((char *)&v42[1] + 12);
      v14 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 4);
      v15 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 8);
      v16 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 12);
      v33 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 32);
      v34 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 36);
      v31 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 24);
      v32 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 28);
      v30 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 20);
      v17 = CFSTR("\tReference White Tone Mapping params:\n\t\tluminance scale = % 3.10f\n\t\tadjusted source headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\ttarget reference white = % 3.10f\n\t\tcofficient a = % 3.10f\n\t\tcofficient b = % 3.10f\n\t\tcofficient c = % 3.10f\n\t\tcofficient d = % 3.10f\n\t\tcofficient e = % 3.10f\n");
      goto LABEL_14;
    case 0xBu:
      v13 = **(float **)((char *)&v42[1] + 12);
      v14 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 4);
      v15 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 8);
      v16 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 12);
      v33 = *(double *)(*(_QWORD *)((char *)&v42[1] + 12) + 28);
      *(_QWORD *)&v34 = *(_QWORD *)((char *)&v42[1] + 12) + 36;
      v31 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 20);
      v32 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 24);
      v30 = *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 16);
      v17 = CFSTR("\tFlex Luminance Scaling params:\n\t\tsource headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\tcoefficients[0] = % 3.10f\n\t\tcoefficients[1] = % 3.10f\n\t\tcoefficients[2] = % 3.10f\n\t\tcoefficients[3] = % 3.10f\n\t\tcoefficients[4] = % 3.10f\n\t\tFlexGTCTableCount = %zu\n\t\tFlexGTCTable = %p\n");
LABEL_14:
      CFStringAppendFormat(v5, 0, v17, *(_QWORD *)&v13, *(_QWORD *)&v14, *(_QWORD *)&v15, *(_QWORD *)&v16, *(_QWORD *)&v30, *(_QWORD *)&v31, *(_QWORD *)&v32, *(_QWORD *)&v33, *(_QWORD *)&v34, *(_QWORD *)&v35, *(_QWORD *)&v36, *(_QWORD *)&v37, *(_QWORD *)&v38, *(_QWORD *)&v39, *(_QWORD *)&v40, *(_QWORD *)&v41);
      break;
    case 0xCu:
      CFStringAppendFormat(v5, 0, CFSTR("\tLuminance scaling params: \n\t\tgamma = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n"), **(float **)((char *)&v42[1] + 12), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 4), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 8), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 12), *(float *)(*(_QWORD *)((char *)&v42[1] + 12) + 16));
      break;
    default:
      if (v8 > 6)
        CFStringAppendFormat(v5, 0, CFSTR("\t\tUnknown format\n\n"), v25, v26, v27, v28, v29);
      else
        CFStringAppendFormat(v5, 0, CFSTR("\t\tGrid point count = %zu\n\n"), *(_QWORD *)((char *)&v42[1] + 4), v26, v27, v28, v29);
      break;
  }
  append_properties_info(v5, v7);
  v18 = *(float **)(v6 + 8 * a3);
  v19 = ColorSyncNxMGetInputRange(v18);
  v21 = v20;
  v22 = ColorSyncNxMGetOutputRange(v18);
  CFStringAppendFormat(v5, 0, CFSTR("\t\tInput range: [%+g, %+g] Output range: [%+g, %+g]\n"), v19, v21, v22, v23);
  return 1;
}

void append_properties_info(__CFString *a1, char a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;

  v2 = "Yes";
  if ((a2 & 1) != 0)
    v3 = "Yes";
  else
    v3 = "No";
  if ((a2 & 2) != 0)
    v4 = "Yes";
  else
    v4 = "No";
  if ((a2 & 4) != 0)
    v5 = "Yes";
  else
    v5 = "No";
  if ((a2 & 8) != 0)
    v6 = "Yes";
  else
    v6 = "No";
  if ((a2 & 0x10) == 0)
    v2 = "No";
  CFStringAppendFormat(a1, 0, CFSTR("\t\tProperties:\n\t\t\t\tkColorSyncFunctionSignedReflection  = %s\n\t\t\t\tkColorSyncFunctionOutputClamp       = %s\n\t\t\t\tkColorSyncFunctionInputClamp        = %s\n\t\t\t\tkColorSyncMatrixOnlyFirstInputChannelActive  = %s\n\t\t\t\tkColorSyncMatrixOnlyFirstOutputChannelActive = %s\n\n"), v3, v4, v5, v6, v2);
}

void ColorSyncTransformDumpStepsToFile(CFTypeRef cf, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID v10;
  uint64_t colorsync_transform_steps_info;
  const __CFString *v12;
  const char *CStringPtr;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  FILE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  FILE *v31;
  size_t v32;
  const char *v33;
  char __str[1025];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!cf)
    goto LABEL_14;
  v10 = CFGetTypeID(cf);
  if (ColorSyncTransformGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_167);
  if (v10 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID
    && (colorsync_transform_steps_info = create_colorsync_transform_steps_info((uint64_t)cf)) != 0)
  {
    v12 = (const __CFString *)colorsync_transform_steps_info;
    if (a2 && strlen(a2) > 2)
    {
      bzero(__str, 0x401uLL);
      if (!strncmp(a2, "*/", 2uLL))
      {
        if (ColorSyncGetTempDirPath_predicate != -1)
          dispatch_once(&ColorSyncGetTempDirPath_predicate, &__block_literal_global_533);
        v33 = a2 + 2;
        a2 = __str;
        snprintf(__str, 0x400uLL, "%s%s", &ColorSyncGetTempDirPath_tempDirPath, v33);
      }
      CStringPtr = CFStringGetCStringPtr(v12, 0x8000100u);
      if (CStringPtr)
      {
        v14 = CStringPtr;
        v15 = 0;
      }
      else
      {
        Length = CFStringGetLength(v12);
        MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        v15 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0x4AE5701uLL);
        if (v15 && CFStringGetCString(v12, v15, MaximumSizeForEncoding, 0x8000100u))
          v14 = v15;
        else
          v14 = (const char *)&unk_18B51FDEA;
      }
      v24 = fopen(a2, "w");
      if (v24)
      {
        v31 = v24;
        v32 = strlen(v14);
        fwrite(v14, 1uLL, v32, v31);
        fclose(v31);
      }
      if (v15)
        free(v15);
      ColorSyncLog(1, (uint64_t)"%s %s %s", v25, v26, v27, v28, v29, v30, (char)"ColorSyncTransformDumpStepsToFile");
    }
    else
    {
      ColorSyncLog(1, (uint64_t)"%s %s %s", a3, a4, a5, a6, a7, a8, (char)"ColorSyncTransformDumpStepsToFile");
    }
    CFRelease(v12);
  }
  else
  {
LABEL_14:
    ColorSyncLog(1, (uint64_t)"Nothing to show for <%p> ColorSyncTransform", a3, a4, a5, a6, a7, a8, (char)cf);
    ColorSyncLog(1, (uint64_t)"%s %s %s", v16, v17, v18, v19, v20, v21, (char)"ColorSyncTransformDumpStepsToFile");
  }
}

float get_boundary_extension(const __CFDictionary *a1, const void *a2)
{
  const __CFArray *Value;
  const __CFArray *v3;
  CFTypeID v4;
  float float_value;
  const void *ValueAtIndex;
  const void *v7;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0.0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFArrayGetTypeID())
    __assert_rtn("get_boundary_extension", "ColorSyncTransformIteration.c", 301, "CFGetTypeID(array) == CFArrayGetTypeID()");
  float_value = 0.0;
  if (CFArrayGetCount(v3) >= 2)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
    float_value = get_float_value(ValueAtIndex);
    v7 = CFArrayGetValueAtIndex(v3, 1);
    get_float_value(v7);
  }
  return float_value;
}

void __linear_trc_block_invoke()
{
  uint64_t v0;
  uint64_t v1;

  create_trc_data();
  if (v0)
  {
    *(_DWORD *)(v0 + 16) = 0;
    *(_OWORD *)(v0 + 20) = xmmword_18B474698;
    *(_OWORD *)(v0 + 36) = unk_18B4746A8;
    *(_DWORD *)(v0 + 84) = 7;
    *(int64x2_t *)(v0 + 68) = vdupq_n_s64(0x7F7FFFFFFF7FFFFFuLL);
    *(_DWORD *)(v0 + 64) = 0;
    *(_BYTE *)(v0 + 88) = 1;
  }
  linear_trc_linear_no_clamp = v0;
  create_trc_data();
  if (v1)
  {
    *(_DWORD *)(v1 + 16) = 0;
    *(_OWORD *)(v1 + 20) = xmmword_18B474698;
    *(_OWORD *)(v1 + 36) = unk_18B4746A8;
    *(_DWORD *)(v1 + 84) = 7;
    *(_OWORD *)(v1 + 68) = xmmword_18B3EAAE0;
    *(_DWORD *)(v1 + 64) = 2;
    *(_BYTE *)(v1 + 88) = 1;
  }
  linear_trc_linear_clamp = v1;
}

void colorSyncTransformIteratorFinalize(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    if (*(uint64_t *)((char *)a1 + 68) >= 1)
    {
      v2 = 0;
      do
        CFRelease(*(CFTypeRef *)(*(_QWORD *)((char *)a1 + 92) + 8 * v2++));
      while (v2 < *(_QWORD *)((char *)a1 + 68));
    }
    if (*(uint64_t *)((char *)a1 + 76) >= 1)
    {
      v3 = 0;
      do
        CFRelease(*(CFTypeRef *)(*(_QWORD *)((char *)a1 + 100) + 8 * v3++));
      while (v3 < *(_QWORD *)((char *)a1 + 76));
    }
    if (*(uint64_t *)((char *)a1 + 84) >= 1)
    {
      v4 = 0;
      do
        CFRelease(*(CFTypeRef *)(*(_QWORD *)((char *)a1 + 108) + 8 * v4++));
      while (v4 < *(_QWORD *)((char *)a1 + 84));
    }
    v5 = (const void *)a1[2];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)a1[4];
    if (v6)
      CFRelease(v6);
    v7 = (void *)a1[18];
    if (v7)
      free(v7);
    v8 = (void *)a1[19];
    if (v8)
      free(v8);
  }
}

CFStringRef colorSyncTransformIteratorCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<ColorSyncTransformIterator %p>"), a1);
}

CFStringRef colorSyncTransformIteratorCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  const __CFAllocator *v4;

  if (a1)
  {
    v2 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<ColorSyncTransformIterator %p;stepArray:%@;\nproperties:%@TRCs[%ld]:%pmatrices[%ld]:%pnxmLuts[%ld]:%p>"),
             a1,
             a1[2],
             a1[4],
             *(_QWORD *)((char *)a1 + 68),
             a1[15],
             *(_QWORD *)((char *)a1 + 76),
             a1[16],
             *(_QWORD *)((char *)a1 + 84),
             a1[17]);
  }
  else
  {
    v4 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v4, 0, CFSTR("<NULL ColorSyncTransformIterator>"));
  }
}

const void *ColorSyncCreateOutputPoppyProfileForRGBData(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v13;
  _DWORD *v14;
  _BYTE *v15;
  _WORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  double *v19;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  _DWORD *v24;
  _WORD *v25;
  _BYTE *v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  signed int v70;
  uint64_t v71;
  float v72;
  double v73;
  float v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  unsigned int v79;
  uint64_t v80;
  int v81;
  _DWORD v82[3];
  float v83[3];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if ((a6 - 1) >= 6)
    v7 = 3;
  else
    v7 = 4;
  v8 = -1;
  v13 = ((a6 - 1) < 6) & (a6 - 1);
  switch(a5)
  {
    case 2:
      v79 = a5 - 2;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = (_BYTE *)(a1 + v13);
      v18 = v17;
      goto LABEL_9;
    case 3:
      v79 = a5 - 2;
      v14 = 0;
      v15 = 0;
      v18 = 0;
      v17 = (_BYTE *)(a1 + 2 * v13);
      v16 = v17;
      goto LABEL_9;
    case 4:
      v79 = a5 - 2;
      v14 = 0;
      v16 = 0;
      v18 = 0;
      v17 = (_BYTE *)(a1 + 2 * v13);
      v15 = v17;
      goto LABEL_9;
    case 7:
      v79 = a5 - 2;
      v15 = 0;
      v16 = 0;
      v18 = 0;
      v17 = (_BYTE *)(a1 + 4 * v13);
      v14 = v17;
LABEL_9:
      v19 = (double *)malloc_type_calloc(12 * a2 * a3, 1uLL, 0x74C5F996uLL);
      if (!v19)
      {
        v8 = -1;
        return acquire_output_profile(v8);
      }
      if (a3)
      {
        if (v79 >= 3 && a5 != 7)
          __assert_rtn("get_poppy_index_for_data", "ColorSyncPoppyProfile.c", 134, "0");
        v21 = 0;
        if (a2 <= 1)
          v22 = 1;
        else
          v22 = a2;
        v23 = v19 + 1;
        do
        {
          if (a5 == 3)
            v24 = v14;
          else
            v24 = &v17[v21 * a4];
          if (a5 == 3)
            v25 = &v17[v21 * a4];
          else
            v25 = v16;
          if (a5 == 4)
          {
            v24 = v14;
            v26 = &v17[v21 * a4];
          }
          else
          {
            v26 = v15;
          }
          if (a5 == 4)
            v25 = v16;
          if (a5 == 2)
          {
            v18 = &v17[v21 * a4];
          }
          else
          {
            v14 = v24;
            v15 = v26;
            v16 = v25;
          }
          if (a2)
          {
            v27 = v22;
            v28 = v23;
            if (v79 >= 3 && a5 != 7)
              __assert_rtn("get_poppy_index_for_data", "ColorSyncPoppyProfile.c", 165, "0");
            do
            {
              switch(a5)
              {
                case 4:
                  LODWORD(_D2) = *(_DWORD *)v15;
                  *(_QWORD *)&_D2 = vcvtq_f32_f16(*(float16x4_t *)&_D2).u64[0];
                  *(v28 - 1) = _D2;
                  LOWORD(_D2) = *((_WORD *)v15 + 2);
                  __asm { FCVT            S2, H2 }
                  *(_DWORD *)v28 = LODWORD(_D2);
                  v15 += 2 * v7;
                  break;
                case 3:
                  LOWORD(_D2) = *v16;
                  v31 = (double)*(unint64_t *)&_D2 / 65535.0;
                  *(float *)&v31 = v31;
                  *((_DWORD *)v28 - 2) = LODWORD(v31);
                  LOWORD(v31) = v16[1];
                  v32 = (double)*(unint64_t *)&v31 / 65535.0;
                  *(float *)&v32 = v32;
                  *((_DWORD *)v28 - 1) = LODWORD(v32);
                  LOWORD(v32) = v16[2];
                  _D2 = (double)*(unint64_t *)&v32 / 65535.0;
                  *(float *)&_D2 = _D2;
                  *(_DWORD *)v28 = LODWORD(_D2);
                  v16 += v7;
                  break;
                case 2:
                  LOBYTE(_D2) = *v18;
                  v29 = (double)*(unint64_t *)&_D2 / 255.0;
                  *(float *)&v29 = v29;
                  *((_DWORD *)v28 - 2) = LODWORD(v29);
                  LOBYTE(v29) = v18[1];
                  v30 = (double)*(unint64_t *)&v29 / 255.0;
                  *(float *)&v30 = v30;
                  *((_DWORD *)v28 - 1) = LODWORD(v30);
                  LOBYTE(v30) = v18[2];
                  _D2 = (double)*(unint64_t *)&v30 / 255.0;
                  *(float *)&_D2 = _D2;
                  *(_DWORD *)v28 = LODWORD(_D2);
                  v18 += v7;
                  break;
                default:
                  *((_DWORD *)v28 - 2) = *v14;
                  *((_DWORD *)v28 - 1) = v14[1];
                  LODWORD(_D2) = v14[2];
                  *(_DWORD *)v28 = LODWORD(_D2);
                  v14 += v7;
                  break;
              }
              v28 = (double *)((char *)v28 + 12);
              --v27;
            }
            while (v27);
          }
          ++v21;
          v23 = (double *)((char *)v23 + 12 * a2);
        }
        while (v21 != a3);
        v37 = 0;
        v84 = 0u;
        v85 = 0u;
        v86 = 0u;
        v87 = 0u;
        while (!a2)
        {
LABEL_68:
          if (++v37 == a3)
            goto LABEL_72;
        }
        v38 = 0;
        v39 = (float *)v19 + v37 * 3 * a2;
LABEL_46:
        v40 = 0;
        v41 = *v39;
        v42 = v39[1];
        v43 = v39[2];
        v44 = (float)((float)(v42 * -0.22499) + (float)(*v39 * 1.225)) + (float)(v43 * -0.000005);
        v45 = (float)((float)(v42 * 1.0421) + (float)(*v39 * -0.042061)) + (float)(v43 * -0.000001);
        v83[0] = v44;
        v83[1] = v45;
        v46 = (float)((float)(v42 * -0.078641) + (float)(v41 * -0.019641)) + (float)(v43 * 1.0983);
        v83[2] = v46;
        v80 = 0;
        v81 = 0;
        while (1)
        {
          v47 = v83[v40];
          if (v47 > 1.0)
            break;
          if (v47 < 0.0)
          {
            v48 = -1;
            goto LABEL_51;
          }
LABEL_52:
          if (++v40 == 3)
          {
            if ((_DWORD)v80 || __PAIR64__(HIDWORD(v80), 0) != v81)
            {
              v49 = (float)((float)(v45 * 0.17757) + (float)(v44 * 0.82243)) + (float)(v46 * 0.000004);
              v50 = (float)((float)(v45 * 0.9668) + (float)(v44 * 0.033196)) + (float)(v46 * 0.000001);
              v51 = (float)((float)(v45 * 0.072402) + (float)(v44 * 0.017085)) + (float)(v46 * 0.91051);
              v52 = vabds_f32(v44, v49);
              v53 = vabds_f32(v45, v50);
              *(float *)v82 = v52;
              *(float *)&v82[1] = v53;
              v54 = vabds_f32(v46, v51);
              *(float *)&v82[2] = v54;
              v55 = 0.0;
              if ((_DWORD)v80 == 1)
                v55 = (float)(v44 + -1.0) / v52;
              if (HIDWORD(v80) == 1)
                v55 = fmaxf(v55, (float)(v45 + -1.0) / v53);
              if (v81 == 1)
                v55 = fmaxf(v55, (float)(v46 + -1.0) / v54);
              v56 = 0;
              v57 = fmax(fmin(v44, 1.0), 0.0);
              v58 = fmax(fmin(v45, 1.0), 0.0);
              v59 = fmax(fmin(v46, 1.0), 0.0);
              v60 = (float)((float)(v58 * 0.17757) + (float)(v57 * 0.82243)) + (float)(v59 * 0.000004);
              v61 = (float)((float)(v58 * 0.9668) + (float)(v57 * 0.033196)) + (float)(v59 * 0.000001);
              v62 = (float)((float)(v58 * 0.072402) + (float)(v57 * 0.017085)) + (float)(v59 * 0.91051);
              v63 = fmax(fmin(v60, 1.0), 0.0);
              v64 = fmax(fmin(v61, 1.0), 0.0);
              v65 = fmax(fmin(v62, 1.0), 0.0);
              v66 = (float)(vabds_f32(v49, v63) * 27.217) + vabds_f32(v50, v64) * 6.72130013;
              v67 = v66 + vabds_f32(v51, v65) * 50.4818993;
              v68 = v67 * v67;
              do
              {
                if (*(_DWORD *)((char *)&v80 + v56 * 4) == -1)
                  v55 = fmaxf(v55, (float)-v83[v56] / *(float *)&v82[v56]);
                ++v56;
              }
              while (v56 != 3);
              v69 = fmin(v55, 1.0);
              if (v69 > 0.0)
              {
                v70 = llroundf(v69 * 15.0);
                *((float *)&v84 + v70) = (float)(v68 / (float)(v69 + 1.0)) + *((float *)&v84 + v70);
              }
            }
            v39 += 3;
            if (++v38 == a2)
              goto LABEL_68;
            goto LABEL_46;
          }
        }
        v48 = 1;
LABEL_51:
        *(_DWORD *)((char *)&v80 + v40 * 4) = v48;
        goto LABEL_52;
      }
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
LABEL_72:
      free(v19);
      v71 = 0;
      v72 = 0.0;
      do
      {
        v72 = v72 + *(float *)((char *)&v84 + v71);
        v71 += 4;
      }
      while (v71 != 64);
      v73 = 0.0;
      if (v72 > 1.0)
      {
        v74 = 0.0;
        v75 = 15;
        v76 = 16;
        while (1)
        {
          v77 = v74;
          if (v75 == -1)
            break;
          v74 = v74 + *((float *)&v84 + v75--);
          if (v74 > 1.0)
          {
            v76 = v75 + 2;
            break;
          }
        }
        v73 = (float)((float)((float)(uint64_t)(float)((float)v76 - (float)((float)(1.0 - v77) / (float)(v74 - v77)))
                            * 0.0625)
                    * 10.0);
      }
      v8 = (int)llround(v73);
      return acquire_output_profile(v8);
    default:
      return acquire_output_profile(v8);
  }
}

void __acquire_output_profile_block_invoke_2(uint64_t a1)
{
  CFDataRef v2;
  uint64_t v3;

  if (acquire_output_profile_data)
  {
    v2 = CFDataCreate(0, (const UInt8 *)(acquire_output_profile_data+ *(unsigned int *)(acquire_output_profile_header + 8 * *(_QWORD *)(a1 + 32) + 16)), *(unsigned int *)(acquire_output_profile_header + 8 * *(_QWORD *)(a1 + 32) + 12));
    v3 = create(v2, 0, 0);
    if (v2)
      CFRelease(v2);
  }
  else
  {
    v3 = 0;
  }
  acquire_output_profile_profiles[*(_QWORD *)(a1 + 32)] = v3;
}

uint64_t __acquire_output_profile_block_invoke()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  stat v4;

  v0 = getpagesize();
  v1 = v0;
  if ((v0 & 0xFFFLL) != 0)
    __assert_rtn("acquire_output_profile_block_invoke", "ColorSyncPoppyProfile.c", 362, "PAGESIZE % 4096 == 0");
  v2 = open("/System/Library/ColorSync/Resources/ColorTables.data", 0, 0);
  acquire_output_profile_fd = v2;
  if (v2 < 0)
    goto LABEL_5;
  memset(&v4, 0, sizeof(v4));
  if (fstat(v2, &v4)
    || (v4.st_mode & 0xF000) != 0x8000
    || v4.st_size < 1
    || (result = (uint64_t)mmap(0, (v1 + v4.st_size - 1) & 0xFFFFFFFFFFFFF000, 1, 1, acquire_output_profile_fd, 0),
        acquire_output_profile_data = result,
        result == -1)
    || (acquire_output_profile_header = result, *(_DWORD *)result != 1633775737)
    && *(_DWORD *)(result + 4) != 0x10000
    && *(_DWORD *)(result + 8) != 11)
  {
    v2 = acquire_output_profile_fd;
LABEL_5:
    result = close(v2);
    acquire_output_profile_fd = -1;
  }
  return result;
}

uint64_t __use_poppy_profiles_from_file_block_invoke()
{
  uint64_t result;

  result = ColorSyncDefaultsGetBoolean("ColorSyncUsePoppyProfilesFromFile", &use_poppy_profiles_from_file_enabled);
  if ((_DWORD)result)
    use_poppy_profiles_from_file_enabled = 0;
  return result;
}

const void *ColorSyncCreateInputPoppyProfile(const ColorSyncProfile *a1)
{
  uint64_t poppy_index_from_profile;
  uint64_t v3;
  dispatch_once_t *v4;
  const void *result;
  _QWORD v6[6];

  poppy_index_from_profile = get_poppy_index_from_profile(a1);
  if ((unint64_t)(poppy_index_from_profile - 1) > 9)
    return 0;
  v3 = poppy_index_from_profile;
  v4 = (dispatch_once_t *)((char *)&acquire_input_profile_predicates + 8 * poppy_index_from_profile);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __acquire_input_profile_block_invoke;
  v6[3] = &__block_descriptor_tmp_12;
  v6[4] = v3;
  v6[5] = a1;
  if (*v4 != -1)
    dispatch_once(v4, v6);
  result = (const void *)acquire_input_profile_profiles[v3];
  if (result)
  {
    CFRetain(result);
    return (const void *)acquire_input_profile_profiles[v3];
  }
  return result;
}

ColorSyncProfile *__acquire_input_profile_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *Tag;
  void *v4;
  void *v5;
  const void *v6;
  ColorSyncProfile *result;
  CFDictionaryRef v8;
  CFArrayRef v9;
  uint64_t i;
  const void *v11;
  const void *v12;
  CFDictionaryRef v13;
  const void *v14[10];
  void *v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20[6];
  void *values;
  void *v22;
  void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  void *keys[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)keys = xmmword_1E2162C90;
  v29 = *(_OWORD *)&off_1E2162CA0;
  v30 = xmmword_1E2162CB0;
  v31 = 0;
  Tag = (void *)ColorSyncProfileGetTag(v2, CFSTR("A2B0"));
  values = Tag;
  v4 = (void *)ColorSyncProfileGetTag(v2, CFSTR("A2B1"));
  v22 = v4;
  v5 = (void *)ColorSyncProfileGetTag(v2, CFSTR("A2B2"));
  v23 = v5;
  v24 = ColorSyncProfileGetTag(v2, CFSTR("chad"));
  v25 = ColorSyncProfileGetTag(v2, CFSTR("wtpt"));
  v6 = ColorSyncProfileGetTag(v2, CFSTR("aapy"));
  result = 0;
  v26 = v6;
  v27 = 0;
  if (!Tag || !v6)
    goto LABEL_10;
  if (v4)
  {
    if (v5)
      goto LABEL_5;
  }
  else
  {
    v22 = Tag;
    if (v5)
      goto LABEL_5;
  }
  v23 = Tag;
LABEL_5:
  v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20[0] = CFNumberCreate(0, kCFNumberSInt16Type, &create_input_poppy_profile_iccDate);
  v20[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B51A6BA);
  v20[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B51A6BC);
  v20[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B51A6BE);
  v20[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B51A6C0);
  v20[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18B51A6C2);
  v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v20, 6, MEMORY[0x1E0C9B378]);
  for (i = 0; i != 6; ++i)
  {
    v11 = v20[i];
    if (v11)
      CFRelease(v11);
  }
  v17 = xmmword_1E2162CE8;
  v18 = *(_OWORD *)&off_1E2162CF8;
  v19 = xmmword_1E2162D08;
  *(_OWORD *)v15 = xmmword_1E2162CC8;
  v16 = *(_OWORD *)&off_1E2162CD8;
  v14[0] = CFSTR("copyTags");
  v14[1] = CFSTR("4.0");
  v14[2] = kColorSyncSigInputClass;
  v14[3] = kColorSyncSigRgbData;
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  v14[4] = kColorSyncSigXYZData;
  v14[5] = v12;
  v14[6] = v9;
  v14[7] = CFSTR("Apple Wide Color Sharing Profile");
  v14[8] = v8;
  v14[9] = 0;
  v13 = CFDictionaryCreate(0, (const void **)v15, v14, 9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(v8);
  CFRelease(v9);
  result = ColorSyncMakeProfile(v13);
LABEL_10:
  acquire_input_profile_profiles[*(_QWORD *)(a1 + 32)] = result;
  return result;
}

CFStringRef colorSyncTRCCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<TRC %p>"), a1);
}

CFStringRef colorSyncTRCCopyDebugDescription(uint64_t a1)
{
  int v2;
  const __CFAllocator *v3;
  const __CFAllocator *v5;
  uint64_t v6;
  char *v7;
  const char *v8;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 16);
    v3 = CFGetAllocator((CFTypeRef)a1);
    if (v2 == 5)
    {
      return CFStringCreateWithFormat(v3, 0, CFSTR("<TRC %p;table[%ld]:%p properties(0x%x) input range [%+g, %+g] output range [%+g, %+g] pos [%f, %f] neg [%f, %f]>"),
               a1,
               *(_QWORD *)(a1 + 20),
               *(_QWORD *)(a1 + 28),
               *(unsigned int *)(a1 + 64),
               *(float *)(a1 + 68),
               *(float *)(a1 + 72),
               *(float *)(a1 + 76),
               *(float *)(a1 + 80),
               *(float *)(a1 + 36),
               *(float *)(a1 + 40),
               *(float *)(a1 + 44),
               *(float *)(a1 + 48));
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 > 0xA)
        v7 = 0;
      else
        v7 = off_1E2162DB8[v6];
      v8 = "YES";
      if (!*(_BYTE *)(a1 + 88))
        v8 = "NO";
      return CFStringCreateWithFormat(v3, 0, CFSTR("<TRC %p;type:%s;\ngamma:%f a = %f b = %f c = %f d = %f e = %f f = %f g = %f\nproperties(0x%x) input range [%+g, %+g] output range [%+g, %+g]\npure gamma original ? %s >"),
               a1,
               v7,
               *(float *)(a1 + 20),
               *(float *)(a1 + 24),
               *(float *)(a1 + 28),
               *(float *)(a1 + 32),
               *(float *)(a1 + 36),
               *(float *)(a1 + 40),
               *(float *)(a1 + 44),
               *(float *)(a1 + 48),
               *(unsigned int *)(a1 + 64),
               *(float *)(a1 + 68),
               *(float *)(a1 + 72),
               *(float *)(a1 + 76),
               *(float *)(a1 + 80),
               v8);
    }
  }
  else
  {
    v5 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v5, 0, CFSTR("<NULL TRC>"));
  }
}

uint64_t ColorSyncTRCGetOptions(void *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncTRCGetOptions", "ColorSyncTransformFunctions.c", 409, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  return ColorSyncTRCGetProperties((unsigned int *)a1);
}

uint64_t ColorSyncPureGammaOriginalTRC(unsigned __int8 *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1113);
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID)
    __assert_rtn("ColorSyncPureGammaOriginalTRC", "ColorSyncTransformFunctions.c", 437, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  return a1[88];
}

CFStringRef colorSyncMatrixCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<Matrix %p>"), a1);
}

CFStringRef colorSyncMatrixCopyDebugDescription(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  const __CFAllocator *v10;
  const __CFAllocator *v12;
  float v13;
  float v14;
  float v15;
  float v16;

  if (a1)
  {
    v2 = *(float *)(a1 + 16);
    v3 = *(float *)(a1 + 20);
    v4 = *(float *)(a1 + 24);
    v5 = *(float *)(a1 + 28);
    v6 = *(float *)(a1 + 32);
    v7 = *(float *)(a1 + 36);
    v8 = *(float *)(a1 + 40);
    v9 = *(float *)(a1 + 44);
    v15 = *(float *)(a1 + 52);
    v16 = *(float *)(a1 + 48);
    v13 = *(float *)(a1 + 60);
    v14 = *(float *)(a1 + 56);
    v10 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v10, 0, CFSTR("<Matrix %p\n[%f,\t %f,\t %f,\t %f]\n[%f,\t %f,\t %f,\t %f]\n[%f,\t %f,\t %f,\t %f]\nproperties(0x%x) input range [%+g, %+g] output range [%+g, %+g]>"), a1, v2, v3, v4, v5, v6, v7, v8, v9, v16, v15, v14, v13, *(unsigned int *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72),
             *(float *)(a1 + 76),
             *(float *)(a1 + 80));
  }
  else
  {
    v12 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v12, 0, CFSTR("<NULL Matrix>"));
  }
}

uint64_t ColorSyncNxMGetTypeID()
{
  if (ColorSyncNxMGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
  return ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID;
}

void colorSyncNxMLUTFinalize(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 56);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
}

BOOL nxmLUT_equal_nxmLUT(char *cf, uint64_t a2)
{
  _BOOL8 result;
  CFTypeID v5;
  CFTypeID v6;
  int v7;
  float *v8;
  float *v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _BOOL4 v16;
  float v17;
  float v18;
  float v19;

  if (cf == (char *)a2)
    return 1;
  result = 0;
  if (cf && a2)
  {
    v5 = CFGetTypeID(cf);
    if (ColorSyncNxMGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
    if (v5 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID)
      return 0;
    v6 = CFGetTypeID((CFTypeRef)a2);
    if (ColorSyncNxMGetTypeID_predicate != -1)
      dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
    if (v6 == ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID && (v7 = *((_DWORD *)cf + 4), v7 == *(_DWORD *)(a2 + 16)))
    {
      result = 0;
      if (*(_QWORD *)(cf + 20) == *(_QWORD *)(a2 + 20) && *(_QWORD *)(cf + 28) == *(_QWORD *)(a2 + 28))
      {
        v8 = *(float **)(cf + 44);
        v9 = *(float **)(a2 + 44);
        switch(v7)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            result = 0;
            if (*(_QWORD *)(cf + 36) == *(_QWORD *)(a2 + 36) && v8 == v9)
              goto LABEL_16;
            return result;
          case 7:
          case 8:
            if (*v8 != *v9 || v8[2] != v9[2] || v8[3] != v9[3] || v8[4] != v9[4])
              return 0;
            v18 = v8[5];
            v19 = v9[5];
            goto LABEL_27;
          case 9:
            if (*v8 != *v9
              || v8[1] != v9[1]
              || v8[2] != v9[2]
              || v8[3] != v9[3]
              || v8[4] != v9[4]
              || v8[5] != v9[5]
              || v8[6] != v9[6]
              || v8[7] != v9[7]
              || v8[8] != v9[8]
              || v8[9] != v9[9]
              || v8[10] != v9[10]
              || v8[14] != v9[14]
              || v8[15] != v9[15]
              || v8[16] != v9[16])
            {
              return 0;
            }
            v18 = v8[17];
            v19 = v9[17];
LABEL_27:
            if (v18 != v19)
              return 0;
            goto LABEL_16;
          default:
LABEL_16:
            v10 = ColorSyncNxMGetProperties((unsigned int *)cf);
            if (v10 != ColorSyncNxMGetProperties((unsigned int *)a2))
              return 0;
            v11 = ColorSyncNxMGetInputRange((float *)cf);
            v12 = ColorSyncNxMGetInputRange((float *)a2);
            result = 0;
            if (v11 == v12)
            {
              v13 = ColorSyncNxMGetOutputRange((float *)cf);
              v15 = v14;
              v16 = v13 == ColorSyncNxMGetOutputRange((float *)a2);
              result = v15 == v17 && v16;
            }
            break;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFStringRef colorSyncNxMLUTCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<NxMLUT %p>"), a1);
}

CFStringRef colorSyncNxMLUTCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  const __CFAllocator *v4;

  if (a1)
  {
    v2 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<NxMLUT %p;table[%ld gridpoints]:%p Inputs = %ld Outputs = %ld format = %d properties(0x%x) input range [%+g, %+g] output range [%+g, %+g]>"),
             a1,
             *(_QWORD *)(a1 + 36),
             *(_QWORD *)(a1 + 44),
             *(_QWORD *)(a1 + 20),
             *(_QWORD *)(a1 + 28),
             *(unsigned int *)(a1 + 16),
             *(unsigned int *)(a1 + 64),
             *(float *)(a1 + 68),
             *(float *)(a1 + 72),
             *(float *)(a1 + 76),
             *(float *)(a1 + 80));
  }
  else
  {
    v4 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v4, 0, CFSTR("<NULL NxMLUT>"));
  }
}

uint64_t ColorSyncNxMGetProperties(unsigned int *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncNxMGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
  if (v2 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID)
    __assert_rtn("ColorSyncNxMGetProperties", "ColorSyncTransformFunctions.c", 836, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  return a1[16];
}

float ColorSyncNxMGetInputRange(float *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncNxMGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
  if (v2 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID)
    __assert_rtn("ColorSyncNxMGetInputRange", "ColorSyncTransformFunctions.c", 848, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  return a1[17];
}

float ColorSyncNxMGetOutputRange(float *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (ColorSyncNxMGetTypeID_predicate != -1)
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_9);
  if (v2 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID)
    __assert_rtn("ColorSyncNxMGetOutputRange", "ColorSyncTransformFunctions.c", 855, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  return a1[19];
}

void colorSyncCMMFinalize(uint64_t a1)
{
  const void *v1;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 16))
      __assert_rtn("colorSyncCMMFinalize", "ColorSyncCMM.c", 53, "c->builtIn == false");
    v1 = *(const void **)(a1 + 24);
    if (v1)
      CFRelease(v1);
  }
}

CFStringRef colorSyncCMMCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<ColorSyncCMM %p>"), a1);
}

CFStringRef colorSyncCMMCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  CFTypeRef ValueForInfoDictionaryKey;
  __CFBundle *v5;
  CFTypeRef v6;
  const __CFAllocator *v7;

  if (!a1)
  {
    v7 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v7, 0, CFSTR("<NULL ColorSyncCMM>"));
  }
  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
    ValueForInfoDictionaryKey = *(CFTypeRef *)(a1 + 32);
    goto LABEL_7;
  }
  ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(*(CFBundleRef *)(a1 + 24), (CFStringRef)*MEMORY[0x1E0C9AE88]);
  v5 = *(__CFBundle **)(a1 + 24);
  if (!v5)
  {
LABEL_7:
    v6 = *(CFTypeRef *)(a1 + 40);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<ColorSyncCMM %p;bundle:%@;\nname:%@;\nidentifier:%@>"),
             a1,
             v3,
             ValueForInfoDictionaryKey,
             v6);
  }
  v6 = CFBundleGetValueForInfoDictionaryKey(v5, (CFStringRef)*MEMORY[0x1E0C9AE78]);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<ColorSyncCMM %p;bundle:%@;\nname:%@;\nidentifier:%@>"),
           a1,
           v3,
           ValueForInfoDictionaryKey,
           v6);
}

uint64_t ColorSyncAPIVersion()
{
  return 251658245;
}

uint64_t ColorSyncPrivateAPIVersion()
{
  return 251658247;
}

uint64_t ColorSync_vImageConvert_16Uto16F(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  uint64_t (*v5)();

  v4 = (uint64_t (*)())ColorSync_vImageConvert_16Uto16F_ptr__;
  if (!ColorSync_vImageConvert_16Uto16F_ptr__)
  {
    if (ColorSyncLoadvImageDYLD_once != -1)
      dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1230);
    v5 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
    if (ColorSyncLoadvImageDYLD_handle)
      v5 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_16Uto16F");
    if (v5)
      v4 = v5;
    else
      v4 = vImage_smart_null;
    ColorSync_vImageConvert_16Uto16F_ptr__ = v4;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v4)(a1, a2, 0);
}

uint64_t vImage_smart_null()
{
  return 0;
}

uint64_t ColorSync_vImageConvert_16UToF(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  uint64_t (*v5)();

  v4 = (uint64_t (*)())ColorSync_vImageConvert_16UToF_ptr__;
  if (!ColorSync_vImageConvert_16UToF_ptr__)
  {
    if (ColorSyncLoadvImageDYLD_once != -1)
      dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1230);
    v5 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
    if (ColorSyncLoadvImageDYLD_handle)
      v5 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_16UToF");
    if (v5)
      v4 = v5;
    else
      v4 = vImage_smart_null;
    ColorSync_vImageConvert_16UToF_ptr__ = v4;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, float, float))v4)(a1, a2, 0, 0.0, 0.000015259);
}

uint64_t ColorSync_vImageConvert_Fto16F(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)();
  uint64_t (*v5)();

  v4 = (uint64_t (*)())ColorSync_vImageConvert_Fto16F_ptr__;
  if (!ColorSync_vImageConvert_Fto16F_ptr__)
  {
    if (ColorSyncLoadvImageDYLD_once != -1)
      dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1230);
    v5 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
    if (ColorSyncLoadvImageDYLD_handle)
      v5 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_PlanarFtoPlanar16F");
    if (v5)
      v4 = v5;
    else
      v4 = vImage_smart_null;
    ColorSync_vImageConvert_Fto16F_ptr__ = v4;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v4)(a1, a2, 0);
}

const __CFDictionary *ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  CFTypeID v3;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("com.apple.cmm.ApplyToneMaping"));
    if (result)
    {
      v1 = result;
      v2 = CFGetTypeID(result);
      if (v2 == CFDictionaryGetTypeID())
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("com.apple.cmm.ApplyReferenceWhiteToneMapping"));
        if (result)
        {
          v3 = CFGetTypeID(result);
          return (const __CFDictionary *)(v3 == CFDictionaryGetTypeID());
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

const __CFDictionary *ColorSyncOptionsLegacyHDREcosystemRequested(const __CFDictionary *result)
{
  const __CFDictionary *v1;

  if (result)
  {
    v1 = result;
    result = (const __CFDictionary *)CFDictionaryContainsKey(result, CFSTR("com.apple.cmm.UseLegacyHDREcosystem"));
    if ((_DWORD)result)
      return (const __CFDictionary *)(CFDictionaryGetValue(v1, CFSTR("com.apple.cmm.UseLegacyHDREcosystem")) == (const void *)*MEMORY[0x1E0C9AE50]);
  }
  return result;
}

uint64_t __current_or_newer_sdk_block_invoke()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  current_or_newer_sdk_linked_on_glow_or_later = result;
  return result;
}

const void *ColorSyncOptionsGetFlexTRCOptions(const ColorSyncProfile *a1, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;

  if (cf
    && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID())
    && (!a1 || ColorSyncProfileIsPQBased(a1))
    && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("com.apple.cmm.ApplyToneMaping"))) != 0&& (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    return CFDictionaryGetValue(v6, CFSTR("com.apple.cmm.ApplyFlexTRC"));
  }
  else
  {
    return 0;
  }
}

const void *ColorSyncOptionsGetFlexLumaScalingOptions(const ColorSyncProfile *a1, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;

  if (cf
    && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID())
    && (!a1 || ColorSyncProfileIsPQBased(a1))
    && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("com.apple.cmm.ApplyToneMaping"))) != 0&& (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    return CFDictionaryGetValue(v6, CFSTR("com.apple.cmm.ApplyFlexLumaScaling"));
  }
  else
  {
    return 0;
  }
}

const void *ColorSyncOptionsGetReferenceWhiteToneMappingOptions(const __CFDictionary *a1)
{
  const __CFDictionary *Value;
  const __CFDictionary *v2;
  CFTypeID v3;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.ApplyToneMaping"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFDictionaryGetValue(v2, CFSTR("com.apple.cmm.ApplyReferenceWhiteToneMapping"));
  else
    return 0;
}

float ColorSyncOptionsGetSDRToPQScale(const void *a1)
{
  CFTypeID v2;
  const void *Value;
  float result;

  if (!a1)
    return 203.0;
  v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID())
    return 203.0;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("com.apple.cmm.SkipBoostToHDR"));
  result = 203.0;
  if (Value == (const void *)*MEMORY[0x1E0C9AE50])
    return 100.0;
  return result;
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x1E0C80310](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x1E0C80318](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80320](c, data, *(_QWORD *)&len);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1E0C98038]();
}

CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98070](locArray);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
  MEMORY[0x1E0C98420](theData, extraLength);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value)
{
  return MEMORY[0x1E0C98520](theDict, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1E0C99020](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C99028](alloc, pStr, *(_QWORD *)&encoding);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1E0C99560]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFBundleGetLanguageAndRegionCodes()
{
  return MEMORY[0x1E0C9A020]();
}

uint64_t _CFBundleGetMainBundleIfLooksLikeBundle()
{
  return MEMORY[0x1E0C9A028]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E215A5A0();
}

uint64_t operator delete()
{
  return off_1E215A5A8();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E215A5B0(__sz, a2);
}

uint64_t operator new()
{
  return off_1E215A5B8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C826D0](*(_QWORD *)&a1, a2, a3);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D18](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1E0C838B8](*(_QWORD *)&host, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

void swab(const void *a1, void *a2, ssize_t a3)
{
  MEMORY[0x1E0C856D0](a1, a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1E0C85A90](*(_QWORD *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

