uint64_t __generateAccessor_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 32))(a2, 0, *(_QWORD *)(a1 + 40));
}

unint64_t sortAsLong(uint64_t a1, uint64_t a2)
{
  return (a1 > a2) - (unint64_t)(a1 < a2);
}

unint64_t _PFObjectIDFastHash64(unint64_t a1)
{
  unint64_t v1;
  Class Class;
  _BYTE *IndexedIvars;
  uint64_t v4;
  Class v5;

  v1 = a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    Class = object_getClass((id)a1);
    IndexedIvars = object_getIndexedIvars(Class);
    if ((IndexedIvars[4] & 2) != 0)
    {
      v5 = object_getClass((id)v1);
      if ((*((_BYTE *)object_getIndexedIvars(v5) + 4) & 1) != 0)
        v4 = *(_QWORD *)(v1 + 8) >> 16;
      else
        v4 = *(_QWORD *)(v1 + 16);
    }
    else
    {
      v4 = objc_msgSend(*(id *)(v1 + 16), "hash");
    }
    return *((unsigned int *)IndexedIvars + 8) ^ (unint64_t)(v4 << 6);
  }
  return v1;
}

void _pvfk_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0xAuLL, a4, a5, a6, a7, a8);
}

void _pvfk_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 5uLL, a4, a5, a6, a7, a8);
}

uint64_t _PFfastRowRetain(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;

  result = a2;
  v3 = (unsigned int *)(a2 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  return result;
}

CFComparisonResult _NSCoreDataCollateFinderlikeBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x361uLL);
}

void *stack_allocate(size_t size, uint64_t a2, _QWORD *a3)
{
  void *result;
  size_t v6;
  malloc_zone_t *v7;

  if (size - 1 > 0x7FFFFE
    || (result = (void *)a3[1], v6 = ((unint64_t)result + size + 15) & 0xFFFFFFFFFFFFFFF0, v6 >= a3[2]))
  {
    v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v7 = malloc_default_zone();
    result = malloc_type_zone_malloc(v7, size, 0xBE79EC16uLL);
    if (result)
      ++a3[3];
  }
  else
  {
    a3[1] = v6;
  }
  return result;
}

void _pvfk_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0, a4, a5, a6, a7, a8);
}

unint64_t sortByFunctionComparison(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD, uint64_t);
  int v6;
  int v7;

  v5 = *(uint64_t (**)(_QWORD, uint64_t))a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*a1, v4);
  v7 = v5(*a2, v4);
  return (v6 > v7) - (unint64_t)(v6 < v7);
}

size_t customCount(const __CFArray *a1)
{
  const char *ValueAtIndex;

  ValueAtIndex = (const char *)CFArrayGetValueAtIndex(a1, 0);
  return strlen(ValueAtIndex);
}

uint64_t customCharAt(const __CFArray *a1, uint64_t a2)
{
  return *((unsigned __int8 *)CFArrayGetValueAtIndex(a1, 0) + a2);
}

void makeBranchRow(CFArrayRef *a1, CFArrayRef *a2, uint64_t a3, const __CFDictionary *a4, int a5, signed int a6, uint64_t a7, int a8)
{
  __int16 Count;
  __int16 v16;
  const char *ValueAtIndex;
  const __CFArray *v18;
  CFIndex v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  _WORD *v66;
  uint64_t v67;
  CFIndex v68;
  __int16 v69;
  const void **v70;
  int v71;
  CFIndex v72;
  const void **v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  CFArrayRef *v77;
  unsigned int v78;
  const char *v79;
  const char *v80;
  size_t v81;
  const void **v82;
  int v83;
  uint64_t v84;
  const char *key;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v91;
  uint64_t v92;
  uint8_t buf[8];

  Count = CFArrayGetCount(*a1);
  v88 = a8 + 1;
  if ((a8 + 1) > 0x8000)
LABEL_55:
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Recursion count exceeded"), 0));
  v16 = Count;
  ValueAtIndex = (const char *)CFArrayGetValueAtIndex(*a2, 0);
  v86 = a3;
  v87 = a3 - 1;
  v18 = a2[a3 - 1];
  v19 = CFArrayGetCount(v18);
  v20 = (const char *)CFArrayGetValueAtIndex(v18, v19 - 1);
  v21 = v20;
  key = v20;
  if (a5)
  {
    v22 = ValueAtIndex[a6];
    if (v20[a6] <= 1u)
      v23 = 1;
    else
      v23 = v20[a6];
    if (a5 == 1)
    {
      v89 = 0;
      v24 = 8;
      goto LABEL_16;
    }
    v26 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Illegal branch data: operation");
    _NSCoreDataLog(17, v26, v27, v28, v29, v30, v31, v32, v84);
    v33 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18A253000, v33, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: operation", buf, 2u);
    }
    if (byte_1ECD8DE26)
      goto LABEL_54;
    v24 = 0;
  }
  else
  {
    v22 = strlen(ValueAtIndex);
    v25 = strlen(v21);
    v24 = 0;
    if (v25 <= 1)
      v23 = 1;
    else
      v23 = v25;
  }
  v89 = 1;
LABEL_16:
  if (a6 >= 0x80000)
  {
    v34 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Illegal branch data: parameter");
    _NSCoreDataLog(17, v34, v35, v36, v37, v38, v39, v40, v84);
    v41 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18A253000, v41, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: parameter", buf, 2u);
    }
    if (byte_1ECD8DE26)
      goto LABEL_54;
    a6 = 0;
  }
  if (a7 >= 0xFFFFFFFE)
  {
    v42 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Illegal branch data: offset");
    _NSCoreDataLog(17, v42, v43, v44, v45, v46, v47, v48, v84);
    v49 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18A253000, v49, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: offset", buf, 2u);
    }
    if (byte_1ECD8DE26)
      goto LABEL_54;
    a7 = 0;
  }
  if (v22 < 0xFFFE)
    goto LABEL_31;
  v50 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Illegal branch data: lower");
  _NSCoreDataLog(17, v50, v51, v52, v53, v54, v55, v56, v84);
  v57 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_18A253000, v57, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: lower", buf, 2u);
  }
  if (byte_1ECD8DE26)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v22 = 0;
LABEL_31:
  if (v23 < 0xFFFF)
    goto LABEL_36;
  v58 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Illegal branch data: upper");
  _NSCoreDataLog(17, v58, v59, v60, v61, v62, v63, v64, v84);
  v65 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_18A253000, v65, OS_LOG_TYPE_FAULT, "CoreData: Illegal branch data: upper", buf, 2u);
  }
  if (byte_1ECD8DE26)
    goto LABEL_54;
  v23 = 1;
LABEL_36:
  v66 = PF_CALLOC_UNSCANNED_BYTES(2 * ((v23 + ~v22) & ~((int)(v23 + ~v22) >> 31)) + 16);
  *(_QWORD *)v66 = v24 | (a6 << 13) | 1u | (unint64_t)(a7 << 32);
  v67 = v22 + 1;
  v66[4] = v22 + 1;
  v66[6] = v23 - 1;
  CFArrayAppendValue(*a1, v66);
  v68 = CFArrayGetCount(*a2);
  if (v68 == 1)
  {
    v69 = v16 + 1;
    v66[5] = (unsigned __int16)CFDictionaryGetValue(a4, ValueAtIndex);
  }
  else
  {
    v92 = 0;
    *(_QWORD *)buf = 0;
    v91 = 0;
    calculateNextBranchOperation(*a2, v68, (const void ***)buf, &v92, (_DWORD *)&v92 + 1, (const __CFAllocator *)((char *)&v91 + 4), &v91);
    v66[5] = ~v16;
    v70 = *(const void ***)buf;
    v71 = v92;
    makeBranchRow(a1, *(_QWORD *)buf, (int)v92, a4, HIDWORD(v92), HIDWORD(v91), v91, v88);
    v69 = CFArrayGetCount(*a1);
    freeArrayOfCFObjects(v70, v71);
  }
  if (v86 == 1)
  {
    v66[7] = v66[5];
  }
  else
  {
    v72 = CFArrayGetCount(a2[v87]);
    if (v72 == 1)
    {
      v66[7] = (unsigned __int16)CFDictionaryGetValue(a4, key);
    }
    else
    {
      v92 = 0;
      *(_QWORD *)buf = 0;
      v91 = 0;
      calculateNextBranchOperation(a2[v87], v72, (const void ***)buf, &v92, (_DWORD *)&v92 + 1, (const __CFAllocator *)((char *)&v91 + 4), &v91);
      v66[7] = -v69;
      v73 = *(const void ***)buf;
      v74 = v92;
      makeBranchRow(a1, *(_QWORD *)buf, (int)v92, a4, HIDWORD(v92), HIDWORD(v91), v91, v88);
      v69 = CFArrayGetCount(*a1);
      freeArrayOfCFObjects(v73, v74);
    }
    if (v87 >= 2)
    {
      v75 = a6;
      v76 = v86 - 2;
      v77 = a2 + 1;
      do
      {
        v78 = CFArrayGetCount(*v77);
        v79 = (const char *)CFArrayGetValueAtIndex(*v77, 0);
        v80 = v79;
        if (v89)
          v81 = strlen(v79);
        else
          v81 = v79[v75];
        if (v78 == 1)
        {
          v66[v81 - v67 + 8] = (unsigned __int16)CFDictionaryGetValue(a4, v80);
        }
        else
        {
          v92 = 0;
          *(_QWORD *)buf = 0;
          v91 = 0;
          calculateNextBranchOperation(*v77, v78, (const void ***)buf, &v92, (_DWORD *)&v92 + 1, (const __CFAllocator *)((char *)&v91 + 4), &v91);
          v66[v81 - v67 + 8] = -v69;
          v82 = *(const void ***)buf;
          v83 = v92;
          makeBranchRow(a1, *(_QWORD *)buf, (int)v92, a4, HIDWORD(v92), HIDWORD(v91), v91, v88);
          v69 = CFArrayGetCount(*a1);
          freeArrayOfCFObjects(v82, v83);
        }
        ++v77;
        --v76;
      }
      while (v76);
    }
  }
}

void *PF_CALLOC_UNSCANNED_BYTES(size_t size)
{
  malloc_zone_t *v2;

  v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v2 = malloc_default_zone();
  return malloc_type_zone_calloc(v2, 1uLL, size, 0x9640F75EuLL);
}

void freeArrayOfCFObjects(const void **ptr, int a2)
{
  uint64_t v3;
  const void **v4;
  const void *v5;

  if (a2 >= 1)
  {
    v3 = a2;
    v4 = ptr;
    do
    {
      v5 = *v4++;
      CFRelease(v5);
      --v3;
    }
    while (v3);
  }
  PF_FREE_OBJECT_ARRAY(ptr);
}

void _NSQLRow_dealloc_standard(id *obj)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  if (((_BYTE)obj[2] & 4) == 0)
  {

    obj[5] = 0;
  }
  v2 = obj[3];
  if (v2)
  {
    obj[3] = 0;
    if ((_QWORD *)*v2 != v2)
    {
      v3 = 0;
      do
      {
        v4 = &v2[v3];

        v3 += 3;
      }
      while ((_QWORD *)v4[3] != v2);
      if (v3)
        PF_FREE_OBJECT_ARRAY(v2);
    }
  }
  if (((_BYTE)obj[2] & 4) == 0)
    _PFDeallocateObject(obj);
}

void _PFDeallocateObject(id obj)
{
  malloc_zone_t *v2;

  if (*MEMORY[0x1E0CB3448])
  {
    _PFPerformDebugZombie(obj);
  }
  else
  {
    if (obj)
      objc_destructInstance(obj);
    v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v2 = malloc_default_zone();
    malloc_zone_free(v2, obj);
  }
}

void PF_FREE_OBJECT_ARRAY(void *ptr)
{
  malloc_zone_t *v2;

  v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v2 = malloc_default_zone();
  malloc_zone_free(v2, ptr);
}

uint64_t _PFRawIndexForKnownKey(_QWORD *a1, __CFString *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;

  if (!a2)
    return 0x7FFFFFFFFFFFFFFFLL;
  v4 = _PFRawFastIndexForKnownKey(a1, a2, &v7);
  if (v4 >= a1[3])
    return 0x7FFFFFFFFFFFFFFFLL;
  v5 = v4;
  if (*(__CFString **)(a1[5] + 8 * v4) != a2 && !-[__CFString isEqualToString:](a2, "isEqualToString:"))
    return 0x7FFFFFFFFFFFFFFFLL;
  return v5;
}

uint64_t _PFRawFastIndexForKnownKey(_QWORD *a1, __CFString *theString, unint64_t *a3)
{
  const char *CStringPtr;
  const char *v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 *v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 *v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint8_t buf[4];
  __CFString *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a1[3])
    return 0x7FFFFFFFFFFFFFFFLL;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (!CStringPtr)
  {
    v19 = (uint64_t **)a1[2];
    v20 = *v19;
    v21 = -[__CFString length](theString, "length");
    if (v20)
    {
      v22 = v21;
      v23 = 0;
      v24 = *v20;
      while (1)
      {
        if ((v24 & 0x1FF8) != 0)
        {
          if (v24 >> 13 >= v22)
            goto LABEL_46;
          v25 = -[__CFString characterAtIndex:](theString, "characterAtIndex:");
        }
        else
        {
          *a3 = v22;
          v25 = v22;
        }
        if ((v24 & 7) == 1)
        {
          v26 = *((unsigned __int16 *)v20 + 4);
          v18 = v25 >= v26;
          v27 = v25 - v26;
          if (v18)
          {
            if (v25 <= *((unsigned __int16 *)v20 + 6))
            {
              if (v27 <= 0xFFFE)
                v29 = v27;
              else
                v29 = 0;
              v28 = (__int16 *)v20 + v29 + 8;
            }
            else
            {
              v28 = (__int16 *)v20 + 7;
            }
          }
          else
          {
            v28 = (__int16 *)v20 + 5;
          }
          v23 = *v28;
        }
        if ((v23 & 0x80000000) == 0)
          break;
        v20 = v19[-v23];
        v24 = *v20;
        if ((*v20 & 0x1FF8) != 0 && v22 <= *v20 >> 13)
          return 0x7FFFFFFFFFFFFFFFLL;
      }
      result = (v23 + HIDWORD(v24));
      if ((_DWORD)result != 0x200000)
        return result;
LABEL_46:
      objc_msgSend(a1, "length");
      _NSCoreDataLog(1, (uint64_t)CFSTR("NSKnownKeysDictionary: dumping bad mapping: %@ with length:\x05"), v32, v33, v34, v35, v36, v37, (uint64_t)a1);
      objc_msgSend(a1, "keys");
      if (a1[3])
      {
        v44 = 0;
        do
          _NSCoreDataLog(1, (uint64_t)CFSTR(" \t key[%d] = %@"), v38, v39, v40, v41, v42, v43, v44++);
        while (a1[3] > v44);
      }
      v45 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSKnownKeysDictionary: improper mapping detected with key '%@'");
      _NSCoreDataLog(17, v45, v46, v47, v48, v49, v50, v51, (uint64_t)theString);
      v52 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v54 = theString;
        _os_log_fault_impl(&dword_18A253000, v52, OS_LOG_TYPE_FAULT, "CoreData: NSKnownKeysDictionary: improper mapping detected with key '%@'", buf, 0xCu);
      }
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  v7 = CStringPtr;
  v8 = -[__CFString length](theString, "length");
  *a3 = v8;
  v9 = (uint64_t **)a1[2];
  v10 = *v9;
  if (!*v9)
    return 0x7FFFFFFFFFFFFFFFLL;
  v11 = *v10;
  while (1)
  {
    v12 = v8;
    if ((v11 & 0x1FF8) != 0)
      v12 = v7[v11 >> 13];
    v13 = *((unsigned __int16 *)v10 + 4);
    v18 = v12 >= v13;
    v14 = v12 - v13;
    if (v18)
    {
      if (v12 <= *((unsigned __int16 *)v10 + 6))
      {
        v16 = v14 <= 0xFFFE ? v14 : 0;
        v15 = (__int16 *)v10 + v16 + 8;
      }
      else
      {
        v15 = (__int16 *)v10 + 7;
      }
    }
    else
    {
      v15 = (__int16 *)v10 + 5;
    }
    v17 = *v15;
    if ((v17 & 0x80000000) == 0)
      break;
    v10 = v9[-v17];
    v11 = *v10;
    v18 = (*v10 & 0x1FF8) != 0 && *v10 >> 13 >= v8;
    if (v18)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  return (v17 + HIDWORD(v11));
}

BOOL _compareUnknownStrings(void *a1, __CFString *a2)
{
  int64_t v4;
  char *v5;
  objc_class *Class;
  CFStringEncoding SystemEncoding;
  const char *CStringPtr;
  const UniChar *CharactersPtr;
  const char *v10;
  uint64_t v11;
  int64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  UniChar v18;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  _OWORD v25[8];
  CFStringRef theString;
  const UniChar *v27;
  const char *v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  CFRange v33;

  v4 = objc_msgSend(a1, "length");
  if (v4 != -[__CFString length](a2, "length"))
    return 0;
  v5 = (char *)objc_msgSend(a1, "UTF8String");
  Class = object_getClass(a1);
  if (Class == object_getClass(a2))
  {
    CStringPtr = (const char *)-[__CFString UTF8String](a2, "UTF8String");
    return memcmp(v5, CStringPtr, v4) == 0;
  }
  if (a2)
  {
    SystemEncoding = CFStringGetSystemEncoding();
    CStringPtr = CFStringGetCStringPtr(a2, SystemEncoding);
    if (CStringPtr)
      return memcmp(v5, CStringPtr, v4) == 0;
  }
  memset(v25, 0, sizeof(v25));
  theString = a2;
  v29 = 0;
  v30 = v4;
  CharactersPtr = CFStringGetCharactersPtr(a2);
  v10 = 0;
  v27 = CharactersPtr;
  if (!CharactersPtr)
    v10 = CFStringGetCStringPtr(a2, 0x600u);
  v31 = 0;
  v32 = 0;
  v28 = v10;
  if (v4 < 1)
  {
    return 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 64;
    do
    {
      if ((unint64_t)v14 >= 4)
        v16 = 4;
      else
        v16 = v14;
      v17 = v30;
      if (v30 <= v14)
      {
        v18 = 0;
      }
      else if (v27)
      {
        v18 = v27[v14 + v29];
      }
      else if (v28)
      {
        v18 = v28[v29 + v14];
      }
      else
      {
        if (v32 <= v14 || v12 > v14)
        {
          v20 = v16 + v11;
          v21 = v15 - v16;
          v22 = v14 - v16;
          v23 = v22 + 64;
          if (v22 + 64 >= v30)
            v23 = v30;
          v31 = v22;
          v32 = v23;
          if (v30 >= v21)
            v17 = v21;
          v33.length = v17 + v20;
          v33.location = v22 + v29;
          CFStringGetCharacters(theString, v33, (UniChar *)v25);
          v12 = v31;
        }
        v18 = *((_WORD *)v25 + v14 - v12);
      }
      if (v18 != (unsigned __int16)v5[v14])
        break;
      v13 = ++v14 >= v4;
      --v11;
      ++v15;
    }
    while (v4 != v14);
  }
  return v13;
}

uint64_t _execute(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  useconds_t v10;
  double Current;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __CFString *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  __objc2_class *v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char v38;
  const __CFString *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const __CFString *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  const __CFString *v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[2];
  const __CFString *v66;
  _QWORD v67[3];

  v67[1] = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_assert_queue_V2(v2);
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v61 = 0;
  v6 = 0.0;
LABEL_4:
  v7 = 3 * v4 - 29999;
  while (1)
  {
    result = sqlite3_step(*(sqlite3_stmt **)(a1 + 80));
    v9 = result;
    switch((char)result)
    {
      case 1:
      case 7:
      case 10:
      case 17:
      case 21:
        goto LABEL_38;
      case 2:
      case 3:
      case 4:
      case 8:
      case 9:
      case 12:
      case 13:
      case 15:
      case 16:
      case 18:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
        goto LABEL_58;
      case 5:
        if ((*(_BYTE *)(a1 + 312) & 2) == 0)
          sqlite3_reset(*(sqlite3_stmt **)(a1 + 80));
        if (*(double *)(a1 + 232) > 0.0 && v6 == 0.0)
          v6 = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 232);
        if (v4 < 0x2711)
          goto LABEL_29;
        if (v4 - 10000 >= 0xB)
          v10 = v4 - 8899;
        else
          v10 = v7;
        goto LABEL_28;
      case 6:
        if ((*(_BYTE *)(a1 + 312) & 2) == 0)
          sqlite3_reset(*(sqlite3_stmt **)(a1 + 80));
        if (*(double *)(a1 + 232) > 0.0 && v6 == 0.0)
          v6 = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 232);
        goto LABEL_25;
      case 11:
      case 26:
        goto LABEL_43;
      case 14:
        if (v5 > 2)
        {
LABEL_38:
          v12 = result;
          v13 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_errmsg(*(sqlite3 **)(a1 + 72)));
          if (v12 == 10 && (sqlite3_file_control(*(sqlite3 **)(a1 + 72), 0, 4, &v61), v61))
            v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("I/O error for database at %@.  SQLite error code:%d, '%@' errno:%d"), *(_QWORD *)(a1 + 32), v9, v13, v61);
          else
            v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("I/O error for database at %@.  SQLite error code:%d, '%@'"), *(_QWORD *)(a1 + 32), v9, v13, v59);
          v15 = (void *)v14;
          if (!v14)
LABEL_43:
            v15 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Fatal error.  The database at %@ is corrupted.  SQLite error code:%d, '%s'"), *(_QWORD *)(a1 + 32), v9, sqlite3_errmsg(*(sqlite3 **)(a1 + 72)));
          v16 = (int)v9;
          v17 = CFSTR("NSSQLiteErrorDomain");
          -[NSSQLiteConnection _forceDisconnectOnError](a1);
LABEL_45:
          if ((_DWORD)v9 == 1555)
          {
            *(_DWORD *)(a1 + 312) &= ~2u;
            -[NSSQLiteConnection _endFetch]((_QWORD *)a1);
            -[NSSQLiteConnection releaseSQLStatement](a1);
            v26 = *MEMORY[0x1E0C99778];
            v62 = CFSTR("_NSCoreDataOptimisticLockingFailureConflictsKey");
            v63 = MEMORY[0x1E0C9AA60];
            v22 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
            v25 = CFSTR("Constraint primary key violation");
            v23 = _NSCoreDataOptimisticLockingException;
            v24 = v26;
            goto LABEL_55;
          }
          v60 = v16;
          if ((_DWORD)v9 == 1811)
          {
            v27 = sqlite3_errmsg(*(sqlite3 **)(a1 + 72));
            *(_DWORD *)(a1 + 312) &= ~2u;
            -[NSSQLiteConnection _endFetch]((_QWORD *)a1);
            -[NSSQLiteConnection releaseSQLStatement](a1);
            v28 = "no message";
            if (v27)
              v28 = v27;
            v29 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Constraint trigger violation: %s"), v28);
            v30 = *MEMORY[0x1E0C99778];
            v64[0] = *MEMORY[0x1E0CB2D68];
            v64[1] = CFSTR("_NSCoreDataOptimisticLockingFailureConflictsKey");
            v65[0] = v29;
            v65[1] = MEMORY[0x1E0C9AA60];
            v22 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 2);
            v23 = _NSCoreDataConstraintViolationException;
            v24 = v30;
            v25 = (const __CFString *)v29;
LABEL_55:
            objc_exception_throw((id)-[__objc2_class exceptionWithName:reason:userInfo:](v23, "exceptionWithName:reason:userInfo:", v24, v25, v22));
          }
          if ((_DWORD)v9 == 2067)
          {
            v18 = sqlite3_errmsg(*(sqlite3 **)(a1 + 72));
            *(_DWORD *)(a1 + 312) &= ~2u;
            -[NSSQLiteConnection _endFetch]((_QWORD *)a1);
            -[NSSQLiteConnection releaseSQLStatement](a1);
            v19 = *MEMORY[0x1E0C99778];
            v20 = "no message";
            if (v18)
              v20 = v18;
            v21 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Constraint unique violation: %s"), v20);
            v66 = CFSTR("_NSCoreDataOptimisticLockingFailureConflictsKey");
            v67[0] = MEMORY[0x1E0C9AA60];
            v22 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v67, &v66, 1);
            v23 = _NSCoreDataConstraintViolationException;
            v24 = v19;
            v25 = (const __CFString *)v21;
            goto LABEL_55;
          }
          if (v15)
          {
            v37 = (const char *)objc_msgSend(v15, "UTF8String");
            v38 = 0;
            goto LABEL_60;
          }
LABEL_59:
          v37 = sqlite3_errmsg(*(sqlite3 **)(a1 + 72));
          v15 = 0;
          v38 = 1;
LABEL_60:
          if (*(_BYTE *)(a1 + 42))
            v39 = CFSTR("\x1B[31m\x1B[47mERROR:\x1B[0m\x1B[31m (%d) %s\x1B[0m");
          else
            v39 = CFSTR("(%d) %s");
          _NSCoreDataLog(1, (uint64_t)v39, v31, v32, v33, v34, v35, v36, v9);
          if ((v38 & 1) != 0)
          {
            v15 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("error during SQL execution : %s"), v37, v37);
            v60 = (int)v9;
            v17 = CFSTR("NSSQLiteErrorDomain");
          }
          -[NSSQLiteConnection _forceDisconnectOnError](a1);
          v40 = *MEMORY[0x1E0C99768];
          v41 = (void *)MEMORY[0x1E0C99D80];
          v42 = *(_QWORD *)(a1 + 32);
          v43 = *MEMORY[0x1E0CB2AA0];
          v44 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
          if (v61)
            v45 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:");
          else
            v45 = 0;
          v46 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, v40, v60, (uint64_t)v15, (void *)objc_msgSend(v41, "dictionaryWithObjectsAndKeys:", v42, v43, v44, CFSTR("NSSQLiteErrorDomain"), v45, *MEMORY[0x1E0CB2FE0], 0));
          v47 = v46;
          if (v17)
            -[_NSCoreDataException _setDomain:]((uint64_t)v46, v17);
          objc_exception_throw(v47);
        }
        if (*(double *)(a1 + 232) > 0.0 && v6 == 0.0)
          v6 = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 232);
        ++v5;
LABEL_25:
        if (v4 <= 0xA)
          v10 = 3 * v4 + 1;
        else
          v10 = v4 + 1101;
LABEL_28:
        usleep(v10);
LABEL_29:
        if (v6 != 0.0)
        {
          Current = CFAbsoluteTimeGetCurrent();
          if (Current > v6)
          {
            if (v3 > 7)
            {
              v48 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("The database operation timed out after %.2f seconds."), Current - v6 + *(double *)(a1 + 232));
              if (+[NSSQLCore debugDefault](NSSQLCore, "debugDefault") >= 1)
              {
                if (*(_BYTE *)(a1 + 42))
                  v55 = CFSTR("\x1B[31m\x1B[47mERROR:\x1B[0m\x1B[31m (%d) %@\x1B[0m");
                else
                  v55 = CFSTR("(%d) %@");
                v58 = v48;
                _NSCoreDataLog(1, (uint64_t)v55, v49, v50, v51, v52, v53, v54, v9);
              }
              v56 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("error during SQL execution : %@"), v48, v58);
              *(_DWORD *)(a1 + 312) &= ~2u;
              -[NSSQLiteConnection releaseSQLStatement](a1);
              v57 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], 134090, v56, (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9), CFSTR("NSSQLiteErrorDomain")));
              objc_exception_throw(v57);
            }
            ++v4;
            v6 = Current + *(double *)(a1 + 240);
            ++v3;
            goto LABEL_4;
          }
        }
        v7 += 3;
        ++v4;
        break;
      case 19:
        v15 = 0;
        v17 = 0;
        v16 = 0;
        goto LABEL_45;
      default:
        if (result == 100)
        {
          *(_DWORD *)(a1 + 312) |= 2u;
        }
        else
        {
          if (result != 101)
          {
LABEL_58:
            v60 = 0;
            v17 = 0;
            goto LABEL_59;
          }
          result = (uint64_t)-[NSSQLiteConnection setColumnsToFetch:]((_QWORD *)a1, 0);
          *(_DWORD *)(a1 + 312) &= ~2u;
          *(_QWORD *)(a1 + 92) = 0;
          *(_QWORD *)(a1 + 100) = 0;
          *(_DWORD *)(a1 + 108) = 0;
        }
        return result;
    }
  }
}

double fetchResultSetPrepareNextRow(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  int v8;
  malloc_zone_t *v9;
  _QWORD *v10;
  malloc_zone_t *v11;
  void *v12;
  malloc_zone_t *v13;
  _QWORD *v14;
  double result;
  uint64_t v16;
  int v17;

  v2 = a1[6];
  v3 = *((_QWORD *)a1 + 4);
  v4 = (_QWORD *)*((_QWORD *)a1 + 8);
  v5 = v4[v2] + v3;
  if ((*(_DWORD *)v5 & 0x80000000) != 0)
  {
    if (a1[7] < 0)
      goto LABEL_5;
    *(_DWORD *)(v5 + 4) = v2;
    *(_QWORD *)(v5 + 16) = v3;
  }
  a1[7] = v2;
  *((_QWORD *)a1 + 5) = v3;
LABEL_5:
  v6 = *((_QWORD *)a1 + 10);
  v7 = (_OWORD *)((*((_QWORD *)a1 + 11) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (a1[4] + (int)v6 - (int)v7 <= 31)
  {
    v8 = a1[5];
    a1[4] = 15359;
    a1[5] = v8 + 1;
    v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      v9 = malloc_default_zone();
      v4 = (_QWORD *)*((_QWORD *)a1 + 8);
    }
    v10 = malloc_type_zone_realloc(v9, v4, 8 * (v8 + 2), 0x80040B8603338uLL);
    *((_QWORD *)a1 + 8) = v10;
    v10[v8 + 1] = 0;
    v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((a1[12] & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone)
        v11 = malloc_default_zone();
      v12 = malloc_type_zone_calloc(v11, 1uLL, 0x3BFFuLL, 0x470DD1EuLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone)
        v11 = malloc_default_zone();
      v12 = malloc_type_zone_malloc(v11, 0x3BFFuLL, 0xB8CBB884uLL);
    }
    *((_QWORD *)a1 + 10) = v12;
    *(_QWORD *)(*((_QWORD *)a1 + 8) + 8 * v8) = v12;
    v7 = (_OWORD *)*((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 11) = v7;
    v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v13 = malloc_default_zone();
    v14 = malloc_type_zone_realloc(v13, *((void **)a1 + 9), 8 * (v8 + 2), 0x100004000313F17uLL);
    *((_QWORD *)a1 + 9) = v14;
    v14[v8] = 15359;
    a1[6] = v8;
    v6 = *((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 4) = (char *)v7 - v6;
  result = 0.0;
  *v7 = 0u;
  v7[1] = 0u;
  v16 = *(_QWORD *)(*((_QWORD *)a1 + 8) + 8 * a1[6]) + *((_QWORD *)a1 + 4);
  v17 = *a1;
  *(_DWORD *)v16 = *a1;
  *(_DWORD *)(v16 + 4) = -1;
  *(_QWORD *)(v16 + 16) = 0;
  *a1 = v17 + 1;
  *((_QWORD *)a1 + 11) = v16 + 32;
  return result;
}

uint64_t _sql_fetch_plan_for_entity(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  size_t v13;
  malloc_zone_t *v14;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t i;
  unsigned __int16 *v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  unint64_t *v28;
  CFTypeRef *ptr;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x1E0C80C00];
  result = a1[28];
  if (!result)
  {
    v3 = (void *)objc_msgSend(a1, "foreignKeyColumns");
    v4 = (void *)objc_msgSend(a1, "foreignEntityKeyColumns");
    v5 = (void *)objc_msgSend(a1, "foreignOrderKeyColumns");
    v6 = (void *)objc_msgSend(a1, "attributeColumns");
    v31 = a1;
    v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", a1[18]);
    v8 = objc_msgSend(v3, "count");
    v9 = objc_msgSend(v4, "count");
    v10 = objc_msgSend(v5, "count");
    v11 = v9 + v8 + v10 + objc_msgSend(v6, "count");
    v12 = v11 + 1;
    v13 = (24 * v11 + 32);
    v14 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v14 = malloc_default_zone();
    v15 = malloc_type_zone_malloc(v14, v13, 0xCD29492DuLL);
    v16 = 0;
    v15[1] = v12;
    ptr = (CFTypeRef *)v15;
    v17 = (char *)(v15 + 2);
    v35[0] = v7;
    v35[1] = v3;
    v35[2] = v4;
    v35[3] = v5;
    v18 = 32;
    v35[4] = v6;
    do
    {
      v32 = v16;
      v34 = (void *)v35[v16];
      v33 = objc_msgSend(v34, "count", ptr);
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          v20 = (unsigned __int16 *)objc_msgSend(v34, "objectAtIndex:", i);
          v21 = objc_msgSend(v20, "slot");
          if (v20)
            v22 = v20[13];
          else
            v22 = 0;
          v23 = objc_msgSend(v20, "sqlType");
          v24 = objc_msgSend(v20, "propertyType");
          v25 = v24;
          if (v24 == 1)
          {
            v26 = objc_msgSend((id)objc_msgSend(v20, "propertyDescription"), "isOptional");
            if (v26)
              v18 += 4;
          }
          else
          {
            v26 = 0;
          }
          v27 = -[NSSQLColumn roughSizeEstimate]((uint64_t)v20);
          if (v20)
            CFRetain(v20);
          v18 += v27;
          *(_DWORD *)v17 = v21;
          *((_DWORD *)v17 + 1) = v22;
          *((_DWORD *)v17 + 2) = v26;
          v17[12] = v23;
          v17[13] = v25;
          *((_WORD *)v17 + 7) = 0;
          *((_QWORD *)v17 + 2) = v20;
          v17 += 24;
        }
      }
      v16 = v32 + 1;
    }
    while (v32 != 4);
    *(_DWORD *)ptr = v18;
    v28 = v31 + 28;
    while (!__ldaxr(v28))
    {
      if (!__stlxr((unint64_t)ptr, v28))
        return v31[28];
    }
    __clrex();
    _deallocateFetchEntityPlan(ptr);
    return v31[28];
  }
  return result;
}

uint64_t _sql_read_only_fetch_plan_for_entity(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  malloc_zone_t *v11;
  _DWORD *v12;
  id v13;
  uint64_t v14;
  char *v15;
  int v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  int v24;
  unint64_t *v25;
  CFTypeRef *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;

  result = a1[28];
  if (!result)
  {
    v3 = (void *)objc_msgSend(a1, "foreignKeyColumns");
    v4 = (void *)objc_msgSend(a1, "foreignEntityKeyColumns");
    v5 = (void *)objc_msgSend(a1, "foreignOrderKeyColumns");
    v28 = a1;
    v6 = (void *)objc_msgSend(a1, "attributeColumns");
    v7 = objc_msgSend(v3, "count");
    v8 = objc_msgSend(v4, "count");
    v9 = objc_msgSend(v5, "count");
    v10 = v8 + v7 + v9 + objc_msgSend(v6, "count");
    v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v11 = malloc_default_zone();
    v12 = malloc_type_zone_malloc(v11, (24 * v10 + 8), 0xA7A4CA07uLL);
    v12[1] = v10;
    v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v13, "addObjectsFromArray:", v3);
    objc_msgSend(v13, "addObjectsFromArray:", v4);
    objc_msgSend(v13, "addObjectsFromArray:", v5);
    objc_msgSend(v13, "addObjectsFromArray:", v6);
    objc_msgSend(v13, "sortUsingFunction:context:", _compareSQLColumnsByFetchIndex, 0);
    v30 = v13;
    v29 = objc_msgSend(v13, "count");
    v27 = (CFTypeRef *)v12;
    if (v29)
    {
      v14 = 0;
      v15 = (char *)(v12 + 2);
      v16 = 32;
      while (1)
      {
        v17 = (unsigned __int16 *)objc_msgSend(v30, "objectAtIndex:", v14, v27);
        v18 = objc_msgSend(v17, "slot");
        if (v17)
          v19 = v17[13];
        else
          v19 = 0;
        v20 = objc_msgSend(v17, "sqlType");
        v21 = objc_msgSend(v17, "propertyType");
        v22 = (void *)objc_msgSend(v17, "propertyDescription");
        if (v22)
        {
          v23 = objc_msgSend(v22, "isOptional");
          if (!v23)
            goto LABEL_13;
        }
        else
        {
          v23 = 1;
        }
        v16 += 4;
LABEL_13:
        v24 = -[NSSQLColumn roughSizeEstimate]((uint64_t)v17);
        if (v17)
          CFRetain(v17);
        v16 += v24;
        *(_DWORD *)v15 = v18;
        *((_DWORD *)v15 + 1) = v19;
        *((_QWORD *)v15 + 1) = (v20 << 32) | (v21 << 40) | v23;
        *((_QWORD *)v15 + 2) = v17;
        v15 += 24;
        if (v29 == ++v14)
          goto LABEL_19;
      }
    }
    v16 = 32;
LABEL_19:

    *(_DWORD *)v27 = v16;
    v25 = v28 + 28;
    while (!__ldaxr(v25))
    {
      if (!__stlxr((unint64_t)v27, v25))
        return v28[28];
    }
    __clrex();
    _deallocateFetchEntityPlan(v27);
    return v28[28];
  }
  return result;
}

void *PF_CALLOC_SCANNED_BYTES(size_t size)
{
  malloc_zone_t *v2;

  v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v2 = malloc_default_zone();
  return malloc_type_zone_calloc(v2, 1uLL, size, 0x4D6EA17CuLL);
}

uint64_t _newReadPFEncodedArrayFromData(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = (objc_class *)_newReadPFEncodedArrayFromData_myArrayClass;
  if (!_newReadPFEncodedArrayFromData_myArrayClass)
  {
    v11 = (objc_class *)objc_opt_class();
    _newReadPFEncodedArrayFromData_myArrayClass = (uint64_t)v11;
  }
  v12 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 24;
  if (v12 + 24 > a4)
    return 0;
  v15 = a2 + v12;
  *(_QWORD *)(a2 + v12) = 0;
  object_setClass((id)(a2 + v12), v11);
  *(_DWORD *)(v15 + 16) = 0;
  v16 = v12 + 20;
  *(_DWORD *)(v15 + 20) = bswap32(*(_DWORD *)(a2 + v16));
  if (*(int *)(a2 + v16) >= 1)
  {
    v17 = 0;
    v18 = a2 + v13;
    if (a6)
      a5 = a6;
    do
    {
      if (a6)
        v13 += 8;
      *(_QWORD *)(v18 + 8 * v17++) = *(id *)(a5 + 8 * bswap64(*(_QWORD *)(a2 + v13)));
      v13 += 8;
    }
    while (v17 < *(int *)(a2 + v16));
  }
  *a3 = v13;
  if (v13 <= a4)
    return v15;
  else
    return 0;
}

void fetchResultSetReallocCurrentRow(uint64_t a1, int a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  malloc_zone_t *v9;
  _QWORD *v10;
  malloc_zone_t *v11;
  void *v12;
  malloc_zone_t *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  malloc_zone_t *v18;
  void *v19;
  uint64_t v20;
  malloc_zone_t *v21;

  v3 = *(unsigned int *)(a1 + 24);
  if ((v3 & 0x80000000) != 0)
    v4 = 0;
  else
    v4 = (const void *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v3) + *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 88) - (_QWORD)v4;
  if ((v5 + a2) >= 0x3BFF)
    v6 = (v5 + a2 + 15359);
  else
    v6 = 15359;
  *(_DWORD *)(a1 + 16) = v6;
  if (!(_DWORD)v3 && !*(_QWORD *)(a1 + 32))
  {
    v15 = **(void ***)(a1 + 64);
    v18 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((*(_BYTE *)(a1 + 48) & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone)
        v18 = malloc_default_zone();
      v19 = malloc_type_zone_calloc(v18, 1uLL, v6, 0xAC7F29FAuLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone)
        v18 = malloc_default_zone();
      v19 = malloc_type_zone_malloc(v18, v6, 0x2C832ECDuLL);
    }
    LODWORD(v7) = 0;
    *(_QWORD *)(a1 + 80) = v19;
    **(_QWORD **)(a1 + 64) = v19;
    v20 = *(_QWORD *)(a1 + 80);
    **(_QWORD **)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 88) = v20;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_30;
  }
  v7 = *(unsigned int *)(a1 + 20);
  v8 = (v7 + 1);
  *(_DWORD *)(a1 + 20) = v8;
  v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v9 = malloc_default_zone();
  v10 = malloc_type_zone_realloc(v9, *(void **)(a1 + 64), 8 * (v7 + 2), 0x80040B8603338uLL);
  *(_QWORD *)(a1 + 64) = v10;
  v10[v8] = 0;
  v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if (!_PF_Private_Malloc_Zone)
      v11 = malloc_default_zone();
    v12 = malloc_type_zone_calloc(v11, 1uLL, v6, 0xE2A6225uLL);
  }
  else
  {
    if (!_PF_Private_Malloc_Zone)
      v11 = malloc_default_zone();
    v12 = malloc_type_zone_malloc(v11, v6, 0xD0302B02uLL);
  }
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v7) = v12;
  v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v13 = malloc_default_zone();
  v14 = malloc_type_zone_realloc(v13, *(void **)(a1 + 72), 8 * (v7 + 2), 0x100004000313F17uLL);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)(a1 + 72) = v14;
  v14[v8] = 0;
  v14[v7] = v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  if ((v7 & 0x80000000) == 0)
  {
LABEL_30:
    v17 = *(void **)(*(_QWORD *)(a1 + 64) + 8 * v7);
    v16 = v15;
  }
  memcpy(v17, v4, v5);
  *(_QWORD *)(a1 + 88) += v5;
  if (v16)
  {
    v21 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v21 = malloc_default_zone();
    malloc_zone_free(v21, v16);
  }
}

void _pvfk_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 1uLL, a4, a5, a6, a7, a8);
}

void _pvfk_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x2BuLL, a4, a5, a6, a7, a8);
}

void _pvfk_42(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x2AuLL, a4, a5, a6, a7, a8);
}

void snapshot_set_transient_default_values(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = objc_msgSend(*(id *)(a1 + 16), "entity");
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 112);
    v4 = *(_QWORD *)(v3 + 88);
    if (!v4)
      return;
    v5 = *(_QWORD *)(v3 + 80);
    v6 = v5 + v4;
    v7 = *(_QWORD *)(v2 + 96);
  }
  else
  {
    if (!MEMORY[0x58])
      return;
    v7 = 0;
    v5 = MEMORY[0x50];
    v6 = MEMORY[0x50] + MEMORY[0x58];
  }
  if (v5 < v6)
  {
    v8 = v7 + 24;
    v9 = a1 + 28;
    v10 = v6 - 1;
    v11 = (int)v5 >> 3;
    v12 = 255 << (v5 & 7);
    if ((int)v5 >> 3 == ((int)v6 - 1) >> 3)
    {
      v13 = (0xFFu >> (~(_BYTE)v10 & 7)) & v12;
    }
    else
    {
      *(_BYTE *)(v9 + v11) |= v12;
      if (v11 + 1 < v10 >> 3)
        memset((void *)(v11 + a1 + 29), 255, ((v10 >> 3) - v11 - 2) + 1);
      v13 = 0xFFu >> (~(_BYTE)v10 & 7);
      v11 = v10 >> 3;
    }
    *(_BYTE *)(v9 + v11) |= v13;
    do
    {
      v14 = *(void **)(v8 + 8 * v5);
      if (objc_msgSend(v14, "_propertyType") == 7)
        v15 = (void *)objc_msgSend(v14, "_buildDefaultValue");
      else
        v15 = (void *)objc_msgSend(v14, "defaultValue");
      if (v15)
      {
        v16 = v15;
        snapshot_set_value_as_object((char *)a1, v5, v16, v17, v18, v19, v20, v21);
      }
      ++v5;
    }
    while (v6 != v5);
  }
}

unint64_t _PFCDSnapshotClassForEntity(unint64_t result)
{
  unint64_t v1;
  unint64_t *v2;
  objc_class *v3;

  if (result)
  {
    v1 = result;
    v2 = (unint64_t *)(result + 16);
    result = *(_QWORD *)(result + 16);
    if (!result)
    {
      v3 = +[_CDSnapshot classForEntity:](_CDSnapshot, "classForEntity:", v1);
      while (!__ldaxr(v2))
      {
        if (!__stlxr((unint64_t)v3, v2))
          return *v2;
      }
      __clrex();
      if (v3 != (objc_class *)*v2)
        -[objc_class _entityDeallocated](v3, "_entityDeallocated");
      return *v2;
    }
  }
  return result;
}

uint64_t _prepareResultsFromResultSet(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void **v3;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  BOOL v23;
  _QWORD **v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  objc_class *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  double v43;
  _QWORD *v44;
  char *v45;
  uint64_t plan_for_entity;
  uint64_t v47;
  __int16 *v48;
  id *v49;
  int v50;
  uint64_t v51;
  _BOOL4 v52;
  int v53;
  unsigned int *v54;
  uint64_t v55;
  const char *v56;
  int *v57;
  __CFString *v58;
  uint64_t v59;
  int v60;
  __CFString *v61;
  double *v62;
  void *v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  int *v71;
  int v72;
  int *v73;
  void **v74;
  _PFExternalReferenceData *v75;
  uint64_t v76;
  uint64_t v77;
  __int16 *v78;
  __int16 *v79;
  int v80;
  __CFString *v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  const UInt8 *v85;
  CFDataRef v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  Class v92;
  _QWORD *IndexedIvars;
  unsigned int v94;
  double v95;
  float v96;
  uint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  id v101;
  char *v102;
  uint64_t *v103;
  size_t v104;
  void *v105;
  void *v106;
  void *v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  _PFExternalReferenceData *v111;
  uint64_t v112;
  _PFExternalReferenceData *v113;
  uint64_t v114;
  Class Class;
  int v116;
  uint64_t v117;
  int *v118;
  _NSDataFileBackedFuture *v119;
  uint64_t v120;
  _NSDataFileBackedFuture *v121;
  void **v122;
  _PFExternalReferenceData *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  char *v127;
  id v128;
  int v129;
  unsigned int *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  int v136;
  unsigned int v137;
  _QWORD *v138;
  char v139;
  unsigned int v140;
  _PFArray *v141;
  char *v142;
  uint64_t v143;
  void **v144;
  void *v145;
  unsigned int v146;
  uint64_t v147;
  _PFArray *v148;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  _BOOL4 v154;
  int *v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  _BOOL4 v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  unsigned int v165;
  unsigned int v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void (*v172)(id, char *, uint64_t);
  char *v173;
  void (*v174)(id, char *, _QWORD, uint64_t);
  char *v175;
  uint64_t v176;
  unsigned int v177;
  void *v178;
  _BOOL4 v179;
  int v180;
  int v181;
  void **v182;
  void *v183;
  uint64_t v184;
  _QWORD *v185;
  char *v186;
  _QWORD **v187;
  _QWORD *v188;
  char *v189;
  id v190;
  objc_class *v191;
  _QWORD *v192;
  unsigned int v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;

  v3 = (void **)a3;
  v195 = *MEMORY[0x1E0C80C00];
  v159 = a2;
  if (a3)
    v5 = *(_QWORD *)(a3 + 136);
  else
    v5 = 0;
  if (*(_DWORD *)(a1 + 4) <= 0x40000000u)
    v6 = *(_DWORD *)(a1 + 4);
  else
    v6 = 0;
  v7 = PF_ALLOCATE_OBJECT_ARRAY((int)v6);
  if (v7)
    v8 = v6;
  else
    v8 = 0;
  v170 = a1;
  if (v3)
  {
    v9 = (uint64_t)v3[14];
    v169 = *(_QWORD *)(v5 + 56);
    v167 = (id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v160 = *((_BYTE *)v3 + 201) != 0;
    v10 = (unsigned __int8 *)v3[4];
    if (v10)
      v181 = (v10[43] >> 3) & 1;
    else
      v181 = 0;
    v193 = *(_DWORD *)(v5 + 72);
    v11 = (v193 >> 2) & 7;
    v12 = **(_QWORD **)(a1 + 64);
    v188 = (_QWORD *)(a1 + 64);
    if (v11 == 3)
    {
      v171 = v3[16];
      v179 = 1;
    }
    else
    {
      v179 = 0;
      v171 = 0;
    }
  }
  else
  {
    v169 = *(_QWORD *)(v5 + 56);
    v167 = (id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v10 = 0;
    v9 = 0;
    v160 = 0;
    v181 = 0;
    v171 = 0;
    v193 = *(_DWORD *)(v5 + 72);
    v11 = (v193 >> 2) & 7;
    v179 = v11 == 3;
    v150 = *(uint64_t **)(a1 + 64);
    v188 = (_QWORD *)(a1 + 64);
    v12 = *v150;
  }
  v187 = (_QWORD **)v10;
  v13 = objc_msgSend(*(id *)(v5 + 8), "_disablePersistentStoreResultCaching");
  v180 = v13;
  v14 = v193;
  if ((v193 & 1) != 0)
    v15 = 0;
  else
    v15 = v8;
  MEMORY[0x1E0C80A78](v13);
  if (v15 > 0x200)
  {
    v18 = (_QWORD *)NSAllocateScannedUncollectable();
    v185 = v18;
  }
  else
  {
    v185 = (uint64_t *)((char *)&v151 - v17);
    bzero((char *)&v151 - v17, 8 * v16);
  }
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v151 - v20;
  v165 = v22;
  if (v22 > 0x200)
    v21 = (char *)NSAllocateScannedUncollectable();
  else
    bzero((char *)&v151 - v20, 8 * v19);
  v186 = v21;
  if (v185)
    v23 = v21 == 0;
  else
    v23 = 1;
  if (v23)
  {
    PF_FREE_OBJECT_ARRAY(v7);
    v7 = 0;
    v8 = 0;
  }
  v24 = v187;
  v166 = v15;
  v164 = sel_setForeignEntityKeySlot_entityKey_;
  v163 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v175 = sel_setForeignKeySlot_int64_;
  v174 = (void (*)(id, char *, _QWORD, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v162 = sel_setForeignOrderKeySlot_orderKey_;
  v161 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v173 = sel_setOptLock_;
  v172 = (void (*)(id, char *, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  if (v3)
  {
    v25 = (void *)objc_msgSend(v3[1], "objectIDFactoryForSQLEntity:", *(_QWORD *)(v5 + 40));
    if ((v14 & 1) != 0)
      goto LABEL_40;
  }
  else
  {
    v25 = 0;
    if ((v14 & 1) != 0)
      goto LABEL_40;
  }
  v26 = v25;
  if ((_DWORD)v8 == objc_msgSend(v25, "allocateBatch:count:", v185, v8))
    v27 = v8;
  else
    v27 = 0;
  if ((v14 & 2) != 0 || !(_DWORD)v27)
  {
    v25 = v26;
    v24 = v187;
    if (!(_DWORD)v27)
    {
      PF_FREE_OBJECT_ARRAY(v7);
      v28 = 0;
      v7 = 0;
      v154 = 0;
      if ((v14 & 2) == 0)
        goto LABEL_220;
      goto LABEL_230;
    }
LABEL_40:
    v191 = (objc_class *)v25;
    v154 = (int)v8 > 0;
    v168 = v8;
    v29 = v188;
    if ((int)v8 >= 1)
    {
      v30 = 0;
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v31 = 0;
      v184 = v168;
      v177 = v11;
      v178 = v7;
      v182 = v3;
      v176 = v9;
      while (1)
      {
        while ((*(_DWORD *)v12 & 0x80000000) != 0)
        {
          v32 = *(unsigned int *)(v12 + 4);
          if ((v32 & 0x80000000) != 0)
            v12 = 0;
          else
            v12 = *(_QWORD *)(*v29 + 8 * v32) + *(_QWORD *)(v12 + 16);
        }
        v33 = _sqlEntityForEntityID(v9, *(unsigned int *)(v12 + 8));
        v34 = v191;
        if (v33 != v31)
          v34 = 0;
        v192 = v33;
        if (v3 && v33 != v31)
          v34 = (objc_class *)objc_msgSend(v3[1], "objectIDFactoryForSQLEntity:");
        v191 = v34;
        if ((v14 & 1) != 0)
        {
          v38 = (void *)objc_msgSend([v34 alloc], "initWithPK64:", *(_QWORD *)(v12 + 24));
          if ((v14 & 2) == 0)
          {
            v40 = v192;
            v41 = v38;
            v42 = +[NSSQLRow allocForSQLEntity:]((uint64_t)NSSQLRow, v192);
            v43 = *(double *)(v170 + 8);
            v183 = v41;
            v44 = (_QWORD *)objc_msgSend(v42, "initWithSQLEntity:ownedObjectID:andTimestamp:", v40, v41, v43);
            *(_QWORD *)&v186[8 * v30] = v44;
LABEL_59:
            v190 = v44;
            v45 = (char *)v44[5];
            plan_for_entity = _sql_fetch_plan_for_entity(v40);
            v47 = *(unsigned int *)(plan_for_entity + 4);
            v194 = v45;
            if ((_DWORD)v47)
            {
              v48 = (__int16 *)(v12 + 32);
              v189 = v45 + 28;
              v49 = (id *)(plan_for_entity + 24);
              while (1)
              {
                v50 = *((unsigned __int8 *)v49 - 4);
                if ((v50 - 2) > 6)
                  v51 = 3;
                else
                  v51 = qword_18A50A240[(char)(v50 - 2)];
                v48 = (__int16 *)(((unint64_t)v48 + v51) & ~v51);
                if ((*(_BYTE *)(v49 - 1) & 1) != 0)
                {
                  v53 = *(unsigned __int8 *)v48;
                  v48 = (__int16 *)((char *)v48 + 1);
                  v52 = v53 != 0;
                }
                else
                {
                  v52 = 0;
                }
                v54 = (unsigned int *)(v49 - 2);
                v55 = ~v51;
                switch(*((_BYTE *)v49 - 4))
                {
                  case 1:
                    v78 = (__int16 *)(((unint64_t)v48 + v51) & v55);
                    if (v52)
                      v79 = v48;
                    else
                      v79 = v78 + 2;
                    v80 = *((unsigned __int8 *)v49 - 3);
                    if (v80 == 10)
                    {
                      if (v52)
                        v97 = 0;
                      else
                        v97 = *(unsigned int *)v78;
                      v100 = *v54;
                      v101 = v190;
                      v102 = v162;
                      v103 = &v195;
                      goto LABEL_140;
                    }
                    if (v80 == 4)
                    {
                      if (v52)
                        v97 = 0;
                      else
                        v97 = *(unsigned int *)v78;
                      v100 = *v54;
                      v101 = v190;
                      v102 = v164;
                      v103 = &v196;
LABEL_140:
                      ((void (*)(id, char *, uint64_t, uint64_t))*(v103 - 32))(v101, v102, v100, v97);
LABEL_141:
                      v48 = v79;
                      goto LABEL_154;
                    }
                    if (v80 != 1)
                      goto LABEL_141;
                    v67 = objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute");
                    if (v52)
                      goto LABEL_102;
                    v14 = v193;
                    if (v67)
                    {
                      v107 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)v78);
                      setMultiColumnValueDictionary(v194, v49 - 2, v107);
                    }
                    else
                    {
                      v114 = *v54;
                      Class = object_getClass(v194);
                      v116 = *(char *)(*((_QWORD *)object_getIndexedIvars(Class) + 7) + v114);
                      if (v116 == 115)
                      {
                        snapshot_set_int16(v194, *v54, *v78);
                      }
                      else if (v116 == 99)
                      {
                        snapshot_set_int8(v194, *v54, *(_BYTE *)v78);
                      }
                      else
                      {
                        snapshot_set_int32(v194, *v54, *(_DWORD *)v78);
                      }
                    }
                    v48 = v78 + 2;
                    goto LABEL_155;
                  case 2:
                  case 3:
                    v64 = (_QWORD *)(((unint64_t)v48 + v51) & v55);
                    if (v52)
                      v65 = (unsigned __int8 *)v48;
                    else
                      v65 = (unsigned __int8 *)(v64 + 1);
                    v66 = *((unsigned __int8 *)v49 - 3);
                    switch(v66)
                    {
                      case 6:
                        if (v52)
                          v89 = 0;
                        else
                          v89 = *v64;
                        v14 = v193;
                        v172(v190, v173, v89);
                        goto LABEL_129;
                      case 3:
                        if (v52)
                          v88 = 0;
                        else
                          v88 = *v64;
                        v14 = v193;
                        v174(v190, v175, *v54, v88);
LABEL_129:
                        v48 = (__int16 *)v65;
                        goto LABEL_155;
                      case 1:
                        v67 = objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute");
                        if (v52)
                        {
LABEL_102:
                          v14 = v193;
                          if (v67)
                            goto LABEL_94;
LABEL_103:
                          v189[(unint64_t)*v54 >> 3] |= 1 << (*v54 & 7);
                          goto LABEL_155;
                        }
                        v68 = *v64;
                        if (v67)
                        {
                          v69 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v68);
                          setMultiColumnValueDictionary(v194, v49 - 2, v69);
                        }
                        else
                        {
                          snapshot_set_int64(v194, *v54, v68);
                        }
                        v48 = (__int16 *)(v64 + 1);
                        break;
                      default:
                        v48 = (__int16 *)v65;
                        break;
                    }
LABEL_154:
                    v14 = v193;
                    goto LABEL_155;
                  case 4:
                  case 5:
                  case 6:
                  case 9:
                  case 0xC:
                    if (v52)
                      goto LABEL_93;
                    v56 = (const char *)(((unint64_t)v48 + v51) & v55);
                    v57 = (int *)(v56 + 4);
                    v58 = (__CFString *)CFStringCreateWithCString(0, v56 + 4, 0x8000100u);
                    v59 = *(int *)v56;
                    v60 = *((unsigned __int8 *)v49 - 4);
                    if (v60 == 12)
                    {
                      v61 = (__CFString *)(id)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v58);
                    }
                    else
                    {
                      if (v60 != 4)
                        goto LABEL_106;
                      v61 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", v58);
                    }
                    goto LABEL_105;
                  case 7:
                  case 8:
                    if (v52)
                      goto LABEL_93;
                    v62 = (double *)(((unint64_t)v48 + v51) & v55);
                    v48 = (__int16 *)(v62 + 1);
                    if (objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                    {
                      v63 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v62);
                      setMultiColumnValueDictionary(v194, v49 - 2, v63);
                      goto LABEL_155;
                    }
                    v90 = *((unsigned int *)v49 - 4);
                    if (*((_BYTE *)v49 - 4) == 7)
                    {
                      v91 = v194;
                      v92 = object_getClass(v194);
                      IndexedIvars = object_getIndexedIvars(v92);
                      v94 = *v54;
                      v95 = *v62;
                      if (*(_BYTE *)(IndexedIvars[7] + v90) == 102)
                      {
                        v96 = v95;
                        snapshot_set_float(v91, v94, v96);
                        goto LABEL_155;
                      }
                      v98 = v91;
                    }
                    else
                    {
                      v95 = *v62;
                      v98 = v194;
                      v94 = *((_DWORD *)v49 - 4);
                    }
                    snapshot_set_double(v98, v94, v95);
                    goto LABEL_155;
                  case 0xD:
                  case 0xE:
                    goto LABEL_155;
                  case 0x10:
                    v70 = (void *)objc_msgSend(*v49, "propertyDescription");
                    if (v181 && !objc_msgSend(v70, "_isFileBackedFuture"))
                      goto LABEL_92;
                    if (v52)
                      goto LABEL_93;
                    v71 = (int *)(((unint64_t)v48 + v51) & v55);
                    v73 = v71 + 1;
                    v72 = *((unsigned __int8 *)v71 + 4);
                    if (v72 != 3)
                    {
                      v74 = v182;
                      if (v72 == 1)
                      {
                        v75 = [_PFExternalReferenceData alloc];
                        if (v74)
                          v76 = *((unsigned int *)v74 + 46);
                        else
                          v76 = 0;
                        v77 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v75, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v71 + 1, *v71, 0, 0, v76);
LABEL_177:
                        v113 = (_PFExternalReferenceData *)v77;
                        goto LABEL_178;
                      }
                      v104 = strnlen((const char *)v71 + 5, *v71 - 1);
                      v153 = (void **)objc_msgSend(v167, "stringWithFileSystemRepresentation:length:", (char *)v71 + 5, v104);
                      v105 = v156;
                      v155 = v71;
                      if (v156)
                      {
                        v106 = v157;
                        if (!v74 || v157)
                          goto LABEL_160;
LABEL_159:
                        v106 = v74[12];
                      }
                      else
                      {
                        v106 = v157;
                        if (v74)
                        {
                          v105 = v74[11];
                          if (!v157)
                            goto LABEL_159;
                        }
                        else
                        {
                          v105 = 0;
                        }
                      }
LABEL_160:
                      v156 = v105;
                      v108 = v153;
                      v109 = objc_msgSend(v105, "stringByAppendingPathComponent:", v153);
                      v110 = objc_msgSend(v106, "stringByAppendingPathComponent:", v108);
                      v157 = v106;
                      if (v160 && !objc_msgSend(v167, "fileExistsAtPath:", v109))
                      {
                        v113 = 0;
                      }
                      else
                      {
                        v111 = [_PFExternalReferenceData alloc];
                        if (v182)
                          v112 = *((unsigned int *)v182 + 46);
                        else
                          v112 = 0;
                        v113 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v111, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v73, *v155, v109, v110, v112);
                        if (!v160)
                        {
LABEL_173:
                          v71 = v155;
                          goto LABEL_178;
                        }
                      }
                      if ((objc_msgSend(v167, "fileExistsAtPath:", v109) & 1) != 0)
                        goto LABEL_173;
                      v152 = v110;
                      v122 = v182;
                      v153 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:](v182, (uint64_t)v153);

                      v123 = [_PFExternalReferenceData alloc];
                      if (v122)
                        v124 = *((unsigned int *)v122 + 46);
                      else
                        v124 = 0;
                      v125 = v109;
                      v71 = v155;
                      v77 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:](v123, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:", v73, *v155, v125, v152, v124, v153);
                      goto LABEL_177;
                    }
                    v193 = v14;
                    if (v182)
                    {
                      v99 = v158;
                      if (!v158)
                        v99 = v182[13];
                    }
                    else
                    {
                      v99 = v158;
                    }
                    v117 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v71 + 1, *v71);
                    v118 = v71;
                    v119 = [_NSDataFileBackedFuture alloc];
                    v158 = v99;
                    v120 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v99, 1);
                    v121 = v119;
                    v71 = v118;
                    v113 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v121, "initWithStoreMetadata:directory:", v117, v120);
                    v14 = v193;
LABEL_178:
                    v48 = (__int16 *)((char *)v73 + *v71);
                    if (objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary(v194, v49 - 2, v113);

                    }
                    else
                    {
                      v82 = *v54;
                      v83 = v194;
                      v84 = (uint64_t)v113;
LABEL_109:
                      snapshot_set_object(v83, v82, v84);
                    }
LABEL_155:
                    v49 += 3;
                    if (!--v47)
                      goto LABEL_187;
                    break;
                  default:
LABEL_92:
                    if (v52)
                    {
LABEL_93:
                      if (!objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                        goto LABEL_103;
LABEL_94:
                      setMultiColumnValueNullFlag(v194, (_DWORD *)v49 - 4);
                      goto LABEL_155;
                    }
                    v85 = (const UInt8 *)(((unint64_t)v48 + v51) & v55);
                    v57 = (int *)(v85 + 4);
                    v86 = CFDataCreate(0, v85 + 4, *(int *)v85);
                    v58 = (__CFString *)v86;
                    v59 = *(int *)v85;
                    v87 = *((unsigned __int8 *)v49 - 4);
                    if (v87 == 11)
                    {
                      if (-[__CFData length](v86, "length") == 16)
                      {
                        v61 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", -[__CFString bytes](v58, "bytes"));
                        goto LABEL_105;
                      }

                      v58 = 0;
                    }
                    else if (v87 == 15)
                    {
                      v61 = (__CFString *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v86, (void *)objc_msgSend(*v49, "propertyDescription"));
LABEL_105:
                      v81 = v61;
                      CFRelease(v58);
                      v58 = v81;
                    }
LABEL_106:
                    v48 = (__int16 *)((char *)v57 + v59);
                    if (objc_msgSend((id)objc_msgSend(*v49, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary(v194, v49 - 2, v58);

                      goto LABEL_155;
                    }
                    v82 = *v54;
                    v83 = v194;
                    v84 = (uint64_t)v58;
                    goto LABEL_109;
                }
              }
            }
LABEL_187:
            v9 = v176;
            if ((v180 & 1) == 0)
            {
              v126 = (unsigned int *)v190;
              objc_msgSend(v190, "knownKeyValuesPointer");
              -[NSPersistentStoreCache registerRow:forObjectID:options:](v169, v126, v183, 0);
              v7 = v178;
              v24 = v187;
              v11 = v177;
              v3 = v182;
LABEL_191:
              v29 = v188;
              switch(v11)
              {
                case 0u:
                case 3u:
                  v128 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v24, v183, (uint64_t)v171);
                  v38 = v128;
                  if ((v180 & 1) != 0)
                    goto LABEL_208;
                  v29 = v188;
                  if (!v128)
                    goto LABEL_196;
                  v129 = *((_DWORD *)v128 + 4);
                  if ((v129 & 0x200) != 0)
                  {
                    if (v126)
                    {
                      v136 = v126[3];
                      v135 = v126 + 3;
                      if (v136 <= 0)
                      {
                        do
                          v137 = __ldxr(v135);
                        while (__stxr(v137 + 1, v135));
                      }
                    }
                  }
                  else
                  {
                    *((_DWORD *)v128 + 4) = v129 | 0x200;
LABEL_196:
                    if (v126)
                    {
                      v130 = v126 + 3;
                      do
                        v131 = __ldxr(v130);
                      while (__stxr(v131 + 1, v130));
                    }
                  }
                  break;
                case 1u:
                  v126 = (unsigned int *)v183;
                  _PFfastOidRetain(0, (unint64_t)v183);
                  goto LABEL_207;
                case 2u:
                  v38 = v126;
                  goto LABEL_209;
                default:
                  v38 = 0;
                  goto LABEL_209;
              }
              goto LABEL_209;
            }
            v11 = v177;
            v7 = v178;
            v24 = v187;
            v3 = v182;
            v126 = (unsigned int *)v190;
            if (v177 != 2)
            {
              objc_msgSend(v190, "knownKeyValuesPointer");
              v127 = v194;
              *(_QWORD *)&v186[8 * v30] = v127;

              goto LABEL_191;
            }
            goto LABEL_207;
          }
        }
        else
        {
          v35 = v185;
          v36 = v185[v30];
          v37 = _PFSetPrimaryKey(v36, *(_QWORD *)(v12 + 24));
          v38 = (void *)v36;
          if (v36 == v37)
          {
            if ((v14 & 2) == 0)
              goto LABEL_58;
          }
          else
          {
            v39 = (void *)v37;

            v35[v30] = v39;
            if ((v14 & 2) == 0)
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v186[8 * v30] + 40) + 16) = v39;
              v38 = v39;
LABEL_58:
              v183 = v38;
              v44 = *(_QWORD **)&v186[8 * v30];
              v40 = v192;
              goto LABEL_59;
            }
            v38 = v39;
          }
        }
        if (v11 - 1 >= 2)
        {
          if (!v11 || v11 == 3)
          {
            v132 = v38;
            v126 = (unsigned int *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v24, v38, (uint64_t)v171);

LABEL_207:
            v38 = v126;
            goto LABEL_208;
          }
          v38 = 0;
        }
LABEL_208:
        v29 = v188;
LABEL_209:
        *((_QWORD *)v7 + v30) = v38;
        v133 = *(unsigned int *)(v12 + 4);
        if ((v133 & 0x80000000) == 0)
        {
          v134 = *(_QWORD *)(*v29 + 8 * v133);
          if (v134)
          {
            v12 = v134 + *(_QWORD *)(v12 + 16);
            ++v30;
            v31 = v192;
            if (v30 != v184)
              continue;
          }
        }
        break;
      }
    }
    v28 = v168;
    if ((v14 & 2) == 0)
      goto LABEL_220;
LABEL_230:
    v146 = v166;
    v140 = v165;
    v142 = v186;
    goto LABEL_231;
  }
  v23 = (_DWORD)v27 == +[NSSQLRow newBatchRowAllocation:count:forSQLEntity:withOwnedObjectIDs:andTimestamp:](NSSQLRow, "newBatchRowAllocation:count:forSQLEntity:withOwnedObjectIDs:andTimestamp:", v186, v27, *(_QWORD *)(v5 + 40), v185, *(double *)(v170 + 8));
  v25 = v26;
  v24 = v187;
  if (v23)
    goto LABEL_40;
  PF_FREE_OBJECT_ARRAY(v7);
  v7 = 0;
  v28 = 0;
  v154 = 0;
LABEL_220:
  v138 = v159;
  v139 = !v179;
  if (!v159)
    v139 = 1;
  v140 = v165;
  if ((v139 & 1) != 0)
  {
    v142 = v186;
    if (v11 != 2 && v154)
    {
      v143 = (int)v28;
      v144 = (void **)v186;
      do
      {
        v145 = *v144++;

        --v143;
      }
      while (v143);
    }
  }
  else
  {
    v141 = [_PFArray alloc];
    v142 = v186;
    *v138 = -[_PFArray initWithObjects:count:andFlags:andContext:](v141, "initWithObjects:count:andFlags:andContext:", v186, v28, 26, v187);
  }
  v146 = v166;
LABEL_231:
  if (v140 >= 0x201)
    NSZoneFree(0, v142);
  if (v146 >= 0x201)
    NSZoneFree(0, v185);
  if (v11 > 3)
    v147 = 10;
  else
    v147 = dword_18A50A280[v11];
  v148 = [_PFArray alloc];
  return (uint64_t)-[_PFArray initWithObjects:count:andFlags:andContext:](v148, "initWithObjects:count:andFlags:andContext:", v7, v28, v147, v187);
}

uint64_t _prepareResultsFromResultSet_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  id *v24;
  unsigned int v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  objc_class *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t plan_for_entity;
  uint64_t v48;
  char *v49;
  id *v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  int v54;
  unsigned int *v55;
  uint64_t v56;
  const char *v57;
  int *v58;
  __CFString *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  int v65;
  id v66;
  void *v67;
  double *v68;
  char *v69;
  char *v70;
  int v71;
  id v72;
  __CFString *v73;
  const UInt8 *v74;
  int *v75;
  CFDataRef v76;
  CFDataRef v77;
  uint64_t v78;
  int v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  int v84;
  int *v85;
  _PFExternalReferenceData *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Class v90;
  _QWORD *IndexedIvars;
  unsigned int v92;
  double v93;
  float v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  _NSDataFileBackedFuture *v103;
  size_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  Class Class;
  int v109;
  uint64_t v110;
  _PFExternalReferenceData *v111;
  uint64_t v112;
  _PFExternalReferenceData *v113;
  void **v114;
  _PFExternalReferenceData *v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int *v120;
  char *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  void **p_vtable;
  _PFArray *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  id *v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  void *v146;
  unsigned int v147;
  unsigned int v148;
  void *v149;
  id v150;
  _BOOL4 v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(unsigned int *, char *, uint64_t);
  char *v161;
  void (*v162)(unsigned int *, char *, _QWORD, uint64_t);
  char *v163;
  uint64_t v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  char *v171;
  uint64_t v172;
  id *v173;
  unsigned int *v174;
  int v175;
  char *v176;
  unsigned int *v177;
  Class v178;
  _QWORD *v179;
  uint64_t v180;
  void **v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;

  v145 = a2;
  v183 = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = *(_QWORD *)(a3 + 136);
  else
    v4 = 0;
  v5 = *(_DWORD *)(a1 + 4);
  v157 = *(_QWORD *)(v4 + 56);
  if (v5 <= 0x40000000)
    v6 = v5;
  else
    v6 = 0;
  v8 = PF_ALLOCATE_OBJECT_ARRAY((int)v6);
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  v10 = *(unsigned int *)(v4 + 72);
  v11 = (v10 >> 2) & 7;
  v181 = (void **)a3;
  v158 = a1;
  if (!a3)
  {
    v138 = *(uint64_t **)(a1 + 64);
    v182 = (_QWORD *)(a1 + 64);
    v15 = *v138;
    v16 = objc_msgSend(*(id *)(v4 + 8), "_disablePersistentStoreResultCaching");
    v169 = v16;
    v159 = 0;
    v12 = 0;
LABEL_233:
    v170 = 0;
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(a3 + 32);
  v13 = *(uint64_t **)(a1 + 64);
  v182 = (_QWORD *)(a1 + 64);
  v14 = a3;
  v15 = *v13;
  if ((_DWORD)v11 == 3)
    v159 = *(_QWORD *)(v14 + 128);
  else
    v159 = 0;
  v16 = objc_msgSend(*(id *)(v4 + 8), "_disablePersistentStoreResultCaching");
  v169 = v16;
  if (!v12)
    goto LABEL_233;
  v170 = (*(unsigned __int8 *)(v12 + 43) >> 3) & 1;
LABEL_15:
  v175 = *(_DWORD *)(v4 + 72);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v143 - v18;
  v147 = v20;
  if (v20 > 0x200)
  {
    v21 = NSAllocateScannedUncollectable();
    v19 = (char *)v21;
  }
  else
  {
    bzero((char *)&v143 - v18, 8 * v17);
  }
  MEMORY[0x1E0C80A78](v21);
  v24 = (id *)((char *)&v143 - v23);
  v148 = v25;
  if (v25 > 0x200)
    v24 = (id *)NSAllocateScannedUncollectable();
  else
    bzero((char *)&v143 - v23, 8 * v22);
  v171 = v19;
  v173 = v24;
  if (v19)
    v26 = v24 == 0;
  else
    v26 = 1;
  if (v26)
  {
    PF_FREE_OBJECT_ARRAY(v8);
    v8 = 0;
    v9 = 0;
  }
  v27 = v181 == 0;
  v155 = sel_setForeignEntityKeySlot_entityKey_;
  v154 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v163 = sel_setForeignKeySlot_int64_;
  v162 = (void (*)(unsigned int *, char *, _QWORD, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v153 = sel_setForeignOrderKeySlot_orderKey_;
  v152 = +[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v161 = sel_setOptLock_;
  v160 = (void (*)(unsigned int *, char *, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  if (v27)
  {
    v156 = (id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v178 = 0;
    v151 = 0;
  }
  else
  {
    v178 = (Class)objc_msgSend(v181[1], "objectIDFactoryForSQLEntity:", *(_QWORD *)(v4 + 40));
    v156 = (id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v151 = *((_BYTE *)v181 + 201) != 0;
  }
  v167 = v12;
  v168 = (v10 >> 2) & 7;
  v166 = v10;
  if ((v175 & 1) != 0)
    goto LABEL_40;
  if ((_DWORD)v9 == -[objc_class allocateBatch:count:](v178, "allocateBatch:count:", v171, v9))
    v28 = v9;
  else
    v28 = 0;
  if ((_DWORD)v28)
    v29 = (v10 & 2) == 0;
  else
    v29 = 0;
  if (!v29)
  {
    if (!(_DWORD)v28)
      goto LABEL_38;
    goto LABEL_40;
  }
  if ((_DWORD)v28 == +[NSSQLRow newBatchRowAllocation:count:forSQLEntity:withOwnedObjectIDs:andTimestamp:](NSSQLRow, "newBatchRowAllocation:count:forSQLEntity:withOwnedObjectIDs:andTimestamp:", v173, v28, *(_QWORD *)(v4 + 40), v171, *(double *)(v158 + 8)))
  {
LABEL_40:
    if ((int)v9 < 1)
    {
      v30 = 0;
      goto LABEL_226;
    }
    v180 = 0;
    v149 = 0;
    v150 = 0;
    v146 = 0;
    v31 = 0;
    v172 = v9;
    v164 = v9;
    v165 = v8;
    v32 = v171;
    while (1)
    {
      while ((*(_DWORD *)v15 & 0x80000000) != 0)
      {
        v33 = *(unsigned int *)(v15 + 4);
        if ((v33 & 0x80000000) != 0)
          v15 = 0;
        else
          v15 = *(_QWORD *)(*v182 + 8 * v33) + *(_QWORD *)(v15 + 16);
      }
      if (v181)
        v34 = v181[14];
      else
        v34 = 0;
      v35 = _sqlEntityForEntityID((uint64_t)v34, *(unsigned int *)(v15 + 8));
      v36 = v178;
      if (v35 != v31)
        v36 = 0;
      v178 = v36;
      v179 = v35;
      if (v181 && v35 != v31)
        v178 = (Class)objc_msgSend(v181[1], "objectIDFactoryForSQLEntity:", v179);
      if ((v175 & 1) != 0)
      {
        v42 = (unsigned int *)objc_msgSend([v178 alloc], "initWithPK64:", *(_QWORD *)(v15 + 24));
        v39 = v42;
        if ((v10 & 2) != 0)
          goto LABEL_193;
        v174 = v42;
        v43 = v179;
        v44 = +[NSSQLRow allocForSQLEntity:]((uint64_t)NSSQLRow, v179);
        v45 = objc_msgSend(v44, "initWithSQLEntity:ownedObjectID:andTimestamp:", v43, v174, *(double *)(v158 + 8));
        v173[v180] = (id)v45;
      }
      else
      {
        v37 = *(_QWORD *)&v32[8 * v180];
        v38 = _PFSetPrimaryKey(v37, *(_QWORD *)(v15 + 24));
        v39 = (unsigned int *)v38;
        if (v37 == v38)
        {
          v39 = (unsigned int *)v37;
          if ((v10 & 2) != 0)
          {
LABEL_193:
            if ((v11 - 1) >= 2)
            {
              if ((_DWORD)v11 && (_DWORD)v11 != 3)
              {
LABEL_211:
                v39 = 0;
              }
              else
              {
                v117 = v39;
                v118 = (unsigned int *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((_QWORD **)v12, v39, v159);
                v119 = v117;
                v120 = v118;

                v39 = v120;
              }
            }
            goto LABEL_216;
          }
        }
        else
        {
          v40 = v180;
          *(_QWORD *)&v32[8 * v180] = v38;
          if ((v10 & 2) != 0)
            goto LABEL_193;
          v41 = (unsigned int *)v38;
          objc_msgSend(v173[v40], "setObjectID:");
          v39 = v41;
        }
        v174 = v39;
        v45 = (uint64_t)v173[v180];
      }
      v177 = (unsigned int *)v45;
      v46 = *(char **)(v45 + 40);
      plan_for_entity = _sql_fetch_plan_for_entity(v179);
      v48 = *(unsigned int *)(plan_for_entity + 4);
      if ((_DWORD)v48)
      {
        v49 = (char *)(v15 + 32);
        v176 = v46 + 28;
        v50 = (id *)(plan_for_entity + 24);
        while (2)
        {
          v51 = *((unsigned __int8 *)v50 - 4);
          if ((v51 - 2) >= 7)
            v52 = 3;
          else
            v52 = qword_18A50AAE0[(char)(v51 - 2)];
          v49 = (char *)((unint64_t)&v49[v52] & ~v52);
          if ((*(_BYTE *)(v50 - 1) & 1) != 0)
          {
            v54 = *v49++;
            v53 = v54 != 0;
          }
          else
          {
            v53 = 0;
          }
          v55 = (unsigned int *)(v50 - 2);
          v56 = ~v52;
          switch(*((_BYTE *)v50 - 4))
          {
            case 1:
              v69 = (char *)((unint64_t)&v49[v52] & v56);
              if (v53)
                v70 = v49;
              else
                v70 = v69 + 4;
              v71 = *((unsigned __int8 *)v50 - 3);
              if (v71 == 10)
              {
                v95 = *v55;
                if (!v53)
                {
                  v100 = v153;
                  v101 = &v184;
                  goto LABEL_144;
                }
                v96 = v153;
                v97 = &v184;
              }
              else
              {
                if (v71 != 4)
                {
                  if (v71 == 1)
                  {
                    v72 = *v50;
                    if (v53)
                    {
                      if (!objc_msgSend((id)objc_msgSend(v72, "propertyDescription"), "superCompositeAttribute"))
                        goto LABEL_104;
                      goto LABEL_103;
                    }
                    if (objc_msgSend((id)objc_msgSend(v72, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary_0(v46, v50 - 2, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)v69));
                      v49 = v69 + 4;
                    }
                    else
                    {
                      v107 = *v55;
                      Class = object_getClass(v46);
                      v109 = *(char *)(*((_QWORD *)object_getIndexedIvars(Class) + 7) + v107);
                      if (v109 == 99)
                      {
                        snapshot_set_int8(v46, *v55, *v69);
                        v49 = v69 + 4;
                      }
                      else
                      {
                        if (v109 == 115)
                          snapshot_set_int16(v46, *v55, *(_WORD *)v69);
                        else
                          snapshot_set_int32(v46, *v55, *(_DWORD *)v69);
                        v49 = v69 + 4;
                      }
                    }
                  }
                  else
                  {
                    v49 = v70;
                  }
                  goto LABEL_185;
                }
                v95 = *v55;
                if (!v53)
                {
                  v100 = v155;
                  v101 = &v185;
LABEL_144:
                  ((void (*)(unsigned int *, char *, uint64_t, _QWORD))*(v101 - 32))(v177, v100, v95, *(unsigned int *)v69);
                  goto LABEL_145;
                }
                v96 = v155;
                v97 = &v185;
              }
              ((void (*)(unsigned int *, char *, uint64_t, _QWORD))*(v97 - 32))(v177, v96, v95, 0);
LABEL_145:
              v49 = v70;
LABEL_185:
              v50 += 3;
              if (!--v48)
                break;
              continue;
            case 2:
            case 3:
              v63 = (_QWORD *)((unint64_t)&v49[v52] & v56);
              if (v53)
                v64 = v49;
              else
                v64 = (char *)(v63 + 1);
              v65 = *((unsigned __int8 *)v50 - 3);
              switch(v65)
              {
                case 6:
                  if (v53)
                    v82 = 0;
                  else
                    v82 = *v63;
                  v160(v177, v161, v82);
                  v49 = v64;
                  break;
                case 3:
                  if (v53)
                    v81 = 0;
                  else
                    v81 = *v63;
                  v162(v177, v163, *v55, v81);
                  v49 = v64;
                  break;
                case 1:
                  v66 = *v50;
                  if (v53)
                  {
                    if (!objc_msgSend((id)objc_msgSend(v66, "propertyDescription"), "superCompositeAttribute"))
                      goto LABEL_104;
                    goto LABEL_103;
                  }
                  v98 = objc_msgSend((id)objc_msgSend(v66, "propertyDescription"), "superCompositeAttribute");
                  v99 = *v63;
                  if (v98)
                    setMultiColumnValueDictionary_0(v46, v50 - 2, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v99));
                  else
                    snapshot_set_int64(v46, *v55, v99);
                  v49 = (char *)(v63 + 1);
                  break;
                default:
                  v49 = v64;
                  break;
              }
              goto LABEL_185;
            case 4:
            case 5:
            case 6:
            case 9:
            case 0xC:
              if (v53)
                goto LABEL_91;
              v57 = (const char *)((unint64_t)&v49[v52] & v56);
              v58 = (int *)(v57 + 4);
              v59 = (__CFString *)CFStringCreateWithCString(0, v57 + 4, 0x8000100u);
              v60 = *(int *)v57;
              v61 = *((unsigned __int8 *)v50 - 4);
              if (v61 == 12)
              {
                v73 = (__CFString *)(id)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v59);
                CFRelease(v59);
                v59 = v73;
              }
              else if (v61 == 4)
              {
                v62 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", v59);
                CFRelease(v59);
                v59 = (__CFString *)v62;
              }
              v49 = (char *)v58 + v60;
              if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
              {
                setMultiColumnValueDictionary_0(v46, v50 - 2, (uint64_t)v59);

              }
              else
              {
                snapshot_set_object(v46, *v55, (uint64_t)v59);
              }
              goto LABEL_185;
            case 7:
            case 8:
              if (v53)
                goto LABEL_91;
              v68 = (double *)((unint64_t)&v49[v52] & v56);
              v49 = (char *)(v68 + 1);
              if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
              {
                setMultiColumnValueDictionary_0(v46, v50 - 2, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v68));
              }
              else
              {
                v89 = *((unsigned int *)v50 - 4);
                if (*((_BYTE *)v50 - 4) == 7)
                {
                  v90 = object_getClass(v46);
                  IndexedIvars = object_getIndexedIvars(v90);
                  v92 = *v55;
                  v93 = *v68;
                  if (*(_BYTE *)(IndexedIvars[7] + v89) == 102)
                  {
                    v94 = v93;
                    snapshot_set_float(v46, v92, v94);
                  }
                  else
                  {
                    snapshot_set_double(v46, v92, v93);
                  }
                }
                else
                {
                  snapshot_set_double(v46, *((_DWORD *)v50 - 4), *v68);
                }
              }
              goto LABEL_185;
            case 0xD:
            case 0xE:
              goto LABEL_185;
            case 0x10:
              v67 = (void *)objc_msgSend(*v50, "propertyDescription");
              if (v170 && (objc_msgSend(v67, "_isFileBackedFuture") & 1) == 0)
                goto LABEL_90;
              if (v53)
              {
                if (!objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
                  goto LABEL_104;
                goto LABEL_103;
              }
              v83 = (int *)((unint64_t)&v49[v52] & v56);
              v85 = v83 + 1;
              v84 = *((unsigned __int8 *)v83 + 4);
              if (v84 == 3)
              {
                if (v181 && !v149)
                  v149 = v181[13];
                v102 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v85, *v83);
                v103 = [_NSDataFileBackedFuture alloc];
                v88 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v103, "initWithStoreMetadata:directory:", v102, objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v149, 1));
                goto LABEL_181;
              }
              if (v84 == 1)
              {
                v86 = [_PFExternalReferenceData alloc];
                if (v181)
                  v87 = *((unsigned int *)v181 + 46);
                else
                  v87 = 0;
                v88 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v86, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v85, *v83, 0, 0, v87);
                goto LABEL_181;
              }
              v104 = strnlen((const char *)v83 + 5, *v83 - 1);
              v105 = objc_msgSend(v156, "stringWithFileSystemRepresentation:length:", (char *)v83 + 5, v104);
              v106 = v146;
              if (v146)
              {
                if (!v181)
                {
LABEL_170:
                  v146 = v106;
                  v110 = objc_msgSend(v106, "stringByAppendingPathComponent:", v105);
                  v144 = objc_msgSend(v150, "stringByAppendingPathComponent:", v105);
                  if (v151 && !objc_msgSend(v156, "fileExistsAtPath:", v110))
                  {
                    v113 = 0;
                  }
                  else
                  {
                    v111 = [_PFExternalReferenceData alloc];
                    if (v181)
                      v112 = *((unsigned int *)v181 + 46);
                    else
                      v112 = 0;
                    v113 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v111, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v85, *v83, v110, v144, v112);
                    if (!v151)
                      goto LABEL_182;
                  }
                  if ((objc_msgSend(v156, "fileExistsAtPath:", v110) & 1) != 0)
                  {
LABEL_182:
                    v49 = (char *)v85 + *v83;
                    if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary_0(v46, v50 - 2, (uint64_t)v113);

                    }
                    else
                    {
                      snapshot_set_object(v46, *v55, (uint64_t)v113);
                    }
                    goto LABEL_185;
                  }
                  v114 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:](v181, v105);

                  v115 = [_PFExternalReferenceData alloc];
                  if (v181)
                    v116 = *((unsigned int *)v181 + 46);
                  else
                    v116 = 0;
                  v88 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:](v115, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:", v85, *v83, v110, v144, v116, v114);
LABEL_181:
                  v113 = (_PFExternalReferenceData *)v88;
                  goto LABEL_182;
                }
              }
              else
              {
                if (!v181)
                {
                  v106 = 0;
                  goto LABEL_170;
                }
                v106 = v181[11];
              }
              if (!v150)
                v150 = v181[12];
              goto LABEL_170;
            default:
LABEL_90:
              if (v53)
              {
LABEL_91:
                if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
LABEL_103:
                  setMultiColumnValueNullFlag(v46, (_DWORD *)v50 - 4);
                else
LABEL_104:
                  v176[(unint64_t)*v55 >> 3] |= 1 << (*v55 & 7);
              }
              else
              {
                v74 = (const UInt8 *)((unint64_t)&v49[v52] & v56);
                v75 = (int *)(v74 + 4);
                v76 = CFDataCreate(0, v74 + 4, *(int *)v74);
                v77 = v76;
                v78 = *(int *)v74;
                v79 = *((unsigned __int8 *)v50 - 4);
                if (v79 == 11)
                {
                  if (-[__CFData length](v76, "length") == 16)
                  {
                    v80 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", -[__CFData bytes](v77, "bytes"));
                    CFRelease(v77);
                  }
                  else
                  {

                    v80 = 0;
                  }
                }
                else if (v79 == 15)
                {
                  v80 = +[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v76, (void *)objc_msgSend(*v50, "propertyDescription"));
                  CFRelease(v77);
                }
                else
                {
                  v80 = v76;
                }
                if (objc_msgSend((id)objc_msgSend(*v50, "propertyDescription"), "superCompositeAttribute"))
                  setMultiColumnValueDictionary_0(v46, v50 - 2, (uint64_t)v80);
                else
                  snapshot_set_object(v46, *v55, (uint64_t)v80);

                v49 = (char *)v75 + v78;
              }
              goto LABEL_185;
          }
          break;
        }
      }
      if ((v169 & 1) == 0)
        break;
      v12 = v167;
      v11 = v168;
      v9 = v164;
      v8 = v165;
      LOBYTE(v10) = v166;
      v32 = v171;
      if ((_DWORD)v168 != 2)
      {
        objc_msgSend(v177, "knownKeyValuesPointer");
        v121 = v46;
        v173[v180] = v121;

        goto LABEL_201;
      }
LABEL_210:
      v39 = v177;
LABEL_216:
      v130 = v180;
      *((_QWORD *)v8 + v180) = v39;
      v131 = *(unsigned int *)(v15 + 4);
      if ((v131 & 0x80000000) == 0)
      {
        v132 = *(_QWORD *)(*v182 + 8 * v131);
        v15 = v132 + *(_QWORD *)(v15 + 16);
        v133 = v130 + 1;
        v180 = v133;
        v134 = !v132 || v133 == v172;
        v31 = v179;
        if (!v134)
          continue;
      }
      v30 = 1;
      goto LABEL_227;
    }
    v12 = v167;
    v11 = v168;
    v9 = v164;
    v8 = v165;
    LOBYTE(v10) = v166;
    v32 = v171;
    objc_msgSend(v177, "knownKeyValuesPointer");
    -[NSPersistentStoreCache registerRow:forObjectID:options:](v157, v177, v174, 0);
LABEL_201:
    switch((int)v11)
    {
      case 0:
      case 3:
        v122 = (unsigned int *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((_QWORD **)v12, v174, v159);
        v39 = v122;
        v123 = v177;
        if ((v169 & 1) != 0)
          goto LABEL_216;
        if (!v122)
          goto LABEL_206;
        v124 = v122[4];
        if ((v124 & 0x200) != 0)
        {
          if (v177)
          {
            v128 = v177 + 3;
            if ((int)v177[3] <= 0)
            {
              do
                v129 = __ldxr(v128);
              while (__stxr(v129 + 1, v128));
            }
          }
        }
        else
        {
          v122[4] = v124 | 0x200;
LABEL_206:
          if (v123)
          {
            v125 = v123 + 3;
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
        }
        break;
      case 1:
        v127 = v174;
        _PFfastOidRetain(0, (unint64_t)v174);
        v39 = v127;
        goto LABEL_216;
      case 2:
        goto LABEL_210;
      default:
        goto LABEL_211;
    }
    goto LABEL_216;
  }
LABEL_38:
  PF_FREE_OBJECT_ARRAY(v8);
  v30 = 0;
  v9 = 0;
  v8 = 0;
LABEL_226:
  v32 = v171;
LABEL_227:
  if ((v10 & 2) != 0)
    goto LABEL_243;
  if (v145 && (_DWORD)v11 == 3)
  {
    p_vtable = NSSQLSaveChangesRequestContext.vtable;
    v136 = [_PFArray alloc];
    v137 = -[_PFArray initWithObjects:count:andFlags:andContext:](v136, "initWithObjects:count:andFlags:andContext:", v173, v9, 26, v12);
    *v145 = v137;
LABEL_241:
    v32 = v171;
    goto LABEL_244;
  }
  if ((v10 & 2) != 0 || (_DWORD)v11 == 2)
  {
    v32 = v171;
LABEL_243:
    p_vtable = NSSQLSaveChangesRequestContext.vtable;
    goto LABEL_244;
  }
  p_vtable = (void **)(NSSQLSaveChangesRequestContext + 24);
  if (!v30)
    goto LABEL_241;
  v139 = (int)v9;
  v140 = v173;
  v32 = v171;
  do
  {

    --v139;
  }
  while (v139);
LABEL_244:
  if (v148 >= 0x201)
    NSZoneFree(0, v173);
  if (v147 >= 0x201)
    NSZoneFree(0, v32);
  if (v11 >= 4)
    v141 = 10;
  else
    v141 = dword_18A50A280[v11];
  return objc_msgSend(objc_alloc((Class)(p_vtable + 262)), "initWithObjects:count:andFlags:andContext:", v8, v9, v141, v12);
}

void sub_18A25BB28(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A25B9F8);
  }
  _Unwind_Resume(a1);
}

void sub_18A25BB44(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A25BB68(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A25BB74);
}

void snapshot_set_object(char *a1, unsigned int a2, uint64_t a3)
{
  Class Class;
  unsigned int *IndexedIvars;
  uint64_t v8;
  void *v9;

  Class = object_getClass(a1);
  IndexedIvars = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  v8 = IndexedIvars[a2 + 19];
  v9 = *(void **)&a1[v8];
  *(_QWORD *)&a1[v8] = a3;
  if (v9)

}

unsigned int *snapshot_set_int8(void *a1, unsigned int a2, char a3)
{
  Class Class;
  unsigned int *result;

  Class = object_getClass(a1);
  result = (unsigned int *)object_getIndexedIvars(Class);
  *((_BYTE *)a1 + ((unint64_t)a2 >> 3) + 28) &= ~(1 << (a2 & 7));
  *((_BYTE *)a1 + result[a2 + 19]) = a3;
  return result;
}

unsigned int *snapshot_set_int64(char *a1, unsigned int a2, uint64_t a3)
{
  Class Class;
  unsigned int *result;

  Class = object_getClass(a1);
  result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(_QWORD *)&a1[result[a2 + 19]] = a3;
  return result;
}

unsigned int *snapshot_set_double(char *a1, unsigned int a2, double a3)
{
  Class Class;
  unsigned int *result;

  Class = object_getClass(a1);
  result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(double *)&a1[result[a2 + 19]] = a3;
  return result;
}

const void *_sqlEntityForEntityID(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 72) >= a2)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), ~(unint64_t)*(unsigned int *)(a1 + 68) + a2);
  else
    return 0;
}

unint64_t _PFSetPrimaryKey(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  Class Class;
  int v7;
  unint64_t v8;
  id v9;

  v3 = a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    Class = object_getClass((id)a1);
    if ((*((_BYTE *)object_getIndexedIvars(Class) + 4) & 1) != 0)
    {
      if (HIWORD(a2))
      {
        v9 = objc_alloc(_PFFallbackFactoryForOID((void *)v3));
        return objc_msgSend(v9, "initWithPK64:", a2);
      }
      *(_QWORD *)(v3 + 8) |= a2 << 16;
    }
    else
    {
      *(_QWORD *)(v3 + 16) = a2;
    }
    return v3;
  }
  if (a2 <= 0x3FFFFFFFFFFLL)
  {
    if ((~a1 & 0xC000000000000007) != 0)
      v4 = *MEMORY[0x1E0DE7C58];
    else
      v4 = 7;
    v3 = (v4 ^ a1) & 0x1FFFF0 | (unint64_t)(a2 << 21) | 0x8000000000000005;
    v5 = v3 ^ *MEMORY[0x1E0DE7C58];
    if ((~v5 & 0xC000000000000007) != 0)
      return v5 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(MEMORY[0x1E0DE7C48] + (v5 & 7));
    return v3;
  }
  v7 = *MEMORY[0x1E0DE7C58];
  if ((~a1 & 0xC000000000000007) == 0)
    v7 = 7;
  v8 = _PFTaggedPointersPool + 32 * (((unint64_t)(v7 ^ a1) >> 4) & 0x1FFFF);
  v9 = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)v8, "objectIDFactoryForEntity:", *(_QWORD *)(v8 + 8)), "_fallbackFactory"), "alloc");
  return objc_msgSend(v9, "initWithPK64:", a2);
}

unint64_t _PFfastOidRetain(int a1, unint64_t a2)
{
  Class Class;
  unsigned int *v4;
  unsigned int v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) == 0)
  {
    Class = object_getClass((id)a2);
    if ((*((_BYTE *)object_getIndexedIvars(Class) + 4) & 1) != 0)
    {
      v7 = (unint64_t *)(a2 + 8);
LABEL_7:
      while (1)
      {
        v8 = *v7;
        if ((*v7 & 0x8000) != 0)
          break;
        while (1)
        {
          v9 = __ldaxr(v7);
          if (v9 != v8)
            break;
          if (!__stlxr(v8 + 1, v7))
            return a2;
        }
        __clrex();
      }
      os_unfair_lock_lock_with_options();
      do
      {
        v10 = __ldxr(v7);
        if (v10 != v8)
        {
          __clrex();
          os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
          goto LABEL_7;
        }
      }
      while (__stxr(v8 | 0x8000, v7));
      NSIncrementExtraRefCount((id)a2);
      os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
    }
    else
    {
      v4 = (unsigned int *)(a2 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return a2;
}

unsigned int *snapshot_set_int16(char *a1, unsigned int a2, __int16 a3)
{
  Class Class;
  unsigned int *result;

  Class = object_getClass(a1);
  result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(_WORD *)&a1[result[a2 + 19]] = a3;
  return result;
}

void _PFCMT_SetValue(uint64_t a1, void *a2, const void *a3)
{
  __CFDictionary *v6;
  __CFDictionary **v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  malloc_zone_t *v12;
  const CFDictionaryValueCallBacks *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  malloc_zone_t *v17;
  const CFDictionaryValueCallBacks *v18;
  int v19;
  CFDictionaryValueCallBacks v20;
  CFDictionaryKeyCallBacks keyCallBacks;

  if (a2)
  {
    if ((objc_msgSend(a2, "isTemporaryID") & 1) != 0)
    {
      v7 = (__CFDictionary **)(a1 + 16);
      v6 = *(__CFDictionary **)(a1 + 16);
      if (v6)
      {
LABEL_31:
        CFDictionarySetValue(v6, a2, a3);
        return;
      }
      memset(&keyCallBacks, 0, 24);
      *(_OWORD *)&keyCallBacks.copyDescription = *(_OWORD *)(MEMORY[0x1E0C9B390] + 24);
      keyCallBacks.hash = *(CFDictionaryHashCallBack *)(MEMORY[0x1E0C9B390] + 40);
      memset(&v20, 0, sizeof(v20));
      v20.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E0C9B3A0] + 24);
      v8 = *(_DWORD *)(a1 + 48) & 3;
      if (v8 != 1)
      {
        *(_OWORD *)&v20.retain = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 8);
        if (v8 == 3)
          *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E0C9B390] + 8);
      }
      *v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &keyCallBacks, &v20);
      _CFDictionarySetCapacity();
    }
    else
    {
      v9 = _PFModelMapSlotForEntity(*(_QWORD *)(a1 + 56), (_QWORD *)objc_msgSend(a2, "entity"));
      LODWORD(v10) = v9;
      if (v9 < 0)
      {
        v10 = v9 & 0x7FFFFFFF;
        v16 = *(_QWORD **)(a1 + 24);
        if (!v16)
        {
          v17 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
          if (!_PF_Private_Malloc_Zone)
            v17 = malloc_default_zone();
          v16 = malloc_type_zone_calloc(v17, 1uLL, 8 * *(_QWORD *)(a1 + 8), 0x80040B8603338uLL);
          *(_QWORD *)(a1 + 24) = v16;
        }
        v6 = (__CFDictionary *)v16[v10];
        if (v6)
          goto LABEL_31;
        v18 = 0;
        memset(&keyCallBacks, 0, 24);
        *(_OWORD *)&keyCallBacks.copyDescription = *(_OWORD *)(MEMORY[0x1E0C9B390] + 24);
        keyCallBacks.hash = *(CFDictionaryHashCallBack *)(MEMORY[0x1E0C9B390] + 40);
        memset(&v20, 0, sizeof(v20));
        v20.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E0C9B3A0] + 24);
        v19 = *(_DWORD *)(a1 + 48) & 3;
        if (v19 != 1)
        {
          *(_OWORD *)&v20.retain = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 8);
          if (v19 == 3)
            *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E0C9B390] + 8);
          v18 = &v20;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v10) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &keyCallBacks, v18);
        _CFDictionarySetCapacity();
        v15 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (!v11)
        {
          v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
          if (!_PF_Private_Malloc_Zone)
            v12 = malloc_default_zone();
          v11 = malloc_type_zone_calloc(v12, 1uLL, 8 * *(_QWORD *)(a1 + 8), 0x80040B8603338uLL);
          *(_QWORD *)(a1 + 32) = v11;
        }
        v6 = (__CFDictionary *)v11[v10];
        if (v6)
          goto LABEL_31;
        v13 = 0;
        v10 = v10;
        memset(&keyCallBacks, 0, 24);
        keyCallBacks.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E0C9B390] + 24);
        keyCallBacks.equal = (CFDictionaryEqualCallBack)_PFObjectIDFastEquals64;
        keyCallBacks.hash = (CFDictionaryHashCallBack)_PFObjectIDFastHash64;
        memset(&v20, 0, sizeof(v20));
        v20.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x1E0C9B3A0] + 24);
        v14 = *(_DWORD *)(a1 + 48) & 3;
        if (v14 != 1)
        {
          *(_OWORD *)&v20.retain = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 8);
          if (v14 == 3)
            *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E0C9B390] + 8);
          v13 = &v20;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &keyCallBacks, v13);
        _CFDictionarySetCapacity();
        v15 = *(_QWORD *)(a1 + 32);
      }
      v7 = (__CFDictionary **)(v15 + 8 * v10);
    }
    v6 = *v7;
    goto LABEL_31;
  }
}

const void *_PFCMT_GetValue(_QWORD *a1, void *a2)
{
  const __CFDictionary *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  if ((objc_msgSend(a2, "isTemporaryID") & 1) == 0)
  {
    v5 = _PFModelMapSlotForEntity(a1[7], (_QWORD *)objc_msgSend(a2, "entity"));
    if ((v5 & 0x80000000) != 0)
    {
      v7 = a1[3];
      if (!v7)
        return 0;
      v4 = *(const __CFDictionary **)(v7 + 8 * (v5 & 0x7FFFFFFF));
      if (!v4)
        return 0;
    }
    else
    {
      v6 = a1[4];
      if (!v6)
        return 0;
      v4 = *(const __CFDictionary **)(v6 + 8 * v5);
      if (!v4)
        return 0;
    }
    return CFDictionaryGetValue(v4, a2);
  }
  v4 = (const __CFDictionary *)a1[2];
  if (v4)
    return CFDictionaryGetValue(v4, a2);
  return 0;
}

id _PFEntityForManagedObject(id result)
{
  void *v1;
  void *v2;
  Class Class;

  if (result)
  {
    v1 = result;
    v2 = (void *)*((_QWORD *)result + 5);
    if (!v2 || (result = (id)objc_msgSend(v2, "entity")) == 0)
    {
      Class = object_getClass(v1);
      return _PFEntityForClass(Class);
    }
  }
  return result;
}

unint64_t *_PFFastEntityClass(unint64_t *result)
{
  unint64_t *v1;
  unint64_t *v2;
  Class v3;
  NSString *v4;
  Class v5;
  Class v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v11;
  const __CFString *v12;
  const char *ImageName;
  const char *v14;
  const char *Name;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD v35[3];
  _QWORD v36[4];

  v36[3] = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v1 = result;
  v2 = result + 7;
  result = (unint64_t *)result[7];
  if (result)
    return result;
  v3 = (Class)objc_opt_class();
  v4 = (NSString *)objc_msgSend(v1, "managedObjectClassName");
  v5 = NSClassFromString(v4);
  if (v5)
  {
    v6 = v5;
    if (v5 == v3 || (-[objc_class isSubclassOfClass:](v5, "isSubclassOfClass:", v3) & 1) != 0)
    {
      if (!(_BYTE)z9dsptsiQ80etb9782fsrs98bfdle88)
      {
LABEL_9:
        v3 = v6;
        goto LABEL_12;
      }
      v7 = -[objc_class instanceMethodForSelector:](v6, "instanceMethodForSelector:", sel_isEqual_);
      if (v7 == +[NSManagedObject instanceMethodForSelector:](NSManagedObject, "instanceMethodForSelector:", sel_isEqual_))
      {
        v8 = -[objc_class instanceMethodForSelector:](v6, "instanceMethodForSelector:", sel_hash);
        if (v8 == +[NSManagedObject instanceMethodForSelector:](NSManagedObject, "instanceMethodForSelector:", sel_hash))goto LABEL_9;
        v31 = (void *)MEMORY[0x1E0C99DA0];
        v32 = *MEMORY[0x1E0C99768];
        v33 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Class '%s' for entity '%@' has an illegal override of NSManagedObject -hash"), class_getName(v6), objc_msgSend(v1, "name"));
      }
      else
      {
        v31 = (void *)MEMORY[0x1E0C99DA0];
        v32 = *MEMORY[0x1E0C99768];
        v33 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Class '%s' for entity '%@' has an illegal override of NSManagedObject -isEqual:"), class_getName(v6), objc_msgSend(v1, "name"));
      }
      v27 = v33;
      v28 = v31;
      v29 = v32;
      v30 = 0;
    }
    else
    {
      v11 = objc_msgSend(v1, "name");
      if (v11)
        v12 = (const __CFString *)v11;
      else
        v12 = CFSTR("<nil entity>");
      ImageName = class_getImageName(v6);
      if (ImageName)
        v14 = ImageName;
      else
        v14 = "<unknown library>";
      Name = class_getName(v6);
      if (Name)
        v16 = Name;
      else
        v16 = "<unknown class>";
      v17 = class_getName(v6);
      v34 = v14;
      _NSCoreDataLog(1, (uint64_t)CFSTR("Class '%s' for entity '%@' is not a subclass of NSManagedObject.  It was loaded from '%s'"), v18, v19, v20, v21, v22, v23, (uint64_t)v17);
      v36[0] = v12;
      v35[0] = CFSTR("entityName");
      v35[1] = CFSTR("className");
      v36[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16);
      v35[2] = CFSTR("sourceLibrary");
      v36[2] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
      v24 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 3);
      v25 = (void *)MEMORY[0x1E0C99DA0];
      v26 = *MEMORY[0x1E0C99768];
      v27 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\"%@\" is not a subclass of NSManagedObject."), objc_msgSend(v1, "managedObjectClassName"), v12, v34);
      v28 = v25;
      v29 = v26;
      v30 = v24;
    }
    objc_exception_throw((id)objc_msgSend(v28, "exceptionWithName:reason:userInfo:", v29, v27, v30));
  }
  if ((objc_msgSend(CFSTR("NSManagedObject"), "isEqualToString:", v4) & 1) == 0)
    PFUseToolchainBehaviors();
LABEL_12:
  if ((-[objc_class _isGeneratedClass](v3, "_isGeneratedClass") & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = (objc_class *)-[objc_class classForEntity:](v3, "classForEntity:", v1);
    v3 = v9;
  }
  while (!__ldaxr(v2))
  {
    if (!__stlxr((unint64_t)v3, v2))
      return (unint64_t *)*v2;
  }
  __clrex();
  if (v9 != (objc_class *)*v2)
    -[objc_class _entityDeallocated](v9, "_entityDeallocated");
  return (unint64_t *)*v2;
}

uint64_t __generateReturnPointerMethod_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t __generateReturnPointerMethod_block_invoke_0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void *_PFAllocateObject(Class cls, uint64_t a2)
{
  malloc_zone_t *v4;
  size_t InstanceSize;
  void *v6;
  void *v7;

  v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v4 = malloc_default_zone();
  InstanceSize = class_getInstanceSize(cls);
  v6 = malloc_type_zone_calloc(v4, 1uLL, ((InstanceSize + 7) & 0xFFFFFFFFFFFFFFF8) + a2, 0xDE655EDAuLL);
  v7 = v6;
  if (*MEMORY[0x1E0C9A980])
  {
    class_getName(cls);
    __CFSetLastAllocationEventName();
    if (!v7)
      return v7;
    goto LABEL_5;
  }
  if (v6)
LABEL_5:
    objc_constructInstance(cls, v7);
  return v7;
}

uint64_t _sqlCoreLookupSQLEntityForEntityDescription(void *a1, _QWORD *a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v2 = 0;
  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v2 = _sqlEntityForEntityDescription(objc_msgSend(a1, "model"), a2);
      if (!v2)
      {
        v5 = (id)objc_msgSend(a1, "ancillarySQLModels");
        v12 = 0u;
        v13 = 0u;
        v14 = 0u;
        v15 = 0u;
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v13;
          while (2)
          {
            for (i = 0; i != v7; ++i)
            {
              if (*(_QWORD *)v13 != v8)
                objc_enumerationMutation(v5);
              v10 = _sqlEntityForEntityDescription(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i)), a2);
              if (v10)
              {
                v2 = v10;
                goto LABEL_14;
              }
            }
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
            if (v7)
              continue;
            break;
          }
        }
        v2 = 0;
LABEL_14:

      }
    }
  }
  return v2;
}

uint64_t _sqlEntityForEntityDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  result = 0;
  if (a1 && a2)
  {
    v5 = objc_msgSend((id)objc_msgSend(a2, "managedObjectModel"), "_modelsReferenceIDOffset");
    if (v5 == *(_DWORD *)(a1 + 68) && (v6 = a2[20], (unint64_t)*(unsigned int *)(a1 + 72) - v5 >= v6))
      return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6);
    else
      return 0;
  }
  return result;
}

uint64_t _PFModelMapSlotForEntity(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  const __CFString *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  objc_class *v25;
  uint64_t v26;
  uint8_t buf[16];

  v4 = objc_msgSend((id)objc_msgSend(a2, "managedObjectModel"), "_modelsReferenceIDOffset");
  if (a2)
  {
    result = a2[20];
    if (a1)
      goto LABEL_4;
  }
  else
  {
    result = 0;
    if (a1)
      goto LABEL_4;
  }
  if (v4)
  {
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Model map is unexpectedly nil");
    _NSCoreDataLog(17, v10, v11, v12, v13, v14, v15, v16, v26);
    v17 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18A253000, v17, OS_LOG_TYPE_FAULT, "CoreData: Model map is unexpectedly nil", buf, 2u);
    }
    v18 = (void *)MEMORY[0x1E0C99DA0];
    v19 = *MEMORY[0x1E0C99768];
    v20 = CFSTR("Model map is nil");
LABEL_23:
    objc_exception_throw((id)objc_msgSend(v18, "exceptionWithName:reason:userInfo:", v19, v20, 0));
  }
LABEL_4:
  if (v4 > 16049)
  {
    switch(v4)
    {
      case 16050:
        v9 = 0;
        v6 = *(_QWORD **)(a1 + 64);
LABEL_15:
        v8 = v9 + 1;
        result += v6[v9];
        goto LABEL_16;
      case 17000:
        v7 = 0;
        v6 = *(_QWORD **)(a1 + 64);
        goto LABEL_14;
      case 18000:
        v6 = *(_QWORD **)(a1 + 64);
        result += *v6;
        v7 = 1;
LABEL_14:
        v9 = v7 + 1;
        result += v6[v7];
        goto LABEL_15;
    }
    goto LABEL_24;
  }
  if (!v4)
    return result;
  if (v4 != 16000)
  {
LABEL_24:
    v21 = (void *)MEMORY[0x1E0C99DA0];
    v22 = *MEMORY[0x1E0C99768];
    v23 = (void *)MEMORY[0x1E0CB3940];
    v24 = v4;
    v25 = (objc_class *)objc_opt_class();
    v20 = (const __CFString *)objc_msgSend(v23, "stringWithFormat:", CFSTR("Managed object model with offset %lu is not known to %@"), v24, NSStringFromClass(v25));
    v18 = v21;
    v19 = v22;
    goto LABEL_23;
  }
  v8 = 0;
  v6 = *(_QWORD **)(a1 + 64);
LABEL_16:
  result += v6[v8];
  return result;
}

unsigned int *snapshot_set_int32(char *a1, unsigned int a2, int a3)
{
  Class Class;
  unsigned int *result;

  Class = object_getClass(a1);
  result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(_DWORD *)&a1[result[a2 + 19]] = a3;
  return result;
}

void calculateNextBranchOperation(const __CFArray *a1, CFIndex a2, const void ***a3, _DWORD *a4, _DWORD *a5, const __CFAllocator *a6, _DWORD *a7)
{
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  size_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  const __CFDictionary *Mutable;
  const void **v32;
  CFIndex v33;
  const void *v34;
  const void *v35;
  void *Value;
  CFIndex Count;
  int v38;
  const void **v39;
  const void ***v40;
  _DWORD *v41;
  CFAllocatorRef v42;
  uint64_t (*v43)(const __CFArray *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  CFRange v46;

  v41 = a4;
  v42 = a6;
  v40 = a3;
  v45 = *MEMORY[0x1E0C80C00];
  *a7 = 0;
  *a5 = 1;
  v9 = a2 - 1;
  if ((unint64_t)a2 <= 1)
    v10 = 1;
  else
    v10 = a2;
  if ((unint64_t)a2 >= 0x201)
    v11 = 1;
  else
    v11 = v10;
  v12 = 8 * v11;
  MEMORY[0x1E0C80A78]();
  v15 = (const void **)((char *)&v40 - v14);
  v16 = 8 * v13;
  if (v17 > 0x200)
    v15 = (const void **)NSAllocateScannedUncollectable();
  else
    bzero((char *)&v40 - v14, 8 * v13);
  v46.location = 0;
  v46.length = a2;
  CFArrayGetValues(a1, v46, v15);
  v18 = strlen((const char *)*v15);
  MEMORY[0x1E0C80A78]();
  v19 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a2 > 0x200)
    v19 = (uint64_t *)NSAllocateScannedUncollectable();
  else
    bzero(v19, v16);
  if (v18 < 1)
  {
    v20 = 0;
    goto LABEL_35;
  }
  v20 = 0;
  v21 = 0;
  v22 = 1;
  while (1)
  {
    if (a2 < 1)
    {
      CFMergeSortArray();
LABEL_25:
      v27 = 1;
      goto LABEL_26;
    }
    v23 = 0;
    do
    {
      v19[v23] = *((char *)v15[v23] + v21);
      ++v23;
    }
    while (a2 != v23);
    CFMergeSortArray();
    if (a2 < 2)
      goto LABEL_25;
    v24 = *v19;
    v25 = v19 + 1;
    v26 = v9;
    v27 = 1;
    do
    {
      v29 = *v25++;
      v28 = v29;
      if (v29 != v24)
        ++v27;
      v24 = v28;
      --v26;
    }
    while (v26);
LABEL_26:
    if (v27 == a2)
      break;
    v30 = v22 < v27;
    if (v22 <= v27)
      v22 = v27;
    if (v30)
      v20 = v21;
    if (++v21 == v18)
      goto LABEL_35;
  }
  v20 = v21;
LABEL_35:
  *(_DWORD *)v42 = v20;
  v42 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable(v42, 0, 0, 0);
  if (a2 >= 1)
  {
    v32 = v15;
    v33 = a2;
    do
    {
      v34 = *v32;
      v35 = (const void *)*((unsigned __int8 *)*v32 + v20);
      Value = (void *)CFDictionaryGetValue(Mutable, v35);
      if (!Value)
      {
        Value = CFArrayCreateMutable(v42, 0, 0);
        CFDictionarySetValue(Mutable, v35, Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, v34);
      ++v32;
      --v33;
    }
    while (v33);
  }
  Count = CFDictionaryGetCount(Mutable);
  v38 = Count;
  v39 = (const void **)PF_ALLOCATE_OBJECT_ARRAY(Count);
  CFDictionaryGetKeysAndValues(Mutable, 0, v39);
  CFRelease(Mutable);
  v43 = customCharAt;
  v44 = v20;
  CFMergeSortArray();
  *v40 = v39;
  *v41 = v38;
  if ((unint64_t)a2 >= 0x201)
  {
    NSZoneFree(0, v19);
    NSZoneFree(0, v15);
  }
}

void *PF_ALLOCATE_OBJECT_ARRAY(uint64_t a1)
{
  malloc_zone_t *v2;

  v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v2 = malloc_default_zone();
  return malloc_type_zone_malloc(v2, 8 * a1, 0xBC2F5D9BuLL);
}

_QWORD *_PFFastTemporaryIDCreation(void *a1)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = _PFAllocateObject((Class)_NSTemporaryObjectID_Default_Class, 0);
  if (v2)
  {
    v2[2] = a1;
    do
    {
      v3 = __ldxr((unsigned int *)&_CoreDataProcessInstanceTempIDCounter);
      v4 = v3 + 1;
    }
    while (__stxr(v4, (unsigned int *)&_CoreDataProcessInstanceTempIDCounter));
    *((_DWORD *)v2 + 3) = v4;
  }
  return v2;
}

void _pvfk_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 2uLL, a4, a5, a6, a7, a8);
}

uint64_t _PFObjectIDFastEquals64(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  Class Class;
  Class v6;
  Class v7;
  uint64_t v8;
  Class v9;
  uint64_t v10;

  if (a1 == a2)
    return 1;
  result = 0;
  if ((a1 & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0)
  {
    Class = object_getClass((id)a1);
    if (Class == (Class)objc_opt_class())
    {
      v6 = object_getClass((id)a1);
      if ((*((_BYTE *)object_getIndexedIvars(v6) + 4) & 2) != 0)
      {
        v7 = object_getClass((id)a1);
        if ((*((_BYTE *)object_getIndexedIvars(v7) + 4) & 1) != 0)
          v8 = *(_QWORD *)(a1 + 8) >> 16;
        else
          v8 = *(_QWORD *)(a1 + 16);
        v9 = object_getClass((id)a2);
        if ((*((_BYTE *)object_getIndexedIvars(v9) + 4) & 1) != 0)
          v10 = *(_QWORD *)(a2 + 8) >> 16;
        else
          v10 = *(_QWORD *)(a2 + 16);
        return v8 == v10;
      }
      else
      {
        return objc_msgSend(*(id *)(a1 + 16), "isEqual:", *(_QWORD *)(a2 + 16));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _pvfk_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 7uLL, a4, a5, a6, a7, a8);
}

void _pvfk_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 4uLL, a4, a5, a6, a7, a8);
}

void sub_18A261354(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_95);
  objc_exception_rethrow();
}

void sub_18A26136C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _pvfk_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 3uLL, a4, a5, a6, a7, a8);
}

void _pvfk_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0xFuLL, a4, a5, a6, a7, a8);
}

void _pvfk_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 6uLL, a4, a5, a6, a7, a8);
}

void _pvfk_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0xEuLL, a4, a5, a6, a7, a8);
}

Class override_instace_class(void *a1)
{
  objc_class *Class;

  Class = object_getClass(a1);
  return class_getSuperclass(Class);
}

Class override_instace_class_0(void *a1)
{
  objc_class *Class;

  Class = object_getClass(a1);
  return class_getSuperclass(Class);
}

void _pvfk_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x15uLL, a4, a5, a6, a7, a8);
}

void _pvfk_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 9uLL, a4, a5, a6, a7, a8);
}

void _pvfk_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0xBuLL, a4, a5, a6, a7, a8);
}

void _pvfk_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x14uLL, a4, a5, a6, a7, a8);
}

void _pvfk_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0xDuLL, a4, a5, a6, a7, a8);
}

void _PFfastRowRelease(int a1, _DWORD *obj)
{
  unsigned int *v2;
  int v3;

  v2 = obj + 2;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0)
  {
    obj[2] += 0x20000000;
    _NSQLRow_dealloc_standard((id *)obj);
  }
}

void _pvfk_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0xCuLL, a4, a5, a6, a7, a8);
}

void _pvfk_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x12uLL, a4, a5, a6, a7, a8);
}

void _pvfk_49(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x31uLL, a4, a5, a6, a7, a8);
}

void _pvfk_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x11uLL, a4, a5, a6, a7, a8);
}

void _pvfk_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x26uLL, a4, a5, a6, a7, a8);
}

void _pvfk_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x10uLL, a4, a5, a6, a7, a8);
}

void _pvfk_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x21uLL, a4, a5, a6, a7, a8);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__44(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__46(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__53(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__54(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__56(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__57(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__59(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__60(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__61(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__62(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__63(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__64(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__65(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__67(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__69(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__70(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void _pvfk_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x1BuLL, a4, a5, a6, a7, a8);
}

void _pvfk_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x18uLL, a4, a5, a6, a7, a8);
}

void _pvfk_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 8uLL, a4, a5, a6, a7, a8);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__39(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__40(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__41(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__43(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__45(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__46(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__47(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__48(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__49(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__50(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__51(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__52(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__53(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__54(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__55(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__56(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__57(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__58(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__59(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__60(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__61(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__64(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__65(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__66(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__67(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__68(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__69(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__70(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void _pvfk_26(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x1AuLL, a4, a5, a6, a7, a8);
}

uint64_t _compareSQLColumnsByFetchIndex(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL8 v5;

  if (a1)
  {
    v2 = *(unsigned __int16 *)(a1 + 26);
    if (a2)
    {
LABEL_3:
      v3 = *(unsigned __int16 *)(a2 + 26);
      goto LABEL_4;
    }
  }
  else
  {
    v2 = 0;
    if (a2)
      goto LABEL_3;
  }
  v3 = 0;
LABEL_4:
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return -1;
}

void _pvfk_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x13uLL, a4, a5, a6, a7, a8);
}

void sub_18A263518(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A263538(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A26347CLL);
}

void sub_18A2646E4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2646B0);
}

void sub_18A2646F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *exc_buf, int a17, char a18)
{
  if (a2)
  {
    objc_begin_catch(a1);
    if ((a18 & 1) != 0)
      JUMPOUT(0x18A264398);
    JUMPOUT(0x18A2646D0);
  }
  JUMPOUT(0x18A2646B0);
}

void sub_18A264708(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  if (a2)
  {
    objc_begin_catch(a1);
    if ((a18 & 1) != 0)
      JUMPOUT(0x18A264398);
    JUMPOUT(0x18A2646D0);
  }
  JUMPOUT(0x18A2646B0);
}

uint64_t PFInstrumentsRecordingEnabled()
{
  uint64_t result;

  result = kdebug_is_enabled();
  if ((_DWORD)result)
  {
    if (PFInstrumentsGetLog_logtoken != -1)
      dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
    return os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog);
  }
  return result;
}

void sub_18A264A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18A264BFC()
{
  __break(1u);
}

void sub_18A264C44()
{
  objc_end_catch();
  JUMPOUT(0x18A264C18);
}

void sub_18A264C50()
{
  JUMPOUT(0x18A264C68);
}

void sub_18A264C5C()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A264C64);
  JUMPOUT(0x18A264C68);
}

void sub_18A264DC0()
{
  __break(1u);
}

void sub_18A264E08()
{
  objc_end_catch();
  JUMPOUT(0x18A264DDCLL);
}

void sub_18A264E14()
{
  JUMPOUT(0x18A264E2CLL);
}

void sub_18A264E20()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A264E28);
  JUMPOUT(0x18A264E2CLL);
}

void _perform(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t context[5];

  context[4] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(NSObject **)(a1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
      context[0] = a2;
      context[1] = a1;
      context[2] = 0;
      context[3] = v3;
      if ((*(_BYTE *)(a1 + 41) & 0x80) != 0)
      {
        if (_PFIsSerializedWithMainQueue())
        {
LABEL_19:
          internalBlockToNSManagedObjectContextPerform(context);
          return;
        }
      }
      else if (v3)
      {
        v4 = 0;
        __dmb(0xBu);
        v5 = v3;
        while (v5 != a1 && v5 != v4)
        {
          if (!v4)
            v4 = v5;
          v5 = *(_QWORD *)(v5 + 8);
          if (!v5)
          {
            v6 = 0;
            __dmb(0xBu);
            while (a1 != v3 && a1 != v6)
            {
              if (!v6)
                v6 = a1;
              a1 = *(_QWORD *)(a1 + 8);
              if (!a1)
                goto LABEL_20;
            }
            goto LABEL_19;
          }
        }
        goto LABEL_19;
      }
LABEL_20:
      dispatch_sync_f(v2, context, (dispatch_function_t)internalBlockToNSManagedObjectContextPerform);
    }
  }
}

void _perform_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v2 = a1;
  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
    v10[0] = a2;
    v10[1] = v2;
    v11 = 0;
    v12 = v4;
    v13 = 0;
    if (v4)
    {
      v5 = 0;
      __dmb(0xBu);
      v6 = v4;
      while (v6 != v2 && v6 != v5)
      {
        if (!v5)
          v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = 0;
          __dmb(0xBu);
          while (v2 != v4 && v2 != v7)
          {
            if (!v7)
              v7 = v2;
            v2 = *(_QWORD *)(v2 + 8);
            if (!v2)
              goto LABEL_15;
          }
          break;
        }
      }
      v11 = 8196;
      gutsOfBlockToNSPersistentStoreCoordinatorPerform(v10);
    }
    else
    {
LABEL_15:
      v11 = 8196;
      dispatch_sync_f(v3, v10, (dispatch_function_t)internalBlockToNSPersistentStoreCoordinatorPerform);
    }
    v8 = v13;
    if (v13)
    {
      v9 = v13;
      objc_exception_throw(v8);
    }
  }
}

_PFFetchPlanHeader *fetchPlanAllocateInitialize(NSFetchRequest *a1, NSPersistentStore *a2, NSManagedObjectContext *a3)
{
  _PFFetchPlanHeader *v6;
  NSSQLEntity *v7;
  uint64_t v8;
  NSSQLRowCache *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  NSSQLEntity *statement_entity;
  NSMutableArray *subentities;
  int v18;
  int v19;
  int v20;

  v6 = objc_alloc_init(_PFFetchPlanHeader);
  v6->fetch_request = a1;
  v6->requested_batch_size = -[NSFetchRequest fetchLimit](a1, "fetchLimit");
  v6->sql_core = a2;
  v7 = (NSSQLEntity *)_sqlCoreLookupSQLEntityForEntityDescription(a2, (_QWORD *)-[NSFetchRequest entity](a1, "entity"));
  v6->statement_entity = v7;
  v6->sql_model = (NSSQLModel *)-[NSSQLEntity model](v7, "model");
  v6->current_context = a3;
  v8 = objc_opt_class();
  if (v8 == objc_opt_class())
  {
    if (a2)
      v9 = (NSSQLRowCache *)-[NSSQLCore rowCacheForGeneration:](a2, (void *)-[NSManagedObjectContext _queryGenerationToken](a3, "_queryGenerationToken"));
    else
      v9 = 0;
    v6->row_cache = v9;
  }
  v6->entity_for_ek_funptr = (void *)-[NSSQLModel methodForSelector:](v6->sql_model, "methodForSelector:", sel_entityForID_);
  v10 = -[NSFetchRequest includesPropertyValues](a1, "includesPropertyValues");
  v11 = -[NSFetchRequest resultType](a1, "resultType");
  v12 = -[NSFetchRequest resultType](a1, "resultType");
  if (-[NSFetchRequest returnsObjectsAsFaults](a1, "returnsObjectsAsFaults"))
    v13 = -[NSArray count](-[NSFetchRequest relationshipKeyPathsForPrefetching](a1, "relationshipKeyPathsForPrefetching"), "count") != 0;
  else
    v13 = 1;
  if (-[NSFetchRequest resultType](a1, "resultType"))
  {
    v14 = 1;
  }
  else
  {
    v15 = -[NSArray count](-[NSFetchRequest propertiesToFetch](a1, "propertiesToFetch"), "count");
    v14 = v15 == 0;
    if (v15)
      v10 = 1;
  }
  statement_entity = v6->statement_entity;
  if (statement_entity)
  {
    subentities = statement_entity->_subentities;
    if (subentities)
      LODWORD(statement_entity) = -[NSMutableArray count](subentities, "count") != 0;
    else
      LODWORD(statement_entity) = 0;
  }
  if (v11 == 1)
    v18 = 4;
  else
    v18 = 16;
  if (v11 != 1 && v12 != 2)
  {
    if ((v14 | v10 ^ 1) == 1)
    {
      if ((v13 & v10) != 0)
        v18 = 12;
      else
        v18 = 0;
    }
    else
    {
      v18 = 20;
    }
  }
  if (v12 == 2)
    v19 = 1;
  else
    v19 = v10;
  if (v19)
    v20 = 0;
  else
    v20 = 2;
  v6->flags = ($C6D29F7D67899FE11DE7F8953A7C3E5F)(statement_entity | v20 | v18 | *(_DWORD *)&v6->flags & 0x20);
  return v6;
}

void sub_18A266264(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A266290(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2661FCLL);
  }
  JUMPOUT(0x18A266284);
}

void sub_18A2666C0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

#error "18A26673C: call analysis failed (funcsize=41)"

void sub_18A2673C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A267EB8()
{
  objc_end_catch();
  JUMPOUT(0x18A267ECCLL);
}

void sub_18A267EC4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A267EC8);
  objc_terminate();
}

unsigned int *snapshot_set_float(char *a1, unsigned int a2, float a3)
{
  Class Class;
  unsigned int *result;

  Class = object_getClass(a1);
  result = (unsigned int *)object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] &= ~(1 << (a2 & 7));
  *(float *)&a1[result[a2 + 19]] = a3;
  return result;
}

void snapshot_get_value_as_object(id *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Class Class;
  _QWORD *IndexedIvars;
  double v12;
  uint64_t v13;
  int v14;
  double v15;
  void *v16;
  uint64_t v17;

  if (a1)
  {
    Class = object_getClass(a1);
    IndexedIvars = object_getIndexedIvars(Class);
    if (((*((unsigned __int8 *)a1 + ((unint64_t)a2 >> 3) + 28) >> (a2 & 7)) & 1) == 0)
    {
      v13 = *((unsigned int *)IndexedIvars + a2 + 19);
      v14 = *(char *)(IndexedIvars[7] + a2);
      switch(*(_BYTE *)(IndexedIvars[7] + a2))
      {
        case 'c':
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", *((char *)a1 + v13));
          break;
        case 'd':
          v15 = *(double *)((char *)a1 + v13);
          v16 = *(void **)(*(_QWORD *)(objc_msgSend(a1[2], "entity") + 96) + 24 + 8 * a2);
          if ((objc_msgSend(v16, "_isRelationship") & 1) != 0 || objc_msgSend(v16, "attributeType") != 900)
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
          else
            objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v15);
          break;
        case 'e':
        case 'g':
        case 'h':
          return;
        case 'f':
          LODWORD(v12) = *(_DWORD *)((char *)a1 + v13);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
          break;
        case 'i':
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)((char *)a1 + v13));
          break;
        default:
          if (v14 == 113)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(id *)((char *)a1 + v13));
          }
          else if (v14 == 115)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)((char *)a1 + v13));
          }
          break;
      }
    }
  }
  else
  {
    _NSCoreDataLog(1, (uint64_t)CFSTR("warning snapshot_get_value_as_object called on NULL"), a3, a4, a5, a6, a7, a8, v17);
    __break(1u);
  }
}

void _PF_Handler_Primitive_GetProperty(id **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  char *v14;
  id *v15;
  unsigned int v16;
  uint64_t v17;

  if (!_PF_Threading_Debugging_level)
  {
    if (a1)
      goto LABEL_3;
LABEL_6:
    v11 = MEMORY[0x10];
    goto LABEL_7;
  }
  _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_valueForKey_);
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v11 = *((_DWORD *)a1 + 4);
  if ((v11 & 0x4000) != 0)
  {
    v12 = a1;
    v11 = (_DWORD)a1[2] & 0xFFFFBFFF;
    *((_DWORD *)a1 + 4) = v11;
  }
LABEL_7:
  v13 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v13)
    v14 = (char *)a1 + v13;
  else
    v14 = 0;
  if (((v14[(a2 >> 3) - ((v11 >> 22) & 0x3FC)] >> (a2 & 7)) & 1) == 0)
    _PF_FulfillDeferredFault(a1, a2);
  v15 = a1[3];
  if (v15)
  {
    if (a4)
      _NSGetUsingKeyValueGetter();
    else
      snapshot_get_value_as_object(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v16 = *((_DWORD *)a1 + 4);
    if ((v16 & 0x38000) != 0x10000 && (v16 & 0x80) == 0)
      _NSCoreDataLog(1, (uint64_t)CFSTR("NULL _cd_rawData but the object is not being turned into a fault"), a3, a4, a5, a6, a7, a8, v17);
  }
}

void sub_18A26A3CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t _comparePropertiesByName(void *a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "name"), "compare:", objc_msgSend(a2, "name"));
}

id returnIdThing1(void *a1, const char *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "_underlyingProperty"), a2);
}

id returnUIntegerThing1(void *a1, const char *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "_underlyingProperty"), a2);
}

void _PF_Leopard_CFDictionaryDestroy(_QWORD *ptr)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  const void *v5;
  void *v7;
  malloc_zone_t *v8;
  void *v9;
  malloc_zone_t *v10;
  malloc_zone_t *v11;

  v2 = ptr[1];
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = ptr[8];
      v5 = *(const void **)(ptr[9] + 8 * i);
      if ((const void *)v4 != v5 && v5 != (const void *)~v4)
      {
        CFRelease(v5);
        CFRelease(*(CFTypeRef *)(ptr[10] + 8 * i));
      }
    }
  }
  v7 = (void *)ptr[9];
  if (v7)
  {
    v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      v8 = malloc_default_zone();
      v7 = (void *)ptr[9];
    }
    malloc_zone_free(v8, v7);
  }
  v9 = (void *)ptr[10];
  if (v9)
  {
    v10 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      v10 = malloc_default_zone();
      v9 = (void *)ptr[10];
    }
    malloc_zone_free(v10, v9);
  }
  v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v11 = malloc_default_zone();
  malloc_zone_free(v11, ptr);
}

void snapshot_set_null(char *a1, unsigned int a2)
{
  Class Class;
  _QWORD *IndexedIvars;
  uint64_t v6;
  int v7;
  void *v8;

  Class = object_getClass(a1);
  IndexedIvars = object_getIndexedIvars(Class);
  a1[((unint64_t)a2 >> 3) + 28] |= 1 << (a2 & 7);
  v6 = *((unsigned int *)IndexedIvars + a2 + 19);
  v7 = *(char *)(IndexedIvars[7] + a2);
  switch(*(_BYTE *)(IndexedIvars[7] + a2))
  {
    case 'c':
      a1[v6] = 0;
      return;
    case 'd':
      goto LABEL_6;
    case 'e':
    case 'g':
    case 'h':
      goto LABEL_7;
    case 'f':
    case 'i':
      *(_DWORD *)&a1[v6] = 0;
      return;
    default:
      if (v7 == 113)
      {
LABEL_6:
        *(_QWORD *)&a1[v6] = 0;
      }
      else if (v7 == 115)
      {
        *(_WORD *)&a1[v6] = 0;
      }
      else
      {
LABEL_7:
        v8 = *(void **)&a1[v6];
        *(_QWORD *)&a1[v6] = 0;
        if (v8)

      }
      return;
  }
}

void sub_18A26CE48(_Unwind_Exception *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A26CC04);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A26CFFC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A26CFD0);
  }
  JUMPOUT(0x18A26CF3CLL);
}

CFComparisonResult _NSCoreDataDoStringCompare(int a1, const UniChar *a2, int a3, const UniChar *a4, CFStringCompareFlags a5)
{
  const __CFAllocator *v10;
  CFIndex v11;
  const __CFAllocator *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFComparisonResult v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  CFRange v50;

  v49 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v10 = _PFStackAllocatorCreate((unint64_t *)&v17, 1024);
  v11 = (uint64_t)a1 >> 1;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v13 = CFStringCreateWithCharactersNoCopy(v10, a2, v11, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v14 = CFStringCreateWithCharactersNoCopy(v10, a4, (uint64_t)a3 >> 1, v12);
  v50.location = 0;
  v50.length = v11;
  v15 = CFStringCompareWithOptions(v13, v14, v50, a5);
  if (*((_QWORD *)&v18 + 1))
  {
    if (v13)
      CFRelease(v13);
    if (v14)
      CFRelease(v14);
  }
  return v15;
}

CFAllocatorRef _PFStackAllocatorCreate(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  CFAllocatorRef result;
  unint64_t v5;
  CFAllocatorContext context;

  v3 = ((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF0;
  *a1 = v3;
  a1[1] = v3;
  a1[2] = (unint64_t)a1 + a2;
  a1[3] = 0;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  context.allocate = (CFAllocatorAllocateCallBack)stack_allocate;
  context.reallocate = (CFAllocatorReallocateCallBack)stack_reallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)stack_deallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)preferredSize;
  result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE38], &context);
  v5 = (a1[1] + 15) & 0xFFFFFFFFFFFFFFF0;
  *a1 = v5;
  a1[1] = v5;
  return result;
}

void sub_18A26E4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _kvcPropertysPublicGetters(unint64_t *a1)
{
  if (*(_QWORD *)(a1[19] + 24))
    return *(_QWORD *)(a1[19] + 24);
  else
    return _resolveForSelectorAndType(a1, sel__createValueGetterWithContainerClassID_key_, (objc_class *)qword_1ECD8D9A0, 3);
}

BOOL PFUseToolchainBehaviors()
{
  objc_opt_self();
  return byte_1ECD8DA21 != 0;
}

void _pvfk_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x16uLL, a4, a5, a6, a7, a8);
}

void _pvfk_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x19uLL, a4, a5, a6, a7, a8);
}

void _pvfk_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x27uLL, a4, a5, a6, a7, a8);
}

uint64_t _sharedIMPL_pvfk_core_i(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t result;
  char *v11;
  Class Class;

  v8 = a3;
  result = _pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v11 = *(char **)(a1 + 24);
    Class = object_getClass(v11);
    return *(unsigned int *)&v11[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
  }
  return result;
}

id _executeNewRowValuesForObjectFaultRequest(_QWORD *a1)
{
  void *v1;
  const void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v20;

  v1 = a1;
  if (a1)
  {
    v2 = (const void *)a1[11];
    a1 = (_QWORD *)a1[4];
  }
  else
  {
    v2 = 0;
  }
  objc_msgSend(a1, "stalenessInterval");
  v4 = v3;
  if (v3 <= 0.0)
    v5 = *(double *)&NSSQLDistantPastTimeInterval;
  else
    v5 = CFAbsoluteTimeGetCurrent() - v3;
  if (v4 == 0.0)
    v6 = *(double *)&NSSQLDistantFutureTimeInterval;
  else
    v6 = v5;
  v20 = -[NSPersistentStoreCache rowForObjectID:afterTimestamp:]((os_unfair_lock_s *)objc_msgSend(v1, "rowCache", v5), v2, v6);
  if (!v20)
    v20 = _executeObjectFaultRequest((uint64_t)v1);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v1) < 3)
  {
    if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v1) >= 1)
      _NSCoreDataLog(4, (uint64_t)CFSTR("fault fulfilled from database for : %@"), v13, v14, v15, v16, v17, v18, (uint64_t)v2);
  }
  else
  {
    _NSCoreDataLog(4, (uint64_t)CFSTR("fault fulfilled from database for : %@ with row values: %@"), v7, v8, v9, v10, v11, v12, (uint64_t)v2);
  }
  return v20;
}

_PFArray *newFetchedRowsForFetchPlan_MT(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  double Current;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v10;
  void *v11;
  int v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  double v21;
  double *Initialize;
  unsigned int v23;
  unsigned int v24;
  double v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  void *v31;
  int v32;
  CFMutableArrayRef Mutable;
  _QWORD *v34;
  _PFTask *v35;
  uint64_t (*v36)(uint64_t);
  int v37;
  int v38;
  void *v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  char v50;
  const __CFArray *v51;
  _PFArray *v52;
  const __CFAllocator *ValueAtIndex;
  const void *v54;
  uint64_t v55;
  uint64_t i;
  const __CFAllocator *v57;
  char *v58;
  uint64_t v59;
  int v60;
  CFIndex v61;
  unsigned int v62;
  _BYTE *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unsigned int v68;
  char *v69;
  CFAllocatorRef v70;
  uint64_t v71;
  _PFArray *v72;
  uint64_t v73;
  _PFArray *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  int v82;
  int v83;
  unsigned int v84;
  id v85;
  void *v86;
  void *v87;
  _BOOL4 v88;
  int active;
  size_t v90;
  malloc_zone_t *v91;
  malloc_zone_t *v92;
  char v93;
  malloc_zone_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t j;
  uint64_t v105;
  _QWORD *v106;
  char v107;
  uint64_t k;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  void **v114;
  uint64_t *v115;
  int v116;
  int v117;
  uint64_t v118;
  malloc_zone_t *v119;
  malloc_zone_t *v120;
  malloc_zone_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  const __CFString *v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const __CFString *v145;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  void *v150;
  _BOOL4 v151;
  unsigned int v152;
  uint64_t v153;
  _BOOL4 v154;
  char v155;
  char v156;
  char isKindOfClass;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  CFAllocatorRef allocatorb;
  uint64_t v161;
  CFMutableArrayRef v162;
  const __CFArray *v163;
  int v164;
  uint64_t v165;
  int v166;
  _PFArray *v167;
  char *v168;
  __CFArray *theArray;
  id v170;
  void **v171;
  void *ptr;
  unsigned __int8 *ptra;
  uint64_t v174;
  void *cf;
  int v176;
  uint64_t v177;
  void *v178;
  int v179;
  id *v180;
  _QWORD v181[5];
  int v182;
  int v183;
  _QWORD v185[5];
  int v186;
  int v187;
  BOOL v188;
  uint64_t v189;
  _QWORD v190[6];

  v190[3] = *MEMORY[0x1E0C80C00];
  if (a1)
    v2 = a1[17];
  else
    v2 = 0;
  v149 = (_QWORD *)objc_msgSend(a1, "fetchStatement");
  v174 = (uint64_t)a1;
  v3 = -[NSSQLStoreRequestContext debugLogLevel]((uint64_t)a1);
  v4 = *(_DWORD *)(v2 + 72);
  if ((v4 & 2) != 0)
    v5 = 4096;
  else
    v5 = 512;
  v176 = v3;
  if (v3 < 1)
  {
    Current = 0.0;
    v7 = v2;
    LOBYTE(v2) = *(_DWORD *)(v2 + 72);
  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    v7 = v2;
    LODWORD(v2) = *(_DWORD *)(v2 + 72);
  }
  if (*(_DWORD *)(v7 + 16))
    v8 = *(_DWORD *)(v7 + 16);
  else
    v8 = -1;
  v147 = objc_msgSend(*(id *)(v7 + 8), "relationshipKeyPathsForPrefetching");
  v177 = v7;
  v10 = (v4 & 2) == 0 && (*(_DWORD *)(v7 + 72) & 0x1C) == 12;
  v154 = v10;
  if (v174)
    v151 = *(_BYTE *)(v174 + 202) != 0;
  else
    v151 = 0;
  v189 = 1;
  v178 = (void *)objc_msgSend(*(id *)(v7 + 8), "_asyncResultHandle");
  v11 = (void *)objc_msgSend(v178, "progress");
  ptr = v11;
  if (v11)
  {
    v12 = objc_msgSend(v11, "totalUnitCount");
    v164 = v12 & ~(v12 >> 31);
  }
  else
  {
    v164 = 0;
  }
  v13 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  v170 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  CFRetain(v170);

  if (v154)
  {
    v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    CFRetain(v14);
    v15 = v14;

  }
  else
  {
    v15 = 0;
  }
  if (v174)
    v16 = *(_QWORD **)(v174 + 24);
  else
    v16 = 0;
  -[NSSQLiteConnection selectRowsWithStatement:cached:](v16, v149, v151);
  v17 = CFAbsoluteTimeGetCurrent();
  cf = v15;
  v150 = v13;
  v161 = (uint64_t)v16;
  v162 = 0;
  v179 = 0;
  v18 = 0;
  v156 = 0;
  theArray = 0;
  v19 = 0;
  v20 = 0;
  v166 = v2 & 3;
  if (v176 <= 0)
    v21 = 0.0;
  else
    v21 = v17 - Current;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    Initialize = (double *)fetchResultSetAllocateInitialize(v20, (*(_DWORD *)(v177 + 72) >> 5) & 1);
    Initialize[1] = v17;
    *(_DWORD *)Initialize = v179;
    if (v8 >= v5)
      v23 = v5;
    else
      v23 = v8;
    if (v8 >= v5)
      v24 = v8 - v5;
    else
      v24 = 0;
    *(_DWORD *)(v177 + 16) = v23;
    if (v176 <= 0)
      v25 = 0.0;
    else
      v25 = CFAbsoluteTimeGetCurrent();
    if (v178 && objc_msgSend(v178, "_isCancelled"))
    {
      v179 += v18;
      v26 = ((_BYTE)Initialize[6] & 1) == 0;
LABEL_45:
      v26 &= ~objc_msgSend(v178, "_isCancelled");
      goto LABEL_46;
    }
    v27 = -[NSSQLiteConnection fetchResultSet:usingFetchPlan:](v161, (uint64_t)Initialize, v177);
    v18 = v27;
    v179 += v27;
    v26 = ((_BYTE)Initialize[6] & 1) == 0;
    if (v178)
      goto LABEL_45;
LABEL_46:
    if (ptr && (objc_msgSend(ptr, "isCancelled") & 1) == 0)
    {
      v28 = v164;
      v29 = 2 * v164;
      if (v179 >= 2 * v164)
        v29 = v179 + 1;
      v30 = v164 > 0 && v179 >= v164;
      if (v30)
        v28 = v29;
      v164 = v28;
      if (v174)
        v31 = *(void **)(v174 + 32);
      else
        v31 = 0;
      v185[0] = MEMORY[0x1E0C809B0];
      v185[1] = 3221225472;
      v185[2] = __newFetchedRowsForFetchPlan_MT_block_invoke;
      v185[3] = &unk_1E1EE0328;
      v188 = v30;
      v185[4] = ptr;
      v186 = v28;
      v187 = v179;
      objc_msgSend(v31, "performBlock:", v185);
    }
    if (v19)
      v32 = 0;
    else
      v32 = v26;
    if (v32 == 1)
    {
      Mutable = CFArrayCreateMutable(allocator, 0, 0);
      if (v166 != 2)
        v162 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      v34 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
      *v34 = v174;
      v34[1] = Mutable;
      v34[2] = v170;
      v34[3] = &v189;
      v34[4] = v162;
      v35 = [_PFTask alloc];
      if (v166 == 2)
        v36 = _prepareObjectIDsOnBackgroundThread;
      else
        v36 = _prepareRowsOnBackgroundThreads;
      v19 = -[_PFTask initWithFunction:withArgument:andPriority:](v35, "initWithFunction:withArgument:andPriority:", v36, v34, 2);
      if (cf)
        CFRelease(cf);
      cf = 0;
      v156 = 1;
      theArray = Mutable;
    }
    if (v176 >= 1)
      v21 = v21 + CFAbsoluteTimeGetCurrent() - v25;
    if (v18)
    {
      if (v19)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v19 + 32));
        CFArrayAppendValue(theArray, Initialize);
        pthread_mutex_unlock((pthread_mutex_t *)(v19 + 32));
        pthread_cond_signal((pthread_cond_t *)(v19 + 96));
        goto LABEL_78;
      }
      v190[0] = 0;
      v39 = (void *)_prepareResultsFromResultSet((uint64_t)Initialize, v190, v174);
      objc_msgSend(v170, "addObject:", v39);
      if (v190[0])
      {
        objc_msgSend(cf, "addObject:");
        v40 = (void *)v190[0];
      }
      else
      {
        v40 = 0;
      }

      v37 = *((_DWORD *)Initialize + 4);
      v38 = *((_DWORD *)Initialize + 5);
      fetchResultSetDeallocate((uint64_t)Initialize);
    }
    else
    {
      v37 = *((_DWORD *)Initialize + 4);
      v38 = *((_DWORD *)Initialize + 5);
      fetchResultSetDeallocate((uint64_t)Initialize);
    }
    v20 = v38 * v37;
LABEL_78:
    if (v8 > v5)
      v41 = v26;
    else
      v41 = 0;
    v8 = v24;
  }
  while ((v41 & 1) != 0);
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v161, v151);
  if (v176 >= 1)
  {
    v48 = CFSTR("sql connection fetch time: %.4fs");
    if (v174 && *(_BYTE *)(v174 + 80))
      v48 = CFSTR("sql connection fetch time: \x1B[31m%.4f\x1B[0ms");
    _NSCoreDataLog(4, (uint64_t)v48, v42, v43, v44, v45, v46, v47, *(uint64_t *)&v21);
  }
  if (v19)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v19 + 32));
    v189 = 0;
    if (!*(_DWORD *)(v19 + 144))
      pthread_cond_signal((pthread_cond_t *)(v19 + 96));
    while (!*(_DWORD *)(v19 + 144))
      pthread_cond_wait((pthread_cond_t *)(v19 + 96), (pthread_mutex_t *)(v19 + 32));
    pthread_mutex_unlock((pthread_mutex_t *)(v19 + 32));

  }
  v49 = objc_msgSend(v170, "count");
  v50 = v154;
  if (!v162)
    v50 = 1;
  if ((v50 & 1) != 0)
  {
    v51 = v162;
  }
  else
  {
    CFRelease(v162);
    v51 = 0;
  }
  v163 = v51;
  if (v178 && (objc_msgSend(v178, "_isCancelled") & 1) != 0)
  {
    v179 = 0;
LABEL_109:
    allocatora = 0;
    v54 = v170;
    v167 = (_PFArray *)(id)NSArray_EmptyArray;
    goto LABEL_147;
  }
  if (!v49)
    goto LABEL_109;
  if (v49 == 1)
  {
    v52 = (_PFArray *)(id)objc_msgSend(v170, "objectAtIndex:", 0);
    if (v154)
    {
      if (cf)
      {
        ValueAtIndex = (const __CFAllocator *)objc_msgSend(cf, "objectAtIndex:", 0);
        if (!ValueAtIndex)
          goto LABEL_145;
      }
      else
      {
        if (!v163)
          goto LABEL_145;
        ValueAtIndex = (const __CFAllocator *)CFArrayGetValueAtIndex(v163, 0);
        if (!ValueAtIndex)
          goto LABEL_145;
      }
      v167 = v52;
      allocatora = ValueAtIndex;
      v54 = v170;
      CFRetain(ValueAtIndex);
      goto LABEL_147;
    }
LABEL_145:
    allocatora = 0;
    v167 = v52;
    goto LABEL_146;
  }
  v55 = 0;
  for (i = 0; i != v49; ++i)
    v55 += objc_msgSend((id)objc_msgSend(v170, "objectAtIndex:", i), "count");
  v57 = (const __CFAllocator *)PF_ALLOCATE_OBJECT_ARRAY(v55);
  if (v154)
    v58 = (char *)PF_ALLOCATE_OBJECT_ARRAY(v55);
  else
    v58 = 0;
  v59 = objc_msgSend(v170, "objectAtIndex:", 0);
  if (v59)
    v60 = *(_BYTE *)(v59 + 32) & 0x3B;
  else
    v60 = 0;
  v61 = 0;
  v62 = v60 & 0xFFFFFFE7;
  v152 = v60 & 0xFFFFFFE7 | 8;
  v168 = v58;
  allocatorb = v57;
  while (2)
  {
    v63 = (_BYTE *)objc_msgSend(v170, "objectAtIndex:", v61);
    objc_msgSend(v63, "getObjects:", v57);
    v64 = objc_msgSend(v63, "count");
    if (v63)
    {
      v63[32] &= ~2u;
      v63[32] &= ~4u;
    }
    if (v154)
    {
      if (cf)
      {
        v65 = (void *)objc_msgSend(cf, "objectAtIndex:", v61);
        goto LABEL_125;
      }
      if (v163)
      {
        v65 = (void *)CFArrayGetValueAtIndex(v163, v61);
LABEL_125:
        v66 = v65;
      }
      else
      {
        v66 = 0;
      }
      objc_msgSend(v66, "getObjects:range:", v58, 0, objc_msgSend(v66, "count"));
      v58 += 8 * objc_msgSend(v66, "count");
    }
    v57 = (const __CFAllocator *)((char *)v57 + 8 * v64);
    if (v49 != ++v61)
      continue;
    break;
  }
  v67 = 0;
  v68 = (*(_DWORD *)(v177 + 72) >> 2) & 7;
  if (v68 > 5)
  {
    v69 = v168;
    v70 = allocatorb;
    v71 = v152;
  }
  else
  {
    v69 = v168;
    v70 = allocatorb;
    v71 = v152;
    if (((1 << v68) & 0x29) != 0)
    {
      if (v174)
        v67 = *(_QWORD *)(v174 + 32);
      else
        v67 = 0;
      v71 = v62 | 0x28;
    }
  }
  v167 = -[_PFArray initWithObjects:count:andFlags:andContext:]([_PFArray alloc], "initWithObjects:count:andFlags:andContext:", v70, v55, v71, v67);
  if (v154)
  {
    v72 = [_PFArray alloc];
    v73 = v147 ? 11 : 8;
    v74 = -[_PFArray initWithObjects:count:andFlags:andContext:](v72, "initWithObjects:count:andFlags:andContext:", v69, v55, v73, 0);
    allocatora = (CFAllocatorRef)v74;
    if (v74)
    {
      v54 = v170;
      CFRetain(v74);

      goto LABEL_147;
    }
  }
  allocatora = 0;
LABEL_146:
  v54 = v170;
LABEL_147:
  if (v54)
    CFRelease(v54);
  v153 = -[_PFArray count](v167, "count");
  if (ptr && (objc_msgSend(ptr, "isCancelled") & 1) == 0)
  {
    if (v174)
      v81 = *(void **)(v174 + 32);
    else
      v81 = 0;
    v82 = 2 * v164;
    v181[0] = MEMORY[0x1E0C809B0];
    v181[1] = 3221225472;
    if (v179 >= 2 * v164)
      v82 = v179 + 1;
    v181[2] = __newFetchedRowsForFetchPlan_MT_block_invoke_50;
    v181[3] = &unk_1E1EE0328;
    v181[4] = ptr;
    if (v164 > 0 && v179 >= v164)
      v83 = v82;
    else
      v83 = v164;
    v182 = v83;
    v183 = v179;
    objc_msgSend(v81, "performBlock:", v181);
  }
  if (v153 != v179)
    _NSCoreDataLog(1, (uint64_t)CFSTR("result array has %lu entries, but we fetched %d rows"), v75, v76, v77, v78, v79, v80, v153);
  if (v153)
  {
    if (v147)
    {
      v84 = (*(_DWORD *)(v177 + 72) >> 2) & 7;
      if (v84 <= 5 && ((1 << v84) & 0x29) != 0)
      {
        objc_msgSend(v150, "drain");
        v85 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
        if ((*(_DWORD *)(v177 + 72) & 0x1C) == 4)
        {
          v86 = 0;
          goto LABEL_168;
        }
        v87 = (void *)+[_PFRoutines newArrayOfObjectIDsFromCollection:]((uint64_t)_PFRoutines, v167);
        v86 = v87;
        if ((*(_DWORD *)(v177 + 72) & 0x1C) == 4)
LABEL_168:
          v87 = v167;
        _prefetchForFetchRequest(v87, 0, (void *)v174);

        v150 = v85;
      }
    }
  }
  v88 = v154;
  if (!v153)
    v88 = 0;
  if (v88)
  {
    if ((v156 & 1) != 0)
      active = +[_PFTask getNumActiveProcessors]();
    else
      active = 1;
    v90 = -[_PFArray count](v167, "count");
    v91 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v91 = malloc_default_zone();
    ptra = (unsigned __int8 *)malloc_type_zone_calloc(v91, 1uLL, v90, 0x100004077774924uLL);
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      v180 = -[_PFArray _objectsPointer](v167, "_objectsPointer");
    }
    else
    {
      v92 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v92 = malloc_default_zone();
      v180 = (id *)malloc_type_zone_calloc(v92, 1uLL, 8 * v90, 0x80040B8603338uLL);
      -[_PFArray getObjects:range:](v167, "getObjects:range:", v180, 0, v90);
    }
    objc_opt_class();
    v93 = objc_opt_isKindOfClass();
    if ((v93 & 1) != 0)
    {
      v171 = (void **)-[__CFAllocator _objectsPointer](allocatora, "_objectsPointer");
    }
    else
    {
      v94 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v94 = malloc_default_zone();
      v171 = (void **)malloc_type_zone_calloc(v94, 1uLL, 8 * v90, 0x80040B8603338uLL);
      -[__CFAllocator getObjects:range:](allocatora, "getObjects:range:", v171, 0, -[__CFAllocator count](allocatora, "count"));
    }
    v95 = v90 / active;
    v96 = v90 % active;
    v97 = active - 1;
    v155 = v93;
    if (active == 1)
    {
      v98 = 0;
    }
    else
    {
      v98 = PF_CALLOC_SCANNED_BYTES(8 * v97);
      v99 = 0;
      do
      {
        v100 = PF_CALLOC_UNSCANNED_BYTES(0x30uLL);
        *v100 = v174;
        v100[1] = v180;
        v100[2] = v171;
        v100[3] = v96 + (v99 + 1) * v95;
        v100[4] = v95;
        v100[5] = ptra;
        v98[v99++] = -[_PFTask initWithFunction:withArgument:andPriority:]([_PFTask alloc], "initWithFunction:withArgument:andPriority:", _fireFaultsOnBackgroundThread, v100, 2);
      }
      while (v97 != v99);
    }
    v101 = v95 + v96;
    if (v174)
    {
      v102 = *(_QWORD *)(v174 + 32);
      v103 = *(_QWORD *)(v174 + 128);
    }
    else
    {
      v102 = 0;
      v103 = 0;
    }
    v148 = v102;
    v165 = v103;
    if (v101)
    {
      for (j = 0; j < v101; ++j)
      {
        v105 = (uint64_t)v180[j];
        if (((*(_DWORD *)(v105 + 16) >> 15) & 3 | 4) == 5)
        {
          v106 = *(_QWORD **)(v105 + 48);
          if (v106 && *v106)
          {
            v107 = 3;
          }
          else
          {
            _PFFaultHandlerFulfillFault(v103, v105, v102, v171[j], 0);
            v107 = 1;
          }
          ptra[j] = v107;
        }
      }
    }
    if (v98)
    {
      if (v97)
      {
        for (k = 0; k != v97; ++k)
        {
          v109 = v98[k];
          pthread_mutex_lock((pthread_mutex_t *)(v109 + 32));
          while (!*(_DWORD *)(v109 + 144))
            pthread_cond_wait((pthread_cond_t *)(v109 + 96), (pthread_mutex_t *)(v109 + 32));
          pthread_mutex_unlock((pthread_mutex_t *)(v109 + 32));

        }
      }
      PF_FREE_OBJECT_ARRAY(v98);
    }
    v110 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (v90)
    {
      v111 = MEMORY[0x1E0C9AAB0];
      v112 = MEMORY[0x1E0C9AAA0];
      v114 = v171;
      v113 = ptra;
      v115 = (uint64_t *)v180;
      do
      {
        v117 = *v113++;
        v116 = v117;
        if (v117)
        {
          v118 = v111;
          if (v116 != 1)
          {
            _PFFaultHandlerFulfillFault(v165, *v115, v148, *v114, 1);
            v118 = v112;
          }
        }
        else
        {
          v118 = v112;
        }
        objc_msgSend(v110, "addObject:", v118);
        ++v114;
        ++v115;
        --v90;
      }
      while (v90);
    }
    -[NSSQLFetchRequestContext addFaultsThatWereFired:]((_QWORD *)v174, v110);

    v119 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v119 = malloc_default_zone();
    malloc_zone_free(v119, ptra);
    if ((isKindOfClass & 1) == 0)
    {
      v120 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v120 = malloc_default_zone();
      malloc_zone_free(v120, v180);
    }
    if ((v155 & 1) == 0)
    {
      v121 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v121 = malloc_default_zone();
      malloc_zone_free(v121, v171);
    }
  }
  if (allocatora)
    CFRelease(allocatora);
  if (cf)
    CFRelease(cf);
  if (v176 >= 2)
  {
    _NSCoreDataLog(4, (uint64_t)CFSTR("fetch using %@ returned %lu rows"), v75, v76, v77, v78, v79, v80, (uint64_t)v149);
    if (v176 >= 3)
    {
      if (v167)
        _NSCoreDataLog(4, (uint64_t)CFSTR(" with values: %@"), v122, v123, v124, v125, v126, v127, (uint64_t)v167);
    }
  }
  objc_msgSend(v150, "drain");
  if (theArray)
    CFRelease(theArray);
  if (v163)
    CFRelease(v163);
  if (v178)
    v128 = objc_msgSend(v178, "_isCancelled");
  else
    v128 = 0;
  objc_msgSend(*(id *)(v177 + 8), "_setAsyncResultHandle:", 0);
  objc_msgSend(0, "drain");
  if (v176 >= 1)
  {
    if (v178)
      v129 = v128;
    else
      v129 = 0;
    if ((v129 & 1) != 0)
    {
      if (v174 && *(_BYTE *)(v174 + 80))
      {
        v136 = CFAbsoluteTimeGetCurrent();
        v137 = CFSTR("Fetch cancelled.  Total fetch execution time: \x1B[31m%.4f\x1B[0ms.");
      }
      else
      {
        v136 = CFAbsoluteTimeGetCurrent();
        v137 = CFSTR("Fetch cancelled.  Total fetch execution time: %.4fs.");
      }
      _NSCoreDataLog(4, (uint64_t)v137, v130, v131, v132, v133, v134, v135, COERCE__INT64(v136 - Current));
    }
    else
    {
      if (v174 && *(_BYTE *)(v174 + 80))
      {
        v138 = CFAbsoluteTimeGetCurrent();
        -[_PFArray count](v167, "count");
        v145 = CFSTR("total fetch execution time: \x1B[31m%.4f\x1B[0ms for %d rows.");
      }
      else
      {
        v138 = CFAbsoluteTimeGetCurrent();
        -[_PFArray count](v167, "count");
        v145 = CFSTR("total fetch execution time: %.4fs for %d rows.");
      }
      _NSCoreDataLog(4, (uint64_t)v145, v139, v140, v141, v142, v143, v144, COERCE__INT64(v138 - Current));
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v174) >= 4)
        -[NSSQLiteConnection logQueryPlanForStatement:](v161, v149);
    }
  }
  return v167;
}

void sub_18A270F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *exc_buf, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      if (!a26)
        JUMPOUT(0x18A270D08);
      JUMPOUT(0x18A270D00);
    }
    objc_begin_catch(a1);

    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18A271310(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2712D0);
  }
  _Unwind_Resume(a1);
}

void sub_18A271324(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A271338);
  JUMPOUT(0x18A271488);
}

void sub_18A271454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *exc_buf)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A2701D4);
  }
  _Unwind_Resume(a1);
}

void sub_18A27146C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2714A0);
  }
  _Unwind_Resume(a1);
}

void sub_18A271480(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A271488);
  objc_terminate();
}

void sub_18A271494(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A27149CLL);
  _Unwind_Resume(a1);
}

void gutsOfBlockToNSPersistentStoreCoordinatorPerform(_QWORD *a1)
{
  uint64_t v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  id v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (void (**)(_QWORD))*a1;
  v2 = a1[1];
  v4 = a1[2];
  if (_PF_Threading_Debugging_level >= 2)
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 16));
  *(_DWORD *)(v2 + 24) |= 4u;
  if ((v4 & 4) != 0)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = 0;
  if ((v4 & 0x2000) != 0)
LABEL_7:
    __dmb(0xBu);
LABEL_8:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 712);
  v8 = a1[3];
  if (v7 == v2)
  {
    v9 = 0;
  }
  else
  {
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v2;
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)(StatusReg + 712) = v2;
  }
  v3[2](v3);
  if ((v4 & 1) != 0)
  {
    _Block_release(v3);
    CFRelease((CFTypeRef)v2);
    free(a1);
  }
  if ((v4 & 4) != 0)
    objc_msgSend(v5, "drain");
  if (v7 != v2)
  {
    *(_QWORD *)(StatusReg + 712) = v7;
    if (v8)
      *(_QWORD *)(v8 + 8) = v9;
  }
  if ((v4 & 0x2000) != 0)
    __dmb(0xBu);
}

void sub_18A2716B4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

#error "18A271720: call analysis failed (funcsize=92)"

void sub_18A271858(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A2717BCLL);
  }
  _Unwind_Resume(a1);
}

#error "18A2718D0: call analysis failed (funcsize=31)"

void sub_18A271920(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A271638);
  }
  _Unwind_Resume(a1);
}

void sub_18A27194C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A271954);
  objc_terminate();
}

void sub_18A271B28(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A271B4C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A271AB8);
}

void fetchResultSetDeallocate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  malloc_zone_t *v5;
  malloc_zone_t *v6;
  malloc_zone_t *v7;
  malloc_zone_t *v8;

  v2 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v5 = malloc_default_zone();
      malloc_zone_free(v5, *(void **)(*(_QWORD *)(a1 + 64) + v3));
      v3 += 8;
    }
    while (v4 != v3);
  }
  v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v6 = malloc_default_zone();
  malloc_zone_free(v6, *(void **)(a1 + 64));
  v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v7 = malloc_default_zone();
  malloc_zone_free(v7, *(void **)(a1 + 72));
  v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v8 = malloc_default_zone();
  malloc_zone_free(v8, (void *)a1);
}

_DWORD *fetchResultSetAllocateInitialize(unsigned int a1, int a2)
{
  unsigned int v3;
  size_t v4;
  malloc_zone_t *v5;
  _DWORD *v6;
  malloc_zone_t *v7;
  _QWORD *v8;
  malloc_zone_t *v9;
  void *v10;
  malloc_zone_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  int v15;

  if (a1 >= 0x20000)
    v3 = 0x20000;
  else
    v3 = a1;
  if (a1)
    v4 = v3;
  else
    v4 = 15359;
  v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v5 = malloc_default_zone();
  v6 = malloc_type_zone_calloc(v5, 1uLL, 0x60uLL, 0x10800407186F754uLL);
  v6[4] = v4;
  v6[5] = 1;
  v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v7 = malloc_default_zone();
  v8 = malloc_type_zone_malloc(v7, 0x10uLL, 0x80040B8603338uLL);
  *((_QWORD *)v6 + 8) = v8;
  v8[1] = 0;
  v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (a2)
  {
    if (!_PF_Private_Malloc_Zone)
      v9 = malloc_default_zone();
    v10 = malloc_type_zone_calloc(v9, 1uLL, v4, 0x961AEF50uLL);
  }
  else
  {
    if (!_PF_Private_Malloc_Zone)
      v9 = malloc_default_zone();
    v10 = malloc_type_zone_malloc(v9, v4, 0x10BDE7EBuLL);
  }
  *((_QWORD *)v6 + 10) = v10;
  **((_QWORD **)v6 + 8) = v10;
  *((_QWORD *)v6 + 11) = *((_QWORD *)v6 + 10);
  v6[6] = 0;
  *((_QWORD *)v6 + 4) = 0;
  v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v11 = malloc_default_zone();
  v12 = malloc_type_zone_malloc(v11, 0x10uLL, 0x100004000313F17uLL);
  *((_QWORD *)v6 + 9) = v12;
  *v12 = v4;
  v12[1] = 0;
  v13 = (_QWORD *)*((_QWORD *)v6 + 8);
  *((_QWORD *)v6 + 11) = *v13;
  v14 = (_OWORD *)(v13[v6[6]] + *((_QWORD *)v6 + 4));
  *v14 = 0u;
  v14[1] = 0u;
  v6[7] = -1;
  *(_DWORD *)v14 = -1;
  if (a2)
    v15 = 4;
  else
    v15 = 0;
  v6[12] = v6[12] & 0xFFFFFFFB | v15;
  return v6;
}

void sub_18A273A2C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A273A4C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A2739F4);
}

void _pvfk_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x17uLL, a4, a5, a6, a7, a8);
}

void sub_18A27578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A2758A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18A275A0C: call analysis failed (funcsize=25)"

void sub_18A275A60(void *exc_buf)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1 + 12);
  objc_exception_rethrow();
}

void sub_18A275A90(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _sharedIMPL_pvfk_core_c(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  void *v10;
  Class Class;

  v8 = a3;
  if (_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
  {
    v10 = *(void **)(a1 + 24);
    Class = object_getClass(v10);
    return (char)*((_BYTE *)v10 + *((unsigned int *)object_getIndexedIvars(Class) + v8 + 19));
  }
  else
  {
    return 0;
  }
}

void developerSubmittedBlockToNSManagedObjectContextPerform(_QWORD *a1)
{
  void *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  void *v5;
  unint64_t StatusReg;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = (void (**)(_QWORD))*a1;
  v2 = (void *)a1[1];
  v4 = a1[2];
  if ((v4 & 4) != 0)
  {
    v5 = (void *)MEMORY[0x18D76B4E4]();
    if ((v4 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x2000) != 0)
LABEL_5:
    __dmb(0xBu);
LABEL_6:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(void **)(StatusReg + 712);
  v8 = a1[3];
  if (v7 == v2)
  {
    v9 = 0;
  }
  else
  {
    if (v8)
    {
      v9 = *(void **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v2;
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)(StatusReg + 712) = v2;
  }
  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl((uint64_t)v2, sel_performBlock_);
  v3[2](v3);
  if ((v4 & 0x1000) == 0)
  {
    if ((v4 & 1) != 0)
      _Block_release(v3);
    if ((v4 & 2) != 0)
    {
      objc_msgSend(v2, "processPendingChanges");
    }
    else if ((v4 & 4) == 0)
    {
LABEL_35:
      if (v7 != v2)
      {
        *(_QWORD *)(StatusReg + 712) = v7;
        if (v8)
          *(_QWORD *)(v8 + 8) = v9;
      }
      if ((v4 & 1) != 0)
      {
        CFRelease(v2);
        free(a1);
      }
      else
      {

      }
      goto LABEL_44;
    }
    if (v5)
      objc_autoreleasePoolPop(v5);
    -[NSManagedObjectContext _processReferenceQueue:]((uint64_t)v2, 0);
    goto LABEL_35;
  }
  if ((v4 & 1) != 0)
  {
    _Block_release(v3);
    free(a1);
  }
  if ((v4 & 4) != 0 && v5)
    objc_autoreleasePoolPop(v5);
  if (v7 == v2)
  {
    *(_QWORD *)(StatusReg + 712) = 0;
    if (v9 == v2 && v8)
      *(_QWORD *)(v8 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(StatusReg + 712) = v7;
    if (v8)
    {
      if (v9 == v2)
        v10 = 0;
      else
        v10 = v9;
      *(_QWORD *)(v8 + 8) = v10;
    }
  }
LABEL_44:
  if ((v4 & 0x2000) != 0)
    __dmb(0xBu);
}

void sub_18A279AFC(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A279B1C(void *a1)
{
  __int16 v1;

  objc_begin_catch(a1);
  if ((v1 & 0x1000) == 0)
    JUMPOUT(0x18A279A70);
  JUMPOUT(0x18A279A2CLL);
}

void sub_18A27A1F0()
{
  objc_end_catch();
  JUMPOUT(0x18A27A214);
}

void sub_18A27A208(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A27A55C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _PFCMT_RemoveValue(_QWORD *a1, void *a2)
{
  __CFDictionary *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if ((objc_msgSend(a2, "isTemporaryID") & 1) != 0)
    {
      v4 = (__CFDictionary *)a1[2];
      if (!v4)
        return;
LABEL_10:
      CFDictionaryRemoveValue(v4, a2);
      return;
    }
    v5 = _PFModelMapSlotForEntity(a1[7], (_QWORD *)objc_msgSend(a2, "entity"));
    if ((v5 & 0x80000000) == 0)
    {
      v6 = a1[4];
      if (v6)
      {
        v4 = *(__CFDictionary **)(v6 + 8 * v5);
        if (v4)
          goto LABEL_10;
      }
    }
    v7 = a1[3];
    if (v7)
    {
      v4 = *(__CFDictionary **)(v7 + 8 * (v5 & 0x7FFFFFFF));
      if (v4)
        goto LABEL_10;
    }
  }
}

uint64_t __generateAccessor_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, *(_QWORD *)(a1 + 40));
}

_QWORD *_sharedIMPL_setvfk_core_scalar(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_setValue_forKey_);
  v6 = _PFEntityForManagedObject(a1);
  v7 = *(_QWORD *)(_kvcPropertysPrimitiveSetters((uint64_t)v6) + 8 * a2);
  v8 = *(_QWORD *)(*(_QWORD *)(v6[12] + 16) + 40);
  v9 = *(_QWORD *)(v8 + 8 * a2);
  v10 = *((_DWORD *)a1 + 4);
  if ((v10 & 0x40000) != 0)
    _PF_ManagedObject_WillChangeValueForKeyIndex((uint64_t)a1, (uint64_t)sel_willChangeValueForKey_, v9, a2, 0);
  else
    objc_msgSend(a1, "willChangeValueForKey:", *(_QWORD *)(v8 + 8 * a2));
  _PF_CopyOnWrite_Snapshot(a1);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v7);
  if ((v10 & 0x40000) != 0)
    return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v9, a2);
  else
    return (_QWORD *)objc_msgSend(a1, "didChangeValueForKey:", v9);
}

void _PF_ManagedObject_WillChangeValueForKeyIndex(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  v9 = *(_DWORD *)(a1 + 16);
  v10 = _PFEntityForManagedObject((id)a1);
  if (!v10)
  {
    v11 = 0;
    if ((v9 & 0x40) != 0)
      goto LABEL_3;
LABEL_36:
    objc_msgSend((id)a1, "willAccessValueForKey:", a3);
    if (a4 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_4;
    goto LABEL_6;
  }
  v11 = (_QWORD *)v10[14];
  if ((v9 & 0x40) == 0)
    goto LABEL_36;
LABEL_3:
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_4:
    v12 = 1;
    goto LABEL_12;
  }
  _PF_Handler_WillAccess_Property((id *)a1, (uint64_t)sel_willAccessValueForKey_, a4);
LABEL_6:
  v12 = 0;
  v13 = v11[10];
  v14 = a4 >= v13;
  v15 = a4 - v13;
  if (!v14 || v15 >= v11[11])
  {
LABEL_12:
    v17 = 0;
    v20 = 0;
    v19 = 0;
    if ((*(_BYTE *)(a1 + 17) & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
  v16 = -[objc_class _transientPropertiesChangesMask](object_getClass((id)a1), "_transientPropertiesChangesMask");
  v17 = v16;
  v18 = *(unsigned int *)(a1 + 16);
  v19 = 1;
  if ((v18 & 0x8000) == 0)
  {
    v12 = 0;
    if ((v9 & 0x1000) != 0)
      goto LABEL_25;
    goto LABEL_14;
  }
  v33 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v33)
    v34 = a1 + v33;
  else
    v34 = 0;
  v35 = *(unsigned __int8 *)(v34 - ((v18 >> 22) & 0x3FC) + (a4 >> 3));
  v36 = 1 << (a4 & 7);
  v12 = 0;
  if ((v36 & v35) == 0 || v16 == 0)
  {
    v20 = 1;
    goto LABEL_48;
  }
  v20 = 1;
  if ((v36 & *(_BYTE *)(v16 + (a4 >> 3))) == 0)
  {
LABEL_48:
    objc_msgSend((id)_insertion_fault_handler, "fulfillFault:withContext:forIndex:", a1, *(_QWORD *)(a1 + 32), a4);
    v19 = v20;
    if ((v9 & 0x1000) != 0)
      goto LABEL_25;
    goto LABEL_14;
  }
LABEL_13:
  if ((v9 & 0x1000) != 0)
    goto LABEL_25;
LABEL_14:
  if ((v9 & 0x80) != 0)
  {
    v21 = objc_msgSend((id)a1, "objectID");
    _NSCoreDataLog(1, (uint64_t)CFSTR("Mutating a managed object %@ (%p) after it has been removed from its context."), v22, v23, v24, v25, v26, v27, v21);
  }
  v28 = *(_QWORD *)(a1 + 32);
  if (v28 && (v12 & ((*(_QWORD *)&v9 & 0x400000) != 0)) == 0)
  {
    v29 = v17 ? v19 : 0;
    if (v29 != 1 || ((*(unsigned __int8 *)(v17 + (a4 >> 3)) >> (a4 & 7)) & 1) == 0)
      _PFFastMOCObjectWillChange(v28, (_DWORD *)a1);
  }
  *(_DWORD *)(a1 + 16) |= 0x800u;
LABEL_25:
  if ((v9 & 0x2000) == 0)
  {
    v30 = *(_QWORD **)(a1 + 48);
    if (v30)
      LOBYTE(v30) = *v30 != 0;
    if ((v30 & 1) != 0
      || (a5 & 1) != 0
      || (v31 = v11[4], v14 = a4 >= v31, v32 = a4 - v31, v14) && v32 < v11[5])
    {
      off_1ECD8D9B8(a1, sel_willChangeValueForKey_, a3);
    }
  }
}

id *_PF_Handler_WillAccess_Property(id *result, uint64_t a2, unint64_t a3)
{
  id *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;

  v4 = result;
  if (!_PF_Threading_Debugging_level)
  {
    if (result)
      goto LABEL_3;
LABEL_6:
    v5 = MEMORY[0x10];
    goto LABEL_7;
  }
  result = (id *)_PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(result, "managedObjectContext"), sel_willAccessValueForKey_);
  if (!v4)
    goto LABEL_6;
LABEL_3:
  v5 = *((_DWORD *)v4 + 4);
  if ((v5 & 0x4000) != 0)
  {
    result = v4;
    v5 = (_DWORD)v4[2] & 0xFFFFBFFF;
    *((_DWORD *)v4 + 4) = v5;
  }
LABEL_7:
  v6 = *((unsigned int *)v4 + 5);
  if ((_DWORD)v6)
    v7 = (char *)v4 + v6;
  else
    v7 = 0;
  if (((v7[(a3 >> 3) - ((v5 >> 22) & 0x3FC)] >> (a3 & 7)) & 1) == 0)
    return _PF_FulfillDeferredFault((id **)v4, a3);
  return result;
}

void _PFFastMOCObjectWillChange(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(a1, sel_objectWillChange_);
  v4 = a2[4];
  if ((v4 & 7) == 0)
  {
    if ((v4 & 0x80) != 0)
    {
      v20 = objc_msgSend(a2, "objectID");
      _NSCoreDataLog(1, (uint64_t)CFSTR("Mutating a managed object %@ (%p) after it has been removed from its context."), v6, v7, v8, v9, v10, v11, v20);
    }
    else if (a1)
    {
      if ((v4 & 0x80) != 0)
        v5 = 0;
      else
        v5 = *((_QWORD *)a2 + 4);
      if (v5 == a1)
      {
        -[NSManagedObjectContext _establishEventSnapshotsForObject:](a1, a2);
        v19 = *(_QWORD *)(a1 + 40);
        if ((v19 & 0x400) != 0 && (v19 & 0x200) == 0)
        {
          _PFFaultLogExcessivePrepareForPendingChangesAttempts();
          v19 = *(_QWORD *)(a1 + 40);
        }
        *(_QWORD *)(a1 + 40) = v19 | 0x200;
        objc_msgSend(*(id *)(a1 + 56), "addObject:", a2);
        a2[4] |= 1u;
        -[NSManagedObjectContext _registerClearStateWithUndoManager](a1);
        -[NSManagedObjectContext _enqueueEndOfEventNotification](a1);
        if ((*(_BYTE *)(a1 + 41) & 8) == 0)
        {
          objc_msgSend((id)a1, "willChangeValueForKey:", CFSTR("hasChanges"));
          *(_QWORD *)(a1 + 40) |= 0x800uLL;
          objc_msgSend((id)a1, "didChangeValueForKey:", CFSTR("hasChanges"));
        }
      }
      else
      {
        v12 = objc_msgSend(a2, "objectID");
        _NSCoreDataLog(1, (uint64_t)CFSTR("Mutating a managed object %@ (%p) that has a different context %p than the receiver %p."), v13, v14, v15, v16, v17, v18, v12);
      }
    }
  }
}

uint64_t _sharedIMPL_pvfk_core_s(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char *v10;
  Class Class;

  v8 = a3;
  if (_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
  {
    v10 = *(char **)(a1 + 24);
    Class = object_getClass(v10);
    return *(__int16 *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
  }
  else
  {
    return 0;
  }
}

uint64_t _sharedIMPL_pvfk_core_q(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char *v10;
  Class Class;

  v8 = a3;
  if (!_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
    return 0;
  v10 = *(char **)(a1 + 24);
  Class = object_getClass(v10);
  return *(_QWORD *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
}

void *_PF_Handler_Public_GetProperty(id **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id **v12;

  if (a4)
  {
    v6 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v6)
      v7 = (char *)a1 + v6;
    else
      v7 = 0;
    if (((v7[(a2 >> 3) - (((unint64_t)*((unsigned int *)a1 + 4) >> 22) & 0x3FC)] >> (a2 & 7)) & 1) == 0)
      _PF_FulfillDeferredFault(a1, a2);
    v8 = (void *)_NSGetUsingKeyValueGetter();
    v9 = *(_QWORD *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 19) + 72);
    if (v9 && (*(_BYTE *)(v9 + a2) & 0x10) != 0 && v8 && objc_msgSend(v8, "isNSNumber"))
    {
      v10 = (void *)MEMORY[0x1E0C99D68];
      objc_msgSend(v8, "doubleValue");
      v8 = (void *)objc_msgSend(v10, "dateWithTimeIntervalSinceReferenceDate:");
    }
  }
  else
  {
    v8 = (void *)objc_msgSend(a1, "_genericValueForKey:withIndex:flags:", a3, a2, 1);
    if (!a1)
      return v8;
  }
  if ((*((_BYTE *)a1 + 17) & 0x40) != 0)
  {
    v12 = a1;
    *((_DWORD *)a1 + 4) &= ~0x4000u;
  }
  return v8;
}

void _sharedIMPL_pvfk_core(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a3;
  if (_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
    snapshot_get_value_as_object(*(id **)(a1 + 24), v8, v10, v11, v12, v13, v14, v15);
}

uint64_t _pvfk_header(unsigned int *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;

  if (!_PF_Threading_Debugging_level)
  {
    if (a1)
      goto LABEL_3;
LABEL_6:
    v10 = MEMORY[0x10];
    goto LABEL_7;
  }
  _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_primitiveValueForKey_);
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v10 = a1[4];
  if ((v10 & 0x4000) != 0)
  {
    v11 = a1;
    v10 = a1[4] & 0xFFFFBFFF;
    a1[4] = v10;
  }
LABEL_7:
  v12 = a1[5];
  if ((_DWORD)v12)
    v13 = (char *)a1 + v12;
  else
    v13 = 0;
  if (((v13[(a2 >> 3) - ((v10 >> 22) & 0x3FC)] >> (a2 & 7)) & 1) == 0)
    _PF_FulfillDeferredFault((id **)a1, a2);
  if (*((_QWORD *)a1 + 3))
    return 1;
  result = 0;
  v15 = a1[4];
  if ((v15 & 0x38000) != 0x10000 && (v15 & 0x80) == 0)
  {
    _NSCoreDataLog(1, (uint64_t)CFSTR("NULL _cd_rawData but the object is not being turned into a fault"), a3, a4, a5, a6, a7, a8, v16);
    return 0;
  }
  return result;
}

uint64_t _PFAssertSafeMultiThreadedAccess_impl(uint64_t result, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _opaque_pthread_t *v15;
  pthread_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *current_queue;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!result)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
  if (!v3)
  {
    v10 = *(_QWORD **)(*(_QWORD *)(result + 184) + 56);
    if (v4)
    {
      v11 = 0;
      __dmb(0xBu);
      v12 = v4;
      while (v12 != result && v12 != v11)
      {
        if (!v11)
          v11 = v12;
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
        {
          v13 = 0;
          __dmb(0xBu);
          v14 = result;
          while (v14 != v4 && v14 != v13)
          {
            if (!v13)
              v13 = v14;
            v14 = *(_QWORD *)(v14 + 8);
            if (!v14)
              goto LABEL_31;
          }
          break;
        }
      }
      if ((*(_BYTE *)(result + 41) & 0x80) == 0)
        return result;
    }
    else
    {
LABEL_31:
      if ((*(_BYTE *)(result + 41) & 0x80) == 0)
        goto LABEL_38;
    }
    result = _PFIsSerializedWithMainQueue();
    if ((result & 1) != 0)
      return result;
LABEL_38:
    v15 = (_opaque_pthread_t *)v10[1];
    v16 = pthread_self();
    if ((objc_msgSend(*(id *)(v2 + 136), "tryLock") & 1) != 0)
    {
      if (v16 == v15)
        return objc_msgSend(*(id *)(v2 + 136), "unlock");
      v18 = (void *)v10[2];
      v17 = v10[3];
      v19 = (void *)objc_msgSend(MEMORY[0x1E0CB3828], "currentQueue");
      v20 = objc_msgSend(v19, "maxConcurrentOperationCount") == 1 ? v19 : 0;
      if (v20 && v20 == v18)
        return objc_msgSend(*(id *)(v2 + 136), "unlock");
      current_queue = dispatch_get_current_queue();
      v22 = current_queue == dispatch_get_global_queue(0, 0) ? 0 : current_queue;
      if (v22 && v22 == v17)
        return objc_msgSend(*(id *)(v2 + 136), "unlock");
      NSStringFromSelector(a2);
      _NSCoreDataLog(1, (uint64_t)CFSTR("The current thread is not the recognized owner of this NSManagedObjectContext(%p).  Illegal access during %@"), v29, v30, v31, v32, v33, v34, v2);
    }
    else
    {
      NSStringFromSelector(a2);
      _NSCoreDataLog(1, (uint64_t)CFSTR("Multiple threads illegally accessing an NSManagedObjectContext (%p) during %@"), v23, v24, v25, v26, v27, v28, v2);
    }
    goto LABEL_53;
  }
  if (!v4)
  {
LABEL_16:
    if ((*(_BYTE *)(result + 41) & 0x80) == 0)
      goto LABEL_53;
    goto LABEL_34;
  }
  v5 = 0;
  __dmb(0xBu);
  v6 = v4;
  while (v6 != result && v6 != v5)
  {
    if (!v5)
      v5 = v6;
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
    {
      v7 = 0;
      __dmb(0xBu);
      v8 = result;
      while (v8 != v4 && v8 != v7)
      {
        if (!v7)
          v7 = v8;
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          goto LABEL_16;
      }
      break;
    }
  }
  if ((*(_BYTE *)(result + 41) & 0x80) != 0)
  {
LABEL_34:
    result = _PFIsSerializedWithMainQueue();
    if ((result & 1) != 0)
      return result;
LABEL_53:
    result = objc_opt_self();
    __break(1u);
  }
  return result;
}

BOOL _PFIsSerializedWithMainQueue()
{
  return pthread_main_np() || dispatch_get_specific("com.apple.CoreData.NSManagedObjectContext.mainQueue") != 0;
}

id *_PF_FulfillDeferredFault(id **a1, unint64_t a2)
{
  id *v5;
  id *v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  objc_class *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id *result;
  uint64_t v70;
  uint64_t v71;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_fulfillFault_withContext_forIndex_);
  if (((_DWORD)a1[2] & 0x30000) == 0x10000 || ((_DWORD)a1[2] & 0x80) != 0)
    return 0;
  v5 = a1[4];
  v6 = a1[5];
  v7 = (unint64_t *)_PFEntityForManagedObject(a1);
  v8 = (_QWORD *)v7[14];
  v9 = v8[2];
  v11 = a2 >= v9;
  v10 = a2 - v9;
  v11 = !v11 || v10 >= v8[3];
  v12 = !v11;
  v14 = *((unsigned int *)a1 + 4);
  v13 = *((unsigned int *)a1 + 5);
  v15 = (_DWORD)v13 ? (char *)a1 + v13 : 0;
  v16 = &v15[-((v14 >> 22) & 0x3FC)];
  v17 = a2 >> 3;
  if ((v14 & 0x38000) == 0x8000 || v12)
  {
    objc_msgSend((id)_insertion_fault_handler, "fulfillFault:withContext:forIndex:", a1, v5, a2);
    if ((((v16[v17] >> (a2 & 7)) | v12) & 1) != 0)
      return 0;
  }
  v18 = v8[12];
  v19 = v8[13];
  v20 = _kvcPropertysPrimitiveSetters((uint64_t)v7);
  v11 = a2 >= v18;
  v21 = a2 - v18;
  v22 = *(_QWORD *)(v20 + 8 * a2);
  if (!v11 || v21 >= v19)
  {
    v71 = *(_QWORD *)(v20 + 8 * a2);
    v24 = v8[28];
    v11 = a2 >= v24;
    v25 = a2 - v24;
    v27 = v11 && v25 < v8[29];
    v28 = v8[18];
    v11 = a2 >= v28;
    v29 = a2 - v28;
    v31 = v11 && v29 < v8[19];
    v32 = v8[26];
    v11 = a2 >= v32;
    v33 = a2 - v32;
    v35 = v11 && v33 < v8[27];
    if (((v27 | v31) & 1) == 0 && !v35)
    {
      if (*(_QWORD *)(_kvcPropertysPrimitiveGetters(v7) + 8 * a2))
        v42 = _NSGetUsingKeyValueGetter();
      else
        snapshot_get_value_as_object(a1[3], a2, v36, v37, v38, v39, v40, v41);
      v5 = (id *)v42;
      goto LABEL_68;
    }
    v51 = ((_DWORD)a1[2] & 0x12) == 0;
    v52 = objc_msgSend(v6, "isTemporaryID");
    v53 = v5 != 0;
    v54 = *(_QWORD *)(v7[12] + 24 + 8 * a2);
    v55 = (v53 | ~v52) & v51 | v27;
    v56 = (objc_class *)objc_opt_class();
    v5 = (id *)objc_msgSend(_PFAllocateObject(v56, 0), "initWithSource:forRelationship:asFault:", a1, v54, v55);
    _PF_CopyOnWrite_Snapshot(a1);
    if (v71)
      goto LABEL_57;
    goto LABEL_58;
  }
  if (!v5)
  {
LABEL_68:
    v16[v17] |= 1 << (a2 & 7);
    return v5;
  }
  v49 = *(_QWORD *)(_kvcPropertysPrimitiveGetters(v7) + 8 * a2);
  if (v49)
    v50 = _NSGetUsingKeyValueGetter();
  else
    snapshot_get_value_as_object(a1[3], a2, v43, v44, v45, v46, v47, v48);
  v62 = (void *)v50;
  if (v50 != _CD_ScalarNull)
  {
    if (v50)
      goto LABEL_56;
    goto LABEL_67;
  }
  objc_msgSend((id)_insertion_fault_handler, "fulfillFault:withContext:forIndex:", a1, v5, a2);
  result = a1[3];
  if (result)
  {
    if (((v16[v17] >> (a2 & 7)) & 1) != 0)
      return 0;
    if (v49)
      v70 = _NSGetUsingKeyValueGetter();
    else
      snapshot_get_value_as_object(result, a2, v63, v64, v65, v66, v67, v68);
    v62 = (void *)v70;
    if (v70)
    {
LABEL_56:
      v5 = (id *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((_QWORD **)v5, v62, 0);
      _PF_CopyOnWrite_Snapshot(a1);
      if (v22)
      {
LABEL_57:
        _NSSetUsingKeyValueSetter();

        goto LABEL_68;
      }
LABEL_58:
      snapshot_set_value_as_object((char *)a1[3], a2, v5, v57, v58, v59, v60, v61);
      goto LABEL_68;
    }
LABEL_67:
    v5 = 0;
    goto LABEL_68;
  }
  __break(1u);
  return result;
}

uint64_t _kvcPropertysPrimitiveGetters(unint64_t *a1)
{
  if (*(_QWORD *)(a1[19] + 8))
    return *(_QWORD *)(a1[19] + 8);
  else
    return _resolveForSelectorAndType(a1, sel__createValuePrimitiveGetterWithContainerClassID_key_, (objc_class *)qword_1ECD8D9A0, 1);
}

void _PFFaultHandlerFulfillFault(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  int v5;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _DWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  id v86;
  int v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  Class Class;
  void *v106;
  uint64_t v107;
  int v108;
  int v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  int v125;
  uint64_t v126;
  char v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  char v141;
  id v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  void *context;
  uint64_t *v152;
  uint64_t v153;
  id v154;
  int v155;
  id v156;
  int HasCustomPrimitiveProperties;
  int v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;

  v5 = (*(_DWORD *)(a2 + 16) >> 15) & 7;
  if (((*(_DWORD *)(a2 + 16) >> 15) & 3 | 4) != 5)
    return;
  v150 = a5;
  v152 = &v144;
  context = (void *)MEMORY[0x18D76B4E4]();
  v9 = *(_DWORD *)(a2 + 16) & 0xFFFC7FFF | 0x18000;
  *(_DWORD *)(a2 + 16) = v9;
  if ((v9 & 0x100) == 0)
    objc_msgSend((id)a2, "willFireFault");
  v10 = *(void **)(a2 + 40);
  v11 = _PFEntityForManagedObject((id)a2);
  if ((v9 & 0x12) != 0)
  {
    v12 = 1;
  }
  else if (objc_msgSend(v10, "isTemporaryID"))
  {
    if (a3)
      v13 = a4 == 0;
    else
      v13 = 1;
    v12 = v13;
  }
  else
  {
    v12 = 0;
  }
  v146 = v10;
  v156 = a4;
  if (v11)
  {
    v161 = (_QWORD *)v11[14];
    v14 = v11[12];
    v15 = v11[13] + 40;
  }
  else
  {
    v161 = 0;
    v14 = 0;
    v15 = 40;
  }
  v144 = *(_QWORD *)v15;
  v16 = _kvcPropertysPrimitiveSetters((uint64_t)v11);
  v17 = *(_QWORD **)(a2 + 48);
  if (!v17 || !*v17 || (*(_BYTE *)(a2 + 17) & 0x20) != 0)
  {
    v20 = (uint64_t)v11;
LABEL_26:
    HasCustomPrimitiveProperties = _PF_HasCustomPrimitiveProperties(v20);
    v18 = 0;
    goto LABEL_27;
  }
  if (!v11)
  {
    v20 = 0;
    goto LABEL_26;
  }
  v18 = *(_QWORD *)(v11[19] + 48);
  HasCustomPrimitiveProperties = _PF_HasCustomPrimitiveProperties((uint64_t)v11);
  if (!v18)
  {
LABEL_27:
    v19 = 1;
    goto LABEL_28;
  }
  if (a3)
    ++*(_WORD *)(a3 + 50);
  *(_DWORD *)(a2 + 16) |= 0x1000u;
  objc_msgSend((id)a2, "_willChangeValuesForKeys:", v18);
  v19 = 0;
LABEL_28:
  v153 = a3;
  v149 = v9;
  v145 = v18;
  v147 = v5;
  v148 = v19;
  if ((v12 & 1) != 0)
  {
    v159 = 0;
LABEL_35:
    v24 = *(char **)(a2 + 24);
    v33 = v24;
    _PF_CopyOnWrite_Snapshot((id)a2);
    if (v5 == 5)
    {
      v154 = v24;
    }
    else
    {

      v154 = 0;
      v24 = 0;
    }
    HasCustomPrimitiveProperties = 1;
    v32 = 1;
    goto LABEL_39;
  }
  v21 = v14;
  v22 = v156;
  v23 = (_DWORD *)objc_msgSend(v156, "_snapshot");
  if (!v23)
  {
    v159 = objc_msgSend(v22, "knownKeyValuesPointer");
    *(_DWORD *)(a2 + 12) = objc_msgSend(v22, "_versionNumber");
    v14 = v21;
    goto LABEL_35;
  }
  v154 = v23;
  *(_DWORD *)(a2 + 12) = v23[3];
  v24 = *(char **)(a2 + 24);
  v25 = v24;
  v14 = v21;
  if (v24 == v154)
  {
    if (v5 != 5)
    {

      v154 = 0;
    }
    v32 = 0;
    v159 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v154;
    if (v5 == 5)
    {
      v32 = 0;
      v159 = 0;
      v154 = v24;
    }
    else
    {

      v154 = 0;
      v32 = 0;
      v159 = 0;
    }
  }
LABEL_39:
  v160 = v14 + 24;
  v34 = v161[6];
  v35 = v161[7];
  v36 = v35 + v34;
  v37 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v37)
    v38 = a2 + v37;
  else
    v38 = 0;
  v39 = v38 - (((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 0x3FC);
  v155 = v12;
  if (v34 < v36)
  {
    v40 = v36 - 1;
    v41 = (int)v34 >> 3;
    v42 = ((int)v36 - 1) >> 3;
    v43 = 255 << (v34 & 7);
    if (v42 == (int)v34 >> 3)
    {
      v44 = (0xFFu >> (~(_BYTE)v40 & 7)) & v43;
    }
    else
    {
      *(_BYTE *)(v39 + v41) |= v43;
      if (v41 + 1 < v42)
        memset((void *)(v41 + v39 + 1), 255, (v42 - v41 - 2) + 1);
      v44 = 0xFFu >> (~(_BYTE)v40 & 7);
      v41 = v40 >> 3;
    }
    *(_BYTE *)(v39 + v41) |= v44;
    LOBYTE(v12) = v155;
  }
  v158 = v32;
  if ((v12 & 1) == 0)
  {
    v47 = v144;
    if (HasCustomPrimitiveProperties)
    {
      if ((v158 & 1) != 0)
      {
        if (v34 < v36)
        {
          do
          {
            if (v159)
              v48 = *(void **)(v159 + 8 * v34);
            else
              v48 = (void *)objc_msgSend(v156, "valueForKey:", *(_QWORD *)(v47 + 8 * v34));
            v49 = *(_QWORD *)(v16 + 8 * v34);
            _PF_CopyOnWrite_Snapshot((id)a2);
            if (v49)
            {
              _NSSetUsingKeyValueSetter();
            }
            else
            {
              v50 = v48;
              snapshot_set_value_as_object(*(char **)(a2 + 24), v34, v50, v51, v52, v53, v54, v55);
            }
            ++v34;
            --v35;
          }
          while (v35);
        }
      }
      else if (v34 < v36)
      {
        v60 = (_QWORD *)(v144 + 8 * v34);
        v61 = v159 + 8 * v34;
        v62 = (_QWORD *)(v16 + 8 * v34);
        do
        {
          if (*v62)
          {
            if (!v159)
              objc_msgSend(v156, "valueForKey:", *v60);
            _PF_CopyOnWrite_Snapshot((id)a2);
            _NSSetUsingKeyValueSetter();
          }
          ++v60;
          v61 += 8;
          ++v62;
          --v35;
        }
        while (v35);
      }
    }
    goto LABEL_88;
  }
  if (HasCustomPrimitiveProperties)
  {
    if ((v32 & 1) != 0)
    {
      if (v34 < v36)
      {
        do
        {
          v45 = *(void **)(v160 + 8 * v34);
          if (objc_msgSend(v45, "_propertyType") == 7)
            v46 = (void *)objc_msgSend(v45, "_buildDefaultValue");
          else
            v46 = (void *)objc_msgSend(v45, "defaultValue");
          v26 = (uint64_t)v46;
          if (v46)
            _PF_Handler_Primitive_Internal_SetProperty((char **)a2, v34, v46, *(_QWORD *)(v16 + 8 * v34));
          ++v34;
          --v35;
        }
        while (v35);
LABEL_88:
        v58 = v161[12];
        v63 = v161[13];
        v59 = v63 + v58;
        v64 = v155;
        if (!v156)
          v64 = 1;
        if ((v64 & 1) != 0)
          goto LABEL_91;
        v70 = v153;
        v71 = v158;
        if (v58 >= v59)
          goto LABEL_138;
        v156 = (id)NSKeyValueCoding_NullValue;
        v72 = v59 - 1;
        v73 = (int)v58 >> 3;
        v74 = v72 >> 3;
        v75 = 0xFFu >> (8 - (v58 & 7));
        if (v72 >> 3 == (int)v58 >> 3)
        {
          v76 = (510 << (v72 & 7)) | v75;
        }
        else
        {
          *(_BYTE *)(v39 + v73) &= v75;
          if (v73 + 1 < v74)
            bzero((void *)(v73 + v39 + 1), (v74 - v73 - 2) + 1);
          v76 = 510 << (v72 & 7);
          v73 = v72 >> 3;
        }
        *(_BYTE *)(v39 + v73) &= v76;
        if (!HasCustomPrimitiveProperties)
          goto LABEL_138;
        while (1)
        {
          v83 = *(_QWORD *)(v16 + 8 * v58);
          if (v83)
            v84 = 1;
          else
            v84 = v71;
          if (v84 != 1)
            goto LABEL_135;
          v85 = *(_QWORD *)(v160 + 8 * v58);
          if (!v159 || (v86 = *(id *)(v159 + 8 * v58), v86 == v156))
          {
            -[NSManagedObjectContext lockObjectStore](v70);
            if (v70)
              v88 = *(void **)(v70 + 32);
            else
              v88 = 0;
            v86 = (id)objc_msgSend(v88, "newValueForRelationship:forObjectWithID:withContext:error:", v85, v146, v70, 0);
            -[NSManagedObjectContext unlockObjectStore](v70);
            if (v86 == v156 || (v87 = 1, !v86))
            {
LABEL_129:
              if (v147 == 5)
              {
                _PF_CopyOnWrite_Snapshot((id)a2);
                if (v83)
                  _NSSetUsingKeyValueSetter();
                else
                  snapshot_set_value_as_object(*(char **)(a2 + 24), v58, 0, v89, v90, v91, v92, v93);
              }
              goto LABEL_135;
            }
          }
          else
          {
            v87 = 0;
            if (!v86)
              goto LABEL_129;
          }
          _PF_CopyOnWrite_Snapshot((id)a2);
          if (v83)
            break;
          v94 = v86;
          snapshot_set_value_as_object(*(char **)(a2 + 24), v58, v94, v95, v96, v97, v98, v99);
          if (v87)
            goto LABEL_133;
LABEL_135:
          ++v58;
          --v63;
          v71 = v158;
          if (!v63)
            goto LABEL_138;
        }
        _NSSetUsingKeyValueSetter();
        if (!v87)
          goto LABEL_135;
LABEL_133:

        goto LABEL_135;
      }
    }
    else if (v34 < v36)
    {
      do
      {
        if (*(_QWORD *)(v16 + 8 * v34))
        {
          v56 = *(void **)(v160 + 8 * v34);
          v57 = (void *)(objc_msgSend(v56, "_propertyType") == 7
                       ? objc_msgSend(v56, "_buildDefaultValue")
                       : objc_msgSend(v56, "defaultValue"));
          v26 = (uint64_t)v57;
          if (v57)
            _PF_Handler_Primitive_Internal_SetProperty((char **)a2, v34, v57, *(_QWORD *)(v16 + 8 * v34));
        }
        ++v34;
        --v35;
      }
      while (v35);
      goto LABEL_88;
    }
  }
  v58 = v161[12];
  v59 = v161[13] + v58;
LABEL_91:
  if (v58 < v59)
  {
    v65 = v59 - 1;
    v66 = (int)v58 >> 3;
    v67 = 255 << (v58 & 7);
    if ((int)v58 >> 3 == ((int)v59 - 1) >> 3)
    {
      v68 = (0xFFu >> (~(_BYTE)v65 & 7)) & v67;
      v69 = v147;
    }
    else
    {
      *(_BYTE *)(v39 + v66) |= v67;
      v69 = v147;
      if (v66 + 1 < v65 >> 3)
        memset((void *)(v66 + v39 + 1), 255, ((v65 >> 3) - v66 - 2) + 1);
      v68 = 0xFFu >> (~(_BYTE)v65 & 7);
      v66 = v65 >> 3;
    }
    *(_BYTE *)(v39 + v66) |= v68;
    if (v69 == 5)
    {
      do
      {
        v77 = *(_QWORD *)(v16 + 8 * v58);
        _PF_CopyOnWrite_Snapshot((id)a2);
        if (v77)
          _NSSetUsingKeyValueSetter();
        else
          snapshot_set_value_as_object(*(char **)(a2 + 24), v58, 0, v78, v79, v80, v81, v82);
        ++v58;
      }
      while (v59 != v58);
    }
  }
LABEL_138:
  v100 = 0;
  v159 = v39 + 1;
  do
  {
    v101 = &v161[2 * dword_18A509C94[v100]];
    v102 = *v101;
    v103 = v101[1];
    v104 = v103 + *v101;
    if (v24)
    {
      if (v102 < v104)
      {
        do
        {
          Class = object_getClass(v24);
          v106 = *(void **)&v24[*((unsigned int *)object_getIndexedIvars(Class) + v102 + 19)];
          if (v106)
          {
            v107 = *(_QWORD *)(v16 + 8 * v102);
            _PF_CopyOnWrite_Snapshot((id)a2);
            if (v107)
            {
              _NSSetUsingKeyValueSetter();
            }
            else
            {
              v110 = v106;
              snapshot_set_value_as_object(*(char **)(a2 + 24), v102, v110, v111, v112, v113, v114, v115);
            }
            v108 = (int)v102 >> 3;
            v109 = *(unsigned __int8 *)(v39 + ((int)v102 >> 3)) | (1 << (v102 & 7));
          }
          else
          {
            v108 = (int)v102 >> 3;
            v109 = *(unsigned __int8 *)(v39 + ((int)v102 >> 3)) & ~(1 << (v102 & 7));
          }
          *(_BYTE *)(v39 + v108) = v109;
          ++v102;
          --v103;
        }
        while (v103);
      }
    }
    else if (v102 < v104)
    {
      v116 = v104 - 1;
      v117 = (int)v102 >> 3;
      v118 = v116 >> 3;
      v119 = 0xFFu >> (8 - (v102 & 7));
      if (v116 >> 3 == (int)v102 >> 3)
      {
        v120 = (510 << (v116 & 7)) | v119;
      }
      else
      {
        *(_BYTE *)(v39 + v117) &= v119;
        if (v117 + 1 < v118)
          bzero((void *)(v159 + v117), (v118 - v117 - 2) + 1);
        v120 = 510 << (v116 & 7);
        v117 = v116 >> 3;
      }
      *(_BYTE *)(v39 + v117) &= v120;
    }
    ++v100;
  }
  while (v100 != 3);
  v121 = v161[10];
  v122 = v161[11];
  v123 = v122 + v121;
  if ((HasCustomPrimitiveProperties & 1) != 0)
  {
    v124 = v158;
    if (v121 < v123)
    {
      do
      {
        v125 = (1 << (v121 & 7)) & *(unsigned __int8 *)(v39 + (v121 >> 3));
        v126 = *(_QWORD *)(v16 + 8 * v121);
        if (v125)
          v127 = 1;
        else
          v127 = v124;
        if ((v127 & 1) != 0 || v126)
        {
          if (v125)
          {
            snapshot_get_value_as_object((id *)v24, v121, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            v129 = *(void **)(v160 + 8 * v121);
            v128 = (void *)(objc_msgSend(v129, "_propertyType") == 7
                          ? objc_msgSend(v129, "_buildDefaultValue")
                          : objc_msgSend(v129, "defaultValue"));
          }
          v26 = (uint64_t)v128;
          if (v128)
            _PF_Handler_Primitive_Internal_SetProperty((char **)a2, v121, v128, v126);
        }
        ++v121;
        --v122;
      }
      while (v122);
    }
  }
  else if (v121 < v123)
  {
    do
    {
      if (((*(unsigned __int8 *)(v39 + (v121 >> 3)) >> (v121 & 7)) & 1) != 0)
      {
        v130 = *(_QWORD *)(v16 + 8 * v121);
        snapshot_get_value_as_object((id *)v24, v121, v26, v27, v28, v29, v30, v31);
        if (v131)
          _PF_Handler_Primitive_Internal_SetProperty((char **)a2, v121, v131, v130);
      }
      ++v121;
      --v122;
    }
    while (v122);
  }
  v132 = v161[10];
  v133 = v161[11] + v132;
  v134 = v153;
  v135 = v155;
  if (v132 < v133)
  {
    v136 = v133 - 1;
    v137 = (int)v132 >> 3;
    v138 = v136 >> 3;
    v139 = 255 << (v132 & 7);
    if (v136 >> 3 == (int)v132 >> 3)
    {
      v140 = (0xFFu >> (~(_BYTE)v136 & 7)) & v139;
    }
    else
    {
      *(_BYTE *)(v39 + v137) |= v139;
      if (v137 + 1 < v138)
        memset((void *)(v137 + v39 + 1), 255, (v138 - v137 - 2) + 1);
      v140 = 0xFFu >> (~(_BYTE)v136 & 7);
      v137 = v136 >> 3;
    }
    *(_BYTE *)(v39 + v137) |= v140;
  }
  *(_DWORD *)(a2 + 16) &= 0xFFFC7FFF;
  if ((v148 & 1) == 0)
  {
    objc_msgSend((id)a2, "_didChangeValuesForKeys:", v145);
    *(_DWORD *)(a2 + 16) &= ~0x1000u;
    if (v134)
      --*(_WORD *)(v134 + 50);
  }
  if ((v149 & 0x100) == 0)
    objc_msgSend((id)a2, "didFireFault", v26);
  if ((v150 & 1) != 0)
    v141 = v135;
  else
    v141 = 1;
  if ((v141 & 1) == 0)
  {
    *(_DWORD *)(a2 + 16) |= 0x1000u;
    objc_msgSend((id)a2, "awakeFromFetch", v26);
    *(_DWORD *)(a2 + 16) &= ~0x1000u;
  }
  if (v24)

  objc_autoreleasePoolPop(context);
  v142 = v154;
  v143 = 0;
}

uint64_t _kvcPropertysPrimitiveSetters(uint64_t a1)
{
  if (**(_QWORD **)(a1 + 152))
    return **(_QWORD **)(a1 + 152);
  else
    return _resolveForSelectorAndType((unint64_t *)a1, sel__createValuePrimitiveSetterWithContainerClassID_key_, (objc_class *)_MergedGlobals_72, 0);
}

uint64_t _PF_HasCustomPrimitiveProperties(uint64_t a1)
{
  unsigned int v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;

  v1 = (*(_DWORD *)(a1 + 120) >> 9) & 3;
  if (v1 <= 1)
  {
    v3 = objc_msgSend((id)objc_msgSend((id)a1, "properties"), "count");
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 152) + 8);
    if (v4)
    {
      if (!v3)
        goto LABEL_9;
    }
    else
    {
      v4 = (_QWORD *)_resolveForSelectorAndType((unint64_t *)a1, sel__createValuePrimitiveGetterWithContainerClassID_key_, (objc_class *)qword_1ECD8D9A0, 1);
      if (!v3)
      {
LABEL_9:
        v6 = **(_QWORD ***)(a1 + 152);
        if (v6)
        {
          if (v3)
            goto LABEL_11;
          goto LABEL_13;
        }
        v6 = (_QWORD *)_resolveForSelectorAndType((unint64_t *)a1, sel__createValuePrimitiveSetterWithContainerClassID_key_, (objc_class *)_MergedGlobals_72, 0);
        if (!v3)
        {
LABEL_13:
          v7 = *(_DWORD *)(a1 + 120) & 0xFFFFF9FF | 0x400;
LABEL_15:
          *(_DWORD *)(a1 + 120) = v7;
          v1 = (v7 >> 9) & 3;
          return v1 & 1;
        }
LABEL_11:
        while (!*v6)
        {
          ++v6;
          if (!--v3)
            goto LABEL_13;
        }
LABEL_14:
        v7 = *(_DWORD *)(a1 + 120) | 0x600;
        goto LABEL_15;
      }
    }
    v5 = v3;
    while (!*v4)
    {
      ++v4;
      if (!--v5)
        goto LABEL_9;
    }
    goto LABEL_14;
  }
  return v1 & 1;
}

id _PFFaultHandlerLookupRow(_DWORD *a1, uint64_t a2, id *a3, int a4, uint64_t a5)
{
  id v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  char v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  const __CFAllocator *v25;
  CFArrayRef v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  _BOOL4 v44;
  _BOOL4 v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  const __CFString *v93;
  uint64_t v94;
  id v95;
  const __CFString *v96;
  int v97;
  id v99;
  void *values;
  uint64_t v101;
  id v102;
  uint8_t buf[32];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v8 = a1;
  v134 = *MEMORY[0x1E0C80C00];
  v9 = a1[4];
  if (((v9 >> 15) & 3 | 4) != 5 && (v9 & 0x80) == 0)
    return v8;
  v10 = (void *)*((_QWORD *)a1 + 5);
  values = v10;
  v11 = _PFEntityForManagedObject(a1);
  if (!v11)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("An NSManagedObject must have a valid NSEntityDescription."), 0));
  v12 = v11;
  v13 = *((_DWORD *)v8 + 4);
  v14 = objc_msgSend(v10, "isTemporaryID");
  v15 = v14;
  v97 = a4;
  if (v14 && (!a2 || (*(_BYTE *)(a2 + 42) & 8) == 0))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v99 = 0;
    goto LABEL_56;
  }
  v99 = 0;
  if ((v13 & 0x12) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_56;
  }
  v19 = -[NSManagedObjectContext lockObjectStore](a2);
  if (a2)
  {
    v20 = (void *)MEMORY[0x18D76B4E4](v19);
    v21 = (char *)objc_msgSend(*(id *)(a2 + 32), "newValuesForObjectWithID:withContext:error:", values, a2, &v99);
    v22 = v99;
    objc_autoreleasePoolPop(v20);
    if (v21)
    {
      if ((*((_BYTE *)v8 + 17) & 2) != 0 || (objc_msgSend(values, "isTemporaryID") & 1) != 0)
      {
        v17 = 0;
        v18 = 0;
      }
      else
      {
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        memset(buf, 0, sizeof(buf));
        v25 = _PFStackAllocatorCreate((unint64_t *)buf, 1024);
        v26 = CFArrayCreate(v25, (const void **)&values, 1, 0);
        objc_msgSend(*(id *)(a2 + 32), "managedObjectContextDidRegisterObjectsWithIDs:generation:", v26, objc_msgSend((id)a2, "_queryGenerationToken"));
        if (*(_QWORD *)&buf[24] && v26)
          CFRelease(v26);
        v17 = 0;
        v18 = 0;
        *((_DWORD *)v8 + 4) |= 0x200u;
      }
      goto LABEL_53;
    }
  }
  if (v99 && objc_msgSend(v99, "code") != 133000)
  {
    if (objc_msgSend((id)objc_msgSend((id)a2, "persistentStoreCoordinator"), "delegate"))
    {
      objc_msgSend((id)a2, "_setFaultingError:", v99);
      v23 = objc_msgSend((id)a2, "persistentStoreCoordinator");
      v24 = -[NSPersistentStoreCoordinator _handleFaultingError:fromContext:](v23, (uint64_t)v99, a2);
      if (v24 != 1)
      {
        if (v24 != 2)
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("NSPersistentStoreCoordinatorDelegate returned an illegal NSPersistentStoreCoordinatorDelegateErrorAction"), 0));
        goto LABEL_52;
      }
    }
    else
    {
      v21 = (char *)getprogname();
      if (!v21)
      {
        v18 = 0;
        goto LABEL_43;
      }
      if (!strncmp("avatarsd", v21, 8uLL) || !strncmp("CalendarAgent", v21, 0xDuLL))
        objc_msgSend((id)a2, "_setFaultingError:", v99);
    }
    v18 = 0;
    v21 = 0;
LABEL_43:
    v17 = 1;
    goto LABEL_53;
  }
  if ((v15 & 1) == 0 && (*((_BYTE *)v8 + 16) & 0x24) == 0)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a2 + 41) & 0x20) != 0)
        goto LABEL_52;
      v27 = a4;
      if (!a4)
        goto LABEL_103;
      v28 = objc_msgSend((id)a2, "_delegate");
    }
    else
    {
      v27 = a4;
      if ((a4 & 1) == 0)
        goto LABEL_103;
      v28 = objc_msgSend(*((id *)v8 + 4), "_delegate");
    }
    v29 = (void *)v28;
    if (a5 == 0x7FFFFFFFFFFFFFFFLL)
      v30 = 0;
    else
      v30 = *(_QWORD *)(v12[12] + 24 + 8 * a5);
    if (v28 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      v31 = objc_msgSend(v29, "context:shouldHandleInaccessibleFault:forObjectID:andTrigger:", a2, v8, values, v30);
      if (v31 > 1)
      {
        if (v31 != 2)
        {
          if (v31 != 3)
            objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("An NSManagedObjectContext delegate returned an illegal result"), 0));
          v38 = 1;
          _NSCoreDataLog(1, (uint64_t)CFSTR("An NSManagedObjectContext delegate overrode fault handling behavior to silently substitute nil/0 for all property values for the object with ID '%@'.  This is very unwise."), v32, v33, v34, v35, v36, v37, (uint64_t)values);
          v17 = 0;
          v18 = 0;
          v21 = 0;
          goto LABEL_54;
        }
        goto LABEL_52;
      }
LABEL_103:
      *((_DWORD *)v8 + 4) = *((_DWORD *)v8 + 4) & 0xFFFC7FFF | 0x8000;
      v96 = CFSTR("NSAffectedObjectsErrorKey");
      v83 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v8));
      if (v27)
      {
        v93 = (const __CFString *)values;
        if (!values)
          v93 = CFSTR("<UNKNOWN objectID>");
        v94 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CoreData could not fulfill a fault for '%@'"), v93);
        v95 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0CB2FA8], 133000, v94, v83);
        objc_exception_throw(v95);
      }
      if (a3)
      {
        if (v99)
        {

          v99 = 0;
        }
        v84 = objc_alloc(MEMORY[0x1E0CB35C8]);
        v85 = (void *)objc_msgSend(v84, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 133000, v83);
        v17 = 0;
        v18 = 0;
        v38 = 0;
        v21 = 0;
        v99 = v85;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v38 = 0;
        v21 = 0;
      }
      goto LABEL_54;
    }
    if ((objc_msgSend((id)a2, "shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:", v8, values, v30) & 1) == 0)
      goto LABEL_103;
LABEL_52:
    v17 = 0;
    v21 = 0;
    v18 = 1;
    goto LABEL_53;
  }
  v17 = 0;
  v18 = 0;
  v21 = 0;
LABEL_53:
  v38 = 1;
LABEL_54:
  -[NSManagedObjectContext unlockObjectStore](a2);
  if (!v38)
  {
    v41 = 0;
    v44 = 1;
    goto LABEL_80;
  }
  v16 = v21;
LABEL_56:
  v39 = objc_msgSend(v16, "knownKeyValuesPointer");
  if (v16)
    v40 = v39 == 0;
  else
    v40 = 0;
  if (v40)
  {
    v39 = -[NSManagedObjectContext lockObjectStore](a2);
    v41 = 1;
  }
  else
  {
    v41 = 0;
  }
  if (v17)
    v42 = 1;
  else
    v42 = v18;
  if (v42 == 1)
  {
    v43 = *((_DWORD *)v8 + 4);
    v44 = (v43 & 0x2000) == 0;
    if ((v43 & 0x2000) == 0)
    {
      v43 |= 0x2000u;
      *((_DWORD *)v8 + 4) = v43;
    }
    if ((v43 & 0x38000) == 0x28000)
      -[NSFaultHandler turnObject:intoFaultWithContext:](_insertion_fault_handler, (uint64_t)v8, a2);
  }
  else
  {
    v44 = 0;
  }
  _PFFaultHandlerFulfillFault(v39, (uint64_t)v8, a2, v16, v42 ^ 1);
  if (v42)
  {
    if (!objc_msgSend(v8, "managedObjectContext"))
      -[NSManagedObjectContext _forceRegisterLostFault:](a2, v8);
    if (v18)
      objc_msgSend((id)a2, "deleteObject:", v8);
    if (v44)
    {
      v44 = 0;
      *((_DWORD *)v8 + 4) &= ~0x2000u;
    }
  }
  else
  {
    v44 = 0;
    v17 = 0;
  }
  v21 = v16;
LABEL_80:
  v45 = v41 != 0;
  if (v21)

  if (v45)
    -[NSManagedObjectContext unlockObjectStore](a2);
  v46 = v99;
  if (v44 || v17 != 0)
  {
    v47 = v99;
    if (v99)
    {
      if (a3)
      {
        *a3 = v99;
        goto LABEL_100;
      }
      if (!v97)
      {
        if (objc_msgSend(v99, "code") != 133000)
          _NSCoreDataLog(1, (uint64_t)CFSTR("Client ill advisedly ignored an I/O or unknown error from faulting: %@"), v76, v77, v78, v79, v80, v81, (uint64_t)v99);
        goto LABEL_100;
      }
      objc_msgSend(v99, "userInfo");
      _NSCoreDataLog(1, (uint64_t)CFSTR("Unhandled error occurred during faulting: %@ (%@)"), v59, v60, v61, v62, v63, v64, (uint64_t)v47);
      if ((objc_msgSend((id)objc_msgSend(v99, "domain"), "isEqual:", CFSTR("NSSQLiteErrorDomain")) & 1) == 0
        && objc_msgSend(v99, "code") != 134071)
      {
        v86 = (void *)MEMORY[0x1E0CB3940];
        v87 = objc_msgSend(v99, "domain");
        v88 = objc_msgSend(v99, "code");
        v89 = objc_msgSend(v86, "stringWithFormat:", CFSTR("Unhandled error (%@, %ld) occurred during faulting and was thrown: %@"), v87, v88, v99);
        v90 = objc_msgSend(v99, "code");
        v101 = *MEMORY[0x1E0CB3388];
        v102 = v99;
        v91 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v102, &v101, 1);
        v92 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], v90, v89, v91);
        -[_NSCoreDataException _setDomain:]((uint64_t)v92, (void *)objc_msgSend(v99, "domain"));
        objc_exception_throw(v92);
      }
      v65 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Unhandled error (%@, %ld) occurred during faulting and was ignored: %@");
      v66 = objc_msgSend(v99, "domain");
      objc_msgSend(v99, "code");
      _NSCoreDataLog(17, v65, v67, v68, v69, v70, v71, v72, v66);
      v73 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        v74 = objc_msgSend(v99, "domain");
        v75 = objc_msgSend(v99, "code");
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v74;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v75;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v99;
        v56 = "CoreData: Unhandled error (%@, %ld) occurred during faulting and was ignored: %@";
        v57 = v73;
        v58 = 32;
        goto LABEL_97;
      }
    }
    else if (a3)
    {
      v48 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "faulting failed to record an error for an serious condition");
      _NSCoreDataLog(17, v48, v49, v50, v51, v52, v53, v54, (uint64_t)v96);
      v55 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        v56 = "CoreData: faulting failed to record an error for an serious condition";
        v57 = v55;
        v58 = 2;
LABEL_97:
        _os_log_fault_impl(&dword_18A253000, v57, OS_LOG_TYPE_FAULT, v56, buf, v58);
      }
    }
LABEL_100:
    if (v44)
      return 0;
  }
  return v8;
}

void sub_18A27D11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, uint64_t a15, void *a16)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  id v21;
  void *v22;
  id v23;

  if (a2)
  {
    if (a2 == 2)
    {
      v18 = objc_begin_catch(exception_object);
      if ((a14 & 1) != 0)
      {

        a16 = 0;
        objc_exception_rethrow();
      }
      if (a15 && !a16)
      {
        v19 = v18;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[NSManagedObjectContext _handleError:withError:](v17, v19, (uint64_t *)&a16);
          v20 = a16;
        }
        else
        {
          v21 = objc_alloc(MEMORY[0x1E0C99D80]);
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v16);
          v22 = (void *)objc_msgSend(v21, "initWithObjectsAndKeys:", v19);
          v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
          a16 = (void *)objc_msgSend(v23, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 133000, v22);

        }
      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18A27CC4CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A27D2C4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A27D2D8);
  }
  JUMPOUT(0x18A27D300);
}

void sub_18A27D2E8()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A27D2F0);
  JUMPOUT(0x18A27D300);
}

void sub_18A27D2F8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A27D2FCLL);
  objc_terminate();
}

void sub_18A27D574(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

unsigned int *___sharedIMPL_setvfk_core_q_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return snapshot_set_int64(*(char **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 48));
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

void _PF_Handler_Primitive_Internal_SetProperty(char **a1, unsigned int a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  _PF_CopyOnWrite_Snapshot(a1);
  if (a4)
  {
    _NSSetUsingKeyValueSetter();
  }
  else
  {
    v8 = a3;
    snapshot_set_value_as_object(a1[3], a2, v8, v9, v10, v11, v12, v13);
  }
}

unsigned int *___sharedIMPL_setvfk_core_c_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return snapshot_set_int8(*(void **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", *(char *)(a1 + 48));
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

unsigned int *___sharedIMPL_setvfk_core_i_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return snapshot_set_int32(*(char **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 48));
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

void __internalBlockToDeallocNSManagedObjectContext_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  unint64_t StatusReg;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *global_queue;
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  -[NSManagedObjectContext _dealloc__](v2);
  MEMORY[0x18D76C0C0](objc_msgSend(v3, "drain"));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 712);
  if (v5 == v2)
  {
    v6 = (_QWORD *)(StatusReg + 712);
LABEL_6:
    *v6 = 0;
    goto LABEL_7;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v6 = (_QWORD *)(v5 + 8);
    if (v7 == v2)
      goto LABEL_6;
  }
LABEL_7:
  if (v2)
    *(_QWORD *)(v2 + 8) = 0;
  __dmb(0xBu);
  *(_QWORD *)(v2 + 24) = 0;
  global_queue = dispatch_get_global_queue(0, 0);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __internalBlockToDeallocNSManagedObjectContext_block_invoke_2;
  v9[3] = &unk_1E1EDE520;
  v10 = *(_OWORD *)(a1 + 32);
  v12 = *(_DWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  dispatch_async(global_queue, v9);
}

unsigned int *___sharedIMPL_setvfk_core_d_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return snapshot_set_double(*(char **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(double *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 48));
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

void sub_18A27DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unsigned int *___sharedIMPL_setvfk_core_s_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return snapshot_set_int16(*(char **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(_WORD *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a1 + 48));
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

uint64_t _sharedIMPL_vfk_core(id **a1, uint64_t a2, unint64_t a3)
{
  unsigned int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v23;
  uint64_t v24;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_valueForKey_);
  v5 = *((_DWORD *)a1 + 4);
  v6 = (unint64_t *)_PFEntityForManagedObject(a1);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[12] + 16) + 40) + 8 * a3);
  v14 = *(_QWORD *)(_kvcPropertysPrimitiveGetters(v6) + 8 * a3);
  if ((v5 & 0x40) != 0)
  {
    v15 = *((_DWORD *)a1 + 4);
    if ((v15 & 0x4000) != 0)
    {
      v23 = a1;
      v15 = (_DWORD)a1[2] & 0xFFFFBFFF;
      *((_DWORD *)a1 + 4) = v15;
    }
  }
  else
  {
    objc_msgSend(a1, "willAccessValueForKey:", v7);
    v15 = *((_DWORD *)a1 + 4);
  }
  v16 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v16)
    v17 = (char *)a1 + v16;
  else
    v17 = 0;
  if (((v17[(a3 >> 3) - ((v15 >> 22) & 0x3FC)] >> (a3 & 7)) & 1) == 0)
    _PF_FulfillDeferredFault(a1, a3);
  v18 = a1[3];
  if (v18)
  {
    if (v14)
      v19 = _NSGetUsingKeyValueGetter();
    else
      snapshot_get_value_as_object(v18, a3, v8, v9, v10, v11, v12, v13);
    v20 = v19;
    if ((v5 & 0x40) == 0)
      objc_msgSend(a1, "didAccessValueForKey:", v7);
  }
  else
  {
    v20 = 0;
    v21 = *((_DWORD *)a1 + 4);
    if ((v21 & 0x38000) != 0x10000 && (v21 & 0x80) == 0)
    {
      _NSCoreDataLog(1, (uint64_t)CFSTR("NULL _cd_rawData but the object is not being turned into a fault"), v8, v9, v10, v11, v12, v13, v24);
      return 0;
    }
  }
  return v20;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void _pvfk_34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x22uLL, a4, a5, a6, a7, a8);
}

void _pvfk_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x1CuLL, a4, a5, a6, a7, a8);
}

void _pvfk_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x25uLL, a4, a5, a6, a7, a8);
}

void _pvfk_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x24uLL, a4, a5, a6, a7, a8);
}

uint64_t _compareEntitiesByName(void *a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "name"), "compare:", objc_msgSend(a2, "name"));
}

void sub_18A2823B0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id _PFModelMapPathForEntity(void *a1)
{
  uint64_t v2;
  void *v3;
  __objc2_class *v4;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  objc_class *v10;
  void *v11;

  v2 = objc_msgSend((id)objc_msgSend(a1, "managedObjectModel"), "_modelsReferenceIDOffset");
  if (v2 > 16049)
  {
    switch(v2)
    {
      case 16050:
        v3 = (void *)MEMORY[0x1E0CB3940];
        v4 = _PFPersistentHistoryFetchModel;
        return (id)objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name"));
      case 17000:
        v3 = (void *)MEMORY[0x1E0CB3940];
        v4 = PFCloudKitMetadataModel;
        return (id)objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name"));
      case 18000:
        v3 = (void *)MEMORY[0x1E0CB3940];
        v4 = NSSQLiteIndexTrackingModel;
        return (id)objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name"));
    }
    goto LABEL_13;
  }
  if (v2)
  {
    if (v2 == 16000)
    {
      v3 = (void *)MEMORY[0x1E0CB3940];
      v4 = _PFPersistentHistoryModel;
      return (id)objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), -[__objc2_class ancillaryModelNamespace](v4, "ancillaryModelNamespace"), objc_msgSend(a1, "name"));
    }
LABEL_13:
    v6 = (void *)MEMORY[0x1E0C99DA0];
    v7 = *MEMORY[0x1E0C99768];
    v8 = (void *)MEMORY[0x1E0CB3940];
    v9 = v2;
    v10 = (objc_class *)objc_opt_class();
    v11 = (void *)objc_msgSend(v6, "exceptionWithName:reason:userInfo:", v7, objc_msgSend(v8, "stringWithFormat:", CFSTR("Managed object model with offset %lu is not known to %@"), v9, NSStringFromClass(v10)), 0);
    objc_exception_throw(v11);
  }
  return (id)objc_msgSend(a1, "name");
}

void _pvfk_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x1EuLL, a4, a5, a6, a7, a8);
}

void _PFfastOidRelease(int a1, unint64_t a2)
{
  Class Class;
  unsigned int *v4;
  int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class v11;

  if ((a2 & 0x8000000000000000) == 0)
  {
    Class = object_getClass((id)a2);
    if ((*((_BYTE *)object_getIndexedIvars(Class) + 4) & 1) == 0)
    {
      v4 = (unsigned int *)(a2 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 - 1, v4));
      if (v5 > 0)
        return;
LABEL_23:
      v11 = object_getClass((id)a2);
      objc_msgSend((id)a2, "dealloc");
      _PFfastFactoryRelease1(v11);
      return;
    }
    v6 = (unint64_t *)(a2 + 8);
    while (2)
    {
      while (1)
      {
        v7 = *v6;
        if ((*v6 & 0x8000) != 0)
          break;
        while (1)
        {
          v8 = __ldaxr(v6);
          if (v8 != v7)
            break;
          if (!__stlxr(v7 - 1, v6))
            goto LABEL_22;
        }
        __clrex();
      }
      os_unfair_lock_lock_with_options();
      do
      {
        v9 = __ldxr(v6);
        if (v9 != v7)
          goto LABEL_20;
      }
      while (__stxr(v7, v6));
      if (NSDecrementExtraRefCountWasZero((id)a2))
      {
        while (1)
        {
          v10 = __ldxr(v6);
          if (v10 != v7)
            break;
          if (!__stxr(v7 ^ 0xFFFF, v6))
            goto LABEL_21;
        }
LABEL_20:
        __clrex();
        os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
        continue;
      }
      break;
    }
LABEL_21:
    os_unfair_lock_unlock((os_unfair_lock_t)&_extraRetainsLock);
LABEL_22:
    if (!(_WORD)v7)
      goto LABEL_23;
  }
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

void sub_18A283DA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A283D70);
  }
  _Unwind_Resume(a1);
}

void sub_18A283DC0(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A283DD8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A283DE4);
}

id _PFRetainedObjectIDCore(uint64_t a1, void *a2, _QWORD *a3, char a4)
{
  void *v6;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  int v13;
  const __CFURL *v15;
  uint64_t v16;
  id v17;
  NSTemporaryObjectID *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  _QWORD v23[2];

  v6 = a2;
  v23[1] = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(a2, "persistentStore");
  v9 = objc_msgSend(v8, "_persistentStoreCoordinator");
  v10 = (void *)objc_msgSend((id)a1, "persistentStoreCoordinator");
  if (v8)
    v11 = objc_msgSend(v6, "_isPersistentStoreAlive") ^ 1;
  else
    v11 = 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8))
  {
    if (objc_msgSend(v6, "isTemporaryID"))
    {
      if (!_PFCMT_GetValue(*(_QWORD **)(a1 + 120), v6))
      {
        v12 = objc_msgSend(**(id **)(*(_QWORD *)(a1 + 184) + 8), "objectForKey:", v6);
        if (v12)
          v6 = (void *)v12;
      }
    }
  }
  if ((void *)v9 == v10)
    v13 = v11;
  else
    v13 = 1;
  if (v13 != 1 || !v8 && objc_msgSend(v6, "isTemporaryID"))
    return -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((_QWORD **)a1, v6, 0);
  v15 = (const __CFURL *)objc_msgSend(v6, "URIRepresentation");
  if (objc_msgSend(v6, "isTemporaryID"))
  {
    v16 = 133000;
    v17 = (id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Temporary object ID refers to object in different NSPersistentStoreCoordinator"), 0);
    if ((a4 & 1) == 0)
    {
LABEL_18:
      if (!a3)
        return 0;
      if (v17)
        v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v17, CFSTR("NSUnderlyingException"), 0);
LABEL_27:
      *a3 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], v16, v17);

      return 0;
    }
LABEL_31:
    if (v17)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (!-[NSPersistentStoreCoordinator _persistentStoreForIdentifier:]((uint64_t)v10, objc_msgSend(v6, "_storeIdentifier")))
  {
    v19 = (void *)MEMORY[0x1E0C99DA0];
    v20 = *MEMORY[0x1E0C99778];
    v21 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Object %@ persistent store is not reachable from this NSManagedObjectContext's coordinator"), v6);
    v22 = CFSTR("objectID");
    v23[0] = v6;
    v17 = (id)objc_msgSend(v19, "exceptionWithName:reason:userInfo:", v20, v21, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1));
    v16 = 134098;
    if ((a4 & 1) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
  v18 = -[NSPersistentStoreCoordinator managedObjectIDForURIRepresentation:error:](v10, v15, 0);
  if (v18)
  {
    v17 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:]((_QWORD **)a1, v18, 0);
    if (v17)
      return v17;
  }
  if ((a4 & 1) != 0)
  {
LABEL_32:
    v17 = (id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Invalid state for objectID or NSManagedObjectContext"), 0);
LABEL_33:
    objc_exception_throw(v17);
  }
  v17 = 0;
  if (a3)
  {
    v16 = 133000;
    goto LABEL_27;
  }
  return v17;
}

void sub_18A2843AC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18A2868DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _pvfk_31(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x1FuLL, a4, a5, a6, a7, a8);
}

_QWORD *_svfk_0(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0);
}

_QWORD *_svfk_3(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 3uLL);
}

void *PF_CALLOC_OBJECT_ARRAY(uint64_t a1)
{
  malloc_zone_t *v2;

  v2 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v2 = malloc_default_zone();
  return malloc_type_zone_calloc(v2, 1uLL, 8 * a1, 0x65F61B88uLL);
}

NSSQLFetchRequestContext *_executeObjectFaultRequest(uint64_t a1)
{
  void *v2;
  void *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSSQLFetchRequestContext *Request;
  const void *v14;
  NSSQLiteStatementCache *v15;
  NSSQLiteStatementCache *v16;
  _QWORD *p_isa;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  _PFArray *v21;
  uint64_t v23;
  NSSQLFetchRequestContext *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  SEL v40;
  void *v41;
  uint64_t v42;
  void *v43;
  SEL v44;
  NSObject *v45;
  uint64_t v46;
  NSSQLBindVariable *v47;
  _QWORD *v48;
  NSObject *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  _QWORD v53[5];
  uint8_t buf[8];
  const __CFString *v55;
  void *v56;
  _QWORD v57[2];
  _QWORD v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x18D76B4E4]();
  if (!a1 || (v3 = *(void **)(a1 + 88)) == 0)
  {
    v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_executeObjectFaultRequest passed a nil objectID");
    _NSCoreDataLog(17, v5, v6, v7, v8, v9, v10, v11, v52);
    v12 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_18A253000, v12, OS_LOG_TYPE_FAULT, "CoreData: _executeObjectFaultRequest passed a nil objectID", buf, 2u);
    }
    goto LABEL_17;
  }
  if ((objc_msgSend(*(id *)(a1 + 88), "isTemporaryID") & 1) != 0)
    goto LABEL_17;
  if (PFInstrumentsRecordingEnabled())
  {
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = ___executeObjectFaultRequest_block_invoke;
    v53[3] = &unk_1E1EDEB50;
    v53[4] = v3;
    v4 = ___executeObjectFaultRequest_block_invoke((uint64_t)v53);
  }
  else
  {
    v4 = 0;
  }
  Request = -[NSSQLObjectFaultRequestContext createFetchRequestContext]((NSSQLFetchRequestContext *)a1);
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)Request, *(void **)(a1 + 24));
  v14 = (const void *)-[NSSQLCore entityForObjectID:](*(_QWORD *)(a1 + 8), v3);
  if (!v14)
  {
LABEL_17:
    objc_autoreleasePoolPop(v2);
    return 0;
  }
  v15 = -[NSSQLiteConnection statementCacheForEntity:](*(_QWORD *)(a1 + 24), v14);
  v16 = v15;
  if (v15)
  {
    p_isa = &v15->_faultingStatementCache->super.isa;
    v18 = objc_msgSend(v3, "_referenceData64");
    if (p_isa)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(p_isa, "bindVariables"), "objectAtIndex:", 0), "setInt64:", v18);
      -[NSSQLFetchRequestContext setFetchStatement:](Request, "setFetchStatement:", p_isa);
      if (Request)
        goto LABEL_13;
LABEL_37:
      v48 = p_isa;
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    v18 = objc_msgSend(v3, "_referenceData64");
  }
  v46 = -[NSSQLFetchRequestContext fetchStatement](Request, "fetchStatement");
  p_isa = (_QWORD *)v46;
  if (v46)
    objc_msgSend(*(id *)(v46 + 16), "removeAllObjects");
  v47 = -[NSSQLBindVariable initWithInt64:sqlType:]([NSSQLBindVariable alloc], "initWithInt64:sqlType:", v18, 2);
  -[NSSQLiteStatement addBindVariable:]((uint64_t)p_isa, v47);

  -[NSSQLiteStatementCache cacheFaultingStatement:](v16, p_isa);
  if (!Request)
    goto LABEL_37;
LABEL_13:
  Request->_isUsingCachedStatement = 1;
  v19 = p_isa;
  v20 = 0;
  v21 = 0;
  Request->_fetchPlan->flags = ($C6D29F7D67899FE11DE7F8953A7C3E5F)(*(_DWORD *)&Request->_fetchPlan->flags & 0xFFFFFFE3 | 8);
  while (!v21 && v20 != 1)
  {
    v21 = _newFetchedRowsForRequest((uint64_t)Request);
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)Request, 0);

    Request = 0;
    ++v20;
  }

  v23 = -[_PFArray count](v21, "count");
  Request = (NSSQLFetchRequestContext *)-[_PFArray lastObject](v21, "lastObject");
  v24 = Request;

  if (Request)
    -[NSSQLFetchRequestContext knownKeyValuesPointer](Request, "knownKeyValuesPointer");
  if (!v23)
  {

    v41 = (void *)MEMORY[0x1E0CB35C8];
    v55 = CFSTR("objectID");
    v56 = v3;
    v42 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1);
    v43 = (void *)objc_msgSend(v41, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 133000, v42);
    objc_setProperty_nonatomic((id)a1, v44, v43, 40);
    goto LABEL_25;
  }
  if (v23 != 1)
  {
LABEL_38:
    if (v4)
    {
      if (PFInstrumentsGetLog_logtoken != -1)
        dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
      if (v4 != -1)
      {
        v49 = PFInstrumentsGetLog_coreDataInstrumentsLog;
        if (os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_18A253000, v49, OS_SIGNPOST_INTERVAL_END, v4, "Fault", (const char *)&unk_18A57BACF, buf, 2u);
        }
      }
    }
    _NSCoreDataLog(1, (uint64_t)CFSTR("Asked to fault objectID %@ but database returned multiple rows"), v25, v26, v27, v28, v29, v30, (uint64_t)v3);

    v50 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("failed to resolve fault to exactly one object for %@"), v3);
    v51 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], 134071, v50, 0);
    objc_exception_throw(v51);
  }
  if ((objc_msgSend((id)-[NSSQLFetchRequestContext objectID](Request, "objectID"), "isEqual:", v3) & 1) == 0)
  {
    -[NSSQLFetchRequestContext objectID](Request, "objectID");
    _NSCoreDataLog(1, (uint64_t)CFSTR("Asked to fault objectID %@ but database returned row with different objectID %@"), v31, v32, v33, v34, v35, v36, (uint64_t)v3);
    v37 = (void *)MEMORY[0x1E0CB35C8];
    v57[0] = CFSTR("objectID");
    v57[1] = CFSTR("message");
    v58[0] = v3;
    v58[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Database appears corrupt.  Asked to fault objectID %@ but database returned row with different objectID %@"), v3, -[NSSQLFetchRequestContext objectID](Request, "objectID"));
    v38 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v58, v57, 2);
    v39 = (void *)objc_msgSend(v37, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134071, v38);
    objc_setProperty_nonatomic((id)a1, v40, v39, 40);

LABEL_25:
    Request = 0;
  }
  if (v4)
  {
    if (PFInstrumentsGetLog_logtoken != -1)
      dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
    if (v4 != -1)
    {
      v45 = PFInstrumentsGetLog_coreDataInstrumentsLog;
      if (os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_18A253000, v45, OS_SIGNPOST_INTERVAL_END, v4, "Fault", (const char *)&unk_18A57BACF, buf, 2u);
      }
    }
  }
  objc_autoreleasePoolPop(v2);
  return Request;
}

void sub_18A287E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18A28A234(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    objc_terminate();
  _Unwind_Resume(v2);
}

void sub_18A28A260()
{
  objc_end_catch();
  JUMPOUT(0x18A28A26CLL);
}

os_signpost_id_t ___executeObjectFaultRequest_block_invoke(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (PFInstrumentsGetLog_logtoken != -1)
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
  v2 = os_signpost_id_generate((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog);
  if (PFInstrumentsGetLog_logtoken != -1)
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
  v3 = PFInstrumentsGetLog_coreDataInstrumentsLog;
  kdebug_trace();
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_signpost_emit_with_name_impl(&dword_18A253000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Fault", "%@", (uint8_t *)&v6, 0xCu);
  }
  return v2;
}

uint64_t compareObjectIDsByPKs(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(a1, "_referenceData64");
  v4 = objc_msgSend(a2, "_referenceData64");
  v5 = -1;
  if (v3 >= v4)
    v5 = 1;
  if (v3 == v4)
    return 0;
  else
    return v5;
}

void _pvfk_46(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x2EuLL, a4, a5, a6, a7, a8);
}

_QWORD *_sharedIMPL_setvfk_core_c(_QWORD *a1, uint64_t a2, char a3, unint64_t a4)
{
  _QWORD v5[6];
  char v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_c_block_invoke;
  v5[3] = &unk_1E1EDE050;
  v5[4] = a1;
  v5[5] = a4;
  v6 = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

void _sharedIMPL_copying_setvfk_core(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v6;
  id v7;

  if (a3)
  {
    v7 = (id)objc_msgSend(a3, "copy");
    _sharedIMPL_setvfk_core(a1, v6, v7, a4);
    if (v7)

  }
  else
  {
    _sharedIMPL_setvfk_core(a1, a2, 0, a4);
  }
}

_QWORD *_sharedIMPL_setvfk_core_q(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD v5[7];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_q_block_invoke;
  v5[3] = &unk_1E1EDE0C8;
  v5[4] = a1;
  v5[5] = a4;
  v5[6] = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

_QWORD *_sharedIMPL_setvfk_core(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_setValue_forKey_);
  v20 = a3;
  v7 = _PFEntityForManagedObject(a1);
  v8 = *(void **)(v7[12] + 24 + 8 * a4);
  v9 = *(_QWORD *)(_kvcPropertysPrimitiveSetters((uint64_t)v7) + 8 * a4);
  v10 = *(_QWORD *)(*(_QWORD *)(v7[12] + 16) + 40);
  v11 = *(_QWORD *)(v10 + 8 * a4);
  v12 = *((_DWORD *)a1 + 4);
  if ((v12 & 0x40000) != 0)
    _PF_ManagedObject_WillChangeValueForKeyIndex((uint64_t)a1, (uint64_t)sel_willChangeValueForKey_, v11, a4, 0);
  else
    objc_msgSend(a1, "willChangeValueForKey:", *(_QWORD *)(v10 + 8 * a4));
  _PF_CopyOnWrite_Snapshot(a1);
  _PFManagedObject_coerceValueForKeyWithDescription((uint64_t)a1, &v20, v11, v8);
  if (v9)
  {
    _NSSetUsingKeyValueSetter();
    if ((v12 & 0x40000) != 0)
      return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v11, a4);
  }
  else
  {
    v13 = v20;
    snapshot_set_value_as_object(a1[3], a4, v13, v14, v15, v16, v17, v18);
    if ((v12 & 0x40000) != 0)
      return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v11, a4);
  }
  return (_QWORD *)objc_msgSend(a1, "didChangeValueForKey:", v11);
}

_QWORD *_PF_ManagedObject_DidChangeValueForKeyIndex(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;

  v5 = result;
  v6 = *((_DWORD *)result + 4);
  if ((v6 & 0x2000) == 0)
  {
    result = _PFEntityForManagedObject(result);
    v9 = result[14];
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_QWORD *)(v9 + 40);
    v12 = (_QWORD *)v5[6];
    if (v12)
    {
      if (*v12)
        goto LABEL_8;
    }
    v14 = a4 >= v10;
    v13 = a4 - v10;
    v14 = !v14 || v13 >= v11;
    if (!v14)
LABEL_8:
      result = (_QWORD *)_NSObjectDidChangeVFKImp(v5, a2, a3);
  }
  if ((v6 & 0x1000) == 0)
    *((_DWORD *)v5 + 4) &= ~0x800u;
  if ((v6 & 0x40) == 0)
    return (_QWORD *)objc_msgSend(v5, "didAccessValueForKey:", a3);
  return result;
}

uint64_t _PFManagedObject_coerceValueForKeyWithDescription(uint64_t a1, void **a2, uint64_t a3, void *a4)
{
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char isKindOfClass;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const __CFString *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Class v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  if ((void *)objc_msgSend(MEMORY[0x1E0C99E38], "null") == v8)
    v9 = 0;
  else
    v9 = v8;
  result = objc_msgSend(a4, "_propertyType");
  if (result != 4)
  {
    if (result != 2)
    {
      v8 = v9;
      goto LABEL_88;
    }
    if (v9)
    {
      v11 = objc_msgSend(a4, "attributeType");
      if (v11 > 699)
      {
        if (v11 > 899)
        {
          switch(v11)
          {
            case 900:
              result = objc_msgSend(v9, "isNSDate");
              if ((result & 1) != 0)
                return result;
              break;
            case 1000:
              if (objc_msgSend(a4, "isFileBackedFuture"))
              {
                objc_opt_class();
                result = objc_opt_isKindOfClass();
                if ((result & 1) != 0)
                  return result;
              }
              else
              {
                result = objc_msgSend(v9, "isNSData");
                if ((result & 1) != 0)
                  return result;
              }
              break;
            case 1800:
              if (objc_msgSend(a4, "usesMergeableStorage"))
              {
                objc_opt_class();
                result = objc_opt_respondsToSelector();
                if ((result & 1) != 0)
                  return result;
              }
              break;
          }
          goto LABEL_59;
        }
        if (v11 == 700)
        {
          result = objc_msgSend(v9, "isNSString");
          if ((result & 1) != 0)
            return result;
          goto LABEL_59;
        }
        if (v11 != 800)
        {
LABEL_59:
          if (!objc_msgSend(a4, "isFileBackedFuture"))
          {
            if (objc_msgSend(a4, "usesMergeableStorage"))
            {
              v26 = (void *)MEMORY[0x1E0C99DA0];
              v27 = *MEMORY[0x1E0C99778];
              v30 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Using mergeable storage with the attribute \"%@\" requires conformance to %@."), objc_msgSend(a4, "name"), NSStringFromProtocol((Protocol *)&unk_1EDF6A848));
            }
            else
            {
              v36 = objc_msgSend(a4, "_attributeValueClass");
              if (v36)
              {
                v37 = (void *)v36;
                result = objc_opt_isKindOfClass();
                if ((result & 1) != 0)
                  goto LABEL_88;
                v38 = a3;
                if (objc_msgSend(v9, "isNSNumber")
                  && objc_msgSend(v37, "isSubclassOfClass:", objc_opt_class()))
                {
                  result = objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", objc_msgSend(v9, "stringValue"));
                  v8 = (void *)result;
                  goto LABEL_88;
                }
                v26 = (void *)MEMORY[0x1E0C99DA0];
                v27 = *MEMORY[0x1E0C99778];
                v56 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unacceptable type of value for attribute: property = \"%@\"; desired type = %@; given type = %@; value = %@."),
                        a3,
                        objc_msgSend(a4, "attributeValueClassName"),
                        objc_opt_class(),
                        v9);
                goto LABEL_110;
              }
              result = objc_msgSend(a4, "isTransient");
              if ((result & 1) != 0)
                goto LABEL_88;
              result = objc_msgSend(a4, "attributeType");
              if (result == 1800)
                goto LABEL_88;
              v26 = (void *)MEMORY[0x1E0C99DA0];
              v27 = *MEMORY[0x1E0C99768];
              v30 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Cannot set value for attribute with undefined type: property = \"%@\"; entity = \"%@\"; value = %@"),
                      a3,
                      objc_msgSend(a4, "entity"),
                      v9,
                      v58);
            }
LABEL_51:
            v31 = v30;
            v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a3, CFSTR("key"), v9, CFSTR("value"), 0);
LABEL_52:
            v33 = v32;
            v34 = v26;
            v35 = v27;
            goto LABEL_85;
          }
          v51 = (void *)MEMORY[0x1E0C99DA0];
          v52 = *MEMORY[0x1E0C99778];
          v53 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unacceptable type of value for attribute: property = \"%@\"; desired type = %@; given type = %@; value = %@."),
                  a3,
                  CFSTR("A class implementing the NSFileBackedFuture protocol"),
                  objc_opt_class(),
                  v9);
          goto LABEL_114;
        }
      }
      else if (v11 <= 299)
      {
        if (v11 != 100 && v11 != 200)
          goto LABEL_59;
      }
      else if (v11 != 300 && v11 != 500 && v11 != 600)
      {
        goto LABEL_59;
      }
      result = objc_msgSend(v9, "isNSNumber");
      if ((result & 1) != 0)
        return result;
      goto LABEL_59;
    }
LABEL_23:
    v8 = 0;
    goto LABEL_88;
  }
  v12 = (unint64_t *)objc_msgSend(a4, "destinationEntity");
  v13 = _PFFastEntityClass(v12);
  class_getSuperclass((Class)v13);
  result = objc_msgSend(a4, "isToMany");
  if (!(_DWORD)result)
  {
    if (v9)
    {
      v16 = (void *)objc_msgSend(v9, "managedObjectContext");
      v17 = v16;
      if (!a1 || (*(_BYTE *)(a1 + 16) & 0x80) != 0)
        v18 = 0;
      else
        v18 = *(void **)(a1 + 32);
      if ((objc_msgSend(v16, "_isSwiftBound") & 1) != 0
        || (v24 = objc_msgSend(v18, "_isSwiftBound"), v17 == v18)
        || (v24 & 1) != 0
        || (void *)objc_msgSend((id)a1, "valueForKey:", a3) == v9)
      {
        isKindOfClass = objc_opt_isKindOfClass();
        if (v12)
        {
          if ((isKindOfClass & 1) != 0)
          {
            result = objc_msgSend(v12, "_subentitiesIncludes:", _PFEntityForManagedObject(v9));
            if ((result & 1) != 0)
              goto LABEL_88;
          }
        }
        v26 = (void *)MEMORY[0x1E0C99DA0];
        v27 = *MEMORY[0x1E0C99778];
        v28 = (void *)MEMORY[0x1E0CB3940];
        -[NSEntityDescription _entityClass]((unint64_t *)objc_msgSend(a4, "destinationEntity"));
        v29 = objc_opt_class();
        v30 = objc_msgSend(v28, "stringWithFormat:", CFSTR("Unacceptable type of value for to-one relationship: property = \"%@\"; desired type = %@; given type = %@; value = %@."),
                a3,
                v29,
                objc_opt_class(),
                v9);
        goto LABEL_51;
      }
      v51 = (void *)MEMORY[0x1E0C99DA0];
      v52 = *MEMORY[0x1E0C99778];
      v53 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Illegal attempt to establish a relationship '%@' between objects in different contexts (source = %@ , destination = %@)"), a3, a1, v9, v58);
LABEL_114:
      v57 = v53;
      v33 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a3, CFSTR("key"), v9, CFSTR("value"), 0);
      v34 = v51;
      v35 = v52;
      v50 = v57;
      goto LABEL_86;
    }
    goto LABEL_23;
  }
  if (objc_msgSend(a4, "isOrdered"))
  {
    v14 = objc_opt_class();
    v61 = (Class)objc_opt_class();
    if ((objc_msgSend(v9, "isNSOrderedSet") & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    v14 = objc_opt_class();
    v61 = (Class)objc_opt_class();
    if ((objc_msgSend(v9, "isNSSet") & 1) != 0)
    {
LABEL_16:
      v15 = 1;
      if (!v9)
        goto LABEL_41;
      goto LABEL_33;
    }
  }
  v15 = objc_msgSend(v9, "count") == 0;
  if (!v9)
    goto LABEL_41;
LABEL_33:
  if (!v15)
  {
    v26 = (void *)MEMORY[0x1E0C99DA0];
    v27 = *MEMORY[0x1E0C99778];
    v54 = (void *)MEMORY[0x1E0CB3940];
    v38 = a3;
    if (objc_msgSend(a4, "isOrdered"))
      v55 = CFSTR("ordered to-many");
    else
      v55 = CFSTR("to-many");
    v56 = objc_msgSend(v54, "stringWithFormat:", CFSTR("Unacceptable type of value for %@ relationship: property = \"%@\"; desired type = %@; given type = %@; value = %@."),
            v55,
            v38,
            v14,
            objc_opt_class(),
            v9);
LABEL_110:
    v31 = v56;
    v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v38, CFSTR("key"), v9, CFSTR("value"), 0);
    goto LABEL_52;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (objc_msgSend(v9, "source") == a1)
    {
      result = objc_msgSend(v9, "relationship");
      if ((void *)result == a4)
        goto LABEL_88;
    }
  }
  v19 = objc_msgSend(v9, "count");
  if (!v19)
  {
LABEL_41:
    v8 = (void *)objc_msgSend([v61 alloc], "initWithSource:forRelationship:asFault:", a1, a4, 0);
    goto LABEL_42;
  }
  v20 = v19;
  v59 = (uint64_t)&v59;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v59 - v22;
  v60 = a3;
  if (v21 > 0x200)
    v23 = (char *)NSAllocateScannedUncollectable();
  else
    bzero((char *)&v59 - v22, 8 * v21);
  objc_msgSend(v9, "getObjects:", v23, v59);
  for (i = 0; i != v20; ++i)
  {
    v40 = *(void **)&v23[8 * i];
    v41 = objc_msgSend(v40, "managedObjectContext");
    if (!a1 || (*(_BYTE *)(a1 + 16) & 0x80) != 0)
      v42 = 0;
    else
      v42 = *(_QWORD *)(a1 + 32);
    if (v41 != v42 && (objc_msgSend((id)objc_msgSend((id)a1, "valueForKey:", v60), "containsObject:", v40) & 1) == 0)
    {
      v51 = (void *)MEMORY[0x1E0C99DA0];
      v52 = *MEMORY[0x1E0C99778];
      a3 = v60;
      v53 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Illegal attempt to establish a relationship '%@' between objects in different contexts (source = %@ , destination = %@)"), v60, a1, v40, v58);
      goto LABEL_114;
    }
    v43 = objc_opt_isKindOfClass();
    if (!v12
      || !v40
      || (v43 & 1) == 0
      || (objc_msgSend(v12, "_subentitiesIncludes:", _PFEntityForManagedObject(v40)) & 1) == 0)
    {
      v44 = (void *)MEMORY[0x1E0C99DA0];
      v45 = *MEMORY[0x1E0C99778];
      v46 = (void *)MEMORY[0x1E0CB3940];
      -[NSEntityDescription _entityClass]((unint64_t *)objc_msgSend(a4, "destinationEntity"));
      v47 = objc_opt_class();
      v48 = objc_opt_class();
      v49 = v60;
      v31 = objc_msgSend(v46, "stringWithFormat:", CFSTR("Unacceptable type of value in to-many relationship: property = \"%@\"; problem = %@; desired type = %@; given type = %@; value = %@."),
              v60,
              v9,
              v47,
              v48,
              v40);
      v33 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v49, CFSTR("key"), v9, CFSTR("value"), 0);
      v34 = v44;
      v35 = v45;
LABEL_85:
      v50 = v31;
LABEL_86:
      objc_exception_throw((id)objc_msgSend(v34, "exceptionWithName:reason:userInfo:", v35, v50, v33));
    }
  }
  v8 = (void *)objc_msgSend([v61 alloc], "initWithSource:forRelationship:asFault:", a1, a4, 0);
  if (objc_msgSend(a4, "isOrdered"))
    objc_msgSend(v8, "addObjects:count:", v23, v20);
  else
    objc_msgSend(v8, "setSet:", v9);
  if (v20 >= 0x201)
    NSZoneFree(0, v23);
LABEL_42:
  result = v8;
LABEL_88:
  *a2 = v8;
  return result;
}

void sub_18A28DC10(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A28DC40(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A28DB48);
  }
  JUMPOUT(0x18A28DC38);
}

void sub_18A28E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void _PFFaultHandlerFulfillPartialFault(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  unsigned int v7;
  void *v12;
  unint64_t **v13;
  unint64_t **v14;
  unint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  objc_class *v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t j;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v95;
  char **v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[128];
  _BYTE v107[128];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v7 = a2[4];
  if ((v7 & 0x38000) == 0x8000)
  {
    a2[4] = v7 & 0xFFFC7FFF | 0x18000;
    v12 = (void *)*((_QWORD *)a2 + 5);
    v13 = (unint64_t **)_PFEntityForManagedObject(a2);
    v14 = v13;
    if (v13)
      v15 = v13[14];
    else
      v15 = 0;
    v97 = _kvcPropertysPrimitiveSetters((uint64_t)v13);
    v16 = (_QWORD *)*((_QWORD *)a2 + 6);
    if (v16 && *v16)
    {
      v17 = 0;
      v18 = 1;
      if (a6)
      {
        v19 = a2[4];
        if ((v19 & 0x2000) == 0)
        {
          if (a3)
            ++*(_WORD *)(a3 + 50);
          a2[4] = v19 | 0x1000;
          objc_msgSend(a2, "_willChangeValuesForKeys:", a6);
          v18 = 0;
          v17 = a6;
        }
      }
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v90 = v18;
    v89 = v17;
    v91 = a3;
    v20 = (objc_class *)_PFCDSnapshotClassForEntity((unint64_t)v14);
    v21 = (void *)*((_QWORD *)a2 + 3);
    if (v21)

    v22 = -[_CDSnapshot initWithObjectID:]([v20 alloc], v12);
    snapshot_initialize_all_null(v22);
    *((_QWORD *)a2 + 3) = v22;
    v23 = a2[5];
    if ((_DWORD)v23)
      v24 = (char *)a2 + v23;
    else
      v24 = 0;
    v95 = &v24[-(((unint64_t)a2[4] >> 22) & 0x3FC)];
    v25 = *v15;
    v26 = v15[1] + *v15;
    if (*v15 < v26)
    {
      v27 = v26 - 1;
      v28 = (int)v25 >> 3;
      v29 = v27 >> 3;
      v30 = 0xFFu >> (8 - (v25 & 7));
      if (v27 >> 3 == (int)v25 >> 3)
      {
        v31 = (510 << (v27 & 7)) | v30;
      }
      else
      {
        v95[v28] &= v30;
        if (v28 + 1 < v29)
          bzero(&v95[v28 + 1], (v29 - v28 - 2) + 1);
        v31 = 510 << (v27 & 7);
        v28 = v27 >> 3;
      }
      v95[v28] &= v31;
    }
    v33 = v15[12];
    v32 = v15[13];
    if (v33 < v32 + v33)
    {
      do
      {
        _PF_CopyOnWrite_Snapshot(a2);
        if (*(_QWORD *)(v97 + 8 * v33))
        {
          _NSSetUsingKeyValueSetter();

        }
        else
        {
          snapshot_set_value_as_object(*((char **)a2 + 3), v33, (void *)_CD_ScalarNull, v34, v35, v36, v37, v38);
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    v96 = (char **)a2;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v39 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v102, v107, 16);
    if (v39)
    {
      v40 = v39;
      v41 = *(_QWORD *)v103;
      v42 = 1;
      v92 = a4;
      do
      {
        for (i = 0; i != v40; ++i)
        {
          if (*(_QWORD *)v103 != v41)
            objc_enumerationMutation(a5);
          v44 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * i);
          v45 = objc_msgSend(v44, "_entitysReferenceID");
          if (v45 < 0)
          {
            ++v42;
          }
          else
          {
            v46 = v45;
            v47 = objc_msgSend(v44, "entity");
            if (v14 != (unint64_t **)v47)
              v46 = objc_msgSend(v14, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v46, v47, objc_msgSend(v44, "_isToManyRelationship"));
            if (a4)
              v48 = *(void **)(a4 + 8 * v42++);
            else
              v48 = 0;
            v49 = v15[6];
            v51 = v46 >= v49;
            v50 = v46 - v49;
            v51 = !v51 || v50 >= v15[7];
            if (v51)
            {
              v52 = v15[12];
              v51 = v46 >= v52;
              v53 = v46 - v52;
              if (v51 && v53 < v15[13])
              {
                v55 = *(_QWORD *)(v97 + 8 * v46);
                _PF_CopyOnWrite_Snapshot(v96);
                if (v55)
                {
                  _NSSetUsingKeyValueSetter();
                }
                else
                {
                  v63 = v48;
                  snapshot_set_value_as_object(v96[3], v46, v63, v64, v65, v66, v67, v68);
                }
                a4 = v92;
                if (!v48)
                  v95[v46 >> 3] |= 1 << (v46 & 7);
              }
            }
            else
            {
              v56 = *(_QWORD *)(v97 + 8 * v46);
              _PF_CopyOnWrite_Snapshot(v96);
              if (v56)
              {
                _NSSetUsingKeyValueSetter();
              }
              else
              {
                v57 = v48;
                snapshot_set_value_as_object(v96[3], v46, v57, v58, v59, v60, v61, v62);
              }
              v95[v46 >> 3] |= 1 << (v46 & 7);
              a4 = v92;
            }
          }
        }
        v40 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v102, v107, 16);
      }
      while (v40);
    }
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v69 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v98, v106, 16);
    if (v69)
    {
      v70 = v69;
      v71 = *(_QWORD *)v99;
      do
      {
        for (j = 0; j != v70; ++j)
        {
          if (*(_QWORD *)v99 != v71)
            objc_enumerationMutation(a7);
          v73 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * j);
          v74 = objc_msgSend(v73, "_entitysReferenceID");
          if ((v74 & 0x8000000000000000) == 0)
          {
            v75 = v74;
            v76 = objc_msgSend(v73, "entity");
            if (v14 != (unint64_t **)v76)
              v75 = objc_msgSend(v14, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v75, v76, objc_msgSend(v73, "_isToManyRelationship"));
            v77 = v15[10];
            v51 = v75 >= v77;
            v78 = v75 - v77;
            if (v51 && v78 < v15[11])
            {
              if (objc_msgSend(v73, "_propertyType") == 7)
                v80 = objc_msgSend(v73, "_buildDefaultValue");
              else
                v80 = objc_msgSend(v73, "defaultValue");
              v81 = (void *)v80;
              v82 = *(_QWORD *)(v97 + 8 * v75);
              _PF_CopyOnWrite_Snapshot(v96);
              if (v82)
              {
                _NSSetUsingKeyValueSetter();
              }
              else
              {
                v83 = v81;
                snapshot_set_value_as_object(v96[3], v75, v83, v84, v85, v86, v87, v88);
              }
              v95[v75 >> 3] |= 1 << (v75 & 7);
            }
          }
        }
        v70 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v98, v106, 16);
      }
      while (v70);
    }
    *((_DWORD *)v96 + 4) = (_DWORD)v96[2] & 0xFFFC7FFF | 0x28000;
    if ((v90 & 1) == 0)
    {
      objc_msgSend(v96, "_didChangeValuesForKeys:", v89);
      *((_DWORD *)v96 + 4) &= ~0x1000u;
      if (v91)
        --*(_WORD *)(v91 + 50);
    }
  }
}

void _PF_CopyOnWrite_Snapshot(id a1)
{
  _BYTE *v2;
  id v3;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;

  v2 = (_BYTE *)*((_QWORD *)a1 + 3);
  if (v2)
  {
    if ((v2[24] & 1) != 0)
    {
      v13 = v2;
      *((_QWORD *)a1 + 3) = objc_msgSend(v2, "mutableCopy");

    }
  }
  else
  {
    v3 = _PFEntityForManagedObject(a1);
    v4 = (objc_class *)_PFCDSnapshotClassForEntity((unint64_t)v3);
    if (v4)
    {
      v11 = -[_CDSnapshot initWithObjectID:]([v4 alloc], *((void **)a1 + 5));
      snapshot_initialize_all_null(v11);
      *((_DWORD *)v11 + 3) = *((_DWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = v11;
    }
    else
    {
      _NSCoreDataLog(1, (uint64_t)CFSTR("Snapshot class was nil"), v5, v6, v7, v8, v9, v10, v12);
      __break(1u);
    }
  }
}

void snapshot_set_value_as_object(char *a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Class Class;
  _QWORD *IndexedIvars;
  char *v12;
  int v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  uint64_t v18;
  int v19;
  char v20;
  __int16 v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (a1)
  {
    Class = object_getClass(a1);
    IndexedIvars = object_getIndexedIvars(Class);
    v12 = &a1[(unint64_t)a2 >> 3];
    v13 = 1 << (a2 & 7);
    v14 = v12[28];
    v15 = v14 & ~(_BYTE)v13;
    v16 = v14 | v13;
    v17 = a3;
    if (a3)
      v16 = v15;
    v12[28] = v16;
    v18 = *((unsigned int *)IndexedIvars + a2 + 19);
    v19 = *(char *)(IndexedIvars[7] + a2);
    switch(*(_BYTE *)(IndexedIvars[7] + a2))
    {
      case 'c':
        v20 = objc_msgSend(a3, "charValue");
        v17 = a3;
        a1[v18] = v20;
        if (a3)
          goto LABEL_29;
        return;
      case 'd':
        if (a3)
        {
          if (objc_msgSend(a3, "isNSNumber"))
            objc_msgSend(a3, "doubleValue");
          else
            objc_msgSend(a3, "timeIntervalSinceReferenceDate");
          v17 = a3;
        }
        else
        {
          v23 = 0;
        }
        *(_QWORD *)&a1[v18] = v23;
        if (v17)
          goto LABEL_29;
        return;
      case 'e':
      case 'g':
      case 'h':
        goto LABEL_11;
      case 'f':
        if (a3)
        {
          objc_msgSend(a3, "floatValue");
          v17 = a3;
        }
        else
        {
          v24 = 0;
        }
        *(_DWORD *)&a1[v18] = v24;
        if (!v17)
          return;
        goto LABEL_29;
      case 'i':
        v25 = objc_msgSend(a3, "intValue");
        v17 = a3;
        *(_DWORD *)&a1[v18] = v25;
        if (!a3)
          return;
        goto LABEL_29;
      default:
        if (v19 == 113)
        {
          v26 = objc_msgSend(a3, "longLongValue");
          v17 = a3;
          *(_QWORD *)&a1[v18] = v26;
          if (!a3)
            return;
        }
        else if (v19 == 115)
        {
          v21 = objc_msgSend(a3, "shortValue");
          v17 = a3;
          *(_WORD *)&a1[v18] = v21;
          if (!a3)
            return;
        }
        else
        {
LABEL_11:
          v22 = *(void **)&a1[v18];
          *(_QWORD *)&a1[v18] = a3;
          v17 = v22;
          if (!v22)
            return;
        }
LABEL_29:

        break;
    }
  }
  else
  {
    _NSCoreDataLog(1, (uint64_t)CFSTR("warning snapshot_set_value_as_object called on NULL"), (uint64_t)a3, a4, a5, a6, a7, a8, v27);
    __break(1u);
  }
}

_DWORD *snapshot_initialize_all_null(_BYTE *a1)
{
  Class Class;
  _DWORD *result;
  int v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  int v8;

  Class = object_getClass(a1);
  result = object_getIndexedIvars(Class);
  v4 = result[16];
  v5 = v4 - 1;
  if (v4 >= 1)
  {
    v6 = a1 + 28;
    if (v4 >= 9)
    {
      v7 = v5 >> 3;
      *v6 = -1;
      if (v5 >= 0x10)
      {
        if (v7 <= 2)
          v8 = 2;
        else
          v8 = v5 >> 3;
        result = memset(a1 + 29, 255, (v8 - 1));
      }
      LOBYTE(v5) = v5 & 7;
      v6 += v7;
    }
    *v6 |= 0xFFu >> (v5 ^ 7);
  }
  return result;
}

uint64_t _readEntityIntoShellFromData(void *a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, uint64_t a10, _QWORD *a11, uint64_t a12, unint64_t **a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t **a17, uint64_t *a18)
{
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t result;
  unint64_t v37;
  unint64_t **v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v46;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  void *v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  _QWORD *PropertyProxyFromBytes;
  unsigned int v100;
  void *v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  id v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t **v159;
  unint64_t **v160;
  void **v161;
  unint64_t v162;
  unint64_t v163;
  void *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  void *v174;
  void *v175;
  unint64_t **v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  void *PFEncodedArrayFromData;
  const void **v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  size_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  void *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  void *v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  id v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t **v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258[3];

  v18 = a18;
  v258[1] = *MEMORY[0x1E0C80C00];
  v19 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 + 4;
  if (v19 + 4 > a4 || (v21 = a2, *(_DWORD *)(a2 + v19) != -335614502))
  {
    if (!a18)
      return 0;
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB28A8];
    v33 = (void *)MEMORY[0x1E0C99D80];
    v34 = CFSTR("Can't read entity into shell: Missing entity frontside delimiter");
    goto LABEL_7;
  }
  v22 = a8;
  v23 = a7;
  v25 = a5;
  v26 = a3;
  v27 = a1;
  v28 = (v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = v28 + 4;
  if (v28 + 4 <= a4)
  {
    v30 = bswap32(*(_DWORD *)(a2 + v28));
    v258[0] = v29;
    v20 = v29;
  }
  else
  {
    v30 = 0;
  }
  v37 = v20 + v30;
  if (v37 > a4)
  {
    if (!a18)
      return 0;
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB28A8];
    v33 = (void *)MEMORY[0x1E0C99D80];
    v34 = CFSTR("Can't read entity: Not enough bytes left");
    goto LABEL_7;
  }
  v38 = a13;
  v39 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v40 = v39 + 4;
  if (v39 + 4 <= v37)
  {
    v41 = *(_DWORD *)(a2 + v39);
    if (v41)
    {
      v42 = a13[bswap32(v41)];
      v256 = (uint64_t)a18;
      v46 = v37;
      v50 = v42;
      v38 = a13;
      v25 = a5;
      v22 = a8;
      v23 = a7;
      v37 = v46;
      v26 = a3;
      v21 = a2;
      v18 = a18;
      v27 = a1;
      *(_QWORD *)(v25 + 24) = v50;
    }
    v20 = v40;
  }
  v51 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v52 = v51 + 4;
  if (v51 + 4 > v37 || (v53 = *(_DWORD *)(v21 + v51)) == 0)
  {
    if (!v18)
      return 0;
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB28A8];
    v33 = (void *)MEMORY[0x1E0C99D80];
    v34 = CFSTR("Can't read entity: Missing version hash value");
    goto LABEL_7;
  }
  v253 = v38;
  v254 = v27;
  v256 = a12;
  v252 = a14;
  *(_QWORD *)(v25 + 32) = *(id *)(a14 + 8 * bswap32(v53));
  v54 = (v51 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v55 = v54 + 4;
  if (v54 + 4 <= v37)
  {
    v56 = *(_DWORD *)(v21 + v54);
    if (v56)
      *(_QWORD *)(v25 + 48) = *(id *)(v256 + 8 * bswap32(v56));
    v52 = v55;
  }
  v255 = a6;
  v57 = (v52 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v58 = v57 + 4;
  if (v57 + 4 > v37 || (v59 = *(_DWORD *)(v21 + v57), v258[0] = v57 + 4, !v59))
  {
    if (!v18)
      return 0;
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB28A8];
    v33 = (void *)MEMORY[0x1E0C99D80];
    v34 = CFSTR("Can't read entity: Missing entity name");
    goto LABEL_7;
  }
  v251 = a15;
  *(_QWORD *)(v25 + 64) = *(id *)(v256 + 8 * bswap32(v59));
  v60 = v57 + 5;
  if (v57 + 5 <= v37)
  {
    v62 = *(unsigned __int8 *)(v21 + v58);
    v258[0] = v57 + 5;
    v61 = v255;
    if (v62)
    {
      v63 = (v52 + 11) & 0xFFFFFFFFFFFFFFFCLL;
      v64 = v63 + 4;
      v65 = v251;
      if (v63 + 4 <= v37)
      {
        v66 = bswap32(*(_DWORD *)(v21 + v63));
        v258[0] = v64;
        v60 = v64;
      }
      else
      {
        v66 = 0;
      }
      *(_QWORD *)(v25 + 80) = *(_QWORD *)(v251 + 8 * v66);
      v58 = v60;
      goto LABEL_37;
    }
    v58 = v60;
  }
  else
  {
    v61 = v255;
  }
  v65 = v251;
LABEL_37:
  v67 = (v58 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v68 = v67 + 4;
  if (v67 + 4 <= v37)
  {
    v69 = bswap32(*(_DWORD *)(v21 + v67));
    v258[0] = v68;
    v58 = v68;
  }
  else
  {
    v69 = 0;
  }
  *(_QWORD *)(v25 + 72) = *(_QWORD *)(v65 + 8 * v69);
  v70 = v58 + 1;
  if (v58 + 1 <= v37)
  {
    v71 = *(unsigned __int8 *)(v21 + v58);
    v258[0] = v58 + 1;
    if (v71)
    {
      if ((v58 & 0xFFFFFFFFFFFFFFFCLL) + 8 <= v37)
      {
        v72 = bswap32(*(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFFCLL) + v21 + 4));
        v258[0] = (v58 & 0xFFFFFFFFFFFFFFFCLL) + 8;
        v70 = v258[0];
      }
      else
      {
        v72 = 0;
      }
      v73 = *(void **)(v61 + 8 * v72);
      *(_QWORD *)(v25 + 88) = v73;
      if (objc_msgSend(v73, "count"))
      {
        if (!v18)
          return 0;
        v31 = (void *)MEMORY[0x1E0CB35C8];
        v32 = *MEMORY[0x1E0CB28A8];
        v33 = (void *)MEMORY[0x1E0C99D80];
        v34 = CFSTR("Cant' read entity: Miswired subentities dictionary");
        goto LABEL_7;
      }
      v74 = (v70 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (v74 + 4 <= v37)
      {
        v75 = bswap32(*(_DWORD *)(v21 + v74));
        v258[0] = v74 + 4;
        v70 = v74 + 4;
      }
      else
      {
        v75 = 0;
      }
      if (objc_msgSend((id)objc_msgSend(*(id *)(v25 + 88), "mapping"), "length") != v75)
      {
        if (!v18)
          return 0;
        v31 = (void *)MEMORY[0x1E0CB35C8];
        v32 = *MEMORY[0x1E0CB28A8];
        v33 = (void *)MEMORY[0x1E0C99D80];
        v34 = CFSTR("Cant' read entity: Mismatched subentity count");
        goto LABEL_7;
      }
      v76 = v75;
      v77 = (v70 + 7) & 0xFFFFFFFFFFFFFFF8;
      v78 = v21 + v77;
      if (v75)
      {
        v79 = (_QWORD *)(v21 + v77);
        v80 = v251;
        do
        {
          v81 = (v70 + 7) & 0xFFFFFFFFFFFFFFF8;
          v82 = v81 + 8;
          if (v81 + 8 <= v37)
          {
            v83 = bswap64(*(_QWORD *)(v21 + v81));
            v258[0] = v82;
            v70 = v82;
          }
          else
          {
            v83 = 0;
          }
          *v79++ = *(_QWORD *)(v80 + 8 * v83);
          --v76;
        }
        while (v76);
      }
      objc_msgSend(*(id *)(v25 + 88), "_setValues:retain:", v78, 1);
    }
    v58 = v70;
  }
  v84 = (v58 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v85 = v84 + 4;
  if (v84 + 4 <= v37)
  {
    v86 = bswap32(*(_DWORD *)(v21 + v84));
    v258[0] = v85;
    v58 = v85;
  }
  else
  {
    v86 = 0;
  }
  v87 = *(void **)(v61 + 8 * v86);
  *(_QWORD *)(v25 + 96) = v87;
  if (objc_msgSend(v87, "count"))
  {
    if (!v18)
      return 0;
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB28A8];
    v33 = (void *)MEMORY[0x1E0C99D80];
    v34 = CFSTR("Cant' read entity: Properties dictionary has content");
    goto LABEL_7;
  }
  v88 = (void *)objc_msgSend(*(id *)(v25 + 96), "mapping");
  *(_QWORD *)(v25 + 104) = v88;
  v89 = objc_msgSend(v88, "length");
  v250 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v89)
  {
    v90 = v89;
    v91 = v89;
    do
    {
      v92 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
      v93 = v92 + 8;
      if (v92 + 8 <= v37)
      {
        v94 = *(_QWORD *)(v21 + v92);
        v258[0] = v93;
        v58 = v93;
        if (v94)
        {
          if (!v18)
            return 0;
          v31 = (void *)MEMORY[0x1E0CB35C8];
          v32 = *MEMORY[0x1E0CB28A8];
          v33 = (void *)MEMORY[0x1E0C99D80];
          v34 = CFSTR("Cant' read entity: Properties buffer has content");
          goto LABEL_7;
        }
      }
      --v91;
    }
    while (v91);
    v95 = v250;
    do
    {
      v96 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v97 = v96 + 4;
      if (v96 + 4 <= v37)
      {
        v98 = *(_DWORD *)(v21 + v96);
        v258[0] = v96 + 4;
        if (v98)
        {
          PropertyProxyFromBytes = _newReadPropertyProxyFromBytes(v254, v21, v258, v37, v25, v23);
          *(_QWORD *)(v21 + v95) = PropertyProxyFromBytes;
          if (objc_msgSend(PropertyProxyFromBytes, "entity") != v25)
          {
            if (!v18)
              return 0;
            v31 = (void *)MEMORY[0x1E0CB35C8];
            v32 = *MEMORY[0x1E0CB28A8];
            v33 = (void *)MEMORY[0x1E0C99D80];
            v34 = CFSTR("Cant' read entity: Property entity does not match entity being decoded (2)");
            goto LABEL_7;
          }
          goto LABEL_81;
        }
        v96 = (v96 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        v97 = v96 + 4;
      }
      if (v97 <= v37)
      {
        v100 = bswap32(*(_DWORD *)(v21 + v96));
        v258[0] = v97;
      }
      else
      {
        v100 = 0;
      }
      v101 = *(void **)(v23 + 8 * v100);
      *(_QWORD *)(v21 + v95) = v101;
      if (objc_msgSend(v101, "entity") != v25)
      {
        if (!v18)
          return 0;
        v31 = (void *)MEMORY[0x1E0CB35C8];
        v32 = *MEMORY[0x1E0CB28A8];
        v33 = (void *)MEMORY[0x1E0C99D80];
        v34 = CFSTR("Cant' read entity: Property entity does not match entity being decoded (1)");
        goto LABEL_7;
      }
LABEL_81:
      v95 += 8;
      --v90;
    }
    while (v90);
  }
  objc_msgSend(*(id *)(v25 + 96), "_setValues:retain:", v21 + v250, 0);
  if (a17 == (unint64_t **)1)
  {
    v102 = (unint64_t *)malloc_type_malloc(0x120uLL, 0x1000040451B5BE8uLL);
    v103 = 0;
    v104 = v258[0];
    v105 = v102 + 1;
    do
    {
      switch((int)v103)
      {
        case 8:
          v102[16] = 0;
          v102[17] = 0;
          break;
        case 9:
          *((_OWORD *)v102 + 9) = *((_OWORD *)v102 + 7);
          break;
        case 12:
          v102[24] = 0;
          v102[25] = 0;
          break;
        case 13:
          *((_OWORD *)v102 + 13) = *((_OWORD *)v102 + 11);
          break;
        default:
          v106 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
          v107 = v106 + 8;
          if (v106 + 8 <= v37)
          {
            v108 = bswap64(*(_QWORD *)(v21 + v106));
            v258[0] = v106 + 8;
            v106 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
            v109 = v106 + 8;
            v104 = v107;
          }
          else
          {
            v108 = 0;
            v109 = v106 + 8;
          }
          *(v105 - 1) = v108;
          if (v109 <= v37)
          {
            v110 = bswap64(*(_QWORD *)(v21 + v106));
            v258[0] = v109;
            v104 = v109;
          }
          else
          {
            v110 = 0;
          }
          *v105 = v110;
          break;
      }
      ++v103;
      v105 += 2;
    }
    while (v103 != 17);
  }
  else
  {
    v111 = 0;
    v104 = v258[0];
    v102 = (unint64_t *)(v21 + ((v258[0] + 7) & 0xFFFFFFFFFFFFFFF8));
    do
    {
      v112 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
      v113 = v112 + 8;
      if (v112 + 8 <= v37)
      {
        v114 = bswap64(*(_QWORD *)(v21 + v112));
        v258[0] = v112 + 8;
        v112 = (v112 + 15) & 0xFFFFFFFFFFFFFFF8;
        v115 = v112 + 8;
        v104 = v113;
      }
      else
      {
        v114 = 0;
        v115 = v112 + 8;
      }
      v102[v111] = v114;
      if (v115 <= v37)
      {
        v116 = bswap64(*(_QWORD *)(v21 + v112));
        v258[0] = v115;
        v104 = v115;
      }
      else
      {
        v116 = 0;
      }
      v102[v111 + 1] = v116;
      v111 += 2;
    }
    while (v111 != 36);
  }
  v117 = a11;
  v118 = a9;
  *(_QWORD *)(v25 + 112) = v102;
  v119 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v120 = v119 + 4;
  if (v119 + 4 <= v37)
  {
    v121 = bswap32(*(_DWORD *)(v21 + v119));
    v258[0] = v120;
    v104 = v120;
  }
  else
  {
    v121 = 0;
  }
  v244 = a10;
  if (a17 != (unint64_t **)1)
    v121 |= 0x80u;
  *(_DWORD *)(v25 + 120) = v121;
  v122 = 8;
  do
  {
    if (((v104 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v37)
    {
      v258[0] = ((v104 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      v104 = v258[0];
    }
    --v122;
  }
  while (v122);
  v123 = v104 + v21 - 64;
  *(_QWORD *)(v25 + 128) = v123;
  v124 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
  v125 = v124 + 8;
  if (v124 + 8 <= v37)
  {
    v126 = (unint64_t)*(unsigned int *)(v21 + v124 + 4) << 32;
    v258[0] = v125;
    v104 = v125;
    if (v126)
    {
      v127 = v253[bswap64(v126)];
      v253 = a17;
      v102 = v127;
      v118 = a9;
      v117 = a11;
      v123 = *(_QWORD *)(v25 + 128);
      *(_QWORD *)v123 = v102;
      v104 = v258[0];
    }
  }
  if ((unint64_t)a17 >= 0xB)
  {
    v128 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
    v129 = v128 + 8;
    if (v128 + 8 <= v37)
    {
      v130 = (unint64_t)*(unsigned int *)(v21 + v128 + 4) << 32;
      v258[0] = v129;
      v104 = v129;
      if (v130)
      {
        v239 = v118;
        v240 = v117;
        v253 = *(unint64_t ***)(v252 + 8 * bswap64(v130));
        v257 = 0;
        v250 = (unint64_t)_PFRoutines;
        v131 = (void *)MEMORY[0x1E0C99E60];
        v132 = objc_opt_class();
        v133 = objc_msgSend(v131, "setWithObjects:", v132, objc_opt_class(), 0);
        v134 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v133, (uint64_t)v253, (uint64_t)&v257);
        if (!v134)
        {
          v237 = objc_msgSend((id)v25, "name");
          _NSCoreDataLog(1, (uint64_t)CFSTR("Can't decode coreSpotlightDisplayNameExpression for entity %"), v224, v225, v226, v227, v228, v229, v237);
          goto LABEL_211;
        }
        v135 = (void *)v134;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v238 = objc_opt_class();
          _NSCoreDataLog(1, (uint64_t)CFSTR("Can't decode coreSpotlightDisplayNameExpression - wrong class decoded - %@"), v230, v231, v232, v233, v234, v235, v238);
          goto LABEL_211;
        }
        v102 = v135;
        v123 = *(_QWORD *)(v25 + 128);
        *(_QWORD *)(v123 + 32) = v102;
        v104 = v258[0];
        v61 = v255;
        v118 = v239;
        v117 = v240;
      }
    }
  }
  v136 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
  v137 = v136 + 8;
  if (v136 + 8 > v37)
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
    goto LABEL_179;
  }
  v141 = (unint64_t)*(unsigned int *)(v21 + v136 + 4) << 32;
  v258[0] = v136 + 8;
  if (!v141)
  {
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v104 = v137;
LABEL_179:
    *(_QWORD *)(v123 + 40) = v140;
    *(_DWORD *)(v123 + 48) = 0;
    *v118 = v138;
    *v117 = v139;
    v177 = (v104 + 7) & 0xFFFFFFFFFFFFFFF8;
    v178 = v177 + 8;
    if (v177 + 8 <= v37)
    {
      v179 = (unint64_t)*(unsigned int *)(v21 + v177 + 4) << 32;
      v258[0] = v178;
      v104 = v178;
      if (v179)
      {
        v253 = &v239;
        v180 = bswap64(v179);
        MEMORY[0x1E0C80A78](v102);
        v182 = (void **)((char *)&v239 - ((v181 + 15) & 0xFFFFFFFF0));
        v183 = 0;
        v184 = v256;
        v185 = (uint64_t)v254;
        do
          v182[v183++] = (void *)_newReadPFEncodedArrayFromData(v185, v21, v258, v37, v184, 0);
        while (v180 != v183);
        v186 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v182, v180);
        do
        {
          v187 = *v182++;

          --v180;
        }
        while (v180);
        *(_QWORD *)(*(_QWORD *)(v25 + 128) + 24) = v186;
        v104 = v258[0];
        v61 = v255;
      }
    }
    v188 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v189 = v188 + 4;
    if (v188 + 4 > v37)
      goto LABEL_190;
    v190 = *(_DWORD *)(v21 + v188);
    v258[0] = v189;
    v104 = v189;
    if (!v190)
      goto LABEL_190;
    v191 = *(_QWORD *)(v252 + 8 * bswap32(v190));
    v257 = 0;
    v192 = +[_PFRoutines plistClassesForSecureCoding]();
    v193 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v192, v191, (uint64_t)&v257);
    if (v193)
    {
      *(_QWORD *)(v25 + 136) = v193;
      v104 = v258[0];
LABEL_190:
      v194 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v195 = v194 + 4;
      if (v194 + 4 <= v37)
      {
        v196 = *(_DWORD *)(v21 + v194);
        v258[0] = v195;
        v104 = v195;
        if (v196)
        {
          PFEncodedArrayFromData = (void *)_newReadPFEncodedArrayFromData((uint64_t)v254, v21, v258, v37, v251, 0);
          v198 = (const void **)objc_msgSend(PFEncodedArrayFromData, "_values");
          *(_QWORD *)(v25 + 144) = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v198, objc_msgSend(PFEncodedArrayFromData, "count"), 0);

          v104 = v258[0];
        }
      }
      v199 = (v104 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v200 = v199 + 4;
      if (v199 + 4 <= v37)
      {
        v201 = bswap32(*(_DWORD *)(v21 + v199));
        v258[0] = v200;
      }
      else
      {
        v201 = 0;
      }
      *(_QWORD *)(v25 + 160) = v201;
      v202 = *(void **)(v25 + 104);
      v203 = objc_msgSend(v202, "keys", v239, v240);
      v204 = objc_msgSend(v202, "length");
      *(_QWORD *)(v25 + 152) = PF_CALLOC_SCANNED_BYTES(0x50uLL);
      *(_QWORD *)(*(_QWORD *)(v25 + 152) + 48) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:count:", v203, v204);
      v205 = objc_msgSend(*(id *)(v25 + 96), "values");
      v206 = v205;
      v207 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v208 = v207 + 4;
      if (v207 + 4 <= v37)
      {
        v209 = bswap32(*(_DWORD *)(v21 + v207));
        v258[0] = v208;
      }
      else
      {
        v209 = 0;
      }
      v210 = *(void **)(v61 + 8 * v209);
      objc_msgSend(v210, "setValues:", v205 + 8 * *(_QWORD *)(*(_QWORD *)(v25 + 112) + 16));
      *(_QWORD *)(*(_QWORD *)(v25 + 152) + 56) = v210;
      v211 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v212 = v211 + 4;
      if (v211 + 4 <= v37)
      {
        v213 = bswap32(*(_DWORD *)(v21 + v211));
        v258[0] = v212;
      }
      else
      {
        v213 = 0;
      }
      v214 = *(void **)(v61 + 8 * v213);
      objc_msgSend(v214, "setValues:", v206 + 8 * *(_QWORD *)(*(_QWORD *)(v25 + 112) + 32));
      *(_QWORD *)(*(_QWORD *)(v25 + 152) + 64) = v214;
      *(_QWORD *)(*(_QWORD *)(v25 + 152) + 72) = PF_CALLOC_UNSCANNED_BYTES(v204);
      v215 = (v258[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v216 = v215 + 4;
      if (v215 + 4 <= v37)
      {
        v217 = *(_DWORD *)(v21 + v215);
        v258[0] = v216;
        if (v217 == -335614502)
        {
          -[NSEntityDescription _commonCachesAndOptimizedState]((id)v25);
          *v26 = v258[0];
          return 1;
        }
      }
      v31 = (void *)MEMORY[0x1E0CB35C8];
      v32 = *MEMORY[0x1E0CB28A8];
      v33 = (void *)MEMORY[0x1E0C99D80];
      v34 = CFSTR("Can't read entity into shell: Missing entity back-end delimiter");
LABEL_7:
      v35 = objc_msgSend(v31, "errorWithDomain:code:userInfo:", v32, 134060, objc_msgSend(v33, "dictionaryWithObject:forKey:", v34, CFSTR("Root cause"), v239, v240));
      result = 0;
      *v18 = v35;
      return result;
    }
    v236 = objc_msgSend((id)v25, "name");
    _NSCoreDataLog(1, (uint64_t)CFSTR("Unable to decode userInfo for entity '%@' : %@"), v218, v219, v220, v221, v222, v223, v236);
LABEL_211:
    if (v18)
      *v18 = v257;
    return 0;
  }
  v142 = bswap64(v141);
  if (*v118 < v142)
  {
    if (!v18)
      return 0;
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB28A8];
    v33 = (void *)MEMORY[0x1E0C99D80];
    v34 = CFSTR("Cant' read entity: Mismatched number of fetch indexes");
    goto LABEL_7;
  }
  v239 = v118;
  v240 = v117;
  v241 = *v117;
  v245 = v142;
  v246 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v142);
  v250 = 0;
  v243 = 0;
  while (1)
  {
    v143 = (v258[0] + 7) & 0xFFFFFFFFFFFFFFF8;
    v144 = v143 + 8;
    if (v143 + 8 <= v37)
    {
      v145 = *(_QWORD *)(v21 + v143);
      v258[0] = v143 + 8;
      v248 = v145 ? *(_QWORD *)(v256 + 8 * bswap64(v145)) : 0;
    }
    else
    {
      v248 = 0;
      v144 = v258[0];
    }
    v146 = *(void **)(v22 + 8 * v250);
    v147 = (v144 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v147 + 8 <= v37)
    {
      v148 = *(_QWORD *)(v21 + v147);
      v258[0] = v147 + 8;
      if (v148)
      {
        v149 = (v147 + 15) & 0xFFFFFFFFFFFFFFF8;
        v150 = v149 + 8;
        if (v149 + 8 <= v37)
        {
          v151 = bswap64(*(_QWORD *)(v21 + v149));
          v258[0] = v150;
        }
        else
        {
          v151 = 0;
        }
        v253 = *(unint64_t ***)(v252 + 8 * v151);
        v152 = (void *)MEMORY[0x1E0C99E60];
        v153 = objc_opt_class();
        v154 = objc_msgSend(v152, "setWithObjects:", v153, objc_opt_class(), 0);
        v247 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v154, (uint64_t)v253, 0);
        v144 = v258[0];
      }
      else
      {
        v247 = 0;
        v144 = v147 + 8;
      }
    }
    else
    {
      v247 = 0;
    }
    v155 = (v144 + 7) & 0xFFFFFFFFFFFFFFF8;
    v156 = v155 + 8;
    v249 = v146;
    if (v155 + 8 <= v37)
    {
      v157 = *(_QWORD *)(v21 + v155);
      v258[0] = v156;
      if (v157)
        break;
    }
    v160 = (unint64_t **)objc_alloc_init(MEMORY[0x1E0C99DE8]);
LABEL_177:
    v176 = v160;
    objc_msgSend(v249, "initWithName:predicate:elements:entity:", v248, v247, v160, v25, v239, v240);

    objc_msgSend(v246, "addObject:", v249);
    if (++v250 == v245)
    {
      v123 = *(_QWORD *)(v25 + 128);
      v104 = v258[0];
      v118 = v239;
      v117 = v240;
      v138 = v245;
      v140 = v246;
      v139 = v243;
      v61 = v255;
      goto LABEL_179;
    }
  }
  v158 = bswap64(v157);
  if (v241 >= v158)
  {
    v159 = (unint64_t **)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v158);
    v160 = v159;
    if (v158 >= 1)
    {
      v253 = v159;
      v242 = v158 + v243;
      v161 = (void **)(v244 + 8 * v243);
      do
      {
        v162 = (v258[0] + 7) & 0xFFFFFFFFFFFFFFF8;
        v163 = v162 + 8;
        if (v162 + 8 <= v37)
        {
          v165 = *(_QWORD *)(v21 + v162);
          v258[0] = v162 + 8;
          if (v165)
            v164 = *(void **)(v256 + 8 * bswap64(v165));
          else
            v164 = 0;
        }
        else
        {
          v164 = 0;
          v163 = v258[0];
        }
        v166 = (v163 + 7) & 0xFFFFFFFFFFFFFFF8;
        v167 = v166 + 8;
        if (v166 + 8 <= v37)
        {
          v168 = bswap64(*(_QWORD *)(v21 + v166));
          v258[0] = v166 + 8;
          v166 = (v166 + 15) & 0xFFFFFFFFFFFFFFF8;
          v167 = v166 + 8;
        }
        else
        {
          v168 = 0;
        }
        if (v167 <= v37)
        {
          v169 = bswap64(*(_QWORD *)(v21 + v166));
          v258[0] = v167;
          v166 = (v167 + 7) & 0xFFFFFFFFFFFFFFF8;
          v167 = v166 + 8;
        }
        else
        {
          v169 = 0;
        }
        if (v167 <= v37 && (v170 = *(_QWORD *)(v21 + v166), v258[0] = v167, v170))
        {
          v171 = (v167 + 7) & 0xFFFFFFFFFFFFFFF8;
          v172 = v171 + 8;
          if (v171 + 8 <= v37)
          {
            v173 = bswap64(*(_QWORD *)(v21 + v171));
            v258[0] = v172;
          }
          else
          {
            v173 = 0;
          }
          v174 = *(void **)(v23 + 8 * v173);
        }
        else
        {
          v174 = 0;
        }
        v175 = *v161++;
        -[NSFetchIndexElementDescription initWithPropertyName:property:collationType:ascending:](v175, v164, v174, v168, v169 != 0);
        objc_msgSend(v253, "addObject:", v175);

        --v158;
      }
      while (v158);
      v243 = v242;
      v160 = v253;
    }
    goto LABEL_177;
  }
  if (v18)
    *v18 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134060, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Cant' read entity: Mismatched number of fetch index elements"), CFSTR("Root cause")));

  return 0;
}

_QWORD *_newReadPropertyProxyFromBytes(void *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;

  v12 = (objc_class *)_newReadPropertyProxyFromBytes_myProxyClass;
  if (!_newReadPropertyProxyFromBytes_myProxyClass)
  {
    v12 = (objc_class *)objc_opt_class();
    _newReadPropertyProxyFromBytes_myProxyClass = (uint64_t)v12;
  }
  v13 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 36;
  if (v13 + 36 > a4)
    return 0;
  v15 = (_QWORD *)(a2 + v13);
  v16 = *(_QWORD *)(a6 + 8 * bswap32(*(_DWORD *)(a2 + v13)));
  v17 = *(_DWORD *)(a2 + (v13 | 4));
  *v15 = 0;
  object_setClass(v15, v12);
  v15[1] = a1;
  v15[2] = v16;
  v15[3] = a5;
  *((_DWORD *)v15 + 8) = bswap32(v17);
  *a3 = v14;
  return v15;
}

uint64_t _prepareDictionaryResults(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  void *v9;
  void *v11;
  _QWORD **v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _BOOL4 v39;
  int v40;
  id *v41;
  unsigned int v42;
  uint64_t v43;
  id *v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  CFStringRef v53;
  const char *v54;
  int v55;
  const __CFString *v56;
  _QWORD *v57;
  CFAbsoluteTime *v58;
  int v59;
  BOOL v60;
  CFAbsoluteTime *v61;
  CFAbsoluteTime *v62;
  CFNumberRef v63;
  CFNumberRef v64;
  void *v65;
  _PFExternalReferenceData *v66;
  CFDataRef v67;
  int *v68;
  CFAbsoluteTime *v69;
  CFAbsoluteTime *p_valuePtr;
  int v71;
  BOOL v72;
  CFNumberRef v73;
  CFAbsoluteTime *v74;
  const __CFString *v75;
  uint64_t v76;
  const UInt8 *v77;
  int v78;
  const __CFData *v79;
  int *v80;
  int v81;
  int *v82;
  _PFExternalReferenceData *v83;
  uint64_t v84;
  uint64_t v85;
  objc_class *v86;
  const __CFData *v87;
  CFStringRef v88;
  int v89;
  const char *BytePtr;
  void *v91;
  uint64_t v92;
  _NSDataFileBackedFuture *v93;
  size_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _PFExternalReferenceData *v99;
  uint64_t v100;
  void **v101;
  void **v102;
  _PFExternalReferenceData *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  objc_class *v113;
  uint64_t v114;
  uint64_t v115;
  const __CFString *v116;
  id v117;
  _BOOL4 v118;
  uint64_t v119;
  NSKnownKeysDictionary *v120;
  NSKnownKeysDictionary *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD **v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  _PFArray *v135;
  void *v136;
  _BOOL4 v137;
  void *v138;
  void *v139;
  id v140;
  void *v141;
  uint64_t v142;
  id v143;
  _QWORD **v144;
  objc_class *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  void **v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t (*v157)(uint64_t, char *, _QWORD);
  void **v158;
  id v159;
  uint64_t v160;
  const __CFString *v161;
  void *v162;
  unint64_t v163;
  _QWORD *v164;
  id *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t plan_for_entity;
  int v169;
  uint64_t v170;
  CFAbsoluteTime valuePtr;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  char v176[8];
  uint64_t v177;

  v2 = a1;
  v177 = *MEMORY[0x1E0C80C00];
  v158 = (void **)a2;
  if (a2)
    v3 = *(_QWORD *)(a2 + 136);
  else
    v3 = 0;
  v4 = *(unsigned int *)(a1 + 4);
  if (v4 >= 0x40000001)
    return NSArray_EmptyArray;
  v149 = PF_ALLOCATE_OBJECT_ARRAY(*(unsigned int *)(a1 + 4));
  if (!v149)
    return NSArray_EmptyArray;
  v5 = **(_QWORD **)(v2 + 64);
  v6 = *(_QWORD **)(v3 + 40);
  if (v158)
  {
    v136 = v158[14];
    if (v6)
    {
LABEL_7:
      v142 = v6[30];
      goto LABEL_8;
    }
  }
  else
  {
    v136 = 0;
    if (v6)
      goto LABEL_7;
  }
  v142 = 0;
LABEL_8:
  v157 = *(uint64_t (**)(uint64_t, char *, _QWORD))(v3 + 64);
  plan_for_entity = _sql_read_only_fetch_plan_for_entity(v6);
  if (!v158)
  {
    v11 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v140 = v11;
    v137 = 0;
    v141 = 0;
    v12 = 0;
    v9 = 0;
LABEL_235:
    v152 = 0;
    goto LABEL_15;
  }
  v141 = v158[16];
  v7 = (unsigned __int8 *)v158[4];
  v8 = v158[17];
  if (v8)
    v9 = (void *)v8[1];
  else
    v9 = 0;
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", v136);
  v140 = v11;
  v137 = *((_BYTE *)v158 + 201) != 0;
  v12 = (_QWORD **)v7;
  if (!v7)
    goto LABEL_235;
  v152 = (v7[43] >> 3) & 1;
LABEL_15:
  v133 = (*(_DWORD *)(v3 + 72) & 0x1C) == 20;
  v144 = v12;
  if (v133)
  {
    v148 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v159 = (id)objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v162 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v13 = *(unsigned int *)(plan_for_entity + 4);
    if ((_DWORD)v13)
    {
      v14 = (id *)(plan_for_entity + 24);
      do
      {
        v15 = objc_msgSend(*v14, "propertyDescription", v136);
        if (v15)
        {
          v16 = (void *)v15;
          objc_msgSend(v148, "addObject:", v15);
          if ((objc_msgSend(v16, "_entitysReferenceID") & 0x8000000000000000) == 0)
            objc_msgSend(v159, "addObject:", objc_msgSend(v16, "name"));
        }
        v14 += 3;
        --v13;
      }
      while (v13);
    }
    v174 = 0u;
    v175 = 0u;
    v173 = 0u;
    v172 = 0u;
    v17 = (void *)objc_msgSend(v9, "propertiesToFetch", v136);
    v11 = (void *)objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v172, v176, 16);
    if (v11)
    {
      v18 = v11;
      v19 = *(_QWORD *)v173;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v173 != v19)
            objc_enumerationMutation(v17);
          v21 = *(void **)(*((_QWORD *)&v172 + 1) + 8 * (_QWORD)v20);
          if (objc_msgSend(v21, "isTransient"))
          {
            objc_msgSend(v162, "addObject:", v21);
            if ((objc_msgSend(v21, "_entitysReferenceID") & 0x8000000000000000) == 0)
              objc_msgSend(v159, "addObject:", objc_msgSend(v21, "name"));
          }
          v20 = (char *)v20 + 1;
        }
        while (v18 != v20);
        v11 = (void *)objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v172, v176, 16);
        v18 = v11;
      }
      while (v11);
    }
  }
  else
  {
    v162 = 0;
    v148 = 0;
    v159 = 0;
  }
  if ((int)v4 >= 1)
  {
    v22 = 0;
    v155 = 0;
    v145 = 0;
    v143 = 0;
    v138 = 0;
    v139 = 0;
    v156 = sel_entityForID_;
    v161 = CFSTR("TOMBSTONE");
    v147 = v4;
    v150 = v2;
    v146 = v3;
    v164 = v6;
    while (1)
    {
      while ((*(_DWORD *)v5 & 0x80000000) != 0)
      {
        v23 = *(unsigned int *)(v5 + 4);
        if ((v23 & 0x80000000) != 0)
          v5 = 0;
        else
          v5 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v23) + *(_QWORD *)(v5 + 16);
      }
      v153 = &v136;
      v24 = *(unsigned int *)(plan_for_entity + 4);
      MEMORY[0x1E0C80A78](v11);
      v27 = (char *)&v136 - v26;
      v166 = v24;
      if (v24 >= 0x201)
        break;
      bzero((char *)&v136 - v26, 8 * v25);
      v167 = v27;
      if ((_DWORD)v24)
      {
        v151 = v22;
        v154 = v5;
LABEL_43:
        v28 = 0;
        v29 = 0;
        v165 = 0;
        v160 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = v154 + 32;
        while (1)
        {
          v34 = v31;
          v35 = plan_for_entity + v28;
          v36 = *(unsigned __int8 *)(plan_for_entity + v28 + 20);
          if ((v36 - 2) > 6)
            v37 = 3;
          else
            v37 = qword_18A50AAE0[(char)(v36 - 2)];
          v38 = (unsigned __int8 *)((v37 + v33) & ~v37);
          if ((*(_BYTE *)(v35 + 16) & 1) != 0)
          {
            v40 = *v38;
            v170 = (uint64_t)(v38 + 1);
            v39 = v40 != 0;
          }
          else
          {
            v170 = (v37 + v33) & ~v37;
            v39 = 0;
          }
          v41 = 0;
          v169 = v30;
          if (((v29 > 6) & v30) == 1 && !v39)
          {
            v163 = v29;
            v42 = v32;
            v43 = v31;
            v44 = v165;
            if (!v165)
            {
              if (v158)
                v45 = v158[1];
              else
                v45 = 0;
              v46 = objc_msgSend(v45, "model", v136);
              v44 = (id *)v157(v46, v156, (int)v160);
            }
            v41 = v44;
            v47 = +[_PFPersistentHistoryModel _retainedTombstonesForEntity:]((uint64_t)_PFPersistentHistoryModel, v44);
            v48 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(plan_for_entity + v28 + 24), "propertyDescription"), "name");
            v49 = objc_msgSend((id)objc_msgSend(v48, "stringByReplacingOccurrencesOfString:withString:", v161, &stru_1E1EE23F0), "intValue");
            v50 = objc_msgSend(v47, "count");
            v165 = v41;
            if (v49 >= v50)
            {
              v41 = 0;
            }
            else
            {
              v51 = objc_msgSend(v47, "objectAtIndexedSubscript:", v49);
              if (v41)
                v41 = (id *)objc_msgSend(v41[5], "objectForKey:", v51);
              v36 = 17;
            }

            v34 = v43;
            v32 = v42;
            v29 = v163;
          }
          v52 = ~v37;
          v31 = 0;
          switch(v36)
          {
            case 1:
              LODWORD(valuePtr) = 0;
              v68 = (int *)v170;
              v69 = (CFAbsoluteTime *)((v37 + v170) & v52);
              if (!v39)
                v68 = (int *)v69 + 1;
              v170 = (uint64_t)v68;
              if (v39)
                p_valuePtr = &valuePtr;
              else
                p_valuePtr = v69;
              v71 = *(unsigned __int8 *)(plan_for_entity + v28 + 21);
              switch(v71)
              {
                case 10:
                  goto LABEL_144;
                case 4:
                  if (v39)
                    v73 = 0;
                  else
                    v73 = (CFNumberRef)v157((uint64_t)v136, v156, *(int *)v69);
                  v34 = 1;
                  break;
                case 1:
                  if (byte_1ECD8DE1E)
                    v72 = v39;
                  else
                    v72 = 0;
                  if (v72)
                  {
                    v73 = 0;
                  }
                  else
                  {
                    if (byte_1ECD8DE1E)
                      p_valuePtr = v69;
LABEL_144:
                    v73 = CFNumberCreate(0, kCFNumberIntType, p_valuePtr);
                  }
                  v34 = 0;
                  break;
                default:
                  goto LABEL_157;
              }
              v167[v32] = v73;
              goto LABEL_157;
            case 2:
            case 3:
              valuePtr = 0.0;
              v57 = (_QWORD *)v170;
              v58 = (CFAbsoluteTime *)((v37 + v170) & v52);
              if (!v39)
                v57 = v58 + 1;
              v170 = (uint64_t)v57;
              v59 = *(unsigned __int8 *)(plan_for_entity + v28 + 21);
              if (v59 != 3)
              {
                if (v59 != 1)
                  goto LABEL_157;
                if (byte_1ECD8DE1E)
                  v60 = v39;
                else
                  v60 = 0;
                if (v60)
                {
LABEL_131:
                  v63 = 0;
                }
                else
                {
                  v61 = &valuePtr;
                  if (!v39)
                    v61 = v58;
                  if (byte_1ECD8DE1E)
                    v62 = v58;
                  else
                    v62 = v61;
                  v63 = CFNumberCreate(0, kCFNumberLongLongType, v62);
                }
                v76 = v155;
                goto LABEL_133;
              }
              if ((v34 & 1) != 0)
              {
                v76 = v167[--v32];
                if (v39)
                  goto LABEL_131;
              }
              else
              {
                v76 = objc_msgSend((id)objc_msgSend(*(id *)(plan_for_entity + v28 + 24), "toOneRelationship"), "destinationEntity");
                if (v39)
                  goto LABEL_131;
              }
              if (!*(_QWORD *)v58)
                goto LABEL_131;
              v86 = v145;
              if (v76 != v155)
                v86 = 0;
              if (v158 && v76 != v155)
                v86 = (objc_class *)objc_msgSend(v158[1], "objectIDFactoryForSQLEntity:", v76);
              v145 = v86;
              v63 = (CFNumberRef)objc_msgSend([v86 alloc], "initWithPK64:", *(_QWORD *)v58);
LABEL_133:
              v34 = 0;
              v167[v32] = v63;
              v155 = v76;
LABEL_157:
              v31 = v34;
              goto LABEL_197;
            case 4:
            case 5:
            case 6:
            case 9:
            case 12:
              if (v39)
              {
                v53 = 0;
                goto LABEL_108;
              }
              v54 = (const char *)((v37 + v170) & v52);
              v53 = CFStringCreateWithCString(0, v54 + 4, 0x8000100u);
              v55 = *(unsigned __int8 *)(v35 + 20);
              v170 = (uint64_t)&v54[*(int *)v54 + 4];
              if (v55 == 12)
              {
                v56 = (const __CFString *)(id)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v53);
              }
              else
              {
                if (v55 != 4)
                  goto LABEL_108;
                v56 = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", v53);
              }
              v75 = v56;
              CFRelease(v53);
              v53 = v75;
LABEL_108:
              v31 = 0;
              v167[v32] = v53;
              goto LABEL_197;
            case 7:
            case 8:
              if (v39)
              {
                v64 = 0;
              }
              else
              {
                v74 = (CFAbsoluteTime *)((v37 + v170) & v52);
                valuePtr = 0.0;
                valuePtr = *v74;
                v133 = *(_BYTE *)(v35 + 20) == 7;
                v170 = (uint64_t)(v74 + 1);
                if (v133)
                  v64 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                else
                  v64 = CFDateCreate(0, *v74);
              }
              v31 = 0;
              v167[v32] = v64;
              goto LABEL_197;
            case 13:
            case 14:
              goto LABEL_197;
            case 16:
              v65 = (void *)objc_msgSend(*(id *)(plan_for_entity + v28 + 24), "propertyDescription");
              if (v152 && !objc_msgSend(v65, "_isFileBackedFuture"))
                goto LABEL_88;
              if (v39)
              {
                v66 = 0;
                goto LABEL_175;
              }
              v80 = (int *)((v37 + v170) & v52);
              v82 = v80 + 1;
              v81 = *((unsigned __int8 *)v80 + 4);
              if (v81 == 3)
              {
                v91 = v139;
                if (v158 && !v139)
                  v91 = v158[13];
                v92 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v82, *v80, v136);
                v93 = [_NSDataFileBackedFuture alloc];
                v139 = v91;
                v85 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v93, "initWithStoreMetadata:directory:", v92, objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v91, 1));
                goto LABEL_173;
              }
              if (v81 == 1)
              {
                v83 = [_PFExternalReferenceData alloc];
                if (v158)
                  v84 = *((unsigned int *)v158 + 46);
                else
                  v84 = 0;
                v85 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v83, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v82, *v80, 0, 0, v84, v136);
                goto LABEL_173;
              }
              v94 = strnlen((const char *)v80 + 5, *v80 - 1);
              v95 = objc_msgSend(v140, "stringWithFileSystemRepresentation:length:", (char *)v80 + 5, v94);
              v96 = v138;
              if (v143)
              {
                if (v158 && !v138)
                  goto LABEL_161;
              }
              else
              {
                if (v158)
                {
                  v143 = v158[11];
                  if (v138)
                    goto LABEL_162;
LABEL_161:
                  v96 = v158[12];
                  goto LABEL_162;
                }
                v143 = 0;
              }
LABEL_162:
              v97 = objc_msgSend(v143, "stringByAppendingPathComponent:", v95, v136);
              v98 = objc_msgSend(v96, "stringByAppendingPathComponent:", v95);
              v138 = v96;
              if (v137 && !objc_msgSend(v140, "fileExistsAtPath:", v97))
              {
                v66 = 0;
LABEL_169:
                if ((objc_msgSend(v140, "fileExistsAtPath:", v97) & 1) != 0)
                  goto LABEL_174;

                v101 = v158;
                v102 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:](v158, v95);
                v103 = [_PFExternalReferenceData alloc];
                if (v101)
                  v104 = *((unsigned int *)v101 + 46);
                else
                  v104 = 0;
                v85 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:](v103, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:", v82, *v80, v97, v98, v104, v102);
LABEL_173:
                v66 = (_PFExternalReferenceData *)v85;
                goto LABEL_174;
              }
              v99 = [_PFExternalReferenceData alloc];
              if (v158)
                v100 = *((unsigned int *)v158 + 46);
              else
                v100 = 0;
              v66 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v99, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v82, *v80, v97, v98, v100);
              if (v137)
                goto LABEL_169;
LABEL_174:
              v170 = (uint64_t)v82 + *v80;
LABEL_175:
              v31 = 0;
              v167[v32] = v66;
              goto LABEL_197;
            default:
LABEL_88:
              if (v39)
                goto LABEL_89;
              v77 = (const UInt8 *)((v37 + v170) & v52);
              v67 = CFDataCreate(0, v77 + 4, *(int *)v77);
              v170 = (uint64_t)&v77[*(int *)v77 + 4];
              if (v36 == 17 && objc_msgSend(v41, "sqlType") != 10)
              {
                objc_msgSend(*(id *)(plan_for_entity + v28 + 24), "propertyDescription");
                v88 = 0;
                v89 = objc_msgSend(v41, "sqlType");
                switch(v89)
                {
                  case 1:
                    v115 = -[__CFData bytes](v67, "bytes");
                    v106 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v115);
                    v107 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInteger:", objc_msgSend(v106, "integerValue"));
                    goto LABEL_187;
                  case 2:
                  case 3:
                    v105 = -[__CFData bytes](v67, "bytes");
                    v106 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v105);
                    v107 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", objc_msgSend(v106, "longLongValue"));
LABEL_187:
                    v88 = (CFStringRef)v107;

                    goto LABEL_195;
                  case 4:
                  case 5:
                  case 6:
                  case 9:
                  case 12:
                    if (CFDataGetLength(v67))
                    {
                      BytePtr = (const char *)CFDataGetBytePtr(v67);
                      v88 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
                    }
                    else
                    {
                      v88 = &stru_1E1EE23F0;
                    }
                    if (v89 == 12)
                    {
                      v113 = (objc_class *)MEMORY[0x1E0C99E98];
                    }
                    else
                    {
                      if (v89 != 4)
                        goto LABEL_195;
                      v113 = (objc_class *)MEMORY[0x1E0CB3598];
                    }
                    v114 = objc_msgSend([v113 alloc], "initWithString:", v88);
                    CFRelease(v88);
                    v88 = (CFStringRef)v114;
LABEL_195:
                    CFRelease(v67);
                    v67 = (CFDataRef)v88;
                    break;
                  case 7:
                  case 8:
                    v108 = -[__CFData bytes](v67, "bytes");
                    v109 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v108);
                    if (v89 == 7)
                    {
                      v110 = objc_msgSend((id)objc_msgSend(v41, "propertyDescription"), "attributeType");
                      v111 = objc_alloc(MEMORY[0x1E0CB37E8]);
                      if (v110 == 600)
                      {
                        objc_msgSend(v109, "floatValue");
                        v112 = objc_msgSend(v111, "initWithFloat:");
                      }
                      else
                      {
                        objc_msgSend(v109, "doubleValue");
                        v112 = objc_msgSend(v111, "initWithDouble:");
                      }
                    }
                    else
                    {
                      v117 = objc_alloc(MEMORY[0x1E0C99D68]);
                      objc_msgSend(v109, "doubleValue");
                      v112 = objc_msgSend(v117, "initWithTimeIntervalSinceReferenceDate:");
                    }
                    v88 = (CFStringRef)v112;

                    goto LABEL_195;
                  case 11:
                    if (-[__CFData length](v67, "length") == 16)
                    {
                      v116 = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", -[__CFData bytes](v67, "bytes"));
LABEL_191:
                      v88 = v116;
                    }
                    else
                    {
                      v88 = 0;
                    }
                    goto LABEL_195;
                  case 15:
                    v116 = (const __CFString *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v67, (void *)objc_msgSend(v41, "propertyDescription"));
                    goto LABEL_191;
                  default:
                    goto LABEL_195;
                }
              }
              else
              {
                v78 = *(unsigned __int8 *)(v35 + 20);
                if (v78 != 11)
                {
                  if (v78 != 15)
                    goto LABEL_196;
                  v79 = (const __CFData *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v67, (void *)objc_msgSend(*(id *)(plan_for_entity + v28 + 24), "propertyDescription"));
                  goto LABEL_138;
                }
                if (-[__CFData length](v67, "length") == 16)
                {
                  v79 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", -[__CFData bytes](v67, "bytes"));
LABEL_138:
                  v87 = v79;
                  CFRelease(v67);
                  v67 = v87;
                  goto LABEL_196;
                }

LABEL_89:
                v67 = 0;
              }
LABEL_196:
              v31 = 0;
              v167[v32] = v67;
LABEL_197:
              if (v164 && v28 == 72 && *((_DWORD *)v164 + 46) == 16001)
              {
                v118 = objc_msgSend((id)v167[v32], "intValue") == 2;
                v30 = v118 | v169;
                v119 = v166;
                v33 = v170;
              }
              else
              {
                v30 = v169;
                v119 = v166;
                v33 = v170;
                if (v28 == 120 && (v169 & 1) != 0)
                {
                  v160 = objc_msgSend((id)v167[v32], "intValue");
                  v30 = 1;
                }
              }
              ++v32;
              ++v29;
              v28 += 24;
              if (v119 == v29)
              {
                v4 = v147;
                v2 = v150;
                v3 = v146;
                v5 = v154;
                v22 = v151;
                goto LABEL_211;
              }
              break;
          }
        }
      }
      v32 = 0;
LABEL_211:
      if ((*(_DWORD *)(v3 + 72) & 0x1C) == 0x10)
      {
        v120 = [NSKnownKeysDictionary alloc];
        v121 = -[NSKnownKeysDictionary initWithSearchStrategy:](v120, "initWithSearchStrategy:", v142);
        v11 = (void *)-[NSKnownKeysDictionary setValues:](v121, "setValues:", v167);
      }
      else
      {
        v122 = v4;
        v123 = v3;
        v124 = v167;
        v125 = v144;
        v126 = (int)v141;
        v121 = (NSKnownKeysDictionary *)-[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v144, (void *)*v167, (uint64_t)v141);
        v127 = (uint64_t)v124;
        v3 = v123;
        v4 = v122;
        v2 = v150;
        _PFFaultHandlerFulfillPartialFault(v126, (unsigned int *)v121, (uint64_t)v125, v127, v148, (uint64_t)v159, v162);
      }
      v149[v22] = v121;
      if (v32)
      {
        v128 = v32;
        v129 = (void **)v167;
        do
        {
          v130 = *v129++;

          --v128;
        }
        while (v128);
      }
      if (v166 >= 0x201)
        NSZoneFree(0, v167);
      v131 = *(unsigned int *)(v5 + 4);
      if ((v131 & 0x80000000) == 0)
      {
        v132 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * v131);
        v5 = v132 + *(_QWORD *)(v5 + 16);
        v133 = !v132 || ++v22 == v4;
        if (!v133)
          continue;
      }
      goto LABEL_227;
    }
    v151 = v22;
    v154 = v5;
    v167 = (_QWORD *)NSAllocateScannedUncollectable();
    goto LABEL_43;
  }
LABEL_227:
  if ((*(_DWORD *)(v3 + 72) & 0x1C) == 0x14)
    v134 = 46;
  else
    v134 = 10;
  v135 = [_PFArray alloc];
  return (uint64_t)-[_PFArray initWithObjects:count:andFlags:andContext:](v135, "initWithObjects:count:andFlags:andContext:", v149, v4, v134, v144);
}

void sub_18A292B8C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A292BAC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A292B68);
}

void sub_18A292C64(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A292C84(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A292C3CLL);
}

void sub_18A292D30(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A292D50(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A292D0CLL);
}

uint64_t PFVectorHash(const __CFBitVector *a1)
{
  uint64_t Count;
  CFRange v3;
  UInt8 bytes[8];

  *(_QWORD *)bytes = 0;
  Count = CFBitVectorGetCount(a1);
  if (Count >= 64)
    v3.length = 64;
  else
    v3.length = Count;
  v3.location = 0;
  CFBitVectorGetBits(a1, v3, bytes);
  return *(_QWORD *)bytes;
}

void rawIntegerRowsRelease(int a1, void *ptr)
{
  malloc_zone_t *v3;

  v3 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v3 = malloc_default_zone();
  malloc_zone_free(v3, ptr);
}

void sub_18A293648(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18A29365C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

NSManagedObjectModel *_newReadModelFromBytes(_PFVMData *a1, uint64_t a2, unint64_t *a3, unint64_t a4, NSMutableDictionary *a5, NSMutableDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v17;
  NSManagedObjectModel *v18;
  NSManagedObjectModel *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  NSMutableDictionary *entities;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  NSMutableDictionary *fetchRequestTemplates;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSMutableDictionary *i;
  unint64_t v63;
  unsigned int v64;
  void *v65;
  NSSet *versionIdentifiers;
  NSSet *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t j;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSManagedObjectModel *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _PFVMData *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _PFVMData *v98;
  uint64_t v100;
  unint64_t *v101;
  NSManagedObjectModel *v103;
  id obj;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  _QWORD v111[3];
  _BYTE v112[128];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v110 = *a3;
  v17 = v110;
  v18 = objc_alloc_init(NSManagedObjectModel);
  v19 = v18;
  v20 = (v110 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = v20 + 4;
  if (v20 + 4 <= a4)
  {
    v22 = bswap32(*(_DWORD *)(a2 + v20));
    v110 = v21;
    v17 = v21;
  }
  else
  {
    v22 = 0;
  }
  v18->_managedObjectModelFlags = (__managedObjectModelFlags)(v22 & 0xFFFFFFFB);
  entities = v18->_entities;
  if (entities)

  v19->_entities = a5;
  v24 = objc_msgSend((id)-[NSMutableDictionary mapping](a5, "mapping"), "length");
  v31 = v24;
  v32 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v33 = v32 + 4;
  if (v32 + 4 <= a4)
  {
    v34 = bswap32(*(_DWORD *)(a2 + v32));
    v110 = v33;
    v17 = v33;
  }
  else
  {
    v34 = 0;
  }
  if (v24 != v34)
  {
    _NSCoreDataLog(1, (uint64_t)CFSTR("Mismatch: strategy has %lu length, archive has %u values"), v25, v26, v27, v28, v29, v30, v24);

    return 0;
  }
  -[NSMutableDictionary _setValues:retain:](a5, "_setValues:retain:", a7, 0);
  v41 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v42 = v41 + 4;
  v103 = v19;
  v101 = a3;
  if (v41 + 4 <= a4)
  {
    v44 = *(_DWORD *)(a2 + v41);
    v43 = bswap32(v44);
    v110 = v42;
    if (!a6)
    {
      if (!v44)
        goto LABEL_28;
      _NSCoreDataLog(1, (uint64_t)CFSTR("Mismatch: frt strategy has %d length, archive has %u values"), v35, v36, v37, v38, v39, v40, 0);
LABEL_59:

      return 0;
    }
    v17 = v42;
LABEL_16:
    fetchRequestTemplates = v19->_fetchRequestTemplates;
    if (fetchRequestTemplates)

    v19->_fetchRequestTemplates = a6;
    v46 = (void *)-[NSMutableDictionary mapping](a6, "mapping");
    if (objc_msgSend(v46, "length") == v43)
    {
      v47 = a2 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43)
      {
        v48 = v43;
        v49 = (_QWORD *)(a2 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8));
        do
        {
          v50 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
          v51 = v50 + 8;
          if (v50 + 8 <= a4)
          {
            v52 = bswap64(*(_QWORD *)(a2 + v50));
            v17 = v51;
          }
          else
          {
            v52 = 0;
          }
          *v49++ = *(_QWORD *)(a8 + 8 * v52);
          --v48;
        }
        while (v48);
        v110 = v17;
      }
      -[NSMutableDictionary _setValues:retain:](a6, "_setValues:retain:", v47, 1);
      goto LABEL_27;
    }
    v55 = objc_msgSend(v46, "length");
    _NSCoreDataLog(1, (uint64_t)CFSTR("Mismatch: frt strategy has %lu length, archive has %u values"), v56, v57, v58, v59, v60, v61, v55);

    return 0;
  }
  if (a6)
  {
    v43 = 0;
    goto LABEL_16;
  }
LABEL_27:
  v42 = v17;
LABEL_28:
  v53 = (v42 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v53 + 4 <= a4)
  {
    v54 = bswap32(*(_DWORD *)(a2 + v53));
    v110 = v53 + 4;
  }
  else
  {
    v54 = 0;
  }
  for (i = (NSMutableDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", v31); v54; --v54)
  {
    v63 = (v110 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v63 + 4 <= a4)
    {
      v64 = bswap32(*(_DWORD *)(a2 + v63));
      v110 = v63 + 4;
    }
    else
    {
      v64 = 0;
    }
    v65 = (void *)_newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v110, a4, a7, 0);
    -[NSMutableDictionary setObject:forKey:](i, "setObject:forKey:", v65, *(_QWORD *)(a9 + 8 * v64));

  }
  v103->_configurations = i;
  obj = (id)_newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v110, a4, a10, 0);
  versionIdentifiers = v103->_versionIdentifiers;
  if (versionIdentifiers)

  v67 = (NSSet *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", v31);
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v106, v112, 16);
  if (v68)
  {
    v69 = v68;
    v70 = *(_QWORD *)v107;
    while (2)
    {
      for (j = 0; j != v69; ++j)
      {
        if (*(_QWORD *)v107 != v70)
          objc_enumerationMutation(obj);
        v72 = *(_QWORD *)(*((_QWORD *)&v106 + 1) + 8 * j);
        v105 = 0;
        v73 = (void *)MEMORY[0x1E0C99E60];
        v111[0] = objc_opt_class();
        v111[1] = objc_opt_class();
        v111[2] = objc_opt_class();
        v74 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, objc_msgSend(v73, "setWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v111, 3)), v72, (uint64_t)&v105);
        if (!v74)
        {
          _NSCoreDataLog(1, (uint64_t)CFSTR("Unable to decode versionIdentifiers for model: %@"), v75, v76, v77, v78, v79, v80, v105);

          goto LABEL_59;
        }
        -[NSSet addObject:](v67, "addObject:", v74);
      }
      v69 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v106, v112, 16);
      if (v69)
        continue;
      break;
    }
  }
  v81 = v103;
  v103->_versionIdentifiers = v67;

  v82 = (v110 + 7) & 0xFFFFFFFFFFFFFFF8;
  v83 = -[NSMutableDictionary count](a5, "count");
  v90 = a1;
  if (v83)
  {
    v91 = v83;
    v92 = v110;
    v93 = v83;
    do
    {
      v94 = (v92 + 7) & 0xFFFFFFFFFFFFFFF8;
      v95 = v94 + 8;
      if (v94 + 8 <= a4)
      {
        v96 = *(_QWORD *)(a2 + v94);
        v110 = v95;
        v92 = v95;
        if (v96)
        {
          _NSCoreDataLog(1, (uint64_t)CFSTR("Corrupted archive (missing pointer space)."), v84, v85, v86, v87, v88, v89, v100);

          return 0;
        }
      }
      --v93;
    }
    while (v93);
    v97 = v82;
    do
    {
      *(_QWORD *)(a2 + v97) = _newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v110, a4, a9, 0);
      v97 += 8;
      --v91;
    }
    while (v91);
  }
  v103->_optimizationHints = (id *)(a2 + v82);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v98 = a1;
  else
    v90 = -[_PFVMData initWithBytes:length:]([_PFVMData alloc], "initWithBytes:length:", -[_PFVMData bytes](a1, "bytes"), -[_PFVMData length](a1, "length"));
  v103->_dataForOptimization = v90;
  *v101 = v110;
  return v81;
}

void PF_Tiger_CFDictionarySetValue(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int *v10;
  signed int v11;
  const __CFString *v12;
  int v13;
  int v14;
  int v15;
  const __CFString *v16;
  unint64_t v17;
  const __CFString *v19;
  const __CFString **v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString **v25;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  unsigned int v38;

  v6 = _PF_TigerHashCFString(a2);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = v6 % *(_DWORD *)(a1 + 8);
  v38 = -1;
  v10 = &v38;
  v11 = v9;
  while (1)
  {
    v12 = *(const __CFString **)(v7 + 8 * v11);
    if ((const __CFString *)v8 == v12)
    {
      if (v10)
        *v10 = v11;
      goto LABEL_17;
    }
    if ((const __CFString *)~v8 == v12)
    {
      if (v10)
      {
        *v10 = v11;
        v10 = 0;
      }
      goto LABEL_8;
    }
    if (v12 == a2 || CFEqual(v12, a2))
      break;
LABEL_8:
    v13 = v11 + 1;
    v14 = *(_DWORD *)(a1 + 8);
    if (v14 <= v11 + 1)
      v15 = *(_DWORD *)(a1 + 8);
    else
      v15 = 0;
    v11 = v13 - v15;
    if (v9 == v13 - v15)
      goto LABEL_18;
  }
  if (v11 != -1)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11) = a3;
    return;
  }
LABEL_17:
  v14 = *(_DWORD *)(a1 + 8);
LABEL_18:
  v16 = *(const __CFString **)(a1 + 16);
  v17 = ~(unint64_t)v16;
  if (v16 == a2 || v17 == (_QWORD)a2)
  {
    v19 = (const __CFString *)((char *)v16 - 1);
    if (v14 >= 1)
    {
      v20 = *(const __CFString ***)(a1 + 40);
      v21 = v14;
      v22 = *(const __CFString **)(a1 + 16);
LABEL_25:
      v23 = -(uint64_t)v22;
      v22 = v19;
      v24 = v14;
      v25 = *(const __CFString ***)(a1 + 40);
      do
      {
        if (v22 == *v25 || v23 == (_QWORD)*v25)
        {
          v19 = (const __CFString *)((char *)v22 - 1);
          goto LABEL_25;
        }
        ++v25;
        --v24;
      }
      while (v24);
      do
      {
        v27 = v22;
        if (v16 == *v20 || (v27 = (const __CFString *)v23, (const __CFString *)v17 == *v20))
          *v20 = v27;
        ++v20;
        --v21;
      }
      while (v21);
      v19 = v22;
    }
    *(_QWORD *)(a1 + 16) = v19;
  }
  v28 = v38;
  if ((v38 & 0x80000000) != 0 || (int)v38 >= v14)
  {
    v29 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "illegal OOB dictionary calculation");
    _NSCoreDataLog(17, v29, v30, v31, v32, v33, v34, v35, v37);
    v36 = __pflogFaultLog;
    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v37) = 0;
      _os_log_fault_impl(&dword_18A253000, v36, OS_LOG_TYPE_FAULT, "CoreData: illegal OOB dictionary calculation", (uint8_t *)&v37, 2u);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v38) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v28) = a3;
  }
  ++*(_DWORD *)a1;
}

uint64_t _PF_TigerHashCFString(const __CFString *a1)
{
  CFIndex Length;
  int v3;
  uint64_t v4;
  UniChar *v5;
  uint64_t v6;
  UniChar *v7;
  int v8;
  UniChar *v9;
  unsigned __int16 *v10;
  int v11;
  _QWORD v13[2];
  CFRange v14;

  v13[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  v3 = MEMORY[0x1E0C80A78](Length);
  v5 = (UniChar *)((char *)v13 - ((v4 + 15) & 0x3FFFFFFF0));
  v6 = v3;
  v14.location = 0;
  v14.length = v3;
  CFStringGetCharacters(a1, v14, v5);
  if ((int)Length > 23)
  {
    v10 = &v5[(Length - 16)];
    v8 = 16974593 * v10[12]
       + 66049 * v10[13]
       + 257 * v10[14]
       + v10[15]
       + 67503105
       * (16974593 * v10[8]
        + 66049 * v10[9]
        + 257 * v10[10]
        + v10[11]
        + 67503105
        * (16974593 * v10[4]
         + 66049 * v10[5]
         + 257 * v10[6]
         + v10[7]
         + 67503105
         * (16974593 * *v10
          + 66049 * v10[1]
          + 67503105
          * (16974593 * v5[4]
           + 67503105 * (67503105 * Length + 16974593 * *v5 + 66049 * v5[1] + 257 * v5[2] + v5[3])
           + 66049 * v5[5]
           + 257 * v5[6]
           + v5[7])
          + 257 * v10[2]
          + v10[3])));
  }
  else
  {
    v7 = &v5[v6];
    if ((int)(Length & 0xFFFFFFFC) < 1)
    {
      v8 = Length;
    }
    else
    {
      v8 = Length;
      v9 = &v5[Length & 0xFFFFFFFC];
      do
      {
        v8 = 67503105 * v8 + 16974593 * *v5 + 66049 * v5[1] + 257 * v5[2] + v5[3];
        v5 += 4;
      }
      while (v5 < v9);
    }
    while (v5 < v7)
    {
      v11 = *v5++;
      v8 = 257 * v8 + v11;
    }
  }
  return ((v8 << Length) + v8);
}

uint64_t _PF_Leopard_CFDictionaryGetValue(_QWORD *a1, __CFString *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1[2])
  {
    v4 = _PF_Leopard_CFStringHashNSString(a2);
    v5 = (1264676453 - v4) ^ ((v4 - 1) << 8);
    v6 = (2 - v4 - v5) ^ (v5 >> 13);
    v7 = (v4 - 1 - v5 - v6) ^ (v6 >> 12);
    v8 = (v5 - v6 - v7) ^ (v7 << 16);
    v9 = (v6 - v7 - v8) ^ (v8 >> 5);
    v10 = (v7 - v8 - v9) ^ (v9 >> 3);
    v11 = (v9 - v10 - ((v8 - v9 - v10) ^ (v10 << 10))) ^ (((v8 - v9 - v10) ^ (v10 << 10)) >> 15);
    v13 = a1[8];
    v12 = a1[9];
    v14 = a1[1];
    v15 = ((_DWORD)v14 - 1) & v11;
    v16 = v15;
    do
    {
      v17 = *(__CFString **)(v12 + 8 * v16);
      if ((__CFString *)v13 == v17)
        break;
      if (v17 != (__CFString *)~v13)
      {
        if (v17 == a2 || CFEqual(v17, a2))
        {
          if (v16 == -1)
            return 0;
          return *(_QWORD *)(a1[10] + 8 * v16);
        }
        v14 = a1[1];
      }
      v18 = v16 + 1;
      if (v14 <= v16 + 1)
        v19 = v14;
      else
        v19 = 0;
      v16 = v18 - v19;
    }
    while (v15 != v18 - v19);
  }
  return 0;
}

CFTypeRef _PF_Leopard_CFDictionarySetValue(_QWORD *a1, __CFString *a2, const void *a3)
{
  uint64_t v6;
  __CFString **v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  malloc_zone_t *v12;
  malloc_zone_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  __CFString **v17;
  _QWORD *v18;
  __CFString *v19;
  __CFString *v20;
  malloc_zone_t *v22;
  malloc_zone_t *v23;
  uint64_t v24;
  CFTypeRef result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  __CFString **v33;
  __CFString *v34;
  __CFString *v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = a1[2];
  v7 = (__CFString **)a1[9];
  if (v6 == a1[3] || !v7)
  {
    v8 = (_QWORD *)a1[10];
    v9 = a1[1];
    v10 = flsl(v6 / 3);
    a1[3] = 3 << v10;
    v11 = 4 << flsl(((3 << v10) - 1) / 3);
    a1[1] = v11;
    a1[5] = 0;
    v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      v12 = malloc_default_zone();
      v11 = a1[1];
    }
    a1[9] = malloc_type_zone_calloc(v12, 1uLL, 8 * v11, 0x100004000313F17uLL);
    v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v13 = malloc_default_zone();
    v14 = malloc_type_zone_calloc(v13, 1uLL, 8 * a1[1], 0x100004000313F17uLL);
    a1[10] = v14;
    v15 = a1[1];
    if (v15 >= 1)
    {
      v16 = (_QWORD *)a1[9];
      do
      {
        *v16++ = a1[8];
        *v14++ = 0;
        --v15;
      }
      while (v15);
    }
    if (v7)
    {
      if (v9 >= 1)
      {
        v17 = v7;
        v18 = v8;
        do
        {
          v19 = *v17;
          v20 = (__CFString *)a1[8];
          if (v20 != *v17 && v19 != (__CFString *)~(unint64_t)v20)
          {
            v40 = 0;
            _PF_Leopard_CFDictionaryFindBuckets2((uint64_t)a1, v19, &v41, &v40);
            if (v40 != -1)
            {
              *(_QWORD *)(a1[9] + 8 * v40) = *v17;
              *(_QWORD *)(a1[10] + 8 * v40) = *v18;
            }
          }
          ++v18;
          ++v17;
          --v9;
        }
        while (v9);
      }
      v22 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v22 = malloc_default_zone();
      malloc_zone_free(v22, v7);
      v23 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v23 = malloc_default_zone();
      malloc_zone_free(v23, v8);
    }
  }
  ++a1[4];
  v40 = 0;
  v41 = 0;
  _PF_Leopard_CFDictionaryFindBuckets2((uint64_t)a1, a2, &v41, &v40);
  v24 = v41;
  if (v41 == -1)
  {
    v27 = a1[8];
    v26 = a1[9];
    if ((__CFString *)v27 == a2 || (v28 = ~v27, (__CFString *)~v27 == a2))
    {
      v29 = a1[1];
      v30 = (__CFString *)(v27 - 1);
      if (v29 >= 1)
      {
LABEL_30:
        v31 = -v27;
        v27 = (uint64_t)v30;
        v32 = a1[1];
        v33 = (__CFString **)a1[9];
        do
        {
          v35 = *v33++;
          v34 = v35;
          if ((__CFString *)v27 == v35 || v34 == (__CFString *)v31)
          {
            v30 = (__CFString *)(v27 - 1);
            goto LABEL_30;
          }
          --v32;
        }
        while (v32);
        v37 = (uint64_t *)a1[9];
        do
        {
          v38 = a1[8];
          v39 = v27;
          if (v38 == *v37 || (v39 = v31, *v37 == ~v38))
            *v37 = v39;
          ++v37;
          --v29;
        }
        while (v29);
        v30 = (__CFString *)v27;
      }
      a1[8] = v30;
      v28 = ~(unint64_t)v30;
    }
    if (*(_QWORD *)(v26 + 8 * v40) == v28)
      --a1[5];
    CFRetain(a2);
    result = CFRetain(a3);
    *(_QWORD *)(a1[9] + 8 * v40) = a2;
    *(_QWORD *)(a1[10] + 8 * v40) = a3;
    ++a1[2];
    ++*a1;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a1[10] + 8 * v41));
    result = CFRetain(a3);
    *(_QWORD *)(a1[10] + 8 * v24) = a3;
  }
  return result;
}

__CFString *_PF_Leopard_CFDictionaryFindBuckets2(uint64_t a1, __CFString *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *result;
  uint64_t v20;
  uint64_t v21;

  v8 = _PF_Leopard_CFStringHashNSString(a2);
  v9 = (1264676453 - v8) ^ ((v8 - 1) << 8);
  v10 = (2 - v8 - v9) ^ (v9 >> 13);
  v11 = (v8 - 1 - v9 - v10) ^ (v10 >> 12);
  v12 = (v9 - v10 - v11) ^ (v11 << 16);
  v13 = (v10 - v11 - v12) ^ (v12 >> 5);
  v14 = (v11 - v12 - v13) ^ (v13 >> 3);
  v16 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v17 = (*(_DWORD *)(a1 + 8) - 1) & ((v13 - v14 - ((v12 - v13 - v14) ^ (v14 << 10))) ^ (((v12 - v13 - v14) ^ (v14 << 10)) >> 15));
  *a3 = -1;
  *a4 = -1;
  v18 = v17;
  while (1)
  {
    result = *(__CFString **)(v15 + 8 * v18);
    if ((__CFString *)v16 == result)
      break;
    if (result == (__CFString *)~v16)
    {
      if (a4)
      {
        *a4 = v18;
        a4 = 0;
      }
    }
    else if (result == a2 || (result = (__CFString *)CFEqual(result, a2), (_DWORD)result))
    {
      a4 = a3;
      goto LABEL_15;
    }
    v20 = v18 + 1;
    v21 = *(_QWORD *)(a1 + 8);
    if (v21 > v18 + 1)
      v21 = 0;
    v18 = v20 - v21;
    if (v17 == v20 - v21)
      return result;
  }
  if (!a4)
    return result;
LABEL_15:
  *a4 = v18;
  return result;
}

uint64_t _PF_Leopard_CFStringHashNSString(__CFString *a1)
{
  CFIndex Length;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  _WORD v9[32];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  v3 = v9;
  if (Length >= 97)
  {
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v10, ((unint64_t)Length >> 1) - 16, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v11, Length - 32, 32);
    v4 = (unsigned __int16 *)&v12;
    v5 = (unsigned __int16 *)&v12;
LABEL_5:
    v3 = v9;
    v6 = Length;
    do
    {
      v6 = 67503105 * v6 + 16974593 * *v3 + 66049 * v3[1] + 257 * v3[2] + v3[3];
      v3 += 4;
    }
    while (v3 < v5);
    goto LABEL_10;
  }
  -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, Length);
  v4 = &v9[Length];
  if ((uint64_t)(Length & 0xFFFFFFFFFFFFFFFCLL) >= 1)
  {
    v5 = &v9[Length & 0xFFFFFFFFFFFFFFFCLL];
    goto LABEL_5;
  }
  v6 = Length;
LABEL_10:
  while (v3 < v4)
  {
    v7 = *v3++;
    v6 = 257 * v6 + v7;
  }
  return ((v6 << Length) + v6);
}

uint64_t PF_Tiger_CFDictionaryGetKeysAndValues(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 16);
    v6 = 8 * v3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(result + 40) + v4);
      if (v5 != v7 && ~v5 != v7)
      {
        if (a2)
          *a2++ = v7;
        if (a3)
          *a3++ = *(_QWORD *)(*(_QWORD *)(result + 48) + v4);
      }
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

_QWORD *PF_Tiger_CFDictionaryCreate(uint64_t a1, unsigned int a2, int a3)
{
  malloc_zone_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  int v11;
  malloc_zone_t *v12;
  malloc_zone_t *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v5 = malloc_default_zone();
  v6 = malloc_type_zone_calloc(v5, 1uLL, 0x38uLL, 0x1080040AA4A4051uLL);
  v7 = v6;
  *(_DWORD *)v6 = 0;
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = 2712781267;
  if (a3)
  {
    for (i = 0; i != 42; ++i)
    {
      if (__CFDictionaryCapacities[i] >= a2)
        break;
    }
    v9 = 0;
    v10 = __CFDictionaryCapacities[i];
    *((_DWORD *)v6 + 1) = v10;
    do
    {
      if (__CFDictionaryCapacities[v9] >= v10)
        break;
      ++v9;
    }
    while (v9 != 42);
  }
  else
  {
    v9 = 0;
    *((_DWORD *)v6 + 1) = a2;
    do
    {
      if (__CFDictionaryCapacities[v9] >= a2)
        break;
      ++v9;
    }
    while (v9 != 42);
  }
  v11 = __CFDictionaryBuckets[v9];
  *((_DWORD *)v6 + 2) = v11;
  v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
  {
    v12 = malloc_default_zone();
    v11 = *((_DWORD *)v7 + 2);
  }
  v7[5] = malloc_type_zone_calloc(v12, v11, 8uLL, 0x80040B8603338uLL);
  v13 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v13 = malloc_default_zone();
  v7[6] = malloc_type_zone_calloc(v13, *((int *)v7 + 2), 8uLL, 0x80040B8603338uLL);
  v14 = *((int *)v7 + 2);
  if ((_DWORD)v14)
  {
    v15 = v14 - 1;
    do
      *(_QWORD *)(v7[5] + 8 * v15) = 2712781267;
    while ((_DWORD)v15--);
  }
  return v7;
}

void PF_Tiger_CFDictionaryDestroy(_QWORD *ptr)
{
  void *v2;
  malloc_zone_t *v3;
  void *v4;
  malloc_zone_t *v5;
  malloc_zone_t *v6;

  v2 = (void *)ptr[5];
  if (v2)
  {
    v3 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      v3 = malloc_default_zone();
      v2 = (void *)ptr[5];
    }
    malloc_zone_free(v3, v2);
  }
  v4 = (void *)ptr[6];
  if (v4)
  {
    v5 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
    {
      v5 = malloc_default_zone();
      v4 = (void *)ptr[6];
    }
    malloc_zone_free(v5, v4);
  }
  v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v6 = malloc_default_zone();
  malloc_zone_free(v6, ptr);
}

_QWORD *_PF_Leopard_CFDictionaryCreate()
{
  malloc_zone_t *v0;
  char *v1;
  _QWORD *v2;

  v0 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v0 = malloc_default_zone();
  v1 = (char *)malloc_type_zone_calloc(v0, 1uLL, 0x58uLL, 0x109004026750248uLL);
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)v1 = 0;
    *((_QWORD *)v1 + 2) = 0;
    *((_QWORD *)v1 + 5) = 0;
    *((_QWORD *)v1 + 6) = 0;
    *((_QWORD *)v1 + 4) = 1;
    *(_OWORD *)(v1 + 56) = xmmword_18A50A440;
    *((_QWORD *)v1 + 3) = 3 << flsl(0);
    v2[1] = 0;
    v2[9] = 0;
    v2[10] = 0;
  }
  return v2;
}

void sub_18A297288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void (*a24)(char *))
{
  a24(&a22);
  _Unwind_Resume(a1);
}

void sub_18A297D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void (*a41)(char *))
{
  a41(&a39);
  _Unwind_Resume(a1);
}

void sub_18A298C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void (*a26)(char *))
{
  a26(&a24);
  _Unwind_Resume(a1);
}

uint64_t _kvcPropertysPublicSetters(unint64_t *a1)
{
  if (*(_QWORD *)(a1[19] + 16))
    return *(_QWORD *)(a1[19] + 16);
  else
    return _resolveForSelectorAndType(a1, sel__createValueSetterWithContainerClassID_key_, (objc_class *)_MergedGlobals_72, 2);
}

void sub_18A299EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
  a12(&a10);
  _Unwind_Resume(a1);
}

uint64_t _resolveValidationMethods(unint64_t *a1)
{
  void *v2;
  id *v3;
  uint64_t v4;
  Method *v5;
  unint64_t *v6;
  Class Superclass;
  Class v8;
  Method *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  CFIndex v14;
  uint64_t v15;
  unint64_t *v16;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)a1[13];
  v3 = (id *)objc_msgSend(v2, "keys");
  v4 = objc_msgSend(v2, "length");
  v5 = (Method *)PF_CALLOC_OBJECT_ARRAY(v4);
  v19[0] = a1;
  v6 = _PFFastEntityClass(a1);
  Superclass = class_getSuperclass((Class)v6);
  if (v4)
  {
    v8 = Superclass;
    v9 = v5;
    do
    {
      v10 = (const __CFString *)*v3;
      v11 = objc_msgSend(*v3, "length", v19[0]);
      MEMORY[0x1E0C80A78](v11);
      v13 = (char *)v19 - v12;
      CFStringGetCString(v10, (char *)v19 - v12, v14, 0x8000100u);
      if (v11)
        *v13 = __toupper(*v13);
      *v9++ = _PFKeyValueMethodForPattern(v8, "validate%s:error:", v13);
      ++v3;
      --v4;
    }
    while (v4);
  }
  v15 = v19[0];
  v16 = (unint64_t *)(*(_QWORD *)(v19[0] + 152) + 32);
  while (!__ldaxr(v16))
  {
    if (!__stlxr((unint64_t)v5, v16))
      return *(_QWORD *)(*(_QWORD *)(v15 + 152) + 32);
  }
  __clrex();
  PF_FREE_OBJECT_ARRAY(v5);
  return *(_QWORD *)(*(_QWORD *)(v15 + 152) + 32);
}

Method _PFKeyValueMethodForPattern(void *a1, char *__s, const char *a3)
{
  size_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  const char *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  strlen(__s);
  v6 = strlen(a3);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v12 - v7;
  snprintf((char *)v12 - v7, v9, __s, a3, a3);
  if ((objc_msgSend(a1, "_classShouldAlwaysRegisterSelectorNamed:", v8) & 1) != 0 || !BYTE2(dword_1ECD8DE20))
    v10 = sel_registerName(v8);
  else
    v10 = (const char *)sel_lookUpByName();
  return class_getInstanceMethod((Class)a1, v10);
}

void _pvfk_29(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x1DuLL, a4, a5, a6, a7, a8);
}

void sub_18A29C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

void sub_18A29D524(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sortRawRowsForPrefetching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v3 > v4)
    return 1;
  if (v3 < v4)
    return -1;
  if (!*(_BYTE *)(a3 + 1))
    return 0;
  v6 = *(unsigned __int8 *)(a3 + 2);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v6);
  if (v7 > v8)
    return 1;
  if (v7 >= v8)
    return 0;
  else
    return -1;
}

void _pvfk_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x23uLL, a4, a5, a6, a7, a8);
}

id _prefetchForFetchRequest(void *a1, void *a2, void *a3)
{
  id result;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t i;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  void *v23;
  double Current;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSFetchRequest *v31;
  NSFetchRequest *v32;
  __CFString *v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  os_unfair_lock_s *v43;
  os_unfair_lock_s *v44;
  os_unfair_lock_s *v45;
  char *v46;
  Class Class;
  unsigned int *v48;
  int v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  unsigned int *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  __objc2_class **v80;
  void *v81;
  _QWORD *v82;
  const char *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t k;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  os_unfair_lock_s *v110;
  os_unfair_lock_s *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  unsigned int *v115;
  _DWORD *v116;
  int v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  unsigned int *v122;
  _DWORD *v123;
  int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  int v130;
  void *v131;
  _DWORD *v132;
  int v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  _DWORD *v143;
  int v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  void *v148;
  id v149;
  uint64_t v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  void *v159;
  _DWORD *v160;
  int v161;
  uint64_t v162;
  __objc2_class **v163;
  void *v164;
  uint64_t v165;
  void *v166;
  id v167;
  uint64_t v168;
  id v169;
  id v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  _DWORD *v178;
  int v179;
  uint64_t v180;
  __objc2_class **v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t m;
  void *v186;
  uint64_t v187;
  void *v188;
  BOOL v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  __objc2_class **v195;
  id v196;
  uint64_t *v197;
  void *v198;
  uint64_t v199;
  id *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  id v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  id obj;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  id v219;
  uint64_t v220;
  id v221;
  unsigned int v222;
  unsigned int *v223;
  uint64_t v224;
  id v225;
  void *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  void *v238;
  unsigned int *v239;
  _QWORD *v240;
  char *v241;
  unsigned int *v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v246;
  id v247;
  void *context;
  id contexta;
  id contextb;
  id v251;
  id v252;
  uint64_t v253;
  int v254;
  id v255;
  unsigned __int8 *v256;
  id v257;
  id v258;
  id v259;
  uint64_t v260;
  id v261;
  uint64_t v263;
  int v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  _BYTE v305[128];
  _BYTE v306[128];
  _BYTE v307[128];
  _BYTE v308[128];
  _BYTE v309[128];
  _BYTE v310[128];
  _BYTE v311[128];
  void *v312[16];
  _BYTE v313[128];
  _BYTE v314[128];
  const __CFString *v315;
  uint64_t v316;
  _QWORD v317[16];
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  result = (id)objc_msgSend(a1, "count");
  if (result)
  {
    v6 = (void *)objc_msgSend(a3, "request");
    result = (id)objc_msgSend(v6, "relationshipKeyPathsForPrefetching");
    if (a2
      || (v204 = result) != 0
      && (result = (id)objc_msgSend(result, "count")) != 0
      && (result = +[_PFRoutines _coalescedPrefetchKeypaths:]((uint64_t)_PFRoutines, v204),
          (a2 = result) != 0))
    {
      v253 = (uint64_t)a3;
      v205 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
      v215 = (void *)objc_msgSend(v6, "entity");
      v277 = 0u;
      v278 = 0u;
      v279 = 0u;
      v280 = 0u;
      obj = a2;
      v208 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v277, v308, 16);
      if (!v208)
        return (id)objc_msgSend(v205, "drain");
      v206 = *(_QWORD *)v278;
LABEL_5:
      v210 = 0;
      while (1)
      {
        if (*(_QWORD *)v278 != v206)
          objc_enumerationMutation(obj);
        v220 = *(_QWORD *)(*((_QWORD *)&v277 + 1) + 8 * v210);
        v207 = (void *)MEMORY[0x18D76B4E4]();
        v7 = (void *)objc_msgSend(obj, "objectForKey:", v220);
        v8 = objc_msgSend(v7, "count") ? v7 : 0;
        v211 = v8;
        v221 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        if (objc_msgSend((id)objc_msgSend(v215, "relationshipsByName"), "objectForKey:", v220))
          break;
        if (objc_msgSend((id)objc_msgSend(v215, "subentitiesByName"), "count"))
        {
          v255 = (id)objc_msgSend((id)objc_msgSend(v215, "subentities"), "mutableCopy");
          v258 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          while (objc_msgSend(v255, "count"))
          {
            v9 = (void *)objc_msgSend(v255, "objectAtIndex:", 0);
            objc_msgSend(v255, "removeObjectAtIndex:", 0);
            if (objc_msgSend((id)objc_msgSend(v9, "relationshipsByName"), "objectForKey:", v220))
            {
              objc_msgSend(v258, "addObject:", v9);
            }
            else if (objc_msgSend((id)objc_msgSend(v9, "subentitiesByName"), "count"))
            {
              objc_msgSend(v255, "addObjectsFromArray:", objc_msgSend(v9, "subentities"));
            }
          }
          if (objc_msgSend(v258, "count"))
          {
            v275 = 0u;
            v276 = 0u;
            v273 = 0u;
            v274 = 0u;
            v263 = objc_msgSend(v258, "countByEnumeratingWithState:objects:count:", &v273, v307, 16);
            if (v263)
            {
              v10 = 0;
              v260 = *(_QWORD *)v274;
              do
              {
                for (i = 0; i != v263; ++i)
                {
                  if (*(_QWORD *)v274 != v260)
                    objc_enumerationMutation(v258);
                  v12 = *(void **)(*((_QWORD *)&v273 + 1) + 8 * i);
                  v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  v271 = 0u;
                  v272 = 0u;
                  v269 = 0u;
                  v270 = 0u;
                  v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v269, v306, 16);
                  if (v14)
                  {
                    v15 = *(_QWORD *)v270;
                    do
                    {
                      for (j = 0; j != v14; ++j)
                      {
                        if (*(_QWORD *)v270 != v15)
                          objc_enumerationMutation(a1);
                        v17 = *(void **)(*((_QWORD *)&v269 + 1) + 8 * j);
                        v18 = (void *)objc_msgSend(v17, "entity");
                        v19 = v18;
                        v20 = v18 == v12 || v18 == v10;
                        if (v20 || objc_msgSend(v18, "isKindOfEntity:", v12))
                        {
                          objc_msgSend(v13, "addObject:", v17);
                          if (v19 != v12)
                            v10 = v19;
                        }
                      }
                      v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v269, v306, 16);
                    }
                    while (v14);
                  }
                  if (objc_msgSend(v13, "count"))
                    objc_msgSend(v221, "setObject:forKey:", v13, objc_msgSend(v12, "name"));

                }
                v263 = objc_msgSend(v258, "countByEnumeratingWithState:objects:count:", &v273, v307, 16);
              }
              while (v263);
            }
          }

LABEL_45:
          if (objc_msgSend(v221, "count"))
          {
            v267 = 0u;
            v268 = 0u;
            v265 = 0u;
            v266 = 0u;
            v214 = objc_msgSend(v221, "countByEnumeratingWithState:objects:count:", &v265, v305, 16);
            if (v214)
            {
              v212 = *(_QWORD *)v266;
              do
              {
                v224 = 0;
                do
                {
                  if (*(_QWORD *)v266 != v212)
                    objc_enumerationMutation(v221);
                  v21 = *(_QWORD *)(*((_QWORD *)&v265 + 1) + 8 * v224);
                  v240 = (_QWORD *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v215, "managedObjectModel"), "entitiesByName"), "objectForKey:", v21);
                  v247 = (id)objc_msgSend(v221, "objectForKey:", v21);
                  if (v253)
                  {
                    v22 = *(void **)(v253 + 32);
                    v23 = *(void **)(v253 + 8);
                  }
                  else
                  {
                    v22 = 0;
                    v23 = 0;
                  }
                  v235 = _sqlCoreLookupSQLEntityForEntityDescription(v23, v240);
                  if (!v235)
                    goto LABEL_357;
                  v256 = (unsigned __int8 *)objc_msgSend(*(id *)(v235 + 40), "objectForKey:", v220);
                  if (!v256)
                    goto LABEL_357;
                  if (v253)
                    v259 = *(id *)(v253 + 128);
                  else
                    v259 = 0;
                  v261 = -[NSEntityDescription _relationshipNamed:](v240, v220);
                  v231 = objc_msgSend(v256, "isToMany");
                  v254 = objc_msgSend(v261, "isOrdered");
                  v229 = *((_QWORD *)v256 + 7);
                  if (objc_msgSend((id)objc_msgSend((id)v253, "request"), "resultType"))
                    v264 = 0;
                  else
                    v264 = objc_msgSend((id)objc_msgSend((id)v253, "request"), "returnsObjectsAsFaults") ^ 1;
                  v213 = *(_DWORD *)(*(_QWORD *)(v253 + 136) + 72);
                  v227 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
                  if (!objc_msgSend(v261, "inverseRelationship")
                    && objc_msgSend(v261, "isToMany")
                    && (objc_msgSend((id)objc_msgSend((id)v235, "entityDescription"), "superentity")
                     || objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)v235, "entityDescription"), "subentities"), "count")))
                  {
                    v247 = (id)objc_msgSend(v247, "sortedArrayUsingComparator:", &__block_literal_global_234);
                    v218 = 1;
                  }
                  else
                  {
                    v218 = 0;
                  }
                  Current = CFAbsoluteTimeGetCurrent();
                  if ((v231 & 1) != 0 || v256[24] == 9)
                    objc_msgSend(v227, "addObjectsFromArray:", v247);
                  if (v229 && *(_BYTE *)(v229 + 24) == 7)
                  {
                    v222 = objc_msgSend((id)objc_msgSend((id)v229, "foreignKey"), "slot");
                    if ((v231 & v254) == 1)
                      v233 = objc_msgSend(*(id *)(v229 + 80), "slot");
                    else
                      v233 = -1;
                    v217 = objc_msgSend((id)v253, "inverseIsToOnePrefetchRequestForRelationshipNamed:onEntity:", v220, v240);
                    *(_QWORD *)&v318 = CFSTR("destinations");
                    v317[0] = objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", v247);
                    v34 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v317, &v318, 1);
                    goto LABEL_132;
                  }
                  v25 = v256[24];
                  if (v25 != 7)
                  {
                    if (v25 != 9)
                      goto LABEL_357;
                    v26 = objc_msgSend(v247, "objectAtIndex:", 0);
                    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F0]), "initWithObject:", objc_msgSend(*((id *)v256 + 7), "name"));
                    v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36E8]), "initWithKeyPath:", v27);

                    v29 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3540]), "initWithObject:", v26);
                    v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3518]), "initWithLeftExpression:rightExpression:modifier:type:options:", v29, v28, 0, 10, 0);

                    v31 = objc_alloc_init(NSFetchRequest);
                    -[NSFetchRequest setEntity:](v31, "setEntity:", objc_msgSend((id)objc_msgSend(v256, "destinationEntity"), "entityDescription"));
                    -[NSFetchRequest setPredicate:](v31, "setPredicate:", v30);

                    v32 = v31;
                    if (v254)
                    {
                      if (*((unsigned __int8 **)v256 + 7) == v256)
                        v33 = (__CFString *)*((_QWORD *)v256 + 10);
                      else
                        v33 = -[NSSQLManyToMany inverseOrderColumnName]((__CFString *)v256);
                    }
                    else
                    {
                      v33 = 0;
                    }
                    v51 = (_QWORD *)objc_msgSend((id)v253, "createChildContextForNestedFetchRequest:", v31);
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v51, *(void **)(v253 + 24));
                    v251 = _newObjectIDSetsForRequest(v51, v247, (uint64_t)v33);
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v51, 0);

                    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) < 2)
                    {
                      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) >= 1)
                      {
                        v59 = objc_msgSend(v256, "name");
                        objc_msgSend(v251, "count");
                        _NSCoreDataLog(4, (uint64_t)CFSTR("Prefetching from join table for many-to-many relationship \"%@\" from database.  Got %lu rows"), v60, v61, v62, v63, v64, v65, v59);
                      }
                    }
                    else
                    {
                      v52 = objc_msgSend(v256, "name");
                      objc_msgSend(v251, "count");
                      _NSCoreDataLog(4, (uint64_t)CFSTR("Prefetching from join table for many-to-many relationship \"%@\" from database.  Got %lu rows with values: %@"), v53, v54, v55, v56, v57, v58, v52);
                    }
                    v237 = objc_msgSend(v251, "count");
                    v243 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", v237 + 256);
                    Current = CFAbsoluteTimeGetCurrent();
                    if (v237)
                    {
                      v66 = 0;
                      do
                      {
                        context = (void *)MEMORY[0x18D76B4E4]();
                        v67 = (void *)objc_msgSend(v251, "objectAtIndex:", v66);
                        v68 = v66 + 1;
                        v69 = (void *)objc_msgSend(v251, "objectAtIndex:", v66 + 1);
                        v70 = v69;
                        if (v254)
                        {
                          v68 = v66 + 2;
                          v71 = (void *)objc_msgSend(v251, "objectAtIndex:", v66 + 2);
                        }
                        else
                        {
                          v71 = 0;
                        }
                        v72 = objc_msgSend((id)v253, "rowCache");
                        if (v72)
                          -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v72, v70, v71, v67, v261, Current);
                        objc_msgSend(v227, "removeObject:", v67);
                        if (v22)
                          v73 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v67, 0, 1);
                        else
                          v73 = 0;
                        v74 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v70, "count"));
                        v320 = 0u;
                        v321 = 0u;
                        v318 = 0u;
                        v319 = 0u;
                        v75 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v318, v317, 16);
                        if (v75)
                        {
                          v76 = *(_QWORD *)v319;
                          do
                          {
                            v77 = 0;
                            do
                            {
                              if (*(_QWORD *)v319 != v76)
                                objc_enumerationMutation(v70);
                              if (v22)
                                v78 = _PFRetainedObjectIDCore((uint64_t)v22, *(void **)(*((_QWORD *)&v318 + 1) + 8 * v77), 0, 1);
                              else
                                v78 = 0;
                              objc_msgSend(v74, "addObject:", v78);

                              ++v77;
                            }
                            while (v75 != v77);
                            v79 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v318, v317, 16);
                            v75 = v79;
                          }
                          while (v79);
                        }
                        v80 = off_1E1EDAE50;
                        if (!v254)
                          v80 = off_1E1EDAE58;
                        v81 = (void *)objc_msgSend(objc_alloc(*v80), "initWithSource:destinations:forRelationship:inContext:", v73, v74, v261, v22);
                        _PFFaultHandlerPreconnectRelationship((int)v259, v73, v261, v81);

                        objc_msgSend(v243, "addObjectsFromArray:", v69);
                        objc_autoreleasePoolPop(context);
                        v66 = v68 + 1;
                      }
                      while (v68 + 1 < v237);
                    }

                    if (!objc_msgSend(v243, "count"))
                    {
LABEL_359:

                      goto LABEL_357;
                    }
                    v217 = objc_msgSend((id)v253, "manyToManyPrefetchRequestsForRelationshipNamed:onEntity:", v220, v240);
                    v315 = CFSTR("mtmObjects");
                    v316 = objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", v243);
                    v34 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v316, &v315, 1);

                    goto LABEL_131;
                  }
                  v35 = objc_msgSend(v247, "count");
                  v243 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", v35);
                  v36 = objc_msgSend(v256, "slot");
                  if (v35)
                  {
                    v37 = 0;
                    v38 = *(_QWORD *)(v235 + 192) + v36;
                    while (1)
                    {
                      v39 = (void *)MEMORY[0x18D76B4E4]();
                      v40 = (void *)objc_msgSend(v247, "objectAtIndex:", v37);
                      v41 = (_QWORD *)objc_msgSend(v40, "entity");
                      v42 = v38;
                      if (v41 != v240)
                        v42 = objc_msgSend(v41, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v38, v240, 0);
                      v43 = (os_unfair_lock_s *)objc_msgSend((id)v253, "rowCache");
                      if (!v43)
                        break;
                      v44 = -[NSPersistentStoreCache rowForObjectID:afterTimestamp:](v43, v40, *(double *)&NSSQLDistantPastTimeInterval);
                      v45 = v44;
                      if (!v44)
                        break;
                      -[os_unfair_lock_s knownKeyValuesPointer](v44, "knownKeyValuesPointer");
                      v46 = (char *)-[os_unfair_lock_s _snapshot](v45, "_snapshot");
                      Class = object_getClass(v46);
                      if (*(_QWORD *)&v46[*((unsigned int *)object_getIndexedIvars(Class) + v42 + 19)])
                        goto LABEL_94;
LABEL_95:
                      objc_autoreleasePoolPop(v39);
                      if (v35 == ++v37)
                        goto LABEL_96;
                    }
                    if ((*(_DWORD *)(*(_QWORD *)(v253 + 136) + 72) & 0x1C) != 0x14)
                      goto LABEL_95;
                    v48 = (unsigned int *)objc_msgSend(*(id *)(v253 + 32), "objectRegisteredForID:", v40);
                    if (!v48)
                      goto LABEL_95;
                    v317[0] = 0;
                    v49 = _PF_InternalToOneRelationshipForeignKeyCache(v48, v42, v317);
                    v50 = v317[0] ? v49 : 0;
                    if (v50 != 1)
                      goto LABEL_95;
LABEL_94:
                    objc_msgSend(v243, "addObject:");
                    goto LABEL_95;
                  }
LABEL_96:
                  if (!objc_msgSend(v243, "count"))
                    goto LABEL_359;
                  v217 = objc_msgSend((id)v253, "manyToOnePrefetchRequestForRelationshipNamed:onEntity:", v220, v240);
                  *(_QWORD *)&v318 = CFSTR("objects");
                  v317[0] = objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", v243);
                  v34 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v317, &v318, 1);

LABEL_131:
                  v233 = -1;
                  v222 = -1;
LABEL_132:
                  if (v217)
                  {
                    v82 = (_QWORD *)objc_msgSend((id)v253, "createChildContextForNestedFetchRequest:");
                    v84 = v82;
                    if (v82)
                      objc_setProperty_nonatomic(v82, v83, v34, 216);
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v84, *(void **)(v253 + 24));
                    *(_DWORD *)(v84[17] + 72) = *(_DWORD *)(v84[17] + 72) & 0xFFFFFFE3 | 8;
                    v252 = (id)_newFetchedRowsForRequest(v84);
                    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v84, 0);

                    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) < 3)
                    {
                      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v253) >= 1)
                      {
                        objc_msgSend(v252, "count");
                        _NSCoreDataLog(4, (uint64_t)CFSTR("Prefetching with key '%@'.  Got %lu rows."), v91, v92, v93, v94, v95, v96, v220);
                      }
                    }
                    else
                    {
                      objc_msgSend(v252, "count");
                      _NSCoreDataLog(4, (uint64_t)CFSTR("Prefetching with request %@.  Got %lu rows with values: %@"), v85, v86, v87, v88, v89, v90, v217);
                    }
                  }
                  else
                  {
                    v252 = 0;
                  }
                  if (v256[24] == 7)
                  {
                    v244 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v247, "count"));
                    v238 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v247, "count"));
                    v97 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                    contexta = objc_alloc_init(MEMORY[0x1E0C99E08]);
                    v303 = 0u;
                    v304 = 0u;
                    v301 = 0u;
                    v302 = 0u;
                    v98 = objc_msgSend(v252, "countByEnumeratingWithState:objects:count:", &v301, v314, 16);
                    if (v98)
                    {
                      v99 = *(_QWORD *)v302;
                      do
                      {
                        for (k = 0; k != v98; ++k)
                        {
                          if (*(_QWORD *)v302 != v99)
                            objc_enumerationMutation(v252);
                          v101 = *(void **)(*((_QWORD *)&v301 + 1) + 8 * k);
                          v102 = objc_msgSend(v101, "objectID");
                          if (v102)
                            objc_msgSend(v97, "setObject:forKey:", v101, v102);
                          v103 = *((_QWORD *)v256 + 7);
                          if (v103)
                          {
                            if (*(_BYTE *)(v103 + 24) == 7)
                            {
                              v104 = (void *)objc_msgSend(v101, "newObjectIDForToOne:");
                              if (v104)
                              {
                                objc_msgSend(contexta, "setObject:forKey:", v101, v104);

                              }
                            }
                          }
                        }
                        v98 = objc_msgSend(v252, "countByEnumeratingWithState:objects:count:", &v301, v314, 16);
                      }
                      while (v98);
                    }
                    v299 = 0u;
                    v300 = 0u;
                    v297 = 0u;
                    v298 = 0u;
                    v105 = objc_msgSend(v247, "countByEnumeratingWithState:objects:count:", &v297, v313, 16);
                    if (v105)
                    {
                      v106 = *(_QWORD *)v298;
                      do
                      {
                        v107 = 0;
                        do
                        {
                          if (*(_QWORD *)v298 != v106)
                            objc_enumerationMutation(v247);
                          v108 = *(void **)(*((_QWORD *)&v297 + 1) + 8 * v107);
                          v109 = (void *)MEMORY[0x18D76B4E4]();
                          v110 = (os_unfair_lock_s *)objc_msgSend((id)v253, "rowCache");
                          v111 = -[NSPersistentStoreCache rowForObjectID:afterTimestamp:](v110, v108, *(double *)&NSSQLDistantPastTimeInterval);
                          if (v111)
                          {
                            v112 = -[os_unfair_lock_s newObjectIDForToOne:](v111, "newObjectIDForToOne:", v256);
                            v114 = (void *)v112;
                            if (v22)
                            {
                              v115 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v108, 0, 1);
                              if (v114)
                              {
                                v116 = _PFRetainedObjectIDCore((uint64_t)v22, v114, 0, 1);
LABEL_163:
                                if (v264)
                                {
                                  if (objc_msgSend(v116, "isFault"))
                                  {
                                    v113 = (void *)objc_msgSend(v97, "objectForKey:", v114);
                                    if (v113)
                                    {
                                      _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v116, (uint64_t)v22, v113, 0);
                                      objc_msgSend(v238, "addObject:", v116);
                                    }
                                  }
                                }
                                if (v116)
                                {
                                  v117 = v116[4];
                                  if ((v117 & 0x200) == 0)
                                  {
                                    v116[4] = v117 | 0x200;
                                    goto LABEL_170;
                                  }
                                }
                                else
                                {
LABEL_170:
                                  objc_msgSend(v244, "addObject:", v114, v113);
                                }
                                _PFFaultHandlerPreconnectRelationship((int)v259, v115, v261, v116);

LABEL_204:
                                goto LABEL_205;
                              }
                            }
                            else
                            {
                              v115 = 0;
                              v116 = 0;
                              if (v112)
                                goto LABEL_163;
                            }
                            _PFFaultHandlerPreconnectRelationship((int)v259, v115, v261, 0);
                            goto LABEL_204;
                          }
                          if ((*(_DWORD *)(*(_QWORD *)(v253 + 136) + 72) & 0x1C) != 0x14)
                            goto LABEL_205;
                          v118 = *((_QWORD *)v256 + 7);
                          if (v118 && *(_BYTE *)(v118 + 24) == 7)
                          {
                            v119 = (void *)objc_msgSend(contexta, "objectForKey:", v108);
                            v120 = v119;
                            if (!v119)
                              goto LABEL_205;
                            v121 = (id)objc_msgSend(v119, "objectID");
                            if (v22)
                            {
                              v122 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v108, 0, 1);
                              v123 = _PFRetainedObjectIDCore((uint64_t)v22, v121, 0, 1);
                            }
                            else
                            {
                              v122 = 0;
                              v123 = 0;
                            }
                            if (objc_msgSend(v123, "isFault"))
                            {
                              _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v123, (uint64_t)v22, v120, 0);
                              objc_msgSend(v238, "addObject:", v123);
                            }
                            if (v123)
                            {
                              v124 = v123[4];
                              if ((v124 & 0x200) == 0)
                              {
                                v123[4] = v124 | 0x200;
                                goto LABEL_183;
                              }
                            }
                            else
                            {
LABEL_183:
                              objc_msgSend(v244, "addObject:", v121);
                            }
                            _PFFaultHandlerPreconnectRelationship((int)v259, v122, v261, v123);

                            goto LABEL_205;
                          }
                          v125 = (unsigned int *)objc_msgSend(v22, "objectRegisteredForID:", v108);
                          if (v125)
                          {
                            v126 = objc_msgSend(v256, "slot");
                            v127 = *(_QWORD *)(v235 + 192);
                            v128 = (_QWORD *)objc_msgSend(v108, "entity");
                            v129 = v127 + v126;
                            if (v128 != v240)
                              v129 = objc_msgSend(v128, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v127 + v126);
                            v312[0] = 0;
                            v130 = _PF_InternalToOneRelationshipForeignKeyCache(v125, v129, v312);
                            if (v312[0])
                            {
                              if (v22)
                                v132 = _PFRetainedObjectIDCore((uint64_t)v22, v312[0], 0, 1);
                              else
                                v132 = 0;
                              if (v264)
                              {
                                if (objc_msgSend(v132, "isFault"))
                                {
                                  v131 = (void *)objc_msgSend(v97, "objectForKey:", v312[0]);
                                  if (v131)
                                  {
                                    _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v132, (uint64_t)v22, v131, 0);
                                    objc_msgSend(v238, "addObject:", v132);
                                  }
                                }
                              }
                              if (v132)
                              {
                                v133 = v132[4];
                                if ((v133 & 0x200) == 0)
                                {
                                  v132[4] = v133 | 0x200;
                                  goto LABEL_198;
                                }
                              }
                              else
                              {
LABEL_198:
                                objc_msgSend(v244, "addObject:", v312[0], v131);
                              }
                              _PFFaultHandlerPreconnectRelationship((int)v259, v125, v261, v132);

                              goto LABEL_205;
                            }
                            if (v130)
                              _PFFaultHandlerPreconnectRelationship((int)v259, v125, v261, 0);
                          }
LABEL_205:
                          objc_autoreleasePoolPop(v109);
                          ++v107;
                        }
                        while (v105 != v107);
                        v134 = objc_msgSend(v247, "countByEnumeratingWithState:objects:count:", &v297, v313, 16);
                        v105 = v134;
                      }
                      while (v134);
                    }

                    -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v244);
                    -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v238);

                  }
                  v232 = objc_msgSend(v252, "count");
                  if (v256[24] != 9)
                    goto LABEL_231;
                  v135 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v232);
                  v136 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v232);
                  v295 = 0u;
                  v296 = 0u;
                  v293 = 0u;
                  v294 = 0u;
                  v137 = objc_msgSend(v252, "countByEnumeratingWithState:objects:count:", &v293, v312, 16);
                  if (!v137)
                    goto LABEL_230;
                  v138 = *(_QWORD *)v294;
                  do
                  {
                    v139 = 0;
                    do
                    {
                      if (*(_QWORD *)v294 != v138)
                        objc_enumerationMutation(v252);
                      v140 = *(void **)(*((_QWORD *)&v293 + 1) + 8 * v139);
                      v141 = (void *)MEMORY[0x18D76B4E4]();
                      v142 = (void *)objc_msgSend(v140, "objectID");
                      if (v22)
                        v143 = _PFRetainedObjectIDCore((uint64_t)v22, v142, 0, 1);
                      else
                        v143 = 0;
                      if (v264 && objc_msgSend(v143, "isFault"))
                      {
                        _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v143, (uint64_t)v22, v140, 0);
                        objc_msgSend(v136, "addObject:", v143);
                      }
                      if (v143)
                      {
                        v144 = v143[4];
                        if ((v144 & 0x200) != 0)
                          goto LABEL_226;
                        v143[4] = v144 | 0x200;
                      }
                      objc_msgSend(v135, "addObject:", v142);
LABEL_226:

                      objc_autoreleasePoolPop(v141);
                      ++v139;
                    }
                    while (v137 != v139);
                    v145 = objc_msgSend(v252, "countByEnumeratingWithState:objects:count:", &v293, v312, 16);
                    v137 = v145;
                  }
                  while (v145);
LABEL_230:
                  -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v135);
                  -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v136);

LABEL_231:
                  v230 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v232);
                  v257 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  if (v254)
                    v225 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  else
                    v225 = 0;
                  if (v232)
                    Current = CFAbsoluteTimeGetCurrent();
                  contextb = objc_alloc_init(MEMORY[0x1E0C99E08]);
                  v219 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  if (v232)
                  {
                    v241 = 0;
                    v245 = 0;
                    v146 = 0;
                    v147 = 0;
                    v216 = v233;
                    while (2)
                    {
                      v234 = (void *)MEMORY[0x18D76B4E4]();
                      v239 = (unsigned int *)objc_msgSend(v252, "objectAtIndex:", v241);
                      v236 = objc_msgSend(v239, "objectID");
                      objc_msgSend(v230, "addObject:", v236);
                      if (!v231 || !v229 || *(_BYTE *)(v229 + 24) != 7)
                        goto LABEL_284;
                      objc_msgSend(contextb, "setObject:forKey:", v239, v236);
                      v228 = -[NSSQLRow foreignKeyForSlot:]((uint64_t)v239, v222);
                      if (v228 == v147)
                        goto LABEL_250;
                      if (!v147)
                      {
                        v147 = v228;
                        v146 = v239;
LABEL_250:
                        objc_msgSend(v257, "addObject:", v236);
                        if (v254)
                          goto LABEL_280;
                        goto LABEL_284;
                      }
                      if (v218)
                      {
                        do
                        {
                          v148 = (void *)objc_msgSend(v247, "objectAtIndex:", v245);
                          if (objc_msgSend(v148, "_referenceData64") == v147)
                          {
                            v149 = v148;
                          }
                          else
                          {
                            v149 = 0;
                            ++v245;
                          }
                        }
                        while (!v149);
                      }
                      else
                      {
                        v149 = (id)objc_msgSend(v146, "newObjectIDForToOne:", v229);
                      }
                      v226 = v149;
                      v150 = objc_msgSend((id)v253, "rowCache");
                      if (v150)
                        -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v150, v257, v225, v226, v261, Current);
                      objc_msgSend(v227, "removeObject:", v226);
                      if (v22)
                        v223 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v226, 0, 1);
                      else
                        v223 = 0;
                      v151 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v152 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v153 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v291 = 0u;
                      v292 = 0u;
                      v289 = 0u;
                      v290 = 0u;
                      v154 = objc_msgSend(v257, "countByEnumeratingWithState:objects:count:", &v289, v311, 16);
                      if (v154)
                      {
                        v155 = *(_QWORD *)v290;
                        do
                        {
                          v156 = 0;
                          do
                          {
                            if (*(_QWORD *)v290 != v155)
                              objc_enumerationMutation(v257);
                            v157 = *(void **)(*((_QWORD *)&v289 + 1) + 8 * v156);
                            v159 = (void *)MEMORY[0x18D76B4E4]();
                            if (v22)
                              v160 = _PFRetainedObjectIDCore((uint64_t)v22, v157, 0, 1);
                            else
                              v160 = 0;
                            if (v264)
                            {
                              if (objc_msgSend(v160, "isFault"))
                              {
                                v158 = (void *)objc_msgSend(contextb, "objectForKey:", v157);
                                if (v158)
                                {
                                  _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v160, (uint64_t)v22, v158, 0);
                                  objc_msgSend(v153, "addObject:", v160);
                                }
                              }
                            }
                            if (v160)
                            {
                              v161 = v160[4];
                              if ((v161 & 0x200) != 0)
                                goto LABEL_272;
                              v160[4] = v161 | 0x200;
                            }
                            objc_msgSend(v152, "addObject:", v157, v158);
LABEL_272:
                            objc_msgSend(v151, "addObject:", v160, v158);

                            objc_autoreleasePoolPop(v159);
                            ++v156;
                          }
                          while (v154 != v156);
                          v162 = objc_msgSend(v257, "countByEnumeratingWithState:objects:count:", &v289, v311, 16);
                          v154 = v162;
                        }
                        while (v162);
                      }
                      -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v152);
                      -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v153);

                      v163 = off_1E1EDAE50;
                      if (!v254)
                        v163 = off_1E1EDAE58;
                      v164 = (void *)objc_msgSend(objc_alloc(*v163), "initWithSource:destinations:forRelationship:inContext:", v223, v151, v261, v22);

                      _PFFaultHandlerPreconnectRelationship((int)v259, v223, v261, v164);
                      objc_msgSend(v219, "addObject:", v226);

                      if (v254)
                      {

                        v257 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                        v225 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                        objc_msgSend(v257, "addObject:", v236);
                        v146 = v239;
                        v147 = v228;
LABEL_280:
                        v165 = v239
                             ? *(unsigned int *)((char *)&v239[v216]
                                               + _NSSQLRowInstanceSize
                                               + (((unint64_t)v239[4] >> 1) & 0x1FFF8))
                             : 0;
                        objc_msgSend(v225, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v165));
                      }
                      else
                      {
                        v257 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                        objc_msgSend(v257, "addObject:", v236);
                        v147 = v228;
                        v146 = v239;
                      }
LABEL_284:
                      objc_autoreleasePoolPop(v234);
                      if (++v241 != (char *)v232)
                        continue;
                      break;
                    }
                    if (v147)
                    {
                      if (v218)
                      {
                        do
                        {
                          v166 = (void *)objc_msgSend(v247, "objectAtIndex:", v245);
                          if (objc_msgSend(v166, "_referenceData64") == v147)
                          {
                            v167 = v166;
                          }
                          else
                          {
                            v167 = 0;
                            ++v245;
                          }
                        }
                        while (!v167);
                      }
                      else
                      {
                        v167 = (id)objc_msgSend(v146, "newObjectIDForToOne:", v229);
                      }
                      v246 = v167;
                      v168 = objc_msgSend((id)v253, "rowCache");
                      if (v168)
                        -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v168, v257, v225, v246, v261, Current);
                      objc_msgSend(v227, "removeObject:", v246);
                      if (v22)
                        v242 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, v246, 0, 1);
                      else
                        v242 = 0;
                      v169 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v170 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v171 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                      v287 = 0u;
                      v288 = 0u;
                      v285 = 0u;
                      v286 = 0u;
                      v172 = objc_msgSend(v257, "countByEnumeratingWithState:objects:count:", &v285, v310, 16);
                      if (v172)
                      {
                        v173 = *(_QWORD *)v286;
                        do
                        {
                          v174 = 0;
                          do
                          {
                            if (*(_QWORD *)v286 != v173)
                              objc_enumerationMutation(v257);
                            v175 = *(void **)(*((_QWORD *)&v285 + 1) + 8 * v174);
                            v177 = (void *)MEMORY[0x18D76B4E4]();
                            if (v22)
                              v178 = _PFRetainedObjectIDCore((uint64_t)v22, v175, 0, 1);
                            else
                              v178 = 0;
                            if (v264)
                            {
                              if (objc_msgSend(v178, "isFault"))
                              {
                                v176 = (void *)objc_msgSend(contextb, "objectForKey:", v175);
                                if (v176)
                                {
                                  _PFFaultHandlerFulfillFault((uint64_t)v259, (uint64_t)v178, (uint64_t)v22, v176, 0);
                                  objc_msgSend(v171, "addObject:", v178);
                                }
                              }
                            }
                            if (v178)
                            {
                              v179 = v178[4];
                              if ((v179 & 0x200) != 0)
                                goto LABEL_315;
                              v178[4] = v179 | 0x200;
                            }
                            objc_msgSend(v170, "addObject:", v175, v176);
LABEL_315:
                            objc_msgSend(v169, "addObject:", v178, v176);

                            objc_autoreleasePoolPop(v177);
                            ++v174;
                          }
                          while (v172 != v174);
                          v180 = objc_msgSend(v257, "countByEnumeratingWithState:objects:count:", &v285, v310, 16);
                          v172 = v180;
                        }
                        while (v180);
                      }
                      -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, (uint64_t)v170);
                      -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, (uint64_t)v171);

                      v181 = off_1E1EDAE50;
                      if (!v254)
                        v181 = off_1E1EDAE58;
                      v182 = (void *)objc_msgSend(objc_alloc(*v181), "initWithSource:destinations:forRelationship:inContext:", v242, v169, v261, v22);

                      _PFFaultHandlerPreconnectRelationship((int)v259, v242, v261, v182);
                      objc_msgSend(v219, "addObject:", v246);

                    }
                  }
                  if (objc_msgSend(v227, "count"))
                  {
                    v183 = (void *)objc_msgSend(v227, "allObjects");
                    v184 = objc_msgSend(v183, "count");
                    if (v184)
                    {
                      for (m = 0; m != v184; ++m)
                      {
                        v186 = (void *)objc_msgSend(v183, "objectAtIndex:", m);
                        v187 = objc_msgSend((id)v253, "rowCache");
                        if (v187)
                        {
                          if (v254)
                            v188 = (void *)NSArray_EmptyArray;
                          else
                            v188 = 0;
                          -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v187, (void *)NSArray_EmptyArray, v188, v186, v261, Current);
                        }
                      }
                    }
                  }
                  if (objc_msgSend(v219, "count"))
                    v189 = (v213 & 0x1C) != 20;
                  else
                    v189 = 1;
                  if (!v189)
                  {
                    v190 = (void *)objc_msgSend(v247, "arrayByExcludingObjectsInArray:", v219);
                    v283 = 0u;
                    v284 = 0u;
                    v281 = 0u;
                    v282 = 0u;
                    v191 = objc_msgSend(v190, "countByEnumeratingWithState:objects:count:", &v281, v309, 16);
                    if (v191)
                    {
                      v192 = *(_QWORD *)v282;
                      do
                      {
                        v193 = 0;
                        do
                        {
                          if (*(_QWORD *)v282 != v192)
                            objc_enumerationMutation(v190);
                          if (v22)
                            v194 = (unsigned int *)_PFRetainedObjectIDCore((uint64_t)v22, *(void **)(*((_QWORD *)&v281 + 1) + 8 * v193), 0, 1);
                          else
                            v194 = 0;
                          v195 = off_1E1EDAE50;
                          if (!v254)
                            v195 = off_1E1EDAE58;
                          v196 = objc_alloc(*v195);
                          v197 = &NSOrderedSet_EmptyOrderedSet;
                          if (!v254)
                            v197 = &NSSet_EmptySet;
                          v198 = (void *)objc_msgSend(v196, "initWithSource:destinations:forRelationship:inContext:", v194, *v197, v261, v22);
                          _PFFaultHandlerPreconnectRelationship((int)v259, v194, v261, v198);

                          ++v193;
                        }
                        while (v191 != v193);
                        v199 = objc_msgSend(v190, "countByEnumeratingWithState:objects:count:", &v281, v309, 16);
                        v191 = v199;
                      }
                      while (v199);
                    }
                  }

                  if (v225)
                  v200 = (id *)objc_msgSend((id)v253, "createChildContextForNestedFetchRequest:", v217);
                  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v200, *(void **)(v253 + 24));
                  _prefetchForFetchRequest(v230, v211, v200);
                  if (v200)
                    v201 = objc_msgSend(v200[19], "allObjects");
                  else
                    v201 = 0;
                  -[NSSQLFetchRequestContext addObjectIDsToRegister:](v253, v201);
                  if (v200)
                    v202 = objc_msgSend(v200[20], "allObjects");
                  else
                    v202 = 0;
                  -[NSSQLFetchRequestContext addObjectsToAwaken:](v253, v202);
                  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v200, 0);

LABEL_357:
                  ++v224;
                }
                while (v224 != v214);
                v203 = objc_msgSend(v221, "countByEnumeratingWithState:objects:count:", &v265, v305, 16);
                v214 = v203;
              }
              while (v203);
            }
          }
        }
        objc_autoreleasePoolPop(v207);
        if (++v210 == v208)
        {
          v208 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v277, v308, 16);
          if (!v208)
            return (id)objc_msgSend(v205, "drain");
          goto LABEL_5;
        }
      }
      objc_msgSend(v221, "setObject:forKey:", a1, objc_msgSend(v215, "name"));
      goto LABEL_45;
    }
  }
  return result;
}

void sub_18A2A15E4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A15FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A161C(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    JUMPOUT(0x18A2A1624);
  _Unwind_Resume(a1);
}

void sub_18A2A162C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2A1638);
}

id _executeNewValuesForRelationshipFaultRequest(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  double v5;
  double v6;
  double Current;
  double v8;
  double v9;
  void *v10;
  NSSQLObjectFaultRequestContext *v12;
  NSSQLObjectFaultRequestContext *v13;
  void *v14;
  const char *v15;
  id v16;
  void *v17;
  id *v18;
  void *v19;
  uint64_t v20;
  NSError *error;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSFetchRequest *v26;
  uint64_t v27;
  _BOOL4 v28;
  id v29;
  uint64_t v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  _BOOL4 v44;
  NSExpressionDescription *v45;
  NSExpressionDescription *v46;
  uint64_t v47;
  NSSQLFetchRequestContext *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  NSSQLBindVariable *v54;
  int v55;
  _PFArray *v56;
  NSSQLFetchRequestContext *v57;
  uint64_t v58;
  NSSQLFetchRequestContext *v59;
  void *v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  CFIndex v67;
  const void **v68;
  _PFArray *v69;
  NSObject *v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  id v81;
  void *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  _QWORD v103[2];
  __CFString *v104;
  uint64_t v105;
  os_signpost_id_t v106;
  NSSQLiteStatementCache *v107;
  int v108;
  id v109;
  NSFetchRequest *v110;
  void *v111;
  uint8_t buf[8];
  _QWORD v113[8];
  CFRange v114;

  v113[6] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v111 = *(void **)(a1 + 96);
    v2 = *(void **)(a1 + 88);
    v3 = *(void **)(a1 + 32);
  }
  else
  {
    v2 = 0;
    v111 = 0;
    v3 = 0;
  }
  v4 = objc_msgSend(v2, "name");
  if ((objc_msgSend(v2, "isToMany") & 1) != 0)
  {
    objc_msgSend(v3, "stalenessInterval");
    v6 = v5;
    Current = CFAbsoluteTimeGetCurrent();
    v8 = Current - v6;
    if (v6 <= 0.0)
      v8 = *(double *)&NSSQLDistantPastTimeInterval;
    if (v6 == 0.0)
      v9 = *(double *)&NSSQLDistantFutureTimeInterval;
    else
      v9 = v8;
    v10 = (void *)-[NSPersistentStoreCache toManyInformationForSourceObjectID:forProperty:afterTimestamp:](objc_msgSend((id)a1, "rowCache", v8), v111, v2, v9);
    if (v10)
      return v10;
    v108 = objc_msgSend(v2, "isOrdered");
    v109 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
    if (a1)
    {
      v17 = *(void **)(a1 + 96);
      if ((objc_msgSend(v17, "isTemporaryID") & 1) == 0)
      {
        v18 = (id *)-[NSSQLCore entityForObjectID:](*(_QWORD *)(a1 + 8), v17);
        if (v18)
        {
          v19 = *(void **)(a1 + 88);
          goto LABEL_19;
        }
      }
    }
    else if ((objc_msgSend(0, "isTemporaryID") & 1) == 0)
    {
      v18 = (id *)-[NSSQLCore entityForObjectID:](0, 0);
      v17 = 0;
      v19 = 0;
      v56 = 0;
      if (!v18)
        goto LABEL_105;
LABEL_19:
      v20 = objc_msgSend(v18[5], "objectForKey:", objc_msgSend(v19, "name"));
      if (PFInstrumentsRecordingEnabled())
      {
        v113[0] = MEMORY[0x1E0C809B0];
        v113[1] = 3221225472;
        v113[2] = ___newFetchedPKsForRelationshipFaultRequest_block_invoke;
        v113[3] = &unk_1E1EE1B60;
        v113[4] = v17;
        v113[5] = v19;
        v106 = ___newFetchedPKsForRelationshipFaultRequest_block_invoke((uint64_t)v113);
      }
      else
      {
        v106 = 0;
      }
      if (a1)
        v23 = *(_QWORD *)(a1 + 24);
      else
        v23 = 0;
      v107 = -[NSSQLiteConnection statementCacheForEntity:](v23, v18);
      if (v107)
        v24 = (void *)-[NSMutableDictionary objectForKey:](v107->_toManyRelationshipStatementCache, "objectForKey:", objc_msgSend((id)v20, "name"));
      else
        v24 = 0;
      if ((unint64_t)objc_msgSend(v24, "count") >= 2)
      {
        v25 = objc_msgSend(v24, "objectAtIndex:", 0);
        if (v25)
        {
          v110 = (NSFetchRequest *)objc_msgSend(v24, "objectAtIndex:", 1);
          v26 = v110;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)v25, "bindVariables"), "objectAtIndex:", 0), "setInt64:", objc_msgSend(v17, "_referenceData64"));
          v27 = *(_QWORD *)(v25 + 48);
          v28 = v27 != 0;
          -[NSFetchRequest setIncludesPropertyValues:](v110, "setIncludesPropertyValues:", v27 != 0);
          v29 = (id)v25;
          v30 = 0;
          v31 = 0;
LABEL_69:
          LODWORD(v105) = v31;
          v55 = 0;
          v56 = 0;
          v107 = 0;
          v104 = (__CFString *)sel_userInfo;
          while (1)
          {
            if (v56 || v55 == 1)
            {

              if (((v105 | !v28) & 1) == 0)
              {
                v66 = -[_PFArray count](v56, "count");
                v67 = v66;
                if (v66)
                {
                  v68 = (const void **)PF_ALLOCATE_OBJECT_ARRAY(v66);
                  v114.location = 0;
                  v114.length = v67;
                  CFArrayGetValues((CFArrayRef)v56, v114, v68);
                  CFMergeSortArray();
                  v69 = -[_PFArray initWithObjects:count:andFlags:]([_PFArray alloc], "initWithObjects:count:andFlags:", v68, v67, 11);

                  v56 = v69;
                }
              }
              if (v106)
              {
                if (PFInstrumentsGetLog_logtoken != -1)
                  dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
                if (v106 != -1)
                {
                  v70 = PFInstrumentsGetLog_coreDataInstrumentsLog;
                  if (os_signpost_enabled((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog))
                  {
                    *(_WORD *)buf = 0;
                    _os_signpost_emit_with_name_impl(&dword_18A253000, v70, OS_SIGNPOST_INTERVAL_END, v106, "RelationshipFault", (const char *)&unk_18A57BACF, buf, 2u);
                  }
                }
              }
LABEL_105:
              if (-[_PFArray count](v56, "count"))
              {
                v71 = v56;
                if (v108)
                {
                  v72 = -[_PFArray count](v56, "count");
                  v110 = (NSFetchRequest *)v103;
                  v73 = MEMORY[0x1E0C80A78](v72);
                  v76 = (char *)v103 - v75;
                  v77 = 8 * v74;
                  if (v73 >= 0x201)
                  {
                    v76 = (char *)NSAllocateScannedUncollectable();
                    v79 = (char *)NSAllocateScannedUncollectable();
                  }
                  else
                  {
                    bzero((char *)v103 - v75, 8 * v74);
                    MEMORY[0x1E0C80A78](v78);
                    v79 = (char *)v103 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
                    bzero(v79, v77);
                    if (!v72)
                    {
LABEL_121:
                      v82 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v79, v72);
                      v81 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v76, v72);
                      if (v72 >= 0x201)
                      {
                        NSZoneFree(0, v76);
                        NSZoneFree(0, v79);
                      }
LABEL_123:
                      if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) < 2)
                      {
                        if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
                        {
                          v94 = objc_msgSend(v2, "name");
                          -[_PFArray count](v56, "count");
                          _NSCoreDataLog(4, (uint64_t)CFSTR("to-many relationship fault \"%@\" for objectID %@ fulfilled from database.  Got %d rows"), v95, v96, v97, v98, v99, v100, v94);
                        }
                      }
                      else
                      {
                        v87 = objc_msgSend(v2, "name");
                        -[_PFArray count](v56, "count");
                        _NSCoreDataLog(4, (uint64_t)CFSTR("to-many relationship fault \"%@\" for objectID %@ fulfilled from database.  Got %d rows with values: %@"), v88, v89, v90, v91, v92, v93, v87);
                      }

                      v101 = objc_msgSend((id)a1, "rowCache");
                      if (v101)
                        -[NSPersistentStoreCache registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:](v101, v81, v82, v111, v2, Current);
                      objc_msgSend(v109, "drain");
                      v102 = 0;
                      v22 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v81, v82, 0);

                      return v22;
                    }
                  }
                  v83 = 0;
                  do
                  {
                    v84 = -[_PFArray objectAtIndex:](v56, "objectAtIndex:", v83);
                    *(_QWORD *)&v76[8 * v83] = objc_msgSend(v84, "valueAtIndex:", 0);
                    v85 = objc_msgSend(v84, "valueAtIndex:", 1);
                    if (v85)
                      v86 = (void *)v85;
                    else
                      v86 = &unk_1E1F4B840;
                    *(_QWORD *)&v79[8 * v83++] = v86;
                  }
                  while (v72 != v83);
                  goto LABEL_121;
                }
              }
              else
              {
                if (v108)
                  v80 = &NSOrderedSet_EmptyOrderedSet;
                else
                  v80 = &NSSet_EmptySet;
                v71 = (void *)*v80;
              }
              v81 = v71;
              v82 = 0;
              goto LABEL_123;
            }
            if (v30)
              goto LABEL_77;
            v57 = [NSSQLFetchRequestContext alloc];
            v58 = a1 ? *(_QWORD *)(a1 + 8) : 0;
            v59 = -[NSSQLFetchRequestContext initWithRequest:context:sqlCore:](v57, "initWithRequest:context:sqlCore:", v110, 0, v58);
            -[NSSQLFetchRequestContext setIsFaultRequest:](v59, "setIsFaultRequest:", 1);
            -[NSSQLFetchRequestContext setFetchStatement:](v59, "setFetchStatement:", v25);
            if (v59)
              break;
            v30 = 0;
            if (a1)
            {
LABEL_78:
              v60 = *(void **)(a1 + 24);
              goto LABEL_79;
            }
LABEL_91:
            v60 = 0;
LABEL_79:
            -[NSSQLStoreRequestContext setConnection:](v30, v60);
            if (v30)
              v61 = *(_QWORD *)(v30 + 136);
            else
              v61 = 0;
            v62 = *(_DWORD *)(v61 + 72) & 0xFFFFFFE3;
            if (v28)
            {
              v63 = v62 | 0x10;
              *(_DWORD *)(v61 + 72) = v63;
              if (v25)
                v64 = *(_QWORD *)(v25 + 48);
              else
                v64 = 0;
              *(_QWORD *)(v61 + 40) = v64;
              v65 = v63 & 0xFFFFFFF2;
            }
            else
            {
              v65 = v62 | 4;
            }
            *(_DWORD *)(v61 + 72) = v65;
            v56 = _newFetchedRowsForRequest(v30);
            -[NSSQLStoreRequestContext setConnection:](v30, 0);

            v30 = 0;
            ++v55;
          }
          v59->_isUsingCachedStatement = 1;
          v30 = (uint64_t)v59;
LABEL_77:
          if (a1)
            goto LABEL_78;
          goto LABEL_91;
        }
      }
      v110 = objc_alloc_init(NSFetchRequest);
      -[NSFetchRequest setEntity:](v110, "setEntity:", objc_msgSend((id)objc_msgSend((id)v20, "destinationEntity"), "entityDescription"));
      -[NSFetchRequest setIncludesPropertyValues:](v110, "setIncludesPropertyValues:", 0);
      v105 = objc_msgSend(v17, "_referenceData64");
      if (v20 && *(_BYTE *)(v20 + 24) == 9)
      {
        v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F0]), "initWithObject:", objc_msgSend(*(id *)(v20 + 56), "name"));
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36E8]), "initWithKeyPath:", v32);

        v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3540]), "initWithObject:", v17);
        v35 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3518]), "initWithLeftExpression:rightExpression:modifier:type:options:", v34, v33, 0, 10, 0);
      }
      else
      {
        v36 = objc_msgSend(v17, "_referenceData64");
        v37 = objc_alloc(MEMORY[0x1E0CB36F0]);
        if (v20)
          v38 = *(void **)(v20 + 56);
        else
          v38 = 0;
        v39 = (void *)objc_msgSend(v37, "initWithObject:", objc_msgSend((id)objc_msgSend(v38, "foreignKey"), "name"));
        v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36E8]), "initWithKeyPath:", v39);

        v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", v36);
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3540]), "initWithObject:", v40);

        v35 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3518]), "initWithLeftExpression:rightExpression:modifier:type:options:", v34, v33, 0, 4, 0);
      }
      v41 = (void *)v35;

      -[NSFetchRequest setPredicate:](v110, "setPredicate:", v41);
      if (v20)
      {
        if (objc_msgSend((id)objc_msgSend((id)v20, "propertyDescription"), "isOrdered"))
        {
          v42 = *(unsigned __int8 *)(v20 + 24);
          if (v42 == 9)
          {
            if (*(_QWORD *)(v20 + 56) == v20)
            {
              *(_QWORD *)buf = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3928]), "initWithKey:ascending:", objc_msgSend(*(id *)(v20 + 56), "name"), 1);
              v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", buf, 1);

              -[NSFetchRequest setSortDescriptors:](v110, "setSortDescriptors:", v43);
              v42 = *(unsigned __int8 *)(v20 + 24);
              v31 = 1;
            }
            else
            {
              v31 = 0;
              v42 = 9;
            }
          }
          else
          {
            v31 = 0;
          }
          v44 = v42 == 9;
          goto LABEL_50;
        }
        v28 = 0;
        v31 = 0;
      }
      else
      {
        v31 = 0;
        v44 = 0;
        v28 = 0;
        if ((objc_msgSend(0, "isOrdered") & 1) != 0)
        {
LABEL_50:
          v45 = objc_alloc_init(NSExpressionDescription);
          -[NSPropertyDescription setName:](v45, "setName:", CFSTR("objectID"));
          -[NSExpressionDescription setExpressionResultType:](v45, "setExpressionResultType:", 2000);
          -[NSExpressionDescription setExpression:](v45, "setExpression:", objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForEvaluatedObject"));
          if (v44)
          {
            v104 = -[NSSQLManyToMany inverseOrderColumnName]((__CFString *)v20);
            v46 = objc_alloc_init(NSExpressionDescription);
            -[NSPropertyDescription setName:](v46, "setName:", CFSTR("orderKey"));
            -[NSExpressionDescription setExpressionResultType:](v46, "setExpressionResultType:", 200);
            -[NSExpressionDescription setExpression:](v46, "setExpression:", objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForFunction:arguments:", NSStringFromSelector(sel_inverseOrderKey_), objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", v104))));
          }
          else
          {
            if (v20 && (v47 = *(_QWORD *)(v20 + 56)) != 0)
              v104 = *(__CFString **)(v47 + 80);
            else
              v104 = 0;
            v46 = objc_alloc_init(NSExpressionDescription);
            -[NSPropertyDescription setName:](v46, "setName:", CFSTR("orderKey"));
            -[NSExpressionDescription setExpressionResultType:](v46, "setExpressionResultType:", 200);
            v103[1] = MEMORY[0x1E0CB35D0];
            -[NSExpressionDescription setExpression:](v46, "setExpression:", objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForFunction:arguments:", NSStringFromSelector(sel_inverseOrderKey_), objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", -[__CFString columnName](v104, "columnName")))));
          }
          -[NSFetchRequest setPropertiesToFetch:](v110, "setPropertiesToFetch:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v45, v46, 0));

          -[NSFetchRequest setResultType:](v110, "setResultType:", 2);
          v28 = 1;
          -[NSFetchRequest setIncludesPropertyValues:](v110, "setIncludesPropertyValues:", 1);
        }
      }
      v48 = [NSSQLFetchRequestContext alloc];
      if (a1)
        v49 = *(_QWORD *)(a1 + 8);
      else
        v49 = 0;
      v30 = -[NSSQLFetchRequestContext initWithRequest:context:sqlCore:](v48, "initWithRequest:context:sqlCore:", v110, 0, v49);
      objc_msgSend((id)v30, "setIsFaultRequest:", 1);
      v50 = (void *)objc_msgSend((id)v30, "fetchStatement");
      v25 = (uint64_t)v50;
      if (v30)
        *(_BYTE *)(v30 + 202) = 1;
      if (!v28)
      {
        v51 = _rawSQLForToManyFaultStatement(v50, 0, 0);
        if (v25)
        {
          v52 = v51;
          v53 = *(void **)(v25 + 32);
          if (v53 != v51)
          {

            *(_QWORD *)(v25 + 32) = objc_msgSend(v52, "copy");
          }
        }
        objc_msgSend((id)v30, "setFetchStatement:", v25);
      }
      if (v25)
        objc_msgSend(*(id *)(v25 + 16), "removeAllObjects");
      v54 = -[NSSQLBindVariable initWithInt64:sqlType:]([NSSQLBindVariable alloc], "initWithInt64:sqlType:", v105, 2);
      -[NSSQLiteStatement addBindVariable:](v25, v54);

      -[NSSQLiteStatementCache cacheFaultingStatement:andFetchRequest:forRelationship:]((uint64_t)v107, (void *)v25, (uint64_t)v110, (void *)v20);
      goto LABEL_69;
    }
    v56 = 0;
    goto LABEL_105;
  }
  v12 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:]((NSSQLObjectFaultRequestContext *)a1, (uint64_t)v111);
  v13 = v12;
  if (a1)
    v14 = *(void **)(a1 + 24);
  else
    v14 = 0;
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v12, v14);
  v16 = _executeNewRowValuesForObjectFaultRequest(v13);
  if (!v16)
  {
    if (v13)
    {
      error = v13->super._error;
      if (!a1)
      {
LABEL_24:
        v16 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      error = 0;
      if (!a1)
        goto LABEL_24;
    }
    objc_setProperty_nonatomic((id)a1, v15, error, 40);
    goto LABEL_24;
  }
LABEL_25:
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v13, 0);

  v22 = (id)objc_msgSend(v16, "valueForKey:", v4);
  if (!v22)
    return v22;
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v22, 0);
}

void sub_18A2A26F4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A2720(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A274C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A2A2750);
  objc_terminate();
}

void sub_18A2A275C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2A1914);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2A2778(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x18A2A27CCLL);
}

void sub_18A2A2788(_Unwind_Exception *a1, int a2)
{
  int v2;

  if (a2)
  {
    if (v2)
      JUMPOUT(0x18A2A2798);
    JUMPOUT(0x18A2A27C4);
  }
  _Unwind_Resume(a1);
}

void sub_18A2A27A0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2A27A4);
  JUMPOUT(0x18A2A2754);
}

void sub_18A2A27A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x18A2A27C4);
}

void sub_18A2A27B8(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;
  const char *v4;
  id v5;

  if (a2)
  {
    if (a2 == 3)
    {
      v3 = (void *)objc_msgSend(objc_begin_catch(exc_buf), "errorObjectWithUserInfo:", 0);
      if (v2)
        objc_setProperty_nonatomic(v2, v4, v3, 40);
      objc_end_catch();
      JUMPOUT(0x18A2A25E8);
    }
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A2A25F0);
    }
    v5 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2A2838(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2A280CLL);
  }
  _Unwind_Resume(a1);
}

os_signpost_id_t ___newFetchedPKsForRelationshipFaultRequest_block_invoke(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (PFInstrumentsGetLog_logtoken != -1)
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
  v2 = os_signpost_id_generate((os_log_t)PFInstrumentsGetLog_coreDataInstrumentsLog);
  if (PFInstrumentsGetLog_logtoken != -1)
    dispatch_once(&PFInstrumentsGetLog_logtoken, &__block_literal_global_23);
  v3 = PFInstrumentsGetLog_coreDataInstrumentsLog;
  kdebug_trace();
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = objc_msgSend(*(id *)(a1 + 40), "name");
    v7 = 138412546;
    v8 = v4;
    v9 = 2112;
    v10 = v5;
    _os_signpost_emit_with_name_impl(&dword_18A253000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "RelationshipFault", "%@ - %@", (uint8_t *)&v7, 0x16u);
  }
  return v2;
}

unint64_t sortRawRowsForOrderedFaulting(id *a1, void **a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = objc_msgSend((id)objc_msgSend(*a1, "valueAtIndex:", 1), "longLongValue");
  v4 = objc_msgSend((id)objc_msgSend(v2, "valueAtIndex:", 1), "longLongValue");
  return (v3 > v4) - (unint64_t)(v3 < v4);
}

void _PFFaultHandlerPreconnectRelationship(int a1, unsigned int *a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char **v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = _PFEntityForManagedObject(a2);
  v8 = objc_msgSend(a3, "entity");
  v9 = objc_msgSend(a3, "_entitysReferenceID");
  v10 = objc_msgSend(a3, "isToMany");
  if (v7 != (id)v8)
    v9 = objc_msgSend(v7, "_offsetRelationshipIndex:fromSuperEntity:andIsToMany:", v9, v8, v10);
  v11 = _kvcPropertysPrimitiveSetters((uint64_t)v7);
  v12 = *(_QWORD *)(v11 + 8 * v9);
  v13 = a2[4];
  if ((v13 & 0x38000) == 0x8000)
  {
    v14 = (_QWORD *)*((_QWORD *)a2 + 6);
    if (v14)
    {
      v15 = 0;
      if ((v13 & 0x2000) == 0 && *v14)
      {
        v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", objc_msgSend(a3, "name"), 0);
        v15 = (void *)v11;
      }
    }
    else
    {
      v15 = 0;
    }
    _PFFaultHandlerFulfillPartialFault(v11, a2, *((_QWORD *)a2 + 4), 0, (void *)NSArray_EmptyArray, (uint64_t)v15, MEMORY[0x1E0C9AA60]);

    v13 = a2[4];
  }
  v16 = a2[5];
  if ((_DWORD)v16)
    v17 = (char *)a2 + v16;
  else
    v17 = 0;
  v18 = &v17[-((v13 >> 22) & 0x3FC)];
  v19 = v18[v9 >> 3];
  v20 = 1 << (v9 & 7);
  if ((v20 & v19) == 0)
  {
    v18[v9 >> 3] = v19 | v20;
    if ((v10 & 1) != 0)
    {
      objc_msgSend(a3, "isOrdered");
    }
    else
    {
      if ((a2[4] & 0x80) != 0 || !*((_QWORD *)a2 + 4))
        return;
      if (!a4)
      {
        v28 = (char **)a2;
        v29 = v9;
        v30 = 0;
        goto LABEL_19;
      }
    }
    v28 = (char **)a2;
    v29 = v9;
    v30 = a4;
LABEL_19:
    _PF_Handler_Primitive_SetProperty(v28, v29, v30, 0, v12);
    return;
  }
  if (*(_QWORD *)(_kvcPropertysPrimitiveGetters((unint64_t *)v7) + 8 * v9))
    v27 = (void *)_NSGetUsingKeyValueGetter();
  else
    snapshot_get_value_as_object(*((id **)a2 + 3), v9, v21, v22, v23, v24, v25, v26);
  v31 = v27;
  if ((_DWORD)v10)
  {
    if (v27)
    {
      if (objc_msgSend(v27, "isFault"))
        objc_msgSend(v31, "willReadWithContents:", a4);
      return;
    }
    v39 = objc_msgSend(a3, "name");
    objc_msgSend(a2, "objectID");
    _NSCoreDataLog(1, (uint64_t)CFSTR("During prefetching, materialized to-many relationship '%@' on object %@ was null"), v40, v41, v42, v43, v44, v45, v39);
LABEL_34:
    __break(1u);
    return;
  }
  if (v27)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v32 = objc_msgSend(a3, "name");
      objc_msgSend(a2, "objectID");
      _NSCoreDataLog(1, (uint64_t)CFSTR("During prefetching, materialized to-one relationship '%@' on object %@ was not a managed object but instead %@"), v33, v34, v35, v36, v37, v38, v32);
      goto LABEL_34;
    }
  }
}

void _PF_Handler_Primitive_SetProperty(char **a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_setValue_forKey_);
  _PF_CopyOnWrite_Snapshot(a1);
  if (a5)
  {
    _NSSetUsingKeyValueSetter();
  }
  else
  {
    v9 = a3;
    snapshot_set_value_as_object(a1[3], a2, v9, v10, v11, v12, v13, v14);
  }
  v15 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v15)
    v16 = (char *)a1 + v15;
  else
    v16 = 0;
  v17 = &v16[-(((unint64_t)*((unsigned int *)a1 + 4) >> 22) & 0x3FC)];
  v17[a2 >> 3] |= 1 << (a2 & 7);
}

uint64_t sortColumnsByType(void *a1, void *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v4 = objc_msgSend(a1, "sqlType");
  v5 = objc_msgSend(a2, "sqlType");
  v6 = objc_msgSend(a1, "propertyType");
  switch(v6)
  {
    case 2:
      v7 = 0;
      break;
    case 6:
      v7 = 2;
      break;
    case 5:
      v7 = 1;
      break;
    default:
      if ((v4 - 1) > 0x10)
        v7 = 140;
      else
        v7 = qword_18A509EF0[(char)(v4 - 1)];
      break;
  }
  v8 = objc_msgSend(a2, "propertyType");
  switch(v8)
  {
    case 2:
      v9 = 0;
      break;
    case 6:
      v9 = -2;
      break;
    case 5:
      v9 = -1;
      break;
    default:
      if ((v5 - 1) > 0x10)
        v9 = -140;
      else
        v9 = qword_18A509F78[(char)(v5 - 1)];
      break;
  }
  return v9 + v7;
}

NSKnownKeysDictionary *_newObjectGraphStyleForSQLRow(void *a1, void *a2)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  NSKnownKeysDictionary *v7;
  uint64_t v8;
  NSKnownKeysDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  void *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSKnownKeysDictionary *v32;

  if (!a1)
    return (NSKnownKeysDictionary *)objc_alloc_init(MEMORY[0x1E0C99D80]);
  v4 = objc_msgSend(a2, "entity");
  v5 = (_QWORD **)objc_msgSend(a2, "managedObjectContext");
  if (a2)
    v6 = _insertion_fault_handler;
  else
    v6 = 0;
  v7 = [NSKnownKeysDictionary alloc];
  if (v4)
    v8 = *(_QWORD *)(v4 + 104);
  else
    v8 = 0;
  v10 = -[NSKnownKeysDictionary initWithSearchStrategy:](v7, "initWithSearchStrategy:", v8);
  v11 = -[NSKnownKeysDictionary values](v10, "values");
  v12 = objc_msgSend(a1, "knownKeyValuesPointer");
  v32 = v10;
  v13 = -[NSKnownKeysMappingStrategy keys](-[NSKnownKeysDictionary mapping](v10, "mapping"), "keys");
  v14 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v15 = *(_QWORD **)(v4 + 112);
  v16 = v15[6];
  v17 = v15[7];
  if (v16 < v17 + v16)
  {
    v30 = v13;
    v31 = v11;
    v18 = (_QWORD *)(v11 + 8 * v16);
    v19 = (_QWORD *)(v13 + 8 * v16);
    v20 = (void **)(v12 + 8 * v16);
    do
    {
      if (v12)
        v21 = *v20;
      else
        v21 = (void *)objc_msgSend(a1, "valueForKey:", *v19);
      v22 = (id)v14;
      if (v21)
        v22 = v21;
      *v18++ = v22;
      ++v19;
      ++v20;
      --v17;
    }
    while (v17);
    v15 = *(_QWORD **)(v4 + 112);
    v13 = v30;
    v11 = v31;
  }
  v23 = v15[12];
  v24 = v15[13];
  if (v23 < v24 + v23)
  {
    v25 = (_QWORD *)(v11 + 8 * v23);
    v26 = (_QWORD *)(v13 + 8 * v23);
    v27 = (void **)(v12 + 8 * v23);
    do
    {
      if (v12)
        v28 = *v27;
      else
        v28 = (void *)objc_msgSend(a1, "valueForKey:", *v26);
      v29 = (id)v14;
      if (v28)
      {
        if ((_BYTE)z9dsptsiQ80etb9782fsrs98bfdle88)
          v29 = v28;
        else
          v29 = -[NSManagedObjectContext _retainedObjectWithID:optionalHandler:withInlineStorage:](v5, v28, v6);
      }
      *v25++ = v29;
      ++v26;
      ++v27;
      --v24;
    }
    while (v24);
  }
  return v32;
}

#error "18A2A4394: call analysis failed (funcsize=107)"

void sub_18A2A4410(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2A4268);
  }
  JUMPOUT(0x18A2A421CLL);
}

void sub_18A2A4E74(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2A4C58);
  }
  JUMPOUT(0x18A2A4C30);
}

void sub_18A2A4EA8()
{
  objc_end_catch();
  JUMPOUT(0x18A2A4C30);
}

void sub_18A2A4EC0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2A4C2CLL);
}

void _performRunLoopAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v4;
  const __CFArray *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  id *WeakRetained;
  id *v12;
  id *v13;

  if (!a3)
    return;
  v4 = (os_unfair_lock_s *)(a3 + 12);
  os_unfair_lock_lock_with_options();
  if ((*(_DWORD *)(a3 + 20) & 0x80000000) != 0)
  {
    os_unfair_lock_unlock(v4);
    return;
  }
  *(_DWORD *)(a3 + 20) = 0;
  os_unfair_lock_unlock(v4);
  os_unfair_lock_lock_with_options();
  v6 = *(_QWORD *)(a3 + 24) && (v5 = *(const __CFArray **)(a3 + 32)) != 0 && CFArrayGetCount(v5) > 0;
  os_unfair_lock_unlock(v4);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 40), (v8 & 0x108) != 0))
  {
    v9 = 0;
    goto LABEL_10;
  }
  if ((v8 & 0x200) == 0)
  {
    v9 = v8 & 1;
LABEL_10:
    if ((v6 | v9) != 1)
      return;
    goto LABEL_16;
  }
  v9 = 1;
LABEL_16:
  v10 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  WeakRetained = (id *)+[_PFWeakReference weakReferenceWithObject:]((uint64_t)_PFWeakReference, v7);
  if (WeakRetained)
    WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 1);
  v12 = WeakRetained;
  if (v12
    && (v13 = v12, (*((_BYTE *)v12 + 41) & 1) == 0)
    && (v9 & (objc_msgSend(v12, "_isDeallocating") ^ 1) & 1) != 0
    && ((_PF_USE_IOS_PLATFORM & 1) != 0
     || !objc_msgSend((id)objc_msgSend(v13, "undoManager"), "groupsByEvent")))
  {
    objc_msgSend(v13, "processPendingChanges");
  }
  else
  {
    -[_PFManagedObjectReferenceQueue _processReferenceQueue:](a3, 0);
  }
  objc_msgSend(v10, "drain");
}

void sub_18A2A7A0C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A7B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A7EF4(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  int v3;
  BOOL v5;
  id v6;
  const char *v7;
  void *v8;
  const char *v9;

  if (!a2)
    _Unwind_Resume(exception_object);
  v5 = v3 != 0;
  if (a2 == 3)
  {
    v6 = objc_begin_catch(exception_object);
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v6 = objc_begin_catch(exception_object);
    if (a2 != 2)
    {
      v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Caught a non-object exception in the connectionManager"), 0);
      if (v2)
        objc_setProperty_nonatomic(v2, v9, v8, 48);
      objc_end_catch();
      JUMPOUT(0x18A2A7DD0);
    }
    if (!v2)
    {
LABEL_8:
      objc_end_catch();
      if (!v5)
        JUMPOUT(0x18A2A7DF4);
      JUMPOUT(0x18A2A7DDCLL);
    }
  }
  objc_setProperty_nonatomic(v2, v7, v6, 48);
  goto LABEL_8;
}

void sub_18A2A9AB4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  char v12;
  int v13;

  if (a2)
  {
    if ((v12 & 1) != 0)
      objc_end_catch();
    if (v13)
      objc_end_catch();
    objc_begin_catch(exc_buf);
    *(_DWORD *)(v11 + 312) &= ~0x80u;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2A9C44(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2A9C50(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A2A9C54);
  objc_terminate();
}

_PFArray *_newFetchedRowsForRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v14;
  unsigned int v15;
  double Current;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  void *v41;
  void *v42;
  int v43;
  id v44;
  double v45;
  uint64_t v46;
  unsigned int v47;
  double v48;
  int v49;
  unsigned int v50;
  double *Initialize;
  void *v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  void *v61;
  char v62;
  uint64_t v63;
  void *v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const __CFString *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _PFArray *v81;
  _PFArray *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  int v91;
  int v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  void *v103;
  _PFArray *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t i;
  uint64_t v111;
  void *v112;
  void *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  const __CFString *v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const __CFString *v136;
  size_t v137;
  uint64_t j;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  char *v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  void *v163;
  int v164;
  void *v165;
  uint64_t v166;
  int v167;
  char *v168;
  id v169;
  id v170;
  int v171;
  _QWORD *v172;
  int v173;
  int v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  unsigned int *v178;
  int v179;
  uint64_t v180;
  _QWORD v181[5];
  int v182;
  int v183;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _QWORD v189[5];
  int v190;
  int v191;
  BOOL v192;
  id v193[16];
  _QWORD v194[3];

  v194[1] = *MEMORY[0x1E0C80C00];
  if (!a1 || !*(_QWORD *)(a1 + 120))
    return (_PFArray *)(id)NSArray_EmptyArray;
  v2 = *(_QWORD *)(a1 + 136);
  v3 = objc_msgSend((id)a1, "request");
  v175 = a1;
  v4 = objc_msgSend((id)a1, "fetchStatement");
  if (!v4 || *(_BYTE *)(v4 + 40))
  {
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
    {
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 2)
        _NSCoreDataLog(4, (uint64_t)CFSTR("logically false fetch request %@ short circuits."), v5, v6, v7, v8, v9, v10, v3);
      if (*(_BYTE *)(a1 + 80))
        v11 = CFSTR("total fetch execution time: \x1B[31m%.4f\x1B[0ms for %d rows.");
      else
        v11 = CFSTR("total fetch execution time: %.4fs for %d rows.");
      _NSCoreDataLog(4, (uint64_t)v11, v5, v6, v7, v8, v9, v10, 0);
    }
    return (_PFArray *)(id)NSArray_EmptyArray;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    if ((*(_DWORD *)(v2 + 72) & 1) == 0 && (*(_DWORD *)(v2 + 72) & 0x18) != 16)
      return newFetchedRowsForFetchPlan_MT((_QWORD *)a1);
  }
  v14 = *(_QWORD *)(a1 + 136);
  v161 = (_QWORD *)objc_msgSend((id)a1, "fetchStatement");
  v172 = *(_QWORD **)(a1 + 24);
  v177 = v14;
  if ((*(_DWORD *)(v14 + 72) & 2) != 0)
    v15 = 4096;
  else
    v15 = 512;
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) < 1)
    Current = 0.0;
  else
    Current = CFAbsoluteTimeGetCurrent();
  v17 = v14;
  if (*(_DWORD *)(v14 + 16))
    v18 = *(_DWORD *)(v14 + 16);
  else
    v18 = -1;
  v19 = +[NSSQLCore bufferedAllocationsOverride](NSSQLCore, "bufferedAllocationsOverride");
  if (v19 < 1
    || (*(_DWORD *)(v177 + 72) & 0x1C) != 0x10
    || (v20 = *(_QWORD *)(v177 + 40)) != 0 && (v17 = v177, *(_DWORD *)(v20 + 184) >> 3 >= 0x84Du))
  {
    v21 = objc_msgSend(*(id *)(v17 + 8), "allocationType") == 1 && (*(_DWORD *)(v17 + 72) & 0x1C) == 16;
  }
  else
  {
    v21 = 1;
  }
  objc_opt_self();
  if (v19 == 2 && (*(_DWORD *)(v177 + 72) & 0x1C) == 0x10)
  {
    v22 = *(_QWORD *)(v177 + 40);
    if (v22)
    {
      v179 = 1;
      if (_CoreData_debugVMBufferAllocations || *(_DWORD *)(v22 + 184) >> 3 < 0x84Du)
        goto LABEL_46;
      goto LABEL_44;
    }
  }
  else if (!_CoreData_debugVMBufferAllocations)
  {
LABEL_44:
    v23 = objc_msgSend(*(id *)(v177 + 8), "allocationType") == 2;
    goto LABEL_45;
  }
  v23 = 1;
LABEL_45:
  v179 = v23;
LABEL_46:
  objc_opt_self();
  v30 = v19 != 3 && _CoreData_debugOneBufferAllocations == 0;
  v31 = v30;
  if (!v30 && v179)
    _NSCoreDataLog(1, (uint64_t)CFSTR("VM Memory is already One Buffer Row that grows!!!"), v24, v25, v26, v27, v28, v29, v156);
  objc_opt_self();
  v38 = v19 != 4 && _CoreData_debuguseManyResultSetsAllocations == 0;
  v39 = !v38;
  v40 = v179;
  if (v38)
    v40 = 0;
  if (v40 == 1)
    _NSCoreDataLog(1, (uint64_t)CFSTR("VM Memory does not support multiple result sets!!!"), v32, v33, v34, v35, v36, v37, v156);
  if ((*(_DWORD *)(v177 + 72) & 2) == 0 && (*(_DWORD *)(v177 + 72) & 0x18) != 0x10)
    objc_msgSend(*(id *)(v177 + 8), "_disablePersistentStoreResultCaching");
  v164 = *(unsigned __int8 *)(v175 + 202);
  v176 = (void *)objc_msgSend(*(id *)(v177 + 8), "_asyncResultHandle");
  v41 = (void *)objc_msgSend(v176, "progress");
  v42 = v41;
  if (v41)
  {
    v43 = objc_msgSend(v41, "totalUnitCount");
    v171 = v43 & ~(v43 >> 31);
  }
  else
  {
    v171 = 0;
  }
  v173 = v179 | v21;
  v44 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  v170 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((*(_DWORD *)(v177 + 72) & 0x1C) == 0xC)
    v169 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  else
    v169 = 0;
  -[NSSQLiteConnection selectRowsWithStatement:cached:](v172, v161, v164 != 0);
  v45 = CFAbsoluteTimeGetCurrent();
  v167 = v31;
  v165 = v44;
  v174 = 0;
  v46 = 0;
  v47 = 0;
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) <= 0)
    v48 = 0.0;
  else
    v48 = v45 - Current;
  v49 = v39 | v173 ^ 1;
LABEL_78:
  v178 = 0;
  v50 = v18;
  do
  {
    if (v173)
    {
      Initialize = (double *)v178;
      if (!v178)
      {
        v52 = *(void **)(v177 + 8);
        if (v179)
          Initialize = (double *)bufferResultSetAllocateWithVMMemory(objc_msgSend(v52, "allocationSize"), objc_msgSend(*(id *)(v177 + 8), "purgeableResult"));
        else
          Initialize = (double *)bufferResultSetAllocateInitialize(objc_msgSend(v52, "allocationSize"), v177);
        Initialize[1] = v45;
      }
    }
    else
    {
      Initialize = (double *)fetchResultSetAllocateInitialize(v47, (*(_DWORD *)(v177 + 72) >> 5) & 1);
      Initialize[1] = v45;
      *(_DWORD *)Initialize = v174;
    }
    v178 = (unsigned int *)Initialize;
    if (v50 >= v15)
      v53 = v15;
    else
      v53 = v50;
    if (v50 >= v15)
      v18 = v50 - v15;
    else
      v18 = 0;
    *(_DWORD *)(v177 + 16) = v53;
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) < 1)
      v54 = 0.0;
    else
      v54 = CFAbsoluteTimeGetCurrent();
    if (v176 && objc_msgSend(v176, "_isCancelled"))
    {
      v174 += v46;
      v55 = 12;
      if (v173)
        v55 = 10;
      v56 = (v178[v55] & 1) == 0;
LABEL_106:
      v56 &= ~objc_msgSend(v176, "_isCancelled");
      goto LABEL_107;
    }
    if (v173)
      v57 = -[NSSQLiteConnection fetchBufferResultSet:usingFetchPlan:]((uint64_t)v172, (uint64_t)v178, v177);
    else
      v57 = -[NSSQLiteConnection fetchResultSet:usingFetchPlan:]((uint64_t)v172, (uint64_t)v178, v177);
    v46 = v57;
    v174 += v57;
    v58 = 12;
    if (v173)
      v58 = 10;
    v56 = (v178[v58] & 1) == 0;
    if (v176)
      goto LABEL_106;
LABEL_107:
    if (v42 && (objc_msgSend(v42, "isCancelled") & 1) == 0)
    {
      v59 = v171;
      v60 = 2 * v171;
      if (v174 >= 2 * v171)
        v60 = v174 + 1;
      v61 = *(void **)(v177 + 48);
      v189[0] = MEMORY[0x1E0C809B0];
      v189[1] = 3221225472;
      v189[2] = ___newFetchedRowsForFetchPlan_ST_block_invoke;
      v189[3] = &unk_1E1EE0328;
      v189[4] = v42;
      if (v171 > 0 && v174 >= v171)
        v59 = v60;
      v192 = v171 > 0 && v174 >= v171;
      v171 = v59;
      v190 = v59;
      v191 = v174;
      objc_msgSend(v61, "performBlock:", v189);
    }
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) >= 1)
      v48 = v48 + CFAbsoluteTimeGetCurrent() - v54;
    if (v49)
    {
      if (v46)
      {
        v193[0] = 0;
        if (v173)
        {
          v63 = _prepareLargeDictionaryResults(v178, v175, 1);
        }
        else if ((*(_DWORD *)(v177 + 72) & 0x18) == 0x10)
        {
          v63 = _prepareDictionaryResults((uint64_t)v178, v175);
        }
        else
        {
          v63 = _prepareResultsFromResultSet_0((uint64_t)v178, (uint64_t *)v193, v175);
        }
        v64 = (void *)v63;
        objc_msgSend(v170, "addObject:", v63);
        if (v193[0])
          objc_msgSend(v169, "addObject:");

        if ((v173 & 1) == 0)
        {
LABEL_133:
          v65 = v178[4];
          v66 = v178[5];
          fetchResultSetDeallocate((uint64_t)v178);
          v47 = v66 * v65;
        }
      }
      else if ((v173 & 1) == 0)
      {
        goto LABEL_133;
      }
      if (v50 > v15)
        v67 = v56;
      else
        v67 = 0;
      if ((v67 & 1) == 0)
      {
        v178 = 0;
        goto LABEL_142;
      }
      goto LABEL_78;
    }
    if (v50 > v15)
      v62 = v56;
    else
      v62 = 0;
    v50 = v18;
  }
  while ((v62 & 1) != 0);
  v68 = _prepareLargeDictionaryResults(v178, v175, 1);
  v69 = (void *)v68;
  if (((v167 | v179) & 1) == 0)
  {
    v194[0] = v68;
    v70 = _prepareBufferedDictionaryResult((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v194, 1), v175);

    v69 = (void *)v70;
  }
  objc_msgSend(v170, "addObject:", v69);

LABEL_142:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v172, v164 != 0);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) >= 1)
  {
    if (*(_BYTE *)(v175 + 80))
      v77 = CFSTR("sql connection fetch time: \x1B[31m%.4f\x1B[0ms");
    else
      v77 = CFSTR("sql connection fetch time: %.4fs");
    _NSCoreDataLog(4, (uint64_t)v77, v71, v72, v73, v74, v75, v76, *(uint64_t *)&v48);
  }
  v78 = objc_msgSend(v170, "count");
  v180 = *(_QWORD *)(v177 + 48);
  v79 = *(_QWORD *)(v175 + 128);
  if (v176 && (objc_msgSend(v176, "_isCancelled") & 1) != 0)
  {
    v174 = 0;
    goto LABEL_152;
  }
  v163 = v42;
  if (v78 == 1)
  {
    v104 = (_PFArray *)(id)objc_msgSend(v170, "objectAtIndex:", 0);
    if (v169)
    {
      v105 = (void *)objc_msgSend(v169, "objectAtIndex:", 0);
      v80 = malloc_type_malloc(-[_PFArray count](v104, "count"), 0x100004077774924uLL);
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      v106 = -[_PFArray countByEnumeratingWithState:objects:count:](v104, "countByEnumeratingWithState:objects:count:", &v185, v193, 16);
      if (v106)
      {
        v107 = 0;
        v108 = 0;
        v109 = *(_QWORD *)v186;
        do
        {
          for (i = 0; i != v106; ++i)
          {
            if (*(_QWORD *)v186 != v109)
              objc_enumerationMutation(v104);
            v111 = *(_QWORD *)(*((_QWORD *)&v185 + 1) + 8 * i);
            v80[(v108 + i)] = (*(_DWORD *)(v111 + 16) & 0x18000) == 0x8000;
            _PFFaultHandlerFulfillFault(v79, v111, v180, (void *)objc_msgSend(v105, "objectAtIndex:", v107 + i), 0);
          }
          v106 = -[_PFArray countByEnumeratingWithState:objects:count:](v104, "countByEnumeratingWithState:objects:count:", &v185, v193, 16);
          v107 += i;
          v108 += i;
        }
        while (v106);
      }
      v82 = v104;
      v42 = v163;
    }
    else
    {
      v80 = 0;
      v82 = v104;
    }
  }
  else
  {
    if (!v78)
    {
LABEL_152:
      v80 = 0;
      v81 = (_PFArray *)(id)NSArray_EmptyArray;
      goto LABEL_153;
    }
    if ((v173 & 1) != 0)
    {
      v80 = 0;
      v81 = (_PFArray *)_prepareBufferedDictionaryResult(v170, v175);
LABEL_153:
      v82 = v81;
    }
    else
    {
      v137 = 0;
      for (j = 0; j != v78; ++j)
        v137 += objc_msgSend((id)objc_msgSend(v170, "objectAtIndex:", j), "count");
      v139 = malloc_type_malloc(v137, 0x100004077774924uLL);
      v140 = v137;
      v141 = v139;
      v158 = v140;
      v159 = (char *)PF_ALLOCATE_OBJECT_ARRAY(v140);
      v142 = objc_msgSend(v170, "objectAtIndex:", 0);
      v143 = 0x1EDF5B000uLL;
      if (v142)
        v157 = *(_BYTE *)(v142 + 32) & 0x3B;
      else
        v157 = 0;
      v144 = 0;
      v145 = 0;
      v146 = v159;
      v160 = v78;
      do
      {
        v147 = (void *)objc_msgSend(v170, "objectAtIndex:", v145);
        objc_msgSend(v147, "getObjects:", v146);
        v148 = objc_msgSend(v147, "count");
        if (v147)
        {
          *((_BYTE *)v147 + *(int *)(v143 + 3656)) &= ~2u;
          *((_BYTE *)v147 + *(int *)(v143 + 3656)) &= ~4u;
        }
        if (v169)
        {
          v166 = v148;
          v168 = v146;
          v149 = (void *)objc_msgSend(v169, "objectAtIndex:", v145);
          v187 = 0u;
          v188 = 0u;
          v185 = 0u;
          v186 = 0u;
          v150 = objc_msgSend(v147, "countByEnumeratingWithState:objects:count:", &v185, v193, 16);
          if (v150)
          {
            v162 = v145;
            v151 = 0;
            v152 = *(_QWORD *)v186;
            do
            {
              v153 = 0;
              v154 = v144;
              do
              {
                if (*(_QWORD *)v186 != v152)
                  objc_enumerationMutation(v147);
                v155 = *(_QWORD *)(*((_QWORD *)&v185 + 1) + 8 * v153);
                v141[(v154 + v153)] = (*(_DWORD *)(v155 + 16) & 0x18000) == 0x8000;
                _PFFaultHandlerFulfillFault(v79, v155, v180, (void *)objc_msgSend(v149, "objectAtIndex:", v151 + v153++), 0);
              }
              while (v150 != v153);
              v150 = objc_msgSend(v147, "countByEnumeratingWithState:objects:count:", &v185, v193, 16);
              v151 += v153;
              v144 = v154 + v153;
            }
            while (v150);
            v144 = v154 + v153;
            v145 = v162;
            v42 = v163;
            v78 = v160;
            v143 = 0x1EDF5B000;
          }
          else
          {
            v42 = v163;
            v78 = v160;
          }
          v148 = v166;
          v146 = v168;
        }
        v146 += 8 * v148;
        ++v145;
      }
      while (v145 != v78);
      v82 = -[_PFArray initWithObjects:count:andFlags:andContext:]([_PFArray alloc], "initWithObjects:count:andFlags:andContext:", v159, v158, v157, v180);
      v80 = v141;
    }
  }
  v89 = -[_PFArray count](v82, "count");
  if (v42 && (objc_msgSend(v42, "isCancelled") & 1) == 0)
  {
    v90 = *(void **)(v177 + 48);
    v91 = 2 * v171;
    v181[0] = MEMORY[0x1E0C809B0];
    v181[1] = 3221225472;
    if (v174 >= 2 * v171)
      v91 = v174 + 1;
    v181[2] = ___newFetchedRowsForFetchPlan_ST_block_invoke_2;
    v181[3] = &unk_1E1EE0328;
    v181[4] = v42;
    if (v171 > 0 && v174 >= v171)
      v92 = v91;
    else
      v92 = v171;
    v182 = v92;
    v183 = v174;
    objc_msgSend(v90, "performBlock:", v181);
  }
  if (v89 != v174)
    _NSCoreDataLog(1, (uint64_t)CFSTR("result array has %lu entries, but we fetched %d rows"), v83, v84, v85, v86, v87, v88, v89);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) >= 2)
  {
    v93 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    objc_msgSend(v93, "appendFormat:", CFSTR("fetch using %@ returned %lu rows"), v161, v89);
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) >= 3)
      objc_msgSend(v93, "appendFormat:", CFSTR(" with values: %@"), v82);
    _NSCoreDataLog(4, (uint64_t)CFSTR("%@"), v94, v95, v96, v97, v98, v99, (uint64_t)v93);

  }
  v100 = objc_msgSend(*(id *)(v177 + 8), "relationshipKeyPathsForPrefetching");
  v101 = *(_DWORD *)(v177 + 72);
  if (v89)
  {
    if (v100)
    {
      v102 = (v101 >> 2) & 7;
      if (v102 <= 5 && ((1 << v102) & 0x29) != 0)
      {
        if ((*(_DWORD *)(v177 + 72) & 0x1C) == 4)
        {
          v103 = 0;
          goto LABEL_186;
        }
        v112 = (void *)+[_PFRoutines newArrayOfObjectIDsFromCollection:]((uint64_t)_PFRoutines, v82);
        v103 = v112;
        if ((*(_DWORD *)(v177 + 72) & 0x1C) == 4)
LABEL_186:
          v112 = v82;
        _prefetchForFetchRequest(v112, 0, (void *)v175);

        v101 = *(_DWORD *)(v177 + 72);
      }
    }
  }
  if ((v101 & 0x1C) == 0xC && v80)
  {
    v113 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", -[_PFArray count](v82, "count"));
    v114 = 0;
    v115 = MEMORY[0x1E0C9AAB0];
    v116 = MEMORY[0x1E0C9AAA0];
    while (v114 < -[_PFArray count](v82, "count"))
    {
      if (v80[v114])
        v117 = v115;
      else
        v117 = v116;
      objc_msgSend(v113, "addObject:", v117);
      ++v114;
    }
    -[NSSQLFetchRequestContext addFaultsThatWereFired:]((_QWORD *)v175, v113);

  }
  objc_msgSend(v165, "drain");

  if (v176)
    v118 = objc_msgSend(v176, "_isCancelled");
  else
    v118 = 0;
  objc_msgSend(*(id *)(v177 + 8), "_setAsyncResultHandle:", 0);
  objc_msgSend(0, "drain");
  v119 = v173;
  if (!v178)
    v119 = 1;
  if ((v119 & 1) == 0)
    fetchResultSetDeallocate((uint64_t)v178);
  if (v80)
    free(v80);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) >= 1)
  {
    if (v176)
      v120 = v118;
    else
      v120 = 0;
    if ((v120 & 1) != 0)
    {
      if (*(_BYTE *)(v175 + 80))
      {
        v127 = CFAbsoluteTimeGetCurrent();
        v128 = CFSTR("Fetch cancelled.  Total fetch execution time: \x1B[31m%.4f\x1B[0ms.");
      }
      else
      {
        v127 = CFAbsoluteTimeGetCurrent();
        v128 = CFSTR("Fetch cancelled.  Total fetch execution time: %.4fs.");
      }
      _NSCoreDataLog(4, (uint64_t)v128, v121, v122, v123, v124, v125, v126, COERCE__INT64(v127 - Current));
    }
    else
    {
      if (*(_BYTE *)(v175 + 80))
      {
        v129 = CFAbsoluteTimeGetCurrent();
        -[_PFArray count](v82, "count");
        v136 = CFSTR("total fetch execution time: \x1B[31m%.4f\x1B[0ms for %d rows.");
      }
      else
      {
        v129 = CFAbsoluteTimeGetCurrent();
        -[_PFArray count](v82, "count");
        v136 = CFSTR("total fetch execution time: %.4fs for %d rows.");
      }
      _NSCoreDataLog(4, (uint64_t)v136, v130, v131, v132, v133, v134, v135, COERCE__INT64(v129 - Current));
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](v175) >= 4)
        -[NSSQLiteConnection logQueryPlanForStatement:]((uint64_t)v172, v161);
    }
  }
  return v82;
}

void sub_18A2AADF4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A2AA9F8);
    }
    objc_begin_catch(exc_buf);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2AAF78(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2AAF3CLL);
  }
  JUMPOUT(0x18A2AAEB0);
}

void sub_18A2AB1B8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2AB1D8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A2AB0CCLL);
}

_PFArray *_executeFetchRequest(uint64_t a1)
{
  _QWORD *v1;
  _PFArray *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _PFArray *v8;
  uint64_t v9;
  _PFBatchFaultingArray *v10;
  _QWORD v12[2];

  v1 = (_QWORD *)a1;
  v12[1] = *MEMORY[0x1E0C80C00];
  v2 = _newFetchedRowsForRequest(a1);
  if (v2 && objc_msgSend(v1, "shouldUseBatches"))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v3 = -[_PFArray count](v2, "count");
      v4 = v3;
      MEMORY[0x1E0C80A78](v3);
      v7 = (char *)v12 - v6;
      if (v3 >= 0x201uLL)
        v7 = (char *)NSAllocateScannedUncollectable();
      else
        bzero((char *)v12 - v6, 8 * v5);
      -[_PFArray getObjects:range:](v2, "getObjects:range:", v7, 0, v3);
      v8 = -[_PFArray initWithObjects:count:andFlags:]([_PFArray alloc], "initWithObjects:count:andFlags:", v7, v3, 27);
      if (v4 >= 0x201)
        NSZoneFree(0, v7);

      v2 = v8;
    }
    if (v1)
    {
      v9 = v1[4];
      v1 = (_QWORD *)v1[24];
    }
    else
    {
      v9 = 0;
    }
    v10 = -[_PFBatchFaultingArray initWithPFArray:andRequest:andContext:]([_PFBatchFaultingArray alloc], "initWithPFArray:andRequest:andContext:", v2, v1, v9);

    v2 = (_PFArray *)v10;
  }
  return v2;
}

void sub_18A2ABBC8()
{
  __break(1u);
}

void sub_18A2ABC50()
{
  objc_end_catch();
  JUMPOUT(0x18A2ABC2CLL);
}

uint64_t NSSQLiteRegisterFunctions(sqlite3 *a1, void **a2)
{
  void **v4;
  uint64_t function;

  if (a2)
    v4 = a2 + 31;
  else
    v4 = 0;
  function = sqlite3_create_function(a1, "NSCoreDataNow", 0, 5, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataNow, 0, 0);
  if (!(_DWORD)function)
  {
    function = sqlite3_create_function(a1, "NSCoreDataPrependExternalReferenceMarker", 2, 5, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataPrependExternalReferenceMarker, 0, 0);
    if ((_DWORD)function)
    {
LABEL_42:
      sqlite3_create_function(a1, "NSCoreDataNow", 0, 5, 0, 0, 0, 0);
      return function;
    }
    function = sqlite3_create_function(a1, "NSCoreDataLike", 3, 1, *v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataLikeBridge, 0, 0);
    if ((_DWORD)function)
    {
LABEL_41:
      sqlite3_create_function(a1, "NSCoreDataPrependExternalReferenceMarker", 0, 5, 0, 0, 0, 0);
      goto LABEL_42;
    }
    function = sqlite3_create_function(a1, "NSCoreDataStringSearch", 4, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataStringSearch, 0, 0);
    if ((_DWORD)function)
    {
LABEL_40:
      sqlite3_create_function(a1, "NSCoreDataLike", 0, 1, 0, 0, 0, 0);
      goto LABEL_41;
    }
    function = sqlite3_create_function(a1, "NSCoreDataToUpper", 1, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataToUpper, 0, 0);
    if ((_DWORD)function)
    {
LABEL_39:
      sqlite3_create_function(a1, "NSCoreDataStringSearch", 0, 1, 0, 0, 0, 0);
      goto LABEL_40;
    }
    function = sqlite3_create_function(a1, "NSCoreDataToLower", 1, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataToLower, 0, 0);
    if ((_DWORD)function)
    {
LABEL_38:
      sqlite3_create_function(a1, "NSCoreToUpper", 0, 4, 0, 0, 0, 0);
      goto LABEL_39;
    }
    function = sqlite3_create_function(a1, "NSCoreDataCanonical", 1, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataCanonical, 0, 0);
    if ((_DWORD)function)
    {
LABEL_37:
      sqlite3_create_function(a1, "NSCoreDataToLower", 0, 4, 0, 0, 0, 0);
      goto LABEL_38;
    }
    function = sqlite3_create_function(a1, "NSCoreDataMatches", 3, 1, v4[4], (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataMatchesBridge, 0, 0);
    if ((_DWORD)function)
    {
LABEL_36:
      sqlite3_create_function(a1, "NSCoreCanonical", 0, 4, 0, 0, 0, 0);
      goto LABEL_37;
    }
    function = sqlite3_create_function(a1, "NSCoreDataStringCompare", 5, 4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataStringCompareWithFlags, 0, 0);
    if ((_DWORD)function)
    {
LABEL_35:
      sqlite3_create_function(a1, "NSCoreDataMatches", 0, 1, 0, 0, 0, 0);
      goto LABEL_36;
    }
    function = sqlite3_create_collation(a1, "NSCollateNoCase", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateNoCaseBridge);
    if ((_DWORD)function)
    {
LABEL_34:
      sqlite3_create_function(a1, "NSCoreDataStringCompare", 0, 4, 0, 0, 0, 0);
      goto LABEL_35;
    }
    function = sqlite3_create_collation(a1, "NSCollateNumericallyNoCase", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateNumericallyNoCaseBridge);
    if ((_DWORD)function)
    {
LABEL_33:
      sqlite3_create_collation(a1, "NSCollateNoCase", 4, 0, 0);
      goto LABEL_34;
    }
    function = sqlite3_create_collation(a1, "NSCollateLocaleSensitive", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateLocaleSensitiveBridge);
    if ((_DWORD)function)
    {
LABEL_32:
      sqlite3_create_collation(a1, "NSCollateNumericallyNoCase", 4, 0, 0);
      goto LABEL_33;
    }
    function = sqlite3_create_collation(a1, "NSCollateLocaleSensitiveNoCase", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateLocaleSensitiveCaseInsensitiveBridge);
    if ((_DWORD)function)
    {
LABEL_31:
      sqlite3_create_collation(a1, "NSCollateLocaleSensitive", 4, 0, 0);
      goto LABEL_32;
    }
    function = sqlite3_create_collation(a1, "NSCollateFinderlike", 4, 0, (int (__cdecl *)(void *, int, const void *, int, const void *))_NSCoreDataCollateFinderlikeBridge);
    if ((_DWORD)function)
    {
LABEL_30:
      sqlite3_create_collation(a1, "NSCollateLocaleSensitiveNoCase", 4, 0, 0);
      goto LABEL_31;
    }
    function = sqlite3_create_function(a1, "NSCoreDataTriggerUpdateAffectedObjectValue", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataTriggerUpdateAffectedObjectValue, 0, 0);
    if ((_DWORD)function)
    {
LABEL_29:
      sqlite3_create_function(a1, "NSCollateFinderlike", 0, 4, 0, 0, 0, 0);
      goto LABEL_30;
    }
    function = sqlite3_create_function(a1, "NSCoreDataDATriggerInsertUpdatedAffectedObjectValue", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataDATriggerInsertUpdatedAffectedObjectValue, 0, 0);
    if ((_DWORD)function)
    {
LABEL_28:
      sqlite3_create_function(a1, "NSCoreDataTriggerUpdateAffectedObjectValue", 0, 4, 0, 0, 0, 0);
      goto LABEL_29;
    }
    function = sqlite3_create_function(a1, "NSCoreDataDATriggerUpdatedAffectedObjectValue", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataDATriggerUpdatedAffectedObjectValue, 0, 0);
    if ((_DWORD)function)
    {
LABEL_27:
      sqlite3_create_function(a1, "NSCoreDataDATriggerInsertUpdatedAffectedObjectValue", 0, 4, 0, 0, 0, 0);
      goto LABEL_28;
    }
    function = sqlite3_create_function(a1, "NSPersistentHistoryBatchDeleteUpdateTrigger", -1, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSPersistentHistoryBatchDeleteUpdateTrigger, 0, 0);
    if ((_DWORD)function)
    {
LABEL_26:
      sqlite3_create_function(a1, "NSCoreDataDATriggerUpdatedAffectedObjectValue", 0, 4, 0, 0, 0, 0);
      goto LABEL_27;
    }
    function = sqlite3_create_function(a1, "NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator", -1, 2052, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator, 0, 0);
    if ((_DWORD)function)
    {
LABEL_25:
      sqlite3_create_function(a1, "NSPersistentHistoryBatchDeleteUpdateTrigger", 0, 4, 0, 0, 0, 0);
      goto LABEL_26;
    }
    function = sqlite3_create_function(a1, "NSCoreDataDATriggerMergeableString", 5, 2052, a2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSCoreDataDATriggerMergeableString, 0, 0);
    if ((_DWORD)function)
    {
      sqlite3_create_function(a1, "NSCoreDataDATriggerMergeableString", 0, 4, 0, 0, 0, 0);
      goto LABEL_25;
    }
  }
  return function;
}

void sub_18A2ACCC4(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18A2ACCD8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

#error "18A2AFB94: call analysis failed (funcsize=54)"

void sub_18A2AFC20()
{
  objc_end_catch();
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2AFC2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

#error "18A2AFD1C: call analysis failed (funcsize=81)"

void sub_18A2AFD9C(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A2AFD44);
  }
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2AFDC8()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A2AFDD0);
  JUMPOUT(0x18A2B04A4);
}

#error "18A2B0264: call analysis failed (funcsize=85)"

void sub_18A2AFDE8()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A2AFDF0);
  JUMPOUT(0x18A2B04A4);
}

#error "18A2AFEE0: call analysis failed (funcsize=82)"

void sub_18A2AFF60(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2AFF14);
  }
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2AFF7C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2AFF88);
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B00E4(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A2B008CLL);
  }
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B0110()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A2B0118);
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B0120(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A2B0128()
{
  objc_end_catch();
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B0150(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2B0154);
  _Unwind_Resume(a1);
}

void sub_18A2B0158(uint64_t a1, int a2)
{
  char v2;

  if (a2)
  {
    if ((v2 & 1) != 0)
      JUMPOUT(0x18A2B0168);
    JUMPOUT(0x18A2B016CLL);
  }
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B0174(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A2B017C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2B0188);
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B02E4(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A2B028CLL);
  }
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B0310()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A2B0318);
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B0320(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A2B0328(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2B0334);
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B047C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2B0490);
  }
  JUMPOUT(0x18A2B04A4);
}

void sub_18A2B05B0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18A2B05C4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *_svfk_10(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xAuLL);
}

void _pvfk_45(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x2DuLL, a4, a5, a6, a7, a8);
}

_QWORD *_svfk_1(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 1uLL);
}

_QWORD *_svfk_4(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 4uLL);
}

_BYTE *destructiveInjectEnumTag for NSManagedObjectContext.ScheduledTaskType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void _pvfk_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x28uLL, a4, a5, a6, a7, a8);
}

void stack_deallocate(void *ptr, _QWORD *a2)
{
  malloc_zone_t *v3;

  if (*a2 > (unint64_t)ptr || a2[2] <= (unint64_t)ptr)
  {
    --a2[3];
    v3 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v3 = malloc_default_zone();
    malloc_zone_free(v3, ptr);
  }
}

_QWORD *_svfk_2(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 2uLL);
}

_QWORD *_svfk_9(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 9uLL);
}

_QWORD *_svfk_8(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 8uLL);
}

_QWORD *_sharedIMPL_setvfk_core_i(_QWORD *a1, uint64_t a2, int a3, unint64_t a4)
{
  _QWORD v5[6];
  int v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_i_block_invoke;
  v5[3] = &unk_1E1EDE0A0;
  v5[4] = a1;
  v5[5] = a4;
  v6 = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

void _pvfk_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x2FuLL, a4, a5, a6, a7, a8);
}

void __internalBlockToDeallocNSManagedObjectContext_block_invoke_2(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  int v4;

  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __internalBlockToDeallocNSManagedObjectContext_block_invoke_3;
    v3[3] = &__block_descriptor_44_e5_v8__0l;
    v4 = *(_DWORD *)(a1 + 56);
    v3[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v2, "performBlock:", v3);
  }
  else if (!*(_DWORD *)(a1 + 56))
  {
    _PFDeallocateObject(*(id *)(a1 + 48));
  }
}

BOOL isScalarTypeForKVCSetter(void *a1)
{
  objc_ivar *v2;
  int v3;
  objc_method *v4;
  char dst[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = (objc_ivar *)objc_msgSend(a1, "ivar");
    if (v2)
    {
      v3 = *(unsigned __int8 *)ivar_getTypeEncoding(v2);
      return v3 == 58 || (v3 - 65) < 0x35;
    }
  }
  else if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = (objc_method *)objc_msgSend(a1, "method");
    if (v4)
    {
      method_getArgumentType(v4, 2u, dst, 0x20uLL);
      v3 = dst[0];
      return v3 == 58 || (v3 - 65) < 0x35;
    }
  }
  v3 = 0;
  return v3 == 58 || (v3 - 65) < 0x35;
}

_QWORD *_svfk_6(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 6uLL);
}

uint64_t _readPFEncodedStringFromData(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  objc_class *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v8 = (objc_class *)_readPFEncodedStringFromData_myStringClass;
  if (!_readPFEncodedStringFromData_myStringClass)
  {
    v8 = (objc_class *)objc_opt_class();
    _readPFEncodedStringFromData_myStringClass = (uint64_t)v8;
  }
  v9 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 24;
  if (v9 + 24 > a4)
    return 0;
  v12 = a2 + v9;
  object_setClass((id)v12, v8);
  *(_QWORD *)(v12 + 16) = a1;
  v13 = bswap32(*(_DWORD *)(v12 + 12));
  *(_DWORD *)(v12 + 12) = v13;
  v14 = v10 + v13 + 1;
  *a3 = v14;
  if (v14 <= a4)
    return v12;
  else
    return 0;
}

uint64_t _readPropertyIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, unint64_t *a18)
{
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  const __CFString *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  void *v82;
  uint64_t j;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  malloc_zone_t *v92;
  BOOL v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  unint64_t v112;
  __int16 v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE v156[128];
  uint64_t v157;

  v18 = a3;
  v19 = a2;
  v20 = a18;
  v157 = *MEMORY[0x1E0C80C00];
  v21 = *a3;
  v22 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v23 = v22 + 4;
  if (v22 + 4 <= a4)
  {
    v24 = bswap32(*(_DWORD *)(a2 + v22));
    v21 = v23;
  }
  else
  {
    v24 = 0;
  }
  v25 = v21 + v24;
  if (v25 > a4)
  {
    if (a18)
    {
      v26 = (void *)MEMORY[0x1E0CB35C8];
      v27 = *MEMORY[0x1E0CB28A8];
      v28 = (void *)MEMORY[0x1E0C99D80];
      v29 = CFSTR("Can't read property into shell: Not enough bytes left");
LABEL_32:
      v51 = objc_msgSend(v26, "errorWithDomain:code:userInfo:", v27, 134060, objc_msgSend(v28, "dictionaryWithObject:forKey:", v29, CFSTR("Root cause")));
      a11 = 0;
      *v20 = v51;
      return a11;
    }
    return 0;
  }
  v30 = v25 - 4;
  v31 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v32 = v31 + 4;
  if (v31 + 4 > v30)
  {
LABEL_8:
    if (a18)
    {
      v26 = (void *)MEMORY[0x1E0CB35C8];
      v27 = *MEMORY[0x1E0CB28A8];
      v28 = (void *)MEMORY[0x1E0C99D80];
      v29 = CFSTR("Can't read property into shell: Unknown type");
      goto LABEL_32;
    }
    return 0;
  }
  v33 = *(_DWORD *)(a2 + v31);
  v34 = bswap32(v33);
  v35 = v34 - 2;
  v37 = 1;
  switch(v34)
  {
    case 2u:
      v37 = 0;
      a11 = a8;
      break;
    case 3u:
      v37 = 0;
      a11 = a13;
      break;
    case 4u:
      break;
    case 5u:
      v37 = 0;
      a11 = a12;
      break;
    case 6u:
      v37 = 0;
      a11 = a9;
      break;
    case 7u:
      v37 = 0;
      a11 = a10;
      break;
    default:
      goto LABEL_8;
  }
  v38 = (v31 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v39 = v38 + 4;
  if (v38 + 4 <= v30)
  {
    v41 = bswap32(*(_DWORD *)(a2 + v38));
    v155 = v38 + 4;
    *(_DWORD *)(a11 + 72) = v41;
    if (a17 <= 4 && (v41 & 0x100) != 0)
      return 0;
    v147 = a7;
    v149 = a1;
    v38 = (v38 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v40 = v38 + 4;
  }
  else
  {
    v147 = a7;
    v149 = a1;
    *(_DWORD *)(a11 + 72) = 0;
    v40 = v38 + 4;
    v39 = v32;
  }
  v42 = a15;
  if (v40 <= v30)
  {
    v43 = *(_DWORD *)(a2 + v38);
    if (v43)
    {
      v44 = v30;
      v46 = a5;
      v47 = *(id *)(a15 + 8 * bswap32(v43));
      v42 = a15;
      a5 = v46;
      v18 = a3;
      v30 = v44;
      v20 = a18;
      v19 = a2;
      *(_QWORD *)(a11 + 8) = v47;
    }
    v39 = v40;
  }
  v48 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v49 = v48 + 4;
  if (v48 + 4 <= v30)
  {
    v50 = bswap32(*(_DWORD *)(v19 + v48));
    v39 = v49;
  }
  else
  {
    v50 = 0;
  }
  if (v33 != 83886080 && !v50)
  {
    if (v20)
    {
      v26 = (void *)MEMORY[0x1E0CB35C8];
      v27 = *MEMORY[0x1E0CB28A8];
      v28 = (void *)MEMORY[0x1E0C99D80];
      v29 = CFSTR("Can't read property into shell: Missing version hash value");
      goto LABEL_32;
    }
    return 0;
  }
  v145 = v42;
  v148 = a5;
  *(_QWORD *)(a11 + 16) = *(id *)(a16 + 8 * v50);
  v58 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v59 = v58 + 4;
  if (v58 + 4 <= v30)
  {
    v62 = *(_DWORD *)(v19 + v58);
    v61 = v148;
    if (v62 == -1)
      goto LABEL_38;
    v60 = bswap32(v62);
  }
  else
  {
    v60 = 0;
    v59 = v39;
    v61 = v148;
  }
  *(_QWORD *)(a11 + 24) = *(_QWORD *)(v61 + 8 * v60);
LABEL_38:
  v63 = (v59 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v64 = v63 + 4;
  if (v63 + 4 > v30)
  {
LABEL_72:
    _NSCoreDataLog(1, (uint64_t)CFSTR("Corrupted archive (missing property name)."), v52, v53, v54, v55, v56, v57, v137);
    a11 = 0;
    *v18 = v59;
    return a11;
  }
  v65 = *(_DWORD *)(v19 + v63);
  v155 = v63 + 4;
  if (!v65)
  {
    v59 = v63 + 4;
    goto LABEL_72;
  }
  *(_QWORD *)(a11 + 32) = *(id *)(a14 + 8 * bswap32(v65));
  v66 = (v63 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v67 = v66 + 4;
  v68 = v149;
  if (v66 + 4 <= v30)
  {
    v69 = *(_DWORD *)(v19 + v66);
    v155 = v67;
    v64 = v67;
    if (v69)
    {
      v141 = v37;
      v70 = (void *)_newReadPFEncodedArrayFromData(v149, v19, &v155, v30, a16, 0);
      if (!v70)
      {
        if (v20)
        {
          v26 = (void *)MEMORY[0x1E0CB35C8];
          v27 = *MEMORY[0x1E0CB28A8];
          v28 = (void *)MEMORY[0x1E0C99D80];
          v29 = CFSTR("Can't read property into shell: Can't read validation predicates");
          goto LABEL_32;
        }
        return 0;
      }
      v71 = v70;
      v143 = v35;
      v144 = objc_msgSend(v70, "count");
      if (v144)
      {
        v72 = 0;
        while (1)
        {
          v73 = objc_msgSend(v71, "objectAtIndex:", v72);
          v154 = 0;
          v74 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
          v75 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v74, v73, (uint64_t)&v154);
          if (!v75)
            break;
          v76 = (void *)v75;
          if (!byte_1ECD8DE26)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              objc_msgSend(v76, "allowEvaluation");
          }
          objc_msgSend(v71, "_replaceObject:atIndex:", v76, v72++);
          if (v144 == v72)
            goto LABEL_50;
        }
        v139 = objc_msgSend((id)a11, "name");
        _NSCoreDataLog(1, (uint64_t)CFSTR("Unable to decode validation predicate for property %@ : %@"), v121, v122, v123, v124, v125, v126, v139);
        goto LABEL_116;
      }
LABEL_50:
      *(_QWORD *)(a11 + 40) = v71;
      v150 = 0u;
      v151 = 0u;
      v152 = 0u;
      v153 = 0u;
      v77 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v150, v156, 16);
      if (v77)
      {
        v78 = v77;
        v79 = *(_QWORD *)v151;
        do
        {
          for (i = 0; i != v78; ++i)
          {
            if (*(_QWORD *)v151 != v79)
              objc_enumerationMutation(v71);
            objc_msgSend(*(id *)(*((_QWORD *)&v150 + 1) + 8 * i), "allowEvaluation");
          }
          v78 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v150, v156, 16);
        }
        while (v78);
      }
      v81 = _newReadPFEncodedArrayFromData(v149, v19, &v155, v30, v145, a16);
      if (!v81)
      {
        if (v20)
        {
          v26 = (void *)MEMORY[0x1E0CB35C8];
          v27 = *MEMORY[0x1E0CB28A8];
          v28 = (void *)MEMORY[0x1E0C99D80];
          v29 = CFSTR("Can't read property into shell: Can't read validation warnings");
          goto LABEL_32;
        }
        return 0;
      }
      v82 = (void *)v81;
      if (v144)
      {
        for (j = 0; v144 != j; ++j)
        {
          v84 = (void *)objc_msgSend(v82, "objectAtIndex:", j);
          if ((objc_msgSend(v84, "isNSString") & 1) == 0)
          {
            v154 = 0;
            v85 = (void *)MEMORY[0x1E0C99E60];
            v86 = objc_opt_class();
            v87 = objc_msgSend(v85, "setWithObjects:", v86, objc_opt_class(), 0);
            v88 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v87, (uint64_t)v84, (uint64_t)&v154);
            if (!v88)
            {
              v140 = objc_msgSend((id)a11, "name");
              _NSCoreDataLog(1, (uint64_t)CFSTR("Unable to decode validation warning for property %@ : %@"), v130, v131, v132, v133, v134, v135, v140);
              goto LABEL_116;
            }
            objc_msgSend(v82, "_replaceObject:atIndex:", v88, j);
            v35 = v143;
          }
        }
      }
      *(_QWORD *)(a11 + 48) = v82;
      v64 = v155;
      v68 = v149;
      v37 = v141;
    }
  }
  v89 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v90 = v89 + 4;
  if (v89 + 4 <= v30)
  {
    v91 = *(_DWORD *)(v19 + v89);
    v155 = v90;
    v64 = v90;
    if (v91)
    {
      v142 = v37;
      v92 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v92 = malloc_default_zone();
      v93 = 1;
      v94 = malloc_type_zone_calloc(v92, 1uLL, 0x28uLL, 0x108004046168151uLL);
      v95 = (v155 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v64 = v95 + 4;
      if (v95 + 4 <= v30)
      {
        v97 = *(_DWORD *)(v19 + v95);
        v155 = v95 + 4;
        v93 = v97 == 0;
        v95 = (v95 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        v96 = v95 + 4;
      }
      else
      {
        v96 = v95 + 4;
        v64 = v155;
      }
      if (v96 <= v30)
      {
        v98 = bswap32(*(_DWORD *)(v19 + v95));
        v155 = v96;
        v64 = v96;
      }
      else
      {
        v98 = 0;
      }
      if (v93)
      {
        v99 = 0;
      }
      else
      {
        v99 = objc_msgSend(*(id *)(v145 + 8 * v98), "mutableCopy");
        v64 = v155;
      }
      *v94 = v99;
      v100 = (v64 + 7) & 0xFFFFFFFFFFFFFFF8;
      v101 = v100 + 8;
      if (v100 + 8 <= v30)
      {
        v102 = bswap64(*(_QWORD *)(v19 + v100));
        v155 = v100 + 8;
        v100 = (v100 + 15) & 0xFFFFFFFFFFFFFFF8;
        v103 = v100 + 8;
        v64 = v101;
      }
      else
      {
        v102 = 0;
        v103 = v100 + 8;
      }
      v94[1] = v102;
      if (v103 <= v30)
      {
        v104 = bswap64(*(_QWORD *)(v19 + v100));
        v155 = v103;
        v64 = v103;
      }
      else
      {
        v104 = 0;
      }
      v94[2] = v104;
      *(_QWORD *)(a11 + 56) = v94;
      *(_WORD *)(a11 + 72) &= ~0x80u;
      v37 = v142;
    }
  }
  v105 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v106 = v105 + 4;
  if (v105 + 4 <= v30)
  {
    v107 = *(_DWORD *)(v19 + v105);
    v155 = v106;
    v64 = v106;
    if (v107)
    {
      v108 = *(_QWORD *)(a16 + 8 * bswap32(v107));
      v154 = 0;
      v109 = +[_PFRoutines plistClassesForSecureCoding]();
      v110 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v109, v108, (uint64_t)&v154);
      if (!v110)
      {
        v138 = objc_msgSend((id)a11, "name");
        _NSCoreDataLog(1, (uint64_t)CFSTR("Unable to decode userInfo for property %@ : %@"), v115, v116, v117, v118, v119, v120, v138);
LABEL_116:
        if (v20)
          *v20 = v154;
        return 0;
      }
      *(_QWORD *)(a11 + 64) = v110;
      v64 = v155;
    }
  }
  v111 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v112 = v111 + 4;
  if (v111 + 4 <= v30)
  {
    v113 = bswap32(*(_DWORD *)(v19 + v111));
    v155 = v112;
    v64 = v112;
  }
  else
  {
    v113 = 0;
  }
  *(_WORD *)(a11 + 76) = v113;
  if (v37)
  {
    v114 = _readRelationshipIntoShellFromBytes(v68, v19, &v155, v30, (_QWORD *)a11, v148);
LABEL_96:
    *v18 = v155;
    if ((v114 & 1) == 0)
      return 0;
  }
  else
  {
    switch(v35)
    {
      case 0u:
        v114 = _readAttributeIntoShellFromBytes(v68, v19, &v155, v30, a11, a14, a16, v145, v20);
        goto LABEL_96;
      case 1u:
        v127 = (v64 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v128 = v127 + 4;
        if (v127 + 4 <= v30)
        {
          v129 = bswap32(*(_DWORD *)(v19 + v127));
          v64 = v128;
        }
        else
        {
          v129 = 0;
        }
        *(_QWORD *)(a11 + 96) = *(id *)(v147 + 8 * v129);
        break;
      case 3u:
        v114 = _readExpressionDescriptionIntoShellFromBytes(v68, v19, &v155, v30, (_QWORD *)a11, a14, a16, v145, v20);
        goto LABEL_96;
      case 4u:
        v114 = _readDerivedAttributeIntoShellFromBytes(v68, v19, &v155, v30, a11, a14, a16, v145, v20);
        goto LABEL_96;
      case 5u:
        v114 = _readCompositeAttributeIntoShellFromBytes(v68, v19, &v155, v30, a11, a14, a16, v145, v20);
        goto LABEL_96;
      default:
        a11 = 0;
        break;
    }
    *v18 = v64;
  }
  return a11;
}

unsigned int *_readPFEncodedDataFromData(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  objc_class *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;

  v8 = (objc_class *)_readPFEncodedDataFromData_myDataClass;
  if (!_readPFEncodedDataFromData_myDataClass)
  {
    v8 = NSClassFromString((NSString *)CFSTR("_PFEncodedData"));
    _readPFEncodedDataFromData_myDataClass = (uint64_t)v8;
  }
  v9 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 24;
  if (v9 + 24 > a4)
    return 0;
  v12 = (unsigned int *)(a2 + v9);
  *(_QWORD *)v12 = 0;
  object_setClass(v12, v8);
  *((_QWORD *)v12 + 1) = a1;
  v13 = bswap32(v12[4]);
  v12[4] = v13;
  v14 = v10 + v13;
  *a3 = v14;
  if (v14 <= a4)
    return v12;
  else
    return 0;
}

uint64_t _readAttributeIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  id v38;
  double v39;
  unint64_t v40;
  uint64_t v41;
  CFNumberType v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  CFNumberRef v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t valuePtr;

  v16 = *a3;
  v17 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v17 + 4 <= a4)
  {
    v16 = v17 + 4;
    v18 = *(_DWORD *)(a2 + v17);
    if (v18)
    {
      v19 = bswap32(v18);
      v20 = *(void **)(a8 + 8 * v19);
      if (v20)
      {
        if (objc_msgSend(*(id *)(a8 + 8 * v19), "isEqualToString:", CFSTR("NSSecureUnarchiveFromDataTransformerName")))v21 = (id)objc_msgSend((id)*MEMORY[0x1E0CB3188], "copy");
        else
          v21 = v20;
      }
      else
      {
        v21 = 0;
      }
      *(_QWORD *)(a5 + 96) = v21;
    }
  }
  v22 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v23 = v22 + 4;
  if (v22 + 4 <= a4)
  {
    v24 = bswap32(*(_DWORD *)(a2 + v22));
    v22 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v25 = v22 + 4;
    v16 = v23;
  }
  else
  {
    v24 = 0;
    v25 = v22 + 4;
  }
  *(_WORD *)(a5 + 80) = v24;
  if (v25 <= a4)
  {
    v26 = *(_DWORD *)(a2 + v22);
    if (v26)
      *(_QWORD *)(a5 + 104) = *(id *)(a6 + 8 * bswap32(v26));
    v16 = v25;
  }
  v27 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v28 = v27 + 4;
  if (v27 + 4 > a4)
  {
LABEL_55:
    v51 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v52 = v51 + 4;
    if (v51 + 4 > a4)
    {
LABEL_65:
      *a3 = v16;
      return 1;
    }
    v53 = bswap32(*(_DWORD *)(a2 + v51));
    if ((v53 & 1) != 0)
    {
      *(_WORD *)(a5 + 72) |= 0x200u;
      if ((v53 & 2) == 0)
      {
LABEL_58:
        if ((v53 & 4) == 0)
          goto LABEL_59;
        goto LABEL_68;
      }
    }
    else if ((v53 & 2) == 0)
    {
      goto LABEL_58;
    }
    *(_WORD *)(a5 + 72) |= 0x400u;
    if ((v53 & 4) == 0)
    {
LABEL_59:
      if ((v53 & 8) == 0)
        goto LABEL_60;
      goto LABEL_69;
    }
LABEL_68:
    *(_WORD *)(a5 + 72) |= 0x800u;
    if ((v53 & 8) == 0)
    {
LABEL_60:
      if ((v53 & 0x10) == 0)
        goto LABEL_61;
      goto LABEL_70;
    }
LABEL_69:
    *(_WORD *)(a5 + 72) |= 0x2000u;
    if ((v53 & 0x10) == 0)
    {
LABEL_61:
      if ((v53 & 0x20) == 0)
        goto LABEL_62;
      goto LABEL_71;
    }
LABEL_70:
    *(_WORD *)(a5 + 72) |= 0x1000u;
    if ((v53 & 0x20) == 0)
    {
LABEL_62:
      if ((v53 & 0x40) == 0)
      {
LABEL_64:
        v16 = v52;
        goto LABEL_65;
      }
LABEL_63:
      *(_WORD *)(a5 + 72) |= 0x8000u;
      goto LABEL_64;
    }
LABEL_71:
    *(_WORD *)(a5 + 72) |= 0x4000u;
    if ((v53 & 0x40) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (!*(_DWORD *)(a2 + v27))
  {
LABEL_54:
    v16 = v28;
    goto LABEL_55;
  }
  v29 = *(unsigned __int16 *)(a5 + 80);
  if (v29 <= 0x1F3)
  {
    if (*(unsigned __int16 *)(a5 + 80) > 0x12Bu)
    {
      if (v29 != 300)
      {
        if (v29 == 400)
        {
          v40 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (v40 + 4 <= a4)
          {
            v41 = bswap32(*(_DWORD *)(a2 + v40));
            v28 = v40 + 4;
          }
          else
          {
            v41 = 0;
          }
          v50 = (CFNumberRef)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", *(_QWORD *)(a6 + 8 * v41));
          goto LABEL_53;
        }
        goto LABEL_44;
      }
      v45 = (v27 + 11) & 0xFFFFFFFFFFFFFFF8;
      v46 = v45 + 8;
      if (v45 + 8 <= a4)
      {
        v47 = bswap64(*(_QWORD *)(a2 + v45));
        v28 = v46;
      }
      else
      {
        v47 = 0;
      }
      valuePtr = v47;
      v42 = kCFNumberLongLongType;
LABEL_52:
      v50 = CFNumberCreate(0, v42, &valuePtr);
LABEL_53:
      *(_QWORD *)(a5 + 112) = v50;
      goto LABEL_54;
    }
    if (v29 != 100 && v29 != 200)
      goto LABEL_44;
LABEL_28:
    v33 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = v33 + 4;
    if (v33 + 4 <= a4)
    {
      v35 = bswap32(*(_DWORD *)(a2 + v33));
      v28 = v34;
    }
    else
    {
      v35 = 0;
    }
    LODWORD(valuePtr) = v35;
    v42 = kCFNumberIntType;
    goto LABEL_52;
  }
  if (*(unsigned __int16 *)(a5 + 80) <= 0x2BBu)
  {
    if (v29 != 500)
    {
      if (v29 == 600)
      {
        v36 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        v37 = bswap32(*(_DWORD *)(a2 + v36));
        v38 = objc_alloc(MEMORY[0x1E0CB37E8]);
        LODWORD(v39) = v37;
        *(_QWORD *)(a5 + 112) = objc_msgSend(v38, "initWithFloat:", v39);
        v16 = v36 + 4;
        goto LABEL_55;
      }
      goto LABEL_44;
    }
    v43 = (v27 + 11) & 0xFFFFFFFFFFFFFFF8;
    v44 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", COERCE_DOUBLE(bswap64(*(_QWORD *)(a2 + v43))));
LABEL_41:
    *(_QWORD *)(a5 + 112) = v44;
    v16 = v43 + 8;
    goto LABEL_55;
  }
  switch(v29)
  {
    case 0x384u:
      v43 = (v27 + 11) & 0xFFFFFFFFFFFFFFF8;
      v44 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", COERCE_DOUBLE(bswap64(*(_QWORD *)(a2 + v43))));
      goto LABEL_41;
    case 0x320u:
      goto LABEL_28;
    case 0x2BCu:
      v30 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = v30 + 4;
      if (v30 + 4 <= a4)
      {
        v32 = bswap32(*(_DWORD *)(a2 + v30));
        v28 = v31;
      }
      else
      {
        v32 = 0;
      }
      v50 = (CFNumberRef)*(id *)(a8 + 8 * v32);
      goto LABEL_53;
  }
LABEL_44:
  v48 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v48 + 4 <= a4)
  {
    v49 = bswap32(*(_DWORD *)(a2 + v48));
    v28 = v48 + 4;
  }
  else
  {
    v49 = 0;
  }
  valuePtr = 0;
  v55 = +[_PFRoutines attributeClassesForSecureCoding]();
  v56 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v55, *(_QWORD *)(a7 + 8 * v49), (uint64_t)&valuePtr);
  if (v56)
  {
    v50 = v56;
    goto LABEL_53;
  }
  v57 = objc_msgSend((id)a5, "name");
  _NSCoreDataLog(1, (uint64_t)CFSTR("Error decoding default value for %@ : %@"), v58, v59, v60, v61, v62, v63, v57);
  if (a9)
    *a9 = valuePtr;
  return 0;
}

uint64_t _PFAllocateObjects(objc_class *a1, void **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  void **v6;
  size_t v8;
  malloc_zone_t *v9;
  unsigned int v10;
  void **v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  void **v15;
  int v16;
  void **v17;
  malloc_zone_t *v18;
  void *v19;
  uint64_t v20;
  malloc_zone_t *v21;
  void *v22;
  uint64_t v23;
  void *v24;

  v4 = 0;
  if (a2 && a3)
  {
    v6 = a2;
    v8 = ((class_getInstanceSize(a1) + 7) & 0xFFFFFFFFFFFFFFF8) + a4;
    v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v9 = malloc_default_zone();
    LODWORD(v4) = 0;
    v10 = a3;
    v11 = v6;
    do
    {
      v12 = malloc_zone_batch_malloc(v9, v8, v11, v10);
      v4 = v12 + v4;
      if (v10 == v12)
      {
        v10 = 0;
      }
      else
      {
        v13 = v12;
        v14 = malloc_type_zone_malloc(v9, v8, 0x3A844312uLL);
        if (!v14)
          break;
        v15 = &v11[v13];
        *v15 = v14;
        v11 = v15 + 1;
        v4 = (v4 + 1);
        v10 += ~v13;
      }
    }
    while (v4 < a3);
    v16 = a3 - v4;
    if (a3 > v4)
    {
      v17 = &v6[v4];
      do
      {
        v18 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone)
          v18 = malloc_default_zone();
        v19 = malloc_type_zone_malloc(v18, v8, 0xA8251D0CuLL);
        if (v19)
        {
          *v17 = v19;
          v4 = (v4 + 1);
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    if (v4 >= a3)
    {
      v23 = v4;
      do
      {
        bzero(*v6, v8);
        v24 = *v6++;
        objc_constructInstance(a1, v24);
        --v23;
      }
      while (v23);
    }
    else if ((_DWORD)v4)
    {
      v20 = v4;
      do
      {
        v21 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone)
          v21 = malloc_default_zone();
        v22 = *v6++;
        malloc_zone_free(v21, v22);
        --v20;
      }
      while (v20);
      return 0;
    }
  }
  return v4;
}

uint64_t _newReadKKDMappingStrategyFromByes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  const __CFString *v55;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const __CFString *v67;

  v5 = (*a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v5 | 4) > a4)
    return 0;
  v10 = (objc_class *)_newReadKKDMappingStrategyFromByes_myKnownKeysMappingStrategy;
  if (!_newReadKKDMappingStrategyFromByes_myKnownKeysMappingStrategy)
  {
    v10 = NSClassFromString((NSString *)CFSTR("NSKnownKeysMappingStrategy2"));
    _newReadKKDMappingStrategyFromByes_myKnownKeysMappingStrategy = (uint64_t)v10;
  }
  *(_QWORD *)(a2 + v5) = 0;
  object_setClass((id)(a2 + v5), v10);
  v15 = v5 + 8;
  if (v5 + 8 > a4)
    v15 = v5;
  if (v15 + 8 <= a4)
    v15 += 8;
  if (v15 + 8 <= a4)
    v15 += 8;
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= a4)
    v15 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= a4)
    v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v16 = v15;
  v17 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = v17 + 4;
  if (v17 + 4 <= a4)
  {
    v19 = bswap32(*(_DWORD *)(a2 + v17));
    v17 = (v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v20 = v17 + 4;
  }
  else
  {
    v19 = 0;
    v20 = v17 + 4;
    v18 = v16;
  }
  if (v20 <= a4)
  {
    LODWORD(v17) = *(_DWORD *)(a2 + v17);
    v21 = (_QWORD **)(a2 + v20);
    if ((_DWORD)v17)
    {
      v17 = bswap32(v17);
      v23 = v17;
      while (1)
      {
        v24 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v24 + 8 <= a4)
        {
          v20 = v24 + 8;
          if (*(_QWORD *)(a2 + v24))
            break;
        }
        if (!--v23)
        {
          v22 = (v17 - 1);
          if ((_DWORD)v17 != 1)
            goto LABEL_28;
          v22 = 0;
          LODWORD(v17) = 1;
LABEL_60:
          if (a2 && (_DWORD)v17)
            v21[v22] = 0;
          v48 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
          v49 = a2 + v48;
          if (v19)
          {
            v50 = (_QWORD *)(a2 + v48);
            v51 = v19;
            do
            {
              v52 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
              v53 = v52 + 8;
              if (v52 + 8 <= a4)
              {
                v54 = bswap64(*(_QWORD *)(a2 + v52));
                v20 = v53;
              }
              else
              {
                v54 = 0;
              }
              *v50++ = *(_QWORD *)(a5 + 8 * v54);
              --v51;
            }
            while (v51);
            *a3 = v20;
LABEL_74:
            v57 = *v21;
            if (*v21)
            {
              v58 = v21 + 1;
              while ((*v57 & 7) == 1)
              {
                v59 = (_QWORD *)*v58++;
                v57 = v59;
                if (!v59)
                  return objc_msgSend((id)(a2 + v5), "_setupForKeys:count:table:inData:", v49);
              }
              v67 = descriptionForBranchRow((uint64_t)v57, 0xFFFFFFFFLL);
              _NSCoreDataLog(1, (uint64_t)CFSTR("Corrupted branch row in optimized model detected:\n\t%@"), v60, v61, v62, v63, v64, v65, (uint64_t)v67);
              return 0;
            }
          }
          else
          {
            *a3 = v20;
            if (a2)
              goto LABEL_74;
          }
          return objc_msgSend((id)(a2 + v5), "_setupForKeys:count:table:inData:", v49);
        }
      }
      v55 = CFSTR("Corrupted archive (unexpected data in pointer space).");
      goto LABEL_71;
    }
    v22 = 0xFFFFFFFFLL;
LABEL_28:
    v18 = v20;
  }
  else
  {
    LODWORD(v17) = 0;
    v21 = (_QWORD **)(a2 + v18);
    v22 = 0xFFFFFFFFLL;
  }
  v25 = 0;
  v20 = v18;
  while (1)
  {
    v26 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v26 + 16 > a4)
      break;
    v27 = a2 + v26;
    if ((v26 | 4) <= a4)
    {
      v28 = bswap32(*(_DWORD *)v27);
      v26 |= 4uLL;
    }
    else
    {
      v28 = 0;
    }
    v29 = v28 & 0xFFFFE000 | ((unint64_t)*(unsigned int *)(v27 + 4) << 32) | v28 & 0x1FF8 | (unint64_t)(v28 & 7);
    *(_QWORD *)v27 = v29;
    v30 = (v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v31 = v30 + 4;
    if (v30 + 4 <= a4)
    {
      v32 = (unint64_t)bswap32(*(_DWORD *)(a2 + v30)) << 32;
      v26 = v31;
    }
    else
    {
      v32 = 0;
    }
    *(_QWORD *)v27 = v32 | v29;
    v33 = (v26 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = v33 + 2;
    if (v33 + 2 <= a4)
    {
      v35 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
      v33 = (v33 + 3) & 0xFFFFFFFFFFFFFFFELL;
      v36 = v33 + 2;
      v26 = v34;
    }
    else
    {
      v35 = 0;
      v36 = v33 + 2;
    }
    *(_WORD *)(v27 + 8) = v35;
    if (v36 <= a4)
    {
      v37 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
      v33 = (v36 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v33 + 2;
      v26 = v36;
    }
    else
    {
      LOWORD(v37) = 0;
      v38 = v36;
    }
    *(_WORD *)(v27 + 10) = v37;
    if (v38 <= a4)
    {
      v39 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
      v33 = (v38 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v33 + 2;
      v26 = v38;
    }
    else
    {
      v39 = 0;
      v40 = v38;
    }
    *(_WORD *)(v27 + 12) = v39;
    if (v40 <= a4)
    {
      v41 = bswap32(*(unsigned __int16 *)(a2 + v33)) >> 16;
      v26 = v40;
    }
    else
    {
      LOWORD(v41) = 0;
    }
    *(_WORD *)(v27 + 14) = v41;
    v42 = __OFSUB__(v39, v35);
    v43 = v39 - v35;
    v44 = v43 < 0 != v42 ? -1 : v43;
    v45 = (v44 + 1);
    v46 = (2 * v45);
    if (v20 + v46 > a4)
      break;
    if (v43 < 0)
    {
      v20 = v26;
    }
    else
    {
      if ((_DWORD)v45)
      {
        v47 = (_WORD *)(v27 + 16);
        do
        {
          *v47 = bswap32((unsigned __int16)*v47) >> 16;
          ++v47;
          --v45;
        }
        while (v45);
      }
      v20 = v26 + v46;
    }
    v21[v25++] = (_QWORD *)v27;
    if (v25 == v22)
      goto LABEL_60;
  }
  v55 = CFSTR("Corrupted archive (failed to read row).");
LABEL_71:
  _NSCoreDataLog(1, (uint64_t)v55, v11, v19, (uint64_t)v21, v12, v13, v14, v66);
  return 0;
}

uint64_t _readRelationshipIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, _QWORD *a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v10 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = v10 + 4;
  if (v10 + 4 <= a4)
  {
    v12 = bswap32(*(_DWORD *)(a2 + v10));
    v10 = (v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v13 = v10 + 4;
  }
  else
  {
    v12 = 0;
    v13 = v10 + 4;
    v11 = *a3;
  }
  a5[12] = *(_QWORD *)(a6 + 8 * v12);
  if (v13 <= a4)
  {
    if (*(_DWORD *)(a2 + v10))
    {
      v14 = (v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      if (v14 + 4 <= a4)
      {
        v15 = bswap32(*(_DWORD *)(a2 + v14));
        v13 = v14 + 4;
      }
      else
      {
        v15 = 0;
      }
      a5[14] = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v15);
    }
    v11 = v13;
  }
  v16 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 + 4;
  if (v16 + 4 <= a4)
  {
    v18 = bswap32(*(_DWORD *)(a2 + v16));
    v16 = (v16 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v19 = v16 + 4;
    v11 = v17;
  }
  else
  {
    v18 = 0;
    v19 = v16 + 4;
  }
  a5[16] = v18;
  if (v19 <= a4)
  {
    v20 = bswap32(*(_DWORD *)(a2 + v16));
    v16 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v21 = v16 + 4;
    v11 = v19;
  }
  else
  {
    v20 = 0;
    v21 = v19;
  }
  a5[17] = v20;
  if (v21 <= a4)
  {
    v22 = bswap32(*(_DWORD *)(a2 + v16));
    v11 = v21;
  }
  else
  {
    v22 = 0;
  }
  a5[18] = v22;
  *a3 = v11;
  return 1;
}

BOOL _readExpressionDescriptionIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v11 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 + 4;
  if (v11 + 4 <= a4)
  {
    v13 = bswap32(*(_DWORD *)(a2 + v11));
    v11 = (v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = v11 + 4;
  }
  else
  {
    v13 = 0;
    v14 = v11 + 4;
    v12 = *a3;
  }
  a5[20] = v13;
  if (v14 <= a4)
  {
    v15 = bswap32(*(_DWORD *)(a2 + v11));
    v12 = v14;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(a7 + 8 * v15);
  v30 = 0;
  v17 = (void *)MEMORY[0x1E0C99E60];
  v18 = objc_opt_class();
  v19 = objc_msgSend(v17, "setWithObjects:", v18, objc_opt_class(), 0);
  v20 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v19, v16, (uint64_t)&v30);
  v21 = v20;
  if (v20)
  {
    a5[19] = v20;
    *a3 = v12;
  }
  else
  {
    v22 = objc_msgSend(a5, "name");
    _NSCoreDataLog(1, (uint64_t)CFSTR("Unable to decode expression for expression description %@ : %@"), v23, v24, v25, v26, v27, v28, v22);
    if (a9)
      *a9 = v30;
  }
  return v21 != 0;
}

uint64_t _readDerivedAttributeIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  uint64_t AttributeIntoShellFromBytes;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  AttributeIntoShellFromBytes = _readAttributeIntoShellFromBytes(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((_DWORD)AttributeIntoShellFromBytes)
  {
    v15 = *a3;
    v16 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v17 = v16 + 4;
    if (v16 + 4 <= a4)
    {
      v18 = *(_DWORD *)(a2 + v16);
      if (v18)
      {
        v30 = *(_QWORD *)(a7 + 8 * bswap32(v18));
        v19 = (void *)MEMORY[0x1E0C99E60];
        v20 = objc_opt_class();
        v21 = objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
        *(_QWORD *)(a5 + 120) = (id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v21, v30, (uint64_t)a9);
      }
      v15 = v17;
    }
    v22 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v23 = v22 + 4;
    if (v22 + 4 <= a4)
    {
      v24 = *(_DWORD *)(a2 + v22);
      if (v24)
      {
        v25 = *(_QWORD *)(a7 + 8 * bswap32(v24));
        v26 = (void *)MEMORY[0x1E0C99E60];
        v27 = objc_opt_class();
        v28 = objc_msgSend(v26, "setWithObjects:", v27, objc_opt_class(), 0);
        *(_QWORD *)(a5 + 128) = (id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v28, v25, (uint64_t)a9);
      }
      v15 = v23;
    }
    *a3 = v15;
  }
  return AttributeIntoShellFromBytes;
}

#error "18A2B7158: call analysis failed (funcsize=66)"

void sub_18A2B71A8(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    os_unfair_lock_unlock(&stru_1ECD8D9DC);
    objc_exception_rethrow();
  }
  JUMPOUT(0x18A2B7200);
}

void sub_18A2B71EC()
{
  objc_end_catch();
  JUMPOUT(0x18A2B7200);
}

void sub_18A2B71F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_18A2B71FC(a1);
  objc_terminate();
}

void sub_18A2B71FC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id *_PF_ObjectIDsForDeferredFault(id **a1, unint64_t a2)
{
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  void *v13;
  id *result;
  unint64_t v15;
  unint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_fulfillFault_withContext_forIndex_);
  if (((_DWORD)a1[2] & 0x30000) == 0x10000 || ((_DWORD)a1[2] & 0x80) != 0)
    return 0;
  v5 = (uint64_t)a1[4];
  v6 = (unint64_t *)_PFEntityForManagedObject(a1);
  v7 = (_QWORD *)v6[14];
  v8 = v7[2];
  v10 = a2 >= v8;
  v9 = a2 - v8;
  v10 = !v10 || v9 >= v7[3];
  v11 = !v10;
  if (((_DWORD)a1[2] & 0x38000) == 0x8000 || v11 != 0)
    objc_msgSend((id)_insertion_fault_handler, "fulfillFault:withContext:forIndex:", a1, v5, a2);
  if ((v11 & 1) != 0)
    return 0;
  v15 = v7[12];
  v10 = a2 >= v15;
  v16 = a2 - v15;
  v18 = v10 && v16 < v7[13];
  v25 = *(_QWORD *)(_kvcPropertysPrimitiveGetters(v6) + 8 * a2);
  if (v25)
    v26 = (void *)_NSGetUsingKeyValueGetter();
  else
    snapshot_get_value_as_object(a1[3], a2, v19, v20, v21, v22, v23, v24);
  v27 = v26;
  if (v18)
  {
    if (!v5)
      return 0;
    if (v26 != (void *)_CD_ScalarNull)
    {
LABEL_59:
      if (v27)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          return (id *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v27);
        v27 = (void *)objc_msgSend(v27, "objectID");
        if (v27)
          return (id *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v27);
      }
      return 0;
    }
    objc_msgSend((id)_insertion_fault_handler, "fulfillFault:withContext:forIndex:", a1, v5, a2);
    result = a1[3];
    if (result)
    {
      if (v25)
        v34 = _NSGetUsingKeyValueGetter();
      else
        snapshot_get_value_as_object(result, a2, v28, v29, v30, v31, v32, v33);
      v27 = (void *)v34;
      goto LABEL_59;
    }
    __break(1u);
  }
  else
  {
    if (v26 && (objc_msgSend(v26, "isFault") & 1) == 0)
    {
      v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v40 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
      if (v40)
      {
        v41 = v40;
        v42 = *(_QWORD *)v49;
        do
        {
          for (i = 0; i != v41; ++i)
          {
            if (*(_QWORD *)v49 != v42)
              objc_enumerationMutation(v27);
            objc_msgSend(v13, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * i), "objectID"));
          }
          v41 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
        }
        while (v41);
      }
      return (id *)v13;
    }
    v35 = -[NSFaultHandler retainedFulfillAggregateFaultForObject:andRelationship:withContext:](_insertion_fault_handler, a1, *(void **)(v6[12] + 24 + 8 * a2), v5);
    if (!objc_msgSend(v35, "isNSArray"))
    {
      v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
      if (v36)
      {
        v37 = v36;
        v38 = *(_QWORD *)v45;
        do
        {
          for (j = 0; j != v37; ++j)
          {
            if (*(_QWORD *)v45 != v38)
              objc_enumerationMutation(v35);
            objc_msgSend(v13, "addObject:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * j));
          }
          v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
        }
        while (v37);
      }

      return (id *)v13;
    }
    return (id *)v35;
  }
  return result;
}

uint64_t _kvcPropertysPublicRelationshipMutators(unint64_t *a1)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  unint64_t *v7;
  Class Superclass;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  __objc2_class *v19;
  uint64_t v20;
  unint64_t *v21;
  void **v23;
  void *v24;

  result = *(_QWORD *)(a1[19] + 40);
  if (!result)
  {
    v3 = (void *)a1[13];
    v4 = objc_msgSend(v3, "keys");
    v5 = objc_msgSend(v3, "length");
    v6 = (void **)PF_CALLOC_OBJECT_ARRAY(v5);
    v7 = _PFFastEntityClass(a1);
    Superclass = class_getSuperclass((Class)v7);
    v9 = (_QWORD *)a1[14];
    v10 = objc_opt_class();
    if (v5 && Superclass != (Class)v10)
    {
      v11 = 0;
      while (1)
      {
        v12 = v9[14];
        if (v12 <= v11 && v11 - v12 < v9[15])
          break;
        v14 = v9[22];
        if (v14 <= v11 && v11 - v14 < v9[23])
          break;
        v16 = v9[16];
        v17 = v16 > v11 || v11 - v16 >= v9[17];
        if (!v17 || (v18 = v9[24], v18 <= v11) && v11 - v18 < v9[25])
        {
          v19 = _NSFaultingMutableOrderedSetMutationMethods;
          goto LABEL_24;
        }
LABEL_26:
        if (v5 == ++v11)
          goto LABEL_27;
      }
      v19 = _NSFaultingMutableSetMutationMethods;
LABEL_24:
      v20 = -[__objc2_class _createMutationMethodsForClass:forKey:](v19, "_createMutationMethodsForClass:forKey:", Superclass, *(_QWORD *)(v4 + 8 * v11));
      if (v20)
        v6[v11] = (void *)v20;
      goto LABEL_26;
    }
LABEL_27:
    v21 = (unint64_t *)(a1[19] + 40);
    while (!__ldaxr(v21))
    {
      if (!__stlxr((unint64_t)v6, v21))
        return *(_QWORD *)(a1[19] + 40);
    }
    __clrex();
    if (v5)
    {
      v23 = v6;
      do
      {
        v24 = *v23++;

        --v5;
      }
      while (v5);
    }
    PF_FREE_OBJECT_ARRAY(v6);
    return *(_QWORD *)(a1[19] + 40);
  }
  return result;
}

void _PF_ManagedObject_WillChangeValueForKeywithSetMutation(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v12;

  v12 = a1[4];
  if ((v12 & 0x40) != 0)
  {
    if (a6 != 0x7FFFFFFFFFFFFFFFLL)
      _PF_Handler_WillAccess_Property((id *)a1, (uint64_t)sel_willAccessValueForKey_, a6);
  }
  else
  {
    objc_msgSend(a1, "willAccessValueForKey:", a3);
  }
  if ((*((_BYTE *)a1 + 17) & 0x80) != 0)
  {
    objc_msgSend((id)_insertion_fault_handler, "fulfillFault:withContext:forIndex:", a1, *((_QWORD *)a1 + 4), a6);
    if ((v12 & 0x1000) != 0)
    {
LABEL_6:
      if ((v12 & 0x2000) != 0)
        return;
      goto LABEL_7;
    }
  }
  else if ((v12 & 0x1000) != 0)
  {
    goto LABEL_6;
  }
  if (a6 != 0x7FFFFFFFFFFFFFFFLL || (v12 & 0x400000) == 0)
    _PFFastMOCObjectWillChange(*((_QWORD *)a1 + 4), a1);
  a1[4] |= 0x800u;
  if ((v12 & 0x2000) == 0)
LABEL_7:
    off_1ECD8D9C0(a1, a2, a3, a4, a5);
}

uint64_t _PF_ManagedObject_DidChangeValueForKeywithSetMutation(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  int v5;

  v4 = (_DWORD *)result;
  v5 = *(_DWORD *)(result + 16);
  if ((v5 & 0x2000) != 0)
  {
    if ((v5 & 0x1000) != 0)
      goto LABEL_3;
  }
  else
  {
    result = _NSObjectDidChangeForKeywithSetMutationImp(result, a2, a3);
    if ((v5 & 0x1000) != 0)
    {
LABEL_3:
      if ((v5 & 0x40) != 0)
        return result;
      return objc_msgSend(v4, "didAccessValueForKey:", a3);
    }
  }
  v4[4] &= ~0x800u;
  if ((v5 & 0x40) == 0)
    return objc_msgSend(v4, "didAccessValueForKey:", a3);
  return result;
}

_QWORD *_svfk_5(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 5uLL);
}

void sub_18A2BA58C()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A2BA594);
  JUMPOUT(0x18A2BA598);
}

void sub_18A2BB684(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A2BB694(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2BB754);
  _Unwind_Resume(a1);
}

void sub_18A2BB75C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x18A2BB7B8);
}

void sub_18A2BB830(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A2BB548);
  }
  _Unwind_Resume(a1);
}

void sub_18A2BB850(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2BB85CLL);
  }
  _Unwind_Resume(a1);
}

#error "18A2BFAE0: call analysis failed (funcsize=91)"

void sub_18A2C0540(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void _pvfk_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x29uLL, a4, a5, a6, a7, a8);
}

BOOL _objectIDEntityAffectsResults(uint64_t a1, void *a2)
{
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  _BOOL8 result;

  v4 = (void *)objc_msgSend(*(id *)(a1 + 8), "entity");
  v5 = *(_DWORD *)(a1 + 72);
  v6 = (void *)objc_msgSend(*(id *)(a1 + 8), "affectedStores");
  result = 0;
  if (!v6 || objc_msgSend(v6, "indexOfObjectIdenticalTo:", objc_msgSend(a2, "persistentStore")) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = objc_msgSend(a2, "entity");
    if ((void *)v7 == v4 || (v5 & 0x20) != 0 && (objc_msgSend(v4, "_subentitiesIncludes:", v7) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_18A2C29C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2C4A64(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2C49BCLL);
  }
  JUMPOUT(0x18A2C4944);
}

void sub_18A2C4A8C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A2C4940);
  JUMPOUT(0x18A2C4900);
}

void _pvfk_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x2CuLL, a4, a5, a6, a7, a8);
}

void sub_18A2C4BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2C5CF0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A2C6BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  id v16;

  if (a2 == 1)
  {
    v16 = objc_begin_catch(exception_object);

    objc_exception_throw(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A2C6C44()
{
  objc_end_catch();
  JUMPOUT(0x18A2C6C4CLL);
}

void sub_18A2C7B44()
{
  __break(1u);
}

void sub_18A2C7C1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2C7BE4);
  }
  _Unwind_Resume(a1);
}

void sub_18A2C7C38(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A2C7C40);
  objc_terminate();
}

void sub_18A2C7E20()
{
  __break(1u);
}

void sub_18A2C7E50(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2C7F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2C8228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A2C85F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_18A2CA2E8()
{
  __break(1u);
}

void sub_18A2CA428(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2CA43C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2CA454(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A2CBA54(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v14 - v11;
  a2(v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v12, 0, 1, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a1, v12, v8);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _sxs5Error_pIgrzo_xsAA_pIegrzo_lTRTA_0()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(*(uint64_t (**)(void))(v0 + 24));
}

uint64_t thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:)(*(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

void _NSCoreDataStringCompareWithFlags(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  const char *v7;
  const __CFAllocator *v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  const __CFAllocator *v13;
  const __CFString *v14;
  size_t v15;
  const __CFString *v16;
  const __CFLocale *v17;
  CFComparisonResult v18;
  BOOL v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  CFRange v56;

  v55 = *MEMORY[0x1E0C80C00];
  if (a2 == 5)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v5 = sqlite3_value_text(*a3);
    v6 = sqlite3_value_text(a3[1]);
    if (v5 && (v7 = (const char *)v6) != 0)
    {
      v8 = _PFStackAllocatorCreate((unint64_t *)&v23, 1024);
      v9 = sqlite3_value_int(a3[2]);
      v10 = sqlite3_value_int(a3[3]);
      v11 = sqlite3_value_int(a3[4]);
      v12 = strlen((const char *)v5);
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
      v14 = CFStringCreateWithBytesNoCopy(v8, v5, v12, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      v15 = strlen(v7);
      v16 = CFStringCreateWithBytesNoCopy(v8, (const UInt8 *)v7, v15, 0x8000100u, 0, v13);
      if (v11)
        v17 = (const __CFLocale *)objc_msgSend(MEMORY[0x1E0CB3880], "retainedLocale");
      else
        v17 = 0;
      v56.length = CFStringGetLength(v14);
      v56.location = 0;
      v18 = CFStringCompareWithOptionsAndLocale(v14, v16, v56, v10, v17);
      switch(v9)
      {
        case 1:
          v19 = v18 == kCFCompareLessThan;
          goto LABEL_20;
        case 2:
          v22 = (unint64_t)(v18 + 1) >= 2;
          goto LABEL_16;
        case 3:
          v19 = v18 == kCFCompareEqualTo;
          goto LABEL_20;
        case 4:
          v22 = (unint64_t)v18 >= 2;
LABEL_16:
          v21 = !v22;
          goto LABEL_24;
        case 5:
          v19 = v18 == kCFCompareGreaterThan;
LABEL_20:
          v21 = v19;
          goto LABEL_24;
        case 6:
          v21 = v18 != kCFCompareEqualTo;
LABEL_24:
          v20 = 1;
          if (v17)
            goto LABEL_25;
          goto LABEL_26;
        default:
          sqlite3_result_error(a1, "NSCoreDataStringCompare: unknown operation type", 1);
          v20 = 0;
          v21 = 0;
          if (!v17)
            goto LABEL_26;
LABEL_25:
          CFRelease(v17);
LABEL_26:
          if (*((_QWORD *)&v24 + 1))
          {
            if (v14)
              CFRelease(v14);
            if (v16)
              CFRelease(v16);
            if (v20)
              goto LABEL_32;
          }
          else
          {
            *((_QWORD *)&v23 + 1) = v23;
            if (v20)
            {
LABEL_32:
              sqlite3_result_int(a1, v21);
              return;
            }
          }
          break;
      }
    }
    else
    {
      sqlite3_result_int(a1, 0);
    }
  }
  else
  {
    sqlite3_result_error(a1, "NSCoreDataStringCompare: incorrect number of arguments", 1);
  }
}

#error "18A2CD864: call analysis failed (funcsize=64)"

#error "18A2CDAAC: call analysis failed (funcsize=64)"

void sub_18A2CE3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2CEA6C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2CEA8C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A2CE9C4);
}

void sub_18A2D02D4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2D02EC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2D02F8);
}

void sub_18A2D08A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2D27A8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2D284C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A2D3238(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

__CFDictionary *_executeGenerateObjectIDRequest(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  CFIndex v4;
  __CFDictionary *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const void *v10;
  sqlite3_int64 v11;
  uint64_t v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1[3];
    v3 = (void *)a1[11];
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = objc_msgSend(v3, "count");
  Mutable = CFDictionaryCreateMutable(0, v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1)
  {
    v6 = a1[1];
    if (v6)
      objc_msgSend(*(id *)(v6 + 208), "lock");
  }
  -[NSSQLiteConnection beginTransaction](v2);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v3);
        v10 = *(const void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        v11 = -[NSSQLiteConnection generatePrimaryKeysForEntity:batch:](v2, (uint64_t)v10, objc_msgSend((id)objc_msgSend(v3, "objectForKey:", v10), "unsignedIntegerValue"));
        if (!v11)
        {
          v16 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], 134030, (uint64_t)CFSTR("unable to generate primary keys"), 0);
          objc_exception_throw(v16);
        }
        CFDictionarySetValue(Mutable, v10, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v11));
      }
      v7 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v7);
  }
  -[NSSQLiteConnection commitTransaction](v2);
  if (a1)
  {
    v12 = a1[1];
    if (v12)
      objc_msgSend(*(id *)(v12 + 208), "unlock");
  }
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v2, 0);
  if (Mutable)
  {
    v13 = Mutable;
    CFRelease(Mutable);
  }
  v14 = Mutable;
  return Mutable;
}

void sub_18A2D81CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char v10;
  int v11;

  if ((v10 & 1) != 0)
    objc_end_catch();
  if (v11)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A2D826C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A2D8260);
  JUMPOUT(0x18A2D828CLL);
}

void sub_18A2D8294(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2D82B4);
  JUMPOUT(0x18A2D825CLL);
}

void sub_18A2D82E0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2D82BCLL);
  }
  JUMPOUT(0x18A2D8260);
}

id _executeSaveChangesRequest(NSSQLObjectFaultRequestContext *a1)
{
  id result;
  NSSQLObjectFaultRequestContext *v3;
  NSFetchRequest *v4;
  NSSQLCore *sqlCore;
  NSFetchRequest *v6;
  NSArray *affectedStores;
  uint64_t v8;
  uint64_t connection;
  NSSQLCore *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSArray *isa;
  uint64_t v16;
  __CFString *objectID;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  const __CFArray *v23;
  int Count;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  void *v28;
  _QWORD *ValueAtIndex;
  CFIndex v30;
  void *v31;
  _QWORD *v32;
  NSSQLObjectFaultRequestContext *v33;
  uint64_t v34;
  uint64_t v35;
  NSFetchRequest *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *v41;
  uint64_t v42;
  NSSQLObjectFaultRequestContext *v43;
  NSSQLFetchRequestContext *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  void *v57;
  void *v58;
  os_unfair_lock_s *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t m;
  uint64_t v64;
  void *v65;
  void *v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t n;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ii;
  uint64_t v77;
  void *v78;
  NSFetchRequest *v79;
  Class v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t jj;
  uint64_t v85;
  uint64_t v86;
  uint64_t kk;
  void *v88;
  NSArray *relationshipKeyPathsForPrefetching;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t mm;
  uint64_t v94;
  uint64_t v95;
  uint64_t nn;
  void *v97;
  NSSQLCore *v98;
  NSSQLObjectFaultRequestContext *v99;
  uint64_t v100;
  NSFetchRequest *v101;
  NSPredicate *havingPredicate;
  NSSQLiteConnection *v103;
  NSFetchRequest *v104;
  uint64_t v105;
  uint64_t v106;
  NSFetchRequest *v107;
  NSArray *v108;
  NSSQLCore *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  NSArray *v114;
  uint64_t v115;
  uint64_t v116;
  NSSQLiteConnection *v117;
  NSSQLCore *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  NSSQLCore *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  NSArray *v133;
  uint64_t v134;
  uint64_t v135;
  NSArray *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t i1;
  NSArray *v140;
  uint64_t v141;
  uint64_t v142;
  _BOOL4 v144;
  uint64_t i2;
  void *v146;
  void *v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t i3;
  void *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  _BOOL4 v157;
  uint64_t i4;
  void *v159;
  void *v160;
  NSArray *v161;
  Class v162;
  NSFetchRequest *v163;
  unint64_t allocationSize;
  unint64_t fetchLimit;
  id v166;
  void *v167;
  uint64_t v168;
  int v169;
  NSSQLCore *v170;
  void *v171;
  NSArray *v172;
  NSSQLCore *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  void *v189;
  uint64_t v190;
  id v191;
  uint64_t v192;
  char *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  _BOOL4 v199;
  NSFetchRequest *fetchRequest;
  int v201;
  char *obj;
  NSArray *obja;
  NSNumber *objb;
  CFArrayRef theArray;
  CFArrayRef theArraya;
  id v207;
  id v208;
  id v209;
  NSSQLObjectFaultRequestContext *self;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  const __CFString *v239;
  void *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  const __CFString *v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint8_t v256[128];
  uint8_t buf[4];
  int v258;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  result = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  v198 = result;
  if (!a1 || !a1->super._connection)
  {
    __break(1u);
    return result;
  }
  fetchRequest = a1->_fetchRequest;
  v199 = -[NSPersistentStoreRequest _secureOperation](-[NSSQLStoreRequestContext persistentStoreRequest](a1, "persistentStoreRequest"), "_secureOperation");
  self = a1;
  -[NSSQLiteConnection _setSaveRequest:]((id *)&a1->super._connection->super.isa, a1);
  if (v199)
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)a1->super._connection, 1);
  v3 = a1;
  if (!a1->_objectID)
  {
    v4 = a1->_fetchRequest;
    if (!v4)
    {
      v201 = 0;
      goto LABEL_117;
    }
    v3 = self;
    if ((BYTE4(v4[1]._additionalPrivateIvars) & 2) == 0)
    {
      v201 = 0;
      goto LABEL_23;
    }
  }
  sqlCore = v3->super._sqlCore;
  if (sqlCore)
    -[_PFMutex lock](sqlCore->_writerSerializationMutex, "lock");
  v6 = self->_fetchRequest;
  if (v6 && (affectedStores = v6->super._affectedStores) != 0)
    v8 = -[NSArray persistentStoreRequest](affectedStores, "persistentStoreRequest");
  else
    v8 = 0;
  connection = (uint64_t)self->super._connection;
  if (connection)
  {
    if (*(_BYTE *)(connection + 40))
    {
      v189 = (void *)MEMORY[0x1E0C99DA0];
      v190 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SaveChanges: NSSQLCore: %p Transactions cannot be nested\n"), self->super._sqlCore);
      objc_exception_throw((id)objc_msgSend(v189, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v190, 0));
    }
    -[NSSQLiteConnection beginTransaction](connection);
  }
  else
  {
    -[NSSQLiteConnection beginTransaction](0);
  }
  v10 = self->super._sqlCore;
  v11 = (void *)MEMORY[0x1E0CB37C0];
  v12 = (void *)MEMORY[0x1E0C99D80];
  v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  if (v6)
  {
    v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", LODWORD(v6[1]._additionalPrivateIvars));
    isa = v6->super._affectedStores;
    if (isa)
      isa = (NSArray *)isa[4].super.isa;
  }
  else
  {
    v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
    isa = 0;
  }
  v16 = objc_msgSend(v11, "notificationWithName:object:userInfo:", CFSTR("_NSSQLCoreTransactionStateChangeNotification"), v10, objc_msgSend(v12, "dictionaryWithObjectsAndKeys:", v13, CFSTR("_NSSQLCoreTransactionType"), v14, CFSTR("_NSSQLCoreTransientSequenceNumber"), v8, CFSTR("_NSSQLCoreActiveSaveRequest"), isa, CFSTR("_NSSQLCoreActiveSavingContext"), self, CFSTR("requestContext"), 0));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotification:", v16);
  v4 = self->_fetchRequest;
  objectID = (__CFString *)self->_objectID;
  if (objectID)
    -[NSSQLiteConnection saveMetadata:](&self->super._connection->super.isa, objectID);
  v201 = 1;
  if (v4)
  {
LABEL_23:
    if ((BYTE4(v4[1]._additionalPrivateIvars) & 2) != 0)
    {
      v18 = -[NSSQLSavePlan newObjectsForFastLockConflictDetection](&self->_fetchRequest->super.super.isa);
      v19 = (uint64_t)self->super._connection;
      if (objc_msgSend(v18, "count")
        && (v20 = (void *)+[_PFRoutines _groupObjectsByRootEntity:]((uint64_t)_PFRoutines, v18),
            (v21 = objc_msgSend(v20, "count")) != 0))
      {
        v22 = 0;
        v194 = v20;
        v196 = v19;
        v193 = (char *)v21;
        while (1)
        {
          v207 = (id)objc_msgSend((id)objc_msgSend(v20, "objectAtIndex:", v22), "sortedArrayUsingFunction:context:", compareManagedObjectsBySQLPKs, 0);
          v23 = _rowsForConflictDetection(self->super._sqlCore, v207, v19);
          Count = CFArrayGetCount(v23);
          v25 = objc_msgSend(v207, "count");
          v26 = v25;
          if (Count - 1 != v25)
          {
            if (v23)
              CFRelease(v23);
            goto LABEL_117;
          }
          obj = v22;
          if (v25)
            break;
LABEL_41:
          v22 = obj + 1;
          v20 = v194;
          v19 = v196;
          if (obj + 1 == v193)
          {
            if (v23)
              CFRelease(v23);
            goto LABEL_44;
          }
        }
        v27 = 1;
        while (1)
        {
          v28 = (void *)MEMORY[0x18D76B4E4]();
          ValueAtIndex = CFArrayGetValueAtIndex(v23, v27);
          v30 = v27 - 1;
          v31 = (void *)objc_msgSend((id)objc_msgSend(v207, "objectAtIndex:", v27 - 1), "objectID");
          v32 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)self, v31);
          if (!v32)
          {
            v33 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](self, (uint64_t)v31);
            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v33, self->super._connection);
            -[NSSQLStoreRequestContext setQueryGenerationToken:]((id *)&v33->super.super.isa, 0);
            v32 = _executeObjectFaultRequest((uint64_t)v33);
            if (v32)
              -[NSSQLiteConnection setObject:forKey:](self[1].super._connection, "setObject:forKey:", v32, v31);
            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v33, 0);

          }
          if (objc_msgSend(v31, "_referenceData64") != *ValueAtIndex)
            break;
          v34 = v32 ? *(unsigned int *)(v32[5] + 12) : 0;
          if (v34 != ValueAtIndex[1])
            break;
          objc_autoreleasePoolPop(v28);
          v27 = v30 + 2;
          if (v30 + 1 == v26)
            goto LABEL_41;
        }
        CFRelease(v23);
        objc_autoreleasePoolPop(v28);
      }
      else
      {
LABEL_44:
        v35 = (uint64_t)self->super._connection;
        v36 = self->_fetchRequest;
        v208 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        if (v36)
          obja = v36->_valuesToFetch;
        else
          obja = 0;
        v197 = (uint64_t)v36;
        v233 = 0u;
        v234 = 0u;
        v231 = 0u;
        v232 = 0u;
        v37 = -[NSArray countByEnumeratingWithState:objects:count:](obja, "countByEnumeratingWithState:objects:count:", &v231, buf, 16);
        if (v37)
        {
          v38 = *(_QWORD *)v232;
          do
          {
            for (i = 0; i != v37; ++i)
            {
              if (*(_QWORD *)v232 != v38)
                objc_enumerationMutation(obja);
              v40 = *(void **)(*((_QWORD *)&v231 + 1) + 8 * i);
              v41 = (void *)MEMORY[0x18D76B4E4]();
              if ((-[NSSQLiteConnection deleteRow:forRequestContext:](v35, (uint64_t)v40, (uint64_t)self) & 1) == 0)
              {
                v42 = objc_msgSend(v40, "objectID");
                v43 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](self, objc_msgSend(v40, "objectID"));
                -[NSSQLStoreRequestContext setConnection:]((uint64_t)v43, self->super._connection);
                -[NSSQLStoreRequestContext setQueryGenerationToken:]((id *)&v43->super.super.isa, 0);
                v44 = _executeObjectFaultRequest((uint64_t)v43);
                -[NSSQLStoreRequestContext setConnection:]((uint64_t)v43, 0);

                if (v44)
                {
                  if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)self) < 2)
                  {
                    if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)self) >= 1)
                      _NSCoreDataLog(4, (uint64_t)CFSTR("Optimistic locking failure for %@.  During write changes, deletion failed.  Row was updated."), v181, v182, v183, v184, v185, v186, v42);
                  }
                  else
                  {
                    _NSCoreDataLog(4, (uint64_t)CFSTR("Optimistic locking failure for %@.  During write changes, deletion failed.  Row was updated.  Original row = %@ New Row = %@"), v175, v176, v177, v178, v179, v180, v42);
                  }
                  v246 = CFSTR("_NSCoreDataOptimisticLockingFailureConflictsKey");
                  v245 = v42;
                  v247 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v245, 1);
                  v187 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v247, &v246, 1);
                  objc_exception_throw(+[_NSCoreDataOptimisticLockingException exceptionWithName:reason:userInfo:](_NSCoreDataOptimisticLockingException, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("optimistic locking failure"), v187));
                }
              }
              objc_autoreleasePoolPop(v41);
            }
            v37 = -[NSArray countByEnumeratingWithState:objects:count:](obja, "countByEnumeratingWithState:objects:count:", &v231, buf, 16);
          }
          while (v37);
        }
        v195 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
        v229 = 0u;
        v230 = 0u;
        v227 = 0u;
        v228 = 0u;
        theArray = (CFArrayRef)-[NSSQLSavePlan newInsertedRows](v197);
        v45 = -[__CFArray countByEnumeratingWithState:objects:count:](theArray, "countByEnumeratingWithState:objects:count:", &v227, v256, 16);
        if (v45)
        {
          v46 = *(_QWORD *)v228;
          do
          {
            for (j = 0; j != v45; ++j)
            {
              if (*(_QWORD *)v228 != v46)
                objc_enumerationMutation(theArray);
              v48 = *(_QWORD *)(*((_QWORD *)&v227 + 1) + 8 * j);
              v49 = (void *)MEMORY[0x18D76B4E4]();
              if (!v48 || (*(_BYTE *)(v48 + 16) & 2) != 0)
                v50 = 0;
              else
                v50 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(v48 + 40) + 16), "_storeInfo1");
              if (-[NSEntityDescription _hasUniqueProperties](objc_msgSend(v50, "entityDescription")))
                objc_msgSend(v208, "addObject:", v48);
              -[NSSQLiteConnection insertRow:](v35, v48);
              objc_autoreleasePoolPop(v49);
            }
            v45 = -[__CFArray countByEnumeratingWithState:objects:count:](theArray, "countByEnumeratingWithState:objects:count:", &v227, v256, 16);
          }
          while (v45);
        }
        if (v197)
          v51 = (void *)objc_msgSend(*(id *)(v197 + 48), "mutableCopy");
        else
          v51 = 0;
        v225 = 0u;
        v226 = 0u;
        v223 = 0u;
        v224 = 0u;
        v52 = v51;
        v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v223, &v252, 16);
        if (v53)
        {
          v54 = *(_QWORD *)v224;
          do
          {
            for (k = 0; k != v53; ++k)
            {
              if (*(_QWORD *)v224 != v54)
                objc_enumerationMutation(v52);
              v56 = *(_QWORD *)(*((_QWORD *)&v223 + 1) + 8 * k);
              v57 = (void *)MEMORY[0x18D76B4E4]();
              if (!v56 || (*(_BYTE *)(v56 + 16) & 2) != 0)
                v58 = 0;
              else
                v58 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(v56 + 40) + 16), "_storeInfo1");
              if (-[NSEntityDescription _hasUniqueProperties](objc_msgSend(v58, "entityDescription")))
              {
                v59 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)self, (const void *)objc_msgSend((id)v56, "objectID"));
                if (-[NSSQLRow hasUniqueConstraintDiffFrom:]((const __CFBitVector *)v56, (uint64_t)v59))
                  objc_msgSend(v208, "addObject:", v56);
              }
              -[NSSQLiteConnection updateRow:forRequestContext:](v35, v56, (uint64_t)self);
              objc_autoreleasePoolPop(v57);
            }
            v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v223, &v252, 16);
          }
          while (v53);
        }
        if (v197)
          v60 = (void *)objc_msgSend(*(id *)(v197 + 56), "mutableCopy");
        else
          v60 = 0;
        v221 = 0u;
        v222 = 0u;
        v219 = 0u;
        v220 = 0u;
        v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v219, &v248, 16);
        if (v61)
        {
          v62 = *(_QWORD *)v220;
          do
          {
            for (m = 0; m != v61; ++m)
            {
              if (*(_QWORD *)v220 != v62)
                objc_enumerationMutation(v60);
              v64 = *(_QWORD *)(*((_QWORD *)&v219 + 1) + 8 * m);
              v65 = (void *)MEMORY[0x18D76B4E4]();
              if (!v64 || (*(_BYTE *)(v64 + 16) & 2) != 0)
                v66 = 0;
              else
                v66 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(v64 + 40) + 16), "_storeInfo1");
              if (-[NSEntityDescription _hasUniqueProperties](objc_msgSend(v66, "entityDescription")))
              {
                v67 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)self, (const void *)objc_msgSend((id)v64, "objectID"));
                if (-[NSSQLRow hasUniqueConstraintDiffFrom:]((const __CFBitVector *)v64, (uint64_t)v67))
                  objc_msgSend(v208, "addObject:", v64);
              }
              -[NSSQLiteConnection updateRow:forRequestContext:](v35, v64, (uint64_t)self);
              objc_autoreleasePoolPop(v65);
            }
            v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v219, &v248, 16);
          }
          while (v61);
        }
        v217 = 0u;
        v218 = 0u;
        v215 = 0u;
        v216 = 0u;
        v68 = objc_msgSend(v208, "countByEnumeratingWithState:objects:count:", &v215, &v241, 16);
        if (v68)
        {
          v69 = *(_QWORD *)v216;
          do
          {
            for (n = 0; n != v68; ++n)
            {
              if (*(_QWORD *)v216 != v69)
                objc_enumerationMutation(v208);
              v71 = *(_QWORD *)(*((_QWORD *)&v215 + 1) + 8 * n);
              v72 = (void *)MEMORY[0x18D76B4E4]();
              -[NSSQLiteConnection updateConstrainedValuesForRow:](v35, v71);
              objc_autoreleasePoolPop(v72);
            }
            v68 = objc_msgSend(v208, "countByEnumeratingWithState:objects:count:", &v215, &v241, 16);
          }
          while (v68);
        }
        if (objc_msgSend(v195, "count"))
        {
          v239 = CFSTR("_NSCoreDataOptimisticLockingFailureConflictsKey");
          v240 = v195;
          v192 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v240, &v239, 1);
          objc_exception_throw(+[_NSCoreDataConstraintViolationException exceptionWithName:reason:userInfo:](_NSCoreDataConstraintViolationException, "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Constraint violation"), v192));
        }
        v73 = (void *)-[NSSQLSavePlan newCorrelationTableUpdates](v197);
        v213 = 0u;
        v214 = 0u;
        v211 = 0u;
        v212 = 0u;
        v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v211, &v235, 16);
        if (v74)
        {
          v75 = *(_QWORD *)v212;
          do
          {
            for (ii = 0; ii != v74; ++ii)
            {
              if (*(_QWORD *)v212 != v75)
                objc_enumerationMutation(v73);
              v77 = *(_QWORD *)(*((_QWORD *)&v211 + 1) + 8 * ii);
              v78 = (void *)MEMORY[0x18D76B4E4]();
              -[NSSQLiteConnection writeCorrelationChangesFromTracker:](v35, v77);
              objc_autoreleasePoolPop(v78);
            }
            v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v211, &v235, 16);
          }
          while (v74);
        }

      }
    }
  }
LABEL_117:
  v79 = fetchRequest;
  if (fetchRequest)
  {
    v80 = fetchRequest[1].super.super.isa;
    if (v80)
    {
      v81 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v255 = 0u;
      v254 = 0u;
      v253 = 0u;
      v252 = 0u;
      v82 = -[objc_class countByEnumeratingWithState:objects:count:](v80, "countByEnumeratingWithState:objects:count:", &v252, buf, 16);
      if (v82)
      {
        v83 = *(_QWORD *)v253;
        do
        {
          for (jj = 0; jj != v82; ++jj)
          {
            if (*(_QWORD *)v253 != v83)
              objc_enumerationMutation(v80);
            objc_msgSend(*(id *)(*((_QWORD *)&v252 + 1) + 8 * jj), "_copyToInterimLocation");
          }
          v82 = -[objc_class countByEnumeratingWithState:objects:count:](v80, "countByEnumeratingWithState:objects:count:", &v252, buf, 16);
        }
        while (v82);
      }
      v250 = 0u;
      v251 = 0u;
      v248 = 0u;
      v249 = 0u;
      v85 = -[objc_class countByEnumeratingWithState:objects:count:](v80, "countByEnumeratingWithState:objects:count:", &v248, v256, 16);
      if (v85)
      {
        v86 = *(_QWORD *)v249;
        do
        {
          for (kk = 0; kk != v85; ++kk)
          {
            if (*(_QWORD *)v249 != v86)
              objc_enumerationMutation(v80);
            v88 = *(void **)(*((_QWORD *)&v248 + 1) + 8 * kk);
            objc_msgSend(v88, "_moveToPermanentLocation");
            objc_msgSend(v81, "addObject:", v88);
          }
          v85 = -[objc_class countByEnumeratingWithState:objects:count:](v80, "countByEnumeratingWithState:objects:count:", &v248, v256, 16);
        }
        while (v85);
      }
      v79 = fetchRequest;
    }
    relationshipKeyPathsForPrefetching = v79->_relationshipKeyPathsForPrefetching;
    if (relationshipKeyPathsForPrefetching)
    {
      v90 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v255 = 0u;
      v254 = 0u;
      v253 = 0u;
      v252 = 0u;
      v91 = -[NSArray countByEnumeratingWithState:objects:count:](relationshipKeyPathsForPrefetching, "countByEnumeratingWithState:objects:count:", &v252, buf, 16);
      if (v91)
      {
        v92 = *(_QWORD *)v253;
        do
        {
          for (mm = 0; mm != v91; ++mm)
          {
            if (*(_QWORD *)v253 != v92)
              objc_enumerationMutation(relationshipKeyPathsForPrefetching);
            objc_msgSend(*(id *)(*((_QWORD *)&v252 + 1) + 8 * mm), "_writeExternalReferenceToInterimLocation");
          }
          v91 = -[NSArray countByEnumeratingWithState:objects:count:](relationshipKeyPathsForPrefetching, "countByEnumeratingWithState:objects:count:", &v252, buf, 16);
        }
        while (v91);
      }
      v250 = 0u;
      v251 = 0u;
      v248 = 0u;
      v249 = 0u;
      v94 = -[NSArray countByEnumeratingWithState:objects:count:](relationshipKeyPathsForPrefetching, "countByEnumeratingWithState:objects:count:", &v248, v256, 16);
      if (v94)
      {
        v95 = *(_QWORD *)v249;
        do
        {
          for (nn = 0; nn != v94; ++nn)
          {
            if (*(_QWORD *)v249 != v95)
              objc_enumerationMutation(relationshipKeyPathsForPrefetching);
            v97 = *(void **)(*((_QWORD *)&v248 + 1) + 8 * nn);
            objc_msgSend(v97, "_moveExternalReferenceToPermanentLocation");
            objc_msgSend(v90, "addObject:", v97);
          }
          v94 = -[NSArray countByEnumeratingWithState:objects:count:](relationshipKeyPathsForPrefetching, "countByEnumeratingWithState:objects:count:", &v248, v256, 16);
        }
        while (v94);
      }
    }
  }
  v98 = self->super._sqlCore;
  if (v98 && (*((_BYTE *)&v98->_sqlCoreFlags + 1) & 4) != 0)
  {
    v100 = (uint64_t)self->super._connection;
    if (!v100 || !*(_BYTE *)(v100 + 40))
    {
      v191 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], 134030, (uint64_t)CFSTR("Missing transaction scope for change tracking of changes."), 0);
      objc_exception_throw(v191);
    }
    -[NSSQLiteConnection processSaveRequest:](v100, (uint64_t)self);
    v99 = self;
    objb = self->super._transactionID;
  }
  else
  {
    objb = 0;
    v99 = self;
  }
  v101 = v99->_fetchRequest;
  if (v101)
    havingPredicate = v101[1]._havingPredicate;
  else
    havingPredicate = 0;
  if (-[NSPredicate count](havingPredicate, "count"))
    +[NSSQLiteIndexTrackingModel updateIndexStatistics:usingConnection:model:]((uint64_t)NSSQLiteIndexTrackingModel, havingPredicate, (uint64_t)self->super._connection, (_QWORD *)objc_msgSend(-[NSSQLCore ancillarySQLModels](self->super._sqlCore, "ancillarySQLModels"), "objectForKey:", CFSTR("NSPersistentStoreTrackIndexUseOptionKey")));
  v103 = self->super._connection;
  v104 = self->_fetchRequest;
  v105 = -[NSSQLStoreRequestContext rowCache](self, "rowCache");
  if (!v103 || !v103->_transactionIsOpen)
  {
    v188 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], 134030, (uint64_t)CFSTR("Missing transaction scope for commit changes."), 0);
    objc_exception_throw(v188);
  }
  v106 = v105;
  theArraya = (CFArrayRef)self[1].super._transactionID;
  v107 = self->_fetchRequest;
  if (v107 && (v108 = v107->super._affectedStores) != 0)
    v209 = (id)-[NSArray persistentStoreRequest](v108, "persistentStoreRequest");
  else
    v209 = 0;
  v109 = self->super._sqlCore;
  v110 = (void *)MEMORY[0x1E0CB37C0];
  v111 = (void *)MEMORY[0x1E0C99D80];
  v112 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2);
  if (v107)
  {
    v113 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", LODWORD(v107[1]._additionalPrivateIvars));
    v114 = v107->super._affectedStores;
    if (v114)
      v114 = (NSArray *)v114[4].super.isa;
    v115 = *(_QWORD *)&v107->_flags;
  }
  else
  {
    v113 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
    v114 = 0;
    v115 = 0;
  }
  v116 = objc_msgSend(v110, "notificationWithName:object:userInfo:", CFSTR("_NSSQLCoreTransactionStateChangeNotification"), v109, objc_msgSend(v111, "dictionaryWithObjectsAndKeys:", v112, CFSTR("_NSSQLCoreTransactionType"), v113, CFSTR("_NSSQLCoreTransientSequenceNumber"), v209, CFSTR("_NSSQLCoreActiveSaveRequest"), v114, CFSTR("_NSSQLCoreActiveSavingContext"), v115, CFSTR("_NSSQLCoreTransactionExternalDataReferencesToDelete"), self, CFSTR("requestContext"),
             0));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotification:", v116);
  v117 = self->super._connection;
  if (v117)
  {
    if (v117->_transactionIsOpen)
    {
      -[NSSQLiteConnection commitTransaction]((uint64_t)self->super._connection);
      v118 = self->super._sqlCore;
      if (v118)
      {
        if (v118->_queryGenerationTrackingConnection)
        {
          v119 = -[NSSQLiteConnection registerCurrentQueryGenerationWithStore:](v117, "registerCurrentQueryGenerationWithStore:");
          if ((_DWORD)v119)
          {
            v120 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Save changes failed to generate a post transaction query generation with error %d");
            _NSCoreDataLog(17, v120, v121, v122, v123, v124, v125, v126, v119);
            v127 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              v258 = v119;
              _os_log_fault_impl(&dword_18A253000, v127, OS_LOG_TYPE_FAULT, "CoreData: Save changes failed to generate a post transaction query generation with error %d", buf, 8u);
            }
          }
        }
      }
    }
  }
  v128 = self->super._sqlCore;
  v129 = (void *)MEMORY[0x1E0CB37C0];
  v130 = (void *)MEMORY[0x1E0C99D80];
  v131 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3);
  if (v107)
  {
    v132 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", LODWORD(v107[1]._additionalPrivateIvars));
    v133 = v107->super._affectedStores;
    if (v133)
      v133 = (NSArray *)v133[4].super.isa;
    v134 = *(_QWORD *)&v107->_flags;
  }
  else
  {
    v132 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
    v133 = 0;
    v134 = 0;
  }
  v135 = objc_msgSend(v129, "notificationWithName:object:userInfo:", CFSTR("_NSSQLCoreTransactionStateChangeNotification"), v128, objc_msgSend(v130, "dictionaryWithObjectsAndKeys:", v131, CFSTR("_NSSQLCoreTransactionType"), v132, CFSTR("_NSSQLCoreTransientSequenceNumber"), v209, CFSTR("_NSSQLCoreActiveSaveRequest"), v133, CFSTR("_NSSQLCoreActiveSavingContext"), v134, CFSTR("_NSSQLCoreTransactionExternalDataReferencesToDelete"), self, CFSTR("requestContext"),
             0));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotification:", v135);
  if (v104)
    v136 = v104->_valuesToFetch;
  else
    v136 = 0;
  v243 = 0u;
  v244 = 0u;
  v241 = 0u;
  v242 = 0u;
  v137 = -[NSArray countByEnumeratingWithState:objects:count:](v136, "countByEnumeratingWithState:objects:count:", &v241, buf, 16);
  if (v137)
  {
    v138 = *(_QWORD *)v242;
    do
    {
      for (i1 = 0; i1 != v137; ++i1)
      {
        if (*(_QWORD *)v242 != v138)
          objc_enumerationMutation(v136);
        -[NSPersistentStoreCache forgetRowForObjectID:](v106, (const void *)objc_msgSend(*(id *)(*((_QWORD *)&v241 + 1) + 8 * i1), "objectID"));
      }
      v137 = -[NSArray countByEnumeratingWithState:objects:count:](v136, "countByEnumeratingWithState:objects:count:", &v241, buf, 16);
    }
    while (v137);
  }

  if (v104)
    v140 = v104->_sortDescriptors;
  else
    v140 = 0;
  v237 = 0u;
  v238 = 0u;
  v235 = 0u;
  v236 = 0u;
  v141 = -[NSArray countByEnumeratingWithState:objects:count:](v140, "countByEnumeratingWithState:objects:count:", &v235, v256, 16);
  if (v141)
  {
    v142 = *(_QWORD *)v236;
    v144 = (CFArrayRef)v106 == theArraya || theArraya == 0;
    do
    {
      for (i2 = 0; i2 != v141; ++i2)
      {
        if (*(_QWORD *)v236 != v142)
          objc_enumerationMutation(v140);
        v146 = *(void **)(*((_QWORD *)&v235 + 1) + 8 * i2);
        v147 = (void *)objc_msgSend(v146, "objectID");
        if (v144)
          -[NSPersistentStoreCache registerRow:forObjectID:options:](v106, (unsigned int *)v146, v147, 4);
        else
          -[NSPersistentStoreCache forgetRowForObjectID:](v106, v147);
      }
      v141 = -[NSArray countByEnumeratingWithState:objects:count:](v140, "countByEnumeratingWithState:objects:count:", &v235, v256, 16);
    }
    while (v141);
  }

  if (v104)
    v148 = (id)v104->_batchSize;
  else
    v148 = 0;
  v233 = 0u;
  v234 = 0u;
  v231 = 0u;
  v232 = 0u;
  v149 = objc_msgSend(v148, "countByEnumeratingWithState:objects:count:", &v231, &v252, 16);
  if (v149)
  {
    v150 = *(_QWORD *)v232;
    do
    {
      for (i3 = 0; i3 != v149; ++i3)
      {
        if (*(_QWORD *)v232 != v150)
          objc_enumerationMutation(v148);
        -[NSPersistentStoreCache forgetRowForObjectID:](v106, *(const void **)(*((_QWORD *)&v231 + 1) + 8 * i3));
      }
      v149 = objc_msgSend(v148, "countByEnumeratingWithState:objects:count:", &v231, &v252, 16);
    }
    while (v149);
  }

  if (v104)
    v152 = (void *)-[NSPredicate mutableCopy](v104->_predicate, "mutableCopy");
  else
    v152 = 0;
  if (objc_msgSend(v152, "count"))
    v153 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  else
    v153 = 0;
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v154 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v227, &v248, 16);
  if (v154)
  {
    v155 = *(_QWORD *)v228;
    v157 = (CFArrayRef)v106 == theArraya || theArraya == 0;
    do
    {
      for (i4 = 0; i4 != v154; ++i4)
      {
        if (*(_QWORD *)v228 != v155)
          objc_enumerationMutation(v152);
        v159 = *(void **)(*((_QWORD *)&v227 + 1) + 8 * i4);
        v160 = (void *)objc_msgSend(v159, "objectID");
        if (v157)
          -[NSPersistentStoreCache registerRow:forObjectID:options:](v106, (unsigned int *)v159, v160, 4);
        else
          -[NSPersistentStoreCache forgetRowForObjectID:](v106, v160);
        objc_msgSend(v153, "addObject:", objc_msgSend(v159, "objectID"));
      }
      v154 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v227, &v248, 16);
    }
    while (v154);
  }

  if (v153)
  {
    if (v104 && (v161 = v104->super._affectedStores) != 0)
      v162 = v161[4].super.isa;
    else
      v162 = 0;
    -[NSManagedObjectContext _persistentStoreDidUpdateAdditionalRows:](v162, v153);

  }
  v163 = self->_fetchRequest;
  if (v163)
  {
    fetchLimit = v163->_fetchLimit;
    allocationSize = v163->_allocationSize;
  }
  else
  {
    fetchLimit = 0;
    allocationSize = 0;
  }
  if (fetchLimit | allocationSize)
  {
    v166 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v167 = v166;
    if (fetchLimit)
      objc_msgSend(v166, "setObject:forKey:", fetchLimit, CFSTR("addedOrUpdated"));
    if (allocationSize)
      objc_msgSend(v167, "setObject:forKey:", allocationSize, CFSTR("deleted"));
    v168 = objc_msgSend(MEMORY[0x1E0CB37C0], "notificationWithName:object:userInfo:", CFSTR("NSPersistentStoreOrderKeyUpdateNotification"), self->super._sqlCore, v167);

    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotification:", v168);
  }
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:]((uint64_t)self->super._connection, -[NSPersistentStoreRequest _secureOperation](-[NSSQLStoreRequestContext persistentStoreRequest](self, "persistentStoreRequest"), "_secureOperation"), 0);
  v169 = v201;
  if (v201)
  {
    v170 = self->super._sqlCore;
    if (v170)
      -[_PFMutex unlock](v170->_writerSerializationMutex, "unlock");
    v169 = 0;
  }
  if (fetchRequest)
  {
    v171 = *(void **)&fetchRequest->_flags;
    if (v171)
      _deleteExternalDataReferences(v171);
    v172 = fetchRequest[1].super._affectedStores;
    if (v172)
      _deleteFileBackedFutures(v172);
  }
  -[NSSQLCore _postChangeNotificationWithTransactionID:]((uint64_t)self->super._sqlCore, objb);
  if (v169)
  {
    v173 = self->super._sqlCore;
    if (v173)
      -[_PFMutex unlock](v173->_writerSerializationMutex, "unlock");
  }
  v174 = (uint64_t)self->super._connection;
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v174, 0);
  if (v199)
    -[NSSQLiteConnection setSecureDeleteMode:](v174, 0);
  -[NSSQLiteConnection _clearSaveGeneratedCachedStatements](v174);
  if (v174)
  {

    *(_QWORD *)(v174 + 192) = 0;
  }
  objc_msgSend(v198, "drain");
  return (id)NSArray_EmptyArray;
}

void sub_18A2DA340(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2DA048);
  }
  JUMPOUT(0x18A2D9FF4);
}

#error "18A2DB228: call analysis failed (funcsize=39)"

void sub_18A2DB290()
{
  objc_end_catch();
  JUMPOUT(0x18A2DB124);
}

uint64_t readFileSizeFromJournalHandle(sqlite3 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = -1;
  v3 = 0;
  v4 = -1;
  if (!sqlite3_file_control(a1, 0, 28, &v3) && v3 && *(_QWORD *)v3)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)v3 + 48))())
      return -1;
    else
      return v4;
  }
  return v1;
}

void sub_18A2DD98C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2DD890);
  }
  JUMPOUT(0x18A2DD854);
}

void sub_18A2DD99C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2DD868);
  }
  JUMPOUT(0x18A2DD854);
}

void sub_18A2DD9C0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2DD850);
}

void sub_18A2DD9E8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2DD9F0);
  JUMPOUT(0x18A2DD854);
}

uint64_t _rollbackTransactionForSaveRequest(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    v2 = a1[3];
    v3 = a1[12];
    if (v2 && *(_BYTE *)(v2 + 40))
      -[NSSQLiteConnection rollbackTransaction](v2);
    v4 = a1[1];
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = (void *)MEMORY[0x1E0CB37C0];
  v6 = (void *)MEMORY[0x1E0C99D80];
  v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4);
  if (!v3)
  {
    v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
    v9 = 0;
    goto LABEL_13;
  }
  v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v3 + 144));
  v9 = *(void **)(v3 + 8);
  if (!v9)
  {
LABEL_13:
    v10 = 0;
    goto LABEL_10;
  }
  v9 = (void *)objc_msgSend(v9, "persistentStoreRequest");
  v10 = *(_QWORD *)(v3 + 8);
  if (v10)
    v10 = *(_QWORD *)(v10 + 32);
LABEL_10:
  v11 = objc_msgSend(v5, "notificationWithName:object:userInfo:", CFSTR("_NSSQLCoreTransactionStateChangeNotification"), v4, objc_msgSend(v6, "dictionaryWithObjectsAndKeys:", v7, CFSTR("_NSSQLCoreTransactionType"), v8, CFSTR("_NSSQLCoreTransientSequenceNumber"), v9, CFSTR("_NSSQLCoreActiveSaveRequest"), v10, CFSTR("_NSSQLCoreActiveSavingContext"), a1, CFSTR("requestContext"), 0));
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotification:", v11);
}

void sub_18A2DDFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

NSObject *createQueueForMOC(id *a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  char __str[512];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  __str[0] = 0;
  v2 = (id)objc_msgSend(a1[21], "copy");
  if (v2)
  {
    v3 = v2;
    snprintf(__str, 0x1FFuLL, "NSManagedObjectContext %p: ", a1);
    objc_msgSend(v3, "UTF8String");
    __strlcat_chk();
  }
  else
  {
    snprintf(__str, 0x1FFuLL, "NSManagedObjectContext %p", a1);
  }
  v4 = dispatch_queue_create(__str, 0);
  dispatch_set_context(v4, a1);
  return v4;
}

void sub_18A2DF47C()
{
  __break(1u);
}

void sub_18A2DF548(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2DF518);
  }
  JUMPOUT(0x18A2DF4E0);
}

void sub_18A2DFED0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2DFF38(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A2DFF2CLL);
  JUMPOUT(0x18A2DFF50);
}

void sub_18A2DFF5C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2DFF68);
  JUMPOUT(0x18A2DFF28);
}

void sub_18A2DFFA4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2DFF80);
  }
  JUMPOUT(0x18A2DFF2CLL);
}

void sub_18A2E025C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A2E01A0);
}

void sub_18A2E0E88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  objc_terminate();
}

void sub_18A2E0EA0(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    JUMPOUT(0x18A2E0EA8);
  _Unwind_Resume(a1);
}

void sub_18A2E1A44(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2E1994);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2E1AD4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A2E1ADCLL);
  JUMPOUT(0x18A2E1AACLL);
}

void sub_18A2E1B14(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2E1AE8);
  }
  JUMPOUT(0x18A2E1AACLL);
}

CFIndex _PFCMT_GetCount(_QWORD *a1)
{
  const __CFDictionary *v2;
  CFIndex Count;
  unint64_t v4;
  unint64_t i;
  const __CFDictionary *v6;
  unint64_t v7;
  unint64_t j;
  const __CFDictionary *v9;

  if (!a1)
    return 0;
  v2 = (const __CFDictionary *)a1[2];
  if (v2)
    Count = CFDictionaryGetCount(v2);
  else
    Count = 0;
  if (a1[3])
  {
    v4 = a1[1];
    if (v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = *(const __CFDictionary **)(a1[3] + 8 * i);
        if (v6)
        {
          Count += CFDictionaryGetCount(v6);
          v4 = a1[1];
        }
      }
    }
  }
  if (a1[4])
  {
    v7 = a1[1];
    if (v7)
    {
      for (j = 0; j < v7; ++j)
      {
        v9 = *(const __CFDictionary **)(a1[4] + 8 * j);
        if (v9)
        {
          Count += CFDictionaryGetCount(v9);
          v7 = a1[1];
        }
      }
    }
  }
  return Count;
}

void _PFCMT_RemoveAllValues(_QWORD *a1)
{
  __CFDictionary *v2;
  unint64_t v3;
  unint64_t i;
  __CFDictionary *v5;
  unint64_t v6;
  unint64_t j;
  __CFDictionary *v8;

  if (a1)
  {
    v2 = (__CFDictionary *)a1[2];
    if (v2)
      CFDictionaryRemoveAllValues(v2);
    if (a1[3])
    {
      v3 = a1[1];
      if (v3)
      {
        for (i = 0; i < v3; ++i)
        {
          v5 = *(__CFDictionary **)(a1[3] + 8 * i);
          if (v5)
          {
            CFDictionaryRemoveAllValues(v5);
            v3 = a1[1];
          }
        }
      }
    }
    if (a1[4])
    {
      v6 = a1[1];
      if (v6)
      {
        for (j = 0; j < v6; ++j)
        {
          v8 = *(__CFDictionary **)(a1[4] + 8 * j);
          if (v8)
          {
            CFDictionaryRemoveAllValues(v8);
            v6 = a1[1];
          }
        }
      }
    }
  }
}

void sub_18A2E21D0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t NSManagedObjectContext.perform<A>(schedule:_:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)(v6 + 248) = a5;
  *(_QWORD *)(v6 + 256) = v5;
  *(_QWORD *)(v6 + 232) = a3;
  *(_QWORD *)(v6 + 240) = a4;
  *(_QWORD *)(v6 + 224) = a1;
  v8 = type metadata accessor for Optional();
  *(_QWORD *)(v6 + 264) = v8;
  *(_QWORD *)(v6 + 272) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 280) = swift_task_alloc();
  *(_QWORD *)(v6 + 288) = swift_task_alloc();
  *(_QWORD *)(v6 + 296) = swift_task_alloc();
  *(_QWORD *)(v6 + 304) = swift_task_alloc();
  *(_QWORD *)(v6 + 312) = swift_task_alloc();
  *(_QWORD *)(v6 + 320) = swift_task_alloc();
  *(_BYTE *)(v6 + 368) = *a2;
  return swift_task_switch();
}

void sub_18A2E32F0(_Unwind_Exception *exception_object, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A2E3168);
    }
    v2 = objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A2E33F4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2E33C8);
  }
  JUMPOUT(0x18A2E3408);
}

void sub_18A2E38F4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2E38A4);
  }
  _Unwind_Resume(exc_buf);
}

_QWORD *_svfk_18(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x12uLL);
}

_QWORD *_svfk_13(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xDuLL);
}

uint64_t _prepareRowsOnBackgroundThreads(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  const __CFAllocator *v7;
  _PFTask *v8;
  CFMutableArrayRef Mutable;
  _QWORD *v10;
  CFMutableArrayRef v11;
  _PFTask *v12;
  _QWORD *v13;
  __CFArray *v14;
  _QWORD *v15;
  _PFTask *v16;
  pthread_mutex_t *v17;
  pthread_cond_t *v18;
  CFIndex Count;
  unint64_t v20;
  CFIndex v21;
  CFIndex v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  void *v28;
  __CFArray *v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _PFArray *v38;
  _PFArray *v39;
  _PFArray *v40;
  _PFArray *v41;
  _PFTask *v43;
  _PFTask *v44;
  _PFTask *v45;
  CFMutableArrayRef v46;
  pthread_cond_t *v47;
  pthread_mutex_t *v48;
  _QWORD *v49;
  const __CFArray *v50;
  pthread_cond_t *p_condition;
  pthread_mutex_t *p_lock;
  __CFArray *v53;
  __CFArray *theArray;
  int v55;
  uint64_t v56;
  _opaque_pthread_cond_t *v57;
  _opaque_pthread_mutex_t *v58;
  void *v59;
  unsigned int v60;
  int v61;
  CFIndex v62;
  uint64_t v63;
  uint64_t v64;
  void *values[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  CFRange v98;
  CFRange v99;

  v97 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 24);
  v3 = *v2;
  if (*v2)
    v4 = *(_QWORD *)(v3 + 136);
  else
    v4 = 0;
  v53 = (__CFArray *)v2[2];
  v5 = v2[4];
  v49 = (_QWORD *)v2[3];
  v50 = (const __CFArray *)v2[1];
  v55 = (*(_DWORD *)(v4 + 72) >> 2) & 7;
  v6 = objc_msgSend(*(id *)(v4 + 8), "_disablePersistentStoreResultCaching");
  PF_FREE_OBJECT_ARRAY(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    v59 = (void *)objc_msgSend(*(id *)(v3 + 8), "objectIDFactoryForSQLEntity:", *(_QWORD *)(v4 + 40));
  else
    v59 = 0;
  v56 = v4;
  v61 = *(_DWORD *)(v4 + 72);
  v64 = 1;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v60 = v55 - 1;
  if ((v55 - 1) >= 2)
  {
    Mutable = CFArrayCreateMutable(v7, 0, 0);
    v10 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
    *v10 = v3;
    v10[1] = Mutable;
    theArray = Mutable;
    v10[2] = v53;
    v10[3] = &v64;
    v10[4] = v5;
    v8 = -[_PFTask initWithFunction:withArgument:andPriority:]([_PFTask alloc], "initWithFunction:withArgument:andPriority:", _prepareFaultsOnBackgroundThread, v10, 2);
  }
  else
  {
    theArray = 0;
    v8 = 0;
  }
  v63 = 1;
  if ((v6 & 1) != 0)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = CFArrayCreateMutable(v7, 0, 0);
    v13 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
    *v13 = v3;
    v13[1] = v11;
    v13[2] = 0;
    v13[3] = &v63;
    v12 = -[_PFTask initWithFunction:withArgument:andPriority:]([_PFTask alloc], "initWithFunction:withArgument:andPriority:", _prepareRowCacheOnBackgroundThread, v13, 2);
  }
  v14 = CFArrayCreateMutable(v7, 0, 0);
  v15 = PF_CALLOC_UNSCANNED_BYTES(0x40uLL);
  *v15 = v3;
  v15[1] = v14;
  v15[2] = 0;
  v15[3] = &v64;
  if ((v6 & 1) == 0)
  {
    v15[4] = v12;
    v15[5] = v11;
    v15[6] = &v63;
  }
  v44 = v12;
  v46 = v11;
  v16 = -[_PFTask initWithFunction:withArgument:andPriority:]([_PFTask alloc], "initWithFunction:withArgument:andPriority:", _populateRowValuesOnBackgroundThread, v15, 2);
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v47 = (pthread_cond_t *)(a1 + 96);
  v48 = (pthread_mutex_t *)(a1 + 32);
  v69 = 0u;
  v70 = 0u;
  v45 = v8;
  p_condition = &v8->condition;
  p_lock = &v8->lock;
  v17 = &v16->lock;
  v43 = v16;
  v18 = &v16->condition;
  v67 = 0u;
  v68 = 0u;
  *(_OWORD *)values = 0u;
  v66 = 0u;
  v57 = &v16->condition;
  v58 = &v16->lock;
  while (1)
  {
    pthread_mutex_lock(v48);
    while (1)
    {
      Count = CFArrayGetCount(v50);
      v20 = Count;
      if (Count >= 1)
        break;
      if (*v49)
        pthread_cond_wait(v47, v48);
      if (!*v49)
      {
        v21 = v20;
        goto LABEL_26;
      }
    }
    v21 = Count >= 128 ? 128 : Count;
    v98.location = 0;
    v98.length = v21;
    CFArrayGetValues(v50, v98, (const void **)values);
    if (v20 > 0x7F)
    {
      v99.location = 0;
      v99.length = v21;
      CFArrayReplaceValues(v50, v99, 0, 0);
    }
    else
    {
      CFArrayRemoveAllValues(v50);
    }
LABEL_26:
    if (!(*v49 | v21))
      break;
    pthread_mutex_unlock(v48);
LABEL_29:
    if (v21 >= 1)
    {
      v23 = 0;
      v62 = v21;
      do
      {
        v24 = values[v23];
        if (v24[1] <= 0x40000000u)
          v25 = v24[1];
        else
          v25 = 0;
        v26 = PF_ALLOCATE_OBJECT_ARRAY((int)v25);
        if (v26)
          v27 = v25;
        else
          v27 = 0;
        v28 = PF_ALLOCATE_OBJECT_ARRAY((int)v27);
        if (!v28)
        {
          PF_FREE_OBJECT_ARRAY(v26);
          v27 = 0;
          v26 = 0;
        }
        if ((v61 & 1) == 0)
        {
          v29 = v14;
          v30 = **((_QWORD **)v24 + 8);
          if ((_DWORD)v27 == objc_msgSend(v59, "allocateBatch:count:", v26, v27))
            v27 = v27;
          else
            v27 = 0;
          if ((int)v27 >= 1)
          {
            for (i = 0; i != v27; ++i)
            {
              while ((*(_DWORD *)v30 & 0x80000000) != 0)
              {
                v32 = *(unsigned int *)(v30 + 4);
                if ((v32 & 0x80000000) != 0)
                  v30 = 0;
                else
                  v30 = *(_QWORD *)(*((_QWORD *)v24 + 8) + 8 * v32) + *(_QWORD *)(v30 + 16);
              }
              v33 = (void *)*((_QWORD *)v26 + i);
              v34 = _PFSetPrimaryKey((unint64_t)v33, *(_QWORD *)(v30 + 24));
              if (v33 != (void *)v34)
              {
                v35 = v34;

                *((_QWORD *)v26 + i) = v35;
              }
              v36 = *(unsigned int *)(v30 + 4);
              if ((v36 & 0x80000000) != 0)
                break;
              v37 = *(_QWORD *)(*((_QWORD *)v24 + 8) + 8 * v36);
              if (!v37)
                break;
              v30 = v37 + *(_QWORD *)(v30 + 16);
            }
          }
          v14 = v29;
          if ((_DWORD)v27)
          {
            if ((_DWORD)v27 == +[NSSQLRow newBatchRowAllocation:count:forSQLEntity:withOwnedObjectIDs:andTimestamp:](NSSQLRow, "newBatchRowAllocation:count:forSQLEntity:withOwnedObjectIDs:andTimestamp:", v28, v27, *(_QWORD *)(v56 + 40), v26, *((double *)v24 + 1)))v27 = v27;
            else
              v27 = 0;
          }
          v18 = v57;
          v17 = v58;
        }
        v38 = -[_PFArray initWithObjects:count:andFlags:]([_PFArray alloc], "initWithObjects:count:andFlags:", v26, v27, (v55 == 1) | 8u);
        v39 = -[_PFArray initWithObjects:count:andFlags:andContext:]([_PFArray alloc], "initWithObjects:count:andFlags:andContext:", v28, v27, 10, 0);
        v40 = v39;
        if ((_DWORD)v27 && v38 && v39)
        {
          if (v60 >= 2)
          {
            pthread_mutex_lock(p_lock);
            CFRetain(v38);
            CFRetain(v40);
            CFArrayAppendValue(theArray, v38);
            CFArrayAppendValue(theArray, v40);
            pthread_mutex_unlock(p_lock);
            pthread_cond_signal(p_condition);
          }
          else
          {
            if (v55 == 1)
              v41 = v38;
            else
              v41 = v39;
            CFArrayAppendValue(v53, v41);
          }
          pthread_mutex_lock(v17);
          CFRetain(v40);
          CFArrayAppendValue(v14, v24);
          CFArrayAppendValue(v14, v40);
          pthread_mutex_unlock(v17);
          pthread_cond_signal(v18);
        }

        ++v23;
      }
      while (v23 != v62);
    }
  }
  v22 = CFArrayGetCount(v50);
  pthread_mutex_unlock(v48);
  if (v22)
    goto LABEL_29;
  v64 = 0;
  if (v60 >= 2)
  {
    pthread_mutex_lock(p_lock);
    if (!v45->isFinishedFlag)
    {
      pthread_cond_signal(p_condition);
      while (!v45->isFinishedFlag)
        pthread_cond_wait(p_condition, p_lock);
    }
    pthread_mutex_unlock(p_lock);
  }
  pthread_mutex_lock(v17);
  if (!v43->isFinishedFlag)
  {
    pthread_cond_signal(v18);
    while (!v43->isFinishedFlag)
      pthread_cond_wait(v18, v17);
  }
  pthread_mutex_unlock(v17);
  if (v44)
  {
    pthread_mutex_lock(&v44->lock);
    if (!v44->isFinishedFlag)
    {
      pthread_cond_signal(&v44->condition);
      while (!v44->isFinishedFlag)
        pthread_cond_wait(&v44->condition, &v44->lock);
    }
    pthread_mutex_unlock(&v44->lock);
  }

  if (theArray)
    CFRelease(theArray);
  if (v14)
    CFRelease(v14);
  if (v46)
    CFRelease(v46);
  return 0;
}

void minion_duties2(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  objc_msgSend(v2, "drain");
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  *(_DWORD *)(a1 + 144) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 96));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  CFRelease((CFTypeRef)a1);
}

uint64_t _computeVersionHashesOnBackgroundThread(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x18D76B4E4]();
  v3 = *(void **)(a1 + 24);
  v4 = (void *)objc_msgSend(v3, "entitiesByName");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend((id)objc_msgSend(v4, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i)), "versionHash");
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 24) = 0;
  objc_autoreleasePoolPop(v2);
  return 0;
}

uint64_t _prepareFaultsOnBackgroundThread(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const __CFArray *v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  pthread_mutex_t *v9;
  pthread_cond_t *v10;
  CFIndex Count;
  unint64_t v12;
  CFIndex v13;
  CFIndex v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _PFArray *v23;
  __CFArray *theArray;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  char v31;
  void *v32;
  CFIndex v33;
  char v34;
  void *v35;
  unint64_t v36;
  char v37;
  _QWORD v38[9];
  int v39;
  BOOL v40;
  BOOL v41;
  char v42;
  void *values[130];
  CFRange v44;
  CFRange v45;

  values[128] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 24);
  v3 = (_QWORD *)*v2;
  if (*v2)
    v4 = v3[17];
  else
    v4 = 0;
  v5 = (const __CFArray *)v2[1];
  v32 = (void *)v2[2];
  v6 = (_QWORD *)v2[3];
  v31 = objc_msgSend(*(id *)(v4 + 8), "_isAsyncRequest", v2[4]);
  PF_FREE_OBJECT_ARRAY(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(_DWORD *)(v4 + 72);
  v37 = v7;
  v29 = (v7 & 2) == 0;
  v30 = (v7 & 0x1C) == 12;
  if (!v3)
  {
    v35 = 0;
    goto LABEL_8;
  }
  v35 = (void *)v3[4];
  if ((v7 & 0x1C) != 0xC)
  {
LABEL_8:
    v28 = 0;
    goto LABEL_9;
  }
  v28 = v3[16];
LABEL_9:
  v26 = v4;
  v27 = objc_msgSend(*(id *)(v4 + 8), "_disablePersistentStoreResultCaching");
  v8 = 0;
  v9 = (pthread_mutex_t *)(a1 + 32);
  v10 = (pthread_cond_t *)(a1 + 96);
  v34 = 1;
  while (1)
  {
    pthread_mutex_lock(v9);
    while (1)
    {
      Count = CFArrayGetCount(v5);
      v12 = Count;
      if (Count >= 1)
        break;
      if (*v6)
        pthread_cond_wait(v10, v9);
      if (!*v6)
      {
        v13 = v12;
        goto LABEL_22;
      }
    }
    v13 = Count >= 128 ? 128 : Count;
    v44.location = 0;
    v44.length = v13;
    CFArrayGetValues(v5, v44, (const void **)values);
    if (v12 > 0x7F)
    {
      v45.location = 0;
      v45.length = v13;
      CFArrayReplaceValues(v5, v45, 0, 0);
    }
    else
    {
      CFArrayRemoveAllValues(v5);
    }
LABEL_22:
    if (!(*v6 | v13))
      break;
    pthread_mutex_unlock(v9);
LABEL_25:
    if (v13 >= 1)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      v33 = v13;
      do
      {
        if ((v37 & 2) != 0)
        {
          v17 = 0;
        }
        else
        {
          v16 = (int)v16 + 1;
          v17 = values[v16];
        }
        v18 = values[v15];
        v19 = objc_msgSend(v18, "count");
        v36 = v8 + v19;
        if (!((v36 < 0x2711 || (v34 & 1) == 0) | v31 & 1))
        {
          v20 = objc_msgSend(v35, "persistentStoreCoordinator");
          if (v20)
            v21 = *(_QWORD *)(v20 + 96);
          else
            v21 = 0;
          _PFModelMapSlotForEntity(v21, (_QWORD *)objc_msgSend(*(id *)(v26 + 40), "entityDescription"));
          v34 = 0;
        }
        v22 = PF_ALLOCATE_OBJECT_ARRAY(v19);
        v38[0] = MEMORY[0x1E0C809B0];
        v38[1] = 3221225472;
        v38[2] = ___prepareFaultsOnBackgroundThread_block_invoke;
        v38[3] = &unk_1E1EE0350;
        v38[7] = v17;
        v38[8] = v22;
        v39 = v19;
        v38[4] = v35;
        v38[5] = v18;
        v40 = v30;
        v41 = v29;
        v42 = v27;
        v38[6] = v28;
        ___prepareFaultsOnBackgroundThread_block_invoke((uint64_t)v38);
        v23 = -[_PFArray initWithObjects:count:andFlags:andContext:]([_PFArray alloc], "initWithObjects:count:andFlags:andContext:", v22, v19, 46, v35);
        objc_msgSend(v32, "addObject:", v23);

        if ((v37 & 2) == 0)
          CFArrayAppendValue(theArray, v17);
        if (v17)
          CFRelease(v17);
        v8 = v36;
        if (v18)
          CFRelease(v18);
        LODWORD(v16) = v16 + 1;
        v15 = (int)v16;
      }
      while (v33 > (int)v16);
    }
  }
  v14 = CFArrayGetCount(v5);
  pthread_mutex_unlock(v9);
  if (v14)
    goto LABEL_25;
  return 0;
}

uint64_t ___prepareFaultsOnBackgroundThread_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;

  result = -[NSManagedObjectContext _batchRetainedObjects:forCount:withIDs:optionalHandler:withInlineStorage:](*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 72), (id *)objc_msgSend(*(id *)(a1 + 40), "_objectsPointer"), *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 77))
  {
    if (!*(_BYTE *)(a1 + 78))
    {
      result = objc_msgSend(*(id *)(a1 + 56), "_objectsPointer");
      if (*(_DWORD *)(a1 + 72))
      {
        v3 = 0;
        while (1)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v3);
          v5 = *(_QWORD *)(result + 8 * v3);
          v6 = *(_DWORD *)(v4 + 16);
          if ((v6 & 0x200) != 0)
            break;
          *(_DWORD *)(v4 + 16) = v6 | 0x200;
          if (v5)
            goto LABEL_10;
LABEL_12:
          if (++v3 >= (unint64_t)*(unsigned int *)(a1 + 72))
            return result;
        }
        if (!v5 || *(int *)(v5 + 12) >= 1)
          goto LABEL_12;
LABEL_10:
        v7 = (unsigned int *)(v5 + 12);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t _prepareRowCacheOnBackgroundThread(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  CFIndex Count;
  unint64_t v8;
  CFIndex v9;
  CFIndex v10;
  uint64_t i;
  void *v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  pthread_cond_t *v22;
  pthread_mutex_t *v23;
  _QWORD *v24;
  const __CFArray *v25;
  void *values[130];
  CFRange v27;
  CFRange v28;

  values[128] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 24);
  if (*v2)
    v3 = *(_QWORD *)(*v2 + 136);
  else
    v3 = 0;
  v24 = (_QWORD *)v2[3];
  v25 = (const __CFArray *)v2[1];
  PF_FREE_OBJECT_ARRAY(v2);
  *(_QWORD *)(a1 + 24) = 0;
  if ((*(_DWORD *)(v3 + 72) & 2) == 0 && (*(_DWORD *)(v3 + 72) & 0x18) != 0x10)
    objc_msgSend(*(id *)(v3 + 8), "_disablePersistentStoreResultCaching");
  v4 = objc_msgSend(*(id *)(v3 + 8), "_disablePersistentStoreResultCaching");
  v5 = *(_DWORD *)(v3 + 72) & 0x1C;
  v6 = *(_QWORD *)(v3 + 56);
  v22 = (pthread_cond_t *)(a1 + 96);
  v23 = (pthread_mutex_t *)(a1 + 32);
  while (1)
  {
    pthread_mutex_lock(v23);
    while (1)
    {
      Count = CFArrayGetCount(v25);
      v8 = Count;
      if (Count >= 1)
        break;
      if (*v24)
        pthread_cond_wait(v22, v23);
      if (!*v24)
      {
        v9 = v8;
        goto LABEL_19;
      }
    }
    v9 = Count >= 128 ? 128 : Count;
    v27.location = 0;
    v27.length = v9;
    CFArrayGetValues(v25, v27, (const void **)values);
    if (v8 > 0x7F)
    {
      v28.location = 0;
      v28.length = v9;
      CFArrayReplaceValues(v25, v28, 0, 0);
    }
    else
    {
      CFArrayRemoveAllValues(v25);
    }
LABEL_19:
    if (!(*v24 | v9))
      break;
    pthread_mutex_unlock(v23);
LABEL_22:
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        v12 = values[i];
        v13 = (id *)objc_msgSend(v12, "_objectsPointer", v22);
        v14 = objc_msgSend(v12, "count");
        if (v14)
        {
          v15 = v14;
          do
          {
            v16 = *v13;
            v17 = objc_msgSend(*v13, "objectID");
            if ((v4 & 1) != 0)
            {
              if (v5 != 8)
              {
                objc_msgSend(v16, "knownKeyValuesPointer");
                v18 = (void *)objc_msgSend(v16, "_snapshot");
                v19 = v18;
                *v13 = v18;
              }
            }
            else
            {
              v20 = (void *)v17;
              objc_msgSend(v16, "knownKeyValuesPointer");
              -[NSPersistentStoreCache registerRow:forObjectID:options:](v6, (unsigned int *)v16, v20, 0);
            }
            ++v13;
            --v15;
          }
          while (v15);
        }
        if (v12)
          CFRelease(v12);
      }
    }
  }
  v10 = CFArrayGetCount(v25);
  pthread_mutex_unlock(v23);
  if (v10)
    goto LABEL_22;
  return 0;
}

float _sharedIMPL_pvfk_core_f(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char *v10;
  Class Class;

  v8 = a3;
  if (!_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
    return 0.0;
  v10 = *(char **)(a1 + 24);
  Class = object_getClass(v10);
  return *(float *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
}

void sub_18A2E94C8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2E8BD4);
  }
  _Unwind_Resume(exc_buf);
}

void NSManagedObjectContext.performAndWait<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t (*v29)();
  _QWORD *v30;
  uint64_t *v31;
  _QWORD aBlock[6];
  uint64_t v33;

  v22 = a4;
  v25 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v25 - 8);
  v9 = MEMORY[0x1E0C80A78](v25);
  v24 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - v11;
  v23 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))((char *)&v21 - v11, 1, 1, a3);
  v33 = 0;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v27 = a3;
  v28 = v12;
  v29 = _sxs5Error_pIgrzo_xsAA_pIegrzo_lTRTA_0;
  v30 = v13;
  v31 = &v33;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:);
  *(_QWORD *)(v14 + 24) = &v26;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_0;
  v15 = _Block_copy(aBlock);
  v16 = v4;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_performBlockAndWait_, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v15 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:

    __break(1u);
    return;
  }
  if (v33)
  {
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v25);

    return;
  }
  v19 = v24;
  v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v12, v25);
  v20 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, a3) == 1)
    goto LABEL_10;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v19, a3);

}

void sub_18A2E9C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A2E9FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A2EA808(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  id v28;

  if (a2 == 1)
  {
    v28 = objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x18A2EA748);
  }
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(exc_buf);
}

void sub_18A2EA864()
{
  objc_end_catch();
  JUMPOUT(0x18A2EA814);
}

void sub_18A2EA9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2EB5D0()
{
  __break(1u);
}

void sub_18A2EB63C()
{
  objc_end_catch();
  JUMPOUT(0x18A2EB60CLL);
}

void sub_18A2EBCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  id v17;
  const char *v18;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v17 = objc_begin_catch(exception_object);
  if (v16)
    objc_setProperty_nonatomic(v16, v18, v17, 48);
  objc_end_catch();
}

id NSManagedObjectContext.fetch<A>(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id result;
  void *v8;
  id v9;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v2 = objc_msgSend(v1, sel_executeRequest_error_, a1, v10);
  v3 = v10[0];
  if (!v2)
  {
    v9 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v9;
  }
  v4 = v2;
  objc_opt_self();
  v5 = (void *)swift_dynamicCastObjCClassUnconditional();
  v6 = v3;
  result = objc_msgSend(v5, sel_finalResult);
  if (result)
  {
    v8 = result;
    v9 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return v9;
  }
  __break(1u);
  return result;
}

void sub_18A2ECD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_18A2ECD94(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  id v31;

  if (a2)
  {
    if (a2 == 3)
    {
      v30 = objc_begin_catch(exc_buf);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v30, &a30);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v31 = objc_begin_catch(exc_buf);
        objc_exception_rethrow();
      }
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18A2EC4C0);
  }
  JUMPOUT(0x18A2ECE4CLL);
}

void sub_18A2ECE18(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2ECDE4);
  }
  JUMPOUT(0x18A2ECE4CLL);
}

void sub_18A2ECE38()
{
  JUMPOUT(0x18A2ECE4CLL);
}

void sub_18A2ECE54(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  sub_18A2ECE38();
}

void bufferResultSetDeallocate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  malloc_zone_t *v6;
  malloc_zone_t *v7;
  malloc_zone_t *v8;
  malloc_zone_t *v9;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    v5 = (unsigned int *)MEMORY[0x1E0C83DA0];
    do
    {
      if ((*(_BYTE *)(a1 + 40) & 8) != 0)
      {
        MEMORY[0x18D76C060](*v5, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 16));
      }
      else
      {
        v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone)
          v6 = malloc_default_zone();
        malloc_zone_free(v6, *(void **)(*(_QWORD *)(a1 + 48) + v3));
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v7 = malloc_default_zone();
  malloc_zone_free(v7, *(void **)(a1 + 48));
  if ((*(_BYTE *)(a1 + 40) & 8) == 0 && *(_DWORD *)(a1 + 28))
  {
    v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v8 = malloc_default_zone();
    malloc_zone_free(v8, *(void **)(a1 + 56));
  }
  v9 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v9 = malloc_default_zone();
  malloc_zone_free(v9, (void *)a1);
}

void sub_18A2EE650(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2EE6B8(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A2EE5D4);
}

uint64_t PFVectorEqual(const __CFBitVector *a1, const __CFBitVector *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFBit BitAtIndex;

  Count = CFBitVectorGetCount(a1);
  if (Count == CFBitVectorGetCount(a2))
  {
    if (Count < 1)
      return 1;
    v5 = 0;
    while (1)
    {
      BitAtIndex = CFBitVectorGetBitAtIndex(a1, v5);
      if (BitAtIndex != CFBitVectorGetBitAtIndex(a2, v5))
        break;
      if (Count == ++v5)
        return 1;
    }
  }
  return 0;
}

#error "18A2EF5D4: call analysis failed (funcsize=31)"

void sub_18A2EF948(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2EFE60()
{
  __break(1u);
}

void sub_18A2EFF1C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2EFEE8);
  }
  JUMPOUT(0x18A2EFEC4);
}

void sub_18A2F022C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t readMagicWordFromDBHandle(sqlite3 *a1)
{
  int v2;
  BOOL v3;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE v10[23];

  *(_QWORD *)&v10[15] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v2 = sqlite3_file_control(a1, 0, 7, &v9);
  if (v9)
    v3 = v2 == 0;
  else
    v3 = 0;
  if (!v3)
    return 92;
  if (*(_QWORD *)v9)
  {
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 16))();
    if (!v5)
    {
      if (*(_QWORD *)v10 ^ 0x66206574694C5153 | *(_QWORD *)&v10[7] ^ 0x332074616D726F66)
        return 92;
      else
        return 0;
    }
  }
  else
  {
    v5 = 1;
  }
  v8 = 0;
  v6 = sqlite3_file_control(a1, 0, 4, &v8);
  if (v6)
    v7 = v6;
  else
    v7 = 92;
  if (v5 == 522)
    v7 = 0;
  if (v8)
    return v8;
  else
    return v7;
}

void sub_18A2F10FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18A2F1844: call analysis failed (funcsize=53)"

void sub_18A2F18EC()
{
  objc_end_catch();
  JUMPOUT(0x18A2F17DCLL);
}

void sub_18A2F1904(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2F17D8);
}

void sub_18A2F1F14(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2F1D08);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2F2024(void *a1)
{
  uint64_t v1;

  objc_begin_catch(a1);
  -[NSSQLiteConnection _executeSQLString:](v1, CFSTR("ROLLBACK"));
  objc_exception_rethrow();
}

void sub_18A2F2040(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _deallocateFetchEntityPlan(CFTypeRef *ptr)
{
  uint64_t v2;
  CFTypeRef *v3;
  malloc_zone_t *v4;

  if (ptr)
  {
    v2 = *((unsigned int *)ptr + 1);
    if ((_DWORD)v2)
    {
      v3 = ptr + 3;
      do
      {
        if (*v3)
          CFRelease(*v3);
        v3 += 3;
        --v2;
      }
      while (v2);
    }
    v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v4 = malloc_default_zone();
    malloc_zone_free(v4, ptr);
  }
}

ValueMetadata *type metadata accessor for NSManagedObjectContext.ScheduledTaskType()
{
  return &type metadata for NSManagedObjectContext.ScheduledTaskType;
}

void sub_18A2F3B40(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

#error "18A2F3BE0: call analysis failed (funcsize=58)"

void sub_18A2F3C6C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2F3AE4);
  }
  JUMPOUT(0x18A2F3B5CLL);
}

void sub_18A2F3CA4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2F3B48);
}

void sub_18A2F3ED4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2F3F10(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2F3EDCLL);
}

void sub_18A2F42D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A2F4F6C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2F4F8C(void *exc_buf, int a2)
{
  void *v2;
  id v3;
  const char *v4;

  if (a2 == 2)
  {
    v3 = objc_begin_catch(exc_buf);
    if (v2)
      objc_setProperty_nonatomic(v2, v4, v3, 48);
    objc_end_catch();
    JUMPOUT(0x18A2F4F30);
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x18A2F4F34);
}

void *_executeChangeRequest(_QWORD *a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  _NSPersistentHistoryTransactionPredicateParser *v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _BOOL4 v30;
  void *Request;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  int v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  unint64_t v52;
  uint64_t v53;
  NSBatchDeleteResult *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t k;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  _WORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char v86;
  BOOL v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t i;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  BOOL v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t j;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v115;
  id v116;
  void *v117;
  id v118;
  int v119;
  id *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint8_t v135[8];
  _QWORD v136[2];
  _BYTE v137[128];
  _BYTE v138[128];
  _QWORD v139[2];
  _QWORD v140[2];
  _BYTE v141[128];
  const __CFString *v142;
  uint64_t v143;
  const __CFString *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[3];
  _QWORD v149[3];
  uint8_t buf[4];
  int v151;
  _QWORD v152[3];
  _QWORD v153[6];

  v153[3] = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(a1, "request");
  v4 = v3;
  v134 = 0;
  if (a1)
    v121 = (id *)a1[3];
  else
    v121 = 0;
  if (!objc_msgSend(v3, "transactionNumber")
    || objc_msgSend((id)objc_msgSend(v4, "transactionNumber"), "integerValue") < 1)
  {
    if (objc_msgSend((id)objc_msgSend(v4, "fetchRequest"), "predicate"))
    {
      v22 = -[_NSPersistentHistoryTransactionPredicateParser initWithPredicate:]([_NSPersistentHistoryTransactionPredicateParser alloc], "initWithPredicate:", objc_msgSend((id)objc_msgSend(v4, "fetchRequest"), "predicate"));
      *(_QWORD *)v135 = 0;
      -[_NSPersistentHistoryTransactionPredicateParser parse:](v22, "parse:", v135);
      if (*(_QWORD *)v135)
      {
        v21 = 0;
        if (a2)
          *a2 = *(_QWORD *)v135;
        goto LABEL_127;
      }
      v33 = -[_NSPersistentHistoryTransactionPredicateParser storeTokens](v22, "storeTokens");
      if (a1)
        v34 = (void *)a1[1];
      else
        v34 = 0;
      v35 = objc_msgSend(v33, "objectForKey:", objc_msgSend(v34, "identifier"));
      if (v35)
      {
        if (a1)
          v36 = (void *)a1[4];
        else
          v36 = 0;
        v37 = objc_msgSend((id)objc_msgSend(v36, "_queryGenerationToken"), "_isEnabled");
        if (v37)
        {
          v21 = 1;
          -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
          if (a1)
            v38 = (void *)a1[4];
          else
            v38 = 0;
          v39 = objc_msgSend(v38, "_queryGenerationToken");
          if (a1)
            v40 = (void *)a1[1];
          else
            v40 = 0;
          v41 = -[_NSQueryGenerationToken _generationalComponentForStore:](v39, v40);
          if (v41)
            v42 = *((_QWORD *)v41 + 3);
          else
            v42 = 0;
          v43 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v42);
          if ((_DWORD)v43)
          {
            v44 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Persistent history request failed to adopt a query generation with error %d");
            _NSCoreDataLog(17, v44, v45, v46, v47, v48, v49, v50, v43);
            v51 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              v151 = v43;
              _os_log_fault_impl(&dword_18A253000, v51, OS_LOG_TYPE_FAULT, "CoreData: Persistent history request failed to adopt a query generation with error %d", buf, 8u);
            }
          }
        }
        else
        {
          v21 = 0;
        }
        v87 = -[NSSQLiteConnection hasHistoryTransactionWithNumber:](v121, v35);
        if (!v87)
        {
          if (a1)
            v88 = (void *)a1[1];
          else
            v88 = 0;
          v89 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Persistent History Token is expired for store at %@"), objc_msgSend(v88, "URL"));
          v90 = (void *)MEMORY[0x1E0CB35C8];
          v149[0] = v89;
          v148[0] = CFSTR("message");
          v148[1] = CFSTR("NSStoreUUID");
          if (a1)
            v91 = (void *)a1[1];
          else
            v91 = 0;
          v149[1] = objc_msgSend(v91, "identifier");
          v148[2] = *MEMORY[0x1E0CB2AA0];
          if (a1)
            v92 = (void *)a1[1];
          else
            v92 = 0;
          v149[2] = objc_msgSend((id)objc_msgSend(v92, "URL"), "path");
          v93 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v149, v148, 3);
          v134 = objc_msgSend(v90, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134301, v93);
        }
        if (v37)
        {
          -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
          v21 = 0;
        }
        if (v87)
          goto LABEL_51;
LABEL_127:
        Request = 0;
        v32 = 0;
        v30 = v21 != 0;
        goto LABEL_128;
      }
    }
    v21 = 0;
    goto LABEL_51;
  }
  if (a1)
    v5 = (void *)a1[4];
  else
    v5 = 0;
  v6 = objc_msgSend((id)objc_msgSend(v5, "_queryGenerationToken"), "_isEnabled");
  if (v6)
  {
    -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
    if (a1)
      v7 = (void *)a1[4];
    else
      v7 = 0;
    v8 = objc_msgSend(v7, "_queryGenerationToken");
    if (a1)
      v9 = (void *)a1[1];
    else
      v9 = 0;
    v10 = -[_NSQueryGenerationToken _generationalComponentForStore:](v8, v9);
    if (v10)
      v11 = *((_QWORD *)v10 + 3);
    else
      v11 = 0;
    v12 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v11);
    if ((_DWORD)v12)
    {
      v13 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Persistent history request failed to adopt a query generation with error %d");
      _NSCoreDataLog(17, v13, v14, v15, v16, v17, v18, v19, v12);
      v20 = __pflogFaultLog;
      if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = v12;
        _os_log_fault_impl(&dword_18A253000, v20, OS_LOG_TYPE_FAULT, "CoreData: Persistent history request failed to adopt a query generation with error %d", v135, 8u);
      }
    }
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  v23 = -[NSSQLiteConnection hasHistoryTransactionWithNumber:](v121, objc_msgSend(v4, "transactionNumber"));
  if (!v23)
  {
    if (a1)
      v24 = (void *)a1[1];
    else
      v24 = 0;
    v25 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Persistent History Token is expired for store at %@"), objc_msgSend(v24, "URL"));
    v26 = (void *)MEMORY[0x1E0CB35C8];
    v153[0] = v25;
    v152[0] = CFSTR("message");
    v152[1] = CFSTR("NSStoreUUID");
    if (a1)
      v27 = (void *)a1[1];
    else
      v27 = 0;
    v153[1] = objc_msgSend(v27, "identifier");
    v152[2] = *MEMORY[0x1E0CB2AA0];
    if (a1)
      v28 = (void *)a1[1];
    else
      v28 = 0;
    v153[2] = objc_msgSend((id)objc_msgSend(v28, "URL"), "path");
    v29 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v153, v152, 3);
    v134 = objc_msgSend(v26, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134301, v29);
  }
  if (v6)
  {
    -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
    v21 = 0;
  }
  v30 = v21 != 0;
  if (!v23)
  {
    Request = 0;
    v32 = 0;
LABEL_128:
    v85 = 1;
    goto LABEL_180;
  }
LABEL_51:
  v119 = v21;
  v30 = v21 != 0;
  if (!objc_msgSend(a1, "isWritingRequest"))
  {
    if (objc_msgSend(v4, "resultType") == 2 || objc_msgSend(v4, "resultType") == 6 || !objc_msgSend(v4, "resultType"))
    {
      if (a1)
        v76 = (void *)a1[4];
      else
        v76 = 0;
      if (objc_msgSend((id)objc_msgSend(v76, "_queryGenerationToken"), "_isEnabled"))
      {
        -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
        if (a1)
          v77 = (void *)a1[4];
        else
          v77 = 0;
        v78 = objc_msgSend(v77, "_queryGenerationToken");
        if (a1)
          v79 = (void *)a1[1];
        else
          v79 = 0;
        v80 = -[_NSQueryGenerationToken _generationalComponentForStore:](v78, v79);
        if (v80)
          v81 = *((_QWORD *)v80 + 3);
        else
          v81 = 0;
        v82 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v81);
        if ((_DWORD)v82)
        {
          v144 = CFSTR("NSSQLiteErrorDomain");
          v145 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v82);
          v115 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v145, &v144, 1);
          v116 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99750], (int)v82, (uint64_t)CFSTR("Persistent history request failed to adopt query generation"), v115);
          -[_NSCoreDataException _setDomain:]((uint64_t)v116, CFSTR("NSSQLiteErrorDomain"));
          objc_exception_throw(v116);
        }
        v119 = 1;
      }
      v83 = objc_msgSend(a1, "createCountRequestContextForChanges");
      -[NSSQLStoreRequestContext setConnection:](v83, v121);
      Request = _executeCountRequest(v83);
      v30 = 0;
      if (v119)
      {
        -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
        -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
      }
      -[NSSQLStoreRequestContext setConnection:](v83, 0);
      v32 = 0;
      goto LABEL_179;
    }
    if (a1)
      v55 = (void *)a1[4];
    else
      v55 = 0;
    if (objc_msgSend((id)objc_msgSend(v55, "_queryGenerationToken"), "_isEnabled"))
    {
      -[NSSQLiteConnection beginReadTransaction]((uint64_t)v121);
      if (a1)
        v56 = (void *)a1[4];
      else
        v56 = 0;
      v57 = objc_msgSend(v56, "_queryGenerationToken");
      if (a1)
        v58 = (void *)a1[1];
      else
        v58 = 0;
      v59 = -[_NSQueryGenerationToken _generationalComponentForStore:](v57, v58);
      if (v59)
        v60 = *((_QWORD *)v59 + 3);
      else
        v60 = 0;
      v61 = -[NSSQLiteConnection adoptQueryGenerationWithIdentifier:]((uint64_t)v121, v60);
      if ((_DWORD)v61)
      {
        v142 = CFSTR("NSSQLiteErrorDomain");
        v143 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v61);
        v117 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v143, &v142, 1);
        v118 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99750], (int)v61, (uint64_t)CFSTR("Persistent history request failed to adopt query generation"), v117);
        -[_NSCoreDataException _setDomain:]((uint64_t)v118, CFSTR("NSSQLiteErrorDomain"));
        objc_exception_throw(v118);
      }
      v119 = 1;
    }
    v62 = objc_msgSend(a1, "fetchRequestContextForChanges");
    v63 = (void *)v62;
    if (a1)
      v64 = (void *)a1[3];
    else
      v64 = 0;
    -[NSSQLStoreRequestContext setConnection:](v62, v64);
    Request = _executeFetchRequest((uint64_t)v63);
    if (v119)
    {
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
      -[NSSQLiteConnection commitTransaction]((uint64_t)v121);
    }
    v119 = 0;
    -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v63, 0);
    if (objc_msgSend(v4, "resultType") != 5
      || (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v63, "request"), "entityName"), "isEqualToString:", CFSTR("CHANGE")) & 1) != 0|| (objc_msgSend(a1, "shouldUseBatches") & 1) != 0|| !objc_msgSend(Request, "count"))
    {
      if ((objc_msgSend(v4, "resultType") == 1 || objc_msgSend(v4, "resultType") == 4)
        && objc_msgSend((id)objc_msgSend((id)objc_msgSend(v63, "request"), "entityName"), "isEqualToString:", CFSTR("TRANSACTION")))
      {
        v94 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(Request, "count"));
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v95 = objc_msgSend(Request, "countByEnumeratingWithState:objects:count:", &v126, v138, 16);
        if (v95)
        {
          v96 = *(_QWORD *)v127;
          do
          {
            for (i = 0; i != v95; ++i)
            {
              if (*(_QWORD *)v127 != v96)
                objc_enumerationMutation(Request);
              v98 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * i);
              v99 = (void *)MEMORY[0x18D76B4E4]();
              objc_msgSend(v94, "addObject:", objc_msgSend(v98, "objectForKey:", CFSTR("self")));
              objc_autoreleasePoolPop(v99);
            }
            v95 = objc_msgSend(Request, "countByEnumeratingWithState:objects:count:", &v126, v138, 16);
          }
          while (v95);
        }
        if (objc_msgSend(v94, "count"))
        {
          v100 = (void *)objc_msgSend(a1, "createRequestContextForChangesWithTransactionIDs:", v94);
          objc_msgSend((id)objc_msgSend(v100, "request"), "setResultType:", objc_msgSend(v4, "resultType"));
          if (a1)
            v101 = (void *)a1[3];
          else
            v101 = 0;
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v100, v101);
          v102 = _executeChangeRequest(v100, &v134);
          if (v102)
            v103 = v134 == 0;
          else
            v103 = 0;
          if (v103)
            Request = (void *)v102;
          else
            Request = 0;
        }
        else
        {
          v100 = 0;
          Request = (void *)MEMORY[0x1E0C9AA60];
        }
        -[NSSQLStoreRequestContext setConnection:]((uint64_t)v100, 0);
      }
      else if ((objc_msgSend(v4, "resultType") == 3 || objc_msgSend(v4, "resultType") == 5)
             && objc_msgSend((id)objc_msgSend((id)objc_msgSend(v63, "request"), "entityName"), "isEqualToString:", CFSTR("CHANGE")))
      {
        v104 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(Request, "count"));
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v105 = objc_msgSend(Request, "countByEnumeratingWithState:objects:count:", &v122, v137, 16);
        if (v105)
        {
          v106 = *(_QWORD *)v123;
          do
          {
            for (j = 0; j != v105; ++j)
            {
              if (*(_QWORD *)v123 != v106)
                objc_enumerationMutation(Request);
              v108 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * j);
              v109 = (void *)MEMORY[0x18D76B4E4]();
              objc_msgSend(v104, "addObject:", objc_msgSend(v108, "objectForKey:", CFSTR("TRANSACTIONID")));
              objc_autoreleasePoolPop(v109);
            }
            v105 = objc_msgSend(Request, "countByEnumeratingWithState:objects:count:", &v122, v137, 16);
          }
          while (v105);
        }
        if (objc_msgSend(v104, "count"))
        {
          v110 = (void *)objc_msgSend(a1, "createRequestContextForChangesWithTransactionIDs:", v104);
          objc_msgSend((id)objc_msgSend(v110, "request"), "setResultType:", 3);
          if (a1)
            v111 = (void *)a1[3];
          else
            v111 = 0;
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v110, v111);
          v112 = _executeChangeRequest(v110, &v134);
          if (v134 || (v113 = (void *)v112) == 0)
          {
            Request = 0;
          }
          else if (objc_msgSend(v4, "resultType") == 5)
          {
            v136[0] = v113;
            v136[1] = Request;
            Request = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v136, 2);
          }
          else
          {
            Request = v113;
          }
        }
        else
        {
          v110 = 0;
          Request = (void *)MEMORY[0x1E0C9AA60];
        }
        -[NSSQLStoreRequestContext setConnection:]((uint64_t)v110, 0);
      }
      goto LABEL_177;
    }
    v65 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(Request, "count"));
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v66 = objc_msgSend(Request, "countByEnumeratingWithState:objects:count:", &v130, v141, 16);
    if (v66)
    {
      v67 = *(_QWORD *)v131;
      do
      {
        for (k = 0; k != v66; ++k)
        {
          if (*(_QWORD *)v131 != v67)
            objc_enumerationMutation(Request);
          v69 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * k);
          v70 = (void *)MEMORY[0x18D76B4E4]();
          objc_msgSend(v65, "addObject:", objc_msgSend(v69, "objectForKey:", CFSTR("self")));
          objc_autoreleasePoolPop(v70);
        }
        v66 = objc_msgSend(Request, "countByEnumeratingWithState:objects:count:", &v130, v141, 16);
      }
      while (v66);
    }
    if (objc_msgSend(v65, "count"))
    {
      v71 = objc_msgSend(a1, "createRequestContextForChangesWithTransactionIDs:", v65);
      v72 = v71;
      if (a1)
        v73 = (void *)a1[3];
      else
        v73 = 0;
      -[NSSQLStoreRequestContext setConnection:](v71, v73);
      v74 = _executeChangeRequest(v72, &v134);
      if (!v134 && v74)
      {
        v140[0] = Request;
        v140[1] = v74;
        v75 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v140, 2);
LABEL_173:
        Request = (void *)v75;
        goto LABEL_176;
      }
      Request = 0;
    }
    else
    {
      v72 = 0;
      if (Request)
      {
        v139[0] = Request;
        v139[1] = MEMORY[0x1E0C9AA60];
        v75 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v139, 2);
        goto LABEL_173;
      }
    }
LABEL_176:
    -[NSSQLStoreRequestContext setConnection:](v72, 0);
LABEL_177:
    v32 = 0;
LABEL_178:
    v30 = v119;
LABEL_179:
    v85 = 0;
    goto LABEL_180;
  }
  if (objc_msgSend(v4, "isPercentageDelete")
    && (v52 = -[NSSQLiteConnection percentageUsedByPersistentHistory]((uint64_t)v121),
        v52 <= objc_msgSend(v4, "percentageOfDB")))
  {
    -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
    v147 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
    v85 = 1;
    v32 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v147, 1);
    v86 = 0;
    v53 = 0;
    Request = 0;
  }
  else
  {
    v53 = objc_msgSend(a1, "createDeleteTransactionsRequestContext");
    -[NSSQLStoreRequestContext setConnection:](v53, v121);
    v54 = _executeBatchDeleteRequest(v53, &v134);
    if (v134)
    {
      Request = 0;
    }
    else
    {
      v146 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      Request = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v146, 1);
    }
    if ((int)objc_msgSend(-[NSBatchDeleteResult result](v54, "result"), "intValue") >= 1)
    {
      if (v53)
        v84 = *(_QWORD *)(v53 + 24);
      else
        v84 = 0;
      -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](v84, objc_msgSend((id)objc_msgSend(a1, "request"), "_secureOperation"), 0);
    }
    v85 = 0;
    v32 = 0;
    v86 = 1;
  }
  -[NSSQLStoreRequestContext setConnection:](v53, 0);
  if ((v86 & 1) != 0)
    goto LABEL_178;
LABEL_180:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v121, 0);
  if (v30)
    -[NSSQLiteConnection rollbackTransaction]((uint64_t)v121);
  if (a2 && v134)
    *a2 = v134;
  if ((v85 | 4) == 4)
    return Request;
  return (void *)v32;
}

void sub_18A2F67C8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint8_t buf,int a43,int a44,__int16 a45)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2F6514);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2F6B00(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,__int128 a41)
{
  id v41;
  id v42;
  void *v43;
  NSObject *v44;
  void *v45;

  if (a2)
  {
    if (a2 == 4 || a2 == 3)
    {
      v41 = objc_begin_catch(a1);
      objc_msgSend(v41, "errorObjectWithUserInfo:", 0);
      objc_msgSend(v41, "userInfo");
      _NSCoreDataLog(1, CFSTR("Unhandled error encountered during change request %@ with userInfo %@"));
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v42 = objc_begin_catch(a1);
        v43 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Unhandled exception encountered during change request: %@ with userInfo %@");
        objc_msgSend(v42, "userInfo");
        _NSCoreDataLog(17, v43);
        v44 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          v45 = objc_msgSend(v42, "userInfo");
          LODWORD(a41) = 138412546;
          *(_QWORD *)((char *)&a41 + 4) = v42;
          WORD6(a41) = 2112;
          *(_QWORD *)((char *)&a41 + 14) = v45;
          _os_log_fault_impl(&dword_18A253000, v44, OS_LOG_TYPE_FAULT, "CoreData: Unhandled exception encountered during change request: %@ with userInfo %@", (uint8_t *)&a41, 0x16u);
        }
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18A2F6534);
  }
  JUMPOUT(0x18A2F6AF8);
}

void sub_18A2F6C70(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2F6BB0);
  }
  JUMPOUT(0x18A2F6AF8);
}

_NSPersistentHistoryChange *ancillaryModelObjectBlock_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  _NSPersistentHistoryTransaction *v9;
  NSPersistentHistoryChangeRequest *v10;
  NSPersistentHistoryChangeRequest *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  uint8_t buf[4];
  id v58;
  _QWORD v59[2];

  v59[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(CFSTR("TRANSACTION"), "isEqualToString:", objc_msgSend(a2, "entityName")))
  {
    v9 = -[_NSPersistentHistoryTransaction initWithDictionary:andObjectID:]([_NSPersistentHistoryTransaction alloc], "initWithDictionary:andObjectID:", a4, a5);
    if (objc_msgSend((id)objc_msgSend(a2, "relationshipKeyPathsForPrefetching"), "count") && v9)
    {
      v10 = [NSPersistentHistoryChangeRequest alloc];
      v59[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a5, "_referenceData64"));
      v11 = -[NSPersistentHistoryChangeRequest initWithTransactionIDs:](v10, "initWithTransactionIDs:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v59, 1));
      -[NSPersistentHistoryChangeRequest setFetchBatchSize:](v11, "setFetchBatchSize:", objc_msgSend(a2, "fetchLimit"));
      if (objc_msgSend((id)objc_msgSend(a2, "affectedStores"), "count"))
        -[NSPersistentStoreRequest setAffectedStores:](v11, "setAffectedStores:", objc_msgSend(a2, "affectedStores"));
      v12 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
      v54 = 0;
      v19 = (void *)objc_msgSend((id)objc_msgSend(a3, "executeRequest:error:", v11, &v54), "result");
      if (!v19)
      {
        _NSCoreDataLog(1, (uint64_t)CFSTR("Batched history request: %@ encountered an error"), v13, v14, v15, v16, v17, v18, (uint64_t)v11);
        _NSCoreDataLog(1, (uint64_t)CFSTR(" \t error: %@"), v37, v38, v39, v40, v41, v42, (uint64_t)v54);
        v43 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Batched history request encountered error %@");
        _NSCoreDataLog(17, v43, v44, v45, v46, v47, v48, v49, (uint64_t)v54);
        v50 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v58 = v54;
          _os_log_fault_impl(&dword_18A253000, v50, OS_LOG_TYPE_FAULT, "CoreData: Batched history request encountered error %@", buf, 0xCu);
        }
        v51 = objc_msgSend(v54, "code");
        v55 = *MEMORY[0x1E0CB3388];
        v56 = v54;
        v52 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1);
        v53 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, *MEMORY[0x1E0C99768], v51, (uint64_t)CFSTR("Batched persistent history request encountered an error"), v52);
        -[_NSCoreDataException _setDomain:]((uint64_t)v53, (void *)objc_msgSend(v54, "domain"));
        objc_exception_throw(v53);
      }
      if (v54)
      {
        v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Batched persistent history request returned a result AND an error %@");
        _NSCoreDataLog(17, v20, v21, v22, v23, v24, v25, v26, (uint64_t)v54);
        v27 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v58 = v54;
          _os_log_fault_impl(&dword_18A253000, v27, OS_LOG_TYPE_FAULT, "CoreData: Batched persistent history request returned a result AND an error %@", buf, 0xCu);
        }
      }
      if (objc_msgSend(v19, "count"))
      {
        objc_msgSend(v19, "_setTransaction:", v9);
        -[_NSPersistentHistoryTransaction _setChanges:](v9, v19);
      }

      objc_msgSend(v12, "drain");
      v28 = 0;
    }
  }
  else
  {
    if (objc_msgSend(CFSTR("CHANGE"), "isEqualToString:", objc_msgSend(a2, "entityName")))
      return -[_NSPersistentHistoryChange initWithDictionary:andChangeObjectID:]([_NSPersistentHistoryChange alloc], "initWithDictionary:andChangeObjectID:", a4, a5);
    v30 = objc_msgSend(a2, "entityName");
    _NSCoreDataLog(9, (uint64_t)CFSTR("Error attempted to convert unknown Ancillary Entity: %@"), v31, v32, v33, v34, v35, v36, v30);
    return 0;
  }
  return (_NSPersistentHistoryChange *)v9;
}

void sub_18A2F70D0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;
  id v4;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A2F6E84);
    }
    v3 = objc_begin_catch(exception_object);

    v4 = v3;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A2F715C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2F7118);
  }
  JUMPOUT(0x18A2F7170);
}

void sub_18A2F7608(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2F7D18()
{
  __break(1u);
}

void sub_18A2F7D88()
{
  objc_end_catch();
  JUMPOUT(0x18A2F7D58);
}

void sub_18A2F7D94()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A2F7D9CLL);
  JUMPOUT(0x18A2F7DA0);
}

void sub_18A2F8204(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2F8224(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A2F811CLL);
}

void sub_18A2F89E0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A2F88DCLL);
}

void sub_18A2F9984(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A2F9450);
    }
    objc_begin_catch(exc_buf);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A2F9A48(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A2F9A20);
  }
  JUMPOUT(0x18A2F99E4);
}

void sub_18A2FB6F4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A2FB440);
  }
  _Unwind_Resume(exc_buf);
}

void _faultBatchAtIndex(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const __CFAllocator *v50;
  int v51;
  const __CFString *v52;
  const __CFDictionary *v53;
  __CFDictionary *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  unint64_t v64;
  void *v65;
  void *v66;
  _DWORD *Value;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  int v77;
  void *v78;
  uint64_t v79;
  _NSPersistentHistoryChange *v80;
  _NSPersistentHistoryChange *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  void *context;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  const __CFDictionary *theDict;
  unint64_t v96;
  const __CFString *v97;
  id obj;
  unsigned int v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  CFDictionaryKeyCallBacks keyCallBacks;
  id v114;
  _BYTE v115[128];
  _QWORD v116[4];
  _QWORD v117[2];
  _QWORD v118[2];
  _BYTE v119[128];
  _BYTE v120[128];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  const __CFString *v153;
  uint64_t v154;
  const __CFString *v155;
  _QWORD v156[3];

  v156[1] = *MEMORY[0x1E0C80C00];
  v3 = a2 / *(_DWORD *)(a1 + 48);
  v4 = v3 >> 5;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v4) & (1 << ~(_BYTE)v3)) != 0)
    return;
  v6 = a1;
  v86 = 1 << ~(_BYTE)v3;
  v7 = MEMORY[0x18D76B4E4]();
  v8 = *(_DWORD *)(v6 + 48);
  v9 = v8 * v3;
  v10 = v9 + v8;
  v11 = *(_DWORD *)(v6 + 12);
  if (v10 < v11)
    v11 = v10;
  v99 = v11;
  v12 = objc_msgSend(*(id *)(v6 + 16), "_objectsPointer");
  if (a3)
  {
    v13 = *(unsigned __int8 *)(v6 + 64);
    v14 = *(_QWORD *)(v6 + 56);
    v15 = *(_DWORD *)(v14 + 4 * v13);
    *(_DWORD *)(v14 + 4 * v13) = v3;
    v16 = v15 == -1 || v15 == v3;
    v17 = !v16;
    v85 = v17;
    if (!v16)
      _releaseStaleBatch(v6, v15);
    *(_BYTE *)(v6 + 64) = ((int)v13 + 1) % ((*(_DWORD *)(v6 + 64) >> 9) & 0x7FFu);
  }
  else
  {
    v85 = 0;
  }
  v18 = *(void **)(v6 + 40);
  v19 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "entity"), "managedObjectModel"), "_modelsReferenceIDOffset");
  v92 = v19;
  v20 = objc_msgSend(v18, "resultType");
  v21 = v20 == 2 && v19 != 16000;
  if (v19 == 16000 && v20 != 2)
  {
    objc_msgSend(v18, "setResultType:", 2);
    v21 = 0;
  }
  v94 = v99 - v9;
  v91 = v18;
  v93 = v21;
  v89 = v3 >> 5;
  v87 = v12;
  if ((objc_msgSend(v18, "includesPropertyValues") & 1) != 0
    || objc_msgSend((id)objc_msgSend(v18, "relationshipKeyPathsForPrefetching"), "count")
    || objc_msgSend((id)objc_msgSend(v18, "propertiesToFetch"), "count"))
  {
    v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", objc_msgSend(*(id *)(v6 + 16), "_objectsPointer") + 8 * v9, v94);
    v155 = CFSTR("batch");
    v156[0] = objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", v23);
    objc_msgSend(v18, "setSubstitutionVariables:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v156, &v155, 1));
    v24 = objc_msgSend(v23, "count");

    v114 = 0;
    v26 = v9;
    if (v19 == 16000)
    {
      v27 = 0x1ECD87000uLL;
      v25 = objc_msgSend(*(id *)(v6 + 32), "_allowAncillaryEntities");
      if ((v25 & 1) != 0)
      {
        v28 = 0;
      }
      else
      {
        v28 = 1;
        v25 = objc_msgSend(*(id *)(v6 + 32), "_setAllowAncillaryEntities:", 1);
      }
    }
    else
    {
      v28 = 0;
      v27 = 0x1ECD87000;
    }
    v29 = (void *)MEMORY[0x18D76B4E4](v25);
    v30 = *(void **)(v6 + *(int *)(v27 + 756));
    v18 = v91;
    v31 = (void *)objc_msgSend(v30, "executeFetchRequest:error:", v91, &v114);
    v153 = CFSTR("batch");
    v154 = objc_msgSend(MEMORY[0x1E0CB35D0], "expressionForConstantValue:", NSArray_EmptyArray);
    objc_msgSend(v91, "setSubstitutionVariables:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v154, &v153, 1));
    v32 = v31;
    v33 = v114;
    objc_autoreleasePoolPop(v29);
    v34 = v31;
    v35 = v114;
    if (v28)
      objc_msgSend(*(id *)(v6 + 32), "_setAllowAncillaryEntities:", 0);
    if (!v31)
    {
      v36 = v114;
      objc_msgSend(v114, "userInfo");
      _NSCoreDataLog(1, (uint64_t)CFSTR("batched fetch array received an error %@ with userInfo %@"), v37, v38, v39, v40, v41, v42, (uint64_t)v36);
      v31 = 0;
    }
    v9 = v26;
    v12 = v87;
  }
  else
  {
    v24 = 0;
    v31 = 0;
    v114 = 0;
  }
  v43 = v92;
  if (objc_msgSend(v31, "count") > v24)
  {
    objc_msgSend(v31, "count");
    _NSCoreDataLog(1, (uint64_t)CFSTR(" batched fetch request asked to fetch %d objects but received %d objects as %@"), v44, v45, v46, v47, v48, v49, v24);
  }
  context = (void *)v7;
  obj = v31;
  v152 = 0u;
  v151 = 0u;
  v150 = 0u;
  v149 = 0u;
  v148 = 0u;
  v147 = 0u;
  v146 = 0u;
  v145 = 0u;
  v144 = 0u;
  v143 = 0u;
  v142 = 0u;
  v141 = 0u;
  v140 = 0u;
  v139 = 0u;
  v138 = 0u;
  v137 = 0u;
  v136 = 0u;
  v135 = 0u;
  v134 = 0u;
  v133 = 0u;
  v132 = 0u;
  v131 = 0u;
  v130 = 0u;
  v129 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v50 = _PFStackAllocatorCreate((unint64_t *)&v121, 1024);
  memset(&keyCallBacks, 0, 24);
  *(_OWORD *)&keyCallBacks.copyDescription = *(_OWORD *)(MEMORY[0x1E0C9B390] + 24);
  keyCallBacks.hash = *(CFDictionaryHashCallBack *)(MEMORY[0x1E0C9B390] + 40);
  v51 = v92 == 16000 || v21;
  v97 = CFSTR("self");
  if (v51 == 1)
  {
    v52 = CFSTR("self");
    if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "propertiesToFetch"), "valueForKey:", CFSTR("name")), "containsObject:", CFSTR("self")))v52 = CFSTR("objectID");
    v97 = v52;
  }
  v53 = (const __CFDictionary *)objc_msgSend(obj, "count");
  if (v53)
  {
    v54 = CFDictionaryCreateMutable(v50, objc_msgSend(obj, "count"), &keyCallBacks, 0);
    if (v51)
    {
      v111 = 0uLL;
      v112 = 0uLL;
      v109 = 0uLL;
      v110 = 0uLL;
      v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v120, 16);
      if (v55)
      {
        v56 = v55;
        v57 = *(_QWORD *)v110;
        v58 = context;
        do
        {
          for (i = 0; i != v56; ++i)
          {
            if (*(_QWORD *)v110 != v57)
              objc_enumerationMutation(obj);
            CFDictionaryAddValue(v54, (const void *)objc_msgSend(*(id *)(*((_QWORD *)&v109 + 1) + 8 * i), "objectForKey:", v97), *(const void **)(*((_QWORD *)&v109 + 1) + 8 * i));
          }
          v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v120, 16);
        }
        while (v56);
LABEL_63:
        v18 = v91;
        v21 = v93;
LABEL_65:
        v53 = v54;
        v4 = v89;
        goto LABEL_66;
      }
    }
    else
    {
      v107 = 0uLL;
      v108 = 0uLL;
      v105 = 0uLL;
      v106 = 0uLL;
      v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v119, 16);
      if (v60)
      {
        v61 = v60;
        v62 = *(_QWORD *)v106;
        v58 = context;
        do
        {
          for (j = 0; j != v61; ++j)
          {
            if (*(_QWORD *)v106 != v62)
              objc_enumerationMutation(obj);
            CFDictionaryAddValue(v54, (const void *)objc_msgSend(*(id *)(*((_QWORD *)&v105 + 1) + 8 * j), "objectID"), *(const void **)(*((_QWORD *)&v105 + 1) + 8 * j));
          }
          v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v119, 16);
        }
        while (v61);
        goto LABEL_63;
      }
    }
    v58 = context;
    goto LABEL_65;
  }
  v58 = context;
LABEL_66:
  if (v99 > v9)
  {
    v64 = 0;
    theDict = v53;
    while (1)
    {
      v96 = v64;
      v65 = *(void **)(v12 + 8 * v9);
      if (v21)
      {
        v66 = *(void **)(v12 + 8 * v9);
        if (!v53 || (Value = CFDictionaryGetValue(theDict, v65)) == 0)
        {
          if (objc_msgSend(obj, "count") <= v96)
          {
            v117[0] = v97;
            v117[1] = CFSTR("isDeleted");
            v118[0] = v66;
            v118[1] = MEMORY[0x1E0C9AAB0];
            Value = (_DWORD *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v118, v117, 2);
          }
          else
          {
            Value = (id)objc_msgSend(obj, "objectAtIndexedSubscript:");
          }
          if (!Value)
            goto LABEL_98;
        }
        goto LABEL_97;
      }
      if (v43 == 16000)
        break;
      if (!v53 || (Value = CFDictionaryGetValue(v53, *(const void **)(v12 + 8 * v9))) == 0)
        Value = (_DWORD *)objc_msgSend(*(id *)(v6 + 32), "objectWithID:", v65);
      v66 = v65;
      Value[4] |= 0x4000u;
LABEL_97:
      *(_QWORD *)(v12 + 8 * v9) = Value;
LABEL_98:

      ++v9;
      v53 = theDict;
      v64 = v96 + 1;
      if ((_DWORD)v94 == (_DWORD)v96 + 1)
        goto LABEL_107;
    }
    if (!v53 || (v68 = (void *)CFDictionaryGetValue(v53, *(const void **)(v12 + 8 * v9)), (v69 = v68) == 0))
    {
      v68 = (void *)objc_msgSend(*(id *)(v6 + 32), "objectWithID:", v65);
      v69 = v68;
      if (v68)
      {
        v90 = v65;
        v100 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend((id)objc_msgSend(v18, "propertiesToFetch"), "count"));
        v68 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v69, "entity"), "name"), "isEqualToString:", CFSTR("TRANSACTION"));
        if ((_DWORD)v68)
        {
          v116[0] = CFSTR("AUTHORTS");
          v116[1] = CFSTR("BUNDLEIDTS");
          v116[2] = CFSTR("CONTEXTNAMETS");
          v116[3] = CFSTR("PROCESSIDTS");
          v70 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v116, 4);
          v101 = 0u;
          v102 = 0u;
          v103 = 0u;
          v104 = 0u;
          v71 = (void *)objc_msgSend(v18, "propertiesToFetch");
          v68 = (void *)objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v101, v115, 16);
          if (v68)
          {
            v72 = v68;
            v83 = v9;
            v84 = v6;
            v73 = *(_QWORD *)v102;
            while (1)
            {
              v74 = 0;
              do
              {
                if (*(_QWORD *)v102 != v73)
                  objc_enumerationMutation(v71);
                v75 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v74);
                v76 = (void *)MEMORY[0x18D76B4E4]();
                v77 = objc_msgSend(v70, "containsObject:", objc_msgSend(v75, "name"));
                v78 = (void *)objc_msgSend(v69, "valueForKey:", objc_msgSend(v75, "name"));
                v79 = (uint64_t)v78;
                if (!v77)
                {
                  if (!v78)
                    goto LABEL_88;
LABEL_87:
                  objc_msgSend(v100, "setValue:forKey:", v79, objc_msgSend(v75, "name"));
                  goto LABEL_88;
                }
                v79 = objc_msgSend(v78, "valueForKey:", CFSTR("NAME"));
                if (v79)
                  goto LABEL_87;
LABEL_88:
                objc_autoreleasePoolPop(v76);
                v74 = (char *)v74 + 1;
              }
              while (v72 != v74);
              v68 = (void *)objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v101, v115, 16);
              v72 = v68;
              if (!v68)
              {
                v69 = v100;
                v9 = v83;
                v6 = v84;
                v58 = context;
                v4 = v89;
                v12 = v87;
                goto LABEL_101;
              }
            }
          }
          v69 = v100;
LABEL_101:
          v18 = v91;
          v43 = v92;
        }
        v65 = v90;
      }
    }
    v66 = v65;
    v80 = ancillaryModelObjectBlock_block_invoke((uint64_t)v68, v18, *(void **)(v6 + 32), (uint64_t)v69, v65);
    v21 = v93;
    if (v80)
    {
      v81 = v80;
      *(_QWORD *)(v12 + 8 * v9) = v80;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend((id)v6, "transaction"))
          -[_NSPersistentHistoryChange _setTransaction:](v81, "_setTransaction:", objc_msgSend((id)v6, "transaction"));
      }
    }
    goto LABEL_98;
  }
LABEL_107:
  if (*((_QWORD *)&v122 + 1))
  {
    v82 = 0x1ECD87000;
    if (v53)
      CFRelease(v53);
  }
  else
  {
    *((_QWORD *)&v121 + 1) = v121;
    v82 = 0x1ECD87000uLL;
  }
  *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v4) |= v86;
  if ((_MergedGlobals_39 & 1) == 0 && ((v85 ^ 1) & 1) == 0)
    -[NSManagedObjectContext _processReferenceQueue:](*(_QWORD *)(v6 + *(int *)(v82 + 756)), 0);
  objc_autoreleasePoolPop(v58);
}

void sub_18A2FDB90(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2FDBA8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2FDBB4);
}

void snapshot_set_objectID(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 16);
  if (v3 != a2)
  {
    v4 = v3;
    *(_QWORD *)(a1 + 16) = a2;
    if (v4)

  }
}

void sub_18A2FFB78(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A2FFB98(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A2FFBBCLL);
}

void sub_18A2FFBA0(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A2FFBA8);
  _Unwind_Resume(a1);
}

void sub_18A2FFCB0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  const char *v5;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(exception_object);
    -[NSSQLiteConnection disconnect](v3);
    if (v2)
      objc_setProperty_nonatomic(v2, v5, v4, 48);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _PFfastFactoryRelease2(void *a1)
{
  unsigned int *IndexedIvars;
  unsigned int *v2;
  unsigned int v3;
  const void *v4;

  IndexedIvars = (unsigned int *)object_getIndexedIvars(a1);
  v2 = IndexedIvars;
  do
    v3 = __ldxr(IndexedIvars);
  while (__stxr(v3 - 1, IndexedIvars));
  if (!v3)
  {
    v4 = (const void *)*((_QWORD *)IndexedIvars + 2);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)v2 + 2) = 0;
    }
    *((_QWORD *)v2 + 1) = 0;
    __dmb(0xBu);
  }
}

void sub_18A302434(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18A302448(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _populateRowValuesOnBackgroundThread(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  CFIndex Count;
  unint64_t v5;
  CFIndex v6;
  const __CFArray *v7;
  CFIndex v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t plan_for_entity;
  uint64_t v18;
  unsigned __int8 *v19;
  id *v20;
  int v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  const char *v27;
  int *v28;
  __CFString *v29;
  uint64_t v30;
  int v31;
  __CFString *v32;
  double *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int *v42;
  _PFExternalReferenceData *v43;
  uint64_t v44;
  _PFExternalReferenceData *v45;
  unint64_t v46;
  __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __CFString *v51;
  uint64_t v52;
  uint64_t v53;
  const UInt8 *v54;
  CFDataRef v55;
  int v56;
  uint64_t v57;
  Class v58;
  _QWORD *IndexedIvars;
  unsigned int v60;
  double v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _PFExternalReferenceData *v74;
  uint64_t v75;
  uint64_t v76;
  Class Class;
  int v78;
  uint64_t v79;
  _NSDataFileBackedFuture *v80;
  uint64_t v81;
  void **v82;
  _PFExternalReferenceData *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  CFIndex v88;
  _QWORD *v90;
  pthread_cond_t *v91;
  pthread_cond_t *v92;
  pthread_mutex_t *v93;
  __CFArray *v94;
  pthread_mutex_t *v95;
  const __CFArray *theArray;
  uint64_t v97;
  CFIndex v98;
  _QWORD *v99;
  const void *v100;
  CFIndex v101;
  uint64_t v102;
  void (*v103)(uint64_t, char *, _QWORD, uint64_t);
  void (*v104)(uint64_t, char *, _QWORD, uint64_t);
  _BOOL4 v105;
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void (*v110)(uint64_t, char *, uint64_t);
  void (*v111)(uint64_t, char *, _QWORD, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *values[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  CFRange v152;
  CFRange v153;

  v151 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 24);
  v112 = *v2;
  theArray = (const __CFArray *)v2[1];
  v3 = v2[4];
  v99 = (_QWORD *)v2[3];
  v94 = (__CFArray *)v2[5];
  v90 = (_QWORD *)v2[6];
  PF_FREE_OBJECT_ARRAY(v2);
  *(_QWORD *)(a1 + 24) = 0;
  v104 = (void (*)(uint64_t, char *, _QWORD, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v111 = (void (*)(uint64_t, char *, _QWORD, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v103 = (void (*)(uint64_t, char *, _QWORD, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v110 = (void (*)(uint64_t, char *, uint64_t))+[NSSQLRow instanceMethodForSelector:](NSSQLRow, "instanceMethodForSelector:");
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v95 = (pthread_mutex_t *)(a1 + 32);
  v131 = 0u;
  v132 = 0u;
  v93 = (pthread_mutex_t *)(v3 + 32);
  v97 = v3;
  v91 = (pthread_cond_t *)(a1 + 96);
  v92 = (pthread_cond_t *)(v3 + 96);
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  *(_OWORD *)values = 0u;
  v120 = 0u;
LABEL_2:
  while (1)
  {
    pthread_mutex_lock(v95);
    while (1)
    {
      Count = CFArrayGetCount(theArray);
      v5 = Count;
      if (Count >= 1)
        break;
      if (*v99)
        pthread_cond_wait(v91, v95);
      if (!*v99)
      {
        v6 = v5;
        v7 = theArray;
        goto LABEL_14;
      }
    }
    v6 = Count >= 128 ? 128 : Count;
    v7 = theArray;
    v152.location = 0;
    v152.length = v6;
    CFArrayGetValues(theArray, v152, (const void **)values);
    if (v5 > 0x7F)
    {
      v153.location = 0;
      v153.length = v6;
      CFArrayReplaceValues(theArray, v153, 0, 0);
    }
    else
    {
      CFArrayRemoveAllValues(theArray);
    }
LABEL_14:
    if (!(*v99 | v6) && !CFArrayGetCount(v7))
      break;
    pthread_mutex_unlock(v95);
    if (v112)
    {
      v113 = *(_QWORD *)(v112 + 112);
      v109 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v105 = *(_BYTE *)(v112 + 201) != 0;
    }
    else
    {
      v109 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v113 = 0;
      v105 = 0;
    }
    if (v6 >= 1)
    {
      v8 = 0;
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v98 = v6;
      while (1)
      {
        v101 = v8;
        v9 = values[v8];
        v10 = *(void **)((char *)values + ((8 * v8) | 8));
        v116 = objc_msgSend(v10, "_objectsPointer", v90);
        v100 = v10;
        v114 = objc_msgSend(v10, "count");
        if (!v114)
          goto LABEL_155;
        v11 = 0;
        v12 = (uint64_t *)v9[8];
        v13 = *v12;
        v115 = v9;
        while (1)
        {
          while ((*(_DWORD *)v13 & 0x80000000) != 0)
          {
            v14 = *(unsigned int *)(v13 + 4);
            if ((v14 & 0x80000000) != 0)
              v13 = 0;
            else
              v13 = v12[v14] + *(_QWORD *)(v13 + 16);
          }
          v117 = v11;
          v118 = *(_QWORD *)(v116 + 8 * v11);
          v15 = *(char **)(v118 + 40);
          v16 = _sqlEntityForEntityID(v113, *(unsigned int *)(v13 + 8));
          plan_for_entity = _sql_fetch_plan_for_entity(v16);
          v18 = *(unsigned int *)(plan_for_entity + 4);
          if ((_DWORD)v18)
          {
            v19 = (unsigned __int8 *)(v13 + 32);
            v20 = (id *)(plan_for_entity + 24);
            while (1)
            {
              v21 = *((unsigned __int8 *)v20 - 4);
              if ((v21 - 2) > 6)
                v22 = 3;
              else
                v22 = qword_18A50A240[(char)(v21 - 2)];
              v19 = (unsigned __int8 *)((unint64_t)&v19[v22] & ~v22);
              if ((*(_BYTE *)(v20 - 1) & 1) != 0)
              {
                v24 = *v19++;
                v23 = v24 != 0;
              }
              else
              {
                v23 = 0;
              }
              v25 = (unsigned int *)(v20 - 2);
              v26 = ~v22;
              switch(*((_BYTE *)v20 - 4))
              {
                case 1:
                  v46 = (unint64_t)&v19[v22];
                  v47 = (__int16 *)(v46 & v26);
                  v48 = (v46 & v26) + 4;
                  if (v23)
                    v49 = (uint64_t)v19;
                  else
                    v49 = (v46 & v26) + 4;
                  v50 = *((unsigned __int8 *)v20 - 3);
                  switch(v50)
                  {
                    case 10:
                      if (v23)
                        v64 = 0;
                      else
                        v64 = *(unsigned int *)v47;
                      v103(v118, sel_setForeignOrderKeySlot_orderKey_, *v25, v64);
                      goto LABEL_110;
                    case 4:
                      if (v23)
                        v63 = 0;
                      else
                        v63 = *(unsigned int *)v47;
                      v104(v118, sel_setForeignEntityKeySlot_entityKey_, *v25, v63);
LABEL_110:
                      v19 = (unsigned __int8 *)v49;
                      goto LABEL_142;
                    case 1:
                      v39 = objc_msgSend((id)objc_msgSend(*v20, "propertyDescription"), "superCompositeAttribute");
                      if (v23)
                        goto LABEL_63;
                      if (v39)
                      {
                        setMultiColumnValueDictionary(v15, v20 - 2, (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)v47));
                      }
                      else
                      {
                        v76 = *v25;
                        Class = object_getClass(v15);
                        v78 = *(char *)(*((_QWORD *)object_getIndexedIvars(Class) + 7) + v76);
                        if (v78 == 115)
                        {
                          snapshot_set_int16(v15, *v25, *v47);
                        }
                        else if (v78 == 99)
                        {
                          snapshot_set_int8(v15, *v25, *(_BYTE *)v47);
                        }
                        else
                        {
                          snapshot_set_int32(v15, *v25, *(_DWORD *)v47);
                        }
                      }
                      v19 = (unsigned __int8 *)v48;
                      break;
                    default:
                      v19 = (unsigned __int8 *)v49;
                      break;
                  }
                  goto LABEL_142;
                case 2:
                case 3:
                  v34 = (unint64_t)&v19[v22];
                  v35 = (uint64_t *)(v34 & v26);
                  v36 = (v34 & v26) + 8;
                  if (v23)
                    v37 = (uint64_t)v19;
                  else
                    v37 = (v34 & v26) + 8;
                  v38 = *((unsigned __int8 *)v20 - 3);
                  switch(v38)
                  {
                    case 6:
                      if (v23)
                        v53 = 0;
                      else
                        v53 = *v35;
                      v110(v118, sel_setOptLock_, v53);
                      goto LABEL_92;
                    case 3:
                      if (v23)
                        v52 = 0;
                      else
                        v52 = *v35;
                      v111(v118, sel_setForeignKeySlot_int64_, *v25, v52);
LABEL_92:
                      v19 = (unsigned __int8 *)v37;
                      goto LABEL_142;
                    case 1:
                      v39 = objc_msgSend((id)objc_msgSend(*v20, "propertyDescription"), "superCompositeAttribute");
                      if (v23)
                      {
LABEL_63:
                        if (v39)
                          goto LABEL_67;
                        goto LABEL_64;
                      }
                      v65 = *v35;
                      if (v39)
                        setMultiColumnValueDictionary(v15, v20 - 2, (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v65));
                      else
                        snapshot_set_int64(v15, *v25, v65);
                      v19 = (unsigned __int8 *)v36;
                      break;
                    default:
                      v19 = (unsigned __int8 *)v37;
                      break;
                  }
                  goto LABEL_142;
                case 4:
                case 5:
                case 6:
                case 9:
                case 0xC:
                  if (v23)
                    goto LABEL_66;
                  v27 = (const char *)((unint64_t)&v19[v22] & v26);
                  v28 = (int *)(v27 + 4);
                  v29 = (__CFString *)CFStringCreateWithCString(0, v27 + 4, 0x8000100u);
                  v30 = *(int *)v27;
                  v31 = *((unsigned __int8 *)v20 - 4);
                  if (v31 == 12)
                  {
                    v32 = (__CFString *)(id)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v29);
                  }
                  else
                  {
                    if (v31 != 4)
                      goto LABEL_70;
                    v32 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", v29);
                  }
                  goto LABEL_69;
                case 7:
                case 8:
                  if (v23)
                    goto LABEL_66;
                  v33 = (double *)((unint64_t)&v19[v22] & v26);
                  v19 = (unsigned __int8 *)(v33 + 1);
                  if (objc_msgSend((id)objc_msgSend(*v20, "propertyDescription"), "superCompositeAttribute"))
                  {
                    setMultiColumnValueDictionary(v15, v20 - 2, (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *v33));
                    goto LABEL_142;
                  }
                  v57 = *((unsigned int *)v20 - 4);
                  if (*((_BYTE *)v20 - 4) == 7)
                  {
                    v58 = object_getClass(v15);
                    IndexedIvars = object_getIndexedIvars(v58);
                    v60 = *v25;
                    v61 = *v33;
                    if (*(_BYTE *)(IndexedIvars[7] + v57) == 102)
                    {
                      v62 = v61;
                      snapshot_set_float(v15, v60, v62);
                      goto LABEL_142;
                    }
                    v66 = v15;
                  }
                  else
                  {
                    v61 = *v33;
                    v66 = v15;
                    v60 = *((_DWORD *)v20 - 4);
                  }
                  snapshot_set_double(v66, v60, v61);
                  goto LABEL_142;
                case 0xD:
                case 0xE:
                  goto LABEL_142;
                case 0x10:
                  if (v23)
                    goto LABEL_66;
                  v40 = (int *)((unint64_t)&v19[v22] & v26);
                  v42 = v40 + 1;
                  v41 = *((unsigned __int8 *)v40 + 4);
                  if (v41 == 3)
                  {
                    if (v112)
                    {
                      v67 = v108;
                      if (!v108)
                        v67 = *(_QWORD *)(v112 + 104);
                    }
                    else
                    {
                      v67 = v108;
                    }
                    v79 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v42, *v40);
                    v80 = [_NSDataFileBackedFuture alloc];
                    v108 = v67;
                    v81 = -[_NSDataFileBackedFuture initWithStoreMetadata:directory:](v80, "initWithStoreMetadata:directory:", v79, objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v67, 1));
                    goto LABEL_138;
                  }
                  if (v41 != 1)
                  {
                    v68 = objc_msgSend(v109, "stringWithFileSystemRepresentation:length:", (char *)v40 + 5, strnlen((const char *)v40 + 5, *v40 - 1));
                    v69 = v106;
                    if (v106)
                    {
                      v70 = v112;
                      v71 = v107;
                      if (!v112 || v107)
                        goto LABEL_122;
LABEL_121:
                      v71 = *(void **)(v70 + 96);
                    }
                    else
                    {
                      v70 = v112;
                      v71 = v107;
                      if (v112)
                      {
                        v69 = *(void **)(v112 + 88);
                        if (!v107)
                          goto LABEL_121;
                      }
                      else
                      {
                        v69 = 0;
                      }
                    }
LABEL_122:
                    v106 = v69;
                    v72 = objc_msgSend(v69, "stringByAppendingPathComponent:", v68);
                    v107 = v71;
                    v73 = objc_msgSend(v71, "stringByAppendingPathComponent:", v68);
                    v102 = v73;
                    if (v105 && !objc_msgSend(v109, "fileExistsAtPath:", v72))
                    {
                      v45 = 0;
LABEL_134:
                      if ((objc_msgSend(v109, "fileExistsAtPath:", v72) & 1) != 0)
                        goto LABEL_139;

                      v82 = -[NSSQLFetchRequestContext ubiquitousExternalReferenceLocationForUUID:]((void **)v112, v68);
                      v83 = [_PFExternalReferenceData alloc];
                      if (v112)
                        v84 = *(unsigned int *)(v112 + 184);
                      else
                        v84 = 0;
                      v81 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:](v83, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:ubiquitousLocation:", v42, *v40, v72, v102, v84, v82);
LABEL_138:
                      v45 = (_PFExternalReferenceData *)v81;
                      goto LABEL_139;
                    }
                    v74 = [_PFExternalReferenceData alloc];
                    if (v112)
                      v75 = *(unsigned int *)(v112 + 184);
                    else
                      v75 = 0;
                    v45 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v74, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v42, *v40, v72, v73, v75);
                    if (v105)
                      goto LABEL_134;
                    goto LABEL_139;
                  }
                  v43 = [_PFExternalReferenceData alloc];
                  if (v112)
                    v44 = *(unsigned int *)(v112 + 184);
                  else
                    v44 = 0;
                  v45 = -[_PFExternalReferenceData initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:](v43, "initWithStoreBytes:length:externalLocation:safeguardLocation:protectionLevel:", v42, *v40, 0, 0, v44);
LABEL_139:
                  v19 = (unsigned __int8 *)v42 + *v40;
                  if (objc_msgSend((id)objc_msgSend(*v20, "propertyDescription"), "superCompositeAttribute"))
                  {
                    setMultiColumnValueDictionary(v15, v20 - 2, v45);

                  }
                  else
                  {
                    snapshot_set_object(v15, *v25, (uint64_t)v45);
                  }
LABEL_142:
                  v20 += 3;
                  if (!--v18)
                    goto LABEL_150;
                  break;
                default:
                  if (!v23)
                  {
                    v54 = (const UInt8 *)((unint64_t)&v19[v22] & v26);
                    v28 = (int *)(v54 + 4);
                    v55 = CFDataCreate(0, v54 + 4, *(int *)v54);
                    v29 = (__CFString *)v55;
                    v30 = *(int *)v54;
                    v56 = *((unsigned __int8 *)v20 - 4);
                    if (v56 == 11)
                    {
                      if (-[__CFData length](v55, "length") == 16)
                      {
                        v32 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", -[__CFString bytes](v29, "bytes"));
LABEL_69:
                        v51 = v32;
                        CFRelease(v29);
                        v29 = v51;
                      }
                      else
                      {

                        v29 = 0;
                      }
                    }
                    else if (v56 == 15)
                    {
                      v32 = (__CFString *)+[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)v55, (void *)objc_msgSend(*v20, "propertyDescription"));
                      goto LABEL_69;
                    }
LABEL_70:
                    v19 = (unsigned __int8 *)v28 + v30;
                    if (objc_msgSend((id)objc_msgSend(*v20, "propertyDescription"), "superCompositeAttribute"))
                    {
                      setMultiColumnValueDictionary(v15, v20 - 2, v29);

                    }
                    else
                    {
                      snapshot_set_object(v15, *v25, (uint64_t)v29);
                    }
                    goto LABEL_142;
                  }
LABEL_66:
                  if (objc_msgSend((id)objc_msgSend(*v20, "propertyDescription"), "superCompositeAttribute"))
LABEL_67:
                    setMultiColumnValueNullFlag(v15, (_DWORD *)v20 - 4);
                  else
LABEL_64:
                    v15[((unint64_t)*v25 >> 3) + 28] |= 1 << (*v25 & 7);
                  goto LABEL_142;
              }
            }
          }
LABEL_150:
          v85 = *(unsigned int *)(v13 + 4);
          if ((v85 & 0x80000000) != 0)
            break;
          v9 = v115;
          v12 = (uint64_t *)v115[8];
          v86 = v12[v85];
          if (v86)
          {
            v13 = v86 + *(_QWORD *)(v13 + 16);
            v11 = v117 + 1;
            if (v117 + 1 != v114)
              continue;
          }
          goto LABEL_155;
        }
        v9 = v115;
LABEL_155:
        if (v100)
          v87 = v97 == 0;
        else
          v87 = 1;
        if (!v87)
        {
          pthread_mutex_lock(v93);
          CFRetain(v100);
          CFArrayAppendValue(v94, v100);
          pthread_mutex_unlock(v93);
          pthread_cond_signal(v92);
          fetchResultSetDeallocate((uint64_t)v9);
          v88 = v101;
          goto LABEL_161;
        }
        fetchResultSetDeallocate((uint64_t)v9);
        v88 = v101;
        if (v100)
LABEL_161:
          CFRelease(v100);
        v8 = v88 + 2;
        if (v98 <= v8)
          goto LABEL_2;
      }
    }
  }
  if (v90)
    *v90 = 0;
  pthread_mutex_unlock(v95);
  return 0;
}

void sub_18A303E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
  a12(&a10);
  _Unwind_Resume(a1);
}

_QWORD *_svfk_11(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xBuLL);
}

uint64_t _PF_Handler_Public_SetProperty(unsigned int *a1, unint64_t a2, void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  char *v15;

  if (!a5)
    return objc_msgSend(a1, "_setGenericValue:forKey:withIndex:flags:", a3, a4, a2, 1);
  v10 = *(_QWORD *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 19) + 72);
  if (v10 && a3 && (*(_BYTE *)(v10 + a2) & 1) != 0 && objc_msgSend(a3, "isNSDate"))
  {
    v11 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "timeIntervalSinceReferenceDate");
    objc_msgSend(v11, "numberWithDouble:");
  }
  if (*a5 == _NSKeyValueIvarSetterClass)
  {
    objc_msgSend(a1, "willChangeValueForKey:", a4);
    _NSSetUsingKeyValueSetter();
    result = objc_msgSend(a1, "didChangeValueForKey:", a4);
  }
  else
  {
    result = _NSSetUsingKeyValueSetter();
  }
  v13 = a1[5];
  if ((_DWORD)v13)
    v14 = (char *)a1 + v13;
  else
    v14 = 0;
  v15 = &v14[-(((unint64_t)a1[4] >> 22) & 0x3FC)];
  v15[a2 >> 3] |= 1 << (a2 & 7);
  return result;
}

uint64_t _resolveForSelectorAndType(unint64_t *a1, const char *a2, objc_class *a3, int a4)
{
  uint64_t v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unint64_t *v12;
  Class Superclass;
  unint64_t v14;
  id v15;
  objc_class *Class;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  objc_ivar *v27;
  int v28;
  objc_class *v29;
  const char *v30;
  objc_method *InstanceMethod;
  int v32;
  uint64_t v33;
  char v34;
  objc_method *v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t *v39;
  void **v41;
  void *v42;
  unint64_t *v44;
  unsigned int v45;
  unint64_t v46;
  char dst[32];
  uint64_t v48;

  LODWORD(v4) = a4;
  v48 = *MEMORY[0x1E0C80C00];
  v8 = (void *)a1[13];
  v9 = objc_msgSend(v8, "keys");
  v10 = objc_msgSend(v8, "length");
  v11 = (void **)PF_CALLOC_OBJECT_ARRAY(v10);
  v12 = _PFFastEntityClass(a1);
  Superclass = class_getSuperclass((Class)v12);
  v46 = v10;
  if (v4 <= 1)
    v46 = *(_QWORD *)(a1[14] + 24) + *(_QWORD *)(a1[14] + 16);
  if (v10)
  {
    v45 = v4;
    v14 = 0;
    v44 = a1 + 19;
    while (1)
    {
      v15 = objc_msgSend(Superclass, a2, Superclass, *(_QWORD *)(v9 + 8 * v14));
      Class = object_getClass(v15);
      v17 = Class != 0;
      if (Class != a3 && Class != 0)
      {
        do
        {
          Class = class_getSuperclass(Class);
          v17 = Class != 0;
        }
        while (Class != a3 && Class);
      }
      if (!v17)
        break;

LABEL_43:
      if (++v14 == v10)
      {
        v36 = a1 + 19;
        v4 = v45;
        v37 = (unint64_t *)(*v44 + 8 * v45);
        while (!__ldaxr(v37))
        {
          if (!__stlxr((unint64_t)v11, v37))
            return *(_QWORD *)(*v36 + 8 * v4);
        }
        __clrex();
        v41 = v11;
        do
        {
          v42 = *v41++;

          --v10;
        }
        while (v10);
LABEL_56:
        PF_FREE_OBJECT_ARRAY(v11);
        return *(_QWORD *)(*v36 + 8 * v4);
      }
    }
    if (v14 > v46 && !PFUseToolchainBehaviors())
    {
      v19 = objc_msgSend(a1, "name");
      class_getName(Superclass);
      _NSCoreDataLog(2, (uint64_t)CFSTR("Relationship properties should be @dynamic, not ivars (entity %@, class %s, property %@).  This will be an error in the future."), v20, v21, v22, v23, v24, v25, v19);
    }
    v26 = *(void **)(a1[12] + 24 + 8 * v14);
    if ((objc_msgSend(v26, "_propertyType") & 0xFFFFFFFFFFFFFFFBLL) != 2 || objc_msgSend(v26, "attributeType") != 900)
    {
LABEL_42:
      v11[v14] = v15;
      goto LABEL_43;
    }
    if (v45 == 3)
    {
      if (!v15)
        goto LABEL_42;
      v29 = (objc_class *)objc_msgSend(v15, "containerClassID");
      if ((objc_opt_isKindOfClass() & 1) == 0
        && (objc_opt_isKindOfClass() & 1) != 0
        && (v30 = (const char *)objc_msgSend(v15, "selector")) != 0
        && (InstanceMethod = class_getInstanceMethod(v29, v30)) != 0)
      {
        method_getReturnType(InstanceMethod, dst, 0x20uLL);
        v32 = dst[0];
      }
      else
      {
        v32 = 0;
      }
      if (v32 != 58 && (v32 - 65) > 0x34)
        goto LABEL_42;
      v33 = *(_QWORD *)(*v44 + 72);
      v34 = *(_BYTE *)(v33 + v14) | 0x10;
LABEL_41:
      *(_BYTE *)(v33 + v14) = v34;
      goto LABEL_42;
    }
    if (v45 != 2 || !v15)
      goto LABEL_42;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v27 = (objc_ivar *)objc_msgSend(v15, "ivar");
      if (v27)
      {
        v28 = *(unsigned __int8 *)ivar_getTypeEncoding(v27);
        goto LABEL_38;
      }
    }
    else if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v35 = (objc_method *)objc_msgSend(v15, "method");
      if (v35)
      {
        method_getArgumentType(v35, 2u, dst, 0x20uLL);
        v28 = dst[0];
        goto LABEL_38;
      }
    }
    v28 = 0;
LABEL_38:
    if (v28 != 58 && (v28 - 65) > 0x34)
      goto LABEL_42;
    v33 = *(_QWORD *)(*v44 + 72);
    v34 = *(_BYTE *)(v33 + v14) | 1;
    goto LABEL_41;
  }
  v36 = a1 + 19;
  v4 = v4;
  v39 = (unint64_t *)(a1[19] + 8 * v4);
  do
  {
    if (__ldaxr(v39))
    {
      __clrex();
      goto LABEL_56;
    }
  }
  while (__stlxr((unint64_t)v11, v39));
  return *(_QWORD *)(*v36 + 8 * v4);
}

uint64_t isTypeEncodingObject(char *a1)
{
  int v1;
  int v2;
  uint64_t result;

  v1 = *a1;
  if (v1 == 64)
    return 1;
  if (v1 != 94)
    return 0;
  v2 = a1[1];
  if (v2 == 35)
    return 1;
  if (v2 != 123)
    return 0;
  result = (uint64_t)strchr(a1, 61);
  if (result)
    return *(unsigned __int8 *)(result + 1) == 35;
  return result;
}

IMP generateAccessorType(int a1, uint64_t a2, int a3)
{
  void *v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  _QWORD v9[6];

  v9[0] = MEMORY[0x1E0C809B0];
  if (a1)
  {
    v3 = _sharedIMPL_setvfk_core;
    v4 = _sharedIMPL_setPvfk_core;
    v5 = a3 == 0;
    v6 = __generateAccessor_block_invoke_2;
    v7 = &__block_descriptor_48_e11__24__0_8_16l;
  }
  else
  {
    v3 = _sharedIMPL_vfk_core;
    v4 = _sharedIMPL_pvfk_core;
    v5 = a3 == 0;
    v6 = __generateAccessor_block_invoke;
    v7 = &__block_descriptor_48_e8__16__0_8l;
  }
  v9[1] = 3221225472;
  v9[2] = v6;
  v9[3] = v7;
  if (!v5)
    v3 = v4;
  v9[4] = v3;
  v9[5] = a2;
  return imp_implementationWithBlock(v9);
}

void _pvfk_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x20uLL, a4, a5, a6, a7, a8);
}

void sub_18A3079B8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A307968);
}

_QWORD *_sharedIMPL_setvfk_core_s(_QWORD *a1, uint64_t a2, __int16 a3, unint64_t a4)
{
  _QWORD v5[6];
  __int16 v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_s_block_invoke;
  v5[3] = &unk_1E1EDE078;
  v5[4] = a1;
  v5[5] = a4;
  v6 = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

id NSManagedObjectContext.count<A>(for:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v2 = objc_msgSend(v1, sel_countForFetchRequest_error_, a1, v4);
  if (v4[0])
  {
    v4[0];
    swift_willThrow();
  }
  return v2;
}

uint64_t internalBlockToNSManagedObjectContextPerform(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 712);
  v6 = a1[3];
  if (v5 == v3)
  {
    v7 = 0;
  }
  else
  {
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = v3;
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(StatusReg + 712) = v3;
  }
  result = (*(uint64_t (**)(void))(v2 + 16))();
  if (v5 != v3)
  {
    *(_QWORD *)(StatusReg + 712) = v5;
    if (v6)
      *(_QWORD *)(v6 + 8) = v7;
  }
  return result;
}

void sub_18A309854(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A309868(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A309820);
}

void sub_18A309BF4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A309C14(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A309BC4);
}

void sub_18A30AE9C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A30AEA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  _QWORD *v66;
  id v67;

  if (a2)
  {
    if (a2 == 3)
    {
      v66 = objc_begin_catch(a1);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v66, &a66);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v67 = objc_begin_catch(a1);
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18A30AA0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A30AF2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A30AEF4);
  }
  _Unwind_Resume(a1);
}

void sub_18A30AF4C(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A30AF54);
  _Unwind_Resume(a1);
}

void sub_18A30AF5C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A30AF68);
}

void sub_18A30B4E8()
{
  __break(1u);
}

void sub_18A30B578(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A30B544);
  }
  _Unwind_Resume(a1);
}

void sub_18A30B598(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A30B5A0);
  _Unwind_Resume(a1);
}

void sub_18A30B5A8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A30B5B4);
}

void sub_18A30BC90()
{
  __break(1u);
}

void sub_18A30BD50(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A30BD24);
  }
  JUMPOUT(0x18A30BCECLL);
}

id _PFRetainedObjectForMappedChildObjectIDInParentContext(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;

  v3 = a1;
  if (*(_QWORD *)(*(_QWORD *)(a2 + 184) + 8))
  {
    if (objc_msgSend(a1, "isTemporaryID"))
    {
      v4 = objc_msgSend(**(id **)(*(_QWORD *)(a2 + 184) + 8), "objectForKey:", v3);
      if (v4)
        v3 = (void *)v4;
    }
  }
  return _PFRetainedObjectIDCore(a2, v3, 0, 1);
}

void sub_18A30D0B4()
{
  __break(1u);
}

void sub_18A30D1B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A30D028);
  }
  _Unwind_Resume(a1);
}

void sub_18A30D1E0(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    JUMPOUT(0x18A30D1E8);
  _Unwind_Resume(a1);
}

void sub_18A30D1F0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A30D1F8);
  objc_terminate();
}

#error "18A30D36C: call analysis failed (funcsize=25)"

void sub_18A30D3C0(void *exc_buf)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(exc_buf);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18A30D3E8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A30D6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18A30D770(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A30E128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A30EDEC(_Unwind_Exception *exc_buf, int a2)
{
  id v2;
  id v3;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A30E8D0);
    }
    v2 = objc_begin_catch(exc_buf);

    v3 = v2;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A30EF20(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A30EEDCLL);
  }
  JUMPOUT(0x18A30EEA0);
}

void sub_18A30FAF0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  _QWORD *v50;
  id v51;

  if (!a2)
    _Unwind_Resume(exc_buf);
  if (a2 == 3)
  {
    v50 = objc_begin_catch(exc_buf);
    if (v49)
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v50, &a49);
    objc_end_catch();
  }
  else
  {
    if (a2 == 2)
    {
      v51 = objc_begin_catch(exc_buf);
      objc_exception_rethrow();
    }
    objc_begin_catch(exc_buf);
  }
  JUMPOUT(0x18A30F910);
}

void sub_18A30FB08(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A30FB4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A30FB7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A30FB68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  int v49;
  id v50;
  id v51;

  if (a2)
  {
    if (v49)
      JUMPOUT(0x18A30FB78);
    if (a2 == 3)
    {
      v50 = objc_begin_catch(a1);
      if (v48)
        +[NSManagedObjectContext _handleError:withError:](NSManagedObjectContext, v50, &a48);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v51 = objc_begin_catch(a1);
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18A30F910);
  }
  _Unwind_Resume(a1);
}

void sub_18A30FBFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A30FBD0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18A30FC1C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  return sub_18A30FB5C();
}

void sub_18A310078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A31048C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3104AC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3102ECLL);
}

void sub_18A310B18()
{
  __break(1u);
}

void sub_18A310B90()
{
  objc_end_catch();
  JUMPOUT(0x18A310B58);
}

id @objc static NSManagedObject.fetchRequest()(id a1, SEL a2)
{
  swift_getObjCClassMetadata();
  return static NSManagedObject.fetchRequest()();
}

id static NSManagedObject.fetchRequest()()
{
  void *ObjCClassFromMetadata;
  id v1;
  void *v2;
  objc_class *v3;
  id v4;
  id v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v1 = objc_msgSend(ObjCClassFromMetadata, sel_entity);
  if (v1)
  {
    v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequest);
    v3 = (objc_class *)swift_getObjCClassFromMetadata();
    v4 = v2;
    v5 = objc_msgSend(objc_allocWithZone(v3), sel_init);
    objc_msgSend(v5, sel_setEntity_, v4);

    return v5;
  }
  else
  {
    v7 = objc_msgSend(ObjCClassFromMetadata, sel_entityName);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequest);
    return NSFetchRequest.__allocating_init(entityName:)(v8, v10);
  }
}

id _PFEntityForClass(void *a1)
{
  uint64_t v2;
  id v3;
  const char *Name;
  id AssociatedObject;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  id WeakRetained;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  CFStringRef v25;
  const __CFSet *Mutable;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  _BYTE v85[128];
  _BYTE v86[128];
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "_PFMOClassFactoryData");
  if (!v2 || (v3 = *(id *)(v2 + 8)) == 0)
  {
    Name = class_getName((Class)a1);
    if (!strncmp(Name, "NSManagedObject", 0xFuLL))
      return 0;
    AssociatedObject = objc_getAssociatedObject(a1, PFEntityDescriptionAssociationKey);
    if (!objc_msgSend(AssociatedObject, "count"))
      goto LABEL_18;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v12 = objc_msgSend(AssociatedObject, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
    if (!v12)
      goto LABEL_18;
    v13 = v12;
    v3 = 0;
    v14 = *(_QWORD *)v81;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v81 != v14)
          objc_enumerationMutation(AssociatedObject);
        v16 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * i);
        if (v16)
        {
          WeakRetained = objc_loadWeakRetained((id *)(v16 + 8));
          if (WeakRetained)
          {
            if (v3 && WeakRetained != v3)
            {

              os_unfair_lock_lock_with_options();
              v25 = CFStringCreateWithCString(0, Name, 0x8000100u);
              Mutable = (const __CFSet *)qword_1ECD8DA00;
              if (!qword_1ECD8DA00)
              {
                Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
                qword_1ECD8DA00 = (uint64_t)Mutable;
              }
              v27 = CFSetContainsValue(Mutable, v25);
              if (v27)
              {
                CFRelease(v25);
                os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD8D9E0);
              }
              else
              {
                CFSetAddValue((CFMutableSetRef)qword_1ECD8DA00, v25);
                CFRelease(v25);
                os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD8D9E0);
                _NSCoreDataLog(2, (uint64_t)CFSTR("Multiple NSEntityDescriptions claim the NSManagedObject subclass '%s' so +entity is unable to disambiguate."), v28, v29, v30, v31, v32, v33, (uint64_t)Name);
              }
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v34 = objc_msgSend(AssociatedObject, "countByEnumeratingWithState:objects:count:", &v76, v86, 16);
              if (v34)
              {
                v35 = v34;
                v36 = *(_QWORD *)v77;
                do
                {
                  for (j = 0; j != v35; ++j)
                  {
                    if (*(_QWORD *)v77 != v36)
                      objc_enumerationMutation(AssociatedObject);
                    v38 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * j);
                    if (v38)
                    {
                      v39 = objc_loadWeakRetained((id *)(v38 + 8));
                      if (v39)
                      {
                        v40 = v39;
                        if (!v27)
                        {
                          v41 = objc_msgSend(v39, "name");
                          objc_msgSend(v40, "managedObjectModel");
                          _NSCoreDataLog(2, (uint64_t)CFSTR(" \t '%@' (%p) from NSManagedObjectModel (%p) claims '%s'."), v42, v43, v44, v45, v46, v47, v41);
                        }

                      }
                    }
                  }
                  v35 = objc_msgSend(AssociatedObject, "countByEnumeratingWithState:objects:count:", &v76, v86, 16);
                }
                while (v35);
              }
              v24 = 1;
              goto LABEL_37;
            }
            v3 = WeakRetained;
          }
        }
      }
      v13 = objc_msgSend(AssociatedObject, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
      if (v13)
        continue;
      break;
    }
    if (!v3)
    {
LABEL_18:
      _NSCoreDataLog(1, (uint64_t)CFSTR("No NSEntityDescriptions in any model claim the NSManagedObject subclass '%s' so +entity is confused.  Have you loaded your NSManagedObjectModel yet ?"), v6, v7, v8, v9, v10, v11, (uint64_t)Name);
      v24 = 0;
LABEL_37:
      v48 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 712);
      if (v48)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v49 = objc_msgSend((id)objc_msgSend(v48, "persistentStoreCoordinator"), "managedObjectModel");
          if (v49)
          {
            v56 = (void *)v49;
            v57 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", Name);
            v72 = 0u;
            v73 = 0u;
            v74 = 0u;
            v75 = 0u;
            v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v72, v85, 16);
            if (v58)
            {
              v59 = v58;
              v3 = 0;
              v60 = *(_QWORD *)v73;
              while (2)
              {
                for (k = 0; k != v59; ++k)
                {
                  if (*(_QWORD *)v73 != v60)
                    objc_enumerationMutation(v56);
                  v62 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * k);
                  v63 = objc_msgSend(v62, "managedObjectClassName");
                  if (v63 && objc_msgSend(v57, "isEqualToString:", v63))
                  {
                    if (v3)
                    {
                      objc_msgSend(v62, "name");
                      objc_msgSend(v3, "name");
                      _NSCoreDataLog(1, (uint64_t)CFSTR("Multiple NSEntityDescriptions in NSManagedObjectModel (%p) claim the NSManagedObject subclass '%s' so +entity is unable to disambiguate.  Both entities '%@' (%p) and '%@' (%p)"), v65, v66, v67, v68, v69, v70, (uint64_t)v56);
                      goto LABEL_59;
                    }
                    v3 = v62;
                  }
                }
                v59 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v72, v85, 16);
                if (v59)
                  continue;
                break;
              }
              if (v3)
                v64 = v24;
              else
                v64 = 1;
              if ((v64 & 1) == 0)
              {
                v84 = +[_PFWeakReference weakReferenceWithObject:]((uint64_t)_PFWeakReference, (uint64_t)v3);
                objc_setAssociatedObject(a1, PFEntityDescriptionAssociationKey, (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v84, 1), (void *)0x303);
                return v3;
              }
              if (v3)
                return v3;
            }
          }
          else
          {
            _NSCoreDataLog(1, (uint64_t)CFSTR("This NSManagedObjectContext (%p) does not have a coordinator and model assigned yet so +entity on '%s' is sad."), v50, v51, v52, v53, v54, v55, (uint64_t)v48);
          }
        }
      }
LABEL_59:
      _NSCoreDataLog(1, (uint64_t)CFSTR("+[%s entity] Failed to find a unique match for an NSEntityDescription to a managed object subclass"), v18, v19, v20, v21, v22, v23, (uint64_t)Name);
      return 0;
    }
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D76BF34]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *_svfk_17(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x11uLL);
}

_QWORD *_svfk_38(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x26uLL);
}

_QWORD *_svfk_37(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x25uLL);
}

_QWORD *_svfk_31(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1FuLL);
}

_QWORD *_svfk_29(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1DuLL);
}

_QWORD *_svfk_28(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1CuLL);
}

_QWORD *_svfk_15(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xFuLL);
}

#error "18A31263C: call analysis failed (funcsize=79)"

void sub_18A312B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);
  _Block_object_dispose((const void *)(v39 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18A3141C4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  if (a2)
  {
    if (a2 == 2)
    {
      v19 = objc_begin_catch(exc_buf);
      if (a16[12])
      {
        v20 = v19;
        v21 = (void *)objc_msgSend((id)objc_opt_class(), "metadataForPersistentStoreOfType:URL:options:error:", v16, v17, a16[4], 0);
        if (v21 && (objc_msgSend(v16, "isEqual:", objc_msgSend(v21, "objectForKey:", CFSTR("NSStoreType"))) & 1) == 0)
        {
          v22 = (void *)MEMORY[0x1E0CB35C8];
          v23 = objc_msgSend(v20, "userInfo");
          *(_QWORD *)(*(_QWORD *)(a16[9] + 8) + 40) = objc_msgSend(v22, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134010, v23);
        }
        else
        {
          +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v20, (uint64_t *)(*(_QWORD *)(a16[9] + 8) + 40));
        }
      }
      v24 = *(_QWORD *)(*(_QWORD *)v18 + 8);
      if (*(_QWORD *)(v24 + 40))
        *(_QWORD *)(v24 + 40) = 0;
      objc_end_catch();
      JUMPOUT(0x18A313B7CLL);
    }
    if (a2 == 3)
    {
      v25 = objc_begin_catch(exc_buf);
      objc_exception_rethrow();
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A31435C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A314624);
  }
  JUMPOUT(0x18A314634);
}

void sub_18A314370(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A314634);
  JUMPOUT(0x18A314624);
}

void sub_18A314608(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A313F74);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A31463C(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A314654(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A314860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3149B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A314E40()
{
  __break(1u);
}

void sub_18A314F30()
{
  objc_end_catch();
  JUMPOUT(0x18A314E90);
}

void sub_18A314F40()
{
  objc_end_catch();
  JUMPOUT(0x18A314F48);
}

void sub_18A3150AC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A315084);
}

void sub_18A315678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3159CC()
{
  __break(1u);
}

void sub_18A315B04()
{
  objc_end_catch();
  JUMPOUT(0x18A315A94);
}

void sub_18A315C60(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A315F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A316608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

_QWORD *_svfk_7(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 7uLL);
}

id _newReadStringFromBytes(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (*a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v3 + 4 > a3)
    return 0;
  v4 = *(_DWORD *)(a1 + v3);
  v5 = bswap32(v4);
  v6 = v3 + 8;
  if (v6 + v5 > a3)
    return 0;
  *a2 = v6 + v5;
  if (v4)
    return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharactersNoCopy:length:freeWhenDone:", a1 + v6, v5 >> 1, 0);
  else
    return objc_alloc_init(MEMORY[0x1E0CB3940]);
}

void sub_18A3197B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

void sub_18A319B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t CoreSpotlightCSPrivateSearchableIndexFunction()
{
  return qword_1ECD8DB58;
}

#error "18A31A0FC: call analysis failed (funcsize=65)"

void sub_18A31B8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A31BA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

#error "18A31BAF0: call analysis failed (funcsize=63)"

uint64_t NSManagedObjectContext.perform<A>(schedule:_:)()
{
  _QWORD *v0;
  uint64_t (*v1)();
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  if (*((_BYTE *)v0 + 368) == 1)
  {
    v1 = 0;
    v2 = 0;
    v3 = v0[31];
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_8:
    v0[42] = v1;
    v0[43] = v2;
    v0[41] = v4;
    v5(v0[38], 1, 1, v3);
    return swift_task_switch();
  }
  v33 = (id)v0[32];
  v6 = v0[30];
  v7 = v0[31];
  v8 = v0[29];
  v9 = swift_allocBox();
  v31 = v10;
  v32 = *(_QWORD *)(v7 - 8);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v5(v10, 1, 1, v7);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (id *)(v11 + 16);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = v7;
  v2[3] = v8;
  v2[4] = v6;
  v2[5] = v9;
  v2[6] = v11;
  v13 = swift_allocObject();
  v0[16] = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v13 + 16) = partial apply for closure #1 in NSManagedObjectContext.perform<A>(schedule:_:);
  *(_QWORD *)(v13 + 24) = v2;
  v0[20] = thunk for @callee_guaranteed () -> ()partial apply;
  v0[21] = v13;
  v0[17] = 1107296256;
  v0[18] = thunk for @escaping @callee_guaranteed () -> ();
  v0[19] = &block_descriptor_23;
  v14 = _Block_copy(v0 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v15 = objc_msgSend(v33, sel__performImmediate_, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (!v15)
    {
      swift_release();
      swift_release();
      swift_release();
      v3 = v0[31];
      v1 = partial apply for closure #1 in NSManagedObjectContext.perform<A>(schedule:_:);
      v4 = v32;
      goto LABEL_8;
    }
    v17 = v0[40];
    v19 = v0[33];
    v18 = v0[34];
    swift_beginAccess();
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v20(v17, v31, v19);
    swift_beginAccess();
    v21 = v0[40];
    if (*v12)
    {
      v22 = v0[33];
      v23 = v0[34];
      v24 = *v12;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
      swift_release_n();
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v25 = (uint64_t (*)(void))v0[1];
      return v25();
    }
    v26 = v0[39];
    v27 = v0[31];
    v20(v26, v0[40], v0[33]);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v26, 1, v27);
    if ((_DWORD)result != 1)
    {
      v28 = v0[40];
      v30 = v0[33];
      v29 = v0[34];
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v32 + 32))(v0[28], v0[39], v0[31]);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      swift_release_n();
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v25 = (uint64_t (*)(void))v0[1];
      return v25();
    }
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;

  v1 = v0;
  v2 = v0[36];
  v3 = (void *)v0[32];
  v4 = v1[30];
  v5 = v1[31];
  v6 = v1[29];
  v1[7] = v2;
  v1[2] = v1;
  v1[3] = NSManagedObjectContext.perform<A>(schedule:_:);
  v7 = swift_continuation_init();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v6;
  v1[10] = MEMORY[0x1E0C809B0];
  v1 += 10;
  v8[4] = v4;
  v8[5] = v7;
  v1[4] = partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:);
  v1[5] = v8;
  v1[1] = 1107296256;
  v1[2] = thunk for @escaping @callee_guaranteed () -> ();
  v1[3] = &block_descriptor_9_0;
  v9 = _Block_copy(v1);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_performBlock_, v9);
  _Block_release(v9);
  return swift_continuation_await();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 352) = v2;
  if (v2)
  {
    swift_willThrow();
  }
  else
  {
    v4 = v1[36];
    v3 = v1[37];
    v5 = v1[33];
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[34] + 32);
    v1[45] = v6;
    v6(v3, v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 248);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v7);
  v1(v4, v3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 224);
    v9(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 264));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v13, v14);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Class initCoreSpotlightCSPrivateSearchableIndex()
{
  Class result;

  if (_MergedGlobals_89 != -1)
    dispatch_once(&_MergedGlobals_89, &__block_literal_global_35);
  result = objc_getClass("CSPrivateSearchableIndex");
  qword_1ECD8DB58 = (uint64_t)result;
  getCoreSpotlightCSPrivateSearchableIndexClass[0] = CoreSpotlightCSPrivateSearchableIndexFunction;
  return result;
}

void sub_18A31C930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:)(*(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
}

uint64_t closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t result;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);

  v26 = a3;
  v27 = a1;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (void (*)(uint64_t))((char *)&v25 - v11);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v25 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v25 - v16;
  v18 = *(_QWORD *)(a4 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v19 = v25((char *)&v25 - v16, 1, 1, a4);
  v27(v19);
  v27 = v12;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v17, v5);
  v21 = v25;
  v25(v15, 0, 1, a4);
  v22 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v22(v17, v15, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v17, v5);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, a4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v24 = (char *)v27;
    (*(void (**)(void (*)(uint64_t), char *, uint64_t))(v18 + 32))(v27, v9, a4);
    v21(v24, 0, 1, a4);
    v22(*(char **)(*(_QWORD *)(v26 + 64) + 40), v24, v5);
    swift_continuation_throwingResume();
    return ((uint64_t (*)(char *, uint64_t))v20)(v17, v5);
  }
  return result;
}

void sub_18A31DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  id v13;
  const char *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v13 = objc_begin_catch(exception_object);
  if (v12)
    objc_setProperty_nonatomic(v12, v14, v13, 48);
  objc_end_catch();
}

void sub_18A31E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_unfair_lock_t lock)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(lock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

NSBatchDeleteResult *_executeBatchDeleteRequest(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  int v6;
  NSSQLFetchRequestContext *v7;
  void *v8;
  uint64_t v9;
  NSSQLEntity *sqlEntity;
  uint64_t v11;
  char v12;
  void *v13;
  _PFArray *Request;
  const char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  NSSQLiteStatement *v27;
  uint64_t v28;
  NSSQLiteStatement *v29;
  const __CFString *v30;
  uint64_t v31;
  NSSQLiteStatement *v32;
  _BOOL4 v33;
  _BOOL4 v34;
  NSBatchDeleteResult *v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  NSSQLiteStatement *v43;
  uint64_t v44;
  NSSQLiteStatement *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSSQLiteStatement *v62;
  uint64_t v63;
  NSSQLiteStatement *v64;
  char v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int entityID;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  _BOOL4 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  void *v79;
  int v80;
  _BOOL4 v81;
  _BOOL4 v82;
  void *v83;
  int v84;
  _BOOL4 v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  NSSQLiteStatement *v91;
  uint8_t buf[4];
  int v93;
  NSSQLiteStatement *v94;
  NSSQLiteStatement *v95;
  _QWORD v96[2];
  uint64_t v97;
  NSSQLiteStatement *v98;
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend((id)a1, "request");
  v5 = v4;
  if (a1)
    v86 = *(void **)(a1 + 24);
  else
    v86 = 0;
  v72 = a2;
  v75 = objc_msgSend(v4, "resultType");
  v6 = objc_msgSend((id)objc_msgSend((id)a1, "request"), "_secureOperation");
  v74 = v5;
  if (!a1)
  {
    v73 = 0;
    v7 = 0;
    v81 = 0;
LABEL_11:
    entityID = 0;
    goto LABEL_17;
  }
  v7 = *(NSSQLFetchRequestContext **)(a1 + 120);
  if (!v7)
  {
    v7 = -[NSSQLBatchDeleteRequestContext _createFetchRequestContextForObjectsToDelete]((NSSQLFetchRequestContext *)a1);
    *(_QWORD *)(a1 + 120) = v7;
  }
  v8 = *(void **)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
  {
    v73 = 0;
    if (v8)
      goto LABEL_8;
LABEL_13:
    v81 = 0;
    goto LABEL_14;
  }
  v73 = *(_QWORD *)(v9 + 200) != 0;
  if (!v8)
    goto LABEL_13;
LABEL_8:
  v81 = objc_msgSend(v8, "count") != 0;
LABEL_14:
  if (!v7)
    goto LABEL_11;
  sqlEntity = v7->_sqlEntity;
  if (!sqlEntity)
    goto LABEL_11;
  entityID = sqlEntity->_entityID;
LABEL_17:
  v78 = v6;
  if (v6)
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v86, 1);
  if (a1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
      objc_msgSend(*(id *)(v11 + 208), "lock");
  }
  v12 = 1;
  -[NSSQLiteConnection beginTransaction]((uint64_t)v86);
  if (v75 == 1)
  {
    if (a1)
      v13 = *(void **)(a1 + 24);
    else
      v13 = 0;
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v7, v13);
    Request = _executeFetchRequest((uint64_t)v7);
    -[NSSQLStoreRequestContext setConnection:]((uint64_t)v7, 0);
    if (!a1)
    {
      v33 = 0;
      v16 = 0;
      v79 = 0;
      v82 = 0;
      v71 = 0;
      v36 = 0;
      v34 = 0;
      v35 = 0;
      v37 = 1;
      v12 = 1;
      goto LABEL_62;
    }
    objc_setProperty_nonatomic((id)a1, v15, Request, 112);
    v76 = *(_QWORD *)(a1 + 112);
  }
  else
  {
    v16 = 0;
    if (!a1)
    {
      v33 = 0;
      v79 = 0;
      v82 = 0;
      v34 = 0;
      v37 = 1;
      v71 = 0;
      v36 = 0;
      v77 = 1;
      v35 = 0;
      goto LABEL_96;
    }
    v76 = 0;
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v83 = *(void **)(a1 + 104);
    v79 = *(void **)(a1 + 128);
    goto LABEL_33;
  }
  v12 = 1;
  -[NSSQLBatchDeleteRequestContext _createDeleteStatements](a1);
  v79 = *(void **)(a1 + 128);
  if (!*(_QWORD *)(a1 + 104))
  {
    v33 = 0;
    v16 = 0;
    v71 = 0;
    v82 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 40);
    v37 = 1;
LABEL_62:
    v77 = 1;
    goto LABEL_96;
  }
  v83 = *(void **)(a1 + 104);
LABEL_33:
  if (objc_msgSend(v83, "count") == 3)
  {
    _executeBatchDeleteStatements((void *)objc_msgSend(v83, "objectAtIndexedSubscript:", 0), (uint64_t)v86);
    if (v73)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v17 = (void *)objc_msgSend(v83, "objectAtIndexedSubscript:", 1);
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v87, v99, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v88;
        do
        {
          for (i = 0; i != v18; ++i)
          {
            if (*(_QWORD *)v88 != v19)
              objc_enumerationMutation(v17);
            v21 = *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * i);
            if (v21)
              *(_BYTE *)(v21 + 41) = 1;
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v87, v99, 16);
        }
        while (v18);
      }
    }
    if (v81)
    {
      _executeBatchDeleteStatements((void *)objc_msgSend(v79, "objectAtIndexedSubscript:", 0), (uint64_t)v86);
      v80 = 1;
    }
    else
    {
      v80 = 0;
    }
    v26 = *(_QWORD *)(a1 + 8);
    if (v26 && (*(_BYTE *)(v26 + 193) & 4) != 0)
    {
      v24 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v86, "adapter"), "sqlCore"), "ancillarySQLModels"), "objectForKey:", CFSTR("NSPersistentHistoryTrackingKey")), "entityNamed:", CFSTR("CHANGE"));
      v27 = (NSSQLiteStatement *)objc_msgSend(v86, "adapter");
      v28 = -[NSSQLEntity tempTableName](v24);
      v29 = -[NSSQLiteAdapter newDropTableStatementForTableNamed:](v27, v28);
      v98 = v29;
      _executeBatchDeleteStatements((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v98, 1), (uint64_t)v86);

      v30 = (const __CFString *)objc_msgSend(v86, "adapter");
      if (v24)
      {
        v96[0] = objc_msgSend(*(id *)(v24 + 40), "objectForKey:", CFSTR("ENTITY"));
        v31 = objc_msgSend(*(id *)(v24 + 40), "objectForKey:", CFSTR("ENTITYPK"));
      }
      else
      {
        v31 = 0;
        v96[0] = 0;
      }
      v96[1] = v31;
      v97 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v96, 2);
      v32 = -[NSSQLiteAdapter newCreateTempTableStatementForEntity:withAttributesToConstrain:](v30, v24, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v97, 1));
      v95 = v32;
      _executeBatchDeleteStatements((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v95, 1), (uint64_t)v86);

      v84 = 1;
    }
    else
    {
      v84 = 0;
      v24 = 0;
    }
    v70 = _executeBatchDeleteStatements((void *)objc_msgSend(v83, "objectAtIndexedSubscript:", 1), (uint64_t)v86);
    switch(v75)
    {
      case 2:
        v76 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v70);
        break;
      case 1:
        v76 = *(_QWORD *)(a1 + 112);
        break;
      case 0:
        v76 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
        break;
    }
    v25 = v80;
    if (v81)
    {
      _executeBatchDeleteStatements((void *)objc_msgSend(v79, "objectAtIndexedSubscript:", 1), (uint64_t)v86);
      v25 = 0;
    }
    _executeBatchDeleteStatements((void *)objc_msgSend(v83, "objectAtIndexedSubscript:", 2), (uint64_t)v86);
    v23 = v84;
    goto LABEL_73;
  }
  v22 = objc_msgSend(v74, "resultType");
  if (!v22)
  {
    v24 = 0;
    v76 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
    goto LABEL_65;
  }
  if (v22 == 2)
  {
    v24 = 0;
    v76 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0);
LABEL_65:
    v23 = 0;
    v70 = 0;
LABEL_67:
    v25 = 0;
    v80 = 0;
    goto LABEL_73;
  }
  if (v22 != 1)
  {
    v23 = 0;
    v70 = 0;
    v24 = 0;
    goto LABEL_67;
  }
  v23 = 0;
  v70 = 0;
  v24 = 0;
  v25 = 0;
  v80 = 0;
  v76 = MEMORY[0x1E0C9AA60];
LABEL_73:
  v38 = v25 != 0;
  v35 = -[NSBatchDeleteResult initWithResultType:andObject:]([NSBatchDeleteResult alloc], "initWithResultType:andObject:", objc_msgSend(v74, "resultType"), v76);
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v86, 0);
  if (v81)
  {
    -[NSSQLiteConnection processExternalDataReferenceFilesDeletedByRequest:]((uint64_t)v86, (uint64_t *)a1);
    v39 = *(void **)(a1 + 136);
    if (v39)
      _deleteExternalDataReferences(v39);
    v40 = *(void **)(a1 + 144);
    if (v40)
      _deleteFileBackedFutures(v40);
    _executeBatchDeleteStatements((void *)objc_msgSend(v79, "objectAtIndexedSubscript:", 3), (uint64_t)v86);
    v80 = 0;
  }
  v34 = v80 != 0;
  v41 = *(_QWORD *)(a1 + 8);
  if (v41 && (*(_BYTE *)(v41 + 193) & 4) != 0)
  {
    -[NSSQLiteConnection processDeleteRequest:]((uint64_t)v86, a1);
    v42 = *(void **)(a1 + 72);
    if (v24)
    {
      v43 = (NSSQLiteStatement *)objc_msgSend(v86, "adapter");
      v44 = -[NSSQLEntity tempTableName](v24);
      v45 = -[NSSQLiteAdapter newDropTableStatementForTableNamed:](v43, v44);
      v94 = v45;
      _executeBatchDeleteStatements((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v94, 1), (uint64_t)v86);

      v23 = 0;
    }
  }
  else
  {
    v42 = 0;
  }
  v85 = v23 != 0;
  -[NSSQLiteConnection commitTransaction]((uint64_t)v86);
  if (v73)
  {
    if (v70 < 1)
    {
      if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
        _NSCoreDataLog(6, (uint64_t)CFSTR("Batch delete did not affect any rows, not registering a query generation"), v55, v56, v57, v58, v59, v60, v68);
    }
    else
    {
      v46 = objc_msgSend(v86, "registerCurrentQueryGenerationWithStore:", *(_QWORD *)(a1 + 8));
      if ((_DWORD)v46)
      {
        v47 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Batch delete failed to generate a post transaction query generation with error %d");
        _NSCoreDataLog(17, v47, v48, v49, v50, v51, v52, v53, v46);
        v54 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          v93 = v46;
          _os_log_fault_impl(&dword_18A253000, v54, OS_LOG_TYPE_FAULT, "CoreData: Batch delete failed to generate a post transaction query generation with error %d", buf, 8u);
        }
      }
    }
  }
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](*(_QWORD *)(a1 + 24), v78, 0);
  v61 = *(_QWORD *)(a1 + 8);
  if (v61)
    objc_msgSend(*(id *)(v61 + 208), "unlock");
  if (entityID <= 0x3A98)
    -[NSSQLCore _postChangeNotificationWithTransactionID:](*(_QWORD *)(a1 + 8), v42);
  v37 = 0;
  v36 = 0;
  v12 = 0;
  v82 = v38;
  v77 = 0;
  v71 = v24;
  v16 = v83;
  v33 = v85;
LABEL_96:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v86, 0);
  if (v16 && objc_msgSend(v16, "count") == 3)
  {
    if (v82)
    {
      _executeBatchDeleteStatements((void *)objc_msgSend(v79, "objectAtIndexedSubscript:", 1), (uint64_t)v86);
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v86, 0);
    }
    if (v34)
    {
      _executeBatchDeleteStatements((void *)objc_msgSend(v79, "objectAtIndexedSubscript:", 3), (uint64_t)v86);
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v86, 0);
    }
  }
  if (v33)
  {
    v62 = (NSSQLiteStatement *)objc_msgSend(v86, "adapter");
    v63 = -[NSSQLEntity tempTableName](v71);
    v64 = -[NSSQLiteAdapter newDropTableStatementForTableNamed:](v62, v63);
    v91 = v64;
    _executeBatchDeleteStatements((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v91, 1), (uint64_t)v86);

    -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v86, 0);
  }
  if (v37)
    -[NSSQLiteConnection rollbackTransaction]((uint64_t)v86);
  v65 = v12 ^ 1;
  if (!a1)
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    v66 = *(_QWORD *)(a1 + 8);
    if (v66)
      objc_msgSend(*(id *)(v66 + 208), "unlock");
  }
  if (v78)
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v86, 0);
  if (v72 && v36)
    *v72 = v36;
  if ((v77 | 4) != 4)
    return 0;
  return v35;
}

void sub_18A31FB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint8_t buf)
{
  objc_end_catch();
  if (a21)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A31FF34(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A31FF40);
  JUMPOUT(0x18A31FF24);
}

#error "18A320078: call analysis failed (funcsize=91)"

void sub_18A3200D4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A32002CLL);
  }
  JUMPOUT(0x18A31FF24);
}

uint64_t _executeBatchDeleteStatements(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = *(_QWORD *)v14;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v14 != v7)
        objc_enumerationMutation(a1);
      v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v8);
      -[NSSQLiteConnection prepareAndExecuteSQLStatement:](a2, (_QWORD *)v9);
      if (v9 && *(_BYTE *)(v9 + 41))
      {
        if (a2)
          v10 = sqlite3_changes(*(sqlite3 **)(a2 + 72));
        else
          v10 = 0;
        v6 = (v10 + v6);
      }
      ++v8;
    }
    while (v5 != v8);
    v11 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    v5 = v11;
  }
  while (v11);
  return v6;
}

void sub_18A320320(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A320340(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3202C0);
}

uint64_t _prepareLargeDictionaryResults(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _PFResultArray *v4;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  NSKnownKeysDictionary *v28;
  uint64_t v29;
  uint64_t v30;
  NSKnownKeysDictionary *v31;
  _BYTE v33[12];
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (v3 >= 0x40000001)
    return NSArray_EmptyArray;
  v8 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a2 + 136) + 8), "propertiesToFetch");
  v34 = a3;
  if (!objc_msgSend(v8, "count"))
  {
    v9 = (void *)MEMORY[0x1E0C99D20];
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 40);
    v11 = v10 ? *(void **)(v10 + 240) : 0;
    v12 = objc_msgSend(v11, "keys");
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 40);
    v14 = v13 ? *(void **)(v13 + 240) : 0;
    v15 = (void *)objc_msgSend(v9, "arrayWithObjects:count:", v12, objc_msgSend(v14, "length"));
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v15, "count"));
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v36 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 40);
          if (v20)
          {
            v21 = (void *)objc_msgSend(*(id *)(v20 + 40), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i));
            if (v21)
              objc_msgSend(v8, "addObject:", objc_msgSend(v21, "propertyDescription"));
          }
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      }
      while (v17);
    }
  }
  v22 = objc_msgSend(v8, "count");
  v23 = MEMORY[0x1E0C80A78](v22);
  v26 = &v33[-v25];
  if (v23 > 0x200)
    v26 = (_BYTE *)NSAllocateScannedUncollectable();
  else
    bzero(&v33[-v25], 8 * v24);
  if (objc_msgSend(v8, "count"))
  {
    v27 = 0;
    do
    {
      *(_QWORD *)&v26[8 * v27] = objc_msgSend(v8, "objectAtIndexedSubscript:", v27);
      ++v27;
    }
    while (objc_msgSend(v8, "count") > v27);
  }
  v28 = [NSKnownKeysDictionary alloc];
  v29 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 40);
  if (v29)
    v30 = *(_QWORD *)(v29 + 240);
  else
    v30 = 0;
  v31 = -[NSKnownKeysDictionary initWithSearchStrategy:](v28, "initWithSearchStrategy:", v30);
  -[NSKnownKeysDictionary setValues:](v31, "setValues:", v26);
  if (v22 >= 0x201)
    NSZoneFree(0, v26);
  if (v34)
    bufferResultSetPack((uint64_t)a1);
  v4 = -[_PFResultArray initWithObjects:count:store:metadata:]([_PFResultArray alloc], "initWithObjects:count:store:metadata:", a1, v3, *(_QWORD *)(a2 + 8), v31);

  return (uint64_t)v4;
}

void bufferResultSetPack(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  int v4;
  size_t v5;
  uint64_t v6;
  malloc_zone_t *v7;
  size_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  const __CFString *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 72);
  v3 = *(unsigned int **)(a1 + 64);
  v4 = (_DWORD)v2 - (_DWORD)v3;
  v5 = 4 * *v3;
  memcpy(v2, *(const void **)(a1 + 56), v5);
  v6 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(v6 + 4) = v4;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v8 = *(_QWORD *)(a1 + 72) + v5;
    *(_QWORD *)(a1 + 72) = v8;
    v9 = v8 - v6;
    v10 = getpagesize();
    v11 = (v9 + v10 - 1) / (unint64_t)v10 * v10;
    v12 = (unsigned int *)MEMORY[0x1E0C83DA0];
    if (*(_QWORD *)(a1 + 16) > v11)
    {
      *(_QWORD *)(a1 + 72) = v8 + v11 - v9;
      v13 = MEMORY[0x18D76C060](*v12);
      if ((_DWORD)v13)
      {
        v27 = v13;
        _NSCoreDataLog(1, (uint64_t)CFSTR("*** vm_deallocate(size=%lld) oldSize= %lld, failed (error code=%d)\n"), v14, v15, v16, v17, v18, v19, v9);
        v28 = *MEMORY[0x1E0C99768];
        v30 = CFSTR("VMErrorCode");
        v31[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v27);
        v29 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, v28, 134183, (uint64_t)CFSTR("Unable to deallocate VM Memory"), (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, &v30, 1));
        objc_exception_throw(v29);
      }
    }
    v20 = 4 * *(unsigned int *)(a1 + 28);
    if (MEMORY[0x18D76C060](*v12, *(_QWORD *)(a1 + 56), v20))
      _NSCoreDataLog(2, (uint64_t)CFSTR("*** vm_deallocate(size=%lld), failed (error code=%d)\n"), v21, v22, v23, v24, v25, v26, v20);
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    *(_DWORD *)(a1 + 28) = 0;
    v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v7 = malloc_default_zone();
    malloc_zone_free(v7, *(void **)(a1 + 56));
  }
}

void sub_18A3213BC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  id v20;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A32131CLL);
    }
    v20 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A321514(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3214E8);
  }
  JUMPOUT(0x18A321488);
}

void sub_18A3215FC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3215BCLL);
}

void sub_18A321610(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A321C40(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A321B68);
}

void __cache_handle_memory_pressure_block_invoke(uint64_t a1, NSObject **a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x18D76B4E4]();
  -[NSSQLiteConnection _clearCachedStatements](a2);
  objc_autoreleasePoolPop(v3);
}

void *_executeCountRequest(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  id v4;
  double Current;
  NSSQLColumn *v6;
  id v7;
  _BYTE *v8;
  int v9;
  void *v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  const __CFString *v28;
  id v29;

  if (a1)
    v2 = *(_QWORD **)(a1 + 24);
  else
    v2 = 0;
  v3 = (void *)objc_msgSend((id)a1, "request");
  v4 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) < 1)
    Current = 0.0;
  else
    Current = CFAbsoluteTimeGetCurrent();
  v6 = -[NSSQLColumn initWithColumnName:sqlType:]([NSSQLColumn alloc], "initWithColumnName:sqlType:", CFSTR("COUNT(*)"), 1);
  v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v6, 0);

  -[NSSQLiteConnection setColumnsToFetch:](v2, v7);
  v8 = (_BYTE *)objc_msgSend((id)a1, "fetchStatement");
  v9 = -[NSSQLiteConnection selectCountWithStatement:]((uint64_t)v2, v8);
  -[NSSQLiteConnection setColumnsToFetch:](v2, v7);
  if (v9)
  {
    v10 = -[NSSQLiteConnection newFetchedArray]((uint64_t)v2);
    v11 = objc_msgSend(v3, "fetchLimit");
    v12 = objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 0), "unsignedIntValue");
    if (v11 && v11 < v12)
    {

      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedLong:", v11);
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v13, 0);

    }
  }
  else
  {
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInt:", 0);
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v14, 0);

  }
  if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
  {
    objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 0), "unsignedIntValue");
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 2)
      _NSCoreDataLog(4, (uint64_t)CFSTR("count using %@ returned %d"), v15, v16, v17, v18, v19, v20, (uint64_t)v8);
    if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 2)
    {
      if ((v9 & 1) == 0)
        _NSCoreDataLog(4, (uint64_t)CFSTR("logically false count request %@ short circuits."), v21, v22, v23, v24, v25, v26, (uint64_t)v3);
      _NSCoreDataLog(4, (uint64_t)CFSTR("count request %@ returned %d"), v21, v22, v23, v24, v25, v26, (uint64_t)v3);
    }
    v27 = 0.0;
    if (v9)
      v27 = CFAbsoluteTimeGetCurrent() - Current;
    v28 = CFSTR("total count request execution time: %.4fs for count of %d.");
    if (a1 && *(_BYTE *)(a1 + 80))
      v28 = CFSTR("total count request execution time: \x1B[31m%.4f\x1B[0ms for count of %d.");
    _NSCoreDataLog(4, (uint64_t)v28, v21, v22, v23, v24, v25, v26, *(uint64_t *)&v27);
  }
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v2, 0);
  objc_msgSend(v4, "drain");
  v29 = v10;
  return v10;
}

void sub_18A322440()
{
  __break(1u);
}

void sub_18A3224C4()
{
  objc_end_catch();
  JUMPOUT(0x18A322498);
}

void _pvfk_48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _sharedIMPL_pvfk_core(a1, a2, 0x30uLL, a4, a5, a6, a7, a8);
}

void sub_18A322B48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A323000(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A3233AC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3233CC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3232B4);
}

void sub_18A324B50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A324CF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A325B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A326BF8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);

    objc_exception_throw(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A326C3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x18A326C18);
}

void sub_18A326C48(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

#error "18A327210: call analysis failed (funcsize=97)"

void sub_18A327294(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A327100);
  }
  JUMPOUT(0x18A3272B4);
}

void sub_18A3277C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A328654()
{
  objc_end_catch();
  JUMPOUT(0x18A328674);
}

void sub_18A328660()
{
  JUMPOUT(0x18A328674);
}

void sub_18A328770(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A328790(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A328748);
}

void sub_18A328D18(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A328D48(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A328D3CLL);
  JUMPOUT(0x18A328D60);
}

void sub_18A328D54(void *a1, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18A328AFCLL);
    }
    v2 = objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  JUMPOUT(0x18A328D3CLL);
}

void sub_18A328D98(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A328D6CLL);
  }
  JUMPOUT(0x18A328D3CLL);
}

const __CFString *NSSQLiteAdapter_typeStringForSQLType(int a1)
{
  if ((a1 - 1) > 0x10)
    return CFSTR("UNDEFINED");
  else
    return off_1E1EDFEB0[(char)(a1 - 1)];
}

id _newObjectIDSetsForRequest(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  const __CFArray *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  _BOOL4 v30;
  unint64_t Count;
  unint64_t v32;
  uint64_t v33;
  CFIndex v34;
  char *v35;
  _QWORD *v36;
  _BOOL4 v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  objc_class *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  const void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  _BOOL4 v56;
  _QWORD v58[2];
  unint64_t v59;
  CFArrayRef v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  id v67;
  _QWORD *v68;
  CFIndex v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  BOOL v74;
  char v75;
  uint64_t v76;
  CFRange v77;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1)
    v6 = a1[3];
  else
    v6 = 0;
  v71 = v6;
  v7 = (void *)objc_msgSend(a1, "fetchStatement");
  v72 = a3;
  v62 = a1;
  v65 = objc_msgSend(v7, "entity");
  if (a1)
    v61 = a1[14];
  else
    v61 = 0;
  v8 = (void *)objc_msgSend(a2, "sortedArrayUsingFunction:context:", compareObjectIDsByPKs, 0);
  v9 = _rawSQLForToManyFaultStatement(v7, 1, 1);
  v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v11 = objc_msgSend(v9, "rangeOfString:options:", CFSTR(" FROM "), 6);
  v12 = objc_msgSend(v9, "rangeOfString:options:", CFSTR(" WHERE "), 6);
  v70 = v13;
  v14 = stripEmptyStringsFromArray((void *)objc_msgSend((id)objc_msgSend(v9, "substringToIndex:", v11), "componentsSeparatedByString:", CFSTR(" ")));
  v15 = stripEmptyStringsFromArray((void *)objc_msgSend((id)objc_msgSend(v9, "substringFromIndex:", v12), "componentsSeparatedByString:", CFSTR(" ")));
  v16 = (void *)objc_msgSend((id)objc_msgSend(v15, "objectAtIndex:", 1), "stringByReplacingOccurrencesOfString:withString:", CFSTR("("), &stru_1E1EE23F0);
  v17 = objc_msgSend(v14, "count");
  objc_msgSend(v10, "appendString:", objc_msgSend(v14, "objectAtIndex:", 0));
  objc_msgSend(v10, "appendFormat:", CFSTR(" %@, %@"), objc_msgSend((id)objc_msgSend(v14, "objectAtIndex:", 1), "stringByReplacingOccurrencesOfString:withString:", CFSTR(","), &stru_1E1EE23F0), v16);
  if (v17 >= 3)
    objc_msgSend(v10, "appendFormat:", CFSTR(", %@"), objc_msgSend(v14, "objectAtIndex:", 2));
  v18 = v72;
  if (v72)
    objc_msgSend(v10, "appendFormat:", CFSTR(", %@.%@"), objc_msgSend((id)objc_msgSend(v16, "componentsSeparatedByString:", CFSTR(".")), "objectAtIndex:", 0), v72);
  objc_msgSend(v10, "appendString:", objc_msgSend(v9, "substringWithRange:", v11, &v70[v12 - v11]));
  objc_msgSend(v10, "appendFormat:", CFSTR("%@ IN("), v16);
  v19 = objc_msgSend(v8, "count");
  v20 = v19 - 1;
  if (v19 != 1)
  {
    v21 = 0;
    do
      objc_msgSend(v10, "appendFormat:", CFSTR("%qu, "), objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", v21++), "_referenceData64"));
    while (v20 != v21);
  }
  objc_msgSend(v10, "appendFormat:", CFSTR("%qu) "), objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", v20), "_referenceData64"));
  v22 = objc_msgSend(v15, "count");
  if (v22 >= 5)
  {
    v23 = v22;
    objc_msgSend(v10, "appendString:", CFSTR("AND "));
    if (objc_msgSend((id)objc_msgSend(v15, "objectAtIndex:", v23 - 1), "hasSuffix:", CFSTR(")")))
      objc_msgSend(v10, "appendString:", CFSTR("("));
    if (v23 >= 6)
    {
      for (i = 5; i != v23; ++i)
      {
        objc_msgSend(v10, "appendString:", objc_msgSend(v15, "objectAtIndex:", i));
        objc_msgSend(v10, "appendString:", CFSTR(" "));
      }
    }
  }
  v25 = -[NSSQLiteConnection copyRawIntegerRowsForSQL:](v71, v10);
  v26 = v65;
  -[NSSQLiteConnection endFetchAndRecycleStatement:](v71, 0);
  if (v65)
  {
    v27 = *(void **)(v65 + 152);
    v28 = 2;
    if (v27)
    {
      v29 = objc_msgSend(v27, "count");
      v30 = v29 != 0;
      if (v29)
        v28 = 3;
      else
        v28 = 2;
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v30 = 0;
    v28 = 2;
  }
  v73 = v30;
  v74 = v72 != 0;
  v75 = v28;
  if (v25)
  {
    Count = CFArrayGetCount(v25);
    if (Count < 2)
    {
      v67 = (id)NSArray_EmptyArray;
LABEL_66:
      CFRelease(v25);
      return v67;
    }
    v66 = v30;
    v58[1] = v58;
    v32 = MEMORY[0x1E0C80A78](Count);
    v35 = (char *)v58 - v33;
    v59 = v32;
    v60 = v25;
    v69 = v34;
    if (v32 >= 0x202)
    {
      v36 = (_QWORD *)NSAllocateScannedUncollectable();
    }
    else
    {
      bzero((char *)v58 - v33, 8 * v34);
      v36 = v35;
    }
    v37 = v18 != 0;
    v77.location = 1;
    v77.length = v69;
    v68 = v36;
    CFArrayGetValues(v60, v77, (const void **)v36);
    CFMergeSortArray();
    v38 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v39 = objc_msgSend(v8, "count");
    v40 = 2;
    if (v18)
      v40 = 3;
    v67 = (id)objc_msgSend(v38, "initWithCapacity:", v39 * v40);
    v41 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (v37)
      v70 = (char *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    else
      v70 = 0;
    if (v62)
    {
      v42 = (objc_class *)objc_msgSend((id)v62[1], "objectIDFactoryForSQLEntity:", v26);
      if (v26)
      {
LABEL_38:
        v64 = *(unsigned int *)(v26 + 184);
        goto LABEL_39;
      }
    }
    else
    {
      v42 = 0;
      if (v26)
        goto LABEL_38;
    }
    v64 = 0;
LABEL_39:
    v65 = 0;
    v43 = 0;
    v71 = 0;
    v44 = 0;
    v45 = -1;
    v63 = 8 * v28;
    do
    {
      v46 = (_QWORD *)v68[v44];
      if (v66)
      {
        v47 = v46[2];
        if (v64 != v47)
        {
          v48 = v62 == 0;
          v49 = _sqlEntityForEntityID(v61, v46[2]);
          if (v48)
            v42 = 0;
          else
            v42 = (objc_class *)objc_msgSend((id)v62[1], "objectIDFactoryForSQLEntity:", v49);
          v64 = v47;
        }
      }
      v50 = (void *)objc_msgSend([v42 alloc], "initWithPK64:", *v46);
      v51 = v46[1];
      v52 = v45;
      if (v51 != v71)
      {
        v52 = v45;
        do
          v43 = (void *)objc_msgSend(v8, "objectAtIndex:", ++v52);
        while (v51 != objc_msgSend(v43, "_referenceData64"));
        v71 = v51;
      }
      if (v45 != v52)
      {
        if (objc_msgSend(v41, "count"))
        {
          v53 = v72 != 0;
          objc_msgSend(v67, "addObject:", v65);
          objc_msgSend(v67, "addObject:", v41);
          if (v53)
          {
            objc_msgSend(v67, "addObject:", v70);

            v70 = (char *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          }

          v41 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        }
        v65 = (uint64_t)v43;
      }
      v54 = v72 != 0;
      objc_msgSend(v41, "addObject:", v50);
      if (v54)
      {
        v55 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", LODWORD(v46[(unint64_t)v63 / 8]));
        objc_msgSend(v70, "addObject:", v55);
      }

      ++v44;
      v45 = v52;
    }
    while (v44 != v69);
    if (objc_msgSend(v41, "count"))
    {
      v56 = v72 != 0;
      objc_msgSend(v67, "addObject:", v65);
      objc_msgSend(v67, "addObject:", v41);

      if (v56)
      {
        objc_msgSend(v67, "addObject:", v70);

      }
    }
    if (v59 >= 0x202)
      NSZoneFree(0, v68);
    v25 = v60;
    goto LABEL_66;
  }
  return 0;
}

void sub_18A32C95C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A32C974(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A32C9C8);
}

void sub_18A32C97C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A32C520);
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A32C9B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A32C98CLL);
  }
  _Unwind_Resume(a1);
}

void *_rawSQLForToManyFaultStatement(void *a1, int a2, int a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const __CFString *v21;
  __CFString **v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v6 = (void *)objc_msgSend(a1, "sqlString");
  v7 = objc_msgSend(v6, "rangeOfString:options:", CFSTR(" FROM "), 6);
  v9 = v8;
  v10 = objc_msgSend(v6, "rangeOfString:options:", CFSTR(" WHERE "), 6);
  v12 = stripEmptyStringsFromArray((void *)objc_msgSend((id)objc_msgSend(v6, "substringWithRange:", v7 + 1, v10 - v7 + v11 - 2), "componentsSeparatedByString:", CFSTR(" ")));
  if ((unint64_t)objc_msgSend(v12, "count") < 4)
    v13 = &stru_1E1EE23F0;
  else
    v13 = (const __CFString *)objc_msgSend((id)objc_msgSend(v12, "objectAtIndex:", 2), "stringByAppendingString:", CFSTR("."));
  if ((unint64_t)objc_msgSend(v12, "count") < 6)
  {
    v15 = objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", objc_msgSend(v6, "substringFromIndex:", v7 + v9));
  }
  else
  {
    v14 = (void *)objc_msgSend(v12, "subarrayWithRange:", 6, objc_msgSend(v12, "count") - 7);
    v15 = objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("%@ %@ JOIN %@ %@ %@%@"), objc_msgSend(v12, "objectAtIndex:", 4), objc_msgSend(v12, "objectAtIndex:", 5), objc_msgSend(v12, "objectAtIndex:", 1), objc_msgSend(v12, "objectAtIndex:", 2), objc_msgSend(v14, "componentsJoinedByString:", CFSTR(" ")), objc_msgSend(v6, "substringFromIndex:", v10));
  }
  v16 = (void *)v15;
  v17 = objc_msgSend(a1, "entity");
  if (!v17 || (v18 = *(void **)(v17 + 152)) == 0)
  {
    v20 = (void *)MEMORY[0x1E0CB3940];
LABEL_13:
    if (a3)
      v23 = objc_msgSend(v20, "stringWithFormat:", CFSTR("SELECT %@%@ FROM "), v13, CFSTR("Z_PK"), v29, v30);
    else
      v23 = objc_msgSend(v20, "stringWithFormat:", CFSTR("SELECT 0, %@%@ FROM "), v13, CFSTR("Z_PK"), v29, v30);
    goto LABEL_18;
  }
  v19 = objc_msgSend(v18, "count");
  v20 = (void *)MEMORY[0x1E0CB3940];
  if (!v19)
    goto LABEL_13;
  if (a3)
  {
    v21 = CFSTR("Z_PK");
    v22 = NSSQLEntityColumnName;
  }
  else
  {
    v21 = CFSTR("Z_ENT");
    v22 = NSSQLPKColumnName;
  }
  v23 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT %@%@, %@%@ FROM "), v13, v21, v13, *v22);
LABEL_18:
  objc_msgSend(v16, "insertString:atIndex:", v23, 0);
  if (a2 && objc_msgSend((id)objc_msgSend(a1, "bindVariables"), "count"))
  {
    v24 = (void *)objc_msgSend(v16, "componentsSeparatedByString:", CFSTR(" ?"));
    v16 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", objc_msgSend(v16, "length"));
    v25 = objc_msgSend(v24, "count");
    v26 = v25 - 1;
    if (v25 != 1)
    {
      v27 = 0;
      do
      {
        objc_msgSend(v16, "appendString:", objc_msgSend(v24, "objectAtIndex:", v27));
        objc_msgSend(v16, "appendFormat:", CFSTR(" %qi"), objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "bindVariables"), "objectAtIndex:", v27++), "int64"));
      }
      while (v26 != v27);
    }
    objc_msgSend(v16, "appendString:", objc_msgSend(v24, "objectAtIndex:", v26));
  }
  return v16;
}

void *stripEmptyStringsFromArray(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v7, "length"))
          objc_msgSend(v2, "addObject:", v7);
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return v2;
}

void sub_18A32E294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void (*a46)(char *))
{
  a46(&a44);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for NSPersistentStore.StoreType()
{
  return &type metadata for NSPersistentStore.StoreType;
}

void _sharedIMPL_addObjectToSet_core(_DWORD *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v6;
  int v7;
  CFSetRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *values;

  values = a3;
  v6 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
  v7 = a1[4];
  v8 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B3B0]);
  if ((v7 & 0x200000) != 0)
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v6, 1, (uint64_t)v8, a4);
  else
    objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v6, 1, v8);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  objc_msgSend(v15, "addObject:", values);
  if ((v7 & 0x200000) != 0)
  {
    _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v6);
    if (!v8)
      return;
    goto LABEL_8;
  }
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v6, 1, v8);
  if (v8)
LABEL_8:
    CFRelease(v8);
}

void sub_18A32EBF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A32EC88(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A32F1B0()
{
  __break(1u);
}

void sub_18A32F1F8()
{
  objc_end_catch();
  JUMPOUT(0x18A32F1CCLL);
}

void sub_18A32F204()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A32F20CLL);
  JUMPOUT(0x18A32F210);
}

id _rawRowDataForXPCRequest(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  double v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unsigned int v48;
  double v49;
  double v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  double Current;
  int v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double *Initialize;
  unint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  unsigned int **v80;
  unsigned int *v81;
  int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  _QWORD v99[2];

  v99[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 8), "allocationType") != 3
    && objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 8), "allocationType"))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 72) |= 0x20u;
    v3 = objc_msgSend((id)a1, "request");
    if (*(_QWORD *)(a1 + 120))
    {
      v4 = v3;
      v5 = objc_msgSend((id)a1, "fetchStatement");
      if (v5 && !*(_BYTE *)(v5 + 40))
      {
        v60 = (_QWORD *)objc_msgSend((id)a1, "fetchStatement");
        v61 = *(unsigned __int8 *)(a1 + 202);
        v62 = *(_QWORD *)(a1 + 136);
        v63 = *(_QWORD **)(a1 + 24);
        if (+[NSSQLCore debugDefault](NSSQLCore, "debugDefault") > 0
          || +[NSXPCStoreServer debugDefault](NSXPCStoreServer, "debugDefault"))
        {
          Current = CFAbsoluteTimeGetCurrent();
          v65 = 1;
        }
        else
        {
          v65 = 0;
          Current = 0.0;
        }
        v66 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
        if (v65)
        {
          v67 = objc_msgSend(v60, "sqlString");
          _NSCoreDataLog(8, (uint64_t)CFSTR("sql connection fetch statement: '%@'"), v68, v69, v70, v71, v72, v73, v67);
        }
        -[NSSQLiteConnection selectRowsWithStatement:cached:](v63, v60, v61 != 0);
        v74 = CFAbsoluteTimeGetCurrent();
        v93 = v66;
        Initialize = 0;
        v76 = 0;
        if (v65)
          v77 = v74 - Current;
        else
          v77 = 0.0;
        do
        {
          if (!Initialize)
          {
            Initialize = (double *)bufferResultSetAllocateInitialize(v76, v62);
            Initialize[1] = v74;
            *(_DWORD *)Initialize = 0;
            *((_DWORD *)Initialize + 10) |= 2u;
          }
          *(_DWORD *)(v62 + 16) = 0x7FFFFFFF;
          v78 = 0.0;
          if (v65)
            v78 = CFAbsoluteTimeGetCurrent();
          -[NSSQLiteConnection fetchBufferResultSet:usingFetchPlan:]((uint64_t)v63, (uint64_t)Initialize, v62);
          v79 = *((unsigned int *)Initialize + 8);
          if ((_DWORD)v79)
          {
            v80 = (unsigned int **)*((_QWORD *)Initialize + 6);
            v76 = 80;
            do
            {
              v81 = *v80++;
              v76 += v81[1] + 4 * *v81;
              --v79;
            }
            while (v79);
          }
          else
          {
            v76 = 80;
          }
          v82 = *((_DWORD *)Initialize + 10);
          if (v65)
            v77 = v77 + CFAbsoluteTimeGetCurrent() - v78;
        }
        while ((v82 & 1) == 0);
        -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v63, v61 != 0);
        v83 = (void *)_prepareLargeDictionaryResults((unsigned int *)Initialize, a1, 1);
        v99[0] = v83;
        v84 = _prepareBufferedDictionaryResult((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v99, 1), a1);

        v12 = (_QWORD *)v84;
        if (v65)
          _NSCoreDataLog(8, (uint64_t)CFSTR("sql connection fetch time: %.4fs"), v85, v86, v87, v88, v89, v90, *(uint64_t *)&v77);
        objc_msgSend(v93, "drain");
        objc_msgSend(0, "drain");
        goto LABEL_9;
      }
      if (+[NSXPCStoreServer debugDefault](NSXPCStoreServer, "debugDefault"))
        _NSCoreDataLog(8, (uint64_t)CFSTR("logically false fetch request %@ short circuits."), v6, v7, v8, v9, v10, v11, v4);
    }
    v12 = 0;
LABEL_9:
    v95 = 1;
    objc_msgSend(v2, "appendBytes:length:", &v95, 8);
    v13 = 0;
    if (objc_msgSend(v12, "count") && v12)
      v13 = v12[3];
    v99[0] = 0;
    v97 = 2882400171;
    objc_msgSend(v2, "appendBytes:length:", &v97, 8);
    if (v13 && *(_DWORD *)v13)
    {
      objc_msgSend(v2, "appendBytes:length:", v13, 4);
      objc_msgSend(v2, "appendBytes:length:", v99, 4);
      v96 = *(_QWORD *)(v13 + 16);
      objc_msgSend(v2, "appendBytes:length:", &v96, 8);
      objc_msgSend(v2, "appendBytes:length:", **(_QWORD **)(v13 + 48), v96);
    }
    else
    {
      objc_msgSend(v2, "appendBytes:length:", v99, 4);
    }
    goto LABEL_41;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 136) + 72) |= 0x20u;
  v14 = objc_msgSend((id)a1, "request");
  if (*(_QWORD *)(a1 + 120))
  {
    v15 = v14;
    v16 = objc_msgSend((id)a1, "fetchStatement");
    if (v16 && !*(_BYTE *)(v16 + 40))
    {
      v34 = (_QWORD *)objc_msgSend((id)a1, "fetchStatement");
      v35 = *(unsigned __int8 *)(a1 + 202);
      v36 = *(_QWORD *)(a1 + 136);
      v37 = *(_QWORD **)(a1 + 24);
      if (+[NSSQLCore debugDefault](NSSQLCore, "debugDefault") > 0
        || +[NSXPCStoreServer debugDefault](NSXPCStoreServer, "debugDefault"))
      {
        v38 = CFAbsoluteTimeGetCurrent();
        v39 = 1;
      }
      else
      {
        v39 = 0;
        v38 = 0.0;
      }
      v92 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
      if (v39)
      {
        v40 = objc_msgSend(v34, "sqlString");
        _NSCoreDataLog(8, (uint64_t)CFSTR("sql connection fetch statement: '%@'"), v41, v42, v43, v44, v45, v46, v40);
      }
      -[NSSQLiteConnection selectRowsWithStatement:cached:](v37, v34, v35 != 0);
      v47 = CFAbsoluteTimeGetCurrent();
      v91 = v35;
      v23 = 0;
      v48 = 0;
      if (v39)
        v49 = v47 - v38;
      else
        v49 = 0.0;
      do
      {
        if (v23)
          fetchResultSetDeallocate((uint64_t)v23);
        v23 = fetchResultSetAllocateInitialize(v48, (*(_DWORD *)(v36 + 72) >> 5) & 1);
        *((double *)v23 + 1) = v47;
        *v23 = 0;
        *(_DWORD *)(v36 + 16) = 0x7FFFFFFF;
        v50 = 0.0;
        if (v39)
          v50 = CFAbsoluteTimeGetCurrent();
        -[NSSQLiteConnection fetchResultSet:usingFetchPlan:]((uint64_t)v37, (uint64_t)v23, v36);
        v51 = v23[12];
        v53 = v23[4];
        v52 = v23[5];
        if (v39)
          v49 = v49 + CFAbsoluteTimeGetCurrent() - v50;
        v48 = v52 * v53;
      }
      while ((v51 & 1) == 0);
      -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v37, v91 != 0);
      if (v39)
        _NSCoreDataLog(8, (uint64_t)CFSTR("sql connection fetch time: %.4fs"), v54, v55, v56, v57, v58, v59, *(uint64_t *)&v49);
      objc_msgSend(v92, "drain");
      objc_msgSend(0, "drain");
      goto LABEL_21;
    }
    if (+[NSXPCStoreServer debugDefault](NSXPCStoreServer, "debugDefault"))
      _NSCoreDataLog(8, (uint64_t)CFSTR("logically false fetch request %@ short circuits."), v17, v18, v19, v20, v21, v22, v15);
  }
  v23 = 0;
LABEL_21:
  v94 = 1;
  objc_msgSend(v2, "appendBytes:length:", &v94, 8);
  v99[0] = 0;
  v96 = 2882400171;
  objc_msgSend(v2, "appendBytes:length:", &v96, 8);
  if (v23 && *v23)
  {
    objc_msgSend(v2, "appendBytes:length:", v23, 4);
    v24 = v23 + 5;
    objc_msgSend(v2, "appendBytes:length:", v23 + 5, 4);
    objc_msgSend(v2, "appendBytes:length:", &v96, 8);
    v98 = *v23;
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    v98 = v23[1];
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    v97 = (unint64_t)*((double *)v23 + 1);
    objc_msgSend(v2, "appendBytes:length:", &v97, 8);
    v98 = v23[4];
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    v98 = v23[5];
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    v98 = v23[6];
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    v98 = v23[7];
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    v97 = *((_QWORD *)v23 + 4);
    objc_msgSend(v2, "appendBytes:length:", &v97, 8);
    v97 = *((_QWORD *)v23 + 5);
    objc_msgSend(v2, "appendBytes:length:", &v97, 8);
    v98 = v23[12];
    objc_msgSend(v2, "appendBytes:length:", &v98, 4);
    objc_msgSend(v2, "appendBytes:length:", v99, 4);
    objc_msgSend(v2, "appendBytes:length:", v99, 8);
    objc_msgSend(v2, "appendBytes:length:", v99, 8);
    objc_msgSend(v2, "appendBytes:length:", v99, 8);
    objc_msgSend(v2, "appendBytes:length:", v99, 8);
    objc_msgSend(v2, "appendBytes:length:", v99, 8);
    v25 = objc_msgSend(v2, "length");
    if ((int)(((v25 + 7) & 0xFFFFFFF8) - v25) >= 1)
      objc_msgSend(v2, "appendBytes:length:", v99);
    v26 = *v24;
    if ((_DWORD)v26)
    {
      v27 = *v24;
      do
      {
        objc_msgSend(v2, "appendBytes:length:", v99, 8);
        --v27;
      }
      while (v27);
      objc_msgSend(v2, "appendBytes:length:", &v96, 8);
      v28 = 0;
      v29 = 8 * v26;
      do
      {
        v95 = 0;
        v95 = *(_QWORD *)(*((_QWORD *)v23 + 9) + v28);
        objc_msgSend(v2, "appendBytes:length:", &v95, 8);
        v28 += 8;
      }
      while (v29 != v28);
      v30 = objc_msgSend(v2, "length");
      do
      {
        objc_msgSend(v2, "appendBytes:length:", v99, 8);
        LODWORD(v26) = v26 - 1;
      }
      while ((_DWORD)v26);
      v31 = 0;
      do
      {
        v32 = objc_msgSend(v2, "length");
        if ((int)(((v32 + 7) & 0xFFFFFFF8) - v32) >= 1)
          objc_msgSend(v2, "appendBytes:length:", v99);
        v95 = 0;
        v95 = objc_msgSend(v2, "length");
        objc_msgSend(v2, "replaceBytesInRange:withBytes:", v30 + v31, 8, &v95);
        objc_msgSend(v2, "appendBytes:length:", *(_QWORD *)(*((_QWORD *)v23 + 8) + v31), *(_QWORD *)(*((_QWORD *)v23 + 9) + v31));
        v31 += 8;
      }
      while (v29 != v31);
    }
    else
    {
      objc_msgSend(v2, "appendBytes:length:", &v96, 8);
      objc_msgSend(v2, "length");
    }
  }
  else
  {
    objc_msgSend(v2, "appendBytes:length:", v99, 4);
  }
  v12 = 0;
  if (v23)
    fetchResultSetDeallocate((uint64_t)v23);
LABEL_41:
  if (v12)

  return v2;
}

void sub_18A330598(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v11;
  id v12;

  if (!a2)
    _Unwind_Resume(exc_buf);
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A330548);
  }
  v11 = objc_begin_catch(exc_buf);
  v12 = v11;
  objc_exception_throw(v11);
}

void sub_18A330760(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A330728);
  }
  JUMPOUT(0x18A3306A0);
}

void sub_18A33077C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A3306A0);
  JUMPOUT(0x18A3307F8);
}

void sub_18A330788(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A330794);
  JUMPOUT(0x18A3306A0);
}

void sub_18A3307E0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3307A8);
  }
  JUMPOUT(0x18A3306A0);
}

void sub_18A3307F0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A3307FCLL);
  JUMPOUT(0x18A3306A0);
}

void sub_18A33097C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A33099CLL);
  }
  JUMPOUT(0x18A3306A0);
}

_QWORD *bufferResultSetAllocateInitialize(unint64_t a1, uint64_t a2)
{
  size_t v2;
  unsigned int v3;
  malloc_zone_t *v4;
  _QWORD *v5;
  malloc_zone_t *v6;
  _QWORD *v7;
  malloc_zone_t *v8;
  void *v9;
  _QWORD *v10;
  malloc_zone_t *v11;
  _DWORD *v12;

  if (a1 <= 0x800)
    v2 = 0x4000;
  else
    v2 = a1;
  v3 = *(_DWORD *)(a2 + 72) & 0x20;
  v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v4 = malloc_default_zone();
  v5 = malloc_type_zone_calloc(v4, 1uLL, 0x50uLL, 0x10900404577C156uLL);
  v5[2] = v2;
  *((_DWORD *)v5 + 6) = 512;
  *((_DWORD *)v5 + 8) = 1;
  v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v6 = malloc_default_zone();
  v7 = malloc_type_zone_malloc(v6, 0x1000uLL, 0x80040B8603338uLL);
  v5[6] = v7;
  v7[511] = 0;
  v8 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (v3)
  {
    if (!_PF_Private_Malloc_Zone)
      v8 = malloc_default_zone();
    v9 = malloc_type_zone_calloc(v8, 1uLL, v2, 0x50361527uLL);
  }
  else
  {
    if (!_PF_Private_Malloc_Zone)
      v8 = malloc_default_zone();
    v9 = malloc_type_zone_malloc(v8, v2, 0xF179C39CuLL);
  }
  v5[8] = v9;
  *(_QWORD *)v5[6] = v9;
  v10 = (_QWORD *)v5[8];
  *v10 = 0;
  v5[9] = v10 + 1;
  *((_DWORD *)v5 + 9) = 0;
  v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v11 = malloc_default_zone();
  v12 = malloc_type_zone_calloc(v11, 1uLL, 0x800uLL, 0x8C32605uLL);
  v5[7] = v12;
  v12[511] = 0;
  *v12 = 0;
  *((_DWORD *)v5 + 10) = v5[5] & 0xFFFFFFFB | (v3 >> 3);
  *(_DWORD *)v5 = 0;
  return v5;
}

void sub_18A331A88(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3319ECLL);
}

void *bufferResultSetIngestRow(uint64_t a1, const void *a2, size_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  _BYTE *v9;
  unsigned int *v10;
  int64_t v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  BOOL v15;
  malloc_zone_t *v16;
  void *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  malloc_zone_t *v23;
  _QWORD *v24;
  malloc_zone_t *v25;
  void *v26;
  int v27;
  vm_size_t v28;
  vm_map_t *v29;
  vm_size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  vm_address_t v38;
  unsigned int v39;
  malloc_zone_t *v40;
  _DWORD *v41;
  uint64_t v42;
  vm_map_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  vm_address_t v50;
  void *result;
  _DWORD *v52;
  int v53;
  size_t v54;
  unsigned int v55;
  malloc_zone_t *v56;
  _QWORD *v57;
  malloc_zone_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  vm_address_t address;
  const __CFString *v65;
  _QWORD v66[2];

  v66[1] = *MEMORY[0x1E0C80C00];
  v5 = (a3 & 7) + a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 >> 1;
  v8 = v5 + 8;
  v9 = *(_BYTE **)(a1 + 72);
  v10 = *(unsigned int **)(a1 + 64);
  v11 = v9 - (_BYTE *)v10;
  if (v5 >= v6 >> 1)
    v12 = v5 + 8;
  else
    v12 = (a3 & 7) + a3;
  v13 = 4 * *v10;
  v14 = v13 + 4;
  if (v5 < v6 >> 1 && v6 - v11 >= v5 + v14)
  {
    v18 = (char *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v19 = v12 + v13;
    if (v6 <= v12 + v13)
    {
      v20 = v19 + v6;
    }
    else if (v6 <= 0x7EFF81 || v19 >= 0x7EFF81)
    {
      v20 = 2 * v6;
    }
    else
    {
      v20 = v6 + 8322945;
    }
    v27 = getpagesize();
    v28 = (v20 + v27 - 1) / (unint64_t)v27 * v27;
    address = 0;
    v29 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, v28, 754974721))
    {
      v30 = v12 + v14 + *(_QWORD *)(a1 + 16);
      v31 = vm_allocate(*v29, &address, v30, 754974721);
      if ((_DWORD)v31)
      {
        v60 = v31;
        _NSCoreDataLog(1, (uint64_t)CFSTR("*** vm_allocate(size=%lld) failed (error code=%d)\n"), v32, v33, v34, v35, v36, v37, v30);
        v61 = *MEMORY[0x1E0C99768];
        v65 = CFSTR("VMErrorCode");
        v66[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v60);
        v62 = +[_NSCoreDataException exceptionWithName:code:reason:userInfo:]((uint64_t)_NSCoreDataException, v61, 134183, (uint64_t)CFSTR("Unable to allocate VM Memory"), (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, &v65, 1));
        objc_exception_throw(v62);
      }
    }
    vm_copy(*v29, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 16), address);
    MEMORY[0x18D76C060](*v29, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 16));
    v38 = address;
    *(_QWORD *)(a1 + 64) = address;
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (*(_DWORD *)(a1 + 32) - 1)) = v38;
    v10 = *(unsigned int **)(a1 + 64);
    v18 = (char *)v10 + v11;
    *(_QWORD *)(a1 + 72) = (char *)v10 + v11;
    *(_DWORD *)a1 = *v10;
    *(_QWORD *)(a1 + 16) = v28;
  }
  else
  {
    memcpy(v9, *(const void **)(a1 + 56), v13);
    *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4) = v11;
    bzero(*(void **)(a1 + 56), v13);
    v15 = v5 >= v7 && v11 == 8;
    if (v15 && v12 > *(_QWORD *)(a1 + 16))
    {
      v16 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v16 = malloc_default_zone();
      v17 = malloc_type_zone_realloc(v16, *(void **)(a1 + 64), v12 + 8, 0x1C1B1F53uLL);
      *(_QWORD *)(a1 + 64) = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (*(_DWORD *)(a1 + 32) - 1)) = v17;
      v10 = *(unsigned int **)(a1 + 64);
      *(_QWORD *)v10 = 0;
      v18 = (char *)(v10 + 2);
      *(_QWORD *)(a1 + 72) = v10 + 2;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v21 + 1;
      if (v5 < v7)
        v8 = *(_QWORD *)(a1 + 16);
      v22 = *(_DWORD *)(a1 + 24);
      if (v21 + 1 >= v22)
      {
        v23 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
        if (!_PF_Private_Malloc_Zone)
          v23 = malloc_default_zone();
        v24 = malloc_type_zone_realloc(v23, *(void **)(a1 + 48), 8 * (v22 + 512), 0x80040B8603338uLL);
        *(_QWORD *)(a1 + 48) = v24;
        v24[v22 + 511] = 0;
        *(_DWORD *)(a1 + 24) = v22 + 512;
      }
      v25 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if ((*(_BYTE *)(a1 + 40) & 4) != 0)
      {
        if (!_PF_Private_Malloc_Zone)
          v25 = malloc_default_zone();
        v26 = malloc_type_zone_calloc(v25, 1uLL, v8, 0x4BF193BBuLL);
      }
      else
      {
        if (!_PF_Private_Malloc_Zone)
          v25 = malloc_default_zone();
        v26 = malloc_type_zone_malloc(v25, v8, 0x5170C6E0uLL);
      }
      *(_QWORD *)(a1 + 64) = v26;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v21) = v26;
      v10 = *(unsigned int **)(a1 + 64);
      *(_QWORD *)v10 = 0;
      v18 = (char *)(v10 + 2);
      *(_QWORD *)(a1 + 72) = v10 + 2;
      *(_DWORD *)(a1 + 36) = v21;
    }
  }
  v39 = *(_DWORD *)(a1 + 28);
  if (*v10 >= v39)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    {
      v42 = 2 * v39;
      address = 0;
      v43 = (vm_map_t *)MEMORY[0x1E0C83DA0];
      if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 4 * v42, 754974721))
        _NSCoreDataLog(2, (uint64_t)CFSTR("*** vm_allocate(size=%lld) failed (error code=%d)\n"), v44, v45, v46, v47, v48, v49, v42);
      vm_copy(*v43, *(_QWORD *)(a1 + 56), 4 * *(unsigned int *)(a1 + 28), address);
      MEMORY[0x18D76C060](*v43, *(_QWORD *)(a1 + 56), 4 * *(unsigned int *)(a1 + 28));
      v50 = address;
      *(_QWORD *)(a1 + 56) = address;
      *(_DWORD *)(v50 + 4 * v42 - 4) = 0;
      *(_DWORD *)(a1 + 28) = v42;
      v18 = *(char **)(a1 + 72);
    }
    else
    {
      v40 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v40 = malloc_default_zone();
      v41 = malloc_type_zone_realloc(v40, *(void **)(a1 + 56), 4 * (v39 + 512), 0x100004052888210uLL);
      *(_QWORD *)(a1 + 56) = v41;
      v41[v39 + 511] = 0;
      *(_DWORD *)(a1 + 28) = v39 + 512;
    }
  }
  result = memcpy(v18, a2, a3);
  *(_QWORD *)(a1 + 72) += a3;
  v52 = *(_DWORD **)(a1 + 64);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (*v52)++) = a3;
  ++*(_DWORD *)a1;
  if (v5 >= v7 && (*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    v52[1] = a3 + 8;
    v53 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v53 + 1;
    v54 = *(_QWORD *)(a1 + 16);
    v55 = *(_DWORD *)(a1 + 24);
    if (v53 + 1 >= v55)
    {
      v56 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v56 = malloc_default_zone();
      v57 = malloc_type_zone_realloc(v56, *(void **)(a1 + 48), 8 * (v55 + 512), 0x80040B8603338uLL);
      *(_QWORD *)(a1 + 48) = v57;
      v57[v55 + 511] = 0;
      *(_DWORD *)(a1 + 24) = v55 + 512;
    }
    v58 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    {
      if (!_PF_Private_Malloc_Zone)
        v58 = malloc_default_zone();
      result = malloc_type_zone_calloc(v58, 1uLL, v54, 0xEFA6EF61uLL);
    }
    else
    {
      if (!_PF_Private_Malloc_Zone)
        v58 = malloc_default_zone();
      result = malloc_type_zone_malloc(v58, v54, 0xE290405AuLL);
    }
    *(_QWORD *)(a1 + 64) = result;
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v53) = result;
    v59 = *(_QWORD **)(a1 + 64);
    *v59 = 0;
    *(_QWORD *)(a1 + 72) = v59 + 1;
    *(_DWORD *)(a1 + 36) = v53;
  }
  return result;
}

uint64_t _prepareBufferedDictionaryResult(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  int v31;
  size_t v32;
  _DWORD *v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id obj;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1, "count"))
    return NSArray_EmptyArray;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
  if (!v4)
    return NSArray_EmptyArray;
  v5 = v4;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)v49;
  v9 = 0x1EDF5B000uLL;
  do
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v49 != v8)
        objc_enumerationMutation(a1);
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * i) + 24);
      v12 = *(unsigned int *)(v11 + 32);
      if (!(_DWORD)v12)
        goto LABEL_14;
      v13 = *(_DWORD ***)(v11 + 48);
      v14 = *(unsigned int *)(v11 + 32);
      do
      {
        v15 = *v13++;
        v7 += *v15;
        --v14;
      }
      while (v14);
      if (v11)
      {
        v16 = 0;
        v17 = *(uint64_t **)(v11 + 48);
        do
        {
          v18 = *v17++;
          v16 = v16 + *(_DWORD *)(v18 + 4) - 8;
          --v12;
        }
        while (v12);
      }
      else
      {
LABEL_14:
        v16 = 0;
      }
      v6 += v16;
    }
    v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
  }
  while (v5);
  if (!v7)
    return NSArray_EmptyArray;
  v19 = v6 + 8 + 4 * v7;
  if (v19 <= 0x400)
    v19 = 1024;
  v39 = (v19 + 7) & 0xFFFFFFFF8;
  v40 = a2;
  v20 = PF_CALLOC_SCANNED_BYTES(v39);
  *v20 = v7;
  v20[1] = v6 + 8;
  v41 = (uint64_t)v20;
  obj = a1;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v21 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
  if (v21)
  {
    v22 = v21;
    v23 = (char *)(v41 + 8);
    v24 = (_DWORD *)(v41 + v6 + 8);
    v43 = *(_QWORD *)v45;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v45 != v43)
          objc_enumerationMutation(obj);
        v26 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * v25);
        if (v26)
          v27 = *(_QWORD *)(v26 + *(int *)(v9 + 3208));
        else
          v27 = 0;
        v28 = v9;
        if (*(_DWORD *)(v27 + 32))
        {
          v29 = 0;
          do
          {
            v30 = *(int **)(*(_QWORD *)(v27 + 48) + 8 * v29);
            v31 = *v30;
            v32 = (v30[1] - 8);
            v33 = v30 + 2;
            memcpy(v23, v30 + 2, v32);
            if (v31 == 1)
            {
              *v24 = v32;
              v34 = 4;
            }
            else
            {
              v35 = (char *)v33 + v32;
              v34 = (4 * v31);
              memcpy(v24, v35, v34);
            }
            v23 += v32;
            v24 = (_DWORD *)((char *)v24 + v34);
            ++v29;
          }
          while (v29 < *(unsigned int *)(v27 + 32));
        }
        ++v25;
        v9 = v28;
      }
      while (v25 != v22);
      v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
      v22 = v36;
    }
    while (v36);
  }
  v37 = (unsigned int *)bufferResultSetAllocateWithBuffer(v39, v41);
  return _prepareLargeDictionaryResults(v37, v40, 0);
}

uint64_t _writeInt16IntoData(void *a1, unsigned int a2)
{
  int v4;
  __int16 v6;
  uint64_t v7;

  v4 = objc_msgSend(a1, "length");
  if ((int)(((v4 + 1) & 0xFFFFFFFE) - v4) >= 1)
  {
    v7 = 0;
    objc_msgSend(a1, "appendBytes:length:", &v7);
  }
  v6 = __rev16(a2);
  return objc_msgSend(a1, "appendBytes:length:", &v6, 2);
}

uint64_t _writeInt64IntoData(void *a1, unint64_t a2)
{
  int v4;
  unint64_t v6;

  v4 = objc_msgSend(a1, "length");
  if ((int)(((v4 + 7) & 0xFFFFFFF8) - v4) >= 1)
  {
    v6 = 0;
    objc_msgSend(a1, "appendBytes:length:", &v6);
  }
  v6 = bswap64(a2);
  return objc_msgSend(a1, "appendBytes:length:", &v6, 8);
}

void _writeStringIntoData(void *a1, void *a2, void *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  v6 = objc_msgSend(a2, "length");
  if ((int)(((v6 + 3) & 0xFFFFFFFC) - v6) >= 1)
    objc_msgSend(a2, "appendBytes:length:", &v10);
  v7 = 2 * objc_msgSend(a1, "length");
  v9 = bswap32(v7);
  objc_msgSend(a2, "appendBytes:length:", &v9, 4);
  objc_msgSend(a2, "appendBytes:length:", &v10, 4);
  if ((_DWORD)v7)
  {
    v8 = a3;
    if (v7 >= 0x400)
      v8 = malloc_type_malloc(v7 | 1, 0xC866BC4DuLL);
    objc_msgSend(a1, "getCharacters:", v8);
    objc_msgSend(a2, "appendBytes:length:", v8, v7);
    if (v8 != a3)
      free(v8);
  }
}

uint64_t _writeInt32IntoData(void *a1, unsigned int a2)
{
  int v4;
  unsigned int v6;
  uint64_t v7;

  v4 = objc_msgSend(a1, "length");
  if ((int)(((v4 + 3) & 0xFFFFFFFC) - v4) >= 1)
  {
    v7 = 0;
    objc_msgSend(a1, "appendBytes:length:", &v7);
  }
  v6 = bswap32(a2);
  return objc_msgSend(a1, "appendBytes:length:", &v6, 4);
}

void sub_18A3334E8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A33336CLL);
  }
  _Unwind_Resume(exc_buf);
}

objc_class *_PFFastStoreTemporaryIDClass(uint64_t a1)
{
  objc_class *result;
  unint64_t *v3;
  unint64_t v5;

  v3 = (unint64_t *)(a1 + 64);
  result = *(objc_class **)(a1 + 64);
  if (!result)
  {
    result = +[NSTemporaryObjectID classForStore:](NSTemporaryObjectID, "classForStore:", a1);
    while (!__ldaxr(v3))
    {
      if (!__stlxr((unint64_t)result, v3))
        return result;
    }
    __clrex();
    v5 = *v3;

    return (objc_class *)v5;
  }
  return result;
}

void sub_18A3344F0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3344F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  id v11;

  if (a2)
  {
    if (a2 == 3)
    {
      v10 = objc_begin_catch(exception_object);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v10, &a10);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v11 = objc_begin_catch(exception_object);
        objc_exception_rethrow();
      }
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18A3343C8);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A33457C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A334548);
  }
  _Unwind_Resume(a1);
}

void sub_18A3345A4()
{
  objc_end_catch();
  JUMPOUT(0x18A3345DCLL);
}

void sub_18A3345BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A334444);
  }
  _Unwind_Resume(a1);
}

void sub_18A3345D0()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A3345D8);
  JUMPOUT(0x18A3345DCLL);
}

void sub_18A3345E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A3349A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

uint64_t destroy for NSPersistentStore.StoreType()
{
  return swift_bridgeObjectRelease();
}

void _NSCoreDataLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  dispatch_once_t *v26;
  void *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = "unknown";
  v12 = (void *)MEMORY[0x18D76B4E4]();
  v13 = a1 - 1;
  switch(a1)
  {
    case 1:
    case 2:
    case 17:
      if (qword_1ECD8D828 == -1)
        goto LABEL_7;
      v26 = &qword_1ECD8D828;
      v27 = &__block_literal_global;
      break;
    case 3:
      if (qword_1ECD8D860 != -1)
        dispatch_once(&qword_1ECD8D860, &__block_literal_global_5);
      v11 = "warning";
      goto LABEL_21;
    case 4:
    case 5:
      if (qword_1ECD8D868 == -1)
        goto LABEL_7;
      v26 = &qword_1ECD8D868;
      v27 = &__block_literal_global_7;
      break;
    case 6:
    case 7:
      if (qword_1ECD8D870 == -1)
        goto LABEL_7;
      v26 = &qword_1ECD8D870;
      v27 = &__block_literal_global_9;
      break;
    case 8:
      if (qword_1ECD8D878 != -1)
        dispatch_once(&qword_1ECD8D878, &__block_literal_global_11);
      v11 = "XPC";
      goto LABEL_21;
    case 9:
      if (qword_1ECD8D888 != -1)
        dispatch_once(&qword_1ECD8D888, &__block_literal_global_15);
      v11 = "debug";
      goto LABEL_21;
    case 16:
      if (qword_1ECD8D880 != -1)
        dispatch_once(&qword_1ECD8D880, &__block_literal_global_13);
      v11 = "CloudKit";
      goto LABEL_21;
    default:
      goto LABEL_21;
  }
  dispatch_once(v26, v27);
LABEL_7:
  if (v13 <= 0x10)
    v11 = off_1E1EDD1D8[v13];
LABEL_21:
  if (_pflogging_enable_oslog >= 1)
  {
    if (_pflogging_catastrophic_mode)
      v14 = 1;
    else
      v14 = a1;
    switch(v14)
    {
      case 1:
      case 17:
        goto LABEL_40;
      case 2:
        if (!os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR))
          goto LABEL_31;
        goto LABEL_40;
      case 3:
        v15 = qword_1ECD8D830;
        goto LABEL_38;
      case 4:
      case 5:
        v15 = qword_1ECD8D838;
        goto LABEL_38;
      case 6:
      case 7:
        v15 = qword_1ECD8D840;
        goto LABEL_35;
      case 8:
        v15 = qword_1ECD8D848;
        goto LABEL_38;
      case 9:
        v15 = qword_1ECD8D858;
LABEL_35:
        v18 = OS_LOG_TYPE_INFO;
        goto LABEL_39;
      case 16:
        v15 = qword_1ECD8D850;
        goto LABEL_38;
      default:
        v15 = MEMORY[0x1E0C81028];
LABEL_38:
        v18 = OS_LOG_TYPE_DEFAULT;
LABEL_39:
        if (!os_log_type_enabled(v15, v18))
        {
LABEL_31:
          v17 = 0;
          goto LABEL_70;
        }
LABEL_40:
        v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a2, &a9);
        v16 = (const char *)objc_msgSend(v17, "UTF8String");
        if (_pflogging_catastrophic_mode)
          v19 = 1;
        else
          v19 = a1;
        switch(v19)
        {
          case 1:
            v22 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR))
              goto LABEL_72;
            break;
          case 2:
            v22 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR))
              goto LABEL_72;
            break;
          case 3:
            v20 = qword_1ECD8D830;
            if (os_log_type_enabled((os_log_t)qword_1ECD8D830, OS_LOG_TYPE_DEFAULT))
              goto LABEL_61;
            break;
          case 4:
          case 5:
            v20 = qword_1ECD8D838;
            if (os_log_type_enabled((os_log_t)qword_1ECD8D838, OS_LOG_TYPE_DEFAULT))
              goto LABEL_61;
            break;
          case 6:
          case 7:
            v21 = qword_1ECD8D840;
            if (os_log_type_enabled((os_log_t)qword_1ECD8D840, OS_LOG_TYPE_INFO))
              goto LABEL_57;
            break;
          case 8:
            v20 = qword_1ECD8D848;
            if (os_log_type_enabled((os_log_t)qword_1ECD8D848, OS_LOG_TYPE_DEFAULT))
              goto LABEL_61;
            break;
          case 9:
            v21 = qword_1ECD8D858;
            if (os_log_type_enabled((os_log_t)qword_1ECD8D858, OS_LOG_TYPE_INFO))
            {
LABEL_57:
              *(_DWORD *)buf = 136446466;
              v29 = v11;
              v30 = 2082;
              v31 = v16;
              v23 = "%{public}s: %{public}s\n";
              v24 = v21;
              v25 = OS_LOG_TYPE_INFO;
              goto LABEL_63;
            }
            break;
          case 16:
            v20 = qword_1ECD8D850;
            if (os_log_type_enabled((os_log_t)qword_1ECD8D850, OS_LOG_TYPE_DEFAULT))
            {
LABEL_61:
              *(_DWORD *)buf = 136446466;
              v29 = v11;
              v30 = 2082;
              v31 = v16;
              v23 = "%{public}s: %{public}s\n";
              v24 = v20;
              goto LABEL_62;
            }
            break;
          case 17:
            v22 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_ERROR))
            {
LABEL_72:
              *(_DWORD *)buf = 136446466;
              v29 = v11;
              v30 = 2082;
              v31 = v16;
              _os_log_error_impl(&dword_18A253000, v22, OS_LOG_TYPE_ERROR, "%{public}s: %{public}s\n", buf, 0x16u);
            }
            break;
          default:
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v29 = v11;
              v30 = 2082;
              v31 = v16;
              v24 = MEMORY[0x1E0C81028];
              v23 = "CoreData: %{public}s: %{public}s\n";
LABEL_62:
              v25 = OS_LOG_TYPE_DEFAULT;
LABEL_63:
              _os_log_impl(&dword_18A253000, v24, v25, v23, buf, 0x16u);
            }
            break;
        }
        if (_pflogging_enable_stderr <= 0)
          goto LABEL_70;
        if (!v17)
          goto LABEL_66;
        goto LABEL_67;
    }
  }
  v16 = 0;
  v17 = 0;
  if (_pflogging_enable_stderr > 0)
  {
LABEL_66:
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a2, &a9);
LABEL_67:
    if (!v16)
      v16 = (const char *)objc_msgSend(v17, "UTF8String");
    os_unfair_lock_lock_with_options();
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CoreData: %s: %s\n", v11, v16);
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_64);
  }
LABEL_70:

  objc_autoreleasePoolPop(v12);
}

void sub_18A3358FC(_Unwind_Exception *exception_object, int a2)
{
  os_unfair_lock_s *v2;

  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A335ACC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

#error "18A335B90: call analysis failed (funcsize=40)"

void sub_18A335B9C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A335A70);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A335BD4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A335BD8);
  objc_terminate();
}

id static NSManagedObjectContext.willSaveObjectsNotification.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

void sub_18A336488()
{
  __break(1u);
}

void sub_18A3364E8()
{
  objc_end_catch();
  JUMPOUT(0x18A3364BCLL);
}

void sub_18A33699C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  id v38;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 232), 8);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A3368D4);
  }
  v38 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A336A4C()
{
  objc_end_catch();
  JUMPOUT(0x18A336A1CLL);
}

void sub_18A336A58()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A336A60);
  JUMPOUT(0x18A336A64);
}

void sub_18A339828(_Unwind_Exception *a1, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 4)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18A339158);
    }
    v2 = objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18A33A078(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A33A048);
  }
  JUMPOUT(0x18A339DACLL);
}

void sub_18A33A86C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A33A70CLL);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_svfk_24(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x18uLL);
}

_QWORD *_svfk_21(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x15uLL);
}

void sub_18A33BD48(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A33BD8C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A33BD94);
  JUMPOUT(0x18A33BD80);
}

void sub_18A33BDD0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A33BDA0);
  }
  JUMPOUT(0x18A33BD80);
}

void sub_18A33C2E8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  id v15;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A33C02CLL);
    }
    v15 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A33C3B0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A33C37CLL);
  }
  JUMPOUT(0x18A33C354);
}

void sub_18A33C624(_Unwind_Exception *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A33C528);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A33C6AC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A33C67CLL);
  }
  JUMPOUT(0x18A33C65CLL);
}

id _performExhaustiveUniquenessConflictDetectionForSaveRequest(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  NSSQLiteStatement *v7;
  NSSQLiteStatement *v8;
  NSSQLiteStatement *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  NSSQLCore *sqlCore;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  const void *v52;
  char v53;
  void *v54;
  NSKnownKeysDictionary *v55;
  id v56;
  void *v57;
  NSKnownKeysDictionary *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t j;
  uint64_t v62;
  NSConstraintConflict *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSConstraintConflict *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  NSSQLiteStatement *v79;
  NSSQLiteStatement *v80;
  NSSQLiteStatement *v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  uint64_t v89;
  int v90;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  char *v97;
  _BYTE *v98;
  uint64_t v99;
  void *v100;
  int v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  NSSQLCore *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  const void *v119;
  id v120;
  void *v121;
  NSSQLObjectFaultRequestContext *v122;
  id *p_isa;
  NSSQLiteConnection *connection;
  NSSQLFetchRequestContext *v125;
  NSSQLFetchRequestContext *v126;
  NSSQLObjectFaultRequestContext *v127;
  id *v128;
  NSSQLiteConnection *v129;
  void *v130;
  NSKnownKeysDictionary *v131;
  NSKnownKeysDictionary *v132;
  NSConstraintConflict *v133;
  uint64_t v134;
  uint64_t v135;
  NSConstraintConflict *v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  void *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  id obj;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  id v163;
  void *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  id v168;
  id v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  id v178;
  uint64_t v179;
  void *m;
  uint64_t v181;
  id v182;
  void *v183;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *context;
  char *contexta;
  void *v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  id v197;
  id v198;
  id v199;
  id v200;
  void *v201;
  void *v202;
  id v203;
  id v204;
  NSSQLObjectFaultRequestContext *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  id v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint8_t v237[16];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint8_t buf[4];
  uint64_t v242;
  _BYTE v243[128];
  _BYTE v244[128];
  _BYTE v245[128];
  _BYTE v246[128];
  uint64_t v247;

  v2 = a1;
  v247 = *MEMORY[0x1E0C80C00];
  if (a1)
    a1 = *(_QWORD *)(a1 + 96);
  v146 = -[NSSQLSavePlan newObjectsForUniquenessConflictDetectionGivenReportedFailures:](a1, a2);
  obj = (id)+[_PFRoutines _rootEntityGroupsForObjects:passingBlock:]((uint64_t)_PFRoutines, v146, (uint64_t)&__block_literal_global_36);
  v147 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  v205 = (NSSQLObjectFaultRequestContext *)v2;
  if (v2)
  {
    v154 = *(_QWORD *)(v2 + 24);
    v164 = *(void **)(v2 + 32);
    v171 = objc_msgSend(*(id *)(v2 + 8), "model");
    v166 = *(void **)(v2 + 8);
  }
  else
  {
    v171 = 0;
    v154 = 0;
    v164 = 0;
    v166 = 0;
  }
  v201 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0u;
  v160 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v210, v245, 16);
  if (v160)
  {
    v158 = *(id *)v211;
LABEL_7:
    v173 = 0;
    while (1)
    {
      if (*(id *)v211 != v158)
        objc_enumerationMutation(obj);
      v168 = *(id *)(*((_QWORD *)&v210 + 1) + 8 * (_QWORD)v173);
      v3 = objc_msgSend((id)objc_msgSend(v168, "lastObject"), "entity");
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 120) & 4) != 0)
        {
          v4 = *(_QWORD **)(v3 + 72);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v3;
            v3 = objc_msgSend((id)v3, "superentity");
          }
          while (v3);
        }
      }
      else
      {
        v4 = 0;
      }
      v184 = (_QWORD *)_sqlCoreLookupSQLEntityForEntityDescription(v166, v4);
      v179 = objc_msgSend((id)objc_msgSend(v4, "subentities"), "count");
      if (v184)
        v5 = (void *)v184[26];
      else
        v5 = 0;
      v199 = v5;
      if (!objc_msgSend(v5, "count"))
        goto LABEL_121;
      v6 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
      v7 = +[NSSQLiteAdapter generateStatementForCheckingUniqueProperties:onObjects:usingSQLCore:]((uint64_t)NSSQLiteAdapter, v199, v168, v166);
      v8 = v7;
      objc_msgSend(v6, "drain");
      v9 = v7;
      v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v11 = v10;
      if (!v184)
        break;
      objc_msgSend(v10, "addObject:", v184[16]);
      if (v179)
      {
        v12 = v184[17];
LABEL_21:
        objc_msgSend(v11, "addObject:", v12);
      }
LABEL_22:
      v175 = objc_msgSend(v11, "count");
      v239 = 0u;
      v240 = 0u;
      *(_OWORD *)v237 = 0u;
      v238 = 0u;
      v13 = objc_msgSend(v199, "countByEnumeratingWithState:objects:count:", v237, v244, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v238;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v238 != v14)
              objc_enumerationMutation(v199);
            v16 = *(_QWORD *)(*(_QWORD *)&v237[8] + 8 * i);
            if (v16)
            {
              v17 = *(unsigned __int8 *)(v16 + 24);
              if (v17 == 7 || v17 == 1)
                objc_msgSend(v11, "addObject:");
            }
          }
          v13 = objc_msgSend(v199, "countByEnumeratingWithState:objects:count:", v237, v244, 16);
        }
        while (v13);
      }
      v177 = -[NSSQLiteConnection executeAttributeUniquenessCheckSQLStatement:returningColumns:](v154, v7, v11);

      v19 = objc_msgSend(v177, "count");
      v162 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
      if (!v19)
        goto LABEL_120;
      v235 = 0u;
      v236 = 0u;
      v233 = 0u;
      v234 = 0u;
      v156 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v233, v243, 16);
      if (!v156)
        goto LABEL_120;
      v20 = *(void **)v234;
      v149 = *(void **)v234;
LABEL_39:
      v21 = 0;
LABEL_40:
      if (*(void **)v234 != v20)
      {
        v22 = v21;
        objc_enumerationMutation(v168);
        v21 = v22;
      }
      v151 = v21;
      v203 = *(id *)(*((_QWORD *)&v233 + 1) + 8 * v21);
      v195 = _sqlCoreLookupSQLEntityForEntityDescription(v166, (_QWORD *)objc_msgSend(v203, "entity"));
      v231 = 0u;
      v232 = 0u;
      v229 = 0u;
      v230 = 0u;
      v186 = objc_msgSend(v177, "countByEnumeratingWithState:objects:count:", &v229, &v225, 16);
      if (v186)
      {
        v181 = *(_QWORD *)v230;
        while (1)
        {
          v23 = 0;
          do
          {
            if (*(_QWORD *)v230 != v181)
            {
              v24 = v23;
              objc_enumerationMutation(v177);
              v23 = v24;
            }
            v188 = v23;
            v192 = *(void **)(*((_QWORD *)&v229 + 1) + 8 * v23);
            context = (void *)MEMORY[0x18D76B4E4]();
            v197 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v216 = 0u;
            v217 = 0u;
            v214 = 0u;
            v215 = 0u;
            v25 = objc_msgSend(v199, "countByEnumeratingWithState:objects:count:", &v214, v246, 16);
            if (v25)
            {
              v26 = *(_QWORD *)v215;
              v27 = v175;
              do
              {
                v28 = 0;
                do
                {
                  if (*(_QWORD *)v215 != v26)
                    objc_enumerationMutation(v199);
                  v29 = *(_QWORD *)(*((_QWORD *)&v214 + 1) + 8 * v28);
                  if (!objc_msgSend((id)-[NSSQLEntity properties](v195), "containsObject:", v29))
                    goto LABEL_73;
                  if (v29)
                  {
                    v30 = (void *)v29;
                    if (*(_BYTE *)(v29 + 24) == 7)
                      v30 = (void *)objc_msgSend((id)v29, "propertyDescription");
                  }
                  else
                  {
                    v30 = 0;
                  }
                  v31 = (void *)objc_msgSend(v203, "valueForKey:", objc_msgSend(v30, "name"));
                  if (objc_msgSend(v31, "isNSString"))
                    v31 = (void *)+[_PFRoutines sanitize:]((uint64_t)_PFRoutines, v31);
                  if (!v29)
                    goto LABEL_62;
                  v32 = *(unsigned __int8 *)(v29 + 24);
                  if (v32 != 7)
                  {
                    if (v32 == 1)
                    {
                      v33 = (id)objc_msgSend(v192, "objectAtIndex:", v27);
                      goto LABEL_72;
                    }
LABEL_62:
                    v34 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Unsupported unique attribute type: %@");
                    _NSCoreDataLog(17, v34, v35, v36, v37, v38, v39, v40, v29);
                    v41 = __pflogFaultLog;
                    if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      v242 = v29;
                      _os_log_fault_impl(&dword_18A253000, v41, OS_LOG_TYPE_FAULT, "CoreData: Unsupported unique attribute type: %@", buf, 0xCu);
                    }
                    v33 = 0;
                    goto LABEL_72;
                  }
                  v42 = (void *)objc_msgSend(v192, "objectAtIndex:", v27);
                  v43 = objc_msgSend((id)v29, "destinationEntity");
                  if (*(_QWORD *)(v29 + 72))
                  {
                    v44 = (void *)objc_msgSend(v192, "objectAtIndex:", ++v27);
                    if (v205)
                      sqlCore = v205->super._sqlCore;
                    else
                      sqlCore = 0;
                    v43 = -[NSSQLModel entityForID:](-[NSSQLCore model](sqlCore, "model"), "entityForID:", objc_msgSend(v44, "longValue"));
                  }
                  v46 = v43;
                  v47 = objc_msgSend(v42, "longLongValue");
                  if (v205)
                    v48 = -[NSSQLCore newObjectIDForEntity:pk:](v205->super._sqlCore, "newObjectIDForEntity:pk:", v46, v47);
                  else
                    v48 = 0;
                  v33 = v48;
                  v31 = (void *)objc_msgSend(v31, "objectID");
LABEL_72:
                  if (objc_msgSend(v33, "isEqual:", v31))
                  {
                    objc_msgSend(v197, "addObject:", objc_msgSend((id)v29, "name"));
                    goto LABEL_81;
                  }
LABEL_73:
                  ++v27;
                  ++v28;
                }
                while (v25 != v28);
                v49 = objc_msgSend(v199, "countByEnumeratingWithState:objects:count:", &v214, v246, 16);
                v25 = v49;
              }
              while (v49);
            }
LABEL_81:
            if (objc_msgSend(v197, "count"))
            {
              v50 = (void *)objc_msgSend(v203, "objectID");
              v51 = objc_msgSend((id)objc_msgSend(v192, "objectAtIndex:", 0), "unsignedIntegerValue");
              v52 = v184;
              if (v179)
                v52 = _sqlEntityForEntityID(v171, objc_msgSend((id)objc_msgSend(v192, "objectAtIndex:", 1), "unsignedIntegerValue"));
              if (v205)
              {
                v193 = -[NSSQLCore newObjectIDForEntity:pk:](v205->super._sqlCore, "newObjectIDForEntity:pk:", v52, v51);
                v53 = objc_msgSend(v50, "isEqual:", v193);
              }
              else
              {
                v193 = 0;
                v53 = objc_msgSend(v50, "isEqual:", 0);
              }
              if ((v53 & 1) == 0)
              {
                v182 = faultRowWithObjectID((uint64_t)v193, v205);
                if (v182)
                {
                  v54 = (void *)objc_msgSend(v164, "objectWithID:", v193);
                  if ((objc_msgSend(v203, "isInserted") & 1) != 0)
                  {
                    v55 = 0;
                  }
                  else
                  {
                    v56 = faultRowWithObjectID((uint64_t)v50, v205);
                    v57 = v56;
                    if (v56)
                    {
                      v55 = _newObjectGraphStyleForSQLRow(v56, v203);
                    }
                    else
                    {
                      v201 = 0;
                      v55 = 0;
                    }

                  }
                  if (v201)
                  {
                    v58 = _newObjectGraphStyleForSQLRow(v182, v54);
                    v208 = 0u;
                    v209 = 0u;
                    v206 = 0u;
                    v207 = 0u;
                    v59 = objc_msgSend(v197, "countByEnumeratingWithState:objects:count:", &v206, &v221, 16);
                    if (v59)
                    {
                      v60 = *(_QWORD *)v207;
                      do
                      {
                        for (j = 0; j != v59; ++j)
                        {
                          if (*(_QWORD *)v207 != v60)
                            objc_enumerationMutation(v197);
                          v62 = *(_QWORD *)(*((_QWORD *)&v206 + 1) + 8 * j);
                          v63 = [NSConstraintConflict alloc];
                          v220 = v62;
                          v64 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v220, 1);
                          v219 = v203;
                          v65 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v219, 1);
                          v66 = (uint64_t)v55;
                          if (!v55)
                            v66 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
                          v218 = v66;
                          v67 = -[NSConstraintConflict initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:](v63, "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:", v64, v54, v58, v65, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v218, 1));
                          objc_msgSend(v201, "addObject:", v67);

                        }
                        v59 = objc_msgSend(v197, "countByEnumeratingWithState:objects:count:", &v206, &v221, 16);
                      }
                      while (v59);
                    }

                  }
                }
                else
                {
                  v201 = 0;
                }

              }
            }
            objc_autoreleasePoolPop(context);
            if (!v201)
              goto LABEL_119;
            v23 = v188 + 1;
          }
          while (v188 + 1 != v186);
          v68 = objc_msgSend(v177, "countByEnumeratingWithState:objects:count:", &v229, &v225, 16);
          v186 = v68;
          if (!v68)
          {
LABEL_116:
            v20 = v149;
            v21 = v151 + 1;
            if (v151 + 1 == v156)
            {
              v156 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v233, v243, 16);
              v20 = v149;
              if (!v156)
                goto LABEL_120;
              goto LABEL_39;
            }
            goto LABEL_40;
          }
        }
      }
      if (v201)
        goto LABEL_116;
LABEL_119:
      v201 = 0;
LABEL_120:
      objc_msgSend(v162, "drain");
LABEL_121:
      v2 = (uint64_t)v205;
      if (!v201)
      {
        v70 = 0;
        goto LABEL_132;
      }
      v173 = (char *)v173 + 1;
      if (v173 == (id)v160)
      {
        v69 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v210, v245, 16);
        v160 = v69;
        v2 = (uint64_t)v205;
        if (!v69)
          goto LABEL_131;
        goto LABEL_7;
      }
    }
    objc_msgSend(v10, "addObject:", 0);
    if (!v179)
      goto LABEL_22;
    v12 = 0;
    goto LABEL_21;
  }
LABEL_131:
  v70 = v201;
LABEL_132:
  v167 = v70;
  objc_msgSend(v147, "drain");
  if (v2)
  {
    if (*(_QWORD *)(v2 + 40))
    {

      goto LABEL_135;
    }
    v148 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
    v161 = *(_QWORD *)(v2 + 24);
    v183 = *(void **)(v2 + 32);
    v189 = objc_msgSend(*(id *)(v2 + 8), "model");
    v170 = *(void **)(v2 + 8);
  }
  else
  {
    v148 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
    v189 = 0;
    v161 = 0;
    v183 = 0;
    v170 = 0;
  }
  v185 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v225 = 0u;
  v226 = 0u;
  v227 = 0u;
  v228 = 0u;
  v157 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v225, v246, 16);
  if (!v157)
    goto LABEL_250;
  v152 = *(_QWORD *)v226;
  do
  {
    v155 = 0;
    do
    {
      if (*(_QWORD *)v226 != v152)
        objc_enumerationMutation(obj);
      v174 = *(id *)(*((_QWORD *)&v225 + 1) + 8 * v155);
      v150 = (void *)MEMORY[0x18D76B4E4]();
      v73 = objc_msgSend((id)objc_msgSend(v174, "lastObject"), "entity");
      if (v73)
      {
        if ((*(_BYTE *)(v73 + 120) & 4) != 0)
        {
          v74 = *(_QWORD **)(v73 + 72);
        }
        else
        {
          do
          {
            v74 = (_QWORD *)v73;
            v73 = objc_msgSend((id)v73, "superentity");
          }
          while (v73);
        }
      }
      else
      {
        v74 = 0;
      }
      v196 = (_QWORD *)_sqlCoreLookupSQLEntityForEntityDescription(v170, v74);
      v194 = objc_msgSend((id)objc_msgSend(v74, "subentities"), "count");
      if (v196)
        v75 = (void *)v196[27];
      else
        v75 = 0;
      v223 = 0u;
      v224 = 0u;
      v221 = 0u;
      v222 = 0u;
      v159 = v75;
      v169 = (id)objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v221, v245, 16);
      if (v169)
      {
        v165 = *(_QWORD *)v222;
        do
        {
          v76 = 0;
          do
          {
            if (*(_QWORD *)v222 != v165)
            {
              v77 = v76;
              objc_enumerationMutation(v159);
              v76 = v77;
            }
            v172 = v76;
            v204 = *(id *)(*((_QWORD *)&v221 + 1) + 8 * v76);
            v78 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
            v79 = +[NSSQLiteAdapter generateStatementForCheckingMulticolumnConstraint:onObjects:usingSQLCore:]((uint64_t)NSSQLiteAdapter, v204, v174, v170);
            v80 = v79;
            objc_msgSend(v78, "drain");
            v81 = v79;
            if (!v79)
              goto LABEL_240;
            v163 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
            v82 = objc_msgSend(v204, "count");
            v187 = objc_msgSend(v204, "valueForKey:", CFSTR("name"));
            v83 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v84 = v83;
            if (!v196)
            {
              objc_msgSend(v83, "addObject:", 0);
              if (!v194)
                goto LABEL_160;
              v85 = 0;
              goto LABEL_159;
            }
            objc_msgSend(v83, "addObject:", v196[16]);
            if (v194)
            {
              v85 = v196[17];
LABEL_159:
              objc_msgSend(v84, "addObject:", v85);
            }
LABEL_160:
            contexta = (char *)objc_msgSend(v84, "count");
            v216 = 0u;
            v217 = 0u;
            v214 = 0u;
            v215 = 0u;
            v86 = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v214, v244, 16);
            if (v86)
            {
              v87 = *(_QWORD *)v215;
              do
              {
                for (k = 0; k != v86; ++k)
                {
                  if (*(_QWORD *)v215 != v87)
                    objc_enumerationMutation(v204);
                  v89 = *(_QWORD *)(*((_QWORD *)&v214 + 1) + 8 * k);
                  if (v89)
                  {
                    v90 = *(unsigned __int8 *)(v89 + 24);
                    if (v90 == 7 || v90 == 1)
                      objc_msgSend(v84, "addObject:");
                  }
                }
                v86 = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v214, v244, 16);
              }
              while (v86);
            }
            v202 = -[NSSQLiteConnection executeMulticolumnUniquenessCheckSQLStatement:returningColumns:](v161, v79, v84);

            v198 = (id)objc_msgSend(v202, "count");
            if (objc_msgSend(v202, "count"))
            {
              v212 = 0u;
              v213 = 0u;
              v210 = 0u;
              v211 = 0u;
              v178 = (id)objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v210, v243, 16);
              if (v178)
              {
                v176 = *(_QWORD *)v211;
                do
                {
                  for (m = 0; m != v178; m = (char *)m + 1)
                  {
                    if (*(_QWORD *)v211 != v176)
                      objc_enumerationMutation(v174);
                    if (v198)
                    {
                      v92 = 0;
                      v93 = *(void **)(*((_QWORD *)&v210 + 1) + 8 * (_QWORD)m);
                      while (1)
                      {
                        v200 = (id)MEMORY[0x18D76B4E4]();
                        v94 = objc_msgSend(v202, "objectAtIndex:", v92);
                        if (v82)
                          break;
LABEL_209:
                        v118 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v202, "objectAtIndex:", v92), "objectAtIndex:", 0), "unsignedIntegerValue");
                        v119 = v196;
                        if (v194)
                          v119 = _sqlEntityForEntityID(v189, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v202, "objectAtIndex:", v92), "objectAtIndex:", 1), "unsignedIntegerValue"));
                        if (v205)
                          v120 = -[NSSQLCore newObjectIDForEntity:pk:](v205->super._sqlCore, "newObjectIDForEntity:pk:", v119, v118);
                        else
                          v120 = 0;
                        v121 = (void *)objc_msgSend(v93, "objectID");
                        if ((objc_msgSend(v121, "isEqual:", v120) & 1) == 0)
                        {
                          v122 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v205, (uint64_t)v120);
                          p_isa = (id *)&v122->super.super.isa;
                          if (v122)
                            v122->_forConflictAnalysis = 1;
                          if (v205)
                            connection = v205->super._connection;
                          else
                            connection = 0;
                          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v122, connection);
                          -[NSSQLStoreRequestContext setQueryGenerationToken:](p_isa, 0);
                          v125 = _executeObjectFaultRequest((uint64_t)p_isa);
                          -[NSSQLStoreRequestContext setConnection:]((uint64_t)p_isa, 0);

                          if ((objc_msgSend(v93, "isInserted") & 1) != 0)
                          {
                            v126 = 0;
                          }
                          else
                          {
                            v127 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v205, (uint64_t)v121);
                            v128 = (id *)&v127->super.super.isa;
                            if (v127)
                              v127->_forConflictAnalysis = 1;
                            if (v205)
                              v129 = v205->super._connection;
                            else
                              v129 = 0;
                            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v127, v129);
                            -[NSSQLStoreRequestContext setQueryGenerationToken:](v128, 0);
                            v126 = _executeObjectFaultRequest((uint64_t)v128);
                            -[NSSQLStoreRequestContext setConnection:]((uint64_t)v128, 0);

                          }
                          v130 = (void *)objc_msgSend(v183, "objectWithID:", v120);
                          v131 = _newObjectGraphStyleForSQLRow(v125, v130);
                          if ((objc_msgSend(v93, "isInserted") & 1) != 0)
                            v132 = 0;
                          else
                            v132 = _newObjectGraphStyleForSQLRow(v126, v93);
                          v133 = [NSConstraintConflict alloc];
                          *(_QWORD *)&v233 = v93;
                          v134 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v233, 1);
                          v135 = (uint64_t)v132;
                          if (!v132)
                            v135 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
                          *(_QWORD *)&v229 = v135;
                          v136 = -[NSConstraintConflict initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:](v133, "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:", v187, v130, v131, v134, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v229, 1));
                          objc_msgSend(v185, "addObject:", v136);

                        }
LABEL_232:
                        objc_autoreleasePoolPop(v200);
                        if ((id)++v92 == v198)
                          goto LABEL_237;
                      }
                      v95 = (void *)v94;
                      v96 = 0;
                      v97 = contexta;
                      while (2)
                      {
                        v98 = (_BYTE *)objc_msgSend(v204, "objectAtIndex:", v96);
                        v99 = (uint64_t)v98;
                        if (v98)
                        {
                          if (v98[24] == 7)
                            v98 = (_BYTE *)objc_msgSend(v98, "propertyDescription");
                        }
                        else
                        {
                          v98 = 0;
                        }
                        v100 = (void *)objc_msgSend(v93, "valueForKey:", objc_msgSend(v98, "name"));
                        if (objc_msgSend(v100, "isNSString"))
                          v100 = (void *)+[_PFRoutines sanitize:]((uint64_t)_PFRoutines, v100);
                        if (!v99)
                          goto LABEL_193;
                        v101 = *(unsigned __int8 *)(v99 + 24);
                        if (v101 == 7)
                        {
                          v111 = (void *)objc_msgSend(v95, "objectAtIndex:", v97);
                          v112 = objc_msgSend((id)v99, "destinationEntity");
                          if (*(_QWORD *)(v99 + 72))
                          {
                            v113 = (void *)objc_msgSend(v95, "objectAtIndex:", ++v97);
                            if (v205)
                              v114 = v205->super._sqlCore;
                            else
                              v114 = 0;
                            v112 = -[NSSQLModel entityForID:](-[NSSQLCore model](v114, "model"), "entityForID:", objc_msgSend(v113, "longValue"));
                          }
                          v115 = v112;
                          v116 = objc_msgSend(v111, "longLongValue");
                          if (v205)
                            v117 = -[NSSQLCore newObjectIDForEntity:pk:](v205->super._sqlCore, "newObjectIDForEntity:pk:", v115, v116);
                          else
                            v117 = 0;
                          v102 = v117;
                          v100 = (void *)objc_msgSend(v100, "objectID");
                        }
                        else
                        {
                          if (v101 == 1)
                          {
                            v102 = (id)objc_msgSend(v95, "objectAtIndex:", v97);
                            goto LABEL_203;
                          }
LABEL_193:
                          v103 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Unsupported unique attribute type: %@");
                          _NSCoreDataLog(17, v103, v104, v105, v106, v107, v108, v109, v99);
                          v110 = __pflogFaultLog;
                          if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)v237 = 138412290;
                            *(_QWORD *)&v237[4] = v99;
                            _os_log_fault_impl(&dword_18A253000, v110, OS_LOG_TYPE_FAULT, "CoreData: Unsupported unique attribute type: %@", v237, 0xCu);
                          }
                          v102 = 0;
                        }
LABEL_203:
                        if (!objc_msgSend(v100, "isEqual:", v102))
                          goto LABEL_232;
                        ++v97;
                        if (v82 == ++v96)
                          goto LABEL_209;
                        continue;
                      }
                    }
LABEL_237:
                    ;
                  }
                  v178 = (id)objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v210, v243, 16);
                }
                while (v178);
              }
            }

LABEL_240:
            v76 = v172 + 1;
          }
          while ((id)(v172 + 1) != v169);
          v137 = objc_msgSend(v159, "countByEnumeratingWithState:objects:count:", &v221, v245, 16);
          v169 = (id)v137;
        }
        while (v137);
      }
      objc_autoreleasePoolPop(v150);
      ++v155;
    }
    while (v155 != v157);
    v138 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v225, v246, 16);
    v157 = v138;
  }
  while (v138);
LABEL_250:
  v139 = v185;
  objc_msgSend(v148, "drain");
  if (!v205 || !v205->super._error)
  {
    v140 = v167;
    if (v167 && (v141 = objc_msgSend(v167, "count"), v140 = v167, v141))
    {
      if (v139)
      {
        v142 = objc_msgSend(v139, "count");
        v140 = v167;
        if (v142)
        {
          v143 = v167;
          v71 = (id)objc_msgSend(v167, "mutableCopy");
          objc_msgSend(v71, "addObjectsFromArray:", v139);
          v144 = v71;
          goto LABEL_261;
        }
      }
      v143 = v140;
      v145 = v140;
    }
    else
    {
      v143 = v140;
      v145 = v139;
    }
    v71 = v145;
LABEL_261:

    if (v146)
    return v71;
  }

LABEL_135:
  return 0;
}

void sub_18A33E774(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A33E78C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A33E7A4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A33E7B0);
}

id faultRowWithObjectID(uint64_t a1, NSSQLObjectFaultRequestContext *a2)
{
  NSSQLObjectFaultRequestContext *v3;
  NSSQLObjectFaultRequestContext *v4;
  NSSQLiteConnection *connection;
  const char *v6;
  id v7;
  NSError *error;

  v3 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](a2, a1);
  v4 = v3;
  if (v3)
    v3->_forConflictAnalysis = 1;
  if (a2)
    connection = a2->super._connection;
  else
    connection = 0;
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v3, connection);
  v7 = _executeNewRowValuesForObjectFaultRequest(v4);
  if (!v7)
  {
    if (v4)
    {
      error = v4->super._error;
      if (a2)
      {
LABEL_8:
        objc_setProperty_nonatomic(a2, v6, error, 40);
        v7 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      error = 0;
      if (a2)
        goto LABEL_8;
    }
    v7 = 0;
  }
LABEL_9:
  -[NSSQLStoreRequestContext setConnection:]((uint64_t)v4, 0);

  return v7;
}

void sub_18A33E878(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A33E898(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A33E830);
}

void sub_18A33EAA8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A33EAE4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A33EAD4);
  JUMPOUT(0x18A33EB00);
}

void sub_18A33EAF4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A33EA1CLL);
  }
  JUMPOUT(0x18A33EAD4);
}

BOOL ___performExhaustiveUniquenessConflictDetectionForSaveRequest_block_invoke(uint64_t a1, void *a2)
{
  return -[NSEntityDescription _hasUniqueProperties](objc_msgSend(a2, "entity"));
}

uint64_t _PFLogGetErrorLog()
{
  if (qword_1ECD8D828 != -1)
    dispatch_once(&qword_1ECD8D828, &__block_literal_global);
  return __pflogFaultLog;
}

void sub_18A341AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A341D50(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

NSBatchUpdateResult *_executeBatchUpdateRequest(_QWORD *a1, uint64_t *a2)
{
  sqlite3 **v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSBatchUpdateResult *v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  int v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint8_t v80[128];
  uint8_t buf[4];
  int v82;
  _BYTE v83[128];
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v67 = (void *)objc_msgSend(a1, "request");
  if (a1)
    v4 = (sqlite3 **)a1[3];
  else
    v4 = 0;
  v66 = objc_msgSend((id)objc_msgSend(a1, "request"), "_secureOperation");
  v64 = a2;
  if (a1 && (v5 = a1[1]) != 0)
    v6 = (*(unsigned __int8 *)(v5 + 193) >> 2) & 1;
  else
    v6 = 0;
  v7 = objc_msgSend(v67, "resultType");
  v8 = objc_msgSend((id)objc_msgSend(v67, "propertiesToUpdate"), "count");
  if (v8)
    v14 = &unk_1E1F4B2E0;
  else
    v14 = &unk_1E1F4B2B8;
  if (!a1 || !v8)
    goto LABEL_17;
  v15 = a1[12];
  if (!v15)
  {
    v14 = &unk_1E1F4B2E0;
LABEL_17:
    v18 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134030, v14);
    v62 = 0;
    v19 = 0;
    v63 = 1;
    v20 = 0;
    goto LABEL_74;
  }
  if (*(_BYTE *)(v15 + 40))
  {
    _NSCoreDataLog(6, (uint64_t)CFSTR("Short-circuiting batch update: impossible condition in where clause (2)"), v9, v10, (uint64_t)v14, v11, v12, v13, v61);
    v16 = objc_msgSend(v67, "resultType");
    if (v16 == 1)
    {
      v28 = objc_msgSend(MEMORY[0x1E0C99D20], "array");
    }
    else
    {
      if (v16 == 2)
      {
        v17 = &unk_1E1F4B840;
LABEL_37:
        v19 = -[NSBatchUpdateResult initWithResultType:andObject:]([NSBatchUpdateResult alloc], "initWithResultType:andObject:", objc_msgSend(v67, "resultType"), v17);
        v18 = 0;
        v20 = 0;
        v62 = 0;
        v63 = 1;
        goto LABEL_74;
      }
      v28 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
    }
    v17 = (void *)v28;
    goto LABEL_37;
  }
  if (v66)
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 1);
  v21 = a1[1];
  if (v21)
    objc_msgSend(*(id *)(v21 + 208), "lock");
  -[NSSQLiteConnection beginTransaction]((uint64_t)v4);
  if (v7 == 1)
    v22 = 1;
  else
    v22 = v6;
  v65 = v7;
  if (v22 == 1)
  {
    v23 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:]((uint64_t)a1, 0);
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v76, v84, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v77;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v77 != v25)
            objc_enumerationMutation(v23);
          -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(_QWORD **)(*((_QWORD *)&v76 + 1) + 8 * i));
          v27 = 1;
        }
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v76, v84, 16);
      }
      while (v24);
    }
    else
    {
      v27 = 0;
    }
    v22 = 1;
  }
  else
  {
    v27 = 0;
  }
  -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, (_QWORD *)v15);
  if (v4)
  {
    v29 = sqlite3_changes(v4[9]);
    if (v22)
      goto LABEL_43;
  }
  else
  {
    v29 = 0;
    if (v22)
    {
LABEL_43:
      v30 = (void *)-[NSSQLiteConnection gatherObjectIDsFromTable:]((uint64_t)v4, a1[11]);
      v31 = (uint64_t)v30;
      if (v6 && objc_msgSend(v30, "count"))
      {
        v32 = (void *)objc_msgSend((id)-[NSSQLiteConnection gatherHistoryChangesFromTable:]((uint64_t)v4, a1[11]), "valueForKey:", CFSTR("updates"));
        -[NSSQLiteConnection processUpdateRequest:withOIDs:forAttributes:]((uint64_t)v4, a1, v32, (void *)objc_msgSend((id)objc_msgSend(v67, "propertiesToUpdate"), "allKeys"));
        v33 = (void *)a1[9];
      }
      else
      {
        v33 = 0;
      }
      v34 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:]((uint64_t)a1, 1);
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v72, v83, 16);
      if (v35)
      {
        v36 = *(_QWORD *)v73;
        do
        {
          for (j = 0; j != v35; ++j)
          {
            if (*(_QWORD *)v73 != v36)
              objc_enumerationMutation(v34);
            -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(_QWORD **)(*((_QWORD *)&v72 + 1) + 8 * j));
          }
          v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v72, v83, 16);
        }
        while (v35);
      }
      v27 = 0;
      v62 = v31;
      goto LABEL_59;
    }
  }
  v33 = 0;
  v62 = 0;
LABEL_59:
  -[NSSQLiteConnection commitTransaction]((uint64_t)v4);
  v19 = (NSBatchUpdateResult *)v29;
  v38 = a1[1];
  if (v38 && *(_QWORD *)(v38 + 200))
  {
    if (v29)
    {
      v39 = objc_msgSend(v4, "registerCurrentQueryGenerationWithStore:");
      if ((_DWORD)v39)
      {
        v40 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Batch update failed to generate a post transaction query generation with error %d");
        _NSCoreDataLog(17, v40, v41, v42, v43, v44, v45, v46, v39);
        v47 = __pflogFaultLog;
        if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          v82 = v39;
          _os_log_fault_impl(&dword_18A253000, v47, OS_LOG_TYPE_FAULT, "CoreData: Batch update failed to generate a post transaction query generation with error %d", buf, 8u);
        }
      }
    }
    else if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)a1) >= 1)
    {
      _NSCoreDataLog(6, (uint64_t)CFSTR("Batch update did not affect any rows, not registering a query generation"), v48, v49, v50, v51, v52, v53, v61);
    }
  }
  if (v65 == 2)
    v62 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v19);
  if (!objc_msgSend(v67, "resultType"))
    v62 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](a1[3], v66, 0);
  v54 = a1[1];
  if (v54)
  {
    objc_msgSend(*(id *)(v54 + 208), "unlock");
    v55 = a1[1];
  }
  else
  {
    v55 = 0;
  }
  -[NSSQLCore _postChangeNotificationWithTransactionID:](v55, v33);
  v18 = 0;
  v63 = 0;
  v20 = v27 != 0;
LABEL_74:
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v4, 0);
  if (v20)
  {
    v56 = a1
        ? (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:]((uint64_t)a1, 1)
        : 0;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v68, v80, 16);
    if (v57)
    {
      v58 = *(_QWORD *)v69;
      do
      {
        for (k = 0; k != v57; ++k)
        {
          if (*(_QWORD *)v69 != v58)
            objc_enumerationMutation(v56);
          -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(_QWORD **)(*((_QWORD *)&v68 + 1) + 8 * k));
        }
        v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v68, v80, 16);
      }
      while (v57);
    }
  }
  if (v66)
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 0);
  if (v64 && v18)
    *v64 = v18;
  if ((v63 | 4) == 4)
  {
    if (v62)
      return -[NSBatchUpdateResult initWithResultType:andObject:]([NSBatchUpdateResult alloc], "initWithResultType:andObject:", objc_msgSend(v67, "resultType"), v62);
    else
      return 0;
  }
  return v19;
}

void sub_18A3430E4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15)
{
  if (a2)
  {
    if (a2 == 4 || a2 == 3)
    {
      objc_msgSend(objc_begin_catch(exc_buf), "errorObjectWithUserInfo:", 0);
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        objc_begin_catch(exc_buf);
        objc_exception_rethrow();
      }
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18A342F1CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3432E8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3432B8);
  }
  JUMPOUT(0x18A3431FCLL);
}

void sub_18A343338()
{
  objc_end_catch();
  JUMPOUT(0x18A3431E4);
}

id static NSManagedObjectContext.didChangeObjectsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(&one-time initialization token for didChangeObjectsNotification, (id *)&static NSManagedObjectContext.didChangeObjectsNotification);
}

id static NSManagedObjectContext.didSaveObjectsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(one-time initialization token for didSaveObjectsNotification, (id *)&static NSManagedObjectContext.didSaveObjectsNotification);
}

id static NSManagedObjectContext.didMergeChangesObjectIDsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(&one-time initialization token for didMergeChangesObjectIDsNotification, (id *)&static NSManagedObjectContext.didMergeChangesObjectIDsNotification);
}

uint64_t static NSPersistentStore.StoreType.sqlite.getter@<X0>(_QWORD *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for sqlite, &static NSPersistentStore.StoreType.sqlite, &qword_1EDF61C40, a1);
}

os_log_t ___pflogInitialize_block_invoke_6()
{
  os_log_t result;

  result = os_log_create("com.apple.coredata", "debug");
  qword_1ECD8D858 = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for sqlite()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.sqlite = result;
  unk_1EDF61C40 = v1;
  return result;
}

void sub_18A3462C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3461B4);
  }
  _Unwind_Resume(a1);
}

void sub_18A3462D0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3462EC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A3462F0);
  objc_terminate();
}

uint64_t one-time initialization function for didChangeObjectsNotification()
{
  uint64_t result;

  result = MEMORY[0x18D76A614](0xD00000000000002DLL, 0x800000018A50AC80);
  static NSManagedObjectContext.didChangeObjectsNotification = result;
  return result;
}

uint64_t one-time initialization function for didSaveObjectsNotification()
{
  uint64_t result;

  result = MEMORY[0x18D76A614](0xD00000000000002BLL, 0x800000018A50ACB0);
  static NSManagedObjectContext.didSaveObjectsNotification = result;
  return result;
}

uint64_t one-time initialization function for didMergeChangesObjectIDsNotification()
{
  uint64_t result;

  result = MEMORY[0x18D76A614](0xD00000000000003ALL, 0x800000018A50AC00);
  static NSManagedObjectContext.didMergeChangesObjectIDsNotification = result;
  return result;
}

void sub_18A346FD4(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + *(int *)(v3 + 540)));
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3470D0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18A3470E4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _sharedIMPL_addSet_core(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
  v8 = a1[4];
  if ((v8 & 0x200000) != 0)
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v7, 1, a3, a4);
  else
    objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v7, 1, a3);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  objc_msgSend(v15, "unionSet:", a3);
  if ((v8 & 0x200000) != 0)
    return _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v7);
  else
    return objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v7, 1, a3);
}

#error "18A348D74: call analysis failed (funcsize=45)"

uint64_t static NSPersistentStore.StoreType.sqlite.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;

  if (*a1 != -1)
    swift_once();
  v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  return swift_bridgeObjectRetain();
}

os_log_t ___pflogInitialize_block_invoke_2()
{
  os_log_t result;

  result = os_log_create("com.apple.coredata", "annotation");
  qword_1ECD8D838 = (uint64_t)result;
  return result;
}

void sub_18A34A4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18A34A6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A34A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, Class isa)
{
  void *v5;
  NSURL *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x18D76A614](*a1, a1[1]);
  if (a3)
    a3 = (void *)MEMORY[0x18D76A614](a2, a3);
  URL._bridgeToObjectiveC()(v9);
  v12 = v11;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v17[0] = 0;
  v13 = objc_msgSend(v5, sel_addPersistentStoreWithType_configuration_URL_options_error_, v10, a3, v12, isa, v17);

  if (v13)
  {
    v14 = v17[0];
  }
  else
  {
    v15 = v17[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13;
}

void sub_18A34B0D8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A34B108(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A34B070);
  }
  JUMPOUT(0x18A34B0FCLL);
}

#error "18A34B5C4: call analysis failed (funcsize=38)"

void sub_18A34B700(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

NSManagedObjectID_optional __swiftcall NSPersistentStoreCoordinator.managedObjectID(for:)(Swift::String a1)
{
  void *v1;
  id v2;
  objc_class *v3;
  Swift::Bool v4;
  objc_class *v5;
  Swift::String v6;
  NSManagedObjectID_optional result;

  v6 = a1;
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = (objc_class *)specialized String.withUTF8<A>(_:)(&v6._countAndFlagsBits, v2);

  swift_bridgeObjectRelease();
  v5 = v3;
  result.value.super.isa = v5;
  result.is_nil = v4;
  return result;
}

void static NSPersistentStoreCoordinator.registerStoreClass(_:type:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  void *v5;
  id v6;

  v2 = *a2;
  v3 = a2[1];
  if (a1)
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  else
    ObjCClassFromMetadata = 0;
  v5 = (void *)swift_getObjCClassFromMetadata();
  v6 = (id)MEMORY[0x18D76A614](v2, v3);
  objc_msgSend(v5, sel_registerStoreClass_forStoreType_, ObjCClassFromMetadata, v6);

}

id static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)(_QWORD *a1, uint64_t a2, Class isa)
{
  void *v4;
  NSURL *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x18D76A614](*a1, a1[1]);
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13[0] = 0;
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_metadataForPersistentStoreOfType_URL_options_error_, v4, v7, isa, v13);

  v9 = v13[0];
  if (v8)
  {
    v10 = (id)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v9;

  }
  else
  {
    v10 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v10;
}

id static NSPersistentStoreCoordinator.setMetadata(_:type:at:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, Class isa)
{
  uint64_t v5;
  uint64_t v6;
  NSDictionary v7;
  void *v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  if (a1)
    v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v7.super.isa = 0;
  v8 = (void *)MEMORY[0x18D76A614](v5, v6);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15[0] = 0;
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_setMetadata_forPersistentStoreOfType_URL_options_error_, v7.super.isa, v8, v11, isa, v15);

  if (v12)
    return v15[0];
  v14 = v15[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id NSPersistentStoreCoordinator.migratePersistentStore(_:to:options:type:)(uint64_t a1, uint64_t a2, Class isa, uint64_t *a4)
{
  void *v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v17;
  NSURL *v18;

  v5 = v4;
  v18 = (NSURL *)*MEMORY[0x1E0C80C00];
  v8 = *a4;
  v9 = a4[1];
  URL._bridgeToObjectiveC()(v18);
  v11 = v10;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v12 = (void *)MEMORY[0x18D76A614](v8, v9);
  v17 = 0;
  v13 = objc_msgSend(v5, sel_migratePersistentStore_toURL_options_withType_error_, a1, v11, isa, v12, &v17);

  if (v13)
  {
    v14 = v17;
  }
  else
  {
    v15 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13;
}

id NSPersistentStoreCoordinator.destroyPersistentStore(at:type:options:)(uint64_t a1, uint64_t *a2, Class isa)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v13;
  id v14;
  NSURL *v15;

  v4 = v3;
  v15 = (NSURL *)*MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  URL._bridgeToObjectiveC()(v15);
  v9 = v8;
  v10 = (void *)MEMORY[0x18D76A614](v6, v7);
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14 = 0;
  v11 = objc_msgSend(v4, sel_destroyPersistentStoreAtURL_withType_options_error_, v9, v10, isa, &v14);

  if (v11)
    return v14;
  v13 = v14;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id NSPersistentStoreCoordinator.replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:)(uint64_t a1, Class isa, uint64_t a3, Class a4, uint64_t *a5)
{
  void *v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  NSURL *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  id v19;
  id v20;
  NSURL *v21;

  v6 = v5;
  v21 = (NSURL *)*MEMORY[0x1E0C80C00];
  v9 = *a5;
  v10 = a5[1];
  URL._bridgeToObjectiveC()(v21);
  v13 = v12;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  URL._bridgeToObjectiveC()(v11);
  v15 = v14;
  if (a4)
    a4 = Dictionary._bridgeToObjectiveC()().super.isa;
  v16 = (void *)MEMORY[0x18D76A614](v9, v10);
  v20 = 0;
  v17 = objc_msgSend(v6, sel_replacePersistentStoreAtURL_destinationOptions_withPersistentStoreFromURL_sourceOptions_storeType_error_, v13, isa, v15, a4, v16, &v20);

  if (v17)
    return v20;
  v19 = v20;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void NSPersistentStoreCoordinator.performAndWait<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t (*v29)();
  _QWORD *v30;
  uint64_t *v31;
  _QWORD aBlock[6];
  uint64_t v33;

  v22 = a4;
  v25 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v25 - 8);
  v9 = MEMORY[0x1E0C80A78](v25);
  v24 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - v11;
  v23 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))((char *)&v21 - v11, 1, 1, a3);
  v33 = 0;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v27 = a3;
  v28 = v12;
  v29 = partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error);
  v30 = v13;
  v31 = &v33;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_performAndWait<A>(fn:execute:rescue:);
  *(_QWORD *)(v14 + 24) = &v26;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor;
  v15 = _Block_copy(aBlock);
  v16 = v4;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_performBlockAndWait_, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v15 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:

    __break(1u);
    return;
  }
  if (v33)
  {
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v25);

    return;
  }
  v19 = v24;
  v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v12, v25);
  v20 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, a3) == 1)
    goto LABEL_10;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v22, v19, a3);

}

uint64_t NSPersistentStoreCoordinator.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  v6 = type metadata accessor for Optional();
  v5[21] = v6;
  v5[22] = *(_QWORD *)(v6 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NSPersistentStoreCoordinator.perform<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[26];
  v2 = *(_QWORD *)(v0[19] - 8);
  v0[27] = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 56))(v1, 1, 1);
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;

  v1 = v0;
  v2 = v0[24];
  v3 = (void *)v0[20];
  v4 = v1[18];
  v5 = v1[19];
  v6 = v1[17];
  v1[7] = v2;
  v1[2] = v1;
  v1[3] = NSPersistentStoreCoordinator.perform<A>(_:);
  v7 = swift_continuation_init();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v6;
  v1[10] = MEMORY[0x1E0C809B0];
  v1 += 10;
  v8[4] = v4;
  v8[5] = v7;
  v1[4] = partial apply for closure #1 in closure #1 in NSPersistentStoreCoordinator._rethrowsHelper_perform<A>(_:rescue:);
  v1[5] = v8;
  v1[1] = 1107296256;
  v1[2] = thunk for @escaping @callee_guaranteed () -> ();
  v1[3] = &block_descriptor_9;
  v9 = _Block_copy(v1);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_performBlock_, v9);
  _Block_release(v9);
  return swift_continuation_await();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 224) = v2;
  if (v2)
  {
    swift_willThrow();
  }
  else
  {
    v4 = v1[24];
    v3 = v1[25];
    v5 = v1[21];
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[22] + 32);
    v1[29] = v6;
    v6(v3, v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 152);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v2, v7);
  v1(v2, v4, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v2, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 128);
    v9(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 168));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v12, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSManagedObjectContextConcurrencyType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSAttributeType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSManagedObjectContextConcurrencyType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSAttributeType(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NSAttributeType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NSAttributeType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x18D76A62C](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x18D76A62CLL);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x18D76A62C]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x18D76A650](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

id specialized String.withUTF8<A>(_:)(uint64_t *a1, id a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  id result;
  uint64_t v12;
  _QWORD v13[2];

  v3 = *a1;
  v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v13[0] = v3;
    v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v7 = objc_msgSend(a2, sel_managedObjectIDFromUTF8String_length_, v13, HIBYTE(v4) & 0xF);
    return v7;
  }
  v3 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v10;
  v4 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (id)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
LABEL_5:
    v7 = objc_msgSend(a2, sel_managedObjectIDFromUTF8String_length_, v5, v6);
    return v7;
  }
  result = (id)_StringObject.sharedUTF8.getter();
  if (result)
  {
    v5 = result;
    v6 = v12;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_18A34D184()
{
  return swift_deallocObject();
}

uint64_t sub_18A34D194()
{
  return swift_deallocObject();
}

uint64_t sub_18A34D1A4()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for NSAttributeType(uint64_t a1)
{
  type metadata accessor for NSAttributeType(a1, &lazy cache variable for type metadata for NSAttributeType);
}

void type metadata accessor for NSManagedObjectContextConcurrencyType(uint64_t a1)
{
  type metadata accessor for NSAttributeType(a1, &lazy cache variable for type metadata for NSManagedObjectContextConcurrencyType);
}

void type metadata accessor for NSAttributeType(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Equatable in NSManagedObjectContextConcurrencyType()
{
  return lazy protocol witness table accessor for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType(&lazy protocol witness table cache variable for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType, (uint64_t (*)(uint64_t))type metadata accessor for NSManagedObjectContextConcurrencyType, (uint64_t)&protocol conformance descriptor for NSManagedObjectContextConcurrencyType);
}

uint64_t base witness table accessor for Equatable in NSAttributeType()
{
  return lazy protocol witness table accessor for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType((unint64_t *)&lazy protocol witness table cache variable for type NSAttributeType and conformance NSAttributeType, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributeType, (uint64_t)&protocol conformance descriptor for NSAttributeType);
}

uint64_t lazy protocol witness table accessor for type NSManagedObjectContextConcurrencyType and conformance NSManagedObjectContextConcurrencyType(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x18D76BF40](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id NSMigrationManager.migrateStore(from:type:options:mapping:to:type:options:)(uint64_t a1, uint64_t *a2, Class isa, uint64_t a4, uint64_t a5, uint64_t *a6, Class a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSURL *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  id v22;
  void *v23;
  id v25;
  NSURL *v26;

  v26 = (NSURL *)*MEMORY[0x1E0C80C00];
  v10 = *a2;
  v9 = a2[1];
  v11 = *a6;
  v12 = a6[1];
  URL._bridgeToObjectiveC()(v26);
  v14 = v13;
  v16 = (void *)MEMORY[0x18D76A614](v10, v9);
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  URL._bridgeToObjectiveC()(v15);
  v18 = v17;
  v19 = (void *)MEMORY[0x18D76A614](v11, v12);
  if (a7)
    a7 = Dictionary._bridgeToObjectiveC()().super.isa;
  v25 = 0;
  v20 = objc_msgSend(v23, sel_migrateStoreFromURL_type_options_withMappingModel_toDestinationURL_destinationType_destinationOptions_error_, v14, v16, isa, a4, v18, v19, a7, &v25);

  if (v20)
    return v25;
  v22 = v25;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id NSExpressionDescription.resultType.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id result;

  result = objc_msgSend(v1, sel_expressionResultType);
  *a1 = result;
  return result;
}

id NSExpressionDescription.resultType.setter(_QWORD *a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setExpressionResultType_, *a1);
}

id (*NSExpressionDescription.resultType.modify(_QWORD *a1))(uint64_t a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = objc_msgSend(v1, sel_expressionResultType);
  return NSExpressionDescription.resultType.modify;
}

id NSExpressionDescription.resultType.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), sel_setExpressionResultType_, *(_QWORD *)a1);
}

id sub_18A34D524@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_expressionResultType);
  *a2 = result;
  return result;
}

id sub_18A34D554(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setExpressionResultType_, *a1);
}

NSLightweightMigrationStage __swiftcall NSLightweightMigrationStage.init(_:)(Swift::OpaquePointer a1)
{
  id v1;
  Class isa;
  objc_class *v3;
  NSString *v4;
  NSArray *v5;
  NSMigrationStage *v6;
  objc_class *v7;
  NSLightweightMigrationStage result;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = (objc_class *)objc_msgSend(v1, sel_initWithVersionChecksums_, isa);

  v7 = v3;
  result._subsequentStage = v6;
  result._versionChecksums = v5;
  result.super._label = v4;
  result.super.super.isa = v7;
  return result;
}

NSStagedMigrationManager __swiftcall NSStagedMigrationManager.init(_:)(Swift::OpaquePointer a1)
{
  id v1;
  Class isa;
  objc_class *v3;
  NSArray *v4;
  NSPersistentContainer *v5;
  objc_class *v6;
  NSStagedMigrationManager result;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for NSMigrationStage();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = (objc_class *)objc_msgSend(v1, sel_initWithMigrationStages_, isa);

  v6 = v3;
  result._container = v5;
  result._stages = v4;
  result.super.isa = v6;
  return result;
}

unint64_t type metadata accessor for NSMigrationStage()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMigrationStage;
  if (!lazy cache variable for type metadata for NSMigrationStage)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMigrationStage);
  }
  return result;
}

char *NSManagedObjectContext.fetch(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  char *result;
  char *v8;
  unint64_t v9;
  id v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v2 = objc_msgSend(v1, sel_executeRequest_error_, a1, v11);
  v3 = (char *)v11[0];
  if (!v2)
  {
    v10 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v3;
  }
  v4 = v2;
  objc_opt_self();
  v5 = (void *)swift_dynamicCastObjCClassUnconditional();
  v6 = v3;
  result = (char *)objc_msgSend(v5, sel_finalResult);
  if (result)
  {
    v8 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequestResult);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = specialized _arrayForceCast<A, B>(_:)(v9);
    swift_bridgeObjectRelease();
    return v3;
  }
  __break(1u);
  return result;
}

char *specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return (char *)v3;
  v12 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v12;
      do
      {
        MEMORY[0x18D76A6BC](v5, a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequestResult);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          v3 = v12;
        }
        ++v5;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
      while (v2 != v5);
    }
    else
    {
      v8 = a1 + 32;
      v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSFetchRequestResult);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v10 = *(_QWORD *)(v3 + 16);
        v9 = *(_QWORD *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
          v3 = v12;
        }
        *(_QWORD *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t one-time initialization function for willSaveObjectsNotification()
{
  uint64_t result;

  result = MEMORY[0x18D76A614](0xD00000000000002CLL, 0x800000018A50ACE0);
  static NSManagedObjectContext.willSaveObjectsNotification = result;
  return result;
}

id static NSManagedObjectContext.willSaveObjectsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(one-time initialization token for willSaveObjectsNotification, (id *)&static NSManagedObjectContext.willSaveObjectsNotification);
}

uint64_t one-time initialization function for didSaveObjectIDsNotification()
{
  uint64_t result;

  result = MEMORY[0x18D76A614](0xD000000000000032, 0x800000018A50AC40);
  static NSManagedObjectContext.didSaveObjectIDsNotification = result;
  return result;
}

id static NSManagedObjectContext.didSaveObjectIDsNotification.getter()
{
  return static NSManagedObjectContext.willSaveObjectsNotification.getter(one-time initialization token for didSaveObjectIDsNotification, (id *)&static NSManagedObjectContext.didSaveObjectIDsNotification);
}

uint64_t NSManagedObjectContext.NotificationKey.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NSManagedObjectContext.NotificationKey.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  v7 = 12;
  if (v5 < 0xC)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t NSManagedObjectContext.NotificationKey.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18A34DB30 + 4 * byte_18A509660[*v0]))(0xD000000000000012, 0x800000018A50AB00);
}

uint64_t sub_18A34DB30()
{
  return 0x6164696C61766E69;
}

uint64_t sub_18A34DBC0@<X0>(uint64_t a1@<X8>)
{
  return a1 + 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSManagedObjectContext.NotificationKey()
{
  return specialized == infix<A>(_:_:)();
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = NSManagedObjectContext.NotificationKey.rawValue.getter();
  v2 = v1;
  if (v0 == NSManagedObjectContext.NotificationKey.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSManagedObjectContext.NotificationKey()
{
  Hasher.init(_seed:)();
  NSManagedObjectContext.NotificationKey.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSManagedObjectContext.NotificationKey()
{
  NSManagedObjectContext.NotificationKey.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSManagedObjectContext.NotificationKey()
{
  Hasher.init(_seed:)();
  NSManagedObjectContext.NotificationKey.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSManagedObjectContext.NotificationKey@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return NSManagedObjectContext.NotificationKey.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSManagedObjectContext.NotificationKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NSManagedObjectContext.NotificationKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t NSManagedObjectContext.ConcurrencyType.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NSManagedObjectContext.ConcurrencyType.privateQueue.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static NSManagedObjectContext.ConcurrencyType.mainQueue.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t NSManagedObjectContext.ConcurrencyType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t NSManagedObjectContext.ConcurrencyType.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*NSManagedObjectContext.ConcurrencyType.rawValue.modify())()
{
  return NSManagedObjectContext.ConcurrencyType.rawValue.modify;
}

BOOL static NSManagedObjectContext.ScheduledTaskType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSManagedObjectContext.ScheduledTaskType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NSManagedObjectContext.ScheduledTaskType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSManagedObjectContext.ScheduledTaskType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSManagedObjectContext.ScheduledTaskType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSManagedObjectContext.ScheduledTaskType()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSManagedObjectContext.ScheduledTaskType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id NSManagedObjectContext.init(_:)(_QWORD *a1)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithConcurrencyType_, *a1);
}

uint64_t sub_18A34DFC4()
{
  return swift_deallocObject();
}

uint64_t sub_18A34DFD4()
{
  return swift_deallocObject();
}

uint64_t sub_18A34E340()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18A34E364()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t closure #1 in NSManagedObjectContext.perform<A>(schedule:_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[32];

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v16[-v10];
  v12 = swift_projectBox();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a1;
  v13[4] = a2;
  v14 = swift_retain();
  a1(v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v11, 0, 1, a5);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 40))(v12, v11, v8);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_18A34E4F4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSManagedObjectContext.perform<A>(schedule:_:)()
{
  uint64_t v0;

  return closure #1 in NSManagedObjectContext.perform<A>(schedule:_:)(*(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

uint64_t sub_18A34E538()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey)
  {
    result = MEMORY[0x18D76BF40](&protocol conformance descriptor for NSManagedObjectContext.NotificationKey, &type metadata for NSManagedObjectContext.NotificationKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext.NotificationKey and conformance NSManagedObjectContext.NotificationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType)
  {
    result = MEMORY[0x18D76BF40](&protocol conformance descriptor for NSManagedObjectContext.ConcurrencyType, &type metadata for NSManagedObjectContext.ConcurrencyType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext.ConcurrencyType and conformance NSManagedObjectContext.ConcurrencyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType)
  {
    result = MEMORY[0x18D76BF40](&protocol conformance descriptor for NSManagedObjectContext.ScheduledTaskType, &type metadata for NSManagedObjectContext.ScheduledTaskType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext.ScheduledTaskType and conformance NSManagedObjectContext.ScheduledTaskType);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NSManagedObjectContext.NotificationKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NSManagedObjectContext.NotificationKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_18A34E708 + 4 * byte_18A509671[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_18A34E73C + 4 * byte_18A50966C[v4]))();
}

uint64_t sub_18A34E73C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A34E744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A34E74CLL);
  return result;
}

uint64_t sub_18A34E758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A34E760);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_18A34E764(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A34E76C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for NSManagedObjectContext.NotificationKey(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for NSManagedObjectContext.NotificationKey(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NSManagedObjectContext.NotificationKey()
{
  return &type metadata for NSManagedObjectContext.NotificationKey;
}

ValueMetadata *type metadata accessor for NSManagedObjectContext.ConcurrencyType()
{
  return &type metadata for NSManagedObjectContext.ConcurrencyType;
}

uint64_t getEnumTagSinglePayload for NSManagedObjectContext.ScheduledTaskType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NSManagedObjectContext.ScheduledTaskType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18A34E884 + 4 * byte_18A50967B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18A34E8B8 + 4 * byte_18A509676[v4]))();
}

uint64_t sub_18A34E8B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A34E8C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18A34E8C8);
  return result;
}

uint64_t sub_18A34E8D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18A34E8DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18A34E8E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A34E8E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18A34E8F4()
{
  swift_release();
  return swift_deallocObject();
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t static CocoaError.Code.coreData.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.managedObjectValidationError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationMultipleErrorsError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationMissingMandatoryPropertyError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationRelationshipLacksMinimumCountError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationRelationshipExceedsMaximumCountError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationRelationshipDeniedDeleteError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationNumberTooLargeError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationNumberTooSmallError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationDateTooLateError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationDateTooSoonError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationInvalidDateError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationStringTooLongError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationStringTooShortError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.validationStringPatternMatchingError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.managedObjectContextLockingError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreCoordinatorLockingError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.managedObjectReferentialIntegrityError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.managedObjectExternalRelationshipError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.managedObjectMergeError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.managedObjectConstraintMergeError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreInvalidTypeError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreTypeMismatchError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreIncompatibleSchemaError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreSaveError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreIncompleteSaveError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreSaveConflictsError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreOperationError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreOpenError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreTimeoutError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreUnsupportedRequestTypeError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.persistentStoreIncompatibleVersionHashError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.migrationError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.migrationCancelledError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.migrationMissingSourceModelError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.migrationMissingMappingModelError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.migrationManagerSourceStoreError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.migrationManagerDestinationStoreError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.entityMigrationPolicyError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.sqliteError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.inferredMappingModelError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t static CocoaError.Code.externalRecordImportError.getter()
{
  return CocoaError.Code.init(rawValue:)();
}

uint64_t CocoaError.validationObject.getter@<X0>(_OWORD *a1@<X8>)
{
  return CocoaError.validationObject.getter(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  v2 = _BridgedStoredNSError.userInfo.getter();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v5, (uint64_t)a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type CocoaError and conformance CocoaError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    v1 = type metadata accessor for CocoaError();
    result = MEMORY[0x18D76BF40](MEMORY[0x1E0CADE40], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

uint64_t CocoaError.validationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  v0 = _BridgedStoredNSError.userInfo.getter();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v0 + 16) || (v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(_QWORD *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v7);
    return 0;
  }
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

uint64_t CocoaError.validationPredicate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  v0 = _BridgedStoredNSError.userInfo.getter();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v0 + 16) || (v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v2), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v0 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v7);
    return 0;
  }
  type metadata accessor for NSPredicate();
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

uint64_t CocoaError.validationValue.getter@<X0>(_OWORD *a1@<X8>)
{
  return CocoaError.validationObject.getter(a1);
}

uint64_t CocoaError.affectedStores.getter()
{
  return CocoaError.affectedStores.getter((uint64_t)&NSAffectedStoresErrorKey, &demangling cache variable for type metadata for [Swift.AnyObject]);
}

uint64_t CocoaError.affectedObjects.getter()
{
  return CocoaError.affectedStores.getter((uint64_t)&NSAffectedObjectsErrorKey, &demangling cache variable for type metadata for [Swift.AnyObject]);
}

uint64_t CocoaError.persistentStoreSaveConflicts.getter()
{
  return CocoaError.affectedStores.getter((uint64_t)&NSPersistentStoreSaveConflictsErrorKey, &demangling cache variable for type metadata for [NSMergeConflict]);
}

uint64_t CocoaError.affectedStores.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  type metadata accessor for CocoaError();
  lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
  v3 = _BridgedStoredNSError.userInfo.getter();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v3 + 16) || (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v10);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if (swift_dynamicCast())
    return v9;
  else
    return 0;
}

void static CocoaError.ManagedObjectValidationError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationMultipleErrorsError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationMissingMandatoryPropertyError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationRelationshipLacksMinimumCountError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationRelationshipExceedsMaximumCountError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationRelationshipDeniedDeleteError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationNumberTooLargeError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationNumberTooSmallError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationDateTooLateError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationDateTooSoonError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationInvalidDateError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationStringTooLongError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationStringTooShortError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ValidationStringPatternMatchingError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ManagedObjectContextLockingError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreCoordinatorLockingError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ManagedObjectReferentialIntegrityError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ManagedObjectExternalRelationshipError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ManagedObjectMergeError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ManagedObjectConstraintMergeError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreInvalidTypeError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreTypeMismatchError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreIncompatibleSchemaError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreSaveError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreIncompleteSaveError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreSaveConflictsError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.CoreDataError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreOperationError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreOpenError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreTimeoutError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreUnsupportedRequestTypeError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.PersistentStoreIncompatibleVersionHashError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.MigrationError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.MigrationCancelledError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.MigrationMissingSourceModelError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.MigrationMissingMappingModelError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.MigrationManagerSourceStoreError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.MigrationManagerDestinationStoreError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.EntityMigrationPolicyError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.SQLiteError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.InferredMappingModelError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static CocoaError.ExternalRecordImportError.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSPredicate()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSPredicate;
  if (!lazy cache variable for type metadata for NSPredicate)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

id _PFExampleClass.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _PFExampleClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _PFExampleClass()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for indexDidUpdateNotification()
{
  uint64_t result;

  result = MEMORY[0x18D76A614](0xD000000000000039, 0x800000018A50ADC0);
  static NSCoreDataCoreSpotlightDelegate.indexDidUpdateNotification = result;
  return result;
}

id static NSCoreDataCoreSpotlightDelegate.indexDidUpdateNotification.getter()
{
  if (one-time initialization token for indexDidUpdateNotification != -1)
    swift_once();
  return (id)static NSCoreDataCoreSpotlightDelegate.indexDidUpdateNotification;
}

uint64_t NSPersistentStore.StoreType.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSPersistentStore.StoreType.rawValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NSPersistentStore.StoreType.rawValue.modify())()
{
  return NSManagedObjectContext.ConcurrencyType.rawValue.modify;
}

uint64_t NSPersistentStore.StoreType.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSPersistentStore.StoreType()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSPersistentStore.StoreType()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSPersistentStore.StoreType()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSPersistentStore.StoreType(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NSPersistentStore.StoreType@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSPersistentStore.StoreType@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for binary()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.binary = result;
  *(_QWORD *)algn_1EDF61E98 = v1;
  return result;
}

uint64_t static NSPersistentStore.StoreType.binary.getter@<X0>(_QWORD *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for binary, &static NSPersistentStore.StoreType.binary, (uint64_t *)algn_1EDF61E98, a1);
}

uint64_t one-time initialization function for inMemory()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.inMemory = result;
  *(_QWORD *)algn_1EDF61EA8 = v1;
  return result;
}

uint64_t static NSPersistentStore.StoreType.inMemory.getter@<X0>(_QWORD *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for inMemory, &static NSPersistentStore.StoreType.inMemory, (uint64_t *)algn_1EDF61EA8, a1);
}

uint64_t one-time initialization function for xpc()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSPersistentStore.StoreType.xpc = result;
  *(_QWORD *)algn_1EDF61EB8 = v1;
  return result;
}

uint64_t static NSPersistentStore.StoreType.xpc.getter@<X0>(_QWORD *a1@<X8>)
{
  return static NSPersistentStore.StoreType.sqlite.getter(&one-time initialization token for xpc, &static NSPersistentStore.StoreType.xpc, (uint64_t *)algn_1EDF61EB8, a1);
}

unint64_t lazy protocol witness table accessor for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType;
  if (!lazy protocol witness table cache variable for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType)
  {
    result = MEMORY[0x18D76BF40](&protocol conformance descriptor for NSPersistentStore.StoreType, &type metadata for NSPersistentStore.StoreType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentStore.StoreType and conformance NSPersistentStore.StoreType);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for NSPersistentStore.StoreType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NSPersistentStore.StoreType(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for NSPersistentStore.StoreType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSPersistentStore.StoreType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSPersistentStore.StoreType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

id NSFetchRequest.__allocating_init(entityName:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)MEMORY[0x18D76A614](a1, a2);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithEntityName_, v5);

  return v6;
}

id NSManagedObject.objectWillChange.getter()
{
  void *v0;
  id result;
  uint64_t v2;
  __int128 v3;
  _OWORD v4[2];

  if (objc_msgSend(v0, sel_bindableObjectPublisher))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v4);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
    outlined destroy of Any?((uint64_t)v4);
    type metadata accessor for ObservableObjectPublisher();
    swift_allocObject();
    objc_msgSend(v0, sel_setBindableObjectPublisher_, ObservableObjectPublisher.init()());
    swift_release();
  }
  result = objc_msgSend(v0, sel_bindableObjectPublisher);
  if (result)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v3, v4);
    type metadata accessor for ObservableObjectPublisher();
    swift_dynamicCast();
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id protocol witness for ObservableObject.objectWillChange.getter in conformance NSManagedObject@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = NSManagedObject.objectWillChange.getter();
  *a1 = result;
  return result;
}

double NSManagedObject.subscript.getter@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  void *v3;
  id v4;
  double result;

  v3 = (void *)MEMORY[0x18D76A614]();
  v4 = objc_msgSend(v1, sel_valueForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double key path getter for NSManagedObject.subscript(_:) : NSManagedObject@<D0>(void **a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  double result;

  v4 = *a1;
  v5 = (void *)MEMORY[0x18D76A614](*a2, a2[1]);
  v6 = objc_msgSend(v4, sel_valueForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t key path setter for NSManagedObject.subscript(_:) : NSManagedObject(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];

  v4 = *a3;
  v3 = a3[1];
  outlined init with copy of Any?(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return NSManagedObject.subscript.setter((uint64_t)v6, v4, v3);
}

uint64_t NSManagedObject.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[3];
  uint64_t v16;

  outlined init with copy of Any?(a1, (uint64_t)v15);
  v7 = v16;
  if (v16)
  {
    v8 = __swift_project_boxed_opaque_existential_0(v15, v16);
    v9 = *(_QWORD *)(v7 - 8);
    MEMORY[0x1E0C80A78](v8);
    v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  }
  else
  {
    v12 = 0;
  }
  v13 = (void *)MEMORY[0x18D76A614](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setValue_forKey_, v12, v13);
  swift_unknownObjectRelease();

  return outlined destroy of Any?(a1);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void (*NSManagedObject.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  void *v3;
  void *v4;
  char *v8;
  _OWORD *v9;
  void *v10;
  id v11;

  v4 = v3;
  v8 = (char *)malloc(0x58uLL);
  *a1 = v8;
  v9 = v8 + 32;
  *((_QWORD *)v8 + 9) = a3;
  *((_QWORD *)v8 + 10) = v4;
  *((_QWORD *)v8 + 8) = a2;
  v10 = (void *)MEMORY[0x18D76A614](a2, a3);
  v11 = objc_msgSend(v4, sel_valueForKey_, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *v9 = 0u;
    *((_OWORD *)v8 + 3) = 0u;
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v8);
  return NSManagedObject.subscript.modify;
}

void NSManagedObject.subscript.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[9];
    v4 = v2[8];
    outlined init with copy of Any?(*a1, (uint64_t)(v2 + 4));
    swift_bridgeObjectRetain();
    NSManagedObject.subscript.setter((uint64_t)(v2 + 4), v4, v3);
    outlined destroy of Any?((uint64_t)v2);
  }
  else
  {
    v5 = v2[9];
    v6 = v2[8];
    swift_bridgeObjectRetain();
    NSManagedObject.subscript.setter((uint64_t)v2, v6, v5);
  }
  free(v2);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in NSManagedObject()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_18A350F18()
{
  return 0;
}

void __swiftcall NSCustomMigrationStage.init(migratingFrom:to:)(NSCustomMigrationStage *__return_ptr retstr, NSManagedObjectModelReference *migratingFrom, NSManagedObjectModelReference *to)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCurrentModelReference_nextModelReference_, migratingFrom, to);

}

uint64_t (*NSCustomMigrationStage.willMigrateHandler.getter())(uint64_t a1, uint64_t a2)
{
  void *v0;
  uint64_t (*result)(uint64_t, uint64_t);
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  result = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend(v0, sel_willMigrateHandler);
  if (result)
  {
    v2 = result;
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    *(_QWORD *)(v4 + 24) = v3;
    return partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  return result;
}

_QWORD *key path getter for NSCustomMigrationStage.willMigrateHandler : NSCustomMigrationStage@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *);

  result = objc_msgSend(*a1, sel_willMigrateHandler);
  if (result)
  {
    v4 = result;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    *(_QWORD *)(v6 + 24) = v5;
    result = (_QWORD *)swift_allocObject();
    result[2] = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
    result[3] = v6;
    v7 = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)partial apply;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

id key path setter for NSCustomMigrationStage.willMigrateHandler : NSCustomMigrationStage(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error);
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  _sxq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySo24NSStagedMigrationManagerCSo08NSCustomC5StageCytIsegnnrzo_SgWOy(v1);
  return NSCustomMigrationStage.willMigrateHandler.setter((uint64_t)v4, v3);
}

id NSCustomMigrationStage.willMigrateHandler.setter(uint64_t a1, uint64_t a2)
{
  return NSCustomMigrationStage.willMigrateHandler.setter(a1, a2, (uint64_t)&unk_1E1EDCC90, (uint64_t)closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply, (uint64_t)&block_descriptor_1, (SEL *)&selRef_setWillMigrateHandler_);
}

uint64_t sub_18A351164()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter(a1, a2);
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(a1, a2, 0);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t (*v7)(id, id, uint64_t);
  id v8;
  id v9;

  v7 = *(uint64_t (**)(id, id, uint64_t))(a1 + 32);
  swift_retain();
  v8 = a2;
  v9 = a3;
  LOBYTE(a4) = v7(v8, v9, a4);
  swift_release();

  return a4 & 1;
}

void (*NSCustomMigrationStage.willMigrateHandler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  void *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = v1;
  v4 = malloc(0x48uLL);
  *a1 = v4;
  v4[8] = v2;
  v5 = objc_msgSend(v2, sel_willMigrateHandler);
  if (v5)
  {
    v6 = v5;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    v5[3] = v7;
    v8 = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  else
  {
    v8 = 0;
  }
  v4[6] = v8;
  v4[7] = v5;
  return NSCustomMigrationStage.willMigrateHandler.modify;
}

void NSCustomMigrationStage.willMigrateHandler.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v5 = v2[7];
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v3;
      *(_QWORD *)(v6 + 24) = v5;
      v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
      v2[5] = v6;
      *v2 = MEMORY[0x1E0C809B0];
      v2[1] = 1107296256;
      v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
      v2[3] = &block_descriptor_13;
      v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
      objc_msgSend(v4, sel_setWillMigrateHandler_, v7);
      _Block_release(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)a1 + 64), sel_setWillMigrateHandler_, 0);
    }
    v11 = v2[6];
  }
  else
  {
    if (!v3)
    {
      objc_msgSend(*(id *)(*(_QWORD *)a1 + 64), sel_setWillMigrateHandler_, 0);
      goto LABEL_10;
    }
    v8 = v2[7];
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v8;
    v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
    v2[5] = v9;
    *v2 = MEMORY[0x1E0C809B0];
    v2[1] = 1107296256;
    v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v2[3] = &block_descriptor_20;
    v10 = _Block_copy(v2);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_setWillMigrateHandler_, v10);
    _Block_release(v10);
    v11 = v3;
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
LABEL_10:
  free(v2);
}

uint64_t sub_18A3514B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t (*NSCustomMigrationStage.didMigrateHandler.getter())(uint64_t a1, uint64_t a2)
{
  void *v0;
  uint64_t (*result)(uint64_t, uint64_t);
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  result = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend(v0, sel_didMigrateHandler);
  if (result)
  {
    v2 = result;
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    *(_QWORD *)(v4 + 24) = v3;
    return partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  return result;
}

_QWORD *key path getter for NSCustomMigrationStage.didMigrateHandler : NSCustomMigrationStage@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *);

  result = objc_msgSend(*a1, sel_didMigrateHandler);
  if (result)
  {
    v4 = result;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    *(_QWORD *)(v6 + 24) = v5;
    result = (_QWORD *)swift_allocObject();
    result[2] = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
    result[3] = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error);
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

id key path setter for NSCustomMigrationStage.didMigrateHandler : NSCustomMigrationStage(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error);
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  _sxq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySo24NSStagedMigrationManagerCSo08NSCustomC5StageCytIsegnnrzo_SgWOy(v1);
  return NSCustomMigrationStage.didMigrateHandler.setter((uint64_t)v4, v3);
}

id NSCustomMigrationStage.didMigrateHandler.setter(uint64_t a1, uint64_t a2)
{
  return NSCustomMigrationStage.willMigrateHandler.setter(a1, a2, (uint64_t)&unk_1E1EDCDA8, (uint64_t)partial apply for closure #1 in NSCustomMigrationStage.didMigrateHandler.setter, (uint64_t)&block_descriptor_41, (SEL *)&selRef_setDidMigrateHandler_);
}

id NSCustomMigrationStage.willMigrateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  void *v6;
  void *v8;
  uint64_t v13;
  void *v14;
  _QWORD v16[6];

  v8 = v6;
  if (!a1)
    return objc_msgSend(v6, *a6, 0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  v16[4] = a4;
  v16[5] = v13;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1107296256;
  v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
  v16[3] = a5;
  v14 = _Block_copy(v16);
  swift_retain();
  swift_release();
  objc_msgSend(v8, *a6, v14);
  _Block_release(v14);
  return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
}

uint64_t closure #1 in NSCustomMigrationStage.willMigrateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  return 1;
}

uint64_t partial apply for closure #1 in NSCustomMigrationStage.didMigrateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in NSCustomMigrationStage.willMigrateHandler.setter(a1, a2, a3, *(void (**)(void))(v3 + 16)) & 1;
}

void (*NSCustomMigrationStage.didMigrateHandler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  void *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = v1;
  v4 = malloc(0x48uLL);
  *a1 = v4;
  v4[8] = v2;
  v5 = objc_msgSend(v2, sel_didMigrateHandler);
  if (v5)
  {
    v6 = v5;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSStagedMigrationManager, @unowned NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)partial apply;
    v5[3] = v7;
    v8 = partial apply for closure #1 in NSCustomMigrationStage.willMigrateHandler.getter;
  }
  else
  {
    v8 = 0;
  }
  v4[6] = v8;
  v4[7] = v5;
  return NSCustomMigrationStage.didMigrateHandler.modify;
}

void NSCustomMigrationStage.didMigrateHandler.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v5 = v2[7];
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v3;
      *(_QWORD *)(v6 + 24) = v5;
      v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
      v2[5] = v6;
      *v2 = MEMORY[0x1E0C809B0];
      v2[1] = 1107296256;
      v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
      v2[3] = &block_descriptor_48;
      v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
      objc_msgSend(v4, sel_setDidMigrateHandler_, v7);
      _Block_release(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)a1 + 64), sel_setDidMigrateHandler_, 0);
    }
    v11 = v2[6];
  }
  else
  {
    if (!v3)
    {
      objc_msgSend(*(id *)(*(_QWORD *)a1 + 64), sel_setDidMigrateHandler_, 0);
      goto LABEL_10;
    }
    v8 = v2[7];
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v8;
    v2[4] = closure #1 in NSCustomMigrationStage.willMigrateHandler.setterpartial apply;
    v2[5] = v9;
    *v2 = MEMORY[0x1E0C809B0];
    v2[1] = 1107296256;
    v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage, @unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v2[3] = &block_descriptor_55;
    v10 = _Block_copy(v2);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_setDidMigrateHandler_, v10);
    _Block_release(v10);
    v11 = v3;
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
LABEL_10:
  free(v2);
}

uint64_t _sxq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySo24NSStagedMigrationManagerCSo08NSCustomC5StageCytIsegnnrzo_SgWOy(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error)(uint64_t a1, uint64_t a2)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed NSStagedMigrationManager, @in_guaranteed NSCustomMigrationStage) -> (@out (), @error @owned Error)(a1, a2);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)partial apply(_QWORD *a1, _QWORD *a2)
{
  return partial apply for thunk for @escaping @callee_guaranteed (@guaranteed NSStagedMigrationManager, @guaranteed NSCustomMigrationStage) -> (@error @owned Error)(a1, a2);
}

void static NSPersistentContainer.defaultDirectoryURL.getter()
{
  id v0;

  v0 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultDirectoryURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

}

uint64_t NSPersistentContainer.performBackgroundTask<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Optional();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NSPersistentContainer.performBackgroundTask<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 96) = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  *(_QWORD *)(v0 + 104) = v7;
  v7(v1, 1, 1, v2);
  v8 = objc_msgSend(v3, sel_newBackgroundContext);
  *(_QWORD *)(v0 + 112) = v8;
  v9 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 120) = v9;
  v9[2] = v2;
  v9[3] = v5;
  v9[4] = v4;
  v9[5] = v8;
  *(_BYTE *)(v0 + 144) = 0;
  swift_retain();
  v8;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v10;
  *v10 = v0;
  v10[1] = NSPersistentContainer.performBackgroundTask<A>(_:);
  return NSManagedObjectContext.perform<A>(schedule:_:)(*(_QWORD *)(v0 + 80), (_BYTE *)(v0 + 144), (uint64_t)partial apply for closure #1 in NSPersistentContainer._rethrowsHelper_performTask<A>(execute:rescue:), (uint64_t)v9, *(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v7);
  v1(v3, 0, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v5, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v11 = *(void **)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 16);
    v9(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));

    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v13, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = v1;
  swift_willThrow();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18A352094()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in NSPersistentContainer._rethrowsHelper_performTask<A>(execute:rescue:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id result;

  v2 = *(void **)(v0 + 40);
  result = (id)(*(uint64_t (**)(void *))(v0 + 24))(v2);
  if (!v1)
    return objc_msgSend(v2, sel_reset);
  return result;
}

uint64_t NSAttributeDescription.AttributeType.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NSAttributeDescription.AttributeType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t NSAttributeDescription.AttributeType.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*NSAttributeDescription.AttributeType.rawValue.modify())()
{
  return NSManagedObjectContext.ConcurrencyType.rawValue.modify;
}

id NSAttributeDescription.type.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id result;

  result = objc_msgSend(v1, sel_attributeType);
  *a1 = result;
  return result;
}

id NSAttributeDescription.type.setter(_QWORD *a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setAttributeType_, *a1);
}

id (*NSAttributeDescription.type.modify(_QWORD *a1))(uint64_t a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = objc_msgSend(v1, sel_attributeType);
  return NSAttributeDescription.type.modify;
}

id NSAttributeDescription.type.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), sel_setAttributeType_, *(_QWORD *)a1);
}

void static NSAttributeDescription.AttributeType.undefined.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static NSAttributeDescription.AttributeType.integer16.getter(_QWORD *a1@<X8>)
{
  *a1 = 100;
}

void static NSAttributeDescription.AttributeType.integer32.getter(_QWORD *a1@<X8>)
{
  *a1 = 200;
}

void static NSAttributeDescription.AttributeType.integer64.getter(_QWORD *a1@<X8>)
{
  *a1 = 300;
}

void static NSAttributeDescription.AttributeType.decimal.getter(_QWORD *a1@<X8>)
{
  *a1 = 400;
}

void static NSAttributeDescription.AttributeType.double.getter(_QWORD *a1@<X8>)
{
  *a1 = 500;
}

void static NSAttributeDescription.AttributeType.float.getter(_QWORD *a1@<X8>)
{
  *a1 = 600;
}

void static NSAttributeDescription.AttributeType.string.getter(_QWORD *a1@<X8>)
{
  *a1 = 700;
}

void static NSAttributeDescription.AttributeType.BOOLean.getter(_QWORD *a1@<X8>)
{
  *a1 = 800;
}

void static NSAttributeDescription.AttributeType.date.getter(_QWORD *a1@<X8>)
{
  *a1 = 900;
}

void static NSAttributeDescription.AttributeType.binaryData.getter(_QWORD *a1@<X8>)
{
  *a1 = 1000;
}

void static NSAttributeDescription.AttributeType.uuid.getter(_QWORD *a1@<X8>)
{
  *a1 = 1100;
}

void static NSAttributeDescription.AttributeType.uri.getter(_QWORD *a1@<X8>)
{
  *a1 = 1200;
}

void static NSAttributeDescription.AttributeType.transformable.getter(_QWORD *a1@<X8>)
{
  *a1 = 1800;
}

void static NSAttributeDescription.AttributeType.objectID.getter(_QWORD *a1@<X8>)
{
  *a1 = 2000;
}

void static NSAttributeDescription.AttributeType.composite.getter(_QWORD *a1@<X8>)
{
  *a1 = 2100;
}

unint64_t lazy protocol witness table accessor for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType;
  if (!lazy protocol witness table cache variable for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType)
  {
    result = MEMORY[0x18D76BF40](&protocol conformance descriptor for NSAttributeDescription.AttributeType, &type metadata for NSAttributeDescription.AttributeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributeDescription.AttributeType and conformance NSAttributeDescription.AttributeType);
  }
  return result;
}

id sub_18A3522CC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_attributeType);
  *a2 = result;
  return result;
}

id sub_18A3522FC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAttributeType_, *a1);
}

ValueMetadata *type metadata accessor for NSAttributeDescription.AttributeType()
{
  return &type metadata for NSAttributeDescription.AttributeType;
}

void sub_18A352A0C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A352A2C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3529E4);
}

void sub_18A352B7C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A352B9C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A352ADCLL);
}

void sub_18A353328(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A353348(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A353300);
}

void sub_18A3535F8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3538F8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A353918(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3538D0);
}

void sub_18A353A24(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A353A44(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A353994);
}

void sub_18A353F58(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A353F78(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A353F30);
}

void sub_18A3542C4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3542E4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A353FF4);
}

id _swizzleManifestTypeDataXPC(void *a1, void *a2)
{
  CFStringRef v4;
  int v5;
  const char *BytePtr;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  id result;
  id v18;
  uint64_t v19;

  v4 = 0;
  v5 = objc_msgSend(a2, "sqlType");
  switch(v5)
  {
    case 1:
      v19 = objc_msgSend(a1, "bytes");
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v19);
      v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInteger:", objc_msgSend(v8, "integerValue"));
      goto LABEL_18;
    case 2:
    case 3:
      v7 = objc_msgSend(a1, "bytes");
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v7);
      v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", objc_msgSend(v8, "longLongValue"));
LABEL_18:
      v16 = v9;

      goto LABEL_19;
    case 4:
    case 5:
    case 6:
    case 9:
    case 12:
      if (CFDataGetLength((CFDataRef)a1))
      {
        BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);
        v4 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
      }
      else
      {
        v4 = &stru_1E1EE23F0;
      }
      if (v5 == 12)
      {
        v15 = (objc_class *)MEMORY[0x1E0C99E98];
      }
      else
      {
        if (v5 != 4)
          goto LABEL_24;
        v15 = (objc_class *)MEMORY[0x1E0CB3598];
      }
      v16 = objc_msgSend([v15 alloc], "initWithString:", v4);
      CFRelease(v4);
LABEL_19:
      result = (id)v16;
      break;
    case 7:
    case 8:
      v10 = objc_msgSend(a1, "bytes");
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v10);
      if (v5 == 7)
      {
        v12 = objc_msgSend((id)objc_msgSend(a2, "propertyDescription"), "attributeType");
        v13 = objc_alloc(MEMORY[0x1E0CB37E8]);
        if (v12 == 600)
        {
          objc_msgSend(v11, "floatValue");
          v14 = objc_msgSend(v13, "initWithFloat:");
        }
        else
        {
          objc_msgSend(v11, "doubleValue");
          v14 = objc_msgSend(v13, "initWithDouble:");
        }
      }
      else
      {
        v18 = objc_alloc(MEMORY[0x1E0C99D68]);
        objc_msgSend(v11, "doubleValue");
        v14 = objc_msgSend(v18, "initWithTimeIntervalSinceReferenceDate:");
      }
      v4 = (CFStringRef)v14;

      goto LABEL_24;
    case 11:
      if (objc_msgSend(a1, "length") == 16)
      {
        result = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", objc_msgSend(a1, "bytes"));
      }
      else
      {
        v4 = 0;
LABEL_24:
        result = (id)v4;
      }
      break;
    case 15:
      return +[_PFRoutines retainedDecodeValue:forTransformableAttribute:]((uint64_t)_PFRoutines, (uint64_t)a1, (void *)objc_msgSend(a2, "propertyDescription"));
    default:
      goto LABEL_24;
  }
  return result;
}

void sub_18A354C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A354E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A35500C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18A355274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

os_log_t ___pflogInitialize_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coredata", "warning");
  qword_1ECD8D830 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_3()
{
  os_log_t result;

  result = os_log_create("com.apple.coredata", "sql");
  qword_1ECD8D840 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_4()
{
  os_log_t result;

  result = os_log_create("com.apple.coredata", "XPC");
  qword_1ECD8D848 = (uint64_t)result;
  return result;
}

os_log_t ___pflogInitialize_block_invoke_5()
{
  os_log_t result;

  result = os_log_create("com.apple.coredata", "CloudKit");
  qword_1ECD8D850 = (uint64_t)result;
  return result;
}

void sub_18A35C754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A35DBE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A35DD10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A35DE24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A35F3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  objc_end_catch();
  _Block_object_dispose(&v0, 8);
  _Block_object_dispose(&v1, 8);
  _Block_object_dispose(&v2, 8);
  _Block_object_dispose(&v3, 8);
  JUMPOUT(0x18A35F444);
}

void sub_18A35F3CC()
{
  JUMPOUT(0x18A35F3F8);
}

void sub_18A35F988(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  id v32;

  objc_end_catch();
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A35F640);
  }
  v32 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A35FA34()
{
  objc_end_catch();
  JUMPOUT(0x18A35FA00);
}

void sub_18A35FA44(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A35F86CLL);
}

void sub_18A35FA50()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A35FA58);
  JUMPOUT(0x18A35FA5CLL);
}

void sub_18A3600DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A35FE20);
  }
  _Unwind_Resume(exception_object);
}

#error "18A360628: call analysis failed (funcsize=76)"

void sub_18A360BC8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A360BE0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A360BECLL);
}

void sub_18A360DFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A36E67C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A36EDD8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A36EDF4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A36EDF8);
  objc_terminate();
}

#error "18A370C98: call analysis failed (funcsize=46)"

void sub_18A3714D8(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A3713B8);
    }
    objc_begin_catch(exc_buf);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A371558(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A371530);
  }
  JUMPOUT(0x18A371510);
}

void sub_18A371CF8(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A371C70);
  }
  JUMPOUT(0x18A371C14);
}

void sub_18A371D08()
{
  objc_end_catch();
  JUMPOUT(0x18A371C14);
}

void sub_18A371D20(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A371C10);
}

void sub_18A372698(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A372544);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A372E8C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A372DACLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A373414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A373468(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3732B4);
  }
  JUMPOUT(0x18A373454);
}

void sub_18A373478(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A373480);
  JUMPOUT(0x18A373454);
}

void sub_18A373940(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A373838);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A373D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  if (a2 != 2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A373CC8);
  }
  objc_begin_catch(exception_object);

  objc_exception_rethrow();
}

void sub_18A373E34(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A373E0CLL);
  }
  JUMPOUT(0x18A373DF4);
}

void sub_18A37ACF8()
{
  objc_end_catch();
  JUMPOUT(0x18A37AC20);
}

void sub_18A37AD10(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A37AC1CLL);
}

void sub_18A37B830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A37BB3C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A37BAECLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A37C7AC()
{
  __break(1u);
}

void sub_18A37C808()
{
  objc_end_catch();
  JUMPOUT(0x18A37C7D8);
}

void sub_18A37C814()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A37C81CLL);
  JUMPOUT(0x18A37C820);
}

void sub_18A37C9D0(_Unwind_Exception *exc_buf, int a2)
{
  id v2;

  if (!a2)
    _Unwind_Resume(exc_buf);
  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A37C950);
  }
  v2 = objc_begin_catch(exc_buf);
  objc_exception_rethrow();
}

void sub_18A37CA64(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A37CA34);
  }
  JUMPOUT(0x18A37CA08);
}

void sub_18A37CEE4(_Unwind_Exception *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A37CE48);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A37CF7C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A37CF4CLL);
  }
  JUMPOUT(0x18A37CF2CLL);
}

void sub_18A37D0E8()
{
  __break(1u);
}

void sub_18A37D148()
{
  objc_end_catch();
  JUMPOUT(0x18A37D118);
}

void sub_18A37D154()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A37D15CLL);
  JUMPOUT(0x18A37D160);
}

void sub_18A37F184(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  _Block_object_dispose(&STACK[0x368], 8);
  _Block_object_dispose(&STACK[0x3D0], 8);
  _Block_object_dispose(&STACK[0x400], 8);
  _Unwind_Resume(a1);
}

void sub_18A381DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18A382360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const __CFString *a10, uint64_t a11, uint64_t a12, const __CFString *a13)
{
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 == 1)
  {
    v14 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 64) + 8) + 24) = 0;
    v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v16 = *MEMORY[0x1E0CB2D68];
    a10 = CFSTR("NSUnderlyingException");
    a11 = v16;
    a12 = (uint64_t)v14;
    a13 = CFSTR("Import failed because creating the zone query hit an unhandled exception.");
    v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a12, &a10, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 8) + 40) = objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v17);
    objc_end_catch();
    JUMPOUT(0x18A382320);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A38297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const __CFString *a10, uint64_t a11, uint64_t a12, const __CFString *a13)
{
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 == 1)
  {
    v14 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 64) + 8) + 24) = 0;
    v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v16 = *MEMORY[0x1E0CB2D68];
    a10 = CFSTR("NSUnderlyingException");
    a11 = v16;
    a12 = (uint64_t)v14;
    a13 = CFSTR("Import failed because applying the zone query metadata changes hit an unhandled exception.");
    v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a12, &a10, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 56) + 8) + 40) = objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v17);
    objc_end_catch();
    JUMPOUT(0x18A382934);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*initAnalyticsSendEvent())()
{
  uint64_t (*result)();

  if (qword_1ECD8D8D8 != -1)
    dispatch_once(&qword_1ECD8D8D8, &__block_literal_global_3);
  result = (uint64_t (*)())dlsym((void *)_MergedGlobals_68, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent[0] = result;
  return result;
}

void _PFInvokeMutationMethodForEachMemberOfSet(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t i;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a3, "count");
  if (v4)
  {
    v5 = v4;
    v6 = MEMORY[0x1E0C80A78](v4);
    v8 = (char *)v10 - v7;
    if (v6 > 0x200)
      v8 = (char *)NSAllocateScannedUncollectable();
    else
      bzero((char *)v10 - v7, 8 * v6);
    objc_msgSend(a3, "getObjects:", v8);
    for (i = 0; i != v5; ++i)
      method_invoke();
    if (v5 >= 0x201)
      NSZoneFree(0, v8);
  }
}

void _releaseStaleBatch(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  void **v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v2 = a2 >> 5;
  v3 = 1 << ~(_BYTE)a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v2) & v3) != 0)
  {
    v5 = *(_DWORD *)(a1 + 48);
    v6 = v5 * a2;
    v7 = v5 * a2 + v5;
    if (v7 >= *(_DWORD *)(a1 + 12))
      v8 = *(_DWORD *)(a1 + 12);
    else
      v8 = v7;
    v9 = objc_msgSend(*(id *)(a1 + 16), "_objectsPointer");
    v10 = v8 - v6;
    if (v8 > v6)
    {
      v11 = (void **)(v9 + 8 * v6);
      do
      {
        v12 = *v11;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v13 = (void *)objc_msgSend(v12, "objectID");
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            v13 = (void *)objc_msgSend(v12, "_backingObjectID");
          else
            v13 = (void *)objc_msgSend(v12, "objectForKey:", CFSTR("objectID"));
        }
        v14 = v13;
        v15 = v13;
        *v11++ = v14;

        --v10;
      }
      while (v10);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v2) &= ~v3;
  }
}

void sub_18A384894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A384A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _PFPerformDebugZombie(void *a1)
{
  objc_class *Class;
  const char *v3;
  objc_class *v4;
  objc_class *v5;
  malloc_zone_t *v6;
  char *name;

  if (a1)
  {
    Class = object_getClass(a1);
    if (Class)
    {
      name = 0;
      v3 = class_getName(Class);
      asprintf(&name, "_NSZombie_%s", v3);
      v4 = objc_lookUpClass(name);
      if (!v4)
      {
        v5 = objc_lookUpClass("_NSZombie_");
        v4 = objc_duplicateClass(v5, name, 0);
        if (!v4)
          v4 = objc_lookUpClass(name);
      }
      if (name)
        free(name);
      objc_destructInstance(a1);
      object_setClass(a1, v4);
    }
    if (*MEMORY[0x1E0CB2928])
    {
      v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
      if (!_PF_Private_Malloc_Zone)
        v6 = malloc_default_zone();
      malloc_zone_free(v6, a1);
    }
  }
}

void _PFDeallocateObjects(void **to_be_freed, unsigned int num)
{
  void **v3;
  uint64_t v4;
  id *v5;
  malloc_zone_t *v6;
  uint64_t v7;

  v3 = to_be_freed;
  if (*MEMORY[0x1E0CB3448])
  {
    if (num)
    {
      v7 = num;
      do
      {
        if (*v3)
          _PFPerformDebugZombie(*v3);
        ++v3;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    if (num)
    {
      v4 = num;
      v5 = to_be_freed;
      do
      {
        if (*v5)
          objc_destructInstance(*v5);
        ++v5;
        --v4;
      }
      while (v4);
    }
    v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
    if (!_PF_Private_Malloc_Zone)
      v6 = malloc_default_zone();
    malloc_zone_batch_free(v6, v3, num);
  }
}

void *stack_reallocate(void *ptr, size_t size, uint64_t a3, _QWORD *a4)
{
  malloc_zone_t *v7;

  if (*a4 <= (unint64_t)ptr && a4[2] > (unint64_t)ptr)
    return 0;
  v7 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v7 = malloc_default_zone();
  return malloc_type_zone_realloc(v7, ptr, size, 0x4CB4B919uLL);
}

void sub_18A38BCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A38BFE4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A38C520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _PFCeateStubFileAtPath(char *a1, int a2)
{
  uint64_t result;

  if (!a2)
    return open(a1, 2562, 420);
  result = open_dprotected_np(a1, 2562, a2, 0, 420);
  if ((_DWORD)result != -1)
    return result;
  if (*__error() != 45)
    return 0xFFFFFFFFLL;
  else
    return open(a1, 2562, 420);
}

void _writePFEncodedStringShapeIntoData(void *a1, void *a2, _BYTE *a3)
{
  int v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  v6 = objc_msgSend(a1, "length");
  if ((int)(((v6 + 7) & 0xFFFFFFF8) - v6) >= 1)
    objc_msgSend(a1, "appendBytes:length:", &v10);
  v7 = objc_msgSend(a2, "length");
  objc_msgSend(a1, "appendBytes:length:", &v10, 8);
  objc_msgSend(a1, "appendBytes:length:", &v10, 4);
  v9 = bswap32(v7);
  objc_msgSend(a1, "appendBytes:length:", &v9, 4);
  objc_msgSend(a1, "appendBytes:length:", &v10, 8);
  if (v7)
  {
    v8 = a3;
    if (v7 >= 0x401)
      v8 = malloc_type_malloc(v7 + 1, 0x367617B5uLL);
    objc_msgSend(a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v8, 0, v7, 0);
    v8[v7] = 0;
    objc_msgSend(a1, "appendBytes:length:", v8, v7 + 1);
    if (v8 != a3)
      free(v8);
  }
  else
  {
    objc_msgSend(a1, "appendBytes:length:", &v10, 1);
  }
}

uint64_t _writeDataIntoData(void *a1, void *a2)
{
  int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = objc_msgSend(a2, "length");
  if ((int)(((v4 + 3) & 0xFFFFFFFC) - v4) >= 1)
    objc_msgSend(a2, "appendBytes:length:", &v8);
  v5 = objc_msgSend(a1, "length");
  v7 = bswap32(v5);
  objc_msgSend(a2, "appendBytes:length:", &v7, 4);
  result = objc_msgSend(a2, "appendBytes:length:", &v8, 4);
  if (v5)
    return objc_msgSend(a2, "appendData:", a1);
  return result;
}

id _newReadDataFromBytes(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (*a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v3 + 4 > a3)
    return 0;
  v4 = *(_DWORD *)(a1 + v3);
  v5 = bswap32(v4);
  v6 = v3 + 8;
  if (v6 + v5 > a3)
    return 0;
  *a2 = v6 + v5;
  if (v4)
    return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", a1 + v6, v5, 0);
  else
    return objc_alloc_init(MEMORY[0x1E0C99D50]);
}

uint64_t _writePFEncodedDataShapeIntoData(void *a1, void *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = objc_msgSend(a1, "length");
  if ((int)(((v4 + 7) & 0xFFFFFFF8) - v4) >= 1)
    objc_msgSend(a1, "appendBytes:length:", &v8);
  objc_msgSend(a1, "appendBytes:length:", &v8, 8);
  objc_msgSend(a1, "appendBytes:length:", &v8, 8);
  v5 = objc_msgSend(a2, "length");
  v7 = bswap32(v5);
  objc_msgSend(a1, "appendBytes:length:", &v7, 4);
  objc_msgSend(a1, "appendBytes:length:", &v8, 4);
  return objc_msgSend(a1, "appendBytes:length:", objc_msgSend(a2, "bytes"), v5);
}

uint64_t _writePFEncodedArrayShapeIntoData(void *a1, void *a2, void *a3, void *a4)
{
  int v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v8 = objc_msgSend(a1, "length");
  if ((int)(((v8 + 7) & 0xFFFFFFF8) - v8) >= 1)
    objc_msgSend(a1, "appendBytes:length:", &v23);
  objc_msgSend(a1, "appendBytes:length:", &v23, 8);
  objc_msgSend(a1, "appendBytes:length:", &v23, 8);
  objc_msgSend(a1, "appendBytes:length:", &v23, 4);
  v22 = bswap32(objc_msgSend(a2, "count"));
  objc_msgSend(a1, "appendBytes:length:", &v22, 4);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (result)
  {
    v10 = result;
    v11 = 0;
    v12 = *(_QWORD *)v19;
    for (i = *(_QWORD *)v19; ; i = *(_QWORD *)v19)
    {
      if (i != v12)
        objc_enumerationMutation(a2);
      v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v11);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      v15 = objc_msgSend(a3, "indexForKey:", objc_msgSend(v14, "name"));
      v17 = 0;
      if (a4)
        goto LABEL_15;
LABEL_17:
      v17 = bswap64(v15);
      objc_msgSend(a1, "appendBytes:length:", &v17, 8);
      if (++v11 >= v10)
      {
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
        if (!result)
          return result;
        v10 = result;
        v11 = 0;
      }
    }
    if (!a4)
    {
      v15 = objc_msgSend((id)objc_msgSend(a3, "objectForKey:", v14), "unsignedIntegerValue");
      goto LABEL_17;
    }
    if ((objc_msgSend(v14, "isNSNumber") & 1) != 0)
    {
      v15 = objc_msgSend((id)objc_msgSend(a4, "objectForKey:", v14), "unsignedIntegerValue");
      v17 = 0x100000000000000;
      v16 = &v17;
    }
    else
    {
      v15 = objc_msgSend((id)objc_msgSend(a3, "objectForKey:", v14), "unsignedIntegerValue");
      v17 = 0;
LABEL_15:
      v16 = (unint64_t *)&v23;
    }
    objc_msgSend(a1, "appendBytes:length:", v16, 8);
    goto LABEL_17;
  }
  return result;
}

uint64_t _writeNSPropertyProxyIntoData(void *a1, void *a2, void *a3)
{
  unsigned int v5;
  int v6;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v5 = objc_msgSend((id)objc_msgSend(a3, "objectForKey:", objc_msgSend(a2, "_underlyingProperty")), "unsignedIntegerValue");
  v6 = objc_msgSend(a1, "length");
  if ((int)(((v6 + 7) & 0xFFFFFFF8) - v6) >= 1)
    objc_msgSend(a1, "appendBytes:length:", &v9);
  v8 = bswap32(v5);
  objc_msgSend(a1, "appendBytes:length:", &v8, 4);
  v8 = bswap32(objc_msgSend(a2, "_entitysReferenceID"));
  objc_msgSend(a1, "appendBytes:length:", &v8, 4);
  objc_msgSend(a1, "appendBytes:length:", &v9, 8);
  objc_msgSend(a1, "appendBytes:length:", &v9, 8);
  objc_msgSend(a1, "appendBytes:length:", &v9, 8);
  return objc_msgSend(a1, "appendBytes:length:", &v9, 4);
}

uint64_t _writeKKDRow2IntoData(void *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  _WORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "length");
  if ((int)(((v4 + 7) & 0xFFFFFFF8) - v4) >= 1)
  {
    v14[0] = 0;
    objc_msgSend(a1, "appendBytes:length:", v14);
  }
  _writeInt32IntoData(a1, *(_DWORD *)a2);
  _writeInt32IntoData(a1, *(unsigned __int16 *)(a2 + 4));
  v5 = *(unsigned __int16 *)(a2 + 8);
  _writeInt16IntoData(a1, v5);
  _writeInt16IntoData(a1, *(unsigned __int16 *)(a2 + 10));
  v6 = *(unsigned __int16 *)(a2 + 12);
  _writeInt16IntoData(a1, v6);
  result = _writeInt16IntoData(a1, *(unsigned __int16 *)(a2 + 14));
  if (((v6 - v5) & 0x80000000) == 0)
  {
    MEMORY[0x1E0C80A78](result);
    if ((_DWORD)v8)
    {
      v10 = (unsigned __int16 *)(a2 + 16);
      v11 = (_WORD *)((char *)v14 - v9);
      v12 = v8;
      do
      {
        v13 = *v10++;
        *v11++ = bswap32(v13) >> 16;
        --v12;
      }
      while (v12);
    }
    return objc_msgSend(a1, "appendBytes:length:");
  }
  return result;
}

uint64_t _writeKKDMappingStrategyIntoData(void *a1, _QWORD *a2, void *a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v6 = objc_msgSend(a1, "length");
  if ((int)(((v6 + 7) & 0xFFFFFFF8) - v6) >= 1)
    objc_msgSend(a1, "appendBytes:length:", &v16);
  LODWORD(v7) = objc_msgSend(a2, "length");
  v8 = (uint64_t *)objc_msgSend(a2, "keys");
  objc_msgSend(a1, "appendBytes:length:", &v16, 8);
  objc_msgSend(a1, "appendBytes:length:", &v16, 8);
  objc_msgSend(a1, "appendBytes:length:", &v16, 8);
  objc_msgSend(a1, "appendBytes:length:", &v16, 8);
  objc_msgSend(a1, "appendBytes:length:", &v16, 8);
  v9 = (uint64_t *)a2[2];
  if (*v9)
  {
    v10 = 1;
    while (v9[v10++])
      ;
  }
  else
  {
    v10 = 1;
  }
  _writeInt32IntoData(a1, v7);
  for (result = _writeInt32IntoData(a1, v10); v10; --v10)
    result = objc_msgSend(a1, "appendBytes:length:", &v16, 8);
  v13 = *v9;
  if (*v9)
  {
    v14 = 1;
    do
    {
      result = _writeKKDRow2IntoData(a1, v13);
      v13 = v9[v14++];
    }
    while (v13);
  }
  v7 = v7;
  if ((_DWORD)v7)
  {
    do
    {
      v15 = *v8++;
      result = _writeInt64IntoData(a1, objc_msgSend((id)objc_msgSend(a3, "objectForKey:", v15), "unsignedIntegerValue"));
      --v7;
    }
    while (v7);
  }
  return result;
}

void _PFResultsObjectCFDeallocator_deallocate(uint64_t a1)
{

}

_QWORD *_PFfastFactoryRelease1(void *a1)
{
  _QWORD *result;
  _QWORD *v2;
  int v3;
  const void *v4;

  result = object_getIndexedIvars(a1);
  v2 = result;
  do
    v3 = __ldxr((unsigned int *)result);
  while (__stxr(v3 - 1, (unsigned int *)result));
  if (v3 <= 0)
  {
    v4 = (const void *)result[5];
    if (v4)
    {
      CFRelease(v4);
      v2[5] = 0;
    }
    v2[6] = 0;
    v2[2] = 0;
    result = (_QWORD *)v2[3];
    if (result)
    {
      result = (_QWORD *)_PFfastFactoryRelease1();
      v2[3] = 0;
    }
    if (v2[1])
      v2[1] = 0;
    __dmb(0xBu);
  }
  return result;
}

objc_class *_PFFallbackFactoryForOID(void *a1)
{
  Class Class;
  unint64_t *v3;
  objc_class *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v9;

  Class = object_getClass(a1);
  v3 = (unint64_t *)((char *)object_getIndexedIvars(Class) + 24);
  v4 = (objc_class *)*v3;
  if (!*v3)
  {
    v5 = (void *)objc_msgSend(a1, "persistentStore");
    v6 = (_QWORD *)objc_msgSend(a1, "entity");
    v4 = +[_NSCoreManagedObjectID classWithStore:andEntity:](NSScalarObjectID64, "classWithStore:andEntity:", v5, v6);
    if (!-[objc_class _storeInfo1](v4, "_storeInfo1"))
    {
      v7 = 0;
      if (v5 && v6)
        v7 = _sqlCoreLookupSQLEntityForEntityDescription(v5, v6);
      -[objc_class _setStoreInfo1:](v4, "_setStoreInfo1:", v7);
    }
    while (!__ldaxr(v3))
    {
      if (!__stlxr((unint64_t)v4, v3))
        return v4;
    }
    __clrex();
    v9 = *v3;

    return (objc_class *)v9;
  }
  return v4;
}

void sub_18A3932C0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A39332C(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A393114);
}

int8x8_t SetHostHeaderWithBigHeader(uint64_t a1, uint64_t a2)
{
  int8x8_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(int8x8_t *)(a1 + 8) = vrev32_s8(*(int8x8_t *)(a2 + 8));
  *(int8x16_t *)(a1 + 16) = vrev64q_s8(*(int8x16_t *)(a2 + 16));
  *(int8x16_t *)(a1 + 32) = vrev64q_s8(*(int8x16_t *)(a2 + 32));
  *(_QWORD *)(a1 + 48) = bswap64(*(_QWORD *)(a2 + 48));
  result = vrev32_s8(*(int8x8_t *)(a2 + 56));
  *(int8x8_t *)(a1 + 56) = result;
  return result;
}

void sub_18A3940F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;

  if (a2)
  {
    if (a2 == 2)
    {
      v16 = objc_begin_catch(exception_object);
      if (v14)
      {
        if (!a14)
        {
          v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v15);
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 259, v17);

        }
      }
      v18 = v16;
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18A393ED4);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A39458C()
{
  __break(1u);
}

void sub_18A3946A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A394674);
  }
  _Unwind_Resume(a1);
}

void sub_18A3946B0(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A3946B8);
  _Unwind_Resume(a1);
}

void sub_18A3946C0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A3946C8);
  objc_terminate();
}

void sub_18A394CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  id v15;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A394B60);
    }
    v15 = objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A394E1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A394DD8);
  }
  _Unwind_Resume(a1);
}

void sub_18A394E2C(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A394E34);
  _Unwind_Resume(a1);
}

void sub_18A394E3C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A394E44);
  objc_terminate();
}

void sub_18A395164(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3951A8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A3951B4);
  JUMPOUT(0x18A39518CLL);
}

void sub_18A3951EC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3951C0);
  }
  JUMPOUT(0x18A39518CLL);
}

void sub_18A395728()
{
  __break(1u);
}

void sub_18A3957C0()
{
  objc_end_catch();
  JUMPOUT(0x18A395790);
}

void sub_18A3966BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_18A397348(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3972A0);
  }
  JUMPOUT(0x18A397284);
}

void sub_18A397358(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A397240);
  }
  JUMPOUT(0x18A397284);
}

void sub_18A397378(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A397280);
}

void sub_18A3985C8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  void *v3;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3985FC()
{
  objc_end_catch();
  JUMPOUT(0x18A398604);
}

void sub_18A398A40(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A398A94(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3988C0);
  }
  JUMPOUT(0x18A398A84);
}

void sub_18A3997F8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A399818(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3997CCLL);
}

void sub_18A39A1F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A39B610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A39B7A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _PF_Handler_SetNilValueForKeyIndex(char **a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = _PFEntityForManagedObject(a1);
  v6 = *(void **)(_kvcPropertysPrimitiveSetters((uint64_t)v5) + 8 * a3);
  _PF_CopyOnWrite_Snapshot(a1);
  snapshot_set_value_as_object(a1[3], a3, 0, v7, v8, v9, v10, v11);
  if (v6)
  {
    if (isScalarTypeForKVCSetter(v6))
      _NSSetUsingKeyValueSetter();
  }
}

uint64_t _PF_InternalToOneRelationshipForeignKeyCache(unsigned int *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  if (a3)
    *a3 = 0;
  if ((a1[4] & 0x30000) == 0x10000 || (a1[4] & 0x80) != 0)
    return 0;
  v7 = *((_QWORD *)a1 + 4);
  v8 = (unint64_t *)_PFEntityForManagedObject(a1);
  v9 = v8[14];
  v10 = a1[5];
  v11 = (_DWORD)v10 ? (char *)a1 + v10 : 0;
  v13 = *(_QWORD *)(v9 + 96);
  v12 = *(_QWORD *)(v9 + 104);
  v15 = a2 >= v13;
  v14 = a2 - v13;
  v15 = !v15 || v14 >= v12;
  if (v15 || v7 == 0)
    return 0;
  v17 = a1[4];
  if (*(_QWORD *)(_kvcPropertysPrimitiveGetters(v8) + 8 * a2))
    v24 = (void *)_NSGetUsingKeyValueGetter();
  else
    snapshot_get_value_as_object(*((id **)a1 + 3), a2, v18, v19, v20, v21, v22, v23);
  if (v24 == (void *)_CD_ScalarNull)
    return 0;
  if (((v11[(a2 >> 3) - ((v17 >> 22) & 0x3FC)] >> (a2 & 7)) & 1) != 0)
  {
    if (a3)
    {
      v24 = (void *)objc_msgSend(v24, "objectID");
LABEL_27:
      *a3 = v24;
    }
  }
  else if (a3)
  {
    goto LABEL_27;
  }
  return 1;
}

void _PFFaultHandlerFixRelationshipsPostMigration(int a1, id **a2, uint64_t a3, const __CFDictionary *a4)
{
  int v4;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  BOOL v27;
  void *Value;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v4 = (*((_DWORD *)a2 + 4) >> 15) & 7;
  if (v4 == 5 || v4 == 0)
  {
    v8 = (unint64_t *)_PFEntityForManagedObject(a2);
    v9 = (uint64_t)v8;
    if (v8)
      v37 = v8[14];
    else
      v37 = 0;
    v10 = _kvcPropertysPrimitiveGetters(v8);
    v38 = _kvcPropertysPrimitiveSetters(v9);
    v17 = 0;
    v18 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v18)
      v19 = (char *)a2 + v18;
    else
      v19 = 0;
    v20 = &v19[-(((unint64_t)*((unsigned int *)a2 + 4) >> 22) & 0x3FC)];
    v21 = 1;
    do
    {
      v22 = v21;
      v23 = (unint64_t *)(v37
                               + 16
                               * *((int *)&__const__PFFaultHandlerFixRelationshipsPostMigration_rangeIndices + v17));
      v25 = *v23;
      v24 = v23[1];
      if (*v23 < v24 + *v23)
      {
        do
        {
          if (((v20[v25 >> 3] >> (v25 & 7)) & 1) == 0)
          {
            if (*(_QWORD *)(v10 + 8 * v25))
              v26 = (const void *)_NSGetUsingKeyValueGetter();
            else
              snapshot_get_value_as_object(a2[3], v25, v11, v12, v13, v14, v15, v16);
            if (v26)
              v27 = v26 == (const void *)_CD_ScalarNull;
            else
              v27 = 1;
            if (!v27)
            {
              Value = (void *)CFDictionaryGetValue(a4, v26);
              if (Value)
              {
                v29 = Value;
                v30 = *(_QWORD *)(v38 + 8 * v25);
                _PF_CopyOnWrite_Snapshot(a2);
                if (v30)
                {
                  _NSSetUsingKeyValueSetter();
                }
                else
                {
                  v31 = v29;
                  snapshot_set_value_as_object((char *)a2[3], v25, v31, v32, v33, v34, v35, v36);
                }
              }
            }
          }
          ++v25;
          --v24;
        }
        while (v24);
      }
      v21 = 0;
      v17 = 1;
    }
    while ((v22 & 1) != 0);
  }
}

void sub_18A3A16D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void (*a24)(char *))
{
  a24(&a22);
  _Unwind_Resume(a1);
}

uint64_t _readFetchRequestIntoShellFromData(void *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  unint64_t v14;
  unint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  void *v28;
  const __CFString *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  CFIndex v33;
  CFIndex v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void **v39;
  CFIndex v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  CFIndex v73;
  void **v74;
  CFIndex v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void **v79;
  CFIndex v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unsigned int v96;
  id v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  int v127;
  uint64_t result;
  uint64_t v129;
  const __CFString *v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void **v137;
  void **v138;
  void **values;
  CFArrayCallBacks callBacks;
  unint64_t v142;

  v14 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  if (v14 + 4 > a4)
    goto LABEL_120;
  v17 = *(_DWORD *)(a2 + v14);
  v142 = v14 + 4;
  if (v17 != -20254786)
    goto LABEL_120;
  v18 = a8;
  v20 = a5;
  v22 = a3;
  v23 = (v14 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 + 4;
  if (v23 + 4 <= a4)
  {
    v25 = bswap32(*(_DWORD *)(a2 + v23));
    v142 = v24;
    v15 = v24;
  }
  else
  {
    v25 = 0;
  }
  if (v15 + v25 > a4)
  {
    if (a14)
    {
      v26 = (void *)MEMORY[0x1E0CB35C8];
      v27 = *MEMORY[0x1E0CB28A8];
      v28 = (void *)MEMORY[0x1E0C99D80];
      v29 = CFSTR("Can't read entity: Not enough bytes left");
      goto LABEL_122;
    }
    return 0;
  }
  v30 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v31 = v30 + 4;
  if (v30 + 4 <= a4)
  {
    v32 = *(_DWORD *)(a2 + v30);
    v142 = v30 + 4;
    if (!v32)
    {
      v15 = v30 + 4;
      goto LABEL_39;
    }
    v33 = bswap32(v32);
    values = (void **)(a2 + ((v30 + 11) & 0xFFFFFFFFFFFFFFF8));
    v34 = v33;
    while (1)
    {
      v35 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
      v36 = v35 + 8;
      if (v35 + 8 <= a4)
      {
        v37 = *(_QWORD *)(a2 + v35);
        v142 = v36;
        v31 = v36;
        if (v37)
          break;
      }
      if (!--v34)
      {
        v39 = values;
        v40 = v33;
        while (1)
        {
          v41 = (v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v42 = v41 + 4;
          if (v41 + 4 <= a4)
          {
            v44 = bswap32(*(_DWORD *)(a2 + v41));
            v142 = v41 + 4;
            if (v44 == 2)
            {
              v46 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
              v47 = v46 + 4;
              if (v46 + 4 <= a4)
              {
                v48 = bswap32(*(_DWORD *)(a2 + v46));
                v142 = v47;
              }
              else
              {
                v48 = 0;
              }
              v45 = *(_QWORD **)(a7 + 8 * v48);
              goto LABEL_25;
            }
            if (v44 == 1)
            {
              v49 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
              v50 = v49 + 4;
              if (v49 + 4 <= a4)
              {
                v51 = bswap32(*(_DWORD *)(a2 + v49));
                v142 = v50;
              }
              else
              {
                v51 = 0;
              }
              v45 = *(_QWORD **)(a8 + 8 * v51);
              goto LABEL_25;
            }
            if (v44)
            {
              if (a14)
              {
                v26 = (void *)MEMORY[0x1E0CB35C8];
                v27 = *MEMORY[0x1E0CB28A8];
                v28 = (void *)MEMORY[0x1E0C99D80];
                v29 = CFSTR("Invalid groupByProperty type in archive");
                goto LABEL_122;
              }
              goto LABEL_26;
            }
            v41 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v42 = v41 + 4;
          }
          if (v42 <= a4)
          {
            v43 = bswap32(*(_DWORD *)(a2 + v41));
            v142 = v42;
          }
          else
          {
            v43 = 0;
          }
          v45 = _newReadPropertyProxyFromBytes(a1, a2, &v142, a4, *(_QWORD *)(a11 + 8 * v43), a7);
LABEL_25:
          *v39 = v45;
LABEL_26:
          ++v39;
          if (!--v40)
          {
            callBacks.version = 0;
            *(_OWORD *)&callBacks.retain = *(_OWORD *)(MEMORY[0x1E0C9B378] + 8);
            callBacks.copyDescription = *(CFArrayCopyDescriptionCallBack *)(MEMORY[0x1E0C9B378] + 24);
            callBacks.equal = 0;
            v20 = a5;
            *(_QWORD *)(a5 + 16) = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, v33, &callBacks);
            v15 = v142;
            v18 = a8;
            goto LABEL_39;
          }
        }
      }
    }
LABEL_77:
    if (a14)
    {
      v26 = (void *)MEMORY[0x1E0CB35C8];
      v27 = *MEMORY[0x1E0CB28A8];
      v28 = (void *)MEMORY[0x1E0C99D80];
      v29 = CFSTR("Cant' read entity: Properties buffer has content");
LABEL_122:
      v129 = objc_msgSend(v26, "errorWithDomain:code:userInfo:", v27, 134060, objc_msgSend(v28, "dictionaryWithObject:forKey:", v29, CFSTR("Root cause")));
      result = 0;
      *a14 = v129;
      return result;
    }
    return 0;
  }
LABEL_39:
  v52 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v53 = v52 + 4;
  if (v52 + 4 <= a4)
  {
    v54 = *(_DWORD *)(a2 + v52);
    v142 = v53;
    if (v54)
    {
      v55 = v20;
      v134 = *(_QWORD *)(a10 + 8 * bswap32(v54));
      callBacks.version = 0;
      v56 = (void *)MEMORY[0x1E0C99E60];
      v57 = objc_opt_class();
      v131 = objc_opt_class();
      v58 = (void *)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, objc_msgSend(v56, "setWithObjects:", v57), v134, (uint64_t)&callBacks);
      if (!v58)
        goto LABEL_123;
      v20 = v55;
      *(_QWORD *)(v55 + 24) = v58;
    }
  }
  v65 = *(_QWORD **)(v20 + 32);
  if (!v65)
  {
    v65 = PF_CALLOC_OBJECT_ARRAY(3);
    *(_QWORD *)(v20 + 32) = v65;
  }
  v66 = (v142 + 7) & 0xFFFFFFFFFFFFFFF8;
  v67 = v66 + 8;
  if (v66 + 8 <= a4)
  {
    v68 = bswap64(*(_QWORD *)(a2 + v66));
    v142 = v67;
  }
  else
  {
    v68 = 0;
  }
  *v65 = v68;
  v69 = v142;
  v70 = (v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v71 = v70 + 4;
  if (v70 + 4 <= a4)
  {
    v72 = *(_DWORD *)(a2 + v70);
    v142 = v70 + 4;
    if (v72)
    {
      v73 = bswap32(v72);
      v74 = (void **)(a2 + ((v70 + 11) & 0xFFFFFFFFFFFFFFF8));
      v75 = v73;
      do
      {
        v76 = (v71 + 7) & 0xFFFFFFFFFFFFFFF8;
        v77 = v76 + 8;
        if (v76 + 8 <= a4)
        {
          v78 = *(_QWORD *)(a2 + v76);
          v142 = v77;
          v71 = v77;
          if (v78)
            goto LABEL_77;
        }
        --v75;
      }
      while (v75);
      v135 = v20;
      v137 = v74;
      v79 = v74;
      v80 = v73;
      while (1)
      {
        v81 = (v142 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v82 = v81 + 4;
        if (v81 + 4 > a4)
          goto LABEL_60;
        v83 = bswap32(*(_DWORD *)(a2 + v81));
        v142 = v81 + 4;
        if (v83 == 2)
        {
          v86 = (v81 + 7) & 0xFFFFFFFFFFFFFFFCLL;
          v87 = v86 + 4;
          if (v86 + 4 <= a4)
          {
            v88 = bswap32(*(_DWORD *)(a2 + v86));
            v142 = v87;
          }
          else
          {
            v88 = 0;
          }
          v85 = *(_QWORD **)(a7 + 8 * v88);
          goto LABEL_64;
        }
        if (v83 == 1)
          break;
        if (!v83)
        {
          v81 = (v81 + 7) & 0xFFFFFFFFFFFFFFFCLL;
          v82 = v81 + 4;
LABEL_60:
          if (v82 <= a4)
          {
            v84 = bswap32(*(_DWORD *)(a2 + v81));
            v142 = v82;
          }
          else
          {
            v84 = 0;
          }
          v85 = _newReadPropertyProxyFromBytes(a1, a2, &v142, a4, *(_QWORD *)(a11 + 8 * v84), a7);
LABEL_64:
          *v79 = v85;
          goto LABEL_65;
        }
        if (a14)
        {
          v26 = (void *)MEMORY[0x1E0CB35C8];
          v27 = *MEMORY[0x1E0CB28A8];
          v28 = (void *)MEMORY[0x1E0C99D80];
          v29 = CFSTR("Invalid propertyToFetch type in archive");
          goto LABEL_122;
        }
LABEL_65:
        ++v79;
        if (!--v80)
        {
          callBacks.version = 0;
          *(_OWORD *)&callBacks.retain = *(_OWORD *)(MEMORY[0x1E0C9B378] + 8);
          callBacks.copyDescription = *(CFArrayCopyDescriptionCallBack *)(MEMORY[0x1E0C9B378] + 24);
          callBacks.equal = 0;
          v20 = v135;
          *(_QWORD *)(v135 + 40) = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v137, v73, &callBacks);
          v69 = v142;
          goto LABEL_80;
        }
      }
      v89 = (v81 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v90 = v89 + 4;
      if (v89 + 4 <= a4)
      {
        v91 = bswap32(*(_DWORD *)(a2 + v89));
        v142 = v90;
      }
      else
      {
        v91 = 0;
      }
      v85 = *(_QWORD **)(v18 + 8 * v91);
      goto LABEL_64;
    }
    v69 = v70 + 4;
  }
LABEL_80:
  v92 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v93 = v92 + 4;
  if (v92 + 4 <= a4)
  {
    v94 = bswap32(*(_DWORD *)(a2 + v92));
    v142 = v92 + 4;
    v92 = (v92 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v95 = v92 + 4;
    v69 = v93;
  }
  else
  {
    v94 = 0;
    v95 = v92 + 4;
  }
  if (v95 <= a4)
  {
    v96 = bswap32(*(_DWORD *)(a2 + v92));
    v142 = v95;
    v69 = v95;
  }
  else
  {
    v96 = 0;
  }
  if (v94)
  {
    v97 = *(id *)(a11 + 8 * v96);
  }
  else
  {
    v97 = *(id *)(v18 + 8 * v96);
    v69 = v142;
  }
  *(_QWORD *)(v20 + 48) = v97;
  v98 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v99 = v98 + 4;
  if (v98 + 4 > a4)
    goto LABEL_96;
  v100 = *(_DWORD *)(a2 + v98);
  v142 = v99;
  v69 = v99;
  if (!v100)
    goto LABEL_96;
  v138 = (void **)v18;
  v101 = *(_QWORD *)(a10 + 8 * bswap32(v100));
  callBacks.version = 0;
  v102 = (void *)MEMORY[0x1E0C99E60];
  v103 = objc_opt_class();
  v131 = objc_opt_class();
  v104 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, objc_msgSend(v102, "setWithObjects:", v103), v101, (uint64_t)&callBacks);
  if (!v104)
  {
LABEL_123:
    v130 = CFSTR("Can't decode predicate for fetch request");
LABEL_125:
    _NSCoreDataLog(1, (uint64_t)v130, v59, v60, v61, v62, v63, v64, v131);
    if (a14)
      *a14 = callBacks.version;
    return 0;
  }
  v105 = (void *)v104;
  if (!byte_1ECD8DE26)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v105, "allowEvaluation");
  }
  *(_QWORD *)(v20 + 56) = v105;
  v69 = v142;
  v18 = (uint64_t)v138;
LABEL_96:
  v106 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v107 = v106 + 4;
  if (v106 + 4 <= a4)
  {
    v108 = *(_DWORD *)(a2 + v106);
    v142 = v107;
    v69 = v107;
    if (v108)
    {
      v136 = v20;
      v132 = v22;
      v109 = bswap32(v108);
      v110 = (void *)_newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v142, a4, a10, 0);
      v111 = 0;
      while (1)
      {
        v112 = objc_msgSend(v110, "objectAtIndex:", v111);
        callBacks.version = 0;
        v113 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
        v114 = +[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v113, v112, (uint64_t)&callBacks);
        if (!v114)
          break;
        v115 = (void *)v114;
        if (!byte_1ECD8DE26)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(v115, "allowEvaluation");
        }
        objc_msgSend(v110, "_replaceObject:atIndex:", v115, v111++);
        if (v109 == v111)
        {
          v22 = v132;
          v20 = v136;
          *(_QWORD *)(v136 + 64) = v110;
          v69 = v142;
          goto LABEL_105;
        }
      }
      v130 = CFSTR("Can't decode sortDescriptor for fetch request");
      goto LABEL_125;
    }
  }
LABEL_105:
  v116 = (v69 + 7) & 0xFFFFFFFFFFFFFFF8;
  v117 = v116 + 8;
  if (v116 + 8 <= a4)
  {
    v118 = bswap64(*(_QWORD *)(a2 + v116));
    v142 = v116 + 8;
    v116 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8;
    v119 = v116 + 8;
    v69 = v117;
  }
  else
  {
    v118 = 0;
    v119 = v116 + 8;
  }
  *(_QWORD *)(v20 + 72) = v118;
  if (v119 <= a4)
  {
    v120 = bswap64(*(_QWORD *)(a2 + v116));
    v142 = v119;
    v69 = v119;
  }
  else
  {
    v120 = 0;
  }
  *(_QWORD *)(v20 + 80) = v120;
  v121 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v122 = v121 + 4;
  if (v121 + 4 <= a4)
  {
    v123 = *(_DWORD *)(a2 + v121);
    v142 = v122;
    v69 = v122;
    if (v123)
    {
      *(_QWORD *)(v20 + 96) = _newReadPFEncodedArrayFromData((uint64_t)a1, a2, &v142, a4, v18, 0);
      v69 = v142;
    }
  }
  v124 = (v69 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v125 = v124 + 4;
  if (v124 + 4 <= a4)
  {
    v126 = bswap32(*(_DWORD *)(a2 + v124));
    v142 = v124 + 4;
    v124 = (v124 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v125 = v124 + 4;
  }
  else
  {
    v126 = 0;
  }
  *(_DWORD *)(v20 + 104) = v126;
  *(_DWORD *)(v20 + 104) &= ~0x100u;
  if (v125 <= a4)
  {
    v127 = *(_DWORD *)(a2 + v124);
    v142 = v125;
    if (v127 == -20254786)
    {
      *v22 = v125;
      return 1;
    }
  }
LABEL_120:
  if (a14)
  {
    v26 = (void *)MEMORY[0x1E0CB35C8];
    v27 = *MEMORY[0x1E0CB28A8];
    v28 = (void *)MEMORY[0x1E0C99D80];
    v29 = CFSTR("Can't read entity into shell: Missing entity frontside delimiter");
    goto LABEL_122;
  }
  return 0;
}

void sub_18A3A2DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A3A3334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

#error "18A3A3844: call analysis failed (funcsize=54)"

void sub_18A3A3ADC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  __break(1u);
}

void sub_18A3A3BA8(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A3A3AA0);
}

void sub_18A3A3BD8()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A3A3BE0);
  JUMPOUT(0x18A3A3BE4);
}

void sub_18A3A3CC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A3A41F8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3A4114);
}

const __CFString *descriptionForBranchRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  __int16 *v6;
  unsigned int v7;
  const __CFString *v9;
  uint64_t v10;

  if (!a1)
    return CFSTR("branch row pointer is NULL");
  v4 = (*(__int16 *)(a1 + 14) - *(__int16 *)(a1 + 10));
  if ((int)v4 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v6 = (__int16 *)(a1 + 16);
    do
    {
      v7 = *v6++;
      objc_msgSend(v5, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", v7));
      --v4;
    }
    while (v4);
  }
  if ((a2 & 0x80000000) != 0)
    v9 = &stru_1E1EE23F0;
  else
    v9 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[%d]"), a2);
  v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("branch row pointer%@ = %p flags.size = %d flags.operation = %d flags.parameter = %d flags.offset = %d lowerBound = %d lowerSlot = %d upperBound = %d upperSlot = %d generalSlots pointer = %p with contents = %@"), v9, a1, *(_QWORD *)a1 & 7, (*(_QWORD *)a1 >> 3) & 0x3FF, *(_QWORD *)a1 >> 13, HIDWORD(*(_QWORD *)a1), *(unsigned __int16 *)(a1 + 8), *(__int16 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12), *(__int16 *)(a1 + 14), a1 + 16, v5);

  return (const __CFString *)v10;
}

Class override_class_superclass(objc_class *a1)
{
  objc_class *Superclass;

  Superclass = class_getSuperclass(a1);
  return class_getSuperclass(Superclass);
}

void _sharedIMPL_setPvfk_core(char **a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_setPrimitiveValue_forKey_);
  v18 = a3;
  v7 = *((_QWORD *)_PFEntityForManagedObject(a1) + 12);
  v8 = *(void **)(v7 + 24 + 8 * a4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 40) + 8 * a4);
  _PF_CopyOnWrite_Snapshot(a1);
  _PFManagedObject_coerceValueForKeyWithDescription((uint64_t)a1, &v18, v9, v8);
  v10 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v10)
    v11 = (char *)a1 + v10;
  else
    v11 = 0;
  v11[(a4 >> 3) - (((unint64_t)*((unsigned int *)a1 + 4) >> 22) & 0x3FC)] |= 1 << (a4 & 7);
  v12 = v18;
  snapshot_set_value_as_object(a1[3], a4, v12, v13, v14, v15, v16, v17);
}

void _spvfk_0(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0);
}

void _spvfk_1(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 1uLL);
}

void _spvfk_2(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 2uLL);
}

void _spvfk_3(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 3uLL);
}

void _spvfk_4(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 4uLL);
}

void _spvfk_5(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 5uLL);
}

void _spvfk_6(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 6uLL);
}

void _spvfk_7(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 7uLL);
}

void _spvfk_8(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 8uLL);
}

void _spvfk_9(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 9uLL);
}

void _spvfk_10(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0xAuLL);
}

void _spvfk_11(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0xBuLL);
}

void _spvfk_12(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0xCuLL);
}

void _spvfk_13(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0xDuLL);
}

void _spvfk_14(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0xEuLL);
}

void _spvfk_15(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0xFuLL);
}

void _spvfk_16(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x10uLL);
}

void _spvfk_17(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x11uLL);
}

void _spvfk_18(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x12uLL);
}

void _spvfk_19(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x13uLL);
}

void _spvfk_20(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x14uLL);
}

void _spvfk_21(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x15uLL);
}

void _spvfk_22(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x16uLL);
}

void _spvfk_23(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x17uLL);
}

void _spvfk_24(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x18uLL);
}

void _spvfk_25(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x19uLL);
}

void _spvfk_26(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1AuLL);
}

void _spvfk_27(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1BuLL);
}

void _spvfk_28(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1CuLL);
}

void _spvfk_29(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1DuLL);
}

void _spvfk_30(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1EuLL);
}

void _spvfk_31(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x1FuLL);
}

void _spvfk_32(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x20uLL);
}

void _spvfk_33(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x21uLL);
}

void _spvfk_34(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x22uLL);
}

void _spvfk_35(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x23uLL);
}

void _spvfk_36(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x24uLL);
}

void _spvfk_37(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x25uLL);
}

void _spvfk_38(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x26uLL);
}

void _spvfk_39(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x27uLL);
}

void _spvfk_40(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x28uLL);
}

void _spvfk_41(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x29uLL);
}

void _spvfk_42(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2AuLL);
}

void _spvfk_43(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2BuLL);
}

void _spvfk_44(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2CuLL);
}

void _spvfk_45(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2DuLL);
}

void _spvfk_46(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2EuLL);
}

void _spvfk_47(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x2FuLL);
}

void _spvfk_48(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x30uLL);
}

void _spvfk_49(char **a1, uint64_t a2, void *a3)
{
  _sharedIMPL_setPvfk_core(a1, a2, a3, 0x31uLL);
}

_QWORD *_svfk_12(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xCuLL);
}

_QWORD *_svfk_14(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0xEuLL);
}

_QWORD *_svfk_16(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x10uLL);
}

_QWORD *_svfk_19(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x13uLL);
}

_QWORD *_svfk_20(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x14uLL);
}

_QWORD *_svfk_22(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x16uLL);
}

_QWORD *_svfk_23(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x17uLL);
}

_QWORD *_svfk_25(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x19uLL);
}

_QWORD *_svfk_26(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1AuLL);
}

_QWORD *_svfk_27(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1BuLL);
}

_QWORD *_svfk_30(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x1EuLL);
}

_QWORD *_svfk_32(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x20uLL);
}

_QWORD *_svfk_33(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x21uLL);
}

_QWORD *_svfk_34(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x22uLL);
}

_QWORD *_svfk_35(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x23uLL);
}

_QWORD *_svfk_36(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x24uLL);
}

_QWORD *_svfk_39(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x27uLL);
}

_QWORD *_svfk_40(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x28uLL);
}

_QWORD *_svfk_41(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x29uLL);
}

_QWORD *_svfk_42(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2AuLL);
}

_QWORD *_svfk_43(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2BuLL);
}

_QWORD *_svfk_44(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2CuLL);
}

_QWORD *_svfk_45(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2DuLL);
}

_QWORD *_svfk_46(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2EuLL);
}

_QWORD *_svfk_47(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x2FuLL);
}

_QWORD *_svfk_48(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x30uLL);
}

_QWORD *_svfk_49(char **a1, uint64_t a2, void *a3)
{
  return _sharedIMPL_setvfk_core(a1, a2, a3, 0x31uLL);
}

void _sharedIMPL_addObjectToOrderedSet_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  char v18;
  id v19;

  if (a3)
  {
    v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
    v16 = v15;
    v17 = objc_msgSend(v15, "containsObject:", a3);
    v18 = v17;
    v19 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B8]), "initWithIndexesInRange:", objc_msgSend(v16, "count"), v17 ^ 1u);
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2);
    if ((v18 & 1) == 0)
      objc_msgSend(v16, "addObject:", a3);
    objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 2, v19, v7);

  }
}

void _sharedIMPL_addOrderedSet_core(void *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend(a3, "count");
  if (v7)
  {
    v8 = v7;
    v28 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v9, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v10, a4, v11, v12, v13, v14, v15);
    v17 = v16;
    v29 = &v28;
    MEMORY[0x1E0C80A78](v16);
    v19 = (char *)&v28 - v18;
    if (v8 > 0x200)
      v19 = (char *)NSAllocateScannedUncollectable();
    else
      bzero((char *)&v28 - v18, 8 * v8);
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    v30 = 0u;
    v20 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v30, v34, 16, v28, v29);
    if (v20)
    {
      v21 = v20;
      v22 = 0;
      v23 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v31 != v23)
            objc_enumerationMutation(a3);
          v25 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
          if ((objc_msgSend(v17, "containsObject:", v25) & 1) == 0)
            *(_QWORD *)&v19[8 * v22++] = v25;
        }
        v21 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v21);
    }
    else
    {
      v22 = 0;
    }
    v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B8]), "initWithIndexesInRange:", objc_msgSend(v17, "count"), v22);
    v27 = v28;
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2, v26, v28);
    objc_msgSend(v17, "addObjects:count:", v19, v22);
    objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 2, v26, v27);

    if (v8 >= 0x201)
      NSZoneFree(0, v19);
  }
}

void _sharedIMPL_removeObjectFromOrderedSet_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;

  if (a3)
  {
    v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
    v16 = v15;
    v18 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v17 = objc_msgSend(v16, "indexOfObject:", a3);
    if (v17 != 0x7FFFFFFFFFFFFFFFLL)
      objc_msgSend(v18, "addIndex:", v17);
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 3, v18, v7);
    objc_msgSend(v16, "removeObjectsAtIndexes:", v18);
    objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 3, v18, v7);

  }
}

void _sharedIMPL_removeObjectFromSet_core(_DWORD *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v6;
  int v7;
  CFSetRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *values;

  values = a3;
  v6 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
  v7 = a1[4];
  v8 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B3B0]);
  if ((v7 & 0x200000) != 0)
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v6, 2, (uint64_t)v8, a4);
  else
    objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v6, 2, v8);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  objc_msgSend(v15, "removeObject:", values);
  if ((v7 & 0x200000) != 0)
  {
    _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v6);
    if (!v8)
      return;
    goto LABEL_8;
  }
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v6, 2, v8);
  if (v8)
LABEL_8:
    CFRelease(v8);
}

void _sharedIMPL_removeObjectFromOrderedSetAtIndex_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;

  v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
  _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  v16 = v15;
  v17 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v18 = v17;
  v19 = v17;
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v17, "addIndex:", a3);
    v18 = v19;
  }
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 3, v18, v7);
  objc_msgSend(v16, "removeObjectsAtIndexes:", v19);
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 3, v19, v7);

}

uint64_t _sharedIMPL_removeOrderedSetAtIndexes_core(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
  _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  v16 = v15;
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 3, a3, v7);
  objc_msgSend(v16, "removeObjectsAtIndexes:", a3);
  return objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 3, a3, v7);
}

void _sharedIMPL_removeOrderedSet_core(void *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a3, "count"))
  {
    v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v8, a4);
    _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
    v16 = v15;
    v17 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v18 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v24;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v24 != v20)
            objc_enumerationMutation(a3);
          v22 = objc_msgSend(v16, "indexOfObject:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v21));
          if (v22 != 0x7FFFFFFFFFFFFFFFLL)
            objc_msgSend(v17, "addIndex:", v22);
          ++v21;
        }
        while (v19 != v21);
        v19 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v19);
    }
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 3, v17, v7);
    objc_msgSend(v16, "removeObjectsAtIndexes:", v17);
    objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 3, v17, v7);

  }
}

uint64_t _sharedIMPL_removeSet_core(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v7 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a4), "name");
  v8 = a1[4];
  if ((v8 & 0x200000) != 0)
    _PF_ManagedObject_WillChangeValueForKeywithSetMutation(a1, (uint64_t)sel_willChangeValueForKey_withSetMutation_usingObjects_, v7, 2, a3, a4);
  else
    objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v7, 2, a3);
  _sharedIMPL_pvfk_core((uint64_t)a1, v9, a4, v10, v11, v12, v13, v14);
  objc_msgSend(v15, "minusSet:", a3);
  if ((v8 & 0x200000) != 0)
    return _PF_ManagedObject_DidChangeValueForKeywithSetMutation((uint64_t)a1, (uint64_t)sel_didChangeValueForKey_withSetMutation_usingObjects_, v7);
  else
    return objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v7, 2, a3);
}

void _sharedIMPL_insertObjectToOrderedSetAtIndex_core(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  char v20;
  id v21;

  if (a3)
  {
    v9 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v10, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v11, a5, v12, v13, v14, v15, v16);
    v18 = v17;
    v19 = objc_msgSend(v17, "containsObject:", a3);
    v20 = v19;
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B8]), "initWithIndexesInRange:", a4, v19 ^ 1u);
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2);
    if ((v20 & 1) == 0)
      objc_msgSend(v18, "insertObject:atIndex:", a3, a4);
    objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 2, v21, v9);

  }
}

void _sharedIMPL_insertOrderedSetAtIndexes_core(void *a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = objc_msgSend(a3, "count");
  if (v9)
  {
    v10 = v9;
    v42 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v11, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v12, a5, v13, v14, v15, v16, v17);
    v19 = v18;
    v20 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v21 = v20;
    v43 = &v41;
    if (v10 >= 0x201)
      v22 = 1;
    else
      v22 = v10;
    v23 = 8 * v22;
    MEMORY[0x1E0C80A78](v20);
    v25 = (char *)&v41 - v24;
    if (v10 > 0x200)
      v25 = (char *)NSAllocateScannedUncollectable();
    else
      bzero((char *)&v41 - v24, 8 * v10);
    v26 = objc_msgSend(a4, "lastIndex");
    v49[0] = 0;
    v49[1] = v26;
    v27 = objc_msgSend(a4, "getIndexes:maxCount:inIndexRange:", v25, v10, v49);
    MEMORY[0x1E0C80A78](v27);
    v28 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10 > 0x200)
      v28 = (char *)NSAllocateScannedUncollectable();
    else
      bzero((char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * v10);
    v44 = a1;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v29 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v50, 16, v10);
    if (v29)
    {
      v30 = v29;
      v31 = 0;
      v32 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v46 != v32)
            objc_enumerationMutation(a3);
          v34 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * i);
          if ((objc_msgSend(v19, "containsObject:", v34) & 1) == 0)
          {
            *(_QWORD *)&v28[8 * v31] = v34;
            objc_msgSend(v21, "addIndex:", *(_QWORD *)&v25[8 * v31++]);
          }
        }
        v30 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
      }
      while (v30);
    }
    else
    {
      v31 = 0;
    }
    if (v41 >= 0x201)
    {
      NSZoneFree(0, v25);
      v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v28, v31);
      v39 = v44;
      v40 = v42;
      objc_msgSend(v44, "willChange:valuesAtIndexes:forKey:", 2, v21, v42);
      objc_msgSend(v19, "insertObjects:atIndexes:", v38, v21);
      objc_msgSend(v39, "didChange:valuesAtIndexes:forKey:", 2, v21, v40);

      NSZoneFree(0, v28);
    }
    else
    {
      v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v28, v31);
      v36 = v44;
      v37 = v42;
      objc_msgSend(v44, "willChange:valuesAtIndexes:forKey:", 2, v21, v42);
      objc_msgSend(v19, "insertObjects:atIndexes:", v35, v21);
      objc_msgSend(v36, "didChange:valuesAtIndexes:forKey:", 2, v21, v37);

    }
  }
}

void _sharedIMPL_replaceObjectInOrderedSetAtIndex_core(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  char v20;
  void *v21;
  uint64_t v22;

  v22 = a4;
  if (a4)
  {
    v9 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v10, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v11, a5, v12, v13, v14, v15, v16);
    v18 = v17;
    v19 = objc_msgSend(v17, "containsObject:", a4);
    v20 = v19;
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B8]), "initWithIndexesInRange:", a3, v19 ^ 1u);
    objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 4, v21, v9);
    if ((v20 & 1) == 0)
      objc_msgSend(v18, "replaceObjectsInRange:withObjects:count:", a3, 1, &v22, 1);
    objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 4, v21, v9);

  }
}

void _sharedIMPL_replaceOrderedSetAtIndexes_core(void *a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = objc_msgSend(a3, "count");
  if (v9)
  {
    v10 = v9;
    v42 = objc_msgSend(*(id *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 24 + 8 * a5), "name");
    _PF_Handler_WillAccess_Property((id *)a1, v11, a5);
    _sharedIMPL_pvfk_core((uint64_t)a1, v12, a5, v13, v14, v15, v16, v17);
    v19 = v18;
    v20 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v21 = v20;
    v43 = &v41;
    if (v10 >= 0x201)
      v22 = 1;
    else
      v22 = v10;
    v23 = 8 * v22;
    MEMORY[0x1E0C80A78](v20);
    v25 = (char *)&v41 - v24;
    if (v10 > 0x200)
      v25 = (char *)NSAllocateScannedUncollectable();
    else
      bzero((char *)&v41 - v24, 8 * v10);
    v26 = objc_msgSend(a4, "lastIndex");
    v49[0] = 0;
    v49[1] = v26;
    v27 = objc_msgSend(a4, "getIndexes:maxCount:inIndexRange:", v25, v10, v49);
    MEMORY[0x1E0C80A78](v27);
    v28 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v10 > 0x200)
      v28 = (char *)NSAllocateScannedUncollectable();
    else
      bzero((char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 8 * v10);
    v44 = a1;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v29 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v50, 16, v10);
    if (v29)
    {
      v30 = v29;
      v31 = 0;
      v32 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v46 != v32)
            objc_enumerationMutation(a3);
          v34 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * i);
          if ((objc_msgSend(v19, "containsObject:", v34) & 1) == 0)
          {
            *(_QWORD *)&v28[8 * v31] = v34;
            objc_msgSend(v21, "addIndex:", *(_QWORD *)&v25[8 * v31++]);
          }
        }
        v30 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
      }
      while (v30);
    }
    else
    {
      v31 = 0;
    }
    if (v41 >= 0x201)
    {
      NSZoneFree(0, v25);
      v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v28, v31);
      v39 = v44;
      v40 = v42;
      objc_msgSend(v44, "willChange:valuesAtIndexes:forKey:", 4, v21, v42);
      objc_msgSend(v19, "replaceObjectsAtIndexes:withObjects:", v21, v38);
      objc_msgSend(v39, "didChange:valuesAtIndexes:forKey:", 4, v21, v40);

      NSZoneFree(0, v28);
    }
    else
    {
      v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v28, v31);
      v36 = v44;
      v37 = v42;
      objc_msgSend(v44, "willChange:valuesAtIndexes:forKey:", 4, v21, v42);
      objc_msgSend(v19, "replaceObjectsAtIndexes:withObjects:", v21, v35);
      objc_msgSend(v36, "didChange:valuesAtIndexes:forKey:", 4, v21, v37);

    }
  }
}

void _sharedIMPL_wcvfk_core(id a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_willChangeValueForKey_);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 16) + 40) + 8 * a3);
  _PF_ManagedObject_WillChangeValueForKeyIndex((uint64_t)a1, (uint64_t)sel_willChangeValueForKey_, v5, a3, 0);
}

_QWORD *_sharedIMPL_dcvfk_core(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  if (_PF_Threading_Debugging_level)
    _PFAssertSafeMultiThreadedAccess_impl(objc_msgSend(a1, "managedObjectContext"), sel_didChangeValueForKey_);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)_PFEntityForManagedObject(a1) + 12) + 16) + 40) + 8 * a3);
  return _PF_ManagedObject_DidChangeValueForKeyIndex(a1, (uint64_t)sel_didChangeValueForKey_, v5, a3);
}

void generateAccessorWithFunctionPtrSignature(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t *p_block;
  uint64_t v15;
  uint64_t block;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!strcmp(a1, "v@:Q"))
  {
    v21 = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e11__24__0_8Q16l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke;
    p_block = &v21;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:I"))
  {
    v20 = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e11__20__0_8I16l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke_2;
    p_block = &v20;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:Q@"))
  {
    v19 = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e14__32__0_8Q16_24l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke_3;
    p_block = &v19;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:I@"))
  {
    v18 = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e14__28__0_8I16_20l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke_4;
    p_block = &v18;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:@Q"))
  {
    v17 = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e14__32__0_8_16Q24l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke_5;
    p_block = &v17;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:@I"))
  {
    block = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e14__28__0_8_16I24l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke_6;
    p_block = &block;
    goto LABEL_15;
  }
  if (!strcmp(a1, "v@:@@"))
  {
    v15 = MEMORY[0x1E0C809B0];
    v12 = &__block_descriptor_48_e14__32__0_8_16_24l;
    v13 = __generateAccessorWithFunctionPtrSignature_block_invoke_7;
    p_block = &v15;
LABEL_15:
    p_block[1] = 3221225472;
    p_block[2] = (uint64_t)v13;
    p_block[3] = (uint64_t)v12;
    p_block[4] = a2;
    p_block[5] = a3;
    imp_implementationWithBlock(p_block);
    return;
  }
  _NSCoreDataLog(1, (uint64_t)CFSTR("generateAccessorWithFunctionPtrSignature failed with unknown signature '%s'"), v6, v7, v8, v9, v10, v11, (uint64_t)a1);
  __break(1u);
}

_QWORD *_sharedIMPL_setvfk_core_i2q(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD v5[7];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___sharedIMPL_setvfk_core_i2q_block_invoke;
  v5[3] = &unk_1E1EDE0C8;
  v5[4] = a1;
  v5[5] = a4;
  v5[6] = a3;
  return _sharedIMPL_setvfk_core_scalar(a1, a4, (uint64_t)v5);
}

uint64_t _sharedIMPL_pvfk_core_i2q(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char *v10;
  Class Class;

  v8 = a3;
  if (!_pvfk_header((unsigned int *)a1, a3, a3, a4, a5, a6, a7, a8))
    return 0;
  v10 = *(char **)(a1 + 24);
  Class = object_getClass(v10);
  return *(int *)&v10[*((unsigned int *)object_getIndexedIvars(Class) + v8 + 19)];
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, *(_QWORD *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, *(_QWORD *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, a4, *(_QWORD *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, a4, *(_QWORD *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, a4, *(_QWORD *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, a4, *(_QWORD *)(a1 + 40));
}

uint64_t __generateAccessorWithFunctionPtrSignature_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 32))(a2, 0, a3, a4, *(_QWORD *)(a1 + 40));
}

unsigned int *___sharedIMPL_setvfk_core_i2q_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return snapshot_set_int32(*(char **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 48));
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

unsigned int *___sharedIMPL_setvfk_core_f_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  if (!a2)
    return snapshot_set_float(*(char **)(*(_QWORD *)(a1 + 32) + 24), *(_DWORD *)(a1 + 40), *(float *)(a1 + 48));
  LODWORD(a3) = *(_DWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
  return (unsigned int *)_NSSetUsingKeyValueSetter();
}

uint64_t _deallocateContextBackgroundThread(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  -[NSManagedObjectContext _dispose:]((uint64_t)v2);
  _PFDeallocateObject(v2);
  *(_QWORD *)(a1 + 24) = 0;
  return 0;
}

void sub_18A3ABFB8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ABFD8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3ABF8CLL);
}

void sub_18A3AC5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ACA50()
{
  __break(1u);
}

void sub_18A3ACAD8()
{
  objc_end_catch();
  JUMPOUT(0x18A3ACAA8);
}

void sub_18A3ACAE8()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A3ACAF0);
  JUMPOUT(0x18A3ACAF4);
}

void sub_18A3AD924()
{
  __break(1u);
}

void sub_18A3AD9CC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3AD9A8);
  }
  JUMPOUT(0x18A3AD974);
}

void sub_18A3ADA70()
{
  __break(1u);
}

void sub_18A3ADAB8()
{
  objc_end_catch();
  JUMPOUT(0x18A3ADA8CLL);
}

void sub_18A3ADAC4()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A3ADACCLL);
  JUMPOUT(0x18A3ADAD0);
}

void sub_18A3ADB6C()
{
  __break(1u);
}

void sub_18A3ADBB4()
{
  objc_end_catch();
  JUMPOUT(0x18A3ADB88);
}

void sub_18A3ADBC0()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A3ADBC8);
  JUMPOUT(0x18A3ADBCCLL);
}

void sub_18A3AE0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _PFFaultLogExcessivePrepareForPendingChangesAttempts()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;

  v0 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "About to exceed _prepareForPushChanges limit. Set a breakpoint on _PFFaultLogExcessivePrepareForPendingChangesAttempts to stop here in the debugger.");
  _NSCoreDataLog(17, v0, v1, v2, v3, v4, v5, v6, v8);
  v7 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v8) = 0;
    _os_log_fault_impl(&dword_18A253000, v7, OS_LOG_TYPE_FAULT, "CoreData: About to exceed _prepareForPushChanges limit. Set a breakpoint on _PFFaultLogExcessivePrepareForPendingChangesAttempts to stop here in the debugger.", (uint8_t *)&v8, 2u);
  }
}

void sub_18A3AFAD0()
{
  __break(1u);
}

void sub_18A3AFB18()
{
  objc_end_catch();
  JUMPOUT(0x18A3AFAECLL);
}

void sub_18A3AFB24()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A3AFB2CLL);
  JUMPOUT(0x18A3AFB30);
}

void sub_18A3AFDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3B0164(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A3B0570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A3B0860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A3B0D84(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3B0D8C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3B0D94(_Unwind_Exception *exc_buf, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    if (a2 == 3)
    {
      v3 = objc_begin_catch(exc_buf);
      if (v2[4])
        +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v3, (uint64_t *)(*(_QWORD *)(v2[10] + 8) + 40));
      *(_BYTE *)(*(_QWORD *)(v2[9] + 8) + 24) = 0;
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        *(_QWORD *)(*(_QWORD *)(v2[11] + 8) + 40) = objc_begin_catch(exc_buf);
        objc_exception_rethrow();
      }
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18A3B0ADCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3B0E20(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3B0DF0);
  }
  _Unwind_Resume(a1);
}

void sub_18A3B0E34(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    JUMPOUT(0x18A3B0E3CLL);
  _Unwind_Resume(a1);
}

void sub_18A3B0E44(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3B0B7CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3B0E5C(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A3B0E64);
  _Unwind_Resume(a1);
}

void sub_18A3B0E6C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A3B0E78);
}

void sub_18A3B1188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __internalBlockToDeallocNSManagedObjectContext_block_invoke_3(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40))
    _PFDeallocateObject(*(id *)(a1 + 32));
}

void sub_18A3B4184(_Unwind_Exception *exception_object, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A3B4084);
    }
    v2 = objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3B41F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3B41CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A3B4208(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A3B4210);
  _Unwind_Resume(a1);
}

void sub_18A3B4218(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A3B4220);
  objc_terminate();
}

void sub_18A3B977C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_18A3BBA28(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3BE37C()
{
  __break(1u);
}

void sub_18A3BE3C4()
{
  objc_end_catch();
  JUMPOUT(0x18A3BE398);
}

void sub_18A3BE3D0()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A3BE3D8);
  JUMPOUT(0x18A3BE3DCLL);
}

void sub_18A3BEEDC()
{
  __break(1u);
}

void sub_18A3BEF34()
{
  objc_end_catch();
  JUMPOUT(0x18A3BEF0CLL);
}

void sub_18A3C09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3C197C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3C1FB0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3C25A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_18A3C4A60(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id *a25)
{
  id v25;
  id v26;

  if (!a2)
    _Unwind_Resume(exc_buf);
  if (a2 != 3)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3C47FCLL);
  }
  v25 = objc_begin_catch(exc_buf);
  -[NSMigrationManager _doCleanupOnFailure:](a25);
  v26 = v25;
  objc_exception_rethrow();
}

void sub_18A3C4AE0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A3C4B28);
}

void sub_18A3C4AE8(_Unwind_Exception *a1, int a2)
{
  char v2;

  if (a2)
  {
    if ((v2 & 1) != 0)
      JUMPOUT(0x18A3C4AF4);
    JUMPOUT(0x18A3C4C14);
  }
  _Unwind_Resume(a1);
}

void sub_18A3C4AFC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A3C4B28);
}

void sub_18A3C4B04(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3C4B40(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id *a25)
{
  id v27;
  id v28;

  if (a2)
  {
    objc_end_catch();
    if (a2 != 3)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18A3C47FCLL);
    }
    v27 = objc_begin_catch(a1);
    -[NSMigrationManager _doCleanupOnFailure:](a25);
    v28 = v27;
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18A3C4B9C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A3C4B28);
}

void sub_18A3C4BFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3C4BC0);
  }
  _Unwind_Resume(a1);
}

void sub_18A3C6270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18A3C6584: call analysis failed (funcsize=45)"

void sub_18A3C66F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18A3C6A30: call analysis failed (funcsize=45)"

void sub_18A3C80DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3C82F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3C8F18(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3C8EB8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3C951C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  objc_begin_catch(exception_object);
  JUMPOUT(0x18A3C93ECLL);
}

void sub_18A3C95C4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A3C95D4);
  JUMPOUT(0x18A3C9580);
}

void sub_18A3C9CD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A3C9D48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A3CA364(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  id v9;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A3CA2C0);
    }
    v9 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3CA40C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3CA3DCLL);
  }
  JUMPOUT(0x18A3CA3A4);
}

void sub_18A3CA854(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3CB508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A3CB618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18A3CB9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3CBA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3CBC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A3CC3B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3CC50CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A3CC3C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v20;
  id v21;
  id v22;
  va_list va;

  va_start(va, a15);
  if (a2)
  {
    _Block_object_dispose((const void *)(v17 - 232), 8);
    if (a2 == 3)
    {
      v20 = objc_begin_catch(a1);
      +[NSManagedObjectContext _handleError:withError:]((uint64_t)NSManagedObjectContext, v20, (uint64_t *)va);

      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 80) + 8) + 40) = 0;
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v21 = objc_begin_catch(a1);

        v22 = v21;
        objc_exception_rethrow();
      }
      objc_begin_catch(a1);
    }
    JUMPOUT(0x18A3CBFF4);
  }
  _Unwind_Resume(a1);
}

void sub_18A3CC474(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3CC434);
  }
  _Unwind_Resume(a1);
}

void sub_18A3CC498(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3CC4BC(_Unwind_Exception *a1, int a2)
{
  char v2;

  if (a2)
  {
    if ((v2 & 1) != 0)
      JUMPOUT(0x18A3CC4C8);
    JUMPOUT(0x18A3CC50CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A3CC4D0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A3CC4D8);
  objc_terminate();
}

void sub_18A3CC4EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A3CC334);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3CD0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D0750(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30)
{
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  if (a2)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        v30 = objc_begin_catch(exc_buf);
        v31 = v30;
        v32 = *(_QWORD *)(a25[8] + 8);
        if (*(_QWORD *)(v32 + 40))
          *(_QWORD *)(v32 + 40) = 0;
        v33 = a25[7];
        if (!v33
          || (*(_BYTE *)(v33 + 43) & 8) == 0
          || (!v30
            ? (v34 = 0)
            : *((_QWORD *)v30 + 6)
            ? (v34 = (void *)*((_QWORD *)v30 + 6))
            : (v34 = (void *)*MEMORY[0x1E0CB28A8]),
              !objc_msgSend(v34, "isEqualToString:", CFSTR("NSSQLiteErrorDomain"))))
        {
          if (a25[13])
          {
            *(_QWORD *)(*(_QWORD *)(a25[10] + 8) + 40) = objc_msgSend((id)objc_msgSend(v31, "userInfo"), "objectForKey:", CFSTR("NSCoreDataPrimaryError"));
            if (!*(_QWORD *)(*(_QWORD *)(a25[10] + 8) + 40))
              *(_QWORD *)(*(_QWORD *)(a25[10] + 8) + 40) = objc_msgSend(v31, "errorObjectWithUserInfo:", 0);
          }
          objc_end_catch();
          JUMPOUT(0x18A3CFD64);
        }
        objc_exception_rethrow();
      }
      if (a2 != 2)
      {
        objc_begin_catch(exc_buf);
        JUMPOUT(0x18A3CFD68);
      }
      objc_begin_catch(exc_buf);
      v35 = *(_QWORD *)(a25[8] + 8);
      if (*(_QWORD *)(v35 + 40))
        *(_QWORD *)(v35 + 40) = 0;
      objc_exception_rethrow();
    }
    objc_begin_catch(exc_buf);
    *(_QWORD *)(*(_QWORD *)(a25[8] + 8) + 40) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3D0C9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3D0C30);
  }
  _Unwind_Resume(a1);
}

void sub_18A3D13B0(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  objc_begin_catch(exc_buf);
  JUMPOUT(0x18A3D1300);
}

void sub_18A3D2070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D22EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D2998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D2B34(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D2D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D2DD0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D2DF0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3D2DA8);
}

void sub_18A3D3420()
{
  objc_end_catch();
  JUMPOUT(0x18A3D3428);
}

void sub_18A3D343C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D36A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D39D8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3D384CLL);
}

void sub_18A3D3BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D3D9C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D3DC0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3D3D54);
}

void sub_18A3D4094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D4234(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D4254(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3D4178);
}

void sub_18A3D436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D4754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D4A94(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D4AC4(void *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A3D49A4);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  JUMPOUT(0x18A3D4AB8);
}

void sub_18A3D4B08(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3D4AD8);
  }
  JUMPOUT(0x18A3D4AB8);
}

void sub_18A3D5970()
{
  __break(1u);
}

void sub_18A3D59D0()
{
  objc_end_catch();
  JUMPOUT(0x18A3D59A4);
}

void sub_18A3D6308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D6B04(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3D6B34(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3D6A34);
  }
  JUMPOUT(0x18A3D6B28);
}

void sub_18A3D74F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D7A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3D8B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18A3D979C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3D97C8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3D9658);
  }
  JUMPOUT(0x18A3D97BCLL);
}

void sub_18A3D9D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,char a23)
{
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 184), 8);
  _Block_object_dispose((const void *)(v23 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18A3DA99C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3DA9C8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3DA82CLL);
  }
  JUMPOUT(0x18A3DA9BCLL);
}

void sub_18A3DB17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a60, 8);
  _Unwind_Resume(a1);
}

void sub_18A3DB6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_18A3DBDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_18A3DC168(_Unwind_Exception *exc_buf, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 == 2)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) + 40) = objc_begin_catch(exc_buf);
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18A3DC10CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3DCB9C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Block_object_dispose(&STACK[0x320], 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Block_object_dispose(&STACK[0x370], 8);
  _Unwind_Resume(a1);
}

void sub_18A3DE334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A3DEBB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__darwin_time_t stat_path_for_modication_time(void *a1)
{
  void *v2;
  void *v3;
  int v4;
  stat v6;
  stat v7;

  memset(&v7, 0, sizeof(v7));
  memset(&v6.st_mtimespec, 0, 96);
  if ((objc_msgSend(a1, "isFileURL", 0, 0, 0, 0, 0, 0) & 1) == 0)
  {
    v7.st_mtimespec.tv_sec = 0;
    v7.st_mtimespec.tv_nsec = 0;
LABEL_7:
    v6.st_mtimespec = 0uLL;
    goto LABEL_8;
  }
  v2 = (void *)objc_msgSend(a1, "path");
  v3 = (void *)objc_msgSend(v2, "stringByAppendingString:", CFSTR("-wal"));
  LODWORD(v2) = stat((const char *)objc_msgSend(v2, "fileSystemRepresentation"), &v7);
  v4 = stat((const char *)objc_msgSend(v3, "fileSystemRepresentation"), &v6);
  if ((_DWORD)v2)
  {
    v7.st_mtimespec.tv_sec = 0;
    v7.st_mtimespec.tv_nsec = 0;
  }
  if (v4)
    goto LABEL_7;
LABEL_8:
  if (v7.st_mtimespec.tv_sec > v6.st_mtimespec.tv_sec)
    return v7.st_mtimespec.tv_sec;
  else
    return v6.st_mtimespec.tv_sec;
}

void sub_18A3E28D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3E3504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose((const void *)(v15 - 256), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3E4220(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_18A3E4E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_18A3E559C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_18A3E6834(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3E67CCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3E71B8(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A3E7118);
    }
    v3 = objc_begin_catch(exc_buf);

    objc_exception_throw(v3);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3E7254(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3E7224);
  }
  JUMPOUT(0x18A3E71E0);
}

const void *_sqlCoreLookupSQLEntityForEntityID(void *a1, unint64_t a2)
{
  const void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = _sqlEntityForEntityID(objc_msgSend(a1, "model"), a2);
  if (!v4)
  {
    v5 = (id)objc_msgSend(a1, "ancillarySQLModels");
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v5);
          v10 = _sqlEntityForEntityID(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i)), a2);
          if (v10)
          {
            v4 = v10;
            goto LABEL_12;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v7)
          continue;
        break;
      }
    }
    v4 = 0;
LABEL_12:

  }
  return v4;
}

void sub_18A3E9714(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3E95ACLL);
  }
  JUMPOUT(0x18A3E974CLL);
}

void sub_18A3E972C()
{
  objc_end_catch();
  JUMPOUT(0x18A3E974CLL);
}

void sub_18A3E9744(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_18A3E9748(a1);
  objc_terminate();
}

void sub_18A3E9748(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3E9A10(_Unwind_Exception *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A3E998CLL);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3E9AD0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3E9AACLL);
  }
  JUMPOUT(0x18A3E9A44);
}

#error "18A3E9D4C: call analysis failed (funcsize=15)"

void sub_18A3E9E6C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3E9E8C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3E9E48);
}

void sub_18A3EA018(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EA038(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3E9F60);
}

void sub_18A3EA228()
{
  objc_end_catch();
  JUMPOUT(0x18A3EA234);
}

void sub_18A3EA298(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EA2B8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EA27CLL);
}

void sub_18A3EA4F8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EA4A8);
}

void sub_18A3EA97C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EAC88(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EAF58(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EAF20);
}

void sub_18A3EB56C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EB528);
}

void sub_18A3EB714(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EB734(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EB678);
}

void sub_18A3EB898(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + *(int *)(v2 + 1696)));
  objc_exception_rethrow();
}

void sub_18A3EB8AC()
{
  __break(1u);
}

void sub_18A3EB8F4()
{
  objc_end_catch();
  JUMPOUT(0x18A3EB8FCLL);
}

void sub_18A3EBCC8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  const char *v5;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(exception_object);
    -[NSSQLiteConnection disconnect](v3);
    if (v2)
      objc_setProperty_nonatomic(v2, v5, v4, 48);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3EC2B8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EC2D8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EC258);
}

void sub_18A3EC34C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  const char *v5;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(exception_object);
    -[NSSQLiteConnection disconnect](v3);
    if (v2)
      objc_setProperty_nonatomic(v2, v5, v4, 48);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3EC528(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EC548(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EC4ECLL);
}

void sub_18A3EC6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3EC818(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EC83C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EC7F8);
}

void sub_18A3EC900(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EC924(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EC8E0);
}

void sub_18A3EC9E8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ECA0C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3EC9C8);
}

void sub_18A3ECB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3ECC3C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ECC60(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3ECC1CLL);
}

void sub_18A3ECD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3ECE84(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ECEA8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3ECE64);
}

void sub_18A3ECFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3ED234(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ED254(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A3ED118);
}

void sub_18A3ED474(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ED700(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3ED758(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A3ED760);
  JUMPOUT(0x18A3ED738);
}

void sub_18A3ED7A0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3ED76CLL);
  }
  JUMPOUT(0x18A3ED738);
}

void sub_18A3EDBE8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A3EDA50);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3EE1B8(void *exc_buf, int a2)
{
  void *v2;

  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A3EE144);
  }
  objc_begin_catch(exc_buf);

  objc_exception_rethrow();
}

void sub_18A3EE230()
{
  objc_end_catch();
  JUMPOUT(0x18A3EE208);
}

void sub_18A3EE2B8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3EE854(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A3EE6FCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A3EE864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18A3EEBA4(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  id v3;
  const char *v4;

  if (!a2)
    _Unwind_Resume(exc_buf);
  if (a2 == 2)
  {
    v3 = objc_begin_catch(exc_buf);
    if (v2)
      objc_setProperty_nonatomic(v2, v4, v3, 48);
    objc_end_catch();
  }
  else
  {
    objc_begin_catch(exc_buf);
  }
  JUMPOUT(0x18A3EEB00);
}

void sub_18A3EF5D0()
{
  __break(1u);
}

void sub_18A3EF6A0()
{
  objc_end_catch();
  JUMPOUT(0x18A3EF624);
}

void sub_18A3EF6B0()
{
  JUMPOUT(0x18A3EF6BCLL);
}

void sub_18A3EF720()
{
  objc_end_catch();
  JUMPOUT(0x18A3EF730);
}

void sub_18A3F0A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id location)
{
  id *v49;

  objc_destroyWeak(v49);
  objc_destroyWeak(&location);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Unwind_Resume(a1);
}

void sub_18A3F0D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const __CFString *a12, uint64_t a13, uint64_t a14, const __CFString *a15)
{
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 == 1)
  {
    v16 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 72) + 8) + 24) = 0;
    v17 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v18 = *MEMORY[0x1E0CB2D68];
    a12 = CFSTR("NSUnderlyingException");
    a13 = v18;
    a14 = (uint64_t)v16;
    a15 = CFSTR("Import failed because fetching the database metadata encountered an unhandled exception.");
    v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a14, &a12, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 64) + 8) + 40) = objc_msgSend(v17, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v19);
    objc_end_catch();
    JUMPOUT(0x18A3F0D08);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3F1918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_18A3F1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const __CFString *a21,uint64_t a22,uint64_t a23,const __CFString *a24)
{
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 56) + 8) + 24) = 0;
    v26 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v27 = *MEMORY[0x1E0CB2D68];
    a21 = CFSTR("NSUnderlyingException");
    a22 = v27;
    a23 = (uint64_t)v25;
    a24 = CFSTR("Import failed because an unhandled exception was encountered while trying to process the results of the database fetch operation.");
    v28 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a23, &a21, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 64) + 8) + 40) = objc_msgSend(v26, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v28);
    objc_end_catch();
    JUMPOUT(0x18A3F1B5CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3F1E00(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3F2190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A3F299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_18A3F2C04(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3F5F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t buf,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  _Block_object_dispose((const void *)(v65 - 256), 8);
  _Block_object_dispose((const void *)(v65 - 224), 8);
  _Block_object_dispose((const void *)(v65 - 176), 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_18A3F6730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_18A3F796C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const __CFString *a21,uint64_t a22,uint64_t a23,const __CFString *a24)
{
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 64) + 8) + 24) = 0;
    v26 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v27 = *MEMORY[0x1E0CB2D68];
    a21 = CFSTR("NSUnderlyingException");
    a22 = v27;
    a23 = (uint64_t)v25;
    a24 = CFSTR("An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.");
    v28 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a23, &a21, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 56) + 8) + 40) = objc_msgSend(v26, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v28);
    objc_end_catch();
    JUMPOUT(0x18A3F7930);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3F7EA8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const __CFString *a25,uint64_t a26,uint64_t a27,const __CFString *a28)
{
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  if (a2 == 1)
  {
    v29 = objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 72) + 8) + 24) = 0;
    v30 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v31 = *MEMORY[0x1E0CB2D68];
    a25 = CFSTR("NSUnderlyingException");
    a26 = v31;
    a27 = (uint64_t)v29;
    a28 = CFSTR("An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.");
    v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a27, &a25, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 64) + 8) + 40) = objc_msgSend(v30, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v32);
    objc_end_catch();
    JUMPOUT(0x18A3F7E6CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3F7F6C()
{
  objc_end_catch();
  JUMPOUT(0x18A3F7EB8);
}

void sub_18A3F82DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const __CFString *a21,uint64_t a22,uint64_t a23,const __CFString *a24)
{
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 64) + 8) + 24) = 0;
    v26 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v27 = *MEMORY[0x1E0CB2D68];
    a21 = CFSTR("NSUnderlyingException");
    a22 = v27;
    a23 = (uint64_t)v25;
    a24 = CFSTR("An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.");
    v28 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a23, &a21, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 56) + 8) + 40) = objc_msgSend(v26, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v28);
    objc_end_catch();
    JUMPOUT(0x18A3F82A0);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3F8824(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const __CFString *a25,uint64_t a26,uint64_t a27,const __CFString *a28)
{
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  if (a2 == 1)
  {
    v29 = objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 72) + 8) + 24) = 0;
    v30 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v31 = *MEMORY[0x1E0CB2D68];
    a25 = CFSTR("NSUnderlyingException");
    a26 = v31;
    a27 = (uint64_t)v29;
    a28 = CFSTR("An unhandled exception was caught during a fetch for zone in manatee identity loss recovery.");
    v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a27, &a25, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 64) + 8) + 40) = objc_msgSend(v30, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v32);
    objc_end_catch();
    JUMPOUT(0x18A3F87E8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A3F88E8()
{
  objc_end_catch();
  JUMPOUT(0x18A3F8834);
}

void sub_18A3F8B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const __CFString *a10, uint64_t a11, uint64_t a12, const __CFString *a13)
{
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 == 1)
  {
    v14 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 64) + 8) + 24) = 0;
    v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v16 = *MEMORY[0x1E0CB2D68];
    a10 = CFSTR("NSUnderlyingException");
    a11 = v16;
    a12 = (uint64_t)v14;
    a13 = CFSTR("Setup failed because an unhandled exception was caught during a fetch for zone creation.");
    v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a12, &a10, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 8) + 40) = objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v17);
    objc_end_catch();
    JUMPOUT(0x18A3F8B00);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3F8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18A3F918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A3FACEC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A3FB41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const __CFString *a9, uint64_t a10, uint64_t a11, const __CFString *a12)
{
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 8) + 24) = 0;
    v14 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v15 = *MEMORY[0x1E0CB2D68];
    a9 = CFSTR("NSUnderlyingException");
    a10 = v15;
    a11 = (uint64_t)v13;
    a12 = CFSTR("Setup failed because an unhandled exception was caught during event history truncation.");
    v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a11, &a9, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 40) = objc_msgSend(v14, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v16);
    objc_end_catch();
    JUMPOUT(0x18A3FB3ECLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A3FB634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A3FB874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A3FECC8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A3FFB74()
{
  objc_end_catch();
  JUMPOUT(0x18A3FFB7CLL);
}

void sub_18A3FFB94()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A3FFB9CLL);
  JUMPOUT(0x18A3FFBA0);
}

void sub_18A400574(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18A40285C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A402EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A40341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A403470(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40347C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A403484);
  objc_terminate();
}

void sub_18A403F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__324(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__325(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18A404E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  char v7;
  va_list va;

  va_start(va, a7);
  if ((v7 & 1) != 0)
    objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A40525C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A405108);
  }
  _Unwind_Resume(a1);
}

void sub_18A4052A0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4052B8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4052C0);
  objc_terminate();
}

void sub_18A4053C4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4053E4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A405374);
}

void sub_18A405714(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A405A0C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4059A4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A405F48(void *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A405EF4);
  }
  JUMPOUT(0x18A405F80);
}

void sub_18A405F60()
{
  objc_end_catch();
  JUMPOUT(0x18A405F80);
}

void sub_18A405F78(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A405F7CLL);
  objc_terminate();
}

void sub_18A405F8C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A405FB0);
  JUMPOUT(0x18A405F80);
}

void sub_18A405F9C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A405FA4);
  JUMPOUT(0x18A405F80);
}

void sub_18A405FAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A405FB0);
  _Unwind_Resume(a1);
}

void sub_18A406328(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A406340(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A40634CLL);
}

const __CFString *_NSSQLiteConnectionLockProxyValueFromPragmas(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  objc_class *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v13;
    v5 = *MEMORY[0x1E0C99778];
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(CFSTR("lock_proxy_file"), "isEqualToString:", objc_msgSend(v7, "lowercaseString")))
        {
          v8 = (void *)objc_msgSend(a1, "objectForKey:", v7);
          if (v8 == (void *)objc_msgSend(MEMORY[0x1E0C99E38], "null"))
            return 0;
          if ((objc_msgSend(v8, "isNSString") & 1) != 0)
            return (const __CFString *)v8;
          v9 = (void *)MEMORY[0x1E0C99DA0];
          v10 = (objc_class *)objc_opt_class();
          objc_msgSend(v9, "raise:format:", v5, CFSTR("Invalid class type '%@' for lock_proxy_file pragma value, must be an NSNull or NSString"), NSStringFromClass(v10));
        }
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v3)
        continue;
      break;
    }
  }
  return CFSTR(":auto:");
}

void sub_18A408A14(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A408A34(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4089E0);
}

void sub_18A408E70(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4094B0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4094FC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4094F4);
  JUMPOUT(0x18A409514);
}

void sub_18A40950C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A409514);
  JUMPOUT(0x18A4094F4);
}

void sub_18A409544(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A40951CLL);
  }
  JUMPOUT(0x18A4094F4);
}

void sub_18A409BA4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A409BBC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A409BC8);
}

void sub_18A40B328(_Unwind_Exception *a1)
{
  char v1;
  int v2;

  if ((v1 & 1) != 0)
    objc_end_catch();
  if (v2)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40B350(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A40B35CLL);
}

void sub_18A40B820(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40BBB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A40BBF0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A40BBF8);
  JUMPOUT(0x18A40BBE4);
}

void sub_18A40BC34(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A40BC04);
  }
  JUMPOUT(0x18A40BBE4);
}

#error "18A40BFF4: call analysis failed (funcsize=43)"

void sub_18A40C520(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40C538(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A40C540);
  objc_terminate();
}

void sub_18A40C740()
{
  __break(1u);
}

void sub_18A40C7B8()
{
  objc_end_catch();
  JUMPOUT(0x18A40C78CLL);
}

void sub_18A40D310(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40D6D8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40D6F0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A40D6F8);
  objc_terminate();
}

void sub_18A40DAAC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40DAC4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A40DACCLL);
  objc_terminate();
}

void sub_18A40DE40(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40E040(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40E5DC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40EBB8()
{
  _Unwind_Exception *v0;

  objc_end_catch();
  _Unwind_Resume(v0);
}

void sub_18A40EBD4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A40EBDCLL);
  objc_terminate();
}

void sub_18A40F1A4()
{
  _Unwind_Exception *v0;

  objc_end_catch();
  _Unwind_Resume(v0);
}

void sub_18A40F1C0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A40F1C8);
  objc_terminate();
}

void sub_18A40F360(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40F6D8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A40F878(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A410B18(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A410A3CLL);
  }
  JUMPOUT(0x18A4109F8);
}

void sub_18A410B28()
{
  objc_end_catch();
  JUMPOUT(0x18A4109F8);
}

void sub_18A410B40(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4109F4);
}

void sub_18A4111E8()
{
  __break(1u);
}

void sub_18A411314(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4112F0);
  }
  JUMPOUT(0x18A4112B4);
}

void sub_18A411A1C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A411980);
  }
  JUMPOUT(0x18A41191CLL);
}

void sub_18A411A2C()
{
  objc_end_catch();
  JUMPOUT(0x18A41191CLL);
}

void sub_18A411A44(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A411918);
}

uint64_t sqlite3Callback(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;

  if (*a3)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", *a3, 1);
    if (v4)
      objc_msgSend(a1, "addObject:", v4);

  }
  return 0;
}

void sub_18A412C28(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A413274()
{
  int v0;

  if (v0)
    objc_end_catch();
  JUMPOUT(0x18A4132A0);
}

void sub_18A413298(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A41329CLL);
  objc_terminate();
}

void sub_18A413540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4135F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A413DF4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A413D4CLL);
  }
  JUMPOUT(0x18A413D28);
}

void sub_18A413E04()
{
  objc_end_catch();
  JUMPOUT(0x18A413D28);
}

void sub_18A413E20(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A413D24);
}

void sub_18A414B1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A414A7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A414B2C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A414B44(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A414B4CLL);
  objc_terminate();
}

void sub_18A414F04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  __break(1u);
  JUMPOUT(0x18A414FE8);
}

void sub_18A414FF0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A414FCCLL);
  }
  JUMPOUT(0x18A414F68);
}

void sub_18A4155B4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4155F0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4155E0);
  JUMPOUT(0x18A41560CLL);
}

void sub_18A415600(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A415528);
  }
  JUMPOUT(0x18A4155E0);
}

#error "18A4158A0: call analysis failed (funcsize=35)"

void sub_18A416530(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4165A4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4165B4);
  JUMPOUT(0x18A416598);
}

void sub_18A4165C0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4165C8);
  JUMPOUT(0x18A416598);
}

void sub_18A4165D0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4165E8);
  JUMPOUT(0x18A416598);
}

void sub_18A4165F4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A416604);
  JUMPOUT(0x18A416598);
}

void sub_18A4166AC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A41660CLL);
  }
  JUMPOUT(0x18A416598);
}

void sub_18A416B28(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _NSCoreDataNow(sqlite3_context *a1, int a2)
{
  double v3;

  if (a2)
  {
    sqlite3_result_error(a1, "NSCoreDataNow: requires no arguments", 1);
  }
  else
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "date"), "timeIntervalSinceReferenceDate");
    sqlite3_result_double(a1, v3);
  }
}

void _NSCoreDataPrependExternalReferenceMarker(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  const void *v6;
  _BYTE *v7;
  const void *v8;
  const char *v9;

  if (a2 == 2)
  {
    v5 = sqlite3_value_int(*a3);
    v6 = sqlite3_value_blob(a3[1]);
    v7 = sqlite3_malloc(v5 + 1);
    if (v7)
    {
      v8 = v7;
      *v7 = 1;
      memcpy(v7 + 1, v6, v5);
      sqlite3_result_blob(a1, v8, v5 + 1, (void (__cdecl *)(void *))MEMORY[0x1E0DE87D0]);
      return;
    }
    v9 = "NSCoreDataPrependExternalReferenceMarker: malloc failure";
  }
  else
  {
    v9 = "NSCoreDataPrependExternalReferenceMarker: wrong number of parameters";
  }
  sqlite3_result_error(a1, v9, 1);
}

void _NSCoreDataLikeBridge(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned int v5;
  const char *v6;
  unsigned int v7;
  const unsigned __int8 *v8;
  const unsigned __int8 *v9;
  const char *v10;
  const __CFAllocator *v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a2 != 3)
  {
    v6 = "NSCoreDataLike: requres 3 arguments (value, pattern, variant)";
    goto LABEL_5;
  }
  v5 = sqlite3_value_int(a3[2]);
  if (v5 >= 4)
  {
    v6 = "NSCoreDataLike: variant must be an integer in the range [0,3]";
LABEL_5:
    sqlite3_result_error(a1, v6, 1);
    return;
  }
  v7 = v5;
  v8 = sqlite3_value_text(*a3);
  v9 = sqlite3_value_text(a3[1]);
  if (v8 && (v10 = (const char *)v9) != 0)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v11 = _PFStackAllocatorCreate((unint64_t *)&v16, 1024);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v13 = CFStringCreateWithCStringNoCopy(v11, (const char *)v8, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v14 = CFStringCreateWithCStringNoCopy(v11, v10, 0x8000100u, v12);
    v15 = sqlite3_user_data(a1);
    if (!*v15)
    {
      *v15 = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 7, 0, 0);
      v15[1] = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 7, 0, 1);
      v15[2] = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 7, 0, 2);
      v15[3] = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 7, 0, 3);
    }
    sqlite3_result_int(a1, objc_msgSend((id)v15[v7], "performOperationUsingObject:andObject:", v13, v14));
    if (*((_QWORD *)&v17 + 1))
    {
      if (v13)
        CFRelease(v13);
      if (v14)
        CFRelease(v14);
    }
  }
  else
  {
    sqlite3_result_int(a1, 0);
  }
}

void _NSCoreDataStringSearch(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  int v7;
  const __CFLocale *v8;
  const __CFAllocator *v9;
  const __CFAllocator *v10;
  const __CFString *v11;
  const __CFString *v12;
  _BOOL4 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  CFRange v47;

  v46 = *MEMORY[0x1E0C80C00];
  if (a2 != 4)
  {
    sqlite3_result_error(a1, "NSCoreStringSearch: requires 4 arguments (string1, string2, flags, localized)", 1);
    return;
  }
  v5 = sqlite3_value_text(*a3);
  v6 = sqlite3_value_text(a3[1]);
  v7 = sqlite3_value_int(a3[2]);
  if (sqlite3_value_int(a3[3]))
  {
    v8 = (const __CFLocale *)objc_msgSend(MEMORY[0x1E0CB3880], "retainedLocale");
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_13;
  }
  if (v6)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = _PFStackAllocatorCreate((unint64_t *)&v14, 1024);
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v11 = CFStringCreateWithCStringNoCopy(v9, (const char *)v5, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v12 = CFStringCreateWithCStringNoCopy(v9, (const char *)v6, 0x8000100u, v10);
    v47.length = CFStringGetLength(v11);
    v47.location = 0;
    v13 = CFStringFindWithOptionsAndLocale(v11, v12, v47, v7, v8, 0) != 0;
    sqlite3_result_int(a1, v13);
    if (*((_QWORD *)&v15 + 1))
    {
      if (v11)
        CFRelease(v11);
      if (v12)
        CFRelease(v12);
    }
    goto LABEL_14;
  }
LABEL_13:
  sqlite3_result_int(a1, 0);
LABEL_14:
  if (v8)
    CFRelease(v8);
}

void _NSCoreDataToUpper(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _NSCoreDataCaseSwitch(a1, a2, a3, 1);
}

void _NSCoreDataToLower(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _NSCoreDataCaseSwitch(a1, a2, a3, 0);
}

void _NSCoreDataCanonical(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const unsigned __int8 *v4;
  id v5;

  if (a2 == 1)
  {
    v4 = sqlite3_value_text(*a3);
    if (v4)
    {
      v5 = (id)-[objc_class newStringFrom:usingUnicodeTransforms:](NSClassFromString((NSString *)CFSTR("_NSPredicateOperatorUtilities")), "newStringFrom:usingUnicodeTransforms:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4), 387);
      sqlite3_result_text(a1, (const char *)objc_msgSend(v5, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

    }
    else
    {
      sqlite3_result_null(a1);
    }
  }
  else
  {
    sqlite3_result_error(a1, "NSCoreDataCanonical: requires one argument", 1);
  }
}

void _NSCoreDataMatchesBridge(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned int v5;
  const char *v6;
  unsigned int v7;
  const unsigned __int8 *v8;
  const unsigned __int8 *v9;
  const char *v10;
  const __CFAllocator *v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a2 != 3)
  {
    v6 = "NSCoreDataMatches: requres 3 arguments (value, pattern, variant)";
    goto LABEL_5;
  }
  v5 = sqlite3_value_int(a3[2]);
  if (v5 >= 4)
  {
    v6 = "NSCoreDataMatches: variant must be an integer in the range [0,3]";
LABEL_5:
    sqlite3_result_error(a1, v6, 1);
    return;
  }
  v7 = v5;
  v8 = sqlite3_value_text(*a3);
  v9 = sqlite3_value_text(a3[1]);
  if (v8 && (v10 = (const char *)v9) != 0)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v11 = _PFStackAllocatorCreate((unint64_t *)&v16, 1024);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v13 = CFStringCreateWithCStringNoCopy(v11, (const char *)v8, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v14 = CFStringCreateWithCStringNoCopy(v11, v10, 0x8000100u, v12);
    v15 = sqlite3_user_data(a1);
    if (!*v15)
    {
      *v15 = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 6, 0, 0);
      v15[1] = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 6, 0, 1);
      v15[2] = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 6, 0, 2);
      v15[3] = (id)objc_msgSend(MEMORY[0x1E0CB3888], "operatorWithType:modifier:options:", 6, 0, 3);
    }
    sqlite3_result_int(a1, objc_msgSend((id)v15[v7], "performOperationUsingObject:andObject:", v13, v14));
    if (*((_QWORD *)&v17 + 1))
    {
      if (v13)
        CFRelease(v13);
      if (v14)
        CFRelease(v14);
    }
  }
  else
  {
    sqlite3_result_int(a1, 0);
  }
}

CFComparisonResult _NSCoreDataCollateNoCaseBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 1uLL);
}

CFComparisonResult _NSCoreDataCollateNumericallyNoCaseBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x41uLL);
}

CFComparisonResult _NSCoreDataCollateLocaleSensitiveBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x20uLL);
}

CFComparisonResult _NSCoreDataCollateLocaleSensitiveCaseInsensitiveBridge(uint64_t a1, int a2, const UniChar *a3, int a4, const UniChar *a5)
{
  return _NSCoreDataDoStringCompare(a2, a3, a4, a5, 0x21uLL);
}

void _NSCoreDataTriggerUpdateAffectedObjectValue(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  sqlite3_int64 v6;
  sqlite3_int64 v7;
  const unsigned __int8 *v8;
  void *v9;

  if (a2 == 5)
  {
    v5 = sqlite3_value_text(*a3);
    v6 = sqlite3_value_int64(a3[1]);
    v7 = sqlite3_value_int64(a3[2]);
    v8 = sqlite3_value_text(a3[3]);
    sqlite3_value_int64(a3[4]);
    if (v5)
    {
      if (v8)
      {
        v9 = sqlite3_user_data(a1);
        -[NSSQLiteConnection triggerUpdatedRowInTable:withEntityID:primaryKey:columnName:newValue:]((uint64_t)v9, (uint64_t)v5, v6, v7);
      }
    }
  }
}

void _NSCoreDataDATriggerInsertUpdatedAffectedObjectValue(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _QWORD *v4;
  uint64_t v5;
  const unsigned __int8 *v6;
  sqlite3_int64 v7;
  sqlite3_int64 v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (a2 == 5)
  {
    v4 = sqlite3_user_data(a1);
    if (v4)
    {
      v5 = (uint64_t)v4;
      if (v4[24])
      {
        v6 = sqlite3_value_text(*a3);
        v7 = sqlite3_value_int64(a3[1]);
        v8 = sqlite3_value_int64(a3[2]);
        v9 = sqlite3_value_text(a3[3]);
        if (v6)
        {
          v10 = (uint64_t)v9;
          if (v9)
          {
            v11 = sqlite3_value_type(a3[4]);
            switch(v11)
            {
              case 3:
                v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", sqlite3_value_text(a3[4]));
                break;
              case 2:
                v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", sqlite3_value_double(a3[4]));
                break;
              case 1:
                v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", sqlite3_value_int64(a3[4]));
                break;
              default:
                v13 = 0;
                goto LABEL_15;
            }
            v13 = v12;
LABEL_15:
            v14 = (id)v13;
            -[NSSQLiteConnection derivedAttributeUpdatedInsertedRowInTable:withEntityID:primaryKey:columnName:newValue:](v5, (uint64_t)v6, v7, v8, v10, v13);

          }
        }
      }
    }
  }
}

void _NSCoreDataDATriggerUpdatedAffectedObjectValue(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _QWORD *v4;
  uint64_t v5;
  const unsigned __int8 *v6;
  sqlite3_int64 v7;
  sqlite3_int64 v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (a2 == 5)
  {
    v4 = sqlite3_user_data(a1);
    if (v4)
    {
      v5 = (uint64_t)v4;
      if (v4[24])
      {
        v6 = sqlite3_value_text(*a3);
        v7 = sqlite3_value_int64(a3[1]);
        v8 = sqlite3_value_int64(a3[2]);
        v9 = sqlite3_value_text(a3[3]);
        if (v6)
        {
          v10 = (uint64_t)v9;
          if (v9)
          {
            v11 = sqlite3_value_type(a3[4]);
            switch(v11)
            {
              case 3:
                v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", sqlite3_value_text(a3[4]));
                break;
              case 2:
                v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", sqlite3_value_double(a3[4]));
                break;
              case 1:
                v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", sqlite3_value_int64(a3[4]));
                break;
              default:
                v13 = 0;
                goto LABEL_15;
            }
            v13 = v12;
LABEL_15:
            v14 = (id)v13;
            -[NSSQLiteConnection derivedAttributeUpdatedRowInTable:withEntityID:primaryKey:columnName:newValue:](v5, (uint64_t)v6, v7, v8, v10, v13);

          }
        }
      }
    }
  }
}

void _NSPersistentHistoryBatchDeleteUpdateTrigger(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v5;
  sqlite3_int64 v6;
  const unsigned __int8 *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v5 = sqlite3_user_data(a1);
  v6 = sqlite3_value_int64(*a3);
  v7 = sqlite3_value_text(a3[1]);
  v8 = (void *)_sqlCoreLookupSQLEntityForEntityID((void *)objc_msgSend((id)objc_msgSend(v5, "adapter"), "sqlCore"), v6);
  v9 = +[_NSPersistentHistoryChange _propertyDataForEntity:withSetOfPropertyNames:]((uint64_t)_NSPersistentHistoryChange, v8, (void *)objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7)));
  v10 = objc_msgSend(v9, "length");
  v11 = sqlite3_malloc(v10);
  if (!v11)
    sqlite3_result_error(a1, "NSPersistentHistoryBatchDeleteUpdateTrigger: malloc failure", 1);
  objc_msgSend(v9, "getBytes:length:", v11, v10);

  sqlite3_result_blob(a1, v11, v10, (void (__cdecl *)(void *))MEMORY[0x1E0DE87D0]);
}

void _NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  const void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;

  if (a2 < 1)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 8 * a2;
    do
    {
      if (sqlite3_value_type(*(sqlite3_value **)(a3 + v5)) == 4)
      {
        v8 = objc_alloc(MEMORY[0x1E0C99D50]);
        v9 = sqlite3_value_blob(*(sqlite3_value **)(a3 + v5));
        v10 = (void *)objc_msgSend(v8, "initWithBytes:length:", v9, sqlite3_value_bytes(*(sqlite3_value **)(a3 + v5)));
        v11 = v10;
        if (v5)
        {
          v12 = +[_NSPersistentHistoryChange _mergeOldMask:andNewMask:]((uint64_t)_NSPersistentHistoryChange, v6, v10);

          v6 = v12;
        }
        else
        {
          v6 = v10;
        }
      }
      v5 += 8;
    }
    while (v7 != v5);
  }
  v13 = objc_msgSend(v6, "length");
  v14 = sqlite3_malloc(v13);
  if (!v14)
    sqlite3_result_error(a1, "_NSPersistentHistoryBatchDeleteUpdateTriggerDataBlobOperator: malloc failure", 1);
  objc_msgSend(v6, "getBytes:length:", v14, v13);

  sqlite3_result_blob(a1, v14, v13, (void (__cdecl *)(void *))MEMORY[0x1E0DE87D0]);
}

void _NSCoreDataDATriggerMergeableString(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  void *v5;
  const unsigned __int8 *v6;
  sqlite3_int64 v7;
  const unsigned __int8 *v8;
  const unsigned __int8 *v9;
  id v10;
  const void *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  const __CFString *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  if (a2 != 5)
  {
    v33 = "_NSCoreDataDATriggerMergeableString: requires five arguments";
LABEL_17:
    sqlite3_result_error(a1, v33, 1);
    return;
  }
  if (sqlite3_value_type(a3[4]) != 4)
  {
    if (sqlite3_value_type(a3[4]) == 5)
    {
      sqlite3_result_null(a1);
      return;
    }
    v33 = "_NSCoreDataDATriggerMergeableString: requires a transformable blob";
    goto LABEL_17;
  }
  v5 = sqlite3_user_data(a1);
  v6 = sqlite3_value_text(*a3);
  v7 = sqlite3_value_int64(a3[1]);
  v8 = sqlite3_value_text(a3[3]);
  if (v6)
  {
    v9 = v8;
    if (v8)
    {
      v10 = objc_alloc(MEMORY[0x1E0C99D50]);
      v11 = sqlite3_value_blob(a3[4]);
      v12 = (void *)objc_msgSend(v10, "initWithBytes:length:", v11, sqlite3_value_bytes(a3[4]));
      v41 = 0;
      v13 = _sqlCoreLookupSQLEntityForEntityID((void *)objc_msgSend((id)objc_msgSend(v5, "adapter"), "sqlCore"), v7);
      v14 = v13;
      if (v13)
        v15 = (void *)v13[5];
      else
        v15 = 0;
      v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v15, "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9)), "propertyDescription"), "derivationExpression"), "keyPath");
      if (v14)
        v17 = (void *)v14[5];
      else
        v17 = 0;
      v18 = -[objc_class transformedValueClass](NSClassFromString((NSString *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "objectForKey:", v16), "propertyDescription"), "valueTransformerName")), "transformedValueClass");
      if (v18)
      {
        v25 = (id)objc_msgSend((id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v18), (uint64_t)v12, (uint64_t)&v41), "computedValue");
        if (!v41)
        {
          v32 = v25;
          sqlite3_result_text(a1, (const char *)objc_msgSend(v25, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

          return;
        }
        _NSCoreDataLog(1, (uint64_t)CFSTR("Mergeable transformer failed with an error while trying to save a mergeable value, %@."), v26, v27, v28, v29, v30, v31, v41);
        v38 = (void *)MEMORY[0x1E0C99DA0];
        v39 = *MEMORY[0x1E0C99768];
        v42 = *MEMORY[0x1E0CB3388];
        v43[0] = v41;
        v37 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, &v42, 1);
        v36 = CFSTR("Mergeable transformer failed with an error while trying to save a mergeable value.");
        v34 = v38;
        v35 = v39;
      }
      else
      {
        _NSCoreDataLog(1, (uint64_t)CFSTR("Mergeable transformer class name is nil while trying to save a mergeable value."), v19, v20, v21, v22, v23, v24, v40);
        v34 = (void *)MEMORY[0x1E0C99DA0];
        v35 = *MEMORY[0x1E0C99768];
        v36 = CFSTR("Mergeable transformer class name is nil while trying to save a mergeable value.");
        v37 = 0;
      }
      objc_exception_throw((id)objc_msgSend(v34, "exceptionWithName:reason:userInfo:", v35, v36, v37));
    }
  }
}

uint64_t NSSQLiteRegisterMigrationFunctions(sqlite3 *a1, void *pApp)
{
  uint64_t function;

  function = sqlite3_create_function(a1, "NSPersistentHistoryMigrateUpdates", -1, 2052, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_NSPersistentHistoryMigrateUpdates, 0, 0);
  if ((_DWORD)function)
    sqlite3_create_function(a1, "NSPersistentHistoryMigrateUpdates", 0, 4, 0, 0, 0, 0);
  return function;
}

void _NSPersistentHistoryMigrateUpdates(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v5;
  sqlite3_int64 v6;
  sqlite3_int64 v7;
  id v8;
  const void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  CFMutableSetRef v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v5 = sqlite3_user_data(a1);
  v6 = sqlite3_value_int64(a3[1]);
  v7 = sqlite3_value_int64(a3[2]);
  v8 = objc_alloc(MEMORY[0x1E0C99D50]);
  v9 = sqlite3_value_blob(a3[3]);
  v10 = (void *)objc_msgSend(v8, "initWithBytes:length:", v9, sqlite3_value_bytes(a3[3]));
  if (v5)
  {
    v11 = (void *)*((_QWORD *)v5 + 25);
    v12 = (void *)objc_msgSend(*((id *)v5 + 3), "entityForID:", v7);
    v13 = (void *)*((_QWORD *)v5 + 2);
  }
  else
  {
    v12 = (void *)objc_msgSend(0, "entityForID:", v7);
    v11 = 0;
    v13 = 0;
  }
  v14 = (void *)objc_msgSend(v13, "entityForID:", v6);
  v15 = (void *)objc_msgSend(v11, "objectForKey:", objc_msgSend(v12, "name"));
  if (v15)
  {
    v16 = v15;
    v17 = (id)objc_msgSend(v15, "objectForKey:", v10);
    if (v17)
      goto LABEL_13;
  }
  else
  {
    v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v11, "setObject:forKey:", v16, objc_msgSend(v12, "name"));

  }
  v18 = +[_NSPersistentHistoryChange _updatedPropertiesForEntity:andData:]((uint64_t)_NSPersistentHistoryChange, v12, v10);
  if (-[__CFSet count](v18, "count"))
    v19 = (void *)-[__CFSet valueForKey:](v18, "valueForKey:", CFSTR("name"));
  else
    v19 = 0;
  v17 = +[_NSPersistentHistoryChange _propertyDataForEntity:withSetOfPropertyNames:]((uint64_t)_NSPersistentHistoryChange, v14, v19);
  if ((unint64_t)objc_msgSend(v16, "count") >= 0x3E9)
    objc_msgSend(v16, "removeAllObjects");
  objc_msgSend(v16, "setObject:forKey:", v17, v10);

LABEL_13:
  v20 = objc_msgSend(v17, "length");
  v21 = sqlite3_malloc(v20);
  if (!v21)
    sqlite3_result_error(a1, "NSPersistentHistoryMigrateUpdates: malloc failure", 1);
  objc_msgSend(v17, "getBytes:length:", v21, v20);

  sqlite3_result_blob(a1, v21, v20, (void (__cdecl *)(void *))MEMORY[0x1E0DE87D0]);
}

void _NSCoreDataCaseSwitch(sqlite3_context *a1, int a2, sqlite3_value **a3, int a4)
{
  const unsigned __int8 *v6;
  const char *v7;
  const __CFAllocator *v8;
  CFMutableStringRef Mutable;
  uint64_t v10;
  CFIndex v11;
  CFIndex Length;
  UInt8 *p_buffer;
  CFIndex v14;
  CFIndex usedBufLen;
  UInt8 buffer;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  CFRange v50;

  v49 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    v6 = sqlite3_value_text(*a3);
    if (v6)
    {
      v7 = (const char *)v6;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v8 = _PFStackAllocatorCreate((unint64_t *)&v17, 1024);
      Mutable = CFStringCreateMutable(v8, 0);
      CFStringAppendCString(Mutable, v7, 0x8000100u);
      if (a4)
        CFStringUppercase(Mutable, 0);
      else
        CFStringLowercase(Mutable, 0);
      v10 = -[__CFString lengthOfBytesUsingEncoding:](Mutable, "lengthOfBytesUsingEncoding:", 4);
      v11 = v10 + 1;
      Length = CFStringGetLength(Mutable);
      if (v10 + 1 >= 1024)
        p_buffer = (UInt8 *)malloc_type_malloc(v10 + 2, 0x1A47FDFBuLL);
      else
        p_buffer = &buffer;
      usedBufLen = 0;
      v50.location = 0;
      v50.length = Length;
      CFStringGetBytes(Mutable, v50, 0x8000100u, 0, 0, p_buffer, v11, &usedBufLen);
      v14 = usedBufLen;
      if (usedBufLen >= v11)
        v14 = v11;
      p_buffer[v14] = 0;
      sqlite3_result_text(a1, (const char *)p_buffer, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      if (*((_QWORD *)&v18 + 1))
      {
        if (Mutable)
          CFRelease(Mutable);
      }
      else
      {
        *((_QWORD *)&v17 + 1) = v17;
      }
      if (v11 >= 1024)
        free(p_buffer);
    }
    else
    {
      sqlite3_result_null(a1);
    }
  }
  else
  {
    sqlite3_result_error(a1, "NSCoreDataTo(Uppercase|Lowercase): requires one argument", 1);
  }
}

void sub_18A418FF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A418F0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A419300(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A41957C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const __CFString *a18, uint64_t a19, uint64_t a20,const __CFString *a21)
{
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 == 1)
  {
    v22 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 80) + 8) + 24) = 0;
    v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v24 = *MEMORY[0x1E0CB2D68];
    a18 = CFSTR("NSUnderlyingException");
    a19 = v24;
    a20 = (uint64_t)v22;
    a21 = CFSTR("Record fetch failed because fetching the record metadata hit an unhandled exception.");
    v25 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a20, &a18, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 72) + 8) + 40) = objc_msgSend(v23, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v25);
    objc_end_catch();
    JUMPOUT(0x18A419540);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A41B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A41C5A8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A41C5D4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A41C4B4);
  }
  JUMPOUT(0x18A41C5CCLL);
}

void sub_18A41CA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18A41DD24(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Unwind_Resume(a1);
}

void sub_18A41E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A41F0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A41F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A420210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

_QWORD *bufferResultSetAllocateWithVMMemory(unint64_t a1, int a2)
{
  vm_size_t v3;
  malloc_zone_t *v4;
  _QWORD *v5;
  malloc_zone_t *v6;
  _QWORD *v7;
  vm_map_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  vm_address_t v16;
  _QWORD *v17;
  _DWORD *v19;
  int v20;
  vm_address_t address;

  if (a1 <= 0x800)
    v3 = 0xFFFFLL;
  else
    v3 = a1;
  v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v4 = malloc_default_zone();
  v5 = malloc_type_zone_calloc(v4, 1uLL, 0x50uLL, 0x10900404577C156uLL);
  v5[2] = v3;
  *((_DWORD *)v5 + 6) = 2;
  *((_DWORD *)v5 + 8) = 1;
  v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v6 = malloc_default_zone();
  v7 = malloc_type_zone_malloc(v6, 0x10uLL, 0x80040B8603338uLL);
  v5[6] = v7;
  v7[1] = 0;
  address = 0;
  v8 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (a2)
    v9 = 754974723;
  else
    v9 = 754974721;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, v3, v9)
    || (v16 = address,
        v5[8] = address,
        *(_QWORD *)v5[6] = v16,
        v17 = (_QWORD *)v5[8],
        v5[9] = v17,
        *v17 = 0,
        address = 0,
        vm_allocate(*v8, &address, 0x800uLL, 754974721)))
  {
    _NSCoreDataLog(1, (uint64_t)CFSTR("*** vm_allocate(size=%lld) failed (error code=%d)\n"), v10, v11, v12, v13, v14, v15, v3);
    return 0;
  }
  else
  {
    v19 = (_DWORD *)address;
    v5[7] = address;
    v19[511] = 0;
    *v19 = 0;
    *((_DWORD *)v5 + 7) = 512;
    v20 = *((_DWORD *)v5 + 10);
    *((_DWORD *)v5 + 10) = v20 | 8;
    if (a2)
    {
      *((_DWORD *)v5 + 10) = v20 | 0x18;
      bufferResultSetNonPurgeable((uint64_t)v5);
    }
    *((_DWORD *)v5 + 9) = 0;
    *(_DWORD *)v5 = 0;
    v5[9] += 8;
  }
  return v5;
}

BOOL bufferResultSetNonPurgeable(uint64_t a1)
{
  _BOOL8 v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  if ((*(_BYTE *)(a1 + 40) & 0x10) == 0)
    return 0;
  v11 = 0;
  v3 = MEMORY[0x18D76C06C](*MEMORY[0x1E0C83DA0], *(_QWORD *)(a1 + 64), 0, &v11);
  v1 = v3 == 0;
  if (v3)
    _NSCoreDataLog(1, (uint64_t)CFSTR("%@ bufferResultSetNonPurgeable failed to set vm buffer as non-purgeable: %d"), v4, v5, v6, v7, v8, v9, a1);
  else
    *(_DWORD *)(a1 + 40) &= ~0x20u;
  return v1;
}

_QWORD *bufferResultSetAllocateWithBuffer(uint64_t a1, uint64_t a2)
{
  malloc_zone_t *v4;
  _QWORD *v5;
  malloc_zone_t *v6;
  _QWORD *v7;
  _DWORD *v8;

  v4 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v4 = malloc_default_zone();
  v5 = malloc_type_zone_calloc(v4, 1uLL, 0x50uLL, 0x10900404577C156uLL);
  v5[2] = a1;
  *((_DWORD *)v5 + 6) = 2;
  *((_DWORD *)v5 + 8) = 1;
  v6 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v6 = malloc_default_zone();
  v7 = malloc_type_zone_malloc(v6, 0x10uLL, 0x80040B8603338uLL);
  v5[6] = v7;
  v7[1] = 0;
  v5[8] = a2;
  *(_QWORD *)v5[6] = a2;
  v8 = (_DWORD *)v5[8];
  v5[9] = v8;
  *((_DWORD *)v5 + 9) = 0;
  *(_DWORD *)v5 = *v8;
  return v5;
}

BOOL bufferResultSetPurgeable(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  int v11;

  if ((*(_DWORD *)(a1 + 40) & 0x50) != 0x10)
    return 0;
  v11 = 1;
  v2 = MEMORY[0x18D76C06C](*MEMORY[0x1E0C83DA0], *(_QWORD *)(a1 + 64), 0, &v11);
  v9 = v2 == 0;
  if (v2)
    _NSCoreDataLog(1, (uint64_t)CFSTR("%@ bufferResultSetPurgeable failed to set vm buffer as purgeable: %d"), v3, v4, v5, v6, v7, v8, a1);
  else
    *(_DWORD *)(a1 + 40) |= 0x20u;
  return v9;
}

uint64_t _prepareObjectIDsOnBackgroundThread(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _PFTask *v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  _QWORD *v11;
  const void *v12;
  pthread_mutex_t *v13;
  pthread_cond_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  id v28;
  const void *v29;
  uint64_t i;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _PFArray *v37;
  pthread_mutex_t *v38;
  uint64_t v39;
  pthread_mutex_t *v40;
  _PFTask *v41;
  pthread_cond_t *v42;
  _PFTask *v44;
  uint64_t v45;
  uint64_t v46;
  pthread_cond_t *p_condition;
  pthread_mutex_t *p_lock;
  id v49;
  __CFArray *v50;
  const void *v51;
  pthread_cond_t *v52;
  pthread_mutex_t *v53;
  int v54;
  void *v55;
  int v56;
  id v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[132];

  v62[129] = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 24);
  v3 = *v2;
  if (*v2)
    v4 = *(_QWORD *)(v3 + 136);
  else
    v4 = 0;
  v5 = (void *)v2[1];
  v49 = (id)v2[2];
  v6 = (_QWORD *)v2[3];
  PF_FREE_OBJECT_ARRAY(v2);
  *(_QWORD *)(a1 + 24) = 0;
  v45 = v3;
  if (v3)
  {
    v7 = (void *)objc_msgSend(*(id *)(v3 + 8), "objectIDFactoryForSQLEntity:", *(_QWORD *)(v4 + 40));
    v46 = *(_QWORD *)(v3 + 112);
  }
  else
  {
    v7 = 0;
    v46 = 0;
  }
  v54 = *(_DWORD *)(v4 + 72);
  memset(v62, 0, 512);
  v61 = 1;
  v56 = v54 & 0x1C;
  v57 = v7;
  if (v56 == 4)
  {
    v50 = 0;
    v8 = 0;
    v9 = v45;
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v11 = PF_CALLOC_UNSCANNED_BYTES(0x28uLL);
    v9 = v45;
    *v11 = v45;
    v11[1] = Mutable;
    v50 = Mutable;
    v11[2] = v49;
    v11[3] = &v61;
    v11[4] = 0;
    v8 = -[_PFTask initWithFunction:withArgument:andPriority:]([_PFTask alloc], "initWithFunction:withArgument:andPriority:", _prepareFaultsOnBackgroundThread, v11, 2);
  }
  v12 = 0;
  v13 = (pthread_mutex_t *)(a1 + 32);
  v14 = (pthread_cond_t *)(a1 + 96);
  v44 = v8;
  p_condition = &v8->condition;
  p_lock = &v8->lock;
  v52 = (pthread_cond_t *)(a1 + 96);
  v53 = (pthread_mutex_t *)(a1 + 32);
  v55 = v5;
LABEL_9:
  while (1)
  {
    pthread_mutex_lock(v13);
    while (1)
    {
      v15 = objc_msgSend(v5, "count", v44);
      if (v15 >= 1)
        break;
      if (*v6)
        pthread_cond_wait(v14, v13);
      if (!*v6)
        goto LABEL_16;
    }
    objc_msgSend(v5, "getObjects:range:", v62, 0, v15);
    objc_msgSend(v5, "removeAllObjects");
LABEL_16:
    if (!(*v6 | v15))
      break;
    v16 = pthread_mutex_unlock(v13);
LABEL_19:
    if (v15 >= 1)
    {
      v18 = 0;
      while (1)
      {
        v60 = v18;
        v19 = v62[v18];
        v20 = *(_DWORD *)(v19 + 4) <= 0x40000000u ? *(_DWORD *)(v19 + 4) : 0;
        MEMORY[0x1E0C80A78](v16);
        v23 = (char *)&v44 - v22;
        v59 = v24;
        if (v20 > 0x200)
          v23 = (char *)NSAllocateScannedUncollectable();
        else
          bzero((char *)&v44 - v22, 8 * v21);
        v58 = v20;
        v25 = v23 ? v20 : 0;
        v26 = **(_QWORD **)(v19 + 64);
        if ((v54 & 1) != 0)
          break;
        if ((_DWORD)v25 == objc_msgSend(v57, "allocateBatch:count:", v23, v25))
          goto LABEL_40;
        v25 = 0;
LABEL_52:
        v37 = -[_PFArray initWithObjects:count:andFlags:]([_PFArray alloc], "initWithObjects:count:andFlags:", v23, v25, 30);
        v14 = v52;
        if (v58 >= 0x201)
          NSZoneFree(0, v23);
        fetchResultSetDeallocate(v19);
        v13 = v53;
        if (v56 == 4)
        {
          objc_msgSend(v49, "addObject:", v37);
        }
        else
        {
          v38 = p_lock;
          pthread_mutex_lock(p_lock);
          CFRetain(v37);
          CFArrayAppendValue(v50, v37);
          pthread_mutex_unlock(v38);
          pthread_cond_signal(p_condition);
        }
        v5 = v55;
        v39 = v60;

        v18 = v39 + 1;
        if (v18 == v15)
          goto LABEL_9;
      }
      v27 = _sqlEntityForEntityID(v46, *(unsigned int *)(v26 + 8));
      v28 = v57;
      if (v27 != v12)
        v28 = 0;
      if (v9)
      {
        v29 = v27;
        if (v27 != v12)
          v28 = (id)objc_msgSend(*(id *)(v9 + 8), "objectIDFactoryForSQLEntity:", v27);
      }
      else
      {
        v29 = v27;
      }
      v57 = v28;
      objc_msgSend(v28, "allocateBatch:count:", v23, v25);
      v12 = v29;
LABEL_40:
      if ((int)v25 >= 1)
      {
        v51 = v12;
        for (i = 0; i != v25; ++i)
        {
          while ((*(_DWORD *)v26 & 0x80000000) != 0)
          {
            v31 = *(unsigned int *)(v26 + 4);
            if ((v31 & 0x80000000) != 0)
              v26 = 0;
            else
              v26 = *(_QWORD *)(*(_QWORD *)(v19 + 64) + 8 * v31) + *(_QWORD *)(v26 + 16);
          }
          v32 = *(void **)&v23[8 * i];
          v33 = _PFSetPrimaryKey((unint64_t)v32, *(_QWORD *)(v26 + 24));
          if (v32 != (void *)v33)
          {
            v34 = v33;

            *(_QWORD *)&v23[8 * i] = v34;
          }
          v35 = *(unsigned int *)(v26 + 4);
          if ((v35 & 0x80000000) != 0)
            break;
          v36 = *(_QWORD *)(*(_QWORD *)(v19 + 64) + 8 * v35);
          if (!v36)
            break;
          v26 = v36 + *(_QWORD *)(v26 + 16);
        }
        v12 = v51;
        v9 = v45;
      }
      goto LABEL_52;
    }
  }
  v17 = objc_msgSend(v5, "count");
  v16 = pthread_mutex_unlock(v13);
  if (v17)
    goto LABEL_19;
  if (v56 != 4)
  {
    v61 = 0;
    v40 = p_lock;
    pthread_mutex_lock(p_lock);
    v41 = v44;
    v42 = p_condition;
    if (!v44->isFinishedFlag)
    {
      pthread_cond_signal(p_condition);
      while (!v41->isFinishedFlag)
        pthread_cond_wait(v42, v40);
    }
    pthread_mutex_unlock(v40);

    if (v50)
      CFRelease(v50);
  }
  return 0;
}

void setMultiColumnValueDictionary(char *a1, id *a2, void *a3)
{
  uint64_t v6;
  Class Class;
  NSKnownKeysDictionary *v8;
  NSKnownKeysDictionary *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  __CFString *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)a2;
  Class = object_getClass(a1);
  v8 = *(NSKnownKeysDictionary **)&a1[*((unsigned int *)object_getIndexedIvars(Class) + v6 + 19)];
  v9 = v8;
  v10 = (__CFString *)objc_msgSend(a2[2], "propertyDescription");
  if (!v8)
  {
    v22 = v10;
    v11 = (void *)objc_msgSend((id)objc_msgSend(a2[2], "propertyDescription"), "superCompositeAttribute");
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (void *)objc_msgSend(v11, "superCompositeAttribute");
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = -[NSKnownKeysMappingStrategy initForKeys:]([NSKnownKeysMappingStrategy alloc], "initForKeys:", objc_msgSend((id)objc_msgSend(v12, "elements"), "valueForKeyPath:", CFSTR("name")));
    v8 = -[NSKnownKeysDictionary initWithSearchStrategy:]([NSKnownKeysDictionary alloc], "initWithSearchStrategy:", v13);

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v14 = (void *)objc_msgSend(v12, "elements");
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v24;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v24 != v17)
            objc_enumerationMutation(v14);
          v19 = *(__CFString **)(*((_QWORD *)&v23 + 1) + 8 * v18);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            _createKnownKeysDictionaryForMultiColumnValue(v19, v8);
          ++v18;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v16);
    }
    v10 = v22;
  }
  v20 = -[NSPropertyDescription _elementPath](v10);
  if (*((_BYTE *)a2 + 12) == 8)
  {
    v21 = (void *)MEMORY[0x1E0C99D68];
    objc_msgSend(a3, "doubleValue");
    a3 = (void *)objc_msgSend(v21, "dateWithTimeIntervalSinceReferenceDate:");
  }
  -[NSKnownKeysDictionary setValue:forKeyPath:](v8, "setValue:forKeyPath:", a3, v20);
  snapshot_set_object(a1, *(_DWORD *)a2, (uint64_t)v8);
}

void setMultiColumnValueNullFlag(char *a1, _DWORD *a2)
{
  uint64_t v4;
  Class Class;
  id v6;
  id v7;

  v4 = *a2;
  Class = object_getClass(a1);
  v7 = *(id *)&a1[*((unsigned int *)object_getIndexedIvars(Class) + v4 + 19)];
  v6 = v7;
  if (!v7)
    a1[((unint64_t)*a2 >> 3) + 28] |= 1 << (*a2 & 7);

}

uint64_t _createKnownKeysDictionaryForMultiColumnValue(__CFString *a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSKnownKeysDictionary *v11;
  void *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = (void *)-[__CFString elements](a1, "elements");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(v4, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v9++), "name"));
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v7);
  }
  if (objc_msgSend(v4, "count"))
  {
    v10 = -[NSKnownKeysMappingStrategy initForKeys:]([NSKnownKeysMappingStrategy alloc], "initForKeys:", v4);
    v11 = -[NSKnownKeysDictionary initWithSearchStrategy:]([NSKnownKeysDictionary alloc], "initWithSearchStrategy:", v10);

    objc_msgSend(a2, "setValue:forKeyPath:", v11, -[NSPropertyDescription _elementPath](a1));
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v12 = (void *)-[__CFString elements](a1, "elements", 0);
  result = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (result)
  {
    v14 = result;
    v15 = *(_QWORD *)v19;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v19 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v16);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          _createKnownKeysDictionaryForMultiColumnValue(v17, a2);
        ++v16;
      }
      while (v14 != v16);
      result = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      v14 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _fireFaultsOnBackgroundThread(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;

  v2 = *(uint64_t **)(a1 + 24);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  PF_FREE_OBJECT_ARRAY(v2);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    v9 = *(_QWORD *)(v3 + 32);
    v3 = *(_QWORD *)(v3 + 128);
  }
  else
  {
    v9 = 0;
  }
  if (v6 < v7 + v6)
  {
    v10 = (char *)(v8 + v6);
    v11 = (void **)(v5 + 8 * v6);
    v12 = (uint64_t *)(v4 + 8 * v6);
    do
    {
      v13 = *v12;
      if (((*(_DWORD *)(*v12 + 16) >> 15) & 3 | 4) == 5)
      {
        v14 = *(_QWORD **)(v13 + 48);
        if (v14 && *v14)
        {
          v15 = 3;
        }
        else
        {
          _PFFaultHandlerFulfillFault(v3, v13, v9, *v11, 0);
          v15 = 1;
        }
        *v10 = v15;
      }
      ++v10;
      ++v11;
      ++v12;
      --v7;
    }
    while (v7);
  }
  return 0;
}

#error "18A422150: call analysis failed (funcsize=68)"

uint64_t _deallocateSQLRowCacheOnBackgroundThread(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  malloc_zone_t *v11;
  malloc_zone_t *v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v3[v5];

      *(_QWORD *)(v7 + 40) = 0;
      v5 = v6;
      v8 = v4 > v6++;
    }
    while (v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  while (!*(_QWORD *)(v2 + 16))
    pthread_cond_wait((pthread_cond_t *)(a1 + 96), (pthread_mutex_t *)(a1 + 32));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  if (v4)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      _PFDeallocateObject((id)v3[v9]);
      v9 = v10;
      v8 = v4 > v10++;
    }
    while (v8);
  }
  v11 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v11 = malloc_default_zone();
  malloc_zone_free(v11, v3);
  v12 = (malloc_zone_t *)_PF_Private_Malloc_Zone;
  if (!_PF_Private_Malloc_Zone)
    v12 = malloc_default_zone();
  malloc_zone_free(v12, *(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  return 0;
}

void sub_18A425B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  id *v33;
  uint64_t v34;

  if (a2)
  {
    objc_destroyWeak(v33);
    objc_destroyWeak((id *)(v34 - 96));
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A42599CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A425D5C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A425D9C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A425D7CLL);
}

void sub_18A42632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,const __CFString *a30,uint64_t a31,uint64_t a32,const __CFString *a33)
{
  id *v33;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;

  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  if (a2 == 1)
  {
    v36 = objc_begin_catch(a1);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a15 + 72) + 8) + 24) = 0;
    v37 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v38 = *MEMORY[0x1E0CB2D68];
    a30 = CFSTR("NSUnderlyingException");
    a31 = v38;
    a32 = (uint64_t)v36;
    a33 = CFSTR("Export encountered an unhandled exception while analyzing history in the store.");
    v39 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a32, &a30, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a15 + 64) + 8) + 40) = objc_msgSend(v37, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v39);
    objc_end_catch();
    JUMPOUT(0x18A4262E0);
  }
  _Unwind_Resume(a1);
}

void sub_18A42642C()
{
  objc_end_catch();
  JUMPOUT(0x18A42636CLL);
}

void sub_18A4265E8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A426644(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A4265A8);
}

void sub_18A426880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18A4268C0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4268B8);
}

void sub_18A426D0C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A426D34(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A426D14);
}

void sub_18A426D3C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A426C1CLL);
  }
  JUMPOUT(0x18A426D2CLL);
}

void sub_18A427C4C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const __CFString *a26,uint64_t a27,uint64_t a28,const __CFString *a29)
{
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;

  if (a2 == 3)
  {
    v29 = objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a18 + 56) + 8) + 24) = 0;
    v30 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v31 = *MEMORY[0x1E0CB2D68];
    a26 = CFSTR("NSUnderlyingException");
    a27 = v31;
    a28 = (uint64_t)v29;
    a29 = CFSTR("Export encountered an unhandled exception while analyzing history in the store.");
    v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a28, &a26, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a18 + 64) + 8) + 40) = objc_msgSend(v30, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v32);
    objc_end_catch();
    JUMPOUT(0x18A427668);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A427F20()
{
  objc_end_catch();
  JUMPOUT(0x18A427D2CLL);
}

void sub_18A42819C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4281F8(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A42815CLL);
}

void sub_18A428508(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A428C24(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A428ADCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A429064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18A4290A8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4290A0);
}

void sub_18A4290B8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A428ED0);
  }
  JUMPOUT(0x18A4290A0);
}

void sub_18A429278(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4292B8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A429298);
}

void sub_18A4294A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const __CFString *a18, uint64_t a19, uint64_t a20,const __CFString *a21)
{
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 == 1)
  {
    v22 = objc_begin_catch(exception_object);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 72) + 8) + 24) = 0;
    v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v24 = *MEMORY[0x1E0CB2D68];
    a18 = CFSTR("NSUnderlyingException");
    a19 = v24;
    a20 = (uint64_t)v22;
    a21 = CFSTR("Export encountered an unhandled exception while analyzing history in the store.");
    v25 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a20, &a18, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 64) + 8) + 40) = objc_msgSend(v23, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v25);
    objc_end_catch();
    JUMPOUT(0x18A42946CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A42978C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4297E8(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A429748);
}

uint64_t _PFModelMapTotalEntityCountForModel(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = +[_PFModelMap ancillaryModelFactoryClasses](_PFModelMap, "ancillaryModelFactoryClasses");
  v3 = objc_msgSend((id)objc_msgSend(a1, "entities"), "count");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v2);
        v3 += objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "ancillaryEntityCount");
      }
      while (v5 != v7);
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }
  return v3;
}

void sub_18A42C550(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A42C4F0);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t _PFCoreDataProcessInstanceUUID()
{
  uint64_t result;

  result = qword_1ECD8D810;
  if (!qword_1ECD8D810)
  {
    objc_opt_class();
    return qword_1ECD8D810;
  }
  return result;
}

Class override_class_superclass_0(objc_class *a1)
{
  objc_class *Superclass;

  Superclass = class_getSuperclass(a1);
  return class_getSuperclass(Superclass);
}

IMP generateReturnPointerMethod(uint64_t a1)
{
  void *v1;
  __CFArray *Mutable;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __generateReturnPointerMethod_block_invoke_0;
  aBlock[3] = &__block_descriptor_40_e9__v16__0_8l;
  aBlock[4] = a1;
  v1 = _Block_copy(aBlock);
  os_unfair_lock_lock_with_options();
  Mutable = (__CFArray *)qword_1ECD8DAE0;
  if (!qword_1ECD8DAE0)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    qword_1ECD8DAE0 = (uint64_t)Mutable;
  }
  CFArrayAppendValue(Mutable, v1);
  os_unfair_lock_unlock(&stru_1ECD8DADC);
  return imp_implementationWithBlock(v1);
}

void sub_18A42F3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;

  if (a2)
  {
    if (a2 == 3)
    {
      objc_begin_catch(exception_object);
      if (!a26 && +[NSMappingModel migrationDebugLevel](NSMappingModel, "migrationDebugLevel") >= 1)
      {
        v27 = (void *)MEMORY[0x1E0CB35C8];
        v28 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("Cannot migrate store in-place"));
        objc_msgSend(v27, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134110, v28);
      }
      if (a21)
      {
        v29 = (void *)MEMORY[0x1E0CB35C8];
        v30 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("Cannot migrate store in-place"));
        objc_msgSend(v29, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134110, v30);
      }
      objc_end_catch();
    }
    else
    {
      if (a2 == 2)
      {
        v31 = objc_begin_catch(exception_object);
        objc_exception_rethrow();
      }
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x18A42ECA0);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A42F57C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A42F54CLL);
  }
  JUMPOUT(0x18A42F5B8);
}

void sub_18A42F5B0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A42F5B4);
  objc_terminate();
}

void sub_18A431F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A432E78(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A432C88);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4351B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  objc_begin_catch(a1);
  JUMPOUT(0x18A434EECLL);
}

void sub_18A435A90(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A435A00);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A436AE8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A436A9CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4378C8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A437854);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A439DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A441234()
{
  objc_end_catch();
  JUMPOUT(0x18A441258);
}

void sub_18A441B34(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A442664(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4425FCLL);
}

void sub_18A442678(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4428BC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A442850);
}

void sub_18A4428D0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A445264(_Unwind_Exception *a1, int a2)
{
  void *v4;

  if (a2)
  {
    objc_end_catch();
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18A44508CLL);
    }
    objc_begin_catch(a1);

    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18A44527C(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A44508CLL);
  }
  objc_begin_catch(a1);

  objc_exception_rethrow();
}

void sub_18A4452C4(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A44508CLL);
  }
  objc_begin_catch(a1);

  objc_exception_rethrow();
}

void sub_18A44530C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A445358);
  JUMPOUT(0x18A44536CLL);
}

void sub_18A445344(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A445358);
}

void sub_18A445360(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A44536CLL);
  JUMPOUT(0x18A445358);
}

void sub_18A4453A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A445374);
  }
  _Unwind_Resume(a1);
}

void sub_18A4469D4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A446844);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A446E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A449768(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A44985C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A449864);
  _Unwind_Resume(a1);
}

void sub_18A44BDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
  a12(&a10);
  _Unwind_Resume(a1);
}

id returnBoolThing1(void *a1, const char *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "_underlyingProperty"), a2);
}

void sub_18A44E1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A44E534(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A44E608(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A44E930(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18A44EB80(void *a1)
{
  void *v1;
  void *v2;

  objc_begin_catch(a1);
  free(v2);
  free(v1);
  objc_exception_rethrow();
}

void sub_18A44EB9C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t preserveOrderKeysByForwardSkip(unsigned int *a1, int a2, int a3, char a4)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7;

  if (a2 < 1)
    return 0;
  result = 0;
  v6 = 0;
  v7 = a2;
  do
  {
    if (*a1)
    {
      if (*a1 <= v6)
      {
        if ((a4 & 1) != 0)
        {
          if ((int)v7 + (int)result < a3)
            return 0;
        }
        else
        {
          *a1 = 0;
        }
      }
      else
      {
        result = (result + 1);
        v6 = *a1;
      }
    }
    else if (v6)
    {
      ++v6;
    }
    else
    {
      v6 = 0;
    }
    ++a1;
    --v7;
  }
  while (v7);
  return result;
}

uint64_t preserveOrderKeysByReverseSkip(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (a2 < 1)
    return 0;
  result = 0;
  v6 = 0;
  v7 = a2;
  do
  {
    v8 = v7 - 1;
    v9 = *(_DWORD *)(a1 + 4 * (v7 - 1));
    if (v9)
    {
      if (v6 - 1 >= v9)
      {
        result = (result + 1);
        v6 = *(_DWORD *)(a1 + 4 * (v7 - 1));
      }
      else if ((a4 & 1) != 0)
      {
        if ((int)v7 + (int)result - 1 < a3)
          return 0;
      }
      else
      {
        *(_DWORD *)(a1 + 4 * (v7 - 1)) = 0;
      }
    }
    else if (v6-- == 0)
    {
      v6 = 0;
    }
    --v7;
  }
  while ((unint64_t)(v8 + 1) > 1);
  return result;
}

unint64_t _PF_SnowLeopard_CFDictionaryCreateWithObjectsAndKeys(uint64_t *a1, __CFString **a2, unint64_t a3)
{
  _BYTE *v6;
  unint64_t v7;
  __CFString *v8;
  __CFString *v9;
  uint64_t v10;

  v6 = malloc_type_malloc(0x28uLL, 0x27066D77uLL);
  v7 = (unint64_t)v6;
  *v6 = 1;
  v6[4] = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 4) = 0x10000;
  *((_WORD *)v6 + 1) |= 0x8000u;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  if (a3 < 5)
  {
    if (!a3)
      return v7;
  }
  else
  {
    *((_WORD *)v6 + 9) = 2;
    _PF_SnowLeopard_CFBasicHashRehash((uint64_t)v6, a3);
  }
  do
  {
    v9 = *a2++;
    v8 = v9;
    v10 = *a1++;
    _PF_SnowLeopard_CFBasicHashSetValue(v7, v8, v10);
    --a3;
  }
  while (a3);
  return v7;
}

void _PF_SnowLeopard_CFDictionaryDestroy(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  free(*(void **)(a1 + 24));
  free(*(void **)(v2 + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 12) & 8)));
  free((void *)a1);
}

uint64_t _PF_SnowLeopard_CFStringHashNSString(__CFString *a1)
{
  CFIndex Length;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  _WORD v9[32];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  v3 = Length;
  v4 = v9;
  if (Length >= 97)
  {
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v10, ((unint64_t)Length >> 1) - 16, 32);
    -[__CFString getCharacters:range:](a1, "getCharacters:range:", &v11, Length - 32, 32);
    v5 = (unsigned __int16 *)&v12;
    v6 = (unsigned __int16 *)&v12;
LABEL_5:
    v4 = v9;
    do
    {
      v3 = 16974593 * *v4 + 67503105 * v3 + 66049 * v4[1] + 257 * v4[2] + v4[3];
      v4 += 4;
    }
    while (v4 < v6);
    goto LABEL_9;
  }
  -[__CFString getCharacters:range:](a1, "getCharacters:range:", v9, 0, Length);
  v5 = &v9[Length];
  if ((uint64_t)(Length & 0xFFFFFFFFFFFFFFFCLL) >= 1)
  {
    v6 = &v9[Length & 0xFFFFFFFFFFFFFFFCLL];
    goto LABEL_5;
  }
LABEL_9:
  while (v4 < v5)
  {
    v7 = *v4++;
    v3 = 257 * v3 + v7;
  }
  return (v3 << (Length & 0x1F)) + v3;
}

unint64_t _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(uint64_t a1, __CFString *a2)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)(a1 + 4))
    return -1;
  if (_PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(a1 + 4)] <= 1uLL)
    v3 = 1;
  else
    v3 = _PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(a1 + 4)];
  result = _PF_SnowLeopard_CFStringHashNSString(a2) % v3;
  v5 = v3;
  while (*(_QWORD *)(*(_QWORD *)(a1 + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 12) & 8) + 24) + 8 * result))
  {
    if (v3 <= result + 1)
      v6 = v3;
    else
      v6 = 0;
    result = result + 1 - v6;
    if (!--v5)
      return -1;
  }
  return result;
}

unint64_t _PF_SnowLeopard_CFBasicHashFindBucket@<X0>(unint64_t result@<X0>, __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int8 *)(result + 4);
  if (!*(_BYTE *)(result + 4))
  {
    *(_OWORD *)a3 = xmmword_18A50A450;
    *(_OWORD *)(a3 + 16) = unk_18A50A460;
    return result;
  }
  v5 = result;
  if (_PF_SnowLeopard_CFBasicHashTableSizes[v3] <= 1uLL)
    v6 = 1;
  else
    v6 = _PF_SnowLeopard_CFBasicHashTableSizes[v3];
  result = _PF_SnowLeopard_CFStringHashNSString(a2);
  v7 = result % v6;
  v8 = *(_QWORD *)(v5 + (((unint64_t)*(unsigned __int16 *)(v5 + 2) >> 12) & 8) + 24);
  v9 = -1;
  v10 = v6;
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 8 * v7);
    if (v11 == -1)
    {
      if (v9 == -1)
        v9 = v7;
      goto LABEL_18;
    }
    if (!v11)
      break;
    if (v11 == 2814029233)
      v11 = 0;
    if (v11 == 2780474809)
      v12 = -1;
    else
      v12 = v11;
    if ((__CFString *)v12 == a2)
    {
      v12 = (uint64_t)a2;
LABEL_29:
      v14 = a3;
      *(_QWORD *)a3 = v7;
      v16 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7);
      if (v16 == 2814029233)
      {
        v16 = 0;
      }
      else if (v16 == 2780474809)
      {
        v16 = -1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      *(_QWORD *)(a3 + 16) = v16;
      v11 = 1;
      goto LABEL_34;
    }
    result = objc_msgSend((id)v12, "isEqual:", a2);
    if ((_DWORD)result)
      goto LABEL_29;
LABEL_18:
    if (v6 <= v7 + 1)
      v13 = v6;
    else
      v13 = 0;
    v7 = v7 + 1 - v13;
    if (!--v10)
    {
      v11 = 0;
      v14 = a3;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v9;
      goto LABEL_34;
    }
  }
  v14 = a3;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v9 == -1)
    v15 = v7;
  else
    v15 = v9;
  *(_QWORD *)a3 = v15;
LABEL_34:
  *(_QWORD *)(v14 + 24) = v11;
  return result;
}

void _PF_SnowLeopard_CFBasicHashRehash(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __CFString *v18;
  unint64_t Bucket_NoCollision;

  v3 = *(unsigned __int8 *)(a1 + 4);
  if (a2)
  {
    v3 = 0;
    while (_PF_SnowLeopard_CFBasicHashTableCapacities[v3] < (unint64_t)*(unsigned int *)(a1 + 8) + a2)
    {
      if (++v3 == 64)
      {
        v3 = 0;
        break;
      }
    }
  }
  v4 = _PF_SnowLeopard_CFBasicHashTableSizes[v3];
  v5 = _PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(a1 + 4)];
  if (v4 < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 8 * v4;
    v7 = malloc_type_malloc(8 * v4, 0x80040B8603338uLL);
    bzero(v7, v6);
    if (*(__int16 *)(a1 + 2) < 0)
    {
      v8 = malloc_type_malloc(v6, 0x80040B8603338uLL);
      bzero(v8, v6);
      goto LABEL_11;
    }
  }
  v8 = 0;
LABEL_11:
  *(_BYTE *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 16) = 0;
  v9 = *(uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (*(__int16 *)(a1 + 2) < 0)
  {
    v10 = *(uint64_t **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v8;
  }
  else
  {
    v10 = 0;
  }
  if (v5 >= 1)
  {
    v11 = v9;
    v12 = v10;
    do
    {
      v14 = *v11++;
      v13 = v14;
      if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (v13 == 2814029233)
          v13 = 0;
        if (v13 == 2780474809)
          v15 = -1;
        else
          v15 = v13;
        v16 = *(__int16 *)(a1 + 2);
        if (v16 < 0 && v10)
        {
          if (*v12 == 2780474809)
            v17 = -1;
          else
            v17 = *v12;
          if (*v12 == 2814029233)
            v18 = 0;
          else
            v18 = (__CFString *)v17;
          Bucket_NoCollision = _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(a1, v18);
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * Bucket_NoCollision) = v15;
        }
        else
        {
          if (v16 < 0)
            v18 = 0;
          else
            v18 = (__CFString *)v15;
          Bucket_NoCollision = _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(a1, v18);
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * Bucket_NoCollision) = v15;
          if (!v10)
            goto LABEL_36;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + (((unint64_t)*(unsigned __int16 *)(a1 + 2) >> 12) & 8) + 24)
                  + 8 * Bucket_NoCollision) = v18;
      }
LABEL_36:
      ++v12;
      --v5;
    }
    while (v5);
  }
  free(v9);
  free(v10);
}

unint64_t _PF_SnowLeopard_CFBasicHashAddValue(unint64_t result, unint64_t a2, __CFString *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v6 = result;
  v7 = 0;
  ++*(_WORD *)(result + 18);
  v8 = *(unsigned int *)(result + 8);
  while (1)
  {
    v9 = _PF_SnowLeopard_CFBasicHashTableCapacities[v7];
    if (v9 >= v8)
      break;
    if (++v7 == 64)
    {
      v9 = 0;
      break;
    }
  }
  v10 = (v8 + 1);
  if (v9 >= v10)
  {
    v11 = *(_QWORD *)(result + 24);
    if (*(_QWORD *)(v11 + 8 * a2) == -1)
      --*(_WORD *)(result + 16);
  }
  else
  {
    _PF_SnowLeopard_CFBasicHashRehash(result, 1);
    result = _PF_SnowLeopard_CFBasicHashFindBucket_NoCollision(v6, a3);
    a2 = result;
    v11 = *(_QWORD *)(v6 + 24);
    LODWORD(v10) = *(_DWORD *)(v6 + 8) + 1;
  }
  *(_QWORD *)(v11 + 8 * a2) = a4;
  *(_QWORD *)(*(_QWORD *)(v6 + (((unint64_t)*(unsigned __int16 *)(v6 + 2) >> 12) & 8) + 24) + 8 * a2) = a3;
  *(_DWORD *)(v6 + 8) = v10;
  return result;
}

unint64_t _PF_SnowLeopard_CFBasicHashSetValue(unint64_t a1, __CFString *a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  result = _PF_SnowLeopard_CFBasicHashFindBucket(a1, a2, (uint64_t)&v10);
  v7 = v10;
  if (!*((_QWORD *)&v11 + 1))
    return _PF_SnowLeopard_CFBasicHashAddValue(a1, v10, a2, a3);
  v9 = *(_QWORD *)(a1 + 24);
  v8 = a1 + 24;
  ++*(_WORD *)(v8 - 6);
  *(_QWORD *)(v9 + 8 * v7) = a3;
  *(_QWORD *)(*(_QWORD *)(v8 + (((unint64_t)*(unsigned __int16 *)(v8 - 22) >> 12) & 8)) + 8 * v7) = a2;
  return result;
}

uint64_t _PF_SnowLeopard_CFBasicHashGetBucket@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a3 = a2;
  v3 = a3 + 1;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *v3 = 0;
    a3[2] = 0;
    a3[3] = 0;
  }
  else
  {
    v5 = -1;
    if (v4 != 2780474809)
      v5 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2);
    if (v4 == 2814029233)
      v6 = 0;
    else
      v6 = v5;
    a3[2] = v6;
    a3[3] = 1;
    v7 = *(_QWORD *)(*(_QWORD *)(result + (((unint64_t)*(unsigned __int16 *)(result + 2) >> 12) & 8) + 24)
                   + 8 * a2);
    if (v7 == 2814029233)
    {
      v7 = 0;
    }
    else if (v7 == 2780474809)
    {
      v7 = -1;
    }
    *v3 = v7;
  }
  return result;
}

uint64_t _PF_SnowLeopard_CFDictionaryGetValues(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = _PF_SnowLeopard_CFBasicHashTableSizes[*(unsigned __int8 *)(result + 4)];
  if ((_DWORD)v2)
    v4 = v3 < 1;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      v12 = 0u;
      v13 = 0u;
      result = _PF_SnowLeopard_CFBasicHashGetBucket(v6, v7, &v12);
      if (*((_QWORD *)&v13 + 1))
      {
        --v2;
        if (v8 < v3)
        {
          v9 = v13;
          v10 = *((_QWORD *)&v13 + 1) - 1;
          do
          {
            *(_QWORD *)(a2 + 8 * v8++) = v9;
            v11 = v10-- != 0;
          }
          while (v11 && v8 < v3);
        }
      }
      if (v2 < 1)
        break;
      ++v7;
    }
    while (v7 < v3);
  }
  return result;
}

#error "18A452AE0: call analysis failed (funcsize=66)"

void sub_18A452B8C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A452B4CLL);
}

void sub_18A4580AC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A457FE0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4598FC()
{
  objc_end_catch();
  JUMPOUT(0x18A45991CLL);
}

void sub_18A459904(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A45990CLL);
  _Unwind_Resume(a1);
}

void sub_18A459914(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A45991CLL);
  objc_terminate();
}

void sub_18A45B54C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  id *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v35 = objc_begin_catch(a1);
    if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 2))
      NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Import operation interrupted during import: %@"));
    if (v35 && v35[5] == 134304)
    {
      objc_msgSend(v34[38], "reset");
      if (a29 && (v36 = *(_QWORD *)(a29 + 8)) != 0)
        v37 = *(void **)(v36 + 8);
      else
        v37 = 0;
      objc_msgSend(v37, "reset");
      *((_BYTE *)v34 + a26) = 0;
      STACK[0x2B0] = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134304, 0);
      v38 = (void *)objc_msgSend(v34, "retainedDelegate");
      v39 = v38;
      if (v38)
        objc_msgSend(v38, "operationWasInterruptedDuringImport:", v34);

    }
    goto LABEL_32;
  }
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A45B070);
  }
  v40 = objc_begin_catch(a1);
  objc_msgSend(v34[38], "reset");
  if (a29 && (v41 = *(_QWORD *)(a29 + 8)) != 0)
    v42 = *(void **)(v41 + 8);
  else
    v42 = 0;
  objc_msgSend(v42, "reset");
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v40, "userInfo"), "objectForKey:", CFSTR("com.apple.coredata.ubiquity.eat")), "BOOLValue"))
  {
    if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 2))
      NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  %@\nBailing because a required external data reference failed to download: %@"));
    *((_BYTE *)v34 + a26) = 0;
    v43 = (void *)MEMORY[0x1E0CB35C8];
    v44 = objc_msgSend(v40, "userInfo");
    v45 = objc_msgSend(v43, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134302, v44);
    STACK[0x2B0] = v45;
    -[_PFUbiquityRecordImportOperation notifyDelegateOfError:](v34, v45);
LABEL_32:
    objc_end_catch();
    JUMPOUT(0x18A45B06CLL);
  }
  v46 = (void *)objc_msgSend(v34[33], "persistentStoreCoordinator");
  a30 = MEMORY[0x1E0C809B0];
  a31 = 3221225472;
  a32 = (uint64_t)__40___PFUbiquityRecordImportOperation_main__block_invoke_3;
  a33 = (uint64_t)&unk_1E1EDD520;
  a34 = (uint64_t)v34;
  objc_msgSend(v46, "performBlockAndWait:", &a30);
  if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
  {
    objc_msgSend(v40, "userInfo");
    NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Error importing transaction log: %@, exception: %@\n User Info: %@"));
  }
  v47 = (void *)objc_msgSend(v40, "name");
  if ((objc_msgSend(v47, "isEqualToString:", *MEMORY[0x1E0C99768]) & 1) != 0)
  {
    v48 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v40, "userInfo"), "objectForKey:", CFSTR("PFUbiquitySetupDoFork")), "BOOLValue");
    v49 = *MEMORY[0x1E0CB28A8];
    if (v48)
    {
      v50 = (void *)MEMORY[0x1E0CB35C8];
      v51 = objc_msgSend(v40, "userInfo");
      v52 = 134302;
LABEL_31:
      v53 = objc_msgSend(v50, "errorWithDomain:code:userInfo:", v49, v52, v51);
      STACK[0x2B0] = v53;
      -[_PFUbiquityRecordImportOperation notifyDelegateOfError:](v34, v53);
      *((_BYTE *)v34 + a26) = 0;
      goto LABEL_32;
    }
  }
  else
  {
    v49 = *MEMORY[0x1E0CB28A8];
  }
  v52 = 134060;
  v50 = (void *)MEMORY[0x1E0CB35C8];
  if (v40)
    v51 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v40, CFSTR("exception"));
  else
    v51 = 0;
  goto LABEL_31;
}

void sub_18A45DBA8(_Unwind_Exception *a1, int a2)
{
  char v2;

  if (a2)
  {
    if ((v2 & 1) != 0)
      objc_end_catch();
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18A45DA80);
    }
    objc_begin_catch(a1);
    if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
      NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  An exception occurred during a log file export: %@ save notification contents: %@"));
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18A45DD5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A45DCF8);
  }
  _Unwind_Resume(a1);
}

void sub_18A45E5B8()
{
  __break(1u);
}

void sub_18A45E640(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A45E504);
}

void sub_18A45E658(void *a1)
{
  objc_end_catch();
  objc_begin_catch(a1);
  JUMPOUT(0x18A45E5ECLL);
}

uint64_t compareScoreVectors_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && a2)
    a2 = (_QWORD *)a2[45];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && a3)
    a3 = *(_QWORD *)(a3 + 360);
  return objc_msgSend(a2, "compare:", a3);
}

void sub_18A45F5D8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A45F534);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4605F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (!a2)
    _Unwind_Resume(a1);
  objc_begin_catch(a1);
  JUMPOUT(0x18A45FD94);
}

void sub_18A46078C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4607ACLL);
  JUMPOUT(0x18A4606A4);
}

void sub_18A460980(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A460998);
  }
  JUMPOUT(0x18A4606FCLL);
}

void sub_18A460F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  id v15;
  id v16;

  if (a2)
  {
    _Block_object_dispose((const void *)(v12 - 160), 8);
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A460DE4);
    }
    v15 = objc_begin_catch(exception_object);
    if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
    {
      objc_msgSend(v15, "userInfo");
      NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Exception while scanning for logs to import: %@\nuserInfo: %@"));
    }
    v16 = v15;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18A46103C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A460FC4);
  }
  JUMPOUT(0x18A460F88);
}

void sub_18A4612C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4619E0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A461A3C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A461A6CLL);
  JUMPOUT(0x18A461A30);
}

void sub_18A461A5C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A461A64);
  JUMPOUT(0x18A461A30);
}

void sub_18A461AAC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A461A78);
  }
  JUMPOUT(0x18A461A30);
}

void sub_18A461E18(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A461DACLL);
}

void sub_18A461E38()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A461E40);
  JUMPOUT(0x18A461E44);
}

void sub_18A46276C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4626ECLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A462BFC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A462B54);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4634A4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4634C4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A463458);
}

void sub_18A4636D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4639AC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4639B4);
  objc_terminate();
}

void sub_18A463B18(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A463B48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  sub_18A463B18(a1);
}

void sub_18A46413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A465314(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A46531CLL);
  objc_terminate();
}

void sub_18A4656B4(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A465708(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A465730);
  JUMPOUT(0x18A4656FCLL);
}

void sub_18A465718(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A465734);
  JUMPOUT(0x18A4656FCLL);
}

void sub_18A46573C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A465744);
  JUMPOUT(0x18A4656F8);
}

void sub_18A465AE8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4659D0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A465FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4662A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint8_t buf)
{
  int v27;

  if (v27)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A466398(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18A466128);
  }
  _Unwind_Resume(a1);
}

void sub_18A4663C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4663CCLL);
  objc_terminate();
}

void *standardizedURL(void *a1)
{
  void *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = a1;
  if (objc_msgSend(a1, "isFileURL"))
  {
    v2 = realpath_DARWIN_EXTSN((const char *)objc_msgSend((id)objc_msgSend(v1, "path"), "UTF8String"), 0);
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2), 0);
LABEL_6:
      v1 = (void *)v4;
      free(v3);
      return v1;
    }
    v5 = objc_msgSend(v1, "lastPathComponent");
    v6 = realpath_DARWIN_EXTSN((const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "URLByDeletingLastPathComponent"), "path"), "UTF8String"), 0);
    if (v6)
    {
      v3 = v6;
      v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6), 1), "URLByAppendingPathComponent:", v5);
      goto LABEL_6;
    }
  }
  return v1;
}

void sub_18A468390(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A46A950(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  id v35;

  if (a2)
  {
    if (a2 == 2)
    {
      v35 = objc_begin_catch(exc_buf);
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exc_buf);
    }
    JUMPOUT(0x18A46A2B8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A46BD00()
{
  __break(1u);
}

void sub_18A46BD70()
{
  objc_end_catch();
  JUMPOUT(0x18A46BD1CLL);
}

void sub_18A46BD7C()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A46BD84);
  JUMPOUT(0x18A46BD88);
}

void sub_18A46D16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A46DB94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  objc_begin_catch(a1);
  JUMPOUT(0x18A46DAD8);
}

void sub_18A46E650(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A46E54CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A46E930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A46EABC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A46EADC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A46EA98);
}

void sub_18A46F5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,void (*a21)(uint64_t a1),void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const __CFString *a27,const __CFString *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v33;
  id *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;

  objc_destroyWeak(v34);
  if (a2 == 1)
  {
    v40 = objc_begin_catch(a1);
    v41 = (void *)MEMORY[0x1E0CB35C8];
    v42 = *MEMORY[0x1E0CB2D68];
    *(_QWORD *)(v36 - 176) = CFSTR("CloudKit setup failed because it couldn't register a handler for the setup activity. There is another instance of this persistent store actively syncing with CloudKit in this process.");
    v43 = *MEMORY[0x1E0CB3308];
    a25 = v42;
    a26 = v43;
    *(_QWORD *)(v36 - 168) = objc_msgSend(v33, "URL");
    *(_QWORD *)(v36 - 160) = v40;
    a27 = CFSTR("NSUnderlyingException");
    a28 = CFSTR("activityIdentifier");
    *(_QWORD *)(v36 - 152) = *(_QWORD *)(v32 + 192);
    v44 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36 - 176, &a25, 4);
    v45 = (void *)objc_msgSend(v41, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134422, v44);
    objc_end_catch();
    objc_destroyWeak(&location);
    -[NSCloudKitMirroringDelegate resetAfterError:andKeepContainer:](v32, v45);
    v46 = *(void **)(v35 + 2368);
    objc_msgSend(v45, "domain");
    objc_msgSend(v45, "code");
    v47 = objc_msgSend(v46, "stringWithFormat:", CFSTR("Error %@:%ld"));
    a20 = v37;
    a21 = __40__NSCloudKitMirroringDelegate_tearDown___block_invoke;
    a22 = &unk_1E1EE0D88;
    a23 = v32;
    a24 = v47;
    -[NSCloudKitMirroringDelegate _openTransactionWithLabel:assertionLabel:andExecuteWorkBlock:](v32, (uint64_t)CFSTR("com.apple.coredata.cloudkit.teardown"), (uint64_t)CFSTR("CoreData: CloudKit Teardown"), (uint64_t)&location);
    JUMPOUT(0x18A46F588);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A4703F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18A470940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A470CD0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A471820()
{
  __break(1u);
}

void sub_18A471868()
{
  objc_end_catch();
  JUMPOUT(0x18A47183CLL);
}

void sub_18A471874()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A47187CLL);
  JUMPOUT(0x18A471880);
}

void sub_18A473508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  id *v35;

  objc_destroyWeak(v35);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A4738FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18A473AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A473D04(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A473E64(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A473E84(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A473E2CLL);
}

void sub_18A47453C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4746A4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4746C4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A47466CLL);
}

void sub_18A474AB8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A474AE4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A474A60);
  }
  JUMPOUT(0x18A474AD8);
}

void sub_18A4750C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  if (a2)
  {
    objc_destroyWeak(v24);
    objc_destroyWeak(&location);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A475058);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4753A0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A475358);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A475630(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A475798(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4757B8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A475760);
}

void sub_18A475960(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A475980(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  objc_begin_catch(a1);
  JUMPOUT(0x18A475910);
}

void sub_18A475E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A47606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_18A4766B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A476BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_18A477038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18A4777DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A47852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_18A479770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

#error "18A47AB40: call analysis failed (funcsize=29)"

void sub_18A47BFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A47C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A47CF34(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,const __CFString *a39,uint64_t a40,uint64_t a41,const __CFString *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;

  if (!a2)
    _Unwind_Resume(exc_buf);
  if (a2 == 2)
  {
    v47 = objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 64) + 8) + 24) = 0;
    v48 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v49 = *MEMORY[0x1E0CB2D68];
    a39 = CFSTR("NSUnderlyingException");
    a40 = v49;
    a41 = (uint64_t)v47;
    a42 = CFSTR("Attempt to schedule an import failed because of an unhandled exception.");
    v50 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a41, &a39, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 72) + 8) + 40) = objc_msgSend(v48, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v50);
    objc_end_catch();
    JUMPOUT(0x18A47CE78);
  }
  objc_begin_catch(exc_buf);
  JUMPOUT(0x18A47CE7CLL);
}

void sub_18A47E384(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A47E390(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const __CFString *a23,uint64_t a24,uint64_t a25,const __CFString *a26)
{
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 == 1)
  {
    v27 = objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 72) + 8) + 24) = 0;
    v28 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v29 = *MEMORY[0x1E0CB2D68];
    a23 = CFSTR("NSUnderlyingException");
    a24 = v29;
    a25 = (uint64_t)v27;
    a26 = CFSTR("Encountered an unhandled exception while marking zones needing recovery from Manatee identity loss.");
    v30 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a25, &a23, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 64) + 8) + 40) = objc_msgSend(v28, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v30);
    objc_end_catch();
    JUMPOUT(0x18A47E30CLL);
  }
  JUMPOUT(0x18A47E388);
}

void sub_18A47E44C()
{
  objc_end_catch();
  JUMPOUT(0x18A47E388);
}

void sub_18A47E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A47EC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_18A47F59C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18A480258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
      NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Checking log level threw: %@"));
    objc_end_catch();
    JUMPOUT(0x18A480240);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A481AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void sub_18A481B40(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A481B4CLL);
  JUMPOUT(0x18A481B34);
}

void sub_18A481B5C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A481B9CLL);
  JUMPOUT(0x18A481B34);
}

void sub_18A481B7C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A481B34);
  JUMPOUT(0x18A481B94);
}

void sub_18A481B8C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A481B94);
  JUMPOUT(0x18A481B34);
}

void sub_18A481C10(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A481BACLL);
  }
  JUMPOUT(0x18A481B34);
}

void sub_18A484564(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  id v26;
  id v27;
  id v28;
  id v29;

  if (a2)
  {
    if (a2 != 3)
    {
      if (a2 != 2)
      {
        objc_begin_catch(exc_buf);
        JUMPOUT(0x18A484368);
      }
      v28 = objc_begin_catch(exc_buf);
      if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 1))
        NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Unknown Exception encountered while performing setup for conflict: %@\n%@"));
      v29 = v28;
      objc_exception_throw(v28);
    }
    v26 = objc_begin_catch(exc_buf);
    if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 1))
    {
      objc_msgSend(v26, "userInfo");
      NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Exception encountered while performing setup for conflict: %@\n%@\nuserInfo: %@"));
    }
    v27 = v26;
    objc_exception_throw(v26);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A484848(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A48475CLL);
  }
  JUMPOUT(0x18A484664);
}

void sub_18A4858CC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4858EC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A48589CLL);
}

void sub_18A485ADC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A485A80);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A485C5C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A485C2CLL);
}

void sub_18A485D3C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A485D6C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A485D14);
}

void sub_18A485EA8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A485EDC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A485E54);
}

void sub_18A486020(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A486054(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A485FD4);
}

void sub_18A4863DC(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A48642C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4862CCLL);
  }
  JUMPOUT(0x18A486420);
}

void sub_18A48682C(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A486844(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A48684CLL);
  objc_terminate();
}

void sub_18A4868BC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4868DC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A486890);
}

void sub_18A486B84(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A486BBC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A486BE4);
  JUMPOUT(0x18A486BB0);
}

void sub_18A486BD8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A486AF0);
  }
  JUMPOUT(0x18A486BB0);
}

void sub_18A487028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_18A48709C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A486F94);
  }
  JUMPOUT(0x18A48708CLL);
}

void sub_18A4870B8(void *a1, int a2)
{
  char v2;

  if (a2)
  {
    if ((v2 & 1) != 0)
      JUMPOUT(0x18A4870C8);
    objc_begin_catch(a1);
    JUMPOUT(0x18A486F8CLL);
  }
  JUMPOUT(0x18A48708CLL);
}

void sub_18A4870D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A486F64);
  }
  JUMPOUT(0x18A48708CLL);
}

void sub_18A4870F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A486F8CLL);
  }
  JUMPOUT(0x18A48708CLL);
}

void sub_18A487100(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A487108);
  JUMPOUT(0x18A48708CLL);
}

void sub_18A487508(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A487484);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4877CC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A48772CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4882EC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4882BCLL);
}

void sub_18A488658(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A488608);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A488EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  id v23;
  void *v24;
  int v25;
  int v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void (*v30)(uint64_t);
  uint64_t *v31;
  void *v32;
  uint64_t v33;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A488DCCLL);
  }
  v23 = objc_begin_catch(a1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v24 = (void *)objc_msgSend(v23, "userInfo");
  else
    v24 = 0;
  v25 = objc_msgSend((id)objc_msgSend(v24, "objectForKey:", CFSTR("PFUbiquitySetupCheckForFork")), "BOOLValue");
  v26 = objc_msgSend((id)objc_msgSend(v24, "objectForKey:", CFSTR("PFUbiquitySetupDoFork")), "BOOLValue");
  if (v25
    && (v27 = (void *)objc_msgSend(v23, "name"),
        objc_msgSend(v27, "isEqualToString:", *MEMORY[0x1E0C99768])))
  {
    if (v22 && (v28 = *(_QWORD *)(v22 + 88)) != 0)
      v29 = *(void **)(v28 + 56);
    else
      v29 = 0;
    a22 = MEMORY[0x1E0C809B0];
    v30 = __70__PFUbiquitySwitchboardEntry_filePresenterWasNotifiedTransactionLogs___block_invoke;
    v31 = &a22;
  }
  else
  {
    if (!v26
      || (v32 = (void *)objc_msgSend(v23, "name"),
          !objc_msgSend(v32, "isEqualToString:", *MEMORY[0x1E0C99768])))
    {
      if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
        NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  %@\nException encountered while processing transaction logs: %@ with userInfo: %@"));
LABEL_23:
      objc_exception_rethrow();
    }
    if (v22 && (v33 = *(_QWORD *)(v22 + 88)) != 0)
      v29 = *(void **)(v33 + 56);
    else
      v29 = 0;
    a17 = MEMORY[0x1E0C809B0];
    v30 = __70__PFUbiquitySwitchboardEntry_filePresenterWasNotifiedTransactionLogs___block_invoke_2;
    v31 = &a17;
  }
  v31[1] = 3221225472;
  v31[2] = (uint64_t)v30;
  v31[3] = (uint64_t)&unk_1E1EDD520;
  v31[4] = v22;
  objc_msgSend(v29, "performBlockAndWait:");
  goto LABEL_23;
}

void sub_18A4890DC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A488F54);
  }
  JUMPOUT(0x18A488F0CLL);
}

void sub_18A489E9C(_Unwind_Exception *a1, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 == 3)
    {
      v2 = objc_begin_catch(a1);
      if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
      {
        objc_msgSend(v2, "userInfo");
        NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  %@\nException encountered while trying to recover from account change: %@ (%@)"));
      }
    }
    else
    {
      if (a2 != 2)
      {
        objc_begin_catch(a1);
        JUMPOUT(0x18A489C5CLL);
      }
      objc_begin_catch(a1);
      if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
        NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  %@\nException encountered while trying to recover from account change: %@"));
    }
    objc_end_catch();
    JUMPOUT(0x18A489C58);
  }
  _Unwind_Resume(a1);
}

void sub_18A48A08C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A48A090);
  objc_terminate();
}

void sub_18A48A49C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A48A4BC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A48A470);
}

void sub_18A48B9E0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A48BA0C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A48B99CLL);
  }
  JUMPOUT(0x18A48BA00);
}

#error "18A48C184: call analysis failed (funcsize=50)"

void sub_18A48C4B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A48C4C0(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const __CFString *a14, uint64_t a15, uint64_t a16, const __CFString *a17)
{
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 64) + 8) + 24) = 0;
    v19 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v20 = *MEMORY[0x1E0CB2D68];
    a14 = CFSTR("NSUnderlyingException");
    a15 = v20;
    a16 = (uint64_t)v18;
    a17 = CFSTR("Import failed because committing the metadata changes hit an unhandled exception.");
    v21 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a16, &a14, 2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 56) + 8) + 40) = objc_msgSend(v19, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v21);
    objc_end_catch();
    JUMPOUT(0x18A48C3F4);
  }
  JUMPOUT(0x18A48C4B8);
}

void sub_18A48C570()
{
  objc_end_catch();
  JUMPOUT(0x18A48C4B8);
}

void sub_18A48CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(exception_object);
}

void sub_18A48D748(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,const __CFString *a45,uint64_t a46,uint64_t a47,const __CFString *a48)
{
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;

  if (a2)
  {
    if (a2 == 2)
    {
      v49 = objc_begin_catch(exc_buf);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 72) + 8) + 24) = 0;
      v50 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v51 = *MEMORY[0x1E0CB2D68];
      a45 = CFSTR("NSUnderlyingException");
      a46 = v51;
      a47 = (uint64_t)v49;
      a48 = CFSTR("Import failed because applying the accumulated changes hit an unhandled exception.");
      v52 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a47, &a45, 2);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 56) + 8) + 40) = objc_msgSend(v50, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134421, v52);
      objc_end_catch();
      JUMPOUT(0x18A48D4ECLL);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A48D4F0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A48E980(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  id v21;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A48E8B0);
    }
    v21 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A48EA6C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A48EA40);
  }
  JUMPOUT(0x18A48EA18);
}

#error "18A48F134: call analysis failed (funcsize=49)"

void sub_18A48F974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A48FA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A490078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A49033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A490418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4904EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A491384(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_18A492010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4929C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_18A49384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_18A4943C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_18A494ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18A4961FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A496204(_Unwind_Exception *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A495F98);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A496264(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A496234);
  }
  _Unwind_Resume(a1);
}

void sub_18A496274(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    JUMPOUT(0x18A49627CLL);
  _Unwind_Resume(a1);
}

void sub_18A496284(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A496288);
  objc_terminate();
}

void sub_18A496ECC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  id v28;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A496B04);
    }
    v28 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A496F94(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A496F64);
  }
  JUMPOUT(0x18A496FBCLL);
}

void sub_18A496FA4()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A496FACLL);
  JUMPOUT(0x18A496FB0);
}

void sub_18A496FC4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A496FBCLL);
}

void sub_18A497910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_18A498410(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A498428(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A498434);
}

void sub_18A49884C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A498D34(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A498C28);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4998DC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A49975CLL);
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A499A00(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4999D0);
  }
  JUMPOUT(0x18A499980);
}

void sub_18A499B0C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A499B2C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A499AE0);
}

void sub_18A499F6C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A499F04);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A49A2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  int v28;
  uint64_t v29;

  if (v28)
    objc_end_catch();
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18A49A33C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A49A334);
}

void sub_18A49A34C(void *exc_buf, int a2)
{
  uint64_t v2;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (!*(_BYTE *)(*(_QWORD *)(v2 - 128) + 24))
      JUMPOUT(0x18A49A1DCLL);
    JUMPOUT(0x18A49A140);
  }
  JUMPOUT(0x18A49A334);
}

void sub_18A49A620(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A49A740()
{
  __break(1u);
}

void sub_18A49A77C()
{
  objc_end_catch();
  JUMPOUT(0x18A49A75CLL);
}

void sub_18A49A788()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A49A790);
  JUMPOUT(0x18A49A794);
}

void sub_18A49B2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A49B044);
  }
  _Unwind_Resume(a1);
}

void sub_18A49C4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

void sub_18A49C50C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A49C504);
}

#error "18A49C564: call analysis failed (funcsize=36)"

void sub_18A49C530(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A49C538);
  JUMPOUT(0x18A49C504);
}

void sub_18A49C5AC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A49C5B8);
  }
  JUMPOUT(0x18A49C504);
}

uint64_t globalObjectIDComparator_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void sub_18A49E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak(&a38);
  _Unwind_Resume(a1);
}

void sub_18A49EF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A49F474(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_end_catch();
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18A49F4C4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A49F3F4);
}

void sub_18A49F4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  _Block_object_dispose(&a64, 8);
  _Block_object_dispose((const void *)(v64 - 232), 8);
  JUMPOUT(0x18A49F4F4);
}

void sub_18A4A0CB4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4A0AB8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4A0DC4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4A03F8);
  }
  JUMPOUT(0x18A4A0DB0);
}

void sub_18A4A1FC4()
{
  JUMPOUT(0x18A4A2028);
}

void sub_18A4A1FCC(void *exc_buf, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A4A1D74);
    }
    objc_begin_catch(exc_buf);
    *(_BYTE *)(*(_QWORD *)(v2 - 120) + 24) = 0;
    objc_exception_rethrow();
  }
  JUMPOUT(0x18A4A2050);
}

void sub_18A4A2004(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4A1FDCLL);
  }
  JUMPOUT(0x18A4A2050);
}

void sub_18A4A2018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18A4A2058(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4A2050);
}

void sub_18A4A3530(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

void sub_18A4A3634(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A4A3348);
  }
  JUMPOUT(0x18A4A362CLL);
}

void sub_18A4A3BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A4A48A4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4A4818);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4A49C0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4A4834);
  }
  JUMPOUT(0x18A4A4994);
}

void sub_18A4A51F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4A53DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18A4A5BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  _Unwind_Resume(a1);
}

void sub_18A4A68DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t recordIDComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(a2, "recordName"), "caseInsensitiveCompare:", objc_msgSend(a3, "recordName"));
  if (!result)
  {
    result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "zoneID"), "zoneName"), "caseInsensitiveCompare:", objc_msgSend((id)objc_msgSend(a3, "zoneID"), "zoneName"));
    if (!result)
      return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "zoneID"), "ownerName"), "caseInsensitiveCompare:", objc_msgSend((id)objc_msgSend(a3, "zoneID"), "ownerName"));
  }
  return result;
}

void sub_18A4A71E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18A4A899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_18A4A9EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4AAA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_18A4AB190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_18A4AB730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4ADB6C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4ADB8C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4ADB44);
}

void sub_18A4ADC20(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4ADC40(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4ADBF8);
}

void sub_18A4ADCD4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4ADCF4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4ADCACLL);
}

void sub_18A4ADD70(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4ADD90(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4ADD48);
}

void sub_18A4AE74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  id v32;

  if (a2)
  {
    _Block_object_dispose((const void *)(v29 - 160), 8);
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A4AE2CCLL);
    }
    v32 = objc_begin_catch(exception_object);
    objc_exception_throw(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4AE840(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4AE814);
  }
  _Unwind_Resume(a1);
}

void sub_18A4AE860(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4AE868);
  objc_terminate();
}

void sub_18A4AEB50(void *exc_buf, int a2)
{
  id v2;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A4AE9F0);
    }
    v2 = objc_begin_catch(exc_buf);
    objc_exception_throw(v2);
  }
  JUMPOUT(0x18A4AEBD8);
}

void sub_18A4AEBB0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4AEB84);
  }
  JUMPOUT(0x18A4AEBD8);
}

void sub_18A4AEBC0(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4AF4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4AFAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2)
  {
    _Block_object_dispose(&a33, 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4AF9E0);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4B0764(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a2)
  {
    _Block_object_dispose(&STACK[0x2D0], 8);
    _Block_object_dispose(&STACK[0x250], 8);
    _Block_object_dispose(&a48, 8);
    objc_begin_catch(a1);
    JUMPOUT(0x18A4B057CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A4B1654(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4B166C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4B1674);
  objc_terminate();
}

void sub_18A4B1920(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4B196C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4B1980);
  }
  JUMPOUT(0x18A4B1960);
}

void sub_18A4B1988(void *exc_buf, int a2)
{
  char v2;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    if ((v2 & 1) != 0)
      JUMPOUT(0x18A4B1830);
    JUMPOUT(0x18A4B1810);
  }
  JUMPOUT(0x18A4B1960);
}

void sub_18A4B3114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A4B3808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4B391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4B486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4B4C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  int v17;
  va_list va;

  va_start(va, a17);
  if (v17)
    objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4B4CD0(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4B4CC8);
}

void sub_18A4B753C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4B7558(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4B7560);
  JUMPOUT(0x18A4B75D0);
}

void sub_18A4B7568(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x18A4B75E0);
}

void sub_18A4B758C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4B74A8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4B86B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18A4BB1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4BAD30);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4BB728(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4BB63CLL);
}

void sub_18A4BB788(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4BB790()
{
  JUMPOUT(0x18A4BB7A0);
}

void sub_18A4BB800()
{
  objc_end_catch();
  JUMPOUT(0x18A4BB7A8);
}

void sub_18A4BB80C()
{
  char v0;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A4BB814);
  JUMPOUT(0x18A4BB818);
}

void sub_18A4BC388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4BC2D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4BCDD8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4BCCC0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4BD328(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4BD288);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t _openFile(void *a1)
{
  const char *v1;
  int v3;
  unsigned int v4;
  stat v6;

  memset(&v6, 0, sizeof(v6));
  v1 = (const char *)objc_msgSend(a1, "fileSystemRepresentation");
  if (!stat(v1, &v6) && (v6.st_mode & 0xF000) == 0x8000 && v6.st_size >= 1)
  {
    v3 = open(v1, 0, 511);
    if ((v3 & 0x80000000) == 0)
    {
      v4 = v3;
      if (!fstat(v3, &v6) && (v6.st_mode & 0xF000) == 0x8000 && v6.st_size >= 1)
        return v4;
      close(v4);
    }
  }
  return -1;
}

uLong _crcFromBytes(const Bytef *a1, uInt a2)
{
  unsigned int v4;

  v4 = crc32(0, 0, 0);
  return crc32(v4, a1, a2);
}

Class initCoreSpotlightCSSearchableIndex()
{
  Class result;

  if (_MergedGlobals_89 != -1)
    dispatch_once(&_MergedGlobals_89, &__block_literal_global_35);
  result = objc_getClass("CSSearchableIndex");
  qword_1ECD8DB50 = (uint64_t)result;
  getCoreSpotlightCSSearchableIndexClass[0] = CoreSpotlightCSSearchableIndexFunction;
  return result;
}

Class initCoreSpotlightCSSearchableItem()
{
  Class result;

  if (_MergedGlobals_89 != -1)
    dispatch_once(&_MergedGlobals_89, &__block_literal_global_35);
  result = objc_getClass("CSSearchableItem");
  qword_1ECD8DB60 = (uint64_t)result;
  getCoreSpotlightCSSearchableItemClass = CoreSpotlightCSSearchableItemFunction;
  return result;
}

Class initCoreSpotlightCSSearchableItemAttributeSet()
{
  Class result;

  if (_MergedGlobals_89 != -1)
    dispatch_once(&_MergedGlobals_89, &__block_literal_global_35);
  result = objc_getClass("CSSearchableItemAttributeSet");
  qword_1ECD8DB68 = (uint64_t)result;
  getCoreSpotlightCSSearchableItemAttributeSetClass[0] = CoreSpotlightCSSearchableItemAttributeSetFunction;
  return result;
}

Class initCoreSpotlightCSCustomAttributeKey()
{
  Class result;

  if (_MergedGlobals_89 != -1)
    dispatch_once(&_MergedGlobals_89, &__block_literal_global_35);
  result = objc_getClass("CSCustomAttributeKey");
  qword_1ECD8DB70 = (uint64_t)result;
  getCoreSpotlightCSCustomAttributeKeyClass[0] = CoreSpotlightCSCustomAttributeKeyFunction;
  return result;
}

uint64_t CoreSpotlightCSSearchableIndexFunction()
{
  return qword_1ECD8DB50;
}

uint64_t CoreSpotlightCSSearchableItemFunction()
{
  return qword_1ECD8DB60;
}

uint64_t CoreSpotlightCSSearchableItemAttributeSetFunction()
{
  return qword_1ECD8DB68;
}

uint64_t CoreSpotlightCSCustomAttributeKeyFunction()
{
  return qword_1ECD8DB70;
}

void sub_18A4BF738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "18A4BFA88: call analysis failed (funcsize=68)"

void sub_18A4BFFC0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4BFFEC(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const __CFString *a12, uint64_t a13, uint64_t a14, const __CFString *a15)
{
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    if (a2 == 2)
    {
      v16 = objc_begin_catch(exc_buf);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 56) + 8) + 24) = 0;
      v17 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v18 = *MEMORY[0x1E0CB2D68];
      a12 = CFSTR("NSUnderlyingException");
      a13 = v18;
      a14 = (uint64_t)v16;
      a15 = CFSTR("Metadata migration failed due to an unhandled exception while fetching zone metadata.");
      v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a14, &a12, 2);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 8) + 40) = objc_msgSend(v17, "initWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134402, v19);
      objc_end_catch();
      JUMPOUT(0x18A4BFF78);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4BFF7CLL);
  }
  JUMPOUT(0x18A4BFFE0);
}

void sub_18A4C1D70()
{
  objc_end_catch();
  JUMPOUT(0x18A4C1B84);
}

void sub_18A4C2724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_18A4C2C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_18A4C3220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_18A4C5A7C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3F0], 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Unwind_Resume(a1);
}

#error "18A4C6478: call analysis failed (funcsize=86)"

void sub_18A4C64F4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4C64ACLL);
  }
  JUMPOUT(0x18A4C6350);
}

NSAttributeDescription *makeAttribute(uint64_t a1, uint64_t a2)
{
  NSAttributeDescription *v4;

  v4 = objc_alloc_init(NSAttributeDescription);
  -[NSPropertyDescription setName:](v4, "setName:", a1);
  -[NSAttributeDescription setAttributeType:](v4, "setAttributeType:", a2);
  return v4;
}

#error "18A4C8314: call analysis failed (funcsize=52)"

void sub_18A4C9D08(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4CA4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4CA93C()
{
  __break(1u);
}

void sub_18A4CA97C()
{
  objc_end_catch();
  JUMPOUT(0x18A4CA950);
}

void sub_18A4CA988(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4CAAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSBatchInsertResult *_executeBatchInsertRequest(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  id v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  int v17;
  void *v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t k;
  int v54;
  id v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint8_t buf[4];
  const char *v82;
  __int16 v83;
  int v84;
  _BYTE v85[128];
  _BYTE v86[128];
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend((id)a1, "persistentStoreRequest");
  v3 = v2;
  v68 = v2;
  if (!a1)
  {
    v54 = objc_msgSend(v2, "_secureOperation");
    v8 = objc_msgSend(v3, "resultType");
    v55 = (id)objc_msgSend(0, "mergePolicy");
    v4 = 0;
    v7 = 0;
    v67 = 0;
    v10 = v55 == NSMergeByPropertyObjectTrumpMergePolicy;
    if (!v54)
      goto LABEL_10;
    goto LABEL_5;
  }
  v4 = *(void **)(a1 + 24);
  v5 = objc_msgSend(v2, "_secureOperation");
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    v7 = (*(unsigned __int8 *)(v6 + 193) >> 2) & 1;
  else
    v7 = 0;
  v8 = objc_msgSend(v3, "resultType");
  v9 = (id)objc_msgSend(*(id *)(a1 + 32), "mergePolicy");
  v10 = v9 == NSMergeByPropertyObjectTrumpMergePolicy;
  if ((v5 & 1) != 0)
  {
LABEL_5:
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 1);
    v67 = 1;
    if (!a1)
      goto LABEL_10;
    goto LABEL_8;
  }
  v67 = 0;
LABEL_8:
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
    objc_msgSend(*(id *)(v11 + 208), "lock");
LABEL_10:
  -[NSSQLiteConnection beginTransaction]((uint64_t)v4);
  if (v8 == 1)
    v12 = 1;
  else
    v12 = v7;
  v66 = v8;
  if (v12 == 1
    && (!a1
      ? (v13 = 0)
      : (v13 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:](a1, 0)),
        v79 = 0u,
        v80 = 0u,
        v77 = 0u,
        v78 = 0u,
        (v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v77, v87, 16)) != 0))
  {
    v15 = *(_QWORD *)v78;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v78 != v15)
          objc_enumerationMutation(v13);
        -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(_QWORD **)(*((_QWORD *)&v77 + 1) + 8 * i));
        v17 = 1;
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v77, v87, 16);
    }
    while (v14);
  }
  else
  {
    v17 = 0;
  }
  if (a1)
    v18 = *(void **)(a1 + 8);
  else
    v18 = 0;
  v19 = (id *)_sqlCoreLookupSQLEntityForEntityDescription(v18, (_QWORD *)objc_msgSend(v68, "entity"));
  if (objc_msgSend(v68, "objectsToInsert"))
  {
    v20 = -[NSSQLiteConnection insertArray:forEntity:includeOnConflict:]((uint64_t)v4, (void *)objc_msgSend(v68, "objectsToInsert"), (uint64_t)v19, v10);
    goto LABEL_33;
  }
  if (objc_msgSend(v68, "dictionaryHandler"))
  {
    v20 = -[NSSQLiteConnection insertDictionaryBlock:forEntity:includeOnConflict:]((uint64_t)v4, objc_msgSend(v68, "dictionaryHandler"), v19, v10);
    goto LABEL_33;
  }
  if (objc_msgSend(v68, "managedObjectHandler"))
  {
    v20 = -[NSSQLiteConnection insertManagedObjectBlock:forEntity:includeOnConflict:]((uint64_t)v4, objc_msgSend(v68, "managedObjectHandler"), v19, v10);
LABEL_33:
    v21 = v20;
    if (v12)
      goto LABEL_34;
LABEL_51:
    v25 = 0;
    v30 = 0;
    goto LABEL_52;
  }
  v21 = 0;
  if (!v12)
    goto LABEL_51;
LABEL_34:
  if (a1)
    v22 = *(_QWORD *)(a1 + 88);
  else
    v22 = 0;
  v23 = (void *)-[NSSQLiteConnection gatherObjectIDsFromTable:]((uint64_t)v4, v22);
  v24 = (uint64_t)v23;
  if (v7 && objc_msgSend(v23, "count"))
  {
    -[NSSQLiteConnection processInsertRequest:]((uint64_t)v4, (_QWORD *)a1);
    if (!a1)
    {
      v25 = 0;
      v26 = 0;
      goto LABEL_42;
    }
    v25 = *(void **)(a1 + 72);
    goto LABEL_41;
  }
  v25 = 0;
  v26 = 0;
  if (a1)
LABEL_41:
    v26 = (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:](a1, 1);
LABEL_42:
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v74;
    do
    {
      for (j = 0; j != v27; ++j)
      {
        if (*(_QWORD *)v74 != v28)
          objc_enumerationMutation(v26);
        -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(_QWORD **)(*((_QWORD *)&v73 + 1) + 8 * j));
      }
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
    }
    while (v27);
  }
  v17 = 0;
  v30 = v24;
LABEL_52:
  -[NSSQLiteConnection commitTransaction]((uint64_t)v4);
  if (a1)
  {
    v31 = *(_QWORD *)(a1 + 8);
    if (v31)
    {
      if (*(_QWORD *)(v31 + 200))
      {
        if (v21)
        {
          v32 = objc_msgSend(v4, "registerCurrentQueryGenerationWithStore:");
          if ((_DWORD)v32)
          {
            v33 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Batch insert failed to generate a post transaction query generation with error %d");
            _NSCoreDataLog(17, v33, v34, v35, v36, v37, v38, v39, v32);
            v40 = __pflogFaultLog;
            if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v82) = v32;
              _os_log_fault_impl(&dword_18A253000, v40, OS_LOG_TYPE_FAULT, "CoreData: Batch insert failed to generate a post transaction query generation with error %d", buf, 8u);
            }
          }
        }
        else if ((int)-[NSSQLStoreRequestContext debugLogLevel](a1) >= 1)
        {
          _NSCoreDataLog(6, (uint64_t)CFSTR("Batch insert did not affect any rows, not registering a query generation"), v41, v42, v43, v44, v45, v46, v65);
        }
      }
    }
  }
  if (v66 == 2)
    v30 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v21);
  if (!objc_msgSend(v68, "resultType"))
    v30 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  if (a1)
    v47 = *(_QWORD *)(a1 + 24);
  else
    v47 = 0;
  -[NSSQLiteConnection _performPostSaveTasks:andForceFullVacuum:](v47, v67, 0);
  if (a1 && (v48 = *(_QWORD *)(a1 + 8)) != 0)
  {
    objc_msgSend(*(id *)(v48 + 208), "unlock");
    v49 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v49 = 0;
  }
  -[NSSQLCore _postChangeNotificationWithTransactionID:](v49, v25);
  -[NSSQLiteConnection endFetchAndRecycleStatement:]((uint64_t)v4, 0);
  if (v17)
  {
    v50 = a1 ? (void *)-[NSSQLBatchOperationRequestContext createObjectIDCaptureStatementsForDrop:](a1, 1) : 0;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
    if (v51)
    {
      v52 = *(_QWORD *)v70;
      do
      {
        for (k = 0; k != v51; ++k)
        {
          if (*(_QWORD *)v70 != v52)
            objc_enumerationMutation(v50);
          -[NSSQLiteConnection prepareAndExecuteSQLStatement:]((uint64_t)v4, *(_QWORD **)(*((_QWORD *)&v69 + 1) + 8 * k));
        }
        v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
      }
      while (v51);
    }
  }
  if (v67)
    -[NSSQLiteConnection setSecureDeleteMode:]((uint64_t)v4, 0);
  if (v30)
    return -[NSBatchInsertResult initWithResultType:andObject:]([NSBatchInsertResult alloc], "initWithResultType:andObject:", objc_msgSend(v68, "resultType"), v30);
  v57 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Illegal attempt to return an error without one in %s:%d");
  _NSCoreDataLog(17, v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Persistence/sqlcore/NSSQLCore_Functions.m");
  v64 = __pflogFaultLog;
  if (os_log_type_enabled((os_log_t)__pflogFaultLog, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315394;
    v82 = "/Library/Caches/com.apple.xbs/Sources/Persistence/sqlcore/NSSQLCore_Functions.m";
    v83 = 1024;
    v84 = 750;
    _os_log_fault_impl(&dword_18A253000, v64, OS_LOG_TYPE_FAULT, "CoreData: Illegal attempt to return an error without one in %s:%d", buf, 0x12u);
  }
  return 0;
}

void sub_18A4CB784(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4CB73CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A4CB798(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4CB7C8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4CB7D4);
}

uint64_t _deleteExternalDataReferences(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(a1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "_deleteExternalReferenceFromPermanentLocation");
      }
      while (v3 != v5);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _deleteFileBackedFutures(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v10;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(a1);
        v6 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v5);
        if (v6)
          v7 = *(void **)(v6 + 8);
        else
          v7 = 0;
        v8 = objc_msgSend(v7, "path");
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v8, 0);
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

CFMutableArrayRef _rowsForConflictDetection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 0), "entity");
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 120) & 4) != 0)
    {
      v6 = *(_QWORD **)(v5 + 72);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v5;
        v5 = objc_msgSend((id)v5, "superentity");
      }
      while (v5);
    }
  }
  else
  {
    v6 = 0;
  }
  v15 = objc_msgSend((id)_sqlCoreLookupSQLEntityForEntityDescription(a1, v6), "tableName");
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    v11 = CFSTR("%qi");
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(a2);
        v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", v11, objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v12), "objectID"), "_referenceData64"));
        objc_msgSend(v7, "appendString:", v13);

        ++v12;
        v11 = CFSTR(", %qi");
      }
      while (v9 != v12);
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      v11 = CFSTR(", %qi");
    }
    while (v9);
  }
  return -[NSSQLiteConnection copyRawIntegerRowsForSQL:](a3, (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT %@,%@ FROM %@ WHERE %@ IN (%@) ORDER BY %@"), CFSTR("Z_PK"), CFSTR("Z_OPT"), v15, CFSTR("Z_PK"), v7, CFSTR("Z_PK")));
}

uint64_t compareManagedObjectsBySQLPKs(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend((id)objc_msgSend(a1, "objectID"), "_referenceData64");
  v4 = objc_msgSend((id)objc_msgSend(a2, "objectID"), "_referenceData64");
  v5 = -1;
  if (v3 >= v4)
    v5 = 1;
  if (v3 == v4)
    return 0;
  else
    return v5;
}

uint64_t _newConflictRecordForObject(void *a1, void *a2, unint64_t a3, int a4)
{
  NSKnownKeysDictionary *v8;
  NSKnownKeysDictionary *v9;
  NSMergeConflict *v10;
  uint64_t v11;
  NSKnownKeysDictionary *v12;
  uint64_t v13;

  v8 = _newObjectGraphStyleForSQLRow(a2, a1);
  v9 = _newObjectGraphStyleForSQLRow((void *)a3, a1);
  v10 = [NSMergeConflict alloc];
  if (a3)
    a3 = objc_msgSend((id)a3, "_versionNumber");
  if (a2)
    v11 = objc_msgSend(a2, "_versionNumber");
  else
    v11 = 0;
  if (a4)
    v12 = 0;
  else
    v12 = v9;
  v13 = -[NSMergeConflict initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:](v10, "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:", a1, a3, v11, v8, v12);

  return v13;
}

void *_performExhaustiveOptimisticLockingDetectionForSaveRequest(uint64_t a1, void *a2, int a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSSQLCore *v16;
  uint64_t v17;
  void *v18;
  _QWORD *ValueAtIndex;
  void *v20;
  void *v21;
  os_unfair_lock_s *v22;
  NSSQLObjectFaultRequestContext *v23;
  id *p_isa;
  NSSQLiteConnection *v25;
  NSSQLFetchRequestContext *v26;
  uint64_t v27;
  NSSQLObjectFaultRequestContext *v28;
  id *v29;
  NSSQLiteConnection *v30;
  NSSQLFetchRequestContext *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t connection;
  uint64_t v59;
  void *v60;
  void *v62;
  CFMutableArrayRef cf;
  uint64_t v64;
  unint64_t Count;
  uint64_t v66;
  void *v67;
  void *v68;
  unint64_t idx;
  NSSQLObjectFaultRequestContext *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[128];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v70 = (NSSQLObjectFaultRequestContext *)a1;
  if (a1 && (a1 = *(_QWORD *)(a1 + 96)) != 0 && (v4 = *(_QWORD *)(a1 + 8)) != 0)
    v5 = *(void **)(v4 + 32);
  else
    v5 = 0;
  v6 = -[NSSQLSavePlan newObjectsForExhaustiveLockConflictDetection](a1);
  if (v5)
  {
    if (objc_msgSend(a2, "count"))
    {
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
      if (v7)
      {
        v8 = *(_QWORD *)v76;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v76 != v8)
              objc_enumerationMutation(a2);
            objc_msgSend(v6, "addObject:", objc_msgSend(v5, "objectWithID:", *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * i)));
          }
          v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
        }
        while (v7);
      }
    }
  }
  v68 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v72;
    do
    {
      for (j = 0; j != v10; ++j)
      {
        if (*(_QWORD *)v72 != v11)
          objc_enumerationMutation(a2);
        v13 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * j);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          v13 = (void *)objc_msgSend(v13, "objectID");
        if (v13)
          objc_msgSend(v68, "addObject:", v13);
      }
      v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
    }
    while (v10);
  }
  v64 = -[NSSQLStoreRequestContext rowCache](v70, "rowCache");
  if (v70)
    connection = (uint64_t)v70->super._connection;
  else
    connection = 0;
  v14 = objc_msgSend(v6, "count");
  v62 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (v14)
  {
    v60 = (void *)+[_PFRoutines _groupObjectsByRootEntity:]((uint64_t)_PFRoutines, v6);
    v59 = objc_msgSend(v60, "count");
    if (v59)
    {
      v15 = 0;
      cf = 0;
      while (1)
      {
        v67 = (void *)objc_msgSend((id)objc_msgSend(v60, "objectAtIndex:", v15), "sortedArrayUsingFunction:context:", compareManagedObjectsBySQLPKs, 0);
        if (cf)
          CFRelease(cf);
        v16 = v70 ? v70->super._sqlCore : 0;
        cf = _rowsForConflictDetection(v16, v67, connection);
        Count = CFArrayGetCount(cf);
        v66 = objc_msgSend(v67, "count");
        if (v66)
          break;
LABEL_75:
        if (++v15 == v59)
        {
          if (cf)
            CFRelease(cf);
          goto LABEL_80;
        }
      }
      v17 = 0;
      idx = 1;
      while (1)
      {
        v18 = (void *)MEMORY[0x18D76B4E4]();
        if (idx >= Count)
          ValueAtIndex = 0;
        else
          ValueAtIndex = CFArrayGetValueAtIndex(cf, idx);
        v20 = (void *)objc_msgSend(v67, "objectAtIndex:", v17);
        v21 = (void *)objc_msgSend(v20, "objectID");
        v22 = -[NSSQLSaveChangesRequestContext originalRowForObjectID:]((uint64_t)v70, v21);
        if (!v22)
        {
          v23 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v70, (uint64_t)v21);
          p_isa = (id *)&v23->super.super.isa;
          if (v23)
            v23->_forConflictAnalysis = 1;
          if (v70)
            v25 = v70->super._connection;
          else
            v25 = 0;
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v23, v25);
          -[NSSQLStoreRequestContext setQueryGenerationToken:](p_isa, 0);
          v26 = _executeObjectFaultRequest((uint64_t)p_isa);
          v22 = (os_unfair_lock_s *)v26;
          if (v70 && v26)
            -[NSSQLiteConnection setObject:forKey:](v70[1].super._connection, "setObject:forKey:", v26, v21);
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)p_isa, 0);

        }
        if (!ValueAtIndex || objc_msgSend(v21, "_referenceData64") != *ValueAtIndex)
          break;
        if (v22)
          v27 = *(unsigned int *)(*(_QWORD *)&v22[10]._os_unfair_lock_opaque + 12);
        else
          v27 = 0;
        if (v27 != ValueAtIndex[1]
          || objc_msgSend(v68, "containsObject:", -[os_unfair_lock_s objectID](v22, "objectID")))
        {
          v28 = -[NSSQLStoreRequestContext createNestedObjectFaultContextForObjectWithID:](v70, (uint64_t)v21);
          v29 = (id *)&v28->super.super.isa;
          if (v28)
            v28->_forConflictAnalysis = 1;
          if (v70)
            v30 = v70->super._connection;
          else
            v30 = 0;
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v28, v30);
          -[NSSQLStoreRequestContext setQueryGenerationToken:](v29, 0);
          v31 = _executeObjectFaultRequest((uint64_t)v29);
          -[NSSQLStoreRequestContext setConnection:]((uint64_t)v29, 0);

          v32 = (void *)_newConflictRecordForObject(v20, v22, (unint64_t)v31, a3);
          if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v70) < 2)
          {
            if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v70) >= 1)
              _NSCoreDataLog(4, (uint64_t)CFSTR("Optimistic locking failure for %@.  Row was updated."), v51, v52, v53, v54, v55, v56, (uint64_t)v21);
          }
          else
          {
            _NSCoreDataLog(4, (uint64_t)CFSTR("Optimistic locking failure for %@.  Row was updated.  Original row = %@ New Row = %@"), v33, v34, v35, v36, v37, v38, (uint64_t)v21);
          }
          goto LABEL_65;
        }
LABEL_67:
        ++idx;
LABEL_68:
        objc_autoreleasePoolPop(v18);
        if (v66 == ++v17)
          goto LABEL_75;
      }
      v32 = (void *)_newConflictRecordForObject(v20, v22, 0, 0);
      -[NSPersistentStoreCache forgetRowForObjectID:](v64, v21);
      if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v70) < 2)
      {
        if ((int)-[NSSQLStoreRequestContext debugLogLevel]((uint64_t)v70) >= 1)
          _NSCoreDataLog(4, (uint64_t)CFSTR("Optimistic locking failure for %@.  Row was deleted."), v45, v46, v47, v48, v49, v50, (uint64_t)v21);
      }
      else
      {
        _NSCoreDataLog(4, (uint64_t)CFSTR("Optimistic locking failure for %@.  Row was deleted.  Original row = %@ New Row = <deleted>"), v39, v40, v41, v42, v43, v44, (uint64_t)v21);
      }
      v31 = 0;
LABEL_65:
      if (v32)
      {
        objc_msgSend(v62, "addObject:", v32);

        if (!v31)
          goto LABEL_68;
      }
      goto LABEL_67;
    }
  }
LABEL_80:
  if (objc_msgSend(v62, "count"))
    return v62;
  else
    return 0;
}

void sub_18A4CC33C()
{
  objc_end_catch();
  JUMPOUT(0x18A4CC378);
}

void sub_18A4CC35C()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A4CC364);
  JUMPOUT(0x18A4CC378);
}

void sub_18A4CC36C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    objc_terminate();
  _Unwind_Resume(a1);
}

uint64_t ___prefetchRelationshipKeys_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;

  v4 = objc_msgSend(a2, "_referenceData64");
  if (v4 < objc_msgSend(a3, "_referenceData64"))
    return -1;
  else
    return 1;
}

void setMultiColumnValueDictionary_0(char *a1, id *a2, uint64_t a3)
{
  uint64_t v6;
  Class Class;
  NSKnownKeysDictionary *v8;
  NSKnownKeysDictionary *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)a2;
  Class = object_getClass(a1);
  v8 = *(NSKnownKeysDictionary **)&a1[*((unsigned int *)object_getIndexedIvars(Class) + v6 + 19)];
  v9 = v8;
  v10 = (__CFString *)objc_msgSend(a2[2], "propertyDescription");
  if (!v8)
  {
    v11 = (void *)objc_msgSend((id)objc_msgSend(a2[2], "propertyDescription"), "superCompositeAttribute");
    v20 = a3;
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (void *)objc_msgSend(v11, "superCompositeAttribute");
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = -[NSKnownKeysMappingStrategy initForKeys:]([NSKnownKeysMappingStrategy alloc], "initForKeys:", objc_msgSend((id)objc_msgSend(v12, "elements"), "valueForKeyPath:", CFSTR("name")));
    v8 = -[NSKnownKeysDictionary initWithSearchStrategy:]([NSKnownKeysDictionary alloc], "initWithSearchStrategy:", v13);

    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v14 = (void *)objc_msgSend(v12, "elements");
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v22;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v22 != v17)
            objc_enumerationMutation(v14);
          v19 = *(__CFString **)(*((_QWORD *)&v21 + 1) + 8 * v18);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            _createKnownKeysDictionaryForMultiColumnValue(v19, v8);
          ++v18;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v16);
    }
    a3 = v20;
  }
  -[NSKnownKeysDictionary setValue:forKeyPath:](v8, "setValue:forKeyPath:", a3, -[NSPropertyDescription _elementPath](v10));
  snapshot_set_object(a1, *(_DWORD *)a2, (uint64_t)v8);
}

void sub_18A4CD9B8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4CD5D8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4CE470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  int v43;

  if (v43)
    objc_end_catch();
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_18A4CE52C(_Unwind_Exception *a1, int a2)
{
  char v2;

  if (a2)
  {
    if ((v2 & 1) != 0)
      JUMPOUT(0x18A4CE538);
    JUMPOUT(0x18A4CE53CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A4CE568(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  objc_terminate();
}

void sub_18A4CF87C(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  id v16;

  if (a2 != 2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4CF06CLL);
  }
  v16 = objc_begin_catch(exc_buf);
  if (+[PFUbiquityLogging canLogMessageAtLevel:](PFUbiquityLogging, "canLogMessageAtLevel:", 0))
  {
    objc_msgSend(v16, "userInfo");
    NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  Exception encountered while trying to clean up baseline: %@\nException: %@\nuserInfo: %@"));
  }
  objc_exception_rethrow();
}

void sub_18A4CF944()
{
  objc_end_catch();
  JUMPOUT(0x18A4CF8E0);
}

Class initCloudKitCKContainer()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKContainer");
  qword_1ECD8DB98 = (uint64_t)result;
  getCloudKitCKContainerClass[0] = CloudKitCKContainerFunction;
  return result;
}

Class initCloudKitCKContainerOptions()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKContainerOptions");
  qword_1ECD8DBA0 = (uint64_t)result;
  getCloudKitCKContainerOptionsClass[0] = CloudKitCKContainerOptionsFunction;
  return result;
}

Class initCloudKitCKRecordZone()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKRecordZone");
  qword_1ECD8DBA8 = (uint64_t)result;
  getCloudKitCKRecordZoneClass[0] = CloudKitCKRecordZoneFunction;
  return result;
}

Class initCloudKitCKRecordZoneID()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKRecordZoneID");
  qword_1ECD8DBB0 = (uint64_t)result;
  getCloudKitCKRecordZoneIDClass[0] = CloudKitCKRecordZoneIDFunction;
  return result;
}

Class initCloudKitCKRecord()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKRecord");
  qword_1ECD8DBB8 = (uint64_t)result;
  getCloudKitCKRecordClass[0] = CloudKitCKRecordFunction;
  return result;
}

Class initCloudKitCKRecordID()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKRecordID");
  qword_1ECD8DBC0 = (uint64_t)result;
  getCloudKitCKRecordIDClass[0] = CloudKitCKRecordIDFunction;
  return result;
}

Class initCloudKitCKAcceptSharesOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKAcceptSharesOperation");
  qword_1ECD8DBC8 = (uint64_t)result;
  getCloudKitCKAcceptSharesOperationClass[0] = CloudKitCKAcceptSharesOperationFunction;
  return result;
}

Class initCloudKitCKFetchDatabaseChangesOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchDatabaseChangesOperation");
  qword_1ECD8DBD0 = (uint64_t)result;
  getCloudKitCKFetchDatabaseChangesOperationClass[0] = CloudKitCKFetchDatabaseChangesOperationFunction;
  return result;
}

Class initCloudKitCKModifyRecordZonesOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKModifyRecordZonesOperation");
  qword_1ECD8DBD8 = (uint64_t)result;
  getCloudKitCKModifyRecordZonesOperationClass[0] = CloudKitCKModifyRecordZonesOperationFunction;
  return result;
}

Class initCloudKitCKModifyRecordsOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKModifyRecordsOperation");
  qword_1ECD8DBE0 = (uint64_t)result;
  getCloudKitCKModifyRecordsOperationClass[0] = CloudKitCKModifyRecordsOperationFunction;
  return result;
}

Class initCloudKitCKFetchRecordZonesOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchRecordZonesOperation");
  qword_1ECD8DBE8 = (uint64_t)result;
  getCloudKitCKFetchRecordZonesOperationClass[0] = CloudKitCKFetchRecordZonesOperationFunction;
  return result;
}

Class initCloudKitCKFetchRecordsOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchRecordsOperation");
  qword_1ECD8DBF0 = (uint64_t)result;
  getCloudKitCKFetchRecordsOperationClass[0] = CloudKitCKFetchRecordsOperationFunction;
  return result;
}

Class initCloudKitCKDatabaseSubscription()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKDatabaseSubscription");
  qword_1ECD8DBF8 = (uint64_t)result;
  getCloudKitCKDatabaseSubscriptionClass[0] = CloudKitCKDatabaseSubscriptionFunction;
  return result;
}

Class initCloudKitCKModifySubscriptionsOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKModifySubscriptionsOperation");
  qword_1ECD8DC00 = (uint64_t)result;
  getCloudKitCKModifySubscriptionsOperationClass[0] = CloudKitCKModifySubscriptionsOperationFunction;
  return result;
}

Class initCloudKitCKAsset()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKAsset");
  qword_1ECD8DC08 = (uint64_t)result;
  getCloudKitCKAssetClass[0] = CloudKitCKAssetFunction;
  return result;
}

Class initCloudKitCKFetchRecordZoneChangesConfiguration()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchRecordZoneChangesConfiguration");
  qword_1ECD8DC18 = (uint64_t)result;
  getCloudKitCKFetchRecordZoneChangesConfigurationClass[0] = CloudKitCKFetchRecordZoneChangesConfigurationFunction;
  return result;
}

Class initCloudKitCKFetchRecordZoneChangesOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchRecordZoneChangesOperation");
  qword_1ECD8DC20 = (uint64_t)result;
  getCloudKitCKFetchRecordZoneChangesOperationClass[0] = CloudKitCKFetchRecordZoneChangesOperationFunction;
  return result;
}

Class initCloudKitCKServerChangeToken()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKServerChangeToken");
  qword_1ECD8DC28 = (uint64_t)result;
  getCloudKitCKServerChangeTokenClass[0] = CloudKitCKServerChangeTokenFunction;
  return result;
}

Class initCloudKitCKNotificationInfo()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKNotificationInfo");
  qword_1ECD8DC30 = (uint64_t)result;
  getCloudKitCKNotificationInfoClass[0] = CloudKitCKNotificationInfoFunction;
  return result;
}

Class initCloudKitCKEncryptedData()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKEncryptedData");
  qword_1ECD8DC38 = (uint64_t)result;
  getCloudKitCKEncryptedDataClass[0] = CloudKitCKEncryptedDataFunction;
  return result;
}

Class initCloudKitCKOperationConfiguration()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKOperationConfiguration");
  qword_1ECD8DC40 = (uint64_t)result;
  getCloudKitCKOperationConfigurationClass[0] = CloudKitCKOperationConfigurationFunction;
  return result;
}

Class initCloudKitCKScheduler()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKScheduler");
  qword_1ECD8DC48 = (uint64_t)result;
  getCloudKitCKSchedulerClass[0] = CloudKitCKSchedulerFunction;
  return result;
}

Class initCloudKitCKSchedulerActivity()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKSchedulerActivity");
  qword_1ECD8DC50 = (uint64_t)result;
  getCloudKitCKSchedulerActivityClass = CloudKitCKSchedulerActivityFunction;
  return result;
}

Class initCloudKitCKNotificationListener()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKNotificationListener");
  qword_1ECD8DC58 = (uint64_t)result;
  getCloudKitCKNotificationListenerClass[0] = CloudKitCKNotificationListenerFunction;
  return result;
}

Class initCloudKitCKShare()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKShare");
  qword_1ECD8DC60 = (uint64_t)result;
  getCloudKitCKShareClass[0] = CloudKitCKShareFunction;
  return result;
}

Class initCloudKitCKFetchShareParticipantsOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchShareParticipantsOperation");
  qword_1ECD8DC68 = (uint64_t)result;
  getCloudKitCKFetchShareParticipantsOperationClass[0] = CloudKitCKFetchShareParticipantsOperationFunction;
  return result;
}

Class initCloudKitCKFetchShareMetadataOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKFetchShareMetadataOperation");
  qword_1ECD8DC70 = (uint64_t)result;
  getCloudKitCKFetchShareMetadataOperationClass[0] = CloudKitCKFetchShareMetadataOperationFunction;
  return result;
}

Class initCloudKitCKQueryOperation()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKQueryOperation");
  qword_1ECD8DC78 = (uint64_t)result;
  getCloudKitCKQueryOperationClass[0] = CloudKitCKQueryOperationFunction;
  return result;
}

Class initCloudKitCKQuery()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKQuery");
  qword_1ECD8DC80 = (uint64_t)result;
  getCloudKitCKQueryClass[0] = CloudKitCKQueryFunction;
  return result;
}

Class initCloudKitCKQueryCursor()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKQueryCursor");
  qword_1ECD8DC88 = (uint64_t)result;
  getCloudKitCKQueryCursorClass[0] = CloudKitCKQueryCursorFunction;
  return result;
}

Class initCloudKitCKSystemSharingUIObserver()
{
  Class result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = objc_getClass("CKSystemSharingUIObserver");
  qword_1ECD8DC90 = (uint64_t)result;
  getCloudKitCKSystemSharingUIObserverClass = CloudKitCKSystemSharingUIObserverFunction;
  return result;
}

uint64_t initCloudKitCKCurrentUserDefaultName()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKCurrentUserDefaultName");
  qword_1ECD8DC98 = result;
  getCloudKitCKCurrentUserDefaultName[0] = CKCurrentUserDefaultNameCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKErrorDomain()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKErrorDomain");
  qword_1ECD8DCA0 = result;
  getCloudKitCKErrorDomain[0] = CKErrorDomainCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKPartialErrorsByItemIDKey()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKPartialErrorsByItemIDKey");
  qword_1ECD8DCA8 = result;
  getCloudKitCKPartialErrorsByItemIDKey[0] = CKPartialErrorsByItemIDKeyCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordChangedErrorServerRecordKey()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKRecordChangedErrorServerRecordKey");
  qword_1ECD8DCB0 = result;
  getCloudKitCKRecordChangedErrorServerRecordKey = CKRecordChangedErrorServerRecordKeyCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKAccountChangedNotification()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKAccountChangedNotification");
  qword_1ECD8DCB8 = result;
  getCloudKitCKAccountChangedNotification[0] = CKAccountChangedNotificationCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKIdentityUpdateNotification()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKIdentityUpdateNotification");
  qword_1ECD8DCC0 = result;
  getCloudKitCKIdentityUpdateNotification[0] = CKIdentityUpdateNotificationCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKErrorRetryAfterKey()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKErrorRetryAfterKey");
  qword_1ECD8DCC8 = result;
  getCloudKitCKErrorRetryAfterKey[0] = CKErrorRetryAfterKeyCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordZoneDefaultName()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKRecordZoneDefaultName");
  qword_1ECD8DCD0 = result;
  getCloudKitCKRecordZoneDefaultName[0] = CKRecordZoneDefaultNameCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordTypeShare()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKRecordTypeShare");
  qword_1ECD8DCD8 = result;
  getCloudKitCKRecordTypeShare[0] = CKRecordTypeShareCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKRecordNameZoneWideShare()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKRecordNameZoneWideShare");
  qword_1ECD8DCE0 = result;
  getCloudKitCKRecordNameZoneWideShare = CKRecordNameZoneWideShareCloudKitFunction;
  return result;
}

uint64_t initCloudKitCKErrorUserDidResetEncryptedDataKey()
{
  uint64_t result;

  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  result = *(_QWORD *)dlsym((void *)_MergedGlobals_91, "CKErrorUserDidResetEncryptedDataKey");
  qword_1ECD8DCE8 = result;
  getCloudKitCKErrorUserDidResetEncryptedDataKey[0] = CKErrorUserDidResetEncryptedDataKeyCloudKitFunction;
  return result;
}

uint64_t initCKDatabaseScopeString(uint64_t a1)
{
  if (qword_1ECD8DB90 != -1)
    dispatch_once(&qword_1ECD8DB90, &__block_literal_global_37);
  softLinkCKDatabaseScopeString = (uint64_t (*)())dlsym((void *)_MergedGlobals_91, "CKDatabaseScopeString");
  return ((uint64_t (*)(uint64_t))softLinkCKDatabaseScopeString)(a1);
}

uint64_t CloudKitCKContainerFunction()
{
  return qword_1ECD8DB98;
}

uint64_t CloudKitCKContainerOptionsFunction()
{
  return qword_1ECD8DBA0;
}

uint64_t CloudKitCKRecordZoneFunction()
{
  return qword_1ECD8DBA8;
}

uint64_t CloudKitCKRecordZoneIDFunction()
{
  return qword_1ECD8DBB0;
}

uint64_t CloudKitCKRecordFunction()
{
  return qword_1ECD8DBB8;
}

uint64_t CloudKitCKRecordIDFunction()
{
  return qword_1ECD8DBC0;
}

uint64_t CloudKitCKAcceptSharesOperationFunction()
{
  return qword_1ECD8DBC8;
}

uint64_t CloudKitCKFetchDatabaseChangesOperationFunction()
{
  return qword_1ECD8DBD0;
}

uint64_t CloudKitCKModifyRecordZonesOperationFunction()
{
  return qword_1ECD8DBD8;
}

uint64_t CloudKitCKModifyRecordsOperationFunction()
{
  return qword_1ECD8DBE0;
}

uint64_t CloudKitCKFetchRecordZonesOperationFunction()
{
  return qword_1ECD8DBE8;
}

uint64_t CloudKitCKFetchRecordsOperationFunction()
{
  return qword_1ECD8DBF0;
}

uint64_t CloudKitCKDatabaseSubscriptionFunction()
{
  return qword_1ECD8DBF8;
}

uint64_t CloudKitCKModifySubscriptionsOperationFunction()
{
  return qword_1ECD8DC00;
}

uint64_t CloudKitCKAssetFunction()
{
  return qword_1ECD8DC08;
}

uint64_t CloudKitCKFetchRecordZoneChangesConfigurationFunction()
{
  return qword_1ECD8DC18;
}

uint64_t CloudKitCKFetchRecordZoneChangesOperationFunction()
{
  return qword_1ECD8DC20;
}

uint64_t CloudKitCKServerChangeTokenFunction()
{
  return qword_1ECD8DC28;
}

uint64_t CloudKitCKNotificationInfoFunction()
{
  return qword_1ECD8DC30;
}

uint64_t CloudKitCKEncryptedDataFunction()
{
  return qword_1ECD8DC38;
}

uint64_t CloudKitCKOperationConfigurationFunction()
{
  return qword_1ECD8DC40;
}

uint64_t CloudKitCKSchedulerFunction()
{
  return qword_1ECD8DC48;
}

uint64_t CloudKitCKSchedulerActivityFunction()
{
  return qword_1ECD8DC50;
}

uint64_t CloudKitCKNotificationListenerFunction()
{
  return qword_1ECD8DC58;
}

uint64_t CloudKitCKShareFunction()
{
  return qword_1ECD8DC60;
}

uint64_t CloudKitCKFetchShareParticipantsOperationFunction()
{
  return qword_1ECD8DC68;
}

uint64_t CloudKitCKFetchShareMetadataOperationFunction()
{
  return qword_1ECD8DC70;
}

uint64_t CloudKitCKQueryOperationFunction()
{
  return qword_1ECD8DC78;
}

uint64_t CloudKitCKQueryFunction()
{
  return qword_1ECD8DC80;
}

uint64_t CloudKitCKQueryCursorFunction()
{
  return qword_1ECD8DC88;
}

uint64_t CloudKitCKSystemSharingUIObserverFunction()
{
  return qword_1ECD8DC90;
}

uint64_t CKCurrentUserDefaultNameCloudKitFunction()
{
  return qword_1ECD8DC98;
}

uint64_t CKErrorDomainCloudKitFunction()
{
  return qword_1ECD8DCA0;
}

uint64_t CKPartialErrorsByItemIDKeyCloudKitFunction()
{
  return qword_1ECD8DCA8;
}

uint64_t CKRecordChangedErrorServerRecordKeyCloudKitFunction()
{
  return qword_1ECD8DCB0;
}

uint64_t CKAccountChangedNotificationCloudKitFunction()
{
  return qword_1ECD8DCB8;
}

uint64_t CKIdentityUpdateNotificationCloudKitFunction()
{
  return qword_1ECD8DCC0;
}

uint64_t CKErrorRetryAfterKeyCloudKitFunction()
{
  return qword_1ECD8DCC8;
}

uint64_t CKRecordZoneDefaultNameCloudKitFunction()
{
  return qword_1ECD8DCD0;
}

uint64_t CKRecordTypeShareCloudKitFunction()
{
  return qword_1ECD8DCD8;
}

uint64_t CKRecordNameZoneWideShareCloudKitFunction()
{
  return qword_1ECD8DCE0;
}

uint64_t CKErrorUserDidResetEncryptedDataKeyCloudKitFunction()
{
  return qword_1ECD8DCE8;
}

void sub_18A4D31D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  int v28;
  uint64_t v29;

  if (v28)
    objc_end_catch();
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18A4D3214(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4D320CLL);
}

void sub_18A4D3224(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  if (a2)
  {
    _Block_object_dispose(va, 8);
    _Block_object_dispose((const void *)(v17 - 144), 8);
    JUMPOUT(0x18A4D3244);
  }
  JUMPOUT(0x18A4D320CLL);
}

void sub_18A4D36C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  int v30;
  uint64_t v31;

  if (v30)
    objc_end_catch();
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 168), 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A4D3718(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4D3710);
}

void sub_18A4D3728(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4D3584);
  }
  JUMPOUT(0x18A4D3710);
}

void sub_18A4D3CDC(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A4D3CE8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4D4C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4D4828);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4D5270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4D5CF4()
{
  __break(1u);
}

void sub_18A4D5D70()
{
  objc_end_catch();
  JUMPOUT(0x18A4D5D44);
}

uint64_t _readCompositeAttributeIntoShellFromBytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  uint64_t AttributeIntoShellFromBytes;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  AttributeIntoShellFromBytes = _readAttributeIntoShellFromBytes(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((_DWORD)AttributeIntoShellFromBytes)
  {
    v15 = *a3;
    v16 = (*a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v17 = v16 + 4;
    if (v16 + 4 <= a4)
    {
      v18 = *(_DWORD *)(a2 + v16);
      if (v18)
      {
        v25 = *(_QWORD *)(a7 + 8 * bswap32(v18));
        v19 = (void *)MEMORY[0x1E0C99E60];
        v20 = objc_opt_class();
        v21 = objc_opt_class();
        v22 = objc_opt_class();
        v23 = objc_msgSend(v19, "setWithObjects:", v20, v21, v22, objc_opt_class(), 0);
        *(_QWORD *)(a5 + 120) = (id)+[_PFRoutines unarchiveCylicGraphObjectOfClasses:fromData:error:]((uint64_t)_PFRoutines, v23, v25, (uint64_t)a9);
      }
      v15 = v17;
    }
    *a3 = v15;
  }
  return AttributeIntoShellFromBytes;
}

void sub_18A4D7DF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *exc_buf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  id v41;
  _Unwind_Exception *v42;

  if (!a2)
    _Unwind_Resume(v42);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A4D7C44);
  }
  v41 = objc_begin_catch(a1);
  objc_exception_throw(v41);
}

void sub_18A4D8060(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    JUMPOUT(0x18A4D806CLL);
  _Unwind_Resume(v2);
}

void sub_18A4D8098()
{
  char v0;
  _Unwind_Exception *v1;

  if ((v0 & 1) != 0)
    JUMPOUT(0x18A4D80A0);
  _Unwind_Resume(v1);
}

void sub_18A4D8118(uint64_t a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4D80E4);
  }
  _Unwind_Resume(v2);
}

void sub_18A4D8128(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *exc_buf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Exception *v20;

  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A4D70F8);
  }
  _Unwind_Resume(v20);
}

void sub_18A4D8F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18A4D9334(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4D9440(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4D944CLL);
  }
  JUMPOUT(0x18A4D9378);
}

void sub_18A4DA2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *exc_buf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v33;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;

  if (a2)
  {
    _Block_object_dispose(&a26, 8);
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18A4D9AA4);
    }
    v35 = objc_begin_catch(a1);
    v36 = (void *)MEMORY[0x1E0CB35C8];
    v37 = objc_msgSend(v35, "userInfo");
    a32 = objc_msgSend(v36, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 134308, v37);
    v38 = (void *)objc_msgSend(v33, "retainedDelegate");
    if (v38)
      objc_msgSend(v38, "rollResponseOperation:encounteredAnError:whileTryingToAdoptBaseline:", v33, a32, v32);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18A4DA3F4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4DA37CLL);
  }
  JUMPOUT(0x18A4DA41CLL);
}

void sub_18A4DA404()
{
  int v0;

  if (v0)
    JUMPOUT(0x18A4DA40CLL);
  JUMPOUT(0x18A4DA41CLL);
}

void sub_18A4DCA20(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4DCA80(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4DC910);
  }
  JUMPOUT(0x18A4DCA74);
}

void sub_18A4DCA98(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4DCAC8);
  }
  JUMPOUT(0x18A4DCA74);
}

void sub_18A4DD6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4DD728(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4DD720);
}

void sub_18A4DD738(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4DD604);
  }
  JUMPOUT(0x18A4DD720);
}

void sub_18A4DE8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  const __CFString *v19;
  void *v20;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a2 != 2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4DD808);
  }
  v14 = objc_begin_catch(exception_object);
  v15 = (void *)objc_msgSend(v14, "userInfo");
  if (objc_msgSend((id)(v13 + 2552), "canLogMessageAtLevel:", 0))
  {
    objc_msgSend(v14, "userInfo");
    NSLog((NSString *)CFSTR("%s(%d): CoreData: Ubiquity:  CoreData: error: Caught Exception %@ with userInfo %@ in -finishSetupForSet:error:"));
  }
  v16 = objc_msgSend((id)objc_msgSend(v15, "objectForKey:", CFSTR("PFUbiquitySetupCheckForFork")), "BOOLValue");
  v17 = objc_msgSend((id)objc_msgSend(v15, "objectForKey:", CFSTR("PFUbiquitySetupDoFork")), "BOOLValue");
  if (v16
    && (v18 = (void *)objc_msgSend(v14, "name"), (objc_msgSend(v18, "isEqualToString:", *MEMORY[0x1E0C99768]) & 1) != 0))
  {
    v19 = CFSTR("PFUbiquitySetupCheckForFork");
  }
  else
  {
    if (!v17
      || (v20 = (void *)objc_msgSend(v14, "name"),
          !objc_msgSend(v20, "isEqualToString:", *MEMORY[0x1E0C99768])))
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        objc_exception_rethrow();
LABEL_13:
      objc_end_catch();
      JUMPOUT(0x18A4DE314);
    }
    v19 = CFSTR("PFUbiquitySetupDoFork");
  }
  objc_msgSend(*(id *)(v12 + 56), "setObject:forKey:", MEMORY[0x1E0C9AAB0], v19);
  goto LABEL_13;
}

void sub_18A4DEA38(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4DEA4CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18A4DEA60()
{
  objc_end_catch();
  JUMPOUT(0x18A4DEA84);
}

void sub_18A4DEA6C(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A4DEA74);
  _Unwind_Resume(a1);
}

uint64_t sub_18A4DEA7C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  return sub_18A4DEA80();
}

void sub_18A4DEE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_18A4DEE74(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A4DEE80()
{
  objc_end_catch();
  JUMPOUT(0x18A4DEE60);
}

void sub_18A4DFC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Block_object_dispose(&a58, 8);
  _Unwind_Resume(a1);
}

void sub_18A4E0F1C(_Unwind_Exception *a1, int a2)
{
  id v2;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A4E0DCCLL);
  }
  v2 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A4E10C0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4E1094);
  }
  JUMPOUT(0x18A4E0FE4);
}

void sub_18A4E1C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A4E3C1C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4E3AD8);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4E3D60(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4E3D70);
  }
  JUMPOUT(0x18A4E3D54);
}

void sub_18A4E3FB0(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4E4004(void *exc_buf, int a2)
{
  int v2;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (!v2)
      JUMPOUT(0x18A4E3F20);
    JUMPOUT(0x18A4E3EB8);
  }
  JUMPOUT(0x18A4E3FF8);
}

void sub_18A4E4320(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4E4350(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4E4220);
  }
  JUMPOUT(0x18A4E4344);
}

void sub_18A4E48C4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  char v19;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    if ((v19 & 1) != 0)
      JUMPOUT(0x18A4E4810);
    JUMPOUT(0x18A4E4798);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4E4D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4E4DD8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4E4DE0);
  JUMPOUT(0x18A4E4DBCLL);
}

void sub_18A4E50D4(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4E510C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4E4F78);
  }
  JUMPOUT(0x18A4E5100);
}

void sub_18A4E56E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4E56F0);
  objc_terminate();
}

void sub_18A4E7B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  objc_end_catch();
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a66, 8);
  JUMPOUT(0x18A4E7BC8);
}

void sub_18A4E7BD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  objc_terminate();
}

void sub_18A4E7C58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x18A4E7C74);
}

void sub_18A4E84C8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4E84EC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4E84ACLL);
}

void sub_18A4E8BD0(_Unwind_Exception *exception_object, int a2)
{
  id v2;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a2 == 2)
  {
    v2 = objc_begin_catch(exception_object);
    objc_end_catch();
  }
  else
  {
    objc_begin_catch(exception_object);
  }
  JUMPOUT(0x18A4E8A08);
}

void sub_18A4E96BC(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4E96FC(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x18A4E9584);
  }
  JUMPOUT(0x18A4E96F0);
}

void sub_18A4E99E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18A4E9E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
  {
    _Block_object_dispose(&a24, 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4E9E18);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4EA060(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A4EA074(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4EA3B8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4EA3D8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4EA2B4);
}

void sub_18A4EA544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A4EACF0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exc_buf);
      JUMPOUT(0x18A4EABE0);
    }
    objc_begin_catch(exc_buf);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a20 + 56) + 8) + 40) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4EADF0(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4EADACLL);
  }
  JUMPOUT(0x18A4EAD54);
}

void sub_18A4EB388(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4EB3B0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4EB268);
  }
  JUMPOUT(0x18A4EB3A4);
}

void sub_18A4EB450(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4EB470(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4EB420);
}

void sub_18A4EB6A8(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4EB6F8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4EB614);
  }
  JUMPOUT(0x18A4EB6ECLL);
}

void sub_18A4EB9C0(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4EBA00(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4EBA08);
  JUMPOUT(0x18A4EB9F4);
}

void sub_18A4EBB48(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4EBB68(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4EBB18);
}

void sub_18A4EBBE4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4EBC04(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4EBBB4);
}

void sub_18A4ED3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a2)
  {
    _Block_object_dispose(&a30, 8);
    _Block_object_dispose((const void *)(v30 - 128), 8);
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4ED1F4);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4EE178(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x18A4EE0F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4EED38()
{
  objc_end_catch();
  JUMPOUT(0x18A4EED58);
}

void sub_18A4EED40(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18A4EED48);
  _Unwind_Resume(a1);
}

void sub_18A4EED50(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4EED58);
  objc_terminate();
}

void sub_18A4F02C4(_Unwind_Exception *a1)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F02E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4F02F0);
  objc_terminate();
}

void sub_18A4F0998(_Unwind_Exception *exc_buf, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    objc_msgSend(*(id *)(v2 + 24), "unlock");
    if (!v3)
      JUMPOUT(0x18A4F08A8);
    JUMPOUT(0x18A4F0980);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4F0ABC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F0ADC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F0A7CLL);
}

void sub_18A4F0C60(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F0C8C(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4F0C10);
  }
  JUMPOUT(0x18A4F0C80);
}

void sub_18A4F1DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
  a12(&a10);
  _Unwind_Resume(a1);
}

void sub_18A4F2588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  id v13;

  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(exception_object);
      JUMPOUT(0x18A4F23F4);
    }
    v13 = objc_begin_catch(exception_object);
    objc_exception_throw(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18A4F261C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18A4F25E8);
  }
  _Unwind_Resume(a1);
}

void sub_18A4F263C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18A4F2644);
  objc_terminate();
}

void sub_18A4F2EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  int v39;

  if (v39)
    objc_end_catch();
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_18A4F2FB8(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4F2FB0);
}

void sub_18A4F2FE0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4F2FE8);
  JUMPOUT(0x18A4F2FB0);
}

void sub_18A4F32E0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F34E4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4F33E8);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18A4F3754(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F3728);
}

void sub_18A4F3880(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F38A0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F3850);
}

void sub_18A4F3E64(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F3E30);
}

void sub_18A4F3E74(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F3FFC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F3FA8);
}

void sub_18A4F4114(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F40E4);
}

void sub_18A4F4624(void *a1)
{
  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_18A4F4630(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18A4F488C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4F4A34(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18A4F4A14);
}

void sub_18A4F5230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  int v21;

  if (v21)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_18A4F5280(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18A4F528CLL);
  JUMPOUT(0x18A4F5274);
}

void sub_18A4F5680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  int v13;
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  if (v13)
    objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v14 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18A4F56DC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4F56D4);
}

void sub_18A4F5920(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18A4F608C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  int v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (v11)
    objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18A4F60BC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18A4F60B4);
}

void sub_18A4F60CC(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18A4F5F58);
  }
  JUMPOUT(0x18A4F60B4);
}

uint64_t CocoaError.Code.init(rawValue:)()
{
  return MEMORY[0x1E0CADDF8]();
}

uint64_t type metadata accessor for CocoaError()
{
  return MEMORY[0x1E0CADE48]();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return MEMORY[0x1E0CAF928]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x1E0CAFE38](retstr);
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAFF00]();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
  MEMORY[0x1E0C96018]();
}

uint64_t ObservableObjectPublisher.init()()
{
  return MEMORY[0x1E0C96028]();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x1E0C96030]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1808]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1E0DEAA50]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B0](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B8](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C803C0](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

Boolean CFBitVectorContainsBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1E0C97F50](bv, range.location, range.length, *(_QWORD *)&value);
}

CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits)
{
  return (CFBitVectorRef)MEMORY[0x1E0C97F58](allocator, bytes, numBits);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x1E0C97F78](bv, idx);
}

void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes)
{
  MEMORY[0x1E0C97F80](bv, range.location, range.length, bytes);
}

CFIndex CFBitVectorGetCount(CFBitVectorRef bv)
{
  return MEMORY[0x1E0C97F88](bv);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

uint64_t CFHashBytes()
{
  return MEMORY[0x1E0C98760]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

uint64_t CFMergeSortArray()
{
  return MEMORY[0x1E0C98860]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BE8](rl, observer, mode);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1E0C98C60](allocator, activities, repeats, order, callout, context);
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
  MEMORY[0x1E0C98C78](observer);
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C88](rl, observer, mode);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1E0C98D88](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x1E0C98DD8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale)
{
  return MEMORY[0x1E0C98F20](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions, locale);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98FA0](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FF8](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

uint64_t CFStringEncodingUnicodeToBytes()
{
  return MEMORY[0x1E0C99048]();
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result)
{
  return MEMORY[0x1E0C99070](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, locale, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

uint64_t CFStringHashCString()
{
  return MEMORY[0x1E0C99198]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C99260](theString, locale);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1E0C99360](alloc, relativeURLBytes, length, *(_QWORD *)&encoding, baseURL, useCompatibilityMode);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99488](url, buffer, bufferLength);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  return (id)MEMORY[0x1E0CB2868](aClass, extraBytes, zone);
}

uint64_t NSAllocateScannedUncollectable()
{
  return MEMORY[0x1E0CB2870]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSDeallocateObject(id object)
{
  MEMORY[0x1E0CB2920](object);
}

BOOL NSDecrementExtraRefCountWasZero(id object)
{
  return MEMORY[0x1E0CB2958](object);
}

void NSIncrementExtraRefCount(id object)
{
  MEMORY[0x1E0CB2C18](object);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1E0CB2DA0](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  MEMORY[0x1E0CB2DA8](table, key, value);
}

void NSMapRemove(NSMapTable *table, const void *key)
{
  MEMORY[0x1E0CB2DC8](table, key);
}

uint64_t NSRecordAllocationEvent()
{
  return MEMORY[0x1E0CB3140]();
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1E0CB3158]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1E0CB3218](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x1E0CB3428]();
}

void NSZoneFree(NSZone *zone, void *ptr)
{
  MEMORY[0x1E0CB3458](zone, ptr);
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1E0CD6218](*(_QWORD *)&status, reserved);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return (CFDictionaryRef)MEMORY[0x1E0CD6600](task, entitlements, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFDictionarySetCapacity()
{
  return MEMORY[0x1E0C9A118]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1E0C9A178]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1E0C9A718]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _NSGetUsingKeyValueGetter()
{
  return MEMORY[0x1E0CB3C00]();
}

uint64_t _NSKeyValueCreateImplicitObservationInfo()
{
  return MEMORY[0x1E0CB3C08]();
}

uint64_t _NSKeyValueGetterForClassAndKey()
{
  return MEMORY[0x1E0CB3C10]();
}

uint64_t _NSKeyValueMutableSetGetterForClassAndKey()
{
  return MEMORY[0x1E0CB3C18]();
}

uint64_t _NSKeyValuePrimitiveGetterForClassAndKey()
{
  return MEMORY[0x1E0CB3C20]();
}

uint64_t _NSKeyValuePrimitiveSetterForClassAndKey()
{
  return MEMORY[0x1E0CB3C28]();
}

uint64_t _NSKeyValueSetterForClassAndKey()
{
  return MEMORY[0x1E0CB3C30]();
}

uint64_t _NSMethodExceptionProem()
{
  return MEMORY[0x1E0CB3C38]();
}

uint64_t _NSSetUsingKeyValueSetter()
{
  return MEMORY[0x1E0CB3C68]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t __CFSetLastAllocationEventName()
{
  return MEMORY[0x1E0C9A9A0]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1E0C80B70]();
}

int __snprintf_chk(char *a1, size_t a2, int a3, size_t a4, const char *a5, ...)
{
  return MEMORY[0x1E0C80BE0](a1, a2, *(_QWORD *)&a3, a4, a5);
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1E0C80C40]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1E0C80E60](*(_QWORD *)&image_index);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1E0C80E68](*(_QWORD *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1E0C80EB8]();
}

uint64_t _getprivatesystemidentifier()
{
  return MEMORY[0x1E0C80FA0]();
}

uint64_t _objc_registerTaggedPointerClass()
{
  return MEMORY[0x1E0DE79C8]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sqlite3_db_clone()
{
  return MEMORY[0x1E0DE8518]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
{
  return MEMORY[0x1E0DE7A48](cls, name, size, alignment, types);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1E0DE7A68](cls, protocol);
}

Protocol **__cdecl class_copyProtocolList(Class cls, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1E0DE7A88](cls, outCount);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7A98](cls, name);
}

const char *__cdecl class_getImageName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AA0](cls);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1E0DE7AB0](cls);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1E0DE7AB8](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1E0DE7AC0](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1E0DE7AD0](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1E0DE7AE8](cls);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x1E0DE7AF8](cls, sel);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1E0DE5290](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE52A0](stream, *(_QWORD *)&operation, *(_QWORD *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1E0DE52B0](stream, *(_QWORD *)&flags);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C82B18](from, to, state, *(_QWORD *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x1E0C82B20]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x1E0C82B28](a1);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x1E0DE92B0](crc, buf, *(_QWORD *)&len);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  return (void *)MEMORY[0x1E0C82CF0](object);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82CF8]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  return (void *)MEMORY[0x1E0C82E68](queue, key);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82FA0](queue, context, work);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int flsl(uint64_t a1)
{
  return MEMORY[0x1E0C83420](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x1E0DE7B10](block);
}

BOOL imp_removeBlock(IMP anImp)
{
  return MEMORY[0x1E0DE7B18](anImp);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1E0DE7B30](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1E0DE7B38](v);
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x1E0C83A10]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E88]();
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F20](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F40](zone, ptr, size, type_id);
}

void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned int num)
{
  MEMORY[0x1E0C83F50](zone, to_be_freed, *(_QWORD *)&num);
}

unsigned int malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested)
{
  return MEMORY[0x1E0C83F58](zone, size, results, *(_QWORD *)&num_requested);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
  MEMORY[0x1E0C840C8](__b, __pattern8, __len);
}

void method_getArgumentType(Method m, unsigned int index, char *dst, size_t dst_len)
{
  MEMORY[0x1E0DE7B58](m, *(_QWORD *)&index, dst, dst_len);
}

objc_method_description *__cdecl method_getDescription(Method m)
{
  return (objc_method_description *)MEMORY[0x1E0DE7B60](m);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1E0DE7B68](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x1E0DE7B78](m);
}

void method_getReturnType(Method m, char *dst, size_t dst_len)
{
  MEMORY[0x1E0DE7B80](m, dst, dst_len);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1E0DE7B88](m);
}

void method_invoke(void)
{
  MEMORY[0x1E0DE7B90]();
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1E0C84170](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C841F0](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1E0DE7BC0](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1E0DE7C00](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1E0DE7C68](obj);
}

void objc_disposeClassPair(Class cls)
{
  MEMORY[0x1E0DE7C70](cls);
}

Class objc_duplicateClass(Class original, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1E0DE7C78](original, name, extraBytes);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7D10](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_registerClassPair(Class cls)
{
  MEMORY[0x1E0DE7D68](cls);
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

id objc_storeWeakOrNil(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FC0](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1E0DE8000](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1E0DE8008](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1E0DE8018](a1, a2);
}

uint64_t object_getMethodImplementation()
{
  return MEMORY[0x1E0DE8020]();
}

Class object_setClass(id a1, Class a2)
{
  return (Class)MEMORY[0x1E0DE8030](a1, a2);
}

Ivar object_setInstanceVariableWithStrongDefault(id obj, const char *name, void *value)
{
  return (Ivar)MEMORY[0x1E0DE8040](obj, name, value);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1E0C849A0]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8068](property);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  const char *v4;
  char *v5;
  objc_method_description result;

  v4 = (const char *)MEMORY[0x1E0DE80A8](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

uint64_t pthread_key_init_np()
{
  return MEMORY[0x1E0C84DF0]();
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

void pthread_yield_np(void)
{
  MEMORY[0x1E0C84F40]();
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84F68](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84F90](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

uint64_t sel_lookUpByName()
{
  return MEMORY[0x1E0DE80E0]();
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80E8](str);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

uint64_t sqlite3_bind_blob_b()
{
  return MEMORY[0x1E0DE8590]();
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1E0DE8638](a1, *(_QWORD *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8640](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE8648](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8658](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

int sqlite3_create_collation(sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  return MEMORY[0x1E0DE86F8](a1, zName, *(_QWORD *)&eTextRep, pArg, xCompare);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return MEMORY[0x1E0DE8708](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1E0DE8738](a1, *(_QWORD *)&op);
}

int sqlite3_db_status(sqlite3 *a1, int op, int *pCur, int *pHiwtr, int resetFlg)
{
  return MEMORY[0x1E0DE8768](a1, *(_QWORD *)&op, pCur, pHiwtr, *(_QWORD *)&resetFlg);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1E0DE8790](*(_QWORD *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

uint64_t sqlite3_exec_b()
{
  return MEMORY[0x1E0DE87A0]();
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return MEMORY[0x1E0DE87B8](a1, *(_QWORD *)&onoff);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

void sqlite3_free(void *a1)
{
  MEMORY[0x1E0DE87D0](a1);
}

uint64_t sqlite3_intarray_bind()
{
  return MEMORY[0x1E0DE8800]();
}

uint64_t sqlite3_intarray_create()
{
  return MEMORY[0x1E0DE8808]();
}

uint64_t sqlite3_key_v2()
{
  return MEMORY[0x1E0DE8818]();
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8820](a1);
}

void *__cdecl sqlite3_malloc(int a1)
{
  return (void *)MEMORY[0x1E0DE8838](*(_QWORD *)&a1);
}

char *sqlite3_mprintf(const char *a1, ...)
{
  return (char *)MEMORY[0x1E0DE8848](a1);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return (sqlite3_stmt *)MEMORY[0x1E0DE8860](pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8888](db, zSql, *(_QWORD *)&nByte, *(_QWORD *)&prepFlags, ppStmt, pzTail);
}

uint64_t sqlite3_rekey_v2()
{
  return MEMORY[0x1E0DE88A0]();
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE88B8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  MEMORY[0x1E0DE88C8](a1, a2);
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  MEMORY[0x1E0DE88D0](a1, a2, *(_QWORD *)&a3);
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  MEMORY[0x1E0DE88F0](a1, *(_QWORD *)&a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
{
  return MEMORY[0x1E0DE8960](p1, p2);
}

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
  MEMORY[0x1E0DE8968](a1);
}

int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
{
  return MEMORY[0x1E0DE8970](db, zSchema, ppSnapshot);
}

int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
{
  return MEMORY[0x1E0DE8978](db, zSchema, pSnapshot);
}

int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
{
  return MEMORY[0x1E0DE8980](db, zDb);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  return MEMORY[0x1E0DE89C0](a1, *(_QWORD *)&op, *(_QWORD *)&resetFlg);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1E0DE8A10](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1E0DE8A18](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A20](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  double result;

  MEMORY[0x1E0DE8A30](a1);
  return result;
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A48](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A50](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A70](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1E0C855A0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1E0C855F0](__stringp, __delim);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

unint64_t strtouq(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856C0](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x1E0C859F8](a1, a2);
}

void uuid_generate_random(uuid_t out)
{
  MEMORY[0x1E0C85A20](out);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1E0C85A90](*(_QWORD *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

kern_return_t vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1E0C85AE8](*(_QWORD *)&target_task, address, *(_QWORD *)&control, state);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1E0C86118]();
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

void xpc_transaction_begin(void)
{
  MEMORY[0x1E0C86768]();
}

void xpc_transaction_end(void)
{
  MEMORY[0x1E0C86770]();
}

