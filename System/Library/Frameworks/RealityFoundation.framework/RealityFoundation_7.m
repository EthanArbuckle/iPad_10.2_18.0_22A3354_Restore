uint64_t outlined destroy of CustomMaterial.Blending(uint64_t a1)
{
  destroy for CustomMaterial.Blending(a1);
  return a1;
}

uint64_t outlined destroy of __MaterialResource.CoreMaterialFunction(uint64_t a1)
{
  destroy for __MaterialResource.CoreMaterialFunction(a1);
  return a1;
}

uint64_t outlined destroy of CustomMaterial.Descriptor(uint64_t a1)
{
  if ((unint64_t)(*(_QWORD *)(a1 + 16) - 1) >= 2)
    swift_release();
  return a1;
}

void *__swift_memcpy330_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14AuLL);
}

uint64_t assignWithTake for CustomMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a2 + 64);
  if (v5 == 2)
    goto LABEL_7;
  if (v6 == 2)
  {
    outlined destroy of CustomMaterial.Blending(a1 + 56);
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 69) = *(_QWORD *)(a2 + 69);
    goto LABEL_8;
  }
  if (v5 == 1)
    goto LABEL_7;
  if (v6 == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1 + 56, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
LABEL_8:
  v7 = *(_BYTE *)(a2 + 96);
  v8 = *(void **)(a1 + 80);
  v9 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v10 = *(_BYTE *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = v7;
  outlined consume of CustomMaterial.CustomUniformsState(v8, v9, v10);
  if (*(_QWORD *)(a1 + 128))
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  if (*(_QWORD *)(a1 + 192))
  {
    v12 = *(_QWORD *)(a2 + 192);
    if (v12)
    {
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v12;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      swift_bridgeObjectRelease();
      v13 = *(void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);

      goto LABEL_15;
    }
    outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 176);
  }
  v14 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
LABEL_15:
  if (*(_QWORD *)(a1 + 240))
  {
    v15 = *(_QWORD *)(a2 + 240);
    if (v15)
    {
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v15;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      swift_bridgeObjectRelease();
      v16 = *(void **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

      goto LABEL_20;
    }
    outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 224);
  }
  v17 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
LABEL_20:
  v18 = *(_QWORD *)(a1 + 288);
  if (v18 != 3)
  {
    v19 = *(_QWORD *)(a2 + 288);
    if (v19 == 3)
    {
      outlined destroy of CustomMaterial.Descriptor(a1 + 272);
      goto LABEL_23;
    }
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    if (v18 != 2)
    {
      if (v19 == 2)
      {
        outlined destroy of CustomMaterial.Blending(a1 + 280);
      }
      else if (v18 != 1)
      {
        if (v19 != 1)
        {
          *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
          *(_QWORD *)(a1 + 288) = v19;
          swift_release();
          *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
          *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
          goto LABEL_32;
        }
        outlined destroy of BodyTrackingComponent?(a1 + 280, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
      }
    }
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 293) = *(_QWORD *)(a2 + 293);
LABEL_32:
    *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
    goto LABEL_33;
  }
LABEL_23:
  v20 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 298) = *(_OWORD *)(a2 + 298);
LABEL_33:
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 330))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 330) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 330) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial()
{
  return &type metadata for CustomMaterial;
}

ValueMetadata *type metadata accessor for CustomMaterial.GeometryModifier()
{
  return &type metadata for CustomMaterial.GeometryModifier;
}

void destroy for CustomMaterial.GeometryModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

}

uint64_t initializeWithCopy for CustomMaterial.GeometryModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.GeometryModifier(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.GeometryModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.SurfaceShader()
{
  return &type metadata for CustomMaterial.SurfaceShader;
}

uint64_t storeEnumTagSinglePayload for CustomMaterialError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BCD7928 + 4 * byte_21BE70645[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BCD795C + 4 * byte_21BE70640[v4]))();
}

uint64_t sub_21BCD795C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCD7964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCD796CLL);
  return result;
}

uint64_t sub_21BCD7978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCD7980);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BCD7984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCD798C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.LightingModel()
{
  return &type metadata for CustomMaterial.LightingModel;
}

uint64_t destroy for CustomMaterial.Descriptor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if ((unint64_t)(result - 1) >= 2)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for CustomMaterial.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 == 1 || v5 == 2)
  {
    *(_OWORD *)v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 13) = *(_QWORD *)(a2 + 21);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
    swift_retain();
  }
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 == 2)
  {
    if (v7 == 1 || v7 == 2)
      goto LABEL_4;
LABEL_9:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
    swift_retain();
    goto LABEL_13;
  }
  if (v7 == 2)
  {
    outlined destroy of CustomMaterial.Blending(a1 + 8);
LABEL_12:
    v9 = *(_QWORD *)((char *)v5 + 13);
    *(_OWORD *)v4 = *v5;
    *(_QWORD *)(v4 + 13) = v9;
    goto LABEL_13;
  }
  if (v6 != 1)
  {
    if (v7 != 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
      *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
      *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
      goto LABEL_13;
    }
    outlined destroy of BodyTrackingComponent?(a1 + 8, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    goto LABEL_12;
  }
  if (v7 != 1)
    goto LABEL_9;
LABEL_4:
  v8 = *v5;
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_OWORD *)v4 = v8;
LABEL_13:
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CustomMaterial.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 != 2)
  {
    if (v7 == 2)
    {
      outlined destroy of CustomMaterial.Blending(v4);
    }
    else if (v6 != 1)
    {
      if (v7 != 1)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = v7;
        swift_release();
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v4, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    }
  }
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_QWORD *)(v4 + 13) = *(_QWORD *)(v5 + 13);
LABEL_8:
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Descriptor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v5 = -1;
  else
    v5 = v4;
  if (v4 <= 1)
    v4 = 1;
  v6 = v4 - 2;
  if (v5 < 1)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Descriptor()
{
  return &type metadata for CustomMaterial.Descriptor;
}

uint64_t storeEnumTagSinglePayload for CustomMaterialErrorSPI(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BCD7DE0 + 4 * byte_21BE7064F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BCD7E14 + 4 * byte_21BE7064A[v4]))();
}

uint64_t sub_21BCD7E14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCD7E1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCD7E24);
  return result;
}

uint64_t sub_21BCD7E30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCD7E38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BCD7E3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCD7E44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Descriptor.AttributeSet()
{
  return &type metadata for CustomMaterial.Descriptor.AttributeSet;
}

ValueMetadata *type metadata accessor for CustomMaterial.Descriptor.FunctionConstantOptions()
{
  return &type metadata for CustomMaterial.Descriptor.FunctionConstantOptions;
}

uint64_t initializeWithCopy for CustomMaterial.Custom(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Custom(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  return a1;
}

__n128 __swift_memcpy28_16(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CustomMaterial.Custom(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Custom(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Custom(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Custom()
{
  return &type metadata for CustomMaterial.Custom;
}

void destroy for CustomMaterial.CustomShaderParameters(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(a1 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t initializeWithCopy for CustomMaterial.CustomShaderParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    v12 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v12;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 88);
    if (v8)
      goto LABEL_3;
LABEL_5:
    v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    return a1;
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 88);
  if (!v8)
    goto LABEL_5;
LABEL_3:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v10;
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.CustomShaderParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v5 = (_OWORD *)(a1 + 24);
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v7)
    {
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = *(void **)(a2 + 64);
      v9 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v8;
      v10 = v8;

    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 24);
      v14 = v6[1];
      v13 = v6[2];
      *v5 = *v6;
      v5[1] = v14;
      v5[2] = v13;
    }
  }
  else if (v7)
  {
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v11 = *(void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = v11;
  }
  else
  {
    v15 = *v6;
    v16 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v16;
    *v5 = v15;
  }
  v17 = (_OWORD *)(a1 + 72);
  v18 = (_OWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v19)
    {
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20 = *(void **)(a2 + 112);
      v21 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v20;
      v22 = v20;

    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 72);
      v26 = *(_OWORD *)(a2 + 88);
      v25 = *(_OWORD *)(a2 + 104);
      *v17 = *v18;
      *(_OWORD *)(a1 + 88) = v26;
      *(_OWORD *)(a1 + 104) = v25;
    }
  }
  else if (v19)
  {
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v23 = *(void **)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v23;
  }
  else
  {
    v27 = *v18;
    v28 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v28;
    *v17 = v27;
  }
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for CustomMaterial.CustomShaderParameters(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  __int128 v11;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
    {
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      swift_bridgeObjectRelease();
      v7 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

      goto LABEL_6;
    }
    outlined destroy of __MaterialResource.CoreMaterialFunction((uint64_t)v4);
  }
  v8 = v5[1];
  *v4 = *v5;
  v4[1] = v8;
  v4[2] = v5[2];
LABEL_6:
  if (!*(_QWORD *)(a1 + 88))
  {
LABEL_10:
    v11 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v11;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    return a1;
  }
  v9 = *(_QWORD *)(a2 + 88);
  if (!v9)
  {
    outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 72);
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v10 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.CustomShaderParameters(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.CustomShaderParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomShaderParameters()
{
  return &type metadata for CustomMaterial.CustomShaderParameters;
}

unint64_t instantiation function for generic protocol witness table for CustomMaterial.CustomShaderParameters(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined init with take of __RKMaterialParameterBlock.Parameter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  __swift_memcpy65_16(a2, a1);
  return a2;
}

uint64_t outlined release of __RKMaterialParameterBlock.Parameter?(uint64_t a1)
{
  outlined consume of __RKMaterialParameterBlock.Parameter?(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t outlined release of (__RKMaterialParameterBlock.Parameter?, __RKMaterialParameterBlock.Parameter?)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v2 = *(void **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_BYTE *)(a1 + 144);
  outlined consume of __RKMaterialParameterBlock.Parameter?(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of __RKMaterialParameterBlock.Parameter?(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_21BCD87F8()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of CustomMaterial.Descriptor?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 3)
    return outlined consume of CustomMaterial.Blending?(a2, a3);
  return result;
}

double closure #1 in __RKMaterialParameterBlock.get(parameter:)partial apply@<D0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in __RKMaterialParameterBlock.get(parameter:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:)(a1);
}

uint64_t NetworkSessionError.localizedDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21BCD8928 + 4 * byte_21BE70D80[*v0]))(0xD000000000000012, 0x800000021BE8F330);
}

uint64_t sub_21BCD8928@<X0>(uint64_t a1@<X8>)
{
  return a1 + 14;
}

uint64_t NetworkSessionError.errorDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21BCD8AAC + 4 * byte_21BE70D90[*v0]))(0xD000000000000012, 0x800000021BE8F330);
}

uint64_t sub_21BCD8AAC@<X0>(uint64_t a1@<X8>)
{
  return a1 + 14;
}

BOOL static NetworkSessionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void NetworkSessionError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NetworkSessionError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t NetworkParticipantError.localizedDescription.getter()
{
  return 0xD000000000000012;
}

unint64_t NetworkParticipantError.errorDescription.getter()
{
  return 0xD000000000000012;
}

uint64_t static NetworkParticipantError.== infix(_:_:)()
{
  return 1;
}

void NetworkParticipantError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int NetworkParticipantError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NetworkSessionError and conformance NetworkSessionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError;
  if (!lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkSessionError, &type metadata for NetworkSessionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError;
  if (!lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkSessionError, &type metadata for NetworkSessionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkParticipantError and conformance NetworkParticipantError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError;
  if (!lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkParticipantError, &type metadata for NetworkParticipantError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError;
  if (!lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkParticipantError, &type metadata for NetworkParticipantError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError);
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance NetworkParticipantError()
{
  return 0xD000000000000012;
}

uint64_t getEnumTagSinglePayload for NetworkSessionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkSessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_21BCD8F38 + 4 * byte_21BE70DA5[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_21BCD8F6C + 4 * byte_21BE70DA0[v4]))();
}

uint64_t sub_21BCD8F6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCD8F74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCD8F7CLL);
  return result;
}

uint64_t sub_21BCD8F88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCD8F90);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_21BCD8F94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCD8F9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkSessionError()
{
  return &type metadata for NetworkSessionError;
}

uint64_t storeEnumTagSinglePayload for NetworkParticipantError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BCD8FF8 + 4 * byte_21BE70DAA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BCD9018 + 4 * byte_21BE70DAF[v4]))();
}

_BYTE *sub_21BCD8FF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BCD9018(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCD9020(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCD9028(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCD9030(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCD9038(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NetworkParticipantError()
{
  return &type metadata for NetworkParticipantError;
}

uint64_t HasSceneUnderstanding.sceneUnderstanding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int SourceType;
  int v4;
  uint64_t result;
  char v6;
  _BOOL8 v7;
  int IsEntityType;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v9);
  if (!REEntityGetComponent())
  {
    result = swift_release();
    v6 = 2;
    v7 = 1;
LABEL_10:
    *(_BYTE *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    return result;
  }
  SourceType = RESceneUnderstandingComponentGetSourceType();
  if ((SourceType & 0x80000000) == 0)
  {
    v4 = SourceType;
    if (RESceneUnderstandingComponentIsEntityType())
    {
      result = swift_release();
      v6 = 0;
    }
    else
    {
      IsEntityType = RESceneUnderstandingComponentIsEntityType();
      result = swift_release();
      if (IsEntityType)
        v6 = 1;
      else
        v6 = 2;
    }
    v7 = v4 == 2;
    goto LABEL_10;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall Entity.deferActivationUntilFullyLoaded()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = v0;
  if (REEntityIsActive())
  {
    static os_log_type_t.default.getter();
    type metadata accessor for OS_os_log();
    v2 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
  MEMORY[0x22076D154](*(_QWORD *)(v1 + 16), 0);
  REDeferredActivationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
}

void static ParticleEmitterComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3003;
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _OWORD v17[5];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (_OWORD *)(*(_QWORD *)(v1 + 48) + 80 * v9);
    v11 = v10[3];
    v17[2] = v10[2];
    v17[3] = v11;
    v17[4] = v10[4];
    v12 = v10[1];
    v17[0] = *v10;
    v17[1] = v12;
    result = specialized Set._Variant.insert(_:)((uint64_t)&v16, (Swift::Int)v17);
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release();
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL static ParticleEmitterComponent.EmitterShape.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ParticleEmitterComponent.EmitterShape.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCD9444 + 4 * byte_21BE71050[*v0]))(0x746E696F70, 0xE500000000000000);
}

uint64_t sub_21BCD9444()
{
  return 0x656E616C70;
}

uint64_t sub_21BCD9454()
{
  return 7892834;
}

uint64_t sub_21BCD9464()
{
  return 0x657265687073;
}

uint64_t sub_21BCD9478()
{
  return 1701736291;
}

uint64_t sub_21BCD9488()
{
  return 0x7265646E696C7963;
}

uint64_t sub_21BCD94A0()
{
  return 0x7375726F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.EmitterShape.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.EmitterShape.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys();
  return CodingKey.debugDescription.getter();
}

void ParticleEmitterComponent.EmitterShape.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[22];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.TorusCodingKeys>);
  v17[16] = *(_QWORD *)(v3 - 8);
  v17[17] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v17[15] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.CylinderCodingKeys>);
  v17[13] = *(_QWORD *)(v5 - 8);
  v17[14] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v17[12] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.ConeCodingKeys>);
  v17[10] = *(_QWORD *)(v7 - 8);
  v17[11] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v17[9] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.SphereCodingKeys>);
  v17[7] = *(_QWORD *)(v9 - 8);
  v17[8] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v17[6] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.BoxCodingKeys>);
  v17[4] = *(_QWORD *)(v11 - 8);
  v17[5] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v17[3] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.PlaneCodingKeys>);
  v17[1] = *(_QWORD *)(v13 - 8);
  v17[2] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.PointCodingKeys>);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.CodingKeys>);
  v17[19] = *(_QWORD *)(v15 - 8);
  v17[20] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_21BCD9978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 71) = 0;
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();
  v5 = *(_QWORD *)(v4 - 96);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CodingKeys, &unk_24DFCAC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CodingKeys, &unk_24DFCAC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CodingKeys, &unk_24DFCAC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CodingKeys, &unk_24DFCAC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.TorusCodingKeys, &unk_24DFCAD10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.TorusCodingKeys, &unk_24DFCAD10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.TorusCodingKeys, &unk_24DFCAD10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CylinderCodingKeys, &unk_24DFCACF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CylinderCodingKeys, &unk_24DFCACF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.CylinderCodingKeys, &unk_24DFCACF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.ConeCodingKeys, &unk_24DFCACD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.ConeCodingKeys, &unk_24DFCACD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.ConeCodingKeys, &unk_24DFCACD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.SphereCodingKeys, &unk_24DFCACB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.SphereCodingKeys, &unk_24DFCACB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.SphereCodingKeys, &unk_24DFCACB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.BoxCodingKeys, &unk_24DFCAC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.BoxCodingKeys, &unk_24DFCAC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.BoxCodingKeys, &unk_24DFCAC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.PlaneCodingKeys, &unk_24DFCAC70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.PlaneCodingKeys, &unk_24DFCAC70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.PlaneCodingKeys, &unk_24DFCAC70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.PointCodingKeys, &unk_24DFCAC50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.PointCodingKeys, &unk_24DFCAC50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape.PointCodingKeys, &unk_24DFCAC50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys);
  }
  return result;
}

uint64_t ParticleEmitterComponent.EmitterShape.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v50 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.TorusCodingKeys>);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v49 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.CylinderCodingKeys>);
  v38 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.ConeCodingKeys>);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.SphereCodingKeys>);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.BoxCodingKeys>);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.PlaneCodingKeys>);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.PointCodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();
  v22 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v22)
  {
    v30[2] = v16;
    v30[0] = v14;
    v30[1] = v13;
    v52 = v18;
    v31 = v17;
    v23 = v20;
    v24 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X9 }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v27 = &type metadata for ParticleEmitterComponent.EmitterShape;
    v28 = v31;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v28);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
}

void sub_21BCDA1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 70) = 1;
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 264);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(v4, *(_QWORD *)(v3 - 248));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v5);
    JUMPOUT(0x21BCDA468);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x21BCDA1B4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.EmitterShape@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.EmitterShape.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.EmitterShape(_QWORD *a1)
{
  ParticleEmitterComponent.EmitterShape.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.BirthLocation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = REVFXEmitterComponentGetBirthLocation();
  if ((_DWORD)result == 1)
  {
    v11 = 0;
    v12 = 0;
    v9 = 1;
    v10 = 1;
    goto LABEL_15;
  }
  if ((_DWORD)result != 2)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v9 = 1;
    goto LABEL_15;
  }
  result = REVFXEmitterComponentGetBirthLocationVertex();
  v6 = fabsf(v5);
  if (v6 <= -1.0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v6 >= 1.8447e19)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v7 = fabsf(v3);
  if (v7 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v7 >= 1.8447e19)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = fabsf(v4);
  if ((~LODWORD(v8) & 0x7F800000) == 0
    || (LODWORD(v6) & 0x7F800000) == 0x7F800000
    || (LODWORD(v7) & 0x7F800000) == 0x7F800000)
  {
    goto LABEL_20;
  }
  if (v8 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v8 < 1.8447e19)
  {
    v9 = 0;
    v10 = (unint64_t)v6;
    v11 = (unint64_t)v7;
    v12 = (unint64_t)v8;
LABEL_15:
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = v9;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

void ParticleEmitterComponent.BirthLocation.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v3 = (v1 | *(_QWORD *)(v0 + 24) | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656D756C6F76;
  if (*v0 != 1)
    v1 = 0x7365636974726576;
  if (*v0)
    return v1;
  else
    return 0x65636166727573;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.BirthLocation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.BirthLocation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.BirthLocation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  __int128 v29;
  int8x16_t v30;
  __int128 v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.VerticesCodingKeys>);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.VolumeCodingKeys>);
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v22 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys>);
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_OWORD *)(v1 + 16);
  v28 = *(int8x16_t *)v1;
  v29 = v14;
  v15 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15 == 1)
  {
    if (vorrq_s8((int8x16_t)vdupq_lane_s64(v29, 0), v28).i64[1] | v28.i64[0] | *((_QWORD *)&v29 + 1))
    {
      v30.i8[0] = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();
      v16 = v22;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v24);
    }
    else
    {
      v30.i8[0] = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    v30.i8[0] = 2;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();
    v17 = v25;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v30 = v28;
    v31 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<UInt> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt>, MEMORY[0x24BEE4108]);
    v18 = v27;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

Swift::Int ParticleEmitterComponent.BirthLocation.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    v3 = (v1 | v4 | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.BirthLocation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.VerticesCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  v40 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v43 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.VolumeCodingKeys>);
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();
  v17 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v36 = v8;
    v19 = v42;
    v18 = v43;
    v49 = v13;
    v20 = KeyedDecodingContainer.allKeys.getter();
    v21 = v12;
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      if (*(_BYTE *)(v20 + 32))
      {
        if (*(_BYTE *)(v20 + 32) != 1)
        {
          LOBYTE(v45) = 2;
          lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();
          v27 = v18;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v28 = v41;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<UInt> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt>, MEMORY[0x24BEE4118]);
          v33 = v39;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v33);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v21);
          v34 = 0;
          v32 = v45;
          v29 = v46;
          v30 = v47;
          v31 = v48;
          v25 = (uint64_t)v44;
LABEL_12:
          *(_QWORD *)v28 = v32;
          *(_QWORD *)(v28 + 8) = v29;
          *(_QWORD *)(v28 + 16) = v30;
          *(_QWORD *)(v28 + 24) = v31;
          *(_BYTE *)(v28 + 32) = v34;
          return __swift_destroy_boxed_opaque_existential_1(v25);
        }
        LOBYTE(v45) = 1;
        lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v12);
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 1;
      }
      else
      {
        LOBYTE(v45) = 0;
        lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v36);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v12);
        v32 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v34 = 1;
      v25 = (uint64_t)v44;
      v28 = v41;
      goto LABEL_12;
    }
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v24 = &type metadata for ParticleEmitterComponent.BirthLocation;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v12);
  }
  v25 = (uint64_t)v44;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.BirthLocation@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.BirthLocation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.BirthLocation(_QWORD *a1)
{
  return ParticleEmitterComponent.BirthLocation.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance ParticleEmitterComponent.BirthLocation()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v3 = (v1 | *(_QWORD *)(v0 + 24) | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.BirthLocation()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    v3 = (v1 | v4 | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C61636F6CLL;
  if (*v0 != 1)
    v1 = 0x6C616D726F6ELL;
  if (*v0)
    return v1;
  else
    return 0x646C726F77;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.BirthDirection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.BirthDirection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.BirthDirection.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.NormalCodingKeys>);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.LocalCodingKeys>);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.WorldCodingKeys>);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.CodingKeys>);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();
      v16 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

uint64_t ParticleEmitterComponent.BirthDirection.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.NormalCodingKeys>);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.LocalCodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.WorldCodingKeys>);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();
  v13 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for ParticleEmitterComponent.BirthDirection;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();
      v20 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();
      v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.BirthDirection@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ParticleEmitterComponent.BirthDirection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.BirthDirection(_QWORD *a1)
{
  return ParticleEmitterComponent.BirthDirection.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCDBB1C + 4 * byte_21BE71065[*v0]))(0x68747269426E6FLL, 0xE700000000000000);
}

uint64_t sub_21BCDBB1C()
{
  return 0x6574616470556E6FLL;
}

uint64_t sub_21BCDBB34()
{
  return 0x68746165446E6FLL;
}

uint64_t sub_21BCDBB48()
{
  return 0x64696C6C6F436E6FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.SpawnOccasion.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys();
  return CodingKey.debugDescription.getter();
}

void ParticleEmitterComponent.SpawnOccasion.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys>);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys>);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys>);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys>);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.CodingKeys>);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_21BCDBED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

uint64_t ParticleEmitterComponent.SpawnOccasion.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys>);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys>);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys>);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();
  v15 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v19 = &type metadata for ParticleEmitterComponent.SpawnOccasion;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.SpawnOccasion@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.SpawnOccasion.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.SpawnOccasion(_QWORD *a1)
{
  ParticleEmitterComponent.SpawnOccasion.encode(to:)(a1);
}

BOOL static ParticleEmitterComponent.SimulationSpace.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ParticleEmitterComponent.SimulationSpace.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61626F6C67;
  else
    return 0x6C61636F6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.SimulationSpace.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.SimulationSpace.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys>);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationSpace.LocalCodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationSpace.CodingKeys>);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

Swift::Int ParticleEmitterComponent.SimulationSpace.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.SimulationSpace.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys>);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationSpace.LocalCodingKeys>);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationSpace.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();
  v11 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = KeyedDecodingContainer.allKeys.getter();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v21 = &type metadata for ParticleEmitterComponent.SimulationSpace;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();
    v22 = v6;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.SimulationSpace@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ParticleEmitterComponent.SimulationSpace.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.SimulationSpace(_QWORD *a1)
{
  return ParticleEmitterComponent.SimulationSpace.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.SimulationState.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6573756170;
  if (*v0 != 1)
    v1 = 1886352499;
  if (*v0)
    return v1;
  else
    return 2036427888;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.SimulationState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.SimulationState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.StopCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.StopCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.SimulationState.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.StopCodingKeys>);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.PauseCodingKeys>);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.PlayCodingKeys>);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.CodingKeys>);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();
      v16 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

uint64_t ParticleEmitterComponent.SimulationState.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.StopCodingKeys>);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.PauseCodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.PlayCodingKeys>);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();
  v13 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for ParticleEmitterComponent.SimulationState;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();
      v20 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();
      v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.SimulationState@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ParticleEmitterComponent.SimulationState.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.SimulationState(_QWORD *a1)
{
  return ParticleEmitterComponent.SimulationState.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[336];

  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_WORD *)(a1 + 40) = 257;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 80) = 513;
  *(_OWORD *)(a1 + 96) = xmmword_21BE75100;
  *(_QWORD *)(a1 + 112) = 1056964608;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&zmmword_21BE41220[16];
  *(_QWORD *)(a1 + 144) = 0x3E80000040C90FDALL;
  *(_BYTE *)(a1 + 152) = 2;
  *(_DWORD *)(a1 + 156) = 1065353216;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0x10000;
  *(_BYTE *)(a1 + 172) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 256;
  *(_OWORD *)(a1 + 192) = xmmword_21BE75110;
  *(_QWORD *)(a1 + 208) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 216) = 1065353216;
  v3 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(a1 + 224) = v2;
  *(_QWORD *)(a1 + 232) = v3;
  ParticleEmitterComponent.ParticleEmitter.init()(a1 + 240);
  _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOi0_((uint64_t)v5);
  result = outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v5, a1 + 576);
  *(_BYTE *)(a1 + 897) = 0;
  return result;
}

double ParticleEmitterComponent.emissionDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ParticleEmitterComponent.emissionDuration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ParticleEmitterComponent.emissionDuration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.emissionDurationVariation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ParticleEmitterComponent.emissionDurationVariation.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*ParticleEmitterComponent.emissionDurationVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.idleDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ParticleEmitterComponent.idleDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*ParticleEmitterComponent.idleDuration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.idleDurationVariation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void ParticleEmitterComponent.idleDurationVariation.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*ParticleEmitterComponent.idleDurationVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.warmupDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void ParticleEmitterComponent.warmupDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*ParticleEmitterComponent.warmupDuration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.shouldLoop.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ParticleEmitterComponent.shouldLoop.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.shouldLoop.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.emitterShape.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 41);
}

_BYTE *ParticleEmitterComponent.emitterShape.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.emitterShape.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.birthLocation.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 80);
  result = *(__n128 *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 ParticleEmitterComponent.birthLocation.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 64) = v4;
  *(_BYTE *)(v1 + 80) = v2;
  return result;
}

uint64_t (*ParticleEmitterComponent.birthLocation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.birthDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 81);
}

_BYTE *ParticleEmitterComponent.birthDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.birthDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.emitterShapeSize.getter()
{
  __n128 *v0;

  return v0[6];
}

void ParticleEmitterComponent.emitterShapeSize.setter(__n128 a1)
{
  __n128 *v1;

  v1[6] = a1;
}

uint64_t (*ParticleEmitterComponent.emitterShapeSize.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.speed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 112);
}

void ParticleEmitterComponent.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 112) = a1;
}

uint64_t (*ParticleEmitterComponent.speed.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.speedVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 116);
}

void ParticleEmitterComponent.speedVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 116) = a1;
}

uint64_t (*ParticleEmitterComponent.speedVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.emissionDirection.getter()
{
  __n128 *v0;

  return v0[8];
}

void ParticleEmitterComponent.emissionDirection.setter(__n128 a1)
{
  __n128 *v1;

  v1[8] = a1;
}

uint64_t (*ParticleEmitterComponent.emissionDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.radialAmount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 144);
}

void ParticleEmitterComponent.radialAmount.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 144) = a1;
}

uint64_t (*ParticleEmitterComponent.radialAmount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.torusInnerRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 148);
}

void ParticleEmitterComponent.torusInnerRadius.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 148) = a1;
}

uint64_t (*ParticleEmitterComponent.torusInnerRadius.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.spawnOccasion.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 152);
}

_BYTE *ParticleEmitterComponent.spawnOccasion.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 152) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.spawnOccasion.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.spawnVelocityFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 156);
}

void ParticleEmitterComponent.spawnVelocityFactor.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 156) = a1;
}

uint64_t (*ParticleEmitterComponent.spawnVelocityFactor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.spawnSpreadFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 160);
}

void ParticleEmitterComponent.spawnSpreadFactor.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 160) = a1;
}

uint64_t (*ParticleEmitterComponent.spawnSpreadFactor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.spawnSpreadFactorVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 164);
}

void ParticleEmitterComponent.spawnSpreadFactorVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 164) = a1;
}

uint64_t (*ParticleEmitterComponent.spawnSpreadFactorVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.spawnInheritsParentColor.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t ParticleEmitterComponent.spawnInheritsParentColor.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 168) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.spawnInheritsParentColor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.simulationState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 169);
}

_BYTE *ParticleEmitterComponent.simulationState.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 169) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.simulationState.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.simulationSpace.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 170);
}

char *ParticleEmitterComponent.simulationSpace.setter(char *result)
{
  uint64_t v1;
  char v2;

  v2 = *result;
  *(_BYTE *)(v1 + 170) = *result;
  *(_BYTE *)(v1 + 171) = v2 ^ 1;
  return result;
}

uint64_t (*ParticleEmitterComponent.simulationSpace.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return ParticleEmitterComponent.simulationSpace.modify;
}

uint64_t ParticleEmitterComponent.simulationSpace.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)result + 171) = (*(_BYTE *)(*(_QWORD *)result + 170) & 1) == 0;
  return result;
}

uint64_t ParticleEmitterComponent.particlesInheritTransform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 171);
}

uint64_t ParticleEmitterComponent.particlesInheritTransform.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 171) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.particlesInheritTransform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.fieldSimulationSpace.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 172);
}

_BYTE *ParticleEmitterComponent.fieldSimulationSpace.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 172) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.fieldSimulationSpace.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall ParticleEmitterComponent.resetSimulation()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 184) = 1;
}

Swift::Void __swiftcall ParticleEmitterComponent.restart()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
    __break(1u);
  else
    *(_QWORD *)(v0 + 176) = v3;
}

uint64_t ParticleEmitterComponent.isEmitting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 185);
}

uint64_t ParticleEmitterComponent.isEmitting.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 185) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.isEmitting.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall ParticleEmitterComponent.burst()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
    __break(1u);
  else
    *(_QWORD *)(v0 + 192) = v3;
}

uint64_t ParticleEmitterComponent.burstCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200);
}

uint64_t ParticleEmitterComponent.burstCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.burstCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.burstCountVariation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t ParticleEmitterComponent.burstCountVariation.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.burstCountVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.simulationRate.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 216);
}

void ParticleEmitterComponent.simulationRate.setter(float a1)
{
  uint64_t v1;
  float v2;

  v2 = fminf(a1, 2.0);
  if (v2 < 0.0)
    v2 = 0.0;
  *(float *)(v1 + 216) = v2;
}

uint64_t (*ParticleEmitterComponent.simulationRate.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return ParticleEmitterComponent.simulationRate.modify;
}

uint64_t ParticleEmitterComponent.simulationRate.modify(uint64_t result, char a2)
{
  float v2;

  if ((a2 & 1) == 0)
  {
    v2 = fminf(*(float *)(*(_QWORD *)result + 216), 2.0);
    if (v2 < 0.0)
      v2 = 0.0;
    *(float *)(*(_QWORD *)result + 216) = v2;
  }
  return result;
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ParticleEmitterComponent.collisionPlanes_v1 : ParticleEmitterComponent(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = *a1;
  swift_bridgeObjectRetain();
  ParticleEmitterComponent.collisionPlanes_v1.didset(v2);
  return swift_bridgeObjectRelease();
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 224) = a1;
  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(v2 + 16))
  {
    v3 = swift_bridgeObjectRetain();
    v4 = specialized Set.init<A>(_:)(v3);
    swift_bridgeObjectRelease();
    v5 = swift_bridgeObjectRetain();
    v6 = specialized Set.init<A>(_:)(v5);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v6 + 16) <= *(_QWORD *)(v4 + 16) >> 3)
      specialized Set._subtract<A>(_:)(v6);
    else
      v4 = specialized _NativeSet.subtracting<A>(_:)(v6, v4);
    swift_bridgeObjectRelease();
    specialized Set.formUnion<A>(_:)(v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.didset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)(v1 + 224) + 16) < *(_QWORD *)(result + 16))
  {
    v2 = swift_bridgeObjectRetain();
    v3 = specialized Set.init<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v4 = swift_bridgeObjectRetain();
    v5 = specialized Set.init<A>(_:)(v4);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v5 + 16) <= *(_QWORD *)(v3 + 16) >> 3)
      specialized Set._subtract<A>(_:)(v5);
    else
      v3 = specialized _NativeSet.subtracting<A>(_:)(v5, v3);
    swift_bridgeObjectRelease();
    return specialized Set.formUnion<A>(_:)(v3);
  }
  return result;
}

uint64_t (*ParticleEmitterComponent.collisionPlanes_v1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 224);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return ParticleEmitterComponent.collisionPlanes_v1.modify;
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 224);
  *(_QWORD *)(v3 + 224) = *a1;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v2 + 16);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (v6 < v5)
    {
      v7 = swift_bridgeObjectRetain();
      v8 = specialized Set.init<A>(_:)(v7);
      swift_bridgeObjectRelease();
      v9 = swift_bridgeObjectRetain();
      v10 = specialized Set.init<A>(_:)(v9);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v10 + 16) <= *(_QWORD *)(v8 + 16) >> 3)
      {
        specialized Set._subtract<A>(_:)(v10);
        swift_bridgeObjectRelease();
        v11 = v8;
      }
      else
      {
        v11 = specialized _NativeSet.subtracting<A>(_:)(v10, v8);
        swift_bridgeObjectRelease();
      }
      specialized Set.formUnion<A>(_:)(v11);
    }
    swift_bridgeObjectRelease();
  }
  else if (v6 < v5)
  {
    v12 = swift_bridgeObjectRetain();
    v13 = specialized Set.init<A>(_:)(v12);
    swift_bridgeObjectRelease();
    v14 = swift_bridgeObjectRetain();
    v15 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v15 + 16) <= *(_QWORD *)(v13 + 16) >> 3)
    {
      specialized Set._subtract<A>(_:)(v15);
      swift_bridgeObjectRelease();
      v16 = v13;
    }
    else
    {
      v16 = specialized _NativeSet.subtracting<A>(_:)(v15, v13);
      swift_bridgeObjectRelease();
    }
    specialized Set.formUnion<A>(_:)(v16);
  }
  return swift_bridgeObjectRelease();
}

double ParticleEmitterComponent.ParticleEmitter.init()@<D0>(uint64_t a1@<X8>)
{
  CGColorRef GenericRGB;
  CGColorRef v3;
  CGColorRef v4;
  CGColorRef v5;
  double result;

  GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  v3 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  v4 = CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0);
  v5 = CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0);
  *(_QWORD *)a1 = 1120403456;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  *(_QWORD *)(a1 + 40) = 1017370378;
  *(_QWORD *)(a1 + 48) = GenericRGB;
  *(_QWORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = 256;
  *(_OWORD *)(a1 + 96) = xmmword_21BE41200;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 1;
  *(_QWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = xmmword_21BE75120;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 1050253722;
  *(_BYTE *)(a1 + 168) = 3;
  *(_OWORD *)(a1 + 172) = xmmword_21BE75130;
  *(_QWORD *)(a1 + 188) = 1065353216;
  *(_DWORD *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 208) = xmmword_21BE75140;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)&zmmword_21BE41220[16];
  *(_BYTE *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_WORD *)(a1 + 264) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_BYTE *)(a1 + 320) = 3;
  return result;
}

_QWORD *ParticleEmitterComponent.mainEmitter.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _QWORD v5[42];

  v3 = (const void *)(v1 + 240);
  memcpy(v5, v3, 0x141uLL);
  memcpy(a1, v3, 0x141uLL);
  return outlined retain of ParticleEmitterComponent.ParticleEmitter(v5);
}

void *ParticleEmitterComponent.mainEmitter.setter(const void *a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v5[336];

  v3 = (void *)(v1 + 240);
  memcpy(v5, v3, 0x141uLL);
  outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)v5);
  return memcpy(v3, a1, 0x141uLL);
}

uint64_t (*ParticleEmitterComponent.mainEmitter.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.spawnedEmitter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[336];

  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v4);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, a1);
  return outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ParticleEmitterComponent.ParticleEmitter?);
}

uint64_t key path setter for ParticleEmitterComponent.spawnedEmitter : ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[336];
  _BYTE v5[336];

  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a1, (uint64_t)v4);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a2 + 576, (uint64_t)v5);
  outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ParticleEmitterComponent.ParticleEmitter?);
  outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of ParticleEmitterComponent.ParticleEmitter?);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, a2 + 576);
  result = _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v4);
  *(_BYTE *)(a2 + 897) = (_DWORD)result == 0;
  return result;
}

uint64_t ParticleEmitterComponent.spawnedEmitter.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[336];
  _BYTE v4[336];

  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a1, (uint64_t)v3);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v4);
  outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of ParticleEmitterComponent.ParticleEmitter?);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v3, v1 + 576);
  result = _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v3);
  *(_BYTE *)(v1 + 897) = (_DWORD)result == 0;
  return result;
}

void (*ParticleEmitterComponent.spawnedEmitter.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x150uLL);
  *a1 = v3;
  v3[41] = v1;
  return ParticleEmitterComponent.spawnedEmitter.modify;
}

void ParticleEmitterComponent.spawnedEmitter.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    v3 = v2[41];
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v3 + 576, (uint64_t)v2);
    *(_BYTE *)(v3 + 897) = _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v2) == 0;
  }
  free(v2);
}

void ParticleEmitterComponent.ParticleEmitter.BillboardMode.hash(into:)(uint64_t a1)
{
  __n128 *v1;
  Swift::UInt32 v3;
  Swift::UInt v5;
  Swift::UInt32 v6;
  __n128 v7;

  v3 = v1[1].n128_u32[0];
  if (v1[1].n128_u8[4] == 1)
  {
    v5 = *v1 != 0 || v3 != 0;
    Hasher._combine(_:)(v5);
  }
  else
  {
    v7 = *v1;
    Hasher._combine(_:)(2uLL);
    specialized SIMD.hash(into:)(a1, v7);
    if ((v3 & 0x7FFFFFFF) != 0)
      v6 = v3;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 1701147238;
  if (*v0)
    return v1;
  else
    return 0x72616F626C6C6962;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69746169726176;
  else
    return 1936291937;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BillboardMode.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys>);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys>);
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys>);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys>);
  v31 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = *v1;
  v13 = v1[1];
  v35 = *((_DWORD *)v1 + 4);
  v14 = *((unsigned __int8 *)v1 + 20);
  v15 = a1[3];
  v16 = a1;
  v17 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v16, v15);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14 == 1)
  {
    if (v13 | v12 || v35)
    {
      LOBYTE(v33) = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();
      v22 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v27);
    }
    else
    {
      LOBYTE(v33) = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v10);
  }
  else
  {
    LOBYTE(v33) = 2;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();
    v18 = v28;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v33 = v12;
    v34 = v13;
    v36 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    v19 = v30;
    v20 = v32;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v20)
    {
      LOBYTE(v33) = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v10);
  }
}

Swift::Int ParticleEmitterComponent.ParticleEmitter.BillboardMode.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt32 v3;
  int v4;
  BOOL v5;
  Swift::UInt v6;
  __n128 v7;
  Swift::UInt32 v8;
  __n128 v10;
  char v11[72];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  if (v4 == 1)
  {
    if (v1 | v2)
      v5 = 0;
    else
      v5 = v3 == 0;
    v6 = !v5;
    Hasher._combine(_:)(v6);
  }
  else
  {
    v7.n128_u64[0] = v2;
    v7.n128_u64[1] = v1;
    v10 = v7;
    Hasher._combine(_:)(2uLL);
    specialized SIMD.hash(into:)(v11, v10);
    if ((v3 & 0x7FFFFFFF) != 0)
      v8 = v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BillboardMode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;

  v42 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v44 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys>);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();
  v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    goto LABEL_7;
  v37 = v8;
  v18 = v43;
  v19 = v44;
  v46 = v13;
  v20 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v20 + 16) != 1)
  {
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v24 = &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v12);
LABEL_7:
    v25 = (uint64_t)v45;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  if (*(_BYTE *)(v20 + 32))
  {
    if (*(_BYTE *)(v20 + 32) == 1)
    {
      v21 = v46;
      LOBYTE(v48) = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v12);
      v29 = 0;
      v30 = 1;
      v31 = 0;
      v32 = 1;
    }
    else
    {
      LOBYTE(v48) = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();
      v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v43 = (char *)v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v47 = 0;
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
      v34 = v40;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v48;
      v29 = v49;
      v47 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      v31 = v35;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v46 + 8))(v28, v43);
      v32 = 0;
    }
  }
  else
  {
    v27 = v46;
    LOBYTE(v48) = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v12);
    v30 = 0;
    v29 = 0;
    v32 = 1;
    v31 = 0;
  }
  v25 = (uint64_t)v45;
  v33 = v42;
  *v42 = v30;
  v33[1] = v29;
  *((_DWORD *)v33 + 4) = v31;
  *((_BYTE *)v33 + 20) = v32;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.BillboardMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode(_QWORD *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.BillboardMode.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt32 v3;
  int v4;
  BOOL v5;
  Swift::UInt v6;
  __n128 v7;
  Swift::UInt32 v8;
  __n128 v10;
  char v11[72];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  if (v4 == 1)
  {
    if (v1 | v2)
      v5 = 0;
    else
      v5 = v3 == 0;
    v6 = !v5;
    Hasher._combine(_:)(v6);
  }
  else
  {
    v7.n128_u64[0] = v2;
    v7.n128_u64[1] = v1;
    v10 = v7;
    Hasher._combine(_:)(2uLL);
    specialized SIMD.hash(into:)(v11, v10);
    if ((v3 & 0x7FFFFFFF) != 0)
      v8 = v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCDEDF8 + 4 * byte_21BE71071[a1]))(0x61467261656E696CLL, 0xED000074754F6564);
}

unint64_t sub_21BCDEE08()
{
  return 0xD000000000000010;
}

uint64_t sub_21BCDEE24()
{
  return 0x6461466B63697571;
}

uint64_t sub_21BCDEE48()
{
  return 0x6564614665736165;
}

uint64_t sub_21BCDEE74()
{
  return 0x746E6174736E6F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  unsigned __int8 *v0;

  return ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys();
  return CodingKey.debugDescription.getter();
}

void ParticleEmitterComponent.ParticleEmitter.OpacityCurve.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[22];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys>);
  v17[16] = *(_QWORD *)(v3 - 8);
  v17[17] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v17[15] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys>);
  v17[13] = *(_QWORD *)(v5 - 8);
  v17[14] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v17[12] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys>);
  v17[10] = *(_QWORD *)(v7 - 8);
  v17[11] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v17[9] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys>);
  v17[7] = *(_QWORD *)(v9 - 8);
  v17[8] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v17[6] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys>);
  v17[4] = *(_QWORD *)(v11 - 8);
  v17[5] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v17[3] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys>);
  v17[1] = *(_QWORD *)(v13 - 8);
  v17[2] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys>);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys>);
  v17[19] = *(_QWORD *)(v15 - 8);
  v17[20] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_21BCDF3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 71) = 0;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();
  v5 = *(_QWORD *)(v4 - 96);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.OpacityCurve.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v50 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys>);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v49 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys>);
  v38 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys>);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys>);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys>);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys>);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();
  v22 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v22)
  {
    v30[2] = v16;
    v30[0] = v14;
    v30[1] = v13;
    v52 = v18;
    v31 = v17;
    v23 = v20;
    v24 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X9 }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v27 = &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
    v28 = v31;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v28);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
}

void sub_21BCDF9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 70) = 1;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 264);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(v4, *(_QWORD *)(v3 - 248));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v5);
    JUMPOUT(0x21BCDFC7CLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x21BCDF9C8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.OpacityCurve.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve(_QWORD *a1)
{
  ParticleEmitterComponent.ParticleEmitter.OpacityCurve.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCDFCEC + 4 * byte_21BE71086[*v0]))(0x6973616572636E69, 0xEF6874706544676ELL);
}

uint64_t sub_21BCDFCEC@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2309;
}

uint64_t sub_21BCDFD00()
{
  return 0x6973616572636564;
}

uint64_t sub_21BCDFD4C()
{
  return 0x646574726F736E75;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys();
  return CodingKey.debugDescription.getter();
}

void ParticleEmitterComponent.ParticleEmitter.SortOrder.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[22];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys>);
  v17[16] = *(_QWORD *)(v3 - 8);
  v17[17] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v17[15] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys>);
  v17[13] = *(_QWORD *)(v5 - 8);
  v17[14] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v17[12] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys>);
  v17[10] = *(_QWORD *)(v7 - 8);
  v17[11] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v17[9] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys>);
  v17[7] = *(_QWORD *)(v9 - 8);
  v17[8] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v17[6] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys>);
  v17[4] = *(_QWORD *)(v11 - 8);
  v17[5] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v17[3] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys>);
  v17[1] = *(_QWORD *)(v13 - 8);
  v17[2] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys>);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys>);
  v17[19] = *(_QWORD *)(v15 - 8);
  v17[20] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_21BCE027C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 71) = 0;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();
  v5 = *(_QWORD *)(v4 - 96);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.SortOrder.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v50 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys>);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v49 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys>);
  v38 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys>);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys>);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys>);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys>);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();
  v22 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v22)
  {
    v30[2] = v16;
    v30[0] = v14;
    v30[1] = v13;
    v52 = v18;
    v31 = v17;
    v23 = v20;
    v24 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X9 }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v27 = &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder;
    v28 = v31;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v28);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
}

void sub_21BCE08C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 70) = 1;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 264);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(v4, *(_QWORD *)(v3 - 248));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v5);
    JUMPOUT(0x21BCE0B4CLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x21BCE0898);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.SortOrder.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder(_QWORD *a1)
{
  ParticleEmitterComponent.ParticleEmitter.SortOrder.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65757161706FLL;
  if (*v0 != 1)
    v1 = 0x6576697469646461;
  if (*v0)
    return v1;
  else
    return 0x6168706C61;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BlendMode.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys>);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys>);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys>);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys>);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();
      v16 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BlendMode.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys>);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys>);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();
  v13 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();
      v20 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();
      v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.BlendMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode(_QWORD *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.BlendMode.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 32) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 36);
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 36) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

_BYTE *ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E69706F6F6CLL;
  if (*v0 != 1)
    v1 = 0x657665526F747561;
  if (*v0)
    return v1;
  else
    return 0x65636E4F79616C70;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys>);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys>);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys>);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys>);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();
      v16 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys>);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys>);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();
  v13 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();
      v20 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();
      v28 = v15;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode(_QWORD *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.encode(to:)(a1);
}

void __swiftcall ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()(RealityFoundation::ParticleEmitterComponent::ParticleEmitter::ImageSequence *__return_ptr retstr)
{
  *(int64x2_t *)&retstr->rowCount = vdupq_n_s64(3uLL);
  retstr->initialFrame = 0;
  retstr->initialFrameVariation = 0;
  *(_QWORD *)&retstr->frameRate = 1091567616;
  retstr->animationMode = RealityFoundation_ParticleEmitterComponent_ParticleEmitter_ImageSequence_AnimationRepeatMode_looping;
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt32 v4;
  Swift::UInt32 v5;
  Swift::UInt v6;
  Swift::UInt32 v7;
  Swift::UInt32 v8;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_DWORD *)(v0 + 32);
  v5 = *(_DWORD *)(v0 + 36);
  v6 = *(unsigned __int8 *)(v0 + 40);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v7 = v4;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v5 & 0x7FFFFFFF) != 0)
    v8 = v5;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCE1E70 + 4 * byte_21BE7109B[a1]))(0x746E756F43776F72, 0xE800000000000000);
}

uint64_t sub_21BCE1E70()
{
  return 0x6F436E6D756C6F63;
}

uint64_t sub_21BCE1E90()
{
  return 0x466C616974696E69;
}

unint64_t sub_21BCE1EB0()
{
  return 0xD000000000000015;
}

uint64_t sub_21BCE1ED0()
{
  return 0x746152656D617266;
}

unint64_t sub_21BCE1EEC()
{
  return 0xD000000000000012;
}

uint64_t sub_21BCE1F08()
{
  return 0x6F6974616D696E61;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  unsigned __int8 *v0;

  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v15[2] = *(_QWORD *)(v1 + 16);
  v15[3] = v8;
  v15[1] = *(_QWORD *)(v1 + 24);
  v9 = *(_BYTE *)(v1 + 40);
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v20 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v19 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v17 = v9;
    v16 = 6;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

Swift::Int ParticleEmitterComponent.ParticleEmitter.ImageSequence.hashValue.getter()
{
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.hash(into:)();
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v27 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v25 = 2;
    v19 = KeyedDecodingContainer.decode(_:forKey:)();
    v24 = 3;
    v18 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    v12 = v11;
    v22 = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v14;
    v20 = 6;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v21;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    v17 = v18;
    *(_QWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v17;
    *(_DWORD *)(a2 + 32) = v12;
    *(_DWORD *)(a2 + 36) = v15;
    *(_BYTE *)(a2 + 40) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence(_QWORD *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.hash(into:)();
  return Hasher._finalize()();
}

float ParticleEmitterComponent.ParticleEmitter.birthRate.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ParticleEmitterComponent.ParticleEmitter.birthRate.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.birthRate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.birthRateVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.birthRateVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.dampingFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.dampingFactor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.acceleration.getter()
{
  __n128 *v0;

  return v0[1];
}

void ParticleEmitterComponent.ParticleEmitter.acceleration.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.acceleration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.spreadingAngle.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

void ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 32) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.spreadingAngle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 36) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.size.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 40);
}

void ParticleEmitterComponent.ParticleEmitter.size.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 40) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.size.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.sizeVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 44);
}

void ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 44) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sizeVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.startColorA.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

void ParticleEmitterComponent.ParticleEmitter.startColorA.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.startColorA.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.startColorB.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

void ParticleEmitterComponent.ParticleEmitter.startColorB.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.startColorB.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.useStartColorRange.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.endColorA.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 72);
}

void ParticleEmitterComponent.ParticleEmitter.endColorA.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.endColorA.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.endColorB.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 80);
}

void ParticleEmitterComponent.ParticleEmitter.endColorB.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.endColorB.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.useEndColorRange.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 89) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.useEndColor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.billboardMode.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[7].n128_u32[0];
  v3 = v1[7].n128_u8[4];
  result = v1[6];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 ParticleEmitterComponent.ParticleEmitter.billboardMode.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u32[0];
  v3 = a1[1].n128_u8[4];
  result = *a1;
  v1[6] = *a1;
  v1[7].n128_u32[0] = v2;
  v1[7].n128_u8[4] = v3;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.billboardMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.mass.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 120);
}

void ParticleEmitterComponent.ParticleEmitter.mass.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 120) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.mass.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.massVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 124);
}

void ParticleEmitterComponent.ParticleEmitter.massVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 124) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.massVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.ParticleEmitter.lifeSpan.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

void ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 128) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.lifeSpan.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

void ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 136) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angle.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 144);
}

void ParticleEmitterComponent.ParticleEmitter.angle.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 144) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angleVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 148);
}

void ParticleEmitterComponent.ParticleEmitter.angleVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 148) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angleVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angularSpeed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 152);
}

void ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 152) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angularSpeed.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 156);
}

void ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 156) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.bounce.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 160);
}

void ParticleEmitterComponent.ParticleEmitter.bounce.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 160) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.bounce.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.friction.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 164);
}

void ParticleEmitterComponent.ParticleEmitter.friction.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 164) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.friction.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.opacityCurve.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 168);
}

_BYTE *ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 168) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.opacityCurve.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 172);
}

void ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 172) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 176);
}

void ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 176) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 180);
}

void ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 180) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.noiseStrength.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 184);
}

void ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 184) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.noiseStrength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.noiseScale.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 188);
}

void ParticleEmitterComponent.ParticleEmitter.noiseScale.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 188) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.noiseScale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 192);
}

void ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 192) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.attractionStrength.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 196);
}

void ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 196) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.attractionStrength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.attractionCenter.getter()
{
  __n128 *v0;

  return v0[13];
}

void ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter(__n128 a1)
{
  __n128 *v1;

  v1[13] = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.attractionCenter.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.vortexStrength.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 224);
}

void ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 224) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.vortexStrength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.vortexDirection.getter()
{
  __n128 *v0;

  return v0[15];
}

void ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter(__n128 a1)
{
  __n128 *v1;

  v1[15] = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.vortexDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 256);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 256) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.stretchFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 260);
}

void ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 260) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.stretchFactor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.sortOrder.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 264);
}

_BYTE *ParticleEmitterComponent.ParticleEmitter.sortOrder.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 264) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sortOrder.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.blendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 265);
}

_BYTE *ParticleEmitterComponent.ParticleEmitter.blendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 265) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.blendMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.getter()
{
  return swift_retain();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 272) = a1;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.image.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.imageSequence.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 312);
  v3 = *(_BYTE *)(v1 + 320);
  result = *(__n128 *)(v1 + 280);
  v5 = *(_OWORD *)(v1 + 296);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

__n128 ParticleEmitterComponent.ParticleEmitter.imageSequence.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 280) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 296) = v5;
  *(_QWORD *)(v1 + 312) = v2;
  *(_BYTE *)(v1 + 320) = v3;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.imageSequence.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float static ParticleEmitterComponent.ParticleEmitter.fromCore(_:isSpawn:)@<S0>(uint64_t a1@<X8>)
{
  CGColorRef GenericRGB;
  CGColorRef v3;
  CGColorRef v4;
  CGColorRef v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int BillboardMode;
  uint64_t v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  float v49;
  int BlendMode;
  uint64_t ParticleImage;
  uint64_t v52;
  uint64_t v53;
  uint64_t RowCount;
  uint64_t ColumnCount;
  uint64_t InitialFrame;
  uint64_t InitialFrameVariation;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int AnimationRepeatMode;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  float result;
  int v77;
  uint64_t v78;
  unsigned int SortOrder;
  float v80;
  char IsLightingEnabled;
  __int128 v82;
  int v83;
  char Collisions;
  __int128 v85;
  int v86;
  int v87;
  int v88;
  char UseEndColor;
  int v90;
  char UseEndColorRange;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char UseStartColorRange;
  uint64_t v96;
  uint64_t v97;
  unsigned int OpacityOverLife;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  __int128 v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  char v110;
  uint64_t v111;
  int v112;
  __int128 v113;

  GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  v3 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  v4 = CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0);
  v5 = CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0);
  REVFXEmitterComponentGetBirthRate();
  v109 = v6;
  REVFXEmitterComponentGetBirthRateVariation();
  v8 = v7;
  REVFXEmitterComponentGetDampingFactor();
  v108 = v9;
  REVFXEmitterComponentGetAcceleration();
  v113 = v10;
  REVFXEmitterComponentGetSpreadingAngle();
  v12 = v11;
  REVFXEmitterComponentGetParticleSize();
  v107 = v13;
  REVFXEmitterComponentGetParticleSizeVariation();
  v106 = v14;
  BillboardMode = REVFXEmitterComponentGetBillboardMode();
  if (BillboardMode == 1)
  {
    REVFXEmitterComponentGetBillboardAxis();
    v104 = v17;
    REVFXEmitterComponentGetBillboardAxisVariation();
    v112 = v18;
    v110 = 0;
    v16 = *((_QWORD *)&v104 + 1);
    v111 = v104;
  }
  else
  {
    v112 = 0;
    if (BillboardMode == 2)
    {
      v16 = 0;
      v111 = 1;
    }
    else
    {
      v111 = 0;
      v16 = 0;
    }
    v110 = 1;
  }
  REVFXEmitterComponentGetParticleMass();
  v20 = v19;
  REVFXEmitterComponentGetParticleMassVariation();
  v22 = v21;
  REVFXEmitterComponentGetParticleLifeSpan();
  v24 = v23;
  REVFXEmitterComponentGetParticleLifeSpanVariation();
  v26 = v25;
  REVFXEmitterComponentGetParticleAngle();
  v28 = v27;
  REVFXEmitterComponentGetParticleAngleVariation();
  v30 = v29;
  REVFXEmitterComponentGetParticleAngularVelocity();
  v105 = v31;
  REVFXEmitterComponentGetParticleAngularVelocityVariation();
  v103 = v32;
  REVFXEmitterComponentGetParticleBounce();
  v102 = v33;
  REVFXEmitterComponentGetParticleFriction();
  v101 = v34;
  OpacityOverLife = REVFXEmitterComponentGetOpacityOverLife();
  REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespan();
  v100 = v35;
  REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespanPower();
  v99 = v36;
  REVFXEmitterComponentGetStartColorRangeA();
  v97 = specialized SIMD4<>.cgColor.getter(v37);

  REVFXEmitterComponentGetStartColorRangeB();
  v96 = specialized SIMD4<>.cgColor.getter(v38);

  UseStartColorRange = REVFXEmitterComponentGetUseStartColorRange();
  REVFXEmitterComponentGetEndColorRangeA();
  v94 = specialized SIMD4<>.cgColor.getter(v39);

  REVFXEmitterComponentGetEndColorRangeB();
  v93 = specialized SIMD4<>.cgColor.getter(v40);

  UseEndColorRange = REVFXEmitterComponentGetUseEndColorRange();
  UseEndColor = REVFXEmitterComponentGetUseEndColor();
  REVFXEmitterComponentGetColorEvolutionPower();
  v92 = v41;
  Collisions = REVFXEmitterComponentGetCollisions();
  REVFXEmitterComponentGetNoiseStrength();
  v90 = v42;
  REVFXEmitterComponentGetNoiseScale();
  v88 = v43;
  REVFXEmitterComponentGetNoiseAnimationSpeed();
  v87 = v44;
  REVFXEmitterComponentGetRadialGravityStrength();
  v86 = v45;
  REVFXEmitterComponentGetRadialGravityCenter();
  v85 = v46;
  REVFXEmitterComponentGetVortexStrength();
  v83 = v47;
  REVFXEmitterComponentGetVortexDirection();
  v82 = v48;
  IsLightingEnabled = REVFXEmitterComponentGetIsLightingEnabled();
  REVFXEmitterComponentGetStretchFactor();
  v80 = v49;
  SortOrder = REVFXEmitterComponentGetSortOrder();
  BlendMode = REVFXEmitterComponentGetBlendMode();
  ParticleImage = REVFXEmitterComponentGetParticleImage();
  if (ParticleImage)
  {
    v52 = ParticleImage;
    type metadata accessor for TextureResource();
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = v52;
    *(_QWORD *)(v53 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  else
  {
    v53 = 0;
  }
  if (REVFXEmitterComponentGetIsAnimated())
  {
    RowCount = REVFXEmitterComponentGetRowCount();
    ColumnCount = REVFXEmitterComponentGetColumnCount();
    InitialFrame = REVFXEmitterComponentGetInitialFrame();
    InitialFrameVariation = REVFXEmitterComponentGetInitialFrameVariation();
    REVFXEmitterComponentGetFrameRate();
    v78 = v24;
    v59 = v58;
    REVFXEmitterComponentGetFrameRateVariation();
    v77 = v30;
    v60 = v28;
    v61 = v26;
    v62 = v22;
    v63 = v20;
    v64 = v12;
    v65 = v8;
    v67 = v66;
    AnimationRepeatMode = REVFXEmitterComponentGetAnimationRepeatMode();
    if (AnimationRepeatMode >= 3)
      v69 = 1;
    else
      v69 = AnimationRepeatMode;
    v70 = v59;
    v24 = v78;
    v71 = v67;
    v8 = v65;
    v12 = v64;
    v20 = v63;
    v22 = v62;
    v26 = v61;
    v28 = v60;
    v30 = v77;
    v72 = v70 | (v71 << 32);
  }
  else
  {
    RowCount = 0;
    ColumnCount = 0;
    InitialFrame = 0;
    InitialFrameVariation = 0;
    v72 = 0;
    v69 = 3;
  }
  v73 = SortOrder;
  if (SortOrder >= 7)
    v73 = 0;
  if (OpacityOverLife >= 7)
    v74 = 6;
  else
    v74 = OpacityOverLife;
  *(_DWORD *)a1 = v109;
  *(_DWORD *)(a1 + 4) = v8;
  v75 = BlendMode == 1;
  *(_DWORD *)(a1 + 8) = v108;
  if (BlendMode == 2)
    v75 = 2;
  *(_OWORD *)(a1 + 16) = v113;
  *(_DWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 36) = Collisions;
  *(_DWORD *)(a1 + 40) = v107;
  *(_DWORD *)(a1 + 44) = v106;
  *(_QWORD *)(a1 + 48) = v97;
  *(_QWORD *)(a1 + 56) = v96;
  *(_BYTE *)(a1 + 64) = UseStartColorRange;
  *(_QWORD *)(a1 + 72) = v94;
  *(_QWORD *)(a1 + 80) = v93;
  *(_BYTE *)(a1 + 88) = UseEndColorRange;
  *(_BYTE *)(a1 + 89) = UseEndColor;
  *(_QWORD *)(a1 + 96) = v111;
  *(_QWORD *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 112) = v112;
  *(_BYTE *)(a1 + 116) = v110;
  *(_DWORD *)(a1 + 120) = v20;
  *(_DWORD *)(a1 + 124) = v22;
  *(_QWORD *)(a1 + 128) = v24;
  *(_QWORD *)(a1 + 136) = v26;
  *(_DWORD *)(a1 + 144) = v28;
  *(_DWORD *)(a1 + 148) = v30;
  *(_DWORD *)(a1 + 152) = v105;
  *(_DWORD *)(a1 + 156) = v103;
  *(_DWORD *)(a1 + 160) = v102;
  *(_DWORD *)(a1 + 164) = v101;
  *(_BYTE *)(a1 + 168) = v74;
  *(_DWORD *)(a1 + 172) = v100;
  *(_DWORD *)(a1 + 176) = v99;
  *(_DWORD *)(a1 + 180) = v92;
  *(_DWORD *)(a1 + 184) = v90;
  *(_DWORD *)(a1 + 188) = v88;
  *(_DWORD *)(a1 + 192) = v87;
  *(_DWORD *)(a1 + 196) = v86;
  *(_OWORD *)(a1 + 208) = v85;
  *(_DWORD *)(a1 + 224) = v83;
  *(_OWORD *)(a1 + 240) = v82;
  *(_BYTE *)(a1 + 256) = IsLightingEnabled;
  result = v80;
  *(float *)(a1 + 260) = v80;
  *(_BYTE *)(a1 + 264) = v73;
  *(_BYTE *)(a1 + 265) = v75;
  *(_QWORD *)(a1 + 272) = v53;
  *(_QWORD *)(a1 + 280) = RowCount;
  *(_QWORD *)(a1 + 288) = ColumnCount;
  *(_QWORD *)(a1 + 296) = InitialFrame;
  *(_QWORD *)(a1 + 304) = InitialFrameVariation;
  *(_QWORD *)(a1 + 312) = v72;
  *(_BYTE *)(a1 + 320) = v69;
  return result;
}

Swift::Void __swiftcall ParticleEmitterComponent.ParticleEmitter.toCore(_:isSpawn:)(Swift::OpaquePointer _, Swift::Bool isSpawn)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = *(void **)(v2 + 48);
  v5 = *(void **)(v2 + 56);
  v6 = *(void **)(v2 + 72);
  v7 = *(void **)(v2 + 80);
  v3 = *(unsigned __int8 *)(v2 + 116);
  v4 = *(unsigned __int8 *)(v2 + 320);
  REVFXEmitterComponentSetBirthRate();
  REVFXEmitterComponentSetBirthRateVariation();
  REVFXEmitterComponentSetDampingFactor();
  REVFXEmitterComponentSetAcceleration();
  REVFXEmitterComponentSetSpreadingAngle();
  REVFXEmitterComponentSetParticleSize();
  REVFXEmitterComponentSetParticleSizeVariation();
  REVFXEmitterComponentSetBillboardMode();
  if (v3 != 1)
  {
    REVFXEmitterComponentSetBillboardAxis();
    REVFXEmitterComponentSetBillboardAxisVariation();
  }
  REVFXEmitterComponentSetParticleMass();
  REVFXEmitterComponentSetParticleMassVariation();
  REVFXEmitterComponentSetParticleLifeSpan();
  REVFXEmitterComponentSetParticleLifeSpanVariation();
  REVFXEmitterComponentSetParticleAngle();
  REVFXEmitterComponentSetParticleAngleVariation();
  REVFXEmitterComponentSetParticleAngularVelocity();
  REVFXEmitterComponentSetParticleAngularVelocityVariation();
  REVFXEmitterComponentSetParticleBounce();
  REVFXEmitterComponentSetParticleFriction();
  REVFXEmitterComponentSetOpacityOverLife();
  REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespan();
  REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespanPower();
  REVFXEmitterComponentSetColorEvolutionPower();
  REVFXEmitterComponentSetCollision();
  REVFXEmitterComponentSetNoiseStrength();
  REVFXEmitterComponentSetNoiseScale();
  REVFXEmitterComponentSetNoiseAnimationSpeed();
  REVFXEmitterComponentSetRadialGravityStrength();
  REVFXEmitterComponentSetRadialGravityCenter();
  REVFXEmitterComponentSetVortexStrength();
  REVFXEmitterComponentSetVortexDirection();
  REVFXEmitterComponentSetIsLightingEnabled();
  REVFXEmitterComponentSetStretchFactor();
  REVFXEmitterComponentSetIsAnimated();
  REVFXEmitterComponentSetSortOrder();
  REVFXEmitterComponentSetBlendMode();
  REVFXEmitterComponentSetParticleImage();
  if (v4 != 3)
  {
    REVFXEmitterComponentSetRowCount();
    REVFXEmitterComponentSetColumnCount();
    REVFXEmitterComponentSetInitialFrame();
    REVFXEmitterComponentSetInitialFrameVariation();
    REVFXEmitterComponentSetFrameRate();
    REVFXEmitterComponentSetFrameRateVariation();
    REVFXEmitterComponentSetAnimationRepeatMode();
  }
  specialized SIMD4<>.init(_:)((CGColorRef)v8);
  REVFXEmitterComponentSetStartColorRangeA();
  specialized SIMD4<>.init(_:)((CGColorRef)v5);
  REVFXEmitterComponentSetStartColorRangeB();
  REVFXEmitterComponentSetUseStartColorRange();
  specialized SIMD4<>.init(_:)((CGColorRef)v6);
  REVFXEmitterComponentSetEndColorRangeA();
  specialized SIMD4<>.init(_:)((CGColorRef)v7);
  REVFXEmitterComponentSetEndColorRangeB();
  REVFXEmitterComponentSetUseEndColorRange();
  REVFXEmitterComponentSetUseEndColor();
}

uint64_t ParticleEmitterComponent.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21BCE3810 + 4 * byte_21BE710A2[a1]))(0xD000000000000010, 0x800000021BE8F430);
}

uint64_t sub_21BCE3810()
{
  uint64_t v0;

  return v0 + 8;
}

uint64_t sub_21BCE3AF0()
{
  return 0x74696D456E69616DLL;
}

uint64_t sub_21BCE3B10()
{
  return 0x4564656E77617073;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.CodingKeys()
{
  unsigned __int8 *v0;

  return ParticleEmitterComponent.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 36;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  _DWORD v16[4];
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD v44[21];
  _BYTE v45[321];
  _DWORD v46[103];
  char v47;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 8);
  v41 = *(_QWORD *)(v1 + 16);
  v42 = v7;
  v8 = *(_QWORD *)(v1 + 24);
  v38 = *(_QWORD *)(v1 + 32);
  v39 = v8;
  v46[102] = *(unsigned __int8 *)(v1 + 40);
  v40 = *(unsigned __int8 *)(v1 + 41);
  v9 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)&v34 = *(_QWORD *)(v1 + 48);
  *((_QWORD *)&v34 + 1) = v9;
  v10 = *(_QWORD *)(v1 + 64);
  v36 = *(_QWORD *)(v1 + 72);
  v37 = v10;
  v35 = *(unsigned __int8 *)(v1 + 80);
  v33 = *(unsigned __int8 *)(v1 + 81);
  v32 = *(_OWORD *)(v1 + 96);
  v31 = *(_DWORD *)(v1 + 112);
  v30 = *(_OWORD *)(v1 + 128);
  v29 = *(unsigned __int8 *)(v1 + 152);
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 169);
  v16[3] = *(unsigned __int8 *)(v1 + 168);
  v17 = v9;
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 171);
  v18 = *(unsigned __int8 *)(v1 + 170);
  v19 = v9;
  v20 = *(unsigned __int8 *)(v1 + 172);
  v21 = *(_QWORD *)(v1 + 176);
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 185);
  v22 = *(unsigned __int8 *)(v1 + 184);
  v23 = v9;
  v11 = *(_QWORD *)(v1 + 200);
  v24 = *(_QWORD *)(v1 + 192);
  v25 = v11;
  v12 = *(_QWORD *)(v1 + 224);
  v26 = *(_QWORD *)(v1 + 208);
  v27 = v12;
  v28 = *(_QWORD *)(v1 + 232);
  memcpy(v45, (const void *)(v1 + 240), sizeof(v45));
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v46);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v44[0]) = 0;
  v13 = v43;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = v40;
  LOBYTE(v44[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 2;
  v43 = v6;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v14;
  v47 = 6;
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v44[0] = v34;
  *(_QWORD *)&v44[1] = v37;
  *((_QWORD *)&v44[1] + 1) = v36;
  LOBYTE(v44[2]) = v35;
  v47 = 7;
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = v33;
  v47 = 8;
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v44[0] = v32;
  v47 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 10;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 11;
  KeyedEncodingContainer.encode(_:forKey:)();
  v44[0] = v30;
  v47 = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 13;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 14;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v29;
  v47 = 15;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 16;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 17;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 18;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 19;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v17;
  v47 = 20;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = v18;
  v47 = 21;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 22;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v20;
  v47 = 23;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 24;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 25;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 26;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 27;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 28;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 29;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 30;
  KeyedEncodingContainer.encode(_:forKey:)();
  *(_QWORD *)&v44[0] = v27;
  v47 = 31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CollisionPlane_v1]);
  lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type [CollisionPlane_v1] and conformance <A> [A], &demangling cache variable for type metadata for [CollisionPlane_v1], (uint64_t (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v44[0] = v28;
  v47 = 32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<CollisionPlane_v1>);
  lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Set<CollisionPlane_v1> and conformance <> Set<A>, &demangling cache variable for type metadata for Set<CollisionPlane_v1>, (uint64_t (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1, MEMORY[0x24BEE1700]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  memcpy(v44, v45, 0x141uLL);
  v47 = 33;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v46, (uint64_t)v44);
  v47 = 34;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v44[0]) = 35;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v43, v3);
}

uint64_t ParticleEmitterComponent.init(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  CGColorRef GenericRGB;
  CGColorRef v8;
  CGColorRef v9;
  CGColorRef v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  int v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[321];
  _BYTE v61[336];
  _BYTE v62[898];
  char v63;
  _BYTE v64[336];
  _BYTE v65[336];
  _BYTE v66[321];
  _OWORD v67[57];
  _OWORD v68[57];
  _OWORD v69[21];
  _BYTE v70[352];
  _QWORD *v71;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)&v59 = v1;
  v71 = v2;
  v55 = v3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.CodingKeys>);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v68[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)v68 + 8) = 0u;
  *(_OWORD *)((char *)&v68[1] + 8) = 0u;
  WORD4(v68[2]) = 257;
  memset(&v68[3], 0, 32);
  LOWORD(v68[5]) = 513;
  v68[6] = xmmword_21BE75100;
  *(_QWORD *)&v68[7] = 1056964608;
  v58 = *(_OWORD *)&zmmword_21BE41220[16];
  v68[8] = *(_OWORD *)&zmmword_21BE41220[16];
  *(_QWORD *)&v68[9] = 0x3E80000040C90FDALL;
  BYTE8(v68[9]) = 2;
  HIDWORD(v68[9]) = 1065353216;
  *(_QWORD *)&v68[10] = 0;
  DWORD2(v68[10]) = 0x10000;
  BYTE12(v68[10]) = 1;
  *(_QWORD *)&v68[11] = 0;
  WORD4(v68[11]) = 256;
  v68[12] = xmmword_21BE75110;
  *(_QWORD *)&v68[13] = 0;
  DWORD2(v68[13]) = 1065353216;
  *(_QWORD *)&v68[14] = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v68[14] + 1) = MEMORY[0x24BEE4B08];
  GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  v8 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  v9 = CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0);
  v10 = CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0);
  *(_QWORD *)&v69[0] = 1120403456;
  DWORD2(v69[0]) = 0;
  memset(&v69[1], 0, 21);
  *((_QWORD *)&v69[2] + 1) = 1017370378;
  *(_QWORD *)&v69[3] = GenericRGB;
  *((_QWORD *)&v69[3] + 1) = v8;
  LOBYTE(v69[4]) = 0;
  *((_QWORD *)&v69[4] + 1) = v9;
  *(_QWORD *)&v69[5] = v10;
  WORD4(v69[5]) = 256;
  v11 = v71;
  v69[6] = xmmword_21BE41200;
  LODWORD(v69[7]) = 0;
  BYTE4(v69[7]) = 1;
  *((_QWORD *)&v69[7] + 1) = 1065353216;
  v69[8] = xmmword_21BE75120;
  v69[9] = 0uLL;
  *(_QWORD *)&v69[10] = 1050253722;
  BYTE8(v69[10]) = 3;
  *(_OWORD *)((char *)&v69[10] + 12) = xmmword_21BE75130;
  *(_QWORD *)((char *)&v69[11] + 12) = 1065353216;
  DWORD1(v69[12]) = 0;
  v69[13] = xmmword_21BE75140;
  LODWORD(v69[14]) = 0;
  v69[15] = v58;
  LOBYTE(v69[16]) = 0;
  DWORD1(v69[16]) = 0;
  WORD4(v69[16]) = 0;
  memset(&v69[17], 0, 48);
  LOBYTE(v69[20]) = 3;
  memcpy(&v68[15], v69, 0x141uLL);
  _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOi0_((uint64_t)v70);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v70, (uint64_t)&v68[36]);
  BYTE1(v68[56]) = 0;
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();
  v12 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    v39 = (uint64_t)v11;
  }
  else
  {
    *(_QWORD *)&v59 = &v68[15];
    v13 = v56;
    LOBYTE(v67[0]) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)&v68[0] = v14;
    LOBYTE(v67[0]) = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)&v68[0] + 1) = v15;
    LOBYTE(v67[0]) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)&v68[1] = v16;
    LOBYTE(v67[0]) = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)&v68[1] + 1) = v17;
    LOBYTE(v67[0]) = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)&v68[2] = v18;
    LOBYTE(v67[0]) = 5;
    BYTE8(v68[2]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v62[0] = 6;
    lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE9(v68[2]) = v67[0];
    v62[0] = 7;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v68[3] = v67[0];
    v68[4] = v67[1];
    LOBYTE(v68[5]) = v67[2];
    v62[0] = 8;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE1(v68[5]) = v67[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v62[0] = 9;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v68[6] = v67[0];
    LOBYTE(v67[0]) = 10;
    KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v68[7]) = v20;
    LOBYTE(v67[0]) = 11;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD1(v68[7]) = v21;
    v62[0] = 12;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v68[8] = v67[0];
    LOBYTE(v67[0]) = 13;
    KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v68[9]) = v22;
    LOBYTE(v67[0]) = 14;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD1(v68[9]) = v23;
    v62[0] = 15;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE8(v68[9]) = v67[0];
    LOBYTE(v67[0]) = 16;
    KeyedDecodingContainer.decode(_:forKey:)();
    HIDWORD(v68[9]) = v24;
    LOBYTE(v67[0]) = 17;
    KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v68[10]) = v25;
    LOBYTE(v67[0]) = 18;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD1(v68[10]) = v26;
    LOBYTE(v67[0]) = 19;
    BYTE8(v68[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v62[0] = 20;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE9(v68[10]) = v67[0];
    v62[0] = 21;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE10(v68[10]) = v67[0];
    LOBYTE(v67[0]) = 22;
    BYTE11(v68[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v62[0] = 23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE12(v68[10]) = v67[0];
    LOBYTE(v67[0]) = 24;
    *(_QWORD *)&v68[11] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v67[0]) = 25;
    BYTE8(v68[11]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v67[0]) = 26;
    BYTE9(v68[11]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v67[0]) = 27;
    *(_QWORD *)&v68[12] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v67[0]) = 28;
    *((_QWORD *)&v68[12] + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v67[0]) = 29;
    *(_QWORD *)&v68[13] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v67[0]) = 30;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD2(v68[13]) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CollisionPlane_v1]);
    v62[0] = 31;
    lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type [CollisionPlane_v1] and conformance <A> [A], &demangling cache variable for type metadata for [CollisionPlane_v1], (uint64_t (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v68[14] = *(_QWORD *)&v67[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<CollisionPlane_v1>);
    v62[0] = 32;
    lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Set<CollisionPlane_v1> and conformance <> Set<A>, &demangling cache variable for type metadata for Set<CollisionPlane_v1>, (uint64_t (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1, MEMORY[0x24BEE1720]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_QWORD *)&v68[14] + 1) = *(_QWORD *)&v67[0];
    v65[335] = 33;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)v69);
    memcpy((void *)v59, v66, 0x141uLL);
    v64[335] = 34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v65, (uint64_t)v64);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v64, (uint64_t)&v68[36]);
    v63 = 35;
    v28 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v57);
    LODWORD(v58) = v28 & 1;
    BYTE1(v68[56]) = v28 & 1;
    v44 = v68[1];
    v45 = v68[0];
    v29 = *(_QWORD *)&v68[2];
    v43 = BYTE8(v68[2]);
    v30 = BYTE9(v68[2]);
    v42 = v68[3];
    v31 = v68[4];
    v41 = LOBYTE(v68[5]);
    v32 = BYTE1(v68[5]);
    v40 = v68[6];
    v46 = v68[8];
    v47 = BYTE8(v68[9]);
    v33 = DWORD1(v68[10]);
    v34 = BYTE8(v68[10]);
    LODWORD(v57) = BYTE9(v68[10]);
    LODWORD(v56) = BYTE10(v68[10]);
    v53 = BYTE12(v68[10]);
    v54 = BYTE11(v68[10]);
    v52 = *(_QWORD *)&v68[11];
    v50 = BYTE9(v68[11]);
    v51 = BYTE8(v68[11]);
    v49 = v68[12];
    v48 = *(_QWORD *)&v68[13];
    v35 = DWORD2(v68[13]);
    memcpy(v60, (const void *)v59, sizeof(v60));
    v59 = v68[14];
    v36 = *(_QWORD *)&v68[7];
    v37 = *(_QWORD *)&v68[9];
    v38 = *(_QWORD *)((char *)&v68[9] + 12);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)&v68[36], (uint64_t)v61);
    *(_OWORD *)v62 = v45;
    *(_OWORD *)&v62[16] = v44;
    *(_QWORD *)&v62[32] = v29;
    v62[40] = v43;
    v62[41] = v30;
    *(_OWORD *)&v62[48] = v42;
    *(_OWORD *)&v62[64] = v31;
    v62[80] = v41;
    v62[81] = v32;
    *(_OWORD *)&v62[96] = v40;
    *(_QWORD *)&v62[112] = v36;
    *(_OWORD *)&v62[128] = v46;
    *(_QWORD *)&v62[144] = v37;
    v62[152] = v47;
    *(_QWORD *)&v62[156] = v38;
    *(_DWORD *)&v62[164] = v33;
    v62[168] = v34;
    v62[169] = v57;
    v62[170] = v56;
    v62[171] = v54;
    v62[172] = v53;
    *(_QWORD *)&v62[176] = v52;
    v62[184] = v51;
    v62[185] = v50;
    *(_OWORD *)&v62[192] = v49;
    *(_QWORD *)&v62[208] = v48;
    *(_DWORD *)&v62[216] = v35;
    *(_OWORD *)&v62[224] = v59;
    memcpy(&v62[240], v60, 0x141uLL);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v61, (uint64_t)&v62[576]);
    v62[897] = v58;
    memcpy(v55, v62, 0x382uLL);
    outlined retain of ParticleEmitterComponent((uint64_t)v62);
    v39 = (uint64_t)v71;
  }
  __swift_destroy_boxed_opaque_existential_1(v39);
  memcpy(v67, v68, 0x382uLL);
  return outlined release of ParticleEmitterComponent((uint64_t)v67);
}

void *static ParticleEmitterComponent.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char Loops;
  unsigned int EmitterShape;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int BirthDirection;
  char v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  char IsLocalSimulationSpace;
  float v27;
  float v28;
  float v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int SpawnOccasion;
  unsigned int v37;
  int SimulationState;
  char v39;
  id v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  char v77;
  char SpawnInheritParentColor;
  uint64_t BurstRestartCount;
  uint64_t BurstCountVariation;
  uint64_t BurstCount;
  char IsEmitting;
  uint64_t RestartCount;
  char v84;
  __int128 v85;
  char v86;
  char v87;
  __int128 v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int IsSpawningEnabled;
  _BYTE v97[336];
  _OWORD v98[57];
  _BYTE __src[336];
  _QWORD __dst[42];
  _QWORD v101[5];
  char v102;
  char v103;
  __int128 v104;
  __int128 v105;
  char v106;
  char v107;
  __int128 v108;
  unsigned int v109;
  unsigned int v110;
  __int128 v111;
  unsigned int v112;
  unsigned int v113;
  char v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  __int128 v130;
  _BYTE v131[321];
  _BYTE v132[336];
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  ParticleEmitterComponent.init()((uint64_t)v101);
  REVFXEmitterComponentGetEmissionDuration();
  v95 = v2;
  v101[0] = v2;
  REVFXEmitterComponentGetEmissionDurationVariation();
  v94 = v3;
  v101[1] = v3;
  REVFXEmitterComponentGetIdleDuration();
  v93 = v4;
  v101[2] = v4;
  REVFXEmitterComponentGetIdleDurationVariation();
  v92 = v5;
  v101[3] = v5;
  REVFXEmitterComponentGetWarmupDuration();
  v91 = v6;
  v101[4] = v6;
  Loops = REVFXEmitterComponentGetLoops();
  v102 = Loops;
  EmitterShape = REVFXEmitterComponentGetEmitterShape();
  if (EmitterShape >= 7)
    v9 = 0;
  else
    v9 = 0x4060105020300uLL >> (8 * EmitterShape);
  v103 = v9;
  REVFXEmitterComponentGetRadialAmount();
  v90 = v10;
  v112 = v10;
  REVFXEmitterComponentGetTorusInnerRadius();
  v12 = v11;
  v113 = v11;
  ParticleEmitterComponent.BirthLocation.init(_:)((uint64_t)v98);
  v13 = *((_QWORD *)&v98[0] + 1);
  v14 = *(_QWORD *)&v98[0];
  v16 = *((_QWORD *)&v98[1] + 1);
  v15 = *(_QWORD *)&v98[1];
  v17 = v98[2];
  v104 = v98[0];
  v105 = v98[1];
  v106 = v98[2];
  BirthDirection = REVFXEmitterComponentGetBirthDirection();
  if (BirthDirection >= 3)
    v19 = 1;
  else
    v19 = BirthDirection;
  v89 = v19;
  v107 = v19;
  REVFXEmitterComponentGetEmitterShapeSize();
  v88 = v20;
  v108 = v20;
  REVFXEmitterComponentGetParticleSpeed();
  v22 = v21;
  v109 = v21;
  REVFXEmitterComponentGetParticleSpeedVariation();
  v24 = v23;
  v110 = v23;
  REVFXEmitterComponentGetEmissionDirection();
  v85 = v25;
  v111 = v25;
  IsLocalSimulationSpace = REVFXEmitterComponentGetIsLocalSimulationSpace();
  v86 = IsLocalSimulationSpace ^ 1;
  v87 = IsLocalSimulationSpace;
  v120 = IsLocalSimulationSpace ^ 1;
  v121 = IsLocalSimulationSpace;
  v84 = REVFXEmitterComponentGetIsLocalFields() ^ 1;
  v122 = v84;
  RestartCount = REVFXEmitterComponentGetRestartCount();
  v123 = RestartCount;
  v124 = 0;
  IsEmitting = REVFXEmitterComponentGetIsEmitting();
  v125 = IsEmitting;
  BurstCount = REVFXEmitterComponentGetBurstCount();
  v127 = BurstCount;
  BurstCountVariation = REVFXEmitterComponentGetBurstCountVariation();
  v128 = BurstCountVariation;
  BurstRestartCount = REVFXEmitterComponentGetBurstRestartCount();
  v126 = BurstRestartCount;
  REVFXEmitterComponentGetSimulationRate();
  v28 = fminf(v27, 2.0);
  if (v28 < 0.0)
    v29 = 0.0;
  else
    v29 = v28;
  v129 = v29;
  REVFXEmitterComponentGetSpawnVelocityFactor();
  v31 = v30;
  v115 = v30;
  REVFXEmitterComponentGetSpawnSpreadFactor();
  v33 = v32;
  v116 = v32;
  REVFXEmitterComponentGetSpawnSpreadFactorVariation();
  v35 = v34;
  v117 = v34;
  SpawnInheritParentColor = REVFXEmitterComponentGetSpawnInheritParentColor();
  v118 = SpawnInheritParentColor;
  SpawnOccasion = REVFXEmitterComponentGetSpawnOccasion();
  v37 = 0x3010200u >> (8 * SpawnOccasion);
  if (SpawnOccasion >= 4)
    LOBYTE(v37) = 0;
  v77 = v37;
  v114 = v37;
  SimulationState = REVFXEmitterComponentGetSimulationState();
  v39 = SimulationState == 1;
  if (SimulationState == 2)
    v39 = 2;
  v76 = v39;
  v119 = v39;
  IsSpawningEnabled = REVFXEmitterComponentGetIsSpawningEnabled();
  v132[321] = IsSpawningEnabled;
  v40 = (id)REVFXEmitterComponentGetCollisionPlanes();
  if (v40)
  {
    v41 = v40;
    v72 = v15;
    v74 = v13;
    type metadata accessor for NSValue();
    v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v73 = v17;
      if (v43)
        goto LABEL_17;
    }
    else
    {
      v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
      v73 = v17;
      if (v43)
      {
LABEL_17:
        __dst[0] = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43 & ~(v43 >> 63), 0);
        if (v43 < 0)
          __break(1u);
        v70 = v16;
        v71 = a1;
        v44 = 0;
        v45 = __dst[0];
        do
        {
          if ((v42 & 0xC000000000000001) != 0)
            v46 = (id)MEMORY[0x220769770](v44, v42);
          else
            v46 = *(id *)(v42 + 8 * v44 + 32);
          v47 = v46;
          memset(v98, 0, 80);
          objc_msgSend(v46, sel_getValue_size_, v98, 80, v66, v67, v68, v69);

          v48 = v98[0];
          v49 = v98[1];
          v50 = v98[2];
          v51 = v98[3];
          v52 = v98[4];
          __dst[0] = v45;
          v54 = *(_QWORD *)(v45 + 16);
          v53 = *(_QWORD *)(v45 + 24);
          if (v54 >= v53 >> 1)
          {
            v68 = v98[2];
            v69 = v98[1];
            v66 = v98[4];
            v67 = v98[3];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
            v52 = v66;
            v51 = v67;
            v50 = v68;
            v49 = v69;
            v45 = __dst[0];
          }
          *(_QWORD *)(v45 + 16) = v54 + 1;
          v55 = (_OWORD *)(v45 + 80 * v54);
          v55[2] = v48;
          ++v44;
          v55[3] = v49;
          v55[4] = v50;
          v55[5] = v51;
          v55[6] = v52;
        }
        while (v43 != v44);
        swift_bridgeObjectRelease();
        a1 = v71;
        v16 = v70;
        v17 = v73;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    v45 = MEMORY[0x24BEE4AF8];
LABEL_28:
    v56 = v130;
    *(_QWORD *)&v130 = v45;
    if (*(_QWORD *)(v45 + 16) < *(_QWORD *)(v56 + 16))
    {
      v57 = a1;
      v58 = v16;
      v59 = swift_bridgeObjectRetain();
      v60 = specialized Set.init<A>(_:)(v59);
      swift_bridgeObjectRelease();
      v61 = swift_bridgeObjectRetain();
      v62 = specialized Set.init<A>(_:)(v61);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v62 + 16) <= *(_QWORD *)(v60 + 16) >> 3)
      {
        *(_QWORD *)&v98[0] = v60;
        specialized Set._subtract<A>(_:)(v62);
        swift_bridgeObjectRelease();
        v63 = *(_QWORD *)&v98[0];
      }
      else
      {
        v63 = specialized _NativeSet.subtracting<A>(_:)(v62, v60);
        swift_bridgeObjectRelease();
      }
      specialized Set.formUnion<A>(_:)(v63);
      v16 = v58;
      a1 = v57;
      v17 = v73;
    }
    swift_bridgeObjectRelease();
    v13 = v74;
    v15 = v72;
  }
  static ParticleEmitterComponent.ParticleEmitter.fromCore(_:isSpawn:)((uint64_t)__src);
  memcpy(__dst, v131, 0x141uLL);
  outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)__dst);
  memcpy(v131, __src, sizeof(v131));
  if (IsSpawningEnabled)
  {
    static ParticleEmitterComponent.ParticleEmitter.fromCore(_:isSpawn:)((uint64_t)v97);
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v97, v64);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v132, (uint64_t)v98);
    outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of ParticleEmitterComponent.ParticleEmitter?);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v97, (uint64_t)v132);
  }
  v75 = v130;
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v132, (uint64_t)v97);
  *(_QWORD *)&v98[0] = v95;
  *((_QWORD *)&v98[0] + 1) = v94;
  *(_QWORD *)&v98[1] = v93;
  *((_QWORD *)&v98[1] + 1) = v92;
  *(_QWORD *)&v98[2] = v91;
  BYTE8(v98[2]) = Loops;
  BYTE9(v98[2]) = v9;
  *(_QWORD *)&v98[3] = v14;
  *((_QWORD *)&v98[3] + 1) = v13;
  *(_QWORD *)&v98[4] = v15;
  *((_QWORD *)&v98[4] + 1) = v16;
  LOBYTE(v98[5]) = v17;
  BYTE1(v98[5]) = v89;
  v98[6] = v88;
  *(_QWORD *)&v98[7] = __PAIR64__(v24, v22);
  v98[8] = v85;
  *(_QWORD *)&v98[9] = __PAIR64__(v12, v90);
  BYTE8(v98[9]) = v77;
  HIDWORD(v98[9]) = v31;
  *(_QWORD *)&v98[10] = __PAIR64__(v35, v33);
  BYTE8(v98[10]) = SpawnInheritParentColor;
  BYTE9(v98[10]) = v76;
  BYTE10(v98[10]) = v86;
  BYTE11(v98[10]) = v87;
  BYTE12(v98[10]) = v84;
  *(_QWORD *)&v98[11] = RestartCount;
  BYTE8(v98[11]) = 0;
  BYTE9(v98[11]) = IsEmitting;
  *(_QWORD *)&v98[12] = BurstRestartCount;
  *((_QWORD *)&v98[12] + 1) = BurstCount;
  *(_QWORD *)&v98[13] = BurstCountVariation;
  *((float *)&v98[13] + 2) = v29;
  v98[14] = v75;
  memcpy(&v98[15], __src, 0x141uLL);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v97, (uint64_t)&v98[36]);
  BYTE1(v98[56]) = IsSpawningEnabled;
  return memcpy(a1, v98, 0x382uLL);
}

uint64_t ParticleEmitterComponent.__toCore(_:)(void **a1)
{
  uint64_t v1;
  Swift::OpaquePointer v2;
  int v3;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 *v15;
  unint64_t v16;
  double v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  __n128 *v26;
  unint64_t v27;
  uint64_t v28;
  __n128 *v29;
  double v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t result;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  int v47;
  __n128 *v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  _BYTE v57[321];
  _QWORD __src[42];
  _BYTE __dst[321];
  _BYTE v60[336];

  v2._rawValue = *a1;
  v3 = *(unsigned __int8 *)(v1 + 80);
  v47 = *(unsigned __int8 *)(v1 + 184);
  v48 = *(__n128 **)(v1 + 224);
  memcpy(__dst, (const void *)(v1 + 240), sizeof(__dst));
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v60);
  REVFXEmitterComponentSetEmissionDuration();
  REVFXEmitterComponentSetEmissionDurationVariation();
  REVFXEmitterComponentSetIdleDuration();
  REVFXEmitterComponentSetIdleDurationVariation();
  REVFXEmitterComponentSetWarmupDuration();
  REVFXEmitterComponentSetLoops();
  REVFXEmitterComponentSetEmitterShape();
  REVFXEmitterComponentSetRadialAmount();
  REVFXEmitterComponentSetTorusInnerRadius();
  REVFXEmitterComponentSetBirthLocation();
  if (v3 != 1)
    REVFXEmitterComponentSetBirthLocationVertex();
  v4 = v48;
  REVFXEmitterComponentSetBirthDirection();
  REVFXEmitterComponentSetEmitterShapeSize();
  REVFXEmitterComponentSetParticleSpeed();
  REVFXEmitterComponentSetParticleSpeedVariation();
  REVFXEmitterComponentSetEmissionDirection();
  REVFXEmitterComponentSetSimulationState();
  REVFXEmitterComponentSetIsLocalSimulationSpace();
  REVFXEmitterComponentSetIsLocalFields();
  REVFXEmitterComponentSetRestartCount();
  REVFXEmitterComponentSetIsEmitting();
  REVFXEmitterComponentSetBurstCount();
  REVFXEmitterComponentSetBurstCountVariation();
  REVFXEmitterComponentSetBurstRestartCount();
  REVFXEmitterComponentSetSimulationRate();
  _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v60);
  REVFXEmitterComponentSetIsSpawningEnabled();
  REVFXEmitterComponentSetSpawnVelocityFactor();
  REVFXEmitterComponentSetSpawnSpreadFactor();
  REVFXEmitterComponentSetSpawnSpreadFactorVariation();
  REVFXEmitterComponentSetSpawnInheritParentColor();
  REVFXEmitterComponentSetSpawnOccasion();
  if (v47)
    REVFXEmitterComponentResetSimulation();
  v5 = v48[1].n128_i64[0];
  if (!v5)
  {
    v7 = (__n128 *)MEMORY[0x24BEE4AF8];
    v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v14)
      goto LABEL_20;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v6 = v48 + 3;
  v7 = (__n128 *)MEMORY[0x24BEE4AF8];
  v8 = v5;
  do
  {
    v12 = v6[-1].n128_u64[0];
    if (v12)
    {
      v13 = v6[-1].n128_u64[1];
      v53 = v6[1];
      v55 = *v6;
      v49 = v6[3];
      v51 = v6[2];
      __src[0] = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[1].n128_u64[0] + 1, 1);
        v7 = (__n128 *)__src[0];
      }
      v10 = v7[1].n128_u64[0];
      v9 = v7[1].n128_u64[1];
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v7 = (__n128 *)__src[0];
      }
      v7[1].n128_u64[0] = v10 + 1;
      v11 = &v7[5 * v10];
      v11[2].n128_u64[0] = v12;
      v11[2].n128_u64[1] = v13;
      v11[3] = v55;
      v11[4] = v53;
      v11[5] = v51;
      v11[6] = v49;
    }
    v6 += 5;
    --v8;
  }
  while (v8);
  v4 = v48;
  swift_bridgeObjectRelease();
  v14 = v7[1].n128_i64[0];
  if (v14)
  {
LABEL_17:
    swift_retain();
    v15 = v7 + 3;
    do
    {
      v16 = v15[-1].n128_u64[0];
      v17 = v15[-1].n128_f64[1];
      v18 = v15[2];
      v19 = v15[3];
      v20 = *v15;
      v21 = v15[1];
      v15 += 5;
      MEMORY[0x220771DC8](v2._rawValue, v16, v17, v20, v21, v18, v19);
      --v14;
    }
    while (v14);
    swift_release();
  }
LABEL_20:
  swift_release();
  if (v5)
  {
    swift_bridgeObjectRetain();
    v22 = v4 + 3;
    v23 = (__n128 *)MEMORY[0x24BEE4AF8];
    do
    {
      if (!v22[-1].n128_u64[0])
      {
        v27 = v22[-1].n128_u64[1];
        v54 = v22[1];
        v56 = *v22;
        v50 = v22[3];
        v52 = v22[2];
        __src[0] = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[1].n128_u64[0] + 1, 1);
          v23 = (__n128 *)__src[0];
        }
        v25 = v23[1].n128_u64[0];
        v24 = v23[1].n128_u64[1];
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          v23 = (__n128 *)__src[0];
        }
        v23[1].n128_u64[0] = v25 + 1;
        v26 = &v23[5 * v25];
        v26[2].n128_u64[0] = 0;
        v26[2].n128_u64[1] = v27;
        v26[3] = v56;
        v26[4] = v54;
        v26[5] = v52;
        v26[6] = v50;
      }
      v22 += 5;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v28 = v23[1].n128_i64[0];
    if (!v28)
      goto LABEL_35;
    goto LABEL_32;
  }
  v23 = (__n128 *)MEMORY[0x24BEE4AF8];
  v28 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (v28)
  {
LABEL_32:
    swift_retain();
    v29 = v23 + 3;
    do
    {
      v30 = v29[-1].n128_f64[1];
      v31 = v29[2];
      v32 = v29[3];
      v33 = *v29;
      v34 = v29[1];
      v29 += 5;
      MEMORY[0x2207715B8](v2._rawValue, v30, v33, v34, v31, v32);
      --v28;
    }
    while (v28);
    swift_release();
  }
LABEL_35:
  swift_release();
  v35 = swift_bridgeObjectRetain();
  v36 = specialized _NativeSet.filter(_:)(v35);
  v37 = v36 + 56;
  v38 = 1 << *(_BYTE *)(v36 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & *(_QWORD *)(v36 + 56);
  v41 = (unint64_t)(v38 + 63) >> 6;
  result = swift_retain();
  v43 = 0;
  while (1)
  {
    if (v40)
    {
      v40 &= v40 - 1;
      goto LABEL_39;
    }
    v44 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
      return result;
    }
    if (v44 >= v41)
      goto LABEL_59;
    v45 = *(_QWORD *)(v37 + 8 * v44);
    ++v43;
    if (!v45)
    {
      v43 = v44 + 1;
      if (v44 + 1 >= v41)
        goto LABEL_59;
      v45 = *(_QWORD *)(v37 + 8 * v43);
      if (!v45)
      {
        v43 = v44 + 2;
        if (v44 + 2 >= v41)
          goto LABEL_59;
        v45 = *(_QWORD *)(v37 + 8 * v43);
        if (!v45)
        {
          v43 = v44 + 3;
          if (v44 + 3 >= v41)
            goto LABEL_59;
          v45 = *(_QWORD *)(v37 + 8 * v43);
          if (!v45)
          {
            v43 = v44 + 4;
            if (v44 + 4 >= v41)
              goto LABEL_59;
            v45 = *(_QWORD *)(v37 + 8 * v43);
            if (!v45)
              break;
          }
        }
      }
    }
LABEL_58:
    v40 = (v45 - 1) & v45;
LABEL_39:
    result = REVFXEmitterComponentRemoveCollisionPlane();
  }
  v46 = v44 + 5;
  if (v46 < v41)
  {
    v45 = *(_QWORD *)(v37 + 8 * v46);
    if (!v45)
    {
      while (1)
      {
        v43 = v46 + 1;
        if (__OFADD__(v46, 1))
          goto LABEL_63;
        if (v43 >= v41)
          goto LABEL_59;
        v45 = *(_QWORD *)(v37 + 8 * v43);
        ++v46;
        if (v45)
          goto LABEL_58;
      }
    }
    v43 = v46;
    goto LABEL_58;
  }
LABEL_59:
  swift_release_n();
  ParticleEmitterComponent.ParticleEmitter.toCore(_:isSpawn:)(v2, 0);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v60, (uint64_t)__src);
  if (_s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)__src) != 1)
  {
    memcpy(v57, __src, sizeof(v57));
    ParticleEmitterComponent.ParticleEmitter.toCore(_:isSpawn:)(v2, 1);
  }
  MEMORY[0x2207719C0](v2._rawValue);
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ParticleEmitterComponent(_DWORD *a1@<X8>)
{
  *a1 = 3003;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent(uint64_t a1)
{
  return ParticleEmitterComponent.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent(_QWORD *a1)
{
  return ParticleEmitterComponent.encode(to:)(a1);
}

RealityFoundation::CollisionPlaneExtent_v1 __swiftcall CollisionPlaneExtent_v1.init(width:height:)(Swift::Float width, Swift::Float height)
{
  Swift::Float *v2;
  RealityFoundation::CollisionPlaneExtent_v1 result;

  *v2 = width;
  v2[1] = height;
  result.height = height;
  result.width = width;
  return result;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCE6208 + 4 * word_21BE710C6[a1]))(0x7461526874726962, 0xE900000000000065);
}

unint64_t sub_21BCE6208()
{
  return 0xD000000000000012;
}

unint64_t sub_21BCE6540()
{
  return 0xD000000000000010;
}

uint64_t sub_21BCE6558()
{
  return 0x7453786574726F76;
}

uint64_t sub_21BCE657C()
{
  return 0x6944786574726F76;
}

void sub_21BCE65A0()
{
  JUMPOUT(0x21BCE65B4);
}

uint64_t sub_21BCE65E4()
{
  return 0x6564724F74726F73;
}

uint64_t sub_21BCE65FC()
{
  return 0x646F4D646E656C62;
}

uint64_t sub_21BCE6610()
{
  return 0x6567616D69;
}

uint64_t sub_21BCE6624()
{
  return 0x7165536567616D69;
}

uint64_t sub_21BCE6648()
{
  return 0x726F6C6F63;
}

uint64_t sub_21BCE665C()
{
  return 0x6F6973696C6C6F63;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  unsigned __int8 *v0;

  ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  unsigned __int8 *v0;

  return ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 44;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  id v56;
  id v57;
  int v58;
  id v59;
  int v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  char v74;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v66) = *(_DWORD *)(v1 + 4);
  LODWORD(v65) = *(_DWORD *)(v1 + 8);
  v62 = *(_OWORD *)(v1 + 16);
  v73 = *(_DWORD *)(v1 + 32);
  v46 = *(unsigned __int8 *)(v1 + 36);
  v61 = *(_DWORD *)(v1 + 40);
  v60 = *(_DWORD *)(v1 + 44);
  v64 = *(void **)(v1 + 48);
  v59 = *(id *)(v1 + 56);
  v58 = *(unsigned __int8 *)(v1 + 64);
  v57 = *(id *)(v1 + 72);
  v56 = *(id *)(v1 + 80);
  v55 = *(unsigned __int8 *)(v1 + 88);
  v54 = *(unsigned __int8 *)(v1 + 89);
  v50 = *(_QWORD *)(v1 + 96);
  v53 = *(_QWORD *)(v1 + 104);
  v52 = *(_DWORD *)(v1 + 112);
  v51 = *(unsigned __int8 *)(v1 + 116);
  v49 = *(_DWORD *)(v1 + 120);
  v48 = *(_DWORD *)(v1 + 124);
  v30 = *(_QWORD *)(v1 + 128);
  v31 = *(_QWORD *)(v1 + 136);
  v32 = *(_DWORD *)(v1 + 144);
  v33 = *(_DWORD *)(v1 + 148);
  v34 = *(_DWORD *)(v1 + 152);
  v35 = *(_DWORD *)(v1 + 156);
  v36 = *(_DWORD *)(v1 + 160);
  v37 = *(_DWORD *)(v1 + 164);
  v29 = *(unsigned __int8 *)(v1 + 168);
  v38 = *(_DWORD *)(v1 + 172);
  v40 = *(_DWORD *)(v1 + 176);
  v42 = *(_OWORD *)(v1 + 208);
  v43 = *(_OWORD *)(v1 + 240);
  v39 = *(unsigned __int8 *)(v1 + 256);
  v44 = *(unsigned __int8 *)(v1 + 264);
  v45 = *(unsigned __int8 *)(v1 + 265);
  v63 = *(_QWORD *)(v1 + 280);
  v47 = *(_QWORD *)(v1 + 288);
  v7 = *(_QWORD *)(v1 + 304);
  v41 = *(_QWORD *)(v1 + 296);
  v8 = *(_QWORD *)(v1 + 312);
  v9 = *(unsigned __int8 *)(v1 + 320);
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v68) = 0;
  v14 = v6;
  v15 = v67;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v15)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v13);
  v17 = v64;
  v27 = v9;
  v28 = v8;
  v67 = v7;
  v18 = v63;
  v19 = v4;
  LOBYTE(v68) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v68 = v62;
  v74 = 3;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v21 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v66 = v21;
  LOBYTE(v68) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 6;
  KeyedEncodingContainer.encode(_:forKey:)();
  v65 = v20;
  specialized SIMD4<>.init(_:)((CGColorRef)v17);
  v68 = v22;
  v74 = 7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4168]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  specialized SIMD4<>.init(_:)((CGColorRef)v59);
  v68 = v23;
  v74 = 8;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 9;
  KeyedEncodingContainer.encode(_:forKey:)();
  specialized SIMD4<>.init(_:)((CGColorRef)v57);
  v68 = v24;
  v74 = 10;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  specialized SIMD4<>.init(_:)((CGColorRef)v56);
  v68 = v25;
  v74 = 11;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 12;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 13;
  KeyedEncodingContainer.encode(_:forKey:)();
  *(_QWORD *)&v68 = v50;
  *((_QWORD *)&v68 + 1) = v53;
  LODWORD(v69) = v52;
  BYTE4(v69) = v51;
  v74 = 14;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 15;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 16;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 17;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 18;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 19;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 20;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 21;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 22;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 23;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 24;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = v29;
  v74 = 25;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 26;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 27;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 28;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 29;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 30;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 31;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 32;
  KeyedEncodingContainer.encode(_:forKey:)();
  v68 = v42;
  v74 = 33;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 34;
  KeyedEncodingContainer.encode(_:forKey:)();
  v68 = v43;
  v74 = 35;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 36;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = 37;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v68) = v44;
  v74 = 38;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = v45;
  v74 = 39;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v68 = v18;
  *((_QWORD *)&v68 + 1) = v47;
  v69 = v41;
  v70 = v67;
  v71 = v28;
  v72 = v27;
  v74 = 41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence? and conformance <A> A?, &demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?, (uint64_t (*)(void))lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence, MEMORY[0x24BEE4AA8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v68) = 43;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, v13);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  float v12;
  char v13;
  int v14;
  int v15;
  unsigned __int32 v16;
  unsigned int v17;
  int v19;
  int v20;
  unsigned int v21;
  unsigned __int32 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  CGColor *v30;
  CGColorRef v31;
  char v32;
  uint64_t v33;
  CGColor *v34;
  CGColor *v35;
  uint64_t v36;
  char v37;
  CGColor *v38;
  CGColorRef v39;
  char v40;
  uint64_t v41;
  CGColor *v42;
  CGColor *v43;
  CGColor *v44;
  CGColorRef v45;
  unsigned __int8 v46;
  float v47;
  int v48;
  CGColor *v49;
  CGColor *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  float v59;
  float v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  char v68;
  unsigned __int32 v69;
  int v70;
  int v71;
  CGColorRef v72;
  CGColor *v73;
  char v74;
  CGColorRef v75;
  CGColorRef v76;
  int v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  float v84;
  __n128 v85;
  unsigned __int32 v86;
  int v87;
  int v88;
  int v89;
  CGColor *v90;
  void *v91;
  uint64_t v92;
  int v93;
  int v94;
  unsigned __int32 v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  float v102;
  float v103;
  uint64_t v104;
  double v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  __n128 v111;
  int v112;
  __n128 v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  _QWORD *v124;
  CGColorRef v125;
  CGColorRef v126;
  CGColorRef v127;
  _BYTE v128[321];
  char v129;
  __int128 v130;
  __n128 v131;
  uint64_t v132;
  int v133;
  int v134;
  CGColorRef v135;
  CGColorRef v136;
  char v137;
  _BYTE v138[7];
  CGColorRef v139;
  CGColorRef v140;
  char v141;
  char v142;
  int v143;
  __int16 v144;
  __n128 v145;
  unsigned __int32 v146;
  char v147;
  __int16 v148;
  char v149;
  float v150;
  int v151;
  double v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  char v160;
  __int16 v161;
  char v162;
  int v163;
  float v164;
  float v165;
  int v166;
  int v167;
  int v168;
  int v169;
  __int128 v170;
  int v171;
  uint64_t v172;
  int v173;
  __n128 v174;
  char v175;
  __int16 v176;
  char v177;
  int v178;
  char v179;
  char v180;
  int v181;
  __int16 v182;
  uint64_t v183;
  __n128 v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  char v188;
  int v189;
  __int16 v190;
  __int16 v191;
  char v192;
  uint64_t v193;
  int v194;
  __int16 v195;
  char v196;
  __int16 v197;
  char v198;
  char v199;
  int v200;
  __int16 v201;
  _BYTE v202[7];
  __int16 v203;
  char v204;
  CGColorRef GenericRGB;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = 1.0;
  GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  v127 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  *(double *)&v125 = COERCE_DOUBLE(CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0));
  *(double *)&v126 = COERCE_DOUBLE(CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0));
  v199 = 1;
  v9 = a1[3];
  v124 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v116 = 0;
    v117 = 0;
    v114 = 0;
    v113 = 0uLL;
    v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    v10 = 0;
    v11 = 0;
    v123 = 0u;
    LODWORD(v122) = 1.0;
    v119 = xmmword_21BE75140;
    v112 = 0;
    v98 = 0;
    v99 = 0;
    v111 = *(__n128 *)&zmmword_21BE41220[16];
    v97 = 3;
    v100 = 0;
    v101 = 0;
    v20 = 1120403456;
    v27 = 1017370378;
    v102 = 1.0;
    v103 = 1.0;
    v106 = 0;
    v121 = 0x3FC999999999999ALL;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v107 = 1050253722;
    v104 = 1036831949;
    v12 = 1.0;
    v13 = 1;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
    *(_QWORD *)&v130 = __PAIR64__(v17, v20);
    DWORD2(v130) = v16;
    v131 = v123;
    LODWORD(v132) = v15;
    BYTE4(v132) = 0;
    *(_WORD *)((char *)&v132 + 5) = v203;
    HIBYTE(v132) = v204;
    v133 = v27;
    v134 = v14;
    v135 = GenericRGB;
    v136 = v127;
    v137 = v11;
    *(_DWORD *)v138 = *(_DWORD *)v202;
    *(_DWORD *)&v138[3] = *(_DWORD *)&v202[3];
    v139 = v125;
    v140 = v126;
    v141 = v10;
    v142 = v13;
    v143 = v200;
    v144 = v201;
    v145 = (__n128)1uLL;
    v146 = 0;
    v147 = v199;
    v148 = v197;
    v149 = v198;
    v150 = v12;
    v151 = 0;
    v152 = v105;
    v153 = v121;
    v154 = v110;
    v155 = v109;
    v156 = v108;
    v157 = v106;
    v158 = v107;
    v159 = HIDWORD(v104);
    v160 = 3;
    v162 = v196;
    v161 = v195;
    v163 = v104;
    v164 = v103;
    v165 = v102;
    v166 = v101;
    v167 = v122;
    v168 = v100;
    v169 = v99;
    v170 = v119;
    v171 = v98;
    v172 = v193;
    v173 = v194;
    v174 = v111;
    v175 = v120;
    v176 = v191;
    v177 = v192;
    v178 = v112;
    v179 = v118;
    v180 = v115;
    v181 = v189;
    v182 = v190;
    v183 = 0;
    v184 = v113;
    v185 = v114;
    v186 = v116;
    v187 = v117;
    v188 = v97;
    return outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)&v130);
  }
  LOBYTE(v130) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v20 = v19;
  LOBYTE(v130) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v96 = v21;
  LOBYTE(v130) = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  v95 = v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v128[0] = 3;
  v24 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v123 = (__n128)v130;
  LOBYTE(v130) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  v94 = v25;
  LOBYTE(v130) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  v27 = v26;
  LOBYTE(v130) = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  v93 = v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  v128[0] = 7;
  v121 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
  v122 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v120 = v24;
  v118 = v23;
  v91 = a2;
  v30 = (CGColor *)(id)specialized SIMD4<>.cgColor.getter((__n128)v130);

  v128[0] = 8;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  GenericRGB = v30;
  v31 = v126;
  v90 = (CGColor *)(id)specialized SIMD4<>.cgColor.getter((__n128)v130);

  LOBYTE(v130) = 9;
  v32 = KeyedDecodingContainer.decode(_:forKey:)();
  v92 = 0;
  v89 = v32 & 1;
  v128[0] = 10;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v92 = 0;
  v127 = (CGColorRef)(id)specialized SIMD4<>.cgColor.getter((__n128)v130);

  v128[0] = 11;
  v33 = v92;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v92 = v33;
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    v34 = v90;
    v35 = v127;

    v116 = 0;
    v117 = 0;
    v114 = 0;
    v113 = 0uLL;
    v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    v10 = 0;
    v119 = xmmword_21BE75140;
    v111 = *(__n128 *)&zmmword_21BE41220[16];
    LODWORD(v122) = 1.0;
    v112 = 0;
    v98 = 0;
    v121 = 0x3FC999999999999ALL;
    v99 = 0;
    v100 = 0;
    v97 = 3;
    v101 = 0;
    v107 = 1050253722;
    v102 = 1.0;
    v103 = 1.0;
    v104 = 1036831949;
    v106 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v12 = 1.0;
    v13 = 1;
    v125 = v35;
    v127 = v34;
LABEL_9:
    v16 = v95;
    v17 = v96;
    v11 = v89;
    v14 = v93;
    v15 = v94;
    goto LABEL_4;
  }
  *(double *)&v125 = COERCE_DOUBLE((id)specialized SIMD4<>.cgColor.getter((__n128)v130));

  LOBYTE(v130) = 12;
  v36 = v92;
  v37 = KeyedDecodingContainer.decode(_:forKey:)();
  v92 = v36;
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    v38 = v127;
    v39 = v125;

    v116 = 0;
    v117 = 0;
    v114 = 0;
    v113 = 0uLL;
    v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    v10 = 0;
    v119 = xmmword_21BE75140;
    v111 = *(__n128 *)&zmmword_21BE41220[16];
    LODWORD(v122) = 1.0;
    v112 = 0;
    v121 = 0x3FC999999999999ALL;
    v98 = 0;
    v99 = 0;
    v97 = 3;
    v100 = 0;
    v101 = 0;
    v107 = 1050253722;
    v104 = 1036831949;
    v102 = 1.0;
    v103 = 1.0;
    v106 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v13 = 1;
    v12 = 1.0;
    v125 = v38;
    v126 = v39;
    v127 = v90;
    goto LABEL_9;
  }
  v88 = v37 & 1;
  LOBYTE(v130) = 13;
  v40 = KeyedDecodingContainer.decode(_:forKey:)();
  v92 = 0;
  v87 = v40 & 1;
  v128[0] = 14;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v41 = v92;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v92 = v41;
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v42 = GenericRGB;

    v43 = v90;
    v44 = v127;

    v45 = v125;
    v116 = 0;
    v117 = 0;
    v114 = 0;
    v113 = 0uLL;
    v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    v119 = xmmword_21BE75140;
    v111 = *(__n128 *)&zmmword_21BE41220[16];
    LODWORD(v122) = 1.0;
    v112 = 0;
    v98 = 0;
    v121 = 0x3FC999999999999ALL;
    v97 = 3;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v107 = 1050253722;
    v102 = 1.0;
    v103 = 1.0;
    v104 = 1036831949;
    v106 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v12 = 1.0;
    v125 = v44;
    v126 = v45;
    v127 = v43;
    GenericRGB = v42;
    v16 = v95;
    v17 = v96;
    v10 = v88;
    v11 = v89;
    v14 = v93;
    v15 = v94;
    v13 = v87;
    goto LABEL_4;
  }
  v85 = (__n128)v130;
  v86 = v131.n128_u32[0];
  v46 = v131.n128_u8[4];
  v199 = v131.n128_i8[4];
  LOBYTE(v130) = 15;
  KeyedDecodingContainer.decode(_:forKey:)();
  v84 = v47;
  LOBYTE(v130) = 16;
  KeyedDecodingContainer.decode(_:forKey:)();
  v83 = v48;
  LOBYTE(v130) = 17;
  KeyedDecodingContainer.decode(_:forKey:)();
  v50 = v49;
  LOBYTE(v130) = 18;
  KeyedDecodingContainer.decode(_:forKey:)();
  v121 = v51;
  LOBYTE(v130) = 19;
  KeyedDecodingContainer.decode(_:forKey:)();
  v110 = v52;
  LOBYTE(v130) = 20;
  KeyedDecodingContainer.decode(_:forKey:)();
  v109 = v53;
  LOBYTE(v130) = 21;
  KeyedDecodingContainer.decode(_:forKey:)();
  v108 = v54;
  LOBYTE(v130) = 22;
  KeyedDecodingContainer.decode(_:forKey:)();
  v106 = v55;
  LOBYTE(v130) = 23;
  KeyedDecodingContainer.decode(_:forKey:)();
  v107 = v56;
  LOBYTE(v130) = 24;
  KeyedDecodingContainer.decode(_:forKey:)();
  HIDWORD(v104) = v57;
  v128[0] = 25;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIDWORD(v82) = v130;
  LOBYTE(v130) = 26;
  KeyedDecodingContainer.decode(_:forKey:)();
  LODWORD(v104) = v58;
  LOBYTE(v130) = 27;
  KeyedDecodingContainer.decode(_:forKey:)();
  v103 = v59;
  LOBYTE(v130) = 28;
  KeyedDecodingContainer.decode(_:forKey:)();
  v102 = v60;
  LOBYTE(v130) = 29;
  KeyedDecodingContainer.decode(_:forKey:)();
  v101 = v61;
  LOBYTE(v130) = 30;
  KeyedDecodingContainer.decode(_:forKey:)();
  LODWORD(v122) = v62;
  LOBYTE(v130) = 31;
  KeyedDecodingContainer.decode(_:forKey:)();
  v100 = v63;
  LOBYTE(v130) = 32;
  KeyedDecodingContainer.decode(_:forKey:)();
  v99 = v64;
  v128[0] = 33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v119 = v130;
  LOBYTE(v130) = 34;
  KeyedDecodingContainer.decode(_:forKey:)();
  v98 = v65;
  v128[0] = 35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v111 = (__n128)v130;
  LOBYTE(v130) = 36;
  LOBYTE(v120) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LODWORD(v120) = v120;
  LOBYTE(v130) = 37;
  KeyedDecodingContainer.decode(_:forKey:)();
  v112 = v66;
  v128[0] = 38;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LODWORD(v118) = v130;
  v128[0] = 39;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v115 = v130;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  v128[0] = 41;
  lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence? and conformance <A> A?, &demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?, (uint64_t (*)(void))lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence, MEMORY[0x24BEE4AC0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v113 = (__n128)v130;
  v116 = v131.n128_u64[1];
  v114 = v131.n128_u64[0];
  v117 = v132;
  v97 = v133;
  v129 = 43;
  v67 = KeyedDecodingContainer.decode(_:forKey:)();
  v92 = 0;
  v68 = v67;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v68 &= 1u;
  *(_DWORD *)v128 = v20;
  v69 = v95;
  *(_DWORD *)&v128[4] = v96;
  *(_DWORD *)&v128[8] = v95;
  *(__n128 *)&v128[16] = v123;
  v71 = v93;
  v70 = v94;
  *(_DWORD *)&v128[32] = v94;
  v128[36] = v68;
  *(_DWORD *)&v128[40] = v27;
  *(_DWORD *)&v128[44] = v93;
  v72 = GenericRGB;
  v73 = v90;
  *(_QWORD *)&v128[48] = GenericRGB;
  *(_QWORD *)&v128[56] = v90;
  v74 = v89;
  v128[64] = v89;
  v75 = v127;
  v76 = v125;
  *(_QWORD *)&v128[72] = v127;
  *(_QWORD *)&v128[80] = v125;
  v128[88] = v88;
  v128[89] = v87;
  *(__n128 *)&v128[96] = v85;
  *(_DWORD *)&v128[112] = v86;
  v128[116] = v46;
  v77 = v83;
  v78 = v84;
  *(float *)&v128[120] = v84;
  *(_DWORD *)&v128[124] = v83;
  v126 = v50;
  *(_QWORD *)&v128[128] = v50;
  v79 = v121;
  *(_QWORD *)&v128[136] = v121;
  *(_DWORD *)&v128[144] = v110;
  *(_DWORD *)&v128[148] = v109;
  *(_DWORD *)&v128[152] = v108;
  *(_DWORD *)&v128[156] = v106;
  *(_DWORD *)&v128[160] = v107;
  *(_DWORD *)&v128[164] = HIDWORD(v104);
  v128[168] = BYTE4(v82);
  *(_DWORD *)&v128[172] = v104;
  *(float *)&v128[176] = v103;
  *(float *)&v128[180] = v102;
  *(_DWORD *)&v128[184] = v101;
  *(_DWORD *)&v128[188] = v122;
  *(_DWORD *)&v128[192] = v100;
  *(_DWORD *)&v128[196] = v99;
  *(_OWORD *)&v128[208] = v119;
  *(_DWORD *)&v128[224] = v98;
  *(__n128 *)&v128[240] = v111;
  v128[256] = v120;
  *(_DWORD *)&v128[260] = v112;
  v128[264] = v118;
  v128[265] = v115;
  *(_QWORD *)&v128[272] = 0;
  *(__n128 *)&v128[280] = v113;
  *(_QWORD *)&v128[296] = v114;
  v81 = v116;
  v80 = v117;
  *(_QWORD *)&v128[304] = v116;
  *(_QWORD *)&v128[312] = v117;
  v128[320] = v97;
  outlined retain of ParticleEmitterComponent.ParticleEmitter(v128);

  memcpy(v91, v128, 0x141uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
  *(_QWORD *)&v130 = __PAIR64__(v96, v20);
  DWORD2(v130) = v69;
  v131 = v123;
  LODWORD(v132) = v70;
  BYTE4(v132) = v68;
  *(_WORD *)((char *)&v132 + 5) = v203;
  HIBYTE(v132) = v204;
  v133 = v27;
  v134 = v71;
  v135 = v72;
  v136 = v73;
  v137 = v74;
  *(_DWORD *)v138 = *(_DWORD *)v202;
  *(_DWORD *)&v138[3] = *(_DWORD *)&v202[3];
  v139 = v75;
  v140 = v76;
  v141 = v88;
  v142 = v87;
  v143 = v200;
  v144 = v201;
  v145 = v85;
  v146 = v86;
  v147 = v199;
  v148 = v197;
  v149 = v198;
  v150 = v78;
  v151 = v77;
  v152 = *(double *)&v126;
  v153 = v79;
  v154 = v110;
  v155 = v109;
  v156 = v108;
  v157 = v106;
  v158 = v107;
  v159 = HIDWORD(v104);
  v160 = BYTE4(v82);
  v162 = v196;
  v161 = v195;
  v163 = v104;
  v164 = v103;
  v165 = v102;
  v166 = v101;
  v167 = v122;
  v168 = v100;
  v169 = v99;
  v170 = v119;
  v171 = v98;
  v172 = v193;
  v173 = v194;
  v174 = v111;
  v175 = v120;
  v176 = v191;
  v177 = v192;
  v178 = v112;
  v179 = v118;
  v180 = v115;
  v181 = v189;
  v182 = v190;
  v183 = 0;
  v184 = v113;
  v185 = v114;
  v186 = v81;
  v187 = v80;
  v188 = v97;
  return outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)&v130);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter(_QWORD *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.encode(to:)(a1);
}

double CollisionPlane_v1.extent.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double CollisionPlane_v1.extent.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*CollisionPlane_v1.extent.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CollisionPlane_v1.transform.getter()
{
  __n128 result;
  __n128 v1;

  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

void CollisionPlane_v1.init(extent:transform:)(_QWORD *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float32x4_t a4@<Q1>, double a5@<D2>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(double *)&v7 = specialized simd_float4x4.init(translation:rotation:scale:)(a5, a4, a3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 64) = v10;
}

float CollisionPlaneExtent_v1.width.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void CollisionPlaneExtent_v1.width.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*CollisionPlaneExtent_v1.width.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CollisionPlaneExtent_v1.height.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void CollisionPlaneExtent_v1.height.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*CollisionPlaneExtent_v1.height.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionPlaneExtent_v1.hash(into:)()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFF) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFF) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

BOOL static CollisionPlaneExtent_v1.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CollisionPlaneExtent_v1.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x746867696568;
  else
    return 0x6874646977;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CollisionPlaneExtent_v1.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CollisionPlaneExtent_v1.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CollisionPlaneExtent_v1.CodingKeys()
{
  lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CollisionPlaneExtent_v1.CodingKeys()
{
  lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CollisionPlaneExtent_v1.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CollisionPlaneExtent_v1.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int CollisionPlaneExtent_v1.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFF) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t CollisionPlaneExtent_v1.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CollisionPlaneExtent_v1.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v16 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    v15 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CollisionPlaneExtent_v1@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return CollisionPlaneExtent_v1.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CollisionPlaneExtent_v1(_QWORD *a1)
{
  return CollisionPlaneExtent_v1.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance CollisionPlaneExtent_v1()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFF) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFF) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollisionPlaneExtent_v1()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFF) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CollisionPlaneExtent_v1(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t CollisionPlane_v1.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4168]);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t CollisionPlane_v1.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v7;
  _BYTE v8[24];
  uint64_t v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CollisionPlane_v1.hash(into:)(uint64_t a1)
{
  __n128 *v1;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  v3 = v1->n128_u32[2];
  v4 = v1->n128_u32[3];
  v8 = v1[1];
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  Hasher._combine(_:)(v1->n128_u64[0]);
  if ((v3 & 0x7FFFFFFF) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFF) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  specialized SIMD.hash(into:)(a1, v8);
  specialized SIMD.hash(into:)(a1, v9);
  specialized SIMD.hash(into:)(a1, v10);
  return specialized SIMD.hash(into:)(a1, v11);
}

Swift::Int CollisionPlane_v1.hashValue.getter()
{
  uint64_t *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[72];
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *((_OWORD *)v0 + 1);
  v2 = *((_OWORD *)v0 + 2);
  v3 = *((_OWORD *)v0 + 3);
  v4 = *((_OWORD *)v0 + 4);
  v7 = *v0;
  v8 = v0[1];
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CollisionPlane_v1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CollisionPlane_v1.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CollisionPlane_v1(_QWORD *a1)
{
  return CollisionPlane_v1.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CollisionPlane_v1()
{
  uint64_t *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[72];
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *((_OWORD *)v0 + 1);
  v2 = *((_OWORD *)v0 + 2);
  v3 = *((_OWORD *)v0 + 3);
  v4 = *((_OWORD *)v0 + 4);
  v7 = *v0;
  v8 = v0[1];
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollisionPlane_v1()
{
  uint64_t *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _BYTE v6[72];
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *((_OWORD *)v0 + 1);
  v2 = *((_OWORD *)v0 + 2);
  v3 = *((_OWORD *)v0 + 3);
  v4 = *((_OWORD *)v0 + 4);
  v7 = *v0;
  v8 = v0[1];
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        return swift_release();
      v15 = *(_QWORD *)(v3 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          return swift_release();
        v15 = *(_QWORD *)(v3 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            return swift_release();
          v15 = *(_QWORD *)(v3 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v7)
    return swift_release();
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  float32x4_t v18[5];

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      goto LABEL_24;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_24;
      v15 = *(_QWORD *)(v3 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_24;
        v15 = *(_QWORD *)(v3 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            goto LABEL_24;
          v15 = *(_QWORD *)(v3 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 48) + 80 * v10;
    v12 = *(float32x4_t *)(v11 + 48);
    v18[2] = *(float32x4_t *)(v11 + 32);
    v18[3] = v12;
    v18[4] = *(float32x4_t *)(v11 + 64);
    v13 = *(float32x4_t *)(v11 + 16);
    v18[0] = *(float32x4_t *)v11;
    v18[1] = v13;
    specialized Set._Variant.remove(_:)(v18, (uint64_t)&v17);
  }
  v16 = v14 + 4;
  if (v16 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v15 = *(_QWORD *)(v3 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

_QWORD *specialized Set._subtract<A>(_:)(_QWORD *a1)
{
  return specialized Set._subtract<A>(_:)(a1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD))specialized Set._Variant.remove(_:));
}

{
  return specialized Set._subtract<A>(_:)(a1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD))specialized Set._Variant.remove(_:));
}

_QWORD *specialized Set._subtract<A>(_:)(_QWORD *result, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v2 + 16))
    return result;
  v4 = result;
  v5 = result + 7;
  v6 = 1 << *((_BYTE *)result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & result[7];
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v9)
      return (_QWORD *)swift_release();
    v14 = v5[v13];
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v9)
        return (_QWORD *)swift_release();
      v14 = v5[v10];
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v9)
          return (_QWORD *)swift_release();
        v14 = v5[v10];
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v9)
            return (_QWORD *)swift_release();
          v14 = v5[v10];
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_6:
    result = a2(&v16, *(_QWORD *)(v4[6] + 8 * v12));
  }
  v15 = v13 + 4;
  if (v15 >= v9)
    return (_QWORD *)swift_release();
  v14 = v5[v15];
  if (v14)
  {
    v10 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v9)
      return (_QWORD *)swift_release();
    v14 = v5[v10];
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v2 = a2;
  v20[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v20[0] = a1;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = 0;
      v6 = a2 + 56;
      v19 = -1 << *(_BYTE *)(a2 + 32);
      v7 = ~v19;
      while (1)
      {
        v8 = *(_QWORD *)(a1 + 32 + 8 * v5++);
        v9 = static Hasher._hash(seed:_:)();
        v10 = v9 & v7;
        if (((*(_QWORD *)(v6 + (((v9 & (unint64_t)v7) >> 3) & 0xFFFFFFFFFFFFF8)) >> (v9 & v7)) & 1) != 0)
          break;
LABEL_4:
        if (v5 == v4)
          return v2;
      }
      while (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10) != v8)
      {
        v10 = (v10 + 1) & v7;
        if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_4;
      }
      v20[1] = v5;
      v11 = (unint64_t)(63 - v19) >> 6;
      isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v11 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x24BDAC7A8](isStackAllocationSafe);
        v14 = (char *)&v18 - v13;
        memcpy((char *)&v18 - v13, (const void *)(v2 + 56), 8 * v11);
        v15 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v14, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = (void *)swift_slowAlloc();
        memcpy(v16, (const void *)(v2 + 56), 8 * v11);
        v15 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v16, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x220772F44](v16, -1, -1);
      }
      return v15;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  char v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;

  v2 = a2;
  v43 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v37 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v35 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v36 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36)
          goto LABEL_47;
        v13 = *(_QWORD *)(v37 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v36)
            goto LABEL_47;
          v13 = *(_QWORD *)(v37 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v36)
              goto LABEL_47;
            v13 = *(_QWORD *)(v37 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v36)
                goto LABEL_47;
              v13 = *(_QWORD *)(v37 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  outlined consume of [String : AnimationResource].Iterator._Variant();
                  return v2;
                }
                v13 = *(_QWORD *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v36)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v37 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease();
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
    }
    else
    {
      v25 = ~v20;
      do
      {
        v21 = (v21 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v26 = (_QWORD *)(v22 + 16 * v21);
        v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v29 = *(_BYTE *)(v2 + 32);
    v30 = (unint64_t)((1 << v29) + 63) >> 6;
    v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
    }
    else
    {
      v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      MEMORY[0x220772F44](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  __n128 *v17;
  Swift::UInt v18;
  float v19;
  float v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  unint64_t v30;
  size_t v31;
  uint64_t isStackAllocationSafe;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  void *v36;
  Swift::Int v37;
  uint64_t v39;
  int64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  _BYTE v45[72];
  _QWORD v46[7];

  v2 = a2;
  v46[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v40 = (unint64_t)(63 - v7) >> 6;
    v10 = a2 + 56;
    do
    {
LABEL_6:
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v4 << 6);
      }
      else
      {
        v13 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_50;
        }
        if (v13 >= v40)
          goto LABEL_47;
        v14 = *(_QWORD *)(v6 + 8 * v13);
        v15 = v4 + 1;
        if (!v14)
        {
          v15 = v4 + 2;
          if (v4 + 2 >= v40)
            goto LABEL_47;
          v14 = *(_QWORD *)(v6 + 8 * v15);
          if (!v14)
          {
            v15 = v4 + 3;
            if (v4 + 3 >= v40)
              goto LABEL_47;
            v14 = *(_QWORD *)(v6 + 8 * v15);
            if (!v14)
            {
              v15 = v4 + 4;
              if (v4 + 4 >= v40)
                goto LABEL_47;
              v14 = *(_QWORD *)(v6 + 8 * v15);
              if (!v14)
              {
                v16 = v4 + 5;
                if (v4 + 5 >= v40)
                {
LABEL_47:
                  swift_bridgeObjectRetain();
                  outlined consume of [String : AnimationResource].Iterator._Variant();
                  return v2;
                }
                v14 = *(_QWORD *)(v6 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      break;
                    if (v15 >= v40)
                      goto LABEL_47;
                    v14 = *(_QWORD *)(v6 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_23;
                  }
LABEL_50:
                  __break(1u);
                }
                v15 = v4 + 5;
              }
            }
          }
        }
LABEL_23:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
        v4 = v15;
      }
      v17 = (__n128 *)(*(_QWORD *)(a1 + 48) + 80 * v12);
      v18 = v17->n128_u64[0];
      v19 = v17->n128_f32[2];
      v20 = v17->n128_f32[3];
      v44 = v17[1];
      v43 = v17[2];
      v42 = v17[3];
      v41 = v17[4];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      if ((LODWORD(v19) & 0x7FFFFFFF) != 0)
        v21 = LODWORD(v19);
      else
        v21 = 0;
      Hasher._combine(_:)(v21);
      if ((LODWORD(v20) & 0x7FFFFFFF) != 0)
        v22 = LODWORD(v20);
      else
        v22 = 0;
      Hasher._combine(_:)(v22);
      specialized SIMD.hash(into:)(v45, v44);
      specialized SIMD.hash(into:)(v45, v43);
      specialized SIMD.hash(into:)(v45, v42);
      specialized SIMD.hash(into:)(v45, v41);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v2 + 32);
      v25 = v23 & ~v24;
    }
    while (((*(_QWORD *)(v10 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0);
    v26 = *(_QWORD *)(v2 + 48);
    while (1)
    {
      v27 = v26 + 80 * v25;
      v28 = *(_QWORD *)v27 == v18 && *(float *)(v27 + 8) == v19;
      v29 = v28 && *(float *)(v27 + 12) == v20;
      if (v29
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 48), (float32x4_t)v42), (int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 64), (float32x4_t)v41)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 32), (float32x4_t)v43), (int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 16), (float32x4_t)v44)))) & 0x80000000) != 0)
      {
        break;
      }
      v25 = (v25 + 1) & ~v24;
      if (((*(_QWORD *)(v10 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        goto LABEL_6;
    }
    v46[0] = a1;
    v46[1] = v6;
    v46[2] = v39;
    v46[3] = v4;
    v46[4] = v9;
    v30 = (unint64_t)(63 - v24) >> 6;
    v31 = 8 * v30;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v30 <= 0x80 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      v34 = (char *)&v39 - v33;
      memcpy((char *)&v39 - v33, (const void *)(v2 + 56), v31);
      v35 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v34, v30, v2, v25, v46);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      return v35;
    }
    else
    {
      v36 = (void *)swift_slowAlloc();
      memcpy(v36, (const void *)(v2 + 56), v31);
      v37 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v36, v30, v2, v25, v46);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      MEMORY[0x220772F44](v36, -1, -1);
      return v37;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.subtracting<A>(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized _NativeSet.subtracting<A>(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  Swift::UInt v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t isStackAllocationSafe;
  uint64_t v27;
  char *v28;
  Swift::Int v29;
  void *v30;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[6];

  v3 = a2;
  v34[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = 0;
    v7 = a1 + 56;
    v6 = *(_QWORD *)(a1 + 56);
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a3;
    v33 = ~v8;
    if (-v8 < 64)
      v9 = ~(-1 << -(char)v8);
    else
      v9 = -1;
    v10 = v9 & v6;
    v11 = (unint64_t)(63 - v8) >> 6;
    v12 = a2 + 56;
    while (1)
    {
      do
      {
        if (v10)
        {
          v13 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          v14 = v13 | (v5 << 6);
        }
        else
        {
          v15 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if (v15 >= v11)
            goto LABEL_35;
          v16 = *(_QWORD *)(v7 + 8 * v15);
          v17 = v5 + 1;
          if (!v16)
          {
            v17 = v5 + 2;
            if (v5 + 2 >= v11)
              goto LABEL_35;
            v16 = *(_QWORD *)(v7 + 8 * v17);
            if (!v16)
            {
              v17 = v5 + 3;
              if (v5 + 3 >= v11)
                goto LABEL_35;
              v16 = *(_QWORD *)(v7 + 8 * v17);
              if (!v16)
              {
                v17 = v5 + 4;
                if (v5 + 4 >= v11)
                  goto LABEL_35;
                v16 = *(_QWORD *)(v7 + 8 * v17);
                if (!v16)
                {
                  v18 = v5 + 5;
                  if (v5 + 5 >= v11)
                  {
LABEL_35:
                    swift_bridgeObjectRetain();
                    outlined consume of [String : AnimationResource].Iterator._Variant();
                    return v3;
                  }
                  v16 = *(_QWORD *)(v7 + 8 * v18);
                  if (!v16)
                  {
                    while (1)
                    {
                      v17 = v18 + 1;
                      if (__OFADD__(v18, 1))
                        break;
                      if (v17 >= v11)
                        goto LABEL_35;
                      v16 = *(_QWORD *)(v7 + 8 * v17);
                      ++v18;
                      if (v16)
                        goto LABEL_23;
                    }
LABEL_37:
                    __break(1u);
                  }
                  v17 = v5 + 5;
                }
              }
            }
          }
LABEL_23:
          v10 = (v16 - 1) & v16;
          v14 = __clz(__rbit64(v16)) + (v17 << 6);
          v5 = v17;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v19);
        v20 = Hasher._finalize()();
        v21 = -1 << *(_BYTE *)(v3 + 32);
        v22 = v20 & ~v21;
      }
      while (((*(_QWORD *)(v12 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0);
      v23 = *(_QWORD *)(v3 + 48);
      if (*(_QWORD *)(v23 + 8 * v22) == v19)
        break;
      while (1)
      {
        v22 = (v22 + 1) & ~v21;
        if (((*(_QWORD *)(v12 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
          break;
        if (*(_QWORD *)(v23 + 8 * v22) == v19)
          goto LABEL_28;
      }
    }
LABEL_28:
    v34[0] = a1;
    v34[1] = v7;
    v34[2] = v33;
    v34[3] = v5;
    v34[4] = v10;
    v24 = (unint64_t)(63 - v21) >> 6;
    v25 = 8 * v24;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v24 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      v28 = (char *)&v32 - v27;
      memcpy((char *)&v32 - v27, (const void *)(v3 + 56), v25);
      v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v28, v24, v3, v22, v34, v32);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
    }
    else
    {
      v30 = (void *)swift_slowAlloc();
      memcpy(v30, (const void *)(v3 + 56), v25);
      v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v30, v24, v3, v22, v34, v32);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      MEMORY[0x220772F44](v30, -1, -1);
    }
    return v29;
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = (unint64_t *)result;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v10 = *a5;
  v9 = a5[1];
  v11 = *(_QWORD *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_2:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v6, a2, v8, a3);
  }
  else
  {
    v13 = a3 + 56;
    v14 = ~(-1 << *(_BYTE *)(a3 + 32));
    while (v9 < v11)
    {
      if (__OFADD__(v9, 1))
        goto LABEL_19;
      v15 = *(_QWORD *)(v10 + 32 + 8 * v9);
      a5[1] = v9 + 1;
      result = static Hasher._hash(seed:_:)();
      v16 = result & v14;
      v17 = (result & (unint64_t)v14) >> 6;
      v18 = 1 << (result & v14);
      if ((v18 & *(_QWORD *)(v13 + 8 * v17)) != 0)
      {
        v19 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v19 + 8 * v16) == v15)
        {
LABEL_14:
          v22 = v17;
          v23 = v6[v17];
          v6[v22] = v23 & ~v18;
          if ((v18 & v23) != 0)
          {
            if (__OFSUB__(v8--, 1))
              goto LABEL_20;
            if (!v8)
              return MEMORY[0x24BEE4B08];
          }
        }
        else
        {
          for (i = v16 + 1; ; i = v21 + 1)
          {
            v21 = i & v14;
            if (((*(_QWORD *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              break;
            if (*(_QWORD *)(v19 + 8 * v21) == v15)
            {
              v17 = v21 >> 6;
              v18 = 1 << v21;
              goto LABEL_14;
            }
          }
        }
      }
      v9 = a5[1];
      v11 = *(_QWORD *)(v10 + 16);
      if (v9 == v11)
        goto LABEL_2;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  int64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a3 + 16);
  v39 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v40 = a3 + 56;
  while (2)
  {
    v38 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v36 = v9 + 6;
                while (v14 != v36)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v40 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
LABEL_23:
      v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1)
      continue;
    return MEMORY[0x24BEE4B08];
  }
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  float v22;
  float v23;
  Swift::UInt32 v24;
  Swift::UInt32 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  _BYTE v42[80];
  uint64_t v43;

  v7 = (unint64_t *)result;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v9 = v8 - 1;
  v10 = a3 + 56;
  while (2)
  {
    v43 = v9;
    while (1)
    {
LABEL_3:
      v12 = a5[3];
      v11 = a5[4];
      if (!v11)
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_51;
        }
        v16 = (unint64_t)(a5[2] + 64) >> 6;
        if (v15 >= v16)
        {
          v15 = a5[3];
LABEL_47:
          a5[3] = v15;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v7, a2, v43, a3);
        }
        v17 = a5[1];
        v18 = *(_QWORD *)(v17 + 8 * v15);
        if (v18)
          goto LABEL_14;
        v19 = v12 + 2;
        if (v12 + 2 >= v16)
          goto LABEL_47;
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (!v18)
        {
          if (v12 + 3 >= v16)
            goto LABEL_48;
          v18 = *(_QWORD *)(v17 + 8 * (v12 + 3));
          if (v18)
          {
            v15 = v12 + 3;
            goto LABEL_14;
          }
          v19 = v12 + 4;
          if (v12 + 4 >= v16)
          {
            v15 = v12 + 3;
            goto LABEL_47;
          }
          v18 = *(_QWORD *)(v17 + 8 * v19);
          if (!v18)
          {
            v15 = v12 + 5;
            if (v12 + 5 >= v16)
            {
LABEL_48:
              v15 = v19;
              goto LABEL_47;
            }
            v18 = *(_QWORD *)(v17 + 8 * v15);
            if (!v18)
            {
              v15 = v16 - 1;
              v36 = v12 + 6;
              while (v16 != v36)
              {
                v18 = *(_QWORD *)(v17 + 8 * v36++);
                if (v18)
                {
                  v15 = v36 - 1;
                  goto LABEL_14;
                }
              }
              goto LABEL_47;
            }
            goto LABEL_14;
          }
        }
        v15 = v19;
LABEL_14:
        v13 = (v18 - 1) & v18;
        v14 = __clz(__rbit64(v18)) + (v15 << 6);
        v12 = v15;
        goto LABEL_15;
      }
      v13 = (v11 - 1) & v11;
      v14 = __clz(__rbit64(v11)) | (v12 << 6);
LABEL_15:
      v20 = *(_QWORD *)(*a5 + 48) + 80 * v14;
      v21 = *(_QWORD *)v20;
      v22 = *(float *)(v20 + 8);
      v23 = *(float *)(v20 + 12);
      v40 = *(__n128 *)(v20 + 32);
      v41 = *(__n128 *)(v20 + 16);
      v38 = *(__n128 *)(v20 + 64);
      v39 = *(__n128 *)(v20 + 48);
      a5[3] = v12;
      a5[4] = v13;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      if ((LODWORD(v22) & 0x7FFFFFFF) != 0)
        v24 = LODWORD(v22);
      else
        v24 = 0;
      Hasher._combine(_:)(v24);
      if ((LODWORD(v23) & 0x7FFFFFFF) != 0)
        v25 = LODWORD(v23);
      else
        v25 = 0;
      Hasher._combine(_:)(v25);
      specialized SIMD.hash(into:)(v42, v41);
      specialized SIMD.hash(into:)(v42, v40);
      specialized SIMD.hash(into:)(v42, v39);
      specialized SIMD.hash(into:)(v42, v38);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(a3 + 32);
      v27 = result & ~v26;
      if (((*(_QWORD *)(v10 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
      {
        v28 = ~v26;
        v29 = *(_QWORD *)(a3 + 48);
        while (1)
        {
          v30 = v29 + 80 * v27;
          v31 = *(_QWORD *)v30 == v21 && *(float *)(v30 + 8) == v22;
          v32 = v31 && *(float *)(v30 + 12) == v23;
          if (v32
            && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 48), (float32x4_t)v39), (int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 64), (float32x4_t)v38)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 32), (float32x4_t)v40), (int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 16), (float32x4_t)v41)))) & 0x80000000) != 0)
          {
            break;
          }
          v27 = (v27 + 1) & v28;
          if (((*(_QWORD *)(v10 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
            goto LABEL_3;
        }
        v33 = (v27 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v34 = 1 << v27;
        v35 = *(unint64_t *)((char *)v7 + v33);
        *(unint64_t *)((char *)v7 + v33) = v35 & ~v34;
        if ((v35 & v34) != 0)
          break;
      }
    }
    v9 = v43 - 1;
    if (__OFSUB__(v43, 1))
    {
LABEL_51:
      __break(1u);
      return result;
    }
    if (v43 != 1)
      continue;
    return MEMORY[0x24BEE4B08];
  }
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t i;
  unint64_t v31;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v16 = a5[3];
    v17 = a5[4];
    if (!v17)
      break;
    v18 = (v17 - 1) & v17;
    v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    v26 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v26);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(a3 + 32);
    v28 = result & ~v27;
    v12 = v28 >> 6;
    v13 = 1 << v28;
    if (((1 << v28) & *(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v29 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        v14 = v12;
        v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_34;
          if (!v10)
            return MEMORY[0x24BEE4B08];
        }
      }
      else
      {
        for (i = v28 + 1; ; i = v31 + 1)
        {
          v31 = i & ~v27;
          if (((*(_QWORD *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
            break;
          if (*(_QWORD *)(v29 + 8 * v31) == v26)
          {
            v12 = v31 >> 6;
            v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    v21 = (unint64_t)(a5[2] + 64) >> 6;
    v22 = a5[3];
    if (v20 >= v21)
      goto LABEL_31;
    v23 = a5[1];
    v24 = *(_QWORD *)(v23 + 8 * v20);
    if (!v24)
    {
      v22 = v16 + 1;
      if (v16 + 2 >= v21)
        goto LABEL_31;
      v24 = *(_QWORD *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        v20 = v16 + 2;
      }
      else
      {
        v22 = v16 + 2;
        if (v16 + 3 >= v21)
          goto LABEL_31;
        v24 = *(_QWORD *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          v20 = v16 + 3;
        }
        else
        {
          v20 = v16 + 4;
          v22 = v16 + 3;
          if (v16 + 4 >= v21)
            goto LABEL_31;
          v24 = *(_QWORD *)(v23 + 8 * v20);
          if (!v24)
          {
            v22 = v21 - 1;
            v25 = v16 + 5;
            while (v21 != v25)
            {
              v24 = *(_QWORD *)(v23 + 8 * v25++);
              if (v24)
              {
                v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain();
            return specialized _NativeSet.extractSubset(using:count:)(v8, a2, v10, a3, a6);
          }
        }
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v20 << 6);
    v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  uint64_t v22;
  unint64_t *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  _BYTE v30[80];

  if (!a3)
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  result = static _SetStorage.allocate(capacity:)();
  v6 = result;
  v24 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_34;
      if (v15 >= a2)
      {
LABEL_31:
        swift_release();
        return v6;
      }
      v16 = v24[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          goto LABEL_31;
        v16 = v24[v11];
        if (!v16)
        {
          v17 = v15 + 2;
          if (v17 >= a2)
            goto LABEL_31;
          v16 = v24[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_35;
              if (v11 >= a2)
                goto LABEL_31;
              v16 = v24[v11];
              ++v17;
              if (v16)
                goto LABEL_22;
            }
          }
          v11 = v17;
        }
      }
LABEL_22:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(a4 + 48) + 80 * v14;
    v19 = *(_QWORD *)v18;
    v27 = *(__n128 *)(v18 + 32);
    v28 = *(__n128 *)(v18 + 16);
    v25 = *(__n128 *)(v18 + 64);
    v26 = *(__n128 *)(v18 + 48);
    v29 = *(_QWORD *)(v18 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    v20 = (v29 & 0x7FFFFFFF) != 0 ? v29 : 0;
    Hasher._combine(_:)(v20);
    v21 = (v29 & 0x7FFFFFFF00000000) != 0 ? HIDWORD(v29) : 0;
    Hasher._combine(_:)(v21);
    specialized SIMD.hash(into:)(v30, v28);
    specialized SIMD.hash(into:)(v30, v27);
    specialized SIMD.hash(into:)(v30, v26);
    specialized SIMD.hash(into:)(v30, v25);
    Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)();
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = *(_QWORD *)(v6 + 48) + 80 * result;
    *(_QWORD *)v22 = v19;
    *(_QWORD *)(v22 + 8) = v29;
    *(__n128 *)(v22 + 16) = v28;
    *(__n128 *)(v22 + 32) = v27;
    *(__n128 *)(v22 + 48) = v26;
    *(__n128 *)(v22 + 64) = v25;
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_31;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_34:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_37;
    if (v15 >= a2)
      goto LABEL_34;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_34;
      v16 = a1[v11];
      if (!v16)
        break;
    }
LABEL_21:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_22:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5)
      goto LABEL_34;
  }
  v17 = v15 + 2;
  if (v17 >= a2)
    goto LABEL_34;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_34;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_34:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_37;
    if (v14 >= v30)
      goto LABEL_34;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_34;
      v15 = a1[v10];
      if (!v15)
        break;
    }
LABEL_21:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5)
      goto LABEL_34;
  }
  v16 = v14 + 2;
  if (v16 >= v30)
    goto LABEL_34;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_34;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v5 = a4;
  if (!a3)
  {
    v10 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  result = static _SetStorage.allocate(capacity:)();
  v10 = result;
  v29 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v29[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v29[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v29[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v10 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v23) = v19;
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v29[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v29[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v6 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x220772F44](v7, -1, -1);
  }
  return v6;
}

unint64_t specialized closure #1 in _NativeSet.filter(_:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12)
      goto LABEL_24;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_24;
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_24;
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 80 * v14))
    {
      *(_QWORD *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v5, a2, v6, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_24;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_24;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized static CollisionPlane_v1.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  if (a1->i64[0] == a2->i64[0] && a1->f32[2] == a2->f32[2] && a1->f32[3] == a2->f32[3])
    return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[3], a2[3]), (int8x16_t)vceqq_f32(a1[4], a2[4])), vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[1], a2[1])))) >> 31;
  else
    return 0;
}

BOOL specialized static ParticleEmitterComponent.ParticleEmitter.BillboardMode.== infix(_:_:)(float *a1, uint64_t *a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v7;
  _BOOL8 result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  float v12;
  BOOL v13;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;

  v2 = a1[4];
  v4 = *a2;
  v3 = a2[1];
  v5 = *((_DWORD *)a2 + 4);
  if (*((_BYTE *)a1 + 20) == 1)
  {
    if (*(_OWORD *)a1 != 0 || LODWORD(v2) != 0)
    {
      if ((*((_BYTE *)a2 + 20) & 1) != 0)
      {
        if (v3 | v4)
          v7 = 0;
        else
          v7 = v5 == 0;
        return !v7;
      }
      return 0;
    }
    if (!*((_BYTE *)a2 + 20))
      return 0;
    return !(v3 | v4) && v5 == 0;
  }
  else
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
      return 0;
    v9 = 0;
    v10 = *(_OWORD *)a1;
    v11 = *(_OWORD *)a2;
    v12 = *((float *)a2 + 4);
    while (1)
    {
      v17 = v10;
      v15 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
      v18 = v11;
      v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
      v13 = v15 == v16;
      if (v9 == 2)
        break;
      while (1)
      {
        ++v9;
        if (v13)
          break;
        v13 = 0;
        result = 0;
        if (v9 == 2)
          return result;
      }
    }
    return v2 == v12 && v15 == v16;
  }
}

BOOL specialized static ParticleEmitterComponent.ParticleEmitter.ImageSequence.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) != 0&& *(float *)(a1 + 32) == *(float *)(a2 + 32)&& *(float *)(a1 + 36) == *(float *)(a2 + 36))
  {
    return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  }
  return result;
}

uint64_t specialized static ParticleEmitterComponent.BirthLocation.== infix(_:_:)(uint64_t a1, int8x16_t *a2)
{
  __int128 v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[2];

  v3 = *(int8x16_t *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v4 = *a2;
  v5 = a2[1];
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    if (vorrq_s8((int8x16_t)vdupq_lane_s64(v2, 0), v3).i64[1] | v3.i64[0] | *((_QWORD *)&v2 + 1))
    {
      if ((a2[2].i8[0] & 1) != 0)
        return vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vorrq_s8((int8x16_t)vdupq_lane_s64(v5.i64[0], 0), vorrq_s8(v4, v5)), 1), v4).u64[0] != 0;
    }
    else if (a2[2].i8[0])
    {
      return vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vorrq_s8((int8x16_t)vdupq_lane_s64(v5.i64[0], 0), vorrq_s8(v4, v5)), 1), v4).u64[0] == 0;
    }
  }
  else if ((a2[2].i8[0] & 1) == 0)
  {
    v7 = 0;
    while (1)
    {
      v13[0] = v3;
      v13[1] = v2;
      v9 = 8 * (v7 & 3);
      v10 = *(_QWORD *)((char *)v13 + v9);
      v12[0] = v4;
      v12[1] = v5;
      v11 = *(_QWORD *)((char *)v12 + v9);
      v8 = v10 == v11;
      if (v7 == 2)
        break;
      while (1)
      {
        ++v7;
        if (v8)
          break;
        if (v7 == 2)
          return 0;
        v8 = 0;
      }
    }
    if (v10 == v11)
      return 1;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.CodingKeys, &unk_24DFCAAD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.CodingKeys, &unk_24DFCAAD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.CodingKeys, &unk_24DFCAAD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.CodingKeys, &unk_24DFCAAD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys, &unk_24DFCABA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys, &unk_24DFCABA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys, &unk_24DFCABA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys, &unk_24DFCABA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VolumeCodingKeys, &unk_24DFCAB10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VolumeCodingKeys, &unk_24DFCAB10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.VolumeCodingKeys, &unk_24DFCAB10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys, &unk_24DFCAAF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys, &unk_24DFCAAF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys, &unk_24DFCAAF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.CodingKeys, &unk_24DFCA9E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.CodingKeys, &unk_24DFCA9E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.CodingKeys, &unk_24DFCA9E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.CodingKeys, &unk_24DFCA9E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.NormalCodingKeys, &unk_24DFCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.NormalCodingKeys, &unk_24DFCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.NormalCodingKeys, &unk_24DFCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.LocalCodingKeys, &unk_24DFCAA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.LocalCodingKeys, &unk_24DFCAA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.LocalCodingKeys, &unk_24DFCAA20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.WorldCodingKeys, &unk_24DFCAA00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.WorldCodingKeys, &unk_24DFCAA00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection.WorldCodingKeys, &unk_24DFCAA00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.CodingKeys, &unk_24DFCA8D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.CodingKeys, &unk_24DFCA8D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.CodingKeys, &unk_24DFCA8D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.CodingKeys, &unk_24DFCA8D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys, &unk_24DFCA950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys, &unk_24DFCA950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys, &unk_24DFCA950);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys, &unk_24DFCA930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys, &unk_24DFCA930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys, &unk_24DFCA930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys, &unk_24DFCA910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys, &unk_24DFCA910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys, &unk_24DFCA910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys, &unk_24DFCA8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys, &unk_24DFCA8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys, &unk_24DFCA8F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.CodingKeys, &unk_24DFCA800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.CodingKeys, &unk_24DFCA800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.CodingKeys, &unk_24DFCA800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.CodingKeys, &unk_24DFCA800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys, &unk_24DFCA840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys, &unk_24DFCA840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys, &unk_24DFCA840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.LocalCodingKeys, &unk_24DFCA820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.LocalCodingKeys, &unk_24DFCA820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace.LocalCodingKeys, &unk_24DFCA820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.CodingKeys, &unk_24DFCA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.CodingKeys, &unk_24DFCA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.CodingKeys, &unk_24DFCA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.CodingKeys, &unk_24DFCA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.StopCodingKeys, &unk_24DFCA770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.StopCodingKeys, &unk_24DFCA770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.StopCodingKeys, &unk_24DFCA770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.PauseCodingKeys, &unk_24DFCA750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.PauseCodingKeys, &unk_24DFCA750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.PauseCodingKeys, &unk_24DFCA750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.PlayCodingKeys, &unk_24DFCA730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.PlayCodingKeys, &unk_24DFCA730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState.PlayCodingKeys, &unk_24DFCA730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys);
  }
  return result;
}

double _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOi0_(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined init with take of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *outlined retain of ParticleEmitterComponent.ParticleEmitter(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v2 = (void *)a1[6];
  v3 = (void *)a1[7];
  v4 = (void *)a1[9];
  v5 = (void *)a1[10];
  swift_retain();
  v6 = v2;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  return a1;
}

uint64_t outlined release of ParticleEmitterComponent.ParticleEmitter(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  v4 = *(void **)(a1 + 72);

  swift_release();
  return a1;
}

uint64_t outlined retain of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v9 = *(_BYTE *)(a1 + 320);
  v7 = *(_OWORD *)(a1 + 272);
  v8 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    v9);
  return a1;
}

uint64_t outlined consume of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11)
{
  uint64_t result;

  if (a7)
  {

    return swift_release();
  }
  return result;
}

uint64_t _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys, &unk_24DFCA5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys, &unk_24DFCA5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys, &unk_24DFCA5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys, &unk_24DFCA5B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys, &unk_24DFCA680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys, &unk_24DFCA680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys, &unk_24DFCA680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys, &unk_24DFCA680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys, &unk_24DFCA5F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys, &unk_24DFCA5F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys, &unk_24DFCA5F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys, &unk_24DFCA5D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys, &unk_24DFCA5D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys, &unk_24DFCA5D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys, &unk_24DFCA440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys, &unk_24DFCA440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys, &unk_24DFCA440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys, &unk_24DFCA440);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys, &unk_24DFCA520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys, &unk_24DFCA520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys, &unk_24DFCA520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys, &unk_24DFCA500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys, &unk_24DFCA500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys, &unk_24DFCA500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys, &unk_24DFCA4E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys, &unk_24DFCA4E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys, &unk_24DFCA4E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys, &unk_24DFCA4C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys, &unk_24DFCA4C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys, &unk_24DFCA4C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys, &unk_24DFCA4A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys, &unk_24DFCA4A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys, &unk_24DFCA4A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys, &unk_24DFCA480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys, &unk_24DFCA480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys, &unk_24DFCA480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys, &unk_24DFCA460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys, &unk_24DFCA460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys, &unk_24DFCA460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys, &unk_24DFCA2D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys, &unk_24DFCA2D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys, &unk_24DFCA2D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys, &unk_24DFCA2D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys, &unk_24DFCA3B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys, &unk_24DFCA3B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys, &unk_24DFCA3B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys, &unk_24DFCA390);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys, &unk_24DFCA390);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys, &unk_24DFCA390);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys, &unk_24DFCA370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys, &unk_24DFCA370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys, &unk_24DFCA370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys, &unk_24DFCA350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys, &unk_24DFCA350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys, &unk_24DFCA350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys, &unk_24DFCA330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys, &unk_24DFCA330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys, &unk_24DFCA330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys, &unk_24DFCA310);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys, &unk_24DFCA310);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys, &unk_24DFCA310);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys, &unk_24DFCA2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys, &unk_24DFCA2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys, &unk_24DFCA2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys, &unk_24DFCA1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys, &unk_24DFCA1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys, &unk_24DFCA1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys, &unk_24DFCA1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys, &unk_24DFCA240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys, &unk_24DFCA240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys, &unk_24DFCA240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys, &unk_24DFCA220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys, &unk_24DFCA220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys, &unk_24DFCA220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys, &unk_24DFCA200);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys, &unk_24DFCA200);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys, &unk_24DFCA200);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys, &unk_24DFCA0F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys, &unk_24DFCA0F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys, &unk_24DFCA0F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys, &unk_24DFCA0F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys, &unk_24DFCA150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys, &unk_24DFCA150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys, &unk_24DFCA150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys, &unk_24DFCA130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys, &unk_24DFCA130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys, &unk_24DFCA130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys, &unk_24DFCA110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys, &unk_24DFCA110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys, &unk_24DFCA110);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys, &unk_24DFCA060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys, &unk_24DFCA060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys, &unk_24DFCA060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys, &unk_24DFCA060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.CodingKeys, &unk_24DFC9FD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.CodingKeys, &unk_24DFC9FD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.CodingKeys, &unk_24DFC9FD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.CodingKeys, &unk_24DFC9FD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape, &type metadata for ParticleEmitterComponent.EmitterShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape, &type metadata for ParticleEmitterComponent.EmitterShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.EmitterShape, &type metadata for ParticleEmitterComponent.EmitterShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation, &type metadata for ParticleEmitterComponent.BirthLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation, &type metadata for ParticleEmitterComponent.BirthLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthLocation, &type metadata for ParticleEmitterComponent.BirthLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection, &type metadata for ParticleEmitterComponent.BirthDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection, &type metadata for ParticleEmitterComponent.BirthDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.BirthDirection, &type metadata for ParticleEmitterComponent.BirthDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion, &type metadata for ParticleEmitterComponent.SpawnOccasion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion, &type metadata for ParticleEmitterComponent.SpawnOccasion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SpawnOccasion, &type metadata for ParticleEmitterComponent.SpawnOccasion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState, &type metadata for ParticleEmitterComponent.SimulationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState, &type metadata for ParticleEmitterComponent.SimulationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationState, &type metadata for ParticleEmitterComponent.SimulationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace, &type metadata for ParticleEmitterComponent.SimulationSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace, &type metadata for ParticleEmitterComponent.SimulationSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.SimulationSpace, &type metadata for ParticleEmitterComponent.SimulationSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter, &type metadata for ParticleEmitterComponent.ParticleEmitter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter, &type metadata for ParticleEmitterComponent.ParticleEmitter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter);
  }
  return result;
}

uint64_t outlined release of ParticleEmitterComponent(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void **)(a1 + 288);
  v3 = *(void **)(a1 + 296);
  v4 = *(void **)(a1 + 312);
  v14 = *(_QWORD *)(a1 + 584);
  v15 = *(_QWORD *)(a1 + 576);
  v12 = *(_QWORD *)(a1 + 600);
  v13 = *(_QWORD *)(a1 + 592);
  v10 = *(_QWORD *)(a1 + 616);
  v11 = *(_QWORD *)(a1 + 608);
  v8 = *(void **)(a1 + 632);
  v9 = *(void **)(a1 + 624);
  v6 = *(_OWORD *)(a1 + 656);
  v7 = *(_OWORD *)(a1 + 640);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of ParticleEmitterComponent.ParticleEmitter?(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((void **)&v7 + 1), (void *)v6);
  return a1;
}

unint64_t type metadata accessor for NSValue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSValue;
  if (!lazy cache variable for type metadata for NSValue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys, &type metadata for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys, &type metadata for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys, &type metadata for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys, &type metadata for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BillboardMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve, &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve, &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve, &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder, &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder, &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.SortOrder, &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.BlendMode, &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence, &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence, &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ParticleEmitterComponent.ParticleEmitter.ImageSequence, &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1.CodingKeys, &unk_24DFC9EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1.CodingKeys, &unk_24DFC9EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1.CodingKeys, &unk_24DFC9EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1.CodingKeys, &unk_24DFC9EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1, &type metadata for CollisionPlaneExtent_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1, &type metadata for CollisionPlaneExtent_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionPlaneExtent_v1, &type metadata for CollisionPlaneExtent_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1);
  }
  return result;
}

uint64_t sub_21BCEF8CC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 170);
  return result;
}

char *sub_21BCEF8D8(char *result, uint64_t a2)
{
  char v2;

  v2 = *result;
  *(_BYTE *)(a2 + 170) = *result;
  *(_BYTE *)(a2 + 171) = v2 ^ 1;
  return result;
}

float sub_21BCEF8EC@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 216);
  *a2 = result;
  return result;
}

float *sub_21BCEF8F8(float *result, uint64_t a2)
{
  float v2;

  v2 = fminf(*result, 2.0);
  if (v2 < 0.0)
    v2 = 0.0;
  *(float *)(a2 + 216) = v2;
  return result;
}

uint64_t sub_21BCEF918@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 224);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BCEF928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[336];

  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a1 + 576, (uint64_t)v4);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, a2);
  return outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of ParticleEmitterComponent.ParticleEmitter?);
}

uint64_t destroy for ParticleEmitterComponent(uint64_t a1)
{
  uint64_t result;
  void *v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = swift_release();
  v3 = *(void **)(a1 + 624);
  if (v3)
  {

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  id v32;
  id v33;
  id v34;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  v6 = *(_QWORD *)(a2 + 176);
  v7 = a2 + 240;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v8 = a1 + 240;
  *(_QWORD *)(a1 + 176) = v6;
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  v9 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v9;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v10 = *(void **)(a2 + 288);
  v11 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v10;
  *(_QWORD *)(a1 + 296) = v11;
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  v13 = *(void **)(a2 + 312);
  v12 = *(void **)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v13;
  *(_QWORD *)(a1 + 320) = v12;
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  v14 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 349) = *(_QWORD *)(a2 + 349);
  *(_OWORD *)(a1 + 336) = v14;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v15 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v15;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_OWORD *)(a1 + 412) = *(_OWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a2 + 500);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
  *(_BYTE *)(a1 + 505) = *(_BYTE *)(a2 + 505);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  v16 = *(_OWORD *)(a2 + 520);
  v17 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 545) = *(_OWORD *)(a2 + 545);
  *(_OWORD *)(a1 + 520) = v16;
  *(_OWORD *)(a1 + 536) = v17;
  v18 = *(void **)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v10;
  v20 = v11;
  v21 = v13;
  v22 = v12;
  swift_retain();
  if (v18)
  {
    v23 = v8 + 172;
    v24 = v7 + 172;
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
    *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
    *(_BYTE *)(a1 + 612) = *(_BYTE *)(a2 + 612);
    *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
    *(_QWORD *)(a1 + 624) = v18;
    v25 = *(void **)(a2 + 632);
    *(_QWORD *)(a1 + 632) = v25;
    *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
    v26 = *(void **)(a2 + 648);
    *(_QWORD *)(a1 + 648) = v26;
    v27 = *(void **)(a2 + 656);
    *(_QWORD *)(a1 + 656) = v27;
    *(_WORD *)(a1 + 664) = *(_WORD *)(a2 + 664);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(_QWORD *)(a1 + 685) = *(_QWORD *)(a2 + 685);
    *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
    v28 = *(_OWORD *)(a2 + 720);
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 720) = v28;
    *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
    *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
    *(_OWORD *)(v23 + 336) = *(_OWORD *)(v24 + 336);
    *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
    *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
    *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
    *(_BYTE *)(a1 + 832) = *(_BYTE *)(a2 + 832);
    *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
    *(_BYTE *)(a1 + 840) = *(_BYTE *)(a2 + 840);
    *(_BYTE *)(a1 + 841) = *(_BYTE *)(a2 + 841);
    *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
    v29 = *(_OWORD *)(a2 + 856);
    v30 = *(_OWORD *)(a2 + 872);
    *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
    *(_OWORD *)(a1 + 856) = v29;
    *(_OWORD *)(a1 + 872) = v30;
    v31 = v18;
    v32 = v25;
    v33 = v26;
    v34 = v27;
    swift_retain();
  }
  else
  {
    memcpy((void *)(v8 + 336), (const void *)(v7 + 336), 0x141uLL);
  }
  *(_BYTE *)(a1 + 897) = *(_BYTE *)(a2 + 897);
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  id v45;
  id v46;
  id v47;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  v6 = *(void **)(a2 + 288);
  v7 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v6;
  v8 = v6;

  v9 = *(void **)(a2 + 296);
  v10 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v9;
  v11 = v9;

  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  v12 = *(void **)(a2 + 312);
  v13 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v12;
  v14 = v12;

  v15 = *(void **)(a2 + 320);
  v16 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v15;
  v17 = v15;

  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  v18 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 349) = *(_QWORD *)(a2 + 349);
  *(_OWORD *)(a1 + 336) = v18;
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a2 + 500);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
  *(_BYTE *)(a1 + 505) = *(_BYTE *)(a2 + 505);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_retain();
  swift_release();
  v19 = *(_OWORD *)(a2 + 520);
  v20 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 545) = *(_OWORD *)(a2 + 545);
  *(_OWORD *)(a1 + 520) = v19;
  *(_OWORD *)(a1 + 536) = v20;
  v21 = *(void **)(a1 + 624);
  v22 = *(_QWORD *)(a2 + 624);
  if (!v21)
  {
    if (v22)
    {
      *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
      *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
      *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
      *(_BYTE *)(a1 + 612) = *(_BYTE *)(a2 + 612);
      *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
      *(_DWORD *)(a1 + 620) = *(_DWORD *)(a2 + 620);
      v37 = *(void **)(a2 + 624);
      *(_QWORD *)(a1 + 624) = v37;
      v38 = *(void **)(a2 + 632);
      *(_QWORD *)(a1 + 632) = v38;
      *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
      v39 = *(void **)(a2 + 648);
      *(_QWORD *)(a1 + 648) = v39;
      v40 = *(void **)(a2 + 656);
      *(_QWORD *)(a1 + 656) = v40;
      *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
      *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
      v41 = *(_OWORD *)(a2 + 672);
      *(_QWORD *)(a1 + 685) = *(_QWORD *)(a2 + 685);
      *(_OWORD *)(a1 + 672) = v41;
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
      *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
      *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
      *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
      *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
      *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
      *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
      *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
      *(_DWORD *)(a1 + 736) = *(_DWORD *)(a2 + 736);
      *(_DWORD *)(a1 + 740) = *(_DWORD *)(a2 + 740);
      *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
      *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
      *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
      *(_DWORD *)(a1 + 756) = *(_DWORD *)(a2 + 756);
      *(_DWORD *)(a1 + 760) = *(_DWORD *)(a2 + 760);
      *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
      *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
      *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
      *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
      *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(_BYTE *)(a1 + 832) = *(_BYTE *)(a2 + 832);
      *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
      *(_BYTE *)(a1 + 840) = *(_BYTE *)(a2 + 840);
      *(_BYTE *)(a1 + 841) = *(_BYTE *)(a2 + 841);
      *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
      v42 = *(_OWORD *)(a2 + 856);
      v43 = *(_OWORD *)(a2 + 872);
      *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
      *(_OWORD *)(a1 + 856) = v42;
      *(_OWORD *)(a1 + 872) = v43;
      v44 = v37;
      v45 = v38;
      v46 = v39;
      v47 = v40;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy((void *)(a1 + 576), (const void *)(a2 + 576), 0x141uLL);
    goto LABEL_8;
  }
  if (!v22)
  {
    outlined destroy of ParticleEmitterComponent.ParticleEmitter((id *)(a1 + 576));
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(_BYTE *)(a1 + 612) = *(_BYTE *)(a2 + 612);
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  *(_DWORD *)(a1 + 620) = *(_DWORD *)(a2 + 620);
  v23 = *(void **)(a2 + 624);
  *(_QWORD *)(a1 + 624) = v23;
  v24 = v23;

  v25 = *(void **)(a2 + 632);
  v26 = *(void **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v25;
  v27 = v25;

  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  v28 = *(void **)(a2 + 648);
  v29 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = v28;
  v30 = v28;

  v31 = *(void **)(a2 + 656);
  v32 = *(void **)(a1 + 656);
  *(_QWORD *)(a1 + 656) = v31;
  v33 = v31;

  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
  v34 = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 685) = *(_QWORD *)(a2 + 685);
  *(_OWORD *)(a1 + 672) = v34;
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
  *(_DWORD *)(a1 + 736) = *(_DWORD *)(a2 + 736);
  *(_DWORD *)(a1 + 740) = *(_DWORD *)(a2 + 740);
  *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
  *(_DWORD *)(a1 + 756) = *(_DWORD *)(a2 + 756);
  *(_DWORD *)(a1 + 760) = *(_DWORD *)(a2 + 760);
  *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(_BYTE *)(a1 + 832) = *(_BYTE *)(a2 + 832);
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
  *(_BYTE *)(a1 + 840) = *(_BYTE *)(a2 + 840);
  *(_BYTE *)(a1 + 841) = *(_BYTE *)(a2 + 841);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  swift_retain();
  swift_release();
  v35 = *(_OWORD *)(a2 + 856);
  v36 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
  *(_OWORD *)(a1 + 856) = v35;
  *(_OWORD *)(a1 + 872) = v36;
LABEL_8:
  *(_BYTE *)(a1 + 897) = *(_BYTE *)(a2 + 897);
  return a1;
}

id *outlined destroy of ParticleEmitterComponent.ParticleEmitter(id *a1)
{
  destroy for ParticleEmitterComponent.ParticleEmitter(a1);
  return a1;
}

void *__swift_memcpy898_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x382uLL);
}

uint64_t assignWithTake for ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v6 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);

  v7 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  v8 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);

  v9 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);

  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 349) = *(_QWORD *)(a2 + 349);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v10 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v10;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_OWORD *)(a1 + 412) = *(_OWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a2 + 500);
  *(_WORD *)(a1 + 504) = *(_WORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_release();
  v11 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v11;
  *(_OWORD *)(a1 + 545) = *(_OWORD *)(a2 + 545);
  v12 = *(void **)(a1 + 624);
  if (!v12)
    goto LABEL_5;
  v13 = *(_QWORD *)(a2 + 624);
  if (!v13)
  {
    outlined destroy of ParticleEmitterComponent.ParticleEmitter((id *)(a1 + 576));
LABEL_5:
    memcpy((void *)(a1 + 576), (const void *)(a2 + 576), 0x141uLL);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(_BYTE *)(a1 + 612) = *(_BYTE *)(a2 + 612);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = v13;

  v14 = *(void **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);

  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  v15 = *(void **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);

  v16 = *(void **)(a1 + 656);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);

  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_BYTE *)(a1 + 665) = *(_BYTE *)(a2 + 665);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 685) = *(_QWORD *)(a2 + 685);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  v17 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v17;
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 748);
  *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(_BYTE *)(a1 + 832) = *(_BYTE *)(a2 + 832);
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
  *(_WORD *)(a1 + 840) = *(_WORD *)(a2 + 840);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  swift_release();
  v18 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 872) = v18;
  *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
LABEL_6:
  *(_BYTE *)(a1 + 897) = *(_BYTE *)(a2 + 897);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 898))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 224);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 888) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_WORD *)(result + 896) = 0;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 898) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 224) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 898) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent()
{
  return &type metadata for ParticleEmitterComponent;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.EmitterShape()
{
  return &type metadata for ParticleEmitterComponent.EmitterShape;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.BirthLocation()
{
  return &type metadata for ParticleEmitterComponent.BirthLocation;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.BirthDirection()
{
  return &type metadata for ParticleEmitterComponent.BirthDirection;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.SpawnOccasion()
{
  return &type metadata for ParticleEmitterComponent.SpawnOccasion;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.SimulationSpace()
{
  return &type metadata for ParticleEmitterComponent.SimulationSpace;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.SimulationState()
{
  return &type metadata for ParticleEmitterComponent.SimulationState;
}

uint64_t destroy for ParticleEmitterComponent.ParticleEmitter(id *a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id v10;
  id v11;
  id v12;
  id v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(void **)(a2 + 48);
  v4 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(void **)(a2 + 72);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 109) = *(_QWORD *)(a2 + 109);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_BYTE *)(a1 + 265) = *(_BYTE *)(a2 + 265);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v8 = *(_OWORD *)(a2 + 280);
  v9 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 305) = *(_OWORD *)(a2 + 305);
  *(_OWORD *)(a1 + 280) = v8;
  *(_OWORD *)(a1 + 296) = v9;
  v10 = v3;
  v11 = v4;
  v12 = v6;
  v13 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v4 = *(void **)(a2 + 48);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 56);
  v8 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  v9 = v7;

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(void **)(a2 + 72);
  v11 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 80);
  v14 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  v15 = v13;

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v16 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 109) = *(_QWORD *)(a2 + 109);
  *(_OWORD *)(a1 + 96) = v16;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_BYTE *)(a1 + 265) = *(_BYTE *)(a2 + 265);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_retain();
  swift_release();
  v17 = *(_OWORD *)(a2 + 280);
  v18 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 305) = *(_OWORD *)(a2 + 305);
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 296) = v18;
  return a1;
}

void *__swift_memcpy321_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t assignWithTake for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 109) = *(_QWORD *)(a2 + 109);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_release();
  v7 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v7;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)(a2 + 305);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 321))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_BYTE *)(result + 320) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 321) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 321) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 13) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 21) = v3;
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    *(_BYTE *)(result + 20) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ImageSequence(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ImageSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
}

uint64_t getEnumTagSinglePayload for CollisionPlane_v1(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CollisionPlane_v1(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CollisionPlane_v1()
{
  return &type metadata for CollisionPlane_v1;
}

ValueMetadata *type metadata accessor for CollisionPlaneExtent_v1()
{
  return &type metadata for CollisionPlaneExtent_v1;
}

void *type metadata accessor for CollisionPlaneExtent_v1.CodingKeys()
{
  return &unk_24DFC9EB0;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD5)
    goto LABEL_17;
  if (a2 + 43 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 43) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 43;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 43;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 43;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2C;
  v8 = v6 - 44;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 43 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 43) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD4)
    return ((uint64_t (*)(void))((char *)&loc_21BCF127C + 4 * byte_21BE71123[v4]))();
  *a1 = a2 + 43;
  return ((uint64_t (*)(void))((char *)sub_21BCF12B0 + 4 * byte_21BE7111E[v4]))();
}

uint64_t sub_21BCF12B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF12B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCF12C0);
  return result;
}

uint64_t sub_21BCF12CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCF12D4);
  *(_BYTE *)result = a2 + 43;
  return result;
}

uint64_t sub_21BCF12D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF12E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDD)
    goto LABEL_17;
  if (a2 + 35 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 35) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 35;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 35;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 35;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x24;
  v8 = v6 - 36;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 35 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 35) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDC)
    return ((uint64_t (*)(void))((char *)&loc_21BCF13D8 + 4 * byte_21BE7112D[v4]))();
  *a1 = a2 + 35;
  return ((uint64_t (*)(void))((char *)sub_21BCF140C + 4 * byte_21BE71128[v4]))();
}

uint64_t sub_21BCF140C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCF141CLL);
  return result;
}

uint64_t sub_21BCF1428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCF1430);
  *(_BYTE *)result = a2 + 35;
  return result;
}

uint64_t sub_21BCF1434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF143C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.CodingKeys()
{
  return &unk_24DFC9FD0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  return &unk_24DFCA060;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  return &unk_24DFCA0F0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys()
{
  return &unk_24DFCA110;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys()
{
  return &unk_24DFCA130;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys()
{
  return &unk_24DFCA150;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  return &unk_24DFCA1E0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys()
{
  return &unk_24DFCA200;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys()
{
  return &unk_24DFCA220;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys()
{
  return &unk_24DFCA240;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  return &unk_24DFCA2D0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys()
{
  return &unk_24DFCA2F0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys()
{
  return &unk_24DFCA310;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys()
{
  return &unk_24DFCA330;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys()
{
  return &unk_24DFCA350;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys()
{
  return &unk_24DFCA370;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys()
{
  return &unk_24DFCA390;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys()
{
  return &unk_24DFCA3B0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  return &unk_24DFCA440;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys()
{
  return &unk_24DFCA460;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys()
{
  return &unk_24DFCA480;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys()
{
  return &unk_24DFCA4A0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys()
{
  return &unk_24DFCA4C0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys()
{
  return &unk_24DFCA4E0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys()
{
  return &unk_24DFCA500;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys()
{
  return &unk_24DFCA520;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  return &unk_24DFCA5B0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys()
{
  return &unk_24DFCA5D0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys()
{
  return &unk_24DFCA5F0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  return &unk_24DFCA680;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.CodingKeys()
{
  return &unk_24DFCA710;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.PlayCodingKeys()
{
  return &unk_24DFCA730;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.PauseCodingKeys()
{
  return &unk_24DFCA750;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.StopCodingKeys()
{
  return &unk_24DFCA770;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.SimulationSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BCF16B4 + 4 * byte_21BE71137[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BCF16E8 + 4 * byte_21BE71132[v4]))();
}

uint64_t sub_21BCF16E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF16F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCF16F8);
  return result;
}

uint64_t sub_21BCF1704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCF170CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BCF1710(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1718(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  return &unk_24DFCA800;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationSpace.LocalCodingKeys()
{
  return &unk_24DFCA820;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys()
{
  return &unk_24DFCA840;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.SpawnOccasion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BCF17A0 + 4 * byte_21BE71141[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BCF17D4 + 4 * byte_21BE7113C[v4]))();
}

uint64_t sub_21BCF17D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF17DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCF17E4);
  return result;
}

uint64_t sub_21BCF17F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCF17F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BCF17FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  return &unk_24DFCA8D0;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys()
{
  return &unk_24DFCA8F0;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys()
{
  return &unk_24DFCA910;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys()
{
  return &unk_24DFCA930;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys()
{
  return &unk_24DFCA950;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  return &unk_24DFCA9E0;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.WorldCodingKeys()
{
  return &unk_24DFCAA00;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.LocalCodingKeys()
{
  return &unk_24DFCAA20;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.NormalCodingKeys()
{
  return &unk_24DFCAA40;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.BirthDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BCF18EC + 4 * byte_21BE7114B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BCF1920 + 4 * byte_21BE71146[v4]))();
}

uint64_t sub_21BCF1920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCF1930);
  return result;
}

uint64_t sub_21BCF193C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCF1944);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BCF1948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  return &unk_24DFCAAD0;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys()
{
  return &unk_24DFCAAF0;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.VolumeCodingKeys()
{
  return &unk_24DFCAB10;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BCF19CC + 4 * byte_21BE71150[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BCF19EC + 4 * byte_21BE71155[v4]))();
}

_BYTE *sub_21BCF19CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BCF19EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCF19F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCF19FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCF1A04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCF1A0C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  return &unk_24DFCABA0;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.EmitterShape(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21BCF1A74 + 4 * byte_21BE7115F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21BCF1AA8 + 4 * byte_21BE7115A[v4]))();
}

uint64_t sub_21BCF1AA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1AB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCF1AB8);
  return result;
}

uint64_t sub_21BCF1AC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCF1ACCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21BCF1AD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCF1AD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  return &unk_24DFCAC30;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.PointCodingKeys()
{
  return &unk_24DFCAC50;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.PlaneCodingKeys()
{
  return &unk_24DFCAC70;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.BoxCodingKeys()
{
  return &unk_24DFCAC90;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.SphereCodingKeys()
{
  return &unk_24DFCACB0;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.ConeCodingKeys()
{
  return &unk_24DFCACD0;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.CylinderCodingKeys()
{
  return &unk_24DFCACF0;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.TorusCodingKeys()
{
  return &unk_24DFCAD10;
}

uint64_t specialized CollisionPlaneExtent_v1.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ParticleEmitterComponent.EmitterShape.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E696F70 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E616C70 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7892834 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657265687073 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701736291 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7265646E696C7963 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7375726F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x2C)
    return 44;
  else
    return v0;
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61467261656E696CLL && a2 == 0xED000074754F6564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61467261656E696CLL && a2 == 0xEC0000006E496564
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE8F3D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6461466B63697571 && a2 == 0xEE0074754F6E4965
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6564614665736165 && a2 == 0xEA00000000006E49
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6564614665736165 && a2 == 0xEB0000000074754FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746E6174736E6F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72616F626C6C6962 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE8F3B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701147238 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1936291937 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746169726176 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F43776F72 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F436E6D756C6F63 && a2 == 0xEB00000000746E75
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x466C616974696E69 && a2 == 0xEC000000656D6172
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE8F3F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746152656D617266 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000021BE8F410
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xED000065646F4D6ELL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65636E4F79616C70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E69706F6F6CLL && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657665526F747561 && a2 == 0xEB00000000657372)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6168706C61 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65757161706FLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6576697469646461 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6973616572636E69 && a2 == 0xEF6874706544676ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6973616572636564 && a2 == 0xEF6874706544676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973616572636E69 && a2 == 0xEC0000004449676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6973616572636564 && a2 == 0xEC0000004449676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6973616572636E69 && a2 == 0xED0000656741676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6973616572636564 && a2 == 0xED0000656741676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x646574726F736E75 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized ParticleEmitterComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000021BE8F430
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021BE8F450
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61727544656C6469 && a2 == 0xEC0000006E6F6974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE8F470
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x754470756D726177 && a2 == 0xEE006E6F69746172
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F4C646C756F6873 && a2 == 0xEA0000000000706FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5372657474696D65 && a2 == 0xEC00000065706168
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x636F4C6874726962 && a2 == 0xED00006E6F697461
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7269446874726962 && a2 == 0xEE006E6F69746365
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE8F490
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6465657073 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7261566465657073 && a2 == 0xEE006E6F69746169
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE8F4B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6D416C6169646172 && a2 == 0xEC000000746E756FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE8F4D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x63634F6E77617073 && a2 == 0xED00006E6F697361
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000021BE8F4F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE8F510
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000021BE8F530
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021BE8F550
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x6974616C756D6973 && a2 == 0xEF65746174536E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6974616C756D6973 && a2 == 0xEF65636170536E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021BE8F570
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000021BE8F590
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x4374726174736572 && a2 == 0xEC000000746E756FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE8F5B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x697474696D457369 && a2 == 0xEA0000000000676ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE8F5D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0x756F437473727562 && a2 == 0xEA0000000000746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000021BE8F5F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x6974616C756D6973 && a2 == 0xEE00657461526E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000021BE8F610
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000021BE8F630
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x74696D456E69616DLL && a2 == 0xEB00000000726574
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x4564656E77617073 && a2 == 0xEE0072657474696DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE8F650)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 35;
    else
      return 36;
  }
}

uint64_t specialized ParticleEmitterComponent.BirthLocation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65636166727573 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D756C6F76 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7365636974726576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ParticleEmitterComponent.SpawnOccasion.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x68747269426E6FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616470556E6FLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68746165446E6FLL && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64696C6C6F436E6FLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized ParticleEmitterComponent.BirthDirection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646C726F77 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ParticleEmitterComponent.SimulationSpace.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61626F6C67 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ParticleEmitterComponent.SimulationState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 2036427888 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6573756170 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1886352499 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    outlined init with take of Any(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : AnimationResource].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

id static __RKEntityCustomAction.RKEntityCustomActionNotification.name.getter()
{
  if (one-time initialization token for name != -1)
    swift_once();
  return (id)static __RKEntityCustomAction.RKEntityCustomActionNotification.name;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.sceneKey.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.identifierKey.getter()
{
  return 0xD000000000000022;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.entityKey.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.customArgumentsKey.getter()
{
  return 0xD000000000000027;
}

uint64_t key path getter for __RKEntityCustomAction.handler : __RKEntityCustomAction@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 120);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for __RKEntityCustomAction.handler : __RKEntityCustomAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for closure #1 in Entity.__findAssetDependencies(_:);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 112);
  *(_QWORD *)(v7 + 112) = v6;
  *(_QWORD *)(v7 + 120) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t __RKEntityCustomAction.handler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __RKEntityCustomAction.handler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*__RKEntityCustomAction.handler.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityCustomAction.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityCustomAction.customArguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for __RKEntityCustomAction.customArgumentsBlock : __RKEntityCustomAction@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *);

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(_QWORD *)(v3 + 160);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Entity?, @guaranteed [String : String]?) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for __RKEntityCustomAction.customArgumentsBlock : __RKEntityCustomAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity?, @in_guaranteed [String : String]?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 152);
  *(_QWORD *)(v7 + 152) = v6;
  *(_QWORD *)(v7 + 160) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t __RKEntityCustomAction.customArgumentsBlock.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 152);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __RKEntityCustomAction.customArgumentsBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*__RKEntityCustomAction.customArgumentsBlock.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityCustomAction.__allocating_init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = (_QWORD *)swift_allocObject();
  v15[19] = 0;
  v15[14] = 0;
  v15[20] = 0;
  v15[15] = 0;
  v15[16] = a2;
  v15[17] = a3;
  swift_beginAccess();
  v16 = v15[14];
  v15[14] = a4;
  v15[15] = a5;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
  if (!a6)
    a6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v15[18] = a6;
  swift_beginAccess();
  v17 = v15[19];
  v15[19] = a7;
  v15[20] = a8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v17);
  swift_release();
  v18 = __RKEntityAction.init(targetEntity:)(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a4);
  return v18;
}

uint64_t __RKEntityCustomAction.init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = specialized __RKEntityCustomAction.init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(a1, a2, a3, a4, a5, a6, a7, a8);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a4);
  return v10;
}

uint64_t __RKEntityCustomAction.perform(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  Class isa;
  _OWORD v42[2];
  __int128 v43;
  uint64_t v44;
  unint64_t v45;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v43 = StaticString.description.getter();
  *((_QWORD *)&v43 + 1) = v4;
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6 = v43;
  v7 = (_QWORD *)(v1 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 104) == 1 && *v7 == 1 && (swift_beginAccess(), *(_BYTE *)(v2 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    v20 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v43);
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v8, &v43);
  v9 = *(_QWORD *)(v2 + 96);
  v10 = *(_BYTE *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = 1;
  *(_BYTE *)(v2 + 104) = 1;
  *(_QWORD *)&v43 = v9;
  BYTE8(v43) = v10;
  __RKEntityAction.state.didset((uint64_t)&v43);
  swift_beginAccess();
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 152);
  if (v11)
  {
    swift_beginAccess();
    v12 = *(_QWORD *)(v2 + 144);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v11);
    v13 = swift_retain();
    v11(v13, v12);
    swift_release();
    v14 = (uint64_t)v11;
LABEL_7:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
LABEL_8:
    v42[0] = v6;
    v15 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v15, v42);
    v16 = *(_QWORD *)(v2 + 96);
    v17 = *(_BYTE *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = 2;
    v18 = 1;
    *(_BYTE *)(v2 + 104) = 1;
    *(_QWORD *)&v42[0] = v16;
    BYTE8(v42[0]) = v17;
    __RKEntityAction.state.didset((uint64_t)v42);
    v42[0] = v6;
    v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, v42);
    swift_bridgeObjectRelease();
    return v18;
  }
  swift_beginAccess();
  v22 = *(void (**)(uint64_t))(v2 + 112);
  if (!v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 32) = 0xD000000000000022;
    *(_QWORD *)(inited + 40) = 0x800000021BE8F690;
    v29 = *(_QWORD *)(v2 + 128);
    v28 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v29;
    *(_QWORD *)(inited + 56) = v28;
    swift_bridgeObjectRetain();
    v30 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v44 = type metadata accessor for Scene();
    *(_QWORD *)&v43 = v3;
    outlined init with take of Any(&v43, v42);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, 0xD00000000000001DLL, 0x800000021BE8F670, isUniquelyReferenced_nonNull_native);
    v45 = v30;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v32 = *(_QWORD *)(v2 + 16);
    if (v32)
    {
      v44 = type metadata accessor for Entity();
      *(_QWORD *)&v43 = v32;
      outlined init with take of Any(&v43, v42);
      swift_retain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, 0xD00000000000001ELL, 0x800000021BE8F6C0, v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001ELL, 0x800000021BE8F6C0, &v43);
      outlined destroy of Any?((uint64_t)&v43);
      v30 = v45;
    }
    v36 = *(_QWORD *)(v2 + 144);
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    *(_QWORD *)&v43 = v36;
    outlined init with take of Any(&v43, v42);
    swift_bridgeObjectRetain();
    v37 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, 0xD000000000000027, 0x800000021BE8F6E0, v37);
    v38 = v30;
    swift_bridgeObjectRelease();
    v39 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    if (one-time initialization token for name != -1)
      swift_once();
    v40 = static __RKEntityCustomAction.RKEntityCustomActionNotification.name;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v38);
    swift_bridgeObjectRelease();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v39, sel_postNotificationName_object_userInfo_, v40, 0, isa);

    goto LABEL_8;
  }
  swift_beginAccess();
  v23 = *(_QWORD *)(v2 + 16);
  if (!v23)
  {
    swift_retain();
    v22(0);
    v14 = (uint64_t)v22;
    goto LABEL_7;
  }
  v24 = *(_QWORD *)(v23 + 16);
  swift_retain();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v25 = swift_dynamicCastClassUnconditional();
    goto LABEL_15;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v34 = specialized static Entity.entityInfoType(_:)();
    if (v34)
    {
      v26 = (*(uint64_t (**)(void))(v34 + 232))();
      v35 = *(_QWORD *)(v26 + 16);
      swift_retain();
      MEMORY[0x22076D160](v35, 0);
      *(_QWORD *)(v26 + 16) = v24;
      MEMORY[0x22076D160](v24, v26);
      swift_release();
      goto LABEL_22;
    }
    v25 = makeEntity(for:)(v24);
LABEL_15:
    v26 = v25;
LABEL_22:
    v22(v26);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v22);
    swift_release();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityCustomAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_beginAccess();
  v2 = v1[2];
  v3 = v1[16];
  v4 = v1[17];
  swift_beginAccess();
  v5 = v1[14];
  v6 = v1[15];
  v14 = v1[18];
  swift_beginAccess();
  v7 = v1[19];
  v8 = v1[20];
  v15 = type metadata accessor for __RKEntityCustomAction();
  v9 = (_QWORD *)swift_allocObject();
  v9[14] = 0;
  v9[20] = 0;
  v9[19] = 0;
  v9[15] = 0;
  v9[16] = v3;
  v9[17] = v4;
  swift_beginAccess();
  v13 = v9[14];
  v9[14] = v5;
  v9[15] = v6;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v5);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v5);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v7);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v13);
  v9[18] = v14;
  swift_beginAccess();
  v10 = v9[19];
  v9[19] = v7;
  v9[20] = v8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v10);
  swift_release();
  v11 = __RKEntityAction.init(targetEntity:)(v2);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
  a1[3] = v15;
  *a1 = v11;
  return result;
}

uint64_t __RKEntityCustomAction.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[4];

  swift_beginAccess();
  v5 = v2[2];
  if (v5 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v5 + 16))
  {
    v7 = v2[16];
    v8 = v2[17];
    swift_beginAccess();
    v9 = v2[14];
    v10 = v2[15];
    v17 = v2[18];
    swift_beginAccess();
    v11 = v2[19];
    v12 = v2[20];
    type metadata accessor for __RKEntityCustomAction();
    v13 = (_QWORD *)swift_allocObject();
    v13[14] = 0;
    v13[20] = 0;
    v13[19] = 0;
    v13[15] = 0;
    v13[16] = v7;
    v13[17] = v8;
    swift_beginAccess();
    v16 = v13[14];
    v13[14] = v9;
    v13[15] = v10;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v9);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
    swift_retain();
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
    v13[18] = v17;
    swift_beginAccess();
    v14 = v13[19];
    v13[19] = v11;
    v13[20] = v12;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
    swift_release();
    v6 = __RKEntityAction.init(targetEntity:)(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v9);
  }
  else
  {
    __RKEntityCustomAction.copy(with:)(v19);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v18;
    else
      return 0;
  }
  return v6;
}

void __RKEntityCustomAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityCustomAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityCustomAction.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 152));
}

uint64_t __RKEntityCustomAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 152));
  return v0;
}

uint64_t __RKEntityCustomAction.__deallocating_deinit()
{
  __RKEntityCustomAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized __RKEntityCustomAction.init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v14;
  uint64_t v15;

  v8[19] = 0;
  v8[20] = 0;
  v8[15] = 0;
  v8[16] = a2;
  v8[17] = a3;
  v8[14] = 0;
  swift_beginAccess();
  v14 = v8[14];
  v8[14] = a4;
  v8[15] = a5;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
  if (!a6)
    a6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v8[18] = a6;
  swift_beginAccess();
  v15 = v8[19];
  v8[19] = a7;
  v8[20] = a8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
  swift_release();
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t type metadata accessor for __RKEntityCustomAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityCustomAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityCustomAction.handler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.handler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.handler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.customArgumentsBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.customArgumentsBlock.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.customArgumentsBlock.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.__allocating_init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 600))();
}

ValueMetadata *type metadata accessor for __RKEntityCustomAction.RKEntityCustomActionNotification()
{
  return &type metadata for __RKEntityCustomAction.RKEntityCustomActionNotification;
}

uint64_t sub_21BCF80B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t __RKEmphasisFloatAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisFloatAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisFloatAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisFloatAnimation.createFloatAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 375, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulFloatAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 404, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildFloatAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 318, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicFloatAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

uint64_t Entity.addRetargetingAnimationRig(source:)()
{
  uint64_t ServiceLocator;
  uint64_t v2;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x22076FD58](ServiceLocator))
  {
    if (RERigAssetCreateBipedToBipedAutoRetargetAsset())
    {
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      return RERigComponentSetRig();
    }
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    strcpy((char *)v2, "Unknown error");
    *(_WORD *)(v2 + 14) = -4864;
  }
  else
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v2 = 0xD000000000000016;
    *(_QWORD *)(v2 + 8) = 0x800000021BE8F800;
  }
  *(_BYTE *)(v2 + 16) = 1;
  return swift_willThrow();
}

Swift::Void __swiftcall Entity.removeAnimationRig()()
{
  RERigComponentGetComponentType();
  if (REEntityGetComponentByClass())
    RERigComponentSetRig();
}

uint64_t Entity.addAnimationRig(url:)()
{
  uint64_t ServiceLocator;
  NSURL *v1;
  void *v2;
  void *v3;
  uint64_t AssetHandleForURL;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x22076FD58](ServiceLocator))
  {
    URL._bridgeToObjectiveC()(v1);
    v3 = v2;
    AssetHandleForURL = REAssetManagerCreateAssetHandleForURL();

    if (AssetHandleForURL)
    {
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      return RERigComponentSetRig();
    }
    _StringGuts.grow(_:)(51);
    v8._countAndFlagsBits = 0xD000000000000031;
    v8._object = (void *)0x800000021BE8F820;
    String.append(_:)(v8);
    v9 = URL.path(percentEncoded:)(1);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v7 = 0xE000000000000000;
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v6 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000016;
    v7 = 0x800000021BE8F800;
  }
  *(_QWORD *)(v6 + 8) = v7;
  *(_BYTE *)(v6 + 16) = 1;
  return swift_willThrow();
}

void Scene.timebase.getter()
{
  const __CFAllocator *v0;
  OpaqueCMClock *v1;
  CMTimebaseRef v2[2];

  v2[1] = *(CMTimebaseRef *)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    if (RETimebaseServiceCreateEngineSourceTimebase())
      goto LABEL_6;
  }
  else
  {
    swift_retain();
  }
  v2[0] = 0;
  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v1 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v0, v1, v2);

  if (v2[0])
  {
LABEL_6:
    swift_release();
    return;
  }
  __break(1u);
}

uint64_t specialized getEventID<A>(_:)()
{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationHasTimelineEventStart, &demangling cache variable for type metadata for REAnimationHasTimelineEventStart.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationHasTimelineEventUpdate, &demangling cache variable for type metadata for REAnimationHasTimelineEventUpdate.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationHasTimelineEventEnd, &demangling cache variable for type metadata for REAnimationHasTimelineEventEnd.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationTimelineEventSkipped, &demangling cache variable for type metadata for REAnimationTimelineEventSkipped.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationTimelineEventPause, &demangling cache variable for type metadata for REAnimationTimelineEventPause.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationTimelineEventResume, &demangling cache variable for type metadata for REAnimationTimelineEventResume.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationTimelineEventTerminated, &demangling cache variable for type metadata for REAnimationTimelineEventTerminated.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REAnimationTimelineEventCreated, &demangling cache variable for type metadata for REAnimationTimelineEventCreated.Type);
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  ValueMetadata *v4;
  uint64_t *v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  ValueMetadata *v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t result;
  void *v19;

  if (one-time initialization token for registeredEventsToEventBusIds != -1)
    swift_once();
  swift_beginAccess();
  v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  v1 = *((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v1)
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineUpdateEvent);
    if ((v3 & 1) != 0)
      goto LABEL_36;
  }
  swift_endAccess();
  if (swift_conformsToProtocol2())
    v4 = &type metadata for EngineUpdateEvent;
  else
    v4 = 0;
  if (v4)
  {
    v5 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v6 = &type metadata for EngineUpdateEvent;
  else
    v6 = 0;
  if (v6)
  {
    v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v7 = &type metadata for EngineUpdateEvent;
  else
    v7 = 0;
  if (v7)
  {
    v5 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v8 = &type metadata for EngineUpdateEvent;
  else
    v8 = 0;
  if (v8)
  {
    v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v9 = &type metadata for EngineUpdateEvent;
  else
    v9 = 0;
  if (v9)
  {
    v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
LABEL_30:
    v10 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(v5);
    if (!v1)
      goto LABEL_34;
    goto LABEL_31;
  }
  v10 = &type metadata for EngineUpdateEvent;
  if (!v1)
    goto LABEL_34;
LABEL_31:
  v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v12 & 1) != 0)
    return *(_QWORD *)(v0[7] + 8 * v11);
LABEL_34:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EngineUpdateEvent.Type);
  String.init<A>(describing:)();
  v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x22076D1CC](v14 + 32);
  swift_release();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, (uint64_t)&type metadata for EngineUpdateEvent, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineUpdateEvent);
    if ((v17 & 1) != 0)
    {
LABEL_36:
      v13 = *(_QWORD *)(v0[7] + 8 * v2);
      swift_endAccess();
      return v13;
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  return specialized getEventID<A>(_:)((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, &demangling cache variable for type metadata for AccessibilityCustomActionEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)(&demangling cache variable for type metadata for AccessibilityDecrementEvent, &demangling cache variable for type metadata for AccessibilityDecrementEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, &demangling cache variable for type metadata for AccessibilityIncrementEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)(&demangling cache variable for type metadata for AccessibilityActivateEvent, &demangling cache variable for type metadata for AccessibilityActivateEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, &demangling cache variable for type metadata for AccessibilityRotorNavigationEvent.Protocol);
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  ValueMetadata *v4;
  uint64_t *v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  ValueMetadata *v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t result;
  void *v19;

  if (one-time initialization token for registeredEventsToEventBusIds != -1)
    swift_once();
  swift_beginAccess();
  v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  v1 = *((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v1)
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineRenderEvent);
    if ((v3 & 1) != 0)
      goto LABEL_36;
  }
  swift_endAccess();
  if (swift_conformsToProtocol2())
    v4 = &type metadata for EngineRenderEvent;
  else
    v4 = 0;
  if (v4)
  {
    v5 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v6 = &type metadata for EngineRenderEvent;
  else
    v6 = 0;
  if (v6)
  {
    v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v7 = &type metadata for EngineRenderEvent;
  else
    v7 = 0;
  if (v7)
  {
    v5 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v8 = &type metadata for EngineRenderEvent;
  else
    v8 = 0;
  if (v8)
  {
    v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v9 = &type metadata for EngineRenderEvent;
  else
    v9 = 0;
  if (v9)
  {
    v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
LABEL_30:
    v10 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(v5);
    if (!v1)
      goto LABEL_34;
    goto LABEL_31;
  }
  v10 = &type metadata for EngineRenderEvent;
  if (!v1)
    goto LABEL_34;
LABEL_31:
  v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v12 & 1) != 0)
    return *(_QWORD *)(v0[7] + 8 * v11);
LABEL_34:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EngineRenderEvent.Type);
  String.init<A>(describing:)();
  v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x22076D1CC](v14 + 32);
  swift_release();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, (uint64_t)&type metadata for EngineRenderEvent, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineRenderEvent);
    if ((v17 & 1) != 0)
    {
LABEL_36:
      v13 = *(_QWORD *)(v0[7] + 8 * v2);
      swift_endAccess();
      return v13;
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized getEventID<A>(_:)(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  uint64_t result;
  void *v23;

  v3 = a1(0);
  if (one-time initialization token for registeredEventsToEventBusIds != -1)
    swift_once();
  swift_beginAccess();
  v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  v5 = *((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v5)
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v7 & 1) != 0)
      goto LABEL_36;
  }
  swift_endAccess();
  if (swift_conformsToProtocol2())
    v8 = v3;
  else
    v8 = 0;
  if (v8)
  {
    v9 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
LABEL_30:
    v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
    goto LABEL_31;
  }
  if (swift_conformsToProtocol2())
    v10 = v3;
  else
    v10 = 0;
  if (v10)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v11 = v3;
  else
    v11 = 0;
  if (v11)
  {
    v9 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v12 = v3;
  else
    v12 = 0;
  if (v12)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v13 = v3;
  else
    v13 = 0;
  v14 = v3;
  if (v13)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
    goto LABEL_30;
  }
LABEL_31:
  if (v5)
  {
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if ((v16 & 1) != 0)
      return *(_QWORD *)(v4[7] + 8 * v15);
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  String.init<A>(describing:)();
  v18 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x22076D1CC](v18 + 32);
  swift_release();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, v3, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v23;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v21 & 1) != 0)
    {
LABEL_36:
      v17 = *(_QWORD *)(v4[7] + 8 * v6);
      swift_endAccess();
      return v17;
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized getEventID<A>(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  uint64_t result;
  void *v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  if (one-time initialization token for registeredEventsToEventBusIds != -1)
    swift_once();
  swift_beginAccess();
  v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v6 & 1) != 0)
    {
LABEL_10:
      v9 = *(_QWORD *)(v4[7] + 8 * v5);
      swift_endAccess();
      return v9;
    }
    swift_endAccess();
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v8 & 1) != 0)
      return *(_QWORD *)(v4[7] + 8 * v7);
  }
  else
  {
    swift_endAccess();
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  String.init<A>(describing:)();
  v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v11 = MEMORY[0x22076D1CC](v10 + 32);
  swift_release();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v3, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v13 & 1) != 0)
      goto LABEL_10;
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

_QWORD *ConstantForceEffect.update(parameters:)(_QWORD *result)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  int32x2_t v4;
  float32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v2 = v1[1];
  v3 = vmulq_f32(v2, v2);
  v4 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
  v5 = 0uLL;
  if (*(float *)v4.i32 != 0.0)
  {
    *(float *)v4.i32 = sqrtf(*(float *)v4.i32);
    *(float32x2_t *)v5.f32 = vdiv_f32(*(float32x2_t *)v2.f32, (float32x2_t)vdup_lane_s32(v4, 0));
    v5.f32[2] = v2.f32[2] / *(float *)v4.i32;
    v5.i32[3] = 0;
  }
  v6 = result[1];
  if (v6 < 0)
  {
    __break(1u);
  }
  else if (v6)
  {
    v7 = 0;
    v8 = result[25];
    v9 = result[26];
    *(float32x2_t *)&v10 = vmul_n_f32(*(float32x2_t *)v5.f32, v1->f32[0]);
    *((_QWORD *)&v10 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v1->f32[0], v5, 2));
    do
    {
      if (v7 < v9)
        *(_OWORD *)(v8 + 16 * v7) = v10;
      ++v7;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  void *v15;
  _QWORD aBlock[6];
  uint64_t v20;

  aBlock[0] = a4;
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v12 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, a6, a7, v12, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v20;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  swift_retain();
  static EntityAction.eventBus(_:)(a1);
  specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REForceEffectEventFilter();
  swift_release();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a2;
  v14[7] = a3;
  aBlock[4] = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
  aBlock[3] = &block_descriptor_6_4;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  REEventBusSubscribeWithMatch();
  _Block_release(v15);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
}

uint64_t ConstantRadialForceEffect.update(parameters:)(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  float32x4_t v16;

  if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    v7 = *(_QWORD *)(result + 40);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v7)
    {
      v8 = 0;
      v9 = *v6;
      v10 = *(_QWORD *)(result + 200);
      v11 = *(_QWORD *)(result + 208);
      v12 = (float *)(*(_QWORD *)(result + 32) + 8);
      do
      {
        *(float32x2_t *)a6.f32 = vsub_f32(0, *(float32x2_t *)(v12 - 2));
        v13 = a6;
        v13.f32[2] = 0.0 - *v12;
        v14 = vmulq_f32(v13, v13);
        v15 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u64[0];
        v16 = 0uLL;
        if (*(float *)v15.i32 == 0.0)
        {
          if (v8 < v11)
            goto LABEL_10;
        }
        else
        {
          *(float *)v15.i32 = sqrtf(*(float *)v15.i32);
          *(float32x2_t *)v16.f32 = vdiv_f32(*(float32x2_t *)a6.f32, (float32x2_t)vdup_lane_s32(v15, 0));
          v16.f32[2] = (float)(0.0 - *v12) / *(float *)v15.i32;
          v16.i32[3] = 0;
          if (v8 < v11)
          {
LABEL_10:
            *(float32x2_t *)a6.f32 = vmul_n_f32(*(float32x2_t *)v16.f32, v9);
            a6.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v9, v16, 2));
            *(float32x4_t *)(v10 + 16 * v8) = a6;
          }
        }
        ++v8;
        v12 += 4;
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t RadialForceEffect.update(parameters:)(uint64_t result, double a2, double a3, double a4, double a5, __n128 a6)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x2_t v16;
  float32x4_t v17;
  float v18;
  __int128 v19;

  if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v7)
    {
      v8 = 0;
      v9 = *v6;
      v10 = v6[1];
      v11 = *(_QWORD *)(result + 32);
      v12 = *(_QWORD *)(result + 200);
      v13 = *(_QWORD *)(result + 208);
      if (v10 < 0.0)
        v10 = 0.0;
      do
      {
        v14 = *(float32x4_t *)(v11 + 16 * v8);
        v15 = vmulq_f32(v14, v14);
        v16 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).u64[0];
        *(float *)v16.i32 = sqrtf(*(float *)v16.i32);
        if (*(float *)v16.i32 == 0.0)
        {
          v17.i64[0] = 0;
          v17.i32[2] = 0;
          v17.i32[3] = a6.n128_i32[3];
          if (v8 < v13)
            goto LABEL_12;
        }
        else
        {
          *(float32x2_t *)v14.f32 = vdiv_f32(vsub_f32(0, *(float32x2_t *)v14.f32), (float32x2_t)vdup_lane_s32(v16, 0));
          v17.f32[2] = (float)(0.0 - v14.f32[2]) / *(float *)v16.i32;
          v17.i32[3] = 0;
          if (v8 < v13)
          {
LABEL_12:
            v18 = *(float *)v16.i32 - v10;
            *(float32x2_t *)&v19 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v17.f32, v18), v9);
            *((_QWORD *)&v19 + 1) = COERCE_UNSIGNED_INT(v9 * vmuls_lane_f32(v18, v17, 2));
            *(_OWORD *)(v12 + 16 * v8) = v19;
          }
        }
        ++v8;
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t VortexForceEffect.update(parameters:)(uint64_t result)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  int32x2_t v4;
  float32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  __int128 v16;

  if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    v2 = v1[1];
    v3 = vmulq_f32(v2, v2);
    v4 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
    v5 = 0uLL;
    if (*(float *)v4.i32 != 0.0)
    {
      *(float *)v4.i32 = sqrtf(*(float *)v4.i32);
      *(float32x2_t *)v5.f32 = vdiv_f32(*(float32x2_t *)v2.f32, (float32x2_t)vdup_lane_s32(v4, 0));
      v5.f32[2] = v2.f32[2] / *(float *)v4.i32;
      v5.i32[3] = 0;
    }
    v6 = *(_QWORD *)(result + 8);
    if (v6 < 0)
    {
      __break(1u);
    }
    else if (v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(result + 32);
      v9 = v1->f32[0];
      v10 = *(_QWORD *)(result + 200);
      v11 = *(_QWORD *)(result + 208);
      v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL);
      v13 = vnegq_f32(v5);
      do
      {
        if (v7 < v11)
        {
          v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v8 + 16 * v7), *(int32x4_t *)(v8 + 16 * v7)), *(int8x16_t *)(v8 + 16 * v7), 0xCuLL), v13), *(float32x4_t *)(v8 + 16 * v7), v12);
          v15.i32[0] = vextq_s8(v14, v14, 8uLL).u32[0];
          v15.i32[1] = v14.i32[0];
          *(float32x2_t *)&v16 = vmul_n_f32(v15, v9);
          *((_QWORD *)&v16 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v9, *(float32x2_t *)v14.i8, 1));
          *(_OWORD *)(v10 + 16 * v7) = v16;
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t DragForceEffect.update(parameters:)(uint64_t result)
{
  float *v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  __int128 v8;

  if ((*(_BYTE *)(result + 96) & 1) == 0)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (v2)
    {
      v3 = 0;
      v4 = *v1;
      v5 = *(_QWORD *)(result + 200);
      v6 = *(_QWORD *)(result + 208);
      v7 = (float *)(*(_QWORD *)(result + 80) + 8);
      do
      {
        if (v3 < v6)
        {
          *(float32x2_t *)&v8 = vmul_n_f32(vsub_f32(0, *(float32x2_t *)(v7 - 2)), v4);
          *((float *)&v8 + 2) = v4 * (float)(0.0 - *v7);
          HIDWORD(v8) = 0;
          *(_OWORD *)(v5 + 16 * v3) = v8;
        }
        ++v3;
        v7 += 4;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t TurbulenceForceEffect.update(parameters:)(uint64_t result)
{
  float *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float32x4_t v9;
  __int128 v10;
  float v11;

  if ((*(_BYTE *)(result + 48) & 1) == 0 && (*(_BYTE *)(result + 96) & 1) == 0)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2 < 0)
      __break(1u);
    if (v2)
    {
      v3 = 0;
      v11 = *v1;
      v4 = *(_QWORD *)(result + 80);
      v5 = *(_QWORD *)(result + 200);
      v6 = *(_QWORD *)(result + 208);
      v7 = *(_QWORD *)(result + 32) + 8;
      do
      {
        result = REPhysicsForceEffectSimplexNoiseDerivative4();
        if (v3 < v6)
        {
          v9 = vmulq_f32(*(float32x4_t *)(v4 + 16 * v3), *(float32x4_t *)(v4 + 16 * v3));
          v9.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
          *(float32x2_t *)&v10 = vmul_n_f32(vmul_n_f32(vmul_n_f32(0, v8), v11), v9.f32[0]);
          *((_QWORD *)&v10 + 1) = COERCE_UNSIGNED_INT((float)(v11 * (float)(v8 * 0.0)) * v9.f32[0]);
          *(_OWORD *)(v5 + 16 * v3) = v10;
        }
        ++v3;
        v7 += 16;
      }
      while (v2 != v3);
    }
  }
  return result;
}

float32x2_t normalizeSafe(vec:)(float32x4_t a1)
{
  float32x4_t v1;
  int32x2_t v2;

  v1 = vmulq_f32(a1, a1);
  v2 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).u64[0];
  if (*(float *)v2.i32 == 0.0)
  {
    return 0;
  }
  else
  {
    *(float *)v2.i32 = sqrtf(*(float *)v2.i32);
    return vdiv_f32(*(float32x2_t *)a1.f32, (float32x2_t)vdup_lane_s32(v2, 0));
  }
}

uint64_t *SpatialForceFalloff.init(bounds:rate:distanceOffset:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;

  v4 = *result;
  *(double *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = a3;
  return result;
}

double SpatialForceFalloff.distanceOffset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SpatialForceFalloff.distanceOffset.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*SpatialForceFalloff.distanceOffset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialForceFalloff.bounds.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double SpatialForceFalloff.bounds.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*SpatialForceFalloff.bounds.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialForceFalloff.rate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void SpatialForceFalloff.rate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*SpatialForceFalloff.rate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::TimedForceFalloff __swiftcall TimedForceFalloff.init(duration:rate:)(Swift::Double duration, Swift::Double rate)
{
  Swift::Double *v2;
  RealityFoundation::TimedForceFalloff result;

  *v2 = duration;
  v2[1] = rate;
  result.rate = rate;
  result.duration = duration;
  return result;
}

double TimedForceFalloff.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void TimedForceFalloff.duration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*TimedForceFalloff.duration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double TimedForceFalloff.rate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void TimedForceFalloff.rate.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*TimedForceFalloff.rate.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.AccelerationCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.AccelerationCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ForceMode.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCF9C0C + 4 * byte_21BE752A0[*v0]))(0x6563726F66, 0xE500000000000000);
}

uint64_t sub_21BCF9C0C()
{
  return 0x6172656C65636361;
}

uint64_t sub_21BCF9C2C()
{
  return 0x65736C75706D69;
}

uint64_t sub_21BCF9C44()
{
  return 0x797469636F6C6576;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ForceMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ForceMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.CodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.CodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.ForceCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.ForceCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.ImpulseCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.ImpulseCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.VelocityCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.VelocityCodingKeys()
{
  lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys();
  return CodingKey.debugDescription.getter();
}

void ForceMode.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.VelocityCodingKeys>);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.ImpulseCodingKeys>);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.AccelerationCodingKeys>);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.ForceCodingKeys>);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.CodingKeys>);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_21BCF9F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

uint64_t ForceMode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.VelocityCodingKeys>);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.ImpulseCodingKeys>);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.AccelerationCodingKeys>);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.ForceCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();
  v15 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v19 = &type metadata for ForceMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ForceMode@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ForceMode.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ForceMode(_QWORD *a1)
{
  ForceMode.encode(to:)(a1);
}

uint64_t ForceEffectProtocol.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return ForceEffectProtocol.parameterTypes.getter(a1);
}

{
  uint64_t result;

  if (one-time initialization token for position != -1)
    result = swift_once();
  *a1 = static PhysicsBodyParameterTypes.position;
  return result;
}

uint64_t static ForceEffectProtocol.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ForceEffectProtocol.__register(engine:_:)(0, a1, a2, a3, a4);
}

uint64_t static ForceEffectProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v12;
  void *v13;
  _QWORD aBlock[6];
  uint64_t v16;

  _typeName(_:qualified:)();
  String.utf8CString.getter();
  v10 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffects != -1)
    swift_once();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffects;
  static ForceEffectComponent.registeredForceEffects = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, v10, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffects = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  swift_retain();
  static EntityAction.eventBus(_:)(a1);
  specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REForceEffectEventFilter();
  swift_release();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a2;
  v12[5] = a3;
  aBlock[4] = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
  aBlock[3] = &block_descriptor_12_3;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  REEventBusSubscribeWithMatch();
  _Block_release(v13);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
}

uint64_t dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[14];
  uint64_t v48;

  v31[1] = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ForceEffectEvent(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v31 - v18;
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v47);
  if (*(_QWORD *)(a2 + 136))
  {
    v31[0] = a3;
    type metadata accessor for ForceEffectProtocolWrapper(0, a5, a6, v20);
    swift_unknownObjectRetain();
    v21 = swift_dynamicCastClassUnconditional();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21 + *(_QWORD *)(*(_QWORD *)v21 + 96), a5);
    v44 = v47[12];
    v45 = v47[13];
    v46 = v48;
    v40 = v47[8];
    v41 = v47[9];
    v42 = v47[10];
    v43 = v47[11];
    v36 = v47[4];
    v37 = v47[5];
    v38 = v47[6];
    v39 = v47[7];
    v32 = v47[0];
    v33 = v47[1];
    v34 = v47[2];
    v35 = v47[3];
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v12, a5);
    v22 = &v19[*(int *)(v16 + 36)];
    v23 = v45;
    *((_OWORD *)v22 + 12) = v44;
    *((_OWORD *)v22 + 13) = v23;
    *((_QWORD *)v22 + 28) = v46;
    v24 = v41;
    *((_OWORD *)v22 + 8) = v40;
    *((_OWORD *)v22 + 9) = v24;
    v25 = v43;
    *((_OWORD *)v22 + 10) = v42;
    *((_OWORD *)v22 + 11) = v25;
    v26 = v37;
    *((_OWORD *)v22 + 4) = v36;
    *((_OWORD *)v22 + 5) = v26;
    v27 = v39;
    *((_OWORD *)v22 + 6) = v38;
    *((_OWORD *)v22 + 7) = v27;
    v28 = v33;
    *(_OWORD *)v22 = v32;
    *((_OWORD *)v22 + 1) = v28;
    v29 = v35;
    *((_OWORD *)v22 + 2) = v34;
    *((_OWORD *)v22 + 3) = v29;
    outlined retain of OrbitEntityActionHandler((uint64_t)v47);
    ((void (*)(char *))v31[0])(v19);
    swift_release();
    outlined release of TimelineDefinition?((uint64_t)v47);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  else
  {
    outlined release of TimelineDefinition?((uint64_t)v47);
  }
  return 0;
}

uint64_t static ForceEffectParameters.__fromCore(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_32;
  v4 = *(float *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v9 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(result + 48);
  v11 = *(_QWORD *)(result + 56);
  v10 = *(_QWORD *)(result + 64);
  v12 = *(_QWORD *)(result + 72);
  v24 = *(_QWORD *)(result + 80);
  v25 = *(_QWORD *)(result + 104);
  v26 = *(_QWORD *)(result + 112);
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v13 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  v15 = specialized static Entity.entityInfoType(_:)(v2);
  if (v15)
  {
    v14 = (*(uint64_t (**)(void))(v15 + 232))();
    v23 = *(_QWORD *)(v14 + 16);
    swift_retain();
    MEMORY[0x22076D160](v23, 0);
    *(_QWORD *)(v14 + 16) = v2;
    MEMORY[0x22076D160](v2, v14);
    swift_release();
    goto LABEL_8;
  }
  v13 = makeEntity(for:)(v2);
LABEL_4:
  v14 = v13;
LABEL_8:
  if (v7)
    v16 = v6;
  else
    v16 = 0;
  if (v12)
    v17 = v6;
  else
    v17 = 0;
  if (v9)
    v18 = v6;
  else
    v18 = 0;
  if (v11)
    v19 = v6;
  else
    v19 = 0;
  if (v10)
    v20 = v6;
  else
    v20 = 0;
  result = v8 == 0;
  if (v8)
    v21 = v6;
  else
    v21 = 0;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  if (v24)
    v22 = v6;
  else
    v22 = 0;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v18;
  *(_BYTE *)(a2 + 48) = v9 == 0;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v21;
  *(_BYTE *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v19;
  *(_BYTE *)(a2 + 96) = v11 == 0;
  *(_QWORD *)(a2 + 104) = v10;
  *(_QWORD *)(a2 + 112) = v20;
  *(_BYTE *)(a2 + 120) = v10 == 0;
  *(_QWORD *)(a2 + 128) = v7;
  *(_QWORD *)(a2 + 136) = v16;
  *(_BYTE *)(a2 + 144) = v7 == 0;
  *(_QWORD *)(a2 + 152) = v12;
  *(_QWORD *)(a2 + 160) = v17;
  *(_BYTE *)(a2 + 168) = v12 == 0;
  *(_QWORD *)(a2 + 176) = v24;
  *(_QWORD *)(a2 + 184) = v22;
  *(_BYTE *)(a2 + 192) = v24 == 0;
  *(_QWORD *)(a2 + 200) = v25;
  *(_QWORD *)(a2 + 208) = v6;
  *(_QWORD *)(a2 + 216) = v26;
  *(_QWORD *)(a2 + 224) = v6;
  return result;
}

id static ForceEffectProtocol.create(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id result;
  uint64_t v9;
  uint64_t v10;

  result = (id)REForceEffectComponentGetForceEffectUserClass();
  if (result)
  {
    type metadata accessor for ForceEffectProtocolWrapper(0, a2, a3, v9);
    swift_unknownObjectRetain();
    v10 = swift_dynamicCastClassUnconditional();
    static ForceEffectProtocol.createFromCoreAndUserForceEffect<A>(_:_:_:)(a1, v10 + *(_QWORD *)(*(_QWORD *)v10 + 96), a2, a3, a4);
    swift_unknownObjectRelease();
    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ForceEffectProtocol.createFromCoreAndUserForceEffect<A>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  __n128 v12;
  float v13;
  float v14;
  int ForceEffectMask;
  int HasSpatialFalloff;
  char v17;
  double v18;
  double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  int HasTimedFalloff;
  char v25;
  double v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  int v38;
  uint64_t v39[2];
  char v40;
  __int128 v41;
  double v42;
  char v43;

  v35 = a2;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  REForceEffectComponentGetForceEffectPosition();
  v37 = v11;
  REForceEffectComponentGetForceEffectOrientation();
  v36 = v12;
  REForceEffectComponentGetForceEffectStrengthScale();
  v14 = v13;
  ForceEffectMask = REForceEffectComponentGetForceEffectMask();
  HasSpatialFalloff = REForceEffectComponentForceEffectHasSpatialFalloff();
  v17 = HasSpatialFalloff;
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  if (HasSpatialFalloff)
  {
    REForceEffectComponentGetForceEffectBoundSphereRadius();
    v22 = v21;
    REForceEffectComponentGetForceEffectSpatialFalloffRate();
    v19 = v22;
    v20 = v23;
  }
  HasTimedFalloff = REForceEffectComponentForceEffectHasTimedFalloff();
  v25 = HasTimedFalloff;
  v26 = 0.0;
  if (HasTimedFalloff)
  {
    REForceEffectComponentGetForceEffectTimedFalloffRate();
    v28 = v27;
    REForceEffectComponentGetForceEffectTimedFalloffDuration();
    v18 = v29;
    v26 = v28;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v35, a3);
  *(_QWORD *)&v41 = 0;
  *((double *)&v41 + 1) = v19;
  v42 = v20;
  v43 = v17 ^ 1;
  *(double *)v39 = v18;
  *(double *)&v39[1] = v26;
  v40 = v25 ^ 1;
  v38 = ForceEffectMask;
  v31 = type metadata accessor for ForceEffect(0, a3, a4, v30);
  a5[3] = v31;
  a5[4] = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceEffect<A>, v31);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return ForceEffect.init(effect:strengthScale:spatialFalloff:timedFalloff:position:orientation:mask:)((uint64_t)v10, &v41, v39, &v38, a3, a4, (uint64_t)boxed_opaque_existential_1, v14, v37, v36);
}

uint64_t ForceEffect.init(effect:strengthScale:spatialFalloff:timedFalloff:position:orientation:mask:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, __n128 a9@<Q1>, __n128 a10@<Q2>)
{
  uint64_t v15;
  char v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  char v33;
  uint64_t v34;

  v29 = *a2;
  v28 = *((_QWORD *)a2 + 2);
  v27 = *((_BYTE *)a2 + 24);
  v15 = a3[1];
  v26 = *a3;
  v16 = *((_BYTE *)a3 + 16);
  v30 = *a4;
  v17 = (int *)type metadata accessor for ForceEffect(0, a5, a6, (uint64_t)a4);
  v18 = a7 + v17[9];
  v19 = a7 + v17[10];
  v20 = *(_QWORD *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a7, a1, a5);
  *(_OWORD *)v18 = v29;
  *(_QWORD *)(v18 + 16) = v28;
  *(_BYTE *)(v18 + 24) = v27;
  *(_QWORD *)v19 = v26;
  *(_QWORD *)(v19 + 8) = v15;
  *(_BYTE *)(v19 + 16) = v16;
  *(__n128 *)(a7 + v17[11]) = a9;
  *(__n128 *)(a7 + v17[12]) = a10;
  v21 = a8;
  *(float *)(a7 + v17[13]) = v21;
  *(_DWORD *)(a7 + v17[14]) = v30;
  v34 = a5;
  swift_getMetatypeMetadata();
  v22 = String.init<A>(describing:)();
  v23 = (uint64_t *)(a7 + v17[16]);
  *v23 = v22;
  v23[1] = v24;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v33, a5, a6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a5);
  *(_BYTE *)(a7 + v17[15]) = v33;
  return result;
}

uint64_t static ForceEffectProtocol<>.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ForceEffectProtocol<>.__register(engine:_:)(0, a1, a2, a3, a4, a5, a6);
}

uint64_t dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[14];
  uint64_t v44;

  v27 = a7;
  v23 = a4;
  v24 = a3;
  v10 = type metadata accessor for ForceEffectEvent(255, a5, a6, a4);
  v11 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v11 - 8);
  v26 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - v12;
  v14 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v23 - v16;
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v43);
  v18 = specialized Data.init(bytes:count:)(*(_BYTE **)(a2 + 120), *(_QWORD *)(a2 + 128));
  v20 = v19;
  v40 = v43[12];
  v41 = v43[13];
  v42 = v44;
  v36 = v43[8];
  v37 = v43[9];
  v38 = v43[10];
  v39 = v43[11];
  v32 = v43[4];
  v33 = v43[5];
  v34 = v43[6];
  v35 = v43[7];
  v28 = v43[0];
  v29 = v43[1];
  v30 = v43[2];
  v31 = v43[3];
  outlined copy of Data._Representation(v18, v19);
  outlined retain of OrbitEntityActionHandler((uint64_t)v43);
  v21 = ForceEffectEvent.init<>(effectData:parameters:)(v18, v20, a5, a6, (uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v14 + 56))(v13, 0, 1, v10, v21);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v10);
  v24(v17);
  outlined release of TimelineDefinition?((uint64_t)v43);
  outlined consume of Data._Representation(v18, v20);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v10);
  return 0;
}

__n128 ForceEffectEvent.init<>(effectData:parameters:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a4;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v13[13];
  v42 = v13[12];
  v43 = v14;
  v44 = *((_QWORD *)v13 + 28);
  v15 = v13[9];
  v38 = v13[8];
  v39 = v15;
  v16 = v13[11];
  v40 = v13[10];
  v41 = v16;
  v17 = v13[5];
  v34 = v13[4];
  v35 = v17;
  v18 = v13[7];
  v36 = v13[6];
  v37 = v18;
  v19 = v13[1];
  v30 = *v13;
  v31 = v19;
  v20 = v13[2];
  v33 = (__n128)v13[3];
  v32 = v20;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(a1, a2);
  if (v5)
  {
    outlined release of TimelineDefinition?((uint64_t)&v30);
    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a3);
    v23 = a5 + *(int *)(type metadata accessor for ForceEffectEvent(0, a3, v45, v22) + 36);
    v24 = v43;
    *(_OWORD *)(v23 + 192) = v42;
    *(_OWORD *)(v23 + 208) = v24;
    *(_QWORD *)(v23 + 224) = v44;
    v25 = v39;
    *(_OWORD *)(v23 + 128) = v38;
    *(_OWORD *)(v23 + 144) = v25;
    v26 = v41;
    *(_OWORD *)(v23 + 160) = v40;
    *(_OWORD *)(v23 + 176) = v26;
    v27 = v35;
    *(_OWORD *)(v23 + 64) = v34;
    *(_OWORD *)(v23 + 80) = v27;
    v28 = v37;
    *(_OWORD *)(v23 + 96) = v36;
    *(_OWORD *)(v23 + 112) = v28;
    v29 = v31;
    *(_OWORD *)v23 = v30;
    *(_OWORD *)(v23 + 16) = v29;
    result = v33;
    *(_OWORD *)(v23 + 32) = v32;
    *(__n128 *)(v23 + 48) = result;
  }
  return result;
}

uint64_t static ForceEffectProtocol<>.create(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  _BYTE *ForceEffectUserData;
  uint64_t ForceEffectUserDataSize;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a4;
  v16 = a3;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForceEffectUserData = (_BYTE *)REForceEffectComponentGetForceEffectUserData();
  ForceEffectUserDataSize = REForceEffectComponentGetForceEffectUserDataSize();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  v11 = specialized Data.init(bytes:count:)(ForceEffectUserData, ForceEffectUserDataSize);
  v13 = v12;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v4)
  {
    swift_release();
    return outlined consume of Data._Representation(v11, v13);
  }
  else
  {
    outlined consume of Data._Representation(v11, v13);
    static ForceEffectProtocol.createFromCoreAndUserForceEffect<A>(_:_:_:)(a1, (uint64_t)v8, a2, v16, v15);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, a2);
  }
}

uint64_t ForceEffect.effect.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*ForceEffect.effect.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.spatialFalloff.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  __n128 result;

  v3 = (__n128 *)(v2 + *(int *)(a1 + 36));
  v4 = v3[1].n128_u64[0];
  v5 = v3[1].n128_u8[8];
  result = *v3;
  *a2 = *v3;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u8[8] = v5;
  return result;
}

__n128 ForceEffect.spatialFalloff.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 *v5;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u8[8];
  v5 = (__n128 *)(v2 + *(int *)(a2 + 36));
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u64[0] = v3;
  v5[1].n128_u8[8] = v4;
  return result;
}

uint64_t (*ForceEffect.spatialFalloff.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.timedFalloff.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = (__n128 *)(v2 + *(int *)(a1 + 40));
  v4 = v3[1].n128_u8[0];
  result = *v3;
  *a2 = *v3;
  a2[1].n128_u8[0] = v4;
  return result;
}

__n128 ForceEffect.timedFalloff.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  __n128 *v4;
  __n128 result;

  v3 = a1[1].n128_u8[0];
  v4 = (__n128 *)(v2 + *(int *)(a2 + 40));
  result = *a1;
  *v4 = *a1;
  v4[1].n128_u8[0] = v3;
  return result;
}

uint64_t (*ForceEffect.timedFalloff.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.position.getter(uint64_t a1)
{
  uint64_t v1;

  return *(__n128 *)(v1 + *(int *)(a1 + 44));
}

uint64_t ForceEffect.position.setter(uint64_t result, __n128 a2)
{
  uint64_t v2;

  *(__n128 *)(v2 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t (*ForceEffect.position.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.orientation.getter(uint64_t a1)
{
  uint64_t v1;

  return *(__n128 *)(v1 + *(int *)(a1 + 48));
}

uint64_t ForceEffect.orientation.setter(uint64_t result, __n128 a2)
{
  uint64_t v2;

  *(__n128 *)(v2 + *(int *)(result + 48)) = a2;
  return result;
}

uint64_t (*ForceEffect.orientation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ForceEffect.strengthScale.getter(uint64_t a1)
{
  uint64_t v1;

  return *(float *)(v1 + *(int *)(a1 + 52));
}

uint64_t ForceEffect.strengthScale.setter(uint64_t result, float a2)
{
  uint64_t v2;

  *(float *)(v2 + *(int *)(result + 52)) = a2;
  return result;
}

uint64_t (*ForceEffect.strengthScale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ForceEffect.mask.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_DWORD *)(v2 + *(int *)(result + 56));
  return result;
}

_DWORD *ForceEffect.mask.setter(_DWORD *result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(a2 + 56)) = *result;
  return result;
}

uint64_t (*ForceEffect.mask.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall ForceEffect.toCore(_:_:)(Swift::Int a1, Swift::OpaquePointer a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *rawValue;
  __int128 v56[3];
  __int128 aBlock;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  void *v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;

  v4 = v3;
  v5 = v2;
  v8 = *(_QWORD *)(v2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v11 = *(_QWORD *)(v10 + 16);
  v53 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v54 = (char *)&v47 - v15;
  v17 = (char *)(v3 + *(int *)(v16 + 64));
  String.utf8CString.getter();
  v52 = REForceEffectEventFilter();
  swift_release();
  v18 = dynamic_cast_existential_3_conditional(v11);
  rawValue = a2._rawValue;
  v50 = v8;
  v49 = v9;
  v51 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
  {
    v19 = v17;
    if (one-time initialization token for registeredForceEffectsCodable != -1)
      swift_once();
    v20 = dynamic_cast_existential_3_conditional(v11);
    if (v20)
      v24 = v20;
    else
      v24 = 0;
    v25 = v11;
    if (v20)
      v26 = v21;
    else
      v26 = 0;
    if (v20)
      v27 = v22;
    else
      v27 = 0;
    if (v20)
      v28 = v23;
    else
      v28 = 0;
    swift_beginAccess();
    v29 = v26;
    v11 = v25;
    specialized Dictionary.subscript.setter(v24, v29, v27, v28, v52);
    swift_endAccess();
    v17 = v19;
  }
  else
  {
    if (one-time initialization token for registeredForceEffects != -1)
      swift_once();
    v30 = *(_QWORD *)(v5 + 24);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v56[0] = static ForceEffectComponent.registeredForceEffects;
    static ForceEffectComponent.registeredForceEffects = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v30, v52, isUniquelyReferenced_nonNull_native);
    static ForceEffectComponent.registeredForceEffects = *(_QWORD *)&v56[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  String.utf8CString.getter();
  REForceEffectComponentSetForceEffectEventKey();
  swift_release();
  REForceEffectComponentSetForceEffectPosition();
  REForceEffectComponentSetForceEffectOrientation();
  REForceEffectComponentSetForceEffectStrengthScale();
  REForceEffectComponentSetForceEffectMask();
  REForceEffectComponentSetForceEffectForceMode();
  v32 = *(_QWORD *)(v5 + 24);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v32 + 8))(&aBlock, v11, v32);
  REForceEffectComponentSetForceEffectInputs();
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v33(v54, v4, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
  v34 = swift_dynamicCast();
  v52 = v32;
  if (v34)
  {
    v54 = v17;
    outlined init with take of Decodable & Encodable(v56, &aBlock);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v59);
    dispatch thunk of JSONEncoder.encode<A>(_:)();
    __asm { BR              X10 }
  }
  memset(v56, 0, sizeof(v56));
  outlined destroy of BodyTrackingComponent?((uint64_t)v56, &demangling cache variable for type metadata for (Decodable & Encodable)?);
  type metadata accessor for ForceEffectProtocolWrapper(0, v11, v32, v35);
  v36 = v48;
  v33(v48, v4, v11);
  v37 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 80) - 8) + 32))(v37 + *(_QWORD *)(*(_QWORD *)v37 + 96), v36);
  REForceEffectComponentSetAndRetainForceEffectUserClass();
  swift_release();
  if ((*(_BYTE *)(v4 + *(int *)(v5 + 36) + 24) & 1) != 0)
  {
    REForceEffectComponentForceEffectRemoveSpatialFalloff();
  }
  else
  {
    REForceEffectComponentSetForceEffectSpatialFalloffRate();
    REForceEffectComponentSetForceEffectBoundSphereRadius();
  }
  v39 = v51;
  if ((*(_BYTE *)(v4 + *(int *)(v5 + 40) + 16) & 1) != 0)
  {
    REForceEffectComponentForceEffectRemoveTimedFalloff();
  }
  else
  {
    REForceEffectComponentSetForceEffectTimedFalloffRate();
    REForceEffectComponentSetForceEffectTimedFalloffDuration();
  }
  v40 = v11;
  v54 = (char *)a1;
  v41 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!MEMORY[0x22076FDA0](*(_QWORD *)(v41 + 16)))
  {
    __break(1u);
    JUMPOUT(0x21BCFBF04);
  }
  v53 = specialized getEventID<A>(_:)((uint64_t (*)(_QWORD))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
  REComponentGetEntity();
  String.utf8CString.getter();
  REForceEffectEventFilter();
  swift_release();
  v42 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v39, v4, v5);
  v43 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v44 = swift_allocObject();
  v45 = v52;
  *(_QWORD *)(v44 + 16) = v40;
  *(_QWORD *)(v44 + 24) = v45;
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v44 + v43, v39, v5);
  v60 = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in ForceEffect.toCore(_:_:);
  v61 = v44;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v58 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
  v59 = &block_descriptor_33;
  v46 = _Block_copy(&aBlock);
  swift_release();
  REEventBusSubscribeWithMatch();
  _Block_release(v46);
  REForceEffectComponentSetForceEffectSubscription();
}

void one-time initialization function for position()
{
  static PhysicsBodyParameterTypes.position = 1;
}

uint64_t PhysicsBodyParameterTypes.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *static PhysicsBodyParameterTypes.position.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

void one-time initialization function for orientation()
{
  static PhysicsBodyParameterTypes.orientation = 2;
}

_QWORD *static PhysicsBodyParameterTypes.orientation.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for orientation, &static PhysicsBodyParameterTypes.orientation, a1);
}

void one-time initialization function for velocity()
{
  static PhysicsBodyParameterTypes.velocity = 4;
}

_QWORD *static PhysicsBodyParameterTypes.velocity.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for velocity, &static PhysicsBodyParameterTypes.velocity, a1);
}

void one-time initialization function for angularVelocity()
{
  static PhysicsBodyParameterTypes.angularVelocity = 8;
}

_QWORD *static PhysicsBodyParameterTypes.angularVelocity.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for angularVelocity, &static PhysicsBodyParameterTypes.angularVelocity, a1);
}

void one-time initialization function for distance()
{
  static PhysicsBodyParameterTypes.distance = 16;
}

_QWORD *static PhysicsBodyParameterTypes.distance.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for distance, &static PhysicsBodyParameterTypes.distance, a1);
}

void one-time initialization function for mass()
{
  static PhysicsBodyParameterTypes.mass = 32;
}

_QWORD *static PhysicsBodyParameterTypes.mass.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for mass, &static PhysicsBodyParameterTypes.mass, a1);
}

void one-time initialization function for inertiaTensor()
{
  static PhysicsBodyParameterTypes.inertiaTensor = 64;
}

_QWORD *static PhysicsBodyParameterTypes.inertiaTensor.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for inertiaTensor, &static PhysicsBodyParameterTypes.inertiaTensor, a1);
}

_QWORD *static PhysicsBodyParameterTypes.position.getter@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

uint64_t PhysicsBodyParameterTypes.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhysicsBodyParameterTypes()
{
  lazy protocol witness table accessor for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhysicsBodyParameterTypes()
{
  lazy protocol witness table accessor for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes();
  return RawRepresentable<>.encode(to:)();
}

uint64_t UnsafeForceEffectBuffer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, *v3 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72) * a1);
}

uint64_t UnsafeForceEffectBuffer.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v2[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v2[2] = v6;
    if (v6 >= v2[1])
    {
      v13 = *(_QWORD *)(result + 16);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v11 = a2;
      v12 = 1;
    }
    else
    {
      v7 = *v2;
      v8 = *(_QWORD *)(result + 16);
      v9 = *(_QWORD *)(v8 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v7 + *(_QWORD *)(v9 + 72) * v6, v8);
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v11 = a2;
      v12 = 0;
      v13 = v8;
    }
    return v10(v11, v12, 1, v13);
  }
  return result;
}

__n128 UnsafeForceEffectBuffer.makeIterator()@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = -1;
  return result;
}

uint64_t UnsafeForceEffectBuffer.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UnsafeForceEffectBuffer<A>(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  __int128 v4;

  v4 = *v2;
  return specialized Sequence._copyToContiguousArray()(&v4, a1, a2);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance UnsafeForceEffectBuffer<A>(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x220768E4C](a1, a2);
}

uint64_t ForceEffectParameters.entity.getter()
{
  return swift_retain();
}

uint64_t ForceEffectParameters.physicsBodyCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

double ForceEffectParameters.fixedDeltaTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double ForceEffectParameters.elapsedTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

__n128 ForceEffectParameters.positions.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[3].n128_u8[0];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.orientations.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 72);
  result = *(__n128 *)(v1 + 56);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.velocities.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[6].n128_u8[0];
  result = v1[5];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.angularVelocities.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 120);
  result = *(__n128 *)(v1 + 104);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.distances.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[9].n128_u8[0];
  result = v1[8];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.masses.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 168);
  result = *(__n128 *)(v1 + 152);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.inertiaTensors.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[12].n128_u8[0];
  result = v1[11];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t ForceEffectParameters.setForce(_:index:)(uint64_t result, __n128 a2)
{
  uint64_t v2;

  if ((result & 0x8000000000000000) == 0 && *(_QWORD *)(v2 + 208) > result)
    *(__n128 *)(*(_QWORD *)(v2 + 200) + 16 * result) = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.CodingKeys, &unk_24DFCBD88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.CodingKeys, &unk_24DFCBD88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.CodingKeys, &unk_24DFCBD88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.CodingKeys, &unk_24DFCBD88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.VelocityCodingKeys, &unk_24DFCBE08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.VelocityCodingKeys, &unk_24DFCBE08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.VelocityCodingKeys, &unk_24DFCBE08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.ImpulseCodingKeys, &unk_24DFCBDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.ImpulseCodingKeys, &unk_24DFCBDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.ImpulseCodingKeys, &unk_24DFCBDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.AccelerationCodingKeys, &unk_24DFCBDC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.AccelerationCodingKeys, &unk_24DFCBDC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.AccelerationCodingKeys, &unk_24DFCBDC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.ForceCodingKeys, &unk_24DFCBDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.ForceCodingKeys, &unk_24DFCBDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode.ForceCodingKeys, &unk_24DFCBDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForceEffect);
}

uint64_t ForceEffectParameters.setTorque(_:index:)(uint64_t result, __n128 a2)
{
  uint64_t v2;

  if ((result & 0x8000000000000000) == 0 && *(_QWORD *)(v2 + 224) > result)
    *(__n128 *)(*(_QWORD *)(v2 + 216) + 16 * result) = a2;
  return result;
}

uint64_t (*ForceEffectEvent.effect.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ForceEffectEvent.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v3 = (__int128 *)(v2 + *(int *)(a1 + 36));
  v4 = v3[11];
  v5 = v3[13];
  v36 = v3[12];
  v37 = v5;
  v6 = v3[7];
  v7 = v3[9];
  v32 = v3[8];
  v8 = v32;
  v33 = v7;
  v9 = v3[9];
  v10 = v3[11];
  v34 = v3[10];
  v11 = v34;
  v35 = v10;
  v12 = v3[3];
  v13 = v3[5];
  v28 = v3[4];
  v14 = v28;
  v29 = v13;
  v15 = v3[5];
  v16 = v3[7];
  v30 = v3[6];
  v17 = v30;
  v31 = v16;
  v18 = v3[1];
  v25[0] = *v3;
  v25[1] = v18;
  v19 = v3[3];
  v21 = *v3;
  v20 = v3[1];
  v26 = v3[2];
  v22 = v26;
  v27 = v19;
  v23 = v3[13];
  *(_OWORD *)(a2 + 192) = v36;
  *(_OWORD *)(a2 + 208) = v23;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v4;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 96) = v17;
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v20;
  v38 = *((_QWORD *)v3 + 28);
  *(_QWORD *)(a2 + 224) = *((_QWORD *)v3 + 28);
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v12;
  return outlined retain of OrbitEntityActionHandler((uint64_t)v25);
}

__n128 ForceEffectEvent.parameters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  _OWORD v19[14];
  uint64_t v20;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = *(_OWORD *)(v4 + 208);
  v19[12] = *(_OWORD *)(v4 + 192);
  v19[13] = v5;
  v20 = *(_QWORD *)(v4 + 224);
  v6 = *(_OWORD *)(v4 + 144);
  v19[8] = *(_OWORD *)(v4 + 128);
  v19[9] = v6;
  v7 = *(_OWORD *)(v4 + 176);
  v19[10] = *(_OWORD *)(v4 + 160);
  v19[11] = v7;
  v8 = *(_OWORD *)(v4 + 80);
  v19[4] = *(_OWORD *)(v4 + 64);
  v19[5] = v8;
  v9 = *(_OWORD *)(v4 + 112);
  v19[6] = *(_OWORD *)(v4 + 96);
  v19[7] = v9;
  v10 = *(_OWORD *)(v4 + 16);
  v19[0] = *(_OWORD *)v4;
  v19[1] = v10;
  v11 = *(_OWORD *)(v4 + 48);
  v19[2] = *(_OWORD *)(v4 + 32);
  v19[3] = v11;
  outlined release of TimelineDefinition?((uint64_t)v19);
  v12 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v4 + 208) = v12;
  *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
  v13 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v4 + 144) = v13;
  v14 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v4 + 176) = v14;
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 80) = v15;
  v16 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v4 + 112) = v16;
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v17;
  result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v4 + 48) = result;
  return result;
}

uint64_t (*ForceEffectEvent.parameters.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ForceEffectComponent.effects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ForceEffectComponent.effects.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ForceEffectComponent.effects.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::ForceEffectComponent __swiftcall ForceEffectComponent.init(effects:simulationState:)(Swift::OpaquePointer effects, RealityFoundation::ForceEffectComponent::SimulationState simulationState)
{
  uint64_t v2;
  char v3;
  RealityFoundation::ForceEffectComponent result;

  v3 = *(_BYTE *)simulationState;
  *(Swift::OpaquePointer *)v2 = effects;
  *(_BYTE *)(v2 + 8) = v3;
  result.effects = effects;
  result.simulationState.value = simulationState;
  return result;
}

uint64_t ForceEffectComponent.init(effect:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ForceEffectBase>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21BE411F0;
  result = outlined init with take of BindableDataInternal(a1, v4 + 32);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

BOOL static ForceEffectComponent.SimulationState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ForceEffectComponent.SimulationState.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void ForceEffectComponent.simulationState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *ForceEffectComponent.simulationState.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ForceEffectComponent.simulationState.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static ForceEffectComponent.__fromCore(_:)(Swift::OpaquePointer *a1)
{
  return (unint64_t)ForceEffectComponent.init(_:)((Swift::OpaquePointer)a1->_rawValue);
}

RealityFoundation::ForceEffectComponent __swiftcall ForceEffectComponent.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ForceEffectCount;
  RealityFoundation::ForceEffectComponent::SimulationState v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[40];
  RealityFoundation::ForceEffectComponent result;

  v2 = v1;
  ForceEffectCount = REForceEffectComponentGetForceEffectCount();
  if (ForceEffectCount < 0)
  {
LABEL_28:
    __break(1u);
  }
  else
  {
    v5 = ForceEffectCount;
    v25 = v2;
    if (ForceEffectCount)
    {
      v6 = 0;
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v5 == v6)
        {
          __break(1u);
          goto LABEL_28;
        }
        REForceEffectComponentGetForceEffectEventKey();
        v8 = REForceEffectEventFilter();
        if (one-time initialization token for registeredForceEffectsCodable != -1)
          swift_once();
        swift_beginAccess();
        v9 = static ForceEffectComponent.registeredForceEffectsCodable;
        if (*(_QWORD *)(static ForceEffectComponent.registeredForceEffectsCodable + 16))
        {
          v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
          if ((v11 & 1) != 0)
            break;
        }
        swift_endAccess();
        if (one-time initialization token for registeredForceEffects != -1)
          swift_once();
        swift_beginAccess();
        v15 = static ForceEffectComponent.registeredForceEffects;
        if (!*(_QWORD *)(static ForceEffectComponent.registeredForceEffects + 16)
          || (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v17 & 1) == 0))
        {
          swift_endAccess();
          specialized static ForceEffectLogger.logWarning(_:)(0xD000000000000058, 0x800000021BE8F880);
          goto LABEL_26;
        }
        v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v16);
        v20 = *v18;
        v19 = v18[1];
        swift_endAccess();
        static ForceEffectProtocol.create(_:_:)(v6, v20, v19, (uint64_t *)&v26);
        outlined init with take of BindableDataInternal(&v26, (uint64_t)v27);
        outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v22 = v7[2];
        v21 = v7[3];
        v23 = v22 + 1;
        if (v22 >= v21 >> 1)
          goto LABEL_22;
LABEL_23:
        v7[2] = v23;
        outlined init with take of BindableDataInternal(&v26, (uint64_t)&v7[5 * v22 + 4]);
        ForceEffectCount = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        if (v5 == ++v6)
          goto LABEL_26;
      }
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 32 * v10);
      v13 = *v12;
      v14 = v12[1];
      swift_endAccess();
      static ForceEffectProtocol<>.create(_:_:)(v6, v13, v14, (uint64_t *)&v26);
      outlined init with take of BindableDataInternal(&v26, (uint64_t)v27);
      outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v22 = v7[2];
      v21 = v7[3];
      v23 = v22 + 1;
      if (v22 < v21 >> 1)
        goto LABEL_23;
LABEL_22:
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v7);
      goto LABEL_23;
    }
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_26:
    *(_QWORD *)v25 = v7;
    *(_BYTE *)(v25 + 8) = 3;
  }
  result.effects._rawValue = (void *)ForceEffectCount;
  result.simulationState.value = v4;
  return result;
}

uint64_t ForceEffectComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  v5 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  result = MEMORY[0x22076FDA0](*(_QWORD *)(v5 + 16));
  if (result)
  {
    v7 = *(_QWORD *)(v3 + 16);
    REForceEffectComponentResizeForceEffects();
    if (v7)
    {
      v8 = 0;
      v9 = v3 + 32;
      do
      {
        outlined init with copy of __REAssetService(v9, (uint64_t)v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForceEffectBase);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForceEffectInternal);
        swift_dynamicCast();
        v10 = v14;
        v11 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(v8, v2, v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        v9 += 40;
        ++v8;
      }
      while (v7 != v8);
    }
    if (v4 == 3)
      return REForceEffectComponentRemoveSimulationState();
    else
      return REForceEffectComponentSetSimulationState();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static ForceEffectComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5004;
}

unint64_t one-time initialization function for registeredForceEffects()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static ForceEffectComponent.registeredForceEffects = result;
  return result;
}

unint64_t one-time initialization function for registeredForceEffectsCodable()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static ForceEffectComponent.registeredForceEffectsCodable = result;
  return result;
}

unint64_t protocol witness for static Component.__fromCore(_:) in conformance ForceEffectComponent(Swift::OpaquePointer *a1)
{
  return (unint64_t)ForceEffectComponent.init(_:)((Swift::OpaquePointer)a1->_rawValue);
}

void protocol witness for static Component.__coreComponentType.getter in conformance ForceEffectComponent(_DWORD *a1@<X8>)
{
  *a1 = 5004;
}

float ConstantForceEffect.strength.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ConstantForceEffect.parameterTypes.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*ConstantForceEffect.forceMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ConstantForceEffect.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F69746365726964;
  if (*v0 != 1)
    v1 = 0x646F4D6563726F66;
  if (*v0)
    return v1;
  else
    return 0x6874676E65727473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConstantForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ConstantForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConstantForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConstantForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ConstantForceEffect.encode(to:)(_QWORD *a1)
{
  return ConstantForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<ConstantForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
}

uint64_t ConstantForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ConstantForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ConstantForceEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ConstantForceEffect(_QWORD *a1)
{
  return ConstantForceEffect.encode(to:)(a1);
}

float ConstantRadialForceEffect.strength.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

_QWORD *ConstantRadialForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

uint64_t (*ConstantRadialForceEffect.forceMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConstantRadialForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConstantRadialForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ConstantRadialForceEffect.encode(to:)(_QWORD *a1)
{
  return ConstantRadialForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<ConstantRadialForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
}

uint64_t ConstantRadialForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantRadialForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ConstantRadialForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys, a2);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ConstantRadialForceEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantRadialForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ConstantRadialForceEffect(_QWORD *a1)
{
  return ConstantRadialForceEffect.encode(to:)(a1);
}

float VortexForceEffect.init(strength:axis:)@<S0>(__n128 *a1@<X8>, double a2@<D0>, __n128 a3@<Q1>)
{
  float result;

  result = a2;
  a1->n128_f32[0] = result;
  a1[1] = a3;
  a1[2].n128_u8[0] = 0;
  return result;
}

float VortexForceEffect.strength.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

__n128 VortexForceEffect.axis.getter()
{
  __n128 *v0;

  return v0[1];
}

_QWORD *VortexForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

void VortexForceEffect.forceMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *VortexForceEffect.forceMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*VortexForceEffect.forceMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance VortexForceEffect.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1936291937;
  if (*v0 != 1)
    v1 = 0x646F4D6563726F66;
  if (*v0)
    return v1;
  else
    return 0x6874676E65727473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance VortexForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized VortexForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance VortexForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance VortexForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t VortexForceEffect.encode(to:)(_QWORD *a1)
{
  return ConstantForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<VortexForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
}

uint64_t ConstantForceEffect.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_OWORD *)(v3 + 16);
  v14 = *(unsigned __int8 *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  v10 = v16;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    v11 = v14;
    v18 = v15;
    v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = v11;
    v17 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t VortexForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<VortexForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys, a2);
}

uint64_t ConstantForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v17 = a4;
  v18 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    v11 = v17;
    v10 = v18;
    LOBYTE(v20) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v19 = 1;
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4118]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v16 = v20;
    v19 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v10);
    v15 = v20;
    *(_DWORD *)v11 = v13;
    *(_OWORD *)(v11 + 16) = v16;
    *(_BYTE *)(v11 + 32) = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance VortexForceEffect@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for position != -1)
    result = swift_once();
  *a1 = static PhysicsBodyParameterTypes.position;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VortexForceEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VortexForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VortexForceEffect(_QWORD *a1)
{
  return VortexForceEffect.encode(to:)(a1);
}

void __swiftcall DragForceEffect.init(strength:)(RealityFoundation::DragForceEffect *__return_ptr retstr, Swift::Double strength)
{
  Swift::Float v2;

  v2 = strength;
  retstr->strength = v2;
  retstr->forceMode = RealityFoundation_ForceMode_force;
}

float DragForceEffect.strength.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

_QWORD *DragForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for velocity, &static PhysicsBodyParameterTypes.velocity, a1);
}

void DragForceEffect.forceMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

_BYTE *DragForceEffect.forceMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = *result;
  return result;
}

uint64_t (*DragForceEffect.forceMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DragForceEffect.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x646F4D6563726F66;
  else
    return 0x6874676E65727473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DragForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized DragForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DragForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DragForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t DragForceEffect.encode(to:)(_QWORD *a1)
{
  return ConstantRadialForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<DragForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
}

uint64_t ConstantRadialForceEffect.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(unsigned __int8 *)(v3 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = 0;
  v10 = v14;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    v16 = v13;
    v15 = 1;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t DragForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantRadialForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<DragForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys, a2);
}

uint64_t ConstantRadialForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v17 = a4;
  v18 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    v10 = v17;
    v11 = v18;
    v21 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    v19 = 1;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v11);
    v14 = v20;
    *(_DWORD *)v10 = v13;
    *(_BYTE *)(v10 + 4) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance DragForceEffect@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect(&one-time initialization token for velocity, &static PhysicsBodyParameterTypes.velocity, a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect@<X0>(_QWORD *a1@<X2>, _DWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t result;

  if (*a1 != -1)
    result = swift_once();
  *a3 = *a2;
  return result;
}

void protocol witness for ForceEffectProtocol.forceMode.getter in conformance DragForceEffect(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DragForceEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DragForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DragForceEffect(_QWORD *a1)
{
  return DragForceEffect.encode(to:)(a1);
}

void __swiftcall TurbulenceForceEffect.init(strength:smoothness:speed:)(RealityFoundation::TurbulenceForceEffect *__return_ptr retstr, Swift::Double strength, Swift::Double smoothness, Swift::Double speed)
{
  Swift::Float v4;
  Swift::Float v5;
  Swift::Float v6;

  v4 = strength;
  v5 = smoothness;
  retstr->strength = v4;
  retstr->smoothness = v5;
  v6 = speed;
  retstr->speed = v6;
  retstr->forceMode = RealityFoundation_ForceMode_force;
}

float TurbulenceForceEffect.strength.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float TurbulenceForceEffect.smoothness.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

float TurbulenceForceEffect.speed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

uint64_t TurbulenceForceEffect.parameterTypes.getter@<X0>(int *a1@<X8>)
{
  int v2;
  int v3;
  uint64_t result;

  if (one-time initialization token for velocity != -1)
    result = swift_once();
  v2 = static PhysicsBodyParameterTypes.velocity;
  if (one-time initialization token for position != -1)
    result = swift_once();
  v3 = static PhysicsBodyParameterTypes.position;
  if ((static PhysicsBodyParameterTypes.position & ~v2) == 0)
    v3 = 0;
  *a1 = v3 | v2;
  return result;
}

void TurbulenceForceEffect.forceMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 12);
}

_BYTE *TurbulenceForceEffect.forceMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = *result;
  return result;
}

uint64_t (*TurbulenceForceEffect.forceMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TurbulenceForceEffect.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCFDAE4 + 4 * byte_21BE752AC[*v0]))(0x6874676E65727473, 0xE800000000000000);
}

uint64_t sub_21BCFDAE4()
{
  return 0x656E68746F6F6D73;
}

uint64_t sub_21BCFDB00()
{
  return 0x6465657073;
}

uint64_t sub_21BCFDB14()
{
  return 0x646F4D6563726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TurbulenceForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TurbulenceForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TurbulenceForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TurbulenceForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TurbulenceForceEffect.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  _BYTE v10[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TurbulenceForceEffect.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_BYTE *)(v1 + 12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = v8;
    v10[11] = 3;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TurbulenceForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  char v16;
  _BYTE v17[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TurbulenceForceEffect.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v17[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    v17[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    v12 = v11;
    v17[13] = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v14;
    v17[11] = 3;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v17[12];
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 12) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance TurbulenceForceEffect@<X0>(int *a1@<X8>)
{
  return TurbulenceForceEffect.parameterTypes.getter(a1);
}

void protocol witness for ForceEffectProtocol.forceMode.getter in conformance TurbulenceForceEffect(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 12);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TurbulenceForceEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TurbulenceForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TurbulenceForceEffect(_QWORD *a1)
{
  return TurbulenceForceEffect.encode(to:)(a1);
}

RealityFoundation::RadialForceEffect __swiftcall RadialForceEffect.init(strength:restDistance:)(Swift::Double strength, Swift::Double restDistance)
{
  uint64_t v2;
  float v3;
  float v4;
  RealityFoundation::RadialForceEffect result;

  v3 = strength;
  v4 = restDistance;
  *(float *)v2 = v3;
  *(float *)(v2 + 4) = v4;
  *(_BYTE *)(v2 + 8) = 0;
  result.restDistance = v4;
  result.strength = v3;
  return result;
}

float RadialForceEffect.strength.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float RadialForceEffect.restDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

_QWORD *RadialForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

void RadialForceEffect.forceMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *RadialForceEffect.forceMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*RadialForceEffect.forceMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RadialForceEffect.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7473694474736572;
  if (*v0 != 1)
    v1 = 0x646F4D6563726F66;
  if (*v0)
    return v1;
  else
    return 0x6874676E65727473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RadialForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized RadialForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RadialForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RadialForceEffect.CodingKeys()
{
  lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RadialForceEffect.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RadialForceEffect.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_BYTE *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = v8;
    v11 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RadialForceEffect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RadialForceEffect.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v19 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    v18 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    v16 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v17;
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v13;
    *(_BYTE *)(a2 + 8) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for ForceEffectProtocol.forceMode.getter in conformance RadialForceEffect(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RadialForceEffect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RadialForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RadialForceEffect(_QWORD *a1)
{
  return RadialForceEffect.encode(to:)(a1);
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void specialized static ForceEffectLogger.logWarning(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for logger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static ForceEffectLogger.logger);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21B9AA000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v8, -1, -1);
    MEMORY[0x220772F44](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

unint64_t lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantForceEffect.CodingKeys, &unk_24DFCBCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantForceEffect.CodingKeys, &unk_24DFCBCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantForceEffect.CodingKeys, &unk_24DFCBCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantForceEffect.CodingKeys, &unk_24DFCBCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode and conformance ForceMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode and conformance ForceMode;
  if (!lazy protocol witness table cache variable for type ForceMode and conformance ForceMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode, &type metadata for ForceMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode and conformance ForceMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode and conformance ForceMode;
  if (!lazy protocol witness table cache variable for type ForceMode and conformance ForceMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode, &type metadata for ForceMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode and conformance ForceMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceMode and conformance ForceMode;
  if (!lazy protocol witness table cache variable for type ForceMode and conformance ForceMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceMode, &type metadata for ForceMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode and conformance ForceMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantRadialForceEffect.CodingKeys, &unk_24DFCBC68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantRadialForceEffect.CodingKeys, &unk_24DFCBC68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantRadialForceEffect.CodingKeys, &unk_24DFCBC68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantRadialForceEffect.CodingKeys, &unk_24DFCBC68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VortexForceEffect.CodingKeys, &unk_24DFCBBD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VortexForceEffect.CodingKeys, &unk_24DFCBBD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VortexForceEffect.CodingKeys, &unk_24DFCBBD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VortexForceEffect.CodingKeys, &unk_24DFCBBD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for DragForceEffect.CodingKeys, &unk_24DFCBB48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for DragForceEffect.CodingKeys, &unk_24DFCBB48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for DragForceEffect.CodingKeys, &unk_24DFCBB48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for DragForceEffect.CodingKeys, &unk_24DFCBB48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TurbulenceForceEffect.CodingKeys, &unk_24DFCBAB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TurbulenceForceEffect.CodingKeys, &unk_24DFCBAB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TurbulenceForceEffect.CodingKeys, &unk_24DFCBAB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TurbulenceForceEffect.CodingKeys, &unk_24DFCBAB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RadialForceEffect.CodingKeys, &unk_24DFCBA28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RadialForceEffect.CodingKeys, &unk_24DFCBA28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RadialForceEffect.CodingKeys, &unk_24DFCBA28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RadialForceEffect.CodingKeys, &unk_24DFCBA28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsBodyParameterTypes, &type metadata for PhysicsBodyParameterTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsBodyParameterTypes, &type metadata for PhysicsBodyParameterTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsBodyParameterTypes, &type metadata for PhysicsBodyParameterTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsBodyParameterTypes, &type metadata for PhysicsBodyParameterTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UnsafeForceEffectBuffer<A>()
{
  JUMPOUT(0x220772E3CLL);
}

unint64_t lazy protocol witness table accessor for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ForceEffectComponent.SimulationState, &type metadata for ForceEffectComponent.SimulationState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState);
  }
  return result;
}

ValueMetadata *type metadata accessor for ForceEffectBounds()
{
  return &type metadata for ForceEffectBounds;
}

ValueMetadata *type metadata accessor for SpatialForceFalloff()
{
  return &type metadata for SpatialForceFalloff;
}

ValueMetadata *type metadata accessor for TimedForceFalloff()
{
  return &type metadata for TimedForceFalloff;
}

ValueMetadata *type metadata accessor for ForceMode()
{
  return &type metadata for ForceMode;
}

uint64_t dispatch thunk of ForceEffectProtocol.parameterTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ForceEffectProtocol.forceMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ForceEffectProtocol.update(parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ForceEffectBase.effect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ForceEffectBase.spatialFalloff.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ForceEffectBase.timedFalloff.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ForceEffectBase.position.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ForceEffectBase.orientation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ForceEffectBase.strengthScale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ForceEffectBase.mask.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t type metadata instantiation function for ForceEffect()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ForceEffect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ForceEffect(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v10 + 9);
  *v9 = v11;
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFFFF0);
  *v15 = *v16;
  v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(_BYTE *)(v19 + 8) = *(_BYTE *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  v20 = (_QWORD *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v10 + 9);
  *v9 = v11;
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFF0);
  v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFF0);
  *v15 = *v16;
  v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(_BYTE *)(v19 + 8) = *(_BYTE *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  v20 = (_QWORD *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v10 + 9);
  *v9 = v11;
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFFFF0);
  *v15 = *v16;
  v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(_BYTE *)(v19 + 8) = *(_BYTE *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  *(_OWORD *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFF0) = *(_OWORD *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFF0);
  return a1;
}

uint64_t assignWithTake for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v10 + 9);
  *v9 = v11;
  v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFF0);
  v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFF0);
  *v15 = *v16;
  v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(_BYTE *)(v19 + 8) = *(_BYTE *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  v20 = (_QWORD *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForceEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((((((a1 + v7 + 71) & 0xFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFF0)
                      + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFFFFFFF0) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BCFF0BC + 4 * byte_21BE752B0[v10]))();
  }
}

void storeEnumTagSinglePayload for ForceEffect(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 71) & 0xFFFFFFF0) + 31) & 0xFFFFFFF0) + 35) & 0xFFFFFFF0) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 71) & 0xFFFFFFF0) + 31) & 0xFFFFFFF0) + 35) & 0xFFFFFFF0) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21BCFF254()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21BCFF2DCLL);
}

void sub_21BCFF25C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21BCFF264);
  JUMPOUT(0x21BCFF2DCLL);
}

void sub_21BCFF2B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BCFF2DCLL);
}

void sub_21BCFF2C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BCFF2DCLL);
}

uint64_t sub_21BCFF2C8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x21BCFF2D4);
    *(_QWORD *)(((((((v6 + v5 + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0)
              + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x21BCFF2DCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

ValueMetadata *type metadata accessor for PhysicsBodyParameterTypes()
{
  return &type metadata for PhysicsBodyParameterTypes;
}

uint64_t type metadata accessor for UnsafeForceEffectBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeForceEffectBuffer);
}

uint64_t type metadata accessor for UnsafeForceEffectBuffer.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeForceEffectBuffer.Iterator);
}

uint64_t initializeWithCopy for ForceEffectParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForceEffectParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  v9 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v10;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for ForceEffectParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForceEffectParameters(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceEffectParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForceEffectParameters()
{
  return &type metadata for ForceEffectParameters;
}

uint64_t type metadata completion function for ForceEffectEvent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForceEffectEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 232 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
    v12 = *(_OWORD *)(v11 + 32);
    *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
    *(_OWORD *)(v10 + 32) = v12;
    v13 = *(_BYTE *)(v11 + 72);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_BYTE *)(v10 + 72) = v13;
    v14 = *(_BYTE *)(v11 + 96);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(_BYTE *)(v10 + 96) = v14;
    v15 = *(_BYTE *)(v11 + 120);
    *(_OWORD *)(v10 + 104) = *(_OWORD *)(v11 + 104);
    *(_BYTE *)(v10 + 120) = v15;
    v16 = *(_BYTE *)(v11 + 144);
    *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
    *(_BYTE *)(v10 + 144) = v16;
    v17 = *(_BYTE *)(v11 + 168);
    *(_OWORD *)(v10 + 152) = *(_OWORD *)(v11 + 152);
    *(_BYTE *)(v10 + 168) = v17;
    v18 = *(_BYTE *)(v11 + 192);
    *(_OWORD *)(v10 + 176) = *(_OWORD *)(v11 + 176);
    *(_BYTE *)(v10 + 192) = v18;
    *(_OWORD *)(v10 + 200) = *(_OWORD *)(v11 + 200);
    *(_OWORD *)(v10 + 216) = *(_OWORD *)(v11 + 216);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  v9 = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 48) = v9;
  v10 = *(_BYTE *)(v8 + 72);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(_BYTE *)(v7 + 72) = v10;
  v11 = *(_BYTE *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 96) = v11;
  v12 = *(_BYTE *)(v8 + 120);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
  *(_BYTE *)(v7 + 120) = v12;
  v13 = *(_BYTE *)(v8 + 144);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
  *(_BYTE *)(v7 + 144) = v13;
  v14 = *(_BYTE *)(v8 + 168);
  *(_OWORD *)(v7 + 152) = *(_OWORD *)(v8 + 152);
  *(_BYTE *)(v7 + 168) = v14;
  v15 = *(_BYTE *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
  *(_BYTE *)(v7 + 192) = v15;
  *(_OWORD *)(v7 + 200) = *(_OWORD *)(v8 + 200);
  *(_OWORD *)(v7 + 216) = *(_OWORD *)(v8 + 216);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_retain();
  swift_release();
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  v9 = *(_OWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = v9;
  v10 = *(_OWORD *)(v8 + 56);
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(v8 + 72);
  *(_OWORD *)(v7 + 56) = v10;
  v11 = *(_OWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = v11;
  v12 = *(_OWORD *)(v8 + 104);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_OWORD *)(v7 + 104) = v12;
  v13 = *(_OWORD *)(v8 + 128);
  *(_BYTE *)(v7 + 144) = *(_BYTE *)(v8 + 144);
  *(_OWORD *)(v7 + 128) = v13;
  v14 = *(_OWORD *)(v8 + 152);
  *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
  *(_OWORD *)(v7 + 152) = v14;
  v15 = *(_OWORD *)(v8 + 176);
  *(_BYTE *)(v7 + 192) = *(_BYTE *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = v15;
  *(_QWORD *)(v7 + 200) = *(_QWORD *)(v8 + 200);
  *(_QWORD *)(v7 + 208) = *(_QWORD *)(v8 + 208);
  *(_QWORD *)(v7 + 216) = *(_QWORD *)(v8 + 216);
  *(_QWORD *)(v7 + 224) = *(_QWORD *)(v8 + 224);
  return a1;
}

uint64_t initializeWithTake for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 16);
  v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  v11 = *(_OWORD *)(v8 + 96);
  v13 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  v14 = *(_OWORD *)(v8 + 160);
  v16 = *(_OWORD *)(v8 + 112);
  v15 = *(_OWORD *)(v8 + 128);
  *(_OWORD *)(v7 + 144) = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 160) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  *(_OWORD *)(v7 + 128) = v15;
  v18 = *(_OWORD *)(v8 + 192);
  v17 = *(_OWORD *)(v8 + 208);
  v19 = *(_OWORD *)(v8 + 176);
  *(_QWORD *)(v7 + 224) = *(_QWORD *)(v8 + 224);
  *(_OWORD *)(v7 + 192) = v18;
  *(_OWORD *)(v7 + 208) = v17;
  *(_OWORD *)(v7 + 176) = v19;
  return a1;
}

uint64_t assignWithTake for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_release();
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  v9 = *(_OWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = v9;
  v10 = *(_OWORD *)(v8 + 56);
  *(_BYTE *)(v7 + 72) = *(_BYTE *)(v8 + 72);
  *(_OWORD *)(v7 + 56) = v10;
  v11 = *(_OWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = v11;
  v12 = *(_OWORD *)(v8 + 104);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_OWORD *)(v7 + 104) = v12;
  v13 = *(_OWORD *)(v8 + 128);
  *(_BYTE *)(v7 + 144) = *(_BYTE *)(v8 + 144);
  *(_OWORD *)(v7 + 128) = v13;
  v14 = *(_OWORD *)(v8 + 152);
  *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
  *(_OWORD *)(v7 + 152) = v14;
  v15 = *(_OWORD *)(v8 + 176);
  *(_BYTE *)(v7 + 192) = *(_BYTE *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = v15;
  *(_QWORD *)(v7 + 200) = *(_QWORD *)(v8 + 200);
  *(_QWORD *)(v7 + 208) = *(_QWORD *)(v8 + 208);
  *(_QWORD *)(v7 + 216) = *(_QWORD *)(v8 + 216);
  *(_QWORD *)(v7 + 224) = *(_QWORD *)(v8 + 224);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForceEffectEvent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 232) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BCFFC88 + 4 * byte_21BE752BF[v10]))();
  }
}

void storeEnumTagSinglePayload for ForceEffectEvent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF18)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFF18)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 232);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21BCFFE00()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21BCFFEB0);
}

void sub_21BCFFE08(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21BCFFE10);
  JUMPOUT(0x21BCFFEB0);
}

void sub_21BCFFE50()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BCFFEB0);
}

void sub_21BCFFE58()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BCFFEB0);
}

uint64_t sub_21BCFFE60(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21BCFFEB0);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21BCFFEACLL);
    JUMPOUT(0x21BCFFE6CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForceEffectEvent);
}

uint64_t initializeBufferWithCopyOfBuffer for ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for ForceEffectComponent()
{
  return &type metadata for ForceEffectComponent;
}

ValueMetadata *type metadata accessor for ForceEffectComponent.SimulationState()
{
  return &type metadata for ForceEffectComponent.SimulationState;
}

uint64_t type metadata accessor for ForceEffectProtocolWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForceEffectProtocolWrapper);
}

ValueMetadata *type metadata accessor for ConstantForceEffect()
{
  return &type metadata for ConstantForceEffect;
}

ValueMetadata *type metadata accessor for ConstantRadialForceEffect()
{
  return &type metadata for ConstantRadialForceEffect;
}

uint64_t getEnumTagSinglePayload for ConstantForceEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConstantForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for VortexForceEffect()
{
  return &type metadata for VortexForceEffect;
}

uint64_t getEnumTagSinglePayload for ConstantRadialForceEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConstantRadialForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for DragForceEffect()
{
  return &type metadata for DragForceEffect;
}

uint64_t getEnumTagSinglePayload for TurbulenceForceEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TurbulenceForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TurbulenceForceEffect()
{
  return &type metadata for TurbulenceForceEffect;
}

uint64_t getEnumTagSinglePayload for RadialForceEffect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RadialForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for RadialForceEffect()
{
  return &type metadata for RadialForceEffect;
}

void *type metadata accessor for RadialForceEffect.CodingKeys()
{
  return &unk_24DFCBA28;
}

void *type metadata accessor for TurbulenceForceEffect.CodingKeys()
{
  return &unk_24DFCBAB8;
}

void *type metadata accessor for DragForceEffect.CodingKeys()
{
  return &unk_24DFCBB48;
}

void *type metadata accessor for VortexForceEffect.CodingKeys()
{
  return &unk_24DFCBBD8;
}

uint64_t storeEnumTagSinglePayload for DragForceEffect.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD002E8 + 4 * byte_21BE752D3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD0031C + 4 * byte_21BE752CE[v4]))();
}

uint64_t sub_21BD0031C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD00324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD0032CLL);
  return result;
}

uint64_t sub_21BD00338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD00340);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD00344(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD0034C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ConstantRadialForceEffect.CodingKeys()
{
  return &unk_24DFCBC68;
}

uint64_t storeEnumTagSinglePayload for ForceEffectComponent.SimulationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BD003B4 + 4 * byte_21BE752DD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BD003E8 + 4 * byte_21BE752D8[v4]))();
}

uint64_t sub_21BD003E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD003F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD003F8);
  return result;
}

uint64_t sub_21BD00404(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD0040CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BD00410(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD00418(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ConstantForceEffect.CodingKeys()
{
  return &unk_24DFCBCF8;
}

uint64_t storeEnumTagSinglePayload for ForceMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BD00480 + 4 * byte_21BE752E7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BD004B4 + 4 * byte_21BE752E2[v4]))();
}

uint64_t sub_21BD004B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD004BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD004C4);
  return result;
}

uint64_t sub_21BD004D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD004D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BD004DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD004E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ForceMode.CodingKeys()
{
  return &unk_24DFCBD88;
}

void *type metadata accessor for ForceMode.ForceCodingKeys()
{
  return &unk_24DFCBDA8;
}

void *type metadata accessor for ForceMode.AccelerationCodingKeys()
{
  return &unk_24DFCBDC8;
}

void *type metadata accessor for ForceMode.ImpulseCodingKeys()
{
  return &unk_24DFCBDE8;
}

void *type metadata accessor for ForceMode.VelocityCodingKeys()
{
  return &unk_24DFCBE08;
}

uint64_t specialized RadialForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7473694474736572 && a2 == 0xEC00000065636E61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized VortexForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936291937 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ConstantForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized TurbulenceForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E68746F6F6D73 && a2 == 0xEA00000000007373
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465657073 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized DragForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ForceMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6563726F66 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6172656C65636361 && a2 == 0xEC0000006E6F6974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736C75706D69 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t dynamic_cast_existential_3_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    result = swift_conformsToProtocol2();
    if (result)
    {
      if (swift_conformsToProtocol2())
        return a1;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_21BD016B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ForceEffect(0, v5, *(_QWORD *)(v4 + 24), a4) - 8)
                          + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in ForceEffect.toCore(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[14];
  uint64_t v10;
  _OWORD v11[14];
  uint64_t v12;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  type metadata accessor for ForceEffect(0, v6, v7, a4);
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v9);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v7 + 24))(v9, v6, v7);
  v11[12] = v9[12];
  v11[13] = v9[13];
  v12 = v10;
  v11[8] = v9[8];
  v11[9] = v9[9];
  v11[10] = v9[10];
  v11[11] = v9[11];
  v11[4] = v9[4];
  v11[5] = v9[5];
  v11[6] = v9[6];
  v11[7] = v9[7];
  v11[0] = v9[0];
  v11[1] = v9[1];
  v11[2] = v9[2];
  v11[3] = v9[3];
  outlined release of TimelineDefinition?((uint64_t)v11);
  return 0;
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

_OWORD *outlined init with take of Decodable & Encodable(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_21BD01858()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_21BD0188C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:)(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

uint64_t type metadata completion function for Box()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t static Box<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Box<A>()
{
  return static Box<A>.== infix(_:_:)();
}

uint64_t Box.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MutableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MutableBox);
}

uint64_t static MutableBox<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = *(_QWORD *)(v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - v10;
  v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v13((char *)&v17 - v10, v12 + *(_QWORD *)(*(_QWORD *)v12 + 88), v4, v9);
  ((void (*)(char *, uint64_t, uint64_t))v13)(v7, a2 + *(_QWORD *)(*(_QWORD *)a2 + 88), v4);
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  v15(v11, v4);
  return v14 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> MutableBox<A>(uint64_t *a1, uint64_t *a2)
{
  return static MutableBox<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t static Indirect<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, __n128);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - v10;
  v13 = *(void (**)(char *, uint64_t, __n128))(v5 + 16);
  v13((char *)&v17 - v10, v12 + *(_QWORD *)(*(_QWORD *)v12 + 88), v9);
  ((void (*)(char *, uint64_t, uint64_t))v13)(v7, a2 + *(_QWORD *)(*(_QWORD *)a2 + 88), a3);
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, a3);
  v15(v11, a3);
  return v14 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Indirect<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static Indirect<A>.== infix(_:_:)(*a1, *a2, *(_QWORD *)(a3 + 16));
}

uint64_t type metadata accessor for Indirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Indirect);
}

double MaterialParameters.Texture.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = (id)REMaterialCreateDefaultSamplerDescriptor();
  *(_QWORD *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)&result = 84148994;
  *(_DWORD *)(a2 + 24) = 84148994;
  return result;
}

uint64_t MaterialParameters.allKeys.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = Material.allKeys.getter(v2, v3);
  v5 = specialized Sequence.compactMap<A>(_:)(v4);
  swift_bridgeObjectRelease();
  return v5;
}

double MaterialParameters.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  unsigned __int8 v8;
  double result;
  _OWORD v10[4];
  unsigned __int8 v11;
  _OWORD v12[4];
  unsigned __int8 v13;

  v7 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  Material.subscript.getter(a1, a2, v7, (uint64_t)v12);
  v8 = v13;
  if (v13 == 255)
  {
    result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a3 + 64) = v8;
  }
  else
  {
    v10[0] = v12[0];
    v10[1] = v12[1];
    v10[2] = v12[2];
    v10[3] = v12[3];
    v11 = v13;
    MaterialParameters.Value.init(_:)((uint64_t)v10);
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v7;
  unsigned __int8 v8;
  double result;
  _OWORD v10[4];
  unsigned __int8 v11;
  _OWORD v12[4];
  unsigned __int8 v13;

  v7 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  Material.subscript.getter(a1, a2, v7, (uint64_t)v12);
  v8 = v13;
  if (v13 == 255)
  {
    result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a3 + 64) = v8;
  }
  else
  {
    v10[0] = v12[0];
    v10[1] = v12[1];
    v10[2] = v12[2];
    v10[3] = v12[3];
    v11 = v13;
    MaterialParameters.Value.init(_:)((uint64_t)v10);
  }
  return result;
}

__n128 MaterialParameters.subscript.setter(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *((_BYTE *)a1 + 64);
  v7 = a1[1];
  v18 = *a1;
  v19 = v7;
  v8 = a1[3];
  v20 = a1[2];
  v21 = v8;
  v22 = v6;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v18, (uint64_t)v23);
  v16 = v23[1];
  v17 = v23[0];
  v15 = v23[2];
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_QWORD *)(v3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v3, v12);
  v18 = v17;
  v19 = v16;
  v20 = v15;
  *(_QWORD *)&v21 = v9;
  *((_QWORD *)&v21 + 1) = v10;
  v22 = v11;
  Material.subscript.setter((uint64_t)&v18, a2, a3, v12, v13);
  return result;
}

{
  uint64_t v3;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *((_BYTE *)a1 + 64);
  v7 = a1[1];
  v18 = *a1;
  v19 = v7;
  v8 = a1[3];
  v20 = a1[2];
  v21 = v8;
  v22 = v6;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v18, (uint64_t)v23);
  v16 = v23[1];
  v17 = v23[0];
  v15 = v23[2];
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_QWORD *)(v3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v3, v12);
  v18 = v17;
  v19 = v16;
  v20 = v15;
  *(_QWORD *)&v21 = v9;
  *((_QWORD *)&v21 + 1) = v10;
  v22 = v11;
  Material.subscript.setter((uint64_t)&v18, a2, a3, v12, v13);
  return result;
}

id MaterialParameters.Texture.sampler.getter@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  id v4;

  v3 = *v1;
  if (*v1)
  {
    v4 = *v1;
  }
  else
  {
    v4 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v3 = 0;
  }
  *a1 = v4;
  return v3;
}

double MaterialParameters.Texture.init(_:sampler:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *a2;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)&result = 84148994;
  *(_DWORD *)(a3 + 24) = 84148994;
  *(_QWORD *)a3 = v3;
  return result;
}

RealityFoundation::MaterialParameters::Texture::Sampler __swiftcall MaterialParameters.Texture.Sampler.init()()
{
  RealityFoundation::MaterialParameters::Texture::Sampler *v0;
  RealityFoundation::MaterialParameters::Texture::Sampler *v1;
  RealityFoundation::MaterialParameters::Texture::Sampler result;

  v1 = v0;
  result.descriptor.super.isa = (Class)(id)REMaterialCreateDefaultSamplerDescriptor();
  v1->descriptor.super.isa = result.descriptor.super.isa;
  return result;
}

RealityFoundation::MaterialParameters::Texture::Sampler __swiftcall MaterialParameters.Texture.Sampler.init(_:)(RealityFoundation::MaterialParameters::Texture::Sampler result)
{
  RealityFoundation::MaterialParameters::Texture::Sampler *v1;

  v1->descriptor.super.isa = result.descriptor.super.isa;
  return result;
}

uint64_t MaterialParameters.Value.getMaterialParameterType()()
{
  uint64_t v0;

  return dword_21BE76AB0[*(char *)(v0 + 64)];
}

void MaterialParameters.Texture.Sampler.modify<A>(_:)(void (*a1)())
{
  id *v1;
  uint64_t v2;
  void *v4;

  objc_msgSend(*v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for MTLSamplerDescriptor);
  swift_dynamicCast();
  a1();
  if (v2)
  {

  }
  else
  {

    *v1 = v4;
  }
}

void MaterialParameters.Texture.Sampler.access<A>(_:)(void (*a1)())
{
  id *v1;
  void *v3;

  objc_msgSend(*v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for MTLSamplerDescriptor);
  swift_dynamicCast();
  a1();

}

uint64_t MaterialParameters.Texture.resource.getter()
{
  return swift_retain();
}

uint64_t MaterialParameters.Texture.resource.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MaterialParameters.Texture.resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path getter for MaterialParameters.Texture.sampler : MaterialParameters.Texture@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t result;

  if (*a1)
  {
    v3 = *a1;
    swift_retain();
  }
  else
  {
    swift_retain();
    v3 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  result = swift_release();
  *a2 = v3;
  return result;
}

void MaterialParameters.Texture.sampler.setter(void **a1)
{
  id *v1;
  void *v2;

  v2 = *a1;

  *v1 = v2;
}

void (*MaterialParameters.Texture.sampler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void **v1;
  void *v3;
  id v4;
  id v5;

  a1[1] = v1;
  v3 = *v1;
  if (*v1)
  {
    v4 = *v1;
  }
  else
  {
    v4 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v3 = 0;
  }
  *a1 = v4;
  v5 = v3;
  return MaterialParameters.Texture.sampler.modify;
}

void MaterialParameters.Texture.sampler.modify(uint64_t a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)a1;
  v2 = *(void ***)(a1 + 8);
  v4 = *v2;
  if ((a2 & 1) != 0)
  {
    v5 = v3;

    *v2 = v3;
  }
  else
  {

    *v2 = v3;
  }
}

uint64_t MaterialParameters.Texture.uvIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MaterialParameters.Texture.uvIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*MaterialParameters.Texture.uvIndex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialParameters.Texture.swizzle.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t MaterialParameters.Texture.swizzle.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*MaterialParameters.Texture.swizzle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialParameters.Handle.SharedHandle.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t MaterialParameters.Value.init(_:)(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_21BD022A4 + 4 * byte_21BE768B0[*(unsigned __int8 *)(a1 + 64)]))();
}

double sub_21BD022A4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

double sub_21BD022C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

double sub_21BD022E4@<D0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 2;
  return result;
}

double sub_21BD0230C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 3;
  return result;
}

double sub_21BD02330@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 4;
  return result;
}

double sub_21BD0234C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 5;
  return result;
}

double sub_21BD02368@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 6;
  return result;
}

double sub_21BD0238C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 7;
  return result;
}

void sub_21BD023A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 8;
}

__n128 sub_21BD023C4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 result;

  a2->n128_u64[0] = v2;
  a2->n128_u64[1] = v3;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  a2[2].n128_u64[0] = v6;
  a2[2].n128_u64[1] = v7;
  result = a1[3];
  a2[3] = result;
  a2[4].n128_u8[0] = 9;
  return result;
}

double sub_21BD023E4@<D0>(uint64_t a1@<X8>)
{
  char v1;
  double result;

  *(_QWORD *)a1 = v1 & 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 10;
  return result;
}

double sub_21BD0240C@<D0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 11;
  return result;
}

double sub_21BD02434@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 12;
  return result;
}

double sub_21BD02458@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 13;
  return result;
}

double sub_21BD02474@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 14;
  return result;
}

double sub_21BD02490@<D0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 15;
  return result;
}

double sub_21BD024B8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)a1 = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 16;
  return result;
}

double sub_21BD024DC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 17;
  return result;
}

double sub_21BD024F8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 18;
  return result;
}

double sub_21BD02514@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = -1;
  return result;
}

void MaterialParameters.Value.init(_:)(uint64_t a1)
{
  __asm { BR              X14 }
}

id sub_21BD0257C()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  result = (id)REMaterialCreateDefaultSamplerDescriptor();
  *(_QWORD *)v0 = result;
  *(_QWORD *)(v0 + 8) = v1;
  *(_OWORD *)(v0 + 16) = xmmword_21BE5E810;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 0;
  return result;
}

uint64_t MaterialParameters.Value.cgColorValue.getter()
{
  __n128 *v0;

  if (v0[4].n128_u8[0] == 5)
    return specialized SIMD4<>.cgColor.getter(*v0);
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd4FloatValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 5)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MaterialParameters.Value.textureValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t result;

  if (*(_BYTE *)(v1 + 64))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 24);
    v4 = *(_QWORD *)(v1 + 8);
    v5 = *(_QWORD *)(v1 + 16);
    v3 = *(void **)v1;
    v7 = v3;
    result = swift_retain();
  }
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t MaterialParameters.Value.textureResourceValue.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 64) == 1)
    return swift_retain();
  else
    return 0;
}

uint64_t MaterialParameters.Value.floatValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 64);
  v3 = v2 == 2;
  v4 = v2 != 2;
  if (!v3)
    v1 = 0;
  return v1 | (v4 << 32);
}

uint64_t MaterialParameters.Value.simd2FloatValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 3)
    return *(_QWORD *)v0;
  else
    return 0;
}

id MaterialParameters.Value.colorValue.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  if (*(_BYTE *)(v0 + 64) != 6)
    return 0;
  v1 = *(id *)v0;
  v2 = *(id *)v0;
  return v1;
}

uint64_t MaterialParameters.Value.float2x2Value.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = v0[64];
  if (v1 == 7)
    return *(_QWORD *)v0;
  else
    return 0;
}

void MaterialParameters.Value.float3x3Value.getter(uint64_t a1@<X8>)
{
  __int128 *v1;
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *((unsigned __int8 *)v1 + 64);
  v3 = 0uLL;
  v4 = 0uLL;
  v5 = 0uLL;
  if (v2 == 8)
  {
    v4 = v1[1];
    v5 = v1[2];
    v3 = *v1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = v2 != 8;
}

void MaterialParameters.Value.float4x4Value.getter(uint64_t a1@<X8>)
{
  __int128 *v1;
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *((unsigned __int8 *)v1 + 64);
  v3 = 0uLL;
  v4 = 0uLL;
  v5 = 0uLL;
  v6 = 0uLL;
  if (v2 == 9)
  {
    v5 = v1[2];
    v6 = v1[3];
    v3 = *v1;
    v4 = v1[1];
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 64) = v2 != 9;
}

uint64_t MaterialParameters.Value.BOOLValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 10)
    return *v0 & 1;
  else
    return 2;
}

uint64_t MaterialParameters.Value.intValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 64);
  v3 = v2 == 11;
  v4 = v2 != 11;
  if (!v3)
    v1 = 0;
  return v1 | (v4 << 32);
}

uint64_t MaterialParameters.Value.uintValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 64);
  v3 = v2 == 15;
  v4 = v2 != 15;
  if (!v3)
    v1 = 0;
  return v1 | (v4 << 32);
}

uint64_t MaterialParameters.Value.simd2IntValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 12)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd2UIntValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 16)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd3IntValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 13)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd3UIntValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 17)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd4IntValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 14)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd4UIntValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 18)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t key path getter for MaterialParameters.subscript(_:) : MaterialParameters@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  unsigned __int8 v14;
  _OWORD v15[4];
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;

  v4 = *a2;
  v5 = a2[1];
  v6 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  result = Material.subscript.getter(v4, v5, v6, (uint64_t)v15);
  v8 = v16;
  if (v16 == 255)
  {
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  else
  {
    v13[0] = v15[0];
    v13[1] = v15[1];
    v13[2] = v15[2];
    v13[3] = v15[3];
    v14 = v16;
    result = MaterialParameters.Value.init(_:)((uint64_t)v13);
    v9 = v17;
    v10 = v18;
    v11 = v19;
    v12 = v20;
    v8 = v21;
  }
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 32) = v11;
  *(_OWORD *)(a3 + 48) = v12;
  *(_BYTE *)(a3 + 64) = v8;
  return result;
}

void key path setter for MaterialParameters.subscript(_:) : MaterialParameters(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  _OWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v21 = a3[1];
  v22 = *a3;
  v19 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)&v23 = *(_QWORD *)a1;
  v20 = (void *)v23;
  *((_QWORD *)&v23 + 1) = v19;
  *(_QWORD *)&v24 = v18;
  *((_QWORD *)&v24 + 1) = v4;
  *(_QWORD *)&v25 = v5;
  *((_QWORD *)&v25 + 1) = v6;
  v26 = v7;
  v27 = v17;
  v28 = v8;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v23, (uint64_t)v29);
  v14 = v29[1];
  v15 = v29[0];
  v13 = v29[2];
  v9 = v30;
  v10 = v31;
  v11 = v32;
  v12 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  v23 = v15;
  v24 = v14;
  v25 = v13;
  v26 = v9;
  v27 = v10;
  v28 = v11;
  swift_bridgeObjectRetain();
  outlined copy of MaterialParameters.Value?(v20, v19, v18, v4, v5, v6, v7, v17, v8);
  Material.subscript.setter((uint64_t)&v23, v22, v21, v12, v16);
}

void (*MaterialParameters.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _OWORD v11[4];
  unsigned __int8 v12;
  _OWORD v13[4];
  unsigned __int8 v14;

  v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[10] = a3;
  v7[11] = v3;
  v7[9] = a2;
  v8 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v8);
  Material.subscript.getter(a2, a3, v8, (uint64_t)v13);
  v9 = v14;
  if (v14 == 255)
  {
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((_BYTE *)v7 + 64) = v9;
  }
  else
  {
    v11[0] = v13[0];
    v11[1] = v13[1];
    v11[2] = v13[2];
    v11[3] = v13[3];
    v12 = v14;
    MaterialParameters.Value.init(_:)((uint64_t)v11);
  }
  return MaterialParameters.subscript.modify;
}

{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _OWORD v11[4];
  unsigned __int8 v12;
  _OWORD v13[4];
  unsigned __int8 v14;

  v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[10] = a3;
  v7[11] = v3;
  v7[9] = a2;
  v8 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v8);
  Material.subscript.getter(a2, a3, v8, (uint64_t)v13);
  v9 = v14;
  if (v14 == 255)
  {
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((_BYTE *)v7 + 64) = v9;
  }
  else
  {
    v11[0] = v13[0];
    v11[1] = v13[1];
    v11[2] = v13[2];
    v11[3] = v13[3];
    v12 = v14;
    MaterialParameters.Value.init(_:)((uint64_t)v11);
  }
  return MaterialParameters.subscript.modify;
}

void MaterialParameters.subscript.modify(void ***a1, char a2)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  unsigned __int8 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  unsigned __int8 v43;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v6 = (uint64_t)(*a1)[2];
  v5 = (uint64_t)(*a1)[3];
  v8 = (uint64_t)(*a1)[4];
  v7 = (uint64_t)(*a1)[5];
  v10 = (uint64_t)(*a1)[6];
  v9 = (*a1)[7];
  v11 = *((_BYTE *)*a1 + 64);
  v12 = (uint64_t)(*a1)[11];
  v30 = (uint64_t)(*a1)[9];
  v31 = (uint64_t)(*a1)[10];
  *(_QWORD *)&v38 = v3;
  *((_QWORD *)&v38 + 1) = v4;
  *(_QWORD *)&v39 = v6;
  *((_QWORD *)&v39 + 1) = v5;
  *(_QWORD *)&v40 = v8;
  *((_QWORD *)&v40 + 1) = v7;
  v41 = v10;
  v42 = v9;
  v43 = v11;
  if ((a2 & 1) != 0)
  {
    v28 = (uint64_t)v9;
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
    v22 = v33;
    v23 = v32;
    v21 = v34;
    v19 = v36;
    v20 = v35;
    v18 = v37;
    v24 = *(_QWORD *)(v12 + 24);
    v26 = *(_QWORD *)(v12 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v12, v24);
    v38 = v23;
    v39 = v22;
    v40 = v21;
    v41 = v20;
    v42 = v19;
    v43 = v18;
    swift_bridgeObjectRetain();
    outlined copy of MaterialParameters.Value?(v3, v4, v6, v5, v8, v7, v10, v28, v11);
    Material.subscript.setter((uint64_t)&v38, v30, v31, v24, v26);
    outlined consume of MaterialParameters.Value?(*v2, (uint64_t)v2[1], (uint64_t)v2[2], (uint64_t)v2[3], (uint64_t)v2[4], (uint64_t)v2[5], (uint64_t)v2[6], (uint64_t)v2[7], *((_BYTE *)v2 + 64));
  }
  else
  {
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
    v27 = v33;
    v29 = v32;
    v25 = v34;
    v13 = v35;
    v14 = v36;
    v15 = v37;
    v16 = *(_QWORD *)(v12 + 24);
    v17 = *(_QWORD *)(v12 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v12, v16);
    v38 = v29;
    v39 = v27;
    v40 = v25;
    v41 = v13;
    v42 = v14;
    v43 = v15;
    swift_bridgeObjectRetain();
    Material.subscript.setter((uint64_t)&v38, v30, v31, v16, v17);
  }
  free(v2);
}

id outlined copy of MaterialParameters.Value?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return outlined copy of MaterialParameters.Value(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t MaterialParameters.Metadata.displayName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialParameters.Metadata.displayName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MaterialParameters.Metadata.displayName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::MaterialParameters::Metadata_optional __swiftcall MaterialParameters.metadata(for:)(Swift::String a1)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  RealityFoundation::MaterialParameters::Metadata_optional v7;
  RealityFoundation::MaterialParameters::Metadata_optional result;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v4._countAndFlagsBits = countAndFlagsBits;
  v4._object = object;
  v7 = Material.metadata(for:)(v4);
  v6 = v7.value.displayName.value._object;
  v5 = v7.value.displayName.value._countAndFlagsBits;
  result.value.displayName.value._object = v6;
  result.value.displayName.value._countAndFlagsBits = v5;
  return result;
}

void UniformParameters.Value.init(_:)(uint64_t a1)
{
  __asm { BR              X15 }
}

void sub_21BD03274()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  outlined consume of MaterialParameters.Value(v1, v2, v6, v5, v4, v3, v7, v8, 0);
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v9;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 0;
}

uint64_t UniformParameters.Value.cgColorValue.getter()
{
  __n128 *v0;

  if (v0[4].n128_u8[0] == 4)
    return specialized SIMD4<>.cgColor.getter(*v0);
  else
    return 0;
}

uint64_t MaterialParameters.Value.simd3FloatValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 4)
    return *(_QWORD *)v0;
  else
    return 0;
}

id static UniformParameters.Value.cgColor(_:)@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 6;
  return a1;
}

uint64_t UniformParameters.Value.textureValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  if (*(_BYTE *)(v1 + 64))
  {
    result = 0;
    v4 = 0;
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
    result = swift_retain();
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t UniformParameters.Value.floatValue.getter()
{
  unsigned int *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 64);
  v3 = v2 == 1;
  v4 = v2 != 1;
  if (!v3)
    v1 = 0;
  return v1 | (v4 << 32);
}

uint64_t UniformParameters.Value.simd2FloatValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 2)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t UniformParameters.Value.simd3FloatValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 3)
    return *(_QWORD *)v0;
  else
    return 0;
}

id UniformParameters.Value.colorValue.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  if (*(_BYTE *)(v0 + 64) != 5)
    return 0;
  v1 = *(id *)v0;
  v2 = *(id *)v0;
  return v1;
}

uint64_t UniformParameters.Value.float2x2Value.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = v0[64];
  if (v1 == 6)
    return *(_QWORD *)v0;
  else
    return 0;
}

void UniformParameters.Value.float3x3Value.getter(uint64_t a1@<X8>)
{
  __int128 *v1;
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *((unsigned __int8 *)v1 + 64);
  v3 = 0uLL;
  v4 = 0uLL;
  v5 = 0uLL;
  if (v2 == 7)
  {
    v4 = v1[1];
    v5 = v1[2];
    v3 = *v1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = v2 != 7;
}

void UniformParameters.Value.float4x4Value.getter(uint64_t a1@<X8>)
{
  __int128 *v1;
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *((unsigned __int8 *)v1 + 64);
  v3 = 0uLL;
  v4 = 0uLL;
  v5 = 0uLL;
  v6 = 0uLL;
  if (v2 == 8)
  {
    v5 = v1[2];
    v6 = v1[3];
    v3 = *v1;
    v4 = v1[1];
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 64) = v2 != 8;
}

uint64_t UniformParameters.Value.BOOLValue.getter()
{
  _BYTE *v0;

  if (v0[64] == 9)
    return *v0 & 1;
  else
    return 2;
}

double UniformParameters.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unsigned __int8 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  _OWORD v12[4];
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned __int8 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 v23;

  strcpy((char *)&v19, "customParams.");
  HIWORD(v19) = -4864;
  String.append(_:)(*(Swift::String *)&a1);
  v5 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  Material.subscript.getter(v19, *((uint64_t *)&v19 + 1), v5, (uint64_t)&v14);
  if (v18 == 255)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12[0] = v14;
    v12[1] = v15;
    v12[2] = v16;
    v12[3] = v17;
    v13 = v18;
    MaterialParameters.Value.init(_:)((uint64_t)v12);
    swift_bridgeObjectRelease();
    v6 = v23;
    if (v23 != 255)
    {
      v7 = v22;
      v8 = v21;
      v9 = v20;
      v10 = v19;
      v14 = v19;
      v15 = v20;
      v16 = v21;
      v17 = v22;
      v18 = v23;
      outlined copy of MaterialParameters.Value((id)v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
      UniformParameters.Value.init(_:)((uint64_t)&v14);
      outlined consume of MaterialParameters.Value?((void *)v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v7, *((uint64_t *)&v7 + 1), v6);
      return result;
    }
  }
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 64) = -1;
  return result;
}

double key path getter for UniformParameters.subscript(_:) : UniformParameters@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  char v3;
  __int128 v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  char v10;

  UniformParameters.subscript.getter(*a1, (uint64_t)v7);
  v3 = v10;
  v4 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = *(double *)&v8;
  v6 = v9;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v6;
  *(_BYTE *)(a2 + 64) = v3;
  return result;
}

void key path setter for UniformParameters.subscript(_:) : UniformParameters(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  id v13[8];
  unsigned __int8 v14;
  Swift::String v15;

  v3 = (void *)a3[1];
  v12 = *a3;
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v6 = *(void **)(a1 + 24);
  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v10 = *(void **)(a1 + 48);
  v9 = *(void **)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 64);
  v13[0] = *(id *)a1;
  v13[1] = v4;
  v13[2] = v5;
  v13[3] = v6;
  v13[4] = v7;
  v13[5] = v8;
  v13[6] = v10;
  v13[7] = v9;
  v14 = v11;
  swift_bridgeObjectRetain();
  outlined copy of UniformParameters.Value?(v13[0], (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v10, (uint64_t)v9, v11);
  v15._countAndFlagsBits = v12;
  v15._object = v3;
  UniformParameters.subscript.setter((uint64_t)v13, v15);
}

void UniformParameters.subscript.setter(uint64_t a1, Swift::String a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;

  v3 = v2;
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 64);
  strcpy((char *)&v40, "customParams.");
  HIWORD(v40) = -4864;
  String.append(_:)(a2);
  swift_bridgeObjectRelease();
  v26 = *((_QWORD *)&v40 + 1);
  v27 = v40;
  if (v10 == 255)
  {
    v17 = *(_QWORD *)(v2 + 24);
    v18 = *(_QWORD *)(v2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v3, *(_QWORD *)(v3 + 24));
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v44 = 19;
    Material.subscript.setter((uint64_t)&v40, v27, v26, v17, v18);
  }
  else
  {
    v22 = v4;
    *(_QWORD *)&v34 = v4;
    *((_QWORD *)&v34 + 1) = v5;
    *(_QWORD *)&v35 = v6;
    *((_QWORD *)&v35 + 1) = v7;
    v23 = v7;
    v24 = v9;
    *(_QWORD *)&v36 = v8;
    *((_QWORD *)&v36 + 1) = v28;
    v37 = v9;
    v38 = v25;
    v39 = v10;
    outlined copy of UniformParameters.Value(v4, v5, v6, v7, v8, v28, v9, v25, v10);
    MaterialParameters.Value.init(_:)((uint64_t)&v34);
    v29 = v40;
    v30 = v41;
    v31 = v42;
    v32 = v43;
    v33 = v44;
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v29, (uint64_t)&v34);
    v20 = v35;
    v21 = v34;
    v19 = v36;
    v11 = v37;
    v12 = v38;
    v13 = v5;
    v14 = v39;
    v15 = *(_QWORD *)(v2 + 24);
    v16 = *(_QWORD *)(v2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v3, *(_QWORD *)(v3 + 24));
    v29 = v21;
    v30 = v20;
    v31 = v19;
    *(_QWORD *)&v32 = v11;
    *((_QWORD *)&v32 + 1) = v12;
    v33 = v14;
    Material.subscript.setter((uint64_t)&v29, v27, v26, v15, v16);
    outlined consume of UniformParameters.Value?(v22, v13, v6, v23, v8, v28, v24, v25, v10);
  }
}

void (*UniformParameters.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[10] = a3;
  v7[11] = v3;
  v7[9] = a2;
  UniformParameters.subscript.getter(a2, (uint64_t)v7);
  return UniformParameters.subscript.modify;
}

void UniformParameters.subscript.modify(void ***a1, char a2)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  unsigned __int8 v16;
  Swift::String v17;
  Swift::String v18;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v6 = (uint64_t)(*a1)[2];
  v5 = (uint64_t)(*a1)[3];
  v8 = (uint64_t)(*a1)[4];
  v7 = (uint64_t)(*a1)[5];
  v10 = (uint64_t)(*a1)[6];
  v9 = (*a1)[7];
  v11 = *((_BYTE *)*a1 + 64);
  v12 = (*a1)[10];
  v14 = (uint64_t)(*a1)[9];
  v15[0] = v3;
  v15[1] = v4;
  v15[2] = v6;
  v15[3] = v5;
  v15[4] = v8;
  v15[5] = v7;
  v15[6] = v10;
  v15[7] = v9;
  v16 = v11;
  if ((a2 & 1) != 0)
  {
    v13 = (uint64_t)v9;
    swift_bridgeObjectRetain();
    outlined copy of UniformParameters.Value?(v3, v4, v6, v5, v8, v7, v10, v13, v11);
    v17._countAndFlagsBits = v14;
    v17._object = v12;
    UniformParameters.subscript.setter((uint64_t)v15, v17);
    outlined consume of UniformParameters.Value?(*v2, (uint64_t)v2[1], (uint64_t)v2[2], (uint64_t)v2[3], (uint64_t)v2[4], (uint64_t)v2[5], (uint64_t)v2[6], (uint64_t)v2[7], *((_BYTE *)v2 + 64));
  }
  else
  {
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = v14;
    v18._object = v12;
    UniformParameters.subscript.setter((uint64_t)v15, v18);
  }
  free(v2);
}

uint64_t static MaterialParameters.Texture.Sampler.== infix(_:_:)()
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialParameters.Texture.Sampler()
{
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t specialized static MaterialParameters.Texture.== infix(_:_:)(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint8x8_t v7;
  id v8;
  id v9;
  int v10;
  uint16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 16);
  a3.i32[0] = *(_DWORD *)(a1 + 24);
  v7 = (uint8x8_t)vmovl_u8(a3).u64[0];
  v13 = (int16x4_t)v7;
  v7.i32[0] = *(_DWORD *)(a2 + 24);
  v12 = (int16x4_t)vmovl_u8(v7).u64[0];
  if (*(_QWORD *)a1)
  {
    v8 = *(id *)a1;
    swift_retain();
  }
  else
  {
    swift_retain();
    v8 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  swift_release();
  if (v5)
  {
    v9 = v5;
    swift_retain();
  }
  else
  {
    swift_retain();
    v9 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  swift_release();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v10 = static NSObject.== infix(_:_:)();

  v11 = (uint16x4_t)vcltz_s16(vshl_n_s16(vceq_s16(v13, v12), 0xFuLL));
  v11.i16[0] = vminv_u16(v11);
  return v10 & v11.i32[0] & (v4 == v6);
}

void specialized static MaterialParameters.Value.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21BD03FEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  id v27;
  char v28;
  void *v30;
  uint8x8_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v38;
  _QWORD v39[3];
  __int16 v40;
  char v41;
  char v42;
  _QWORD v43[3];
  __int16 v44;
  char v45;
  char v46;

  if (v13)
  {
    v23 = v9;
    v27 = v8;
    swift_retain();
    outlined copy of MaterialParameters.Value(a1, v23, v19, v16, a5, a6, v18, a8, v13);
    outlined release of (MaterialParameters.Value, MaterialParameters.Value)(v21 - 256);
    v28 = 0;
  }
  else
  {
    v43[0] = v8;
    v43[1] = v10;
    v43[2] = v20;
    v44 = v12;
    v45 = BYTE2(v12);
    v46 = BYTE3(v12);
    v39[0] = a1;
    v39[1] = v9;
    v39[2] = v19;
    v40 = v16;
    v41 = BYTE2(v16);
    v42 = BYTE3(v16);
    v30 = v8;
    v38 = v9;
    v33 = v10;
    outlined copy of MaterialParameters.Value(a1, v9, v19, v16, a5, a6, v18, a8, 0);
    v32 = v30;
    outlined copy of MaterialParameters.Value(v30, v33, v20, v12, v14, v11, v17, v15, 0);
    outlined copy of MaterialParameters.Value(v30, v33, v20, v12, v14, v11, v17, v15, 0);
    outlined copy of MaterialParameters.Value(a1, v38, v19, v16, a5, a6, v18, a8, 0);
    v28 = specialized static MaterialParameters.Texture.== infix(_:_:)((uint64_t)v43, (uint64_t)v39, v31);
    outlined release of (MaterialParameters.Value, MaterialParameters.Value)(v21 - 256);
    outlined consume of MaterialParameters.Value(a1, v38, v19, v16, a5, a6, v18, a8, 0);
    outlined consume of MaterialParameters.Value(v32, v33, v20, v12, v14, v11, v17, v15, 0);
  }
  return v28 & 1;
}

id outlined copy of UniformParameters.Value(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 5)
    return result;
  if (!a9)
    return (id)swift_retain();
  return result;
}

void outlined consume of UniformParameters.Value?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    outlined consume of UniformParameters.Value(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void outlined consume of UniformParameters.Value(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 5)
  {

  }
  else if (!a9)
  {
    swift_release();
  }
}

id outlined copy of UniformParameters.Value?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return outlined copy of UniformParameters.Value(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

void sub_21BD04990(id *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  v5 = *a1;

  *a2 = v3;
}

uint64_t sub_21BD049D0()
{
  return 0;
}

uint64_t sub_21BD049E8()
{
  return 0;
}

uint64_t sub_21BD04A00()
{
  return 0;
}

ValueMetadata *type metadata accessor for MaterialParameters()
{
  return &type metadata for MaterialParameters;
}

uint64_t initializeWithCopy for MaterialParameters.Texture(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MaterialParameters.Texture(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  return a1;
}

uint64_t assignWithTake for MaterialParameters.Texture(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialParameters.Texture(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialParameters.Texture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameters.Texture()
{
  return &type metadata for MaterialParameters.Texture;
}

ValueMetadata *type metadata accessor for MaterialParameters.Texture.Sampler()
{
  return &type metadata for MaterialParameters.Texture.Sampler;
}

ValueMetadata *type metadata accessor for MaterialParameters.Handle()
{
  return &type metadata for MaterialParameters.Handle;
}

uint64_t type metadata accessor for MaterialParameters.Handle.SharedHandle()
{
  return objc_opt_self();
}

uint64_t destroy for MaterialParameters.Value(uint64_t a1, uint64_t a2)
{
  return destroy for MaterialParameters.Value(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of MaterialParameters.Value);
}

uint64_t initializeWithCopy for MaterialParameters.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of MaterialParameters.Value);
}

uint64_t *assignWithCopy for MaterialParameters.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of MaterialParameters.Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of MaterialParameters.Value);
}

__n128 __swift_memcpy65_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for MaterialParameters.Value(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MaterialParameters.Value(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of MaterialParameters.Value);
}

uint64_t getEnumTagSinglePayload for MaterialParameters.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEE && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 238);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x12)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialParameters.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xED)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 238;
    if (a3 >= 0xEE)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xEE)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameters.Value()
{
  return &type metadata for MaterialParameters.Value;
}

ValueMetadata *type metadata accessor for MaterialParameters.Metadata()
{
  return &type metadata for MaterialParameters.Metadata;
}

ValueMetadata *type metadata accessor for UniformParameters()
{
  return &type metadata for UniformParameters;
}

uint64_t destroy for UniformParameters.Value(uint64_t a1, uint64_t a2)
{
  return destroy for MaterialParameters.Value(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of UniformParameters.Value);
}

uint64_t destroy for MaterialParameters.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
}

uint64_t initializeWithCopy for UniformParameters.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of UniformParameters.Value);
}

uint64_t initializeWithCopy for MaterialParameters.Value(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v13 = *((_BYTE *)a2 + 64);
  a4(*a2, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_BYTE *)(a1 + 64) = v13;
  return a1;
}

uint64_t *assignWithCopy for UniformParameters.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of UniformParameters.Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of UniformParameters.Value);
}

uint64_t *assignWithCopy for MaterialParameters.Value(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v25;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = *((_BYTE *)a2 + 64);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  v19 = a1[4];
  v20 = a1[5];
  v21 = a1[6];
  v22 = a1[7];
  v23 = *((_BYTE *)a1 + 64);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  *((_BYTE *)a1 + 64) = v14;
  LOBYTE(v25) = v23;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v25);
  return a1;
}

uint64_t *assignWithTake for UniformParameters.Value(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MaterialParameters.Value(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of UniformParameters.Value);
}

uint64_t *assignWithTake for MaterialParameters.Value(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v19;

  v6 = *(_BYTE *)(a2 + 64);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v12 = a1[5];
  v13 = a1[6];
  v14 = a1[7];
  v15 = *((_BYTE *)a1 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v17;
  *((_BYTE *)a1 + 64) = v6;
  v19 = v15;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniformParameters.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 239);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x11)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UniformParameters.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 239;
    if (a3 >= 0xEF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xEF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for UniformParameters.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t destructiveInjectEnumTag for UniformParameters.Value(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UniformParameters.Value()
{
  return &type metadata for UniformParameters.Value;
}

uint64_t outlined release of (MaterialParameters.Value, MaterialParameters.Value)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(void **)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_BYTE *)(a1 + 144);
  outlined consume of MaterialParameters.Value(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of MaterialParameters.Value(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void static AudioResource.Normalization._proto_dynamic(targetLUFS:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
}

void static AudioResource.Normalization._proto_static(targetLUFS:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t specialized unsafeAssumeOnEngineQueue<A>(debugFileName:debugLineNum:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  char isEscapingClosureAtFileLocation;
  uint64_t v18;

  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for __ServiceLocator();
  v12 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v13 = *(_QWORD *)(v12 + 24);
  swift_unownedRetainStrong();
  swift_release();
  v14 = *(id *)(v13 + 32);
  swift_release();
  *v11 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5610], v8);
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  a4();
  if (v5)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_7;
  return result;
}

uint64_t one-time initialization function for default()
{
  int32x2_t *v0;
  uint64_t result;

  type metadata accessor for PhysicsMaterialResource();
  v0 = (int32x2_t *)swift_allocObject();
  v0[4] = 0;
  v0[2] = vdup_n_s32(0x3F4CCCCDu);
  v0[3].i32[0] = 1061997773;
  result = PhysicsMaterialResource.makeCoreAsset()();
  static PhysicsMaterialResource.default = (uint64_t)v0;
  return result;
}

uint64_t static PhysicsMaterialResource.generate(friction:restitution:)(float a1, float a2)
{
  uint64_t v4;

  type metadata accessor for PhysicsMaterialResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 32) = 0;
  *(float *)(v4 + 16) = a1;
  *(float *)(v4 + 20) = a1;
  *(float *)(v4 + 24) = a2;
  PhysicsMaterialResource.makeCoreAsset()();
  return v4;
}

uint64_t static PhysicsMaterialResource.default.getter()
{
  if (one-time initialization token for default != -1)
    swift_once();
  return swift_retain();
}

float PhysicsMaterialResource.__staticFriction.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 16);
}

float PhysicsMaterialResource.__dynamicFriction.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 20);
}

float PhysicsMaterialResource.__restitution.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 24);
}

uint64_t PhysicsMaterialResource.coreAsset.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  if (v2 && (REAssetHandleIsLoaded() & 1) != 0)
    return v2;
  type metadata accessor for __ServiceLocator();
  v3 = static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v8);
  swift_release();
  v4 = v9;
  v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v6 = REAssetManagerPhysicsMaterialAssetCreate2();
  if (v6)
  {
    v2 = v6;
    *(_QWORD *)(v1 + 32) = v6;
    return v2;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PhysicsMaterialResource.deinit()
{
  uint64_t v0;

  specialized unsafeAssumeOnEngineQueue<A>(debugFileName:debugLineNum:_:)(0xD000000000000083, 0x800000021BE8F990, 54, (void (*)(void))partial apply for closure #1 in PhysicsMaterialResource.deinit, v0);
  return v0;
}

uint64_t closure #1 in PhysicsMaterialResource.deinit()
{
  PhysicsMaterialResource.coreAsset.getter();
  REAssetSetSwiftObject();
  PhysicsMaterialResource.coreAsset.getter();
  return RERelease();
}

uint64_t PhysicsMaterialResource.__deallocating_deinit()
{
  uint64_t v0;

  specialized unsafeAssumeOnEngineQueue<A>(debugFileName:debugLineNum:_:)(0xD000000000000083, 0x800000021BE8F990, 54, (void (*)(void))partial apply for closure #1 in PhysicsMaterialResource.deinit, v0);
  return swift_deallocClassInstance();
}

uint64_t PhysicsMaterialResource.makeCoreAsset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for __ServiceLocator();
  v1 = static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)v5);
  swift_release();
  v2 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  result = REAssetManagerPhysicsMaterialAssetCreate2();
  if (result)
  {
    *(_QWORD *)(v0 + 32) = result;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static PhysicsMaterialResource.generate(staticFriction:dynamicFriction:restitution:)(float a1, float a2, float a3)
{
  uint64_t v6;

  type metadata accessor for PhysicsMaterialResource();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 32) = 0;
  *(float *)(v6 + 16) = a1;
  *(float *)(v6 + 20) = a2;
  *(float *)(v6 + 24) = a3;
  PhysicsMaterialResource.makeCoreAsset()();
  return v6;
}

uint64_t type metadata accessor for PhysicsMaterialResource()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in PhysicsMaterialResource.deinit()
{
  return closure #1 in PhysicsMaterialResource.deinit();
}

void PhysicsMaterialResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t PhysicsMaterialResource.addToLoadRequest(_:)()
{
  PhysicsMaterialResource.coreAsset.getter();
  return REAssetLoadRequestAddAsset();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance PhysicsMaterialResource()
{
  PhysicsMaterialResource.coreAsset.getter();
  return REAssetLoadRequestAddAsset();
}

float sub_21BD058A8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *a1;
  swift_beginAccess();
  result = *(float *)(v3 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_21BD058EC(int *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_DWORD *)(v3 + 16) = v2;
  return result;
}

float sub_21BD05934@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *a1;
  swift_beginAccess();
  result = *(float *)(v3 + 20);
  *a2 = result;
  return result;
}

uint64_t sub_21BD05978(int *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_DWORD *)(v3 + 20) = v2;
  return result;
}

float sub_21BD059C0@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *a1;
  swift_beginAccess();
  result = *(float *)(v3 + 24);
  *a2 = result;
  return result;
}

uint64_t sub_21BD05A04(int *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_DWORD *)(v3 + 24) = v2;
  return result;
}

uint64_t method lookup function for PhysicsMaterialResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PhysicsMaterialResource.__staticFriction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PhysicsMaterialResource.__dynamicFriction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PhysicsMaterialResource.__restitution.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t sub_21BD05A7C()
{
  return swift_deallocObject();
}

uint64_t CameraControls.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CameraControls.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CameraControls.rawValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void static CameraControls.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static CameraControls.tilt.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CameraControls.pan.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static CameraControls.orbit.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

void static CameraControls.dolly.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void CameraControls.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static CameraControls.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int CameraControls.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CameraControls and conformance CameraControls()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraControls and conformance CameraControls;
  if (!lazy protocol witness table cache variable for type CameraControls and conformance CameraControls)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CameraControls, &type metadata for CameraControls);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraControls and conformance CameraControls);
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControls()
{
  return &type metadata for CameraControls;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t j;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[10];
  _BYTE v21[96];

  v8 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a1 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  j = 0;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (j << 6); ; i = __clz(__rbit64(v18)) + (j << 6))
  {
    outlined init with copy of GeometricPin(*(_QWORD *)(a1 + 48) + 80 * i, (uint64_t)v21);
    outlined init with take of GeometricPin((uint64_t)v21, (uint64_t)v20);
    if (v20[1] == a2 && v20[2] == a3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_release();
      outlined init with take of GeometricPin((uint64_t)v20, (uint64_t)a4);
      return swift_bridgeObjectRelease();
    }
    result = outlined destroy of GeometricPin((uint64_t)v20);
    if (v11)
      goto LABEL_4;
LABEL_5:
    v17 = j + 1;
    if (__OFADD__(j, 1))
      break;
    if (v17 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++j;
    if (v18)
      goto LABEL_19;
    j = v17 + 1;
    if (v17 + 1 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * j);
    if (v18)
      goto LABEL_19;
    j = v17 + 2;
    if (v17 + 2 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * j);
    if (v18)
      goto LABEL_19;
    j = v17 + 3;
    if (v17 + 3 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * j);
    if (v18)
      goto LABEL_19;
    v19 = v17 + 4;
    if (v19 >= v12)
    {
LABEL_26:
      swift_release();
      a4[3] = 0u;
      a4[4] = 0u;
      a4[1] = 0u;
      a4[2] = 0u;
      *a4 = 0u;
      return swift_bridgeObjectRelease();
    }
    v18 = *(_QWORD *)(v8 + 8 * v19);
    for (j = v19; !v18; ++v19)
    {
      j = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_29;
      if (j >= v12)
        goto LABEL_26;
      v18 = *(_QWORD *)(v8 + 8 * j);
    }
LABEL_19:
    v11 = (v18 - 1) & v18;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void static GeometricPinsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2023;
}

void GeometricPinsComponent.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4B08];
}

uint64_t GeometricPinsComponent.pins.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeometricPinsComponent.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;

  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v6, a1, a2, a3);
  return swift_bridgeObjectRelease();
}

double GeometricPinsComponent.removePin(named:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  double result;
  _QWORD v8[10];
  _BYTE v9[96];
  _OWORD v10[5];

  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v6, a1, a2, v10);
  swift_bridgeObjectRelease();
  outlined init with copy of GeometricPin?((uint64_t)v10, (uint64_t)v8);
  if (v8[2])
  {
    outlined init with take of GeometricPin((uint64_t)v8, (uint64_t)v9);
    specialized Set._Variant.remove(_:)((uint64_t)v9, a3);
    outlined destroy of GeometricPin((uint64_t)v9);
    outlined destroy of GeometricPin?((uint64_t)v10);
  }
  else
  {
    outlined destroy of GeometricPin?((uint64_t)v10);
    outlined destroy of GeometricPin?((uint64_t)v8);
    result = 0.0;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t outlined init with copy of GeometricPin?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometricPin?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t GeometricPinsComponent.set(pin:)(uint64_t a1)
{
  uint64_t *v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  _BYTE v5[80];
  _OWORD v6[5];

  outlined init with copy of GeometricPin(a1, (uint64_t)v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *v1;
  *v1 = 0x8000000000000000;
  specialized _NativeSet.update(with:isUnique:)((uint64_t)v5, isUniquelyReferenced_nonNull_native, v6);
  *v1 = v4;
  swift_bridgeObjectRelease();
  return outlined destroy of GeometricPin?((uint64_t)v6);
}

uint64_t static GeometricPinsComponent.__fromCore(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  _BYTE v18[80];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[88];
  uint64_t v27;

  v27 = MEMORY[0x24BEE4B08];
  result = REPinComponentGetPinCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    if (result)
    {
      v5 = 0;
      do
      {
        v17 = v3;
        REPinComponentGetPinNameAtIndex();
        v9 = String.init(cString:)();
        v11 = v10;
        REPinComponentGetPinOffsetPoseAtIndex();
        v15 = v12;
        HIDWORD(v13) = v17;
        v16 = v13;
        if (REPinComponentIsSkeletalJointPinAtIndex())
        {
          REPinComponentGetSkeletalJointNameAtIndex();
          v6 = String.init(cString:)();
          v8 = v7;
          swift_weakInit();
          v22 = 0;
          v23 = 0;
          v24 = v16;
          v25 = v15;
          swift_weakAssign();
          v20 = v9;
          v21 = v11;
          swift_bridgeObjectRelease();
          v22 = v6;
          v23 = v8;
        }
        else
        {
          swift_weakInit();
          v22 = 0;
          v23 = 0;
          v24 = v16;
          v25 = v15;
          swift_weakAssign();
          v20 = v9;
          v21 = v11;
          swift_bridgeObjectRelease();
          v22 = 0;
          v23 = 0;
        }
        outlined init with take of GeometricPin((uint64_t)v19, (uint64_t)v26);
        outlined init with copy of GeometricPin((uint64_t)v26, (uint64_t)v18);
        specialized Set._Variant.insert(_:)((uint64_t)v19, (uint64_t)v18);
        outlined destroy of GeometricPin((uint64_t)v19);
        result = outlined destroy of GeometricPin((uint64_t)v26);
        ++v5;
        v3 = HIDWORD(v16);
      }
      while (v4 != v5);
      v14 = v27;
    }
    else
    {
      v14 = MEMORY[0x24BEE4B08];
    }
    *a1 = v14;
  }
  return result;
}

uint64_t GeometricPinsComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  void (*v21)(char *, uint64_t);
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[96];

  v3 = type metadata accessor for String.Encoding();
  v28 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = *v1;
  v27 = v6;
  REPinComponentRemoveAllPins();
  v8 = *(_QWORD *)(v7 + 56);
  v24 = v7 + 56;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v25 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v25)
      return swift_release();
    v19 = *(_QWORD *)(v24 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v25)
        return swift_release();
      v19 = *(_QWORD *)(v24 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v25)
          return swift_release();
        v19 = *(_QWORD *)(v24 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    outlined init with copy of GeometricPin(*(_QWORD *)(v7 + 48) + 80 * v17, (uint64_t)v37);
    outlined init with take of GeometricPin((uint64_t)v37, (uint64_t)v32);
    v30 = v33;
    v31 = v34;
    swift_bridgeObjectRetain();
    static String.Encoding.utf8.getter();
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.cString(using:)();
    v21 = *(void (**)(char *, uint64_t))(v28 + 8);
    v21(v5, v3);
    swift_bridgeObjectRelease();
    if (v36)
    {
      v30 = v35;
      v31 = v36;
      static String.Encoding.utf8.getter();
      StringProtocol.cString(using:)();
      v21(v5, v3);
      REPoseIdentity();
      v15 = v14;
      HIDWORD(v15) = HIDWORD(v29);
      v29 = v15;
      REPinCreateExt();
      swift_bridgeObjectRelease();
    }
    else
    {
      REPoseIdentity();
      v23 = v22;
      HIDWORD(v23) = HIDWORD(v26);
      v26 = v23;
      REPinCreateExt();
    }
    swift_bridgeObjectRelease();
    REPinComponentAddPin();
    RERelease();
    result = outlined destroy of GeometricPin((uint64_t)v32);
  }
  v20 = v18 + 3;
  if (v20 >= v25)
    return swift_release();
  v19 = *(_QWORD *)(v24 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v25)
      return swift_release();
    v19 = *(_QWORD *)(v24 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance GeometricPinsComponent(_DWORD *a1@<X8>)
{
  *a1 = 2023;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

double specialized Set._Variant.remove(_:)@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  _BYTE v24[72];
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  v5 = *v2;
  v6 = a1[3];
  v27 = a1[2];
  v28 = v6;
  v29 = a1[4];
  v7 = a1[1];
  v25 = *a1;
  v26 = v7;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v24);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      v13 = v12 + 80 * v10;
      v14 = *(_QWORD *)v13 == a1->i64[0] && *(float *)(v13 + 8) == a1->f32[2];
      v15 = v14 && *(float *)(v13 + 12) == a1->f32[3];
      if (v15
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 48), a1[3]), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 64), a1[4])), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 32), a1[2]), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 16), a1[1])))) & 0x80000000) != 0)
      {
        break;
      }
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_16;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v2;
    v25.i64[0] = *v2;
    *v2 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v17 = v25.i64[0];
    }
    v18 = *(_QWORD *)(v17 + 48) + 80 * v10;
    v19 = *(_OWORD *)(v18 + 16);
    v20 = *(_OWORD *)(v18 + 32);
    v21 = *(_OWORD *)(v18 + 48);
    v22 = *(_OWORD *)(v18 + 64);
    *(_QWORD *)a2 = *(_QWORD *)v18;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(v18 + 8);
    *(_OWORD *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v20;
    *(_OWORD *)(a2 + 48) = v21;
    *(_OWORD *)(a2 + 64) = v22;
    specialized _NativeSet._delete(at:)(v10);
    *v2 = v25.i64[0];
    swift_bridgeObjectRelease();
    *(_BYTE *)(a2 + 80) = 0;
  }
  else
  {
LABEL_16:
    result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 80) = 1;
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v7 + 8 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v7 + 8 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v13 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v10 = v13;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[10];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      outlined init with copy of GeometricPin(*(_QWORD *)(v6 + 48) + 80 * v9, (uint64_t)v15);
      v11 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v15, a1);
      outlined destroy of GeometricPin((uint64_t)v15);
      if (v11)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    v15[0] = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v14 = v15[0];
    }
    outlined init with take of GeometricPin(*(_QWORD *)(v14 + 48) + 80 * v9, (uint64_t)a2);
    specialized _NativeSet._delete(at:)(v9);
    *v3 = v15[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    result = swift_bridgeObjectRelease();
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))specialized _NativeSet.copy(), a2);
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))specialized _NativeSet.copy(), a2);
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = result & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)a3 = 0;
    v15 = 1;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v7 + 48);
  if (*(_QWORD *)(v11 + 8 * v10) != a1)
  {
    v12 = ~v9;
    do
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_9;
    }
    while (*(_QWORD *)(v11 + 8 * v10) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v3;
  v16 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v14 = v16;
  }
  *(_QWORD *)a3 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v10);
  specialized _NativeSet._delete(at:)(v10);
  *v3 = v16;
  result = swift_bridgeObjectRelease();
  v15 = 0;
LABEL_10:
  *(_BYTE *)(a3 + 8) = v15;
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  _BYTE v27[72];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48) + 80 * v6;
        v11 = *(_QWORD *)v10;
        v13 = *(_DWORD *)(v10 + 8);
        v12 = *(_DWORD *)(v10 + 12);
        v23 = *(__n128 *)(v10 + 16);
        v24 = *(__n128 *)(v10 + 32);
        v25 = *(__n128 *)(v10 + 48);
        v26 = *(__n128 *)(v10 + 64);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        if ((v13 & 0x7FFFFFFF) != 0)
          v14 = v13;
        else
          v14 = 0;
        Hasher._combine(_:)(v14);
        if ((v12 & 0x7FFFFFFF) != 0)
          v15 = v12;
        else
          v15 = 0;
        Hasher._combine(_:)(v15);
        specialized SIMD.hash(into:)(v27, v23);
        specialized SIMD.hash(into:)(v27, v24);
        specialized SIMD.hash(into:)(v27, v25);
        specialized SIMD.hash(into:)(v27, v26);
        v16 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v16 < v9)
            goto LABEL_5;
        }
        else if (v16 >= v9)
        {
          goto LABEL_17;
        }
        if (v2 >= (uint64_t)v16)
        {
LABEL_17:
          v17 = *(_QWORD *)(v3 + 48);
          v18 = (char *)(v17 + 80 * v2);
          v19 = (char *)(v17 + 80 * v6);
          if (v2 != v6 || (v2 = v6, v18 >= v19 + 80))
          {
            memmove(v18, v19, 0x50uLL);
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _BYTE v18[8];

  v2 = v1;
  v3 = result;
  v4 = *v1;
  v5 = *v1 + 56;
  v6 = -1 << *(_BYTE *)(*v1 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    v8 = ~v6;
    swift_retain();
    v9 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (v9 + 1) & v8;
      while (1)
      {
        outlined init with copy of GeometricPin(*(_QWORD *)(v4 + 48) + 80 * v7, (uint64_t)v18);
        Hasher.init(_seed:)();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        outlined destroy of GeometricPin((uint64_t)v18);
        v12 = v11 & v8;
        if (v3 >= (uint64_t)v10)
          break;
        if (v12 < v10)
          goto LABEL_11;
LABEL_12:
        if (v3 < (uint64_t)v7 || *(_QWORD *)(v4 + 48) + 80 * v3 >= *(_QWORD *)(v4 + 48) + 80 * v7 + 80)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v13 = v3 == v7;
          v3 = v7;
          if (v13)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        v3 = v7;
LABEL_6:
        v7 = (v7 + 1) & v8;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_16;
      }
      if (v12 < v10)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v12)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_16:
    *(_QWORD *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v14 = *v2;
  v15 = *(_QWORD *)(*v2 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    ++*(_DWORD *)(v14 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet.update(with:isUnique:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _BYTE v32[80];

  v4 = v3;
  v8 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    do
    {
      outlined init with copy of GeometricPin(*(_QWORD *)(v8 + 48) + 80 * v11, (uint64_t)v32);
      v13 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v32, a1);
      outlined destroy of GeometricPin((uint64_t)v32);
      if (v13)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(*v3 + 16);
  v15 = !v13;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(*v3 + 24);
  v31 = a3;
  if (v17 < v16 || (a2 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v17 >= v16)
      {
        specialized _NativeSet.copy()();
        if (!v13)
          goto LABEL_11;
        goto LABEL_26;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v20 = *v3;
    Hasher.init(_seed:)();
    String.hash(into:)();
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v20 + 32);
    v11 = v21 & ~v22;
    v18 = v11 >> 6;
    v19 = 1 << v11;
    if (((1 << v11) & *(_QWORD *)(v20 + 56 + 8 * (v11 >> 6))) == 0)
    {
LABEL_22:
      if (v13)
      {
LABEL_30:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      goto LABEL_23;
    }
    v23 = ~v22;
    while (1)
    {
      outlined init with copy of GeometricPin(*(_QWORD *)(v20 + 48) + 80 * v11, (uint64_t)v32);
      v24 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v32, a1);
      outlined destroy of GeometricPin((uint64_t)v32);
      if (v24)
        break;
      v11 = (v11 + 1) & v23;
      v18 = v11 >> 6;
      v19 = 1 << v11;
      if ((*(_QWORD *)(v20 + 56 + 8 * (v11 >> 6)) & (1 << v11)) == 0)
        goto LABEL_22;
    }
    if (!v13)
      goto LABEL_30;
    goto LABEL_26;
  }
  if (!v13)
  {
LABEL_11:
    v18 = v11 >> 6;
    v19 = 1 << v11;
LABEL_23:
    v25 = *v4;
    *(_QWORD *)(*v4 + 8 * v18 + 56) |= v19;
    result = outlined init with take of GeometricPin(a1, *(_QWORD *)(v25 + 48) + 80 * v11);
    v27 = *(_QWORD *)(v25 + 16);
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      *(_QWORD *)(v25 + 16) = v29;
      v31[3] = 0u;
      v31[4] = 0u;
      v31[1] = 0u;
      v31[2] = 0u;
      *v31 = 0u;
      return result;
    }
    goto LABEL_29;
  }
LABEL_26:
  v30 = *v4;
  outlined init with take of GeometricPin(*(_QWORD *)(*v4 + 48) + 80 * v11, (uint64_t)v31);
  return outlined init with take of GeometricPin(a1, *(_QWORD *)(v30 + 48) + 80 * v11);
}

ValueMetadata *type metadata accessor for GeometricPinsComponent()
{
  return &type metadata for GeometricPinsComponent;
}

void Entity.ConfigurationCatalog.USDConfigurationReaderError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of Entity.ConfigurationCatalog.USDConfigurationReaderError(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_21BD0774C + 4 * byte_21BE76C50[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD0774C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v5 - 96) = 0;
  *(_QWORD *)(v5 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 96) = v4 + 19;
  *(_QWORD *)(v5 - 88) = 0x800000021BE8FC10;
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 11815;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v5 - 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v8;
}

void sub_21BD07A64()
{
  JUMPOUT(0x21BD07A3CLL);
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Entity.ConfigurationCatalog.USDConfigurationReaderError;
  if (!type metadata singleton initialization cache for Entity.ConfigurationCatalog.USDConfigurationReaderError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Error in Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  return lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
      case 5u:
        v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        v11 = a2[2];
        v12 = a2[3];
        a1[2] = v11;
        a1[3] = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        v15 = a2[4];
        v16 = a2[5];
        a1[4] = v15;
        a1[5] = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 1:
    case 2:
    case 5:
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for Entity.ConfigurationCatalog.USDConfigurationReaderError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
    case 2u:
    case 5u:
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[2];
      v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      v12 = a2[4];
      v13 = a2[5];
      a1[4] = v12;
      a1[5] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for Entity.ConfigurationCatalog.USDConfigurationReaderError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Entity.ConfigurationCatalog.USDConfigurationReaderError((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for Entity.ConfigurationCatalog.USDConfigurationReaderError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Entity.ConfigurationCatalog.USDConfigurationReaderError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Entity.ConfigurationCatalog.USDConfigurationReaderError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v5 = v3;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a2;
  swift_defaultActor_initialize();
  type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer();
  v9 = swift_allocObject();
  Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.init()();
  *(_QWORD *)(v5 + 240) = v9;
  *(_QWORD *)(v5 + 128) = a1;
  *(_QWORD *)(v5 + 136) = a2;
  swift_unknownObjectRetain();
  v10 = a1;
  v11 = (id)RIOImportSessionGetStage();
  *(_QWORD *)(v4 + 56) = v11;
  if (v11)
  {
    v20 = a3;
    *(_QWORD *)(v4 + 64) = RIOPxrUsdStageCopySessionLayer();
    *(_QWORD *)(v4 + 72) = RIOPxrUsdEditTargetCreateWithLayer();
    RIOPxrUsdStageSetEditTarget();
    v12 = RIOPxrUsdStageCopyDefaultPrim();
    *(_QWORD *)(v4 + 80) = v12;
    v13 = (void *)RIOPxrUsdObjectCopyPath();
    v14 = (void *)RIOPxrSdfPathCopyString();

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    *(_QWORD *)(v5 + 112) = v15;
    *(_QWORD *)(v5 + 120) = v17;
    *(_QWORD *)(v4 + 16) = MEMORY[0x24BEE4AF8];
    static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(v12, v4 + 16);
    v18 = *(_QWORD *)(v4 + 16);
    type metadata accessor for Entity.ConfigurationCatalog.ConfigurationMapCache();
    swift_allocObject();
    *(_QWORD *)(v5 + 232) = Entity.ConfigurationCatalog.ConfigurationMapCache.init(configurationCollectionCaches:)(v18);
    outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v20, v5 + 144);
    return swift_task_switch();
  }
  else
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_release();
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader();
    swift_defaultActor_destroy();

    swift_unknownObjectRelease();
    outlined destroy of BodyTrackingComponent?(a3, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    swift_deallocPartialClassInstance();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *(void **)(v0 + 72);
  v3 = *(void **)(v0 + 56);
  v2 = *(void **)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(void **)(v0 + 24);

  swift_unknownObjectRelease();
  outlined destroy of BodyTrackingComponent?(v4, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

void static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;

  if (RIOPxrUsdPrimHasVariantSets())
  {
    RIOPxrUsdPrimCopyVariantSets();
    if (RIOPxrUsdVariantSetsCopySetNames())
      static Array._forceBridgeFromObjectiveC(_:result:)();
    else
      __break(1u);
    __break(1u);
  }
  else
  {
    v4 = (void *)RIOPxrUsdPrimCopyChildren();
    type metadata accessor for RIOPxrUsdObjectRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    v5 = MEMORY[0x24BEE4AF8];
    if (MEMORY[0x24BEE4AF8] >> 62)
      goto LABEL_15;
    v6 = *(_QWORD *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      v7 = 4;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x220769770](v7 - 4, v5) : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(v8, a2);

        if (!v2)
        {
          ++v7;
          if (v10 != v6)
            continue;
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[45] = a3;
  v4[46] = v3;
  v4[43] = a1;
  v4[44] = a2;
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t result;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;

  outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(*(_QWORD *)(v0 + 360), v0 + 104);
  if (*(_QWORD *)(v0 + 104) != 1)
  {
    v42 = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 64) = v42;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 184);
    v43 = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 32) = v43;
    v2 = *(_QWORD *)(v0 + 352);
    if (v2)
      goto LABEL_3;
LABEL_50:
    v5 = 0;
    goto LABEL_52;
  }
  outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(*(_QWORD *)(v0 + 368) + 144, v0 + 16);
  outlined destroy of BodyTrackingComponent?(v0 + 104, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v2 = *(_QWORD *)(v0 + 352);
  if (!v2)
    goto LABEL_50;
LABEL_3:
  v46 = v0;
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, MEMORY[0x24BEE4AF8]);
  v5 = (_QWORD *)result;
  v6 = 0;
  v47 = v2 + 64;
  v7 = -1 << *(_BYTE *)(v2 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 64);
  v48 = (unint64_t)(63 - v7) >> 6;
  v49 = v2;
  v54 = (_QWORD *)result;
  if (!v9)
    goto LABEL_8;
LABEL_7:
  v52 = (v9 - 1) & v9;
  v53 = v6;
  v10 = __clz(__rbit64(v9)) | (v6 << 6);
  while (2)
  {
    v15 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v50 = *v15;
    v51 = v15[1];
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v10);
    v17 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0, MEMORY[0x24BEE4AF8]);
    v18 = (_QWORD *)result;
    v19 = 0;
    v20 = *(_QWORD *)(v16 + 64);
    v55 = v16 + 64;
    v57 = v16;
    v21 = -1 << *(_BYTE *)(v16 + 32);
    if (-v21 < 64)
      v22 = ~(-1 << -(char)v21);
    else
      v22 = -1;
    v23 = v22 & v20;
    v56 = (unint64_t)(63 - v21) >> 6;
    if ((v22 & v20) != 0)
    {
LABEL_26:
      v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v25 = v24 | (v19 << 6);
      goto LABEL_41;
    }
    while (1)
    {
      v26 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v26 >= v56)
        goto LABEL_45;
      v27 = *(_QWORD *)(v55 + 8 * v26);
      ++v19;
      if (!v27)
      {
        v19 = v26 + 1;
        if (v26 + 1 >= v56)
          goto LABEL_45;
        v27 = *(_QWORD *)(v55 + 8 * v19);
        if (!v27)
        {
          v19 = v26 + 2;
          if (v26 + 2 >= v56)
            goto LABEL_45;
          v27 = *(_QWORD *)(v55 + 8 * v19);
          if (!v27)
            break;
        }
      }
LABEL_40:
      v23 = (v27 - 1) & v27;
      v25 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_41:
      v29 = 16 * v25;
      v30 = (uint64_t *)(*(_QWORD *)(v57 + 48) + v29);
      v31 = *v30;
      v32 = v30[1];
      v33 = (uint64_t *)(*(_QWORD *)(v57 + 56) + v29);
      v34 = *v33;
      v35 = v33[1];
      v36 = v18[2];
      v37 = v18[3];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      if (v36 >= v37 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v36 + 1, 1, v18);
        v18 = (_QWORD *)result;
      }
      v18[2] = v36 + 1;
      v38 = &v18[4 * v36];
      v38[4] = v31;
      v38[5] = v32;
      v38[6] = v34;
      v38[7] = v35;
      if (v23)
        goto LABEL_26;
    }
    v28 = v26 + 3;
    if (v28 >= v56)
    {
LABEL_45:
      result = swift_release();
      v5 = v54;
      v40 = v54[2];
      v39 = v54[3];
      if (v40 >= v39 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v54);
        v5 = (_QWORD *)result;
      }
      v9 = v52;
      v6 = v53;
      v5[2] = v40 + 1;
      v41 = &v5[3 * v40];
      v41[4] = v50;
      v41[5] = v51;
      v41[6] = v18;
      v2 = v49;
      v54 = v5;
      if (!v52)
      {
LABEL_8:
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_55;
        if (v11 < v48)
        {
          v12 = *(_QWORD *)(v47 + 8 * v11);
          v13 = v6 + 1;
          if (v12)
            goto LABEL_21;
          v13 = v6 + 2;
          if (v6 + 2 < v48)
          {
            v12 = *(_QWORD *)(v47 + 8 * v13);
            if (v12)
              goto LABEL_21;
            v13 = v6 + 3;
            if (v6 + 3 < v48)
            {
              v12 = *(_QWORD *)(v47 + 8 * v13);
              if (v12)
                goto LABEL_21;
              v14 = v6 + 4;
              if (v6 + 4 < v48)
              {
                v12 = *(_QWORD *)(v47 + 8 * v14);
                if (!v12)
                {
                  while (1)
                  {
                    v13 = v14 + 1;
                    if (__OFADD__(v14, 1))
                      goto LABEL_56;
                    if (v13 >= v48)
                      goto LABEL_51;
                    v12 = *(_QWORD *)(v47 + 8 * v13);
                    ++v14;
                    if (v12)
                      goto LABEL_21;
                  }
                }
                v13 = v6 + 4;
LABEL_21:
                v52 = (v12 - 1) & v12;
                v53 = v13;
                v10 = __clz(__rbit64(v12)) + (v13 << 6);
                continue;
              }
            }
          }
        }
LABEL_51:
        v0 = v46;
        swift_release();
        v44 = swift_bridgeObjectRetain();
        Entity.ConfigurationCatalog.USDConfigurationReader.validateSpecification(_:)(v44);
        swift_bridgeObjectRelease();
LABEL_52:
        *(_QWORD *)(v0 + 376) = 0;
        *(_QWORD *)(v0 + 384) = v5;
        *(_QWORD *)(v0 + 392) = lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReader and conformance Entity.ConfigurationCatalog.USDConfigurationReader, v1, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReader);
        v45 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 400) = v45;
        *v45 = v0;
        v45[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
        return withCheckedContinuation<A>(isolation:function:_:)();
      }
      goto LABEL_7;
    }
    break;
  }
  v27 = *(_QWORD *)(v55 + 8 * v28);
  if (v27)
  {
    v19 = v28;
    goto LABEL_40;
  }
  while (1)
  {
    v19 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v19 >= v56)
      goto LABEL_45;
    v27 = *(_QWORD *)(v55 + 8 * v19);
    ++v28;
    if (v27)
      goto LABEL_40;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  if (v2)
  {
    v3 = swift_bridgeObjectRetain();
    Entity.ConfigurationCatalog.USDConfigurationReader.setSpecification(_:)(v3);
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(v2);
      swift_bridgeObjectRelease();
LABEL_10:
      v6 = *(_QWORD *)(v0 + 368);
      swift_willThrow();
      $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v6);
      outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 368) + 136);
  if (v4)
  {
    outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v0 + 16, v0 + 192);
    v5 = *(void (**)(uint64_t))(v0 + 192);
    if (v5 == (void (*)(uint64_t))1)
    {
      outlined destroy of BodyTrackingComponent?(v0 + 192, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    }
    else
    {
      swift_unknownObjectRetain();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v5);
      outlined destroy of Entity.ConfigurationCatalog.LoadOptions((_QWORD *)(v0 + 192));
      if (v5)
      {
        v5(v4);
        if (v1)
        {
          swift_unknownObjectRelease();
          outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v5);
          v2 = *(_QWORD *)(v0 + 384);
          if (!v2)
            goto LABEL_10;
          goto LABEL_3;
        }
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v5);
      }
      swift_unknownObjectRelease();
    }
  }
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 408) = v8;
  *v8 = v0;
  v8[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 424) = v1;
  *v1 = v0;
  v1[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  return Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:)(47, 0xE100000000000000);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 448) = *(_QWORD *)(v0 + 416);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 384);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 440);
    swift_retain();
    Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(v1);
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 368);
      swift_release_n();
      swift_bridgeObjectRelease();
      $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v3);
      outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  *(_QWORD *)(v0 + 280) = 0;
  *(_QWORD *)(v0 + 288) = 0;
  *(_QWORD *)(v0 + 296) = 0;
  *(_QWORD *)(v0 + 304) = 1;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Entity.finishUSDLoad(forEntity:withOptions:)
                                                + async function pointer to specialized static Entity.finishUSDLoad(forEntity:withOptions:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 456) = v5;
  *v5 = v0;
  v5[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  return v6(*(_QWORD *)(v0 + 432), v0 + 280);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 384);
  if (v1)
  {
    Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(v1);
    swift_bridgeObjectRelease();
  }
  v2 = *(_QWORD *)(v0 + 368);
  swift_willThrow();
  $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v2);
  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1 + 280;
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    swift_release();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(v2 + 280, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 472) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  swift_release();
  Entity.copy(to:recursive:)(v1, 1);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  swift_release();
  $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v1);
  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  swift_release();
  $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v1);
  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc();
  if (v1)
    v3[56] = v1;
  return swift_task_switch();
}

uint64_t $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  _QWORD v6[6];

  v1 = *(_QWORD *)(a1 + 240);
  v2 = *(NSObject **)(v1 + 24);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end();
  *(_QWORD *)(v3 + 24) = v1;
  v6[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v6[5] = v3;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor_18_4;
  v4 = _Block_copy(v6);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  return result;
}

void Entity.ConfigurationCatalog.USDConfigurationReader.validateSpecification(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *PrimIfNeeded;
  void *v12;
  void *v13;
  uint64_t v14;
  int HasVariantSet;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
    return;
  v1 = a1 + 32;
  v2 = 0;
  swift_bridgeObjectRetain();
  v19 = v1;
  while (1)
  {
    v3 = (uint64_t *)(v1 + 24 * v2);
    v5 = *v3;
    v4 = v3[1];
    v6 = (_QWORD *)v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (id)RIOImportSessionGetStage();
    if (!v7)
    {
      type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_11:
      swift_bridgeObjectRelease();
      return;
    }
    v8 = v7;
    v22 = v2;
    String.utf8CString.getter();
    v9 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) == 0)
    {
      type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      *v17 = v5;
      v17[1] = v4;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }
    v10 = (id)RIOPxrTfTokenEmpty();
    PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

    if ((RIOPxrUsdPrimHasVariantSets() & 1) == 0)
    {
      type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      *v18 = v5;
      v18[1] = v4;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }

    v12 = (void *)RIOPxrUsdPrimCopyVariantSets();
    v13 = v12;
    if (v6[2])
      break;

    swift_bridgeObjectRelease();
    v2 = v22 + 1;
    swift_bridgeObjectRelease();

    v1 = v19;
    if (v22 + 1 == v21)
      goto LABEL_11;
  }
  v20 = PrimIfNeeded;
  v14 = v6[5];
  v23 = v6[4];
  String.utf8CString.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HasVariantSet = RIOPxrUsdVariantSetsHasVariantSet();
  swift_release();
  if (HasVariantSet)
  {
    String.utf8CString.getter();
    RIOPxrUsdVariantSetsCopyVariantSet();
    swift_release();
    if (RIOPxrUsdVariantSetCopyVariantNames())
      static Array._forceBridgeFromObjectiveC(_:result:)();
    else
      __break(1u);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *v16 = v5;
    v16[1] = v4;
    v16[2] = v23;
    v16[3] = v14;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.setSpecification(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *PrimIfNeeded;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(result + 16);
  if (v16)
  {
    v17 = result + 32;
    swift_bridgeObjectRetain();
    v1 = 0;
    while (1)
    {
      v2 = (uint64_t *)(v17 + 24 * v1);
      v4 = *v2;
      v3 = v2[1];
      v5 = v2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6 = (id)RIOImportSessionGetStage();
      if (!v6)
      {
        type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
        lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v7 = v6;
      String.utf8CString.getter();
      v8 = (void *)RIOPxrSdfPathCreateFromCString();
      swift_release();
      if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) == 0)
      {
        type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
        lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
        swift_allocError();
        *v14 = v4;
        v14[1] = v3;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }
      v9 = (id)RIOPxrTfTokenEmpty();
      PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

      if ((RIOPxrUsdPrimHasVariantSets() & 1) == 0)
        break;
      swift_bridgeObjectRelease();

      v11 = (void *)RIOPxrUsdPrimCopyVariantSets();
      v12 = *(_QWORD *)(v5 + 16);
      if (v12)
      {
        v13 = v5 + 56;
        do
        {
          String.utf8CString.getter();
          String.utf8CString.getter();
          RIOPxrUsdVariantSetsSetSelection();
          swift_release();
          swift_release();
          v13 += 32;
          --v12;
        }
        while (v12);
      }
      ++v1;

      swift_bridgeObjectRelease();
      if (v1 == v16)
        return swift_bridgeObjectRelease();
    }
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *v15 = v4;
    v15[1] = v3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t result;
  char v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  result = specialized StrideThroughIterator.next()();
  if ((v6 & 1) == 0)
  {
    v20 = a1 + 32;
    v19 = v4;
    while (result < v4)
    {
      v8 = (uint64_t *)(v20 + 24 * result);
      v9 = *v8;
      v10 = v8[1];
      v11 = v8[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = Entity.ConfigurationCatalog.USDConfigurationReader.getPrimWithVariants(atPathString:)(v9, v10);
      swift_bridgeObjectRelease();
      if (v2)
        return swift_bridgeObjectRelease();
      v13 = 0;
      v14 = *(_QWORD *)(v11 + 16) - 1;
      v15 = *(_QWORD *)(v11 + 16) == 1;
      if (v14 > 0)
      {
LABEL_7:
        v16 = v14 - 1;
        goto LABEL_13;
      }
      while (1)
      {
        v17 = !v15;
        if (((v17 | v13) & 1) != 0)
          break;
        v16 = 0;
        v13 = 1;
LABEL_13:
        if ((unint64_t)v14 >= *(_QWORD *)(v11 + 16))
        {
          __break(1u);
          return swift_bridgeObjectRelease();
        }
        String.utf8CString.getter();
        v18 = (void *)RIOPxrUsdPrimCopyVariantSet();
        swift_release();
        RIOPxrUsdVariantSetClearVariantSelection();

        v14 = v16;
        v15 = v16 == 0;
        if (v16 > 0)
          goto LABEL_7;
      }
      swift_bridgeObjectRelease();

      result = specialized StrideThroughIterator.next()();
      v4 = v19;
      if ((v7 & 1) != 0)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized StrideThroughIterator.next()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int64_t v5;
  char v6;
  unint64_t v7;

  result = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 <= 0)
  {
    if (v3 < result)
      goto LABEL_3;
  }
  else if (result < v3)
  {
LABEL_3:
    v4 = __OFADD__(result, v2);
    v5 = result + v2;
    v6 = v4;
    v7 = 0x8000000000000000;
    if (v4)
      v5 = (v5 >> 63) ^ 0x8000000000000000;
    else
      v7 = 0;
    *(_QWORD *)(v0 + 24) = v7;
    *(_BYTE *)(v0 + 32) = v6 ^ 1;
    *(_QWORD *)(v0 + 40) = v5;
    return result;
  }
  if (result != v3
    || (*(_BYTE *)(v0 + 48) & 1) != 0
    || (*(_BYTE *)(v0 + 32) & 1) == 0 && *(_QWORD *)(v0 + 24) == 0x8000000000000000)
  {
    return 0;
  }
  *(_BYTE *)(v0 + 48) = 1;
  return result;
}

void *Entity.ConfigurationCatalog.USDConfigurationReader.getPrimWithVariants(atPathString:)(uint64_t a1, uint64_t a2)
{
  void *PrimIfNeeded;
  id v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (id)RIOImportSessionGetStage();
  if (v5)
  {
    v6 = v5;
    String.utf8CString.getter();
    v7 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) != 0)
    {
      v8 = (id)RIOPxrTfTokenEmpty();
      PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

      if ((RIOPxrUsdPrimHasVariantSets() & 1) != 0)
      {

      }
      else
      {
        type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
        lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
        swift_allocError();
        *v10 = a1;
        v10[1] = a2;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        swift_willThrow();

      }
    }
    else
    {
      PrimIfNeeded = (void *)type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      *v9 = a1;
      v9[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();

    }
  }
  else
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return PrimIfNeeded;
}

uint64_t closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_24_1;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOImportSessionSetSceneUpdatePassCompletion();
  _Block_release(v10);
  return RIOImportSessionUpdate();
}

uint64_t closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)()
{
  RIOImportSessionSetSceneUpdatePassCompletion();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:)()
{
  _QWORD *v0;
  uint64_t v1;

  v0[7] = *(_QWORD *)(v0[4] + 128);
  v0[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[9] = v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (id)RIOImportSessionGetStage();
  *(_QWORD *)(v0 + 80) = v1;
  if (v1)
  {
    v2 = v1;
    String.utf8CString.getter();
    v3 = (void *)RIOPxrSdfPathCreateFromCString();
    *(_QWORD *)(v0 + 88) = v3;
    swift_release();
    if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) != 0)
      return swift_task_switch();
    v6 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(v0 + 24);
    swift_release();
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *v7 = v6;
    v7[1] = v5;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();

  }
  else
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t EntityAtPrimPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  swift_release();
  EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
  if (!EntityAtPrimPath)
  {
    v5 = *(void **)(v0 + 80);
    v6 = *(void **)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (uint64_t (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError, (uint64_t)&protocol conformance descriptor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *v9 = v8;
    v9[1] = v7;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = EntityAtPrimPath;
  if ((id)REEntityGetSwiftObject())
  {
    v3 = *(void **)(v0 + 80);

    type metadata accessor for Entity();
    v4 = swift_dynamicCastClassUnconditional();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v11 = specialized static Entity.entityInfoType(_:)();
    v12 = *(void **)(v0 + 80);
    v13 = *(void **)(v0 + 88);
    if (v11)
    {
      v4 = (*(uint64_t (**)(void))(v11 + 232))();
      v14 = *(_QWORD *)(v4 + 16);
      swift_retain();
      MEMORY[0x22076D160](v14, 0);
      *(_QWORD *)(v4 + 16) = v2;
      MEMORY[0x22076D160](v2, v4);
      swift_release();
    }
    else
    {
      v4 = makeEntity(for:)(v2);
    }

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
  }
  __break(1u);
  return result;
}

void closure #1 in static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.utf8CString.getter();
  v2 = (void *)RIOPxrUsdVariantSetsCopyVariantSet();
  swift_release();
  if ((RIOPxrUsdVariantSetHasAuthoredVariantSelection() & 1) != 0)
  {
    v3 = (void *)RIOPxrUsdVariantSetCopyVariantSelection();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (RIOPxrUsdVariantSetCopyVariantNames())
    {
      v6 = v5;
      static Array._forceBridgeFromObjectiveC(_:result:)();
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {

    *a1 = 0;
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v7 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3, v6);
  v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:);
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_34;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a2, v4, v6);
    v9 = (unint64_t *)(a1 + 16);
    swift_beginAccess();
    v10 = *(_QWORD *)(a1 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 16) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
      *v9 = v10;
    }
    v13 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v10);
      *v9 = v10;
    }
    *(_QWORD *)(v10 + 16) = v13 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, v8, v4);
    return swift_endAccess();
  }
  else
  {
    result = CheckedContinuation.resume(returning:)();
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  _BYTE v7[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    swift_beginAccess();
    specialized Array.remove(at:)(0, (uint64_t)v5);
    swift_endAccess();
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v16 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v16);
  v15[2] = (char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v15[1] = type metadata accessor for OS_dispatch_queue();
  v17 = 0;
  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v12._object = (void *)0x800000021BE8FE10;
  v12._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v12);
  UUID.init()();
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, v8, MEMORY[0x24BDCEAB8]);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5758], v3);
  static DispatchQoS.unspecified.getter();
  v17 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_BYTE *)(v0 + 32) = 0;
  return v0;
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 144, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer()
{
  return objc_opt_self();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.getDefaultSourcePath() in conformance Entity.ConfigurationCatalog.USDConfigurationReader()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.configurationMapCache.getter in conformance Entity.ConfigurationCatalog.USDConfigurationReader()
{
  return swift_retain();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.loadEntity(into:withConfigurations:loadOptions:) in conformance Entity.ConfigurationCatalog.USDConfigurationReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  v8[45] = a3;
  v8[46] = v3;
  v8[43] = a1;
  v8[44] = a2;
  return swift_task_switch();
}

uint64_t sub_21BD0B508()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)()
{
  return partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(&demangling cache variable for type metadata for CheckedContinuation<(), Never>, closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:));
}

uint64_t sub_21BD0B528()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  return Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(a1);
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)(a1, v1);
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end()()
{
  uint64_t v0;

  return closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end()(v0);
}

uint64_t sub_21BD0B6F4()
{
  return swift_deallocObject();
}

uint64_t sub_21BD0B704()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t objectdestroyTm_6(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)()
{
  return partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(&demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(_QWORD, uint64_t))closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:));
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(uint64_t *a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

void *static AudioFileResource.load(named:in:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, void *a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  unsigned __int8 v6;
  unsigned __int8 v8;
  unsigned __int8 v9[8];
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  v6 = *a4;
  v9[0] = *a5;
  v9[1] = a6;
  v9[2] = 0;
  v10 = 0;
  v11 = -1;
  v12 = 0;
  v13 = -1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v8 = v6;
  return static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(a1, a2, a3, v9, &v8);
}

uint64_t static AudioFileResource.load(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  unsigned __int8 v6;
  unsigned __int8 v8;
  unsigned __int8 v9[8];
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  v6 = *a4;
  v9[0] = *a5;
  v9[1] = a6;
  v9[2] = 0;
  v10 = 0;
  v11 = -1;
  v12 = 0;
  v13 = -1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v8 = v6;
  return specialized static AudioFileResource.loadFromURL(contentsOf:withName:configuration:legacyInputMode:)(a1, a2, a3, v9, &v8);
}

uint64_t static AudioFileResource.loadAsync(named:in:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  unsigned __int8 v7[8];
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;

  v7[0] = *a5;
  v7[1] = a6;
  v7[2] = 0;
  v8 = 0;
  v9 = -1;
  v10 = 0;
  v11 = -1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  return static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(a1, a2, a3, v7);
}

uint64_t static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int128 v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90;
  int v91;
  unsigned __int8 v92;

  v5 = v4;
  v81 = a2;
  v82 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v13) = *a4;
  v15 = a4[1];
  v16 = a4[2];
  v17 = *((_QWORD *)a4 + 1);
  v18 = a4[16];
  v19 = *((_QWORD *)a4 + 3);
  v20 = a4[32];
  v21 = *((_QWORD *)a4 + 6);
  v22 = *((_DWORD *)a4 + 14);
  v23 = a4[60];
  v79 = *((_QWORD *)a4 + 5);
  v80 = v5;
  v74 = v15;
  v75 = v13;
  v73 = v16;
  v72 = v17;
  v71 = v18;
  v70 = v19;
  v91 = v20;
  v78 = v21;
  v76 = v23;
  v77 = v22;
  if (a3)
    v24 = a3;
  else
    v24 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v25 = v81;
  v69 = a3;
  v26 = v82;
  static AudioFileResource.url(forAssetNamed:in:)(v82, v25, v24, v10);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of URL?((uint64_t)v10);
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = v26;
    v27[3] = v25;
    v27[4] = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AudioFileResource>);
    v28 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AudioFileResource, Error>?>);
    v29 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v30 = swift_allocObject();
    *(_DWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v29 + 16) = v30;
    *(_QWORD *)(v29 + 24) = 0;
    *(_BYTE *)(v29 + 32) = -1;
    *(_QWORD *)(v28 + 16) = v29;
    v31 = (_QWORD *)swift_allocObject();
    v31[2] = partial apply for closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:);
    v31[3] = v27;
    v31[4] = v29;
    v31[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AudioFileResource, Error>);
    swift_allocObject();
    v32 = v69;
    swift_bridgeObjectRetain();
    swift_retain();
    *(_QWORD *)(v28 + 24) = Future.init(_:)();
    return v28;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v33 = URL.pathExtension.getter();
  v35 = v34;
  v36 = (void *)MEMORY[0x220768C3C](v26, v25);
  v37 = objc_msgSend(v36, sel_pathExtension);

  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  v41 = v33 == v38 && v35 == v40;
  v68 = v14;
  v67 = v11;
  v66 = v12;
  if (v41)
  {
    swift_bridgeObjectRelease_n();
    v43 = v82;
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = v82;
    if ((v42 & 1) == 0)
    {
      v44 = a3;
      *(_QWORD *)&v83 = v82;
      *((_QWORD *)&v83 + 1) = v81;
      swift_bridgeObjectRetain();
      v45._countAndFlagsBits = 46;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      v46 = *((_QWORD *)&v83 + 1);
      v47 = v83;
      v48 = URL.pathExtension.getter();
      v50 = v49;
      v83 = __PAIR128__(v46, v47);
      swift_bridgeObjectRetain();
      v51._countAndFlagsBits = v48;
      v51._object = v50;
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 = (void *)*((_QWORD *)&v83 + 1);
      v52 = v83;
      goto LABEL_14;
    }
  }
  v44 = a3;
  v54 = swift_bridgeObjectRetain();
  v52 = v43;
  v53 = (void *)v54;
LABEL_14:
  v28 = v74;
  v55 = v75;
  LOBYTE(v83) = v75;
  BYTE1(v83) = v74;
  v56 = v73;
  BYTE2(v83) = v73;
  v57 = v72;
  *((_QWORD *)&v83 + 1) = v72;
  v58 = v71;
  v84 = v71;
  v59 = v70;
  v85 = v70;
  v86 = v91;
  v60 = v80;
  v87 = v79;
  v88 = v78;
  v89 = v77;
  v90 = v76;
  v92 = 1;
  v61 = static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(v44, v52, v53, (unsigned __int8 *)&v83, &v92);
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v67);
    swift_bridgeObjectRelease();
  }
  else
  {
    v62 = v61;
    swift_bridgeObjectRelease();
    LOBYTE(v83) = v55;
    BYTE1(v83) = v28;
    BYTE2(v83) = v56;
    *((_QWORD *)&v83 + 1) = v57;
    v84 = v58;
    v85 = v59;
    v86 = v91;
    v87 = v79;
    v88 = v78;
    v89 = v77;
    v90 = v76;
    v92 = 1;
    v63 = (uint64_t)v68;
    v28 = specialized static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(v62, (uint64_t)v68, v82, v81, (__int128 *)&v83, &v92);
    RERelease();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v63, v67);
  }
  return v28;
}

uint64_t static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char *a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v32 = a2;
  v34 = a6;
  v33 = a3;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v30) = *a4;
  v13 = *a5;
  v14 = specialized static __ServiceLocator.shared.getter();
  v15 = *(_QWORD *)(v14 + 168);
  v35 = v14;
  v16 = *(void **)(v15 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  v20 = v31;
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19 + v17, v12, v9);
  v21 = v19 + v18;
  v22 = v33;
  *(_QWORD *)v21 = v32;
  *(_QWORD *)(v21 + 8) = v22;
  *(_BYTE *)(v21 + 16) = v13;
  *(_BYTE *)(v21 + 17) = v34;
  *(_BYTE *)(v21 + 18) = BYTE4(v30);
  v23 = v16;
  *(_QWORD *)(v19 + ((v18 + 26) & 0xFFFFFFFFFFFFFFF8)) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AudioFileResource>);
  v24 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AudioFileResource, Error>?>);
  v25 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v25 + 16) = v26;
  *(_QWORD *)(v25 + 24) = 0;
  *(_BYTE *)(v25 + 32) = -1;
  *(_QWORD *)(v24 + 16) = v25;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = partial apply for closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
  v27[3] = v19;
  v27[4] = v25;
  v27[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AudioFileResource, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v28 = v23;
  *(_QWORD *)(v24 + 24) = Future.init(_:)();
  return v24;
}

uint64_t closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, unsigned __int8 a10, void *a11)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(char);
  uint64_t (*v22)(void *, uint64_t (*)(char));
  void *v23;
  void (*v24)(char);
  uint64_t AssetRequest;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[3];
  void *v66;
  uint64_t (*v67)(char);
  uint64_t v68;
  uint64_t aBlock;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void *v72;
  void (*v73)(char);
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;

  v64 = a7;
  v62 = a5;
  v15 = a8 & 1;
  v55 = type metadata accessor for DispatchWorkItemFlags();
  v59 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v58 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DispatchQoS();
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v54 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for URL();
  v52 = *(_QWORD *)(v53 - 8);
  v18 = *(_QWORD *)(v52 + 64);
  MEMORY[0x24BDAC7A8](v53);
  v60 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  v61 = v19;
  a3 += 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a3, (uint64_t)&aBlock);
  outlined init with copy of __REAssetService(a3, (uint64_t)v65);
  v20 = v66;
  v21 = v67;
  __swift_project_boxed_opaque_existential_1(v65, (uint64_t)v66);
  v22 = (uint64_t (*)(void *, uint64_t (*)(char)))*((_QWORD *)v21 + 7);
  swift_retain();
  LOBYTE(v20) = v22(v20, v21);
  v23 = v72;
  v24 = v73;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v72);
  (*((void (**)(void *, void (*)(char)))v24 + 4))(v23, v24);
  AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = AssetRequest;
  if ((v20 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  v63 = a11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  LOBYTE(aBlock) = v15;
  *(_WORD *)((char *)&aBlock + 1) = a9 & 1;
  v70 = 0;
  LOBYTE(v71) = -1;
  v72 = 0;
  LOBYTE(v73) = -1;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 1;
  LOBYTE(v65[0]) = a10;
  swift_retain();
  v27 = v62;
  v28 = specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)(v62, a6, v64, (char *)&aBlock);
  v29 = v15;
  v30 = v52;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v59 = v28;
  v62 = v26;
  v32 = v53;
  v31(v60, v27, v53);
  v33 = (*(unsigned __int8 *)(v30 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v34 = v33 + v18;
  v35 = (v33 + v18 + 10) & 0xFFFFFFFFFFFFFFF8;
  v58 = (char *)a6;
  LODWORD(v56) = a10;
  LODWORD(v57) = v29;
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v59;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v38 + v33, v60, v32);
  v39 = (_BYTE *)(v38 + v34);
  *v39 = v56;
  v39[1] = v57;
  v39[2] = a9 & 1;
  v40 = v63;
  *(_QWORD *)(v38 + v35) = v63;
  v41 = (_QWORD *)(v38 + v36);
  v42 = v61;
  *v41 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v41[1] = v42;
  v43 = (_QWORD *)(v38 + v37);
  v44 = v64;
  *v43 = v58;
  v43[1] = v44;
  *(_QWORD *)(v38 + ((v37 + 23) & 0xFFFFFFFFFFFFFFF8)) = v62;
  v73 = partial apply for specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
  v74 = v38;
  v45 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v70 = 1107296256;
  v71 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v72 = &block_descriptor_22_2;
  v46 = _Block_copy(&aBlock);
  v47 = _Block_copy(v46);
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v47;
  v67 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v68 = v48;
  v65[0] = v45;
  v65[1] = 1107296256;
  v65[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v66 = &block_descriptor_28_2;
  v49 = _Block_copy(v65);
  swift_bridgeObjectRetain();
  swift_retain();
  v50 = v40;
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v49);
  _Block_release(v46);
  swift_release();
  REAssetLoadRequestAddAsset();
  return swift_release_n();
}

void specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(char a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  void *FailedMessage;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t aBlock;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  char v72;
  _QWORD v73[7];

  v54 = a8;
  v56 = a7;
  v63 = a12;
  v55 = a9;
  v62 = type metadata accessor for DispatchWorkItemFlags();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v58 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for DispatchQoS();
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v57 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v54 - v25;
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v54 - v25, a3, v20, v26);
    LOBYTE(aBlock) = a5 & 1;
    *(_WORD *)((char *)&aBlock + 1) = a6 & 1;
    v65 = 0;
    LOBYTE(v66) = -1;
    v67 = 0;
    LOBYTE(v68) = -1;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 1;
    LOBYTE(v73[0]) = a4;
    type metadata accessor for AudioFileResource();
    swift_allocObject();
    v30 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(a2, v27, 0, 0, (unsigned __int8 *)&aBlock, (unsigned __int8 *)v73);
    v31 = (_QWORD *)swift_allocObject();
    v32 = v55;
    v31[2] = v54;
    v31[3] = v32;
    v31[4] = v30;
    v68 = partial apply for closure #1 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
    v69 = v31;
    v33 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v65 = 1107296256;
    v66 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v67 = &block_descriptor_56_0;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v35 = v57;
    static DispatchQoS.unspecified.getter();
    v73[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v36 = v58;
    v37 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v35, v36, v34);
    _Block_release(v34);
    swift_release();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v37);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v61);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v23, a3, v20, v26);
    if (a11)
    {
      v29 = a11;
    }
    else
    {
      a10 = URL.lastPathComponent.getter();
      v29 = v38;
    }
    v39 = *(void (**)(char *, uint64_t))(v21 + 8);
    swift_bridgeObjectRetain();
    v39(v23, v20);
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v44 = (_QWORD *)swift_allocObject();
    v45 = v55;
    v44[2] = v54;
    v44[3] = v45;
    v44[4] = a10;
    v44[5] = v29;
    v44[6] = v41;
    v44[7] = v43;
    v68 = partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
    v69 = v44;
    v33 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v65 = 1107296256;
    v66 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v67 = &block_descriptor_34_0;
    v46 = _Block_copy(&aBlock);
    swift_retain();
    v47 = v57;
    static DispatchQoS.unspecified.getter();
    v73[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v48 = v58;
    v49 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v47, v48, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v61);
  }
  swift_release();
  RERelease();
  v68 = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  v69 = 0;
  aBlock = v33;
  v65 = 1107296256;
  v66 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v67 = &block_descriptor_37_1;
  v50 = _Block_copy(&aBlock);
  v51 = _Block_copy(v50);
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v51;
  v73[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v73[5] = v52;
  v73[0] = v33;
  v73[1] = 1107296256;
  v73[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v73[3] = &block_descriptor_44_1;
  v53 = _Block_copy(v73);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v53);
  _Block_release(v50);
}

void closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Swift::String v9;
  Swift::String v10;
  void *v11;
  _QWORD *v12;

  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a5;
  v10._object = a6;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
  v11 = (void *)swift_allocError();
  *v12 = a3;
  v12[1] = a4;
  a1(v11, 1);

}

uint64_t closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(void (*a1)(unint64_t *), uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v7;
  char v8;

  v7 = specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a3, a4, a5);
  v8 = 0;
  swift_retain();
  a1(&v7);
  return swift_release_n();
}

uint64_t closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];
  _QWORD aBlock[6];

  v45 = a8;
  v43 = a7;
  v42 = a6;
  v41 = a5;
  v48 = a3;
  v46 = a2;
  v44 = a9;
  v39 = a10;
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  v47 = a10 + 16;
  swift_beginAccess();
  v40 = *(_QWORD *)(a10 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 69) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v48;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v23 + v18, v16, v38);
  v24 = (_QWORD *)(v23 + v19);
  v25 = v42;
  *v24 = v41;
  v24[1] = v25;
  v26 = v23 + v20;
  v27 = v43;
  *(_OWORD *)(v26 + 45) = *(__int128 *)((char *)v43 + 45);
  v28 = v27[2];
  v29 = *v27;
  *(_OWORD *)(v26 + 16) = v27[1];
  *(_OWORD *)(v26 + 32) = v28;
  *(_OWORD *)v26 = v29;
  *(_BYTE *)(v26 + 61) = v45;
  *(_QWORD *)(v23 + v21) = v44;
  v30 = (_QWORD *)(v23 + v22);
  *v30 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v30[1] = v17;
  *(_QWORD *)(v23 + ((v22 + 23) & 0xFFFFFFFFFFFFFFF8)) = v39;
  aBlock[4] = partial apply for finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:);
  aBlock[5] = v23;
  v31 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_83;
  v32 = _Block_copy(aBlock);
  v33 = _Block_copy(v32);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v33;
  v49[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v49[5] = v34;
  v49[0] = v31;
  v49[1] = 1107296256;
  v49[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v49[3] = &block_descriptor_90;
  v35 = _Block_copy(v49);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of AudioMixGroup((uint64_t)v27);
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v35);
  swift_release();
  _Block_release(v32);
  swift_release();
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

void finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *FailedMessage;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  _BYTE v56[12];
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 aBlock;
  __int128 v70;
  _OWORD v71[2];
  _QWORD v72[6];

  v57 = a7;
  v59 = a5;
  v58 = a4;
  v60 = a3;
  v68 = a11;
  v62 = a10;
  v61 = a9;
  v64 = type metadata accessor for DispatchWorkItemFlags();
  v65 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v63 = &v56[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for DispatchQoS();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v17 = &v56[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v21 = &v56[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = MEMORY[0x24BDAC7A8](v22);
  v25 = &v56[-v23];
  if ((a1 & 1) != 0)
  {
    v26 = v61;
    v27 = v62;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v19 + 16))(&v56[-v23], v60, v18, v24);
    v28 = a6[1];
    aBlock = *a6;
    v29 = a6[2];
    v70 = v28;
    v71[0] = v29;
    *(_OWORD *)((char *)v71 + 13) = *(__int128 *)((char *)a6 + 45);
    LOBYTE(v72[0]) = v57;
    type metadata accessor for AudioFileResource();
    swift_allocObject();
    outlined retain of AudioMixGroup((uint64_t)a6);
    v30 = v59;
    swift_bridgeObjectRetain();
    v44 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(a2, v25, v58, v30, (unsigned __int8 *)&aBlock, (unsigned __int8 *)v72);
    swift_beginAccess();
    v45 = *(_QWORD *)(a8 + 24);
    swift_unownedRetainStrong();
    v46 = *(id *)(v45 + 32);
    swift_release();
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = v26;
    v47[3] = v27;
    v47[4] = v44;
    *(_QWORD *)&v71[0] = partial apply for closure #1 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
    *((_QWORD *)&v71[0] + 1) = v47;
    v48 = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v70 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v70 + 1) = &block_descriptor_118_0;
    v49 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v72[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v50 = v63;
    v51 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v17, v50, v49);
    _Block_release(v49);
    swift_release();

    (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v50, v51);
    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v17, v67);
    swift_release();
  }
  else
  {
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    swift_beginAccess();
    v34 = *(_QWORD *)(a8 + 24);
    swift_unownedRetainStrong();
    v35 = *(id *)(v34 + 32);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16))(v21, v60, v18);
    v36 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v37 = swift_allocObject();
    v38 = v62;
    *(_QWORD *)(v37 + 16) = v61;
    *(_QWORD *)(v37 + 24) = v38;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v19 + 32))(v37 + v36, v21, v18);
    v39 = (uint64_t *)(v37 + ((v20 + v36 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v39 = v59;
    v39[1] = v33;
    *(_QWORD *)&v71[0] = partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:);
    *((_QWORD *)&v71[0] + 1) = v37;
    v40 = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v70 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v70 + 1) = &block_descriptor_96;
    v41 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v72[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v42 = v63;
    v43 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v17, v42, v41);
    _Block_release(v41);

    (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v42, v43);
    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v17, v67);
    swift_release();
    v48 = v40;
  }
  swift_beginAccess();
  *(_QWORD *)&v71[0] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  *((_QWORD *)&v71[0] + 1) = 0;
  *(_QWORD *)&aBlock = v48;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v70 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  *((_QWORD *)&v70 + 1) = &block_descriptor_99;
  v52 = _Block_copy(&aBlock);
  v53 = _Block_copy(v52);
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = v53;
  v72[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v72[5] = v54;
  v72[0] = v48;
  v72[1] = 1107296256;
  v72[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v72[3] = &block_descriptor_106;
  v55 = _Block_copy(v72);
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v55);
  swift_release();
  _Block_release(v52);
}

void closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v13 = URL.path.getter();
  v14 = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a4;
  v10._object = a5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
  v11 = (void *)swift_allocError();
  *v12 = v13;
  v12[1] = v14;
  a1(v11, 1);

}

uint64_t sub_21BD0DB20()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadAsync(named:in:inputMode:loadingStrategy:shouldLoop:)(uint64_t (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = 1;
  return a1(&v3);
}

uint64_t sub_21BD0DB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_BYTE *)(v2 + v7 + 16), *(_BYTE *)(v2 + v7 + 17), *(_BYTE *)(v2 + v7 + 18), *(void **)(v2 + ((v7 + 26) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD0DCD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BD0DCF8()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)()
{
  return partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(1);
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t sub_21BD0DD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 10) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = (v5 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_BYTE *)(v1 + v5), *(_BYTE *)(v1 + v5 + 1), *(_BYTE *)(v1 + v5 + 2), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + v7 + 8), *(_QWORD *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD0DE84()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)()
{
  uint64_t v0;

  closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_21BD0DEC8()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t sub_21BD0DED4()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for closure #1 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)()
{
  return partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(0);
}

uint64_t sub_21BD0DEE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(void (*a1)(unint64_t *), uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t specialized static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, unsigned __int8 *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t AssetRequest;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[3];

  v44 = a4;
  v43 = a3;
  v39 = a2;
  v42 = a1;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a5[1];
  v51 = *a5;
  v52 = v12;
  v53[0] = a5[2];
  *(_OWORD *)((char *)v53 + 13) = *(__int128 *)((char *)a5 + 45);
  v41 = *a6;
  v13 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13 + 120, (uint64_t)v48);
  outlined init with copy of __REAssetService(v13 + 120, (uint64_t)v45);
  v15 = v46;
  v14 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 56);
  v40 = v13;
  swift_retain();
  LOBYTE(v14) = v16(v15, v14);
  v18 = v49;
  v17 = v50;
  __swift_project_boxed_opaque_existential_1(v48, v49);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
  AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = AssetRequest;
  if ((v14 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  v21 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  *(_QWORD *)(v21 + 16) = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v39, v8);
  v22 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = v8;
  v26 = (v24 + 69) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v27 + v22, v11, v25);
  v28 = (_QWORD *)(v27 + v23);
  v29 = v44;
  *v28 = v43;
  v28[1] = v29;
  v30 = v27 + v24;
  *(_OWORD *)(v30 + 45) = *(_OWORD *)((char *)v53 + 13);
  v31 = v53[0];
  v32 = v51;
  *(_OWORD *)(v30 + 16) = v52;
  *(_OWORD *)(v30 + 32) = v31;
  *(_OWORD *)v30 = v32;
  *(_BYTE *)(v30 + 61) = v41;
  *(_QWORD *)(v27 + v26) = v40;
  *(_QWORD *)(v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AudioFileResource>);
  v33 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AudioFileResource, Error>?>);
  v34 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = 0;
  *(_QWORD *)(v34 + 16) = v35;
  *(_QWORD *)(v34 + 24) = 0;
  *(_BYTE *)(v34 + 32) = -1;
  *(_QWORD *)(v33 + 16) = v34;
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = partial apply for closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:);
  v36[3] = v27;
  v36[4] = v34;
  v36[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AudioFileResource, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  outlined retain of AudioMixGroup((uint64_t)&v51);
  swift_retain();
  *(_QWORD *)(v33 + 24) = Future.init(_:)();
  return v33;
}

uint64_t sub_21BD0E298()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BD0E2BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), (__int128 *)(v2 + v8), *(unsigned __int8 *)(v2 + v8 + 61), *(_QWORD *)(v2 + ((v8 + 69) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v8 + 69) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD0E41C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 69) & 0xFFFFFFFFFFFFFFF8;
  finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), (__int128 *)(v1 + v6), *(unsigned __int8 *)(v1 + v6 + 61), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD0E590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(_QWORD *)v3, *(void **)(v3 + 8));
}

uint64_t sub_21BD0E66C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_21BD0E690()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t sub_21BD0E69C()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(v1 + 32), a1);
}

CGColorRef HasSpotLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  CGColorRef result;
  float v4;
  int v5;
  int v6;
  int v7;
  int v8;
  CGColor *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v15);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v9);
  swift_release();
  result = v9;
  if (v9)
  {
    v4 = v14;
    v6 = v12;
    v5 = v13;
    v8 = v10;
    v7 = v11;
  }
  else
  {
    result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v4 = 2.0;
    v5 = 1092616192;
    v6 = 1114636288;
    v7 = 1110704128;
    v8 = 1171433349;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v5;
  *(float *)(a1 + 24) = v4;
  return result;
}

float key path getter for HasSpotLight.light : <A>A@<S0>(uint64_t a1@<X8>)
{
  float result;
  uint64_t v3;
  __int128 v4;
  float v5;

  HasSpotLight.light.getter((uint64_t)&v3);
  result = v5;
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t key path setter for HasSpotLight.light : <A>A(uint64_t a1)
{
  int v1;
  id v2;
  void *v4;
  __int128 v5;
  int v6;

  v1 = *(_DWORD *)(a1 + 24);
  v4 = *(void **)a1;
  v5 = *(_OWORD *)(a1 + 8);
  v6 = v1;
  v2 = v4;
  return HasSpotLight.light.setter(&v4);
}

uint64_t HasSpotLight.light.setter(void **a1)
{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);

  swift_release();
  return v3(v5, 0);
}

void (*HasSpotLight.light.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[5] = a3;
  v7[6] = v3;
  v7[4] = a2;
  HasSpotLight.light.getter((uint64_t)v7);
  return HasSpotLight.light.modify;
}

void HasSpotLight.light.modify(void ***a1, char a2)
{
  id *v2;
  void *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v2 = *a1;
  v3 = **a1;
  v5 = *((_DWORD *)*a1 + 2);
  v4 = *((_DWORD *)*a1 + 3);
  v7 = *((_DWORD *)*a1 + 4);
  v6 = *((_DWORD *)*a1 + 5);
  v8 = *((_DWORD *)*a1 + 6);
  v10 = v3;
  v11 = v5;
  v12 = v4;
  v13 = v7;
  v14 = v6;
  v15 = v8;
  if ((a2 & 1) != 0)
  {
    v9 = v3;
    HasSpotLight.light.setter(&v10);

  }
  else
  {
    HasSpotLight.light.setter(&v10);
  }
  free(v2);
}

uint64_t HasSpotLight.shadow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Component;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v17);
  Component = REEntityGetComponent();
  if (Component)
  {
    v16 = Component;
    static SpotLightComponent.Shadow.__fromCore(_:)((uint64_t)&v10);
    result = swift_release();
    v5 = v14;
    v6 = v10 | ((unint64_t)v11 << 32);
    v7 = 0x100000000;
    if (v13)
      v8 = 0x100000000;
    else
      v8 = 0;
    v9 = v8 | v12;
    if (!v15)
      v7 = 0;
  }
  else
  {
    result = swift_release();
    v5 = 0;
    v7 = 0x100000000;
    v6 = 0x33F800000;
    v9 = 0x100000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 20) = BYTE4(v7);
  *(_DWORD *)(a1 + 16) = v7 | v5;
  return result;
}

uint64_t HasSpotLight.shadow.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();
  return v3(v5, 0);
}

void (*HasSpotLight.shadow.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  HasSpotLight.shadow.getter((uint64_t)v7);
  return HasSpotLight.shadow.modify;
}

void HasSpotLight.shadow.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4[2];
  int v5;
  char v6;

  v1 = *a1;
  v2 = (*a1)[1];
  v3 = *((unsigned int *)*a1 + 4) | ((unint64_t)*((unsigned __int8 *)*a1 + 20) << 32);
  v4[0] = **a1;
  v4[1] = v2;
  v5 = v3;
  v6 = BYTE4(v3);
  HasSpotLight.shadow.setter(v4);
  free(v1);
}

uint64_t sub_21BD0EC04()
{
  return 16;
}

__n128 sub_21BD0EC10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_21BD0EC1C@<D0>(uint64_t a1@<X8>)
{
  int v2;
  char v3;
  double result;
  __int128 v5;
  int v6;
  char v7;

  HasSpotLight.shadow.getter((uint64_t)&v5);
  v2 = v6;
  v3 = v7;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 20) = v3;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21BD0EC64(__int128 *a1)
{
  int v1;
  char v2;
  __int128 v4;
  int v5;
  char v6;

  v1 = *((_DWORD *)a1 + 4);
  v2 = *((_BYTE *)a1 + 20);
  v4 = *a1;
  v6 = v2;
  v5 = v1;
  return HasSpotLight.shadow.setter((uint64_t *)&v4);
}

uint64_t sub_21BD0ECA8()
{
  return 16;
}

__n128 sub_21BD0ECB4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void __swiftcall USDImportedScene.init(name:assetName:active:)(RealityFoundation::USDImportedScene *__return_ptr retstr, Swift::String name, Swift::String assetName, Swift::Bool active)
{
  retstr->name = name;
  retstr->assetName = assetName;
  retstr->active = active;
}

uint64_t initializeWithCopy for USDImportedScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for USDImportedScene(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for USDImportedScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for USDImportedScene(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for USDImportedScene(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for USDImportedScene()
{
  return &type metadata for USDImportedScene;
}

uint64_t dispatch thunk of USDImportService.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of USDImportService.canLoad(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of USDImportService.canLoad(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of USDImportService.load(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of USDImportService.loadAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

void static VideoPlayerComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3020;
}

float static VideoPlayerDefaults.defaultMaxGlowIntensity.getter()
{
  return 0.45;
}

uint64_t static VideoPlayerDefaults.== infix(_:_:)()
{
  return 1;
}

Swift::Int VideoPlayerDefaults.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoPlayerDefaults()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoPlayerDefaults()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

void VideoPlayerComponent.desiredViewingMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *VideoPlayerComponent.desiredViewingMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*VideoPlayerComponent.desiredViewingMode.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return VideoPlayerComponent.desiredViewingMode.modify;
}

uint64_t VideoPlayerComponent.desiredViewingMode.modify(uint64_t result)
{
  **(_BYTE **)result = *(_BYTE *)(result + 8);
  return result;
}

void VideoPlayerComponent.viewingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = 2 * (*(_BYTE *)(v1 + 116) != 1);
}

BOOL static VideoPlayerComponent.ImmersiveViewingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void VideoPlayerComponent.ImmersiveViewingMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int VideoPlayerComponent.ImmersiveViewingMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void VideoPlayerComponent.desiredImmersiveViewingMode.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void VideoPlayerComponent.desiredImmersiveViewingMode.modify()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void VideoPlayerComponent.immersiveViewingMode.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double VideoPlayerComponent.playerScreenSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double VideoPlayerComponent.screenVideoDimension.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t VideoPlayerComponent.isPassthroughTintingEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t VideoPlayerComponent.isPassthroughTintingEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

_BYTE *(*VideoPlayerComponent.isPassthroughTintingEnabled.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 24);
  return VideoPlayerComponent.isPassthroughTintingEnabled.modify;
}

_BYTE *VideoPlayerComponent.isPassthroughTintingEnabled.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 24) = result[8];
  return result;
}

float VideoPlayerComponent.maxGlowIntensity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 28);
}

void VideoPlayerComponent.maxGlowIntensity.setter(float a1)
{
  uint64_t v1;

  if (a1 <= 0.0)
    a1 = 0.0;
  if (a1 > 1.0)
    a1 = 1.0;
  *(float *)(v1 + 28) = a1;
}

float *(*VideoPlayerComponent.maxGlowIntensity.modify(uint64_t a1))(float *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 28);
  return VideoPlayerComponent.maxGlowIntensity.modify;
}

float *VideoPlayerComponent.maxGlowIntensity.modify(float *result)
{
  float v1;

  v1 = result[2];
  if (v1 <= 0.0)
    v1 = 0.0;
  if (v1 > 1.0)
    v1 = 1.0;
  *(float *)(*(_QWORD *)result + 28) = v1;
  return result;
}

id VideoPlayerComponent.avPlayer.getter()
{
  return (id)REVideoAssetGetAVPlayer();
}

uint64_t VideoPlayerComponent.VideoReceiverEndpointInfo.videoReceiverEndpoint.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t VideoPlayerComponent.VideoReceiverEndpointInfo.videoReceiverEndpointHash.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VideoPlayerComponent.VideoReceiverEndpointInfo.videoReceiverEndpointType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VideoPlayerComponent.videoReceiverEndpointInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_unknownObjectRetain();
}

__n128 VideoPlayerComponent.videoReceiverEndpointInfo.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_unknownObjectRelease();
  result = v4;
  v1[2] = v4;
  v1[3].n128_u64[0] = v2;
  return result;
}

uint64_t (*VideoPlayerComponent.videoReceiverEndpointInfo.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v1;
  swift_unknownObjectRetain();
  return VideoPlayerComponent.videoReceiverEndpointInfo.modify;
}

uint64_t VideoPlayerComponent.videoReceiverEndpointInfo.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = (_QWORD *)a1[3];
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v4[4] = v2;
    v4[5] = v3;
    v4[6] = v5;
    return swift_unknownObjectRelease();
  }
  else
  {
    result = swift_unknownObjectRelease();
    v4[4] = v2;
    v4[5] = v3;
    v4[6] = v5;
  }
  return result;
}

void VideoPlayerComponent.init(avPlayer:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  VideoPlayerComponent.init(avPlayer:)(a1, (uint64_t)&outlined read-only object #0 of VideoPlayerComponent.init(avPlayer:), (uint64_t)&outlined read-only object #1 of VideoPlayerComponent.init(avPlayer:), (uint64_t)&outlined read-only object #2 of VideoPlayerComponent.init(avPlayer:), (uint64_t (*)(uint64_t, id))MEMORY[0x24BE20898], a2);
}

void VideoPlayerComponent.init(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  v51 = 0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of VideoPlayerComponent.init(with:));
  v5 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of VideoPlayerComponent.init(with:));
  v7 = v6;
  v50 = 0;
  LODWORD(v46) = getpid();
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  v10 = v9;
  if (one-time initialization token for uniqueTokenGenerator != -1)
    swift_once();
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_65:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  v11 = dispatch thunk of CustomStringConvertible.description.getter();
  v13 = v12;
  v46 = v8;
  v47 = v10;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = HIBYTE(v10) & 0xF;
  v16 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v47) & 0xF;
  else
    v17 = v46 & 0xFFFFFFFFFFFFLL;
  if (!v17)
    goto LABEL_65;
  if ((v47 & 0x1000000000000000) != 0)
  {
    v19 = specialized _parseInteger<A, B>(ascii:radix:)(v8, v47, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    v21 = v44;
    goto LABEL_40;
  }
  if ((v47 & 0x2000000000000000) != 0)
  {
    v47 = v10 & 0xFFFFFFFFFFFFFFLL;
    if (v46 == 43)
    {
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v8) - 48) <= 9u)
        {
          v19 = (BYTE1(v8) - 48);
          if (v15 == 2)
            goto LABEL_39;
          if ((BYTE2(v8) - 48) <= 9u)
          {
            v19 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
            v25 = v15 - 3;
            if (v25)
            {
              v26 = (unsigned __int8 *)&v46 + 3;
              while (1)
              {
                v27 = *v26 - 48;
                if (v27 > 9)
                  goto LABEL_36;
                if (!is_mul_ok(v19, 0xAuLL))
                  goto LABEL_36;
                v23 = __CFADD__(10 * v19, v27);
                v19 = 10 * v19 + v27;
                if (v23)
                  goto LABEL_36;
                v21 = 0;
                ++v26;
                if (!--v25)
                  goto LABEL_40;
              }
            }
            goto LABEL_39;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v46 != 45)
      {
        if (v15 && (v8 - 48) <= 9u)
        {
          v19 = (v8 - 48);
          if (v15 == 1)
            goto LABEL_39;
          if ((BYTE1(v8) - 48) <= 9u)
          {
            v19 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
            v36 = v15 - 2;
            if (v36)
            {
              v37 = (unsigned __int8 *)&v46 + 2;
              while (1)
              {
                v38 = *v37 - 48;
                if (v38 > 9)
                  goto LABEL_36;
                if (!is_mul_ok(v19, 0xAuLL))
                  goto LABEL_36;
                v23 = __CFADD__(10 * v19, v38);
                v19 = 10 * v19 + v38;
                if (v23)
                  goto LABEL_36;
                v21 = 0;
                ++v37;
                if (!--v36)
                  goto LABEL_40;
              }
            }
            goto LABEL_39;
          }
        }
LABEL_36:
        v19 = 0;
LABEL_37:
        v21 = 1;
        goto LABEL_40;
      }
      if (v15)
      {
        if (v15 != 1)
        {
          v22 = BYTE1(v8) - 48;
          if ((BYTE1(v8) - 48) <= 9u)
          {
            v19 = 0;
            v23 = v22 == 0;
            v24 = -(uint64_t)v22;
            if (!v23)
              goto LABEL_37;
            if (v15 == 2)
            {
              v21 = 0;
              v19 = v24;
              goto LABEL_40;
            }
            v39 = BYTE2(v8) - 48;
            if ((BYTE2(v8) - 48) <= 9u && is_mul_ok(v24, 0xAuLL))
            {
              v40 = 10 * v24;
              v19 = v40 - v39;
              if (v40 >= v39)
              {
                v41 = v15 - 3;
                if (v41)
                {
                  v42 = (unsigned __int8 *)&v46 + 3;
                  while (1)
                  {
                    v43 = *v42 - 48;
                    if (v43 > 9)
                      goto LABEL_36;
                    if (!is_mul_ok(v19, 0xAuLL))
                      goto LABEL_36;
                    v23 = 10 * v19 >= v43;
                    v19 = 10 * v19 - v43;
                    if (!v23)
                      goto LABEL_36;
                    v21 = 0;
                    ++v42;
                    if (!--v41)
                      goto LABEL_40;
                  }
                }
LABEL_39:
                v21 = 0;
                goto LABEL_40;
              }
            }
          }
        }
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  if ((v46 & 0x1000000000000000) != 0)
    v18 = (unsigned __int8 *)((v47 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  v19 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v18, v16, 10);
  v21 = v20 & 1;
LABEL_40:
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
LABEL_41:
    v19 = arc4random();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of VideoPlayerComponent.init(with:));
  v45 = v28;
  type metadata accessor for __VideoResource();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 24) = MEMORY[0x24BEE4AF8];
  v30 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v30, (uint64_t)&v46);
  v31 = v48;
  v32 = v49;
  __swift_project_boxed_opaque_existential_1(&v46, v48);
  v33 = *(void (**)(uint64_t, uint64_t))(v32 + 32);
  swift_retain();
  v33(v31, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
  *(_QWORD *)(v29 + 16) = REAssetManagerVideoMemoryAssetCreateWithoutTarget();
  REAssetSetSwiftObject();
  swift_release();
  type metadata accessor for VideoPlayerController();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v19;
  if (one-time initialization token for sVPCNetworkSystemObserver != -1)
    swift_once();
  swift_retain();
  VPCNetworkSystemObserver.setupRENetworkCallbacks()();
  swift_release();

  v35 = v50;
  *(_BYTE *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v35;
  *(_DWORD *)(a2 + 28) = 1055286886;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v29;
  *(_QWORD *)(a2 + 64) = v34;
  *(_QWORD *)(a2 + 72) = v19;
  *(_DWORD *)(a2 + 80) = 65793;
  *(_BYTE *)(a2 + 84) = 0;
  *(_OWORD *)(a2 + 96) = v45;
  *(_DWORD *)(a2 + 112) = -1082130432;
  *(_BYTE *)(a2 + 116) = 0;
}

uint64_t static VideoPlayerComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t VideoAsset;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t Guid;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  char v21;
  char v22;
  unsigned __int8 v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  char EnableReflections;
  char ScreenRoundedCornerEnabled;
  char ScreenAspectRatioAnimationEnabled;
  char ScreenDeferAspectRatioTransitionToApp;
  char LowLatencyEnabled;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60[3];
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  int v67;
  char v68;

  VideoAsset = REVideoPlayerComponentGetVideoAsset();
  type metadata accessor for __VideoResource();
  if (VideoAsset)
  {
    v60[0] = VideoAsset;
    static __VideoResource.__fromCore(_:)(v60);
  }
  else
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 24) = MEMORY[0x24BEE4AF8];
    type metadata accessor for __ServiceLocator();
    v4 = static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)v60);
    v5 = v61;
    v6 = v62;
    __swift_project_boxed_opaque_existential_1(v60, v61);
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    *(_QWORD *)(v3 + 16) = REAssetManagerVideoMemoryAssetCreate();
    REAssetSetSwiftObject();
    swift_release();
  }
  v7 = swift_retain();
  VideoPlayerComponent.init(videoResource:)(v7, (uint64_t)v60);
  Guid = REVideoPlayerComponentGetGuid();
  v65 = Guid;
  if (Guid)
    goto LABEL_46;
  LODWORD(v58) = getpid();
  v9 = dispatch thunk of CustomStringConvertible.description.getter();
  v11 = v10;
  if (one-time initialization token for uniqueTokenGenerator != -1)
    swift_once();
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_70:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  v12 = dispatch thunk of CustomStringConvertible.description.getter();
  v14 = v13;
  v58 = v9;
  v59 = v11;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v9;
  v17 = HIBYTE(v11) & 0xF;
  v18 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0)
    v19 = HIBYTE(v59) & 0xF;
  else
    v19 = v58 & 0xFFFFFFFFFFFFLL;
  if (!v19)
    goto LABEL_70;
  if ((v59 & 0x1000000000000000) != 0)
  {
    Guid = specialized _parseInteger<A, B>(ascii:radix:)(v58, v59, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    v22 = v56;
    goto LABEL_44;
  }
  if ((v59 & 0x2000000000000000) != 0)
  {
    v59 = v11 & 0xFFFFFFFFFFFFFFLL;
    if (v58 == 43)
    {
      if (v17)
      {
        if (v17 != 1 && (BYTE1(v58) - 48) <= 9u)
        {
          Guid = (BYTE1(v58) - 48);
          if (v17 == 2)
            goto LABEL_43;
          if ((BYTE2(v58) - 48) <= 9u)
          {
            Guid = 10 * (BYTE1(v58) - 48) + (BYTE2(v58) - 48);
            v26 = v17 - 3;
            if (v26)
            {
              v27 = (unsigned __int8 *)&v58 + 3;
              while (1)
              {
                v28 = *v27 - 48;
                if (v28 > 9)
                  goto LABEL_40;
                if (!is_mul_ok(Guid, 0xAuLL))
                  goto LABEL_40;
                v24 = __CFADD__(10 * Guid, v28);
                Guid = 10 * Guid + v28;
                if (v24)
                  goto LABEL_40;
                v22 = 0;
                ++v27;
                if (!--v26)
                  goto LABEL_44;
              }
            }
            goto LABEL_43;
          }
        }
        goto LABEL_40;
      }
    }
    else
    {
      if (v58 != 45)
      {
        if (v17 && (v58 - 48) <= 9u)
        {
          Guid = (v58 - 48);
          if (v17 == 1)
            goto LABEL_43;
          if ((BYTE1(v58) - 48) <= 9u)
          {
            Guid = 10 * (v58 - 48) + (BYTE1(v58) - 48);
            v48 = v17 - 2;
            if (v48)
            {
              v49 = (unsigned __int8 *)&v58 + 2;
              while (1)
              {
                v50 = *v49 - 48;
                if (v50 > 9)
                  goto LABEL_40;
                if (!is_mul_ok(Guid, 0xAuLL))
                  goto LABEL_40;
                v24 = __CFADD__(10 * Guid, v50);
                Guid = 10 * Guid + v50;
                if (v24)
                  goto LABEL_40;
                v22 = 0;
                ++v49;
                if (!--v48)
                  goto LABEL_44;
              }
            }
            goto LABEL_43;
          }
        }
LABEL_40:
        Guid = 0;
LABEL_41:
        v22 = 1;
        goto LABEL_44;
      }
      if (v17)
      {
        if (v17 != 1)
        {
          v23 = BYTE1(v58) - 48;
          if ((BYTE1(v58) - 48) <= 9u)
          {
            Guid = 0;
            v24 = v23 == 0;
            v25 = -(uint64_t)v23;
            if (!v24)
              goto LABEL_41;
            if (v17 == 2)
            {
              v22 = 0;
              Guid = v25;
              goto LABEL_44;
            }
            v51 = BYTE2(v58) - 48;
            if ((BYTE2(v58) - 48) <= 9u && is_mul_ok(v25, 0xAuLL))
            {
              v52 = 10 * v25;
              Guid = v52 - v51;
              if (v52 >= v51)
              {
                v53 = v17 - 3;
                if (v53)
                {
                  v54 = (unsigned __int8 *)&v58 + 3;
                  while (1)
                  {
                    v55 = *v54 - 48;
                    if (v55 > 9)
                      goto LABEL_40;
                    if (!is_mul_ok(Guid, 0xAuLL))
                      goto LABEL_40;
                    v24 = 10 * Guid >= v55;
                    Guid = 10 * Guid - v55;
                    if (!v24)
                      goto LABEL_40;
                    v22 = 0;
                    ++v54;
                    if (!--v53)
                      goto LABEL_44;
                  }
                }
LABEL_43:
                v22 = 0;
                goto LABEL_44;
              }
            }
          }
        }
        goto LABEL_40;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  if ((v58 & 0x1000000000000000) != 0)
    v20 = (unsigned __int8 *)((v59 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  Guid = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v20, v18, 10);
  v22 = v21 & 1;
LABEL_44:
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
LABEL_45:
    Guid = arc4random();
LABEL_46:
  type metadata accessor for VideoPlayerController();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = Guid;
  swift_release();
  EnableReflections = REVideoPlayerComponentGetEnableReflections();
  ScreenRoundedCornerEnabled = REVideoPlayerComponentGetScreenRoundedCornerEnabled();
  ScreenAspectRatioAnimationEnabled = REVideoPlayerComponentGetScreenAspectRatioAnimationEnabled();
  ScreenDeferAspectRatioTransitionToApp = REVideoPlayerComponentGetScreenDeferAspectRatioTransitionToApp();
  REVideoPlayerComponentGetDesiredViewingMode();
  LowLatencyEnabled = REVideoPlayerComponentGetLowLatencyEnabled();
  REComponentGetEntity();
  REVideoPlayerStatusComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REVideoPlayerStatusComponentGetCurrentPlayerScreenSize();
    v36 = v35;
    REVideoPlayerStatusComponentGetCurrentPlayerScreenVideoDimension();
    v38 = v37;
    REVideoPlayerStatusComponentGetSafeZoneRadius();
    v40 = v39;
    REVideoPlayerStatusComponentGetCurrentSceneSize();
    v57 = v41;
    result = swift_release();
    v42 = v57;
  }
  else
  {
    result = swift_release();
    v36 = v60[1];
    v38 = v60[2];
    v42 = v66;
    v40 = v67;
  }
  v43 = v61;
  v44 = HIDWORD(v61);
  v45 = v63;
  v46 = v64;
  v47 = v68;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v36;
  *(_QWORD *)(a1 + 16) = v38;
  *(_BYTE *)(a1 + 24) = v43;
  *(_DWORD *)(a1 + 28) = v44;
  *(_OWORD *)(a1 + 32) = v62;
  *(_QWORD *)(a1 + 48) = v45;
  *(_QWORD *)(a1 + 56) = v46;
  *(_QWORD *)(a1 + 64) = v29;
  *(_QWORD *)(a1 + 72) = Guid;
  *(_BYTE *)(a1 + 80) = EnableReflections;
  *(_BYTE *)(a1 + 81) = ScreenRoundedCornerEnabled;
  *(_BYTE *)(a1 + 82) = ScreenAspectRatioAnimationEnabled;
  *(_BYTE *)(a1 + 83) = ScreenDeferAspectRatioTransitionToApp;
  *(_BYTE *)(a1 + 84) = LowLatencyEnabled;
  *(_OWORD *)(a1 + 96) = v42;
  *(_DWORD *)(a1 + 112) = v40;
  *(_BYTE *)(a1 + 116) = v47;
  return result;
}

uint64_t VideoPlayerComponent.init(videoResource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned __int8 v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;

  v43 = 0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of VideoPlayerComponent.init(videoResource:));
  v5 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of VideoPlayerComponent.init(videoResource:));
  v7 = v6;
  v42 = 0;
  LODWORD(v40) = getpid();
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  v10 = v9;
  if (one-time initialization token for uniqueTokenGenerator != -1)
    swift_once();
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_63:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  v11 = dispatch thunk of CustomStringConvertible.description.getter();
  v13 = v12;
  v40 = v8;
  v41 = v10;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v8;
  v16 = HIBYTE(v10) & 0xF;
  v17 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v41) & 0xF;
  else
    v18 = v40 & 0xFFFFFFFFFFFFLL;
  if (!v18)
    goto LABEL_63;
  if ((v41 & 0x1000000000000000) != 0)
  {
    v20 = specialized _parseInteger<A, B>(ascii:radix:)(v40, v41, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    v22 = v39;
    goto LABEL_40;
  }
  if ((v41 & 0x2000000000000000) == 0)
  {
    if ((v40 & 0x1000000000000000) != 0)
      v19 = (unsigned __int8 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v20 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v19, v17, 10);
    v22 = v21 & 1;
LABEL_40:
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
LABEL_42:
      result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of VideoPlayerComponent.init(videoResource:));
      v29 = v42;
      *(_BYTE *)a2 = v43;
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v7;
      *(_BYTE *)(a2 + 24) = v29;
      *(_DWORD *)(a2 + 28) = 1055286886;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = a1;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = v20;
      *(_DWORD *)(a2 + 80) = 65793;
      *(_BYTE *)(a2 + 84) = 0;
      *(_OWORD *)(a2 + 96) = v30;
      *(_DWORD *)(a2 + 112) = -1082130432;
      *(_BYTE *)(a2 + 116) = 0;
      return result;
    }
LABEL_41:
    v20 = arc4random();
    goto LABEL_42;
  }
  v41 = v10 & 0xFFFFFFFFFFFFFFLL;
  if (v40 == 43)
  {
    if (v16)
    {
      if (v16 != 1 && (BYTE1(v40) - 48) <= 9u)
      {
        v20 = (BYTE1(v40) - 48);
        if (v16 == 2)
          goto LABEL_39;
        if ((BYTE2(v40) - 48) <= 9u)
        {
          v20 = 10 * (BYTE1(v40) - 48) + (BYTE2(v40) - 48);
          v26 = v16 - 3;
          if (v26)
          {
            v27 = (unsigned __int8 *)&v40 + 3;
            while (1)
            {
              v28 = *v27 - 48;
              if (v28 > 9)
                goto LABEL_36;
              if (!is_mul_ok(v20, 0xAuLL))
                goto LABEL_36;
              v24 = __CFADD__(10 * v20, v28);
              v20 = 10 * v20 + v28;
              if (v24)
                goto LABEL_36;
              v22 = 0;
              ++v27;
              if (!--v26)
                goto LABEL_40;
            }
          }
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    if (v40 != 45)
    {
      if (v16 && (v40 - 48) <= 9u)
      {
        v20 = (v40 - 48);
        if (v16 == 1)
          goto LABEL_39;
        if ((BYTE1(v40) - 48) <= 9u)
        {
          v20 = 10 * (v40 - 48) + (BYTE1(v40) - 48);
          v31 = v16 - 2;
          if (v31)
          {
            v32 = (unsigned __int8 *)&v40 + 2;
            while (1)
            {
              v33 = *v32 - 48;
              if (v33 > 9)
                goto LABEL_36;
              if (!is_mul_ok(v20, 0xAuLL))
                goto LABEL_36;
              v24 = __CFADD__(10 * v20, v33);
              v20 = 10 * v20 + v33;
              if (v24)
                goto LABEL_36;
              v22 = 0;
              ++v32;
              if (!--v31)
                goto LABEL_40;
            }
          }
          goto LABEL_39;
        }
      }
LABEL_36:
      v20 = 0;
LABEL_37:
      v22 = 1;
      goto LABEL_40;
    }
    if (v16)
    {
      if (v16 != 1)
      {
        v23 = BYTE1(v40) - 48;
        if ((BYTE1(v40) - 48) <= 9u)
        {
          v20 = 0;
          v24 = v23 == 0;
          v25 = -(uint64_t)v23;
          if (!v24)
            goto LABEL_37;
          if (v16 == 2)
          {
            v22 = 0;
            v20 = v25;
            goto LABEL_40;
          }
          v34 = BYTE2(v40) - 48;
          if ((BYTE2(v40) - 48) <= 9u && is_mul_ok(v25, 0xAuLL))
          {
            v35 = 10 * v25;
            v20 = v35 - v34;
            if (v35 >= v34)
            {
              v36 = v16 - 3;
              if (v36)
              {
                v37 = (unsigned __int8 *)&v40 + 3;
                while (1)
                {
                  v38 = *v37 - 48;
                  if (v38 > 9)
                    goto LABEL_36;
                  if (!is_mul_ok(v20, 0xAuLL))
                    goto LABEL_36;
                  v24 = 10 * v20 >= v38;
                  v20 = 10 * v20 - v38;
                  if (!v24)
                    goto LABEL_36;
                  v22 = 0;
                  ++v37;
                  if (!--v36)
                    goto LABEL_40;
                }
              }
LABEL_39:
              v22 = 0;
              goto LABEL_40;
            }
          }
        }
      }
      goto LABEL_36;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t VideoPlayerComponent.__toCore(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  REComponentGetEntity();
  REVideoPlayerStatusComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REVideoPlayerComponentSetVideoAsset();
  REVideoPlayerComponentSetScreenRoundedCornerEnabled();
  REVideoPlayerComponentSetScreenAspectRatioAnimationEnabled();
  REVideoPlayerComponentSetScreenDeferAspectRatioTransitionToApp();
  REVideoPlayerComponentSetGuid();
  REVideoPlayerComponentSetEnableReflections();
  REVideoPlayerComponentSetLowLatencyEnabled();
  RENetworkMarkComponentDirty();
  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  REVideoPlayerComponentPreloadVideoAsset();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

void one-time initialization function for sVPCNetworkSystemObserver()
{
  _QWORD *v0;

  type metadata accessor for VPCNetworkSystemObserver();
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<(UInt64, OpaquePointer?), Never>);
  swift_allocObject();
  v0[4] = CurrentValueSubject.init(_:)();
  VPCNetworkSystemObserver.setupRENetworkCallbacks()();
  static VideoPlayerComponent.sVPCNetworkSystemObserver = (uint64_t)v0;
}

uint64_t VideoPlayerComponent.enableReflections.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t VideoPlayerComponent.enableReflections.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.enableReflections.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.playerScreenRoundedCornerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t VideoPlayerComponent.playerScreenRoundedCornerEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.playerScreenRoundedCornerEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.playerScreenAspectRatioAnimationEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t VideoPlayerComponent.playerScreenAspectRatioAnimationEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 82) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.playerScreenAspectRatioAnimationEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.playerScreenDeferAspectRatioTransitionToApp.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 83);
}

uint64_t VideoPlayerComponent.playerScreenDeferAspectRatioTransitionToApp.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 83) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.playerScreenDeferAspectRatioTransitionToApp.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.isLowLatencyEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t VideoPlayerComponent.isLowLatencyEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 84) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.isLowLatencyEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void protocol witness for static Component.__coreComponentType.getter in conformance VideoPlayerComponent(_DWORD *a1@<X8>)
{
  *a1 = 3020;
}

uint64_t VPCNetworkSystemObserver.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16) && *(_QWORD *)(v0 + 24))
  {
    RENetworkSystemRemoveObserver();
    *(_QWORD *)(v0 + 16) = 0;
  }
  if (*(_QWORD *)(v0 + 24))
  {
    RERelease();
    *(_QWORD *)(v0 + 24) = 0;
  }
  swift_release();
  return swift_deallocClassInstance();
}

void VPCNetworkSystemObserver.setupRENetworkCallbacks()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ServiceLocator;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  if (!*(_QWORD *)(v0 + 24))
  {
    v1 = v0;
    v2 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    v3 = *(_QWORD *)(v2 + 24);
    swift_unownedRetainStrong();
    swift_beginAccess();
    v4 = *(_QWORD *)(v3 + 40);
    swift_retain();
    swift_release();
    if (!v4)
    {
      __break(1u);
      return;
    }
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4 + 80, (uint64_t)v27);
    swift_release();
    v5 = v28;
    v6 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 32))(&v21, v5, v6);
    if (REECSManagerSceneCount() < 1)
    {
      if (one-time initialization token for VideoLogger != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)VideoLogger);
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v16, v17))
        goto LABEL_16;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "App VideoPlayer+Component Caption: setupRENetworkCallbacks failed - scene count is zero";
    }
    else
    {
      ServiceLocator = REECSManagerGetServiceLocator();
      *(_QWORD *)(v1 + 16) = MEMORY[0x22076FDB8](ServiceLocator);
      v8 = RENetworkSystemObserverCreateEx();
      *(_QWORD *)(v1 + 24) = v8;
      if (*(_QWORD *)(v1 + 16) && v8)
      {
        v25 = (uint64_t (*)(uint64_t))partial apply for implicit closure #2 in implicit closure #1 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        v26 = v1;
        v9 = MEMORY[0x24BDAC760];
        v21 = MEMORY[0x24BDAC760];
        v22 = 1107296256;
        v23 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v24 = &block_descriptor_36;
        v10 = _Block_copy(&v21);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalComponentWillRemove();
        _Block_release(v10);
        v25 = partial apply for implicit closure #4 in implicit closure #3 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        v26 = v1;
        v21 = v9;
        v22 = 1107296256;
        v23 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v24 = &block_descriptor_11_0;
        v11 = _Block_copy(&v21);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalEntityDidCreate();
        _Block_release(v11);
        v25 = partial apply for implicit closure #6 in implicit closure #5 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        v26 = v1;
        v21 = v9;
        v22 = 1107296256;
        v23 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v24 = &block_descriptor_14;
        v12 = _Block_copy(&v21);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalEntityWillDestroy();
        _Block_release(v12);
        v25 = (uint64_t (*)(uint64_t))partial apply for implicit closure #8 in implicit closure #7 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        v26 = v1;
        v21 = v9;
        v22 = 1107296256;
        v23 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v24 = &block_descriptor_17;
        v13 = _Block_copy(&v21);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnComponentDidUpdate();
        _Block_release(v13);
        v25 = (uint64_t (*)(uint64_t))partial apply for implicit closure #10 in implicit closure #9 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        v26 = v1;
        v21 = v9;
        v22 = 1107296256;
        v23 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v24 = &block_descriptor_20_0;
        v14 = _Block_copy(&v21);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalComponentDidUpdate();
        _Block_release(v14);
        RENetworkSystemAddObserver();
LABEL_17:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        return;
      }
      if (one-time initialization token for VideoLogger != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)VideoLogger);
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v16, v17))
      {
LABEL_16:

        goto LABEL_17;
      }
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "App VideoPlayer+Component Caption: setupRENetworkCallbacks failed - no network system or observer";
    }
    _os_log_impl(&dword_21B9AA000, v16, v17, v19, v18, 2u);
    MEMORY[0x220772F44](v18, -1, -1);
    goto LABEL_16;
  }
}

void VPCNetworkSystemObserver.onComponentDidUpdate(componentRef:)(uint64_t a1)
{
  uint64_t Entity;
  uint64_t ComponentByClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t Guid;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;

  Entity = REComponentGetEntity();
  REVideoPlayerStatusComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass && ComponentByClass == a1
    || (REVideoPlayerComponentGetComponentType(), (v4 = REEntityGetComponentByClass()) != 0) && v4 == a1)
  {
    REVideoPlayerStatusComponentGetComponentType();
    v5 = REEntityGetComponentByClass();
    if (v5)
    {
      v6 = v5;
      REVideoPlayerComponentGetComponentType();
      if (!REEntityGetComponentByClass())
        return;
      REVideoPlayerStatusComponentDidUpdateInApp();
      swift_retain();
      Guid = REVideoPlayerComponentGetGuid();
      v27 = v6;
      CurrentValueSubject.send(_:)();
      swift_release();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
          __break(1u);
LABEL_26:
          swift_once();
LABEL_20:
          v19 = type metadata accessor for Logger();
          __swift_project_value_buffer(v19, (uint64_t)VideoLogger);
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v22 = 0;
            _os_log_impl(&dword_21B9AA000, v20, v21, "App VideoPlayer+Component VPCNetworkSystemObserver onComponentDidUpdate failed - there is no videoplayercomponent object", v22, 2u);
            MEMORY[0x220772F44](v22, -1, -1);
          }

          swift_release_n();
          return;
        }
        v10 = specialized static Entity.entityInfoType(_:)();
        if (v10)
        {
          v11 = (*(uint64_t (**)(void))(v10 + 232))();
          v12 = *(_QWORD *)(v11 + 16);
          swift_retain();
          MEMORY[0x22076D160](v12, 0);
          *(_QWORD *)(v11 + 16) = Entity;
          MEMORY[0x22076D160](Entity, v11);
          swift_release();
        }
        else
        {
          makeEntity(for:)(Entity);
        }
      }
      swift_retain();
      specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&Guid);
      v13 = v33;
      if (v33)
      {
        v14 = v30;
        v23 = v31;
        osloga = v32;
        v16 = v28;
        v15 = v29;
        v18 = Guid;
        v17 = v27;
        swift_release();
        outlined consume of VideoPlayerComponent?(v18, v17, v16, v15, v14, v23, (uint64_t)osloga, v13);
        swift_release();
        return;
      }
      if (one-time initialization token for VideoLogger == -1)
        goto LABEL_20;
      goto LABEL_26;
    }
    if (one-time initialization token for VideoLogger != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)VideoLogger);
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_21B9AA000, oslog, v8, "App VideoPlayer+Component VPCNetworkSystemObserver onComponentDidUpdate failed - there is no Video Player Status Component", v9, 2u);
      MEMORY[0x220772F44](v9, -1, -1);
    }

  }
}

uint64_t VideoPlayerComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  int v49;
  char v50;

  v33 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)v1 + 1);
  v10 = *((_QWORD *)v1 + 2);
  LOBYTE(v7) = v1[24];
  v12 = *((_DWORD *)v1 + 7);
  v13 = *((_QWORD *)v1 + 6);
  v14 = *((_QWORD *)v1 + 7);
  v15 = v1[80];
  v16 = v1[81];
  v17 = v1[82];
  v18 = v1[83];
  v19 = v1[84];
  v20 = *((_OWORD *)v1 + 6);
  v21 = *((_DWORD *)v1 + 28);
  v22 = v1[116];
  v23 = v22 != 1;
  v34 = *v1;
  v9 = v34;
  v35 = v11;
  v36 = v10;
  v37 = v7;
  v38 = v12;
  v32 = *((_OWORD *)v1 + 2);
  v39 = v32;
  v40 = v13;
  v41 = v14;
  v31 = *((_OWORD *)v1 + 4);
  v42 = v31;
  v43 = v15;
  v44 = v16;
  v45 = v17;
  v46 = v18;
  v47 = v19;
  v48 = v20;
  v49 = v21;
  v50 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v24 + 32) = 0x726579616C507661;
  *(_QWORD *)(v24 + 40) = 0xE800000000000000;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  v25 = (id)REVideoAssetGetAVPlayer();
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AVPlayer?);
  *(_QWORD *)(v24 + 48) = v25;
  *(_QWORD *)(v24 + 72) = v26;
  *(_QWORD *)(v24 + 80) = 0xD000000000000012;
  *(_QWORD *)(v24 + 88) = 0x800000021BE8FE80;
  *(_BYTE *)(v24 + 96) = v9;
  *(_QWORD *)(v24 + 120) = &type metadata for VideoPlaybackController.ViewingMode;
  *(_QWORD *)(v24 + 128) = 0x4D676E6977656976;
  *(_QWORD *)(v24 + 136) = 0xEB0000000065646FLL;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for VideoPlaybackController.ViewingMode?);
  *(_BYTE *)(v24 + 144) = 2 * v23;
  *(_QWORD *)(v24 + 168) = v27;
  *(_QWORD *)(v24 + 176) = 0xD000000000000010;
  *(_QWORD *)(v24 + 184) = 0x800000021BE8FEA0;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  *(_QWORD *)(v24 + 192) = v11;
  *(_QWORD *)(v24 + 216) = v28;
  *(_QWORD *)(v24 + 224) = 0xD000000000000014;
  *(_QWORD *)(v24 + 232) = 0x800000021BE8FEC0;
  *(_QWORD *)(v24 + 264) = v28;
  *(_QWORD *)(v24 + 240) = v10;
  v29 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 1, 1, v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

id VideoPlayerComponent.videoRenderer.getter()
{
  return (id)REVideoAssetGetAVSampleBufferVideoRenderer();
}

void VideoPlayerComponent.init(videoRenderer:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  VideoPlayerComponent.init(avPlayer:)(a1, (uint64_t)&outlined read-only object #0 of VideoPlayerComponent.init(videoRenderer:), (uint64_t)&outlined read-only object #1 of VideoPlayerComponent.init(videoRenderer:), (uint64_t)&outlined read-only object #2 of VideoPlayerComponent.init(videoRenderer:), (uint64_t (*)(uint64_t, id))MEMORY[0x24BE208A0], a2);
}

void VideoPlayerComponent.init(avPlayer:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, id)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned __int8 v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned __int8 v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;

  v60 = 0;
  specialized SIMD.init<A>(_:)(a2);
  v12 = v11;
  specialized SIMD.init<A>(_:)(a3);
  v14 = v13;
  v59 = 0;
  LODWORD(v55) = getpid();
  v15 = dispatch thunk of CustomStringConvertible.description.getter();
  v17 = v16;
  if (one-time initialization token for uniqueTokenGenerator != -1)
    swift_once();
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_65:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  v18 = dispatch thunk of CustomStringConvertible.description.getter();
  v20 = v19;
  v55 = v15;
  v56 = v17;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = HIBYTE(v17) & 0xF;
  v23 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000) != 0)
    v24 = HIBYTE(v56) & 0xF;
  else
    v24 = v55 & 0xFFFFFFFFFFFFLL;
  if (!v24)
    goto LABEL_65;
  if ((v56 & 0x1000000000000000) != 0)
  {
    v26 = specialized _parseInteger<A, B>(ascii:radix:)(v15, v56, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    v28 = v53;
    goto LABEL_40;
  }
  if ((v56 & 0x2000000000000000) != 0)
  {
    v56 = v17 & 0xFFFFFFFFFFFFFFLL;
    if (v55 == 43)
    {
      if (v22)
      {
        if (v22 != 1 && (BYTE1(v15) - 48) <= 9u)
        {
          v26 = (BYTE1(v15) - 48);
          if (v22 == 2)
            goto LABEL_39;
          if ((BYTE2(v15) - 48) <= 9u)
          {
            v26 = 10 * (BYTE1(v15) - 48) + (BYTE2(v15) - 48);
            v32 = v22 - 3;
            if (v32)
            {
              v33 = (unsigned __int8 *)&v55 + 3;
              while (1)
              {
                v34 = *v33 - 48;
                if (v34 > 9)
                  goto LABEL_36;
                if (!is_mul_ok(v26, 0xAuLL))
                  goto LABEL_36;
                v30 = __CFADD__(10 * v26, v34);
                v26 = 10 * v26 + v34;
                if (v30)
                  goto LABEL_36;
                v28 = 0;
                ++v33;
                if (!--v32)
                  goto LABEL_40;
              }
            }
            goto LABEL_39;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v55 != 45)
      {
        if (v22 && (v15 - 48) <= 9u)
        {
          v26 = (v15 - 48);
          if (v22 == 1)
            goto LABEL_39;
          if ((BYTE1(v15) - 48) <= 9u)
          {
            v26 = 10 * (v15 - 48) + (BYTE1(v15) - 48);
            v45 = v22 - 2;
            if (v45)
            {
              v46 = (unsigned __int8 *)&v55 + 2;
              while (1)
              {
                v47 = *v46 - 48;
                if (v47 > 9)
                  goto LABEL_36;
                if (!is_mul_ok(v26, 0xAuLL))
                  goto LABEL_36;
                v30 = __CFADD__(10 * v26, v47);
                v26 = 10 * v26 + v47;
                if (v30)
                  goto LABEL_36;
                v28 = 0;
                ++v46;
                if (!--v45)
                  goto LABEL_40;
              }
            }
            goto LABEL_39;
          }
        }
LABEL_36:
        v26 = 0;
LABEL_37:
        v28 = 1;
        goto LABEL_40;
      }
      if (v22)
      {
        if (v22 != 1)
        {
          v29 = BYTE1(v15) - 48;
          if ((BYTE1(v15) - 48) <= 9u)
          {
            v26 = 0;
            v30 = v29 == 0;
            v31 = -(uint64_t)v29;
            if (!v30)
              goto LABEL_37;
            if (v22 == 2)
            {
              v28 = 0;
              v26 = v31;
              goto LABEL_40;
            }
            v48 = BYTE2(v15) - 48;
            if ((BYTE2(v15) - 48) <= 9u && is_mul_ok(v31, 0xAuLL))
            {
              v49 = 10 * v31;
              v26 = v49 - v48;
              if (v49 >= v48)
              {
                v50 = v22 - 3;
                if (v50)
                {
                  v51 = (unsigned __int8 *)&v55 + 3;
                  while (1)
                  {
                    v52 = *v51 - 48;
                    if (v52 > 9)
                      goto LABEL_36;
                    if (!is_mul_ok(v26, 0xAuLL))
                      goto LABEL_36;
                    v30 = 10 * v26 >= v52;
                    v26 = 10 * v26 - v52;
                    if (!v30)
                      goto LABEL_36;
                    v28 = 0;
                    ++v51;
                    if (!--v50)
                      goto LABEL_40;
                  }
                }
LABEL_39:
                v28 = 0;
                goto LABEL_40;
              }
            }
          }
        }
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  if ((v55 & 0x1000000000000000) != 0)
    v25 = (unsigned __int8 *)((v56 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  v26 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v25, v23, 10);
  v28 = v27 & 1;
LABEL_40:
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
LABEL_41:
    v26 = arc4random();
  specialized SIMD.init<A>(_:)(a4);
  v54 = v35;
  type metadata accessor for __VideoResource();
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 24) = MEMORY[0x24BEE4AF8];
  v37 = a1;
  v38 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v38, (uint64_t)&v55);
  v39 = v57;
  v40 = v58;
  __swift_project_boxed_opaque_existential_1(&v55, v57);
  v41 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 32);
  swift_retain();
  v42 = v41(v39, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  *(_QWORD *)(v36 + 16) = a5(v42, v37);
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();

  type metadata accessor for VideoPlayerController();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v26;
  if (one-time initialization token for sVPCNetworkSystemObserver != -1)
    swift_once();
  swift_retain();
  VPCNetworkSystemObserver.setupRENetworkCallbacks()();
  swift_release();

  v44 = v59;
  *(_BYTE *)a6 = v60;
  *(_QWORD *)(a6 + 8) = v12;
  *(_QWORD *)(a6 + 16) = v14;
  *(_BYTE *)(a6 + 24) = v44;
  *(_DWORD *)(a6 + 28) = 1055286886;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = v36;
  *(_QWORD *)(a6 + 64) = v43;
  *(_QWORD *)(a6 + 72) = v26;
  *(_DWORD *)(a6 + 80) = 65793;
  *(_BYTE *)(a6 + 84) = 0;
  *(_OWORD *)(a6 + 96) = v54;
  *(_DWORD *)(a6 + 112) = -1082130432;
  *(_BYTE *)(a6 + 116) = 0;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x220768DA4](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = &v15;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x220768D08](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x220768D08);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x220768D08]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VideoPlayerController()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type VideoPlayerDefaults and conformance VideoPlayerDefaults()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VideoPlayerDefaults and conformance VideoPlayerDefaults;
  if (!lazy protocol witness table cache variable for type VideoPlayerDefaults and conformance VideoPlayerDefaults)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VideoPlayerDefaults, &type metadata for VideoPlayerDefaults);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerDefaults and conformance VideoPlayerDefaults);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode;
  if (!lazy protocol witness table cache variable for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VideoPlayerComponent.ImmersiveViewingMode, &type metadata for VideoPlayerComponent.ImmersiveViewingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode);
  }
  return result;
}

_BYTE *sub_21BD12314@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_21BD12320(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

void sub_21BD1232C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_21BD12378@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 24);
  return result;
}

_BYTE *sub_21BD12384(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *result;
  return result;
}

float sub_21BD12390@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 28);
  *a2 = result;
  return result;
}

float *sub_21BD1239C(float *result, uint64_t a2)
{
  float v2;

  v2 = *result;
  if (*result <= 0.0)
    v2 = 0.0;
  if (v2 > 1.0)
    v2 = 1.0;
  *(float *)(a2 + 28) = v2;
  return result;
}

uint64_t sub_21BD123C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 16) = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_21BD123D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  a2[4] = v3;
  a2[5] = v4;
  a2[6] = v5;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerDefaults()
{
  return &type metadata for VideoPlayerDefaults;
}

uint64_t destroy for VideoPlayerComponent()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy117_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 109) = *(_QWORD *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoPlayerComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 117))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoPlayerComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 117) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 117) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerComponent()
{
  return &type metadata for VideoPlayerComponent;
}

uint64_t storeEnumTagSinglePayload for VideoPlayerComponent.ImmersiveViewingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD127F0 + 4 * byte_21BE76EA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD12824 + 4 * asc_21BE76EA0[v4]))();
}

uint64_t sub_21BD12824(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD1282C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD12834);
  return result;
}

uint64_t sub_21BD12840(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD12848);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD1284C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD12854(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerComponent.ImmersiveViewingMode()
{
  return &type metadata for VideoPlayerComponent.ImmersiveViewingMode;
}

uint64_t initializeBufferWithCopyOfBuffer for VideoPlayerComponent.VideoReceiverEndpointInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VideoPlayerComponent.VideoReceiverEndpointInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for VideoPlayerComponent.VideoReceiverEndpointInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for VideoPlayerComponent.VideoReceiverEndpointInfo()
{
  return &type metadata for VideoPlayerComponent.VideoReceiverEndpointInfo;
}

uint64_t type metadata accessor for VPCNetworkSystemObserver()
{
  return objc_opt_self();
}

uint64_t outlined consume of VideoPlayerComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a8)
  {
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in VPCNetworkSystemObserver.setupRENetworkCallbacks()(uint64_t a1)
{
  return specialized VPCNetworkSystemObserver.onLocalVideoEntityDidCreate(entityRef:)(a1, "App VideoPlayer+Component VPCNetworkSystemObserver onLocalVideoEntityDidCreate failed - there is no videoplayercomponent object");
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in VPCNetworkSystemObserver.setupRENetworkCallbacks()(uint64_t a1)
{
  return specialized VPCNetworkSystemObserver.onLocalVideoEntityDidCreate(entityRef:)(a1, "App VideoPlayer+Component VPCNetworkSystemObserver onLocalVideoEntityWillDestroy failed - there is no videoplayercomponent object");
}

uint64_t specialized VPCNetworkSystemObserver.onLocalVideoComponentRemove(componentRef:)(uint64_t a1)
{
  uint64_t Entity;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  uint64_t v20;

  Entity = REComponentGetEntity();
  REVideoPlayerComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (!result || result != a1)
    return result;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_8;
  }
  if ((REEntityIsBeingDestroyed() & 1) == 0)
  {
    v4 = specialized static Entity.entityInfoType(_:)();
    if (v4)
    {
      v5 = (*(uint64_t (**)(void))(v4 + 232))();
      v6 = *(_QWORD *)(v5 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v5 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v5);
      swift_release();
    }
    else
    {
      makeEntity(for:)(Entity);
    }
LABEL_8:
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v19);
    v7 = v20;
    if (v20)
    {
      v8 = v19[4];
      v17 = v19[5];
      v18 = v19[6];
      v10 = v19[2];
      v9 = v19[3];
      v12 = v19[0];
      v11 = v19[1];
      swift_release();
      outlined consume of VideoPlayerComponent?(v12, v11, v10, v9, v8, v17, v18, v7);
      return swift_release();
    }
    if (one-time initialization token for VideoLogger == -1)
      goto LABEL_11;
    goto LABEL_17;
  }
  __break(1u);
LABEL_17:
  swift_once();
LABEL_11:
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)VideoLogger);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_21B9AA000, v14, v15, "App VideoPlayer+Component VPCNetworkSystemObserver onLocalVideoComponentRemove failed - there is no videoplayercomponent object", v16, 2u);
    MEMORY[0x220772F44](v16, -1, -1);
  }

  return swift_release_n();
}

uint64_t specialized VPCNetworkSystemObserver.onLocalVideoEntityDidCreate(entityRef:)(uint64_t a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[7];
  uint64_t v21;

  REVideoPlayerComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (!result)
    return result;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_7;
  }
  if ((REEntityIsBeingDestroyed() & 1) == 0)
  {
    v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      v6 = (*(uint64_t (**)(void))(v5 + 232))();
      v7 = *(_QWORD *)(v6 + 16);
      swift_retain();
      MEMORY[0x22076D160](v7, 0);
      *(_QWORD *)(v6 + 16) = a1;
      MEMORY[0x22076D160](a1, v6);
      swift_release();
    }
    else
    {
      makeEntity(for:)(a1);
    }
LABEL_7:
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v20);
    v8 = v21;
    if (v21)
    {
      v9 = v20[4];
      v18 = v20[5];
      v19 = v20[6];
      v11 = v20[2];
      v10 = v20[3];
      v13 = v20[0];
      v12 = v20[1];
      swift_release();
      outlined consume of VideoPlayerComponent?(v13, v12, v11, v10, v9, v18, v19, v8);
      return swift_release();
    }
    if (one-time initialization token for VideoLogger == -1)
      goto LABEL_10;
    goto LABEL_16;
  }
  __break(1u);
LABEL_16:
  swift_once();
LABEL_10:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)VideoLogger);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_21B9AA000, v15, v16, a2, v17, 2u);
    MEMORY[0x220772F44](v17, -1, -1);
  }

  return swift_release_n();
}

uint64_t __RKEmphasisBounceAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisBounceAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisBounceAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisBounceAnimation.createBounceAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 140, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulBounceAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 271, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildBounceAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 94, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicBounceAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

uint64_t EventSequence.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for AnyPublisher();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v4);
  v5 = type metadata accessor for AsyncPublisher.Iterator();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
}

uint64_t EventSequence.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = type metadata accessor for AnyPublisher();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v2);
  type metadata accessor for AsyncPublisher.Iterator();
  *v1 = v0;
  v1[1] = protocol witness for AsyncOutputIteratorProtocol.next() in conformance AsyncOutputIterator;
  return AsyncPublisher.Iterator.next()();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance EventSequence<A>.Iterator()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return EventSequence.Iterator.next()();
}

uint64_t _s17RealityFoundation13EventSequenceV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = _s17RealityFoundation13EventSequenceV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s17RealityFoundation13EventSequenceV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t EventSequence.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];

  v6 = type metadata accessor for AnyPublisher();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v6);
  v7 = type metadata accessor for AsyncPublisher();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - v9;
  v12[1] = Publisher.eraseToAnyPublisher()();
  AsyncPublisher.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
}

uint64_t EventSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for AnyPublisher();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v2);
  v3 = type metadata accessor for AsyncPublisher.Iterator();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - v4;
  type metadata accessor for AsyncPublisher();
  AsyncPublisher.makeAsyncIterator()();
  return EventSequence.Iterator.init(_:)((uint64_t)v5, a1);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in EventSequence<A>.Iterator()
{
  return MEMORY[0x24BEE3F20];
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in EventSequence<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance EventSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  EventSequence.makeAsyncIterator()(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t type metadata completion function for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for EventSequence(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t initializeBufferWithCopyOfBuffer for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t destroy for EventSequence(uint64_t a1, uint64_t a2)
{
  return destroy for EventSequence(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t initializeWithCopy for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t assignWithCopy for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t initializeWithTake for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t assignWithTake for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t getEnumTagSinglePayload for EventSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD136D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t storeEnumTagSinglePayload for EventSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD136F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BC8]);
}

uint64_t type metadata accessor for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventSequence);
}

uint64_t type metadata completion function for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for EventSequence(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t type metadata completion function for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v5 = type metadata accessor for AnyPublisher();
  v6 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v5);
  result = a4(319, v5, v6);
  if (v8 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t initializeBufferWithCopyOfBuffer for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v7);
  v9 = a4(0, v7, v8);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1, a2, v9);
}

uint64_t destroy for EventSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return destroy for EventSequence(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t destroy for EventSequence(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for AnyPublisher();
  v6 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v5);
  v7 = a3(0, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
}

uint64_t initializeWithCopy for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t initializeWithCopy for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v7);
  v9 = a4(0, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  return a1;
}

uint64_t assignWithCopy for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t assignWithCopy for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v7);
  v9 = a4(0, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  return a1;
}

uint64_t initializeWithTake for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t initializeWithTake for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v7);
  v9 = a4(0, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  return a1;
}

uint64_t assignWithTake for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for EventSequence(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t assignWithTake for EventSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v7);
  v9 = a4(0, v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventSequence.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD13B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for AnyPublisher();
  v8 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v7);
  v9 = a4(0, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1, a2, v9);
}

uint64_t storeEnumTagSinglePayload for EventSequence.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD13BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BDB9BB0]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = type metadata accessor for AnyPublisher();
  v9 = MEMORY[0x220772E3C](MEMORY[0x24BDB9AF8], v8);
  v10 = a5(0, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, a2, a2, v10);
}

uint64_t type metadata accessor for EventSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventSequence.Iterator);
}

uint64_t __RKEmphasisJiggleAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisJiggleAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisJiggleAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisJiggleAnimation.createJiggleAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 203, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulJiggleAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 79, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildJiggleAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicJiggleAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

void static AccessibilityComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 69;
}

uint64_t Entity.isAccessibilityElement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v11);
    v0 = v11[0];
    v1 = v11[1];
    v2 = v12;
    v3 = v13;
    v4 = v14;
    v5 = v15;
    v6 = v16;
    v7 = v17;
    v8 = v18;
    swift_release();
    v9 = 256;
    if (!(_DWORD)v1)
      v9 = 0;
    outlined consume of __AccessibilityComponent?(v9 | v0, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v1;
}

uint64_t key path getter for Entity.isAccessibilityElement : Entity@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v12);
  v2 = v18;
  if (v18)
  {
    v4 = v16;
    v3 = v17;
    v6 = v14;
    v5 = v15;
    v8 = *((_QWORD *)&v12 + 1);
    v7 = v13;
    v9 = v12;
    swift_release();
    v10 = (v9 >> 8) & 1;
    result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    result = swift_release();
    LOBYTE(v10) = 0;
  }
  *a1 = v10;
  return result;
}

uint64_t Entity.isAccessibilityElement.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v15);
    swift_release();
    v3 = v18;
    v2 = v19;
    v4 = *((_QWORD *)&v15 + 1);
    v5 = v16;
    v6 = v17;
    v7 = v15;
  }
  else
  {
    swift_release();
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    v2 = MEMORY[0x24BEE4AF8];
    v18 = 0;
    v19 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v5 = 0uLL;
    v7 = 0;
    v4 = 0;
    v3 = 0;
    v6 = 0uLL;
  }
  v8 = 256;
  if ((a1 & 1) == 0)
    v8 = 0;
  v10[0] = v7 | v8;
  v10[1] = v4;
  v11 = v5;
  v12 = v6;
  v13 = v3;
  v14 = v2;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v10);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.__isAccessibilityEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v11);
    v0 = v11[0];
    v1 = v11[1];
    v2 = v12;
    v3 = v13;
    v4 = v14;
    v5 = v15;
    v6 = v16;
    v7 = v17;
    v8 = v18;
    swift_release();
    v9 = 256;
    if (!(_DWORD)v1)
      v9 = 0;
    outlined consume of __AccessibilityComponent?(v9 | v0, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v1;
}

uint64_t Entity.__isAccessibilityEnabled.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v15);
    swift_release();
    v3 = v18;
    v2 = v19;
    v4 = *((_QWORD *)&v15 + 1);
    v5 = v16;
    v6 = v17;
    v7 = v15;
  }
  else
  {
    swift_release();
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    v2 = MEMORY[0x24BEE4AF8];
    v18 = 0;
    v19 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v5 = 0uLL;
    v7 = 0;
    v4 = 0;
    v3 = 0;
    v6 = 0uLL;
  }
  v8 = 256;
  if ((a1 & 1) == 0)
    v8 = 0;
  v10[0] = v7 | v8;
  v10[1] = v4;
  v11 = v5;
  v12 = v6;
  v13 = v3;
  v14 = v2;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v10);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.isAccessibilityElement.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (char *)malloc(0x1D0uLL);
  *a1 = v3;
  v4 = v3 + 456;
  *((_QWORD *)v3 + 56) = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 384));
    v15 = v3[384];
    v5 = v3[385];
    v6 = *((_QWORD *)v3 + 49);
    v7 = *((_QWORD *)v3 + 50);
    v8 = *((_QWORD *)v3 + 51);
    v9 = *((_QWORD *)v3 + 52);
    v10 = *((_QWORD *)v3 + 53);
    v11 = *((_QWORD *)v3 + 54);
    v12 = *((_QWORD *)v3 + 55);
    swift_release();
    v13 = 256;
    if (!v5)
      v13 = 0;
    outlined consume of __AccessibilityComponent?(v13 | v15, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    swift_release();
    LOBYTE(v5) = 0;
  }
  *v4 = v5;
  return Entity.isAccessibilityElement.modify;
}

void Entity.isAccessibilityElement.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t Component;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = (unsigned __int8 *)(*(_QWORD *)a1 + 256);
  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 456);
  swift_retain();
  Component = REEntityGetComponent();
  if ((a2 & 1) != 0)
  {
    v7 = (uint64_t)(v3 + 8);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v4);
      swift_release();
      v9 = v3[38];
      v8 = v3[39];
      v10 = v3[33];
      v11 = *((_OWORD *)v3 + 17);
      v12 = *((_OWORD *)v3 + 18);
      v13 = *v4;
    }
    else
    {
      swift_release();
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)v3 = 0u;
      v8 = MEMORY[0x24BEE4AF8];
      v3[6] = 0;
      v3[7] = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v11 = 0uLL;
      v13 = 0;
      v10 = 0;
      v9 = 0;
      v12 = 0uLL;
    }
    v20 = 256;
    if (!v5)
      v20 = 0;
    v3[8] = v13 | v20;
    v3[9] = v10;
    *((_OWORD *)v3 + 5) = v11;
    *((_OWORD *)v3 + 6) = v12;
    v3[14] = v9;
    v3[15] = v8;
  }
  else
  {
    v7 = (uint64_t)(v3 + 24);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 40));
      swift_release();
      v15 = v3[46];
      v14 = v3[47];
      v16 = v3[41];
      v17 = *((_OWORD *)v3 + 21);
      v18 = *((_OWORD *)v3 + 22);
      v19 = *((unsigned __int8 *)v3 + 320);
    }
    else
    {
      swift_release();
      v3[22] = 0;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      v14 = MEMORY[0x24BEE4AF8];
      v3[23] = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v17 = 0uLL;
      v19 = 0;
      v16 = 0;
      v15 = 0;
      v18 = 0uLL;
    }
    v21 = 256;
    if (!v5)
      v21 = 0;
    v3[24] = v19 | v21;
    v3[25] = v16;
    *((_OWORD *)v3 + 13) = v17;
    *((_OWORD *)v3 + 14) = v18;
    v3[30] = v15;
    v3[31] = v14;
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v7);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t Entity.accessibilityLabel.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    v0 = v12[0];
    v1 = v12[1];
    v2 = v13;
    v3 = v14;
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t key path getter for Entity.accessibilityLabel : Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  v2 = v17;
  if (v17)
  {
    v4 = v15;
    v3 = v16;
    v6 = v13;
    v5 = v14;
    v8 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    result = swift_release();
    v6 = 0;
    v5 = 0;
  }
  *a1 = v6;
  a1[1] = v5;
  return result;
}

uint64_t Entity.accessibilityLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  _QWORD v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v14);
    swift_release();
    v4 = *((_QWORD *)&v16 + 1);
    v6 = v17;
    v5 = v18;
    outlined init with take of String?((uint64_t)&v15 + 8, (uint64_t)v12);
    outlined release of IKRig.Joint?((uint64_t)v12);
    v7 = *((_QWORD *)&v14 + 1);
    v8 = v15;
    v9 = 256;
    if (!BYTE1(v14))
      v9 = 0;
    v10 = v9 | v14;
  }
  else
  {
    swift_release();
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    v5 = MEMORY[0x24BEE4AF8];
    v17 = 0;
    v18 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v7 = 0;
    v8 = 0;
    v4 = 0;
    v6 = 0;
    v10 = 0;
  }
  v13[0] = v10;
  v13[1] = v7;
  v13[2] = v8;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = v4;
  v13[6] = v6;
  v13[7] = v5;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v13);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.__accessibilityLabel.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    v0 = v12[0];
    v1 = v12[1];
    v2 = v13;
    v3 = v14;
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t Entity.__accessibilityLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  _QWORD v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v14);
    swift_release();
    v4 = *((_QWORD *)&v16 + 1);
    v6 = v17;
    v5 = v18;
    outlined init with take of String?((uint64_t)&v15 + 8, (uint64_t)v12);
    outlined release of IKRig.Joint?((uint64_t)v12);
    v7 = *((_QWORD *)&v14 + 1);
    v8 = v15;
    v9 = 256;
    if (!BYTE1(v14))
      v9 = 0;
    v10 = v9 | v14;
  }
  else
  {
    swift_release();
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    v5 = MEMORY[0x24BEE4AF8];
    v17 = 0;
    v18 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v7 = 0;
    v8 = 0;
    v4 = 0;
    v6 = 0;
    v10 = 0;
  }
  v13[0] = v10;
  v13[1] = v7;
  v13[2] = v8;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = v4;
  v13[6] = v6;
  v13[7] = v5;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v13);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.accessibilityLabel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x1F8uLL);
  *a1 = v4;
  v4[62] = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 32));
    v5 = *((unsigned __int8 *)v4 + 256);
    v6 = *((unsigned __int8 *)v4 + 257);
    v7 = v4[35];
    v15 = v4[34];
    v16 = v4[33];
    v8 = v4[36];
    v9 = v4[37];
    v10 = v4[38];
    v11 = v4[39];
    swift_release();
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v13, v16, v15, v7, v8, v9, v10, v11);
  }
  else
  {
    swift_release();
    v7 = 0;
    v8 = 0;
  }
  v4[60] = v7;
  v4[61] = v8;
  return Entity.accessibilityLabel.modify;
}

void Entity.accessibilityLabel.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD **)a1;
  v3 = (unsigned __int8 *)(*(_QWORD *)a1 + 320);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 488);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 480);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v2 + 48));
      swift_release();
      v7 = v2[54];
      v6 = v2[55];
      v8 = v2[53];
      outlined init with take of String?((uint64_t)(v2 + 51), (uint64_t)(v2 + 58));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 58));
      v9 = v2[49];
      v10 = v2[50];
      v11 = 256;
      if (!v3[65])
        v11 = 0;
      v12 = v11 | v3[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)v2 = 0u;
      v6 = MEMORY[0x24BEE4AF8];
      v2[6] = 0;
      v2[7] = v6;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v9 = 0;
      v10 = 0;
      v8 = 0;
      v7 = 0;
      v12 = 0;
    }
    v2[8] = v12;
    v2[9] = v9;
    v2[10] = v10;
    v2[11] = v5;
    v2[12] = v4;
    v2[13] = v8;
    v2[14] = v7;
    v2[15] = v6;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v3);
      swift_release();
      v14 = v2[46];
      v13 = v2[47];
      v15 = v2[45];
      outlined init with take of String?((uint64_t)(v2 + 43), (uint64_t)(v2 + 56));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 56));
      v16 = v2[41];
      v17 = v2[42];
      v18 = 256;
      if (!v3[1])
        v18 = 0;
      v19 = v18 | *v3;
    }
    else
    {
      swift_release();
      v2[22] = 0;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      v13 = MEMORY[0x24BEE4AF8];
      v2[23] = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v16 = 0;
      v17 = 0;
      v15 = 0;
      v14 = 0;
      v19 = 0;
    }
    v2[24] = v19;
    v2[25] = v16;
    v2[26] = v17;
    v2[27] = v5;
    v2[28] = v4;
    v2[29] = v15;
    v2[30] = v14;
    v2[31] = v13;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t Entity.accessibilityDescription.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    v0 = v12[0];
    v1 = v12[1];
    v2 = v13;
    v3 = v14;
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v6;
}

uint64_t key path getter for Entity.accessibilityDescription : Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  v2 = v17;
  if (v17)
  {
    v4 = v15;
    v3 = v16;
    v6 = v13;
    v5 = v14;
    v8 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    result = swift_release();
    v4 = 0;
    v3 = 0;
  }
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t Entity.accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v18);
    swift_release();
    v4 = v22;
    outlined init with take of String?((uint64_t)&v20 + 8, (uint64_t)v11);
    outlined release of IKRig.Joint?((uint64_t)v11);
    v5 = v20;
    v6 = *((_QWORD *)&v18 + 1);
    v7 = v19;
    v8 = 256;
    if (!BYTE1(v18))
      v8 = 0;
    v9 = v8 | v18;
  }
  else
  {
    swift_release();
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    v4 = MEMORY[0x24BEE4AF8];
    v21 = 0;
    v22 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v7 = 0uLL;
    v6 = 0;
    v5 = 0;
    v9 = 0;
  }
  v12[0] = v9;
  v12[1] = v6;
  v13 = v7;
  v14 = v5;
  v15 = a1;
  v16 = a2;
  v17 = v4;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v12);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.__accessibilityDescription.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    v0 = v12[0];
    v1 = v12[1];
    v2 = v13;
    v3 = v14;
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v6;
}

uint64_t Entity.__accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v18);
    swift_release();
    v4 = v22;
    outlined init with take of String?((uint64_t)&v20 + 8, (uint64_t)v11);
    outlined release of IKRig.Joint?((uint64_t)v11);
    v5 = v20;
    v6 = *((_QWORD *)&v18 + 1);
    v7 = v19;
    v8 = 256;
    if (!BYTE1(v18))
      v8 = 0;
    v9 = v8 | v18;
  }
  else
  {
    swift_release();
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    v4 = MEMORY[0x24BEE4AF8];
    v21 = 0;
    v22 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v7 = 0uLL;
    v6 = 0;
    v5 = 0;
    v9 = 0;
  }
  v12[0] = v9;
  v12[1] = v6;
  v13 = v7;
  v14 = v5;
  v15 = a1;
  v16 = a2;
  v17 = v4;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v12);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.accessibilityDescription.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x1F8uLL);
  *a1 = v4;
  v4[62] = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 32));
    v5 = *((unsigned __int8 *)v4 + 256);
    v6 = *((unsigned __int8 *)v4 + 257);
    v7 = v4[35];
    v15 = v4[34];
    v16 = v4[33];
    v9 = v4[36];
    v8 = v4[37];
    v10 = v4[38];
    v11 = v4[39];
    swift_release();
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v13, v16, v15, v7, v9, v8, v10, v11);
  }
  else
  {
    swift_release();
    v8 = 0;
    v10 = 0;
  }
  v4[60] = v8;
  v4[61] = v10;
  return Entity.accessibilityDescription.modify;
}

void Entity.accessibilityDescription.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD **)a1;
  v3 = (unsigned __int8 *)(*(_QWORD *)a1 + 320);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 488);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 480);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v2 + 48));
      swift_release();
      v6 = v2[55];
      outlined init with take of String?((uint64_t)(v2 + 53), (uint64_t)(v2 + 58));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 58));
      v7 = v2[52];
      v8 = v2[49];
      v9 = *((_OWORD *)v2 + 25);
      v10 = 256;
      if (!v3[65])
        v10 = 0;
      v11 = v10 | v3[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)v2 = 0u;
      v6 = MEMORY[0x24BEE4AF8];
      v2[6] = 0;
      v2[7] = v6;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v9 = 0uLL;
      v8 = 0;
      v7 = 0;
      v11 = 0;
    }
    v2[8] = v11;
    v2[9] = v8;
    *((_OWORD *)v2 + 5) = v9;
    v2[12] = v7;
    v2[13] = v5;
    v2[14] = v4;
    v2[15] = v6;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v3);
      swift_release();
      v12 = v2[47];
      outlined init with take of String?((uint64_t)(v2 + 45), (uint64_t)(v2 + 56));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 56));
      v13 = v2[44];
      v14 = v2[41];
      v15 = *((_OWORD *)v2 + 21);
      v16 = 256;
      if (!v3[1])
        v16 = 0;
      v17 = v16 | *v3;
    }
    else
    {
      swift_release();
      v2[22] = 0;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      v12 = MEMORY[0x24BEE4AF8];
      v2[23] = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v15 = 0uLL;
      v14 = 0;
      v13 = 0;
      v17 = 0;
    }
    v2[24] = v17;
    v2[25] = v14;
    *((_OWORD *)v2 + 13) = v15;
    v2[28] = v13;
    v2[29] = v5;
    v2[30] = v4;
    v2[31] = v12;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t Entity.__isAccessibilityRoot.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v11);
    v0 = v11[0];
    v1 = v11[1];
    v2 = v12;
    v3 = v13;
    v4 = v14;
    v5 = v15;
    v6 = v16;
    v7 = v17;
    v8 = v18;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    outlined consume of __AccessibilityComponent?(v9 | v0, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v0;
}

uint64_t key path getter for Entity.__isAccessibilityRoot : Entity@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v12);
  v2 = v18;
  if (v18)
  {
    v4 = v16;
    v3 = v17;
    v6 = v14;
    v5 = v15;
    v8 = *((_QWORD *)&v12 + 1);
    v7 = v13;
    v9 = v12;
    swift_release();
    v10 = v9 & 1;
    result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    result = swift_release();
    v10 = 0;
  }
  *a1 = v10;
  return result;
}

uint64_t Entity.__isAccessibilityRoot.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v14);
    swift_release();
    v3 = v17;
    v2 = v18;
    v4 = *((_QWORD *)&v14 + 1);
    v5 = v15;
    v6 = v16;
    v7 = 256;
    if (!BYTE1(v14))
      v7 = 0;
  }
  else
  {
    swift_release();
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    v2 = MEMORY[0x24BEE4AF8];
    v17 = 0;
    v18 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v5 = 0uLL;
    v7 = 0;
    v4 = 0;
    v3 = 0;
    v6 = 0uLL;
  }
  v9[0] = v7 | a1 & 1;
  v9[1] = v4;
  v10 = v5;
  v11 = v6;
  v12 = v3;
  v13 = v2;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v9);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.__isAccessibilityRoot.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (char *)malloc(0x1D0uLL);
  *a1 = v3;
  v4 = v3 + 456;
  *((_QWORD *)v3 + 56) = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 384));
    v5 = v3[384];
    v6 = v3[385];
    v7 = *((_QWORD *)v3 + 50);
    v15 = *((_QWORD *)v3 + 49);
    v8 = *((_QWORD *)v3 + 51);
    v9 = *((_QWORD *)v3 + 52);
    v10 = *((_QWORD *)v3 + 53);
    v11 = *((_QWORD *)v3 + 54);
    v12 = *((_QWORD *)v3 + 55);
    swift_release();
    v13 = 256;
    if (!v6)
      v13 = 0;
    outlined consume of __AccessibilityComponent?(v13 | v5, v15, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    swift_release();
    LOBYTE(v5) = 0;
  }
  *v4 = v5;
  return Entity.__isAccessibilityRoot.modify;
}

void Entity.__isAccessibilityRoot.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t Component;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = *(_QWORD **)a1;
  v4 = (_BYTE *)(*(_QWORD *)a1 + 257);
  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 456);
  swift_retain();
  Component = REEntityGetComponent();
  if ((a2 & 1) != 0)
  {
    v7 = (uint64_t)(v3 + 8);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
      swift_release();
      v9 = v3[38];
      v8 = v3[39];
      v10 = v3[33];
      v11 = *((_OWORD *)v3 + 17);
      v12 = *((_OWORD *)v3 + 18);
      v13 = 256;
      if (!*v4)
        v13 = 0;
    }
    else
    {
      swift_release();
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)v3 = 0u;
      v8 = MEMORY[0x24BEE4AF8];
      v3[6] = 0;
      v3[7] = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v11 = 0uLL;
      v13 = 0;
      v10 = 0;
      v9 = 0;
      v12 = 0uLL;
    }
    v3[8] = v13 | v5;
    v3[9] = v10;
    *((_OWORD *)v3 + 5) = v11;
    *((_OWORD *)v3 + 6) = v12;
    v3[14] = v9;
    v3[15] = v8;
  }
  else
  {
    v7 = (uint64_t)(v3 + 24);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 40));
      swift_release();
      v15 = v3[46];
      v14 = v3[47];
      v16 = v3[41];
      v17 = *((_OWORD *)v3 + 21);
      v18 = *((_OWORD *)v3 + 22);
      v19 = 256;
      if (!v4[64])
        v19 = 0;
    }
    else
    {
      swift_release();
      v3[22] = 0;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      v14 = MEMORY[0x24BEE4AF8];
      v3[23] = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v17 = 0uLL;
      v19 = 0;
      v16 = 0;
      v15 = 0;
      v18 = 0uLL;
    }
    v3[24] = v19 | v5;
    v3[25] = v16;
    *((_OWORD *)v3 + 13) = v17;
    *((_OWORD *)v3 + 14) = v18;
    v3[30] = v15;
    v3[31] = v14;
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v7);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v3);
}

void (*Entity.__isAccessibilityEnabled.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (char *)malloc(0x1D0uLL);
  *a1 = v3;
  v4 = v3 + 456;
  *((_QWORD *)v3 + 56) = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 384));
    v15 = v3[384];
    v5 = v3[385];
    v6 = *((_QWORD *)v3 + 49);
    v7 = *((_QWORD *)v3 + 50);
    v8 = *((_QWORD *)v3 + 51);
    v9 = *((_QWORD *)v3 + 52);
    v10 = *((_QWORD *)v3 + 53);
    v11 = *((_QWORD *)v3 + 54);
    v12 = *((_QWORD *)v3 + 55);
    swift_release();
    v13 = 256;
    if (!v5)
      v13 = 0;
    outlined consume of __AccessibilityComponent?(v13 | v15, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    swift_release();
    LOBYTE(v5) = 0;
  }
  *v4 = v5;
  return Entity.isAccessibilityElement.modify;
}

uint64_t Entity.__accessibilityIdentifier.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    v0 = v12[0];
    v1 = v12[1];
    v2 = v13;
    v3 = v14;
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

uint64_t key path getter for Entity.__accessibilityIdentifier : Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  v2 = v17;
  if (v17)
  {
    v4 = v15;
    v3 = v16;
    v6 = v13;
    v5 = v14;
    v8 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    result = swift_release();
    v8 = 0;
    v7 = 0;
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

uint64_t Entity.__accessibilityIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  _BYTE v11[16];
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v16);
    swift_release();
    v5 = v19;
    v4 = v20;
    v6 = *((_QWORD *)&v17 + 1);
    v10 = v18;
    outlined init with take of String?((uint64_t)&v16 + 8, (uint64_t)v11);
    outlined release of IKRig.Joint?((uint64_t)v11);
    v7 = 256;
    if (!BYTE1(v16))
      v7 = 0;
    v8 = v7 | v16;
  }
  else
  {
    swift_release();
    v17 = 0u;
    v18 = 0u;
    v10 = 0u;
    v16 = 0u;
    v4 = MEMORY[0x24BEE4AF8];
    v19 = 0;
    v20 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v16);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v6 = 0;
    v5 = 0;
    v8 = 0;
  }
  v12[0] = v8;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = v6;
  v13 = v10;
  v14 = v5;
  v15 = v4;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v12);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.__accessibilityIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x1F8uLL);
  *a1 = v4;
  v4[62] = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 32));
    v5 = *((unsigned __int8 *)v4 + 256);
    v6 = *((unsigned __int8 *)v4 + 257);
    v7 = v4[33];
    v8 = v4[34];
    v9 = v4[37];
    v15 = v4[36];
    v16 = v4[35];
    v10 = v4[38];
    v11 = v4[39];
    swift_release();
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v13, v7, v8, v16, v15, v9, v10, v11);
  }
  else
  {
    swift_release();
    v7 = 0;
    v8 = 0;
  }
  v4[60] = v7;
  v4[61] = v8;
  return Entity.__accessibilityIdentifier.modify;
}

void Entity.__accessibilityIdentifier.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_QWORD **)a1;
  v3 = (unsigned __int8 *)(*(_QWORD *)a1 + 320);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 488);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 480);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v2 + 48));
      swift_release();
      v7 = v2[54];
      v6 = v2[55];
      v8 = v2[51];
      v16 = *((_OWORD *)v2 + 26);
      outlined init with take of String?((uint64_t)(v2 + 49), (uint64_t)(v2 + 58));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 58));
      v9 = 256;
      if (!v3[65])
        v9 = 0;
      v10 = v9 | v3[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      v16 = 0u;
      *(_OWORD *)v2 = 0u;
      v6 = MEMORY[0x24BEE4AF8];
      v2[6] = 0;
      v2[7] = v6;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v8 = 0;
      v7 = 0;
      v10 = 0;
    }
    v2[8] = v10;
    v2[9] = v5;
    v2[10] = v4;
    v2[11] = v8;
    *((_OWORD *)v2 + 6) = v16;
    v2[14] = v7;
    v2[15] = v6;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v3);
      swift_release();
      v12 = v2[46];
      v11 = v2[47];
      v13 = v2[43];
      v17 = *((_OWORD *)v2 + 22);
      outlined init with take of String?((uint64_t)(v2 + 41), (uint64_t)(v2 + 56));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 56));
      v14 = 256;
      if (!v3[1])
        v14 = 0;
      v15 = v14 | *v3;
    }
    else
    {
      swift_release();
      v2[22] = 0;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      v17 = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      v11 = MEMORY[0x24BEE4AF8];
      v2[23] = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v13 = 0;
      v12 = 0;
      v15 = 0;
    }
    v2[24] = v15;
    v2[25] = v5;
    v2[26] = v4;
    v2[27] = v13;
    *((_OWORD *)v2 + 14) = v17;
    v2[30] = v12;
    v2[31] = v11;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v2);
}

void (*Entity.__accessibilityLabel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x1F8uLL);
  *a1 = v4;
  v4[62] = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 32));
    v5 = *((unsigned __int8 *)v4 + 256);
    v6 = *((unsigned __int8 *)v4 + 257);
    v7 = v4[35];
    v15 = v4[34];
    v16 = v4[33];
    v8 = v4[36];
    v9 = v4[37];
    v10 = v4[38];
    v11 = v4[39];
    swift_release();
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v13, v16, v15, v7, v8, v9, v10, v11);
  }
  else
  {
    swift_release();
    v7 = 0;
    v8 = 0;
  }
  v4[60] = v7;
  v4[61] = v8;
  return Entity.accessibilityLabel.modify;
}

void (*Entity.__accessibilityDescription.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x1F8uLL);
  *a1 = v4;
  v4[62] = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 32));
    v5 = *((unsigned __int8 *)v4 + 256);
    v6 = *((unsigned __int8 *)v4 + 257);
    v7 = v4[35];
    v15 = v4[34];
    v16 = v4[33];
    v9 = v4[36];
    v8 = v4[37];
    v10 = v4[38];
    v11 = v4[39];
    swift_release();
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v13, v16, v15, v7, v9, v8, v10, v11);
  }
  else
  {
    swift_release();
    v8 = 0;
    v10 = 0;
  }
  v4[60] = v8;
  v4[61] = v10;
  return Entity.accessibilityDescription.modify;
}

uint64_t Entity.__accessibilityCustomContent.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    v0 = v12[0];
    v1 = v12[1];
    v2 = v13;
    v3 = v14;
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    swift_release();
    v9 = 256;
    if (!v1)
      v9 = 0;
    v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v8;
}

uint64_t key path getter for Entity.__accessibilityCustomContent : Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  v2 = v17;
  if (v17)
  {
    v4 = v15;
    v3 = v16;
    v6 = v13;
    v5 = v14;
    v8 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    result = swift_release();
    v2 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v2;
  return result;
}

uint64_t Entity.__accessibilityCustomContent.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v15);
    swift_release();
    v9 = v19;
    outlined release of [String : String]((uint64_t)&v9);
    v2 = v18;
    v3 = *((_QWORD *)&v15 + 1);
    v4 = v16;
    v5 = v17;
    v6 = 256;
    if (!BYTE1(v15))
      v6 = 0;
    v7 = v6 | v15;
  }
  else
  {
    swift_release();
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    v18 = 0;
    v19 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = 0uLL;
    v3 = 0;
    v2 = 0;
    v7 = 0;
    v5 = 0uLL;
  }
  v10[0] = v7;
  v10[1] = v3;
  v11 = v4;
  v12 = v5;
  v13 = v2;
  v14 = a1;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v10);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.__accessibilityCustomContent.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = malloc(0x1E0uLL);
  *a1 = v3;
  v4 = v3 + 58;
  v3[59] = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
    v5 = *((unsigned __int8 *)v3 + 256);
    v6 = *((unsigned __int8 *)v3 + 257);
    v7 = v3[34];
    v16 = v3[33];
    v8 = v3[35];
    v9 = v3[36];
    v10 = v3[37];
    v11 = v3[38];
    v12 = v3[39];
    swift_release();
    v13 = 256;
    if (!v6)
      v13 = 0;
    v14 = v13 | v5;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v14, v16, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    swift_release();
    v12 = MEMORY[0x24BEE4AF8];
  }
  *v4 = v12;
  return Entity.__accessibilityCustomContent.modify;
}

void Entity.__accessibilityCustomContent.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD **)a1;
  v4 = (unsigned __int8 *)(*(_QWORD *)a1 + 320);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 464);
  swift_retain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 48));
      swift_release();
      v3[57] = v3[55];
      outlined release of [String : String]((uint64_t)(v3 + 57));
      v6 = v3[54];
      v7 = v3[49];
      v8 = *((_OWORD *)v3 + 25);
      v9 = *((_OWORD *)v3 + 26);
      v10 = 256;
      if (!v4[65])
        v10 = 0;
      v11 = v10 | v4[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)v3 = 0u;
      v18 = MEMORY[0x24BEE4AF8];
      v3[6] = 0;
      v3[7] = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v8 = 0uLL;
      v7 = 0;
      v6 = 0;
      v11 = 0;
      v9 = 0uLL;
    }
    v3[8] = v11;
    v3[9] = v7;
    *((_OWORD *)v3 + 5) = v8;
    *((_OWORD *)v3 + 6) = v9;
    v3[14] = v6;
    v3[15] = v5;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 8));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v4);
      swift_release();
      v3[56] = v3[47];
      outlined release of [String : String]((uint64_t)(v3 + 56));
      v12 = v3[46];
      v13 = v3[41];
      v14 = *((_OWORD *)v3 + 21);
      v15 = *((_OWORD *)v3 + 22);
      v16 = 256;
      if (!v4[1])
        v16 = 0;
      v17 = v16 | *v4;
    }
    else
    {
      swift_release();
      v3[22] = 0;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      v3[23] = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      v14 = 0uLL;
      v13 = 0;
      v12 = 0;
      v17 = 0;
      v15 = 0uLL;
    }
    v3[24] = v17;
    v3[25] = v13;
    *((_OWORD *)v3 + 13) = v14;
    *((_OWORD *)v3 + 14) = v15;
    v3[30] = v12;
    v3[31] = v5;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t Entity._sendEvent<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  result = REEntityGetSceneNullable();
  if (result)
  {
    v5 = result;
    v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v5);
    }
    Scene.eventService.getter((uint64_t)v11);
    swift_release();
    v7 = v12;
    v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    EventService.publish<A>(_:on:componentType:)(a1, (uint64_t)v9, 0, 0, v7, a2, v8);
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for EventSource?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

uint64_t Entity.sendEvent(_:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[3];
  v2 = __swift_project_boxed_opaque_existential_1(a1, v1);
  return Entity._sendEvent<A>(_:)((uint64_t)v2, v1);
}

uint64_t __AccessibilityComponent.__toCore(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[16];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  REAccessibilityComponentSetIsRoot();
  REAccessibilityComponentSetEnabled();
  outlined init with take of String?(v0 + 8, (uint64_t)v14);
  outlined init with take of String?((uint64_t)v14, (uint64_t)v15);
  if (v15[1])
    String.utf8CString.getter();
  REAccessibilityComponentSetIdentifier();
  swift_unknownObjectRelease();
  outlined init with take of String?(v0 + 24, (uint64_t)v13);
  outlined init with take of String?((uint64_t)v13, (uint64_t)v16);
  if (v16[1])
    String.utf8CString.getter();
  REAccessibilityComponentSetLabel();
  swift_unknownObjectRelease();
  outlined init with take of String?(v0 + 40, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)v17);
  if (v17[1])
    String.utf8CString.getter();
  REAccessibilityComponentSetDescription();
  swift_unknownObjectRelease();
  REAccessibilityComponentClearCustomContent();
  result = *(_QWORD *)(v0 + 56);
  v11 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = (unint64_t *)(swift_bridgeObjectRetain() + 64);
    while (1)
    {
      v4 = *(v3 - 4);
      v5 = *(v3 - 3);
      v6 = *(v3 - 2);
      v7 = *(v3 - 1);
      v8 = *v3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = (void *)MEMORY[0x220768C3C](v4, v5);
      swift_bridgeObjectRelease();
      v10 = (void *)MEMORY[0x220768C3C](v6, v7);
      result = swift_bridgeObjectRelease();
      if (v8 >> 31)
        break;
      v3 += 5;
      REAccessibilityComponentAddCustomContent();

      if (!--v2)
        return outlined release of [String : String]((uint64_t)&v11);
    }
    __break(1u);
  }
  return result;
}

double protocol witness for static Component.__fromCore(_:) in conformance __AccessibilityComponent@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  specialized __AccessibilityComponent.init(from:)((uint64_t)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance __AccessibilityComponent()
{
  return __AccessibilityComponent.__toCore(_:)();
}

void protocol witness for static Component.__coreComponentType.getter in conformance __AccessibilityComponent(_DWORD *a1@<X8>)
{
  *a1 = 69;
}

uint64_t LocalizedStringResource.init(stringRepresentation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);
  _BYTE v17[16];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.Encoding();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static String.Encoding.utf8.getter();
  v9 = String.data(using:allowLossyConversion:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 >> 60 == 15)
  {
    v13 = type metadata accessor for LocalizedStringResource();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    v12 = type metadata accessor for LocalizedStringResource();
    lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD3A0]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    outlined consume of Data?(v9, v11);
    v14 = *(_QWORD *)(v12 - 8);
    v15 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56);
    v15((uint64_t)v4, 0, 1, v12);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a1, v4, v12);
    return v15(a1, 0, 1, v12);
  }
}

uint64_t AccessibilityComponent.CustomContent.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AccessibilityComponent.CustomContent.label.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AccessibilityComponent.CustomContent.label.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.CustomContent.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent.CustomContent(0) + 20);
  v4 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AccessibilityComponent.CustomContent.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent.CustomContent(0) + 20);
  v4 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AccessibilityComponent.CustomContent.value.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent.CustomContent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.CustomContent.importance.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessibilityComponent.CustomContent(0) + 24));
}

uint64_t AccessibilityComponent.CustomContent.importance.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AccessibilityComponent.CustomContent(0);
  *(_QWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.CustomContent.importance.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent.CustomContent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.CustomContent.init(label:value:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;

  v8 = type metadata accessor for LocalizedStringResource();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(a4, a1, v8);
  v10 = type metadata accessor for AccessibilityComponent.CustomContent(0);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a4 + *(int *)(v10 + 20), a2, v8);
  *(_QWORD *)(a4 + *(int *)(v10 + 24)) = a3;
  return result;
}

BOOL static AccessibilityComponent.CustomContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((MEMORY[0x220768144]() & 1) != 0
    && (v4 = type metadata accessor for AccessibilityComponent.CustomContent(0),
        (MEMORY[0x220768144](a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) != 0))
  {
    return *(_QWORD *)(a1 + *(int *)(v4 + 24)) == *(_QWORD *)(a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (MEMORY[0x220768144]() & 1) != 0
      && (MEMORY[0x220768144](a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0
      && *(_QWORD *)(a1 + *(int *)(a3 + 24)) == *(_QWORD *)(a2 + *(int *)(a3 + 24));
}

uint64_t AccessibilityComponent.SupportedActions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

RealityFoundation::AccessibilityComponent::SupportedActions __swiftcall AccessibilityComponent.SupportedActions.init(rawValue:)(RealityFoundation::AccessibilityComponent::SupportedActions rawValue)
{
  RealityFoundation::AccessibilityComponent::SupportedActions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AccessibilityComponent.SupportedActions.activate.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityComponent.SupportedActions.increment.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityComponent.SupportedActions.decrement.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static AccessibilityComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return AccessibilityComponent.init(from:)(*a1, a2);
}

uint64_t AccessibilityComponent.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char IsEnabled;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t CustomContentCount;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  id v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  unsigned int CustomContentImportanceAtIndex;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t SystemRotorsCount;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t SystemRotorAtIndex;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t CustomRotorsCount;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *CustomRotorAtIndex;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  void (*v129)(char *, char *, uint64_t);
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t SystemActions;
  uint64_t CustomActionsCount;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  void *CustomActionAtIndex;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  void (*v151)(char *, char *, uint64_t);
  char *v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  char *v157;
  uint64_t result;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  _BYTE *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;

  v4 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  v192 = *(_QWORD *)(v4 - 8);
  v193 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v183 = (uint64_t)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v179 = (char *)&v159 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v178 = (uint64_t)&v159 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v195 = (uint64_t)&v159 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v191 = (uint64_t *)((char *)&v159 - v13);
  v14 = type metadata accessor for String.Encoding();
  v196 = *(_QWORD *)(v14 - 8);
  v197 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for AccessibilityComponent.CustomContent(0);
  v164 = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165);
  v170 = (uint64_t)&v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v163 = (char *)&v159 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v162 = (uint64_t)&v159 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v22);
  v185 = (char *)&v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v186 = (char *)&v159 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v171 = (char *)&v159 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v187 = (char *)&v159 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v172 = (uint64_t)&v159 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v173 = (void (*)(char *, char *, uint64_t))((char *)&v159 - v33);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v159 - v35;
  v37 = type metadata accessor for LocalizedStringResource();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v182 = (char *)&v159 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v175 = (char *)&v159 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v174 = (char *)&v159 - v43;
  MEMORY[0x24BDAC7A8](v44);
  v177 = (char *)&v159 - v45;
  MEMORY[0x24BDAC7A8](v46);
  v176 = (char *)&v159 - v47;
  MEMORY[0x24BDAC7A8](v48);
  v161 = (char *)&v159 - v49;
  MEMORY[0x24BDAC7A8](v50);
  v160 = (char *)&v159 - v51;
  MEMORY[0x24BDAC7A8](v52);
  v180 = (char *)&v159 - v53;
  MEMORY[0x24BDAC7A8](v54);
  v184 = (char *)&v159 - v55;
  MEMORY[0x24BDAC7A8](v56);
  v166 = (char *)&v159 - v57;
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)&v159 - v59;
  v61 = (int *)type metadata accessor for AccessibilityComponent(0);
  v62 = (uint64_t)&a2[v61[5]];
  v189 = v38;
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56);
  v63(v62, 1, 1, v37);
  v64 = (uint64_t)&a2[v61[6]];
  v198 = v37;
  v194 = v63;
  v63(v64, 1, 1, v37);
  v190 = v61[7];
  *(_QWORD *)&a2[v190] = 0;
  v65 = MEMORY[0x24BEE4AF8];
  v169 = v61[8];
  *(_QWORD *)&a2[v169] = MEMORY[0x24BEE4AF8];
  v168 = v61[9];
  *(_QWORD *)&a2[v168] = v65;
  v167 = v61[10];
  *(_QWORD *)&a2[v167] = 0;
  v66 = (char *)v61[11];
  *(_QWORD *)&v66[(_QWORD)a2] = v65;
  IsEnabled = REAccessibilityComponentIsEnabled();
  v181 = a2;
  *a2 = IsEnabled;
  v199 = a1;
  if (REAccessibilityComponentGetLabel())
  {
    String.init(cString:)();
    LocalizedStringResource.init(stringRepresentation:)((uint64_t)v36);
    v68 = v189;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v36, 1, v198) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v36, &demangling cache variable for type metadata for LocalizedStringResource?);
      String.init(cString:)();
      v69 = (uint64_t)v173;
      LocalizedStringResource.init(stringLiteral:)();
      v194(v69, 0, 1, v198);
      outlined assign with take of LocalizedStringResource?(v69, v62);
    }
    else
    {
      v70 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      v71 = v198;
      v70(v60, v36, v198);
      outlined destroy of BodyTrackingComponent?(v62, &demangling cache variable for type metadata for LocalizedStringResource?);
      v70((char *)v62, v60, v71);
      v194(v62, 0, 1, v71);
    }
  }
  if (REAccessibilityComponentGetValue())
  {
    String.init(cString:)();
    v72 = v172;
    LocalizedStringResource.init(stringRepresentation:)(v172);
    v73 = v189;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v72, 1, v198) == 1)
    {
      outlined destroy of BodyTrackingComponent?(v72, &demangling cache variable for type metadata for LocalizedStringResource?);
      String.init(cString:)();
      v74 = (uint64_t)v173;
      LocalizedStringResource.init(stringLiteral:)();
      v194(v74, 0, 1, v198);
      outlined assign with take of LocalizedStringResource?(v74, v64);
    }
    else
    {
      v75 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
      v76 = v166;
      v77 = v72;
      v78 = v198;
      v75(v166, v77, v198);
      outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for LocalizedStringResource?);
      v75((char *)v64, (uint64_t)v76, v78);
      v194(v64, 0, 1, v78);
    }
  }
  *(_QWORD *)&v181[v190] = REAccessibilityComponentGetTraits();
  CustomContentCount = REAccessibilityComponentGetCustomContentCount();
  if (CustomContentCount < 0)
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v80 = CustomContentCount;
  v166 = v66;
  if (CustomContentCount)
  {
    v81 = 0;
    v172 = MEMORY[0x24BEE4AF8];
    v188 = v16;
    v190 = CustomContentCount;
    while (1)
    {
      if (v80 == v81)
      {
        __break(1u);
        goto LABEL_63;
      }
      v82 = (id)REAccessibilityComponentGetCustomContentLabelAtIndex();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static String.Encoding.utf8.getter();
      v83 = String.data(using:allowLossyConversion:)();
      v85 = v84;
      swift_bridgeObjectRelease();
      v86 = *(void (**)(char *, uint64_t))(v196 + 8);
      v86(v16, v197);
      if (v85 >> 60 == 15)
        goto LABEL_17;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD3A0]);
      v87 = v198;
      v88 = v187;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      outlined consume of Data?(v83, v85);
      v194((uint64_t)v88, 0, 1, v87);
      v89 = *(void (**)(char *, char *, uint64_t))(v189 + 32);
      v90 = v180;
      v89(v180, v88, v87);
      v173 = v89;
      v89(v184, v90, v87);
      v91 = (id)REAccessibilityComponentGetCustomContentValueAtIndex();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v92 = v188;
      static String.Encoding.utf8.getter();
      v93 = String.data(using:allowLossyConversion:)();
      v95 = v94;
      swift_bridgeObjectRelease();
      v86(v92, v197);
      if (v95 >> 60 == 15)
        break;
      swift_allocObject();
      PropertyListDecoder.init()();
      v96 = v171;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      outlined consume of Data?(v93, v95);
      v97 = v198;
      v194((uint64_t)v96, 0, 1, v198);
      v98 = v161;
      v99 = v173;
      v173(v161, v96, v97);
      v100 = v160;
      v99(v160, v98, v97);
      CustomContentImportanceAtIndex = REAccessibilityComponentGetCustomContentImportanceAtIndex();
      v16 = v188;
      if ((CustomContentImportanceAtIndex & 0x80000000) != 0)
        goto LABEL_69;
      v102 = CustomContentImportanceAtIndex;
      v103 = (uint64_t)v163;
      v104 = v198;
      v99(v163, v184, v198);
      v105 = v165;
      v99((char *)(v103 + *(int *)(v165 + 20)), v100, v104);
      *(_QWORD *)(v103 + *(int *)(v105 + 24)) = v102;
      v106 = v162;
      outlined init with take of __RKEntityActionSpecification(v103, v162, type metadata accessor for AccessibilityComponent.CustomContent);
      outlined init with take of __RKEntityActionSpecification(v106, v170, type metadata accessor for AccessibilityComponent.CustomContent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v172 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v172 + 16) + 1, 1, v172);
      v80 = v190;
      v108 = *(_QWORD *)(v172 + 16);
      v107 = *(_QWORD *)(v172 + 24);
      if (v108 >= v107 >> 1)
        v172 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v108 + 1, 1, v172);
      v109 = v172;
      *(_QWORD *)(v172 + 16) = v108 + 1;
      outlined init with take of __RKEntityActionSpecification(v170, v109+ ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80))+ *(_QWORD *)(v164 + 72) * v108, type metadata accessor for AccessibilityComponent.CustomContent);
LABEL_18:
      if (v80 == ++v81)
        goto LABEL_27;
    }
    v16 = v188;
    (*(void (**)(char *, uint64_t))(v189 + 8))(v184, v198);
LABEL_17:
    v80 = v190;
    goto LABEL_18;
  }
  v172 = MEMORY[0x24BEE4AF8];
LABEL_27:
  v110 = v181;
  v111 = v169;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v110[v111] = v172;
  SystemRotorsCount = REAccessibilityComponentGetSystemRotorsCount();
  if (SystemRotorsCount < 0)
    goto LABEL_65;
  v113 = SystemRotorsCount;
  if (SystemRotorsCount)
  {
    v114 = 0;
    v115 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      SystemRotorAtIndex = REAccessibilityComponentGetSystemRotorAtIndex();
      if (SystemRotorAtIndex < 0)
        break;
      v117 = (uint64_t)v191;
      *v191 = SystemRotorAtIndex;
      swift_storeEnumTagMultiPayload();
      outlined init with take of __RKEntityActionSpecification(v117, v195, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v115 + 16) + 1, 1, v115);
      v119 = *(_QWORD *)(v115 + 16);
      v118 = *(_QWORD *)(v115 + 24);
      if (v119 >= v118 >> 1)
        v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1, v115);
      ++v114;
      *(_QWORD *)(v115 + 16) = v119 + 1;
      outlined init with take of __RKEntityActionSpecification(v195, v115+ ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80))+ *(_QWORD *)(v192 + 72) * v119, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      if (v113 == v114)
        goto LABEL_38;
    }
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v115 = MEMORY[0x24BEE4AF8];
LABEL_38:
  CustomRotorsCount = REAccessibilityComponentGetCustomRotorsCount();
  if (CustomRotorsCount < 0)
    goto LABEL_66;
  v121 = CustomRotorsCount;
  if (CustomRotorsCount)
  {
    v122 = 0;
    v195 = MEMORY[0x24BEE4AF8];
    v123 = v198;
    do
    {
      CustomRotorAtIndex = (void *)REAccessibilityComponentGetCustomRotorAtIndex();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static String.Encoding.utf8.getter();
      v125 = String.data(using:allowLossyConversion:)();
      v127 = v126;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v196 + 8))(v16, v197);
      if (v127 >> 60 != 15)
      {
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD3A0]);
        v128 = v186;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        swift_release();
        outlined consume of Data?(v125, v127);
        v194((uint64_t)v128, 0, 1, v123);
        v129 = *(void (**)(char *, char *, uint64_t))(v189 + 32);
        v130 = v177;
        v129(v177, v128, v123);
        v131 = v176;
        v129(v176, v130, v123);
        v132 = (uint64_t)v179;
        v129(v179, v131, v123);
        swift_storeEnumTagMultiPayload();
        v133 = v178;
        outlined init with take of __RKEntityActionSpecification(v132, v178, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
        outlined init with take of __RKEntityActionSpecification(v133, v183, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v195 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v195 + 16) + 1, 1, v195);
        v135 = *(_QWORD *)(v195 + 16);
        v134 = *(_QWORD *)(v195 + 24);
        if (v135 >= v134 >> 1)
          v195 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v134 > 1, v135 + 1, 1, v195);
        v136 = v195;
        *(_QWORD *)(v195 + 16) = v135 + 1;
        outlined init with take of __RKEntityActionSpecification(v183, v136+ ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80))+ *(_QWORD *)(v192 + 72) * v135, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      }
      ++v122;
    }
    while (v121 != v122);
  }
  else
  {
    v195 = MEMORY[0x24BEE4AF8];
  }
  v200 = v115;
  specialized Array.append<A>(contentsOf:)(v195);
  v137 = v200;
  v138 = v181;
  v139 = v168;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v138[v139] = v137;
  SystemActions = REAccessibilityComponentGetSystemActions();
  if (SystemActions < 0)
    goto LABEL_67;
  *(_QWORD *)&v138[v167] = SystemActions;
  CustomActionsCount = REAccessibilityComponentGetCustomActionsCount();
  if ((CustomActionsCount & 0x8000000000000000) == 0)
  {
    v142 = CustomActionsCount;
    if (CustomActionsCount)
    {
      v143 = 0;
      v144 = MEMORY[0x24BEE4AF8];
      v145 = v198;
      do
      {
        CustomActionAtIndex = (void *)REAccessibilityComponentGetCustomActionAtIndex();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        static String.Encoding.utf8.getter();
        v147 = String.data(using:allowLossyConversion:)();
        v149 = v148;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v196 + 8))(v16, v197);
        if (v149 >> 60 != 15)
        {
          type metadata accessor for PropertyListDecoder();
          swift_allocObject();
          PropertyListDecoder.init()();
          lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD3A0]);
          v150 = v185;
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          swift_release();
          outlined consume of Data?(v147, v149);
          v194((uint64_t)v150, 0, 1, v145);
          v151 = *(void (**)(char *, char *, uint64_t))(v189 + 32);
          v152 = v175;
          v151(v175, v150, v145);
          v153 = v174;
          v151(v174, v152, v145);
          v151(v182, v153, v145);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v144 + 16) + 1, 1, v144);
          v155 = *(_QWORD *)(v144 + 16);
          v154 = *(_QWORD *)(v144 + 24);
          if (v155 >= v154 >> 1)
            v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v154 > 1, v155 + 1, 1, v144);
          *(_QWORD *)(v144 + 16) = v155 + 1;
          v151((char *)(v144+ ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80))+ *(_QWORD *)(v189 + 72) * v155), v182, v198);
        }
        ++v143;
      }
      while (v142 != v143);
    }
    else
    {
      v144 = MEMORY[0x24BEE4AF8];
    }
    v156 = v181;
    v157 = v166;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)&v157[(_QWORD)v156] = v144;
    return result;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t result;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(char *, unint64_t, uint64_t);
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;

  v3 = type metadata accessor for LocalizedStringResource();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v90 = (char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v96 = (char *)v84 - v7;
  v95 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  v85 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v92 = (char *)v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for AccessibilityComponent.CustomContent(0);
  v94 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v10 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v11);
  v97 = (char *)v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v84 - v17;
  v19 = *a1;
  REAccessibilityComponentSetEnabled();
  v86 = type metadata accessor for AccessibilityComponent(0);
  v87 = v1;
  outlined init with copy of LocalizedStringResource?(v1 + *(int *)(v86 + 20), (uint64_t)v18);
  v99 = v4;
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v21 = v20(v18, 1, v3);
  v98 = v3;
  v91 = v19;
  v93 = v10;
  if (v21 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for LocalizedStringResource?);
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD390]);
    v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v24 = v23;
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    v26 = v25;
    outlined consume of Data._Representation(v22, v24);
    swift_release();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v18, v3);
    if (v26)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
    }
    v10 = v93;
  }
  REAccessibilityComponentSetLabel();
  swift_unknownObjectRelease();
  outlined init with copy of LocalizedStringResource?(v87 + *(int *)(v86 + 24), (uint64_t)v15);
  v27 = v98;
  if (v20(v15, 1, v98) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for LocalizedStringResource?);
    v29 = v86;
    v28 = v87;
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD390]);
    v79 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v81 = v80;
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    v83 = v82;
    outlined consume of Data._Representation(v79, v81);
    swift_release();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v15, v27);
    v29 = v86;
    v28 = v87;
    if (v83)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
    }
    v10 = v93;
  }
  REAccessibilityComponentSetValue();
  swift_unknownObjectRelease();
  REAccessibilityComponentClearCustomContent();
  v30 = *(_QWORD *)(v28 + *(int *)(v29 + 32));
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = v30 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    v94 = *(_QWORD *)(v94 + 72);
    v84[1] = v30;
    swift_bridgeObjectRetain();
    v33 = type metadata accessor for AccessibilityComponent.CustomContent;
    while (1)
    {
      v34 = v33;
      outlined init with copy of __RKEntityActionSpecification(v32, (uint64_t)v10, v33);
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      dispatch thunk of PropertyListEncoder.outputFormat.setter();
      lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD390]);
      v35 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      v37 = v36;
      static String.Encoding.utf8.getter();
      v89 = String.init(data:encoding:)();
      v39 = v38;
      outlined consume of Data._Representation(v35, v37);
      swift_release();
      if (v39)
      {
        swift_allocObject();
        PropertyListEncoder.init()();
        dispatch thunk of PropertyListEncoder.outputFormat.setter();
        v41 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        v43 = v42;
        static String.Encoding.utf8.getter();
        v44 = String.init(data:encoding:)();
        v46 = v45;
        outlined consume of Data._Representation(v41, v43);
        swift_release();
        if (v46)
        {
          v47 = (uint64_t)v93;
          v48 = *(_QWORD *)&v93[*(int *)(v88 + 24)];
          v49 = (void *)MEMORY[0x220768C3C](v89, v39);
          swift_bridgeObjectRelease();
          v50 = (void *)MEMORY[0x220768C3C](v44, v46);
          swift_bridgeObjectRelease();
          if (v48 >> 31)
          {
            __break(1u);
            goto LABEL_45;
          }
          REAccessibilityComponentAddCustomContent();

          v33 = v34;
          outlined destroy of __RKEntityActionSpecification(v47, v34);
          v10 = (char *)v47;
        }
        else
        {
          v40 = (uint64_t)v93;
          v33 = v34;
          outlined destroy of __RKEntityActionSpecification((uint64_t)v93, v34);
          v10 = (char *)v40;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v10 = v93;
        outlined destroy of __RKEntityActionSpecification((uint64_t)v93, v33);
      }
      v32 += v94;
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v52 = (int *)v86;
  v51 = v87;
  REAccessibilityComponentSetTraits();
  REAccessibilityComponentClearSystemRotors();
  REAccessibilityComponentClearCustomRotors();
  v53 = *(_QWORD *)(v51 + v52[9]);
  v54 = *(_QWORD *)(v53 + 16);
  v55 = v98;
  if (v54)
  {
    v56 = v53 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
    v57 = *(_QWORD *)(v85 + 72);
    v93 = *(char **)(v51 + v52[9]);
    swift_bridgeObjectRetain();
    v58 = v92;
    v94 = v57;
    do
    {
      outlined init with copy of __RKEntityActionSpecification(v56, (uint64_t)v58, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, _QWORD *, uint64_t))(v99 + 32))(v96, v58, v55);
        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        dispatch thunk of PropertyListEncoder.outputFormat.setter();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD390]);
        v59 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        v61 = v60;
        static String.Encoding.utf8.getter();
        v62 = String.init(data:encoding:)();
        v64 = v63;
        outlined consume of Data._Representation(v59, v61);
        swift_release();
        if (v64)
        {
          v65 = (void *)MEMORY[0x220768C3C](v62, v64);
          swift_bridgeObjectRelease();
          REAccessibilityComponentAddCustomRotor();

        }
        v55 = v98;
        v58 = v92;
        v57 = v94;
        (*(void (**)(char *, uint64_t))(v99 + 8))(v96, v98);
      }
      else
      {
        if ((*v58 & 0x8000000000000000) != 0)
          goto LABEL_45;
        REAccessibilityComponentAddSystemRotor();
      }
      v56 += v57;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    v52 = (int *)v86;
    v51 = v87;
  }
  v66 = v90;
  if ((*(_QWORD *)(v51 + v52[10]) & 0x8000000000000000) != 0)
  {
LABEL_45:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    REAccessibilityComponentSetSystemActions();
    REAccessibilityComponentClearCustomActions();
    result = *(_QWORD *)(v51 + v52[11]);
    v68 = *(_QWORD *)(result + 16);
    if (v68)
    {
      v69 = result + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
      v70 = *(_QWORD *)(v99 + 72);
      v71 = *(void (**)(char *, unint64_t, uint64_t))(v99 + 16);
      v96 = *(char **)(v51 + v52[11]);
      swift_bridgeObjectRetain();
      do
      {
        v71(v66, v69, v55);
        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        dispatch thunk of PropertyListEncoder.outputFormat.setter();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource, MEMORY[0x24BDCD390]);
        v72 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        v74 = v73;
        static String.Encoding.utf8.getter();
        v75 = String.init(data:encoding:)();
        v77 = v76;
        outlined consume of Data._Representation(v72, v74);
        swift_release();
        if (v77)
        {
          v78 = (void *)MEMORY[0x220768C3C](v75, v77);
          swift_bridgeObjectRelease();
          REAccessibilityComponentAddCustomAction();

        }
        v55 = v98;
        v66 = v90;
        (*(void (**)(char *, uint64_t))(v99 + 8))(v90, v98);
        v69 += v70;
        --v68;
      }
      while (v68);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t AccessibilityComponent.isAccessibilityElement.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AccessibilityComponent.isAccessibilityElement.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AccessibilityComponent.isAccessibilityElement.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 20);
  return outlined init with copy of LocalizedStringResource?(v3, a1);
}

uint64_t AccessibilityComponent.label.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 20);
  return outlined assign with take of LocalizedStringResource?(a1, v3);
}

uint64_t (*AccessibilityComponent.label.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 24);
  return outlined init with copy of LocalizedStringResource?(v3, a1);
}

uint64_t AccessibilityComponent.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 24);
  return outlined assign with take of LocalizedStringResource?(a1, v3);
}

uint64_t (*AccessibilityComponent.value.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.traitsRawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 28));
}

uint64_t AccessibilityComponent.traitsRawValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AccessibilityComponent(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.traitsRawValue.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.customContent.getter()
{
  type metadata accessor for AccessibilityComponent(0);
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityComponent.customContent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AccessibilityComponent(0) + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.customContent.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.customRotorsRawValue.getter()
{
  type metadata accessor for AccessibilityComponent(0);
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityComponent.customRotorsRawValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AccessibilityComponent(0) + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.customRotorsRawValue.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.systemActions.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AccessibilityComponent(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t AccessibilityComponent.systemActions.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for AccessibilityComponent(0);
  *(_QWORD *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*AccessibilityComponent.systemActions.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.customActions.getter()
{
  type metadata accessor for AccessibilityComponent(0);
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityComponent.customActions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AccessibilityComponent(0) + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.customActions.modify())(_QWORD, _QWORD)
{
  type metadata accessor for AccessibilityComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.init()@<X0>(_BYTE *a1@<X8>)
{
  int *v2;
  _BYTE *v3;
  uint64_t v4;
  void (*v5)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;

  *a1 = 0;
  v2 = (int *)type metadata accessor for AccessibilityComponent(0);
  v3 = &a1[v2[5]];
  v4 = type metadata accessor for LocalizedStringResource();
  v5 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v5)(&a1[v2[6]], 1, 1, v4);
  *(_QWORD *)&a1[v2[7]] = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&a1[v2[8]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&a1[v2[9]] = v7;
  *(_QWORD *)&a1[v2[10]] = 0;
  *(_QWORD *)&a1[v2[11]] = v7;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AccessibilityComponent@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return AccessibilityComponent.init(from:)(*a1, a2);
}

uint64_t specialized __AccessibilityComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t IsRoot;
  uint64_t IsEnabled;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString *v11;
  Class v12;
  int64_t CustomContentCount;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  int CustomContentImportanceAtIndex;
  _QWORD *v21;
  uint64_t result;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  _QWORD *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  IsRoot = REAccessibilityComponentIsRoot();
  IsEnabled = REAccessibilityComponentIsEnabled();
  if (REAccessibilityComponentGetIdentifier())
  {
    v39 = String.init(cString:)();
    v7 = v6;
  }
  else
  {
    v39 = 0;
    v7 = 0;
  }
  swift_bridgeObjectRetain();
  if (REAccessibilityComponentGetLabel())
  {
    v37 = String.init(cString:)();
  }
  else
  {
    v37 = 0;
    v8 = 0;
  }
  v36 = v8;
  swift_bridgeObjectRetain();
  v38 = v7;
  if (REAccessibilityComponentGetDescription())
  {
    v10 = String.init(cString:)();
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v34 = v9;
  swift_bridgeObjectRetain();
  v11 = (NSString *)MEMORY[0x220768C3C](0x6D6F747375435841, 0xEF746E65746E6F43);
  v12 = NSClassFromString(v11);

  v35 = v10;
  if (!v12)
  {
    v15 = MEMORY[0x24BEE4AF8];
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease_n();
    *(_BYTE *)a1 = IsRoot;
    *(_BYTE *)(a1 + 1) = IsEnabled;
    *(_QWORD *)(a1 + 8) = v39;
    *(_QWORD *)(a1 + 16) = v38;
    *(_QWORD *)(a1 + 24) = v37;
    *(_QWORD *)(a1 + 32) = v36;
    *(_QWORD *)(a1 + 40) = v35;
    *(_QWORD *)(a1 + 48) = v34;
    *(_QWORD *)(a1 + 56) = v15;
    return result;
  }
  CustomContentCount = REAccessibilityComponentGetCustomContentCount();
  if (CustomContentCount < 0)
    goto LABEL_27;
  v15 = MEMORY[0x24BEE4AF8];
  if (!CustomContentCount)
    goto LABEL_18;
  v31 = IsEnabled;
  v32 = IsRoot;
  v33 = a1;
  v41 = MEMORY[0x24BEE4AF8];
  v40 = CustomContentCount;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, CustomContentCount, 0);
  v15 = v41;
  v16 = (id)REAccessibilityComponentGetCustomContentLabelAtIndex();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1 = v17;

  v18 = (id)REAccessibilityComponentGetCustomContentValueAtIndex();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  IsEnabled = v19;

  CustomContentImportanceAtIndex = REAccessibilityComponentGetCustomContentImportanceAtIndex();
  if ((CustomContentImportanceAtIndex & 0x80000000) == 0)
  {
    LODWORD(a1) = CustomContentImportanceAtIndex;
    IsRoot = *(_QWORD *)(v41 + 16);
    v14 = *(_QWORD *)(v41 + 24);
    v11 = (NSString *)(IsRoot + 1);
    if (IsRoot >= v14 >> 1)
      goto LABEL_28;
    while (1)
    {
      *(_QWORD *)(v15 + 16) = v11;
      v21 = (_QWORD *)(v15 + 40 * IsRoot);
      v21[4] = v10;
      v21[5] = v1;
      v21[6] = v2;
      v21[7] = IsEnabled;
      v21[8] = a1;
      v14 = v40;
      if (v40 == 1)
        break;
      IsEnabled = 1;
      while (v14 != IsEnabled)
      {
        v23 = (id)REAccessibilityComponentGetCustomContentLabelAtIndex();
        v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v2 = v24;

        v25 = (id)REAccessibilityComponentGetCustomContentValueAtIndex();
        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v10 = v26;

        v27 = REAccessibilityComponentGetCustomContentImportanceAtIndex();
        if ((v27 & 0x80000000) != 0)
          goto LABEL_29;
        v28 = v27;
        v41 = v15;
        IsRoot = *(_QWORD *)(v15 + 16);
        v29 = *(_QWORD *)(v15 + 24);
        v11 = (NSString *)(IsRoot + 1);
        if (IsRoot >= v29 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, IsRoot + 1, 1);
        ++IsEnabled;
        *(_QWORD *)(v15 + 16) = v11;
        v30 = (_QWORD *)(v15 + 40 * IsRoot);
        v30[4] = v1;
        v30[5] = v2;
        v30[6] = a1;
        v30[7] = v10;
        v30[8] = v28;
        v14 = v40;
        if (v40 == IsEnabled)
          goto LABEL_16;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, (int64_t)v11, 1);
      v15 = v41;
    }
LABEL_16:
    a1 = v33;
    LOBYTE(IsEnabled) = v31;
    LOBYTE(IsRoot) = v32;
    goto LABEL_18;
  }
LABEL_29:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AccessibilityComponent.RotorTypeInternal.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for LocalizedStringResource();
  v23 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v22 - v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AccessibilityComponent.RotorTypeInternal, AccessibilityComponent.RotorTypeInternal));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v15[*(int *)(v16 + 48)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v15, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v17, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v15, (uint64_t)v12, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v19 = *v12 == *(_QWORD *)v17;
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for (AccessibilityComponent.RotorTypeInternal, AccessibilityComponent.RotorTypeInternal));
    v19 = 0;
    return v19 & 1;
  }
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v15, (uint64_t)v9, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v4);
    goto LABEL_8;
  }
  v18 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v6, v17, v4);
  v19 = MEMORY[0x220768144](v9, v6);
  v20 = *(void (**)(char *, uint64_t))(v18 + 8);
  v20(v6, v4);
  v20(v9, v4);
LABEL_6:
  outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  return v19 & 1;
}

uint64_t type metadata accessor for AccessibilityComponent.CustomContent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent.CustomContent);
}

uint64_t type metadata accessor for AccessibilityComponent.RotorTypeInternal(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent.RotorTypeInternal);
}

uint64_t type metadata accessor for AccessibilityComponent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent);
}

uint64_t outlined init with copy of LocalizedStringResource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of LocalizedStringResource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AccessibilityComponent.SupportedActions, &type metadata for AccessibilityComponent.SupportedActions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AccessibilityComponent.SupportedActions, &type metadata for AccessibilityComponent.SupportedActions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AccessibilityComponent.SupportedActions, &type metadata for AccessibilityComponent.SupportedActions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AccessibilityComponent.SupportedActions, &type metadata for AccessibilityComponent.SupportedActions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

uint64_t sub_21BD1A3C4(char *a1)
{
  return Entity.isAccessibilityElement.setter(*a1);
}

uint64_t sub_21BD1A3EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_3(a1, a2, a3, a4, Entity.accessibilityLabel.setter);
}

uint64_t sub_21BD1A3FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_3(a1, a2, a3, a4, Entity.accessibilityDescription.setter);
}

uint64_t sub_21BD1A40C(char *a1)
{
  return Entity.__isAccessibilityRoot.setter(*a1);
}

uint64_t sub_21BD1A434(char *a1)
{
  return Entity.__isAccessibilityEnabled.setter(*a1);
}

uint64_t sub_21BD1A45C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_3(a1, a2, a3, a4, Entity.__accessibilityIdentifier.setter);
}

uint64_t sub_21BD1A46C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_3(a1, a2, a3, a4, Entity.__accessibilityLabel.setter);
}

uint64_t sub_21BD1A47C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_3(a1, a2, a3, a4, Entity.__accessibilityDescription.setter);
}

uint64_t keypath_set_2Tm_3(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t sub_21BD1A4CC()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return Entity.__accessibilityCustomContent.setter(v0);
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for LocalizedStringResource();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = a3[6];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    v20 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for LocalizedStringResource();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 24);
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for AccessibilityComponent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizedStringResource();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for AccessibilityComponent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizedStringResource();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for AccessibilityComponent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizedStringResource();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  return a1;
}

_BYTE *assignWithTake for AccessibilityComponent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizedStringResource();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  v21 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  v22 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityComponent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD1AEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityComponent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD1AF40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

void type metadata completion function for AccessibilityComponent()
{
  unint64_t v0;

  type metadata accessor for LocalizedStringResource?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for LocalizedStringResource?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocalizedStringResource?)
  {
    type metadata accessor for LocalizedStringResource();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocalizedStringResource?);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent.CustomContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for LocalizedStringResource();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for LocalizedStringResource();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for LocalizedStringResource();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for LocalizedStringResource();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for LocalizedStringResource();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityComponent.CustomContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD1B3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AccessibilityComponent.CustomContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD1B400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AccessibilityComponent.CustomContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent.RotorTypeInternal(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for AccessibilityComponent.RotorTypeInternal(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for LocalizedStringResource();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AccessibilityComponent.RotorTypeInternal()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityComponent.SupportedActions()
{
  return &type metadata for AccessibilityComponent.SupportedActions;
}

uint64_t destroy for __AccessibilityComponent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __AccessibilityComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __AccessibilityComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __AccessibilityComponent()
{
  return &type metadata for __AccessibilityComponent;
}

uint64_t lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LocalizedStringResource();
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void static AudioResource.Calibration.relative(dBSPL:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

void static AudioResource.Calibration.absolute(dBSPL:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
}

void AudioResource.Calibration.Kind.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt64 v3;

  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = a2;
  else
    v3 = 0;
  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(v3);
}

Swift::Int AudioResource.Calibration.Kind.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Swift::UInt64 v4;

  Hasher.init(_seed:)();
  if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = a1;
  else
    v4 = 0;
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Calibration.Kind(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0 && v2 == v3)
      return 1;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioResource.Calibration.Kind()
{
  uint64_t v0;

  return AudioResource.Calibration.Kind.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Calibration.Kind(uint64_t a1)
{
  uint64_t v1;

  AudioResource.Calibration.Kind.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioResource.Calibration.Kind()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v1 = 0;
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static AudioResource.Calibration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0 && v2 == v3)
      return 1;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

void AudioResource.Calibration.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;

  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)v0;
  else
    v1 = 0;
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  Hasher._combine(_:)(v1);
}

Swift::Int AudioResource.Calibration.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v1 = 0;
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Calibration(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    return 0;
  }
  return *(double *)a1 == *(double *)a2;
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Calibration()
{
  uint64_t v0;
  Swift::UInt64 v1;

  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)v0;
  else
    v1 = 0;
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  Hasher._combine(_:)(v1);
}

unint64_t lazy protocol witness table accessor for type AudioResource.Calibration and conformance AudioResource.Calibration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.Calibration and conformance AudioResource.Calibration;
  if (!lazy protocol witness table cache variable for type AudioResource.Calibration and conformance AudioResource.Calibration)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.Calibration, &type metadata for AudioResource.Calibration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Calibration and conformance AudioResource.Calibration);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.Calibration()
{
  return &type metadata for AudioResource.Calibration;
}

void *type metadata accessor for AudioResource.Calibration.Kind()
{
  return &unk_24DFCDA00;
}

unint64_t lazy protocol witness table accessor for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind;
  if (!lazy protocol witness table cache variable for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.Calibration.Kind, &unk_24DFCDA00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

BOOL static ShaderGraphMaterial.LoadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ShaderGraphMaterial.LoadError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ShaderGraphMaterial.LoadError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v5[17] = v6;
  v5[18] = *(_QWORD *)(v6 - 8);
  v5[19] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v5[20] = v7;
  v5[21] = *(_QWORD *)(v7 - 8);
  v5[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ShaderGraphMaterial.init(named:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = v0[19];
  v16 = v0[18];
  v2 = v0[16];
  v3 = v0[17];
  v4 = v0[14];
  v5 = v0[15];
  v6 = v0[13];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v6;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in ShaderGraphMaterial.init(named:from:);
  *(_QWORD *)(v8 + 24) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  v10 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v10 + 16) = v11;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_WORD *)(v10 + 88) = -256;
  *(_QWORD *)(v9 + 16) = v10;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = partial apply for thunk for @callee_guaranteed () -> ();
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  outlined copy of Data._Representation(v5, v2);
  swift_retain();
  *(_QWORD *)(v9 + 24) = Future.init(_:)();
  v13 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  v0[23] = v13;
  swift_release();
  v0[11] = v13;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  swift_retain();
  AsyncPublisher.init(_:)();
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v3);
  v14 = (_QWORD *)swift_task_alloc();
  v0[24] = v14;
  *v14 = v0;
  v14[1] = ShaderGraphMaterial.init(named:from:);
  return AsyncThrowingPublisher.Iterator.next()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 176) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[14];
  v2 = v0[15];
  v3 = v0[13];
  swift_release();
  v0[23] = static ShaderGraphMaterial.loadAsync(named:from:)(v3, v1, v2);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[16];
  v0[11] = v0[23];
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  AsyncPublisher.init(_:)();
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = ShaderGraphMaterial.init(named:from:);
  return AsyncThrowingPublisher.Iterator.next()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 120);
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v16 = *(_BYTE *)(v0 + 80);
    v6 = *(_DWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 72);
    v13 = *(_OWORD *)(v0 + 40);
    v7 = *(_BYTE *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v0 + 152));
    swift_release();
    v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
    *(_QWORD *)v5 = v1;
    *(_QWORD *)(v5 + 8) = v8;
    *(_BYTE *)(v5 + 16) = v7 & 1;
    *(_OWORD *)(v5 + 24) = v13;
    *(_QWORD *)(v5 + 40) = v14;
    *(_BYTE *)(v5 + 48) = v6 & 1;
    *(_BYTE *)(v5 + 49) = BYTE1(v6) & 1;
    *(_QWORD *)(v5 + 56) = v15;
    *(_BYTE *)(v5 + 64) = v16 & 1;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 152);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v10);
    v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2)
{
  Class isa;
  uint64_t v5;
  void *v6;
  _QWORD aBlock[6];

  swift_retain();
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
  aBlock[3] = &block_descriptor_165;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  String.utf8CString.getter();
  RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync();
  swift_release();
  _Block_release(v6);
  swift_release();

}

uint64_t sub_21BD1C480()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

void partial apply for closure #1 in ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2)
{
  closure #1 in ShaderGraphMaterial.init(named:from:)(a1, a2);
}

void ShaderGraphMaterial.AsyncDestination.completion(_:_:)(void *a1, void *a2, void (*a3)(void **))
{
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _BYTE *v13;
  id v14;
  uint64_t v15;
  char v16[32];
  void *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[25];
  char v21;

  if (a1)
  {
    *(_QWORD *)&v19 = MEMORY[0x24BEE27D0];
    v17 = a1;
    outlined init with copy of Any((uint64_t)&v17, (uint64_t)v16);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        return;
      }
      v7 = specialized static Entity.entityInfoType(_:)();
      if (v7)
      {
        v8 = (*(uint64_t (**)(void))(v7 + 232))();
        v9 = *(_QWORD *)(v8 + 16);
        swift_retain();
        MEMORY[0x22076D160](v9, 0);
        *(_QWORD *)(v8 + 16) = v15;
        MEMORY[0x22076D160](v15, v8);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v15);
      }
    }
    static ShaderGraphMaterial.unpackModelEntity(_:)((uint64_t)&v17);
    v10 = (void *)*((_QWORD *)&v19 + 1);
    v11 = 256;
    if (!v20[9])
      v11 = 0;
    *((_QWORD *)&v18 + 1) = BYTE8(v18);
    *(_QWORD *)&v20[8] = v11 | v20[8];
    v21 = 0;
    swift_bridgeObjectRetain();
    v12 = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    a3(&v17);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  else
  {
    if (a2)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v5 = (void *)swift_allocError();
      *v6 = a2;
    }
    else
    {
      lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
      v5 = (void *)swift_allocError();
      *v13 = 4;
    }
    v17 = v5;
    v18 = 0u;
    v19 = 0u;
    memset(v20, 0, sizeof(v20));
    v21 = 1;
    v14 = a2;
    a3(&v17);

  }
}

uint64_t ShaderGraphMaterial.init(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[16] = a5;
  v6[17] = a6;
  v6[14] = a3;
  v6[15] = a4;
  v6[12] = a1;
  v6[13] = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v6[18] = v7;
  v6[19] = *(_QWORD *)(v7 - 8);
  v6[20] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v6[21] = v8;
  v6[22] = *(_QWORD *)(v8 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ShaderGraphMaterial.init(named:from:in:)()
{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 192) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[16];
  v2 = (void *)v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v5 = v0[13];
  swift_release();
  v0[25] = static ShaderGraphMaterial.loadAsync(named:from:in:)(v5, v4, v3, v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  v0[11] = v0[25];
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  AsyncPublisher.init(_:)();
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[26] = v4;
  *v4 = v0;
  v4[1] = ShaderGraphMaterial.init(named:from:in:);
  return AsyncThrowingPublisher.Iterator.next()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  if (v1)
  {
    v5 = *(void **)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 96);
    v16 = *(_BYTE *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_DWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 72);
    v13 = *(_OWORD *)(v0 + 40);
    v9 = *(_BYTE *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 24);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v10;
    *(_BYTE *)(v6 + 16) = v9 & 1;
    *(_OWORD *)(v6 + 24) = v13;
    *(_QWORD *)(v6 + 40) = v14;
    *(_BYTE *)(v6 + 48) = v8 & 1;
    *(_BYTE *)(v6 + 49) = BYTE1(v8) & 1;
    *(_QWORD *)(v6 + 56) = v15;
    *(_BYTE *)(v6 + 64) = v16 & 1;
  }
  else
  {
    v11 = *(void **)(v0 + 136);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(void **)(v0 + 136);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;

  if (a5)
    v10 = a5;
  else
    v10 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v11 = a5;
  v12 = specialized static __ServiceLocator.shared.getter();
  v13 = *(void **)(*(_QWORD *)(v12 + 168) + 16);
  swift_beginAccess();
  v14 = *(_QWORD *)(v12 + 24);
  swift_unownedRetainStrong();
  v15 = *(void **)(v14 + 32);
  swift_retain();
  v16 = v13;
  v17 = v15;
  swift_release();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v16;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = v10;
  v18[6] = a1;
  v18[7] = a2;
  v18[8] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_WORD *)(v20 + 88) = -256;
  *(_QWORD *)(v19 + 16) = v20;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:);
  v22[3] = v18;
  v22[4] = v20;
  v22[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  v23 = v16;
  v24 = v17;
  swift_bridgeObjectRetain();
  v25 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)(v19 + 24) = Future.init(_:)();
  v26 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

  swift_release();
  swift_release();
  return v26;
}

uint64_t ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v4[16] = v5;
  v4[17] = *(_QWORD *)(v5 - 8);
  v4[18] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v4[19] = v6;
  v4[20] = *(_QWORD *)(v6 - 8);
  v4[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a1;
  v29 = a2;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = specialized static __ServiceLocator.shared.getter();
  v9 = *(void **)(*(_QWORD *)(v8 + 168) + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v8 + 24);
  swift_unownedRetainStrong();
  v11 = *(void **)(v10 + 32);
  swift_retain();
  v12 = v9;
  v13 = v11;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
  v14 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v15 = (v6 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v16 + v14, v7, v4);
  v17 = (_QWORD *)(v16 + v15);
  v18 = v29;
  *v17 = v28;
  v17[1] = v18;
  *(_QWORD *)(v16 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8)) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_WORD *)(v20 + 88) = -256;
  *(_QWORD *)(v19 + 16) = v20;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
  v22[3] = v16;
  v22[4] = v20;
  v22[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  v23 = v12;
  v24 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)(v19 + 24) = Future.init(_:)();
  v25 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  swift_release();

  swift_release();
  return v25;
}

uint64_t ShaderGraphMaterial.init(materialXLabel:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v5[17] = v6;
  v5[18] = *(_QWORD *)(v6 - 8);
  v5[19] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v5[20] = v7;
  v5[21] = *(_QWORD *)(v7 - 8);
  v5[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ShaderGraphMaterial.init(materialXLabel:data:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[18];
  v1 = v0[19];
  v3 = v0[17];
  v4 = specialized static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(v0[13], v0[14], v0[15], v0[16]);
  v0[23] = v4;
  swift_bridgeObjectRelease();
  v0[11] = v4;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  AsyncPublisher.init(_:)();
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[24] = v5;
  *v5 = v0;
  v5[1] = ShaderGraphMaterial.init(materialXLabel:data:);
  return AsyncThrowingPublisher.Iterator.next()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  if (v1)
  {
    v7 = *(_QWORD *)(v0 + 96);
    v15 = *(_BYTE *)(v0 + 80);
    v8 = *(_DWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 72);
    v12 = *(_OWORD *)(v0 + 40);
    v11 = *(_BYTE *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 24);
    swift_release();
    outlined consume of Data._Representation(v6, v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    *(_QWORD *)v7 = v1;
    *(_QWORD *)(v7 + 8) = v9;
    *(_BYTE *)(v7 + 16) = v11 & 1;
    *(_OWORD *)(v7 + 24) = v12;
    *(_QWORD *)(v7 + 40) = v13;
    *(_BYTE *)(v7 + 48) = v8 & 1;
    *(_BYTE *)(v7 + 49) = BYTE1(v8) & 1;
    *(_QWORD *)(v7 + 56) = v14;
    *(_BYTE *)(v7 + 64) = v15 & 1;
  }
  else
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    outlined consume of Data._Representation(v6, v5);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v27 = a7;
  v31 = a3;
  v15 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v18 - 8);
  v29 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a4;
  v21[3] = a5;
  v22 = v27;
  v21[4] = a6;
  v21[5] = v22;
  v21[6] = a8;
  v21[7] = a1;
  v21[8] = a2;
  v21[9] = a9;
  aBlock[4] = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_116;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v24 = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  v25 = a9;
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v20, v17, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  NSURL *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t aBlock;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t (*v81)();
  uint64_t v82;

  v65 = a8;
  v74 = a6;
  v75 = a7;
  v72 = a4;
  v73 = a5;
  v64 = type metadata accessor for DispatchWorkItemFlags();
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v62 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for DispatchQoS();
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v59 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String)?);
  MEMORY[0x24BDAC7A8](v13);
  v69 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
  v67 = *(_QWORD *)(v15 - 8);
  v68 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v58 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v17);
  v70 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v58 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v58 - v23;
  v25 = type metadata accessor for URL();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v66 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v71 = (char *)&v58 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v58 - v31;
  type metadata accessor for LoadUtilities();
  if (one-time initialization token for usdExtensions != -1)
    swift_once();
  static LoadUtilities.getURL(name:in:allowingExtensions:)(a1, a2, a3, (_QWORD *)static LoadUtilities.usdExtensions, v24);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v33((uint64_t)v24, 1, v25) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for URL?);
    static LoadUtilities.getURL(name:in:typeExtension:)(a1, a2, a3, 2020373613, 0xE400000000000000, (uint64_t)v21);
    if (v33((uint64_t)v21, 1, v25) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for URL?);
      v34 = v70;
      static LoadUtilities.getURL(name:in:typeExtension:)(a1, a2, a3, 0x7974696C616572, 0xE700000000000000, v70);
      if (v33(v34, 1, v25) == 1)
      {
        outlined destroy of BodyTrackingComponent?(v34, &demangling cache variable for type metadata for URL?);
        v35 = v69;
        static LoadUtilities.getURLForRealityFile(withScene:in:)(a1, a2, a3, v69);
        v36 = v68;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v35, 1, v68) == 1)
        {
          outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for (URL, String)?);
          v37 = swift_allocObject();
          v38 = v75;
          *(_QWORD *)(v37 + 16) = v74;
          *(_QWORD *)(v37 + 24) = v38;
          v81 = partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
          v82 = v37;
          aBlock = MEMORY[0x24BDAC760];
          v78 = 1107296256;
          v79 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v80 = &block_descriptor_122_0;
          v39 = _Block_copy(&aBlock);
          swift_retain();
          v40 = v59;
          static DispatchQoS.unspecified.getter();
          v76 = MEMORY[0x24BEE4AF8];
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
          v41 = v62;
          v42 = v64;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          MEMORY[0x2207693A4](0, v40, v41, v39);
          _Block_release(v39);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v42);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v61);
          return swift_release();
        }
        else
        {
          v52 = *(int *)(v36 + 48);
          v53 = (uint64_t)v58;
          v54 = (uint64_t *)&v58[v52];
          v55 = (uint64_t *)(v35 + v52);
          (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v58, v35, v25);
          v56 = *v55;
          v57 = v55[1];
          *v54 = v56;
          v54[1] = v57;
          swift_bridgeObjectRetain();
          static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:)(v56, v57, v72, v73, v53, v74, v75);
          swift_bridgeObjectRelease();
          return outlined destroy of BodyTrackingComponent?(v53, &demangling cache variable for type metadata for (URL, String));
        }
      }
      else
      {
        v51 = (uint64_t)v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v66, v34, v25);
        static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(v72, (uint64_t)v73, v51, v74, v75);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v51, v25);
      }
    }
    else
    {
      v44 = v71;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v71, v21, v25);
      v45 = v75;
      swift_retain();
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      swift_unownedRetainStrong();
      swift_release();
      URL._bridgeToObjectiveC()(v46);
      v48 = v47;
      v49 = swift_allocObject();
      *(_QWORD *)(v49 + 16) = v74;
      *(_QWORD *)(v49 + 24) = v45;
      v81 = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
      v82 = v49;
      aBlock = MEMORY[0x24BDAC760];
      v78 = 1107296256;
      v79 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
      v80 = &block_descriptor_129_0;
      v50 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      String.utf8CString.getter();
      RIOEntityUsingMaterialCreateFromMtlxURLAsync();
      swift_release();
      _Block_release(v50);
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v44, v25);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v32, v24, v25);
    static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(v72, (uint64_t)v73, (uint64_t)v32, v74, v75);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v32, v25);
  }
}

void static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD aBlock[7];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v9);
  v10 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 24);
  swift_unownedRetainStrong();
  v12 = *(void **)(v11 + 32);
  swift_retain();
  v13 = v12;
  swift_release();
  v14 = (void *)specialized static ShaderGraphMaterial.createInMemoryMaterialLoadingImportSession(primPath:url:)(a1, a2);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = v13;
  v15[4] = a4;
  v15[5] = a5;
  aBlock[4] = partial apply for closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_91_0;
  v16 = _Block_copy(aBlock);
  v17 = v13;
  v18 = v14;
  swift_retain();
  swift_release();
  RIOImportSessionSetSceneUpdatePassCompletion();
  _Block_release(v16);
  RIOImportSessionUpdate();

  swift_release();
}

void static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  void (*v14)();
  uint64_t (*v15)(void *, void (*)());
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  NSURL *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t AssetDescriptorFromLabel;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[2];
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t aBlock;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  void (*v64)();
  _QWORD *v65;

  v52 = a5;
  v53 = a4;
  v51 = a2;
  v50 = a1;
  v57 = type metadata accessor for DispatchWorkItemFlags();
  v54 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v6 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchQoS();
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v55 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (_QWORD *)((char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12 + 120, (uint64_t)&aBlock);
  v13 = v63;
  v14 = v64;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v63);
  v15 = (uint64_t (*)(void *, void (*)()))*((_QWORD *)v14 + 4);
  swift_retain();
  v16 = v15(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  swift_beginAccess();
  v17 = *(_QWORD *)(v12 + 24);
  swift_unownedRetainStrong();
  v18 = *(id *)(v17 + 32);
  swift_release();
  v19 = *(void **)(*(_QWORD *)(v12 + 168) + 16);
  *v11 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5610], v8);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    v28 = swift_allocObject();
    v29 = v52;
    *(_QWORD *)(v28 + 16) = v53;
    *(_QWORD *)(v28 + 24) = v29;
    v64 = (void (*)())partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
    v65 = (_QWORD *)v28;
    aBlock = MEMORY[0x24BDAC760];
    v61 = 1107296256;
    v30 = &block_descriptor_61;
LABEL_9:
    v62 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v63 = v30;
    v33 = _Block_copy(&aBlock);
    swift_retain();
    v34 = v20;
    v35 = v55;
    static DispatchQoS.unspecified.getter();
    v59 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v36 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v35, v6, v33);
    swift_release();
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v6, v36);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v58);
    swift_release();
    return;
  }
  URL._bridgeToObjectiveC()(v21);
  v23 = v22;
  v24 = RERealityFileMountFileAtURL();

  if (!v24)
  {
    v31 = swift_allocObject();
    v32 = v52;
    *(_QWORD *)(v31 + 16) = v53;
    *(_QWORD *)(v31 + 24) = v32;
    v64 = partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:);
    v65 = (_QWORD *)v31;
    aBlock = MEMORY[0x24BDAC760];
    v61 = 1107296256;
    v30 = &block_descriptor_67;
    goto LABEL_9;
  }
  String.utf8CString.getter();
  AssetDescriptorFromLabel = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  v49 = v20;
  if (AssetDescriptorFromLabel)
  {
    v26 = REAssetHandleCreateWithAssetDescriptor();
    type metadata accessor for NSObject();
    v27 = static NSObject.== infix(_:_:)();
    v48[1] = v16;
    v48[0] = v24;
    if ((v27 & 1) != 0)
      REAssetHandleLoadNow();
    else
      REAssetHandleLoadNowFromOtherQueue();
    v42 = v52;
    v43 = (_QWORD *)swift_allocObject();
    v44 = v53;
    v43[2] = v26;
    v43[3] = v44;
    v43[4] = v42;
    v64 = partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:);
    v65 = v43;
    aBlock = MEMORY[0x24BDAC760];
    v61 = 1107296256;
    v62 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v63 = &block_descriptor_79_0;
    v45 = _Block_copy(&aBlock);
    swift_retain();
    v46 = v55;
    static DispatchQoS.unspecified.getter();
    v59 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v47 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v46, v6, v45);
    _Block_release(v45);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v6, v47);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v58);
    swift_release();
    RERelease();
    RERealityFileUnmount();
    swift_release();

  }
  else
  {
    v37 = swift_allocObject();
    v38 = v52;
    *(_QWORD *)(v37 + 16) = v53;
    *(_QWORD *)(v37 + 24) = v38;
    v64 = partial apply for closure #3 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:);
    v65 = (_QWORD *)v37;
    aBlock = MEMORY[0x24BDAC760];
    v61 = 1107296256;
    v62 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v63 = &block_descriptor_73;
    v39 = _Block_copy(&aBlock);
    swift_retain();
    v40 = v55;
    static DispatchQoS.unspecified.getter();
    v59 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v41 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v40, v6, v39);
    _Block_release(v39);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v6, v41);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v58);
    swift_release();
    RERealityFileUnmount();
    swift_release();

  }
}

void static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)();
  uint64_t (*v17)(void *, uint64_t (*)());
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  NSURL *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t AssetDescriptorFromLabel;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  char *v56;
  void *object;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t aBlock;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  void *v86;
  uint64_t (*v87)();
  _QWORD *v88;

  v74 = a7;
  v75 = a6;
  v73._object = a4;
  v73._countAndFlagsBits = a3;
  v72 = a1;
  v78 = type metadata accessor for DispatchWorkItemFlags();
  v80 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v81 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for DispatchQoS();
  v76 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v77 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v14 + 120, (uint64_t)&aBlock);
  v15 = v86;
  v16 = v87;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v86);
  v17 = (uint64_t (*)(void *, uint64_t (*)()))*((_QWORD *)v16 + 4);
  swift_retain();
  v18 = v17(v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  swift_beginAccess();
  v19 = *(_QWORD *)(v14 + 24);
  swift_unownedRetainStrong();
  v20 = *(id *)(v19 + 32);
  swift_release();
  v21 = *(void **)(*(_QWORD *)(v14 + 168) + 16);
  *v13 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5610], v10);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    v31 = swift_allocObject();
    v32 = v74;
    *(_QWORD *)(v31 + 16) = v75;
    *(_QWORD *)(v31 + 24) = v32;
    v87 = partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
    v88 = (_QWORD *)v31;
    aBlock = MEMORY[0x24BDAC760];
    v84 = 1107296256;
    v33 = &block_descriptor_135;
LABEL_9:
    v85 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v86 = v33;
    v36 = _Block_copy(&aBlock);
    swift_retain();
    v37 = v77;
    static DispatchQoS.unspecified.getter();
    v82 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v38 = v22;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v39 = v81;
    v40 = v78;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v37, v39, v36);
    swift_release();
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v37, v79);
    swift_release();
    return;
  }
  URL._bridgeToObjectiveC()(v23);
  v25 = v24;
  v26 = RERealityFileMountFileAtURL();

  if (!v26)
  {
    v34 = swift_allocObject();
    v35 = v74;
    *(_QWORD *)(v34 + 16) = v75;
    *(_QWORD *)(v34 + 24) = v35;
    v87 = partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
    v88 = (_QWORD *)v34;
    aBlock = MEMORY[0x24BDAC760];
    v84 = 1107296256;
    v33 = &block_descriptor_141;
    goto LABEL_9;
  }
  aBlock = v72;
  v84 = a2;
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = 58;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  AssetDescriptorFromLabel = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  v71 = v22;
  if (AssetDescriptorFromLabel)
  {
    v29 = REAssetHandleCreateWithAssetDescriptor();
    RERelease();
    type metadata accessor for NSObject();
    v73._object = v20;
    v30 = static NSObject.== infix(_:_:)();
    v70 = v18;
    v69 = v26;
    if ((v30 & 1) != 0)
      REAssetHandleLoadNow();
    else
      REAssetHandleLoadNowFromOtherQueue();
    v49 = v78;
    v48 = v79;
    v51 = v76;
    v50 = v77;
    v52 = v74;
    v53 = v75;
    v54 = (_QWORD *)swift_allocObject();
    v54[2] = v29;
    v54[3] = v53;
    v54[4] = v52;
    v87 = partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:);
    v88 = v54;
    aBlock = MEMORY[0x24BDAC760];
    v84 = 1107296256;
    v85 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v86 = &block_descriptor_159;
    v55 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v82 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v56 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    object = v73._object;
    MEMORY[0x2207693A4](0, v50, v56, v55);
    _Block_release(v55);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v49);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v48);
LABEL_18:
    swift_release();
    RERealityFileUnmount();
    swift_release();

    goto LABEL_19;
  }
  String.utf8CString.getter();
  v41 = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  if (v41)
  {
    v42 = REAssetHandleCreateWithAssetDescriptor();
    RERelease();
    type metadata accessor for NSObject();
    v43 = v20;
    v44 = static NSObject.== infix(_:_:)();
    v46 = v77;
    v45 = v78;
    v47 = v76;
    v70 = v18;
    v69 = v26;
    if ((v44 & 1) != 0)
      REAssetHandleLoadNow();
    else
      REAssetHandleLoadNowFromOtherQueue();
    v64 = v74;
    v65 = (_QWORD *)swift_allocObject();
    v66 = v75;
    v65[2] = v42;
    v65[3] = v66;
    v65[4] = v64;
    v87 = partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:);
    v88 = v65;
    aBlock = MEMORY[0x24BDAC760];
    v84 = 1107296256;
    v85 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v86 = &block_descriptor_153;
    v67 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v82 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v68 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    object = v43;
    MEMORY[0x2207693A4](0, v46, v68, v67);
    _Block_release(v67);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v68, v45);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v79);
    goto LABEL_18;
  }
  v58 = swift_allocObject();
  v59 = v74;
  *(_QWORD *)(v58 + 16) = v75;
  *(_QWORD *)(v58 + 24) = v59;
  v87 = partial apply for closure #5 in static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:);
  v88 = (_QWORD *)v58;
  aBlock = MEMORY[0x24BDAC760];
  v84 = 1107296256;
  v85 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v86 = &block_descriptor_147;
  v60 = _Block_copy(&aBlock);
  swift_retain();
  v61 = v77;
  static DispatchQoS.unspecified.getter();
  v82 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v62 = v81;
  v63 = v78;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v61, v62, v60);
  _Block_release(v60);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v61, v79);
  swift_release();
  RERealityFileUnmount();
  swift_release();

LABEL_19:
}

uint64_t closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];

  v35 = a6;
  v36 = a7;
  v33 = a5;
  v34 = a2;
  v41 = a3;
  v32 = a1;
  v37 = type metadata accessor for DispatchWorkItemFlags();
  v40 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a4, v13, v16);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v21 + v18, v17, v13);
  v22 = (_QWORD *)(v21 + v19);
  v23 = v34;
  v25 = v35;
  v24 = v36;
  *v22 = v33;
  v22[1] = v25;
  v26 = (_QWORD *)(v21 + v20);
  *v26 = v32;
  v26[1] = v23;
  *(_QWORD *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_43_1;
  v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v28 = v24;
  static DispatchQoS.unspecified.getter();
  v42 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v29 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v12, v9, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  return swift_release();
}

void closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  NSURL *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  void (*v35)(void *, void *);
  uint64_t v36;

  v26[1] = a6;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v26[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = URL.pathExtension.getter();
  v17 = v15;
  if (v16 == 0x7974696C616572 && v15 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(v27, v28, a1, v29, a5);
    return;
  }
  if ((specialized static LoadUtilities.isUSDPathExtension(pathExtension:)(v16, v17) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(v27, v28, a1, v29, a5);
    return;
  }
  if (v16 == 2020373613 && v17 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_retain();
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    URL._bridgeToObjectiveC()(v19);
    v21 = v20;
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v29;
    *(_QWORD *)(v22 + 24) = a5;
    v35 = partial apply for implicit closure #2 in implicit closure #1 in static ShaderGraphMaterial.loadAsyncFromMaterialX(materialLabel:url:fulfill:);
    v36 = v22;
    aBlock = MEMORY[0x24BDAC760];
    v32 = 1107296256;
    v33 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
    v34 = &block_descriptor_55_0;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    String.utf8CString.getter();
    RIOEntityUsingMaterialCreateFromMtlxURLAsync();
    swift_release();
    _Block_release(v23);
    swift_release();

    return;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    goto LABEL_11;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v29;
  *(_QWORD *)(v24 + 24) = a5;
  v35 = (void (*)(void *, void *))partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
  v36 = v24;
  aBlock = MEMORY[0x24BDAC760];
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v34 = &block_descriptor_49;
  v25 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v14, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v26[0] + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release();
}

void closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(uint64_t a1, void (*a2)(uint64_t *))
{
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[26];

  if (REAssetHandleAssetType() == 2 && REMaterialAssetGetType() == 7)
  {
    v4 = (void *)REMaterialParameterBlockValueCreate();
    v5 = specialized static LoadableResource.fromCore(assetRef:)(a1);
    if (v5)
    {
      v9 = v5;
      v10 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v11 = 0;
      *((_QWORD *)&v11 + 1) = v4;
      *(_OWORD *)v12 = xmmword_21BE77690;
      *(_QWORD *)&v12[16] = 0;
      *(_WORD *)&v12[24] = 1;
      swift_retain();
      swift_bridgeObjectRetain();
      v6 = v4;
      a2(&v9);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    v7 = (void *)swift_allocError();
    *v8 = 0;
    v9 = (uint64_t)v7;
    v10 = 0u;
    v11 = 0u;
    memset(v12, 0, 25);
    v12[25] = 1;
    a2(&v9);

  }
}

void closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(void (*a1)(void **), uint64_t a2, char a3)
{
  void *v5;
  _BYTE *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[32];

  lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
  v5 = (void *)swift_allocError();
  *v6 = a3;
  v7 = v5;
  v8 = 0u;
  v9 = 0u;
  memset(v10, 0, 25);
  v10[25] = 1;
  a1(&v7);

}

uint64_t static ShaderGraphMaterial.unpackModelEntity(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Component;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;

  type metadata accessor for ModelEntity();
  if (swift_dynamicCastClass())
  {
    swift_retain();
    Component = REEntityGetComponent();
    if (Component)
    {
      v27 = Component;
      result = static ModelComponent.__fromCore(_:borrowStrongReference:)(&v27, 0, &v24);
      if (*(_QWORD *)(v25 + 16))
      {
        v4 = v24;
        outlined init with copy of __REAssetService(v25 + 32, (uint64_t)&v16);
        outlined consume of ModelComponent?(v4);
        outlined init with take of BindableDataInternal(&v16, (uint64_t)v26);
        outlined init with copy of __REAssetService((uint64_t)v26, (uint64_t)&v24);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_release();
          v5 = v17;
          v6 = v19;
          v7 = v20;
          v8 = v21;
          v9 = v22;
          v10 = v23;
          v14 = v16;
          v15 = v18;
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
          *(_OWORD *)a1 = v14;
          *(_BYTE *)(a1 + 16) = v5;
          *(_OWORD *)(a1 + 24) = v15;
          *(_QWORD *)(a1 + 40) = v6;
          *(_BYTE *)(a1 + 48) = v7;
          *(_BYTE *)(a1 + 49) = v8;
          *(_QWORD *)(a1 + 56) = v9;
          *(_BYTE *)(a1 + 64) = v10;
        }
        else
        {
          lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
          swift_allocError();
          *v13 = 0;
          swift_willThrow();
          swift_release();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
      swift_allocError();
      *v12 = 1;
      swift_willThrow();
      return swift_release();
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    swift_allocError();
    *v11 = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t RootEntity;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 aBlock;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;

  v28[1] = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RootEntity = RIOImportSessionGetRootEntity();
  v31 = a1;
  v30 = v10;
  if (!RootEntity)
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    v17 = (void *)swift_allocError();
    *v18 = 4;
    swift_willThrow();
LABEL_6:
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = a3;
    v20[3] = a4;
    v20[4] = v17;
    *(_QWORD *)&v40 = partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:);
    *((_QWORD *)&v40 + 1) = v20;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v39 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v39 + 1) = &block_descriptor_97;
    v21 = _Block_copy(&aBlock);
    swift_retain();
    v22 = v17;
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)&v33 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v13, v9, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
    goto LABEL_7;
  }
  v15 = RootEntity;
  type metadata accessor for Entity();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  MEMORY[0x22076D160](v15, v16);
  *(_QWORD *)&aBlock = v16;
  if (!REEntityGetChildCount())
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    v17 = (void *)swift_allocError();
    *v19 = 4;
    swift_willThrow();
    swift_release();
    goto LABEL_6;
  }
  Entity.ChildCollection.subscript.getter(0);
  static ShaderGraphMaterial.unpackModelEntity(_:)((uint64_t)&v33);
  swift_release();
  v41 = v36;
  v42 = v37;
  v39 = v34;
  v40 = v35;
  aBlock = v33;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a3;
  *(_QWORD *)(v24 + 24) = a4;
  v25 = v41;
  *(_OWORD *)(v24 + 64) = v40;
  *(_OWORD *)(v24 + 80) = v25;
  *(_BYTE *)(v24 + 96) = v42;
  v26 = v39;
  *(_OWORD *)(v24 + 32) = aBlock;
  *(_OWORD *)(v24 + 48) = v26;
  *(_QWORD *)&v35 = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:);
  *((_QWORD *)&v35 + 1) = v24;
  *(_QWORD *)&v33 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v33 + 1) = 1107296256;
  *(_QWORD *)&v34 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  *((_QWORD *)&v34 + 1) = &block_descriptor_103;
  v27 = _Block_copy(&v33);
  swift_retain();
  outlined retain of ShaderGraphMaterial((uint64_t)&aBlock);
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v13, v9, v27);
  _Block_release(v27);
  swift_release();
  outlined release of ShaderGraphMaterial((uint64_t)&aBlock);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
LABEL_7:
  swift_release();
  return RIOImportSessionSetSceneUpdatePassCompletion();
}

uint64_t closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(void (*a1)(__int128 *), uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v5 = *(_OWORD *)(a3 + 24);
  v6 = *(_QWORD *)(a3 + 40);
  v7 = *(_QWORD *)(a3 + 56);
  v8 = *(_BYTE *)(a3 + 16) & 1;
  v9 = *(_BYTE *)(a3 + 64) & 1;
  v10 = *(_BYTE *)(a3 + 48) & 1 | ((unint64_t)(*(_BYTE *)(a3 + 49) & 1) << 8);
  v12 = *(_OWORD *)a3;
  v13 = v8;
  v14 = v5;
  v15 = v6;
  v16 = v10;
  v17 = v7;
  v18 = v9;
  v19 = 0;
  outlined retain of ShaderGraphMaterial(a3);
  a1(&v12);
  return outlined release of ShaderGraphMaterial(a3);
}

uint64_t closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v24 = a3;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v23 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS();
  v16 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = a6;
  v19[7] = a7;
  aBlock[4] = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_37;
  v20 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of Data._Representation(a4, a5);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v22);
  return swift_release();
}

void closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2)
{
  Class isa;
  uint64_t v5;
  void *v6;
  _QWORD aBlock[6];

  swift_retain();
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
  aBlock[3] = &block_descriptor_30;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  String.utf8CString.getter();
  RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsync();
  swift_release();
  _Block_release(v6);
  swift_release();

}

void ShaderGraphMaterial.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t ShaderGraphMaterial.addToLoadRequest(_:)()
{
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

uint64_t _s10RealityKit11LoadRequestC_12dependenciesACyxGyys6ResultOyxs5Error_pGcc_0A10Foundation0cD12DependenciesCSgtcfcyyAIccfU_AJ19ShaderGraphMaterialV_Tg5TA_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t specialized static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;

  v8 = *(void **)(*(_QWORD *)(specialized static __ServiceLocator.shared.getter() + 168) + 16);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a1;
  v9[6] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  v10 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  v11 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v11 + 16) = v12;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_WORD *)(v11 + 88) = -256;
  *(_QWORD *)(v10 + 16) = v11;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = partial apply for closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  v13[3] = v9;
  v13[4] = v11;
  v13[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  v14 = v8;
  outlined copy of Data._Representation(a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)(v10 + 24) = Future.init(_:)();
  v15 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

  swift_release();
  return v15;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShaderGraphMaterial.LoadError, &type metadata for ShaderGraphMaterial.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShaderGraphMaterial.LoadError, &type metadata for ShaderGraphMaterial.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ShaderGraphMaterial.LoadError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BD20DFC + 4 * byte_21BE776A5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BD20E30 + 4 * byte_21BE776A0[v4]))();
}

uint64_t sub_21BD20E30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD20E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD20E40);
  return result;
}

uint64_t sub_21BD20E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD20E54);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BD20E58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD20E60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderGraphMaterial.LoadError()
{
  return &type metadata for ShaderGraphMaterial.LoadError;
}

uint64_t sub_21BD20E7C()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_21BD20EC4()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)()
{
  uint64_t v0;

  closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t sub_21BD20F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(void **)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD2103C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

void partial apply for implicit closure #2 in implicit closure #1 in static ShaderGraphMaterial.loadAsyncFromMaterialX(materialLabel:url:fulfill:)(void *a1, void *a2)
{
  uint64_t v2;

  ShaderGraphMaterial.AsyncDestination.completion(_:_:)(a1, a2, *(void (**)(void **))(v2 + 16));
}

void partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(*(void (**)(void **))(v0 + 16), *(_QWORD *)(v0 + 24), 2);
}

void partial apply for closure #3 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(*(void (**)(void **))(v0 + 16), *(_QWORD *)(v0 + 24), 1);
}

void partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)()
{
  uint64_t v0;

  closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t *))(v0 + 24));
}

uint64_t specialized static ShaderGraphMaterial.createInMemoryMaterialLoadingImportSession(primPath:url:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *PrimIfNeeded;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *Relationship;
  uint64_t v17;
  id v18;
  Class isa;
  uint64_t v20;
  _BYTE *v21;
  void *v23;
  void *v24;
  void *v25;

  v4 = (void *)RIOPxrUsdStageCreateInMemory();
  v25 = (void *)RIOPxrSdfPathCreateFromCString();
  v24 = (void *)RIOPxrTfTokenCreateWithCString();
  PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();
  v6 = (void *)MEMORY[0x220768C3C](a1, a2);
  v7 = objc_msgSend(v6, sel_lastPathComponent);

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v12 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  v23 = (void *)RIOPxrTfTokenCreateWithCString();
  v13 = (void *)RIOPxrUsdStageCreatePrimIfNeeded();
  String.utf8CString.getter();
  v14 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  URL.path.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  RIOPxrUsdPrimAddReference();
  swift_release();
  v15 = (void *)RIOPxrTfTokenCreateWithCString();
  Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v17 + 32) = v12;
  specialized Array._endMutation()();
  type metadata accessor for RIOPxrSdfPathRef(0);
  v18 = v12;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  RIOPxrUsdRelationshipSetTargets();

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  v20 = RIOImportSessionCreateWithStage();
  if (!v20)
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    swift_allocError();
    *v21 = 4;
    swift_willThrow();
  }

  return v20;
}

uint64_t sub_21BD214E8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)()
{
  uint64_t *v0;

  return closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(v0[2], v0[3], v0[4], v0[5]);
}

void partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)()
{
  uint64_t v0;
  void (*v1)(void **);
  void *v2;
  id v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[32];

  v1 = *(void (**)(void **))(v0 + 16);
  v2 = *(void **)(v0 + 32);
  v4 = v2;
  v5 = 0u;
  v6 = 0u;
  memset(v7, 0, 25);
  v7[25] = 1;
  v3 = v2;
  v1(&v4);

}

uint64_t sub_21BD21590()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(*(void (**)(__int128 *))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32);
}

uint64_t sub_21BD215E0()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void **)(v2 + 64));
}

uint64_t sub_21BD21658()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_21BD216B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BD216D4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t static StateMachineGraphCreator.createGraph(from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t StateCount;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::OpaquePointer transitions;

  transitions._rawValue = (void *)MEMORY[0x24BEE4AF8];
  StateCount = REStateMachineAssetGetStateCount();
  if (StateCount < 0)
    goto LABEL_28;
  v7 = StateCount;
  if (StateCount)
  {
    v8 = 0;
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      REStateMachineAssetGetStateAtIndex();
      v9 = static StateMachineGraphCreator.createStateAndItsTransitions(from:)((uint64_t)&v28);
      v10 = v28;
      v11 = v29;
      v12 = v30;
      v13 = v31;
      RERelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
      v15 = v0[2];
      v14 = v0[3];
      if (v15 >= v14 >> 1)
        v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v0);
      ++v8;
      v0[2] = v15 + 1;
      v16 = &v0[4 * v15];
      v16[4] = v10;
      v16[5] = v11;
      v16[6] = v12;
      v16[7] = v13;
      specialized Array.append<A>(contentsOf:)(v9);
    }
    while (v7 != v8);
  }
  else
  {
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if (REStateMachineAssetGetAnyState())
  {
    v1 = (_QWORD *)static StateMachineGraphCreator.createStateAndItsTransitions(from:)((uint64_t)&v28);
    RERelease();
    v2 = v28;
    v3 = v29;
    v5 = v30;
    v4 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_29;
    while (1)
    {
      v18 = v0[2];
      v17 = v0[3];
      if (v18 >= v17 >> 1)
        v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v0);
      v0[2] = v18 + 1;
      v19 = &v0[4 * v18];
      v19[4] = v2;
      v19[5] = v3;
      v19[6] = v5;
      v19[7] = v4;
      v3 = v1[2];
      if (!v3)
        break;
      v4 = 0;
      v20 = 0;
      while (v20 < v1[2])
      {
        v22 = *(_QWORD *)((char *)v1 + v4 + 48);
        v21 = *(_QWORD *)((char *)v1 + v4 + 56);
        v23 = *(_QWORD *)((char *)v1 + v4 + 64);
        v2 = *(_QWORD *)((char *)v1 + v4 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
        if (v20 >= v1[2])
          goto LABEL_26;
        v24 = (_QWORD *)((char *)v1 + v4);
        v24[6] = v23;
        v24[7] = v2;
        swift_bridgeObjectRelease();
        if (v20 >= v1[2])
          goto LABEL_27;
        ++v20;
        v24[8] = v22;
        v24[9] = v21;
        swift_bridgeObjectRelease();
        v25 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v25);
        v4 += 72;
        if (v3 == v20)
          goto LABEL_23;
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
    }
LABEL_23:
    specialized Array.append<A>(contentsOf:)((uint64_t)v1);
  }
  REStateMachineAssetGetInitialStateName();
  v26._countAndFlagsBits = String.init(cString:)();
  return (unint64_t)StateMachineGraph.init(initialState:states:transitions:)(v26, (Swift::OpaquePointer)v0, transitions);
}

uint64_t static StateMachineGraphCreator.createStateAndItsTransitions(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  REStateMachineAssetStateGetName();
  v2 = String.init(cString:)();
  v29 = v3;
  v30 = v2;
  REStateMachineAssetStateGetExitTime();
  v5 = v4;
  result = REStateMachineAssetStateGetTransitionCount();
  if (result < 0)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v27 = a1;
  if (result)
  {
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v28 = result;
    do
    {
      REStateMachineAssetStateGetTransitionAtIndex();
      static StateMachineGraphCreator.createTransition(from:fromStateName:)(v30, v29, (uint64_t)&v32);
      v9 = *((_QWORD *)&v32 + 1);
      v31 = v32;
      v11 = v33;
      v10 = v34;
      v12 = v35;
      v13 = v36;
      v14 = v37;
      v15 = v38;
      v16 = v39;
      RERelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v17 = v8;
      else
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v19 = v17[2];
      v18 = v17[3];
      if (v19 >= v18 >> 1)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
      ++v7;
      v17[2] = v19 + 1;
      v20 = &v17[9 * v19];
      v20[4] = v31;
      v20[5] = v9;
      v20[6] = v11;
      v20[7] = v10;
      v20[8] = v12;
      v20[9] = v13;
      v20[10] = v14;
      *((_BYTE *)v20 + 88) = v15;
      v20[12] = v16;
      v8 = v17;
    }
    while (v28 != v7);
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  result = REStateMachineAssetStateGetCommandCount();
  if (result < 0)
    goto LABEL_24;
  v21 = result;
  if (result)
  {
    v22 = 0;
    v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = v27;
    do
    {
      REStateMachineAssetStateGetCommandAtIndex();
      static StateMachineGraphCreator.createCommand(from:)((uint64_t)&v32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
      v26 = v23[2];
      v25 = v23[3];
      if (v26 >= v25 >> 1)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
      ++v22;
      v23[2] = v26 + 1;
      outlined init with take of BindableDataInternal(&v32, (uint64_t)&v23[5 * v26 + 4]);
      RERelease();
    }
    while (v21 != v22);
  }
  else
  {
    v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = v27;
  }
  *(_QWORD *)v24 = v30;
  *(_QWORD *)(v24 + 8) = v29;
  *(double *)(v24 + 16) = v5;
  *(_QWORD *)(v24 + 24) = v23;
  return (uint64_t)v8;
}

uint64_t static StateMachineGraphCreator.createTransition(from:fromStateName:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  unsigned int InterruptionType;
  uint64_t ConditionCount;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int Type;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int ParameterType;
  unsigned int ConditionOperator;
  char v27;
  uint64_t ConstantInt;
  uint64_t v29;
  int v30;
  int v31;
  char ConstantBool;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  char v36;
  Swift::String v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  char v46;
  int v47;
  ValueMetadata *v48;
  _UNKNOWN **v49;

  REStateMachineAssetTransitionGetName();
  v6 = String.init(cString:)();
  v8 = v7;
  REStateMachineAssetTransitionGetToStateName();
  v9 = String.init(cString:)();
  v11 = v10;
  REStateMachineAssetTransitionGetTransitionTime();
  v13 = v12;
  InterruptionType = REStateMachineAssetTransitionGetInterruptionType();
  ConditionCount = REStateMachineAssetTransitionGetConditionCount();
  if (ConditionCount < 0)
    goto LABEL_23;
  v16 = ConditionCount;
  v38 = InterruptionType;
  v39 = v11;
  v40 = v9;
  v41 = v8;
  v42 = a1;
  v43 = a2;
  if (ConditionCount)
  {
    v17 = 0;
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (v16 != v17)
    {
      REStateMachineAssetTransitionGetConditionAtIndex();
      Type = REStateMachineAssetTransitionConditionGetType();
      if (Type != 1)
      {
        if (!Type)
        {
          REStateMachineAssetTransitionConditionGetParameterName();
          v22 = String.init(cString:)();
          v24 = v23;
          ParameterType = REStateMachineAssetTransitionConditionGetParameterType();
          ConditionOperator = REStateMachineAssetTransitionConditionGetConditionOperator();
          v27 = ConditionOperator;
          if (ConditionOperator < 6)
          {
            switch(ParameterType)
            {
              case 1:
                ConstantInt = REStateMachineAssetTransitionConditionGetConstantInt();
                v48 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Int>);
                v49 = &protocol witness table for StateMachineCondition<A>;
                v29 = swift_allocObject();
                *(_QWORD *)&v44 = v29;
                *(_QWORD *)(v29 + 40) = ConstantInt;
                *(_QWORD *)(v29 + 16) = v22;
                *(_QWORD *)(v29 + 24) = v24;
                *(_BYTE *)(v29 + 32) = v27;
                goto LABEL_14;
              case 2:
                REStateMachineAssetTransitionConditionGetConstantFloat();
                v31 = v30;
                v48 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Float>);
                v49 = &protocol witness table for StateMachineCondition<A>;
                v47 = v31;
                goto LABEL_13;
              case 3:
                ConstantBool = REStateMachineAssetTransitionConditionGetConstantBool();
                v48 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Bool>);
                v49 = &protocol witness table for StateMachineCondition<A>;
                v46 = ConstantBool;
LABEL_13:
                *(_QWORD *)&v44 = v22;
                *((_QWORD *)&v44 + 1) = v24;
                v45 = v27;
                goto LABEL_14;
              default:
                goto LABEL_26;
            }
          }
          *(_QWORD *)&v44 = 0;
          *((_QWORD *)&v44 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          v37._countAndFlagsBits = 0xD00000000000002BLL;
          v37._object = (void *)0x800000021BE90320;
          String.append(_:)(v37);
          type metadata accessor for REStateTransitionConditionOperator(0);
          _print_unlocked<A, B>(_:_:)();
        }
LABEL_26:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x21BD2218CLL);
      }
      REStateMachineAssetTransitionConditionGetParameterName();
      v20 = String.init(cString:)();
      v48 = &type metadata for StateMachineConditionTrigger;
      v49 = &protocol witness table for StateMachineConditionTrigger;
      *(_QWORD *)&v44 = v20;
      *((_QWORD *)&v44 + 1) = v21;
LABEL_14:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v34 = v18[2];
      v33 = v18[3];
      if (v34 >= v33 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v18);
      ++v17;
      v18[2] = v34 + 1;
      outlined init with take of BindableDataInternal(&v44, (uint64_t)&v18[5 * v34 + 4]);
      RERelease();
      if (v16 == v17)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_26;
  }
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_21:
  swift_bridgeObjectRetain();
  result = static StateMachineUtils.convert(_:)(v38, &v44);
  v36 = v44;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v41;
  *(_QWORD *)(a3 + 16) = v42;
  *(_QWORD *)(a3 + 24) = v43;
  *(_QWORD *)(a3 + 32) = v40;
  *(_QWORD *)(a3 + 40) = v39;
  *(double *)(a3 + 48) = v13;
  *(_BYTE *)(a3 + 56) = v36;
  *(_QWORD *)(a3 + 64) = v18;
  return result;
}

uint64_t static StateMachineGraphCreator.createCommand(from:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int Type;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  _QWORD v19[2];
  unsigned __int8 v20;

  Type = REStateMachineAssetCommandGetType();
  REStateMachineAssetCommandGetEntityBindTarget();
  v3 = String.init(cString:)();
  v5 = v4;
  v6 = specialized static StateMachineGraphCreator.getCommandParameters(from:)();
  if (!v3 && v5 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
    v8 = 0;
    v9 = -1;
  }
  else
  {
    static InternalBindPath.targetFromPath(_:)(v3, v5, (uint64_t)v19);
    swift_bridgeObjectRelease();
    v7 = v19[0];
    v8 = v19[1];
    v9 = v20;
    if (Type > 5)
    {
LABEL_14:
      outlined consume of BindTarget?(v7, v8, v9);
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  switch(Type)
  {
    case 1u:
      v10 = specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)((uint64_t)v6, 0x6F6974616D696E41, (void *)0xED0000656D614E6ELL);
      v12 = v11;
      v13 = specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)((uint64_t)v6, 0xD000000000000018, (void *)0x800000021BE8B120);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = &type metadata for StateMachineAnimationPlayCommand;
      *(_QWORD *)(a1 + 32) = &protocol witness table for StateMachineAnimationPlayCommand;
      result = swift_allocObject();
      *(_QWORD *)a1 = result;
      *(_QWORD *)(result + 16) = v7;
      *(_QWORD *)(result + 24) = v8;
      *(_BYTE *)(result + 32) = v9;
      *(_QWORD *)(result + 40) = v10;
      *(_QWORD *)(result + 48) = v12;
      *(_BYTE *)(result + 56) = v13 & 1;
      return result;
    case 2u:
      result = swift_bridgeObjectRelease();
      v17 = &type metadata for StateMachineAnimationStopCommand;
      v18 = &protocol witness table for StateMachineAnimationStopCommand;
      goto LABEL_12;
    case 3u:
      result = swift_bridgeObjectRelease();
      v17 = &type metadata for StateMachineAnimationStopAllCommand;
      v18 = &protocol witness table for StateMachineAnimationStopAllCommand;
LABEL_12:
      *(_QWORD *)(a1 + 24) = v17;
      *(_QWORD *)(a1 + 32) = v18;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      break;
    case 4u:
      specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)((uint64_t)v6, 0x6B63616279616C50, (void *)0xEC000000656D6954);
      v16 = v15;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = &type metadata for StateMachineAnimationSetPlaybackTimeCommand;
      *(_QWORD *)(a1 + 32) = &protocol witness table for StateMachineAnimationSetPlaybackTimeCommand;
      result = swift_allocObject();
      *(_QWORD *)a1 = result;
      *(_QWORD *)(result + 16) = v7;
      *(_QWORD *)(result + 24) = v8;
      *(_BYTE *)(result + 32) = v9;
      *(_QWORD *)(result + 40) = v16;
      break;
    default:
      goto LABEL_14;
  }
  return result;
}

uint64_t specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_15;
  v6 = a1 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of __REAssetService(v6, (uint64_t)&v24);
    v7 = v25;
    v8 = v26;
    __swift_project_boxed_opaque_existential_1(&v24, v25);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v24, (uint64_t)v27);
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v24, (uint64_t)v27);
      if ((v11 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        goto LABEL_4;
      }
    }
    outlined init with take of BindableDataInternal(v27, (uint64_t)&v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(&v24, (uint64_t)v27);
      goto LABEL_16;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v6 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
LABEL_15:
  v28 = 0;
  memset(v27, 0, sizeof(v27));
LABEL_16:
  outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)v27, (uint64_t)&v24);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
    if ((swift_dynamicCast() & 1) != 0 && v22)
    {
      outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v27);
      v12 = v21;
      v13 = v22;
      v14 = v23;
      swift_bridgeObjectRetain();
      outlined consume of IKRig.Constraint?(v12, v13);
      return v14;
    }
  }
  else
  {
    outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v24);
  }
  *(_QWORD *)&v24 = 0;
  *((_QWORD *)&v24 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v16._object = (void *)0x800000021BE90240;
  v16._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = a2;
  v17._object = a3;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x6570797420666F20;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x676E69727453;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x756F6620746F6E20;
  v20._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v20);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;
  char v12;
  uint64_t result;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  _BYTE v19[8];
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_15;
  v6 = a1 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of __REAssetService(v6, (uint64_t)&v22);
    v7 = v23;
    v8 = v24;
    __swift_project_boxed_opaque_existential_1(&v22, v23);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v22, (uint64_t)v25);
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v22, (uint64_t)v25);
      if ((v11 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
        goto LABEL_4;
      }
    }
    outlined init with take of BindableDataInternal(v25, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(&v22, (uint64_t)v25);
      goto LABEL_16;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
    v6 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
LABEL_15:
  v26 = 0;
  memset(v25, 0, sizeof(v25));
LABEL_16:
  outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)v25, (uint64_t)&v22);
  if (v23)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
    if ((swift_dynamicCast() & 1) != 0 && v20)
    {
      outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v25);
      v12 = v21;
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
  }
  else
  {
    outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v22);
  }
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v14._object = (void *)0x800000021BE90240;
  v14._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x6570797420666F20;
  v16._object = (void *)0xE900000000000020;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 1819242306;
  v17._object = (void *)0xE400000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x756F6620746F6E20;
  v18._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v18);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  _BYTE v18[8];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[2];
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_15;
  v6 = a1 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of __REAssetService(v6, (uint64_t)&v20);
    v7 = v21;
    v8 = v22;
    __swift_project_boxed_opaque_existential_1(&v20, v21);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v20, (uint64_t)v23);
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v20, (uint64_t)v23);
      if ((v11 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        goto LABEL_4;
      }
    }
    outlined init with take of BindableDataInternal(v23, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(&v20, (uint64_t)v23);
      goto LABEL_16;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    v6 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
LABEL_15:
  v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_16:
  outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)v23, (uint64_t)&v20);
  if (v21)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
    if ((swift_dynamicCast() & 1) != 0 && v19)
    {
      outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v23);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v20);
  }
  *(_QWORD *)&v20 = 0;
  *((_QWORD *)&v20 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v13._object = (void *)0x800000021BE90240;
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6570797420666F20;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x656C62756F44;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x756F6620746F6E20;
  v17._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static StateMachineGraphCreator.commandTargetEntity(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __REAssetService(v7, (uint64_t)&v17);
      v8 = v19;
      v9 = v20;
      __swift_project_boxed_opaque_existential_1(&v17, v19);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9) == 0x6E45746567726154
        && v10 == 0xEC00000079746974)
      {
        break;
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
        goto LABEL_12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    outlined init with take of BindableDataInternal(&v17, (uint64_t)&v21);
  }
  else
  {
LABEL_10:
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v22 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v14 = v18;
      v15 = v19;
      v16 = v20;
      outlined copy of BindTarget(v18, v19, v20);
      swift_bridgeObjectRelease();
      result = outlined consume of BindTarget(v14, v15, v16);
      *(_QWORD *)a2 = v14;
      *(_QWORD *)(a2 + 8) = v15;
      *(_BYTE *)(a2 + 16) = v16;
      return result;
    }
  }
  else
  {
    result = outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v21);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = -1;
  return result;
}

uint64_t static StateMachineGraphCreator.createCoreState(from:outgoingTransitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69[5];
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v59 = type metadata accessor for Logger();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v61 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v57 = (char *)&v50 - v6;
  v7 = *(_QWORD *)(a1 + 24);
  String.utf8CString.getter();
  v8 = REStateMachineAssetStateCreate();
  swift_release();
  v65 = v8;
  REStateMachineAssetStateSetExitTime();
  v9 = *(_QWORD *)(a2 + 16);
  v64 = v7;
  v63 = v9;
  if (v9)
  {
    v62 = a2 + 32;
    v60 = a2;
    swift_bridgeObjectRetain();
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v62 + 72 * v10 + 64);
      String.utf8CString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      REStateMachineAssetTransitionCreate();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = v11 + 32;
        do
        {
          outlined init with copy of __REAssetService(v13, (uint64_t)&v75);
          if (specialized static StateMachineGraphCreator.createCoreCondition(from:)(&v75))
            REStateMachineAssetTransitionAddCondition();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
          v13 += 40;
          --v12;
        }
        while (v12);
      }
      swift_bridgeObjectRelease();
      ++v10;
      REStateMachineAssetStateAddTransition();
    }
    while (v10 != v63);
    swift_bridgeObjectRelease();
    v7 = v64;
  }
  v63 = *(_QWORD *)(v7 + 16);
  if (!v63)
    return v65;
  v62 = v7 + 32;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  v56 = 0x800000021BE900B0;
  v53 = "Scope";
  v55 = 0x800000021BE82150;
  *(_QWORD *)&v16 = 136315138;
  v54 = v16;
  v52 = MEMORY[0x24BEE4AD8] + 8;
  v51 = 0x800000021BE900E0;
  while (v15 < *(_QWORD *)(v7 + 16))
  {
    outlined init with copy of __REAssetService(v62 + 40 * v15, (uint64_t)&v75);
    specialized static StateMachineGraphCreator.commandTypeName(of:)((uint64_t)&v75);
    if (v17)
    {
      static StateMachineGraphCreator.commandTargetEntity(of:)(&v75, (uint64_t)&v70);
      v18 = v72;
      if (v72 != 255)
      {
        v19 = v70;
        v20 = v71;
        specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v70);
        outlined consume of BindTarget?(v19, v20, v18);
      }
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineAssetCommandCreate();
      swift_release();
      swift_release();
      v28 = v76;
      v29 = v77;
      __swift_project_boxed_opaque_existential_1(&v75, v76);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        v60 = v30;
        v32 = v30 + 32;
        do
        {
          outlined init with copy of __REAssetService(v32, (uint64_t)&v70);
          outlined init with copy of __REAssetService((uint64_t)&v70, (uint64_t)v69);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Int>);
          if (swift_dynamicCast())
          {
            v33 = v73;
            v34 = v74;
            __swift_project_boxed_opaque_existential_1(&v70, v73);
            (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
            swift_bridgeObjectRelease();
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            REStateMachineAssetCommandAddParameterInt();
          }
          else
          {
            outlined init with copy of __REAssetService((uint64_t)&v70, (uint64_t)v69);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Float>);
            if (swift_dynamicCast())
            {
              v35 = v73;
              v36 = v74;
              __swift_project_boxed_opaque_existential_1(&v70, v73);
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REStateMachineAssetCommandAddParameterFloat();
LABEL_28:
              swift_bridgeObjectRelease();
              goto LABEL_29;
            }
            outlined init with copy of __REAssetService((uint64_t)&v70, (uint64_t)v69);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
            if (swift_dynamicCast())
            {
              v37 = v73;
              v38 = v74;
              __swift_project_boxed_opaque_existential_1(&v70, v73);
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REStateMachineAssetCommandAddParameterDouble();
              goto LABEL_28;
            }
            outlined init with copy of __REAssetService((uint64_t)&v70, (uint64_t)v69);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
            if (swift_dynamicCast())
            {
              v39 = v73;
              v40 = v74;
              __swift_project_boxed_opaque_existential_1(&v70, v73);
              (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REStateMachineAssetCommandAddParameterBool();
              swift_bridgeObjectRelease();
            }
            else
            {
              outlined init with copy of __REAssetService((uint64_t)&v70, (uint64_t)v69);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
              if (!swift_dynamicCast())
              {
                outlined init with copy of __REAssetService((uint64_t)&v70, (uint64_t)v69);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
                if (swift_dynamicCast())
                {
                  v43 = v66;
                  v44 = v67;
                  v45 = v68;
                  swift_bridgeObjectRelease();
                  outlined consume of BindTarget(v43, v44, v45);
                }
                else
                {
                  Logger.init(subsystem:category:)();
                  v46 = Logger.logObject.getter();
                  v47 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v46, v47))
                  {
                    v48 = swift_slowAlloc();
                    v49 = swift_slowAlloc();
                    v69[0] = v49;
                    *(_DWORD *)v48 = v54;
                    *(_QWORD *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, v51, v69);
                    _os_log_impl(&dword_21B9AA000, v46, v47, "%s", (uint8_t *)v48, 0xCu);
                    swift_arrayDestroy();
                    MEMORY[0x220772F44](v49, -1, -1);
                    MEMORY[0x220772F44](v48, -1, -1);
                  }

                  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
                }
                goto LABEL_30;
              }
              v42 = v73;
              v41 = v74;
              __swift_project_boxed_opaque_existential_1(&v70, v73);
              (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v41);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              String.utf8CString.getter();
              REStateMachineAssetCommandAddParameterString();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
LABEL_29:
          swift_release();
LABEL_30:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
          v32 += 40;
          --v31;
        }
        while (v31);
      }
      swift_bridgeObjectRelease();
      REStateMachineAssetStateAddCommand();
    }
    else
    {
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      v70 = 0xD000000000000021;
      v71 = v56;
      __swift_project_boxed_opaque_existential_1(&v75, v76);
      swift_getDynamicType();
      v21._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v23 = v70;
      v22 = v71;
      Logger.init(subsystem:category:)();
      swift_bridgeObjectRetain_n();
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v27 = swift_slowAlloc();
        v70 = v27;
        *(_DWORD *)v26 = v54;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v70);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v24, v25, "%s", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v27, -1, -1);
        MEMORY[0x220772F44](v26, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v59);
      swift_bridgeObjectRelease();
    }
    v7 = v64;
    ++v15;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
    if (v15 == v63)
    {
      swift_bridgeObjectRelease();
      return v65;
    }
  }
  __break(1u);
  return result;
}

uint64_t static StateMachineGraphCreator.createCoreAsset(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
  {
LABEL_27:
    REStateMachineAssetStateGraphCreate();
    v31 = *(_QWORD *)(v1 + 16);
    if (v31)
    {
      swift_bridgeObjectRetain();
      v32 = (uint64_t *)(v1 + 56);
      v33 = MEMORY[0x24BEE4AF8];
      do
      {
        v35 = *(v32 - 3);
        v34 = *(v32 - 2);
        v36 = *(v32 - 1);
        v37 = *v32;
        v52[0] = v35;
        v52[1] = v34;
        v52[2] = v36;
        v53 = v37;
        v38 = v3[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38)
        {
          swift_bridgeObjectRetain();
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
          v40 = v33;
          if ((v41 & 1) != 0)
          {
            v40 = *(_QWORD *)(v3[7] + 8 * v39);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v40 = v33;
        }
        static StateMachineGraphCreator.createCoreState(from:outgoingTransitions:)((uint64_t)v52, v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        REStateMachineAssetStateGraphAddState();
        v32 += 4;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
    }
    v42 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v42, (uint64_t)v52);
    v43 = v53;
    v44 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    String.utf8CString.getter();
    v45 = REStateMachineAssetSingleGraphCreate();
    swift_bridgeObjectRelease();
    swift_release();
    return v45;
  }
  v47 = v1;
  swift_bridgeObjectRetain();
  v5 = v2 + 48;
  while (1)
  {
    v48 = v4;
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)v5;
    v8 = *(_QWORD *)(v5 + 8);
    v9 = *(_QWORD *)(v5 + 24);
    v50 = *(_QWORD *)(v5 + 16);
    v51 = *(_QWORD *)(v5 - 16);
    v10 = *(_QWORD *)(v5 + 32);
    v49 = *(_BYTE *)(v5 + 40);
    v11 = *(_QWORD *)(v5 + 48);
    if (v3[2])
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      if ((v13 & 1) != 0)
      {
        v14 = *(_QWORD **)(v3[7] + 8 * v12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_11:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v14[2] = v16 + 1;
    v17 = &v14[9 * v16];
    v17[4] = v51;
    v17[5] = v6;
    v17[6] = v7;
    v17[7] = v8;
    v17[8] = v50;
    v17[9] = v9;
    v17[10] = v10;
    *((_BYTE *)v17 + 88) = v49;
    v17[12] = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = v3;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    v21 = v3[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v3[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v3 = (_QWORD *)v52[0];
        if ((v19 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v3 = (_QWORD *)v52[0];
        if ((v24 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_39;
      v20 = v25;
      v3 = (_QWORD *)v52[0];
      if ((v24 & 1) != 0)
      {
LABEL_3:
        *(_QWORD *)(v3[7] + 8 * v20) = v14;
        goto LABEL_4;
      }
    }
    v3[(v20 >> 6) + 8] |= 1 << v20;
    v27 = (uint64_t *)(v3[6] + 16 * v20);
    *v27 = v7;
    v27[1] = v8;
    *(_QWORD *)(v3[7] + 8 * v20) = v14;
    v28 = v3[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_38;
    v3[2] = v30;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 += 72;
    v4 = v48 - 1;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease();
      v1 = v47;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *specialized static StateMachineGraphCreator.getCommandParameters(from:)()
{
  unint64_t v0;
  int v1;
  uint64_t ParameterCount;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ParameterStringAsChars;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  __int128 v35;
  __int128 v36;
  _UNKNOWN **v37;
  uint64_t v38;

  v0 = 0;
  v38 = *MEMORY[0x24BDAC8D0];
  v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if (v0 >= 5)
      goto LABEL_28;
    v1 = *((unsigned __int8 *)&outlined read-only object #0 of static StateMachineGraphCreator.getCommandParameters(from:)
         + v0
         + 32);
    ParameterCount = REStateMachineAssetCommandGetParameterCount();
    if (ParameterCount < 0)
      goto LABEL_29;
    v3 = ParameterCount;
    v29 = v0;
    if (ParameterCount)
    {
      v4 = 0;
      while (2)
      {
        if (v3 != v4)
        {
          REStateMachineAssetCommandGetParameterNameAtIndex();
          v6 = String.init(cString:)();
          v37 = 0;
          v35 = 0u;
          v36 = 0u;
          v7 = v6;
          v9 = v8;
          switch(v1)
          {
            case 0:
              String.utf8CString.getter();
              ParameterStringAsChars = REStateMachineAssetCommandGetParameterStringAsChars();
              swift_release();
              if (ParameterStringAsChars)
              {
                ParameterStringAsChars = String.init(cString:)();
                v12 = v11;
              }
              else
              {
                v12 = 0xE000000000000000;
              }
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
              v37 = &protocol witness table for StateMachineCommandParameter<A>;
              v17 = (_QWORD *)swift_allocObject();
              *(_QWORD *)&v35 = v17;
              v17[4] = ParameterStringAsChars;
              v17[5] = v12;
              v17[2] = v7;
              v17[3] = v9;
              goto LABEL_20;
            case 1:
              *(_QWORD *)&v31 = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterInt();
              swift_release();
              v15 = v31;
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              v34[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Int>);
              v34[4] = &protocol witness table for StateMachineCommandParameter<A>;
              v34[1] = v9;
              v34[2] = v15;
              v34[0] = v7;
              outlined init with take of StateMachineCommandParameterProtocol?((uint64_t)v34, (uint64_t)&v35);
              goto LABEL_20;
            case 2:
              LODWORD(v34[0]) = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterFloat();
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              swift_release();
              v14 = v34[0];
              *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Float>);
              v37 = &protocol witness table for StateMachineCommandParameter<A>;
              LODWORD(v36) = v14;
              goto LABEL_17;
            case 3:
              v34[0] = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterDouble();
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              swift_release();
              v16 = v34[0];
              *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
              v37 = &protocol witness table for StateMachineCommandParameter<A>;
              *(_QWORD *)&v36 = v16;
              goto LABEL_17;
            case 4:
              LOBYTE(v34[0]) = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterBool();
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              swift_release();
              v13 = v34[0];
              *((_QWORD *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
              v37 = &protocol witness table for StateMachineCommandParameter<A>;
              LOBYTE(v36) = v13;
LABEL_17:
              *(_QWORD *)&v35 = v7;
              *((_QWORD *)&v35 + 1) = v9;
LABEL_20:
              outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)&v35, (uint64_t)&v31);
              if (v32)
              {
                outlined init with take of BindableDataInternal(&v31, (uint64_t)v34);
                outlined init with copy of __REAssetService((uint64_t)v34, (uint64_t)&v31);
                v18 = v30;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
                  v30 = v18;
                }
                v20 = v18[2];
                v19 = v18[3];
                if (v20 >= v19 >> 1)
                  v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
                v21 = v32;
                v22 = v33;
                v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v31, v32);
                v24 = MEMORY[0x24BDAC7A8](v23);
                v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, __n128))(v27 + 16))(v26, v24);
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v26, (uint64_t *)&v30, v21, v22);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
                v5 = &v35;
              }
              else
              {
                outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
                v5 = &v31;
              }
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v5);
              if (v3 != ++v4)
                continue;
              goto LABEL_2;
            default:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x21BD243CCLL);
          }
        }
        break;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
LABEL_2:
    v0 = v29 + 1;
  }
  while (v29 != 4);
  return v30;
}

unint64_t specialized static StateMachineGraphCreator.commandTypeName(of:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t v4[2];
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  outlined init with copy of __REAssetService(a1, (uint64_t)&v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommand);
  if (swift_dynamicCast())
  {
    v2 = 0x6F6974616D696E41;
    outlined consume of BindTarget?(v4[0], v4[1], v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v4);
    if (swift_dynamicCast())
    {
      v2 = 0x6F6974616D696E41;
      outlined consume of BindTarget?(v6, v7, v8);
    }
    else
    {
      outlined init with copy of __REAssetService(a1, (uint64_t)v4);
      if (swift_dynamicCast())
      {
        v2 = 0xD000000000000010;
        outlined consume of BindTarget?(v6, v7, v8);
      }
      else
      {
        outlined init with copy of __REAssetService(a1, (uint64_t)v4);
        if ((swift_dynamicCast() & 1) != 0)
        {
          outlined consume of BindTarget?(v6, v7, v8);
          return 0xD000000000000018;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t specialized static StateMachineGraphCreator.createCoreCondition(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (*(_QWORD *)(v4 + 16))
  {
    outlined init with copy of __REAssetService(v4 + 32, (uint64_t)v13);
    swift_bridgeObjectRelease();
    v5 = v14;
    v6 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineConditionProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Int>);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v7 = REStateMachineAssetIntConditionCreate();
LABEL_4:
      v8 = v7;
LABEL_12:
      swift_release();
      return v8;
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Float>);
    if (swift_dynamicCast())
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v11 = REStateMachineAssetFloatConditionCreate();
LABEL_11:
      v8 = v11;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Bool>);
    if (swift_dynamicCast())
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v11 = REStateMachineAssetBoolConditionCreate();
      goto LABEL_11;
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v7 = REStateMachineAssetTriggerConditionCreate();
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    v10 = 0x800000021BE90170;
    v9 = 0xD00000000000001DLL;
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = 0xD000000000000027;
    v10 = 0x800000021BE90190;
  }
  specialized static StateMachineUtils.logError(_:)(v9, v10);
  return 0;
}

uint64_t outlined destroy of StateMachineCommandParameterProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21BD24894()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject();
}

uint64_t sub_21BD248C4()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of StateMachineCommandParameterProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BD24944()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of StateMachineCommandParameterProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BD249B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = a1;
  if (a3)
    v59 = a3;
  else
    v59 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v10 = a3;
  v11 = specialized static __ServiceLocator.shared.getter();
  v12 = *(void **)(*(_QWORD *)(v11 + 168) + 16);
  swift_beginAccess();
  v13 = *(_QWORD *)(v11 + 24);
  swift_unownedRetainStrong();
  v14 = *(void **)(v13 + 32);
  swift_retain();
  v15 = v12;
  v16 = v14;
  swift_release();
  v17 = *(_QWORD *)(*(_QWORD *)(v11 + 168) + 32);
  *v9 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v18 = v16;
  swift_retain();
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) != 0)
  {
    v54 = v17;
    v55 = v18;
    v56 = v15;
    type metadata accessor for LoadRequestDependencies();
    v9 = (_QWORD *)swift_allocObject();
    v19 = MEMORY[0x24BEE4AF8];
    v9[2] = MEMORY[0x24BEE4AF8];
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v20 = swift_allocObject();
    *(_DWORD *)(v20 + 16) = 0;
    v9[3] = v20;
    LOWORD(v7) = 1;
    swift_beginAccess();
    v9[2] = v19;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  v21 = static Entity.asynchronousLoadOptions;
  swift_beginAccess();
  v22 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  v23 = swift_allocObject();
  swift_weakInit();
  v24 = v58;
  *(_QWORD *)(v23 + 16) = v58;
  *(_QWORD *)(v23 + 24) = a2;
  *(_BYTE *)(v23 + 32) = v21;
  *(_BYTE *)(v23 + 33) = v22;
  *(_WORD *)(v23 + 34) = v7;
  *(_DWORD *)(v23 + 36) = 4;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v11 + 176, (uint64_t)&v60, &demangling cache variable for type metadata for USDImportService?);
  if (v61)
  {
    v52 = v9;
    outlined init with take of BindableDataInternal(&v60, (uint64_t)v62);
    v26 = v63;
    v25 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    v27 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v25 + 16);
    swift_bridgeObjectRetain();
    v28 = v59;
    if ((v27(v24, a2, v59, v26, v25) & 1) != 0)
    {
      outlined init with copy of __REAssetService((uint64_t)v62, (uint64_t)&v60);
      v29 = (_QWORD *)swift_allocObject();
      v29[2] = v24;
      v29[3] = a2;
      v30 = v57;
      v29[4] = v28;
      v29[5] = v30;
      v29[6] = v23;
      outlined init with take of BindableDataInternal(&v60, (uint64_t)(v29 + 7));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
      v31 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
      v32 = swift_allocObject();
      v33 = swift_allocObject();
      *(_DWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v32 + 16) = v33;
      *(_QWORD *)(v32 + 24) = 0;
      *(_BYTE *)(v32 + 32) = -1;
      *(_QWORD *)(v31 + 16) = v32;
      v34 = (_QWORD *)swift_allocObject();
      v34[2] = partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:);
      v34[3] = v29;
      v35 = v52;
      v34[4] = v32;
      v34[5] = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      v36 = v28;
      swift_retain();
      swift_retain();
      swift_retain();
      v37 = Future.init(_:)();
      swift_release();

      swift_release();
      swift_release();

      swift_release();
      *(_QWORD *)(v31 + 24) = v37;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      return v31;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    v9 = v52;
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v60, &demangling cache variable for type metadata for USDImportService?);
  }
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = v59;
  v39 = (void *)MEMORY[0x220768C3C](v24, a2);
  swift_bridgeObjectRelease();
  v40 = RESceneImportOperationCreateWithBundleResource();

  if (v40)
  {
    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    v41 = __SceneImportOperation.init(core:)(v40);

    swift_release();
    swift_retain();
    RESceneImportOperationSetMergeIntoSingleEntity();
    RESceneImportOperationSetGenerateDecimatedMesh();
    RESceneImportOperationSetUnitType();
    RESceneImportOperationSetIsolateFromEngine();
    swift_release();
  }
  else
  {

    swift_release();
    v41 = 0;
  }
  v42 = swift_allocObject();
  *(_BYTE *)(v42 + 16) = v21;
  v43 = v55;
  *(_QWORD *)(v42 + 24) = v41;
  *(_QWORD *)(v42 + 32) = v43;
  *(_QWORD *)(v42 + 40) = v54;
  *(_QWORD *)(v42 + 48) = v23;
  *(_QWORD *)(v42 + 56) = v24;
  *(_QWORD *)(v42 + 64) = a2;
  v44 = v57;
  *(_QWORD *)(v42 + 72) = v38;
  *(_QWORD *)(v42 + 80) = v44;
  *(_QWORD *)(v42 + 88) = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
  v31 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
  v45 = swift_allocObject();
  v46 = swift_allocObject();
  *(_DWORD *)(v46 + 16) = 0;
  *(_QWORD *)(v45 + 16) = v46;
  *(_QWORD *)(v45 + 24) = 0;
  *(_BYTE *)(v45 + 32) = -1;
  *(_QWORD *)(v31 + 16) = v45;
  v47 = (_QWORD *)swift_allocObject();
  v47[2] = partial apply for closure #2 in static Entity.loadAnchorAsync(named:in:);
  v47[3] = v42;
  v47[4] = v45;
  v47[5] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v48 = v38;
  swift_retain();
  v49 = Future.init(_:)();

  swift_release();
  *(_QWORD *)(v31 + 24) = v49;
  return v31;
}

uint64_t specialized static Entity.load<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<AnchorEntity>>);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<AnchorEntity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  v1[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v4;
  return swift_task_switch();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  v1[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v4;
  return swift_task_switch();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<Entity>>);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<Entity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  v1[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v4;
  return swift_task_switch();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ModelEntity>>);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ModelEntity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  v1[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v4;
  return swift_task_switch();
}

uint64_t specialized static Entity.load<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v0[2] = v0[5];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<AnchorEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<AnchorEntity>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<AnchorEntity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<AnchorEntity>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = specialized static Entity.load<A>(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + 128);
  if (v0)
  {
    if (v3)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v0[2] = v0[5];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<BodyTrackedEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = specialized static TextureResource.load<A>(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v0[2] = v0[5];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<Entity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<Entity>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<Entity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<Entity>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = specialized static Entity.load<A>(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v0[2] = v0[5];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<ModelEntity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ModelEntity>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = specialized static Entity.load<A>(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t static Entity.loadAnchorAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v3 = static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(a1, a2, a3, (uint64_t)v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  return v3;
}

uint64_t static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  id v41;
  uint64_t v42;
  id v44[2];
  uint64_t v45;
  id v46;
  id v47;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (id *)((char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
    v47 = a3;
  else
    v47 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v10 = a3;
  v11 = specialized static __ServiceLocator.shared.getter();
  v12 = *(void **)(*(_QWORD *)(v11 + 168) + 16);
  swift_beginAccess();
  v13 = *(_QWORD *)(v11 + 24);
  swift_unownedRetainStrong();
  v14 = *(void **)(v13 + 32);
  swift_retain();
  v46 = v12;
  v15 = v14;
  swift_release();
  *v9 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v16 = v15;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) != 0)
  {
    type metadata accessor for LoadRequestDependencies();
    v15 = (_QWORD *)swift_allocObject();
    v17 = MEMORY[0x24BEE4AF8];
    v15[2] = MEMORY[0x24BEE4AF8];
    v44[1] = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v18 = swift_allocObject();
    *(_DWORD *)(v18 + 16) = 0;
    v15[3] = v18;
    swift_beginAccess();
    v15[2] = v17;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  v19 = static Entity.asynchronousLoadOptions;
  swift_beginAccess();
  v20 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  v21 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  *(_BYTE *)(v21 + 32) = v19;
  *(_BYTE *)(v21 + 33) = v20;
  *(_WORD *)(v21 + 34) = 256;
  *(_DWORD *)(v21 + 36) = 3;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v11 + 176, (uint64_t)&v48, &demangling cache variable for type metadata for USDImportService?);
  if (!v49)
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v48, &demangling cache variable for type metadata for USDImportService?);
LABEL_11:
    v34 = (_QWORD *)swift_allocObject();
    v35 = v47;
    v34[2] = v47;
    v34[3] = a1;
    v34[4] = a2;
    v34[5] = v11;
    v34[6] = v45;
    v34[7] = v21;
    v36 = v46;
    v34[8] = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
    v28 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
    v37 = swift_allocObject();
    v38 = swift_allocObject();
    *(_DWORD *)(v38 + 16) = 0;
    *(_QWORD *)(v37 + 16) = v38;
    *(_QWORD *)(v37 + 24) = 0;
    *(_BYTE *)(v37 + 32) = -1;
    *(_QWORD *)(v28 + 16) = v37;
    v39 = (_QWORD *)swift_allocObject();
    v39[2] = partial apply for closure #2 in static Entity.loadBodyTrackedAsync(named:in:);
    v39[3] = v34;
    v39[4] = v37;
    v39[5] = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
    swift_allocObject();
    swift_retain();
    v40 = v36;
    swift_bridgeObjectRetain();
    v41 = v35;
    swift_retain();
    v42 = Future.init(_:)();

    swift_release();
    *(_QWORD *)(v28 + 24) = v42;
    return v28;
  }
  v44[0] = v16;
  outlined init with take of BindableDataInternal(&v48, (uint64_t)v50);
  v22 = v51;
  v23 = v52;
  __swift_project_boxed_opaque_existential_1(v50, v51);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v23 + 16);
  swift_bridgeObjectRetain();
  v25 = v47;
  if ((v24(a1, a2, v47, v22, v23) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    v16 = v44[0];
    goto LABEL_11;
  }
  outlined init with copy of __REAssetService((uint64_t)v50, (uint64_t)&v48);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a1;
  v26[3] = a2;
  v27 = v45;
  v26[4] = v25;
  v26[5] = v27;
  v26[6] = v21;
  outlined init with take of BindableDataInternal(&v48, (uint64_t)(v26 + 7));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  v28 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
  v29 = swift_allocObject();
  v30 = swift_allocObject();
  *(_DWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v29 + 16) = v30;
  *(_QWORD *)(v29 + 24) = 0;
  *(_BYTE *)(v29 + 32) = -1;
  *(_QWORD *)(v28 + 16) = v29;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = partial apply for closure #1 in static Entity.loadBodyTrackedAsync(named:in:);
  v31[3] = v26;
  v31[4] = v29;
  v31[5] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v32 = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  v33 = Future.init(_:)();
  swift_release();

  swift_release();
  swift_release();

  *(_QWORD *)(v28 + 24) = v33;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  return v28;
}

uint64_t static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;

  v69 = a3;
  v66 = a2;
  v65 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v65 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v65);
  v70 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = specialized static __ServiceLocator.shared.getter();
  v11 = *(void **)(*(_QWORD *)(v10 + 168) + 16);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 24);
  swift_unownedRetainStrong();
  v13 = *(void **)(v12 + 32);
  swift_retain();
  v68 = v11;
  v14 = v13;
  swift_release();
  *v9 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v16 & 1) != 0)
  {
    v64 = v15;
    type metadata accessor for LoadRequestDependencies();
    v16 = swift_allocObject();
    v17 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v16 + 16) = MEMORY[0x24BEE4AF8];
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v18 = swift_allocObject();
    *(_DWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v16 + 24) = v18;
    swift_beginAccess();
    *(_QWORD *)(v16 + 16) = v17;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v19 = static Entity.asynchronousLoadOptions;
  v20 = URL.absoluteString.getter();
  v22 = v21;
  swift_beginAccess();
  v23 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  v24 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v24 + 16) = v20;
  *(_QWORD *)(v24 + 24) = v22;
  *(_BYTE *)(v24 + 32) = v19;
  *(_BYTE *)(v24 + 33) = v23;
  *(_WORD *)(v24 + 34) = 256;
  *(_DWORD *)(v24 + 36) = 3;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v10 + 176, (uint64_t)&v71, &demangling cache variable for type metadata for USDImportService?);
  v63 = v10;
  if (!v72)
  {
    v60 = v24;
    v61 = v16;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v71, &demangling cache variable for type metadata for USDImportService?);
LABEL_8:
    v40 = v4;
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v42 = v70;
    v43 = v65;
    v41(v70, a1, v65);
    v44 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    v45 = (v5 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
    v49 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v49 + v44, v42, v43);
    *(_QWORD *)(v49 + v45) = v63;
    v50 = (_QWORD *)(v49 + v46);
    v51 = v69;
    *v50 = v66;
    v50[1] = v51;
    *(_QWORD *)(v49 + v47) = v67;
    *(_QWORD *)(v49 + v48) = v60;
    v52 = v68;
    *(_QWORD *)(v49 + ((v48 + 15) & 0xFFFFFFFFFFFFFFF8)) = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
    v35 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
    v53 = swift_allocObject();
    v54 = swift_allocObject();
    *(_DWORD *)(v54 + 16) = 0;
    *(_QWORD *)(v53 + 16) = v54;
    *(_QWORD *)(v53 + 24) = 0;
    *(_BYTE *)(v53 + 32) = -1;
    *(_QWORD *)(v35 + 16) = v53;
    v55 = (_QWORD *)swift_allocObject();
    v55[2] = partial apply for closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
    v55[3] = v49;
    v56 = v61;
    v55[4] = v53;
    v55[5] = v56;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v57 = v52;
    v58 = Future.init(_:)();
    swift_release();

    *(_QWORD *)(v35 + 24) = v58;
    return v35;
  }
  outlined init with take of BindableDataInternal(&v71, (uint64_t)v73);
  v25 = v74;
  v26 = v75;
  __swift_project_boxed_opaque_existential_1(v73, v74);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 24))(a1, v25, v26) & 1) == 0)
  {
    v60 = v24;
    v61 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    goto LABEL_8;
  }
  v27 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v70, a1, v65);
  outlined init with copy of __REAssetService((uint64_t)v73, (uint64_t)&v71);
  v28 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v29 = (v5 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v32 + v28, v70, v27);
  v33 = (_QWORD *)(v32 + v29);
  v34 = v69;
  *v33 = v66;
  v33[1] = v34;
  *(_QWORD *)(v32 + v30) = v67;
  *(_QWORD *)(v32 + v31) = v24;
  outlined init with take of BindableDataInternal(&v71, v32 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  v35 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
  v36 = swift_allocObject();
  v37 = swift_allocObject();
  *(_DWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v36 + 16) = v37;
  *(_QWORD *)(v36 + 24) = 0;
  *(_BYTE *)(v36 + 32) = -1;
  *(_QWORD *)(v35 + 16) = v36;
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
  v38[3] = v32;
  v38[4] = v36;
  v38[5] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v39 = Future.init(_:)();
  swift_release();

  swift_release();
  swift_release();

  *(_QWORD *)(v35 + 24) = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  return v35;
}

uint64_t specialized LoadTracer.subscribe<A>(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Trace;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Trace = type metadata accessor for LoadTrace(0);
  v23 = *(_QWORD *)(Trace - 8);
  v24 = Trace;
  v10 = *(_QWORD *)(v23 + 64);
  v11 = v23;
  MEMORY[0x24BDAC7A8](Trace);
  v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocBox();
  v14 = v13;
  outlined init with copy of __RKEntityActionSpecification(a2, v13, type metadata accessor for LoadTrace);
  v25 = a1;
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v12, type metadata accessor for LoadTrace);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v12, v17 + v15, type metadata accessor for LoadTrace);
  *(_QWORD *)(v17 + v16) = v3;
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v12, type metadata accessor for LoadTrace);
  v18 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v12, v18 + v15, type metadata accessor for LoadTrace);
  *(_QWORD *)(v18 + v16) = v3;
  *(_QWORD *)(v18 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_retain_n();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<Entity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<Entity>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  v19 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v14 + 8) = v19;
  swift_release();
  LODWORD(v19) = *(_DWORD *)v14;
  outlined init with copy of __RKEntityActionSpecification(v14, (uint64_t)v8, type metadata accessor for LoadTrace);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v24);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v8, v19);
  swift_endAccess();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Trace;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Trace = type metadata accessor for LoadTrace(0);
  v23 = *(_QWORD *)(Trace - 8);
  v24 = Trace;
  v10 = *(_QWORD *)(v23 + 64);
  v11 = v23;
  MEMORY[0x24BDAC7A8](Trace);
  v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocBox();
  v14 = v13;
  outlined init with copy of __RKEntityActionSpecification(a2, v13, type metadata accessor for LoadTrace);
  v25 = a1;
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v12, type metadata accessor for LoadTrace);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v12, v17 + v15, type metadata accessor for LoadTrace);
  *(_QWORD *)(v17 + v16) = v3;
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v12, type metadata accessor for LoadTrace);
  v18 = swift_allocObject();
  outlined init with take of __RKEntityActionSpecification((uint64_t)v12, v18 + v15, type metadata accessor for LoadTrace);
  *(_QWORD *)(v18 + v16) = v3;
  *(_QWORD *)(v18 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_retain_n();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  v19 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v14 + 8) = v19;
  swift_release();
  LODWORD(v19) = *(_DWORD *)v14;
  outlined init with copy of __RKEntityActionSpecification(v14, (uint64_t)v8, type metadata accessor for LoadTrace);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v24);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v8, v19);
  swift_endAccess();
  return swift_release();
}

uint64_t specialized closure #2 in LoadTracer.subscribe<A>(to:with:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE v8[40];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  type metadata accessor for LoadTrace(0);
  v3 = (unsigned int *)swift_projectBox();
  RECreateLoadTraceTypeBitFieldSignpostArg();
  REEntityGetLocalId();
  RESignpostEmitREAssetEntityLoadEndedImpulse();
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService);
  type metadata accessor for __REAssetManager();
  if (swift_dynamicCast())
  {
    if ((_REAssetManagerIsFullLoadTracingEnabled() & 1) != 0)
      REEntityAddLoadTraceComponent();
    swift_release();
  }
  swift_beginAccess();
  v5 = *v3;
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(v5, (uint64_t)v2);
  swift_endAccess();
  return outlined destroy of BodyTrackingComponent?((uint64_t)v2, &demangling cache variable for type metadata for LoadTrace?);
}

uint64_t Entity.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[34] = a4;
  v5[35] = v4;
  v5[32] = a2;
  v5[33] = a3;
  v5[31] = a1;
  v5[36] = type metadata accessor for MainActor();
  v5[37] = static MainActor.shared.getter();
  v5[38] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[39] = v6;
  return swift_task_switch();
}

uint64_t Entity.init(contentsOf:withName:options:)()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_OWORD *)(v0 + 16);
  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 272), v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (*(_QWORD *)(v0 + 104) == 1)
  {
    *(_OWORD *)(v0 + 208) = 0u;
    *(_QWORD *)(v0 + 240) = 0;
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_WORD *)(v0 + 192) = 512;
    *(_OWORD *)(v0 + 144) = 0u;
    *(_QWORD *)(v0 + 200) = 0;
    outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 144);
    *(_QWORD *)(v0 + 184) = 0;
    v2 = *(_OWORD *)(v0 + 160);
    v3 = *(_OWORD *)(v0 + 176);
    *v1 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 32) = v2;
    v4 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 48) = v3;
    *(_OWORD *)(v0 + 64) = v4;
    outlined destroy of BodyTrackingComponent?(v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    v5 = *(_OWORD *)(v0 + 96);
    *v1 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 32) = v5;
    v6 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 64) = v6;
  }
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 280);
  *(_BYTE *)(v0 + 408) = static Entity.asynchronousLoadOptions;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v7 + 272) + *(_QWORD *)(v7 + 272));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v8;
  *v8 = v0;
  v8[1] = Entity.init(contentsOf:withName:options:);
  return v10(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v0 + 16, v0 + 408);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0[43] = (*(uint64_t (**)(void))(v0[35] + 232))();
  v1 = swift_retain();
  Entity.copy(to:recursive:)(v1, 1);
  v0[44] = static MainActor.shared.getter();
  v0[45] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[46] = v2;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = static Entity.enumerateReferences(root:)(v0[43]);
  v0[47] = v1;
  v0[48] = static MainActor.shared.getter();
  v2 = swift_task_alloc();
  v0[49] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[50] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = Entity.init(contentsOf:withName:options:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  if (*(_QWORD *)(v0 + 72))
  {
    swift_retain();
    Entity.LoadStatistics.log()();
    swift_release();
  }
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  outlined destroy of Entity.__LoadOptions(v0 + 16);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 344));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  outlined destroy of Entity.__LoadOptions(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.init(contentsOf:withName:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 328) = a1;
  *(_QWORD *)(v3 + 336) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t Entity.init(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  v5 = type metadata accessor for URL();
  v4[38] = v5;
  v4[39] = *(_QWORD *)(v5 - 8);
  v4[40] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[41] = static MainActor.shared.getter();
  v4[42] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[43] = v6;
  return swift_task_switch();
}

uint64_t Entity.init(contentsOf:withName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 224) = 0u;
  *(_QWORD *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_WORD *)(v0 + 128) = 512;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 80);
  *(_QWORD *)(v0 + 120) = 0;
  v5 = *(_OWORD *)(v0 + 96);
  v6 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 32) = v5;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 64) = v7;
  swift_beginAccess();
  *(_BYTE *)(v0 + 64) = static RKARSystemCore.generateDecimatedMeshes;
  type metadata accessor for Entity.LoadStatistics();
  v8 = swift_allocObject();
  Date.init()();
  v9 = v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 2;
  *(_QWORD *)(v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 1;
  v10 = (_QWORD *)(v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *v10 = 0xD000000000000027;
  v10[1] = 0x800000021BE90380;
  swift_release();
  *(_QWORD *)(v0 + 72) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  outlined init with copy of Entity.__LoadOptions(v0 + 16, v0 + 144);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 352) = v11;
  *v11 = v0;
  v11[1] = Entity.init(contentsOf:withName:);
  return Entity.init(contentsOf:withName:options:)(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), v0 + 144);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 272);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  outlined destroy of Entity.__LoadOptions(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 272);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  outlined destroy of Entity.__LoadOptions(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.init(contentsOf:withName:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 360) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 368) = a1;
  return swift_task_switch();
}

uint64_t static Entity.updateInteractions(root:)(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t result;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSString *v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[48];

  swift_beginAccess();
  v2 = static Entity.__disableUpdateInteractionEntities;
  if (static Entity.__disableUpdateInteractionEntities)
  {
    swift_bridgeObjectRetain();
    v3 = specialized Sequence<>.contains(_:)(a1, v2);
    result = swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      return result;
  }
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (Object = RECustomComponentGetObject()) != 0)
  {
    v6 = *(_QWORD *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v33);
    if (v6)
      v7 = v6;
    else
      v7 = __RKEntityInteractionsComponent.decodedJSON()();
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v33);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (static __RKEntityInteractionsComponent.registration
      && REEntityGetCustomComponent()
      && (v9 = RECustomComponentGetObject()) != 0)
    {
      v10 = *(_QWORD *)(v9 + 16);
      outlined init with copy of __RKEntityInteractionsComponent(v9, (uint64_t)v33);
      if (v10)
        v11 = v10;
      else
        v11 = __RKEntityInteractionsComponent.decodedJSON()();
      swift_bridgeObjectRetain();
      outlined destroy of __RKEntityInteractionsComponent((uint64_t)v33);
    }
    else
    {
      v11 = MEMORY[0x24BEE4AF8];
    }
    Entity.__interactions.setter(MEMORY[0x24BEE4AF8]);
    Entity.__interactions.setter(v11);
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
    return swift_release();
  v12 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v12 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_62;
    v13 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v14 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_61;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        v15 = RECustomComponentGetObject();
        if (v15)
        {
          v16 = *(unsigned __int8 **)v15;
          if (*(_QWORD *)(v15 + 8))
            v17 = 1;
          else
            v17 = v16 == 0;
          if (v17)
          {
            result = swift_retain();
          }
          else
          {
            v18 = *v16;
            v19 = String.init(utf8String:)();
            if (v20)
              v21 = v19;
            else
              v21 = 0;
            if (v20)
              v22 = v20;
            else
              v22 = 0xE000000000000000;
            v16 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v18 == 42, v21, v22);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v16;
          }
          if (!v16)
            goto LABEL_63;
          swift_retain();
          v23 = String.init(utf8String:)();
          v25 = v24;
          swift_release();
          v26 = v25 ? v23 : 0;
          v27 = v25 ? v25 : 0xE000000000000000;
          v28 = (NSString *)MEMORY[0x220768C3C](v26, v27);
          swift_bridgeObjectRelease();
          v29 = NSClassFromString(v28);

          swift_release();
          if (v29)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v30 = swift_dynamicCastMetatype();
            if (v30)
            {
              v31 = (*(uint64_t (**)(void))(v30 + 232))();
              v32 = *(_QWORD *)(v31 + 16);
              swift_retain();
              MEMORY[0x22076D160](v32, 0);
              *(_QWORD *)(v31 + 16) = v13;
              MEMORY[0x22076D160](v13, v31);
              swift_release();
              goto LABEL_55;
            }
          }
        }
      }
      v14 = makeEntity(for:)(v13);
    }
    v31 = v14;
LABEL_55:
    result = REEntityGetChildCount();
    if (v12 >= result)
      goto LABEL_60;
    ++v12;
    static Entity.updateInteractions(root:)(v31);
    swift_release();
    if (v12 >= REEntityGetChildCount())
      return swift_release();
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Entity.updateSceneGravityIfNeeded()()
{
  uint64_t SceneNullable;
  uint64_t v1;
  id v2;
  uint64_t v3;
  __int128 *Object;
  uint64_t ServiceLocator;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  float v9;
  float v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    v1 = SceneNullable;
    v2 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v2)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v1);
    }
    swift_beginAccess();
    if (static __RKScenePhysics.registration)
    {
      RESceneGetComponentsOfCustomType();
      if (v3)
      {
        Object = (__int128 *)RECustomComponentGetObject();
        if (Object)
        {
          v11 = *Object;
          if (RESceneGetECSManagerNullable())
          {
            ServiceLocator = REECSManagerGetServiceLocator();
            if (MEMORY[0x22076FDD0](ServiceLocator))
            {
              REPhysicsSimulationServiceGetDefaultGravity();
              v7 = 0;
              while (1)
              {
                v12 = v6;
                v9 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
                v13 = v11;
                v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
                v8 = v9 == v10;
                if (v7 == 2)
                  break;
                while (1)
                {
                  ++v7;
                  if (v8)
                    break;
                  if (v7 == 2)
                    goto LABEL_16;
                  v8 = 0;
                }
              }
              if (v9 != v10)
LABEL_16:
                REPhysicsSimulationServiceSetDefaultGravity();
            }
          }
        }
      }
    }
    swift_release();
  }
}

uint64_t static RealityFileLoadInformationResolver.resolve(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Information;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::Bool v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::Bool v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  id v45;
  unint64_t v46;
  _BYTE *v47;
  Swift::String v48;
  Swift::Bool v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::Bool v54;
  Swift::String v55;
  Swift::Bool v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::Bool v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _BYTE v72[4];
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v77 = &v72[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v80 = &v72[-v8];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v72[-v10];
  if ((specialized static RealityFileLoadInformationResolver.urlContainsPathExtension(_:_:)(a1, 0x7974696C616572, (void *)0xE700000000000000) & 1) == 0)
  {
    Information = type metadata accessor for RealityFileLoadInformation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Information - 8) + 56))(a2, 1, 1, Information);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v11, a1, v4);
  v12 = URL.absoluteString.getter();
  v14 = specialized BidirectionalCollection.last.getter(v12, v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  v74 = a2;
  if (v16)
  {
    if (v14 == 47 && v16 == 0xE100000000000000)
      v73 = 1;
    else
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v73 = 0;
  }
  v20 = 0;
  v21 = 0;
  v75 = v5;
  v76 = v4;
  while (1)
  {
    v22 = URL.pathComponents.getter();
    v23 = *(_QWORD *)(v22 + 16);
    v78 = v20;
    v79 = v21;
    if (!v23)
    {
LABEL_17:
      v26 = 0;
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = 0x7974696C6165722ELL;
    v24._object = (void *)0xE800000000000000;
    v25 = String.hasSuffix(_:)(v24);
    result = swift_bridgeObjectRelease();
    if (!v25)
    {
      if (v23 == 1)
        goto LABEL_17;
      if (*(_QWORD *)(v22 + 16) < 2uLL)
      {
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v48._countAndFlagsBits = 0x7974696C6165722ELL;
      v48._object = (void *)0xE800000000000000;
      v49 = String.hasSuffix(_:)(v48);
      result = swift_bridgeObjectRelease();
      if (!v49)
      {
        v50 = v22 + 72;
        v51 = 2;
        while (1)
        {
          v26 = v23 != v51;
          if (v23 == v51)
            goto LABEL_18;
          if (v51 >= *(_QWORD *)(v22 + 16))
          {
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          ++v51;
          v52 = v50 + 16;
          swift_bridgeObjectRetain();
          v53._countAndFlagsBits = 0x7974696C6165722ELL;
          v53._object = (void *)0xE800000000000000;
          v54 = String.hasSuffix(_:)(v53);
          result = swift_bridgeObjectRelease();
          v50 = v52;
          if (v54)
            goto LABEL_18;
        }
      }
    }
    v26 = 1;
LABEL_18:
    swift_bridgeObjectRelease();
    v83 = URL.pathExtension.getter();
    v84 = v27;
    v81 = 0x7974696C616572;
    v82 = 0xE700000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v28 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    URL.deletingLastPathComponent()();
    v29 = URL.pathComponents.getter();
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
      goto LABEL_23;
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = 0x7974696C6165722ELL;
    v31._object = (void *)0xE800000000000000;
    v32 = String.hasSuffix(_:)(v31);
    result = swift_bridgeObjectRelease();
    if (!v32)
    {
      if (v30 == 1)
        goto LABEL_23;
      if (*(_QWORD *)(v29 + 16) < 2uLL)
        goto LABEL_59;
      swift_bridgeObjectRetain();
      v55._countAndFlagsBits = 0x7974696C6165722ELL;
      v55._object = (void *)0xE800000000000000;
      v56 = String.hasSuffix(_:)(v55);
      result = swift_bridgeObjectRelease();
      if (!v56)
        break;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    v34 = v75;
    v33 = v76;
    v35 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
    v35(v80, v76);
    if (!v26)
      goto LABEL_49;
LABEL_27:
    v83 = URL.lastPathComponent.getter();
    v84 = v37;
    v38 = StringProtocol.removingPercentEncoding.getter();
    v40 = v39;
    swift_bridgeObjectRelease();
    if (!v40)
      goto LABEL_51;
    v41 = (void *)MEMORY[0x220768C3C](v38, v40);
    swift_bridgeObjectRelease();
    if (v79)
      v42 = v78;
    else
      v42 = 0;
    if (v79)
      v43 = v79;
    else
      v43 = 0xE000000000000000;
    v44 = (void *)MEMORY[0x220768C3C](v42, v43);
    swift_bridgeObjectRelease();
    v45 = objc_msgSend(v41, sel_stringByAppendingPathComponent_, v44);

    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v46;

    v47 = v77;
    URL.deletingLastPathComponent()();
    v35(v11, v33);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 32))(v11, v47, v33);
  }
  v57 = v29 + 72;
  v58 = 2;
  while (v30 != v58)
  {
    if (v58 >= *(_QWORD *)(v29 + 16))
      goto LABEL_57;
    ++v58;
    v59 = v57 + 16;
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = 0x7974696C6165722ELL;
    v60._object = (void *)0xE800000000000000;
    v61 = String.hasSuffix(_:)(v60);
    result = swift_bridgeObjectRelease();
    v57 = v59;
    if (v61)
      goto LABEL_20;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  v34 = v75;
  v33 = v76;
  v35 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
  v35(v80, v76);
  if (v28)
    v36 = v26;
  else
    v36 = 0;
  if (v36)
    goto LABEL_27;
LABEL_49:
  URL.path.getter();
  v62 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v62 < 2
    || (v83 = URL.pathExtension.getter(),
        v84 = v63,
        v81 = 0x7974696C616572,
        v82 = 0xE700000000000000,
        v64 = StringProtocol.caseInsensitiveCompare<A>(_:)(),
        swift_bridgeObjectRelease(),
        v64))
  {
LABEL_51:
    swift_bridgeObjectRelease();
    v35(v11, v33);
    v65 = type metadata accessor for RealityFileLoadInformation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v74, 1, 1, v65);
  }
  v66 = v79;
  v67 = v74;
  if ((v73 & (v79 != 0)) == 1)
  {
    v83 = v78;
    v84 = v79;
    swift_bridgeObjectRetain();
    v68._countAndFlagsBits = 47;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    v69 = v83;
    v66 = v84;
  }
  else
  {
    v69 = v78;
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v34 + 32))(v67, v11, v33);
  v70 = type metadata accessor for RealityFileLoadInformation(0);
  v71 = (uint64_t *)(v67 + *(int *)(v70 + 20));
  *v71 = v69;
  v71[1] = v66;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v67, 0, 1, v70);
}

uint64_t static Entity.__loadAsync(named:in:options:asyncOptions:)(void *a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t Trace;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  Swift::String v26;
  id v27;
  void *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(id, uint64_t, id, uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  id v92;
  uint64_t v93;
  id v94;
  __int128 v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v94 = a1;
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v88 = (uint64_t)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (_QWORD *)((char *)v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = *a5;
  v86 = a4;
  LODWORD(v89) = *(unsigned __int8 *)(a4 + 48);
  if (a3)
    v15 = a3;
  else
    v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v16 = a3;
  v17 = specialized static __ServiceLocator.shared.getter();
  v18 = *(void **)(*(_QWORD *)(v17 + 168) + 16);
  swift_beginAccess();
  v19 = *(_QWORD *)(v17 + 24);
  swift_unownedRetainStrong();
  v20 = *(void **)(v19 + 32);
  swift_retain();
  v92 = v18;
  v21 = v20;
  swift_release();
  v22 = *(_QWORD *)(*(_QWORD *)(v17 + 168) + 32);
  *v14 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE5610], v11);
  v23 = v21;
  v93 = v22;
  swift_retain();
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v19 & 1) != 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v17 + 168) + 24);
    *(_QWORD *)&v96 = 0;
    *((_QWORD *)&v96 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v96 = v94;
    *((_QWORD *)&v96 + 1) = a2;
    v26._countAndFlagsBits = 0x7562206D6F726620;
    v26._object = (void *)0xED000020656C646ELL;
    String.append(_:)(v26);
    v27 = objc_msgSend(v15, sel_bundleIdentifier);
    v84 = v23;
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

    }
    else
    {
      v31 = (void *)0x800000021BE903B0;
      v29 = 0xD000000000000010;
    }
    v90 = swift_allocBox();
    v33 = v32;
    v34._countAndFlagsBits = v29;
    v34._object = v31;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v83 = v33;
    LoadTracer.beginLoad(loadType:logMsgTarget:)(2, v96, *((uint64_t *)&v96 + 1), v33);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    v35 = v15;
    v36 = v94;
    v37 = (void *)MEMORY[0x220768C3C]();
    swift_bridgeObjectRelease();
    v38 = RESceneImportOperationCreateWithBundleResource();

    v85 = v25;
    v80 = v35;
    if (v38)
    {
      type metadata accessor for __SceneImportOperation();
      swift_allocObject();
      v39 = __SceneImportOperation.init(core:)(v38);

      swift_release();
      swift_retain();
      RESceneImportOperationSetMergeIntoSingleEntity();
      v40 = v89;
      RESceneImportOperationSetGenerateDecimatedMesh();
      RESceneImportOperationSetUnitType();
      RESceneImportOperationSetIsolateFromEngine();
      swift_release();
    }
    else
    {

      swift_release();
      v39 = 0;
      v40 = v89;
    }
    type metadata accessor for LoadRequestDependencies();
    v41 = swift_allocObject();
    v42 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v41 + 16) = MEMORY[0x24BEE4AF8];
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v43 = swift_allocObject();
    *(_DWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v41 + 24) = v43;
    swift_beginAccess();
    *(_QWORD *)(v41 + 16) = v42;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
    v44 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v44 + 16) = v36;
    *(_QWORD *)(v44 + 24) = a2;
    *(_BYTE *)(v44 + 32) = v91;
    *(_BYTE *)(v44 + 33) = v40;
    *(_WORD *)(v44 + 34) = 1;
    *(_DWORD *)(v44 + 36) = 1;
    v82 = v41;
    swift_weakAssign();
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v17 + 176, (uint64_t)&v96, &demangling cache variable for type metadata for USDImportService?);
    if (*((_QWORD *)&v97 + 1))
    {
      v79[0] = v39;
      v45 = v90;
      outlined init with take of BindableDataInternal(&v96, (uint64_t)&v100);
      v46 = v101;
      v47 = v102;
      __swift_project_boxed_opaque_existential_1(&v100, v101);
      v48 = *(uint64_t (**)(id, uint64_t, id, uint64_t, uint64_t))(v47 + 16);
      swift_bridgeObjectRetain();
      v49 = v80;
      if ((v48(v36, a2, v80, v46, v47) & 1) != 0)
      {
        v50 = v86;
        v51 = *(_QWORD *)(v86 + 56);
        if (v51)
        {
          v52 = v51 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
          *(_QWORD *)v52 = 1;
          *(_BYTE *)(v52 + 8) = 0;
        }
        outlined init with copy of Entity.__LoadOptions(v50, (uint64_t)&v96);
        outlined init with copy of __REAssetService((uint64_t)&v100, (uint64_t)v95);
        v53 = swift_allocObject();
        *(_QWORD *)(v53 + 16) = v36;
        *(_QWORD *)(v53 + 24) = a2;
        *(_QWORD *)(v53 + 32) = v49;
        *(_BYTE *)(v53 + 40) = v89;
        *(_QWORD *)(v53 + 48) = v87;
        *(_QWORD *)(v53 + 56) = v44;
        v54 = v97;
        *(_OWORD *)(v53 + 64) = v96;
        *(_OWORD *)(v53 + 80) = v54;
        v55 = v99;
        *(_OWORD *)(v53 + 96) = v98;
        *(_OWORD *)(v53 + 112) = v55;
        outlined init with take of BindableDataInternal(v95, v53 + 128);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
        v56 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
        v57 = swift_allocObject();
        v58 = swift_allocObject();
        *(_DWORD *)(v58 + 16) = 0;
        *(_QWORD *)(v57 + 16) = v58;
        *(_QWORD *)(v57 + 24) = 0;
        *(_BYTE *)(v57 + 32) = -1;
        *(_QWORD *)(v56 + 16) = v57;
        v59 = (_QWORD *)swift_allocObject();
        v59[2] = partial apply for closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:);
        v59[3] = v53;
        v60 = v82;
        v59[4] = v57;
        v59[5] = v60;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
        swift_allocObject();
        swift_bridgeObjectRetain();
        v61 = v49;
        swift_retain();
        swift_retain();
        swift_retain();
        *(_QWORD *)(v56 + 24) = Future.init(_:)();
        v62 = v88;
        outlined init with copy of __RKEntityActionSpecification(v83, v88, type metadata accessor for LoadTrace);
        specialized LoadTracer.subscribe<A>(to:with:)(v56, v62);

        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of __RKEntityActionSpecification(v62, type metadata accessor for LoadTrace);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        goto LABEL_19;
      }
      v89 = v17;
      v63 = a2;
      v64 = v49;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      v66 = v45;
      v39 = v79[0];
      v65 = v86;
    }
    else
    {
      v89 = v17;
      v63 = a2;
      v64 = v80;
      swift_bridgeObjectRetain();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v96, &demangling cache variable for type metadata for USDImportService?);
      v65 = v86;
      v66 = v90;
    }
    v79[1] = v63;
    outlined init with copy of Entity.__LoadOptions(v65, (uint64_t)&v96);
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = v92;
    *(_BYTE *)(v67 + 24) = v91;
    v68 = v97;
    *(_OWORD *)(v67 + 32) = v96;
    *(_OWORD *)(v67 + 48) = v68;
    v69 = v99;
    *(_OWORD *)(v67 + 64) = v98;
    *(_OWORD *)(v67 + 80) = v69;
    v70 = v84;
    *(_QWORD *)(v67 + 96) = v39;
    *(_QWORD *)(v67 + 104) = v70;
    *(_QWORD *)(v67 + 112) = v93;
    *(_QWORD *)(v67 + 120) = v44;
    *(_QWORD *)(v67 + 128) = v94;
    *(_QWORD *)(v67 + 136) = v63;
    *(_QWORD *)(v67 + 144) = v64;
    *(_QWORD *)(v67 + 152) = v66;
    *(_QWORD *)(v67 + 160) = v87;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
    v56 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
    v71 = swift_allocObject();
    v72 = swift_allocObject();
    *(_DWORD *)(v72 + 16) = 0;
    *(_QWORD *)(v71 + 16) = v72;
    *(_QWORD *)(v71 + 24) = 0;
    *(_BYTE *)(v71 + 32) = -1;
    *(_QWORD *)(v56 + 16) = v71;
    v73 = (_QWORD *)swift_allocObject();
    v73[2] = partial apply for closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:);
    v73[3] = v67;
    v74 = v82;
    v73[4] = v71;
    v73[5] = v74;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_retain();
    v94 = v92;
    v75 = v70;
    swift_retain();
    swift_bridgeObjectRetain();
    v76 = v64;
    swift_retain();
    swift_retain();
    *(_QWORD *)(v56 + 24) = Future.init(_:)();
    v77 = v83;
    swift_beginAccess();
    v78 = v88;
    outlined init with copy of __RKEntityActionSpecification(v77, v88, type metadata accessor for LoadTrace);
    specialized LoadTracer.subscribe<A>(to:with:)(v56, v78);

    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    outlined destroy of __RKEntityActionSpecification(v78, type metadata accessor for LoadTrace);
LABEL_19:
    swift_release();
    return v56;
  }
  __break(1u);
  return result;
}

uint64_t static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Trace;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  __int128 v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  NSURL *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  void *v112;
  char *v113;
  uint64_t v114;
  void *v115;
  Swift::Bool v116;
  Swift::String_optional v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  __int128 v121;
  __int128 v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  id v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t Information;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156[2];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v153 = a3;
  v139 = a2;
  v138 = type metadata accessor for URL();
  v135 = *(_QWORD *)(v138 - 8);
  MEMORY[0x24BDAC7A8](v138);
  v132 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = v8;
  MEMORY[0x24BDAC7A8](v9);
  v136 = (char *)&v130 - v10;
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v148 = (uint64_t)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  v146 = *(_QWORD *)(Information - 8);
  MEMORY[0x24BDAC7A8](Information);
  v134 = (uint64_t)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = v16;
  MEMORY[0x24BDAC7A8](v17);
  v147 = (uint64_t)&v130 - v18;
  v19 = type metadata accessor for DispatchPredicate();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (uint64_t *)((char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v152) = *a5;
  v150 = a4;
  v151 = *(unsigned __int8 *)(a4 + 48);
  v23 = specialized static __ServiceLocator.shared.getter();
  v24 = *(void **)(*(_QWORD *)(v23 + 168) + 16);
  swift_beginAccess();
  v25 = *(_QWORD *)(v23 + 24);
  swift_unownedRetainStrong();
  v26 = *(void **)(v25 + 32);
  swift_retain();
  v149 = v24;
  v27 = v26;
  swift_release();
  v28 = *(_QWORD *)(*(_QWORD *)(v23 + 168) + 32);
  *v22 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BEE5610], v19);
  v29 = v27;
  swift_retain();
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v27 & 1) != 0)
  {
    v141 = v29;
    v155 = v28;
    v31 = *(_QWORD *)(*(_QWORD *)(v23 + 168) + 24);
    v144 = swift_allocBox();
    v33 = v32;
    swift_retain();
    v34 = URL.lastPathComponent.getter();
    v142 = v33;
    v143 = v31;
    LoadTracer.beginLoad(loadType:logMsgTarget:)(2, v34, v35, v33);
    swift_bridgeObjectRelease();
    type metadata accessor for LoadRequestDependencies();
    v36 = swift_allocObject();
    v154 = v23;
    v37 = v36;
    v38 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v36 + 16) = MEMORY[0x24BEE4AF8];
    v39 = (_QWORD *)(v36 + 16);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v41 = swift_allocObject();
    *(_DWORD *)(v41 + 16) = 0;
    *(_QWORD *)(v37 + 24) = v41;
    swift_beginAccess();
    *v39 = v38;
    swift_bridgeObjectRelease();
    v42 = URL.absoluteString.getter();
    v44 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
    v45 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v45 + 16) = v42;
    *(_QWORD *)(v45 + 24) = v44;
    *(_BYTE *)(v45 + 32) = v152;
    *(_BYTE *)(v45 + 33) = v151;
    *(_WORD *)(v45 + 34) = 1;
    *(_DWORD *)(v45 + 36) = 1;
    swift_weakAssign();
    type metadata accessor for RealityFileLoadInformationResolver();
    static RealityFileLoadInformationResolver.resolve(url:)(a1, (uint64_t)v15);
    v46 = v146;
    v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48))(v15, 1, Information);
    v140 = v40;
    if (v47 != 1)
    {
      v78 = v147;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v15, v147, type metadata accessor for RealityFileLoadInformation);
      outlined init with copy of Entity.__LoadOptions(v150, (uint64_t)&v157);
      v79 = v78;
      v80 = v134;
      outlined init with copy of __RKEntityActionSpecification(v79, v134, type metadata accessor for RealityFileLoadInformation);
      v81 = (*(unsigned __int8 *)(v46 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v82 = (v133 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
      v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
      v146 = v37;
      v84 = (v83 + 15) & 0xFFFFFFFFFFFFFFF8;
      v85 = (v84 + 15) & 0xFFFFFFFFFFFFFFF8;
      v86 = (v85 + 15) & 0xFFFFFFFFFFFFFFF8;
      v87 = swift_allocObject();
      v88 = v153;
      *(_QWORD *)(v87 + 16) = v139;
      *(_QWORD *)(v87 + 24) = v88;
      *(_BYTE *)(v87 + 32) = v152;
      v89 = v158;
      *(_OWORD *)(v87 + 40) = v157;
      *(_OWORD *)(v87 + 56) = v89;
      v90 = v160;
      *(_OWORD *)(v87 + 72) = v159;
      *(_OWORD *)(v87 + 88) = v90;
      *(_QWORD *)(v87 + 104) = v155;
      outlined init with take of __RKEntityActionSpecification(v80, v87 + v81, type metadata accessor for RealityFileLoadInformation);
      *(_QWORD *)(v87 + v82) = v144;
      v91 = v141;
      *(_QWORD *)(v87 + v83) = v141;
      *(_QWORD *)(v87 + v84) = v137;
      *(_QWORD *)(v87 + v85) = v45;
      v92 = v149;
      *(_QWORD *)(v87 + v86) = v149;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
      v71 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
      v93 = swift_allocObject();
      v94 = swift_allocObject();
      *(_DWORD *)(v94 + 16) = 0;
      *(_QWORD *)(v93 + 16) = v94;
      *(_QWORD *)(v93 + 24) = 0;
      *(_BYTE *)(v93 + 32) = -1;
      *(_QWORD *)(v71 + 16) = v93;
      v95 = (_QWORD *)swift_allocObject();
      v95[2] = partial apply for closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
      v95[3] = v87;
      v96 = v146;
      v95[4] = v93;
      v95[5] = v96;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v97 = v92;
      v98 = v91;
      swift_retain();
      *(_QWORD *)(v71 + 24) = Future.init(_:)();
      v99 = v142;
      swift_beginAccess();
      v100 = v148;
      outlined init with copy of __RKEntityActionSpecification(v99, v148, type metadata accessor for LoadTrace);
      specialized LoadTracer.subscribe<A>(to:with:)(v71, v100);

      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      outlined destroy of __RKEntityActionSpecification(v100, type metadata accessor for LoadTrace);
      outlined destroy of __RKEntityActionSpecification(v147, type metadata accessor for RealityFileLoadInformation);
LABEL_17:
      swift_release();
      return v71;
    }
    v48 = a1;
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    v49 = v154;
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v49 + 176, (uint64_t)&v157, &demangling cache variable for type metadata for USDImportService?);
    v50 = v150;
    if (*((_QWORD *)&v158 + 1))
    {
      outlined init with take of BindableDataInternal(&v157, (uint64_t)&v161);
      v51 = v162;
      v52 = v163;
      __swift_project_boxed_opaque_existential_1(&v161, v162);
      v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 24))(v48, v51, v52);
      v54 = v136;
      if ((v53 & 1) != 0)
      {
        v146 = v37;
        v55 = *(_QWORD *)(v50 + 56);
        if (v55)
        {
          v56 = v55 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
          *(_QWORD *)v56 = 1;
          *(_BYTE *)(v56 + 8) = 0;
        }
        v57 = v135;
        (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v54, v48, v138);
        outlined init with copy of Entity.__LoadOptions(v50, (uint64_t)&v157);
        outlined init with copy of __REAssetService((uint64_t)&v161, (uint64_t)v156);
        v58 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
        v59 = (v131 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
        v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
        v152 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8;
        v61 = (v60 + 39) & 0xFFFFFFFFFFFFFFF8;
        v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
        v63 = swift_allocObject();
        v64 = v155;
        *(_QWORD *)(v63 + 16) = v154;
        *(_QWORD *)(v63 + 24) = v64;
        (*(void (**)(unint64_t, char *, uint64_t))(v57 + 32))(v63 + v58, v54, v138);
        *(_QWORD *)(v63 + v59) = v137;
        *(_QWORD *)(v63 + v60) = v149;
        v65 = v63 + v152;
        v66 = v153;
        *(_QWORD *)v65 = v139;
        *(_QWORD *)(v65 + 8) = v66;
        *(_BYTE *)(v65 + 16) = v151;
        *(_QWORD *)(v63 + v61) = v45;
        v67 = (_OWORD *)(v63 + v62);
        v68 = v158;
        *v67 = v157;
        v67[1] = v68;
        v69 = v160;
        v67[2] = v159;
        v67[3] = v69;
        outlined init with take of BindableDataInternal(v156, v63 + ((v62 + 71) & 0xFFFFFFFFFFFFFFF8));
        v70 = swift_allocObject();
        *(_QWORD *)(v70 + 16) = partial apply for closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
        *(_QWORD *)(v70 + 24) = v63;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
        v71 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
        v72 = swift_allocObject();
        v73 = swift_allocObject();
        *(_DWORD *)(v73 + 16) = 0;
        *(_QWORD *)(v72 + 16) = v73;
        *(_QWORD *)(v72 + 24) = 0;
        *(_BYTE *)(v72 + 32) = -1;
        *(_QWORD *)(v71 + 16) = v72;
        v74 = (_QWORD *)swift_allocObject();
        v74[2] = _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA;
        v74[3] = v70;
        v75 = v146;
        v74[4] = v72;
        v74[5] = v75;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v76 = v149;
        swift_retain();
        *(_QWORD *)(v71 + 24) = Future.init(_:)();
        v77 = v148;
        outlined init with copy of __RKEntityActionSpecification(v142, v148, type metadata accessor for LoadTrace);
        specialized LoadTracer.subscribe<A>(to:with:)(v71, v77);

        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        outlined destroy of __RKEntityActionSpecification(v77, type metadata accessor for LoadTrace);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v161);
        goto LABEL_17;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v161);
      v101 = v138;
      v102 = *(_QWORD *)(v50 + 56);
      if (!v102)
      {
LABEL_11:
        v104 = v135;
        v105 = *(void (**)(char *, uint64_t, uint64_t))(v135 + 16);
        v105(v54, v48, v101);
        swift_retain();
        URL._bridgeToObjectiveC()(v106);
        v108 = v107;
        swift_beginAccess();
        v109 = RESceneImportOperationCreateWithURL();

        type metadata accessor for __SceneImportOperation();
        swift_allocObject();
        v152 = __SceneImportOperation.init(core:)(v109);
        swift_release();
        v110 = *(void (**)(char *, uint64_t))(v104 + 8);
        v110(v54, v101);
        v111 = v132;
        v105(v132, v48, v101);
        v112 = v153;
        if (v153)
        {
          swift_bridgeObjectRetain();
          v113 = v111;
          v114 = v139;
        }
        else
        {
          v113 = v111;
          URL.deletingPathExtension()();
          v114 = URL.lastPathComponent.getter();
          v112 = v115;
          v110(v54, v101);
        }
        v116 = v151;
        v110(v113, v101);
        v117.value._countAndFlagsBits = v114;
        v117.value._object = v112;
        v118 = v152;
        __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v117, 0, v116, (Swift::Bool_optional)2);
        swift_bridgeObjectRelease();
        RESceneImportOperationSetIsolateFromEngine();
        outlined init with copy of Entity.__LoadOptions(v150, (uint64_t)&v157);
        v119 = swift_allocObject();
        v120 = v141;
        *(_QWORD *)(v119 + 16) = v118;
        *(_QWORD *)(v119 + 24) = v120;
        *(_QWORD *)(v119 + 32) = v155;
        *(_QWORD *)(v119 + 40) = v45;
        v121 = v158;
        *(_OWORD *)(v119 + 48) = v157;
        *(_OWORD *)(v119 + 64) = v121;
        v122 = v160;
        *(_OWORD *)(v119 + 80) = v159;
        *(_OWORD *)(v119 + 96) = v122;
        v123 = v149;
        *(_QWORD *)(v119 + 112) = v149;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
        v71 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
        v124 = swift_allocObject();
        v125 = swift_allocObject();
        *(_DWORD *)(v125 + 16) = 0;
        *(_QWORD *)(v124 + 16) = v125;
        *(_QWORD *)(v124 + 24) = 0;
        *(_BYTE *)(v124 + 32) = -1;
        *(_QWORD *)(v71 + 16) = v124;
        v126 = (_QWORD *)swift_allocObject();
        v126[2] = partial apply for closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
        v126[3] = v119;
        v126[4] = v124;
        v126[5] = v37;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
        swift_allocObject();
        v127 = v123;
        v128 = v120;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        *(_QWORD *)(v71 + 24) = Future.init(_:)();
        v129 = v148;
        outlined init with copy of __RKEntityActionSpecification(v142, v148, type metadata accessor for LoadTrace);
        specialized LoadTracer.subscribe<A>(to:with:)(v71, v129);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        outlined destroy of __RKEntityActionSpecification(v129, type metadata accessor for LoadTrace);
        goto LABEL_17;
      }
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v157, &demangling cache variable for type metadata for USDImportService?);
      v101 = v138;
      v54 = v136;
      v102 = *(_QWORD *)(v50 + 56);
      if (!v102)
        goto LABEL_11;
    }
    v103 = v102 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(_QWORD *)v103 = 0;
    *(_BYTE *)(v103 + 8) = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void Entity.LoadError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Error;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  Error = type metadata accessor for Entity.LoadError(0);
  MEMORY[0x24BDAC7A8](Error);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_21BD29DFC + 4 * byte_21BE777F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BD29DFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v3 = *v1;
  v4 = (void *)v1[1];
  *(_QWORD *)(v2 - 80) = 0;
  *(_QWORD *)(v2 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 80) = v0 - 13;
  *(_QWORD *)(v2 - 72) = 0x800000021BE838B0;
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E7562206E692022;
  v6._object = (void *)0xEB00000000656C64;
  String.append(_:)(v6);
  return *(_QWORD *)(v2 - 80);
}

uint64_t one-time initialization function for synchronousLoadOptions()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v7);
  v1 = v8;
  v2 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2) & 1) != 0)
  {
    if (one-time initialization token for categoriesSupportingResourceSharingBeforeECSCommits != -1)
      swift_once();
    v3 = static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits;
    if (*(_QWORD *)(static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits + 16))
    {
      Hasher.init(_seed:)();
      String.hash(into:)();
      v4 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v3 + 32));
      if (((*(_QWORD *)(v3 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
        __asm { BR              X9 }
    }
    v5 = 0;
  }
  else
  {
    v5 = 2;
  }
  static Entity.synchronousLoadOptions = v5;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

_BYTE *Entity.__AsyncLoadOptions.init(resourceSharingScheduling:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t one-time initialization function for asynchronousLoadOptions()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v5);
  v1 = v6;
  v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2) & 1) != 0)
    v3 = 0;
  else
    v3 = 2;
  static Entity.asynchronousLoadOptions = v3;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t static Entity.load(named:in:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t Trace;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int v27;
  char v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  Swift::String v36;
  id v37;
  void *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *boxed_opaque_existential_1;
  void (*v47)(uint64_t *, uint64_t, uint64_t);
  uint64_t v48;
  char v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  _QWORD *v54;
  Swift::String v55;
  id v56;
  void *v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD v98[3];
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[32];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;

  v95 = a1;
  v96 = a2;
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v88 = (uint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v86 = (uint64_t)&v85 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v94 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v89 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Entity.LoadStatistics();
  v17 = swift_allocObject();
  Date.init()();
  v18 = v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(_QWORD *)v18 = 0;
  v87 = (_QWORD *)v18;
  *(_BYTE *)(v18 + 8) = 2;
  *(_QWORD *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  v90 = v17;
  v19 = (_QWORD *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *v19 = 0xD000000000000016;
  v19[1] = 0x800000021BE903D0;
  v20 = v11;
  if (a3)
    v115 = a3;
  else
    v115 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v21 = a3;
  v22 = specialized static __ServiceLocator.shared.getter();
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 168) + 32);
  swift_beginAccess();
  v24 = *(_QWORD *)(v22 + 24);
  swift_unownedRetainStrong();
  v25 = *(void **)(v24 + 32);
  v97 = v22;
  swift_retain();
  v91 = v23;
  swift_retain();
  v26 = v25;
  swift_release();
  *v16 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BEE5610], v13);
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v24 & 1) != 0)
  {
    v14 = v20;
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  v27 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  v28 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  inited = swift_initStackObject();
  swift_weakInit();
  v30 = v95;
  v31 = v96;
  *(_QWORD *)(inited + 16) = v95;
  *(_QWORD *)(inited + 24) = v31;
  *(_BYTE *)(inited + 32) = v27;
  *(_BYTE *)(inited + 33) = v28;
  *(_WORD *)(inited + 34) = 1;
  v93 = inited;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  type metadata accessor for LoadUtilities();
  v32 = one-time initialization token for usdExtensions;
  swift_bridgeObjectRetain();
  v33 = v94;
  v34 = v115;
  if (v32 != -1)
    swift_once();
  static LoadUtilities.getURL(name:in:allowingExtensions:)(v30, v31, v34, (_QWORD *)static LoadUtilities.usdExtensions, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v10, 1, v14) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
    v35 = *(_QWORD *)(*(_QWORD *)(v97 + 168) + 24);
    v106 = 0;
    *(_QWORD *)&v107 = 0xE000000000000000;
    v94 = v35;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v106 = v30;
    *(_QWORD *)&v107 = v31;
    v36._countAndFlagsBits = 0x7562206D6F726620;
    v36._object = (void *)0xED000020656C646ELL;
    String.append(_:)(v36);
    v115 = v34;
    v37 = objc_msgSend(v34, sel_bundleIdentifier);
    if (v37)
    {
      v38 = v37;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v40;

    }
    else
    {
      v41 = (void *)0x800000021BE903B0;
      v39 = 0xD000000000000010;
    }
    v62._countAndFlagsBits = v39;
    v62._object = v41;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63 = v88;
    v30 = v94;
    LoadTracer.beginLoad(loadType:logMsgTarget:)(1, v106, v107, v88);
    swift_bridgeObjectRelease();
    memset(v111, 0, 25);
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v107 = 0u;
    v111[25] = 1;
    v113 = 0;
    v112 = 0;
    LOBYTE(v106) = 2;
    v111[27] = v27 != 2;
    v111[26] = (v27 & 0xFE) != 2;
    v114 = v90;
    swift_retain();
    v64 = v115;
    v65 = v92;
    __SceneResourceCache.findSceneResource(named:bundle:options:)(v95, v96, v115, (uint64_t)&v106, (uint64_t)&v101);
    if (v65)
    {
      outlined destroy of __RKEntityActionSpecification(v63, type metadata accessor for LoadTrace);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

    }
    else
    {
      if (v102)
      {
        outlined init with take of BindableDataInternal(&v101, (uint64_t)&v103);
        outlined init with copy of __REAssetService((uint64_t)&v103, (uint64_t)&v101);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
        swift_dynamicCast();
        v66 = v99;
        v67 = v100;
        __swift_project_boxed_opaque_existential_1(v98, v99);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v66, v67);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
        v79 = v104;
        v80 = v105;
        __swift_project_boxed_opaque_existential_1(&v103, v104);
        v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 16))(v79, v80);
        v82 = v88;
        *(_BYTE *)(v88 + 16) = v81 & 1;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        v83 = swift_retain();
        specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)(v83);
        static Entity.loadReferences(root:)(v30);
        LoadTracer.endLoad(of:with:)(v30, v82);
        Entity.LoadStatistics.log()();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of __RKEntityActionSpecification(v82, type metadata accessor for LoadTrace);
        outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v106);
        return v30;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)&v101, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      swift_allocError();
      v71 = v96;
      *v72 = v95;
      v72[1] = v71;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of __RKEntityActionSpecification(v88, type metadata accessor for LoadTrace);
    }
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v106);
  }
  else
  {
    v42 = (uint64_t)v89;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v89, v10, v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v43 = swift_initStackObject();
    *(_OWORD *)(v43 + 16) = xmmword_21BE50910;
    v44 = v14;
    v45 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v43 + 32) = 1701869940;
    *(_QWORD *)(v43 + 40) = 0xE400000000000000;
    strcpy((char *)(v43 + 48), "LoadFromBundle");
    *(_BYTE *)(v43 + 63) = -18;
    *(_QWORD *)(v43 + 72) = v45;
    *(_QWORD *)(v43 + 80) = 0x73746E65746E6F63;
    *(_QWORD *)(v43 + 88) = 0xEA0000000000664FLL;
    *(_QWORD *)(v43 + 120) = v44;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v43 + 96));
    v47 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v33 + 16);
    v88 = v44;
    v47(boxed_opaque_existential_1, v42, v44);
    *(_QWORD *)(v43 + 128) = 0x64656D616ELL;
    *(_QWORD *)(v43 + 136) = 0xE500000000000000;
    *(_QWORD *)(v43 + 144) = v30;
    *(_QWORD *)(v43 + 152) = v31;
    *(_QWORD *)(v43 + 168) = v45;
    *(_QWORD *)(v43 + 176) = 0x656C646E7562;
    *(_QWORD *)(v43 + 184) = 0xE600000000000000;
    v48 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
    *(_QWORD *)(v43 + 192) = v34;
    *(_QWORD *)(v43 + 216) = v48;
    *(_QWORD *)(v43 + 224) = 0xD000000000000015;
    *(_QWORD *)(v43 + 232) = 0x800000021BE903F0;
    v49 = static RKARSystemCore.generateDecimatedMeshes;
    *(_QWORD *)(v43 + 264) = MEMORY[0x24BEE1328];
    *(_BYTE *)(v43 + 240) = v49;
    swift_bridgeObjectRetain();
    v50 = v34;
    v51 = specialized Dictionary.init(dictionaryLiteral:)(v43);
    v52 = v97 + 176;
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v52, (uint64_t)&v103, &demangling cache variable for type metadata for USDImportService?);
    if (v104)
    {
      outlined init with take of BindableDataInternal(&v103, (uint64_t)&v106);
      v53 = v108;
      __swift_project_boxed_opaque_existential_1(&v106, v108);
      if (((*(uint64_t (**)(uint64_t, uint64_t, id, _QWORD, _QWORD))(*((_QWORD *)&v53 + 1) + 16))(v30, v31, v50, v53, *((_QWORD *)&v53 + 1)) & 1) != 0)
      {
        v54 = v87;
        *v87 = 1;
        *((_BYTE *)v54 + 8) = 0;
        *(_QWORD *)&v103 = 0;
        *((_QWORD *)&v103 + 1) = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v103 = v30;
        *((_QWORD *)&v103 + 1) = v31;
        v55._countAndFlagsBits = 0x7562206D6F726620;
        v55._object = (void *)0xED000020656C646ELL;
        String.append(_:)(v55);
        v115 = v50;
        v56 = objc_msgSend(v50, sel_bundleIdentifier);
        if (v56)
        {
          v57 = v56;
          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v60 = v59;

          v61 = v86;
        }
        else
        {
          v60 = (void *)0x800000021BE903B0;
          v61 = v86;
          v58 = 0xD000000000000010;
        }
        v73._countAndFlagsBits = v58;
        v73._object = v60;
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        LoadTracer.beginLoad(loadType:logMsgTarget:)(1, v103, *((uint64_t *)&v103 + 1), v61);
        swift_bridgeObjectRelease();
        v74 = *((_QWORD *)&v108 + 1);
        v30 = v108;
        __swift_project_boxed_opaque_existential_1(&v106, v108);
        v75 = v92;
        v76 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v74 + 32))(v51, v30, v74);
        if (v75)
        {
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          outlined destroy of __RKEntityActionSpecification(v61, type metadata accessor for LoadTrace);
          (*(void (**)(char *, uint64_t))(v94 + 8))(v89, v88);
        }
        else
        {
          v30 = v76;
          swift_bridgeObjectRelease();
          specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)(v30);
          specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v30, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
          v77 = v89;
          v84 = v86;
          LoadTracer.endLoad(of:with:)(v30, v86);
          Entity.LoadStatistics.log()();
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of __RKEntityActionSpecification(v84, type metadata accessor for LoadTrace);
          (*(void (**)(char *, uint64_t))(v94 + 8))(v77, v88);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
        return v30;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
      v42 = (uint64_t)v89;
      v33 = v94;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v103, &demangling cache variable for type metadata for USDImportService?);
    }
    v68 = v87;
    *v87 = 0;
    *((_BYTE *)v68 + 8) = 0;
    Entity.LoadStatistics.log()();
    v69 = v92;
    v70 = static Entity.load(contentsOf:withName:)(v42, 0, 0);
    if (!v69)
      v30 = v70;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v42, v88);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

  }
  return v30;
}

BOOL Entity.__AsyncLoadOptions.loadOnResourceSharingClients.getter()
{
  unsigned __int8 *v0;

  return *v0 != 2;
}

BOOL Entity.__AsyncLoadOptions.waitForResourceSharingClients.getter()
{
  _BYTE *v0;

  return (*v0 & 0xFE) != 2;
}

uint64_t static Entity.loadReferences(root:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[40];
  unint64_t v11;

  v2 = static Entity.enumerateReferences(root:)(a1);
  if (v2 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      v11 = v2 & 0xC000000000000001;
      v4 = 4;
      do
      {
        v5 = v4 - 4;
        if (v11)
        {
          v6 = MEMORY[0x220769770](v4 - 4, v2);
          v7 = v4 - 3;
          if (__OFADD__(v5, 1))
            goto LABEL_16;
        }
        else
        {
          v6 = *(_QWORD *)(v2 + 8 * v4);
          swift_retain();
          v7 = v4 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        swift_retain();
        if (REEntityGetComponent())
        {
          ReferenceComponent.init(from:)((uint64_t)v10);
          swift_release();
          v8 = v10[33];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v8 & 1) == 0)
          {
            static ReferenceComponent.loadReference(at:)(v6);
            if (v1)
            {
              swift_release();
              return swift_bridgeObjectRelease();
            }
          }
        }
        else
        {
          swift_release();
        }
        swift_release();
        ++v4;
      }
      while (v7 != v3);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t static Entity.load(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[3];
  __int128 v20;

  type metadata accessor for Entity.LoadStatistics();
  v7 = swift_allocObject();
  Date.init()();
  v8 = v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 2;
  *(_QWORD *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  v9 = (_QWORD *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *v9 = 0xD000000000000021;
  v9[1] = 0x800000021BE90410;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  LOWORD(v16) = 512;
  *((_QWORD *)&v16 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v17, (uint64_t)&v13);
  *((_QWORD *)&v15 + 1) = 0;
  v19[0] = v13;
  v19[1] = v14;
  v19[2] = (unint64_t)v15;
  v20 = v16;
  swift_retain();
  swift_release();
  *((_QWORD *)&v20 + 1) = v7;
  v10 = specialized static Entity.__load(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v19);
  v11 = v10;
  if (!v3)
  {
    static Entity.loadReferences(root:)(v10);
    Entity.LoadStatistics.log()();
  }
  swift_release();
  outlined destroy of Entity.__LoadOptions((uint64_t)v19);
  return v11;
}

uint64_t static Entity.loadAsync(named:in:)(void *a1, uint64_t a2, void *a3)
{
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[3];
  __int128 v16;

  swift_beginAccess();
  v6 = static RKARSystemCore.generateDecimatedMeshes;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LOWORD(v12) = 512;
  *((_QWORD *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((_QWORD *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  v7 = static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15, (unsigned __int8 *)&v9);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t static Entity.__loadAsync(named:in:generateDecimatedMesh:)(void *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  LOWORD(v13) = 512;
  *((_QWORD *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((_QWORD *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  v8 = static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16, (unsigned __int8 *)&v10);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t Entity.__LoadOptions.init(downsamplingStrategy:realityPerformanceReport:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_WORD *)(a3 + 48) = 512;
  *(_QWORD *)(a3 + 56) = 0;
  result = outlined assign with take of __DownsamplingStrategy?(a1, a3);
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

Swift::Void __swiftcall __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(Swift::String_optional resourceName, Swift::Bool mergeEntities, Swift::Bool generateDecimatedMesh, Swift::Bool_optional reorderVertexCaching)
{
  int value;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v7;
  Swift::String v8;

  value = reorderVertexCaching.value;
  if (resourceName.value._object)
  {
    object = resourceName.value._object;
    countAndFlagsBits = resourceName.value._countAndFlagsBits;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = countAndFlagsBits;
    v7._object = object;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000013;
    v8._object = (void *)0x800000021BE90CC0;
    String.append(_:)(v8);
    String.utf8CString.getter();
    RESceneImportOperationSetRootSceneAssetPath();
    swift_bridgeObjectRelease();
    swift_release();
  }
  RESceneImportOperationSetMergeIntoSingleEntity();
  RESceneImportOperationSetGenerateDecimatedMesh();
  if (value != 2)
    RESceneImportOperationSetVertexCacheOptimize();
  RESceneImportOperationSetUnitType();
}

uint64_t doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _OWORD v46[4];

  v35 = a4;
  v43 = a3;
  v37 = a14;
  v36 = a12;
  v34 = a10;
  v39 = type metadata accessor for DispatchWorkItemFlags();
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v38 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS();
  v40 = *(_QWORD *)(v21 - 8);
  v41 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Entity.__LoadOptions(a5, (uint64_t)v46);
  v24 = swift_allocObject();
  v25 = v46[1];
  *(_OWORD *)(v24 + 24) = v46[0];
  *(_OWORD *)(v24 + 40) = v25;
  v26 = v46[3];
  *(_OWORD *)(v24 + 56) = v46[2];
  *(_BYTE *)(v24 + 16) = v35;
  *(_OWORD *)(v24 + 72) = v26;
  *(_QWORD *)(v24 + 88) = a6;
  *(_QWORD *)(v24 + 96) = a7;
  *(_QWORD *)(v24 + 104) = a8;
  *(_QWORD *)(v24 + 112) = a9;
  *(_QWORD *)(v24 + 120) = a1;
  *(_QWORD *)(v24 + 128) = a2;
  *(_QWORD *)(v24 + 136) = v34;
  *(_QWORD *)(v24 + 144) = a11;
  v27 = v36;
  *(_QWORD *)(v24 + 152) = v36;
  *(_QWORD *)(v24 + 160) = a13;
  *(_QWORD *)(v24 + 168) = v37;
  aBlock[4] = partial apply for closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_514;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = v27;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v44 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v32 = v38;
  v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v23, v32, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v41);
  return swift_release();
}

uint64_t closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  uint64_t (*v68)();
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74[4];
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  uint64_t aBlock;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[32];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v55 = a7;
  v56 = a8;
  v54 = a6;
  v57 = a4;
  v17 = a1;
  v62 = type metadata accessor for DispatchWorkItemFlags();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v58 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for DispatchQoS();
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LoadTrace(0);
  v21 = swift_projectBox();
  memset(v83, 0, 25);
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v83[25] = 1;
  v84 = 0;
  v85 = 0;
  LOBYTE(aBlock) = 1;
  v83[26] = (a1 & 0xFE) != 2;
  v83[27] = v17 != 2;
  v86 = *(_QWORD *)(a2 + 56);
  swift_retain();
  outlined assign with copy of __DownsamplingStrategy?(a2, (uint64_t)&v80 + 8);
  if (a3)
  {
    v22 = *(_QWORD *)(a2 + 56);
    if (v22)
    {
      v23 = v22 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(_QWORD *)v23 = 0;
      *(_BYTE *)(v23 + 8) = 0;
    }
    swift_retain();
    __SceneImportOperation.run()();
    if (v24)
    {
      v25 = v24;
      swift_release();
LABEL_7:
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
      v26 = (_QWORD *)swift_allocObject();
      v27 = v56;
      v26[2] = v55;
      v26[3] = v27;
      v26[4] = v25;
      *((_QWORD *)&v80 + 1) = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
      *(_QWORD *)&v81 = v26;
      aBlock = MEMORY[0x24BDAC760];
      *(_QWORD *)&v79 = 1107296256;
      *((_QWORD *)&v79 + 1) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(_QWORD *)&v80 = &block_descriptor_520;
      v28 = _Block_copy(&aBlock);
      swift_retain();
      v29 = v25;
      static DispatchQoS.unspecified.getter();
      *(_QWORD *)&v70 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
      v30 = v58;
      v31 = v62;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2207693A4](0, v20, v30, v28);
      _Block_release(v28);

      (*(void (**)(char *, uint64_t))(v60 + 8))(v30, v31);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v61);
      return swift_release();
    }
    outlined init with copy of Entity.__LoadOptions(a2, (uint64_t)&v70);
    v33 = swift_allocObject();
    v34 = v71;
    *(_OWORD *)(v33 + 40) = v70;
    *(_OWORD *)(v33 + 56) = v34;
    v35 = v73;
    *(_OWORD *)(v33 + 72) = v72;
    *(_QWORD *)(v33 + 16) = a3;
    *(_QWORD *)(v33 + 24) = a5;
    v36 = v55;
    *(_QWORD *)(v33 + 32) = v54;
    *(_OWORD *)(v33 + 88) = v35;
    v37 = v56;
    *(_QWORD *)(v33 + 104) = v36;
    *(_QWORD *)(v33 + 112) = v37;
    v68 = partial apply for closure #1 in doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    v69 = v33;
    v64 = MEMORY[0x24BDAC760];
    v65 = 1107296256;
    v66 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v67 = &block_descriptor_532;
    v38 = _Block_copy(&v64);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v75[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v39 = v58;
    v40 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v20, v39, v38);
    _Block_release(v38);
    swift_release();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v61);
    swift_release();
  }
  else
  {
    __SceneResourceCache.findSceneResource(named:bundle:options:)(a9, a10, a11, (uint64_t)&aBlock, (uint64_t)&v70);
    if (!*((_QWORD *)&v71 + 1))
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v70, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      v25 = (void *)swift_allocError();
      *v52 = a9;
      v52[1] = a10;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      goto LABEL_7;
    }
    outlined init with take of BindableDataInternal(&v70, (uint64_t)v75);
    v41 = v76;
    v42 = v77;
    __swift_project_boxed_opaque_existential_1(v75, v76);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
    swift_beginAccess();
    *(_BYTE *)(v21 + 16) = v43 & 1;
    outlined init with copy of __REAssetService((uint64_t)v75, (uint64_t)v74);
    outlined init with copy of Entity.__LoadOptions(a2, (uint64_t)&v70);
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = a13;
    outlined init with take of BindableDataInternal(v74, v44 + 24);
    v45 = v71;
    *(_OWORD *)(v44 + 72) = v70;
    *(_OWORD *)(v44 + 88) = v45;
    v46 = v73;
    *(_OWORD *)(v44 + 104) = v72;
    v47 = v55;
    *(_QWORD *)(v44 + 64) = v54;
    *(_OWORD *)(v44 + 120) = v46;
    v48 = v56;
    *(_QWORD *)(v44 + 136) = v47;
    *(_QWORD *)(v44 + 144) = v48;
    v68 = partial apply for closure #1 in doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    v69 = v44;
    v64 = MEMORY[0x24BDAC760];
    v65 = 1107296256;
    v66 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v67 = &block_descriptor_526;
    v49 = _Block_copy(&v64);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v63 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v50 = v58;
    v51 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v20, v50, v49);
    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v61);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  }
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
}

BOOL *SceneResourceLoadResult.makeEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL *v4;
  void *v5;
  _QWORD v7[3];

  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  v4 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v7, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7[0] = v2;
    v7[1] = v3;
    swift_bridgeObjectRetain_n();
    v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
  }
  return v4;
}

uint64_t closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v32[4];

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50910;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v18 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000013;
  *(_QWORD *)(inited + 56) = 0x800000021BE90C20;
  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = 0x64656D616ELL;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = a3;
  *(_QWORD *)(inited + 104) = a4;
  *(_QWORD *)(inited + 120) = v18;
  *(_QWORD *)(inited + 128) = 0x656C646E7562;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  v19 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(_QWORD *)(inited + 144) = a5;
  *(_QWORD *)(inited + 168) = v19;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  v20 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = a6;
  *(_QWORD *)(inited + 216) = v20;
  *(_QWORD *)(inited + 224) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 232) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(a9, (uint64_t)v32);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a7;
  *(_QWORD *)(v21 + 24) = a8;
  v22 = v32[1];
  *(_OWORD *)(v21 + 32) = v32[0];
  *(_OWORD *)(v21 + 48) = v22;
  v23 = v32[3];
  *(_OWORD *)(v21 + 64) = v32[2];
  *(_OWORD *)(v21 + 80) = v23;
  *(_QWORD *)(v21 + 96) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v21 + 104) = v16;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:);
  *(_QWORD *)(v24 + 24) = v21;
  *(_QWORD *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 248) = v24;
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = a5;
  swift_retain();
  v26 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v27 = a10[3];
  v28 = a10[4];
  __swift_project_boxed_opaque_existential_1(a10, v27);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 40))(v26, v27, v28);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7)
{
  _BYTE v12[64];

  if ((a2 & 1) != 0)
    return a6(a1, 1);
  outlined copy of Result<ModelEntity, Error>(a1, 0);
  specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)((uint64_t)a1);
  outlined init with copy of Entity.__LoadOptions(a5, (uint64_t)v12);
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)((uint64_t)a1, (uint64_t)v12, (void (*)(uint64_t, _QWORD))a6, a7, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21;

  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  swift_retain();
  doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> (), v21, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return swift_release();
}

uint64_t static Entity.__load(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return specialized static Entity.__load(contentsOf:withName:loadOptions:)(a1, a2, a3, a4);
}

uint64_t Entity.__LoadOptions.downsamplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of (Int, URL)(v1, a1, &demangling cache variable for type metadata for __DownsamplingStrategy?);
}

uint64_t Entity.__LoadOptions.downsamplingStrategy.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of __DownsamplingStrategy?(a1, v1);
}

uint64_t (*Entity.__LoadOptions.downsamplingStrategy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__LoadOptions.realityPerformanceReport.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t Entity.__LoadOptions.realityPerformanceReport.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*Entity.__LoadOptions.realityPerformanceReport.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__LoadOptions.generateDecimatedMesh.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Entity.__LoadOptions.generateDecimatedMesh.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*Entity.__LoadOptions.generateDecimatedMesh.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__AsyncLoadOptions.loadOnResourceSharingClients.setter(uint64_t result)
{
  char *v1;
  int v2;
  char v3;

  v2 = *v1;
  if ((result & 1) != 0)
  {
    if (v2 != 2)
      return result;
    v3 = 3;
  }
  else
  {
    if (v2 == 2)
      return result;
    v3 = 2;
  }
  *v1 = v3;
  return result;
}

unsigned __int8 **(*Entity.__AsyncLoadOptions.loadOnResourceSharingClients.modify(uint64_t a1))(unsigned __int8 **result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1 != 2;
  return Entity.__AsyncLoadOptions.loadOnResourceSharingClients.modify;
}

unsigned __int8 **Entity.__AsyncLoadOptions.loadOnResourceSharingClients.modify(unsigned __int8 **result)
{
  _BYTE *v1;
  int v2;

  v1 = *result;
  v2 = **result;
  if (*((_BYTE *)result + 8))
  {
    if (v2 == 2)
      *v1 = 3;
  }
  else if (v2 != 2)
  {
    *v1 = 2;
  }
  return result;
}

uint64_t Entity.__AsyncLoadOptions.waitForResourceSharingClients.setter(uint64_t result)
{
  char *v1;
  int v2;
  char v3;

  v2 = *v1 & 0xFE;
  if ((result & 1) != 0)
  {
    if (v2 != 2)
      return result;
    v3 = 0;
  }
  else
  {
    if (v2 == 2)
      return result;
    v3 = 3;
  }
  *v1 = v3;
  return result;
}

uint64_t (*Entity.__AsyncLoadOptions.waitForResourceSharingClients.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*v1 & 0xFE) != 2;
  return Entity.__AsyncLoadOptions.waitForResourceSharingClients.modify;
}

uint64_t Entity.__AsyncLoadOptions.waitForResourceSharingClients.modify(uint64_t result)
{
  _BYTE *v1;
  int v2;

  v1 = *(_BYTE **)result;
  v2 = **(_BYTE **)result & 0xFE;
  if (*(_BYTE *)(result + 8))
  {
    if (v2 == 2)
      *v1 = 0;
  }
  else if (v2 != 2)
  {
    *v1 = 3;
  }
  return result;
}

void Entity.__AsyncLoadOptions.resourceSharingScheduling.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Entity.__AsyncLoadOptions.resourceSharingScheduling.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Entity.__AsyncLoadOptions.resourceSharingScheduling.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__AsyncLoadOptions.init(loadOnResourceSharingClients:waitForResourceSharingClients:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char *a3@<X8>)
{
  char v3;
  _QWORD *v4;

  if ((a2 & 1) != 0)
  {
    if ((result & 1) != 0)
    {
      *a3 = 0;
    }
    else
    {
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      swift_allocError();
      *v4 = 0xD0000000000000ABLL;
      v4[1] = 0x800000021BE90440;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
  }
  else
  {
    if ((result & 1) != 0)
      v3 = 3;
    else
      v3 = 2;
    *a3 = v3;
  }
  return result;
}

uint64_t Entity.__AsyncLoadOptions.init(preloadAndWaitForResourceSharingClients:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if ((result & 1) != 0)
    v2 = 0;
  else
    v2 = 2;
  *a2 = v2;
  return result;
}

uint64_t static Entity.__load(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[4];

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  LOWORD(v13) = 512;
  *((_QWORD *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((_QWORD *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  v16[3] = v13;
  outlined assign with copy of __DownsamplingStrategy?(a4, (uint64_t)v16);
  v8 = specialized static Entity.__load(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t static Entity.forceRetrieveGenerateDecimatedMeshes.getter()
{
  swift_beginAccess();
  return static Entity.forceRetrieveGenerateDecimatedMeshes;
}

uint64_t static Entity.forceRetrieveGenerateDecimatedMeshes.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static Entity.forceRetrieveGenerateDecimatedMeshes = a1;
  return result;
}

uint64_t (*static Entity.forceRetrieveGenerateDecimatedMeshes.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t static Entity.loadAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[3];
  __int128 v16;

  swift_beginAccess();
  v6 = static RKARSystemCore.generateDecimatedMeshes;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LOWORD(v12) = 512;
  *((_QWORD *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((_QWORD *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  v7 = static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15, (unsigned __int8 *)&v9);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t static Entity.__loadAsync(contentsOf:withName:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  LOWORD(v13) = 512;
  *((_QWORD *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((_QWORD *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  v8 = static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16, (unsigned __int8 *)&v10);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Information;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  id v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD v42[2];
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD aBlock[6];
  _OWORD v59[4];

  v48 = a7;
  v44 = a5;
  v42[0] = a4;
  v43 = a3;
  v42[1] = a2;
  v56 = a13;
  v49 = a12;
  v47 = a11;
  v46 = a10;
  v45 = a9;
  v52 = type metadata accessor for DispatchWorkItemFlags();
  v55 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v51 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v53 = *(_QWORD *)(v19 - 8);
  v54 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v50 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  v22 = *(_QWORD *)(Information - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](Information);
  v24 = (char *)v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = a2;
  outlined init with copy of Entity.__LoadOptions(a6, (uint64_t)v59);
  outlined init with copy of __RKEntityActionSpecification(a8, (uint64_t)v24, type metadata accessor for RealityFileLoadInformation);
  v26 = (*(unsigned __int8 *)(v22 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v27 = (v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v43;
  *(_QWORD *)(v31 + 24) = a4;
  *(_BYTE *)(v31 + 32) = v44;
  v32 = v59[1];
  *(_OWORD *)(v31 + 40) = v59[0];
  *(_OWORD *)(v31 + 56) = v32;
  v33 = v59[3];
  *(_OWORD *)(v31 + 72) = v59[2];
  *(_OWORD *)(v31 + 88) = v33;
  *(_QWORD *)(v31 + 104) = v48;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v24, v31 + v26, type metadata accessor for RealityFileLoadInformation);
  *(_QWORD *)(v31 + v27) = v45;
  v34 = v46;
  *(_QWORD *)(v31 + v28) = v46;
  *(_QWORD *)(v31 + v29) = v47;
  *(_QWORD *)(v31 + v30) = v49;
  v35 = (_QWORD *)(v31 + ((v30 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v35 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v35[1] = v25;
  aBlock[4] = partial apply for doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_430;
  v36 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v37 = v34;
  swift_retain();
  swift_retain();
  v38 = v50;
  static DispatchQoS.unspecified.getter();
  v57 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v40 = v51;
  v39 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v38, v40, v36);
  _Block_release(v36);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v39);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v54);
  return swift_release();
}

uint64_t doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Information;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[6];
  _OWORD v45[4];
  __int128 v46[4];
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t aBlock;
  __int128 v51;
  _QWORD v52[9];
  __int16 v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v41 = a8;
  v33 = a5;
  v35 = a12;
  v34 = a11;
  v17 = a3;
  v42 = type metadata accessor for DispatchWorkItemFlags();
  v39 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v38 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchQoS();
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v36 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LoadTrace(0);
  v20 = swift_projectBox();
  v53 = 256;
  v51 = 0u;
  memset(v52, 0, 56);
  v56 = 0;
  v57 = 0;
  LOBYTE(aBlock) = 1;
  v52[7] = a1;
  v52[8] = a2;
  v55 = v17 != 2;
  v54 = (a3 & 0xFE) != 2;
  v58 = *(_QWORD *)(a4 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined assign with copy of __DownsamplingStrategy?(a4, (uint64_t)&v52[1]);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)(a6, *(_QWORD *)(a6 + *(int *)(Information + 20)), *(_QWORD *)(a6 + *(int *)(Information + 20) + 8), (uint64_t)&aBlock, v47);
  v22 = v48;
  v23 = v49;
  __swift_project_boxed_opaque_existential_1(v47, v48);
  LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
  swift_beginAccess();
  *(_BYTE *)(v20 + 16) = v17 & 1;
  outlined init with copy of __REAssetService((uint64_t)v47, (uint64_t)v46);
  outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v45);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a9;
  outlined init with take of BindableDataInternal(v46, v24 + 24);
  v25 = v45[1];
  *(_OWORD *)(v24 + 72) = v45[0];
  *(_OWORD *)(v24 + 88) = v25;
  v26 = v45[3];
  *(_OWORD *)(v24 + 104) = v45[2];
  *(_QWORD *)(v24 + 64) = a10;
  *(_OWORD *)(v24 + 120) = v26;
  v27 = v35;
  *(_QWORD *)(v24 + 136) = v34;
  *(_QWORD *)(v24 + 144) = v27;
  v44[4] = partial apply for closure #1 in doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  v44[5] = v24;
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 1107296256;
  v44[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v44[3] = &block_descriptor_442;
  v28 = _Block_copy(v44);
  swift_retain();
  swift_retain();
  v29 = v36;
  static DispatchQoS.unspecified.getter();
  v43 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v30 = v38;
  v31 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v29, v30, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v40);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
}

uint64_t closure #2 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[72];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  outlined init with copy of __REAssetService(a2, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
  swift_dynamicCast();
  v9 = v15;
  v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v13);
  specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)(v11, (uint64_t)v13, a5, a6, (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  swift_release();
  return outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[6];
  __int128 v63[2];
  _OWORD v64[4];

  v50 = a8;
  v60 = a7;
  v51 = a6;
  v49 = a4;
  v48 = a3;
  v53 = a2;
  v52 = a1;
  v46 = a10;
  v45 = a9;
  v47 = a11;
  v56 = type metadata accessor for DispatchWorkItemFlags();
  v59 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchQoS();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v54 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  v44 = v16;
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v17 + 16))(v20, a5, v19);
  outlined init with copy of Entity.__LoadOptions(a12, (uint64_t)v64);
  outlined init with copy of __REAssetService(a13, (uint64_t)v63);
  v21 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v42 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 71) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v28 + v21, v20, v44);
  v29 = v28 + v42;
  v30 = v45;
  *(_QWORD *)v29 = v50;
  *(_QWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 16) = v46;
  *(_QWORD *)(v28 + v22) = v48;
  *(_QWORD *)(v28 + v23) = v49;
  *(_QWORD *)(v28 + v24) = v51;
  *(_QWORD *)(v28 + v25) = v47;
  v31 = (_OWORD *)(v28 + v26);
  v32 = v64[1];
  *v31 = v64[0];
  v31[1] = v32;
  v33 = v64[3];
  v31[2] = v64[2];
  v31[3] = v33;
  v34 = (_QWORD *)(v28 + v27);
  v35 = v28 + v43;
  v36 = v53;
  *v34 = v52;
  v34[1] = v36;
  outlined init with take of BindableDataInternal(v63, v35);
  aBlock[4] = partial apply for closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_452;
  v37 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v38 = v54;
  static DispatchQoS.unspecified.getter();
  v61 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v39 = v55;
  v40 = v56;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v38, v39, v37);
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v58);
  return swift_release();
}

uint64_t postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v47 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v40 - v16;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v19 & 1) == 0)
    goto LABEL_25;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)v50);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_25;
  v45 = v4;
  v46 = a3;
  if (v48 == 0x64616F4C74736F50 && v49 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
LABEL_25:
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x797469746E65, 0xE600000000000000);
  if ((v22 & 1) == 0)
    goto LABEL_25;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)v50);
  type metadata accessor for Entity();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_25;
  v23 = v48;
  if (!*(_QWORD *)(a1 + 16)
    || (v24 = specialized __RawDictionaryStorage.find<A>(_:)(0x646574726F706D69, 0xEE0073656E656353), (v25 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v24, (uint64_t)v50),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_release();
    goto LABEL_25;
  }
  v40 = v23;
  v26 = v48;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)v50);
  v27 = v51;
  v28 = v52;
  __swift_project_boxed_opaque_existential_1(v50, v51);
  __REAssetService.asManager.getter(v27, v28);
  v29 = v26;
  v43 = *(_QWORD *)(v30 + 88);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  v42 = *(_QWORD *)(v26 + 16);
  if (v42)
  {
    swift_bridgeObjectRetain();
    v31 = 0;
    v44 = MEMORY[0x24BEE4AF8];
    v32 = v45;
    v41 = v26;
    do
    {
      v53 = *(_QWORD *)(v29 + 8 * v31 + 32);
      closure #1 in postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(&v53, (uint64_t)v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      }
      else
      {
        outlined init with take of __RKEntityActionSpecification((uint64_t)v10, (uint64_t)v17, type metadata accessor for __SceneImportOperation.ImportedScene);
        outlined init with take of __RKEntityActionSpecification((uint64_t)v17, (uint64_t)v14, type metadata accessor for __SceneImportOperation.ImportedScene);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
        v33 = v44;
        v35 = *(_QWORD *)(v44 + 16);
        v34 = *(_QWORD *)(v44 + 24);
        if (v35 >= v34 >> 1)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v44);
        *(_QWORD *)(v33 + 16) = v35 + 1;
        v36 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
        v44 = v33;
        outlined init with take of __RKEntityActionSpecification((uint64_t)v14, v33 + v36 + *(_QWORD *)(v12 + 72) * v35, type metadata accessor for __SceneImportOperation.ImportedScene);
        v29 = v41;
      }
      ++v31;
    }
    while (v42 != v31);
    swift_bridgeObjectRelease();
    v38 = v44;
  }
  else
  {
    v38 = MEMORY[0x24BEE4AF8];
    v32 = v45;
  }
  swift_bridgeObjectRelease();
  __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v38, (uint64_t)v50);
  swift_bridgeObjectRelease();
  if (v32)
    return swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)(v40);
  v39 = swift_retain();
  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(v39);
  return swift_release_n();
}

uint64_t closure #1 in postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  uint64_t AssetHandle;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];

  v3 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
    goto LABEL_20;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_20;
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)v21);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_20;
  if (v19 == 0xD000000000000010 && v20 == 0x800000021BE90C00)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
      goto LABEL_20;
  }
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x737341656E656373, 0xEE00656D614E7465);
    if ((v8 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v7, (uint64_t)v21);
      if ((swift_dynamicCast() & 1) != 0)
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        AssetHandle = REAssetManagerCreateAssetHandle();
        swift_release();
        if (AssetHandle)
        {
          if (*(_QWORD *)(v3 + 16))
          {
            v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D614E656E656373, 0xE900000000000065);
            if ((v11 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v21);
              if ((swift_dynamicCast() & 1) != 0)
              {
                if (*(_QWORD *)(v3 + 16))
                {
                  v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x657669746361, 0xE600000000000000);
                  if ((v13 & 1) != 0)
                  {
                    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v12, (uint64_t)v21);
                    if ((swift_dynamicCast() & 1) != 0)
                    {
                      type metadata accessor for __REAsset();
                      v14 = swift_allocObject();
                      *(_QWORD *)(v14 + 16) = AssetHandle;
                      UUID.init()();
                      v15 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
                      v16 = (_QWORD *)(a2 + v15[5]);
                      *v16 = v19;
                      v16[1] = v20;
                      *(_QWORD *)(a2 + v15[6]) = v14;
                      *(_BYTE *)(a2 + v15[7]) = v19;
                      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v15 - 1) + 56))(a2, 0, 1, v15);
                    }
                  }
                }
                swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
    }
  }
LABEL_20:
  v18 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
}

uint64_t closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  void (*v20)(uint64_t *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(unint64_t, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _OWORD v52[24];

  v50 = a8;
  v47 = a3;
  v48 = a7;
  v46 = a6;
  v44 = a5;
  v42 = a4;
  v41 = a2;
  v43 = a11;
  v51 = a12;
  v45 = a10;
  v49 = a9;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE77AE0;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v18 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000010;
  *(_QWORD *)(inited + 56) = 0x800000021BE90BE0;
  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(inited + 88) = 0xEA0000000000664FLL;
  *(_QWORD *)(inited + 120) = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  v20(boxed_opaque_existential_1, a1, v14);
  *(_QWORD *)(inited + 128) = 0x656D614E68746977;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(inited + 144) = v41;
  *(_QWORD *)(inited + 152) = a3;
  *(_QWORD *)(inited + 168) = v21;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  v22 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  *(_BYTE *)(inited + 192) = v42;
  *(_QWORD *)(inited + 216) = v22;
  *(_QWORD *)(inited + 224) = 0x64616F4C74736F70;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  v20((uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0)), a1, v14);
  v23 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v24 = swift_allocObject();
  v25 = v46;
  *(_QWORD *)(v24 + 16) = v44;
  *(_QWORD *)(v24 + 24) = v25;
  v26 = *(void (**)(unint64_t, char *, uint64_t))(v15 + 32);
  v27 = v43;
  v28 = v14;
  v29 = v45;
  v26(v24 + v23, (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
  *(_QWORD *)(v24 + ((v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8)) = v48;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  *(_QWORD *)(v30 + 24) = v24;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@error @owned Error);
  *(_QWORD *)(inited + 248) = v30;
  *(_QWORD *)(inited + 264) = v31;
  *(_QWORD *)(inited + 272) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(v49, (uint64_t)v52);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v50;
  v33 = v52[1];
  *(_OWORD *)(v32 + 24) = v52[0];
  *(_OWORD *)(v32 + 40) = v33;
  v34 = v52[3];
  *(_OWORD *)(v32 + 56) = v52[2];
  *(_OWORD *)(v32 + 72) = v34;
  *(_QWORD *)(v32 + 88) = v29;
  *(_QWORD *)(v32 + 96) = v27;
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = partial apply for closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  *(_QWORD *)(v35 + 24) = v32;
  *(_QWORD *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 296) = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v36 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v37 = v51[3];
  v38 = v51[4];
  __swift_project_boxed_opaque_existential_1(v51, v37);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 40))(v36, v37, v38);
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];
  _OWORD v35[4];

  v32 = a8;
  v28 = a5;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v31 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v29 = *(_QWORD *)(v17 - 8);
  v30 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  outlined init with copy of Entity.__LoadOptions(a7, (uint64_t)v35);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a3;
  *(_QWORD *)(v21 + 24) = a4;
  *(_QWORD *)(v21 + 32) = v28;
  *(_QWORD *)(v21 + 40) = a6;
  v22 = v35[1];
  *(_OWORD *)(v21 + 48) = v35[0];
  *(_OWORD *)(v21 + 64) = v22;
  v23 = v35[3];
  *(_OWORD *)(v21 + 80) = v35[2];
  *(_OWORD *)(v21 + 96) = v23;
  *(_QWORD *)(v21 + 112) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v21 + 120) = v20;
  aBlock[4] = partial apply for doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_474;
  v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v25 = a4;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v19, v16, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v30);
  return swift_release();
}

uint64_t doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[6];
  __int128 aBlock;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v27[1] = a2;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __SceneImportOperation.run()();
  if (v18)
  {
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = a6;
    v19[3] = a7;
    v19[4] = v18;
    *(_QWORD *)&v35 = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    *((_QWORD *)&v35 + 1) = v19;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v34 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v34 + 1) = &block_descriptor_480;
    v20 = _Block_copy(&aBlock);
    swift_retain();
    v21 = v18;
    static DispatchQoS.unspecified.getter();
    v32[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v17, v15, v20);
    _Block_release(v20);

  }
  else
  {
    outlined init with copy of Entity.__LoadOptions(a5, (uint64_t)&aBlock);
    v22 = swift_allocObject();
    v23 = v34;
    *(_OWORD *)(v22 + 40) = aBlock;
    *(_OWORD *)(v22 + 56) = v23;
    v24 = v36;
    *(_OWORD *)(v22 + 72) = v35;
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = a3;
    *(_QWORD *)(v22 + 32) = a4;
    *(_OWORD *)(v22 + 88) = v24;
    *(_QWORD *)(v22 + 104) = a6;
    *(_QWORD *)(v22 + 112) = a7;
    v32[4] = partial apply for closure #1 in doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    v32[5] = v22;
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 1107296256;
    v32[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v32[3] = &block_descriptor_486;
    v25 = _Block_copy(v32);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v31 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v17, v15, v25);
    _Block_release(v25);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v30);
  return swift_release();
}

void closure #1 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  BOOL *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v27 - v14;
  __SceneImportOperation.publishToEngine()();
  if (v16)
  {
    v24 = v16;
    a5((uint64_t)v16, 1);

  }
  else
  {
    v17 = RESceneImportOperationCopySourceURL();
    v27 = a3;
    if (v17)
    {
      v18 = (void *)v17;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v19 = type metadata accessor for URL();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 0, 1, v19);
    }
    else
    {
      v19 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
    }
    outlined init with take of Transform?((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for URL?);
    type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) == 1)
    {
      __break(1u);
    }
    else
    {
      v21 = __SceneImportOperation.importedScenes.getter();
      __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v21, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
      v22 = v29;
      v23 = v30;
      swift_bridgeObjectRetain();
      v25 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v28, 0);
      v28 = v22;
      v29 = v23;
      swift_bridgeObjectRetain_n();
      v26 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      swift_beginAccess();
      objc_setAssociatedObject(v25, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v26, (void *)0x301);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      __SceneResourceCache.Entry.attach(toEntity:)(v25);
      outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)&v28);
      specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)((uint64_t)v25, (uint64_t)&v28, a5, a6, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v28, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    }
  }
}

uint64_t static Entity.loadAnchor(named:in:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t Error;
  char v23;
  uint64_t inited;
  uint64_t v25;
  __int128 v26;
  uint64_t (*v27)(uint64_t, unint64_t, id, _QWORD, _QWORD);
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t *v56;
  void *v57;
  _BYTE v58[12];
  unsigned int v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _BYTE v72[24];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[32];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  id v82;

  v65 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v61 = &v58[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v58[-v9];
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v58[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v64 = v3;
  v60 = v10;
  if (a3)
    v82 = a3;
  else
    v82 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v15 = a3;
  v16 = specialized static __ServiceLocator.shared.getter();
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 168) + 32);
  swift_beginAccess();
  v18 = *(_QWORD *)(v16 + 24);
  swift_unownedRetainStrong();
  v19 = *(void **)(v18 + 32);
  swift_retain();
  v66 = v17;
  swift_retain();
  v20 = v19;
  swift_release();
  *v14 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE5610], v11);
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  v21 = v65;
  if ((v18 & 1) != 0)
  {
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  Error = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  v23 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  inited = swift_initStackObject();
  v25 = inited + 40;
  swift_weakInit();
  *(_QWORD *)(inited + 16) = v21;
  *(_QWORD *)(inited + 24) = a2;
  *(_BYTE *)(inited + 32) = Error;
  *(_BYTE *)(inited + 33) = v23;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 4;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v16 + 176, (uint64_t)&v80, &demangling cache variable for type metadata for USDImportService?);
  if (v81)
  {
    v59 = Error;
    v62 = v16;
    outlined init with take of BindableDataInternal(&v80, (uint64_t)v72);
    v26 = v73;
    __swift_project_boxed_opaque_existential_1(v72, v73);
    v27 = *(uint64_t (**)(uint64_t, unint64_t, id, _QWORD, _QWORD))(*((_QWORD *)&v26 + 1) + 16);
    swift_bridgeObjectRetain();
    v28 = v82;
    if ((v27(v21, a2, v82, v26, *((_QWORD *)&v26 + 1)) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v29 = swift_initStackObject();
      *(_OWORD *)(v29 + 16) = xmmword_21BE57F30;
      *(_QWORD *)(v29 + 32) = 1701869940;
      *(_QWORD *)(v29 + 40) = 0xE400000000000000;
      v30 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v29 + 48) = 0xD000000000000013;
      *(_QWORD *)(v29 + 56) = 0x800000021BE904F0;
      *(_QWORD *)(v29 + 72) = v30;
      *(_QWORD *)(v29 + 80) = 0x64656D616ELL;
      *(_QWORD *)(v29 + 88) = 0xE500000000000000;
      *(_QWORD *)(v29 + 96) = v21;
      *(_QWORD *)(v29 + 104) = a2;
      *(_QWORD *)(v29 + 120) = v30;
      *(_QWORD *)(v29 + 128) = 0x656C646E7562;
      *(_QWORD *)(v29 + 136) = 0xE600000000000000;
      v31 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
      *(_QWORD *)(v29 + 144) = v28;
      *(_QWORD *)(v29 + 168) = v31;
      *(_QWORD *)(v29 + 176) = 0xD000000000000015;
      *(_QWORD *)(v29 + 184) = 0x800000021BE903F0;
      v32 = static RKARSystemCore.generateDecimatedMeshes;
      *(_QWORD *)(v29 + 216) = MEMORY[0x24BEE1328];
      *(_BYTE *)(v29 + 192) = v32;
      swift_bridgeObjectRetain();
      v33 = v28;
      Error = specialized Dictionary.init(dictionaryLiteral:)(v29);
      v34 = v73;
      __swift_project_boxed_opaque_existential_1(v72, v73);
      v35 = v64;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v34 + 1) + 32))(Error, v34, *((_QWORD *)&v34 + 1));
      swift_bridgeObjectRelease();
      if (!v35)
      {
        type metadata accessor for AnchorEntity();
        Error = swift_dynamicCastClassUnconditional();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(Error, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
      }
      swift_release();
      swift_release();
      swift_release();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      return Error;
    }
    v63 = inited;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    v25 = inited + 40;
    Error = v59;
  }
  else
  {
    v63 = inited;
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for USDImportService?);
  }
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = v82;
  v37 = v21;
  v38 = (void *)MEMORY[0x220768C3C](v21, a2);
  swift_bridgeObjectRelease();
  v39 = RESceneImportOperationCreateWithBundleResource();

  if (!v39)
  {

    swift_release();
    memset(v76, 0, 25);
    v75 = 0u;
    v74 = 0u;
    v73 = 0u;
    *(_OWORD *)&v72[8] = 0u;
    v76[25] = 1;
    v79 = 0;
    v77 = 0;
    v78 = 0;
    v72[0] = 2;
    v76[27] = (_DWORD)Error != 2;
    v76[26] = (Error & 0xFE) != 2;
    v42 = v64;
    __SceneResourceCache.findSceneResource(named:bundle:options:)(v37, a2, v36, (uint64_t)v72, (uint64_t)&v70);
    if (v42)
    {
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v72);
      swift_release();
      swift_release();
      swift_release();

    }
    else
    {
      if (v71)
      {
        outlined init with take of BindableDataInternal(&v70, (uint64_t)&v80);
        outlined init with copy of __REAssetService((uint64_t)&v80, (uint64_t)&v70);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
        swift_dynamicCast();
        v47 = v68;
        v48 = v69;
        __swift_project_boxed_opaque_existential_1(v67, v68);
        Error = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
        specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)(Error);

        swift_release();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v70, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
        Error = type metadata accessor for Entity.LoadError(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
        swift_allocError();
        *v56 = v65;
        v56[1] = a2;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        swift_willThrow();

        swift_release();
        swift_release();
        swift_release();
      }
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v72);
    }
    return Error;
  }
  type metadata accessor for __SceneImportOperation();
  swift_initStackObject();
  v40 = __SceneImportOperation.init(core:)(v39);

  swift_release();
  Error = *(_QWORD *)(v40 + 16);
  RESceneImportOperationSetMergeIntoSingleEntity();
  RESceneImportOperationSetGenerateDecimatedMesh();
  RESceneImportOperationSetUnitType();
  __SceneImportOperation.run()();
  if (v41)
  {
    swift_release();
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();

    swift_release();
    swift_release();
    return Error;
  }
  v43 = RESceneImportOperationCopySourceURL();
  v82 = v36;
  if (v43)
  {
    v44 = (void *)v43;
    v45 = v61;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v46 = type metadata accessor for URL();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
  }
  else
  {
    v46 = type metadata accessor for URL();
    v45 = v61;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v61, 1, 1, v46);
  }
  v65 = v25;
  v49 = (uint64_t)v45;
  v50 = (uint64_t)v60;
  outlined init with take of Transform?(v49, (uint64_t)v60, &demangling cache variable for type metadata for URL?);
  type metadata accessor for URL();
  v51 = *(_QWORD *)(v46 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v50, 1, v46);
  if ((_DWORD)result != 1)
  {
    v53 = __SceneImportOperation.importedScenes.getter();
    __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v53, (uint64_t)v72);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v46);
    v54 = *(_QWORD *)v72;
    v55 = *(_OWORD *)&v72[8];
    v64 = v73;
    swift_bridgeObjectRetain();
    Error = __SceneResource.makeAnchorEntity(fileName:)(v55, *((uint64_t *)&v55 + 1));
    v62 = v54;
    *(_OWORD *)v72 = v55;
    swift_bridgeObjectRetain_n();
    v57 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject((id)Error, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v57, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)((void *)Error);
    specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(Error, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();

    swift_release();
    swift_release();
    return Error;
  }
  __break(1u);
  return result;
}

void *SceneResourceLoadResult.makeAnchorEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  v4 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v2, v3);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
  }
  return v4;
}

uint64_t closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE77AE0;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v17 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000018;
  *(_QWORD *)(inited + 56) = 0x800000021BE90C80;
  *(_QWORD *)(inited + 72) = v17;
  *(_QWORD *)(inited + 80) = 0x64656D616ELL;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = a3;
  *(_QWORD *)(inited + 104) = a4;
  *(_QWORD *)(inited + 120) = v17;
  *(_QWORD *)(inited + 128) = 0x656C646E7562;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  v18 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(_QWORD *)(inited + 144) = a5;
  *(_QWORD *)(inited + 168) = v18;
  *(_QWORD *)(inited + 176) = 0x64616F4C74736F70;
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 192) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(_QWORD *)(inited + 200) = 0;
  *(_QWORD *)(inited + 216) = v19;
  *(_QWORD *)(inited + 224) = 0xD000000000000015;
  *(_QWORD *)(inited + 232) = 0x800000021BE903F0;
  swift_beginAccess();
  v20 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 240) = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(inited + 264) = v20;
  *(_QWORD *)(inited + 272) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a7;
  v21[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v21[4] = v15;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:);
  *(_QWORD *)(v22 + 24) = v21;
  *(_QWORD *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 296) = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = a5;
  swift_retain();
  v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v25 = a8[3];
  v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  _BYTE v32[4];
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[7];

  v37 = a7;
  v38 = a8;
  v33 = a3;
  v42 = a12;
  v36 = a11;
  v34 = a2;
  v35 = a10;
  v17 = type metadata accessor for DispatchWorkItemFlags();
  v41 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v32[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for DispatchQoS();
  v39 = *(_QWORD *)(v20 - 8);
  v40 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v32[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(v23 + 24) = a2;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = v33;
  *(_QWORD *)(v24 + 24) = a4;
  *(_QWORD *)(v24 + 32) = a5;
  v25 = v37;
  *(_QWORD *)(v24 + 40) = a6;
  *(_QWORD *)(v24 + 48) = v25;
  *(_QWORD *)(v24 + 56) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v24 + 64) = v23;
  *(_QWORD *)(v24 + 72) = v38;
  *(_QWORD *)(v24 + 80) = a9;
  v27 = v35;
  v26 = v36;
  *(_QWORD *)(v24 + 88) = v35;
  *(_QWORD *)(v24 + 96) = v26;
  aBlock[4] = partial apply for doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_635;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = v27;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v43 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v22, v19, v28);
  _Block_release(v28);
  (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v19, v17);
  (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v22, v40);
  return swift_release();
}

uint64_t doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10, uint64_t a11)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t (*v47)(uint64_t);
  void *v48;
  uint64_t (*v49)();
  _QWORD *v50;
  __int128 v51[3];
  _QWORD v52[5];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v39 = a6;
  v40 = a7;
  v38 = a5;
  v41 = a3;
  v15 = a1;
  v16 = type metadata accessor for DispatchWorkItemFlags();
  v43 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v58, 0, 25);
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v58[25] = 1;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  LOBYTE(v53) = 1;
  v58[27] = v15 != 2;
  v58[26] = (a1 & 0xFE) != 2;
  v44 = v22;
  v42 = v23;
  if (!a2)
  {
    __SceneResourceCache.findSceneResource(named:bundle:options:)(a8, a9, a10, (uint64_t)&v53, (uint64_t)&v46);
    if (!v48)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v46, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      v25 = (void *)swift_allocError();
      *v37 = a8;
      v37[1] = a9;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v53);
      goto LABEL_5;
    }
    outlined init with take of BindableDataInternal(&v46, (uint64_t)v52);
    outlined init with copy of __REAssetService((uint64_t)v52, (uint64_t)v51);
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = a11;
    outlined init with take of BindableDataInternal(v51, (uint64_t)(v33 + 3));
    v34 = v39;
    v33[8] = v38;
    v33[9] = v34;
    v33[10] = v40;
    v49 = partial apply for closure #1 in doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v50 = v33;
    *(_QWORD *)&v46 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v46 + 1) = 1107296256;
    v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v48 = &block_descriptor_647;
    v35 = _Block_copy(&v46);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v45 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v21, v18, v35);
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v44);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
LABEL_9:
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v53);
    return swift_release();
  }
  swift_retain();
  __SceneImportOperation.run()();
  if (!v24)
  {
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = a2;
    v30[3] = a4;
    v31 = v39;
    v30[4] = v38;
    v30[5] = v31;
    v30[6] = v40;
    v49 = partial apply for closure #1 in doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v50 = v30;
    *(_QWORD *)&v46 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v46 + 1) = 1107296256;
    v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v48 = &block_descriptor_653;
    v32 = _Block_copy(&v46);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v52[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v21, v18, v32);
    _Block_release(v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v44);
    goto LABEL_9;
  }
  v25 = v24;
  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v53);
  swift_release();
LABEL_5:
  v26 = (_QWORD *)swift_allocObject();
  v27 = v40;
  v26[2] = v39;
  v26[3] = v27;
  v26[4] = v25;
  *((_QWORD *)&v55 + 1) = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
  *(_QWORD *)&v56 = v26;
  v53 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v54 = 1107296256;
  *((_QWORD *)&v54 + 1) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  *(_QWORD *)&v55 = &block_descriptor_641;
  v28 = _Block_copy(&v53);
  swift_retain();
  v29 = v25;
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)&v46 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v21, v18, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v44);
  return swift_release();
}

uint64_t static Entity.loadAnchor(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v3 = specialized static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(a1, a2, a3, (uint64_t)v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  return v3;
}

uint64_t static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return specialized static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(a1, a2, a3, a4);
}

uint64_t static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  NSURL *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  id v82;
  uint64_t v83;
  void *v84;
  Swift::String_optional v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t Information;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _QWORD v114[3];
  uint64_t v115;
  uint64_t v116;

  v94 = a4;
  v109 = a3;
  v103 = a2;
  v110 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  v102 = *(_QWORD *)(Information - 8);
  v8 = *(_QWORD *)(v102 + 64);
  MEMORY[0x24BDAC7A8](Information);
  v93 = (uint64_t)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v100 = (uint64_t)&v93 - v10;
  v98 = type metadata accessor for URL();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v95 = (char *)&v93 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v104 = (char *)&v93 - v13;
  v14 = type metadata accessor for DispatchPredicate();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = specialized static __ServiceLocator.shared.getter();
  v19 = *(void **)(*(_QWORD *)(v18 + 168) + 16);
  swift_beginAccess();
  v20 = *(_QWORD *)(v18 + 24);
  swift_unownedRetainStrong();
  v21 = *(void **)(v20 + 32);
  swift_retain();
  v108 = v19;
  v22 = v21;
  swift_release();
  v111 = v18;
  v23 = *(_QWORD *)(*(_QWORD *)(v18 + 168) + 32);
  *v17 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BEE5610], v14);
  v24 = v22;
  swift_retain();
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v22 & 1) != 0)
  {
    v106 = v23;
    v107 = v24;
    type metadata accessor for LoadRequestDependencies();
    v17 = (_QWORD *)swift_allocObject();
    v25 = MEMORY[0x24BEE4AF8];
    v17[2] = MEMORY[0x24BEE4AF8];
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v26 = swift_allocObject();
    *(_DWORD *)(v26 + 16) = 0;
    v17[3] = v26;
    v4 = 1;
    swift_beginAccess();
    v17[2] = v25;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v27 = static Entity.asynchronousLoadOptions;
  v28 = v110;
  v29 = URL.absoluteString.getter();
  v31 = v30;
  swift_beginAccess();
  v32 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  v33 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v33 + 16) = v29;
  *(_QWORD *)(v33 + 24) = v31;
  *(_BYTE *)(v33 + 32) = v27;
  *(_BYTE *)(v33 + 33) = v32;
  *(_WORD *)(v33 + 34) = v4;
  *(_DWORD *)(v33 + 36) = 4;
  swift_weakAssign();
  v34 = v111 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v34, (uint64_t)&v112, &demangling cache variable for type metadata for USDImportService?);
  v35 = v17;
  if (v113)
  {
    outlined init with take of BindableDataInternal(&v112, (uint64_t)v114);
    v37 = v115;
    v36 = v116;
    __swift_project_boxed_opaque_existential_1(v114, v115);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 24))(v28, v37, v36) & 1) != 0)
    {
      v38 = v97;
      v39 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v104, v28, v98);
      outlined init with copy of __REAssetService((uint64_t)v114, (uint64_t)&v112);
      v40 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      v41 = ((unint64_t)v96 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
      v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      v44 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v44 + v40, v104, v39);
      v45 = (uint64_t *)(v44 + v41);
      v46 = (uint64_t)v109;
      *v45 = v103;
      v45[1] = v46;
      *(_QWORD *)(v44 + v42) = v99;
      *(_QWORD *)(v44 + v43) = v33;
      outlined init with take of BindableDataInternal(&v112, v44 + ((v43 + 15) & 0xFFFFFFFFFFFFFFF8));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
      v47 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
      v48 = swift_allocObject();
      v49 = swift_allocObject();
      *(_DWORD *)(v49 + 16) = 0;
      *(_QWORD *)(v48 + 16) = v49;
      *(_QWORD *)(v48 + 24) = 0;
      *(_BYTE *)(v48 + 32) = -1;
      *(_QWORD *)(v47 + 16) = v48;
      v50 = (_QWORD *)swift_allocObject();
      v50[2] = partial apply for closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
      v50[3] = v44;
      v50[4] = v48;
      v50[5] = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      v51 = Future.init(_:)();
      swift_release();

      swift_release();
      swift_release();
      swift_release();

      *(_QWORD *)(v47 + 24) = v51;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
      return v47;
    }
    v96 = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
  }
  else
  {
    v96 = v17;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v112, &demangling cache variable for type metadata for USDImportService?);
  }
  type metadata accessor for RealityFileLoadInformationResolver();
  v52 = v110;
  static RealityFileLoadInformationResolver.resolve(url:)(v110, (uint64_t)v7);
  v53 = v102;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v7, 1, Information) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    v54 = v97;
    v55 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
    v56 = v104;
    v57 = v98;
    v55(v104, v52, v98);
    swift_retain();
    URL._bridgeToObjectiveC()(v58);
    v60 = v59;
    swift_beginAccess();
    v61 = RESceneImportOperationCreateWithURL();

    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    v62 = __SceneImportOperation.init(core:)(v61);
    swift_release();
    v63 = *(void (**)(char *, uint64_t))(v54 + 8);
    v63(v56, v57);
    v64 = v95;
    v55(v95, v52, v57);
    v65 = v109;
    if (v109)
    {
      swift_bridgeObjectRetain();
      v66 = v96;
      v67 = v106;
      v68 = v103;
    }
    else
    {
      URL.deletingPathExtension()();
      v68 = URL.lastPathComponent.getter();
      v65 = v84;
      v63(v56, v57);
      v66 = v96;
      v67 = v106;
    }
    v63(v64, v57);
    v85.value._countAndFlagsBits = v68;
    v85.value._object = v65;
    __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v85, 0, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    RESceneImportOperationSetIsolateFromEngine();
    v86 = (_QWORD *)swift_allocObject();
    v87 = v107;
    v86[2] = v62;
    v86[3] = v87;
    v86[4] = v67;
    v86[5] = v33;
    v86[6] = v108;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
    v47 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
    v88 = swift_allocObject();
    v89 = swift_allocObject();
    *(_DWORD *)(v89 + 16) = 0;
    *(_QWORD *)(v88 + 16) = v89;
    *(_QWORD *)(v88 + 24) = 0;
    *(_BYTE *)(v88 + 32) = -1;
    *(_QWORD *)(v47 + 16) = v88;
    v90 = (_QWORD *)swift_allocObject();
    v90[2] = partial apply for closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v90[3] = v86;
    v90[4] = v88;
    v90[5] = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
    swift_allocObject();
    swift_retain();
    v91 = Future.init(_:)();
    swift_release();
    *(_QWORD *)(v47 + 24) = v91;
  }
  else
  {
    v69 = v100;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v7, v100, type metadata accessor for RealityFileLoadInformation);
    outlined init with copy of (Int, URL)(v94, (uint64_t)v114, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    v70 = v93;
    outlined init with copy of __RKEntityActionSpecification(v69, v93, type metadata accessor for RealityFileLoadInformation);
    v71 = (*(unsigned __int8 *)(v53 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    v72 = (v8 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
    v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
    v74 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
    v75 = swift_allocObject();
    outlined init with take of Transform?((uint64_t)v114, v75 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    v76 = v109;
    *(_QWORD *)(v75 + 56) = v103;
    *(_QWORD *)(v75 + 64) = v76;
    *(_BYTE *)(v75 + 72) = v27;
    *(_QWORD *)(v75 + 80) = v106;
    outlined init with take of __RKEntityActionSpecification(v70, v75 + v71, type metadata accessor for RealityFileLoadInformation);
    v77 = v107;
    *(_QWORD *)(v75 + v72) = v107;
    *(_QWORD *)(v75 + v73) = v99;
    *(_QWORD *)(v75 + v74) = v33;
    *(_QWORD *)(v75 + ((v74 + 15) & 0xFFFFFFFFFFFFFFF8)) = v108;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
    v47 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
    v78 = swift_allocObject();
    v79 = swift_allocObject();
    *(_DWORD *)(v79 + 16) = 0;
    *(_QWORD *)(v78 + 16) = v79;
    *(_QWORD *)(v78 + 24) = 0;
    *(_BYTE *)(v78 + 32) = -1;
    *(_QWORD *)(v47 + 16) = v78;
    v80 = (_QWORD *)swift_allocObject();
    v80[2] = partial apply for closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v80[3] = v75;
    v81 = v96;
    v80[4] = v78;
    v80[5] = v81;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v82 = v77;
    v83 = Future.init(_:)();

    swift_release();
    swift_release();
    *(_QWORD *)(v47 + 24) = v83;
    outlined destroy of __RKEntityActionSpecification(v100, type metadata accessor for RealityFileLoadInformation);
  }
  return v47;
}

uint64_t closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE77AE0;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000016;
  *(_QWORD *)(inited + 56) = 0x800000021BE90B60;
  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(inited + 88) = 0xEA0000000000664FLL;
  v17 = type metadata accessor for URL();
  *(_QWORD *)(inited + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(boxed_opaque_existential_1, a3, v17);
  *(_QWORD *)(inited + 128) = 0x656D614E68746977;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(inited + 144) = a4;
  *(_QWORD *)(inited + 152) = a5;
  *(_QWORD *)(inited + 168) = v19;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  swift_beginAccess();
  v20 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(inited + 216) = v20;
  *(_QWORD *)(inited + 224) = 0x64616F4C74736F70;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(_QWORD *)(inited + 248) = 0;
  *(_QWORD *)(inited + 264) = v21;
  *(_QWORD *)(inited + 272) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a7;
  v22[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v22[4] = v14;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for closure #1 in closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 296) = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v25 = a8[3];
  v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:)(void *a1, char a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[4];
  __int128 v11;
  __int128 v12;

  if ((a2 & 1) != 0)
    return a4(a1, 1);
  memset(v10, 0, 24);
  v10[3] = 1;
  v11 = 0u;
  v12 = 0u;
  v8 = swift_retain();
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v8, (uint64_t)v10, (void (*)(uint64_t, _QWORD))a4, a5, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Information;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD v38[2];
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD aBlock[6];
  _BYTE v54[48];

  v43 = a7;
  v41 = a6;
  v39 = a4;
  v38[1] = a2;
  v51 = a12;
  v44 = a11;
  v42 = a10;
  v40 = a9;
  v47 = type metadata accessor for DispatchWorkItemFlags();
  v50 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v46 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v48 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v45 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  v21 = *(_QWORD *)(Information - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x24BDAC7A8](Information);
  v23 = (char *)v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = a2;
  outlined init with copy of (Int, URL)(a3, (uint64_t)v54, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  outlined init with copy of __RKEntityActionSpecification(a8, (uint64_t)v23, type metadata accessor for RealityFileLoadInformation);
  v25 = (*(unsigned __int8 *)(v21 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v26 = (v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject();
  outlined init with take of Transform?((uint64_t)v54, v29 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  *(_QWORD *)(v29 + 56) = v39;
  *(_QWORD *)(v29 + 64) = a5;
  *(_BYTE *)(v29 + 72) = v41;
  *(_QWORD *)(v29 + 80) = v43;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v23, v29 + v25, type metadata accessor for RealityFileLoadInformation);
  v30 = v40;
  *(_QWORD *)(v29 + v26) = v40;
  *(_QWORD *)(v29 + v27) = v42;
  *(_QWORD *)(v29 + v28) = v44;
  v31 = (_QWORD *)(v29 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v31 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v31[1] = v24;
  aBlock[4] = partial apply for doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_386;
  v32 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v33 = v30;
  swift_retain();
  swift_retain();
  v34 = v45;
  static DispatchQoS.unspecified.getter();
  v52 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v36 = v46;
  v35 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v34, v36, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v49);
  return swift_release();
}

uint64_t doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Information;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[6];
  __int128 v39[3];
  uint64_t v40[5];
  char v41[8];
  __int128 v42;
  _BYTE v43[73];
  __int16 v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v28 = a8;
  v35 = a7;
  v30 = a11;
  v29 = a10;
  v16 = a4;
  v36 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v32 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v43, 0, sizeof(v43));
  v42 = 0u;
  v44 = 1;
  v45 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v41[0] = 1;
  outlined assign with copy of __DownsamplingStrategy?(a1, (uint64_t)&v43[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v43[56] = a2;
  *(_QWORD *)&v43[64] = a3;
  v45 = v16 != 2;
  HIBYTE(v44) = (a4 & 0xFE) != 2;
  Information = type metadata accessor for RealityFileLoadInformation(0);
  __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)(a6, *(_QWORD *)(a6 + *(int *)(Information + 20)), *(_QWORD *)(a6 + *(int *)(Information + 20) + 8), (uint64_t)v41, v40);
  outlined init with copy of __REAssetService((uint64_t)v40, (uint64_t)v39);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v28;
  outlined init with take of BindableDataInternal(v39, (uint64_t)(v21 + 3));
  v22 = v29;
  v23 = v30;
  v21[8] = a9;
  v21[9] = v22;
  v21[10] = v23;
  v38[4] = partial apply for closure #1 in doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  v38[5] = v21;
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 1107296256;
  v38[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v38[3] = &block_descriptor_398;
  v24 = _Block_copy(v38);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v37 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v25 = v32;
  v26 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v19, v25, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  swift_release();
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v41);
}

uint64_t closure #2 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  __int128 v12;
  __int128 v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  outlined init with copy of __REAssetService(a2, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
  swift_dynamicCast();
  v7 = v15;
  v8 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  memset(v11, 0, 24);
  v11[3] = 1;
  v12 = 0u;
  v13 = 0u;
  specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)(v9, (uint64_t)v11, a4, a5, (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  swift_release();
  return outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v28 = a7;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v25 = *(_QWORD *)(v16 - 8);
  v26 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = a5;
  v20[5] = a6;
  v20[6] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v20[7] = v19;
  aBlock[4] = partial apply for doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_408;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v22 = a4;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v29 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v18, v15, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v26);
  return swift_release();
}

uint64_t doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  _QWORD *v32;

  v23[1] = a2;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __SceneImportOperation.run()();
  v18 = (_QWORD *)swift_allocObject();
  if (v17)
  {
    v18[2] = a5;
    v18[3] = a6;
    v18[4] = v17;
    v31 = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    v32 = v18;
    aBlock = MEMORY[0x24BDAC760];
    v28 = 1107296256;
    v29 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v30 = &block_descriptor_414;
    v19 = _Block_copy(&aBlock);
    swift_retain();
    v20 = v17;
    static DispatchQoS.unspecified.getter();
    v26 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v16, v13, v19);
    _Block_release(v19);

  }
  else
  {
    v18[2] = a1;
    v18[3] = a3;
    v18[4] = a4;
    v18[5] = a5;
    v18[6] = a6;
    v31 = partial apply for closure #1 in doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v32 = v18;
    aBlock = MEMORY[0x24BDAC760];
    v28 = 1107296256;
    v29 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v30 = &block_descriptor_420;
    v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v26 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v16, v13, v21);
    _Block_release(v21);
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v25);
  return swift_release();
}

void closure #1 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  __SceneImportOperation.publishToEngine()();
  if (v13)
  {
    v21 = v13;
    a4((uint64_t)v13, 1);

  }
  else
  {
    v14 = RESceneImportOperationCopySourceURL();
    if (v14)
    {
      v15 = (void *)v14;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v16 = type metadata accessor for URL();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
    }
    else
    {
      v16 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
    }
    outlined init with take of Transform?((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for URL?);
    type metadata accessor for URL();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
    {
      __break(1u);
    }
    else
    {
      v18 = __SceneImportOperation.importedScenes.getter();
      __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v18, (uint64_t)&v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
      v19 = v26;
      v20 = v27;
      swift_bridgeObjectRetain();
      v22 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v19, v20);
      v25 = v19;
      v26 = v20;
      swift_bridgeObjectRetain_n();
      v23 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      swift_beginAccess();
      objc_setAssociatedObject(v22, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v23, (void *)0x301);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      __SceneResourceCache.Entry.attach(toEntity:)(v22);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 1;
      v29 = 0u;
      v30 = 0u;
      specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)((uint64_t)v22, (uint64_t)&v25, a4, a5, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    }
  }
}

uint64_t _s10RealityKit6EntityC20withUnsafeJointNames33_F26D63620DB78A19432B1EBEC9E8266ALLyxSaySSG_xSPySPys4Int8VGSgGSgKXEtKlFZyt_Tgm504_s10a4Kit6c26C20withCharacterOptions33_hijklmn39ALLyxxSo08REEntityeF0azKXEKlFZxSPySPys4O19VGSgGSgKXEfU_yt_Tg5SiSo08REEntityS7Optionsaxs5Error_pRi_zRi0_zlyytIsglrzo_Tf1nnc_n(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  void *v25;
  _QWORD v26[3];
  void (*v27)(_QWORD);

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v27 = a3;
    v7 = v3;
    v26[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v8 = v26[0];
    v9 = a1 + 40;
    do
    {
      v10 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      v11 = strdup(v10);
      swift_bridgeObjectRelease();
      swift_release();
      v26[0] = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = v26[0];
      }
      v9 += 16;
      *(_QWORD *)(v8 + 16) = v14;
      *(_QWORD *)(v8 + 8 * v13 + 32) = v11;
      --v5;
    }
    while (v5);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
    v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v14)
    {
      v20 = 1;
      v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
      goto LABEL_16;
    }
    v27 = a3;
    v7 = v3;
  }
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v17 = *(_QWORD *)(v8 + 8 * v15 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v19 = v16[2];
    v18 = v16[3];
    if (v19 >= v18 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
    ++v15;
    v16[2] = v19 + 1;
    v16[v19 + 4] = v17;
  }
  while (v14 != v15);
  swift_bridgeObjectRelease();
  v20 = 0;
  v3 = v7;
  a3 = v27;
LABEL_16:
  LOBYTE(v26[0]) = 0;
  v26[1] = a2;
  v26[2] = v16 + 4;
  a3(v26);
  if (v3)
  {
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v21 = 0;
      do
      {
        v22 = *(void **)(v8 + 8 * v21++ + 32);
        free(v22);
      }
      while (v14 != v21);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v24 = 0;
  do
  {
    v25 = *(void **)(v8 + 8 * v24++ + 32);
    free(v25);
  }
  while (v14 != v24);
  return swift_bridgeObjectRelease_n();
}

uint64_t static Entity.loadBodyTracked(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  char v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;
  id v58;

  v52 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BodyTrackingComponent(0);
  v47 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
    v58 = a3;
  else
    v58 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v13 = a3;
  v14 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 24);
  swift_unownedRetainStrong();
  v16 = *(void **)(v15 + 32);
  swift_retain();
  v17 = v16;
  swift_release();
  *v12 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BEE5610], v9);
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  v18 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  v19 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  inited = swift_initStackObject();
  swift_weakInit();
  v21 = v52;
  *(_QWORD *)(inited + 16) = v52;
  *(_QWORD *)(inited + 24) = a2;
  *(_BYTE *)(inited + 32) = v18;
  *(_BYTE *)(inited + 33) = v19;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 3;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v14 + 176, (uint64_t)&v53, &demangling cache variable for type metadata for USDImportService?);
  if (!v54)
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v53, &demangling cache variable for type metadata for USDImportService?);
    goto LABEL_13;
  }
  v50 = v14;
  v46 = v7;
  outlined init with take of BindableDataInternal(&v53, (uint64_t)v55);
  v22 = v21;
  v23 = v56;
  v24 = v57;
  __swift_project_boxed_opaque_existential_1(v55, v56);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  v26 = v58;
  if ((v25(v22, a2, v58, v23, v24) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
    v21 = v22;
LABEL_13:
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    v35 = v58;
    v36 = (void *)MEMORY[0x220768C3C](v21, a2);
    swift_bridgeObjectRelease();
    v37 = RESceneImportOperationCreateWithBundleResource();

    if (v37)
    {
      type metadata accessor for __SceneImportOperation();
      swift_initStackObject();
      __SceneImportOperation.init(core:)(v37);

      swift_release();
      RESceneImportOperationSetMergeIntoSingleEntity();
      RESceneImportOperationSetGenerateDecimatedMesh();
      RESceneImportOperationSetUnitType();
      __SceneImportOperation.run()();
      if (!v38)
      {
        v21 = __SceneImportOperation.makeBodyTrackedEntity()();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v21);
        swift_release();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        swift_weakDestroy();

        swift_release();
        return v21;
      }
      swift_release();
    }
    else
    {

      swift_release();
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      swift_allocError();
      *v39 = v21;
      v39[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();

    swift_release();
    return v21;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v27 + 32) = 1701869940;
  *(_QWORD *)(v27 + 40) = 0xE400000000000000;
  v28 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v27 + 48) = 0xD000000000000019;
  *(_QWORD *)(v27 + 56) = 0x800000021BE90510;
  *(_QWORD *)(v27 + 72) = v28;
  *(_QWORD *)(v27 + 80) = 1701667182;
  *(_QWORD *)(v27 + 88) = 0xE400000000000000;
  *(_QWORD *)(v27 + 96) = v22;
  *(_QWORD *)(v27 + 104) = a2;
  *(_QWORD *)(v27 + 120) = v28;
  *(_QWORD *)(v27 + 128) = 0x656C646E7562;
  *(_QWORD *)(v27 + 136) = 0xE600000000000000;
  v29 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(_QWORD *)(v27 + 144) = v26;
  *(_QWORD *)(v27 + 168) = v29;
  *(_QWORD *)(v27 + 176) = 0xD000000000000015;
  *(_QWORD *)(v27 + 184) = 0x800000021BE903F0;
  v30 = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(v27 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v27 + 192) = v30;
  swift_bridgeObjectRetain();
  v31 = v26;
  v21 = specialized Dictionary.init(dictionaryLiteral:)(v27);
  v32 = v56;
  v33 = v57;
  __swift_project_boxed_opaque_existential_1(v55, v56);
  v34 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v21, v32, v33);
  if (v34)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for BodyTrackedEntity();
    v41 = swift_dynamicCastClass();
    if (v41)
    {
      v21 = v41;
      v58 = v31;
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
      v43 = (uint64_t)v48;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v48, 1, 1, v42);
      v44 = v46;
      *(_BYTE *)(v43 + *(int *)(v46 + 20)) = 0;
      v45 = v49;
      outlined init with copy of __RKEntityActionSpecification(v43, v49, type metadata accessor for BodyTrackingComponent);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v44);
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v45);
      outlined destroy of BodyTrackingComponent?(v45, &demangling cache variable for type metadata for BodyTrackingComponent?);
      swift_release();
      outlined destroy of __RKEntityActionSpecification(v43, type metadata accessor for BodyTrackingComponent);
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v21);
      swift_release();
      swift_release();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
      return v21;
    }
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  return v21;
}

uint64_t __SceneImportOperation.makeBodyTrackedEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v39 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  result = __SceneImportOperation.importedScenes.getter();
  v12 = result;
  v13 = MEMORY[0x24BEE4AF8];
  v40 = MEMORY[0x24BEE4AF8];
  v38 = *(_QWORD *)(result + 16);
  if (!v38)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v13 + 16);
    if (v22 >= 2)
    {
      swift_release();
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v25 = v24;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 2, 2, v26);
    }
    else
    {
      if (v22)
      {
        outlined init with copy of __RKEntityActionSpecification(v13 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        v23 = 0;
      }
      else
      {
        v23 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v23, 1, v5);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v29 = *(_QWORD *)&v4[*(int *)(v5 + 24)];
        swift_retain();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        v30 = *(_QWORD *)(v29 + 16);
        RERetain();
        type metadata accessor for __SceneResource();
        inited = swift_initStackObject();
        *(_QWORD *)(inited + 16) = v30;
        v25 = inited;
        v32 = __SceneResource.makeSingleBodyTrackedEntity()();
        if (!v1)
          v25 = v32;
        swift_setDeallocating();
        RERelease();
        swift_release();
        return v25;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v25 = v27;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v25, 1, 2, v28);
    }
    swift_willThrow();
    return v25;
  }
  v34 = v4;
  v35 = v0;
  v14 = 0;
  v15 = type metadata accessor for __SceneImportOperation.ImportedScene;
  v36 = v5;
  v37 = v6;
  while (v14 < *(_QWORD *)(v12 + 16))
  {
    v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v17 = *(_QWORD *)(v6 + 72);
    outlined init with copy of __RKEntityActionSpecification(v12 + v16 + v17 * v14, (uint64_t)v10, v15);
    if (v10[*(int *)(v5 + 28)] == 1)
    {
      v18 = v15;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v10, v39, v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = v40;
      v20 = *(_QWORD *)(v40 + 16);
      v19 = *(_QWORD *)(v40 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v13 = v40;
      }
      *(_QWORD *)(v13 + 16) = v20 + 1;
      v21 = v13 + v16 + v20 * v17;
      v15 = v18;
      result = outlined init with take of __RKEntityActionSpecification(v39, v21, v18);
      v5 = v36;
      v6 = v37;
    }
    else
    {
      result = outlined destroy of __RKEntityActionSpecification((uint64_t)v10, v15);
    }
    if (v38 == ++v14)
    {
      v13 = v40;
      v4 = v34;
      v1 = v35;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE77AE0;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v17 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 56) = 0x800000021BE90C60;
  *(_QWORD *)(inited + 72) = v17;
  *(_QWORD *)(inited + 80) = 1701667182;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  *(_QWORD *)(inited + 96) = a3;
  *(_QWORD *)(inited + 104) = a4;
  *(_QWORD *)(inited + 120) = v17;
  *(_QWORD *)(inited + 128) = 0x656C646E7562;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  v18 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(_QWORD *)(inited + 144) = a5;
  *(_QWORD *)(inited + 168) = v18;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  swift_beginAccess();
  v19 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(inited + 216) = v19;
  *(_QWORD *)(inited + 224) = 0x64616F4C74736F70;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(_QWORD *)(inited + 248) = 0;
  *(_QWORD *)(inited + 264) = v20;
  *(_QWORD *)(inited + 272) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a7;
  v21[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v21[4] = v15;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(named:in:);
  *(_QWORD *)(v22 + 24) = v21;
  *(_QWORD *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 296) = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = a5;
  swift_retain();
  v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v25 = a8[3];
  v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

void closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(void (*a1)(void **), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void (*v30)(void **);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  void (*v41)();
  _QWORD *v42;

  v31 = a8;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject();
  v30 = a1;
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  v21 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = (void *)MEMORY[0x220768C3C](a4, a5);
  swift_bridgeObjectRelease();
  v23 = RESceneImportOperationCreateWithBundleResource();

  if (v23)
  {
    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    v24 = __SceneImportOperation.init(core:)(v23);

    swift_release();
    swift_beginAccess();
    RESceneImportOperationSetMergeIntoSingleEntity();
    RESceneImportOperationSetGenerateDecimatedMesh();
    RESceneImportOperationSetUnitType();
    RESceneImportOperationSetIsolateFromEngine();
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = v24;
    v25[3] = a6;
    v25[4] = v31;
    v25[5] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v25[6] = v20;
    v41 = partial apply for doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:);
    v42 = v25;
    aBlock = (void *)MEMORY[0x24BDAC760];
    v38 = 1107296256;
    v39 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v40 = &block_descriptor_608;
    v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v36 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v27 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v19, v16, v26);
    _Block_release(v26);
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v27);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
    swift_release();
  }
  else
  {
    swift_release();

    swift_release();
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v28 = (void *)swift_allocError();
    *v29 = a4;
    v29[1] = a5;
    swift_storeEnumTagMultiPayload();
    aBlock = v28;
    LOBYTE(v38) = 1;
    swift_bridgeObjectRetain();
    v30(&aBlock);

  }
}

void *static Entity.loadBodyTracked(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  void *v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  NSURL *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  Swift::String_optional v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v66 = a3;
  v64 = a2;
  v73 = a1;
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v58 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v63 = (char *)&v57 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v62 = (char *)&v57 - v9;
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 24);
  swift_unownedRetainStrong();
  v16 = *(void **)(v15 + 32);
  swift_retain();
  v17 = v16;
  swift_release();
  *v13 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5610], v10);
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v17 & 1) != 0)
  {
    v65 = v4;
    v4 = v3;
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v18 = static Entity.synchronousLoadOptions;
  v19 = v73;
  v20 = URL.absoluteString.getter();
  v22 = v21;
  swift_beginAccess();
  v23 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  inited = swift_initStackObject();
  swift_weakInit();
  *(_QWORD *)(inited + 16) = v20;
  *(_QWORD *)(inited + 24) = v22;
  *(_BYTE *)(inited + 32) = v18;
  *(_BYTE *)(inited + 33) = v23;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 3;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v14 + 176, (uint64_t)&v68, &demangling cache variable for type metadata for USDImportService?);
  if (!v69)
  {
    v59 = inited;
    v37 = v14;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v68, &demangling cache variable for type metadata for USDImportService?);
LABEL_10:
    v38 = v65;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    v40 = v62;
    v41 = v73;
    v39(v62, v73, v4);
    swift_retain();
    URL._bridgeToObjectiveC()(v42);
    v44 = v43;
    swift_beginAccess();
    v45 = RESceneImportOperationCreateWithURL();

    type metadata accessor for __SceneImportOperation();
    swift_initStackObject();
    v60 = __SceneImportOperation.init(core:)(v45);
    v61 = v37;
    swift_release();
    v46 = *(void (**)(char *, uint64_t))(v38 + 8);
    v46(v40, v4);
    v47 = v63;
    v48 = v41;
    v49 = v4;
    v39(v63, v48, v4);
    v33 = v66;
    if (v66)
    {
      swift_bridgeObjectRetain();
      v50 = v64;
    }
    else
    {
      v51 = v58;
      URL.deletingPathExtension()();
      v50 = URL.lastPathComponent.getter();
      v33 = v52;
      v46(v51, v49);
    }
    v46(v47, v49);
    v53.value._countAndFlagsBits = v50;
    v53.value._object = v33;
    __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v53, 1, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    __SceneImportOperation.run()();
    if (!v54)
    {
      v33 = (void *)__SceneImportOperation.makeBodyTrackedEntity()();
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v33);
    }
    swift_release();
    swift_release();
    swift_release();
    return v33;
  }
  outlined init with take of BindableDataInternal(&v68, (uint64_t)v70);
  v25 = v71;
  v26 = v72;
  __swift_project_boxed_opaque_existential_1(v70, v71);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 24))(v19, v25, v26) & 1) == 0)
  {
    v59 = inited;
    v37 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v27 + 32) = 1701869940;
  *(_QWORD *)(v27 + 40) = 0xE400000000000000;
  v28 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v27 + 48) = 0xD000000000000016;
  *(_QWORD *)(v27 + 56) = 0x800000021BE90530;
  *(_QWORD *)(v27 + 72) = v28;
  *(_QWORD *)(v27 + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(v27 + 88) = 0xEA0000000000664FLL;
  *(_QWORD *)(v27 + 120) = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v27 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v65 + 16))(boxed_opaque_existential_1, v19, v4);
  *(_QWORD *)(v27 + 128) = 0x656D614E68746977;
  *(_QWORD *)(v27 + 136) = 0xE800000000000000;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v31 = v66;
  *(_QWORD *)(v27 + 144) = v64;
  *(_QWORD *)(v27 + 152) = v31;
  *(_QWORD *)(v27 + 168) = v30;
  *(_QWORD *)(v27 + 176) = 0xD000000000000015;
  *(_QWORD *)(v27 + 184) = 0x800000021BE903F0;
  v32 = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(v27 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v27 + 192) = v32;
  swift_bridgeObjectRetain();
  v33 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v27);
  v34 = v71;
  v35 = v72;
  __swift_project_boxed_opaque_existential_1(v70, v71);
  v36 = v67;
  (*(void (**)(void *, uint64_t, uint64_t))(v35 + 32))(v33, v34, v35);
  if (v36)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for BodyTrackedEntity();
    v56 = swift_dynamicCastClass();
    if (v56)
    {
      v33 = (void *)v56;
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v56);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
      return v33;
    }
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  return v33;
}

uint64_t closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE77AE0;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 56) = 0x800000021BE90C40;
  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(inited + 88) = 0xEA0000000000664FLL;
  v17 = type metadata accessor for URL();
  *(_QWORD *)(inited + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(boxed_opaque_existential_1, a3, v17);
  *(_QWORD *)(inited + 128) = 0x656D614E68746977;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(inited + 144) = a4;
  *(_QWORD *)(inited + 152) = a5;
  *(_QWORD *)(inited + 168) = v19;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  swift_beginAccess();
  v20 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(inited + 216) = v20;
  *(_QWORD *)(inited + 224) = 0x64616F4C74736F70;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(_QWORD *)(inited + 248) = 0;
  *(_QWORD *)(inited + 264) = v21;
  *(_QWORD *)(inited + 272) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a7;
  v22[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v22[4] = v14;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 296) = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v25 = a8[3];
  v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t postLoad #1 (data:) in closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, void (*a2)(_QWORD))
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_12;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_12;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v12);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_12;
  if (v10 == 0x64616F4C74736F50 && v11 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
      goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x797469746E65, 0xE600000000000000);
    if ((v8 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v12);
      a2(0);
      if ((swift_dynamicCast() & 1) != 0)
        return swift_release();
    }
  }
LABEL_12:
  type metadata accessor for Entity.LoadError(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(named:in:)(void *a1, char a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[4];
  __int128 v11;
  __int128 v12;

  if ((a2 & 1) != 0)
    return a4(a1, 1);
  memset(v10, 0, 24);
  v10[3] = 1;
  v11 = 0u;
  v12 = 0u;
  v8 = swift_retain();
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v8, (uint64_t)v10, (void (*)(uint64_t, _QWORD))a4, a5);
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  NSURL *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void *v34;
  Swift::String_optional v35;
  _QWORD *v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD aBlock[6];

  v44 = a8;
  v42 = a5;
  v49 = a9;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v50 = *(_QWORD *)(v14 - 8);
  v51 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v48 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v45 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v42 - v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = a2;
  v43 = v25;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v26(v24, a3, v18);
  swift_retain();
  swift_retain();
  URL._bridgeToObjectiveC()(v27);
  v29 = v28;
  swift_beginAccess();
  v30 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_allocObject();
  v31 = __SceneImportOperation.init(core:)(v30);
  swift_release();
  v32 = *(void (**)(char *, uint64_t))(v19 + 8);
  v32(v24, v18);
  v26(v21, a3, v18);
  if (a6)
  {
    swift_bridgeObjectRetain();
    v33 = v42;
  }
  else
  {
    URL.deletingPathExtension()();
    v33 = URL.lastPathComponent.getter();
    a6 = v34;
    v32(v24, v18);
  }
  v32(v21, v18);
  swift_beginAccess();
  v35.value._countAndFlagsBits = v33;
  v35.value._object = a6;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v35, 1, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  RESceneImportOperationSetIsolateFromEngine();
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = v31;
  v36[3] = a4;
  v36[4] = v44;
  v36[5] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v36[6] = v43;
  aBlock[4] = partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
  aBlock[5] = v36;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_581;
  v37 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  v38 = v45;
  static DispatchQoS.unspecified.getter();
  v52 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v39 = v48;
  v40 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v38, v39, v37);
  _Block_release(v37);
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v47);
  return swift_release();
}

void doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v14;
  _QWORD *v15;
  id v16;
  _QWORD *v17;

  __SceneImportOperation.run()();
  swift_beginAccess();
  swift_unownedRetainStrong();
  if (v14)
  {
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = a4;
    v15[3] = a5;
    v15[4] = v14;
    swift_retain();
    v16 = v14;
    __Engine.asyncOnEngineQueue(_:)(a9, (uint64_t)v15);
    swift_release();
    swift_release();

  }
  else
  {
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = a1;
    v17[3] = a3;
    v17[4] = a4;
    v17[5] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    __Engine.asyncOnEngineQueue(_:)(a7, (uint64_t)v17);
    swift_release();
    swift_release();
  }
}

void closure #1 in doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;

  __SceneImportOperation.publishToEngine()();
  if (v6)
  {
    v8 = v6;
    a3((uint64_t)v6, 1);

  }
  else
  {
    memset(v9, 0, 24);
    v9[3] = 1;
    v10 = 0u;
    v11 = 0u;
    v7 = __SceneImportOperation.makeBodyTrackedEntity()();
    specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v7, (uint64_t)v9, a3, a4);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
}

uint64_t static Entity.loadModel(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  char v19;
  uint64_t inited;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a1;
  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Entity.LoadStatistics();
  v9 = swift_allocObject();
  Date.init()();
  v10 = v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(_QWORD *)v10 = 0;
  v45 = (_QWORD *)v10;
  *(_BYTE *)(v10 + 8) = 2;
  *(_QWORD *)(v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  v48 = v9;
  v11 = (_QWORD *)(v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *v11 = 0xD00000000000001BLL;
  v11[1] = 0x800000021BE90550;
  if (a3)
    v12 = a3;
  else
    v12 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v13 = a3;
  v14 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 24);
  swift_unownedRetainStrong();
  v16 = *(void **)(v15 + 32);
  swift_retain();
  v17 = v16;
  swift_release();
  *v8 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE5610], v5);
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  v18 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  v19 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  inited = swift_initStackObject();
  swift_weakInit();
  v21 = v54;
  *(_QWORD *)(inited + 16) = v54;
  *(_QWORD *)(inited + 24) = a2;
  *(_BYTE *)(inited + 32) = v18;
  *(_BYTE *)(inited + 33) = v19;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 2;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v14 + 176, (uint64_t)&v49, &demangling cache variable for type metadata for USDImportService?);
  if (!v50)
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v49, &demangling cache variable for type metadata for USDImportService?);
    goto LABEL_12;
  }
  v46 = v14;
  outlined init with take of BindableDataInternal(&v49, (uint64_t)v51);
  v22 = v12;
  v23 = v21;
  v24 = v52;
  v25 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v25 + 16);
  swift_bridgeObjectRetain();
  if ((v26(v23, a2, v22, v24, v25) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    v21 = v23;
    v12 = v22;
LABEL_12:
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    v35 = v12;
    v36 = (void *)MEMORY[0x220768C3C](v21, a2);
    swift_bridgeObjectRelease();
    v37 = RESceneImportOperationCreateWithBundleResource();

    if (v37)
    {
      type metadata accessor for __SceneImportOperation();
      swift_initStackObject();
      __SceneImportOperation.init(core:)(v37);

      swift_release();
      RESceneImportOperationSetMergeIntoSingleEntity();
      RESceneImportOperationSetGenerateDecimatedMesh();
      RESceneImportOperationSetUnitType();
      __SceneImportOperation.run()();
      if (!v38)
      {
        a2 = __SceneImportOperation.makeModelEntity()();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(a2, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
        v43 = v45;
        *v45 = 0;
        *((_BYTE *)v43 + 8) = 0;
        Entity.LoadStatistics.log()();
        swift_release();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        swift_weakDestroy();
        swift_release();

        swift_release();
        return a2;
      }
      swift_release();
    }
    else
    {

      swift_release();
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      swift_allocError();
      *v39 = v21;
      v39[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();
    swift_release();

    swift_release();
    return a2;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v27 + 32) = 1701869940;
  *(_QWORD *)(v27 + 40) = 0xE400000000000000;
  v28 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v27 + 48) = 0xD000000000000013;
  *(_QWORD *)(v27 + 56) = 0x800000021BE90570;
  *(_QWORD *)(v27 + 72) = v28;
  *(_QWORD *)(v27 + 80) = 0x64656D616ELL;
  *(_QWORD *)(v27 + 88) = 0xE500000000000000;
  *(_QWORD *)(v27 + 96) = v23;
  *(_QWORD *)(v27 + 104) = a2;
  *(_QWORD *)(v27 + 120) = v28;
  *(_QWORD *)(v27 + 128) = 0x656C646E7562;
  *(_QWORD *)(v27 + 136) = 0xE600000000000000;
  v29 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(_QWORD *)(v27 + 144) = v22;
  *(_QWORD *)(v27 + 168) = v29;
  *(_QWORD *)(v27 + 176) = 0xD000000000000015;
  *(_QWORD *)(v27 + 184) = 0x800000021BE903F0;
  v30 = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(v27 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v27 + 192) = v30;
  swift_bridgeObjectRetain();
  v31 = v22;
  a2 = specialized Dictionary.init(dictionaryLiteral:)(v27);
  v32 = v52;
  v33 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v34 = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(a2, v32, v33);
  if (v34)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    swift_release();
    swift_release();
    swift_release();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    return a2;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for ModelEntity();
  v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_21;
  }
  a2 = v40;
  specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v40, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
  v42 = v45;
  *v45 = 1;
  *((_BYTE *)v42 + 8) = 0;
  Entity.LoadStatistics.log()();
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return a2;
}

uint64_t __SceneImportOperation.makeModelEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v39 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  result = __SceneImportOperation.importedScenes.getter();
  v12 = result;
  v13 = MEMORY[0x24BEE4AF8];
  v40 = MEMORY[0x24BEE4AF8];
  v38 = *(_QWORD *)(result + 16);
  if (!v38)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v13 + 16);
    if (v22 >= 2)
    {
      swift_release();
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v25 = v24;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 2, 2, v26);
    }
    else
    {
      if (v22)
      {
        outlined init with copy of __RKEntityActionSpecification(v13 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        v23 = 0;
      }
      else
      {
        v23 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v23, 1, v5);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v29 = *(_QWORD *)&v4[*(int *)(v5 + 24)];
        swift_retain();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        v30 = *(_QWORD *)(v29 + 16);
        RERetain();
        type metadata accessor for __SceneResource();
        inited = swift_initStackObject();
        *(_QWORD *)(inited + 16) = v30;
        v25 = inited;
        v32 = __SceneResource.makeSingleModelEntity()();
        if (!v1)
          v25 = v32;
        swift_setDeallocating();
        RERelease();
        swift_release();
        return v25;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v25 = v27;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v25, 1, 2, v28);
    }
    swift_willThrow();
    return v25;
  }
  v34 = v4;
  v35 = v0;
  v14 = 0;
  v15 = type metadata accessor for __SceneImportOperation.ImportedScene;
  v36 = v5;
  v37 = v6;
  while (v14 < *(_QWORD *)(v12 + 16))
  {
    v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v17 = *(_QWORD *)(v6 + 72);
    outlined init with copy of __RKEntityActionSpecification(v12 + v16 + v17 * v14, (uint64_t)v10, v15);
    if (v10[*(int *)(v5 + 28)] == 1)
    {
      v18 = v15;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v10, v39, v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = v40;
      v20 = *(_QWORD *)(v40 + 16);
      v19 = *(_QWORD *)(v40 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v13 = v40;
      }
      *(_QWORD *)(v13 + 16) = v20 + 1;
      v21 = v13 + v16 + v20 * v17;
      v15 = v18;
      result = outlined init with take of __RKEntityActionSpecification(v39, v21, v18);
      v5 = v36;
      v6 = v37;
    }
    else
    {
      result = outlined destroy of __RKEntityActionSpecification((uint64_t)v10, v15);
    }
    if (v38 == ++v14)
    {
      v13 = v40;
      v4 = v34;
      v1 = v35;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Entity.__loadModelAsync(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  LOWORD(v13) = 512;
  *((_QWORD *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((_QWORD *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  v8 = specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v42 = a8;
  v38 = a2;
  v39 = a7;
  v46 = a10;
  v41 = a9;
  v40 = type metadata accessor for DispatchWorkItemFlags();
  v45 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v43 = *(_QWORD *)(v18 - 8);
  v44 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50910;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v23 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000018;
  *(_QWORD *)(inited + 56) = 0x800000021BE90B40;
  *(_QWORD *)(inited + 72) = v23;
  *(_QWORD *)(inited + 80) = 0x64656D616ELL;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = a3;
  *(_QWORD *)(inited + 104) = a4;
  *(_QWORD *)(inited + 120) = v23;
  *(_QWORD *)(inited + 128) = 0x656C646E7562;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  v24 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(_QWORD *)(inited + 144) = a5;
  *(_QWORD *)(inited + 168) = v24;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  v25 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = *(_BYTE *)(a6 + 48);
  *(_QWORD *)(inited + 216) = v25;
  *(_QWORD *)(inited + 224) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 232) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(a6, (uint64_t)&v49);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v39;
  v27 = v50;
  *(_OWORD *)(v26 + 24) = v49;
  *(_OWORD *)(v26 + 40) = v27;
  v28 = v52;
  *(_OWORD *)(v26 + 56) = v51;
  *(_OWORD *)(v26 + 72) = v28;
  *(_QWORD *)(v26 + 88) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v26 + 96) = v21;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  *(_QWORD *)(v29 + 24) = v26;
  *(_QWORD *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 248) = v29;
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = a5;
  swift_retain();
  swift_retain();
  v31 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  outlined init with copy of __REAssetService(v41, (uint64_t)v48);
  v32 = (_QWORD *)swift_allocObject();
  v33 = v42;
  v32[2] = v42;
  outlined init with take of BindableDataInternal(v48, (uint64_t)(v32 + 3));
  v32[8] = v31;
  v32[9] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v32[10] = v21;
  *(_QWORD *)&v51 = partial apply for doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  *((_QWORD *)&v51 + 1) = v32;
  *(_QWORD *)&v49 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v49 + 1) = 1107296256;
  *(_QWORD *)&v50 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  *((_QWORD *)&v50 + 1) = &block_descriptor_305;
  v34 = _Block_copy(&v49);
  v35 = v33;
  static DispatchQoS.unspecified.getter();
  v47 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v36 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v20, v17, v34);
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v36);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v44);
  return swift_release();
}

uint64_t doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  _QWORD v20[3];
  _QWORD aBlock[6];
  __int128 v22[2];

  v20[1] = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v20[0] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetService(a2, (uint64_t)v22);
  v17 = (_QWORD *)swift_allocObject();
  outlined init with take of BindableDataInternal(v22, (uint64_t)(v17 + 2));
  v17[7] = a3;
  v17[8] = a4;
  v17[9] = a5;
  aBlock[4] = partial apply for closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_311_0;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[2] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v10, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v20[0] + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a2, v3, v4);
}

void closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(void (*a1)(_OWORD *), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void (*v32)(_OWORD *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];
  _OWORD v41[4];

  v34 = a8;
  v33 = a7;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  v32 = a1;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  v20 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v21 = (void *)MEMORY[0x220768C3C](a4, a5);
  swift_bridgeObjectRelease();
  v22 = RESceneImportOperationCreateWithBundleResource();

  if (v22)
  {
    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    v23 = __SceneImportOperation.init(core:)(v22);

    swift_release();
    v24 = v33;
    RESceneImportOperationSetMergeIntoSingleEntity();
    RESceneImportOperationSetGenerateDecimatedMesh();
    RESceneImportOperationSetUnitType();
    RESceneImportOperationSetIsolateFromEngine();
    outlined init with copy of Entity.__LoadOptions(v24, (uint64_t)v41);
    v25 = swift_allocObject();
    v26 = v41[1];
    *(_OWORD *)(v25 + 40) = v41[0];
    *(_OWORD *)(v25 + 56) = v26;
    v27 = v41[3];
    *(_OWORD *)(v25 + 72) = v41[2];
    *(_QWORD *)(v25 + 16) = v23;
    *(_QWORD *)(v25 + 24) = a6;
    *(_QWORD *)(v25 + 32) = v34;
    *(_OWORD *)(v25 + 88) = v27;
    *(_QWORD *)(v25 + 104) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    *(_QWORD *)(v25 + 112) = v19;
    aBlock[4] = partial apply for doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_327;
    v28 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v39 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v29 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v18, v16, v28);
    _Block_release(v28);
    swift_release();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v29);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
    swift_release();
  }
  else
  {
    swift_release();

    swift_release();
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v30 = (void *)swift_allocError();
    *v31 = a4;
    v31[1] = a5;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)&v41[0] = v30;
    BYTE8(v41[0]) = 1;
    swift_bridgeObjectRetain();
    v32(v41);

  }
}

void doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];

  __SceneImportOperation.run()();
  swift_beginAccess();
  swift_unownedRetainStrong();
  if (v11)
  {
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = a5;
    v12[3] = a6;
    v12[4] = v11;
    swift_retain();
    v13 = v11;
    __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:), (uint64_t)v12);
    swift_release();
    swift_release();

  }
  else
  {
    outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v17);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = a3;
    v15 = v17[1];
    *(_OWORD *)(v14 + 32) = v17[0];
    *(_OWORD *)(v14 + 48) = v15;
    v16 = v17[3];
    *(_OWORD *)(v14 + 64) = v17[2];
    *(_OWORD *)(v14 + 80) = v16;
    *(_QWORD *)(v14 + 96) = a5;
    *(_QWORD *)(v14 + 104) = a6;
    swift_retain();
    swift_retain();
    swift_retain();
    __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:), v14);
    swift_release();
    swift_release();
  }
}

void (*static Entity.loadModel(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3))(char *, uint64_t, uint64_t)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[3];
  __int128 v19;

  type metadata accessor for Entity.LoadStatistics();
  v7 = swift_allocObject();
  Date.init()();
  v8 = v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 2;
  *(_QWORD *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  v9 = (_QWORD *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *v9 = 0xD000000000000026;
  v9[1] = 0x800000021BE90590;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  LOWORD(v15) = 512;
  *((_QWORD *)&v15 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v16, (uint64_t)&v12);
  *((_QWORD *)&v14 + 1) = 0;
  v18[0] = v12;
  v18[1] = v13;
  v18[2] = (unint64_t)v14;
  v19 = v15;
  swift_retain();
  swift_release();
  *((_QWORD *)&v19 + 1) = v7;
  v10 = specialized static Entity.loadModel(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v18);
  if (!v3)
    Entity.LoadStatistics.log()();
  swift_release();
  outlined destroy of Entity.__LoadOptions((uint64_t)v18);
  return v10;
}

void (*static Entity.loadModel(contentsOf:withName:reorderVertexCaching:)(uint64_t a1, uint64_t a2, void *a3, char a4))(char *, uint64_t, uint64_t)
{
  void (*v8)(char *, uint64_t, uint64_t);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  LOWORD(v13) = 512;
  *((_QWORD *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((_QWORD *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  v17 = v13;
  BYTE1(v17) = a4;
  v8 = specialized static Entity.loadModel(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t static Entity.loadModelAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[3];
  __int128 v16;

  swift_beginAccess();
  v6 = static RKARSystemCore.generateDecimatedMeshes;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LOWORD(v12) = 512;
  *((_QWORD *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((_QWORD *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  v7 = specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t static Entity.__loadModelAsync(contentsOf:withName:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  LOWORD(v13) = 512;
  *((_QWORD *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((_QWORD *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  v8 = specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  NSURL *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  Swift::String_optional v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[6];
  _OWORD v60[4];

  v49 = a8;
  v46 = a7;
  v45 = a5;
  v50 = a2;
  v47 = a1;
  v55 = a10;
  v48 = a9;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v56 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for DispatchQoS();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v51 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v45 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v23((char *)&v45 - v21, a3, v15, v20);
  swift_retain();
  URL._bridgeToObjectiveC()(v24);
  v26 = v25;
  swift_beginAccess();
  v27 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_allocObject();
  v28 = __SceneImportOperation.init(core:)(v27);
  swift_release();
  v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  v29(v22, v15);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, a3, v15);
  if (a6)
  {
    swift_bridgeObjectRetain();
    v30 = v45;
  }
  else
  {
    URL.deletingPathExtension()();
    v30 = URL.lastPathComponent.getter();
    a6 = v31;
    v29(v22, v15);
  }
  v29(v18, v15);
  v32 = v46;
  v33.value._countAndFlagsBits = v30;
  v33.value._object = a6;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v33, 1, *(_BYTE *)(v46 + 48), (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  RESceneImportOperationSetIsolateFromEngine();
  outlined init with copy of Entity.__LoadOptions(v32, (uint64_t)v60);
  v34 = swift_allocObject();
  v35 = v60[1];
  *(_OWORD *)(v34 + 40) = v60[0];
  *(_OWORD *)(v34 + 56) = v35;
  v36 = v60[3];
  *(_OWORD *)(v34 + 72) = v60[2];
  v37 = v49;
  *(_QWORD *)(v34 + 16) = v28;
  *(_QWORD *)(v34 + 24) = v37;
  *(_QWORD *)(v34 + 32) = v48;
  *(_OWORD *)(v34 + 88) = v36;
  v38 = v50;
  *(_QWORD *)(v34 + 104) = v47;
  *(_QWORD *)(v34 + 112) = v38;
  aBlock[4] = partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_262;
  v39 = _Block_copy(aBlock);
  swift_retain();
  v40 = v37;
  swift_retain();
  swift_retain();
  v41 = v51;
  static DispatchQoS.unspecified.getter();
  v58 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v42 = v54;
  v43 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v41, v42, v39);
  _Block_release(v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v53);
  return swift_release();
}

uint64_t doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  __int128 aBlock;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v26 = a2;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __SceneImportOperation.run()();
  if (v17)
  {
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = a5;
    v18[3] = a6;
    v18[4] = v17;
    *(_QWORD *)&v33 = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    *((_QWORD *)&v33 + 1) = v18;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v32 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v32 + 1) = &block_descriptor_268;
    v19 = _Block_copy(&aBlock);
    swift_retain();
    v20 = v17;
    static DispatchQoS.unspecified.getter();
    v30[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v16, v13, v19);
    _Block_release(v19);

  }
  else
  {
    outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)&aBlock);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = a3;
    v22 = v32;
    *(_OWORD *)(v21 + 32) = aBlock;
    *(_OWORD *)(v21 + 48) = v22;
    v23 = v34;
    *(_OWORD *)(v21 + 64) = v33;
    *(_OWORD *)(v21 + 80) = v23;
    *(_QWORD *)(v21 + 96) = a5;
    *(_QWORD *)(v21 + 104) = a6;
    v30[4] = partial apply for closure #1 in doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
    v30[5] = v21;
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 1107296256;
    v30[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v30[3] = &block_descriptor_274;
    v24 = _Block_copy(v30);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v29 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2207693A4](0, v16, v13, v24);
    _Block_release(v24);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v28);
  return swift_release();
}

void closure #1 in doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  void *v8;
  id v9;
  uint64_t v10;
  _BYTE v11[72];

  __SceneImportOperation.publishToEngine()();
  if (v8)
  {
    v9 = v8;
    a4((uint64_t)v8, 1);

  }
  else
  {
    v10 = __SceneImportOperation.makeModelEntity()();
    outlined init with copy of Entity.__LoadOptions(a3, (uint64_t)v11);
    specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v10, (uint64_t)v11, a4, a5, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
}

uint64_t closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v31[4];

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50910;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000015;
  *(_QWORD *)(inited + 56) = 0x800000021BE90B00;
  *(_QWORD *)(inited + 72) = v16;
  *(_QWORD *)(inited + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(inited + 88) = 0xEA0000000000664FLL;
  v17 = type metadata accessor for URL();
  *(_QWORD *)(inited + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(boxed_opaque_existential_1, a3, v17);
  *(_QWORD *)(inited + 128) = 0x656D614E68746977;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(inited + 144) = a4;
  *(_QWORD *)(inited + 152) = a5;
  *(_QWORD *)(inited + 168) = v19;
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000021BE903F0;
  v20 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = *(_BYTE *)(a6 + 48);
  *(_QWORD *)(inited + 216) = v20;
  *(_QWORD *)(inited + 224) = 0x6C6C69666C7566;
  *(_QWORD *)(inited + 232) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(a6, (uint64_t)v31);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a7;
  v22 = v31[1];
  *(_OWORD *)(v21 + 24) = v31[0];
  *(_OWORD *)(v21 + 40) = v22;
  v23 = v31[3];
  *(_OWORD *)(v21 + 56) = v31[2];
  *(_OWORD *)(v21 + 72) = v23;
  *(_QWORD *)(v21 + 88) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v21 + 96) = v14;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for closure #1 in closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
  *(_QWORD *)(v24 + 24) = v21;
  *(_QWORD *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(_QWORD *)(inited + 248) = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v26 = a8[3];
  v27 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v26);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 40))(v25, v26, v27);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *, uint64_t), uint64_t a6, void (*a7)(void), uint64_t (*a8)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))
{
  uint64_t v13;
  _BYTE v15[64];

  if ((a2 & 1) != 0)
    return a5(a1, 1);
  outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v15);
  v13 = swift_retain();
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v13, (uint64_t)v15, (void (*)(uint64_t, _QWORD))a5, a6, a7, a8);
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTm(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain();
  a3(a6, v10);
  return swift_release();
}

uint64_t static Entity.__loadAllAsync(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v1 = specialized static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(a1, (uint64_t)v3);
  outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  return v1;
}

uint64_t closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];
  _BYTE v41[48];

  v38 = a7;
  v31 = a4;
  v32 = a6;
  v30 = a2;
  v34 = type metadata accessor for DispatchWorkItemFlags();
  v37 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v12 - 8);
  v36 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  outlined init with copy of (Int, URL)(a3, (uint64_t)v41, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
  v20 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject();
  outlined init with take of Transform?((uint64_t)v41, v22 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  *(_QWORD *)(v22 + 56) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22 + v20, v18, v15);
  v23 = v32;
  *(_QWORD *)(v22 + v21) = v32;
  v24 = (_QWORD *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v24 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v24[1] = v19;
  aBlock[4] = partial apply for doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_186_0;
  v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v26 = v23;
  static DispatchQoS.unspecified.getter();
  v39 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v28 = v33;
  v27 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v14, v28, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  return swift_release();
}

uint64_t doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[7];
  uint64_t aBlock;
  __int128 v33;
  _BYTE v34[73];
  __int16 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v24 = a6;
  v23 = a5;
  v26 = a4;
  v29 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS();
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v35 = 1;
  v36 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  LOBYTE(aBlock) = 1;
  outlined assign with copy of __DownsamplingStrategy?(a1, (uint64_t)&v34[8]);
  v15 = __SceneResourceCache.loadSceneResources(url:options:)(a3, (uint64_t)&aBlock);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v18 = (_QWORD *)(v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  v19 = v24;
  *v18 = v23;
  v18[1] = v19;
  v31[4] = partial apply for closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
  v31[5] = v17;
  v31[0] = MEMORY[0x24BDAC760];
  v31[1] = 1107296256;
  v31[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v31[3] = &block_descriptor_198;
  v20 = _Block_copy(v31);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v21 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v11, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v28);
  swift_release();
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
}

uint64_t closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL *v10;
  void *v11;
  uint64_t v12;
  _QWORD v15[4];
  uint64_t v16;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v7 = a1 + 56;
    do
    {
      v8 = *(_QWORD *)(v7 - 16);
      v9 = *(_QWORD *)(v7 - 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      v10 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v15, 0);
      v15[0] = v8;
      v15[1] = v9;
      swift_bridgeObjectRetain_n();
      v11 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      swift_beginAccess();
      objc_setAssociatedObject(v10, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v11, (void *)0x301);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      __SceneResourceCache.Entry.attach(toEntity:)(v10);
      v12 = type metadata accessor for Entity();
      RENetworkComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      specialized static Entity.enumerateCore(entity:recursive:block:)((uint64_t)v10, 1, v12);
      static UuidRemapHelper.remapIdentifiersAndInteractions(root:)((uint64_t)v10);
      if ((REShadowsGetEnableDefaultShadows() & 1) != 0)
        MEMORY[0x22076F17C](*((_QWORD *)v10 + 2), 1);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += 40;
      --v4;
    }
    while (v4);
    v5 = v16;
    v3 = a3;
  }
  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REMetricLoadFile();
  swift_release();
  v3(v5, 0);
  return swift_bridgeObjectRelease();
}

uint64_t static Entity.generateMeshForStatic3DText(root:generatedTextAssets:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjCClassMetadata;
  ValueMetadata **v7;
  ValueMetadata *v8;
  uint64_t Child;
  uint64_t v10;
  id v11;
  uint64_t Object;
  unsigned __int8 *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t Description;
  unint64_t Kind;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  if (result)
  {
    v3 = v2;
    v5 = result;
    swift_retain();
    REStatic3DTextComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REMeshComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (!REMeshComponentGetMesh())
      {
        if (REStatic3DTextComponentGetText())
        {
          if (REStatic3DTextComponentGetFont())
          {
            v30 = specialized static __ServiceLocator.shared.getter() + 120;
            swift_beginAccess();
            outlined init with copy of __REAssetService(v30, (uint64_t)v36);
            v31 = v37;
            v32 = v38;
            __swift_project_boxed_opaque_existential_1(v36, v37);
            (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
            REStatic3DTextComponentGetFontSize();
            REStatic3DTextComponentGetExtrusionDepth();
            REStatic3DTextComponentGetSegmentDensity();
            REStatic3DTextComponentGetTextFrameOrigin();
            REStatic3DTextComponentGetTextFrameSize();
            REStatic3DTextComponentGetLineBreakMode();
            REStatic3DTextComponentGetTextAlignment();
            REStatic3DTextComponentGetVerticalTextAlignment();
            ObjCClassMetadata = REAssetManagerMeshMemoryAssetCreate3dText();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
            if (ObjCClassMetadata)
            {
              REAssetSetNetworkSharingMode();
              REMeshComponentSetMesh();
              RERelease();
              if (a2)
              {
                v7 = (ValueMetadata **)(a2 + 16);
                swift_beginAccess();
                v8 = *(ValueMetadata **)(a2 + 16);
                swift_retain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(a2 + 16) = v8;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
LABEL_53:
                  v8 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[1].Kind + 1, 1, v8);
                  *v7 = v8;
                }
                Kind = v8[1].Kind;
                Description = (unint64_t)v8[1].Description;
                if (Kind >= Description >> 1)
                {
                  v8 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(Description > 1), Kind + 1, 1, v8);
                  *v7 = v8;
                }
                v8[1].Kind = Kind + 1;
                *(&v8[2].Kind + Kind) = ObjCClassMetadata;
                swift_endAccess();
                swift_release();
              }
            }
          }
        }
      }
    }
    ObjCClassMetadata = *(_QWORD *)(v5 + 16);
    swift_retain();
    if (REEntityGetChildCount() >= 1)
    {
      v7 = 0;
      v8 = &type metadata for __EntityInfoComponent;
      do
      {
        if ((uint64_t)v7 >= REEntityGetChildCount())
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        Child = REEntityGetChild();
        if (!Child)
          goto LABEL_52;
        v10 = Child;
        v11 = (id)REEntityGetSwiftObject();
        if (v11)
        {
          ObjCClassMetadata = (uint64_t)v11;
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
            goto LABEL_51;
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent())
            goto LABEL_36;
          Object = RECustomComponentGetObject();
          if (!Object)
            goto LABEL_36;
          v13 = *(unsigned __int8 **)Object;
          ObjCClassMetadata = *(_QWORD *)(Object + 8);
          if (ObjCClassMetadata)
            v14 = 1;
          else
            v14 = v13 == 0;
          if (v14)
          {
            result = swift_retain();
          }
          else
          {
            v15 = *v13;
            v16 = String.init(utf8String:)();
            if (v17)
              v18 = v16;
            else
              v18 = 0;
            if (v17)
              v19 = v17;
            else
              v19 = 0xE000000000000000;
            v13 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            ObjCClassMetadata = result;
            *(_QWORD *)(result + 16) = v13;
          }
          if (!v13)
          {
            __break(1u);
            return result;
          }
          swift_retain();
          v20 = String.init(utf8String:)();
          v22 = v21;
          swift_release();
          v23 = v22 ? v20 : 0;
          v24 = v22 ? v22 : 0xE000000000000000;
          v25 = (NSString *)MEMORY[0x220768C3C](v23, v24);
          swift_bridgeObjectRelease();
          v26 = NSClassFromString(v25);

          swift_release();
          if (!v26)
            goto LABEL_36;
          ObjCClassMetadata = swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          v27 = swift_dynamicCastMetatype();
          if (v27)
          {
            v28 = (*(uint64_t (**)(void))(v27 + 232))();
            ObjCClassMetadata = *(_QWORD *)(v28 + 16);
            swift_retain();
            MEMORY[0x22076D160](ObjCClassMetadata, 0);
            *(_QWORD *)(v28 + 16) = v10;
            MEMORY[0x22076D160](v10, v28);
            swift_release();
          }
          else
          {
LABEL_36:
            makeEntity(for:)(v10);
          }
        }
        if ((uint64_t)v7 >= REEntityGetChildCount())
          goto LABEL_50;
        v7 = (ValueMetadata **)((char *)v7 + 1);
        v29 = swift_retain();
        ObjCClassMetadata = v3;
        static Entity.generateMeshForStatic3DText(root:generatedTextAssets:)(v29, a2);
        swift_release_n();
      }
      while ((uint64_t)v7 < REEntityGetChildCount());
    }
    return swift_release_n();
  }
  return result;
}

uint64_t static Entity.enumerateReferences(root:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = MEMORY[0x24BEE4AF8];
  REReferenceComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v3 = swift_retain();
    MEMORY[0x220768F0C](v3);
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v1, &v5);
  return v5;
}

void specialized static Entity.enumerateCore(entity:recursive:block:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t ChildCount;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  ChildCount = REEntityGetChildCount();
  if ((unint64_t)(ChildCount - 0x1000000000000000) >> 61 == 7)
  {
    v6 = ChildCount;
    v7 = swift_slowAlloc();
    REEntityGetChildren();
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v8 = (uint64_t *)v7;
        do
        {
          v9 = *v8;
          if (!*v8)
            goto LABEL_20;
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v10 = swift_dynamicCastClassUnconditional();
          }
          else
          {
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
              __break(1u);
              goto LABEL_18;
            }
            v12 = specialized static Entity.entityInfoType(_:)();
            if (v12)
            {
              v11 = (*(uint64_t (**)(void))(v12 + 232))();
              v13 = *(_QWORD *)(v11 + 16);
              swift_retain();
              MEMORY[0x22076D160](v13, 0);
              *(_QWORD *)(v11 + 16) = v9;
              MEMORY[0x22076D160](v9, v11);
              swift_release();
              goto LABEL_13;
            }
            v10 = makeEntity(for:)(v9);
          }
          v11 = v10;
LABEL_13:
          RENetworkComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          if ((a2 & 1) != 0)
            specialized static Entity.enumerateCore(entity:recursive:block:)(v11, 1, a3);
          swift_release();
          ++v8;
          --v6;
        }
        while (v6);
      }
LABEL_21:
      JUMPOUT(0x220772F44);
    }
  }
  else
  {
LABEL_18:
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
  goto LABEL_21;
}

void specialized static Entity.enumerateCore(entity:recursive:block:)(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ChildCount;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  ChildCount = REEntityGetChildCount();
  if ((unint64_t)(ChildCount - 0x1000000000000000) >> 61 == 7)
  {
    v8 = ChildCount;
    v9 = swift_slowAlloc();
    REEntityGetChildren();
    if ((v8 & 0x8000000000000000) == 0)
    {
      if (v8)
      {
        v10 = (uint64_t *)v9;
        do
        {
          v11 = *v10;
          if (!*v10)
            goto LABEL_24;
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v12 = swift_dynamicCastClassUnconditional();
          }
          else
          {
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
              __break(1u);
              goto LABEL_22;
            }
            v14 = specialized static Entity.entityInfoType(_:)();
            if (v14)
            {
              v13 = (*(uint64_t (**)(void))(v14 + 232))();
              v15 = *(_QWORD *)(v13 + 16);
              swift_retain();
              MEMORY[0x22076D160](v15, 0);
              *(_QWORD *)(v13 + 16) = v11;
              MEMORY[0x22076D160](v11, v13);
              swift_release();
              goto LABEL_13;
            }
            v12 = makeEntity(for:)(v11);
          }
          v13 = v12;
LABEL_13:
          REReferenceComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            v16 = swift_retain();
            MEMORY[0x220768F0C](v16);
            if (*(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          if ((a2 & 1) != 0)
            specialized static Entity.enumerateCore(entity:recursive:block:)(v13, 1, a3, a4);
          swift_release();
          ++v10;
          --v8;
        }
        while (v8);
      }
LABEL_25:
      JUMPOUT(0x220772F44);
    }
  }
  else
  {
LABEL_22:
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
  goto LABEL_25;
}

uint64_t closure #1 in static Entity.loadReferences(root:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[13] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in static Entity.loadReferences(root:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE v28[40];

  v1 = *(_QWORD *)(v0 + 80);
  swift_release();
  if (v1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    v3 = *(_QWORD *)(v0 + 80);
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v3 = *(_QWORD *)(v0 + 80);
    if (v2)
    {
LABEL_3:
      v4 = 0;
      v22 = (_QWORD *)(v0 + 16);
      v5 = v1 & 0xC000000000000001;
      v26 = v3 + 32;
      v24 = v2;
      v23 = v1 & 0xC000000000000001;
      v25 = v0;
      do
      {
        if (v5)
        {
          v6 = MEMORY[0x220769770](v4, *(_QWORD *)(v0 + 80));
          v7 = v4 + 1;
          if (__OFADD__(v4, 1))
            goto LABEL_24;
        }
        else
        {
          v6 = *(_QWORD *)(v26 + 8 * v4);
          swift_retain();
          v7 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        swift_retain();
        if (REEntityGetComponent())
        {
          ReferenceComponent.init(from:)((uint64_t)v28);
          swift_release();
          v1 = v28[33];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v1 & 1) != 0)
          {
            swift_release();
          }
          else
          {
            v9 = *(_QWORD *)(v0 + 88);
            v8 = *(_QWORD *)(v0 + 96);
            v10 = type metadata accessor for TaskPriority();
            v11 = *(_QWORD *)(v10 - 8);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1, 1, v10);
            v12 = (_QWORD *)swift_allocObject();
            v12[2] = 0;
            v13 = v12 + 2;
            v12[3] = 0;
            v12[4] = v6;
            v27 = v12;
            outlined init with copy of (Int, URL)(v8, v9, &demangling cache variable for type metadata for TaskPriority?);
            LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
            swift_retain();
            v14 = *(_QWORD *)(v0 + 88);
            if ((_DWORD)v9 == 1)
            {
              outlined destroy of BodyTrackingComponent?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for TaskPriority?);
            }
            else
            {
              TaskPriority.rawValue.getter();
              (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
            }
            v1 = (unint64_t)v27;
            if (*v13)
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              v15 = dispatch thunk of Actor.unownedExecutor.getter();
              v17 = v16;
              swift_unknownObjectRelease();
            }
            else
            {
              v15 = 0;
              v17 = 0;
            }
            v2 = v24;
            v18 = **(_QWORD **)(v25 + 72);
            v19 = (_QWORD *)(v17 | v15);
            if (v17 | v15)
            {
              v19 = v22;
              *v22 = 0;
              v22[1] = 0;
              *(_QWORD *)(v25 + 32) = v15;
              *(_QWORD *)(v25 + 40) = v17;
            }
            v5 = v23;
            v20 = *(_QWORD *)(v25 + 96);
            *(_QWORD *)(v25 + 48) = 1;
            *(_QWORD *)(v25 + 56) = v19;
            *(_QWORD *)(v25 + 64) = v18;
            swift_task_create();
            swift_release();
            swift_release();
            outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for TaskPriority?);
            v0 = v25;
          }
        }
        else
        {
          swift_release_n();
        }
        ++v4;
      }
      while (v7 != v2);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in static Entity.loadReferences(root:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return static ReferenceComponent.loadReference(at:)(a4);
}

uint64_t fetchTapTriggerTargetIdentifiers #1 (triggerSpecification:) in static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v28 = (uint64_t)&v28 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v28 - v18;
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v28 - v18, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v19, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
    swift_beginAccess();
    v26 = v28;
    specialized Set._Variant.insert(_:)(v28, v7);
    swift_endAccess();
    v27 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v27(v26, v4);
    return ((uint64_t (*)(char *, uint64_t))v27)(v12, v4);
  }
  else if (EnumCaseMultiPayload == 5)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v19 + 16);
    if (v22)
    {
      v23 = *(_QWORD *)v19
          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v24 = *(_QWORD *)(v14 + 72);
      do
      {
        outlined init with copy of __RKEntityActionSpecification(v23, (uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
        fetchTapTriggerTargetIdentifiers #1 (triggerSpecification:) in static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(v16, a2);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
        v23 += v24;
        --v22;
      }
      while (v22);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    return outlined destroy of __RKEntityActionSpecification((uint64_t)v19, type metadata accessor for __RKEntityTriggerSpecification);
  }
}

BOOL *static Entity.load(assetDescriptor:)()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  BOOL *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL *v10;
  BOOL *v11;
  _QWORD *v12;
  uint64_t v14;
  char v15[32];
  uint64_t v16;
  BOOL v17[24];
  uint64_t v18;
  BOOL *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for synchronousLoadOptions != -1)
    swift_once();
  v1 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  v2 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  inited = swift_initStackObject();
  swift_weakInit();
  *(_QWORD *)(inited + 16) = 0xD000000000000014;
  *(_QWORD *)(inited + 24) = 0x800000021BE905C0;
  *(_BYTE *)(inited + 32) = v1;
  *(_BYTE *)(inited + 33) = v2;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v17);
  v5 = v18;
  v6 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*((void (**)(uint64_t, BOOL *))v6 + 4))(v5, v6);
  v7 = REAssetHandleCreateWithAssetDescriptor();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v17);
  v9 = v18;
  v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*((void (**)(uint64_t, BOOL *))v10 + 4))(v9, v10);
  REAssetManagerCreateAssetRequest();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v16 = 0;
  if (!REAssetLoadRequestSetLoadAndWaitForResourceSharingClients())
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    *v12 = 0xD000000000000046;
    v12[1] = 0x800000021BE905E0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_8;
  }
  REAssetLoadRequestAddAsset();
  REAssetLoadRequestWaitForCompletion();
  v18 = MEMORY[0x24BEE27D0];
  *(_QWORD *)v17 = v7;
  outlined init with copy of Any((uint64_t)v17, (uint64_t)v15);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  RERetain();
  type metadata accessor for __SceneResource();
  *(_QWORD *)(swift_initStackObject() + 16) = v14;
  v11 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, v17, 0);
  if (v0)
  {
    swift_setDeallocating();
    RERelease();
LABEL_8:
    RERelease();
    RERelease();
    swift_release();
    return v10;
  }
  v10 = v11;
  specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v11);
  swift_setDeallocating();
  RERelease();
  RERelease();
  RERelease();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return v10;
}

uint64_t static Entity.loadAsync(assetDescriptor:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;

  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *a1;
  v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 24);
  swift_unownedRetainStrong();
  v9 = *(void **)(v8 + 32);
  swift_retain();
  v10 = v9;
  swift_release();
  *v5 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for LoadRequestDependencies();
  v2 = swift_allocObject();
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 16) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v13;
  LODWORD(v3) = 1;
  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = v12;
  swift_bridgeObjectRelease();
  if (one-time initialization token for asynchronousLoadOptions != -1)
LABEL_5:
    swift_once();
  v14 = static Entity.asynchronousLoadOptions;
  swift_beginAccess();
  v15 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  v16 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v16 + 16) = 0xD000000000000014;
  *(_QWORD *)(v16 + 24) = 0x800000021BE905C0;
  *(_BYTE *)(v16 + 32) = v14;
  *(_BYTE *)(v16 + 33) = v15;
  *(_WORD *)(v16 + 34) = v3;
  *(_DWORD *)(v16 + 36) = v3;
  swift_weakAssign();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)(v17 + 24) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
  v18 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
  v19 = swift_allocObject();
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 24) = 0;
  *(_BYTE *)(v19 + 32) = -1;
  *(_QWORD *)(v18 + 16) = v19;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = partial apply for closure #1 in static Entity.loadAsync(assetDescriptor:);
  v21[3] = v17;
  v21[4] = v19;
  v21[5] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
  swift_allocObject();
  swift_retain();
  v22 = Future.init(_:)();
  swift_release();

  *(_QWORD *)(v18 + 24) = v22;
  return v18;
}

void closure #1 in static Entity.loadAsync(assetDescriptor:)(void (*a1)(void **), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(char);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(char);
  uint64_t AssetRequest;
  uint64_t v16;
  void *v17;
  uint64_t (*v18)(char);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  id v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void *v32;
  uint64_t (*v33)(char);
  _QWORD *v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  swift_retain();
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v29);
  v9 = v32;
  v10 = v33;
  __swift_project_boxed_opaque_existential_1(&v29, (uint64_t)v32);
  (*((void (**)(void *, uint64_t (*)(char)))v10 + 4))(v9, v10);
  v11 = REAssetHandleCreateWithAssetDescriptor();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  v12 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)&v29);
  v13 = v32;
  v14 = v33;
  __swift_project_boxed_opaque_existential_1(&v29, (uint64_t)v32);
  (*((void (**)(void *, uint64_t (*)(char)))v14 + 4))(v13, v14);
  AssetRequest = REAssetManagerCreateAssetRequest();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  v38 = 0;
  v16 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v16, (uint64_t)&v29);
  v17 = v32;
  v18 = v33;
  __swift_project_boxed_opaque_existential_1(&v29, (uint64_t)v32);
  (*((void (**)(void *, uint64_t (*)(char)))v18 + 7))(v17, v18);
  v19 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v19, (uint64_t)v35);
  v20 = v36;
  v21 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v21 + 56))(v20, v21);
  LODWORD(v19) = REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  if ((_DWORD)v19)
  {
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v11;
    v22[3] = AssetRequest;
    v22[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v22[5] = v7;
    v22[6] = a4;
    v33 = partial apply for closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:);
    v34 = v22;
    v29 = (void *)MEMORY[0x24BDAC760];
    v30 = 1107296256;
    v31 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v32 = &block_descriptor_171;
    v23 = _Block_copy(&v29);
    swift_retain();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v23);
    REAssetLoadRequestAddAsset();
  }
  else
  {
    swift_release();
    v24 = v38;
    if (v38)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v25 = (void *)swift_allocError();
      *v26 = v24;
      v29 = v25;
      LOBYTE(v30) = 1;
      v27 = v24;
      a1(&v29);

    }
    else
    {
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      v25 = (void *)swift_allocError();
      *v28 = 0xD000000000000046;
      v28[1] = 0x800000021BE905E0;
      swift_storeEnumTagMultiPayload();
      v29 = v25;
      LOBYTE(v30) = 1;
      a1(&v29);
    }

  }
}

uint64_t closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:)(char a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v7;
  BOOL *v8;
  void *v9;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[32];

  if ((a1 & 1) != 0)
  {
    v12 = MEMORY[0x24BEE27D0];
    v11[0] = a2;
    outlined init with copy of Any((uint64_t)v11, (uint64_t)v16);
    swift_dynamicCast();
    v7 = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    RERetain();
    type metadata accessor for __SceneResource();
    *(_QWORD *)(swift_initStackObject() + 16) = v7;
    v8 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v11, 0);
    memset(v11, 0, sizeof(v11));
    v12 = 1;
    v13 = 0u;
    v14 = 0u;
    specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)((uint64_t)v8, (uint64_t)v11, a4, a5, (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    RERelease();
    return RERelease();
  }
  else
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v9 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    a4((uint64_t)v9, 1);

    RERelease();
    return RERelease();
  }
}

uint64_t specialized Entity.LoadFinisher.setupAfterRealityLoad(_:generatedTextAssets:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t result;

  v3 = v2;
  v6 = type metadata accessor for Entity();
  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(a1);
  if (v3[34] == 1)
  {
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v6);
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1);
  }
  static Entity.generateMeshForStatic3DText(root:generatedTextAssets:)(a1, a2);
  if (v3[35] == 1)
  {
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  if (v3[33] == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    return REEntityGetOrAddComponentByClass();
  }
  else
  {
    result = REShadowsGetEnableDefaultShadows();
    if ((result & 1) != 0)
      JUMPOUT(0x22076F17CLL);
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t RequestCopyError;
  uint64_t v8;
  uint64_t *v9;

  type metadata accessor for Entity.AssetArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = MEMORY[0x24BEE4AF8];
  v3 = inited + 16;
  specialized Entity.LoadFinisher.setupAfterRealityLoad(_:generatedTextAssets:)(a1, inited);
  swift_beginAccess();
  v4 = *(_QWORD *)v3;
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    String.utf8CString.getter();
    REMetricLoadFile();
LABEL_10:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  specialized Entity.LoadFinisher.makeLoadRequest()();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  REAssetLoadRequestWaitForCompletion();
  if (REAssetLoadRequestGetState() == 1)
    goto LABEL_10;
  RequestCopyError = REAssetLoadRequestCopyError();
  if (RequestCopyError)
  {
    v8 = RequestCopyError;
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
    swift_allocError();
    *v9 = v8;
  }
  else
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
  }
  swift_willThrow();
  swift_release();
  swift_setDeallocating();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD), uint64_t a4, uint64_t (*a5)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))
{
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t Stats;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t Strong;
  uint64_t v20;
  os_unfair_lock_s *v21;
  _QWORD *v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _OWORD v28[2];
  _QWORD v29[3];
  uint64_t Request;
  uint64_t v31;

  type metadata accessor for Entity.AssetArray();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = MEMORY[0x24BEE4AF8];
  specialized Entity.LoadFinisher.setupAfterRealityLoad(_:generatedTextAssets:)(a1, inited);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(inited + 16) + 16))
  {
    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a3(a1, 0);
    return swift_release();
  }
  v11 = a5(a1, a3, a4);
  outlined init with copy of (Int, URL)(a2, (uint64_t)v29, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (Request == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    v12 = v31;
    swift_retain();
    outlined destroy of Entity.__LoadOptions((uint64_t)v29);
    if (v12)
    {
      Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      v14 = swift_allocObject();
      RERetain();
      *(_QWORD *)(v14 + 16) = Stats;
      v15 = (_QWORD *)(v12 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      v16 = swift_retain();
      MEMORY[0x220768F0C](v16);
      if (*(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)(inited + 16) + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v17; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return swift_release();
  }
  v20 = Strong;
  Request = type metadata accessor for __AssetLoadRequest();
  v29[0] = v11;
  v21 = (os_unfair_lock_s *)(*(_QWORD *)(v20 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v21);
  outlined init with copy of Any((uint64_t)v29, (uint64_t)v28);
  v22 = (_QWORD *)(v20 + 16);
  swift_beginAccess();
  v23 = *(_QWORD **)(v20 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v20 + 16) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *v22 = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *v22 = v23;
  }
  v23[2] = v26 + 1;
  outlined init with take of Any(v28, &v23[4 * v26 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v21);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(a1);
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultBody3DSkeletonDefinition);
  v5 = objc_msgSend(v4, sel_jointNames);

  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  _s10RealityKit6EntityC20withUnsafeJointNames33_F26D63620DB78A19432B1EBEC9E8266ALLyxSaySSG_xSPySPys4Int8VGSgGSgKXEtKlFZyt_Tgm504_s10a4Kit6c26C20withCharacterOptions33_hijklmn39ALLyxxSo08REEntityeF0azKXEKlFZxSPySPys4O19VGSgGSgKXEfU_yt_Tg5SiSo08REEntityS7Optionsaxs5Error_pRi_zRi0_zlyytIsglrzo_Tf1nnc_n(v6, *(_QWORD *)(v6 + 16), (void (*)(_QWORD))partial apply for specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:));
  result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if ((v1[34] & 1) != 0)
    {
      v8 = type metadata accessor for Entity();
      RENetworkComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v8);
      static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1);
    }
    if (v1[35] == 1)
    {
      RENetworkComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
    }
    if (v1[33] == 1)
    {
      RERayTracedShadowReceiverComponentGetComponentType();
      return REEntityGetOrAddComponentByClass();
    }
    else
    {
      result = REShadowsGetEnableDefaultShadows();
      if ((_DWORD)result)
        return MEMORY[0x22076F17C](*(_QWORD *)(a1 + 16), 1);
    }
  }
  return result;
}

{
  _BYTE *v1;
  uint64_t v3;
  uint64_t result;

  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(a1);
  if (v1[34] == 1)
  {
    v3 = type metadata accessor for Entity();
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v3);
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1);
  }
  if (v1[35] == 1)
  {
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  if (v1[33] == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    return REEntityGetOrAddComponentByClass();
  }
  else
  {
    result = REShadowsGetEnableDefaultShadows();
    if ((result & 1) != 0)
      return MEMORY[0x22076F17C](*(_QWORD *)(a1 + 16), 1);
  }
  return result;
}

uint64_t specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:)(uint64_t a1)
{
  uint64_t result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  REEntityCharacterSetup();
  result = REEntityCharacterGetJointCount();
  if (result != *(_QWORD *)(a1 + 8))
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t RequestCopyError;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  result = specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  if (!v2)
  {
    type metadata accessor for Entity.AssetArray();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = MEMORY[0x24BEE4AF8];
    specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(v4);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
    {
      specialized Entity.LoadFinisher.makeLoadRequest()();
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16);
      if (v5)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v5; ++i)
          REAssetLoadRequestAddAsset();
        swift_bridgeObjectRelease();
      }
      REAssetLoadRequestWaitForCompletion();
      if (REAssetLoadRequestGetState() != 1)
      {
        RequestCopyError = REAssetLoadRequestCopyError();
        if (RequestCopyError)
        {
          v14 = RequestCopyError;
          type metadata accessor for CFErrorRef(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
          swift_allocError();
          *v15 = v14;
        }
        else
        {
          type metadata accessor for Entity.LoadError(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
        }
        swift_willThrow();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      v7 = *(_QWORD *)(v1 + 16);
      v8 = *(_QWORD *)(v1 + 24);
      v9 = static os_log_type_t.info.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_bridgeObjectRetain_n();
      v10 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v10, v9))
      {
        v16 = v7;
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v17 = v12;
        *(_DWORD *)v11 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v8, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v10, v9, "No assets were found in file %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v12, -1, -1);
        MEMORY[0x220772F44](v11, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      String.utf8CString.getter();
      REMetricLoadFile();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t RequestCopyError;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  result = specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  if (!v3)
  {
    type metadata accessor for Entity.AssetArray();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = MEMORY[0x24BEE4AF8];
    a2();
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16))
    {
      specialized Entity.LoadFinisher.makeLoadRequest()();
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
      if (v7)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
          REAssetLoadRequestAddAsset();
        swift_bridgeObjectRelease();
      }
      REAssetLoadRequestWaitForCompletion();
      if (REAssetLoadRequestGetState() != 1)
      {
        RequestCopyError = REAssetLoadRequestCopyError();
        if (RequestCopyError)
        {
          v16 = RequestCopyError;
          type metadata accessor for CFErrorRef(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
          swift_allocError();
          *v17 = v16;
        }
        else
        {
          type metadata accessor for Entity.LoadError(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
        }
        swift_willThrow();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      v9 = *(_QWORD *)(v2 + 16);
      v10 = *(_QWORD *)(v2 + 24);
      v11 = static os_log_type_t.info.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_bridgeObjectRetain_n();
      v12 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v12, v11))
      {
        v18 = v9;
        v13 = (uint8_t *)swift_slowAlloc();
        v14 = swift_slowAlloc();
        v19 = v14;
        *(_DWORD *)v13 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v10, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v12, v11, "No assets were found in file %s", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v14, -1, -1);
        MEMORY[0x220772F44](v13, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      String.utf8CString.getter();
      REMetricLoadFile();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD), uint64_t a4, void (*a5)(void), uint64_t (*a6)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t Stats;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t Strong;
  uint64_t v29;
  os_unfair_lock_s *v30;
  _QWORD *v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39[3];
  uint64_t Request;
  uint64_t v41;

  specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  type metadata accessor for Entity.AssetArray();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = MEMORY[0x24BEE4AF8];
  v14 = v13 + 16;
  a5();
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v13 + 16) + 16))
  {
    v17 = *(_QWORD *)(v6 + 16);
    v16 = *(_QWORD *)(v6 + 24);
    v18 = static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    v19 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v19, v18))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v39[0] = v37;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v19, v18, "No assets were found in file %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v37, -1, -1);
      MEMORY[0x220772F44](v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a3(a1, 0);
    return swift_release();
  }
  v15 = a6(a1, a3, a4);
  outlined init with copy of (Int, URL)(a2, (uint64_t)v39, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (Request == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v39, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    v21 = v41;
    swift_retain();
    outlined destroy of Entity.__LoadOptions((uint64_t)v39);
    if (v21)
    {
      Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      v23 = swift_allocObject();
      RERetain();
      *(_QWORD *)(v23 + 16) = Stats;
      v24 = (_QWORD *)(v21 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      v25 = swift_retain();
      MEMORY[0x220768F0C](v25);
      if (*(_QWORD *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  v26 = *(_QWORD *)(*(_QWORD *)v14 + 16);
  if (v26)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v26; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return swift_release();
  }
  v29 = Strong;
  Request = type metadata accessor for __AssetLoadRequest();
  v39[0] = v15;
  v30 = (os_unfair_lock_s *)(*(_QWORD *)(v29 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v30);
  outlined init with copy of Any((uint64_t)v39, (uint64_t)v38);
  v31 = (_QWORD *)(v29 + 16);
  swift_beginAccess();
  v32 = *(_QWORD **)(v29 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v29 + 16) = v32;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    *v31 = v32;
  }
  v35 = v32[2];
  v34 = v32[3];
  if (v35 >= v34 >> 1)
  {
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
    *v31 = v32;
  }
  v32[2] = v35 + 1;
  outlined init with take of Any(v38, &v32[4 * v35 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v30);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Stats;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t Strong;
  uint64_t v25;
  os_unfair_lock_s *v26;
  _QWORD *v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35[3];
  uint64_t Request;
  uint64_t v37;

  specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  type metadata accessor for Entity.AssetArray();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = MEMORY[0x24BEE4AF8];
  specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(v9);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v9 + 16) + 16))
  {
    v11 = *(_QWORD *)(v4 + 16);
    v12 = *(_QWORD *)(v4 + 24);
    v13 = static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    v14 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v14, v13))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v33 = v11;
      v16 = swift_slowAlloc();
      v35[0] = v16;
      *(_DWORD *)v15 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v12, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v14, v13, "No assets were found in file %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v16, -1, -1);
      MEMORY[0x220772F44](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a3(a1, 0);
    return swift_release();
  }
  v10 = specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)a3, a4);
  outlined init with copy of (Int, URL)(a2, (uint64_t)v35, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (Request == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    v17 = v37;
    swift_retain();
    outlined destroy of Entity.__LoadOptions((uint64_t)v35);
    if (v17)
    {
      Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      v19 = swift_allocObject();
      RERetain();
      *(_QWORD *)(v19 + 16) = Stats;
      v20 = (_QWORD *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      v21 = swift_retain();
      MEMORY[0x220768F0C](v21);
      if (*(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16);
  if (v22)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v22; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return swift_release();
  }
  v25 = Strong;
  Request = type metadata accessor for __AssetLoadRequest();
  v35[0] = v10;
  v26 = (os_unfair_lock_s *)(*(_QWORD *)(v25 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v26);
  outlined init with copy of Any((uint64_t)v35, (uint64_t)v34);
  v27 = (_QWORD *)(v25 + 16);
  swift_beginAccess();
  v28 = *(_QWORD **)(v25 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v25 + 16) = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    *v27 = v28;
  }
  v31 = v28[2];
  v30 = v28[3];
  if (v31 >= v30 >> 1)
  {
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
    *v27 = v28;
  }
  v28[2] = v31 + 1;
  outlined init with take of Any(v34, &v28[4 * v31 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v26);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t specialized Entity.LoadFinisher.makeLoadRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)&v3);
  return specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(&v3, *(_BYTE *)(v0 + 32) != 2, (*(_BYTE *)(v0 + 32) & 0xFE) != 2);
}

uint64_t specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  _QWORD aBlock[6];

  v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 36);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = a2;
  *(_QWORD *)(v12 + 48) = a3;
  *(_QWORD *)(v12 + 56) = a1;
  *(_QWORD *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_38;
  v14 = _Block_copy(aBlock);
  v15 = _Block_copy(v14);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v19[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v19[5] = v16;
  v19[0] = v13;
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v19[3] = &block_descriptor_138;
  v17 = _Block_copy(v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v17);
  _Block_release(v14);
  swift_release();
  swift_release();
  return v7;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  _QWORD aBlock[6];

  v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 36);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = a2;
  *(_QWORD *)(v12 + 48) = a3;
  *(_QWORD *)(v12 + 56) = a1;
  *(_QWORD *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_354;
  v14 = _Block_copy(aBlock);
  v15 = _Block_copy(v14);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v19[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v19[5] = v16;
  v19[0] = v13;
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v19[3] = &block_descriptor_361;
  v17 = _Block_copy(v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v17);
  _Block_release(v14);
  swift_release();
  swift_release();
  return v7;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  _QWORD aBlock[6];

  v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 36);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = a2;
  *(_QWORD *)(v12 + 48) = a3;
  *(_QWORD *)(v12 + 56) = a1;
  *(_QWORD *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_554;
  v14 = _Block_copy(aBlock);
  v15 = _Block_copy(v14);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v19[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v19[5] = v16;
  v19[0] = v13;
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v19[3] = &block_descriptor_561;
  v17 = _Block_copy(v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v17);
  _Block_release(v14);
  swift_release();
  swift_release();
  return v7;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  _QWORD aBlock[6];

  v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 36);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = a2;
  *(_QWORD *)(v12 + 48) = a3;
  *(_QWORD *)(v12 + 56) = a1;
  *(_QWORD *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_230;
  v14 = _Block_copy(aBlock);
  v15 = _Block_copy(v14);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v19[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v19[5] = v16;
  v19[0] = v13;
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v19[3] = &block_descriptor_237;
  v17 = _Block_copy(v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v17);
  _Block_release(v14);
  swift_release();
  swift_release();
  return v7;
}

void specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];
  _QWORD aBlock[6];

  if ((a1 & 1) != 0)
  {
    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a5(a7, 0);
  }
  else
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v14 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    a5(v14, 1);

  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    aBlock[5] = 0;
    v15 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = a9;
    v16 = _Block_copy(aBlock);
    v17 = _Block_copy(v16);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v17;
    v20[4] = a11;
    v20[5] = v18;
    v20[0] = v15;
    v20[1] = 1107296256;
    v20[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v20[3] = a12;
    v19 = _Block_copy(v20);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v19);
    swift_release();
    _Block_release(v16);
  }
}

uint64_t specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(_QWORD *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      Child = REEntityGetChild();
      if (!Child)
        goto LABEL_41;
      v5 = Child;
      if ((id)REEntityGetSwiftObject())
        break;
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_40;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent())
        goto LABEL_33;
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_33;
      v8 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        swift_retain();
      }
      else
      {
        v10 = *v8;
        v11 = String.init(utf8String:)();
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v12)
          v14 = v12;
        else
          v14 = 0xE000000000000000;
        v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(_QWORD *)(swift_allocObject() + 16) = v8;
      }
      if (!v8)
        goto LABEL_42;
      swift_retain();
      v15 = String.init(utf8String:)();
      v17 = v16;
      swift_release();
      v18 = v17 ? v15 : 0;
      v19 = v17 ? v17 : 0xE000000000000000;
      v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
      swift_bridgeObjectRelease();
      v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      v23 = (*(uint64_t (**)(void))(v22 + 232))();
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain();
      MEMORY[0x22076D160](v24, 0);
      *(_QWORD *)(v23 + 16) = v5;
      MEMORY[0x22076D160](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount())
        goto LABEL_39;
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount())
        return swift_release();
    }
    type metadata accessor for Entity();
    v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(_QWORD *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      Child = REEntityGetChild();
      if (!Child)
        goto LABEL_41;
      v5 = Child;
      if ((id)REEntityGetSwiftObject())
        break;
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_40;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent())
        goto LABEL_33;
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_33;
      v8 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        swift_retain();
      }
      else
      {
        v10 = *v8;
        v11 = String.init(utf8String:)();
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v12)
          v14 = v12;
        else
          v14 = 0xE000000000000000;
        v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(_QWORD *)(swift_allocObject() + 16) = v8;
      }
      if (!v8)
        goto LABEL_42;
      swift_retain();
      v15 = String.init(utf8String:)();
      v17 = v16;
      swift_release();
      v18 = v17 ? v15 : 0;
      v19 = v17 ? v17 : 0xE000000000000000;
      v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
      swift_bridgeObjectRelease();
      v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      v23 = (*(uint64_t (**)(void))(v22 + 232))();
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain();
      MEMORY[0x22076D160](v24, 0);
      *(_QWORD *)(v23 + 16) = v5;
      MEMORY[0x22076D160](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount())
        goto LABEL_39;
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount())
        return swift_release();
    }
    type metadata accessor for Entity();
    v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(_QWORD *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      Child = REEntityGetChild();
      if (!Child)
        goto LABEL_41;
      v5 = Child;
      if ((id)REEntityGetSwiftObject())
        break;
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_40;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent())
        goto LABEL_33;
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_33;
      v8 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        swift_retain();
      }
      else
      {
        v10 = *v8;
        v11 = String.init(utf8String:)();
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v12)
          v14 = v12;
        else
          v14 = 0xE000000000000000;
        v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(_QWORD *)(swift_allocObject() + 16) = v8;
      }
      if (!v8)
        goto LABEL_42;
      swift_retain();
      v15 = String.init(utf8String:)();
      v17 = v16;
      swift_release();
      v18 = v17 ? v15 : 0;
      v19 = v17 ? v17 : 0xE000000000000000;
      v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
      swift_bridgeObjectRelease();
      v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      v23 = (*(uint64_t (**)(void))(v22 + 232))();
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain();
      MEMORY[0x22076D160](v24, 0);
      *(_QWORD *)(v23 + 16) = v5;
      MEMORY[0x22076D160](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount())
        goto LABEL_39;
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount())
        return swift_release();
    }
    type metadata accessor for Entity();
    v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(_QWORD *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      Child = REEntityGetChild();
      if (!Child)
        goto LABEL_41;
      v5 = Child;
      if ((id)REEntityGetSwiftObject())
        break;
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_40;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent())
        goto LABEL_33;
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_33;
      v8 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        swift_retain();
      }
      else
      {
        v10 = *v8;
        v11 = String.init(utf8String:)();
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v12)
          v14 = v12;
        else
          v14 = 0xE000000000000000;
        v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(_QWORD *)(swift_allocObject() + 16) = v8;
      }
      if (!v8)
        goto LABEL_42;
      swift_retain();
      v15 = String.init(utf8String:)();
      v17 = v16;
      swift_release();
      v18 = v17 ? v15 : 0;
      v19 = v17 ? v17 : 0xE000000000000000;
      v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
      swift_bridgeObjectRelease();
      v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      v23 = (*(uint64_t (**)(void))(v22 + 232))();
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain();
      MEMORY[0x22076D160](v24, 0);
      *(_QWORD *)(v23 + 16) = v5;
      MEMORY[0x22076D160](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount())
        goto LABEL_39;
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount())
        return swift_release();
    }
    type metadata accessor for Entity();
    v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

uint64_t closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;

  v4 = (_QWORD *)(a2 + 16);
  swift_beginAccess();
  v5 = *(_QWORD **)(a2 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *v4 = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *v4 = v5;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = a1;
  return swift_endAccess();
}

uint64_t Entity.LoadFinisher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t __SceneResource.makeAnchorEntity(fileName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL *v12;
  BOOL *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t inited;
  unint64_t v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;

  v6 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = 0;
  v12 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(1, &v26, 1);
  if (!v2)
  {
    v13 = v12;
    type metadata accessor for AnchorEntity();
    v14 = swift_dynamicCastClass();
    if (v14)
    {
      v3 = v14;
      v15 = v26;
      swift_retain();
      if (!v15
        || (__SceneResource.findREAnchoringComponent(root:)((uint64_t)v11),
            v16 = type metadata accessor for __REAnchoringType(),
            v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v11, 1, v16),
            outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for __REAnchoringType?), v17 != 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
        *(_QWORD *)(inited + 32) = v13;
        v25 = inited;
        specialized Array._endMutation()();
        v19 = v25;
        swift_retain();
        __SceneResource.makeAnchorEntity(from:fileName:)(v19, a1, a2);
        swift_bridgeObjectRelease();
        REAnchoringComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        AnchoringComponent.init(from:)((uint64_t)v8);
        REAnchoringComponentGetComponentType();
        v25 = REEntityGetOrAddComponentByClass();
        AnchoringComponent.__toCore(_:)(&v25);
        REAnchorComponentGetComponentType();
        if (REEntityGetComponentByClass())
          REEntityRemoveComponent();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnchoringComponent);
        swift_release();
      }
      swift_release();
    }
    else
    {
      static os_log_type_t.fault.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v21 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v23 = v22;
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 2, v24);
      swift_willThrow();
      swift_release();
    }
  }
  return v3;
}

uint64_t __SceneResource.findREAnchoringComponent(root:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - v6;
  swift_beginAccess();
  if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    __REAnchoring.type.getter((uint64_t)v7);
    v8 = type metadata accessor for __REAnchoringType();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for __REAnchoringType?);
      if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
        return __REAnchoring.type.getter(a1);
      v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v21 = a1;
      v22 = 1;
      return v20(v21, v22, 1, v8);
    }
  }
  else
  {
    v11 = type metadata accessor for __REAnchoringType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for __REAnchoringType?);
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_25:
    swift_release();
    v19 = type metadata accessor for __REAnchoringType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
  }
  v12 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v12 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_33;
    v13 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v14 = swift_dynamicCastClassUnconditional();
LABEL_16:
      v15 = v14;
      goto LABEL_20;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      goto LABEL_32;
    v16 = specialized static Entity.entityInfoType(_:)();
    if (!v16)
    {
      v14 = makeEntity(for:)(v13);
      goto LABEL_16;
    }
    v15 = (*(uint64_t (**)(void))(v16 + 232))();
    v17 = *(_QWORD *)(v15 + 16);
    swift_retain();
    MEMORY[0x22076D160](v17, 0);
    *(_QWORD *)(v15 + 16) = v13;
    MEMORY[0x22076D160](v13, v15);
    swift_release();
LABEL_20:
    result = REEntityGetChildCount();
    if (v12 >= result)
      goto LABEL_31;
    __SceneResource.findREAnchoringComponent(root:)(v15);
    swift_release();
    v8 = type metadata accessor for __REAnchoringType();
    v18 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, v8) != 1)
    {
      swift_release();
      outlined init with take of __RKEntityActionSpecification((uint64_t)v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
      v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
      v21 = a1;
      v22 = 0;
      return v20(v21, v22, 1, v8);
    }
    ++v12;
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for __REAnchoringType?);
    if (v12 >= REEntityGetChildCount())
      goto LABEL_25;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t __SceneResource.makeAnchorEntity(from:fileName:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v33[3];
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33[1] = a2;
  v5 = type metadata accessor for __REAnchoringType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v9);
  v34 = (uint64_t)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v33 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v33 - v15;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v33 - v19;
  v37 = v6;
  v38 = v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)v33 - v19, 1, 1, v5, v18);
  v33[2] = a3;
  v33[0] = (uint64_t)v8;
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    if (v21)
      goto LABEL_3;
  }
  else
  {
    v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v21)
    {
LABEL_3:
      v35 = a1;
      v36 = a1 & 0xC000000000000001;
      v22 = 4;
      while (1)
      {
        v23 = v22 - 4;
        if (v36)
        {
          a1 = MEMORY[0x220769770](v22 - 4, a1);
          v24 = v22 - 3;
          if (__OFADD__(v23, 1))
            goto LABEL_17;
        }
        else
        {
          a1 = *(_QWORD *)(a1 + 8 * v22);
          swift_retain();
          v24 = v22 - 3;
          if (__OFADD__(v23, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        __SceneResource.findREAnchoringComponent(root:)((uint64_t)v16);
        swift_release();
        outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for __REAnchoringType?);
        outlined init with take of Transform?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for __REAnchoringType?);
        outlined init with copy of (Int, URL)((uint64_t)v20, (uint64_t)v13, &demangling cache variable for type metadata for __REAnchoringType?);
        v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v13, 1, v38);
        outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for __REAnchoringType?);
        a1 = v35;
        if (v25 == 1)
        {
          ++v22;
          if (v24 != v21)
            continue;
        }
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v26 = v34;
  outlined init with copy of (Int, URL)((uint64_t)v20, v34, &demangling cache variable for type metadata for __REAnchoringType?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v26, 1, v38) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v26, &demangling cache variable for type metadata for __REAnchoringType?);
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of __SceneResource.makeAnchorEntity(from:fileName:));
    v28 = specialized AnchorEntity.__allocating_init(world:)(v27);
  }
  else
  {
    v29 = v33[0];
    outlined init with take of __RKEntityActionSpecification(v26, v33[0], (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
    v30._countAndFlagsBits = 0x7974696C616572;
    v30._object = (void *)0xE700000000000000;
    if (String.hasSuffix(_:)(v30))
      swift_bridgeObjectRetain();
    __REAnchoringType.createAnchorEntity(realityAssetFileName:)();
    v28 = v31;
    swift_bridgeObjectRelease();
    outlined destroy of __RKEntityActionSpecification(v29, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for __REAnchoringType?);
  return v28;
}

BOOL *__SceneResourceLoadResult.__makeEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL *v4;
  void *v5;
  _QWORD v7[3];

  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  v4 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v7, 0);
  if (v1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7[0] = v2;
    v7[1] = v3;
    swift_bridgeObjectRetain_n();
    v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v4;
}

void *__SceneResourceLoadResult.__makeAnchorEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  v4 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v2, v3);
  if (v1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v4;
}

BOOL *protocol witness for SceneResourceEntityMaker.makeEntity() in conformance SceneResourceLoadResult()
{
  return SceneResourceLoadResult.makeEntity()();
}

void *protocol witness for SceneResourceEntityMaker.makeAnchorEntity() in conformance SceneResourceLoadResult()
{
  return SceneResourceLoadResult.makeAnchorEntity()();
}

BOOL *protocol witness for SceneResourceEntityMaker.makeEntity() in conformance UncachedSceneResourceLoadResult()
{
  BOOL v1;

  return __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, &v1, 0);
}

uint64_t protocol witness for SceneResourceEntityMaker.makeAnchorEntity() in conformance UncachedSceneResourceLoadResult()
{
  uint64_t v0;

  return __SceneResource.makeAnchorEntity(fileName:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t __SceneImportOperation.makeEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL *v23;
  BOOL *v24;
  uint64_t v25;
  BOOL *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v36 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - v8;
  result = __SceneImportOperation.importedScenes.getter();
  v11 = result;
  v12 = MEMORY[0x24BEE4AF8];
  v37 = MEMORY[0x24BEE4AF8];
  v35 = *(_QWORD *)(result + 16);
  if (!v35)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v12 + 16);
    if (v21 >= 2)
    {
      swift_release();
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 2, 2, v25);
    }
    else
    {
      if (v21)
      {
        outlined init with copy of __RKEntityActionSpecification(v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v3, type metadata accessor for __SceneImportOperation.ImportedScene);
        v22 = 0;
      }
      else
      {
        v22 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v22, 1, v4);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        v28 = *(_QWORD *)&v3[*(int *)(v4 + 24)];
        swift_retain();
        outlined destroy of __RKEntityActionSpecification((uint64_t)v3, type metadata accessor for __SceneImportOperation.ImportedScene);
        v29 = *(_QWORD *)(v28 + 16);
        RERetain();
        type metadata accessor for __SceneResource();
        *(_QWORD *)(swift_initStackObject() + 16) = v29;
        v24 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v37, 0);
        swift_release();
        swift_release();
        return (uint64_t)v24;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, type metadata accessor for SceneResourceLoadResult.InternalError, (uint64_t)&protocol conformance descriptor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      v24 = v26;
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v24, 1, 2, v27);
    }
    swift_willThrow();
    return (uint64_t)v24;
  }
  v31 = v3;
  v32 = v0;
  v13 = 0;
  v14 = type metadata accessor for __SceneImportOperation.ImportedScene;
  v33 = v4;
  v34 = v5;
  while (v13 < *(_QWORD *)(v11 + 16))
  {
    v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v16 = *(_QWORD *)(v5 + 72);
    outlined init with copy of __RKEntityActionSpecification(v11 + v15 + v16 * v13, (uint64_t)v9, v14);
    if (v9[*(int *)(v4 + 28)] == 1)
    {
      v17 = v14;
      outlined init with take of __RKEntityActionSpecification((uint64_t)v9, v36, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = v37;
      v19 = *(_QWORD *)(v37 + 16);
      v18 = *(_QWORD *)(v37 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v12 = v37;
      }
      *(_QWORD *)(v12 + 16) = v19 + 1;
      v20 = v12 + v15 + v19 * v16;
      v14 = v17;
      result = outlined init with take of __RKEntityActionSpecification(v36, v20, v17);
      v4 = v33;
      v5 = v34;
    }
    else
    {
      result = outlined destroy of __RKEntityActionSpecification((uint64_t)v9, v14);
    }
    if (v35 == ++v13)
    {
      v12 = v37;
      v3 = v31;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v10);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(a3, a4, (void (*)(uint64_t, _QWORD))partial apply for closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:), v12, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  return swift_release();
}

uint64_t closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(void *a1, char a2)
{
  id v3;

  if ((a2 & 1) != 0)
  {
    v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t static Entity.load(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t static Entity.load(named:in:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = static Entity.loadAsync(named:in:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  *(_QWORD *)(v0 + 72) = v1;
  v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v4(v1);
}

uint64_t static Entity.loadModel(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  v3[6] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[7] = v4;
  return swift_task_switch();
}

uint64_t static Entity.loadModel(named:in:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = specialized static Entity.loadModelAsync(named:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  *(_QWORD *)(v0 + 64) = v1;
  v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = static Entity.loadModel(named:in:);
  return v4(v1);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Entity.loadModel(named:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t Entity.init(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  type metadata accessor for MainActor();
  v4[38] = static MainActor.shared.getter();
  v4[39] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[40] = v5;
  return swift_task_switch();
}

uint64_t Entity.init(named:in:)()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;

  v1 = *(void **)(v0 + 288);
  *(_OWORD *)(v0 + 224) = 0u;
  *(_QWORD *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_WORD *)(v0 + 128) = 512;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 80);
  *(_QWORD *)(v0 + 120) = 0;
  v2 = *(_OWORD *)(v0 + 96);
  v3 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 32) = v2;
  v4 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v0 + 64) = v4;
  swift_beginAccess();
  *(_BYTE *)(v0 + 64) = static RKARSystemCore.generateDecimatedMeshes;
  type metadata accessor for Entity.LoadStatistics();
  v5 = swift_allocObject();
  Date.init()();
  v6 = v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 2;
  *(_QWORD *)(v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 1;
  v7 = (_QWORD *)(v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *v7 = 0xD00000000000001CLL;
  v7[1] = 0x800000021BE90630;
  swift_release();
  *(_QWORD *)(v0 + 72) = v5;
  outlined init with copy of Entity.__LoadOptions(v0 + 16, v0 + 144);
  v8 = v1;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v9;
  *v9 = v0;
  v9[1] = Entity.init(named:in:);
  return Entity.init(named:in:options:)(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), v0 + 144);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 288);
  swift_release();

  outlined destroy of Entity.__LoadOptions(v0 + 16);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 344));
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 288);
  swift_release();

  outlined destroy of Entity.__LoadOptions(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.init(named:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 336) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 344) = a1;
  return swift_task_switch();
}

uint64_t Entity.init(named:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[34] = a4;
  v5[35] = v4;
  v5[32] = a2;
  v5[33] = a3;
  v5[31] = a1;
  v5[36] = type metadata accessor for MainActor();
  v5[37] = static MainActor.shared.getter();
  v5[38] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[39] = v6;
  return swift_task_switch();
}

uint64_t Entity.init(named:in:options:)()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_OWORD *)(v0 + 16);
  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 272), v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (*(_QWORD *)(v0 + 104) == 1)
  {
    *(_OWORD *)(v0 + 208) = 0u;
    *(_QWORD *)(v0 + 240) = 0;
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_WORD *)(v0 + 192) = 512;
    *(_OWORD *)(v0 + 144) = 0u;
    *(_QWORD *)(v0 + 200) = 0;
    outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 144);
    *(_QWORD *)(v0 + 184) = 0;
    v2 = *(_OWORD *)(v0 + 160);
    v3 = *(_OWORD *)(v0 + 176);
    *v1 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 32) = v2;
    v4 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 48) = v3;
    *(_OWORD *)(v0 + 64) = v4;
    outlined destroy of BodyTrackingComponent?(v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    v5 = *(_OWORD *)(v0 + 96);
    *v1 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 32) = v5;
    v6 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 64) = v6;
  }
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 280);
  *(_BYTE *)(v0 + 408) = static Entity.asynchronousLoadOptions;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v7 + 264) + *(_QWORD *)(v7 + 264));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v8;
  *v8 = v0;
  v8[1] = Entity.init(named:in:options:);
  return v10(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v0 + 16, v0 + 408);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0[43] = (*(uint64_t (**)(void))(v0[35] + 232))();
  v1 = swift_retain();
  Entity.copy(to:recursive:)(v1, 1);
  v0[44] = static MainActor.shared.getter();
  v0[45] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[46] = v2;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = static Entity.enumerateReferences(root:)(v0[43]);
  v0[47] = v1;
  v0[48] = static MainActor.shared.getter();
  v2 = swift_task_alloc();
  v0[49] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[50] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = Entity.init(named:in:options:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  swift_release();
  if (*(_QWORD *)(v0 + 72))
  {
    swift_retain();
    Entity.LoadStatistics.log()();
    swift_release();
  }
  v2 = *(void **)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  swift_release();

  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  swift_release();
  outlined destroy of Entity.__LoadOptions(v0 + 16);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 344));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  swift_release();

  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  outlined destroy of Entity.__LoadOptions(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.init(named:in:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 328) = a1;
  *(_QWORD *)(v3 + 336) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t specialized static RealityFileLoadInformation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  if ((MEMORY[0x220768234]() & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for RealityFileLoadInformation(0) + 20);
    v5 = (_QWORD *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + v4 + 8);
    v7 = (_QWORD *)(a2 + v4);
    v8 = v7[1];
    if (v6)
    {
      if (v8)
      {
        v9 = *v5 == *v7 && v6 == v8;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
    else if (!v8)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_21BD3F1D0()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static Entity.loadAnchorAsync(named:in:)(a1, a2, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(void **)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *))closure #1 in static Entity.loadAnchorAsync(named:in:));
}

uint64_t sub_21BD3F284()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(void (*a1)(void **), uint64_t a2)
{
  uint64_t v2;

  closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t objectdestroy_5Tm_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *))closure #1 in static Entity.loadBodyTrackedAsync(named:in:));
}

uint64_t partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3 + 7);
}

uint64_t sub_21BD3F370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v8), *(void **)(v2 + v8 + 8), *(_QWORD *)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2+ ((((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:));
}

uint64_t partial apply for closure #1 in static Entity.loadReferences(root:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return closure #1 in static Entity.loadReferences(root:)(a1, a2, v6);
}

uint64_t sub_21BD3F554()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), v2 + 32, *(_QWORD *)(v2 + 96), *(void **)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136), *(void **)(v2 + 144), *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t sub_21BD3F61C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  if (*(_QWORD *)(v0 + 88))
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), v2 + 64, (_QWORD *)(v2 + 128));
}

uint64_t type metadata accessor for RealityFileLoadInformation(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for RealityFileLoadInformation);
}

uint64_t type metadata accessor for RealityFileLoadInformationResolver()
{
  return objc_opt_self();
}

uint64_t sub_21BD3F6E0()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 72))
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + 48, *(_QWORD *)(v2 + 112));
}

uint64_t sub_21BD3F754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + v5 + 24))
    __swift_destroy_boxed_opaque_existential_1(v0 + v5);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + ((v5 + 71) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v8), *(_QWORD *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v2 + ((v8 + 39) & 0xFFFFFFFFFFFFFFF8)), v2 + ((((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v2 + ((((((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTm(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t)&unk_24DFCFAA0, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ());
}

uint64_t sub_21BD3F944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  v4 = (v2 + 112) & ~v2;
  v5 = (((v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  objc_release(*(id *)(v0
                     + ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), v2 + 40, *(_QWORD *)(v2 + 104), v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + v8), *(_QWORD *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2+ ((((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t type metadata accessor for Entity.LoadError(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for Entity.LoadError);
}

uint64_t specialized static Entity.enumerateCore(entity:recursive:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ChildCount;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  swift_retain();
  swift_retain();
  ChildCount = REEntityGetChildCount();
  if ((unint64_t)(ChildCount - 0x1000000000000000) >> 61 != 7)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_release();
    result = swift_release();
    __break(1u);
    return result;
  }
  v10 = ChildCount;
  v11 = swift_slowAlloc();
  REEntityGetChildren();
  if (v10 < 0)
    goto LABEL_19;
  if (v10)
  {
    v12 = (uint64_t *)v11;
    do
    {
      v13 = *v12;
      if (!*v12)
        goto LABEL_20;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v14 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
          __break(1u);
          goto LABEL_18;
        }
        v16 = specialized static Entity.entityInfoType(_:)();
        if (v16)
        {
          v15 = (*(uint64_t (**)(void))(v16 + 232))();
          v17 = *(_QWORD *)(v15 + 16);
          swift_retain();
          MEMORY[0x22076D160](v17, 0);
          *(_QWORD *)(v15 + 16) = v13;
          MEMORY[0x22076D160](v13, v15);
          swift_release();
          goto LABEL_13;
        }
        v14 = makeEntity(for:)(v13);
      }
      v15 = v14;
LABEL_13:
      gatherInteractionSpecificationsAndUpdateUuid #1 (from:) in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(v15, a4, a5);
      if ((a2 & 1) != 0)
      {
        swift_retain();
        swift_retain();
        specialized static Entity.enumerateCore(entity:recursive:block:)(v15, 1, a3, a4, a5);
        swift_release();
        swift_release();
      }
      swift_release();
      ++v12;
      --v10;
    }
    while (v10);
  }
  MEMORY[0x220772F44](v11, -1, -1);
  swift_release();
  return swift_release();
}

uint64_t specialized static RealityFileLoadInformationResolver.urlContainsPathExtension(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::Bool v9;
  uint64_t result;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::Bool v18;

  v5 = URL.pathComponents.getter();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = a2;
    v7._object = a3;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    v9 = String.hasSuffix(_:)(v8);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v9)
    {
      v11 = 1;
    }
    else
    {
      v12 = 0;
      v13 = v5 + 56;
      v14 = v6 - 1;
      do
      {
        v11 = v14 != v12;
        if (v14 == v12)
          break;
        if ((unint64_t)++v12 >= *(_QWORD *)(v5 + 16))
        {
          __break(1u);
          return result;
        }
        v15 = v13 + 16;
        swift_bridgeObjectRetain();
        v16._countAndFlagsBits = a2;
        v16._object = a3;
        String.append(_:)(v16);
        v17._countAndFlagsBits = 46;
        v17._object = (void *)0xE100000000000000;
        v18 = String.hasSuffix(_:)(v17);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v13 = v15;
      }
      while (!v18);
    }
  }
  else
  {
    v11 = 0;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Trace;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  Swift::String v23;
  id v24;
  void *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, id, uint64_t, uint64_t);
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  id v65;
  uint64_t v66;
  _QWORD v68[2];
  id v69;
  uint64_t v70;
  char *v71;
  id v72;
  id v73;
  uint64_t v74;
  __int128 v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;

  v74 = a4;
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v9 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (_QWORD *)((char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
    v73 = a3;
  else
    v73 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v14 = a3;
  v15 = specialized static __ServiceLocator.shared.getter();
  v16 = *(void **)(*(_QWORD *)(v15 + 168) + 16);
  swift_beginAccess();
  v17 = *(_QWORD *)(v15 + 24);
  swift_unownedRetainStrong();
  v18 = *(_QWORD **)(v17 + 32);
  swift_retain();
  v72 = v16;
  v19 = v18;
  swift_release();
  *v13 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5610], v10);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_9;
  }
  v69 = v20;
  v22 = *(_QWORD *)(*(_QWORD *)(v15 + 168) + 24);
  *(_QWORD *)&v76 = 0;
  *((_QWORD *)&v76 + 1) = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v76 = a1;
  *((_QWORD *)&v76 + 1) = a2;
  v23._countAndFlagsBits = 0x7562206D6F726620;
  v23._object = (void *)0xED000020656C646ELL;
  String.append(_:)(v23);
  v24 = objc_msgSend(v73, sel_bundleIdentifier);
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;

  }
  else
  {
    v28 = (void *)0x800000021BE903B0;
    v26 = 0xD000000000000010;
  }
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v21 = 2;
  v70 = v22;
  LoadTracer.beginLoad(loadType:logMsgTarget:)(2, v76, *((uint64_t *)&v76 + 1), (uint64_t)v9);
  swift_bridgeObjectRelease();
  type metadata accessor for LoadRequestDependencies();
  v18 = (_QWORD *)swift_allocObject();
  v30 = MEMORY[0x24BEE4AF8];
  v18[2] = MEMORY[0x24BEE4AF8];
  v68[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v31 = swift_allocObject();
  *(_DWORD *)(v31 + 16) = 0;
  v18[3] = v31;
  swift_beginAccess();
  v18[2] = v30;
  swift_bridgeObjectRelease();
  if (one-time initialization token for asynchronousLoadOptions != -1)
    goto LABEL_21;
LABEL_9:
  v32 = static Entity.asynchronousLoadOptions;
  v33 = *(_BYTE *)(v74 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  v34 = swift_allocObject();
  swift_weakInit();
  v35 = a1;
  *(_QWORD *)(v34 + 16) = a1;
  *(_QWORD *)(v34 + 24) = a2;
  *(_BYTE *)(v34 + 32) = v32;
  *(_BYTE *)(v34 + 33) = v33;
  *(_WORD *)(v34 + 34) = 256;
  *(_DWORD *)(v34 + 36) = v21;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v15 + 176, (uint64_t)&v76, &demangling cache variable for type metadata for USDImportService?);
  v71 = v9;
  if (*((_QWORD *)&v77 + 1))
  {
    outlined init with take of BindableDataInternal(&v76, (uint64_t)v80);
    v37 = v81;
    v36 = v82;
    __swift_project_boxed_opaque_existential_1(v80, v81);
    v38 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v36 + 16);
    swift_bridgeObjectRetain();
    if ((v38(a1, a2, v73, v37, v36) & 1) != 0)
    {
      v39 = *(_QWORD *)(v74 + 56);
      v40 = v69;
      if (v39)
      {
        v41 = v39 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(_QWORD *)v41 = 1;
        *(_BYTE *)(v41 + 8) = 0;
      }
      outlined init with copy of Entity.__LoadOptions(v74, (uint64_t)&v76);
      outlined init with copy of __REAssetService((uint64_t)v80, (uint64_t)v75);
      v42 = swift_allocObject();
      v43 = v77;
      *(_OWORD *)(v42 + 40) = v76;
      *(_OWORD *)(v42 + 56) = v43;
      v44 = v79;
      *(_OWORD *)(v42 + 72) = v78;
      *(_QWORD *)(v42 + 16) = a1;
      *(_QWORD *)(v42 + 24) = a2;
      *(_QWORD *)(v42 + 32) = v73;
      *(_OWORD *)(v42 + 88) = v44;
      *(_QWORD *)(v42 + 104) = v34;
      *(_QWORD *)(v42 + 112) = v40;
      outlined init with take of BindableDataInternal(v75, v42 + 120);
      v45 = v72;
      *(_QWORD *)(v42 + 160) = v72;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
      v46 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
      v47 = swift_allocObject();
      v48 = swift_allocObject();
      *(_DWORD *)(v48 + 16) = 0;
      *(_QWORD *)(v47 + 16) = v48;
      *(_QWORD *)(v47 + 24) = 0;
      *(_BYTE *)(v47 + 32) = -1;
      *(_QWORD *)(v46 + 16) = v47;
      v49 = (_QWORD *)swift_allocObject();
      v49[2] = partial apply for closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
      v49[3] = v42;
      v49[4] = v47;
      v49[5] = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
      swift_allocObject();
      v50 = v45;
      v51 = v40;
      swift_bridgeObjectRetain();
      v52 = v73;
      swift_retain();
      swift_retain();
      swift_retain();
      *(_QWORD *)(v46 + 24) = Future.init(_:)();
      v53 = (uint64_t)v71;
      specialized LoadTracer.subscribe<A>(to:with:)(v46, (uint64_t)v71);

      swift_release();
      swift_release();
      swift_release();

      swift_release();
      outlined destroy of __RKEntityActionSpecification(v53, type metadata accessor for LoadTrace);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
      return v46;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v76, &demangling cache variable for type metadata for USDImportService?);
  }
  v54 = *(_QWORD *)(v74 + 56);
  if (v54)
  {
    v55 = v54 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(_QWORD *)v55 = 0;
    *(_BYTE *)(v55 + 8) = 0;
  }
  outlined init with copy of Entity.__LoadOptions(v74, (uint64_t)&v76);
  v56 = swift_allocObject();
  v57 = v73;
  *(_QWORD *)(v56 + 16) = v73;
  *(_QWORD *)(v56 + 24) = v35;
  *(_QWORD *)(v56 + 32) = a2;
  *(_QWORD *)(v56 + 40) = v15;
  v58 = v77;
  *(_OWORD *)(v56 + 48) = v76;
  *(_OWORD *)(v56 + 64) = v58;
  v59 = v79;
  *(_OWORD *)(v56 + 80) = v78;
  *(_OWORD *)(v56 + 96) = v59;
  v60 = v72;
  *(_QWORD *)(v56 + 112) = v34;
  *(_QWORD *)(v56 + 120) = v60;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  v46 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
  v61 = swift_allocObject();
  v62 = swift_allocObject();
  *(_DWORD *)(v62 + 16) = 0;
  *(_QWORD *)(v61 + 16) = v62;
  *(_QWORD *)(v61 + 24) = 0;
  *(_BYTE *)(v61 + 32) = -1;
  *(_QWORD *)(v46 + 16) = v61;
  v63 = (_QWORD *)swift_allocObject();
  v63[2] = partial apply for closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  v63[3] = v56;
  v63[4] = v61;
  v63[5] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
  swift_allocObject();
  swift_retain();
  v64 = v60;
  swift_bridgeObjectRetain();
  v65 = v57;
  swift_retain();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v46 + 24) = Future.init(_:)();
  v66 = (uint64_t)v71;
  specialized LoadTracer.subscribe<A>(to:with:)(v46, (uint64_t)v71);

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined destroy of __RKEntityActionSpecification(v66, type metadata accessor for LoadTrace);
  return v46;
}

uint64_t specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v82;
  void (*v83)(uint64_t, char *, uint64_t);
  id v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  id v97;
  char *v98;
  uint64_t v99;
  __int128 v100[2];
  _QWORD v101[5];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;

  v94 = a3;
  v92 = a2;
  v96 = a1;
  v99 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v99 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v99);
  v98 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (_QWORD *)specialized static __ServiceLocator.shared.getter();
  v12 = *(void **)(v11[21] + 16);
  swift_beginAccess();
  v13 = v11[3];
  swift_unownedRetainStrong();
  v14 = *(void **)(v13 + 32);
  v95 = v11;
  swift_retain();
  v93 = v12;
  v15 = v14;
  swift_release();
  *v10 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5610], v7);
  v97 = v15;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    type metadata accessor for LoadRequestDependencies();
    v11 = (_QWORD *)swift_allocObject();
    v16 = MEMORY[0x24BEE4AF8];
    v11[2] = MEMORY[0x24BEE4AF8];
    v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = 0;
    v11[3] = v17;
    swift_beginAccess();
    v11[2] = v16;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v18 = static Entity.asynchronousLoadOptions;
  v19 = v96;
  v20 = URL.absoluteString.getter();
  v22 = v21;
  v23 = *(_BYTE *)(a4 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  v24 = a4;
  v25 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v25 + 16) = v20;
  *(_QWORD *)(v25 + 24) = v22;
  *(_BYTE *)(v25 + 32) = v18;
  *(_BYTE *)(v25 + 33) = v23;
  *(_WORD *)(v25 + 34) = 256;
  *(_DWORD *)(v25 + 36) = 2;
  v90 = v11;
  swift_weakAssign();
  v85 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v85(v98, v19, v99);
  v91 = v24;
  outlined init with copy of Entity.__LoadOptions(v24, (uint64_t)&v102);
  v26 = *(unsigned __int8 *)(v5 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = (v6 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 71) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v86 = v26 | 7;
  v33 = swift_allocObject();
  v87 = v27;
  v34 = v33 + v27;
  v35 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v35(v34, v98, v99);
  v36 = v95;
  v88 = v28;
  *(_QWORD *)(v33 + v28) = v95;
  v37 = (_QWORD *)(v33 + v29);
  v38 = v94;
  *v37 = v92;
  v37[1] = v38;
  v39 = (_OWORD *)(v33 + v30);
  v40 = v105;
  v39[2] = v104;
  v39[3] = v40;
  v41 = v103;
  *v39 = v102;
  v39[1] = v41;
  v42 = v97;
  *(_QWORD *)(v33 + v31) = v97;
  v43 = v42;
  v44 = (uint64_t)(v36 + 22);
  *(_QWORD *)(v33 + v32) = v25;
  v45 = v93;
  *(_QWORD *)(v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8)) = v93;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v44, (uint64_t)&v102, &demangling cache variable for type metadata for USDImportService?);
  if (*((_QWORD *)&v103 + 1))
  {
    v83 = v35;
    outlined init with take of BindableDataInternal(&v102, (uint64_t)v101);
    v46 = v101[4];
    __swift_project_boxed_opaque_existential_1(v101, v101[3]);
    v47 = *(uint64_t (**)(void))(v46 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v48 = v45;
    v43 = v97;
    v84 = v48;
    v49 = v97;
    v50 = v96;
    if ((v47() & 1) != 0)
    {
      v97 = v49;
      v51 = *(_QWORD *)(v91 + 56);
      if (v51)
      {
        v52 = v51 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(_QWORD *)v52 = 1;
        *(_BYTE *)(v52 + 8) = 0;
      }
      v53 = v98;
      v54 = v50;
      v55 = v99;
      v85(v98, v54, v99);
      outlined init with copy of Entity.__LoadOptions(v91, (uint64_t)&v102);
      outlined init with copy of __REAssetService((uint64_t)v101, (uint64_t)v100);
      v56 = v88;
      v57 = (v88 + 23) & 0xFFFFFFFFFFFFFFF8;
      v58 = (v57 + 71) & 0xFFFFFFFFFFFFFFF8;
      v59 = swift_allocObject();
      v83(v59 + v87, v53, v55);
      v60 = (_QWORD *)(v59 + v56);
      v61 = v94;
      *v60 = v92;
      v60[1] = v61;
      v62 = (_OWORD *)(v59 + v57);
      v63 = v105;
      v62[2] = v104;
      v62[3] = v63;
      v64 = v103;
      *v62 = v102;
      v62[1] = v64;
      *(_QWORD *)(v59 + v58) = v25;
      outlined init with take of BindableDataInternal(v100, v59 + ((v58 + 15) & 0xFFFFFFFFFFFFFFF8));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
      v65 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
      v66 = swift_allocObject();
      v67 = swift_allocObject();
      *(_DWORD *)(v67 + 16) = 0;
      *(_QWORD *)(v66 + 16) = v67;
      *(_QWORD *)(v66 + 24) = 0;
      *(_BYTE *)(v66 + 32) = -1;
      *(_QWORD *)(v65 + 16) = v66;
      v68 = (_QWORD *)swift_allocObject();
      v68[2] = partial apply for closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
      v68[3] = v59;
      v69 = v90;
      v68[4] = v66;
      v68[5] = v69;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      v70 = Future.init(_:)();
      swift_release();
      swift_release();

      swift_release();
      swift_release();

      *(_QWORD *)(v65 + 24) = v70;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
      return v65;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    v45 = v93;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v71 = v45;
    v72 = v43;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v102, &demangling cache variable for type metadata for USDImportService?);
  }
  v73 = *(_QWORD *)(v91 + 56);
  v74 = v90;
  if (v73)
  {
    v75 = v73 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(_QWORD *)v75 = 0;
    *(_BYTE *)(v75 + 8) = 0;
  }
  v76 = swift_allocObject();
  *(_QWORD *)(v76 + 16) = partial apply for closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
  *(_QWORD *)(v76 + 24) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  v65 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
  v77 = swift_allocObject();
  v78 = swift_allocObject();
  *(_DWORD *)(v78 + 16) = 0;
  *(_QWORD *)(v77 + 16) = v78;
  *(_QWORD *)(v77 + 24) = 0;
  *(_BYTE *)(v77 + 32) = -1;
  *(_QWORD *)(v65 + 16) = v77;
  v79 = (_QWORD *)swift_allocObject();
  v79[2] = _ss6ResultOy10RealityKit11ModelEntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA;
  v79[3] = v76;
  v79[4] = v77;
  v79[5] = v74;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  v80 = Future.init(_:)();
  swift_release();

  swift_release();
  swift_release();
  *(_QWORD *)(v65 + 24) = v80;
  return v65;
}

uint64_t specialized static Entity.finishUSDLoad(forEntity:withOptions:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[14] = a1;
  v2[15] = a2;
  v2[16] = type metadata accessor for MainActor();
  v2[17] = static MainActor.shared.getter();
  v2[18] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[19] = v3;
  return swift_task_switch();
}

uint64_t specialized static Entity.finishUSDLoad(forEntity:withOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  type metadata accessor for LoadRequestDependencies();
  v1 = swift_allocObject();
  *(_QWORD *)(v0 + 160) = v1;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v3;
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v2;
  swift_bridgeObjectRelease();
  REEntityGetName();
  v4 = String.init(cString:)();
  v6 = v5;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  v7 = static Entity.asynchronousLoadOptions;
  v13 = *(_OWORD *)(v0 + 112);
  swift_beginAccess();
  v8 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 168) = inited;
  swift_weakInit();
  *(_QWORD *)(inited + 16) = v4;
  *(_QWORD *)(inited + 24) = v6;
  *(_BYTE *)(inited + 32) = v7;
  *(_BYTE *)(inited + 33) = v8;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  *(_QWORD *)(v0 + 176) = static MainActor.shared.getter();
  v10 = swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v10;
  *(_QWORD *)(v10 + 16) = inited;
  *(_OWORD *)(v10 + 24) = v13;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v11;
  *v11 = v0;
  v11[1] = specialized static Entity.finishUSDLoad(forEntity:withOptions:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t inited;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  _OWORD v30[2];
  _QWORD v31[5];
  uint64_t v32;
  unint64_t v33;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char **)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(inited + 32) = a1;
  v31[0] = inited;
  specialized Array._endMutation()();
  v9 = v31[0];
  v33 = v31[0];
  if (v31[0] >> 62)
    goto LABEL_46;
  v10 = *(_QWORD *)((v31[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  if (!v10)
    return swift_bridgeObjectRelease();
LABEL_3:
  v29 = v4;
  v11 = 0;
  v12 = 0;
  v4 = &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey;
  do
  {
    while (1)
    {
      v13 = v9 >> 62;
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v16 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
        if (!v16)
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRetain();
        v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v18)
          goto LABEL_43;
      }
      else if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        swift_retain();
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v27)
          return swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      if ((v9 & 0xC000000000000001) != 0)
      {
        v14 = (void *)MEMORY[0x220769770](0, v9);
        if (!v13)
          goto LABEL_9;
      }
      else
      {
        if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_44;
        v14 = *(void **)(v9 + 32);
        swift_retain();
        if (!v13)
        {
LABEL_9:
          v15 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_15:
      if (!v15)
        goto LABEL_45;
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_beginAccess();
      v19 = objc_getAssociatedObject(v14, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
      swift_endAccess();
      if (v19)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v30, 0, sizeof(v30));
      }
      outlined init with take of Transform?((uint64_t)v30, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v31[3])
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_25:
        v31[4] = 0;
        v32 = 0;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_25;
      v20 = v32;
      swift_bridgeObjectRelease();
      if (!v20)
        goto LABEL_26;
      swift_release();
      if (v12)
      {
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_retain();
      v12 = v14;
LABEL_26:
      v21 = type metadata accessor for AnchoringComponent(0);
      swift_retain();
      if (REEntityGetComponent())
      {
        AnchoringComponent.init(from:)((uint64_t)v7);
        v22 = *(_QWORD *)(v21 - 8);
        v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
        v23(v7, 0, 1, v21);
      }
      else
      {
        v22 = *(_QWORD *)(v21 - 8);
        v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
        v23(v7, 1, 1, v21);
      }
      swift_release();
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21);
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for AnchoringComponent?);
      if (v24 != 1)
      {
        if (v11 >= 1)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        v11 = 1;
      }
      specialized Array.append<A>(contentsOf:)((uint64_t)v14);
      v9 = v33;
      if (v33 >> 62)
        break;
      if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_36;
    }
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while (v25);
LABEL_36:
  result = swift_bridgeObjectRelease();
  if (v11 != 1)
    return swift_release();
  if (v12)
  {
    v26 = (uint64_t)v29;
    v23((char *)v29, 1, 1, v21);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v26);
    outlined destroy of BodyTrackingComponent?(v26, &demangling cache variable for type metadata for AnchoringComponent?);
    return swift_release_n();
  }
  return result;
}

void specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t inited;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  char isUniquelyReferenced_nonNull_native;
  void (*v36)(uint64_t, uint64_t);
  uint64_t Object;
  uint64_t v38;
  const char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(const char *, _QWORD);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  const char *v78;
  uint64_t v79;
  const char *v80[6];
  const char *v81;
  uint64_t v82;

  v2 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for Data.Deallocator();
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t)&v63 - v15;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v19);
  v76 = (char *)&v63 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v75 = (char *)&v63 - v23;
  if (a1)
  {
    v77 = v22;
    v74 = v13;
    v82 = MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
    *(_QWORD *)(inited + 32) = a1;
    v80[0] = (const char *)inited;
    specialized Array._endMutation()();
    v25 = v80[0];
    v81 = v80[0];
    v66 = a1;
    if ((unint64_t)v80[0] >> 62)
      goto LABEL_90;
    v26 = *(_QWORD *)(((unint64_t)v80[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain_n();
LABEL_4:
    v64 = v6;
    if (v26 <= 0)
    {
      swift_bridgeObjectRelease();
      v27 = 0;
      v78 = (const char *)MEMORY[0x24BEE4B00];
      v6 = MEMORY[0x24BEE4AF8];
      goto LABEL_46;
    }
    v68 = v10;
    swift_beginAccess();
    swift_beginAccess();
    v27 = 0;
    v65 = *MEMORY[0x24BDCDB98];
    v28 = (const char *)MEMORY[0x24BEE4B00];
    while (1)
    {
      v10 = (char *)((unint64_t)v25 >> 62);
      if ((unint64_t)v25 >> 62)
      {
        v6 = v27;
        v30 = v28;
        swift_bridgeObjectRetain();
        v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v73)
        {
          __break(1u);
          return;
        }
        swift_bridgeObjectRetain();
        v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v28 = v30;
        v27 = v6;
        if (!v31)
          goto LABEL_85;
      }
      else if (!*(_QWORD *)(((unint64_t)v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        swift_retain_n();
        swift_bridgeObjectRetain();
        v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      v78 = v28;
      if (((unint64_t)v25 & 0xC000000000000001) != 0)
      {
        v29 = MEMORY[0x220769770](0, v25);
        if (!v10)
          goto LABEL_11;
      }
      else
      {
        if (!*(_QWORD *)(((unint64_t)v25 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_86;
        v29 = *((_QWORD *)v25 + 4);
        swift_retain();
        if (!v10)
        {
LABEL_11:
          v6 = *(_QWORD *)(((unint64_t)v25 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_17:
      if (!v6)
        goto LABEL_87;
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      if (!static __RKEntityUUIDComponent.registration
        || !REEntityGetCustomComponent()
        || !RECustomComponentGetObject())
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
LABEL_24:
        outlined destroy of BodyTrackingComponent?(v16, &demangling cache variable for type metadata for UUID?);
        goto LABEL_25;
      }
      UUID.init(uuid:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
        goto LABEL_24;
      v32 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v75, v16, v17);
      v33 = (uint64_t)v76;
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v76, v32, v17);
      swift_retain();
      v34 = v78;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v80[0] = v34;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v33, isUniquelyReferenced_nonNull_native);
      v78 = v80[0];
      swift_bridgeObjectRelease();
      v36 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v36(v33, v17);
      v36((uint64_t)v32, v17);
LABEL_25:
      if (static __RKEntityInteractionsComponent.registration)
      {
        if (REEntityGetCustomComponent())
        {
          Object = RECustomComponentGetObject();
          if (Object)
          {
            v73 = v27;
            v38 = *(_QWORD *)(Object + 16);
            outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v80);
            if (v38)
            {
              v6 = v38;
            }
            else
            {
              v39 = v80[0];
              if (v80[0])
              {
                v40 = strlen(v80[0]);
                (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v68, v65, v72);
                v41 = Data.Deallocator._deallocator.getter();
                v67 = v42;
                if (v40)
                {
                  v70 = v41;
                  type metadata accessor for __DataStorage();
                  v69 = swift_allocObject();
                  swift_retain();
                  v43 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                  v69 = specialized Data._Representation.init(_:count:)(v43, v40);
                  v70 = v44;
                  swift_release();
                }
                else
                {
                  v45 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
                  v45(v39, 0);
                  swift_release();
                  swift_release();
                  v69 = 0;
                  v70 = 0xC000000000000000;
                }
                (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v72);
                type metadata accessor for JSONDecoder();
                swift_allocObject();
                JSONDecoder.init()();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
                lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
                v46 = (void *)v73;
                dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                if (!v46)
                {
                  v73 = 0;
                  swift_release();
                  outlined consume of Data._Representation(v69, v70);
                  v6 = v79;
                  goto LABEL_39;
                }
                swift_release();
                outlined consume of Data._Representation(v69, v70);

                v73 = 0;
              }
              v6 = MEMORY[0x24BEE4AF8];
            }
LABEL_39:
            swift_bridgeObjectRetain();
            outlined destroy of __RKEntityInteractionsComponent((uint64_t)v80);
            v27 = v73;
            goto LABEL_40;
          }
        }
      }
      v6 = MEMORY[0x24BEE4AF8];
LABEL_40:
      specialized Array.append<A>(contentsOf:)(v6);
      specialized Array.append<A>(contentsOf:)(v29);
      v25 = v81;
      if ((unint64_t)v81 >> 62)
      {
        swift_bridgeObjectRetain();
        v47 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v47 = *(_QWORD *)(((unint64_t)v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v28 = v78;
      if (v47 <= 0)
      {
        swift_bridgeObjectRelease();
        v6 = v82;
LABEL_46:
        v73 = v27;
        v48 = swift_allocObject();
        *(_QWORD *)(v48 + 16) = MEMORY[0x24BEE4B08];
        v49 = (char *)(v48 + 16);
        v25 = *(const char **)(v6 + 16);
        if (v25)
        {
          v75 = (char *)(v48 + 16);
          v50 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
          v76 = (char *)v6;
          v6 += v50;
          v51 = *(_QWORD *)(v64 + 72);
          do
          {
            outlined init with copy of __RKEntityActionSpecification(v6, (uint64_t)v8, type metadata accessor for __RKEntityInteractionSpecification);
            outlined init with copy of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
            outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for __RKEntityInteractionSpecification);
            fetchTapTriggerTargetIdentifiers #1 (triggerSpecification:) in static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)((uint64_t)v4, v48);
            outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
            v6 += v51;
            --v25;
          }
          while (v25);
          swift_bridgeObjectRelease();
          v49 = v75;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_beginAccess();
        v4 = *(char **)v49;
        v52 = *(_QWORD *)(*(_QWORD *)v49 + 56);
        v75 = (char *)(*(_QWORD *)v49 + 56);
        v53 = 1 << v4[32];
        v54 = -1;
        if (v53 < 64)
          v54 = ~(-1 << v53);
        v55 = v54 & v52;
        v76 = (char *)((unint64_t)(v53 + 63) >> 6);
        swift_bridgeObjectRetain();
        v16 = 0;
        v10 = v74;
        v8 = v77;
        if (v55)
        {
LABEL_54:
          v56 = __clz(__rbit64(v55));
          v55 &= v55 - 1;
          v57 = v56 | (v16 << 6);
          goto LABEL_66;
        }
        while (1)
        {
          if (__OFADD__(v16++, 1))
            goto LABEL_88;
          if (v16 >= (uint64_t)v76)
            goto LABEL_81;
          v59 = *(_QWORD *)&v75[8 * v16];
          if (!v59)
          {
            v60 = v16 + 1;
            if (v16 + 1 >= (uint64_t)v76)
              goto LABEL_81;
            v59 = *(_QWORD *)&v75[8 * v60];
            if (!v59)
            {
              v60 = v16 + 2;
              if (v16 + 2 >= (uint64_t)v76)
                goto LABEL_81;
              v59 = *(_QWORD *)&v75[8 * v60];
              if (!v59)
              {
                v60 = v16 + 3;
                if (v16 + 3 >= (uint64_t)v76)
                {
LABEL_81:
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v10, 1, 1, v17);
LABEL_82:
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  return;
                }
                v59 = *(_QWORD *)&v75[8 * v60];
                if (!v59)
                {
                  while (1)
                  {
                    v16 = v60 + 1;
                    if (__OFADD__(v60, 1))
                      goto LABEL_89;
                    if (v16 >= (uint64_t)v76)
                      goto LABEL_81;
                    v59 = *(_QWORD *)&v75[8 * v16];
                    ++v60;
                    if (v59)
                      goto LABEL_65;
                  }
                }
              }
            }
            v16 = v60;
          }
LABEL_65:
          v55 = (v59 - 1) & v59;
          v57 = __clz(__rbit64(v59)) + (v16 << 6);
LABEL_66:
          (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v10, *((_QWORD *)v4 + 6) + *(_QWORD *)(v18 + 72) * v57, v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17) == 1)
            goto LABEL_82;
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v8, v10, v17);
          v25 = v78;
          if (!*((_QWORD *)v78 + 2))
            break;
          v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
          v6 = *(_QWORD *)(v18 + 8);
          if ((v62 & 1) == 0)
          {
            v10 = v74;
            ((void (*)(char *, uint64_t))v6)(v77, v17);
LABEL_75:
            if (v55)
              goto LABEL_54;
            continue;
          }
          v25 = *(const char **)(*((_QWORD *)v25 + 7) + 8 * v61);
          swift_retain();
          ((void (*)(char *, uint64_t))v6)(v8, v17);
          if (one-time initialization token for all != -1)
            swift_once();
          v6 = ((unint64_t)static InputTargetComponent.InputType.all << 32) | 1;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v6);
          swift_release();
          Entity.generateCollisionShapes(recursive:)(1);
          swift_release();
          v10 = v74;
          if (v55)
            goto LABEL_54;
        }
        v6 = *(_QWORD *)(v18 + 8);
        ((void (*)(char *, uint64_t))v6)(v77, v17);
        goto LABEL_75;
      }
    }
  }
}

uint64_t specialized closure #1 in static Entity.__load(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  BOOL *v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  NSURL *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(BOOL *, uint64_t);
  uint64_t v30;
  BOOL *v31;
  void *v32;
  Swift::String_optional v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v47 = a8;
  v48 = a7;
  v49 = a6;
  v50 = a5;
  v55 = a3;
  v56 = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)&v46 - v13;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v51 = (BOOL *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (BOOL *)&v46 - v18;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (BOOL *)&v46 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
  v24((char *)&v46 - v22, a1, v14, v21);
  swift_retain();
  URL._bridgeToObjectiveC()(v25);
  v27 = v26;
  swift_beginAccess();
  v28 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_initStackObject();
  __SceneImportOperation.init(core:)(v28);
  swift_release();
  v52 = v15;
  v29 = *(void (**)(BOOL *, uint64_t))(v15 + 8);
  v29(v23, v14);
  ((void (*)(BOOL *, uint64_t, uint64_t))v24)(v19, v56, v14);
  if (a4)
  {
    swift_bridgeObjectRetain();
    v30 = v55;
  }
  else
  {
    v31 = v51;
    URL.deletingPathExtension()();
    v30 = URL.lastPathComponent.getter();
    a4 = v32;
    v29(v31, v14);
  }
  v29(v19, v14);
  swift_beginAccess();
  v33.value._countAndFlagsBits = v30;
  v33.value._object = a4;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v33, 0, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  __SceneImportOperation.run()();
  if (v34)
  {
    swift_release();
    return (uint64_t)v23;
  }
  v35 = RESceneImportOperationCopySourceURL();
  if (v35)
  {
    v36 = (void *)v35;
    v37 = (uint64_t)v53;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v38 = 0;
  }
  else
  {
    v38 = 1;
    v37 = (uint64_t)v53;
  }
  v39 = (uint64_t)v54;
  v40 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v37, v38, 1, v14);
  outlined init with take of Transform?(v37, v39, &demangling cache variable for type metadata for URL?);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v39, 1, v14);
  if ((_DWORD)result != 1)
  {
    v42 = __SceneImportOperation.importedScenes.getter();
    __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v42, (uint64_t)&v57);
    swift_bridgeObjectRelease();
    v29((BOOL *)v39, v14);
    v43 = v58;
    v44 = v59;
    swift_bridgeObjectRetain();
    v23 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v57, 0);
    v57 = v43;
    v58 = v44;
    swift_bridgeObjectRetain_n();
    v45 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v23, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v45, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v23);
    specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v23, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    LoadTracer.endLoad(of:with:)((uint64_t)v23, v47);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v23;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Entity.__load(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Trace;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v50;
  void *v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[12];
  int v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t Information;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _QWORD v98[3];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  _BYTE v104[73];
  __int16 v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  _BYTE *v112;

  v91 = a3;
  v89 = a4;
  v90 = a2;
  v95 = type metadata accessor for URL();
  v83 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v80 = &v78[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Information = type metadata accessor for RealityFileLoadInformation(0);
  v85 = *(_QWORD *)(Information - 8);
  MEMORY[0x24BDAC7A8](Information);
  v81 = &v78[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x24BDAC7A8](v7);
  v86 = &v78[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v112 = &v78[-v10];
  v11 = type metadata accessor for DispatchPredicate();
  v93 = *(_QWORD *)(v11 - 8);
  v94 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v78[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x24BDAC7A8](Trace);
  v88 = &v78[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v78[-v17];
  v19 = specialized static __ServiceLocator.shared.getter();
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 168) + 24);
  swift_retain();
  swift_retain();
  v21 = URL.lastPathComponent.getter();
  v97 = v18;
  v82 = v20;
  LoadTracer.beginLoad(loadType:logMsgTarget:)(1, v21, v22, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (one-time initialization token for synchronousLoadOptions != -1)
    swift_once();
  v23 = static Entity.synchronousLoadOptions;
  v24 = URL.absoluteString.getter();
  v26 = v25;
  swift_beginAccess();
  v27 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  inited = swift_initStackObject();
  swift_weakInit();
  *(_QWORD *)(inited + 16) = v24;
  *(_QWORD *)(inited + 24) = v26;
  v79 = v23;
  *(_BYTE *)(inited + 32) = v23;
  *(_BYTE *)(inited + 33) = v27;
  *(_WORD *)(inited + 34) = 1;
  v84 = inited;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  v29 = *(_QWORD *)(*(_QWORD *)(v19 + 168) + 32);
  swift_beginAccess();
  v96 = v19;
  v30 = *(_QWORD *)(v19 + 24);
  swift_unownedRetainStrong();
  v31 = *(void **)(v30 + 32);
  swift_retain();
  v32 = v31;
  swift_release();
  *v13 = v32;
  v34 = v93;
  v33 = v94;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v93 + 104))(v13, *MEMORY[0x24BEE5610], v94);
  LOBYTE(v30) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v34 + 8))(v13, v33);
  if ((v30 & 1) != 0)
  {
    v36 = a1;
    type metadata accessor for RealityFileLoadInformationResolver();
    v37 = v112;
    static RealityFileLoadInformationResolver.resolve(url:)(a1, (uint64_t)v112);
    v38 = v86;
    outlined init with copy of (Int, URL)((uint64_t)v37, (uint64_t)v86, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    v39 = Information;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v85 + 48))(v38, 1, Information) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v38, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      v38 = *(_BYTE **)(v83 + 16);
      v40 = (uint64_t)v80;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v38)(v80, a1, v95);
      v41 = (uint64_t)v97;
      outlined init with copy of __RKEntityActionSpecification((uint64_t)v97, (uint64_t)v88, type metadata accessor for LoadTrace);
      v42 = v96;
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v42 + 176, (uint64_t)&v110, &demangling cache variable for type metadata for USDImportService?);
      if (v111)
      {
        outlined init with take of BindableDataInternal(&v110, (uint64_t)&v102);
        v43 = *(_OWORD *)v104;
        __swift_project_boxed_opaque_existential_1(&v102, *(uint64_t *)v104);
        if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v43 + 1) + 24))(a1, v43, *((_QWORD *)&v43 + 1)) & 1) != 0)
        {
          outlined destroy of __RKEntityActionSpecification((uint64_t)v88, type metadata accessor for LoadTrace);
          (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v40, v95);
          v44 = *(_QWORD *)(v89 + 56);
          if (v44)
          {
            v45 = v44 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
            *(_QWORD *)v45 = 1;
            *(_BYTE *)(v45 + 8) = 0;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          v46 = swift_initStackObject();
          *(_OWORD *)(v46 + 16) = xmmword_21BE57F30;
          v47 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v46 + 32) = 1701869940;
          *(_QWORD *)(v46 + 40) = 0xE400000000000000;
          *(_QWORD *)(v46 + 48) = 0x6D6F724664616F4CLL;
          *(_QWORD *)(v46 + 56) = 0xEB000000004C5255;
          *(_QWORD *)(v46 + 72) = v47;
          *(_QWORD *)(v46 + 80) = 0x73746E65746E6F63;
          *(_QWORD *)(v46 + 88) = 0xEA0000000000664FLL;
          v48 = v95;
          *(_QWORD *)(v46 + 120) = v95;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v46 + 96));
          ((void (*)(uint64_t *, uint64_t, uint64_t))v38)(boxed_opaque_existential_1, v36, v48);
          *(_QWORD *)(v46 + 128) = 0x656D614E68746977;
          *(_QWORD *)(v46 + 136) = 0xE800000000000000;
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          v51 = v91;
          *(_QWORD *)(v46 + 144) = v90;
          *(_QWORD *)(v46 + 152) = v51;
          *(_QWORD *)(v46 + 168) = v50;
          *(_QWORD *)(v46 + 176) = 0xD000000000000015;
          *(_QWORD *)(v46 + 184) = 0x800000021BE903F0;
          v52 = static RKARSystemCore.generateDecimatedMeshes;
          *(_QWORD *)(v46 + 216) = MEMORY[0x24BEE1328];
          *(_BYTE *)(v46 + 192) = v52;
          swift_bridgeObjectRetain();
          v53 = specialized Dictionary.init(dictionaryLiteral:)(v46);
          v38 = *(_BYTE **)&v104[8];
          v54 = *(_QWORD *)v104;
          __swift_project_boxed_opaque_existential_1(&v102, *(uint64_t *)v104);
          v55 = v92;
          v56 = (*((uint64_t (**)(unint64_t, uint64_t, _BYTE *))v38 + 4))(v53, v54, v38);
          v57 = v112;
          if (v55)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v38 = (_BYTE *)v56;
            swift_bridgeObjectRelease();
            specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)((uint64_t)v38);
            specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v38, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
            LoadTracer.endLoad(of:with:)((uint64_t)v38, v41);
          }
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of BodyTrackingComponent?((uint64_t)v57, &demangling cache variable for type metadata for RealityFileLoadInformation?);
          outlined destroy of __RKEntityActionSpecification(v41, type metadata accessor for LoadTrace);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
          return (uint64_t)v38;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
        v67 = v82;
        v42 = v96;
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v110, &demangling cache variable for type metadata for USDImportService?);
        v67 = v82;
      }
      v72 = v88;
      v73 = *(_QWORD *)(v89 + 56);
      v74 = v84;
      if (v73)
      {
        v75 = v73 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(_QWORD *)v75 = 0;
        *(_BYTE *)(v75 + 8) = 0;
      }
      v76 = v92;
      v77 = specialized closure #1 in static Entity.__load(contentsOf:withName:loadOptions:)(v40, v42, v90, v91, v29, v74, v67, (uint64_t)v72);
      if (!v76)
        v38 = (_BYTE *)v77;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v72, type metadata accessor for LoadTrace);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v40, v95);
      outlined destroy of BodyTrackingComponent?((uint64_t)v112, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v97, type metadata accessor for LoadTrace);
      return (uint64_t)v38;
    }
    v58 = v81;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v38, (uint64_t)v81, type metadata accessor for RealityFileLoadInformation);
    memset(v104, 0, sizeof(v104));
    v103 = 0u;
    v105 = 1;
    v106 = 0;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    LOBYTE(v102) = 2;
    v59 = v89;
    outlined assign with copy of __DownsamplingStrategy?(v89, (uint64_t)&v104[8]);
    *(_QWORD *)&v104[48] = *(_QWORD *)(v59 + 40);
    v60 = v91;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v104[56] = v90;
    *(_QWORD *)&v104[64] = v60;
    v106 = v79 != 2;
    HIBYTE(v105) = (v79 & 0xFE) != 2;
    v61 = *(_QWORD *)(v59 + 56);
    swift_retain();
    swift_release();
    v109 = v61;
    v62 = (uint64_t *)&v58[*(int *)(v39 + 20)];
    v63 = *v62;
    v64 = v62[1];
    swift_bridgeObjectRetain();
    v65 = v63;
    v66 = v92;
    __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)((uint64_t)v58, v65, v64, (uint64_t)&v102, (uint64_t *)&v110);
    if (v66)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of __RKEntityActionSpecification((uint64_t)v58, type metadata accessor for RealityFileLoadInformation);
      outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v97, type metadata accessor for LoadTrace);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v110, (uint64_t)&v101);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
      swift_dynamicCast();
      v68 = v99;
      v69 = v100;
      __swift_project_boxed_opaque_existential_1(v98, v99);
      v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v68, v69);
      v71 = (uint64_t)v97;
      v38 = (_BYTE *)v70;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
      specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v38);
      LoadTracer.endLoad(of:with:)((uint64_t)v38, v71);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v110);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v58, type metadata accessor for RealityFileLoadInformation);
      outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      outlined destroy of __RKEntityActionSpecification(v71, type metadata accessor for LoadTrace);
    }
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v102);
    return (uint64_t)v38;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t inited;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v40;
  void *v41;
  char v42;
  void *v43;
  __int128 v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  NSURL *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  Swift::String_optional v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t Information;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[97];
  __int16 v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;

  v91 = a4;
  v98 = a1;
  v99 = a3;
  v97 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v87 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v88 = (char *)&v87 - v7;
  v100 = type metadata accessor for URL();
  v96 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v89 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v92 = (char *)&v87 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v90 = (char *)&v87 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  v16 = *(_QWORD *)(Information - 8);
  MEMORY[0x24BDAC7A8](Information);
  v93 = (uint64_t)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char **)((char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = specialized static __ServiceLocator.shared.getter();
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 168) + 32);
  swift_beginAccess();
  v24 = *(_QWORD *)(v22 + 24);
  swift_unownedRetainStrong();
  v25 = *(void **)(v24 + 32);
  v115 = v22;
  swift_retain();
  v102 = v23;
  swift_retain();
  v26 = v25;
  swift_release();
  *v21 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BEE5610], v18);
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v24 & 1) != 0)
  {
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v27 = static Entity.synchronousLoadOptions;
  v28 = v98;
  v29 = URL.absoluteString.getter();
  v31 = v30;
  swift_beginAccess();
  v32 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  inited = swift_initStackObject();
  swift_weakInit();
  *(_QWORD *)(inited + 16) = v29;
  *(_QWORD *)(inited + 24) = v31;
  *(_BYTE *)(inited + 32) = v27;
  *(_BYTE *)(inited + 33) = v32;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 4;
  swift_weakAssign();
  v34 = v115 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v34, (uint64_t)&v113, &demangling cache variable for type metadata for USDImportService?);
  if (v114)
  {
    outlined init with take of BindableDataInternal(&v113, (uint64_t)v107);
    v35 = *(_OWORD *)&v107[24];
    __swift_project_boxed_opaque_existential_1(v107, *(uint64_t *)&v107[24]);
    if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v35 + 1) + 24))(v28, v35, *((_QWORD *)&v35 + 1)) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      v36 = swift_initStackObject();
      *(_OWORD *)(v36 + 16) = xmmword_21BE57F30;
      *(_QWORD *)(v36 + 32) = 1701869940;
      *(_QWORD *)(v36 + 40) = 0xE400000000000000;
      v37 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v36 + 48) = 0xD000000000000011;
      *(_QWORD *)(v36 + 56) = 0x800000021BE90B80;
      *(_QWORD *)(v36 + 72) = v37;
      *(_QWORD *)(v36 + 80) = 0x73746E65746E6F63;
      *(_QWORD *)(v36 + 88) = 0xEA0000000000664FLL;
      v38 = v100;
      *(_QWORD *)(v36 + 120) = v100;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v36 + 96));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v96 + 16))(boxed_opaque_existential_1, v28, v38);
      *(_QWORD *)(v36 + 128) = 0x656D614E68746977;
      *(_QWORD *)(v36 + 136) = 0xE800000000000000;
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v41 = v99;
      *(_QWORD *)(v36 + 144) = v97;
      *(_QWORD *)(v36 + 152) = v41;
      *(_QWORD *)(v36 + 168) = v40;
      *(_QWORD *)(v36 + 176) = 0xD000000000000015;
      *(_QWORD *)(v36 + 184) = 0x800000021BE903F0;
      v42 = static RKARSystemCore.generateDecimatedMeshes;
      *(_QWORD *)(v36 + 216) = MEMORY[0x24BEE1328];
      *(_BYTE *)(v36 + 192) = v42;
      swift_bridgeObjectRetain();
      v43 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v36);
      v44 = *(_OWORD *)&v107[24];
      __swift_project_boxed_opaque_existential_1(v107, *(uint64_t *)&v107[24]);
      v45 = v101;
      (*(void (**)(void *, _QWORD, _QWORD))(*((_QWORD *)&v44 + 1) + 32))(v43, v44, *((_QWORD *)&v44 + 1));
      swift_bridgeObjectRelease();
      if (!v45)
      {
        type metadata accessor for AnchorEntity();
        v43 = (void *)swift_dynamicCastClassUnconditional();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v43, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
      }
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
      return (uint64_t)v43;
    }
    v94 = inited;
    v46 = v27;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  }
  else
  {
    v94 = inited;
    v46 = v27;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v113, &demangling cache variable for type metadata for USDImportService?);
  }
  v47 = v100;
  type metadata accessor for RealityFileLoadInformationResolver();
  static RealityFileLoadInformationResolver.resolve(url:)(v28, (uint64_t)v15);
  v48 = Information;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, Information) != 1)
  {
    v63 = (uint64_t)v15;
    v64 = v93;
    outlined init with take of __RKEntityActionSpecification(v63, v93, type metadata accessor for RealityFileLoadInformation);
    memset(&v107[8], 0, 89);
    v108 = 1;
    v109 = 0;
    v112 = 0;
    v110 = 0;
    v111 = 0;
    v107[0] = 2;
    outlined assign with copy of __DownsamplingStrategy?(v91, (uint64_t)&v107[32]);
    v65 = v99;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v107[80] = v97;
    *(_QWORD *)&v107[88] = v65;
    v109 = v46 != 2;
    HIBYTE(v108) = (v46 & 0xFE) != 2;
    v66 = (uint64_t *)(v64 + *(int *)(v48 + 20));
    v67 = *v66;
    v43 = (void *)v66[1];
    swift_bridgeObjectRetain();
    v68 = v67;
    v69 = v101;
    __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)(v64, v68, (unint64_t)v43, (uint64_t)v107, (uint64_t *)&v113);
    if (v69)
    {
      outlined destroy of __RKEntityActionSpecification(v64, type metadata accessor for RealityFileLoadInformation);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v113, (uint64_t)&v106);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
      swift_dynamicCast();
      v74 = v104;
      v75 = v105;
      __swift_project_boxed_opaque_existential_1(v103, v104);
      v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v75 + 16))(v74, v75);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v43);
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v113);
      outlined destroy of __RKEntityActionSpecification(v64, type metadata accessor for RealityFileLoadInformation);
    }
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v107);
    return (uint64_t)v43;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for RealityFileLoadInformation?);
  v49 = v96;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
  v51 = v90;
  v50(v90, v28, v47);
  swift_retain();
  URL._bridgeToObjectiveC()(v52);
  v54 = v53;
  swift_beginAccess();
  v55 = v28;
  v56 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_initStackObject();
  v100 = __SceneImportOperation.init(core:)(v56);
  swift_release();
  v57 = *(void (**)(char *, uint64_t))(v49 + 8);
  v58 = v51;
  v59 = v47;
  v57(v58, v47);
  v60 = v92;
  v50(v92, v55, v47);
  v61 = v99;
  if (v99)
  {
    swift_bridgeObjectRetain();
    v43 = v101;
    v62 = v97;
  }
  else
  {
    v70 = v89;
    URL.deletingPathExtension()();
    v62 = URL.lastPathComponent.getter();
    v61 = v71;
    v57(v70, v59);
    v43 = v101;
  }
  v57(v60, v59);
  v72.value._countAndFlagsBits = v62;
  v72.value._object = v61;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v72, 0, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  __SceneImportOperation.run()();
  if (v73)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v43;
  }
  v76 = RESceneImportOperationCopySourceURL();
  if (v76)
  {
    v77 = (void *)v76;
    v78 = (uint64_t)v87;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v79 = 0;
  }
  else
  {
    v79 = 1;
    v78 = (uint64_t)v87;
  }
  v80 = (uint64_t)v88;
  v82 = v96;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v78, v79, 1, v59);
  outlined init with take of Transform?(v78, v80, &demangling cache variable for type metadata for URL?);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v80, 1, v59);
  if ((_DWORD)result != 1)
  {
    v83 = __SceneImportOperation.importedScenes.getter();
    __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v83, (uint64_t)v107);
    swift_bridgeObjectRelease();
    v57((char *)v80, v59);
    v84 = *(void **)v107;
    v85 = *(_OWORD *)&v107[8];
    swift_bridgeObjectRetain();
    v43 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v85, *((uint64_t *)&v85 + 1));
    v101 = v84;
    *(_OWORD *)v107 = v85;
    swift_bridgeObjectRetain_n();
    v86 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v43, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v86, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v43);
    specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v43, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (uint64_t)v43;
  }
  __break(1u);
  return result;
}

uint64_t sub_21BD43F9C()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_21BD43FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v4 = (v2 + 88) & ~v2;
  v5 = (v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();
  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();

  swift_release();
  objc_release(*(id *)(v0
                     + ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(a1, a2, v2 + 16, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), *(_QWORD *)(v2 + 80), v2 + v6, *(void **)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2+ ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t objectdestroy_32Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:));
}

uint64_t partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(a1, a2, v3 + v7, *(_QWORD *)(v3 + v8), *(_QWORD *)(v3 + v8 + 8), *(_QWORD *)(v3 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v3 + ((((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t specialized static Entity.loadModelAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  char v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[3];
  __int128 v16;

  swift_beginAccess();
  v6 = static RKARSystemCore.generateDecimatedMeshes;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LOWORD(v12) = 512;
  *((_QWORD *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((_QWORD *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1)
    swift_once();
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  v7 = specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

void (*specialized static Entity.loadModel(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4))(char *, uint64_t, uint64_t)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v34;
  void *v35;
  char v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  NSURL *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  Swift::String_optional v56;
  uint64_t v57;
  uint64_t v59;
  _QWORD v60[2];
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = a4;
  v65 = a3;
  v63 = a2;
  v67 = type metadata accessor for URL();
  v64 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v62 = (char *)v60 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v61 = (char *)v60 - v10;
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (_QWORD *)((char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v16 = *(_QWORD *)(v15 + 24);
  swift_unownedRetainStrong();
  v17 = *(void **)(v16 + 32);
  swift_retain();
  v18 = v17;
  swift_release();
  *v14 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE5610], v11);
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) != 0)
  {
    if (one-time initialization token for synchronousLoadOptions == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v19 = static Entity.synchronousLoadOptions;
  v20 = URL.absoluteString.getter();
  v22 = v21;
  swift_beginAccess();
  v23 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  inited = swift_initStackObject();
  swift_weakInit();
  *(_QWORD *)(inited + 16) = v20;
  *(_QWORD *)(inited + 24) = v22;
  *(_BYTE *)(inited + 32) = v19;
  *(_BYTE *)(inited + 33) = v23;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 2;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v15 + 176, (uint64_t)&v68, &demangling cache variable for type metadata for USDImportService?);
  if (!v69)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v68, &demangling cache variable for type metadata for USDImportService?);
    v27 = a1;
LABEL_12:
    v41 = v67;
    v60[0] = v6;
    v60[1] = inited;
    v67 = v15;
    v42 = *(_QWORD *)(v73 + 56);
    if (v42)
    {
      v43 = v42 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(_QWORD *)v43 = 0;
      *(_BYTE *)(v43 + 8) = 0;
    }
    v44 = v64;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
    v45 = v61;
    v37(v61, v27, v41);
    swift_retain();
    URL._bridgeToObjectiveC()(v46);
    v48 = v47;
    swift_beginAccess();
    v49 = RESceneImportOperationCreateWithURL();

    type metadata accessor for __SceneImportOperation();
    swift_initStackObject();
    __SceneImportOperation.init(core:)(v49);
    swift_release();
    v50 = v27;
    v51 = *(void (**)(char *, uint64_t))(v44 + 8);
    v51(v45, v41);
    v52 = v62;
    v37(v62, v50, v41);
    v53 = v65;
    if (v65)
    {
      swift_bridgeObjectRetain();
      v54 = v63;
    }
    else
    {
      v37 = (void (*)(char *, uint64_t, uint64_t))v60[0];
      URL.deletingPathExtension()();
      v54 = URL.lastPathComponent.getter();
      v53 = v55;
      v51((char *)v37, v41);
    }
    v51(v52, v41);
    v56.value._countAndFlagsBits = v54;
    v56.value._object = v53;
    __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v56, 1, static RKARSystemCore.generateDecimatedMeshes, *(Swift::Bool_optional *)(v73 + 49));
    swift_bridgeObjectRelease();
    __SceneImportOperation.run()();
    if (!v57)
    {
      v37 = (void (*)(char *, uint64_t, uint64_t))__SceneImportOperation.makeModelEntity()();
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v37, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    }
    swift_release();
    swift_release();
    swift_release();
    return v37;
  }
  outlined init with take of BindableDataInternal(&v68, (uint64_t)v70);
  v25 = v71;
  v26 = v72;
  __swift_project_boxed_opaque_existential_1(v70, v71);
  v27 = a1;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 24))(a1, v25, v26) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
    goto LABEL_12;
  }
  v28 = *(_QWORD *)(v73 + 56);
  v29 = v67;
  if (v28)
  {
    v30 = v28 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(_QWORD *)v30 = 1;
    *(_BYTE *)(v30 + 8) = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v31 = swift_initStackObject();
  *(_OWORD *)(v31 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v31 + 32) = 1701869940;
  *(_QWORD *)(v31 + 40) = 0xE400000000000000;
  v32 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v31 + 48) = 0xD000000000000010;
  *(_QWORD *)(v31 + 56) = 0x800000021BE90B20;
  *(_QWORD *)(v31 + 72) = v32;
  *(_QWORD *)(v31 + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(v31 + 88) = 0xEA0000000000664FLL;
  *(_QWORD *)(v31 + 120) = v29;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v64 + 16))(boxed_opaque_existential_1, a1, v29);
  *(_QWORD *)(v31 + 128) = 0x656D614E68746977;
  *(_QWORD *)(v31 + 136) = 0xE800000000000000;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v35 = v65;
  *(_QWORD *)(v31 + 144) = v63;
  *(_QWORD *)(v31 + 152) = v35;
  *(_QWORD *)(v31 + 168) = v34;
  *(_QWORD *)(v31 + 176) = 0xD000000000000015;
  *(_QWORD *)(v31 + 184) = 0x800000021BE903F0;
  v36 = static RKARSystemCore.generateDecimatedMeshes;
  *(_QWORD *)(v31 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v31 + 192) = v36;
  swift_bridgeObjectRetain();
  v37 = (void (*)(char *, uint64_t, uint64_t))specialized Dictionary.init(dictionaryLiteral:)(v31);
  v38 = v71;
  v39 = v72;
  __swift_project_boxed_opaque_existential_1(v70, v71);
  v40 = v66;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v39 + 32))(v37, v38, v39);
  if (v40)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ModelEntity();
    v59 = swift_dynamicCastClass();
    if (v59)
    {
      v37 = (void (*)(char *, uint64_t, uint64_t))v59;
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v59, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
      return v37;
    }
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  return v37;
}

uint64_t specialized static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[40];

  v28 = a2;
  v29 = a1;
  v30 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v30 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](v30);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (id *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = specialized static __ServiceLocator.shared.getter();
  v10 = *(void **)(*(_QWORD *)(v9 + 168) + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(v9 + 24);
  swift_unownedRetainStrong();
  v12 = *(void **)(v11 + 32);
  swift_retain();
  v27 = v10;
  v13 = v12;
  swift_release();
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 168) + 32);
  *v8 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE5610], v5);
  v15 = v13;
  swift_retain();
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v10 & 1) != 0)
  {
    outlined init with copy of (Int, URL)(v28, (uint64_t)v31, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    v17 = v15;
    v18 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v30);
    v19 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v20 = (v3 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject();
    outlined init with take of Transform?((uint64_t)v31, v21 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    *(_QWORD *)(v21 + 56) = v14;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v21 + v19, v4, v18);
    *(_QWORD *)(v21 + v20) = v17;
    *(_QWORD *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8)) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<[Entity]>);
    v22 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<[Entity], Error>?>);
    v23 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v24 = swift_allocObject();
    *(_DWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 32) = -1;
    *(_QWORD *)(v22 + 16) = v23;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = partial apply for closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    v25[3] = v21;
    v25[4] = v23;
    v25[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<[Entity], Error>);
    swift_allocObject();
    swift_retain();
    v26 = Future.init(_:)();
    swift_release();
    *(_QWORD *)(v22 + 24) = v26;
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21BD44DD4()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in static Entity.loadAsync(assetDescriptor:)(void (*a1)(void **), uint64_t a2)
{
  uint64_t v2;

  closure #1 in static Entity.loadAsync(assetDescriptor:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t closure #1 in static Entity.loadReferences(root:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return closure #1 in static Entity.loadReferences(root:)(a1, a2, v6);
}

_BYTE *sub_21BD44E6C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 2;
  return result;
}

_BYTE *sub_21BD44E80(_BYTE *result, char *a2)
{
  int v2;
  char v3;

  v2 = *a2;
  if (*result == 1)
  {
    if (v2 != 2)
      return result;
    v3 = 3;
  }
  else
  {
    if (v2 == 2)
      return result;
    v3 = 2;
  }
  *a2 = v3;
  return result;
}

_BYTE *sub_21BD44EB4@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 0xFE) != 2;
  return result;
}

_BYTE *sub_21BD44ECC(_BYTE *result, char *a2)
{
  int v2;
  char v3;

  v2 = *a2 & 0xFE;
  if (*result == 1)
  {
    if (v2 != 2)
      return result;
    v3 = 0;
  }
  else
  {
    if (v2 == 2)
      return result;
    v3 = 3;
  }
  *a2 = v3;
  return result;
}

uint64_t destroy for Entity.__LoadOptions(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t initializeWithCopy for Entity.__LoadOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Entity.__LoadOptions(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Entity.__LoadOptions(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.__LoadOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.__LoadOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.__LoadOptions()
{
  return &type metadata for Entity.__LoadOptions;
}

uint64_t getEnumTagSinglePayload for Entity.__AsyncLoadOptions(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 2;
  else
    v7 = -3;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.__AsyncLoadOptions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BD45290 + 4 * byte_21BE7780B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BD452C4 + 4 * byte_21BE77806[v4]))();
}

uint64_t sub_21BD452C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD452CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD452D4);
  return result;
}

uint64_t sub_21BD452E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD452E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BD452EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD452F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Entity.__AsyncLoadOptions()
{
  return &type metadata for Entity.__AsyncLoadOptions;
}

uint64_t type metadata accessor for Entity.AssetArray()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for Entity.LoadFinisher()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Entity.LoadFinisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Entity.LoadFinisher);
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.LoadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 4u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 3u:
        v10 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        v12 = a2[2];
        v13 = a2[3];
        a1[2] = v12;
        a1[3] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Entity.LoadError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 4:
      goto LABEL_4;
    case 1:
    case 3:
      v3 = type metadata accessor for URL();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 5:
      swift_bridgeObjectRelease();
LABEL_4:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for Entity.LoadError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 4u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 1u:
    case 3u:
      v7 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_6;
    case 5u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = a2[2];
      v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for Entity.LoadError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for Entity.LoadError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 3u:
        v6 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for Entity.LoadError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Entity.LoadError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for Entity.LoadError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Entity.LoadError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RealityFileLoadInformation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for RealityFileLoadInformation(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityFileLoadInformation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD45D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityFileLoadInformation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BD45E20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for RealityFileLoadInformation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in Entity.LoadError()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
}

uint64_t partial apply for closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_21BD45F44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(void *a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(a1, v3);
}

uint64_t sub_21BD45FF8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(char a1)
{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_141_0, (uint64_t)&unk_24DFCEC90, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_148);
}

{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_240, (uint64_t)&unk_24DFCF118, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_247);
}

{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_364, (uint64_t)&unk_24DFCF6E0, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_371);
}

{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_564, (uint64_t)&unk_24DFD0068, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_571);
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t sub_21BD4605C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v1);
}

uint64_t sub_21BD46088()
{
  return swift_deallocObject();
}

uint64_t _ss13OpaquePointerVIgy_ABytIegnr_TRTA_0(_QWORD *a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_21BD460A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BD460C4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:)(char a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_21BD46100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v5 = (v3 + 64) & ~v3;
  v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(a1, a2, v2 + 16, *(_QWORD *)(v2 + 56), v2 + v6, *(void **)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD46234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v5 = (v3 + 64) & ~v3;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(v0 + 16, *(_QWORD *)(v0 + 56), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_21BD46348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(*(_QWORD *)(v0 + 16), v0 + v2, *(void (**)(uint64_t, _QWORD))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD46424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v4 + 24))
    __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  v5 = (v4 + 71) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v8), *(void **)(v2 + v8 + 8), v2 + v9, *(void **)(v2 + ((v9 + 71) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2+ ((((((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t _ss6ResultOy10RealityKit11ModelEntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTm(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t)&unk_24DFCF190, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ());
}

uint64_t sub_21BD465F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v4 + 24))
    __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + ((((v4 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)), (_QWORD *)(v2+ ((((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), v2 + 24, *(uint64_t (**)(void *, uint64_t))(v2 + 88), *(_QWORD *)(v2 + 96), (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
}

void partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(unsigned int *)(v5 + 32), *(void (**)(void *, uint64_t))(v5 + 40), *(_QWORD *)(v5 + 48), *(void **)(v5 + 56), *(_QWORD *)(v5 + 64), a2, a3, a4, a5);
}

uint64_t sub_21BD467F0()
{
  return swift_deallocObject();
}

uint64_t sub_21BD46800()
{
  uint64_t v0;

  swift_release();

  swift_release();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)()
{
  return partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD))doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:));
}

uint64_t sub_21BD4686C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 72))
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t v2;

  closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + 48, *(_QWORD *)(v2 + 112));
}

uint64_t sub_21BD468FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), v2 + 40, *(_QWORD *)(v2 + 104), *(void **)(v2 + 112), v2 + 120, *(_QWORD *)(v2 + 160));
}

uint64_t objectdestroy_219Tm()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 48))
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BD469E4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)()
{
  uint64_t *v0;

  return doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], v0[10]);
}

uint64_t sub_21BD46A34()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)()
{
  uint64_t v0;

  return closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56));
}

uint64_t partial apply for doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)()
{
  return partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD))doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:));
}

uint64_t partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1 + 5, v1[13], v1[14]);
}

uint64_t objectdestroy_270Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v0;

  closure #1 in doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32, *(void (**)(uint64_t, uint64_t))(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_21BD46B24()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:)(uint64_t a1)
{
  return specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
}

uint64_t sub_21BD46B4C()
{
  return objectdestroy_343Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21BD46B80()
{
  return swift_deallocObject();
}

uint64_t sub_21BD46B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v4 = (v2 + 88) & ~v2;
  swift_bridgeObjectRelease();
  swift_release();
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v4, v5);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  return doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(v0 + 16, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t partial apply for closure #2 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)()
{
  uint64_t v0;

  return closure #2 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 64), *(void (**)(uint64_t, _QWORD))(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_21BD46D40()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  uint64_t *v0;

  return doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_21BD46DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  v4 = (v2 + 112) & ~v2;
  swift_release();
  swift_release();
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v4, v5);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  return doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), v0 + 40, *(_QWORD *)(v0 + 104), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_21BD46F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((((((v3 + *(_QWORD *)(v2 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + v4 + 24))
    __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + ((((v4 + 71) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v3 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(v0 + v2, *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(unsigned __int8 *)(v0 + v4 + 16), *(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v8), v0 + v9, *(_QWORD *)(v0 + ((v9 + 71) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 8), (_QWORD *)(v0 + ((((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_21BD47114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  return postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), v2 + 24, *(uint64_t (**)(void *, uint64_t))(v2 + 88), *(_QWORD *)(v2 + 96), (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, _QWORD), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
}

uint64_t sub_21BD47234()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 72))
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t *v0;

  return doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(v0[2], v0[3], v0[4], v0[5], (uint64_t)(v0 + 6), v0[14], v0[15]);
}

uint64_t objectdestroy_323Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)()
{
  uint64_t v0;

  closure #1 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + 40, *(void (**)(uint64_t, uint64_t))(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t sub_21BD47328()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + 32, *(uint64_t (**)(void *, uint64_t))(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t objectdestroy_313Tm()
{
  uint64_t v0;
  uint64_t Trace;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Trace = type metadata accessor for LoadTrace(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(Trace - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(Trace + 36);
  v5 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in LoadTracer.subscribe<A>(to:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for LoadTrace(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in LoadTracer.subscribe<A>(to:with:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t objectdestroy_316Tm()
{
  uint64_t v0;
  uint64_t Trace;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Trace = type metadata accessor for LoadTrace(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(Trace - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(Trace + 36);
  v5 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in LoadTracer.subscribe<A>(to:with:)()
{
  type metadata accessor for LoadTrace(0);
  return specialized closure #2 in LoadTracer.subscribe<A>(to:with:)();
}

uint64_t sub_21BD475A0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)()
{
  uint64_t v0;

  return closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(*(_BYTE *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(void **)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t objectdestroy_438Tm()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  if (*(_QWORD *)(v0 + 96))
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 64), v0 + 72, *(void (**)(uint64_t, _QWORD))(v0 + 136), *(_QWORD *)(v0 + 144));
}

uint64_t sub_21BD476D8()
{
  return objectdestroy_343Tm((void (*)(_QWORD))MEMORY[0x24BEE4F70]);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadReferences(root:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return static ReferenceComponent.loadReference(at:)(v2);
}

uint64_t sub_21BD47754()
{
  return objectdestroy_343Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(named:in:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(uint64_t (**)(void *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t objectdestroy_131Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)()
{
  partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)((uint64_t)&unk_24DFD0158, (uint64_t)partial apply for closure #1 in doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:), (uint64_t)&unk_24DFD0130, (uint64_t)partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:));
}

void partial apply for closure #1 in doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)()
{
  uint64_t v0;

  closure #1 in doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_21BD47830()
{
  return objectdestroy_343Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void partial apply for doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)()
{
  partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)((uint64_t)&unk_24DFD0298, (uint64_t)partial apply for closure #1 in doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:), (uint64_t)&unk_24DFD0270, (uint64_t)partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:));
}

void partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(v4[2], v4[3], v4[4], v4[5], v4[6], a1, a2, a3, a4);
}

uint64_t sub_21BD478A8()
{
  return objectdestroy_343Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_343Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(uint64_t (**)(void *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_21BD47930()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)()
{
  uint64_t v0;

  return doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t objectdestroy_394Tm()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_416Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  uint64_t v0;

  closure #1 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(uint64_t, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t BoundingBox.transformed(by:)()
{
  return REAABBTransform();
}

uint64_t BoundingBox.extents.getter()
{
  return REAABBExtents();
}

uint64_t BoundingBox.center.getter()
{
  return REAABBCenter();
}

uint64_t BoundingBox.isEmpty.getter()
{
  return REAABBIsEmpty();
}

double BoundingBox.init()()
{
  return *(double *)&_PromotedConst_3;
}

double one-time initialization function for empty()
{
  double result;

  result = 1.40444843e306;
  static BoundingBox.empty = xmmword_21BE52460;
  *(_OWORD *)algn_2551AB970 = xmmword_21BE52470;
  return result;
}

double static BoundingBox.empty.getter()
{
  if (one-time initialization token for empty != -1)
    swift_once();
  return *(double *)&static BoundingBox.empty;
}

void BoundingBox.min.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*BoundingBox.min.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double BoundingBox.max.getter(double a1, double a2)
{
  return a2;
}

void BoundingBox.max.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*BoundingBox.max.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BoundingBox.hash(into:)(uint64_t a1, double a2, __n128 a3)
{
  ((void (*)(void))specialized SIMD.hash(into:))();
  return specialized SIMD.hash(into:)(a1, a3);
}

Swift::Int BoundingBox.hashValue.getter(__n128 a1, __n128 a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v5, a1);
  specialized SIMD.hash(into:)(v5, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BoundingBox()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  _BYTE v4[72];

  v2 = *v0;
  v3 = v0[1];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v4, v2);
  specialized SIMD.hash(into:)(v4, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BoundingBox(uint64_t a1)
{
  __n128 *v1;
  __n128 v4;

  v4 = v1[1];
  specialized SIMD.hash(into:)(a1, *v1);
  return specialized SIMD.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BoundingBox()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  _BYTE v4[72];

  v2 = *v0;
  v3 = v0[1];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v4, v2);
  specialized SIMD.hash(into:)(v4, v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BoundingBox(__n128 *a1, __n128 *a2)
{
  return specialized static BoundingBox.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t BoundingBox.union(_:)()
{
  return REAABBExpandedToIncludePoint();
}

{
  return REAABBExpandedToIncludeBox();
}

uint64_t BoundingBox.formUnion(_:)()
{
  _OWORD *v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  result = REAABBExpandedToIncludePoint();
  *v0 = v2;
  v0[1] = v3;
  return result;
}

{
  _OWORD *v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  result = REAABBExpandedToIncludeBox();
  *v0 = v2;
  v0[1] = v3;
  return result;
}

uint64_t BoundingBox.contains(_:)()
{
  return REAABBContainsPoint();
}

{
  return REAABBContainsBox();
}

uint64_t BoundingBox.intersects(_:)()
{
  return REAABBIntersectsBox();
}

Swift::Void __swiftcall BoundingBox.transform(by:)(simd_float4x4 *by)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;

  REAABBTransform();
  *v1 = v2;
  v1[1] = v3;
}

uint64_t BoundingBox.distanceSquared(toPoint:)()
{
  return REAABBComputeDistanceSquaredToPoint();
}

BOOL specialized static BoundingBox.== infix(_:_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  BOOL v5;
  _BOOL8 result;
  float v7;
  float v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;

  v4 = 0;
  while (1)
  {
    v14 = a1;
    v7 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v15 = a3;
    v8 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v5 = v7 == v8;
    if (v4 == 2)
      break;
    while (1)
    {
      ++v4;
      if (v5)
        break;
      v5 = 0;
      result = 0;
      if (v4 == 2)
        return result;
    }
  }
  if (v7 != v8)
    return 0;
  v9 = 0;
  while (1)
  {
    v12 = a2;
    v11 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v13 = a4;
    v10 = v11 == *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    result = v10;
    if (v9 == 2)
      break;
    while (1)
    {
      ++v9;
      if (v10)
        break;
      v10 = 0;
      result = 0;
      if (v9 == 2)
        return result;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BoundingBox and conformance BoundingBox()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BoundingBox and conformance BoundingBox;
  if (!lazy protocol witness table cache variable for type BoundingBox and conformance BoundingBox)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BoundingBox, &type metadata for BoundingBox);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundingBox and conformance BoundingBox);
  }
  return result;
}

ValueMetadata *type metadata accessor for BoundingBox()
{
  return &type metadata for BoundingBox;
}

BOOL static AntialiasingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AntialiasingMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

unint64_t lazy protocol witness table accessor for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1;
  if (!lazy protocol witness table cache variable for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_AntialiasingMode_v1, &type metadata for _Proto_AntialiasingMode_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AntialiasingMode and conformance AntialiasingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AntialiasingMode and conformance AntialiasingMode;
  if (!lazy protocol witness table cache variable for type AntialiasingMode and conformance AntialiasingMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AntialiasingMode, &type metadata for AntialiasingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AntialiasingMode and conformance AntialiasingMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for _Proto_AntialiasingMode_v1()
{
  return &type metadata for _Proto_AntialiasingMode_v1;
}

uint64_t storeEnumTagSinglePayload for _Proto_AntialiasingMode_v1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BD48328 + 4 * byte_21BE77BA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BD4835C + 4 * byte_21BE77BA0[v4]))();
}

uint64_t sub_21BD4835C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD48364(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BD4836CLL);
  return result;
}

uint64_t sub_21BD48378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BD48380);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BD48384(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BD4838C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AntialiasingMode()
{
  return &type metadata for AntialiasingMode;
}

uint64_t type metadata completion function for AssetServiceScopedRegistry()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AssetServiceScopedRegistry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssetServiceScopedRegistry);
}

_QWORD *specialized AssetServiceScopedRegistry.instance(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  Swift::UInt v28;
  void (*v29)(uint64_t, uint64_t);
  _QWORD aBlock[3];
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[5];

  v35[3] = a3;
  v35[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 32);
  v10 = v9(a3, a4);
  v11 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v12 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v12 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v14 & 1) != 0))
  {
    v15 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v11);
    outlined init with copy of __REAssetService((uint64_t)v35, (uint64_t)aBlock);
    type metadata accessor for __RealityFileURLResolver();
    v16 = (_QWORD *)swift_allocObject();
    v29 = (void (*)(uint64_t, uint64_t))v9;
    v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)aBlock, (uint64_t)v31);
    v28 = v10;
    MEMORY[0x24BDAC7A8](v17);
    v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v19);
    v15 = specialized __RealityFileURLResolver.init(_:)((uint64_t)v19, v16, a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    os_unfair_lock_lock(v11);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0x8000000000000000;
    v22 = v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, v28, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a2 + 24) = v34;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v29(a3, a4);
    v23 = swift_allocObject();
    swift_weakInit();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 24) = v22;
    v32 = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v33 = v24;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v31 = &block_descriptor_39;
    v25 = _Block_copy(aBlock);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v25);
  }
  os_unfair_lock_unlock(v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v15;
}

uint64_t sub_21BD486CC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BD486F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t static __SceneResource.fromCoreUnretained(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  RERetain();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

BOOL *__SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(char a1, BOOL *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  v7 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v15);
  v9 = v16;
  v8 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v9, v8);
  LODWORD(v8) = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((_DWORD)v8)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    Scene.init(coreScene:)(v7);
    RERelease();
    swift_release();
    closure #1 in __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(a2, a1 & 1, a3 & 1, &v18, v15);
    if (!v14)
      a2 = (BOOL *)v15[0];
    swift_release();
  }
  else
  {
    RERelease();
    swift_release();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    swift_allocError();
    v11 = v10;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 2, v12);
    swift_willThrow();
  }
  return a2;
}

uint64_t __SceneResource.makeSingleModelEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  v2 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1 + 120, (uint64_t)v10);
  v3 = v11;
  v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  v5 = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (v5)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    Scene.init(coreScene:)(v2);
    RERelease();
    swift_release();
    closure #1 in __SceneResource.makeSingleModelEntity()(&v13, v10);
    if (!v0)
      v1 = v10[0];
    swift_release();
  }
  else
  {
    RERelease();
    swift_release();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    swift_allocError();
    v7 = v6;
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 2, v8);
    swift_willThrow();
  }
  return v1;
}

uint64_t __SceneResource.makeSingleBodyTrackedEntity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  v2 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1 + 120, (uint64_t)v10);
  v3 = v11;
  v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  v5 = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (v5)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    Scene.init(coreScene:)(v2);
    RERelease();
    swift_release();
    closure #1 in __SceneResource.makeSingleBodyTrackedEntity()(&v13, v10);
    if (v0)
    {
      return swift_release();
    }
    else
    {
      swift_release();
      return v10[0];
    }
  }
  else
  {
    RERelease();
    swift_release();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    swift_allocError();
    v8 = v7;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 2, v9);
    return swift_willThrow();
  }
}

void __SceneResource.coreAsset.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t __SceneResource.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t __SceneResource.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t __SceneResource.coreHandle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[4];

  v1 = *(_QWORD *)(v0 + 16);
  v4[3] = MEMORY[0x24BEE27D0];
  v4[0] = v1;
  outlined init with copy of Any((uint64_t)v4, (uint64_t)&v3);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t static __SceneResource.fromCoreRetained(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t __SceneResource.makeScene(named:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v0 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  v1 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0 + 120, (uint64_t)v7);
  v2 = v8;
  v3 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  v4 = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (v4)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    v5 = Scene.init(coreScene:)(v1);
    RERelease();
    swift_release();
  }
  else
  {
    RERelease();
    swift_release();
    return 0;
  }
  return v5;
}

uint64_t closure #1 in __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)@<X0>(BOOL *a1@<X1>, char a2@<W2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t *EntitiesArray;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  EntitiesArray = (uint64_t *)RESceneGetEntitiesArray();
  if (v9 == 1)
    goto LABEL_3;
  v11 = v9;
  static os_log_type_t.fault.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v12 = swift_allocObject();
  v13 = a2;
  v14 = a4;
  v15 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v12 + 16) = xmmword_21BE411F0;
  v16 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v12 + 56) = v15;
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 32) = v11;
  type metadata accessor for OS_os_log();
  v17 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)();
  v18 = v14;
  a2 = v13;
  swift_bridgeObjectRelease();

  if (v11)
  {
LABEL_3:
    v19 = *EntitiesArray;
    REAnchoringComponentGetComponentType();
    *a1 = REEntityGetComponentByClass() != 0;
    REAnchoringComponentGetComponentType();
    if ((a2 & 1) != 0)
    {
      REEntityGetOrAddComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REEntityRemoveComponent();
    }
    REAnchorComponentGetComponentType();
    if (REEntityGetComponentByClass())
      REEntityRemoveComponent();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v20 = swift_dynamicCastClassUnconditional();
      goto LABEL_16;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      if ((a3 & 1) != 0)
      {
        REAnchoringComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          type metadata accessor for AnchorEntity();
          v22 = swift_allocObject();
          *(_QWORD *)(v22 + 16) = v19;
          MEMORY[0x22076D160](v19, v22);
LABEL_17:
          result = REEntitySetParent();
          *a5 = v22;
          return result;
        }
      }
      v20 = makeEntity(for:)(v19);
LABEL_16:
      v22 = v20;
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    v23 = swift_allocError();
    v25 = v24;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 2, v26);
    result = swift_willThrow();
    *v18 = v23;
  }
  return result;
}

uint64_t closure #1 in __SceneResource.makeSingleModelEntity()@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *EntitiesArray;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  EntitiesArray = (uint64_t *)RESceneGetEntitiesArray();
  if (v5 == 1)
  {
    v6 = *EntitiesArray;
    type metadata accessor for ModelEntity();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    result = MEMORY[0x22076D160](v6, v7);
    *a2 = v7;
  }
  else
  {
    v9 = v5;
    static os_log_type_t.fault.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v10 = swift_allocObject();
    v11 = MEMORY[0x24BEE1768];
    *(_OWORD *)(v10 + 16) = xmmword_21BE411F0;
    v12 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = v12;
    *(_QWORD *)(v10 + 32) = v9;
    type metadata accessor for OS_os_log();
    v13 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    v14 = swift_allocError();
    v16 = v15;
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 2, v17);
    result = swift_willThrow();
    *a1 = v14;
  }
  return result;
}

uint64_t closure #1 in __SceneResource.makeSingleBodyTrackedEntity()@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *EntitiesArray;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BodyTrackingComponent(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  EntitiesArray = (uint64_t *)RESceneGetEntitiesArray();
  if (v12 == 1)
  {
    v13 = *EntitiesArray;
    type metadata accessor for BodyTrackedEntity();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    MEMORY[0x22076D160](v13, v14);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
    v10[*(int *)(v7 + 20)] = 0;
    outlined init with copy of BodyTrackingComponent((uint64_t)v10, (uint64_t)v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v6);
    outlined destroy of BodyTrackingComponent?((uint64_t)v6);
    swift_release();
    result = outlined destroy of BodyTrackingComponent((uint64_t)v10);
    *a2 = v14;
  }
  else
  {
    v17 = v12;
    static os_log_type_t.fault.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v18 = swift_allocObject();
    v19 = MEMORY[0x24BEE1768];
    *(_OWORD *)(v18 + 16) = xmmword_21BE411F0;
    v20 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v18 + 56) = v19;
    *(_QWORD *)(v18 + 64) = v20;
    *(_QWORD *)(v18 + 32) = v17;
    type metadata accessor for OS_os_log();
    v21 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    v22 = swift_allocError();
    v24 = v23;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 2, v25);
    result = swift_willThrow();
    *a1 = v22;
  }
  return result;
}

uint64_t type metadata accessor for __SceneResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for __SceneResource()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError;
  if (!lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError)
  {
    v1 = type metadata accessor for SceneResourceLoadResult.InternalError(255);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneResourceLoadResult.InternalError, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError);
  }
  return result;
}

uint64_t outlined init with copy of BodyTrackingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BodyTrackingComponent?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of BodyTrackingComponent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PhysicallyBasedMaterial.baseColor.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:));
}

uint64_t sub_21BD496DC()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t PhysicallyBasedMaterial.roughness.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.metallic.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.normal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v16[20];
  _QWORD v17[8];
  unsigned __int8 v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  _BYTE v25[8];
  void *v26;

  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v25);
  v3 = v26;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  swift_bridgeObjectRetain_n();
  v5 = v4;
  specialized String.withCString<A>(_:)(0x4E65727574786574, 0xED00006C616D726FLL, v5, (uint64_t)v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = (void *)v17[0];
  v7 = v17[1];
  v8 = v17[2];
  v9 = v17[3];
  v10 = v17[4];
  v11 = v17[5];
  v12 = v17[6];
  v13 = v17[7];
  v14 = v18;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v25, (uint64_t)v16);
  if (v14 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v19);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    v6 = (void *)v19[0];
    v7 = v19[1];
    v8 = v19[2];
    v9 = v19[3];
    v14 = v24;
    if (v24 == 255)
    {
LABEL_6:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      LODWORD(v9) = 0;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    v20 = v10;
    v21 = v11;
    v22 = v12;
    v23 = v13;
  }
  if (v14 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v7, v8, v9, v20, v21, v22, v23, v14);
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 24) = v9;
  return outlined destroy of PhysicallyBasedMaterial((uint64_t)v25);
}

void PhysicallyBasedMaterial.blending.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  CGColor *v10;
  double Alpha;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[19];

  if ((*(_WORD *)(v1 + 104) & 1) != 0)
  {
    v5 = v1;
    outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v16);
    v6 = 1.0;
    if (RELinkedOnOrAfterFall2024OSVersions())
    {
      v7 = specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      if ((v7 & 0x100000000) != 0)
        v6 = 1.0;
      else
        v6 = *(float *)&v7;
    }
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v12);
    v8 = (uint64_t)v13;
    if (v13)
    {
      v4 = v15;
      v3 = v14;
      v9 = v12;
    }
    else
    {
      v9 = 0;
      v3 = 0;
      v4 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v9, (uint64_t)v13);
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    outlined consume of MaterialParameters.Texture?(v9, v8);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      v16[3] = &type metadata for PhysicallyBasedMaterial;
      v16[4] = &protocol witness table for PhysicallyBasedMaterial;
      v16[0] = swift_allocObject();
      outlined init with copy of PhysicallyBasedMaterial(v5, v16[0] + 16);
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v16, 0, 0, (uint64_t)&v12);
      v10 = (CGColor *)v12;
      outlined consume of MaterialParameters.Texture?(v13, v14);
      Alpha = CGColorGetAlpha(v10);

      v6 = Alpha;
    }
    *(_QWORD *)a1 = LODWORD(v6);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v8;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
  }
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = v4;
}

uint64_t PhysicallyBasedMaterial.ambientOcclusion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v16[20];
  _QWORD v17[8];
  unsigned __int8 v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  _BYTE v25[8];
  void *v26;

  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v25);
  v2 = v26;
  swift_bridgeObjectRetain_n();
  v3 = v2;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  specialized String.withCString<A>(_:)(0xD000000000000017, 0x800000021BE86150, v4, (uint64_t)v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (void *)v17[0];
  v6 = v17[1];
  v7 = v17[2];
  v8 = v17[3];
  v9 = v17[4];
  v10 = v17[5];
  v12 = v17[6];
  v11 = v17[7];
  v13 = v18;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v25, (uint64_t)v16);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v19);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    v5 = (void *)v19[0];
    v6 = v19[1];
    v7 = v19[2];
    v8 = v19[3];
    v13 = v24;
    if (v24 == 255)
    {
LABEL_6:
      v5 = 0;
      v6 = 0;
      v7 = 0;
      LODWORD(v8) = 0;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    v20 = v9;
    v21 = v10;
    v22 = v12;
    v23 = v11;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v6, v7, v8, v20, v21, v22, v23, v13);
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  return outlined destroy of PhysicallyBasedMaterial((uint64_t)v25);
}

uint64_t PhysicallyBasedMaterial.specular.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:));
}

void PhysicallyBasedMaterial.sheen.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  _QWORD v7[5];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if ((*(_WORD *)(v1 + 104) & 0x800) != 0)
  {
    v7[3] = &type metadata for PhysicallyBasedMaterial;
    v7[4] = &protocol witness table for PhysicallyBasedMaterial;
    v7[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v7[0] + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(v7, (uint64_t)&v8);
    v3 = v8;
    v6 = v9;
    v4 = v10;
    v5 = v11;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0uLL;
  }
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = v5;
}

uint64_t PhysicallyBasedMaterial.clearcoat.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.clearcoatRoughness.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.anisotropyLevel.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.anisotropyAngle.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.roughness.getter(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD))
{
  uint64_t v1;
  _QWORD v4[5];

  v4[3] = &type metadata for PhysicallyBasedMaterial;
  v4[4] = &protocol witness table for PhysicallyBasedMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

float PhysicallyBasedMaterial.emissiveIntensity.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  unsigned __int8 v15;
  _QWORD v17[20];
  _QWORD v18[8];
  unsigned __int8 v19;
  _QWORD v20[8];
  unsigned __int8 v21;

  v1 = v0;
  v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain_n();
  v3 = v2;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  specialized String.withCString<A>(_:)(0x6576697373696D65, 0xED0000656C616353, v4, (uint64_t)v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (void *)v18[0];
  v6 = v18[1];
  v7 = v18[2];
  v8 = v18[3];
  v9 = v18[4];
  v10 = v18[5];
  v11 = v18[6];
  v12 = v18[7];
  v13 = v19;
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v17);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v20);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v17);
    v5 = (void *)v20[0];
    v6 = v20[1];
    v7 = v20[2];
    v8 = v20[3];
    v9 = v20[4];
    v10 = v20[5];
    v11 = v20[6];
    v12 = v20[7];
    v13 = v21;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v17);
  }
  v14 = 0.0;
  if (v13 != 255)
  {
    if (v13 == 2)
      v15 = 2;
    else
      v15 = v13;
    if (v13 == 2)
      v14 = *(float *)&v5;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v6, v7, v8, v9, v10, v11, v12, v15);
  }
  return v14;
}

uint64_t PhysicallyBasedMaterial.emissiveColor.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:));
}

void PhysicallyBasedMaterial.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
}

void PhysicallyBasedMaterial.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
}

void PhysicallyBasedMaterial.faceCulling.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(v1 + 88) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 80) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 80);
  }
  *a1 = v2;
}

void PhysicallyBasedMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 136) == 1;
}

void specialized Material.getTextureParameter(key:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v20[20];
  _QWORD v21[8];
  unsigned __int8 v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  v4 = v3;
  v7 = *(void **)(v4 + 32);
  swift_bridgeObjectRetain_n();
  v8 = v7;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  specialized String.withCString<A>(_:)(a1, a2, v9, (uint64_t)v21);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (void *)v21[0];
  v10 = v21[1];
  v12 = v21[2];
  v13 = v21[3];
  v15 = v21[4];
  v14 = v21[5];
  v16 = v21[6];
  v17 = v21[7];
  v18 = v22;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)v20);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v23);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v20);
    v11 = (void *)v23[0];
    v10 = v23[1];
    v12 = v23[2];
    v13 = v23[3];
    v18 = v28;
    if (v28 == 255)
      goto LABEL_7;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v20);
    v24 = v15;
    v25 = v14;
    v26 = v16;
    v27 = v17;
  }
  if (v18 == 1)
  {
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 24) = v13;
    return;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v10, v12, v13, v24, v25, v26, v27, v18);
LABEL_7:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v20[40];
  _QWORD v21[8];
  unsigned __int8 v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  v4 = v3;
  v7 = *(void **)(v4 + 72);
  swift_bridgeObjectRetain_n();
  v8 = v7;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  specialized String.withCString<A>(_:)(a1, a2, v9, (uint64_t)v21);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (void *)v21[0];
  v10 = v21[1];
  v12 = v21[2];
  v13 = v21[3];
  v15 = v21[4];
  v14 = v21[5];
  v16 = v21[6];
  v17 = v21[7];
  v18 = v22;
  outlined init with copy of UnlitMaterial(v4, (uint64_t)v20);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v23);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)v20);
    v11 = (void *)v23[0];
    v10 = v23[1];
    v12 = v23[2];
    v13 = v23[3];
    v18 = v28;
    if (v28 == 255)
      goto LABEL_7;
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)v20);
    v24 = v15;
    v25 = v14;
    v26 = v16;
    v27 = v17;
  }
  if (v18 == 1)
  {
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 24) = v13;
    return;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v10, v12, v13, v24, v25, v26, v27, v18);
LABEL_7:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

unint64_t specialized Material.getFloatParameter(key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD v21[20];
  _QWORD v22[8];
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = v2;
  v6 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  v7 = v6;
  swift_bridgeObjectRetain_n();
  v8 = v7;
  specialized String.withCString<A>(_:)(a1, a2, v8, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (void *)v22[0];
  v10 = v22[1];
  v11 = v22[2];
  v12 = v22[3];
  v13 = v22[4];
  v14 = v22[5];
  v15 = v22[6];
  v16 = v22[7];
  v17 = v23;
  outlined init with copy of PhysicallyBasedMaterial(v3, (uint64_t)v21);
  if (v17 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v24);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
    v9 = v24;
    v17 = v32;
    if (v32 == 255)
    {
LABEL_7:
      v19 = 0;
      v18 = 1;
      return v19 | ((unint64_t)v18 << 32);
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = v14;
    v30 = v15;
    v31 = v16;
  }
  if (v17 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v9, v25, v26, v27, v28, v29, v30, v31, v17);
    goto LABEL_7;
  }
  v18 = 0;
  v19 = v9;
  return v19 | ((unint64_t)v18 << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  _BYTE v21[40];
  _QWORD v22[8];
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = v2;
  v6 = *(void **)(v3 + 72);
  swift_bridgeObjectRetain_n();
  v7 = v6;
  swift_bridgeObjectRetain_n();
  v8 = v7;
  specialized String.withCString<A>(_:)(a1, a2, v8, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (void *)v22[0];
  v10 = v22[1];
  v11 = v22[2];
  v12 = v22[3];
  v13 = v22[4];
  v14 = v22[5];
  v15 = v22[6];
  v16 = v22[7];
  v17 = v23;
  outlined init with copy of UnlitMaterial(v3, (uint64_t)v21);
  if (v17 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v24);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)v21);
    v9 = v24;
    v17 = v32;
    if (v32 == 255)
    {
LABEL_7:
      v19 = 0;
      v18 = 1;
      return v19 | ((unint64_t)v18 << 32);
    }
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)v21);
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = v14;
    v30 = v15;
    v31 = v16;
  }
  if (v17 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v9, v25, v26, v27, v28, v29, v30, v31, v17);
    goto LABEL_7;
  }
  v18 = 0;
  v19 = v9;
  return v19 | ((unint64_t)v18 << 32);
}

uint64_t PhysicallyBasedMaterial.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 FeatureFlags;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t result;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  v7 = a2[3];
  v8 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (v8)
  {
    v9 = v8;
    FeatureFlags = REMaterialAssetGetFeatureFlags();
    v11 = FeatureFlags;
    if ((FeatureFlags & 0x1000) != 0)
      v12 = 1;
    else
      v12 = 2;
    if ((FeatureFlags & 0x1000) != 0)
      v13 = 1;
    else
      v13 = ~(2 * FeatureFlags) & 2;
    if ((FeatureFlags & 0x2000) != 0)
      v14 = 1;
    else
      v14 = 2;
    type metadata accessor for PhysicallyBasedMaterial.Program();
    v15 = swift_allocObject();
    *(_BYTE *)(v15 + 16) = v13;
    *(_QWORD *)(v15 + 24) = v9;
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v4;
    *(_BYTE *)(a3 + 16) = v5;
    *(_QWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_BYTE *)(a3 + 88) = 1;
    *(_QWORD *)(a3 + 96) = 0;
    *(_WORD *)(a3 + 104) = v11;
    *(_QWORD *)(a3 + 112) = 0;
    *(_BYTE *)(a3 + 120) = 1;
    *(_BYTE *)(a3 + 121) = v12;
    *(_BYTE *)(a3 + 122) = v14;
    *(_QWORD *)(a3 + 128) = v15;
    *(_QWORD *)(a3 + 136) = 0;
    *(_WORD *)(a3 + 144) = 257;
    return swift_retain();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized MaterialWithBlendingInternal.blendingInternal.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  float v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  int v18;
  Swift::UInt16 v19;
  Swift::UInt v20;
  int v21;
  int v22;
  char v23;
  __int16 v24;
  Swift::UInt v25;
  int v26;
  int v27;
  int v28;
  Swift::UInt16 v29;
  id v30;
  int v31;
  Swift::UInt16 v32;
  Swift::UInt v33;
  int v34;
  int v35;
  char v36;
  void *v37;
  uint64_t v38;
  CGColor *v39;
  CGColorRef CopyWithAlpha;
  CGColor *v41;
  __int16 v42;
  Swift::UInt v43;
  int v44;
  int v45;
  int v46;
  Swift::UInt16 v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  __int128 v51;
  ValueMetadata *v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  ValueMetadata *v56;
  _UNKNOWN **v57;
  _BYTE v58[8];
  void *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;

  v2 = v1;
  v3 = a1;
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v58);
  v4 = v59;
  v5 = v60;
  outlined init with take of PhysicallyBasedMaterial.Blending(v3, (uint64_t)&v61);
  if (v63 == 1)
  {
    outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
    if (RELinkedOnOrAfterFall2024OSVersions())
      specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v66);
    v6 = v67;
    if (v67)
    {
      v7 = v68;
      v8 = v66;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v8, v67);
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
    outlined consume of MaterialParameters.Texture?(v8, v6);
    if (v6 && v7)
    {
      outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
      v17 = v8;
      swift_retain();
      v18 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
      if (v18 == 1)
      {
        v19 = *(_WORD *)(v2 + 104);
        v20 = *(_QWORD *)(v2 + 112);
        v21 = *(unsigned __int8 *)(v2 + 120);
        v22 = *(unsigned __int8 *)(v2 + 121);
        v23 = *(_BYTE *)(v2 + 122);
        LOWORD(v54) = v19;
        *(_QWORD *)&v55 = v20;
        BYTE8(v55) = v21;
        *(_WORD *)((char *)&v55 + 9) = v22;
        LOWORD(v66) = v19;
        v67 = v20;
        LOBYTE(v68) = v21;
        BYTE1(v68) = v22;
        BYTE2(v68) = v23;
        if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v66, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v19, v20, v21 | (v22 << 8));
      }
      outlined consume of MaterialParameters.Texture?(v8, v6);
    }
    v24 = *(_WORD *)(v2 + 104);
    v25 = *(_QWORD *)(v2 + 112);
    v26 = *(unsigned __int8 *)(v2 + 120);
    v27 = *(unsigned __int8 *)(v2 + 121);
    v28 = *(unsigned __int8 *)(v2 + 122);
    v29 = v24 & 0xFFFE;
    LOWORD(v54) = v24 & 0xFFFE;
    *(_QWORD *)&v55 = v25;
    BYTE8(v55) = v26;
    BYTE9(v55) = v27;
    BYTE10(v55) = v28;
    LOWORD(v66) = v24;
    v67 = v25;
    LOBYTE(v68) = v26;
    BYTE1(v68) = v27;
    BYTE2(v68) = v28;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v66, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v29, v25, (v27 << 8) | (v28 << 16) | v26);
    outlined consume of MaterialParameters.Texture?(v8, v6);
  }
  else
  {
    v9 = v61;
    *(float *)&v66 = v61;
    v67 = v62;
    v68 = v63;
    v69 = v64;
    v70 = v65;
    if (v63 && v64)
    {
      v48 = v3;
      v10 = *(_QWORD *)(v2 + 112);
      v11 = *(_BYTE *)(v2 + 120);
      v12 = *(_BYTE *)(v2 + 121);
      v13 = *(_BYTE *)(v2 + 122);
      LOWORD(v54) = *(_WORD *)(v2 + 104);
      *(_QWORD *)&v55 = v10;
      BYTE8(v55) = v11;
      BYTE9(v55) = v12;
      BYTE10(v55) = 1;
      LOWORD(v50) = v54;
      *(_QWORD *)&v51 = v10;
      BYTE8(v51) = v11;
      BYTE9(v51) = v12;
      BYTE10(v51) = v13;
      specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v50, (unsigned __int16 *)&v54);
      outlined copy of MaterialParameters.Texture?(v4, v5);
      v3 = v48;
    }
    else
    {
      outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
      outlined retain of PhysicallyBasedMaterial.Blending(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PhysicallyBasedMaterial.Blending);
      if (RELinkedOnOrAfterFall2024OSVersions())
        specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v50);
      v14 = v51;
      if ((_QWORD)v51)
      {
        v15 = *((_QWORD *)&v51 + 1);
        v16 = v50;
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
      outlined copy of MaterialParameters.Texture?(v16, v51);
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
      outlined consume of MaterialParameters.Texture?(v16, v14);
      if (v14)
      {
        if (v15)
        {
          outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
          v30 = v16;
          swift_retain();
          v31 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
          outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
          if (v31 == 1)
          {
            v49 = v3;
            v32 = *(_WORD *)(v2 + 104);
            v33 = *(_QWORD *)(v2 + 112);
            v34 = *(unsigned __int8 *)(v2 + 120);
            v35 = *(unsigned __int8 *)(v2 + 121);
            v36 = *(_BYTE *)(v2 + 122);
            LOWORD(v54) = v32;
            *(_QWORD *)&v55 = v33;
            BYTE8(v55) = v34;
            *(_WORD *)((char *)&v55 + 9) = v35;
            LOWORD(v50) = v32;
            *(_QWORD *)&v51 = v33;
            BYTE8(v51) = v34;
            BYTE9(v51) = v35;
            BYTE10(v51) = v36;
            if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v50, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v32, v33, v34 | (v35 << 8));
            v3 = v49;
          }
          outlined consume of MaterialParameters.Texture?(v16, v14);
          v37 = v16;
          v38 = v14;
        }
        else
        {
          v37 = v16;
          v38 = v14;
        }
        outlined consume of MaterialParameters.Texture?(v37, v38);
      }
    }
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)&v66);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      v56 = &type metadata for PhysicallyBasedMaterial;
      v57 = &protocol witness table for PhysicallyBasedMaterial;
      v54 = swift_allocObject();
      outlined init with copy of PhysicallyBasedMaterial(v2, v54 + 16);
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v54, 0, 0, (uint64_t)&v50);
      v39 = (CGColor *)v50;
      outlined consume of MaterialParameters.Texture?((void *)v51, *((uint64_t *)&v51 + 1));
      CopyWithAlpha = CGColorCreateCopyWithAlpha(v39, v9);

      if (CopyWithAlpha)
      {
        v56 = &type metadata for PhysicallyBasedMaterial;
        v57 = &protocol witness table for PhysicallyBasedMaterial;
        v54 = swift_allocObject();
        outlined init with copy of PhysicallyBasedMaterial(v2, v54 + 16);
        v41 = CopyWithAlpha;
        PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v54, 0, 0, (uint64_t)&v50);

        v54 = (uint64_t)v41;
        v55 = v51;
        v56 = v52;
        LODWORD(v57) = v53;
        PhysicallyBasedMaterial.baseColor.setter((uint64_t)&v54);

      }
    }
    v42 = *(_WORD *)(v2 + 104);
    v43 = *(_QWORD *)(v2 + 112);
    v44 = *(unsigned __int8 *)(v2 + 120);
    v45 = *(unsigned __int8 *)(v2 + 121);
    v46 = *(unsigned __int8 *)(v2 + 122);
    v47 = v42 | 1;
    LOWORD(v54) = v42 | 1;
    *(_QWORD *)&v55 = v43;
    BYTE8(v55) = v44;
    BYTE9(v55) = v45;
    BYTE10(v55) = v46;
    LOWORD(v50) = v42;
    *(_QWORD *)&v51 = v43;
    BYTE8(v51) = v44;
    BYTE9(v51) = v45;
    BYTE10(v51) = v46;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v50, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v47, v43, (v45 << 8) | (v46 << 16) | v44);
    outlined retain of PhysicallyBasedMaterial.Blending(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PhysicallyBasedMaterial.Blending);
    outlined retain of PhysicallyBasedMaterial.Blending(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PhysicallyBasedMaterial.Blending);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  int v17;
  id v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  CGColor *v25;
  CGColorRef CopyWithAlpha;
  CGColor *v27;
  id v28;
  __int128 v29;
  ValueMetadata *v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  ValueMetadata *v34;
  _UNKNOWN **v35;
  _BYTE v36[8];
  void *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  v2 = v1;
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v36);
  v5 = v37;
  v4 = v38;
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)&v39);
  if (v41 == 1)
  {
    outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
    if (RELinkedOnOrAfterFall2024OSVersions())
      specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v44);
    v6 = v45;
    if (v45)
    {
      v7 = v46;
      v8 = v44;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v8, v45);
    outlined destroy of UnlitMaterial((uint64_t)&v32);
    outlined consume of MaterialParameters.Texture?(v8, v6);
    if (v6 && v7)
    {
      outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
      v15 = v8;
      swift_retain();
      v16 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
      outlined destroy of UnlitMaterial((uint64_t)&v32);
      if (v16 == 1)
      {
        v17 = *(unsigned __int8 *)(v2 + 155);
        if (v17 == 2 || (v17 & 1) != 0)
          specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16));
      }
      outlined consume of MaterialParameters.Texture?(v8, v6);
    }
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_WORD *)(v2 + 152) & 0xFFFE | (*(unsigned __int8 *)(v2 + 154) << 16) | (*(unsigned __int8 *)(v2 + 155) << 24));
    outlined consume of MaterialParameters.Texture?(v8, v6);
  }
  else
  {
    v9 = v39;
    *(float *)&v44 = v39;
    v45 = v40;
    v46 = v41;
    v47 = v42;
    v48 = v43;
    if (v41 && v42)
    {
      if ((*(_BYTE *)(v1 + 155) & 1) != 0)
      {
        outlined copy of MaterialParameters.Texture?(v5, v4);
      }
      else
      {
        v10 = *(unsigned __int8 *)(v1 + 154);
        v11 = *(unsigned __int16 *)(v1 + 152);
        outlined copy of MaterialParameters.Texture?(v5, v4);
        specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v11 | (v10 << 16) | 0x1000000);
      }
    }
    else
    {
      outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
      outlined retain of PhysicallyBasedMaterial.Blending(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PhysicallyBasedMaterial.Blending);
      if (RELinkedOnOrAfterFall2024OSVersions())
        specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v28);
      v12 = v29;
      if ((_QWORD)v29)
      {
        v13 = *((_QWORD *)&v29 + 1);
        v14 = v28;
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      outlined copy of MaterialParameters.Texture?(v14, v29);
      outlined destroy of UnlitMaterial((uint64_t)&v32);
      outlined consume of MaterialParameters.Texture?(v14, v12);
      if (v12)
      {
        if (v13)
        {
          outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
          v18 = v14;
          swift_retain();
          v19 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
          outlined destroy of UnlitMaterial((uint64_t)&v32);
          if (v19 == 1)
          {
            v20 = *(unsigned __int8 *)(v2 + 155);
            if (v20 == 2 || (v20 & 1) != 0)
              specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16));
          }
          outlined consume of MaterialParameters.Texture?(v14, v12);
          v21 = v14;
          v22 = v12;
        }
        else
        {
          v21 = v14;
          v22 = v12;
        }
        outlined consume of MaterialParameters.Texture?(v21, v22);
      }
    }
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)&v44);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      v34 = &type metadata for UnlitMaterial;
      v35 = &protocol witness table for UnlitMaterial;
      v32 = swift_allocObject();
      outlined init with copy of UnlitMaterial(v2, v32 + 16);
      v23 = *(_QWORD *)(v2 + 80);
      v24 = *(void **)(v2 + 88);
      swift_bridgeObjectRetain();
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v32, v23, v24, (uint64_t)&v28);
      v25 = (CGColor *)v28;
      outlined consume of MaterialParameters.Texture?((void *)v29, *((uint64_t *)&v29 + 1));
      CopyWithAlpha = CGColorCreateCopyWithAlpha(v25, v9);

      if (CopyWithAlpha)
      {
        v34 = &type metadata for UnlitMaterial;
        v35 = &protocol witness table for UnlitMaterial;
        v32 = swift_allocObject();
        outlined init with copy of UnlitMaterial(v2, v32 + 16);
        swift_bridgeObjectRetain();
        v27 = CopyWithAlpha;
        PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v32, v23, v24, (uint64_t)&v28);

        v32 = (uint64_t)v27;
        v33 = v29;
        v34 = v30;
        LODWORD(v35) = v31;
        UnlitMaterial.color.setter((uint64_t)&v32);

      }
    }
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_DWORD *)(v2 + 152) | 1);
    outlined retain of PhysicallyBasedMaterial.Blending(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PhysicallyBasedMaterial.Blending);
    outlined retain of PhysicallyBasedMaterial.Blending(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PhysicallyBasedMaterial.Blending);
  }
}

uint64_t specialized ShaderCache.getResource(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v1;
  v5 = *(_QWORD *)(v1 + 56);
  v6 = (os_unfair_lock_s *)(*(_QWORD *)(v5 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v6);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_retain();
  }
  else
  {
    v10 = 0;
  }
  os_unfair_lock_unlock(v6);
  swift_release();
  if (v10)
    return v10;
  v45 = v2;
  v11 = (a1 & 1) == 0;
  v12 = BYTE2(a1) == 2;
  v13 = !v11 || !v12;
  if (v11 && v12)
    v14 = 0xD000000000000021;
  else
    v14 = 0xD00000000000002CLL;
  v15 = 0x800000021BE85020;
  if (!v13)
    v15 = 0x800000021BE84FF0;
  if ((a1 & 2) != 0)
    v16 = 0xD00000000000002CLL;
  else
    v16 = v14;
  if ((a1 & 2) != 0)
    v17 = 0x800000021BE81DB0;
  else
    v17 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v18 + 32) = 0x6C6E55686374614DLL;
  *(_QWORD *)(v18 + 40) = 0xEF726F6C6F437469;
  *(_QWORD *)(v18 + 48) = ((unsigned __int16)a1 >> 2) & 1;
  *(_QWORD *)(v18 + 56) = 0;
  *(_BYTE *)(v18 + 64) = 0;
  v19 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  outlined init with copy of __REAssetService(v3 + 16, (uint64_t)&v35);
  v20 = v37;
  v21 = v38;
  __swift_project_boxed_opaque_existential_1(&v35, v37);
  v22 = __REAssetService.asset(_:)(v16, v17, v20, v21);
  swift_bridgeObjectRelease();
  if (v22)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = MEMORY[0x24BEE4AF8];
    v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    v25 = specialized Dictionary.init(dictionaryLiteral:)(v23);
    swift_bridgeObjectRetain();
    v26 = specialized Dictionary.init(dictionaryLiteral:)(v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    v27 = type metadata accessor for __MaterialResource();
    *(_QWORD *)&v35 = v22;
    *((_QWORD *)&v35 + 1) = v19;
    v36 = 0;
    LOBYTE(v37) = 1;
    *(_WORD *)((char *)&v37 + 1) = 0;
    BYTE3(v37) = HIBYTE(a1);
    BYTE4(v37) = BYTE2(a1);
    v38 = v24;
    v39 = v25;
    v40 = v26;
    v41 = v23;
    v10 = v27;
    v28 = v45;
    static __MaterialResource.createMaterial(_:)(&v35, v42);
    if (v28)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v10;
    }
    v45 = 0;
    v29 = v43;
    v30 = v44;
    __swift_project_boxed_opaque_existential_1(v42, v43);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 32) = v31;
    *(_QWORD *)(inited + 56) = v27;
    *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
    swift_retain();
    v33 = v45;
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    if (!v33)
    {
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      swift_retain();
      v10 = specialized SharedCacheStorage.addResource(value:forKey:)(v31, a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized ShaderCache.getResource(_:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  Swift::UInt v36;
  unsigned int v37;
  int v38;
  int v39;
  __int16 v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52;
  uint64_t v53;
  Swift::UInt16 v54;
  Swift::UInt v55;
  __int16 v56;
  unsigned __int8 v57;

  v8 = a3 >> 8;
  v9 = HIWORD(a3);
  v54 = a1;
  v55 = a2;
  v56 = a3 & 0xFF01;
  v57 = BYTE2(a3);
  v10 = *(_QWORD *)(v3 + 56);
  v11 = (os_unfair_lock_s *)(*(_QWORD *)(v10 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  if (*(_QWORD *)(v12 + 16)
    && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3 & 0xFFFF01), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_retain();
  }
  else
  {
    v15 = 0;
  }
  os_unfair_lock_unlock(v11);
  swift_release();
  if (v15)
    return v15;
  v16 = (a1 & 1) == 0;
  v17 = BYTE1(a3) == 2;
  v18 = !v16 || !v17;
  if (v16 && v17)
    v19 = 0xD00000000000001FLL;
  else
    v19 = 0xD00000000000002ALL;
  v20 = 0x800000021BE85070;
  if (!v18)
    v20 = 0x800000021BE85050;
  if ((a1 & 2) != 0)
    v21 = 0xD00000000000002ALL;
  else
    v21 = v19;
  if ((a1 & 2) != 0)
    v22 = 0x800000021BE81D80;
  else
    v22 = v20;
  v23 = PhysicallyBasedMaterial.PBRShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v43 + 16, (uint64_t)&v44);
  v24 = v46;
  v25 = v47;
  __swift_project_boxed_opaque_existential_1(&v44, v46);
  v26 = __REAssetService.asset(_:)(v21, v22, v24, v25);
  swift_bridgeObjectRelease();
  if (v26)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = MEMORY[0x24BEE4AF8];
    v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    v29 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    swift_bridgeObjectRetain();
    v30 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    v31 = type metadata accessor for __MaterialResource();
    *(_QWORD *)&v44 = v26;
    *((_QWORD *)&v44 + 1) = v23;
    v45 = 0;
    LOBYTE(v46) = 1;
    *(_WORD *)((char *)&v46 + 1) = 0;
    BYTE3(v46) = v9;
    BYTE4(v46) = v8;
    v47 = v28;
    v48 = v29;
    v49 = v30;
    v50 = v27;
    v15 = v31;
    static __MaterialResource.createMaterial(_:)(&v44, v51);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v32 = v52;
      v33 = v53;
      __swift_project_boxed_opaque_existential_1(v51, v52);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      *(_QWORD *)(inited + 32) = v34;
      *(_QWORD *)(inited + 56) = v31;
      *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
      v42 = v34;
      swift_retain();
      specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      v36 = v55;
      v37 = v56;
      v38 = HIBYTE(v56);
      v39 = v57;
      v40 = v54;
      swift_retain();
      v15 = specialized SharedCacheStorage.addResource(value:forKey:)(v42, v40, v36, (v38 << 8) | (v39 << 16) | v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
    }
    return v15;
  }
  __break(1u);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[45];

  outlined init with copy of CustomMaterial(v1, (uint64_t)v25);
  v3 = *(_QWORD *)(v1 + 176);
  v4 = *(_QWORD *)(v1 + 184);
  v5 = *(_QWORD *)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 208);
  v8 = *(void **)(v1 + 216);
  v9 = *(_QWORD *)(v1 + 224);
  v22 = *(_QWORD *)(v1 + 240);
  v23 = *(_QWORD *)(v1 + 232);
  v20 = *(_QWORD *)(v1 + 256);
  v21 = *(_QWORD *)(v1 + 248);
  v19 = *(void **)(v1 + 264);
  outlined retain of CustomMaterial.CustomShaderParameters(a1);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v3, v4, v5, v6, v7, v8);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v9, v23, v22, v21, v20, v19);
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 216) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 232) = v10;
  *(_OWORD *)(v1 + 248) = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 152) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 168) = v11;
  v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 264) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 200) = v12;
  CustomMaterial.shaderCache.getter();
  v13 = v25[44];
  v14 = specialized ShaderCache.getResource(_:)(a1);
  if (v13)
  {
    outlined destroy of CustomMaterial((uint64_t)v25);
    swift_release();
  }
  else
  {
    v15 = v14;
    swift_release();
    swift_release();
    *(_QWORD *)v1 = v15;
    v16 = v25[0];
    swift_beginAccess();
    v17 = *(_QWORD *)(v16 + 16);
    swift_beginAccess();
    if (v17 == *(_QWORD *)(v15 + 16))
    {
      outlined destroy of CustomMaterial((uint64_t)v25);
    }
    else
    {
      v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF0]), sel_init);
      REMaterialAssetGetMaterialDefinition();
      REMaterialDefinitionAssetGetParameterKeys();
      v24 = 0;
      v18;
      static Set._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
    }
  }
}

void specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14;

  v3 = v1;
  v5 = HIWORD(a1);
  v6 = HIBYTE(a1);
  outlined init with copy of UnlitMaterial(v3, (uint64_t)v13);
  *(_WORD *)(v3 + 152) = a1;
  *(_BYTE *)(v3 + 154) = v5;
  *(_BYTE *)(v3 + 155) = v6;
  UnlitMaterial.shaderCache.getter();
  v7 = specialized ShaderCache.getResource(_:)(a1);
  if (v2)
  {
    outlined destroy of UnlitMaterial((uint64_t)v13);
    swift_release();
  }
  else
  {
    v8 = v7;
    swift_release();
    swift_release();
    *(_QWORD *)(v3 + 40) = v8;
    v9 = v14;
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    swift_beginAccess();
    if (v10 == *(_QWORD *)(v8 + 16))
    {
      outlined destroy of UnlitMaterial((uint64_t)v13);
    }
    else
    {
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF0]), sel_init);
      REMaterialAssetGetMaterialDefinition();
      REMaterialDefinitionAssetGetParameterKeys();
      v12 = 0;
      v11;
      static Set._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
    }
  }
}

void specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v5 = v3;
  v9 = a3 >> 8;
  v10 = HIWORD(a3);
  outlined init with copy of PhysicallyBasedMaterial(v5, (uint64_t)&v17);
  *(_WORD *)(v5 + 104) = a1;
  *(_QWORD *)(v5 + 112) = a2;
  *(_BYTE *)(v5 + 120) = a3 & 1;
  *(_BYTE *)(v5 + 121) = v9;
  *(_BYTE *)(v5 + 122) = v10;
  PhysicallyBasedMaterial.shaderCache.getter();
  v11 = specialized ShaderCache.getResource(_:)(a1, a2, a3 & 0xFFFF01);
  if (v4)
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v17);
    swift_release();
  }
  else
  {
    v12 = v11;
    swift_release();
    swift_release();
    *(_QWORD *)v5 = v12;
    v13 = v17;
    swift_beginAccess();
    v14 = *(_QWORD *)(v13 + 16);
    swift_beginAccess();
    if (v14 == *(_QWORD *)(v12 + 16))
    {
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v17);
    }
    else
    {
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF0]), sel_init);
      REMaterialAssetGetMaterialDefinition();
      REMaterialDefinitionAssetGetParameterKeys();
      v16 = 0;
      v15;
      static Set._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
    }
  }
}

unint64_t PhysicallyBasedMaterial.opacityThreshold.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  void *v23;
  _QWORD v24[20];
  _QWORD v25[8];
  unsigned __int8 v26;
  _QWORD v27[8];
  unsigned __int8 v28;

  if ((*(_WORD *)(v0 + 104) & 2) == 0)
    goto LABEL_8;
  v1 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain_n();
  v2 = v1;
  swift_bridgeObjectRetain_n();
  v3 = v2;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE81760, v3, (uint64_t)v25);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v25[1];
  v23 = (void *)v25[0];
  v5 = v25[2];
  v6 = v25[3];
  v7 = v25[4];
  v8 = v25[5];
  v10 = v25[6];
  v9 = v25[7];
  v11 = v26;
  outlined init with copy of PhysicallyBasedMaterial(v0, (uint64_t)v24);
  if (v11 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v27);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v24);
    v19 = (void *)v27[0];
    v12 = v27[1];
    v13 = v27[2];
    v14 = v27[3];
    v15 = v27[4];
    v16 = v27[5];
    v17 = v27[6];
    v18 = v27[7];
    v11 = v28;
    if (v28 == 255)
    {
LABEL_8:
      v21 = 0;
      v20 = 1;
      return v21 | ((unint64_t)v20 << 32);
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v24);
    v12 = v4;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    v16 = v8;
    v17 = v10;
    v18 = v9;
    v19 = v23;
  }
  if (v11 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v19, v12, v13, v14, v15, v16, v17, v18, v11);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v19, v12, v13, v14, v15, v16, v17, v18, 2u);
  v20 = 0;
  v21 = v19;
  return v21 | ((unint64_t)v20 << 32);
}

uint64_t PhysicallyBasedMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t PhysicallyBasedMaterial.__resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicallyBasedMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t PhysicallyBasedMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicallyBasedMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v3 = v1 + 40;
  outlined init with copy of __REAssetService?(v3, (uint64_t)&v6);
  if (v7)
    return outlined init with take of BindableDataInternal(&v6, a1);
  outlined destroy of __REAssetService?((uint64_t)&v6);
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, a1);
  outlined destroy of __REAssetService?(v3);
  return outlined init with copy of __REAssetService(a1, v3);
}

uint64_t PhysicallyBasedMaterial.PBRMaterialDefinitionMapping.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t PhysicallyBasedMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t inited;
  __int16 FeatureFlags;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  void *v10;

  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 144) = 257;
  v2 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000015, (void *)0x800000021BE90DC0);
  *(_QWORD *)a1 = v2;
  v3 = (void *)REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v2;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  swift_beginAccess();
  FeatureFlags = REMaterialAssetGetFeatureFlags();
  if ((FeatureFlags & 0x2000) != 0)
    v6 = 1;
  else
    v6 = 2;
  if ((FeatureFlags & 0x1000) != 0)
    v7 = 1;
  else
    v7 = 2;
  *(_WORD *)(a1 + 104) = FeatureFlags;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 121) = v7;
  *(_BYTE *)(a1 + 122) = v6;
  if ((FeatureFlags & 0x1000) != 0)
    v8 = 1;
  else
    v8 = ~(2 * FeatureFlags) & 2;
  type metadata accessor for PhysicallyBasedMaterial.Program();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v2;
  *(_QWORD *)(a1 + 128) = v9;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    *(_QWORD *)(a1 + 32) = REMaterialParameterBlockValueCopy();

  }
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE860F0);
  v10 = *(void **)(a1 + 32);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    *(_QWORD *)(a1 + 32) = REMaterialParameterBlockValueCopy();

  }
  return REMaterialParameterBlockValueSetFloat();
}

uint64_t PhysicallyBasedMaterial.init(assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v5[2];

  v3 = a2;
  PhysicallyBasedMaterial.init()(a2);
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  v3 += 40;
  outlined destroy of __REAssetService?(v3);
  outlined init with take of BindableDataInternal(v5, v3);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t PhysicallyBasedMaterial.baseColor.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int16 v3;
  Swift::UInt v4;
  int v5;
  int v6;
  int v7;
  Swift::UInt16 v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v15[2];
  char v16;
  char v17;
  char v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _OWORD v26[2];
  int v27;
  _BYTE v28[32];
  char v29[8];
  uint64_t v30;

  v2 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v2;
  v27 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26 + 8, (uint64_t)v28);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v29);
  v3 = *(_WORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(unsigned __int8 *)(v1 + 120);
  v6 = *(unsigned __int8 *)(v1 + 121);
  v7 = *(unsigned __int8 *)(v1 + 122);
  if (v30)
    v8 = v3 | 4;
  else
    v8 = v3 & 0xFFFB;
  LOWORD(v15[0]) = v8;
  v15[1] = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  LOWORD(v21) = v3;
  v22 = (void *)v4;
  LOBYTE(v23) = v5;
  BYTE1(v23) = v6;
  BYTE2(v23) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v21, (unsigned __int16 *)v15) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5);
  v19 = &type metadata for PhysicallyBasedMaterial;
  v20 = &protocol witness table for PhysicallyBasedMaterial;
  v15[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v15[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v15, 0, 0, (uint64_t)&v21);
  v10 = v21;
  v9 = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v15);
  v21 = v9;
  v22 = (void *)v11;
  v23 = v12;
  LODWORD(v24) = v13;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v15, (uint64_t)&v21);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v26);

  outlined consume of MaterialParameters.Texture?(v9, v11);
  return outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v26);
}

void PhysicallyBasedMaterial.checkMultiUV(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::UInt16 v12;
  Swift::UInt v13;
  int v14;
  int v15;
  char v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::UInt16 v20;
  Swift::UInt v21;
  int v22;
  int v23;
  char v24;
  id v25;
  Swift::UInt v26;
  void *v27;
  uint64_t v28;
  Swift::UInt v29;
  char v30;
  char v31;
  char v32;
  ValueMetadata *v33;
  _UNKNOWN **v34;
  id v35;
  void *v36;
  uint64_t v37;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = *(_QWORD *)(a1 + 16) == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v33 = &type metadata for PhysicallyBasedMaterial;
    v34 = &protocol witness table for PhysicallyBasedMaterial;
    v28 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v2, v28 + 16);
    PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(&v28, (uint64_t)&v35);
    v8 = v35;
    v9 = v36;
    v10 = v37;
    if (!v6 || !v7)
    {

      outlined consume of MaterialParameters.Texture?(v9, v10);
      return;
    }
    v11 = v5;
    swift_retain();
    if (REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex() != 1)
    {

      outlined consume of MaterialParameters.Texture?(v9, v10);
      outlined consume of MaterialParameters.Texture?(v5, v6);
      return;
    }
    v27 = v5;
    v12 = *(_WORD *)(v2 + 104);
    v13 = *(_QWORD *)(v2 + 112);
    v14 = *(unsigned __int8 *)(v2 + 120);
    v15 = *(unsigned __int8 *)(v2 + 121);
    v16 = *(_BYTE *)(v2 + 122);
    LOWORD(v28) = v12;
    v29 = v13;
    v30 = v14;
    v31 = v15;
    v32 = 0;
    LOWORD(v35) = v12;
    v26 = v13;
    v36 = (void *)v13;
    LOBYTE(v37) = v14;
    BYTE1(v37) = v15;
    BYTE2(v37) = v16;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v35, (unsigned __int16 *)&v28) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v12, v26, v14 | (v15 << 8));

    outlined consume of MaterialParameters.Texture?(v9, v10);
    v17 = v27;
    v18 = v6;
    goto LABEL_14;
  }
  v19 = *(void **)a1;
  v20 = *(_WORD *)(v2 + 104);
  v21 = *(_QWORD *)(v2 + 112);
  v22 = *(unsigned __int8 *)(v2 + 120);
  v23 = *(unsigned __int8 *)(v2 + 121);
  v24 = *(_BYTE *)(v2 + 122);
  LOWORD(v28) = v20;
  v29 = v21;
  v30 = v22;
  v31 = v23;
  v32 = 1;
  LOWORD(v35) = v20;
  v36 = (void *)v21;
  LOBYTE(v37) = v22;
  BYTE1(v37) = v23;
  BYTE2(v37) = v24;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v35, (unsigned __int16 *)&v28) & 1) == 0)
  {
    v25 = v19;
    swift_retain();
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v20, v21, v22 | (v23 << 8) | 0x10000);
    v17 = v19;
    v18 = v3;
LABEL_14:
    outlined consume of MaterialParameters.Texture?(v17, v18);
  }
}

void (*PhysicallyBasedMaterial.baseColor.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD v5[5];

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v5, 0, 0, (uint64_t)v3);
  return PhysicallyBasedMaterial.baseColor.modify;
}

void PhysicallyBasedMaterial.baseColor.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.baseColor.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterial.baseColor.setter);
}

uint64_t PhysicallyBasedMaterial.metallic.setter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  __int128 v3;
  __int16 v4;
  Swift::UInt v5;
  int v6;
  int v7;
  int v8;
  Swift::UInt16 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  Swift::UInt16 v19;
  Swift::UInt v20;
  char v21;
  char v22;
  char v23;
  _OWORD v24[2];
  int v25;
  _BYTE v26[32];
  _BYTE v27[8];
  uint64_t v28;

  v2 = (unsigned __int8 *)v1;
  v3 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v3;
  v25 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v24 + 8, (uint64_t)v26);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)v27);
  v4 = *(_WORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 112);
  v6 = v2[120];
  v7 = v2[121];
  v8 = v2[122];
  if (v28)
    v9 = v4 | 0x40;
  else
    v9 = v4 & 0xFFBF;
  v19 = v9;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  LOWORD(v15) = v4;
  v16 = v5;
  LOBYTE(v17) = v6;
  BYTE1(v17) = v7;
  BYTE2(v17) = v8;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v15, &v19) & 1) == 0)
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v9, v5, (v7 << 8) | (v8 << 16) | v6);
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v2, (uint64_t)&v19);
  specialized Material.getFloatParameter(key:)(0x63696C6C6174656DLL, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x4D65727574786574, 0xEF63696C6C617465, (uint64_t)&v15);
  v10 = v16;
  if (v16)
  {
    v11 = v18;
    v12 = v17;
    v13 = v15;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
  }
  outlined copy of MaterialParameters.Texture?(v13, v16);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v19);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)&v19);
  v15 = v13;
  v16 = v10;
  v17 = v12;
  v18 = v11;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v19, (uint64_t)&v15);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v24);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v24);
}

void (*PhysicallyBasedMaterial.metallic.modify(float **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  float v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = v1;
  v4 = (float *)malloc(0xC8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 24) = v2;
  outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)v4);
  v5 = specialized Material.getFloatParameter(key:)(0x63696C6C6174656DLL, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x4D65727574786574, 0xEF63696C6C617465, (uint64_t)&v12);
  v6 = v13;
  if (v13)
  {
    v7 = v15;
    v8 = v14;
    v9 = v12;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  v10 = *(float *)&v5;
  if ((v5 & 0x100000000) != 0)
    v10 = 1.0;
  v4[38] = v10;
  *((_QWORD *)v4 + 20) = v9;
  *((_QWORD *)v4 + 21) = v6;
  *((_QWORD *)v4 + 22) = v8;
  *((_DWORD *)v4 + 46) = v7;
  outlined copy of MaterialParameters.Texture?(v9, v6);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
  outlined consume of MaterialParameters.Texture?(v9, v6);
  return PhysicallyBasedMaterial.metallic.modify;
}

void PhysicallyBasedMaterial.metallic.modify(uint64_t *a1, char a2)
{
  PhysicallyBasedMaterial.metallic.modify(a1, a2, (void (*)(int *))PhysicallyBasedMaterial.metallic.setter);
}

uint64_t key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(int *))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = (void *)*((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v9 = a1[8];
  v11 = *a1;
  v12 = v7;
  v13 = v6;
  v14 = v8;
  v15 = v9;
  outlined copy of MaterialParameters.Texture?(v7, v6);
  return a5(&v11);
}

uint64_t PhysicallyBasedMaterial.roughness.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int16 v3;
  Swift::UInt v4;
  int v5;
  int v6;
  int v7;
  Swift::UInt16 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v14[2];
  char v15;
  char v16;
  char v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  int v26;
  _BYTE v27[32];
  char v28[8];
  uint64_t v29;

  v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  v26 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v28);
  v3 = *(_WORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(unsigned __int8 *)(v1 + 120);
  v6 = *(unsigned __int8 *)(v1 + 121);
  v7 = *(unsigned __int8 *)(v1 + 122);
  if (v29)
    v8 = v3 | 0x20;
  else
    v8 = v3 & 0xFFDF;
  LOWORD(v14[0]) = v8;
  v14[1] = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  LOWORD(v20) = v3;
  v21 = (void *)v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v20, (unsigned __int16 *)v14) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5);
  v18 = &type metadata for PhysicallyBasedMaterial;
  v19 = &protocol witness table for PhysicallyBasedMaterial;
  v14[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v14[0] + 16);
  PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(v14, (uint64_t)&v20);
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v14);
  v20 = v9;
  v21 = (void *)v10;
  v22 = v11;
  LODWORD(v23) = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)&v20);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v25);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v25);
}

void (*PhysicallyBasedMaterial.roughness.modify(_QWORD *a1))(int **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD v5[5];

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.roughness.modify;
}

void PhysicallyBasedMaterial.roughness.modify(int **a1, char a2)
{
  PhysicallyBasedMaterial.roughness.modify(a1, a2, (void (*)(int *))PhysicallyBasedMaterial.roughness.setter);
}

double key path getter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial@<D0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  double result;
  _QWORD v9[5];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v9[3] = &type metadata for PhysicallyBasedMaterial;
  v9[4] = &protocol witness table for PhysicallyBasedMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(a1, v9[0] + 16);
  a2(&v10, v9, 0, 0);
  v6 = v12;
  v7 = v13;
  *(_QWORD *)a3 = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 24) = v6;
  *(_DWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t key path setter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id *))
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  id v12[4];
  int v13;

  v6 = *(void **)(a1 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 32);
  v12[0] = *(id *)a1;
  v12[1] = v6;
  v12[2] = v7;
  v12[3] = v8;
  v13 = v9;
  v10 = v12[0];
  outlined copy of MaterialParameters.Texture?(v6, (uint64_t)v7);
  return a5(v12);
}

uint64_t PhysicallyBasedMaterial.emissiveColor.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int16 v3;
  Swift::UInt v4;
  int v5;
  int v6;
  int v7;
  Swift::UInt16 v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v15[2];
  char v16;
  char v17;
  char v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _OWORD v26[2];
  int v27;
  _BYTE v28[32];
  char v29[8];
  uint64_t v30;

  v2 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v2;
  v27 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26 + 8, (uint64_t)v28);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v29);
  v3 = *(_WORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(unsigned __int8 *)(v1 + 120);
  v6 = *(unsigned __int8 *)(v1 + 121);
  v7 = *(unsigned __int8 *)(v1 + 122);
  if (v30)
    v8 = v3 | 0x10;
  else
    v8 = v3 & 0xFFEF;
  LOWORD(v15[0]) = v8;
  v15[1] = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  LOWORD(v21) = v3;
  v22 = (void *)v4;
  LOBYTE(v23) = v5;
  BYTE1(v23) = v6;
  BYTE2(v23) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v21, (unsigned __int16 *)v15) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5);
  v19 = &type metadata for PhysicallyBasedMaterial;
  v20 = &protocol witness table for PhysicallyBasedMaterial;
  v15[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v15[0] + 16);
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v15, (uint64_t)&v21);
  v10 = v21;
  v9 = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v15);
  v21 = v9;
  v22 = (void *)v11;
  v23 = v12;
  LODWORD(v24) = v13;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v15, (uint64_t)&v21);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v26);

  outlined consume of MaterialParameters.Texture?(v9, v11);
  return outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v26);
}

void (*PhysicallyBasedMaterial.emissiveColor.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD v5[5];

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.emissiveColor.modify;
}

void PhysicallyBasedMaterial.emissiveColor.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.baseColor.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterial.emissiveColor.setter);
}

void PhysicallyBasedMaterial.baseColor.modify(void ***a1, char a2, void (*a3)(_QWORD *))
{
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[4];
  int v14;

  v4 = *a1;
  v5 = **a1;
  v6 = (*a1)[1];
  v8 = (uint64_t)(*a1)[2];
  v7 = (*a1)[3];
  v9 = *((_DWORD *)*a1 + 8);
  v13[0] = v5;
  v13[1] = v6;
  v13[2] = v8;
  v13[3] = v7;
  v14 = v9;
  if ((a2 & 1) != 0)
  {
    v10 = v5;
    outlined copy of MaterialParameters.Texture?(v6, v8);
    a3(v13);
    v11 = v4[1];
    v12 = (uint64_t)v4[2];

    outlined consume of MaterialParameters.Texture?(v11, v12);
  }
  else
  {
    a3(v13);
  }
  free(v4);
}

void key path getter for PhysicallyBasedMaterial.emissiveIntensity : PhysicallyBasedMaterial(_DWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  void *v4[8];
  unsigned __int8 v5;

  specialized Material.subscript.getter(0x6576697373696D65, 0xED0000656C616353, (uint64_t)v4);
  v2 = v5;
  if (v5 == 255)
  {
    v3 = 0;
  }
  else
  {
    if (v5 == 2)
    {
      v2 = 2;
      v3 = (int)v4[0];
    }
    else
    {
      v3 = 0;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v4[0], (uint64_t)v4[1], (uint64_t)v4[2], (uint64_t)v4[3], (uint64_t)v4[4], (uint64_t)v4[5], (uint64_t)v4[6], (uint64_t)v4[7], v2);
  }
  *a1 = v3;
}

uint64_t key path setter for PhysicallyBasedMaterial.emissiveIntensity : PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v3 = REMaterialParameterBlockValueCopy();
    v4 = *(void **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v3;

  }
  return REMaterialParameterBlockValueSetFloat();
}

uint64_t PhysicallyBasedMaterial.emissiveIntensity.setter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v1 = REMaterialParameterBlockValueCopy();
    v2 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 32) = v1;

  }
  return REMaterialParameterBlockValueSetFloat();
}

void (*PhysicallyBasedMaterial.emissiveIntensity.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _DWORD *v24;
  int v25;
  void *v27;
  _QWORD v28[8];
  unsigned __int8 v29;
  _QWORD v30[8];
  unsigned __int8 v31;

  v2 = v1;
  v4 = (char *)malloc(0xA0uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 19) = v2;
  v5 = *(void **)(v2 + 32);
  swift_bridgeObjectRetain_n();
  v6 = v5;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(0x6576697373696D65, 0xED0000656C616353, v7, (uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v8 = v28[1];
  v27 = (void *)v28[0];
  v9 = v28[2];
  v10 = v28[3];
  v11 = v28[4];
  v12 = v28[5];
  v14 = v28[6];
  v13 = v28[7];
  v15 = v29;
  outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)v4);
  if (v15 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v30);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
    v23 = (void *)v30[0];
    v16 = v30[1];
    v17 = v30[2];
    v18 = v30[3];
    v19 = v30[4];
    v20 = v30[5];
    v21 = v30[6];
    v22 = v30[7];
    v15 = v31;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
    v16 = v8;
    v17 = v9;
    v18 = v10;
    v19 = v11;
    v20 = v12;
    v21 = v14;
    v22 = v13;
    v23 = v27;
  }
  v24 = v4 + 148;
  if (v15 == 255)
  {
    v25 = 0;
  }
  else
  {
    if (v15 == 2)
      v25 = (int)v23;
    else
      v25 = 0;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v23, v16, v17, v18, v19, v20, v21, v22, v15);
  }
  *v24 = v25;
  return PhysicallyBasedMaterial.emissiveIntensity.modify;
}

void PhysicallyBasedMaterial.emissiveIntensity.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v2 = v1[19];
    v3 = REMaterialParameterBlockValueCopy();
    v4 = *(void **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = v3;

  }
  REMaterialParameterBlockValueSetFloat();
  free(v1);
}

uint64_t PhysicallyBasedMaterial.specular.setter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  __int128 v3;
  __int16 v4;
  Swift::UInt v5;
  int v6;
  int v7;
  int v8;
  Swift::UInt16 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  Swift::UInt16 v19;
  Swift::UInt v20;
  char v21;
  char v22;
  char v23;
  _OWORD v24[2];
  int v25;
  _BYTE v26[32];
  _BYTE v27[8];
  uint64_t v28;

  v2 = (unsigned __int8 *)v1;
  v3 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v3;
  v25 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v24 + 8, (uint64_t)v26);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)v27);
  v4 = *(_WORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 112);
  v6 = v2[120];
  v7 = v2[121];
  v8 = v2[122];
  if (v28)
    v9 = v4 | 0x100;
  else
    v9 = v4 & 0xFEFF;
  v19 = v9;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  LOWORD(v15) = v4;
  v16 = v5;
  LOBYTE(v17) = v6;
  BYTE1(v17) = v7;
  BYTE2(v17) = v8;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v15, &v19) & 1) == 0)
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v9, v5, (v7 << 8) | (v8 << 16) | v6);
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v2, (uint64_t)&v19);
  specialized Material.getFloatParameter(key:)(0x72616C7563657073, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x5365727574786574, 0xEF72616C75636570, (uint64_t)&v15);
  v10 = v16;
  if (v16)
  {
    v11 = v18;
    v12 = v17;
    v13 = v15;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
  }
  outlined copy of MaterialParameters.Texture?(v13, v16);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v19);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)&v19);
  v15 = v13;
  v16 = v10;
  v17 = v12;
  v18 = v11;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v19, (uint64_t)&v15);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v24);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v24);
}

void (*PhysicallyBasedMaterial.specular.modify(float **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  float v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = v1;
  v4 = (float *)malloc(0xC8uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 24) = v2;
  outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)v4);
  v5 = specialized Material.getFloatParameter(key:)(0x72616C7563657073, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x5365727574786574, 0xEF72616C75636570, (uint64_t)&v12);
  v6 = v13;
  if (v13)
  {
    v7 = v15;
    v8 = v14;
    v9 = v12;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  v10 = *(float *)&v5;
  if ((v5 & 0x100000000) != 0)
    v10 = 1.0;
  v4[38] = v10;
  *((_QWORD *)v4 + 20) = v9;
  *((_QWORD *)v4 + 21) = v6;
  *((_QWORD *)v4 + 22) = v8;
  *((_DWORD *)v4 + 46) = v7;
  outlined copy of MaterialParameters.Texture?(v9, v6);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
  outlined consume of MaterialParameters.Texture?(v9, v6);
  return PhysicallyBasedMaterial.specular.modify;
}

void PhysicallyBasedMaterial.specular.modify(uint64_t *a1, char a2)
{
  PhysicallyBasedMaterial.metallic.modify(a1, a2, (void (*)(int *))PhysicallyBasedMaterial.specular.setter);
}

void PhysicallyBasedMaterial.metallic.modify(uint64_t *a1, char a2, void (*a3)(int *))
{
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 152);
  v7 = *(void **)(*a1 + 160);
  v8 = *(_QWORD *)(v5 + 168);
  v9 = *(_QWORD *)(v5 + 176);
  v10 = *(_DWORD *)(v5 + 184);
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = v10;
  if ((a2 & 1) != 0)
  {
    outlined copy of MaterialParameters.Texture?(v7, v8);
    a3(&v11);
    outlined consume of MaterialParameters.Texture?(*(void **)(v5 + 160), *(_QWORD *)(v5 + 168));
  }
  else
  {
    a3(&v11);
  }
  free((void *)v5);
}

uint64_t PhysicallyBasedMaterial.clearcoat.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int16 v3;
  Swift::UInt v4;
  int v5;
  int v6;
  int v7;
  Swift::UInt16 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v14[2];
  char v15;
  char v16;
  char v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  int v26;
  _BYTE v27[32];
  char v28[8];
  uint64_t v29;

  v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  v26 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v28);
  v3 = *(_WORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(unsigned __int8 *)(v1 + 120);
  v6 = *(unsigned __int8 *)(v1 + 121);
  v7 = *(unsigned __int8 *)(v1 + 122);
  if (v29 || *(float *)v25 != 0.0)
    v8 = v3 | 0x200;
  else
    v8 = v3 & 0xFDFF;
  LOWORD(v14[0]) = v8;
  v14[1] = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  LOWORD(v20) = v3;
  v21 = (void *)v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v20, (unsigned __int16 *)v14) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5);
  v18 = &type metadata for PhysicallyBasedMaterial;
  v19 = &protocol witness table for PhysicallyBasedMaterial;
  v14[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v14[0] + 16);
  PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v14, (uint64_t)&v20);
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v14);
  v20 = v9;
  v21 = (void *)v10;
  v22 = v11;
  LODWORD(v23) = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)&v20);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v25);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v25);
}

void (*PhysicallyBasedMaterial.clearcoat.modify(_QWORD *a1))(int **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD v5[5];

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.clearcoat.modify;
}

void PhysicallyBasedMaterial.clearcoat.modify(int **a1, char a2)
{
  PhysicallyBasedMaterial.roughness.modify(a1, a2, (void (*)(int *))PhysicallyBasedMaterial.clearcoat.setter);
}

uint64_t PhysicallyBasedMaterial.clearcoatRoughness.setter(uint64_t a1)
{
  return PhysicallyBasedMaterial.clearcoatRoughness.setter(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:), (void (*)(_OWORD *))specialized Material.setParameter<A>(_:alternateTintKey:), (uint64_t (*)(_OWORD *))outlined release of PhysicallyBasedMaterial.ClearcoatRoughness);
}

void (*PhysicallyBasedMaterial.clearcoatRoughness.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[5];

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 5);
  v3[27] = v1;
  v6[3] = &type metadata for PhysicallyBasedMaterial;
  v6[4] = &protocol witness table for PhysicallyBasedMaterial;
  v6[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v6[0] + 16);
  PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v6, v4);
  return PhysicallyBasedMaterial.clearcoatRoughness.modify;
}

void PhysicallyBasedMaterial.clearcoatRoughness.modify(char **a1, char a2)
{
  PhysicallyBasedMaterial.clearcoatRoughness.modify(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t *, _QWORD, _QWORD))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:), (void (*)(char *))specialized Material.setParameter<A>(_:alternateTintKey:), (void (*)(char *))outlined release of PhysicallyBasedMaterial.ClearcoatRoughness, (void (*)(char *))outlined retain of PhysicallyBasedMaterial.ClearcoatRoughness);
}

void PhysicallyBasedMaterial.opacityThreshold.setter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  Swift::UInt v3;
  int v4;
  int v5;
  int v6;
  Swift::UInt16 v7;
  uint64_t v8;
  void *v9;
  unsigned __int16 v10;
  Swift::UInt v11;
  int v12;
  int v13;
  int v14;
  Swift::UInt16 v15;
  unsigned __int16 v16;
  Swift::UInt v17;
  char v18;
  char v19;
  char v20;
  unsigned __int16 v21;
  Swift::UInt v22;
  char v23;
  char v24;
  char v25;

  if ((a1 & 0x100000000) != 0)
  {
    v10 = *(_WORD *)(v1 + 104);
    v11 = *(_QWORD *)(v1 + 112);
    v12 = *(unsigned __int8 *)(v1 + 120);
    v13 = *(unsigned __int8 *)(v1 + 121);
    v14 = *(unsigned __int8 *)(v1 + 122);
    v15 = v10 & 0xFFFD;
    v21 = v10 & 0xFFFD;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v16 = v10;
    v17 = v11;
    v18 = v12;
    v19 = v13;
    v20 = v14;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)(&v16, &v21) & 1) == 0)
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v15, v11, (v13 << 8) | (v14 << 16) | v12);
  }
  else
  {
    v2 = *(_WORD *)(v1 + 104);
    v3 = *(_QWORD *)(v1 + 112);
    v4 = *(unsigned __int8 *)(v1 + 120);
    v5 = *(unsigned __int8 *)(v1 + 121);
    v6 = *(unsigned __int8 *)(v1 + 122);
    v7 = v2 | 2;
    v21 = v2 | 2;
    v22 = v3;
    v23 = v4;
    v24 = v5;
    v25 = v6;
    v16 = v2;
    v17 = v3;
    v18 = v4;
    v19 = v5;
    v20 = v6;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)(&v16, &v21) & 1) == 0)
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v7, v3, (v5 << 8) | (v6 << 16) | v4);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v8 = REMaterialParameterBlockValueCopy();
      v9 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v8;

    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void (*PhysicallyBasedMaterial.opacityThreshold.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = PhysicallyBasedMaterial.opacityThreshold.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = BYTE4(v3) & 1;
  return PhysicallyBasedMaterial.opacityThreshold.modify;
}

void PhysicallyBasedMaterial.opacityThreshold.modify(uint64_t a1)
{
  PhysicallyBasedMaterial.opacityThreshold.setter(*(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32));
}

unsigned __int8 *PhysicallyBasedMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL4 v3;

  v2 = *result;
  v3 = v2 > 1;
  *(_QWORD *)(v1 + 80) = v3 ^ (v2 != 0);
  *(_BYTE *)(v1 + 88) = v3;
  return result;
}

uint64_t *(*PhysicallyBasedMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 88) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 80) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 80);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return PhysicallyBasedMaterial.faceCulling.modify;
}

uint64_t *PhysicallyBasedMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;

  v1 = *result;
  v2 = *((unsigned __int8 *)result + 8);
  v3 = v2 == 1;
  v4 = v2 > 1;
  v5 = v3;
  *(_QWORD *)(v1 + 80) = v5;
  *(_BYTE *)(v1 + 88) = v4;
  return result;
}

uint64_t PhysicallyBasedMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t PhysicallyBasedMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicallyBasedMaterial.blending.setter(uint64_t a1)
{
  _BYTE v1[40];

  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

void (*PhysicallyBasedMaterial.blending.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  PhysicallyBasedMaterial.blending.getter((uint64_t)(v3 + 10));
  return PhysicallyBasedMaterial.blending.modify;
}

void PhysicallyBasedMaterial.blending.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2);
    outlined retain of PhysicallyBasedMaterial.Blending(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PhysicallyBasedMaterial.Blending);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2);
    outlined consume of PhysicallyBasedMaterial.Blending(*(_QWORD *)(v2 + 80), *(void **)(v2 + 88), *(_QWORD *)(v2 + 96));
  }
  else
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2 + 40);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2 + 40);
  }
  free((void *)v2);
}

void PhysicallyBasedMaterial.normal.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  Swift::UInt v4;
  int v5;
  int v6;
  int v7;
  Swift::UInt16 v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::UInt v34;
  uint64_t v35;
  int v36;
  _QWORD v37[8];
  unsigned __int8 v38;
  _QWORD v39[4];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  void *v45;
  Swift::UInt v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unsigned __int8 v51;

  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int *)(a1 + 24);
  v3 = *(_WORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(unsigned __int8 *)(v1 + 120);
  v6 = *(unsigned __int8 *)(v1 + 121);
  v7 = *(unsigned __int8 *)(v1 + 122);
  v32 = *(void **)a1;
  if (v31)
    v8 = v3 | 8;
  else
    v8 = v3 & 0xFFF7;
  LOWORD(v45) = v8;
  v46 = v4;
  LOBYTE(v47) = v5;
  BYTE1(v47) = v6;
  BYTE2(v47) = v7;
  LOWORD(v33) = v3;
  v34 = v4;
  LOBYTE(v35) = v5;
  BYTE1(v35) = v6;
  BYTE2(v35) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v33, (unsigned __int16 *)&v45) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5);
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)&v45);
  v9 = (void *)v49;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  swift_bridgeObjectRetain_n();
  v11 = v10;
  specialized String.withCString<A>(_:)(0x4E65727574786574, 0xED00006C616D726FLL, v11, (uint64_t)v37);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (void *)v37[0];
  v13 = v37[1];
  v14 = v37[2];
  v15 = v37[3];
  v16 = v37[4];
  v17 = v37[5];
  v19 = v37[6];
  v18 = v37[7];
  v20 = v38;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)&v45, (uint64_t)&v33);
  if (v20 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v39);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v33);
    v12 = (void *)v39[0];
    v13 = v39[1];
    v14 = v39[2];
    v15 = v39[3];
    v20 = v44;
    if (v44 == 255)
      goto LABEL_12;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v33);
    v40 = v16;
    v41 = v17;
    v42 = v19;
    v43 = v18;
  }
  if (v20 == 1)
  {
    v21 = v12;
    v22 = v13;
    v23 = v14;
    v24 = v15;
    goto LABEL_13;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v12, v13, v14, v15, v40, v41, v42, v43, v20);
LABEL_12:
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
LABEL_13:
  v29 = v21;
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v45);
  v45 = v32;
  v46 = v31;
  v47 = v30;
  LODWORD(v48) = v2;
  v33 = v21;
  v34 = v22;
  v35 = v23;
  v36 = v24;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v45, (uint64_t)&v33);
  if (v31)
    v25 = v32;
  else
    v25 = 0;
  if (v31)
    v26 = v30;
  else
    v26 = 0;
  if (v31)
    v27 = v2;
  else
    v27 = 0;
  if (v31)
    v28 = 1;
  else
    v28 = -1;
  v45 = v25;
  v46 = v31;
  v47 = v26;
  v48 = v27;
  v49 = 0u;
  v50 = 0u;
  v51 = v28;
  outlined copy of MaterialParameters.Texture?(v32, v31);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v25, v31, v26, v27, 0, 0, 0, 0, v28);
  specialized Material.subscript.setter((uint64_t)&v45, 0x4E65727574786574, 0xED00006C616D726FLL);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v25, v31, v26, v27, 0, 0, 0, 0, v28);
  outlined consume of MaterialParameters.Texture?(v29, v22);
  outlined consume of MaterialParameters.Texture?(v32, v31);
}

void (*PhysicallyBasedMaterial.normal.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterial.normal.getter((uint64_t)v3);
  return PhysicallyBasedMaterial.normal.modify;
}

void PhysicallyBasedMaterial.normal.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.normal.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterial.normal.setter);
}

void PhysicallyBasedMaterial.ambientOcclusion.setter(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  Swift::UInt v3;
  int v4;
  int v5;
  int v6;
  Swift::UInt16 v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Swift::UInt v36;
  uint64_t v37;
  int v38;
  _QWORD v39[8];
  unsigned __int8 v40;
  _QWORD v41[4];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *v47;
  Swift::UInt v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  unsigned __int8 v53;

  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 8);
  v2 = *(_WORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(unsigned __int8 *)(v1 + 120);
  v5 = *(unsigned __int8 *)(v1 + 121);
  v6 = *(unsigned __int8 *)(v1 + 122);
  v32 = *(void **)a1;
  if (v31)
    v7 = v2 | 0x80;
  else
    v7 = v2 & 0xFF7F;
  LOWORD(v47) = v7;
  v48 = v3;
  LOBYTE(v49) = v4;
  BYTE1(v49) = v5;
  BYTE2(v49) = v6;
  LOWORD(v35) = v2;
  v36 = v3;
  LOBYTE(v37) = v4;
  BYTE1(v37) = v5;
  BYTE2(v37) = v6;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v35, (unsigned __int16 *)&v47) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v7, v3, (v5 << 8) | (v6 << 16) | v4);
  outlined init with copy of PhysicallyBasedMaterial(v34, (uint64_t)&v47);
  v8 = (void *)v51;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(0xD000000000000017, 0x800000021BE86150, v10, (uint64_t)v39);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (void *)v39[0];
  v12 = v39[1];
  v13 = v39[2];
  v14 = v39[3];
  v15 = v39[4];
  v16 = v39[5];
  v18 = v39[6];
  v17 = v39[7];
  v19 = v40;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)&v47, (uint64_t)&v35);
  if (v19 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v41);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    v11 = (void *)v41[0];
    v12 = v41[1];
    v13 = v41[2];
    v20 = v41[3];
    v19 = v46;
    if (v46 == 255)
      goto LABEL_13;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    v42 = v15;
    v43 = v16;
    v44 = v18;
    v45 = v17;
    v20 = v14;
  }
  if (v19 == 1)
  {
    v21 = v11;
    v22 = v12;
    v23 = v13;
    goto LABEL_14;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v12, v13, v20, v42, v43, v44, v45, v19);
LABEL_13:
  v21 = 0;
  v22 = 0;
  v23 = 0;
  LODWORD(v20) = 0;
LABEL_14:
  v28 = v22;
  v29 = v21;
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v47);
  v47 = v32;
  v48 = v31;
  v49 = v30;
  LODWORD(v50) = v33;
  v35 = v21;
  v36 = v22;
  v37 = v23;
  v38 = v20;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v47, (uint64_t)&v35);
  if (v31)
    v24 = v32;
  else
    v24 = 0;
  if (v31)
    v25 = v30;
  else
    v25 = 0;
  if (v31)
    v26 = v33;
  else
    v26 = 0;
  if (v31)
    v27 = 1;
  else
    v27 = -1;
  v47 = v24;
  v48 = v31;
  v49 = v25;
  v50 = v26;
  v51 = 0u;
  v52 = 0u;
  v53 = v27;
  outlined copy of MaterialParameters.Texture?(v32, v31);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  specialized Material.subscript.setter((uint64_t)&v47, 0xD000000000000017, 0x800000021BE86150);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  outlined consume of MaterialParameters.Texture?(v29, v28);
  outlined consume of MaterialParameters.Texture?(v32, v31);
}

void (*PhysicallyBasedMaterial.ambientOcclusion.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterial.ambientOcclusion.getter((uint64_t)v3);
  return PhysicallyBasedMaterial.ambientOcclusion.modify;
}

void PhysicallyBasedMaterial.ambientOcclusion.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.normal.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterial.ambientOcclusion.setter);
}

uint64_t PhysicallyBasedMaterial.anisotropyLevel.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int16 v3;
  Swift::UInt v4;
  int v5;
  int v6;
  int v7;
  Swift::UInt16 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v14[2];
  char v15;
  char v16;
  char v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  int v26;
  _BYTE v27[32];
  char v28[8];
  uint64_t v29;

  v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  v26 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v28);
  v3 = *(_WORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(unsigned __int8 *)(v1 + 120);
  v6 = *(unsigned __int8 *)(v1 + 121);
  v7 = *(unsigned __int8 *)(v1 + 122);
  if (v29 || *(float *)v25 != 0.0)
    v8 = v3 | 0x400;
  else
    v8 = v3 & 0xFBFF;
  LOWORD(v14[0]) = v8;
  v14[1] = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  LOWORD(v20) = v3;
  v21 = (void *)v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v20, (unsigned __int16 *)v14) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5);
  v18 = &type metadata for PhysicallyBasedMaterial;
  v19 = &protocol witness table for PhysicallyBasedMaterial;
  v14[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v14[0] + 16);
  PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(v14, (uint64_t)&v20);
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v14);
  v20 = v9;
  v21 = (void *)v10;
  v22 = v11;
  LODWORD(v23) = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)&v20);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v25);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v25);
}

void (*PhysicallyBasedMaterial.anisotropyLevel.modify(_QWORD *a1))(int **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD v5[5];

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.anisotropyLevel.modify;
}

void PhysicallyBasedMaterial.anisotropyLevel.modify(int **a1, char a2)
{
  PhysicallyBasedMaterial.roughness.modify(a1, a2, (void (*)(int *))PhysicallyBasedMaterial.anisotropyLevel.setter);
}

void PhysicallyBasedMaterial.roughness.modify(int **a1, char a2, void (*a3)(int *))
{
  int *v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v5 = *a1;
  v6 = **a1;
  v7 = (void *)*((_QWORD *)*a1 + 1);
  v8 = *((_QWORD *)v5 + 2);
  v9 = *((_QWORD *)v5 + 3);
  v10 = v5[8];
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = v10;
  if ((a2 & 1) != 0)
  {
    outlined copy of MaterialParameters.Texture?(v7, v8);
    a3(&v11);
    outlined consume of MaterialParameters.Texture?(*((void **)v5 + 1), *((_QWORD *)v5 + 2));
  }
  else
  {
    a3(&v11);
  }
  free(v5);
}

double key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial@<D0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  double result;
  _QWORD v9[5];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v9[3] = &type metadata for PhysicallyBasedMaterial;
  v9[4] = &protocol witness table for PhysicallyBasedMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(a1, v9[0] + 16);
  a2(&v10, v9, 0, 0);
  v6 = v12;
  v7 = v13;
  *(_DWORD *)a3 = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 24) = v6;
  *(_DWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t PhysicallyBasedMaterial.anisotropyAngle.setter(uint64_t a1)
{
  return PhysicallyBasedMaterial.clearcoatRoughness.setter(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:), (void (*)(_OWORD *))specialized Material.setParameter<A>(_:alternateTintKey:), (uint64_t (*)(_OWORD *))outlined release of PhysicallyBasedMaterial.AnisotropyAngle);
}

uint64_t PhysicallyBasedMaterial.clearcoatRoughness.setter(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD), void (*a3)(_OWORD *), uint64_t (*a4)(_OWORD *))
{
  uint64_t v4;
  __int128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v14[3];
  int v15;
  _QWORD v16[5];
  _QWORD v17[4];
  int v18;
  _OWORD v19[2];
  int v20;

  v8 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v8;
  v20 = *(_DWORD *)(a1 + 32);
  v16[3] = &type metadata for PhysicallyBasedMaterial;
  v16[4] = &protocol witness table for PhysicallyBasedMaterial;
  v16[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v4, v16[0] + 16);
  a2(v17, v16, 0, 0);
  v9 = (void *)v17[1];
  v10 = v17[2];
  v11 = v17[3];
  v12 = v18;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v19 + 8, (uint64_t)v16);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v16, (uint64_t)v17);
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v11;
  v15 = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v17, (uint64_t)v14);
  a3(v19);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return a4(v19);
}

void (*PhysicallyBasedMaterial.anisotropyAngle.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[5];

  v3 = malloc(0xE0uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 5);
  v3[27] = v1;
  v6[3] = &type metadata for PhysicallyBasedMaterial;
  v6[4] = &protocol witness table for PhysicallyBasedMaterial;
  v6[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v6[0] + 16);
  PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:)(v6, v4);
  return PhysicallyBasedMaterial.anisotropyAngle.modify;
}

void PhysicallyBasedMaterial.anisotropyAngle.modify(char **a1, char a2)
{
  PhysicallyBasedMaterial.clearcoatRoughness.modify(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t *, _QWORD, _QWORD))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:), (void (*)(char *))specialized Material.setParameter<A>(_:alternateTintKey:), (void (*)(char *))outlined release of PhysicallyBasedMaterial.AnisotropyAngle, (void (*)(char *))outlined retain of PhysicallyBasedMaterial.AnisotropyAngle);
}

void PhysicallyBasedMaterial.clearcoatRoughness.modify(char **a1, char a2, void (*a3)(uint64_t *__return_ptr, uint64_t *, _QWORD, _QWORD), void (*a4)(char *), void (*a5)(char *), void (*a6)(char *))
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *);
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  ValueMetadata *v33;
  _UNKNOWN **v34;

  v9 = *a1;
  v10 = (uint64_t)(*a1 + 40);
  v11 = (uint64_t)(*a1 + 184);
  v12 = *((_QWORD *)*a1 + 27);
  if ((a2 & 1) != 0)
  {
    v14 = *(_OWORD *)(*a1 + 56);
    *((_OWORD *)v9 + 5) = *(_OWORD *)v10;
    *((_OWORD *)v9 + 6) = v14;
    *((_DWORD *)v9 + 28) = *(_DWORD *)(v10 + 32);
    v33 = &type metadata for PhysicallyBasedMaterial;
    v34 = &protocol witness table for PhysicallyBasedMaterial;
    v30 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v12, v30 + 16);
    a6(v9 + 80);
    a3(&v25, &v30, 0, 0);
    v15 = v26;
    v16 = v27;
    v17 = v28;
    v24 = a5;
    v18 = v29;
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 88), (uint64_t)(v9 + 152));
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 152), v11);
    v30 = (uint64_t)v15;
    v31 = v16;
    v32 = v17;
    LODWORD(v33) = v18;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)(v11, (uint64_t)&v30);
    a4(v9 + 80);
    outlined consume of MaterialParameters.Texture?(v15, v16);
    v24(v9 + 80);
    outlined consume of MaterialParameters.Texture?(*((void **)v9 + 6), *((_QWORD *)v9 + 7));
  }
  else
  {
    v19 = *(_OWORD *)(*a1 + 56);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v19;
    *((_DWORD *)v9 + 8) = *(_DWORD *)(v10 + 32);
    v33 = &type metadata for PhysicallyBasedMaterial;
    v34 = &protocol witness table for PhysicallyBasedMaterial;
    v30 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v12, v30 + 16);
    a3(&v25, &v30, 0, 0);
    v20 = v26;
    v21 = v27;
    v22 = v28;
    v23 = v29;
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 8), (uint64_t)(v9 + 120));
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 120), v11);
    v30 = (uint64_t)v20;
    v31 = v21;
    v32 = v22;
    LODWORD(v33) = v23;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)(v11, (uint64_t)&v30);
    a4(v9);
    outlined consume of MaterialParameters.Texture?(v20, v21);
    a5(v9);
  }
  free(v9);
}

void key path setter for PhysicallyBasedMaterial.sheen : PhysicallyBasedMaterial(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  void *v5[4];
  int v6;

  v1 = *(void **)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32);
  v5[0] = *(void **)a1;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  v6 = v4;
  outlined copy of PhysicallyBasedMaterial.SheenColor?(v5[0], v1, (uint64_t)v2);
  PhysicallyBasedMaterial.sheen.setter((uint64_t)v5);
}

void PhysicallyBasedMaterial.sheen.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  Swift::UInt v9;
  int v10;
  int v11;
  int v12;
  Swift::UInt16 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int16 v17;
  Swift::UInt v18;
  int v19;
  int v20;
  int v21;
  Swift::UInt16 v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  Swift::UInt v38;
  uint64_t v39;
  ValueMetadata *v40;
  _UNKNOWN **v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  if (*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_DWORD *)(a1 + 32);
    v30 = *(void **)a1;
    v31 = *(void **)(a1 + 8);
    v42 = *(void **)a1;
    v43 = v31;
    v5 = v2;
    v44 = v2;
    v45 = v3;
    v6 = v3;
    v7 = v4;
    v46 = v4;
    v8 = *(_WORD *)(v1 + 104);
    v9 = *(_QWORD *)(v1 + 112);
    v10 = *(unsigned __int8 *)(v1 + 120);
    v11 = *(unsigned __int8 *)(v1 + 121);
    v12 = *(unsigned __int8 *)(v1 + 122);
    v13 = v8 | 0x800;
    LOWORD(v37) = v8 | 0x800;
    v38 = v9;
    LOBYTE(v39) = v10;
    BYTE1(v39) = v11;
    BYTE2(v39) = v12;
    LOWORD(v32) = v8;
    v33 = (void *)v9;
    LOBYTE(v34) = v10;
    BYTE1(v34) = v11;
    BYTE2(v34) = v12;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v32, (unsigned __int16 *)&v37) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v13, v9, (v11 << 8) | (v12 << 16) | v10);
    v40 = &type metadata for PhysicallyBasedMaterial;
    v41 = &protocol witness table for PhysicallyBasedMaterial;
    v37 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v37 + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(&v37, (uint64_t)&v32);
    v15 = v32;
    v14 = v33;
    v16 = v34;
    v37 = (uint64_t)v31;
    v38 = v5;
    v39 = v6;
    LODWORD(v40) = v7;
    v32 = v33;
    v33 = (void *)v34;
    v34 = v35;
    LODWORD(v35) = v36;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v37, (uint64_t)&v32);
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)&v42);

    outlined consume of MaterialParameters.Texture?(v14, v16);
    outlined consume of PhysicallyBasedMaterial.SheenColor?(v30, v31, v5);
  }
  else
  {
    v17 = *(_WORD *)(v1 + 104);
    v18 = *(_QWORD *)(v1 + 112);
    v19 = *(unsigned __int8 *)(v1 + 120);
    v20 = *(unsigned __int8 *)(v1 + 121);
    v21 = *(unsigned __int8 *)(v1 + 122);
    v22 = v17 & 0xF7FF;
    LOWORD(v37) = v17 & 0xF7FF;
    v38 = v18;
    LOBYTE(v39) = v19;
    BYTE1(v39) = v20;
    BYTE2(v39) = v21;
    LOWORD(v42) = v17;
    v43 = (void *)v18;
    LOBYTE(v44) = v19;
    BYTE1(v44) = v20;
    BYTE2(v44) = v21;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v42, (unsigned __int16 *)&v37) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v22, v18, (v20 << 8) | (v21 << 16) | v19);
    v40 = &type metadata for PhysicallyBasedMaterial;
    v41 = &protocol witness table for PhysicallyBasedMaterial;
    v37 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v37 + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(&v37, (uint64_t)&v42);
    v24 = v42;
    v23 = v43;
    v25 = v44;
    v37 = 0;
    v38 = 0;
    LODWORD(v40) = 0;
    v39 = 0;
    v42 = v43;
    v43 = (void *)v44;
    v44 = v45;
    LODWORD(v45) = v46;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v37, (uint64_t)&v42);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v26 = REMaterialParameterBlockValueCopy();
      v27 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v26;

    }
    specialized String.withCString<A>(_:)(0xD000000000000011, 0x800000021BE86C70);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v28 = REMaterialParameterBlockValueCopy();
      v29 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v28;

    }
    specialized String.withCString<A>(_:)(0x6C6F436E65656873, 0xEA0000000000726FLL);

    outlined consume of MaterialParameters.Texture?(v23, v25);
  }
}

void (*PhysicallyBasedMaterial.sheen.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  _QWORD v9[5];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 5) = v1;
  if ((*(_BYTE *)(v1 + 105) & 8) != 0)
  {
    v9[3] = &type metadata for PhysicallyBasedMaterial;
    v9[4] = &protocol witness table for PhysicallyBasedMaterial;
    v9[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v9[0] + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(v9, (uint64_t)&v10);
    v4 = v10;
    v7 = v11;
    v5 = v12;
    v6 = v13;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0uLL;
  }
  *(_QWORD *)v3 = v4;
  *(_OWORD *)(v3 + 8) = v7;
  *((_QWORD *)v3 + 3) = v5;
  *((_DWORD *)v3 + 8) = v6;
  return PhysicallyBasedMaterial.sheen.modify;
}

void PhysicallyBasedMaterial.sheen.modify(void ***a1, char a2)
{
  void **v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  _QWORD v9[4];
  int v10;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = (uint64_t)v3[2];
  v7 = v3[3];
  v8 = *((_DWORD *)v3 + 8);
  v9[0] = v4;
  v9[1] = v5;
  v9[2] = v6;
  v9[3] = v7;
  v10 = v8;
  if ((a2 & 1) != 0)
  {
    outlined copy of PhysicallyBasedMaterial.SheenColor?(v4, v5, v6);
    PhysicallyBasedMaterial.sheen.setter((uint64_t)v9);
    outlined consume of PhysicallyBasedMaterial.SheenColor?(*v3, v3[1], (uint64_t)v3[2]);
  }
  else
  {
    PhysicallyBasedMaterial.sheen.setter((uint64_t)v9);
  }
  free(v3);
}

uint64_t PhysicallyBasedMaterial.textureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 0, (void *)0xE000000000000000);
}

uint64_t (*PhysicallyBasedMaterial.textureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  float32x2_t v1;

  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
  return CustomMaterial.textureCoordinateTransform.modify;
}

uint64_t PhysicallyBasedMaterial.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 49, (void *)0xE100000000000000);
}

uint64_t (*PhysicallyBasedMaterial.secondaryTextureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  float32x2_t v1;

  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
  return CustomMaterial.secondaryTextureCoordinateTransform.modify;
}

uint64_t PhysicallyBasedMaterial.shaderCache.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
  }
  else
  {
    v2 = v0;
    if (one-time initialization token for shaderCacheRegistry != -1)
      swift_once();
    swift_retain();
    PhysicallyBasedMaterial.assetService.getter((uint64_t)v4);
    v1 = specialized AssetServiceScopedRegistry.instance(for:)(v4);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    swift_retain();
    swift_release();
    *(_QWORD *)(v2 + 96) = v1;
  }
  swift_retain();
  return v1;
}

void PhysicallyBasedMaterial.PBRShaderParameters.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  int v3;
  int v4;
  Swift::UInt8 v5;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 17);
  v4 = *(unsigned __int8 *)(v0 + 18);
  Hasher._combine(_:)(*(_WORD *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4 != 2)
      goto LABEL_4;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v3 == 2)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3 & 1);
  if (v4 == 2)
    goto LABEL_7;
LABEL_4:
  v5 = v4 & 1;
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v5);
}

unint64_t PhysicallyBasedMaterial.PBRShaderParameters.functionConstants.getter()
{
  unsigned __int16 *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21BE77D90;
  *(_QWORD *)(v2 + 32) = 0xD000000000000012;
  *(_QWORD *)(v2 + 40) = 0x800000021BE90F20;
  *(_QWORD *)(v2 + 48) = (v1 >> 2) & 1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 80) = 0x6F4E656C62616E45;
  *(_QWORD *)(v2 + 88) = 0xEF70614D6C616D72;
  *(_QWORD *)(v2 + 96) = (v1 >> 3) & 1;
  *(_QWORD *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 128) = 0xD000000000000011;
  *(_QWORD *)(v2 + 136) = 0x800000021BE90F40;
  *(_QWORD *)(v2 + 144) = (v1 >> 4) & 1;
  *(_QWORD *)(v2 + 152) = 0;
  *(_BYTE *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 176) = 0xD000000000000012;
  *(_QWORD *)(v2 + 184) = 0x800000021BE90F60;
  *(_QWORD *)(v2 + 192) = (v1 >> 5) & 1;
  *(_QWORD *)(v2 + 200) = 0;
  *(_BYTE *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 224) = 0xD000000000000011;
  *(_QWORD *)(v2 + 232) = 0x800000021BE90F80;
  *(_QWORD *)(v2 + 240) = (v1 >> 6) & 1;
  *(_QWORD *)(v2 + 248) = 0;
  *(_BYTE *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 272) = 0x4F41656C62616E45;
  *(_QWORD *)(v2 + 280) = 0xEB0000000070614DLL;
  *(_QWORD *)(v2 + 288) = (v1 >> 7) & 1;
  *(_QWORD *)(v2 + 296) = 0;
  *(_BYTE *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 320) = 0xD000000000000011;
  *(_QWORD *)(v2 + 328) = 0x800000021BE90FA0;
  *(_QWORD *)(v2 + 336) = (v1 >> 8) & 1;
  *(_QWORD *)(v2 + 344) = 0;
  *(_BYTE *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 368) = 0x6C43656C62616E45;
  *(_QWORD *)(v2 + 376) = 0xEF74616F63726165;
  *(_QWORD *)(v2 + 384) = (v1 >> 9) & 1;
  *(_QWORD *)(v2 + 392) = 0;
  *(_BYTE *)(v2 + 400) = 0;
  *(_QWORD *)(v2 + 416) = 0xD000000000000010;
  *(_QWORD *)(v2 + 424) = 0x800000021BE90FC0;
  *(_QWORD *)(v2 + 432) = (v1 >> 10) & 1;
  *(_QWORD *)(v2 + 440) = 0;
  *(_BYTE *)(v2 + 448) = 0;
  *(_QWORD *)(v2 + 464) = 0x6C43656C62616E45;
  *(_QWORD *)(v2 + 472) = 0xEB0000000068746FLL;
  *(_QWORD *)(v2 + 480) = (v1 >> 11) & 1;
  *(_QWORD *)(v2 + 488) = 0;
  *(_BYTE *)(v2 + 496) = 0;
  *(_QWORD *)(v2 + 512) = 0xD000000000000018;
  *(_QWORD *)(v2 + 520) = 0x800000021BE90FE0;
  *(_QWORD *)(v2 + 528) = (v1 >> 14) & 1;
  *(_QWORD *)(v2 + 536) = 0;
  *(_BYTE *)(v2 + 544) = 0;
  return specialized Dictionary.init(dictionaryLiteral:)(v2);
}

Swift::Int PhysicallyBasedMaterial.PBRShaderParameters.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  int v3;
  int v4;
  Swift::UInt16 v5;
  Swift::UInt8 v6;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 17);
  v4 = *(unsigned __int8 *)(v0 + 18);
  v5 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4 != 2)
      goto LABEL_4;
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v3 == 2)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3 & 1);
  if (v4 == 2)
    goto LABEL_7;
LABEL_4:
  v6 = v4 & 1;
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhysicallyBasedMaterial.PBRShaderParameters()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  int v3;
  int v4;
  Swift::UInt16 v5;
  Swift::UInt8 v6;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 17);
  v4 = *(unsigned __int8 *)(v0 + 18);
  v5 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4 != 2)
      goto LABEL_4;
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v3 == 2)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3 & 1);
  if (v4 == 2)
    goto LABEL_7;
LABEL_4:
  v6 = v4 & 1;
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t PhysicallyBasedMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t PhysicallyBasedMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = result;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *PhysicallyBasedMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = *result;
  return result;
}

unsigned __int8 *(*PhysicallyBasedMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 136) == 1;
  return PhysicallyBasedMaterial.triangleFillMode.modify;
}

unsigned __int8 *PhysicallyBasedMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 136) = result[8];
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__writesDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicallyBasedMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance PhysicallyBasedMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance PhysicallyBasedMaterial(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = result;
  return result;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance PhysicallyBasedMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance PhysicallyBasedMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance PhysicallyBasedMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 144) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance PhysicallyBasedMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance PhysicallyBasedMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 145);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance PhysicallyBasedMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 145) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance PhysicallyBasedMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicallyBasedMaterial.writesDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t PhysicallyBasedMaterial.writesDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 144) = result;
  return result;
}

_BYTE *(*PhysicallyBasedMaterial.writesDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 144);
  return PhysicallyBasedMaterial.writesDepth.modify;
}

_BYTE *PhysicallyBasedMaterial.writesDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 144) = result[8];
  return result;
}

uint64_t PhysicallyBasedMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 145);
}

uint64_t PhysicallyBasedMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 145) = result;
  return result;
}

_BYTE *(*PhysicallyBasedMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 145);
  return PhysicallyBasedMaterial.readsDepth.modify;
}

_BYTE *PhysicallyBasedMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 145) = result[8];
  return result;
}

uint64_t PhysicallyBasedMaterial.program.getter()
{
  return swift_retain();
}

uint64_t PhysicallyBasedMaterial.program.setter(uint64_t a1)
{
  specialized PhysicallyBasedMaterial.program.setter(a1);
  return swift_release();
}

uint64_t (*PhysicallyBasedMaterial.program.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 128);
  a1[1] = v1;
  swift_retain();
  return PhysicallyBasedMaterial.program.modify;
}

uint64_t PhysicallyBasedMaterial.program.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = swift_retain();
    specialized PhysicallyBasedMaterial.program.setter(v3);
    swift_release();
  }
  else
  {
    specialized PhysicallyBasedMaterial.program.setter(v2);
  }
  return swift_release();
}

uint64_t PhysicallyBasedMaterial.init(program:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 FeatureFlags;
  char v8;
  char v9;
  uint64_t inited;
  __int128 v12[2];

  *(_OWORD *)(a2 + 9) = 0u;
  *(_OWORD *)(a2 + 7) = 0u;
  *(_OWORD *)(a2 + 5) = 0u;
  v3 = (uint64_t)(a2 + 5);
  *((_BYTE *)a2 + 88) = 1;
  a2[12] = 0;
  *((_WORD *)a2 + 52) = 0;
  a2[14] = 0;
  *((_BYTE *)a2 + 120) = 1;
  *(_WORD *)((char *)a2 + 121) = 514;
  *((_WORD *)a2 + 72) = 257;
  a2[16] = a1;
  a2[17] = 0;
  *a2 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_retain();
  v4 = REMaterialParameterBlockValueCreate();
  a2[1] = MEMORY[0x24BEE4AF8];
  *((_BYTE *)a2 + 16) = 0;
  a2[3] = 0;
  a2[4] = v4;
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v12);
  outlined destroy of __REAssetService?(v3);
  outlined init with take of BindableDataInternal(v12, v3);
  v6 = *a2;
  swift_beginAccess();
  FeatureFlags = REMaterialAssetGetFeatureFlags();
  if ((FeatureFlags & 0x1000) != 0)
    v8 = 1;
  else
    v8 = 2;
  *((_WORD *)a2 + 52) = FeatureFlags;
  a2[14] = 0;
  if ((FeatureFlags & 0x2000) != 0)
    v9 = 1;
  else
    v9 = 2;
  *((_BYTE *)a2 + 120) = 1;
  *((_BYTE *)a2 + 121) = v8;
  *((_BYTE *)a2 + 122) = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v6;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  return swift_release();
}

uint64_t PhysicallyBasedMaterial.clearcoatNormal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v16[20];
  _QWORD v17[8];
  unsigned __int8 v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  _BYTE v25[8];
  void *v26;

  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v25);
  v2 = v26;
  swift_bridgeObjectRetain_n();
  v3 = v2;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  specialized String.withCString<A>(_:)(0xD000000000000016, 0x800000021BE86170, v4, (uint64_t)v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (void *)v17[0];
  v6 = v17[1];
  v7 = v17[2];
  v8 = v17[3];
  v9 = v17[4];
  v10 = v17[5];
  v12 = v17[6];
  v11 = v17[7];
  v13 = v18;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v25, (uint64_t)v16);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v19);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    v5 = (void *)v19[0];
    v6 = v19[1];
    v7 = v19[2];
    v8 = v19[3];
    v13 = v24;
    if (v24 == 255)
    {
LABEL_6:
      v5 = 0;
      v6 = 0;
      v7 = 0;
      LODWORD(v8) = 0;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    v20 = v9;
    v21 = v10;
    v22 = v12;
    v23 = v11;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v6, v7, v8, v20, v21, v22, v23, v13);
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  return outlined destroy of PhysicallyBasedMaterial((uint64_t)v25);
}

uint64_t key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void **))
{
  void *v6;
  void *v7;
  int v8;
  void *v10[3];
  int v11;

  v6 = *(void **)(a1 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 24);
  v10[0] = *(void **)a1;
  v10[1] = v6;
  v10[2] = v7;
  v11 = v8;
  outlined copy of MaterialParameters.Texture?(v10[0], (uint64_t)v6);
  return a5(v10);
}

void PhysicallyBasedMaterial.clearcoatNormal.setter(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  Swift::UInt v3;
  int v4;
  int v5;
  int v6;
  Swift::UInt16 v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Swift::UInt v36;
  uint64_t v37;
  int v38;
  _QWORD v39[8];
  unsigned __int8 v40;
  _QWORD v41[4];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *v47;
  Swift::UInt v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  unsigned __int8 v53;

  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 8);
  v2 = *(_WORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(unsigned __int8 *)(v1 + 120);
  v5 = *(unsigned __int8 *)(v1 + 121);
  v6 = *(unsigned __int8 *)(v1 + 122);
  v32 = *(void **)a1;
  if (v31)
    v7 = v2 | 0x4000;
  else
    v7 = v2 & 0xBFFF;
  LOWORD(v47) = v7;
  v48 = v3;
  LOBYTE(v49) = v4;
  BYTE1(v49) = v5;
  BYTE2(v49) = v6;
  LOWORD(v35) = v2;
  v36 = v3;
  LOBYTE(v37) = v4;
  BYTE1(v37) = v5;
  BYTE2(v37) = v6;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v35, (unsigned __int16 *)&v47) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v7, v3, (v5 << 8) | (v6 << 16) | v4);
  outlined init with copy of PhysicallyBasedMaterial(v34, (uint64_t)&v47);
  v8 = (void *)v51;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(0xD000000000000016, 0x800000021BE86170, v10, (uint64_t)v39);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (void *)v39[0];
  v12 = v39[1];
  v13 = v39[2];
  v14 = v39[3];
  v15 = v39[4];
  v16 = v39[5];
  v18 = v39[6];
  v17 = v39[7];
  v19 = v40;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)&v47, (uint64_t)&v35);
  if (v19 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v41);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    v11 = (void *)v41[0];
    v12 = v41[1];
    v13 = v41[2];
    v20 = v41[3];
    v19 = v46;
    if (v46 == 255)
      goto LABEL_13;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    v42 = v15;
    v43 = v16;
    v44 = v18;
    v45 = v17;
    v20 = v14;
  }
  if (v19 == 1)
  {
    v21 = v11;
    v22 = v12;
    v23 = v13;
    goto LABEL_14;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v12, v13, v20, v42, v43, v44, v45, v19);
LABEL_13:
  v21 = 0;
  v22 = 0;
  v23 = 0;
  LODWORD(v20) = 0;
LABEL_14:
  v28 = v22;
  v29 = v21;
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v47);
  v47 = v32;
  v48 = v31;
  v49 = v30;
  LODWORD(v50) = v33;
  v35 = v21;
  v36 = v22;
  v37 = v23;
  v38 = v20;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v47, (uint64_t)&v35);
  if (v31)
    v24 = v32;
  else
    v24 = 0;
  if (v31)
    v25 = v30;
  else
    v25 = 0;
  if (v31)
    v26 = v33;
  else
    v26 = 0;
  if (v31)
    v27 = 1;
  else
    v27 = -1;
  v47 = v24;
  v48 = v31;
  v49 = v25;
  v50 = v26;
  v51 = 0u;
  v52 = 0u;
  v53 = v27;
  outlined copy of MaterialParameters.Texture?(v32, v31);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  specialized Material.subscript.setter((uint64_t)&v47, 0xD000000000000016, 0x800000021BE86170);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  outlined consume of MaterialParameters.Texture?(v29, v28);
  outlined consume of MaterialParameters.Texture?(v32, v31);
}

void (*PhysicallyBasedMaterial.clearcoatNormal.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterial.clearcoatNormal.getter((uint64_t)v3);
  return PhysicallyBasedMaterial.clearcoatNormal.modify;
}

void PhysicallyBasedMaterial.clearcoatNormal.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.normal.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterial.clearcoatNormal.setter);
}

void PhysicallyBasedMaterial.normal.modify(void ***a1, char a2, void (*a3)(_QWORD *))
{
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  _QWORD v10[3];
  int v11;

  v5 = *a1;
  v6 = **a1;
  v7 = (uint64_t)v5[1];
  v8 = v5[2];
  v9 = *((_DWORD *)v5 + 6);
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = v8;
  v11 = v9;
  if ((a2 & 1) != 0)
  {
    outlined copy of MaterialParameters.Texture?(v6, v7);
    a3(v10);
    outlined consume of MaterialParameters.Texture?(*v5, (uint64_t)v5[1]);
  }
  else
  {
    a3(v10);
  }
  free(v5);
}

uint64_t specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  char v4;
  int v5;
  int v6;
  uint64_t result;
  _BOOL4 v8;

  if (*a1 != *a2)
    return 0;
  v2 = *((unsigned __int8 *)a1 + 17);
  v3 = *((unsigned __int8 *)a1 + 18);
  v4 = *((_BYTE *)a2 + 16);
  v5 = *((unsigned __int8 *)a2 + 17);
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((a1[8] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 16))
      return 0;
  }
  else
  {
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if (v2 == 2)
  {
    if (v5 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v5 == 2 || ((v5 ^ v2) & 1) != 0)
      return result;
  }
  if (v3 == 2)
  {
    if (v6 != 2)
      return 0;
  }
  else
  {
    v8 = (v3 & 1) == 0;
    if (v6 == 2 || ((v8 ^ v6) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t outlined destroy of __REAssetService?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MaterialParameters.Texture?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PhysicallyBasedMaterial.Blending(uint64_t a1, uint64_t a2)
{
  __swift_memcpy36_8(a2, a1);
  return a2;
}

void *outlined copy of PhysicallyBasedMaterial.Blending(uint64_t a1, void *a2, uint64_t a3)
{
  void *result;

  if (a3 != 1)
    return outlined copy of MaterialParameters.Texture?(a2, a3);
  return result;
}

uint64_t outlined release of PhysicallyBasedMaterial.AnisotropyAngle(uint64_t a1)
{
  outlined consume of MaterialParameters.Texture?(*(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

void outlined consume of PhysicallyBasedMaterial.SheenColor?(void *a1, void *a2, uint64_t a3)
{
  if (a1)
  {

    outlined consume of MaterialParameters.Texture?(a2, a3);
  }
}

void *outlined copy of PhysicallyBasedMaterial.SheenColor?(void *result, void *a2, uint64_t a3)
{
  id v5;

  if (result)
  {
    v5 = result;
    return outlined copy of MaterialParameters.Texture?(a2, a3);
  }
  return result;
}

void specialized PhysicallyBasedMaterial.program.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + 128) = a1;
  v3 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)v1 = v3;
  specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(_WORD *)(v1 + 104) & 0xFFFE | (*(_BYTE *)(a1 + 16) != 2), *(_QWORD *)(v1 + 112), (*(unsigned __int8 *)(v1 + 122) << 16) | (*(unsigned __int8 *)(a1 + 16) << 8) | *(unsigned __int8 *)(v1 + 120));
}

unint64_t lazy protocol witness table accessor for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicallyBasedMaterial.PBRShaderParameters, &type metadata for PhysicallyBasedMaterial.PBRShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicallyBasedMaterial.PBRShaderParameters, &type metadata for PhysicallyBasedMaterial.PBRShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicallyBasedMaterial.PBRShaderParameters, &type metadata for PhysicallyBasedMaterial.PBRShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters);
  }
  return result;
}

double sub_21BD52E08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterial.baseColor.setter);
}

double sub_21BD52E40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52E5C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.metallic.setter);
}

double sub_21BD52E78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52E94(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.roughness.setter);
}

double sub_21BD52EB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterial.emissiveColor.setter);
}

double sub_21BD52EF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52F0C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.specular.setter);
}

double sub_21BD52F28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52F44(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.clearcoat.setter);
}

double sub_21BD52F60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD52F7C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.clearcoatRoughness.setter);
}

unint64_t sub_21BD52F98@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = PhysicallyBasedMaterial.opacityThreshold.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_21BD52FC8(unsigned int *a1)
{
  PhysicallyBasedMaterial.opacityThreshold.setter(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_21BD53004@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(result + 88) & 1) == 0)
  {
    if (*(_QWORD *)(result + 80) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(result + 80);
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_21BD53024(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return PhysicallyBasedMaterial.faceCulling.setter(&v2);
}

double sub_21BD53058@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_50Tm((void (*)(_OWORD *__return_ptr))PhysicallyBasedMaterial.blending.getter, a1);
}

void sub_21BD53064(uint64_t a1)
{
  _BYTE v1[40];

  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  outlined retain of PhysicallyBasedMaterial.Blending((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PhysicallyBasedMaterial.Blending);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

double sub_21BD530A8@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_52Tm((void (*)(__int128 *__return_ptr))PhysicallyBasedMaterial.normal.getter, a1);
}

uint64_t sub_21BD530B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(void **))PhysicallyBasedMaterial.normal.setter);
}

double sub_21BD530D0@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_52Tm((void (*)(__int128 *__return_ptr))PhysicallyBasedMaterial.ambientOcclusion.getter, a1);
}

uint64_t sub_21BD530DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(void **))PhysicallyBasedMaterial.ambientOcclusion.setter);
}

double sub_21BD530F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD53114(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.anisotropyLevel.setter);
}

double sub_21BD53130@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BD5314C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.anisotropyAngle.setter);
}

double sub_21BD53168@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_50Tm((void (*)(_OWORD *__return_ptr))PhysicallyBasedMaterial.sheen.getter, a1);
}

double keypath_get_50Tm@<D0>(void (*a1)(_OWORD *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  int v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  a1(v6);
  v3 = v7;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v3;
  return result;
}

double sub_21BD531B8@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_62Tm(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_21BD531C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_52Tm(a1, a2, a3, a4, 0, (void *)0xE000000000000000);
}

double sub_21BD531D0@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_62Tm(49, (void *)0xE100000000000000, a1);
}

double keypath_get_62Tm@<D0>(uint64_t a1@<X3>, void *a2@<X4>, float32x2_t *a3@<X8>)
{
  double result;
  float32x2_t v5;
  __int32 v6;
  float32x2_t v7[2];
  __int32 v8;

  specialized Material.getUVTransform(withSuffix:)(a1, a2, v7);
  result = *(double *)v7;
  v5 = v7[1];
  v6 = v8;
  *a3 = v7[0];
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t sub_21BD53224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_52Tm(a1, a2, a3, a4, 49, (void *)0xE100000000000000);
}

uint64_t sub_21BD53230@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 136) == 1;
  return result;
}

unsigned __int8 *sub_21BD53244(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 136) = *result;
  return result;
}

uint64_t sub_21BD53250@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 144);
  return result;
}

_BYTE *sub_21BD5325C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 144) = *result;
  return result;
}

uint64_t sub_21BD53268@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 145);
  return result;
}

_BYTE *sub_21BD53274(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 145) = *result;
  return result;
}

uint64_t sub_21BD53280@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 128);
  return swift_retain();
}

uint64_t sub_21BD5328C()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized PhysicallyBasedMaterial.program.setter(v0);
  return swift_release();
}

double sub_21BD532BC@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_52Tm((void (*)(__int128 *__return_ptr))PhysicallyBasedMaterial.clearcoatNormal.getter, a1);
}

double keypath_get_52Tm@<D0>(void (*a1)(__int128 *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  double result;
  __int128 v6;
  uint64_t v7;
  int v8;

  a1(&v6);
  v3 = v7;
  v4 = v8;
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_21BD53310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(void **))PhysicallyBasedMaterial.clearcoatNormal.setter);
}

uint64_t destroy for PhysicallyBasedMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = (_OWORD *)(a1 + 40);
  v7 = a2 + 40;
  v8 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v5;
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 40, v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(v7 + 16);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v7 + 32);
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 119) = *(_DWORD *)(a2 + 119);
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    goto LABEL_8;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
LABEL_8:
  v10 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v11 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 146))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 146) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 146) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial()
{
  return &type metadata for PhysicallyBasedMaterial;
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.PBRMaterialDefinitionMapping()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.PBRShaderParameters(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 19))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 17) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 17) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.PBRShaderParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.PBRShaderParameters()
{
  return &type metadata for PhysicallyBasedMaterial.PBRShaderParameters;
}

unint64_t instantiation function for generic protocol witness table for PhysicallyBasedMaterial.PBRShaderParameters(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21BD53968()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of PhysicallyBasedMaterial.Blending(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32));
  return a1;
}

uint64_t outlined init with copy of __REAssetService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t EventSubscription.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v14[2];
  _BYTE v15[40];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  type metadata accessor for StoredEventSubscription();
  v8 = (_QWORD *)swift_allocObject();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  v9 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = type metadata accessor for AnyCancellable();
  v11 = MEMORY[0x24BDB9B58];
  v8[5] = v10;
  v8[6] = v11;
  v8[2] = v9;
  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 + 2));
  outlined init with take of BindableDataInternal(v14, (uint64_t)(v8 + 2));
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = v8;
  return result;
}

uint64_t specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>, a1);
}

uint64_t specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = (_QWORD *)(a1 + 16);
  result = swift_beginAccess();
  v18 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)v18 < a2)
  {
    if ((v18 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v18 < *(_QWORD *)(a3 + 16))
    {
      outlined init with copy of (Int, URL)(a3+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v18, (uint64_t)v15, a4);
      outlined init with take of Transform?((uint64_t)&v15[*(int *)(v12 + 48)], a6, a5);
      result = swift_beginAccess();
      if (!__OFADD__(*v16, 1))
      {
        ++*v16;
        v19 = __swift_instantiateConcreteTypeFromMangledName(a5);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a6, 0, 1, v19);
      }
      goto LABEL_10;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v20 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a6, 1, 1, v20);
}

uint64_t specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t specialized REEventDispatcher.receive(_:)(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)@<X0>(uint64_t@<X8>);
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  _DWORD v22[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(float *)&v22[15] = a1;
  v10 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 64) + 16);
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  v11 = *(_QWORD *)(v1 + 72);
  swift_retain();
  os_unfair_lock_unlock(v10);
  if (v11)
  {
    swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = 0;
      v14 = *(_QWORD *)(v12 + 16);
      v15 = (_QWORD *)swift_allocObject();
      v15[2] = v13;
      v15[3] = v14;
      v15[4] = v12;
      v16 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v15 = 0;
      v16 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineUpdateEvent, Never>>>);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v15;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineUpdateEvent, Never>>>);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v17 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  while (v19(v9, 1, v3) != 1)
  {
    outlined init with take of Transform?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v20 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v20;
}

uint64_t specialized REEventDispatcher.receive(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      v13[4] = v10;
      v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v13 = 0;
      v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityCustomActionEvent, Never>>>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityCustomActionEvent, Never>>>);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      v13[4] = v10;
      v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v13 = 0;
      v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityDecrementEvent, Never>>>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityDecrementEvent, Never>>>);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      v13[4] = v10;
      v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v13 = 0;
      v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityIncrementEvent, Never>>>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityIncrementEvent, Never>>>);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      v13[4] = v10;
      v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v13 = 0;
      v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityActivateEvent, Never>>>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityActivateEvent, Never>>>);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      v13[4] = v10;
      v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v13 = 0;
      v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityRotorNavigationEvent, Never>>>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityRotorNavigationEvent, Never>>>);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      v13[4] = v10;
      v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      v13 = 0;
      v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineRenderEvent, Never>>>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineRenderEvent, Never>>>);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(_QWORD *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

uint64_t getEventID<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  uint64_t result;
  void *v23;

  if (one-time initialization token for registeredEventsToEventBusIds != -1)
    swift_once();
  swift_beginAccess();
  v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  v5 = *((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v5)
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v7 & 1) != 0)
      goto LABEL_36;
  }
  swift_endAccess();
  if (swift_conformsToProtocol2())
    v8 = a1;
  else
    v8 = 0;
  if (v8)
  {
    v9 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
LABEL_30:
    v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
    goto LABEL_31;
  }
  if (swift_conformsToProtocol2())
    v10 = a1;
  else
    v10 = 0;
  if (v10)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v11 = a1;
  else
    v11 = 0;
  if (v11)
  {
    v9 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v12 = a1;
  else
    v12 = 0;
  if (v12)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2())
    v13 = a1;
  else
    v13 = 0;
  v14 = a2;
  if (v13)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
    goto LABEL_30;
  }
LABEL_31:
  if (v5)
  {
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if ((v16 & 1) != 0)
      return *(_QWORD *)(v4[7] + 8 * v15);
  }
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  v18 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x22076D1CC](v18 + 32);
  swift_release();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a2, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v23;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((_QWORD *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v21 & 1) != 0)
    {
LABEL_36:
      v17 = *(_QWORD *)(v4[7] + 8 * v6);
      swift_endAccess();
      return v17;
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t EventService.publish<A>(_:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2())
    v17 = a6;
  else
    v17 = 0;
  if (v17)
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v34, v18, a2, a3, a4, v18, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  }
  if (swift_conformsToProtocol2())
    v19 = a6;
  else
    v19 = 0;
  if (v19)
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v34, v20, a2, a3, a4, v20, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v21 = a6;
  else
    v21 = 0;
  if (v21)
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v34, v22, a2, a3, a4, v22, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v23 = a6;
  else
    v23 = 0;
  if (v23)
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v34, v24, a2, a3, a4, v24, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v25 = a6;
  else
    v25 = 0;
  if (v25)
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v34, v26, a2, a3, a4, v26, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  v30[0] = *(_QWORD *)(a7 + 16);
  ((void (*)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v30[0])(&v34, a6, a2, a3, a4, a6, a5, a7);
  v31 = v34;
  v32 = v35;
  v33 = v36;
  type metadata accessor for __REEventSubscriber(0, a6, v28, v29);
  v30[1] = a1;
  __REEventSubscriber.receive(_:)();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a2 + 24))
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    ((void (*)(__int128 *__return_ptr, uint64_t, __int128 *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))v30[0])(&v34, a6, &v31, 0, 0, a6, a5, a7);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v31, &demangling cache variable for type metadata for EventSource?);
    v31 = v34;
    v32 = v35;
    v33 = v36;
    __REEventSubscriber.receive(_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EventService.publisher<A>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a5 + 8))(a1, a2, 0, 0, a4, a3);
}

void *one-time initialization function for registeredEventsToEventBusIds()
{
  void *result;

  result = (void *)specialized static RegisteredEventsToEventBusIds.generateRegisteredEventsToEventBusIds()();
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = result;
  return result;
}

uint64_t BoxedSubscription.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t EventService.subscriber<A>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a5 + 16))(a1, a2, 0, 0, a4, a3);
}

uint64_t EventService.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7)
{
  return EventService.subscribe<A>(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return EventService.subscribe<A>(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(&v15, a5, a1, a2, a3, a5, a4);
  v11 = type metadata accessor for Scene.CorePublisher(0, a5, v9, v10);
  MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.CorePublisher<A>, v11);
  v12 = Publisher<>.sink(receiveValue:)();
  swift_release();
  result = type metadata accessor for AnyCancellable();
  v14 = MEMORY[0x24BDB9B58];
  a6[3] = result;
  a6[4] = v14;
  *a6 = v12;
  return result;
}

uint64_t EventService.publisher<A>(for:on:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a7 + 8))(a1, a2, 0, 0, a6, a5);
}

uint64_t REEventBus.__deallocating_deinit()
{
  REEventBusSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE v21[24];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v13 = getEventID<A>(_:)(a6, a6);
  if (a2)
  {
    v14 = specialized static __ServiceLocator.shared.getter() + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v14, (uint64_t)v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    v15 = SceneManager.componentTypeToComponentClass(_:)(a2, a3);
    if (v15)
      goto LABEL_5;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 80))(v26, a2, a3);
    if (LODWORD(v26[0]) == 36)
    {
      v15 = specialized static SceneManager.customComponentType(_:)(a2, a3);
LABEL_5:
      v16 = v15;
      swift_release();
      if (*(_QWORD *)(a1 + 24))
        goto LABEL_6;
LABEL_15:
      result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
      v19 = 0;
      goto LABEL_16;
    }
    swift_release();
  }
  v16 = 0;
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_15;
LABEL_6:
  outlined init with copy of (Int, URL)(a1, (uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
  if (!v22)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RECoreBridging);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    goto LABEL_12;
  }
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, &demangling cache variable for type metadata for RECoreBridging?);
    outlined init with copy of (Int, URL)(a1, (uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource?);
    v19 = Optional._bridgeToObjectiveC()();
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    swift_unknownObjectRelease();
    result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v23, (uint64_t)v26);
  v17 = v27;
  v18 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
LABEL_16:
  *a7 = v13;
  a7[1] = v19;
  a7[2] = v16;
  a7[3] = a4;
  a7[4] = a5;
  return result;
}

Swift::Int REEventBus.DispatcherHandle.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  Swift::UInt v3;

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    v3 = v0[2];
    if (v3)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v0[4])
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  v3 = v0[2];
  if (!v3)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (!v0[4])
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined release of REEventBus.DispatcherHandle((uint64_t)v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance REEventBus.DispatcherHandle()
{
  return REEventBus.DispatcherHandle.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance REEventBus.DispatcherHandle()
{
  Swift::UInt64 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[4];
  Hasher._combine(_:)(*v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v2)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v3)
      goto LABEL_4;
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!v2)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REEventBus.DispatcherHandle()
{
  Swift::UInt64 *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  Swift::UInt v3;
  Swift::UInt64 v4;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4)
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (!v4)
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance REEventBus.DispatcherHandle(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return specialized static REEventBus.DispatcherHandle.== infix(_:_:)(v5, v7) & 1;
}

_QWORD *REEventBus.getOrCreateDispatcher<A>(handle:of:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v4 = v3;
  v8 = a1[3];
  v7 = a1[4];
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v11 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v20);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
    }
    outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_endAccess();
  if (!*((_QWORD *)&v21 + 1))
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  type metadata accessor for REEventDispatcher(0, a3, v12, v13);
  if (!swift_dynamicCast())
  {
LABEL_11:
    v17 = type metadata accessor for REEventDispatcher(0, a3, v14, v15);
    v16 = specialized REEventDispatcher.__allocating_init(eventBus:coreHandle:sourceObject:componentType:matching:)(v4, *(_QWORD *)(v4 + 16), a1[1], a1[2], v8, v7);
    *((_QWORD *)&v21 + 1) = v17;
    *(_QWORD *)&v20 = v16;
    swift_beginAccess();
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v20, a1);
    swift_endAccess();
    return v16;
  }
  return (_QWORD *)v19;
}

uint64_t REEventBus.publisher<A>(for:on:componentType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _BYTE v11[40];
  uint64_t v12[5];

  outlined init with copy of (Int, URL)(a1, (uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v11, a2, a3, 0, 0, a4, v12);
  v9 = REEventBus.getOrCreateDispatcher<A>(handle:of:)(v12, a4, a4);
  outlined release of REEventBus.DispatcherHandle((uint64_t)v12);
  return Scene.CorePublisher.init(dispatcher:sourceObject:componentType:)((uint64_t)v9, v12[1], v12[2], a5);
}

uint64_t REEventBus.subscriber<A>(for:on:componentType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  _BYTE v11[40];
  uint64_t v12[5];

  outlined init with copy of (Int, URL)(a1, (uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v11, a2, a3, 0, 0, a4, v12);
  v9 = REEventBus.getOrCreateDispatcher<A>(handle:of:)(v12, a4, a4);
  outlined release of REEventBus.DispatcherHandle((uint64_t)v12);
  return __REEventSubscriber.init(dispatcher:sourceObject:componentType:)((uint64_t)v9, v12[1], v12[2], a5);
}

uint64_t protocol witness for EventService.publisher<A>(for:on:componentType:) in conformance REEventBus@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return REEventBus.publisher<A>(for:on:componentType:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for EventService.subscriber<A>(for:on:componentType:) in conformance REEventBus@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return REEventBus.subscriber<A>(for:on:componentType:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for EventService.publisher<A>(for:on:matching:) in conformance REEventBus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return EventService.publisher<A>(for:on:matching:)(a1, a2, a3, a4, a6, a5, a7);
}

uint64_t protocol witness for EventService.subscriber<A>(for:on:) in conformance REEventBus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventService.subscriber<A>(for:on:)(a1, a2, a4, a3, a5);
}

_QWORD *StoredEventSubscription.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_allocObject();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  v5 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v6 = type metadata accessor for AnyCancellable();
  v7 = MEMORY[0x24BDB9B58];
  v4[5] = v6;
  v4[6] = v7;
  v4[2] = v5;
  return v4;
}

uint64_t EventSubscription.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Void __swiftcall EventSubscription.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v2[4];

  v1 = *v0 + 16;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  dispatch thunk of Cancellable.cancel()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t EventSubscription.subscribe(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

_QWORD *StoredEventSubscription.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  v6 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v7 = type metadata accessor for AnyCancellable();
  v8 = MEMORY[0x24BDB9B58];
  v1[5] = v7;
  v1[6] = v8;
  v1[2] = v6;
  return v1;
}

uint64_t type metadata accessor for StoredEventSubscription()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>;
  if (!lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Empty<(), Never>);
    result = MEMORY[0x220772E3C](MEMORY[0x24BDB9E20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>);
  }
  return result;
}

uint64_t StoredEventSubscription.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t StoredEventSubscription.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized _StoredEventSubscription.__allocating_init(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t _StoredEventSubscription.init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized _StoredEventSubscription.init(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:componentType:rootEntity:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  swift_allocObject();
  v14 = specialized _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  swift_release();
  return v14;
}

uint64_t _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = specialized _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t _StoredEventSubscription.subscribe(to:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  _BYTE v11[40];
  __int128 v12[2];

  v1 = v0;
  v2 = *v0;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v1 + 8), (uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  v3 = v1[13];
  v4 = v1[14];
  v5 = v1[15];
  v6 = v1[16];
  v7 = v1[17];
  v9 = *(ValueMetadata **)(v2 + 128);
  v8 = *(_QWORD *)(v2 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v11, v3, v4, v5, v6, (uint64_t *)v12, v7, v9, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  v1 += 2;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  outlined init with take of BindableDataInternal(v12, (uint64_t)v1);
  return swift_endAccess();
}

void _StoredEventSubscription.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void _StoredEventSubscription.init()()
{
  specialized _StoredEventSubscription.init()();
}

uint64_t _StoredEventSubscription.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 64, &demangling cache variable for type metadata for EventSource?);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _StoredEventSubscription.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of BodyTrackingComponent?(v0 + 64, &demangling cache variable for type metadata for EventSource?);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _StoredEventSubscription.__deallocating_deinit()
{
  _StoredEventSubscription.deinit();
  return swift_deallocClassInstance();
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:matching:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _BYTE v14[40];

  outlined init with copy of (Int, URL)(a2, (uint64_t)v14, &demangling cache variable for type metadata for EventSource?);
  swift_allocObject();
  v12 = specialized _StoredEventSubscription.init(to:on:componentType:_:)(a1, (uint64_t)v14, 0, 0, a5, a6);
  swift_release();
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for EventSource?);
  *(_QWORD *)(v12 + 144) = a3;
  *(_QWORD *)(v12 + 152) = a4;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v8 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
  {
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : AnimationResource].Iterator._Variant();
    return swift_release();
  }
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
    goto LABEL_22;
  v5 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) == 0)
      goto LABEL_23;
    if ((v13 & 1) == 0)
      goto LABEL_9;
LABEL_11:
    while (1)
    {
      v25 = specialized LazyMapSequence.Iterator.next()();
      if (!v25)
        goto LABEL_21;
      v10 = v25;
      v11 = v26;
      while (1)
      {
        v28 = (_QWORD *)*a5;
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        v31 = v28[2];
        v32 = (v30 & 1) == 0;
        v23 = __OFADD__(v31, v32);
        v33 = v31 + v32;
        if (v23)
          break;
        v5 = v30;
        if (v28[3] < v33)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
          v29 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
          if ((v5 & 1) != (v34 & 1))
            goto LABEL_25;
        }
        if ((v5 & 1) == 0)
        {
          v35 = (_QWORD *)*a5;
          *(_QWORD *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
          v36 = 8 * v29;
          *(_QWORD *)(v35[6] + v36) = v10;
          *(_QWORD *)(v35[7] + v36) = v11;
          v37 = v35[2];
          v23 = __OFADD__(v37, 1);
          v38 = v37 + 1;
          if (v23)
            goto LABEL_20;
          v35[2] = v38;
        }
        v10 = specialized LazyMapSequence.Iterator.next()();
        v11 = v27;
        if (!v10)
          goto LABEL_21;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      specialized _NativeDictionary.copy()();
      if ((v5 & 1) == 0)
      {
LABEL_9:
        v20 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v14 >> 6) + 64) |= 1 << v14;
        v21 = 8 * v14;
        *(_QWORD *)(v20[6] + v21) = v10;
        *(_QWORD *)(v20[7] + v21) = v11;
        v22 = v20[2];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        v20[2] = v24;
      }
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v5 & 1) == (v19 & 1))
  {
    v14 = v18;
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_11;
  }
LABEL_25:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    v10(&v18, v19);
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

unint64_t specialized static RegisteredEventsToEventBusIds.generateRegisteredEventsToEventBusIds()()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v51;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ObjectIdentifier, UInt64)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE77F10;
  type metadata accessor for REEngineDoUpdateEvent(0);
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = MEMORY[0x22076D1CC]("REEngineDoUpdateEvent");
  type metadata accessor for REEngineDoRenderEvent(0);
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = MEMORY[0x22076D1CC]("REEngineDoRenderEvent");
  type metadata accessor for RESceneAnchoredStateChangedEvent(0);
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 72) = MEMORY[0x22076D1CC]("RESceneAnchoredStateChangedEvent");
  type metadata accessor for RESceneEntityDidAddEvent(0);
  *(_QWORD *)(inited + 80) = v4;
  *(_QWORD *)(inited + 88) = MEMORY[0x22076D1CC]("RESceneEntityDidAddEvent");
  type metadata accessor for RESceneEntityDidActivateEvent(0);
  *(_QWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 104) = MEMORY[0x22076D1CC]("RESceneEntityDidActivateEvent");
  type metadata accessor for RESceneEntityWillDeactivateEvent(0);
  *(_QWORD *)(inited + 112) = v6;
  *(_QWORD *)(inited + 120) = MEMORY[0x22076D1CC]("RESceneEntityWillDeactivateEvent");
  type metadata accessor for RESceneEntityWillRemoveEvent(0);
  *(_QWORD *)(inited + 128) = v7;
  *(_QWORD *)(inited + 136) = MEMORY[0x22076D1CC]("RESceneEntityWillRemoveEvent");
  type metadata accessor for RESceneEntityDidReparentEvent(0);
  *(_QWORD *)(inited + 144) = v8;
  *(_QWORD *)(inited + 152) = MEMORY[0x22076D1CC]("RESceneEntityDidReparentEvent");
  type metadata accessor for REAnimationHasCompletedEvent(0);
  *(_QWORD *)(inited + 160) = v9;
  *(_QWORD *)(inited + 168) = MEMORY[0x22076D1CC]("REAnimationHasCompletedEvent");
  type metadata accessor for REAnimationHasLoopedEvent(0);
  *(_QWORD *)(inited + 176) = v10;
  *(_QWORD *)(inited + 184) = MEMORY[0x22076D1CC]("REAnimationHasLoopedEvent");
  type metadata accessor for REAnimationHasTerminatedEvent(0);
  *(_QWORD *)(inited + 192) = v11;
  *(_QWORD *)(inited + 200) = MEMORY[0x22076D1CC]("REAnimationHasTerminatedEvent");
  type metadata accessor for REAnimationHasStartedEvent(0);
  *(_QWORD *)(inited + 208) = v12;
  *(_QWORD *)(inited + 216) = MEMORY[0x22076D1CC]("REAnimationHasStartedEvent");
  type metadata accessor for REAnimationHasTimelineEventStart(0);
  *(_QWORD *)(inited + 224) = v13;
  *(_QWORD *)(inited + 232) = MEMORY[0x22076D1CC]("REAnimationHasTimelineEventStart");
  type metadata accessor for REAnimationHasTimelineEventUpdate(0);
  *(_QWORD *)(inited + 240) = v14;
  *(_QWORD *)(inited + 248) = MEMORY[0x22076D1CC]("REAnimationHasTimelineEventUpdate");
  type metadata accessor for REAnimationHasTimelineEventEnd(0);
  *(_QWORD *)(inited + 256) = v15;
  *(_QWORD *)(inited + 264) = MEMORY[0x22076D1CC]("REAnimationHasTimelineEventEnd");
  type metadata accessor for REAnimationTimelineEventSkipped(0);
  *(_QWORD *)(inited + 272) = v16;
  *(_QWORD *)(inited + 280) = MEMORY[0x22076D1CC]("REAnimationTimelineEventSkipped");
  type metadata accessor for REAnimationTimelineEventPause(0);
  *(_QWORD *)(inited + 288) = v17;
  *(_QWORD *)(inited + 296) = MEMORY[0x22076D1CC]("REAnimationTimelineEventPause");
  type metadata accessor for REAnimationTimelineEventResume(0);
  *(_QWORD *)(inited + 304) = v18;
  *(_QWORD *)(inited + 312) = MEMORY[0x22076D1CC]("REAnimationTimelineEventResume");
  type metadata accessor for REAnimationTimelineEventTerminated(0);
  *(_QWORD *)(inited + 320) = v19;
  *(_QWORD *)(inited + 328) = MEMORY[0x22076D1CC]("REAnimationTimelineEventTerminated");
  type metadata accessor for REAnimationTimelineEventCreated(0);
  *(_QWORD *)(inited + 336) = v20;
  *(_QWORD *)(inited + 344) = MEMORY[0x22076D1CC]("REAnimationTimelineEventCreated");
  type metadata accessor for RECollisionDidStartEventEx(0);
  *(_QWORD *)(inited + 352) = v21;
  *(_QWORD *)(inited + 360) = MEMORY[0x22076D1CC]("RECollisionDidStartEventEx");
  type metadata accessor for RECollisionDidUpdateEventEx(0);
  *(_QWORD *)(inited + 368) = v22;
  *(_QWORD *)(inited + 376) = MEMORY[0x22076D1CC]("RECollisionDidUpdateEventEx");
  type metadata accessor for RECollisionDidStopEvent(0);
  *(_QWORD *)(inited + 384) = v23;
  *(_QWORD *)(inited + 392) = MEMORY[0x22076D1CC]("RECollisionDidStopEvent");
  type metadata accessor for REComponentDidAddEvent(0);
  *(_QWORD *)(inited + 400) = v24;
  *(_QWORD *)(inited + 408) = MEMORY[0x22076D1CC]("REComponentDidAddEvent");
  type metadata accessor for REComponentDidActivateEvent(0);
  *(_QWORD *)(inited + 416) = v25;
  *(_QWORD *)(inited + 424) = MEMORY[0x22076D1CC]("REComponentDidActivateEvent");
  type metadata accessor for REComponentWillDeactivateEvent(0);
  *(_QWORD *)(inited + 432) = v26;
  *(_QWORD *)(inited + 440) = MEMORY[0x22076D1CC]("REComponentWillDeactivateEvent");
  type metadata accessor for REComponentWillRemoveEvent(0);
  *(_QWORD *)(inited + 448) = v27;
  *(_QWORD *)(inited + 456) = MEMORY[0x22076D1CC]("REComponentWillRemoveEvent");
  type metadata accessor for REComponentDidChangeEvent(0);
  *(_QWORD *)(inited + 464) = v28;
  *(_QWORD *)(inited + 472) = MEMORY[0x22076D1CC]("REComponentDidChangeEvent");
  type metadata accessor for REMotionStateDidChangeEvent(0);
  *(_QWORD *)(inited + 480) = v29;
  *(_QWORD *)(inited + 488) = MEMORY[0x22076D1CC]("REMotionStateDidChangeEvent");
  type metadata accessor for REOwnershipRequestEvent(0);
  *(_QWORD *)(inited + 496) = v30;
  *(_QWORD *)(inited + 504) = MEMORY[0x22076D1CC]("REOwnershipRequestEvent");
  type metadata accessor for REOwnershipResponseEvent(0);
  *(_QWORD *)(inited + 512) = v31;
  *(_QWORD *)(inited + 520) = MEMORY[0x22076D1CC]("REOwnershipResponseEvent");
  type metadata accessor for REOwnershipChangedEvent(0);
  *(_QWORD *)(inited + 528) = v32;
  *(_QWORD *)(inited + 536) = MEMORY[0x22076D1CC]("REOwnershipChangedEvent");
  type metadata accessor for REAudioPlayerDidCompleteEvent(0);
  *(_QWORD *)(inited + 544) = v33;
  *(_QWORD *)(inited + 552) = MEMORY[0x22076D1CC]("REAudioPlayerDidCompleteEvent");
  *(_QWORD *)(inited + 560) = &type metadata for EngineRenderEvent;
  *(_QWORD *)(inited + 568) = MEMORY[0x22076D1CC]("EngineRenderEvent");
  type metadata accessor for REEntityPhysicsWillSimulateEvent(0);
  *(_QWORD *)(inited + 576) = v34;
  *(_QWORD *)(inited + 584) = MEMORY[0x22076D1CC]("REEntityPhysicsWillSimulateEvent");
  type metadata accessor for REEntityPhysicsDidSimulateEvent(0);
  *(_QWORD *)(inited + 592) = v35;
  *(_QWORD *)(inited + 600) = MEMORY[0x22076D1CC]("REEntityPhysicsDidSimulateEvent");
  type metadata accessor for REEntityForceEffectComputeForcesEvent(0);
  *(_QWORD *)(inited + 608) = v36;
  *(_QWORD *)(inited + 616) = MEMORY[0x22076D1CC]("REEntityForceEffectComputeForcesEvent");
  type metadata accessor for REAnimationSkeletalPoseUpdateCompleteEvent(0);
  *(_QWORD *)(inited + 624) = v37;
  *(_QWORD *)(inited + 632) = MEMORY[0x22076D1CC]("REAnimationSkeletalPoseUpdateCompleteEvent");
  type metadata accessor for REVideoPlayerContentTypeChangedEvent(0);
  *(_QWORD *)(inited + 640) = v38;
  *(_QWORD *)(inited + 648) = MEMORY[0x22076D1CC]("REVideoPlayerContentTypeChangedEvent");
  type metadata accessor for REVideoPlayerVideoSizeChangedEvent(0);
  *(_QWORD *)(inited + 656) = v39;
  *(_QWORD *)(inited + 664) = MEMORY[0x22076D1CC]("REVideoPlayerVideoSizeChangedEvent");
  type metadata accessor for REVideoPlayerViewingModeChangedEvent(0);
  *(_QWORD *)(inited + 672) = v40;
  *(_QWORD *)(inited + 680) = MEMORY[0x22076D1CC]("REVideoPlayerViewingModeChangedEvent");
  type metadata accessor for REVideoPlayerVideoReceiverEndpointChangedEvent(0);
  *(_QWORD *)(inited + 688) = v41;
  *(_QWORD *)(inited + 696) = MEMORY[0x22076D1CC]("REVideoPlayerVideoReceiverEndpointChangedEvent");
  v42 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  v43 = MEMORY[0x22076D1CC]("EngineUpdateEvent");
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, (uint64_t)&type metadata for EngineUpdateEvent, isUniquelyReferenced_nonNull_native);
  v45 = v42;
  swift_bridgeObjectRelease();
  v46 = swift_initStackObject();
  *(_OWORD *)(v46 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v46 + 32) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
  *(_QWORD *)(v46 + 40) = MEMORY[0x22076D1CC]("AccessibilityRotorNavigationEvent");
  *(_QWORD *)(v46 + 48) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
  *(_QWORD *)(v46 + 56) = MEMORY[0x22076D1CC]("AccessibilityActivateEvent");
  *(_QWORD *)(v46 + 64) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
  *(_QWORD *)(v46 + 72) = MEMORY[0x22076D1CC]("AccessibilityIncrementEvent");
  *(_QWORD *)(v46 + 80) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
  *(_QWORD *)(v46 + 88) = MEMORY[0x22076D1CC]("AccessibilityDecrementEvent");
  *(_QWORD *)(v46 + 96) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
  *(_QWORD *)(v46 + 104) = MEMORY[0x22076D1CC]("AccessibilityCustomActionEvent");
  v47 = specialized Dictionary.init(dictionaryLiteral:)(v46);
  swift_setDeallocating();
  v48 = swift_isUniquelyReferenced_nonNull_native();
  v51 = v45;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v47, (uint64_t)protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance __REAssetIdentifier, 0, v48, &v51);
  v49 = v51;
  swift_bridgeObjectRelease();
  return v49;
}

uint64_t specialized static REEventBus.DispatcherHandle.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2)
  {
    if (v3)
      v4 = v2 == v3;
    else
      v4 = 0;
    if (!v4)
      return 0;
  }
  else if (v3)
  {
    return 0;
  }
  v5 = a1[2];
  v6 = a2[2];
  if (!v5)
  {
    if (v6)
      return 0;
    goto LABEL_14;
  }
  v7 = 0;
  if (v6 && v5 == v6)
  {
LABEL_14:
    v8 = a1[4];
    v9 = a2[4];
    if (v8)
    {
      if (v9 && (a1[3] == a2[3] && v8 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        return 1;
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  return v7;
}

uint64_t specialized _StoredEventSubscription.init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = v6;
  v21 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 56) = a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of EventSource?(a2, v7 + 64);
  swift_endAccess();
  *(_QWORD *)(v7 + 104) = a3;
  *(_QWORD *)(v7 + 112) = a4;
  *(_QWORD *)(v7 + 120) = 0;
  swift_release();
  *(_QWORD *)(v7 + 128) = v21;
  *(_QWORD *)(v7 + 136) = a6;
  swift_retain();
  swift_release();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  v17 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v18 = type metadata accessor for AnyCancellable();
  v19 = MEMORY[0x24BDB9B58];
  *(_QWORD *)(v7 + 40) = v18;
  *(_QWORD *)(v7 + 48) = v19;
  *(_QWORD *)(v7 + 16) = v17;
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for EventSource?);
  return v7;
}

uint64_t specialized _StoredEventSubscription.__allocating_init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return specialized _StoredEventSubscription.init(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t specialized _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = v7;
  v24 = a4;
  v25 = a6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 56) = a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of EventSource?(a2, v8 + 64);
  swift_endAccess();
  v18 = v24;
  *(_QWORD *)(v8 + 104) = a3;
  *(_QWORD *)(v8 + 112) = v18;
  *(_QWORD *)(v8 + 120) = a5;
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 128) = v25;
  *(_QWORD *)(v8 + 136) = a7;
  swift_retain();
  swift_release();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  v19 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v20 = type metadata accessor for AnyCancellable();
  v21 = MEMORY[0x24BDB9B58];
  *(_QWORD *)(v8 + 40) = v20;
  *(_QWORD *)(v8 + 48) = v21;
  *(_QWORD *)(v8 + 16) = v19;
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for EventSource?);
  return v8;
}

void specialized _StoredEventSubscription.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for BoxedSubscription()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of EventService.publisher<A>(for:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of EventService.subscriber<A>(for:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of EventService.publisher<A>(for:on:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of EventService.subscriber<A>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t type metadata accessor for REEventBus()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for EventSubscription()
{
  return &type metadata for EventSubscription;
}

uint64_t method lookup function for StoredEventSubscription()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StoredEventSubscription.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for _StoredEventSubscription()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _StoredEventSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _StoredEventSubscription);
}

uint64_t method lookup function for _StoredEventSubscription()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _StoredEventSubscription.__allocating_init(to:on:componentType:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of _StoredEventSubscription.__allocating_init(to:on:componentType:rootEntity:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t destroy for REEventBus.DispatcherHandle()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for REEventBus.DispatcherHandle(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for REEventBus.DispatcherHandle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for REEventBus.DispatcherHandle(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for REEventBus.DispatcherHandle()
{
  return &type metadata for REEventBus.DispatcherHandle;
}

unint64_t lazy protocol witness table accessor for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle;
  if (!lazy protocol witness table cache variable for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for REEventBus.DispatcherHandle, &type metadata for REEventBus.DispatcherHandle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle);
  }
  return result;
}

uint64_t outlined assign with copy of EventSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BD57828()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityRotorNavigationEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityRotorNavigationEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityActivateEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityActivateEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityIncrementEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityIncrementEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityDecrementEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityDecrementEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityCustomActionEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityCustomActionEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<EngineRenderEvent, Never>>.Ticket, element: AnySubscriber<EngineRenderEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<EngineUpdateEvent, Never>>.Ticket, element: AnySubscriber<EngineUpdateEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>, a1);
}

uint64_t specialized MeshBuffer.Iterator.next()()
{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

uint64_t specialized MeshBuffer.Iterator.next()(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  if (!v1[1])
    return 0;
  v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v11 & 1) == 0)
  {
    v8 = v10;
    swift_release();
    return v8;
  }
  v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  v6 = v5;
  v7 = swift_release();
  if (!v6)
    return 0;
  *v3 = v4;
  v3[1] = v6;
  v8 = a1(v7);
  swift_release();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  if (!v1[1])
    return 0;
  v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v11 & 1) == 0)
  {
    v8 = v10;
    swift_release();
    return v8;
  }
  v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  v6 = v5;
  v7 = swift_release();
  if (!v6)
    return 0;
  *v3 = v4;
  v3[1] = v6;
  v8 = a1(v7);
  swift_release();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  __int16 v11;
  char v12;

  if (!v1[1])
    goto LABEL_5;
  v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v12 & 1) == 0)
  {
    LOWORD(v8) = v11;
    swift_release();
    v9 = 0;
    return (unsigned __int16)v8 | (v9 << 16);
  }
  v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  v6 = v5;
  v7 = swift_release();
  if (v6)
  {
    *v3 = v4;
    v3[1] = v6;
    v8 = a1(v7);
    swift_release();
    v9 = HIWORD(v8) & 1;
  }
  else
  {
LABEL_5:
    LOWORD(v8) = 0;
    v9 = 1;
  }
  return (unsigned __int16)v8 | (v9 << 16);
}

{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  char v11;
  char v12;

  if (!v1[1])
    goto LABEL_5;
  v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v12 & 1) == 0)
  {
    LOBYTE(v8) = v11;
    swift_release();
    v9 = 0;
    return v8 | (v9 << 8);
  }
  v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  v6 = v5;
  v7 = swift_release();
  if (v6)
  {
    *v3 = v4;
    v3[1] = v6;
    v8 = a1(v7);
    swift_release();
    v9 = (v8 >> 8) & 1;
  }
  else
  {
LABEL_5:
    LOBYTE(v8) = 0;
    v9 = 1;
  }
  return v8 | (v9 << 8);
}

unint64_t specialized MeshBuffer.Iterator.next()()
{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

unint64_t specialized MeshBuffer.Iterator.next()(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v11;
  char v12;

  if (!v1[1])
    goto LABEL_5;
  v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v12 & 1) == 0)
  {
    LODWORD(v8) = v11;
    swift_release();
    LOBYTE(v9) = 0;
    return v8 | ((unint64_t)v9 << 32);
  }
  v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  v6 = v5;
  v7 = swift_release();
  if (v6)
  {
    *v3 = v4;
    v3[1] = v6;
    v8 = a1(v7);
    swift_release();
    v9 = HIDWORD(v8) & 1;
  }
  else
  {
LABEL_5:
    LODWORD(v8) = 0;
    LOBYTE(v9) = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

void specialized MeshBuffer.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (!v1[1])
  {
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v9 & 1) != 0)
  {
    v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
    v6 = v5;
    v7 = swift_release();
    if (v6)
    {
      *v3 = v4;
      v3[1] = v6;
      specialized MeshBuffer.Iterator.next()(v7);
      swift_release();
      return;
    }
    goto LABEL_5;
  }
  swift_release();
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t ShapeResource.offsetBy(translation:)(__n128 a1)
{
  __n128 v1;

  v1 = a1;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    v1 = a1;
  }
  return ShapeResource.offsetBy(rotation:translation:)((__n128)static simd_quatf.identity, v1);
}

{
  unint64_t v1;
  __n128 *v2;
  unint64_t v3;

  v2[2].n128_u64[0] = v1;
  v2[1] = a1;
  type metadata accessor for MainActor();
  v2[2].n128_u64[1] = static MainActor.shared.getter();
  v2[3].n128_u64[0] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[3].n128_u64[1] = v3;
  return swift_task_switch();
}

uint64_t ShapeResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  REPoseIdentity();
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

double ShapeResource.bounds.getter()
{
  double result;

  if (!RECollisionShapeAssetGetCollisionShape())
    return 1.40444843e306;
  RECollisionShapeGetBoundingBox();
  return result;
}

uint64_t ShapeResource.init(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;

  *(_QWORD *)(v1 + 16) = a1;
  REPoseIdentity();
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = v3;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t ShapeResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t ShapeResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t ShapeResource.hash(into:)(uint64_t a1)
{
  __n128 *v1;
  __n128 *v2;
  __n128 v4;
  __n128 v5;
  __n128 v7;

  v2 = v1;
  Hasher._combine(_:)(v2[1].n128_u64[0]);
  specialized SIMD.hash(into:)(a1, v2[2]);
  specialized SIMD.hash(into:)(a1, v2[3]);
  if (RECollisionShapeAssetGetCollisionShape())
  {
    RECollisionShapeGetBoundingBox();
    v7 = v5;
  }
  else
  {
    v7 = (__n128)xmmword_21BE52470;
    v4 = (__n128)xmmword_21BE52460;
  }
  specialized SIMD.hash(into:)(a1, v4);
  return specialized SIMD.hash(into:)(a1, v7);
}

Swift::Int ShapeResource.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  ShapeResource.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ShapeResource()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  ShapeResource.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ShapeResource(uint64_t a1)
{
  return ShapeResource.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ShapeResource()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  ShapeResource.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ShapeResource(uint64_t *a1, uint64_t *a2)
{
  return specialized static ShapeResource.== infix(_:_:)(*a1, *a2);
}

uint64_t ShapeResource.offsetBy(rotation:)(__n128 a1)
{
  return ShapeResource.offsetBy(rotation:translation:)(a1, (__n128)0);
}

{
  _QWORD *v1;
  _QWORD *v2;

  v1[2] = type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  v2 = (_QWORD *)swift_task_alloc();
  v1[4] = v2;
  *v2 = v1;
  v2[1] = static MeshResource.generate(from:);
  return ShapeResource.offsetBy(rotation:translation:)(a1, (__n128)0);
}

uint64_t ShapeResource.offsetBy(rotation:translation:)(__n128 a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  float v5;
  uint64_t v6;
  BOOL v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t inited;
  __n128 v15;
  __n128 v16;

  v3 = 0;
  while (1)
  {
    v16 = a1;
    v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v4 = v5 == 0.0;
    if (v3 == 3)
      break;
    while (1)
    {
      ++v3;
      if (v4)
        break;
      if (v3 == 3)
        goto LABEL_15;
      v4 = 0;
    }
  }
  if (v5 != 0.0)
    goto LABEL_15;
  v6 = 0;
  while (1)
  {
    v15 = a2;
    v8 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v7 = v8 == 0.0;
    if (v6 == 2)
      break;
    while (1)
    {
      ++v6;
      if (v7)
        break;
      if (v6 == 2)
        goto LABEL_15;
      v7 = 0;
    }
  }
  if (v8 == 0.0)
  {
    swift_retain();
  }
  else
  {
LABEL_15:
    v9 = type metadata accessor for ShapeResource();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v2 + 16);
    swift_retain();
    REPoseMultiply();
    *(_OWORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 48) = v12;
    RERetain();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = v9;
    *(_QWORD *)(inited + 64) = &protocol witness table for ShapeResource;
    *(_QWORD *)(inited + 32) = v10;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    return v10;
  }
  return v2;
}

{
  unint64_t v2;
  __n128 *v3;
  unint64_t v4;

  v3[3].n128_u64[0] = v2;
  v3[1] = a1;
  v3[2] = a2;
  type metadata accessor for MainActor();
  v3[3].n128_u64[1] = static MainActor.shared.getter();
  v3[4].n128_u64[0] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[4].n128_u64[1] = v4;
  return swift_task_switch();
}

uint64_t ShapeResource.offsetBy(rotation:translation:)()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t (__cdecl *v15)();
  __int128 v16;

  v1 = 0;
  while (1)
  {
    v16 = *(_OWORD *)(v0 + 16);
    v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    v2 = v5 == 0.0;
    if (v1 == 3)
      break;
    while (1)
    {
      ++v1;
      if (v2)
        break;
      if (v1 == 3)
        goto LABEL_17;
      v2 = 0;
    }
  }
  if (v5 != 0.0)
    goto LABEL_17;
  v3 = 0;
  while (1)
  {
    v6 = *(float *)(v0 + 4 * (v3 & 3) + 32);
    v4 = v6 == 0.0;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v4)
        break;
      if (v3 == 2)
        goto LABEL_17;
      v4 = 0;
    }
  }
  if (v6 == 0.0)
  {
    swift_release();
    v7 = *(_QWORD *)(v0 + 48);
    v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    swift_retain();
    return v14(v7);
  }
  else
  {
LABEL_17:
    v9 = *(_QWORD *)(v0 + 48);
    type metadata accessor for ShapeResource();
    v10 = swift_allocObject();
    *(_QWORD *)(v0 + 80) = v10;
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
    swift_retain();
    REPoseMultiply();
    *(_OWORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 48) = v12;
    RERetain();
    swift_release();
    v15 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v13;
    *v13 = v0;
    v13[1] = ShapeResource.offsetBy(rotation:translation:);
    return v15();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShapeResource.offsetBy(translation:)()
{
  __n128 *v0;
  _QWORD *v1;
  __n128 v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v3 = (__n128)static simd_quatf.identity;
  v1 = (_QWORD *)swift_task_alloc();
  v0[4].n128_u64[0] = (unint64_t)v1;
  *v1 = v0;
  v1[1] = ShapeResource.offsetBy(translation:);
  return ShapeResource.offsetBy(rotation:translation:)(v3, v0[1]);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ShapeResource.offsetBy(translation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

uint64_t static ShapeResource.generateBox(size:)(__n128 a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(__n128);

  v4 = (uint64_t (*)(__n128))((char *)&async function pointer to specialized static ShapeResource.generateBox(size:)
                                      + async function pointer to specialized static ShapeResource.generateBox(size:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = static ShapeResource.generateBox(width:height:depth:);
  return v4(a1);
}

uint64_t static ShapeResource.generateBox(width:height:depth:)()
{
  return specialized static ShapeResource.generateBox(size:)();
}

uint64_t static ShapeResource.generateBox(width:height:depth:)(float a1, float a2, float a3)
{
  uint64_t v3;
  __n128 v4;
  _QWORD *v5;
  uint64_t (*v7)(__n128);
  __n128 v8;

  v4.n128_u64[0] = __PAIR64__(LODWORD(a2), LODWORD(a1));
  v4.n128_u64[1] = LODWORD(a3);
  v8 = v4;
  v7 = (uint64_t (*)(__n128))((char *)&async function pointer to specialized static ShapeResource.generateBox(size:)
                                      + async function pointer to specialized static ShapeResource.generateBox(size:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = static ShapeResource.generateBox(width:height:depth:);
  return v7(v8);
}

uint64_t static ShapeResource.generateCapsule(height:radius:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Capsule;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t inited;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v10);
  v1 = v11;
  v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  Capsule = REAssetManagerCollisionShapeAssetCreateCapsule();
  v4 = type metadata accessor for ShapeResource();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = Capsule;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = &protocol witness table for ShapeResource;
  *(_QWORD *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  RERelease();
  return v5;
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = RECapsuleShapeCreate();
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 88) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    v5 = result;
    type metadata accessor for ShapeResource();
    v6 = swift_allocObject();
    v0[12] = v6;
    *(_QWORD *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    v9 = (_QWORD *)swift_task_alloc();
    v0[13] = v9;
    *v9 = v0;
    v9[1] = static ShapeResource.generateCapsule(height:radius:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 96));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ShapeResource.generateCapsule(height:radius:)(float a1, float a2)
{
  uint64_t v2;

  *(float *)(v2 + 120) = a1;
  *(float *)(v2 + 124) = a2;
  return swift_task_switch();
}

uint64_t static ShapeResource.generateConvex(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ConvexPolyhedron;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t inited;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  v1 = v12;
  v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  ConvexPolyhedron = REAssetManagerCollisionShapeAssetCreateConvexPolyhedron();
  if (ConvexPolyhedron)
  {
    v4 = ConvexPolyhedron;
    v5 = type metadata accessor for ShapeResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = v5;
    *(_QWORD *)(inited + 64) = &protocol witness table for ShapeResource;
    *(_QWORD *)(inited + 32) = v6;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    RERelease();
    return v6;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 88) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t ConvexPolyhedronFromMesh;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t (__cdecl *v11)();

  v1 = v0[10];
  swift_release();
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)(v0 + 2));
  v3 = v0[5];
  v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (*(_QWORD *)(v1 + 16))
  {
    ConvexPolyhedronFromMesh = REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh();
    type metadata accessor for ShapeResource();
    v7 = swift_allocObject();
    v0[12] = v7;
    *(_QWORD *)(v7 + 16) = ConvexPolyhedronFromMesh;
    REPoseIdentity();
    *(_OWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 48) = v9;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    v11 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    v10 = (_QWORD *)swift_task_alloc();
    v0[13] = v10;
    *v10 = v0;
    v10[1] = static ShapeResource.generateCapsule(height:radius:);
    return v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Nullable;
  _BYTE *v3;

  Nullable = REConvexPolyhedronShapeCreateNullable();
  *(_QWORD *)(v0 + 88) = Nullable;
  if (Nullable)
  {
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 96) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  else
  {
    lazy protocol witness table accessor for type ShapeResourceError and conformance ShapeResourceError();
    swift_allocError();
    *v3 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    v5 = result;
    type metadata accessor for ShapeResource();
    v6 = swift_allocObject();
    v0[13] = v6;
    *(_QWORD *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    v9 = (_QWORD *)swift_task_alloc();
    v0[14] = v9;
    *v9 = v0;
    v9[1] = static ShapeResource.generateConvex(from:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 104));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ShapeResource.generateConvex2(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ConvexPolyhedronNullable;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v9);
  v1 = v10;
  v2 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  ConvexPolyhedronNullable = REAssetManagerCollisionShapeAssetCreateConvexPolyhedronNullable();
  if (!ConvexPolyhedronNullable)
    return 0;
  v4 = ConvexPolyhedronNullable;
  type metadata accessor for ShapeResource();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  return v5;
}

uint64_t static ShapeResource.generateConvex(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ConvexPolyhedronFromMesh;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t inited;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v12);
  v3 = v13;
  v4 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if (*(_QWORD *)(a1 + 16))
  {
    ConvexPolyhedronFromMesh = REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh();
    v6 = type metadata accessor for ShapeResource();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = ConvexPolyhedronFromMesh;
    REPoseIdentity();
    *(_OWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 48) = v9;
    RERetain();
    REAssetSetSwiftObject();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    *(_QWORD *)(inited + 56) = v6;
    *(_QWORD *)(inited + 64) = &protocol witness table for ShapeResource;
    *(_QWORD *)(inited + 32) = v7;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    RERelease();
    return v7;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_task_switch();
}

uint64_t static ShapeResource.generateSphere(radius:)(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 120) = a1;
  return swift_task_switch();
}

uint64_t static ShapeResource.generateSphere(radius:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = RESphereShapeCreate();
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 88) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    v5 = result;
    type metadata accessor for ShapeResource();
    v6 = swift_allocObject();
    v0[12] = v6;
    *(_QWORD *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    v9 = (_QWORD *)swift_task_alloc();
    v0[13] = v9;
    *v9 = v0;
    v9[1] = static ShapeResource.generateSphere(radius:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 96));
}

unint64_t ShapeResourceError.errorDescription.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD0000000000000A3;
  else
    return 0xD000000000000068;
}

BOOL static ShapeResourceError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ShapeResourceError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ShapeResourceError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ShapeResourceError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD0000000000000A3;
  else
    return 0xD000000000000068;
}

uint64_t static ShapeResource.generateStaticMesh(positions:faceIndices:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)
                                                + async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return v7(a1, a2);
}

uint64_t static ShapeResource.generateStaticMesh(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[60] = a1;
  type metadata accessor for MainActor();
  v1[61] = static MainActor.shared.getter();
  v1[62] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[63] = v2;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 536) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 544) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch();
}

uint64_t static ShapeResource.generateStaticMesh(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  __int128 *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t (*v104)(uint64_t);
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  char v111;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 456) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 464) = v2;
  v79 = *(_QWORD *)(v1 + 16);
  MeshResource.Contents.init(_:)(v79, (uint64_t *)&v104);
  v3 = *((_QWORD *)&v105 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    v73 = MEMORY[0x24BEE4AF8];
    v74 = MEMORY[0x24BEE4AF8];
    goto LABEL_44;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v91 = v0 + 16;
  v82 = (_QWORD *)(v0 + 296);
  v83 = v0 + 208;
  v81 = (__int128 *)(v0 + 336);
  v86 = (__int128 *)(v0 + 416);
  v87 = (_QWORD *)(v0 + 376);
  v84 = (uint64_t *)(v0 + 456);
  v85 = v0;
  v88 = v0 + 120;
  v89 = (uint64_t *)(v0 + 464);
  v77 = v3;
  v78 = v3 + 32;
  while (1)
  {
    if (v7 >= v4)
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_55:
      __break(1u);
LABEL_58:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    v80 = v7;
    v8 = (__int128 *)(v78 + 112 * v7);
    v9 = *v8;
    v10 = v8[2];
    *(_OWORD *)(v91 + 16) = v8[1];
    *(_OWORD *)(v91 + 32) = v10;
    v11 = v8[3];
    v12 = v8[4];
    v13 = v8[5];
    *(_BYTE *)(v91 + 96) = *((_BYTE *)v8 + 96);
    *(_OWORD *)(v91 + 64) = v12;
    *(_OWORD *)(v91 + 80) = v13;
    *(_OWORD *)(v91 + 48) = v11;
    *(_OWORD *)v91 = v9;
    v14 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    outlined retain of IKRig.Constraint(v91);
    MeshResource.Contents.init(_:)(v79, (uint64_t *)&v104);
    v17 = (uint64_t)v104;
    v16 = v105;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_58;
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v18);
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_52;
    if (v20 >= *(_QWORD *)(v17 + 16))
      goto LABEL_53;
    v90 = *(_QWORD *)(v17 + 48 * v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v90 + 16);
    if (v21)
      break;
LABEL_3:
    v7 = v80 + 1;
    swift_bridgeObjectRelease();
    outlined release of IKRig.Constraint(v91);
    v4 = *(_QWORD *)(v77 + 16);
    if (v80 + 1 == v4)
      goto LABEL_47;
  }
  v22 = 0;
  while (1)
  {
    if (v22 >= v21)
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v92 = v22;
    v23 = v90 + 32 + (v22 << 6);
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(*(_QWORD *)v23 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v25)
      goto LABEL_16;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    if ((v27 & 1) == 0)
      goto LABEL_16;
    outlined init with copy of __REAssetService(*(_QWORD *)(v24 + 56) + 40 * v26, (uint64_t)v81);
    outlined init with take of BindableDataInternal(v81, (uint64_t)v82);
    v28 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 328);
    __swift_project_boxed_opaque_existential_1(v82, v28);
    v30 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v29 + 56);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v30(&v96, v31, v28, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    v32 = v96;
    if (v96)
    {
      v33 = v103;
      v34 = v101;
      v35 = v102;
      v36 = v100;
      v37 = v99;
      v38 = v98;
      v39 = v97;
      v40 = (v101 >> 8) & 1;
    }
    else
    {
LABEL_16:
      specialized MeshBuffer.init<A>(_:)(MEMORY[0x24BEE4AF8], (uint64_t)&v104);
      v32 = (uint64_t)v104;
      v39 = v105;
      v38 = v106;
      v37 = v107;
      v36 = v108;
      v34 = v109;
      LOBYTE(v40) = HIBYTE(v109);
      v35 = v110;
      v33 = v111;
    }
    *(_QWORD *)(v0 + 120) = v32;
    *(_OWORD *)(v0 + 128) = v39;
    *(_OWORD *)(v0 + 144) = v38;
    *(_OWORD *)(v0 + 160) = v37;
    *(_QWORD *)(v0 + 176) = v36;
    *(_BYTE *)(v0 + 184) = v34;
    *(_BYTE *)(v0 + 185) = v40;
    *(_QWORD *)(v0 + 192) = v35;
    *(_BYTE *)(v0 + 200) = v33;
    outlined retain of IKRig.Constraint(v91);
    v41 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation10MeshBufferVys5SIMD3VySfGG_AKs5NeverOTB504_s10d23Kit13ShapeResourceC0A10e43E18generateStaticMesh4fromAcA0hD0C_tYaKFZs5H12VySfGAKXEfU_0D3Kit0fM0CAFE8InstanceVTf1cn_nTf4ng_n(v88, (float32x4_t *)v91);
    outlined release of IKRig.Constraint(v91);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v42 = swift_bridgeObjectRetain();
    v93 = v41;
    specialized Array.append<A>(contentsOf:)(v42);
    if (!*(_QWORD *)(v24 + 16))
      goto LABEL_54;
    v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x6972547865646E69, 0xEE0073656C676E61, 0);
    if ((v44 & 1) == 0)
      goto LABEL_54;
    v94 = v5;
    outlined init with copy of __REAssetService(*(_QWORD *)(v24 + 56) + 40 * v43, (uint64_t)v86);
    outlined init with take of BindableDataInternal(v86, (uint64_t)v87);
    v45 = *(_QWORD *)(v0 + 400);
    v46 = *(_QWORD *)(v0 + 408);
    __swift_project_boxed_opaque_existential_1(v87, v45);
    (*(void (**)(uint64_t (**__return_ptr)(uint64_t), _QWORD, uint64_t, uint64_t))(v46 + 56))(&v104, MEMORY[0x24BEE44F0], v45, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = swift_bridgeObjectRelease();
    v48 = v104;
    if (!v104)
      goto LABEL_55;
    v49 = v0;
    v50 = v105;
    v51 = v106;
    v52 = v107;
    v54 = v108;
    v53 = v109;
    v55 = v110;
    v56 = v111;
    *(_QWORD *)(v49 + 208) = v104;
    *(_OWORD *)(v49 + 216) = v50;
    *(_OWORD *)(v49 + 232) = v51;
    *(_OWORD *)(v49 + 248) = v52;
    *(_QWORD *)(v49 + 264) = v54;
    *(_BYTE *)(v49 + 272) = v53;
    *(_BYTE *)(v49 + 273) = HIBYTE(v53) & 1;
    *(_QWORD *)(v49 + 280) = v55;
    *(_BYTE *)(v49 + 288) = v56;
    v57 = v48(v47);
    if (v57)
    {
      v58 = v57;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v58 = specialized _copySequenceToContiguousArray<A>(_:)(v83, (uint64_t (*)(void))specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v48);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v48);
    v59 = *(_QWORD *)(v58 + 16);
    if (v59)
      break;
    swift_bridgeObjectRelease();
    v62 = MEMORY[0x24BEE4AF8];
    v0 = v85;
    v5 = v94;
LABEL_32:
    specialized Array.append<A>(contentsOf:)(v62);
    v66 = *(_QWORD *)(v93 + 16);
    swift_bridgeObjectRelease();
    v67 = __OFADD__(v6, v66);
    v6 += v66;
    if (v67)
      goto LABEL_49;
    v22 = v92 + 1;
    v21 = *(_QWORD *)(v90 + 16);
    if (v92 + 1 == v21)
      goto LABEL_3;
  }
  v96 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
  v60 = *(unsigned int *)(v58 + 32);
  v61 = v60 + v6;
  v0 = v85;
  v5 = v94;
  if (__OFADD__(v60, v6))
    goto LABEL_50;
  if ((v61 & 0x8000000000000000) != 0 || v61 >> 16)
    return _assertionFailure(_:_:file:line:flags:)();
  v62 = v96;
  v64 = *(_QWORD *)(v96 + 16);
  v63 = *(_QWORD *)(v96 + 24);
  if (v64 >= v63 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
    v62 = v96;
  }
  *(_QWORD *)(v62 + 16) = v64 + 1;
  *(_WORD *)(v62 + 2 * v64 + 32) = v61;
  v65 = v59 - 1;
  if (v59 == 1)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v68 = v64 + 17;
  v69 = (unsigned int *)(v58 + 36);
  while (1)
  {
    v70 = *v69++;
    v71 = v70 + v6;
    if (__OFADD__(v70, v6))
      break;
    if ((v71 & 0x8000000000000000) != 0 || v71 >> 16)
      return _assertionFailure(_:_:file:line:flags:)();
    v96 = v62;
    v72 = *(_QWORD *)(v62 + 24);
    if (v68 - 16 >= v72 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v68 - 15, 1);
      v62 = v96;
    }
    *(_QWORD *)(v62 + 16) = v68 - 15;
    *(_WORD *)(v62 + 2 * v68++) = v71;
    if (!--v65)
      goto LABEL_30;
  }
  __break(1u);
LABEL_47:
  swift_bridgeObjectRelease();
  v74 = *v89;
  v73 = *v84;
LABEL_44:
  *(_QWORD *)(v0 + 520) = v74;
  *(_QWORD *)(v0 + 512) = v73;
  v95 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)
                                                 + async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:));
  v75 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 528) = v75;
  *v75 = v0;
  v75[1] = static ShapeResource.generateStaticMesh(from:);
  return v95(v74, v73);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 544));
}

{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CollisionMesh;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t (__cdecl *v10)();

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  REAssetManagerCollisionMeshAssetCreateFromMesh();
  CollisionMesh = REAssetManagerCollisionShapeAssetCreateCollisionMesh();
  type metadata accessor for ShapeResource();
  v5 = swift_allocObject();
  v0[22] = v5;
  *(_QWORD *)(v5 + 16) = CollisionMesh;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                              + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v8 = (_QWORD *)swift_task_alloc();
  v0[23] = v8;
  *v8 = v0;
  v8[1] = static ShapeResource.generateStaticMesh(from:);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 144);
  v3 = *(void **)(v0 + 128);
  v2 = *(void **)(v0 + 136);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 176));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v0 + 144);
  v1 = *(void **)(v0 + 152);
  v3 = *(void **)(v0 + 136);

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static ShapeResource.generateStaticMesh(from:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  outlined init with copy of Any(v0[15], (uint64_t)(v0 + 7));
  type metadata accessor for ARMeshAnchor();
  swift_dynamicCast();
  v1 = (void *)v0[14];
  v0[16] = v1;
  v2 = objc_msgSend(v1, sel_geometry);
  v3 = objc_msgSend(v2, sel_faces);

  v4 = objc_msgSend(v3, sel_primitiveType);
  if (v4 != (id)1)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, sel_geometry);
  v0[17] = v5;
  v6 = objc_msgSend(v5, sel_vertices);
  v0[18] = v6;
  v7 = objc_msgSend(v5, sel_faces);
  v0[19] = v7;
  v8 = (uint64_t)objc_msgSend(v6, sel_count);
  v9 = (uint64_t)objc_msgSend(v6, sel_stride);
  if ((unsigned __int128)(v8 * (__int128)(v9 / 4)) >> 64 != (v8 * (v9 / 4)) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = objc_msgSend(v6, sel_buffer);
  objc_msgSend(v10, sel_contents);
  v11 = v10;
  objc_msgSend(v6, sel_offset);
  v12 = objc_msgSend(v7, sel_buffer);
  objc_msgSend(v12, sel_contents);
  v13 = v12;
  objc_msgSend(v6, sel_count);
  objc_msgSend(v6, sel_stride);
  v14 = (uint64_t)objc_msgSend(v7, sel_count);
  if ((unsigned __int128)(v14 * (__int128)3) >> 64 == (3 * v14) >> 63)
  {
    v0[20] = RECollisionMeshCreateWithFormatV2();
    type metadata accessor for MainActor();
    v0[21] = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_task_switch();
    return;
  }
LABEL_7:
  __break(1u);
}

void ShapeResource.__coreAsset.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void ShapeResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t ShapeResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t ShapeResource.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v9 + 32) = 0x73646E756F62;
  *(_QWORD *)(v9 + 40) = 0xE600000000000000;
  swift_retain();
  if (RECollisionShapeAssetGetCollisionShape())
  {
    RECollisionShapeGetBoundingBox();
    v16 = v10;
    v17 = v11;
  }
  else
  {
    v17 = xmmword_21BE52470;
    v16 = xmmword_21BE52460;
  }
  *(_QWORD *)(v9 + 72) = &type metadata for BoundingBox;
  v12 = swift_allocObject();
  *(_QWORD *)(v9 + 48) = v12;
  v13 = v17;
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v13;
  v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  type metadata accessor for ShapeResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ShapeResource()
{
  return ShapeResource.customMirror.getter();
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  __int128 v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  char v42[8];
  char v43[8];
  unint64_t v44;
  uint64_t v45;

  v2 = *(_OWORD *)(a1 + 16);
  v40[0] = *(_OWORD *)a1;
  v40[1] = v2;
  v41 = *(_QWORD *)(a1 + 32);
  outlined init with take of Transform?((uint64_t)v40 + 8, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  v3 = v44;
  if (v44)
  {
    outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v40, (uint64_t)v42, &demangling cache variable for type metadata for AnimationLibraryResource?);
    outlined init with take of Transform?((uint64_t)v42, (uint64_t)&v45, &demangling cache variable for type metadata for AnimationLibraryResource?);
    if (v45)
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
      v4 = AnimationLibraryResource.keyedResources.getter();
    }
    else
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
      v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    }
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 64);
  v38 = v3 + 64;
  v6 = -1 << *(_BYTE *)(v3 + 32);
  outlined retain of [String : String]((uint64_t)v43);
  result = outlined release of AnimationLibraryComponent(a1);
  v8 = 0;
  v9 = 0;
  if (-v6 < 64)
    v10 = ~(-1 << -(char)v6);
  else
    v10 = -1;
  v11 = v10 & v5;
  v39 = (unint64_t)(63 - v6) >> 6;
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
  v37 = v3;
  if ((v10 & v5) == 0)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v15 = v14 | (v9 << 6);
  while (1)
  {
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v15);
    if (v8)
    {
      swift_bridgeObjectRetain();
      result = swift_retain();
      v24 = v12;
      v25 = __OFSUB__(v8--, 1);
      if (v25)
        break;
      goto LABEL_46;
    }
    v26 = v12[3];
    if ((uint64_t)((v26 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_54;
    v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v28 = v27 <= 1 ? 1 : v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: AnimationResource)>);
    v24 = (_QWORD *)swift_allocObject();
    v29 = (uint64_t)(_swift_stdlib_malloc_size(v24) - 32) / 24;
    v24[2] = v28;
    v24[3] = 2 * v29;
    v30 = v24 + 4;
    v31 = v12[3] >> 1;
    v13 = &v24[3 * v31 + 4];
    v32 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
    if (v12[2])
    {
      if (v24 != v12 || v30 >= &v12[3 * v31 + 4])
        memmove(v30, v12 + 4, 24 * v31);
      swift_bridgeObjectRetain();
      swift_retain();
      v12[2] = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    result = swift_release();
    v3 = v37;
    v25 = __OFSUB__(v32, 1);
    v8 = v32 - 1;
    if (v25)
      break;
LABEL_46:
    *v13 = v21;
    v13[1] = v22;
    v13[2] = v23;
    v13 += 3;
    v12 = v24;
    if (v11)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_53;
    if (v16 >= v39)
      goto LABEL_48;
    v17 = *(_QWORD *)(v38 + 8 * v16);
    v18 = v9 + 1;
    if (!v17)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v39)
        goto LABEL_48;
      v17 = *(_QWORD *)(v38 + 8 * v18);
      if (!v17)
      {
        v18 = v9 + 3;
        if (v9 + 3 >= v39)
          goto LABEL_48;
        v17 = *(_QWORD *)(v38 + 8 * v18);
        if (!v17)
        {
          v18 = v9 + 4;
          if (v9 + 4 >= v39)
            goto LABEL_48;
          v17 = *(_QWORD *)(v38 + 8 * v18);
          if (!v17)
          {
            v19 = v9 + 5;
            if (v9 + 5 >= v39)
            {
LABEL_48:
              result = outlined consume of [String : AnimationResource].Iterator._Variant();
              v34 = v12[3];
              if (v34 >= 2)
              {
                v35 = v34 >> 1;
                v25 = __OFSUB__(v35, v8);
                v36 = v35 - v8;
                if (v25)
                  goto LABEL_56;
                v12[2] = v36;
              }
              return (uint64_t)v12;
            }
            v17 = *(_QWORD *)(v38 + 8 * v19);
            if (!v17)
            {
              while (1)
              {
                v18 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_55;
                if (v18 >= v39)
                  goto LABEL_48;
                v17 = *(_QWORD *)(v38 + 8 * v18);
                ++v19;
                if (v17)
                  goto LABEL_27;
              }
            }
            v18 = v9 + 5;
          }
        }
      }
    }
LABEL_27:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    v9 = v18;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  void (*v2)(_QWORD);
  uint64_t result;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = *(void (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2(0);
  result = specialized MeshBuffer.Iterator.next()();
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v5 & 1) == 0)
  {
    v6 = result;
    v7 = 0;
    v8 = (uint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v7)
      {
        v9 = v4[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1)
          v11 = 1;
        else
          v11 = v10;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
        v12 = (_QWORD *)swift_allocObject();
        v13 = _swift_stdlib_malloc_size(v12);
        v14 = v13 - 32;
        if (v13 < 32)
          v14 = v13 - 25;
        v15 = v14 >> 3;
        v12[2] = v11;
        v12[3] = 2 * (v14 >> 3);
        v16 = (unint64_t)(v12 + 4);
        v17 = v4[3] >> 1;
        if (v4[2])
        {
          if (v12 != v4 || v16 >= (unint64_t)&v4[v17 + 4])
            memmove(v12 + 4, v4 + 4, 8 * v17);
          v4[2] = 0;
        }
        v8 = (uint64_t *)(v16 + 8 * v17);
        v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        result = swift_release();
        v4 = v12;
      }
      v19 = __OFSUB__(v7--, 1);
      if (v19)
        break;
      *v8++ = v6;
      result = specialized MeshBuffer.Iterator.next()();
      v6 = result;
      if ((v20 & 1) != 0)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = 0;
LABEL_23:
  swift_release();
  result = swift_release();
  v21 = v4[3];
  if (v21 < 2)
    return (uint64_t)v4;
  v22 = v21 >> 1;
  v19 = __OFSUB__(v22, v7);
  v23 = v22 - v7;
  if (!v19)
  {
    v4[2] = v23;
    return (uint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  void (*v2)(_QWORD);
  uint64_t result;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = *(void (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2(0);
  result = specialized MeshBuffer.Iterator.next()();
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v5 & 1) == 0)
  {
    v6 = result;
    v7 = 0;
    v8 = (uint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v7)
      {
        v9 = v4[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1)
          v11 = 1;
        else
          v11 = v10;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
        v12 = (_QWORD *)swift_allocObject();
        v13 = _swift_stdlib_malloc_size(v12);
        v14 = v13 - 32;
        if (v13 < 32)
          v14 = v13 - 25;
        v15 = v14 >> 3;
        v12[2] = v11;
        v12[3] = 2 * (v14 >> 3);
        v16 = (unint64_t)(v12 + 4);
        v17 = v4[3] >> 1;
        if (v4[2])
        {
          if (v12 != v4 || v16 >= (unint64_t)&v4[v17 + 4])
            memmove(v12 + 4, v4 + 4, 8 * v17);
          v4[2] = 0;
        }
        v8 = (uint64_t *)(v16 + 8 * v17);
        v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        result = swift_release();
        v4 = v12;
      }
      v19 = __OFSUB__(v7--, 1);
      if (v19)
        break;
      *v8++ = v6;
      result = specialized MeshBuffer.Iterator.next()();
      v6 = result;
      if ((v20 & 1) != 0)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = 0;
LABEL_23:
  swift_release();
  result = swift_release();
  v21 = v4[3];
  if (v21 < 2)
    return (uint64_t)v4;
  v22 = v21 >> 1;
  v19 = __OFSUB__(v22, v7);
  v23 = v22 - v7;
  if (!v19)
  {
    v4[2] = v23;
    return (uint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, (uint64_t (*)(void))specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, (uint64_t (*)(void))specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)()
{
  uint64_t PinCount;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[5];
  _BYTE v37[96];

  swift_retain();
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass())
    PinCount = REPinComponentGetPinCount();
  else
    PinCount = 0;
  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (PinCount >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = MEMORY[0x24BEE4AF8] + 32;
    v26 = PinCount;
    while (1)
    {
      REPinComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (!result)
        goto LABEL_34;
      REPinComponentGetPinNameAtIndex();
      v6 = String.init(cString:)();
      v8 = v7;
      REPinComponentGetPinOffsetPoseAtIndex();
      v10 = v9;
      HIDWORD(v10) = HIDWORD(v28);
      v27 = v11;
      v28 = v10;
      if (REPinComponentIsSkeletalJointPinAtIndex())
      {
        REPinComponentGetSkeletalJointNameAtIndex();
        v12 = String.init(cString:)();
        v14 = v13;
        swift_weakInit();
        v32 = 0;
        v33 = 0;
        v34 = v28;
        v35 = v27;
        swift_weakAssign();
        v30 = v6;
        v31 = v8;
        swift_bridgeObjectRelease();
        v32 = v12;
        v33 = v14;
        PinCount = v26;
      }
      else
      {
        swift_weakInit();
        v32 = 0;
        v33 = 0;
        v34 = v28;
        v35 = v27;
        swift_weakAssign();
        v30 = v6;
        v31 = v8;
        swift_bridgeObjectRelease();
        v32 = 0;
        v33 = 0;
      }
      outlined init with take of GeometricPin((uint64_t)v29, (uint64_t)v36);
      result = outlined init with take of GeometricPin((uint64_t)v36, (uint64_t)v37);
      if (!v2)
      {
        v15 = v1[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_32;
        v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = v16;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeometricPin>);
        v18 = (_QWORD *)swift_allocObject();
        v19 = (uint64_t)(_swift_stdlib_malloc_size(v18) - 32) / 80;
        v18[2] = v17;
        v18[3] = 2 * v19;
        PinCount = v26;
        v20 = (unint64_t)(v18 + 4);
        v21 = v1[3] >> 1;
        if (v1[2])
        {
          if (v18 < v1 || v20 >= (unint64_t)&v1[10 * v21 + 4])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v18 != v1)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v1[2] = 0;
        }
        v4 = v20 + 80 * v21;
        v2 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        result = swift_release();
        v1 = v18;
      }
      v22 = __OFSUB__(v2--, 1);
      if (v22)
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined init with take of GeometricPin((uint64_t)v37, v4);
      v4 += 80;
      if (++v3 >= PinCount)
        goto LABEL_27;
    }
  }
  v2 = 0;
LABEL_27:
  memset(v36, 0, sizeof(v36));
  swift_release();
  result = outlined destroy of GeometricPin?((uint64_t)v36);
  v23 = v1[3];
  if (v23 < 2)
    return (uint64_t)v1;
  v24 = v23 >> 1;
  v22 = __OFSUB__(v24, v2);
  v25 = v24 - v2;
  if (!v22)
  {
    v1[2] = v25;
    return (uint64_t)v1;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v6 = *(uint64_t (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = v6(0);
  result = ((uint64_t (*)(uint64_t))a2)(v7);
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v11 & 1) == 0)
  {
    v12 = result;
    v13 = v9;
    v14 = 0;
    v15 = (uint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v14)
      {
        v16 = v10[3];
        if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        __swift_instantiateConcreteTypeFromMangledName(a3);
        v19 = (_QWORD *)swift_allocObject();
        v20 = _swift_stdlib_malloc_size(v19);
        v21 = v20 - 32;
        if (v20 < 32)
          v21 = v20 - 17;
        v22 = v21 >> 4;
        v19[2] = v18;
        v19[3] = 2 * (v21 >> 4);
        v23 = (unint64_t)(v19 + 4);
        v24 = v10[3] >> 1;
        if (v10[2])
        {
          if (v19 != v10 || v23 >= (unint64_t)&v10[2 * v24 + 4])
            memmove(v19 + 4, v10 + 4, 16 * v24);
          v10[2] = 0;
        }
        v15 = (uint64_t *)(v23 + 16 * v24);
        v14 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
        result = swift_release();
        v10 = v19;
      }
      v26 = __OFSUB__(v14--, 1);
      if (v26)
        break;
      *v15 = v12;
      v15[1] = v13;
      v15 += 2;
      result = a2();
      v12 = result;
      v13 = v27;
      if ((v28 & 1) != 0)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v14 = 0;
LABEL_23:
  swift_release();
  result = swift_release();
  v29 = v10[3];
  if (v29 < 2)
    return (uint64_t)v10;
  v30 = v29 >> 1;
  v26 = __OFSUB__(v30, v14);
  v31 = v30 - v14;
  if (!v26)
  {
    v10[2] = v31;
    return (uint64_t)v10;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v6 = *(uint64_t (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = v6(0);
  result = ((uint64_t (*)(uint64_t))a2)(v7);
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((result & 0x100000000) == 0)
  {
    v10 = result;
    v11 = 0;
    v12 = (_DWORD *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v11)
      {
        v13 = v9[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(a3);
        v16 = (_QWORD *)swift_allocObject();
        v17 = _swift_stdlib_malloc_size(v16);
        v18 = v17 - 32;
        if (v17 < 32)
          v18 = v17 - 29;
        v19 = v18 >> 2;
        v16[2] = v15;
        v16[3] = 2 * (v18 >> 2);
        v20 = (unint64_t)(v16 + 4);
        v21 = v9[3] >> 1;
        if (v9[2])
        {
          if (v16 != v9 || v20 >= (unint64_t)v9 + 4 * v21 + 32)
            memmove(v16 + 4, v9 + 4, 4 * v21);
          v9[2] = 0;
        }
        v12 = (_DWORD *)(v20 + 4 * v21);
        v11 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        result = swift_release();
        v9 = v16;
      }
      v23 = __OFSUB__(v11--, 1);
      if (v23)
        break;
      *v12++ = v10;
      result = a2();
      v10 = result;
      if ((result & 0x100000000) != 0)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v11 = 0;
LABEL_23:
  swift_release();
  result = swift_release();
  v24 = v9[3];
  if (v24 < 2)
    return (uint64_t)v9;
  v25 = v24 >> 1;
  v23 = __OFSUB__(v25, v11);
  v26 = v25 - v11;
  if (!v23)
  {
    v9[2] = v26;
    return (uint64_t)v9;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  __int16 v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *(uint64_t (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = v6(0);
  result = ((uint64_t (*)(uint64_t))a2)(v7);
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((result & 0x10000) == 0)
  {
    v10 = result;
    v11 = 0;
    v12 = (_WORD *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v11)
      {
        v13 = v9[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_29;
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(a3);
        v16 = (_QWORD *)swift_allocObject();
        v17 = _swift_stdlib_malloc_size(v16);
        if (v17 >= 32)
          v18 = v17 - 32;
        else
          v18 = v17 - 31;
        v16[2] = v15;
        v16[3] = v18 & 0xFFFFFFFFFFFFFFFELL;
        v19 = (unint64_t)(v16 + 4);
        v20 = v9[3];
        v21 = v20 >> 1;
        if (v9[2])
        {
          if (v16 != v9 || v19 >= (unint64_t)v9 + 2 * v21 + 32)
            memmove(v16 + 4, v9 + 4, v20 & 0xFFFFFFFFFFFFFFFELL);
          v9[2] = 0;
        }
        v23 = v18 >> 1;
        v12 = (_WORD *)(v19 + 2 * v21);
        v11 = v23 - v21;
        result = swift_release();
        v9 = v16;
      }
      v24 = __OFSUB__(v11--, 1);
      if (v24)
        break;
      *v12++ = v10;
      result = a2();
      v10 = result;
      if ((result & 0x10000) != 0)
        goto LABEL_24;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v11 = 0;
LABEL_24:
  swift_release();
  result = swift_release();
  v25 = v9[3];
  if (v25 < 2)
    return (uint64_t)v9;
  v26 = v25 >> 1;
  v24 = __OFSUB__(v26, v11);
  v27 = v26 - v11;
  if (!v24)
  {
    v9[2] = v27;
    return (uint64_t)v9;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  char v10;
  size_t v11;
  _BYTE *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  size_t v19;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v6 = *(uint64_t (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = v6(0);
  result = ((uint64_t (*)(uint64_t))a2)(v7);
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((result & 0x100) == 0)
  {
    v10 = result;
    v11 = 0;
    v12 = (_BYTE *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v11)
      {
        v13 = v9[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(a3);
        v16 = (_QWORD *)swift_allocObject();
        v17 = 2 * _swift_stdlib_malloc_size(v16) - 64;
        v16[2] = v15;
        v16[3] = v17;
        v18 = (unint64_t)(v16 + 4);
        v19 = v9[3] >> 1;
        if (v9[2])
        {
          if (v16 != v9 || v18 >= (unint64_t)v9 + v19 + 32)
            memmove(v16 + 4, v9 + 4, v19);
          v9[2] = 0;
        }
        v12 = (_BYTE *)(v18 + v19);
        v11 = (v17 >> 1) - v19;
        result = swift_release();
        v9 = v16;
      }
      v21 = __OFSUB__(v11--, 1);
      if (v21)
        break;
      *v12++ = v10;
      result = a2();
      v10 = result;
      if ((result & 0x100) != 0)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = 0;
LABEL_21:
  swift_release();
  result = swift_release();
  v22 = v9[3];
  if (v22 < 2)
    return (uint64_t)v9;
  v23 = v22 >> 1;
  v21 = __OFSUB__(v23, v11);
  v24 = v23 - v11;
  if (!v21)
  {
    v9[2] = v24;
    return (uint64_t)v9;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  void (*v2)(_QWORD);
  unint64_t result;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = *(void (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2(0);
  result = specialized MeshBuffer.Iterator.next()();
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((result & 0x100000000) == 0)
  {
    v5 = result;
    v6 = 0;
    v7 = (_DWORD *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if (!v6)
      {
        v8 = v4[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 29;
        v14 = v13 >> 2;
        v11[2] = v10;
        v11[3] = 2 * (v13 >> 2);
        v15 = (unint64_t)(v11 + 4);
        v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v11 != v4 || v15 >= (unint64_t)v4 + 4 * v16 + 32)
            memmove(v11 + 4, v4 + 4, 4 * v16);
          v4[2] = 0;
        }
        v7 = (_DWORD *)(v15 + 4 * v16);
        v6 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        result = swift_release();
        v4 = v11;
      }
      v18 = __OFSUB__(v6--, 1);
      if (v18)
        break;
      *v7++ = v5;
      result = specialized MeshBuffer.Iterator.next()();
      v5 = result;
      if ((result & 0x100000000) != 0)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v6 = 0;
LABEL_23:
  swift_release();
  result = swift_release();
  v19 = v4[3];
  if (v19 < 2)
    return (unint64_t)v4;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v6);
  v21 = v20 - v6;
  if (!v18)
  {
    v4[2] = v21;
    return (unint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;

  v2 = *(uint64_t (**)(_QWORD))(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v26 = 0;
  v27 = 0;
  v28 = v2;
  v29 = v3;
  v4 = v2(0);
  if (v5)
  {
    v26 = v4;
    v27 = v5;
  }
  specialized MeshBuffer.Iterator.next()((uint64_t)&v24);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v25 & 1) == 0)
  {
    v7 = 0;
    v8 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      v9 = v24;
      if (!v7)
      {
        v10 = v6[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_29;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshJointInfluence>);
        v13 = (_QWORD *)swift_allocObject();
        v14 = _swift_stdlib_malloc_size(v13);
        v15 = v14 - 32;
        if (v14 < 32)
          v15 = v14 - 25;
        v16 = v15 >> 3;
        v13[2] = v12;
        v13[3] = 2 * (v15 >> 3);
        v17 = (unint64_t)(v13 + 4);
        v18 = v6[3] >> 1;
        if (v6[2])
        {
          if (v13 != v6 || v17 >= (unint64_t)&v6[v18 + 4])
            memmove(v13 + 4, v6 + 4, 8 * v18);
          v6[2] = 0;
        }
        v8 = (_QWORD *)(v17 + 8 * v18);
        v7 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        swift_release();
        v6 = v13;
      }
      v20 = __OFSUB__(v7--, 1);
      if (v20)
        break;
      *v8++ = v9;
      specialized MeshBuffer.Iterator.next()((uint64_t)&v24);
      if ((v25 & 1) != 0)
        goto LABEL_24;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v7 = 0;
LABEL_24:
  swift_release();
  swift_release();
  v21 = v6[3];
  if (v21 >= 2)
  {
    v22 = v21 >> 1;
    v20 = __OFSUB__(v22, v7);
    v23 = v22 - v7;
    if (!v20)
    {
      v6[2] = v23;
      return;
    }
LABEL_30:
    __break(1u);
  }
}

BOOL specialized static ShapeResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  float v8;
  float v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a2 + 32);
  while (1)
  {
    v16 = v4;
    v8 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v17 = v5;
    v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v6 = v8 == v9;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v6)
        break;
      v6 = 0;
      v2 = 0;
      if (v3 == 2)
        return v2;
    }
  }
  if (v8 != v9)
    return 0;
  v10 = 0;
  v11 = *(_OWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    v14 = v11;
    v13 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
    v15 = v12;
    v2 = v13 == *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
    if (v10 == 3)
      break;
    while (1)
    {
      ++v10;
      if (v2)
        break;
      v2 = 0;
      if (v10 == 3)
        return v2;
    }
  }
  return v2;
}

uint64_t specialized static ShapeResource.generateSphere(radius:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Sphere;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t inited;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v10);
  v1 = v11;
  v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  Sphere = REAssetManagerCollisionShapeAssetCreateSphere();
  v4 = type metadata accessor for ShapeResource();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = Sphere;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = &protocol witness table for ShapeResource;
  *(_QWORD *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  RERelease();
  return v5;
}

uint64_t specialized static ShapeResource.generateBox(size:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Box;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t inited;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v10);
  v1 = v11;
  v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  Box = REAssetManagerCollisionShapeAssetCreateBox();
  v4 = type metadata accessor for ShapeResource();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = Box;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = &protocol witness table for ShapeResource;
  *(_QWORD *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  RERelease();
  return v5;
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = REBoxShapeCreate();
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 104) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  swift_release();
  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 4));
  v2 = v0[7];
  v3 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 4));
  result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    v5 = result;
    type metadata accessor for ShapeResource();
    v6 = swift_allocObject();
    v0[14] = v6;
    *(_QWORD *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    v9 = (_QWORD *)swift_task_alloc();
    v0[15] = v9;
    *v9 = v0;
    v9[1] = specialized static ShapeResource.generateBox(size:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 112));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL specialized static ShapeResource.isSingleUntransformedShape(_:)(unint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 != 1)
      return 0;
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
  {
    return 0;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    v11 = *(_OWORD *)(MEMORY[0x220769770](0, a1) + 32);
    swift_unknownObjectRelease();
    v2 = v11;
    goto LABEL_6;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return 0;
  }
  v2 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 32);
LABEL_6:
  v3 = 0;
  while (1)
  {
    v15 = v2;
    v10 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v4 = v10 == 0.0;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v4)
        break;
      v4 = 0;
      result = 0;
      if (v3 == 2)
        return result;
    }
  }
  if (v10 != 0.0)
    return 0;
  if ((a1 & 0xC000000000000001) != 0)
    v7 = MEMORY[0x220769770](0, a1);
  else
    v7 = swift_retain();
  v12 = *(_OWORD *)(v7 + 48);
  swift_release();
  if (one-time initialization token for identity != -1)
    swift_once();
  v8 = 0;
  while (1)
  {
    v13 = v12;
    v9 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
    v14 = static simd_quatf.identity;
    result = v9 == *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
    if (v8 == 3)
      break;
    while (1)
    {
      ++v8;
      if (result)
        break;
      result = 0;
      if (v8 == 3)
        return result;
    }
  }
  return result;
}

uint64_t specialized static ShapeResource.findShapeResource(_:)(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t Asset;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  float v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ChildShape;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  result = specialized static ShapeResource.isSingleUntransformedShape(_:)(a1);
  if ((result & 1) != 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
      return MEMORY[0x220769770](0, a1);
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v3 = *(_QWORD *)(a1 + 32);
      swift_retain();
      return v3;
    }
    __break(1u);
    goto LABEL_70;
  }
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v38);
  v5 = v39;
  v6 = v40;
  __swift_project_boxed_opaque_existential_1(v38, v39);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  REAssetManagerFindAssetsOfType_REKit_Only();
  result = REAssetDynamicArrayGetSize();
  if (result < 0)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  v7 = result;
  if (!result)
  {
LABEL_56:
    RERelease();
    return 0;
  }
  v8 = 0;
  v9 = a1 & 0xFFFFFFFFFFFFFF8;
  v10 = a1 & 0xC000000000000001;
  v11 = a1 >> 62;
  while (1)
  {
    if (v8 == v7)
      goto LABEL_65;
    Asset = REAssetDynamicArrayGetAsset();
    if (Asset)
      break;
LABEL_9:
    if (++v8 == v7)
      goto LABEL_56;
  }
  v13 = Asset;
  if (v11)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14 != 1)
      goto LABEL_36;
  }
  else
  {
    v14 = *(_QWORD *)(v9 + 16);
    if (v14 != 1)
      goto LABEL_36;
  }
  if (v10)
  {
    v34 = *(_OWORD *)(MEMORY[0x220769770](0, a1) + 32);
    swift_unknownObjectRelease();
    v15 = v34;
  }
  else
  {
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_66;
    v15 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 32);
  }
  v16 = 0;
  v17 = 1;
  while (1)
  {
    while (!v17)
    {
      if (v16 == 2)
        goto LABEL_36;
      v17 = 0;
      ++v16;
    }
    v37 = v15;
    v18 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16 & 3)));
    v17 = v18 == 0.0;
    if (v16 == 2)
      break;
    ++v16;
  }
  if (v18 == 0.0)
  {
    if (v10)
      v19 = MEMORY[0x220769770](0, a1);
    else
      v19 = swift_retain();
    v33 = *(_OWORD *)(v19 + 48);
    result = swift_release();
    if (one-time initialization token for identity != -1)
      result = swift_once();
    v20 = 0;
    v21 = 1;
    while (1)
    {
      while (!v21)
      {
        if (v20 == 3)
          goto LABEL_36;
        v21 = 0;
        ++v20;
      }
      v35 = v33;
      v22 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
      v36 = static simd_quatf.identity;
      v23 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
      v21 = v22 == v23;
      if (v20 == 3)
        break;
      ++v20;
    }
    if (v22 == v23)
      goto LABEL_71;
  }
LABEL_36:
  if (RECollisionShapeAssetGetType() != 7 || RECompoundShapeAssetGetChildCount() != v14)
    goto LABEL_9;
  if (v14 < 0)
    goto LABEL_67;
  if (v14)
  {
    v24 = v9;
    v25 = v11;
    v26 = 0;
    while (v14 != v26)
    {
      if (v10)
        v27 = MEMORY[0x220769770](v26, a1);
      else
        v27 = swift_retain();
      v28 = *(_QWORD *)(v27 + 16);
      swift_release();
      ChildShape = RECompoundShapeAssetGetChildShape();
      if (!ChildShape || v28 != ChildShape)
        goto LABEL_8;
      if (v10)
        MEMORY[0x220769770](v26, a1);
      else
        swift_retain();
      swift_release();
      RECompoundShapeAssetGetChildPose();
      if (!REPoseAreAlmostEqualWithDefaultTolerance())
      {
LABEL_8:
        v11 = v25;
        v9 = v24;
        goto LABEL_9;
      }
      if (v14 == ++v26)
        goto LABEL_57;
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    return MEMORY[0x220769770](0, a1);
  }
LABEL_57:
  v30 = (id)REAssetGetSwiftObject();
  type metadata accessor for ShapeResource();
  if (v30)
  {
    v3 = swift_dynamicCastClass();
    if (!v3)
      swift_unknownObjectRelease();
  }
  else
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v13;
    REPoseIdentity();
    *(_OWORD *)(v3 + 32) = v31;
    *(_OWORD *)(v3 + 48) = v32;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v3;
}

uint64_t specialized static ShapeResource.__makeShapeResource(_:)(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Compound;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  result = specialized static ShapeResource.findShapeResource(_:)(a1);
  if (result)
    return result;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v4 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  result = swift_slowAlloc();
  if ((unint64_t)(v4 - 0x400000000000000) >> 59 != 31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v5 = (_QWORD *)result;
  result = swift_slowAlloc();
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = result;
    if (v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = 0;
        v8 = (_OWORD *)(result + 16);
        do
        {
          v9 = *(_QWORD *)(MEMORY[0x220769770](v7, a1) + 16);
          swift_unknownObjectRelease();
          v5[v7] = v9;
          v10 = MEMORY[0x220769770](v7, a1);
          v23 = *(_OWORD *)(v10 + 48);
          v24 = *(_OWORD *)(v10 + 32);
          swift_unknownObjectRelease();
          *(v8 - 1) = v24;
          *v8 = v23;
          v8 += 2;
          ++v7;
        }
        while (v4 != v7);
      }
      else
      {
        v11 = (uint64_t *)(a1 + 32);
        v12 = (_OWORD *)(result + 16);
        v13 = v5;
        v14 = v4;
        do
        {
          v15 = *v11++;
          *v13++ = *(_QWORD *)(v15 + 16);
          v16 = *(_OWORD *)(v15 + 48);
          *(v12 - 1) = *(_OWORD *)(v15 + 32);
          *v12 = v16;
          v12 += 2;
          --v14;
        }
        while (v14);
      }
    }
    v17 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v17, (uint64_t)v25);
    v18 = v26;
    v19 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    Compound = REAssetManagerCollisionShapeAssetCreateCompound();
    type metadata accessor for ShapeResource();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = Compound;
    REPoseIdentity();
    *(_OWORD *)(v3 + 32) = v21;
    *(_OWORD *)(v3 + 48) = v22;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    MEMORY[0x220772F44](v6, -1, -1);
    MEMORY[0x220772F44](v5, -1, -1);
    return v3;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ShapeResource()
{
  return objc_opt_self();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation10MeshBufferVys5SIMD3VySfGG_AKs5NeverOTB504_s10d23Kit13ShapeResourceC0A10e43E18generateStaticMesh4fromAcA0hD0C_tYaKFZs5H12VySfGAKXEfU_0D3Kit0fM0CAFE8InstanceVTf1cn_nTf4ng_n(uint64_t a1, float32x4_t *a2)
{
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  char v15;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;

  v21 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = *(void (**)(_QWORD))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4(0);
  v5 = specialized MeshBuffer.Iterator.next()();
  if ((v7 & 1) == 0)
  {
    v8 = v5;
    v9 = v6;
    v19 = a2[3];
    v20 = a2[2];
    v17 = a2[5];
    v18 = a2[4];
    do
    {
      v11 = *(_QWORD *)(v21 + 16);
      v10 = *(_QWORD *)(v21 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      v12.i64[0] = v8;
      v12.i64[1] = v9;
      v13 = vaddq_f32(v17, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_f32((float32x4_t)vdupq_n_s32(v8), v20), v19, (float32x2_t)v8, 1), v18, v12, 2));
      v13.i32[3] = 0;
      *(_QWORD *)(v21 + 16) = v11 + 1;
      *(float32x4_t *)(v21 + 16 * v11 + 32) = v13;
      v8 = specialized MeshBuffer.Iterator.next()();
      v9 = v14;
    }
    while ((v15 & 1) == 0);
  }
  swift_release();
  swift_release();
  return v21;
}

