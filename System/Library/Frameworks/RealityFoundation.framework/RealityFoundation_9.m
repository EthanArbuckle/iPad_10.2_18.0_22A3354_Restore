uint64_t specialized Scene.reanchorToReplacementAnchor(for:with:frame:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  __int128 v23;
  float32x4_t v24;
  id v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  simd_float3 v40;
  simd_float3 v41;
  __int128 v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  float v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  int8x16_t v52;
  uint64_t v53;
  char **p_name;
  float32x2_t v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  id v61;
  void *v62;
  id v63;
  char *v64;
  id v65;
  char *v66;
  uint64_t v67;
  char v68;
  void (*v69)(char *, uint64_t);
  id v70;
  int v71;
  id v72;
  uint64_t v73;
  void **v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  simd_float3x3 v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x2_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  _QWORD v105[2];
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int8x16_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  simd_float3 v118;
  simd_float3 v119;
  simd_float3 v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int v124;
  __int128 v125;
  uint64_t v126;
  float32x4_t v127;
  id v128;
  int8x16_t v129;
  uint64_t v130;
  __int128 v131;
  char v132;
  void *v133;
  uint64_t v134;
  char v135;
  int v136;
  simd_float3 v137;
  simd_float3 v138;
  __int128 v139;
  id v140;
  uint64_t v141;
  char *v142;
  char *v143;
  __int128 v144;
  float32x4_t v145;
  simd_float3x3 v146;

  v133 = a3;
  v141 = type metadata accessor for UUID();
  *(_QWORD *)&v144 = *(_QWORD *)(v141 - 8);
  MEMORY[0x24BDAC7A8](v141);
  v143 = (char *)v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v142 = (char *)v105 - v11;
  v12 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (unsigned __int8 *)v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v15);
  v130 = (uint64_t)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v105 - v18;
  objc_opt_self();
  v20 = swift_dynamicCastObjCClass();
  if (!v20)
    return 0;
  v21 = (void *)v20;
  v22 = a2;
  HasAnchoring.anchoring.getter((uint64_t)v19);
  outlined init with take of __RKEntityActionSpecification((uint64_t)v19, (uint64_t)v14, type metadata accessor for AnchoringComponent.Target);
  if (swift_getEnumCaseMultiPayload() != 2)
  {

    outlined destroy of __RKEntityActionSpecification((uint64_t)v14, type metadata accessor for AnchoringComponent.Target);
    return 0;
  }
  v128 = v22;
  v136 = *v14;
  v134 = *((_QWORD *)v14 + 1);
  *(_QWORD *)&v23 = *((_QWORD *)v14 + 2);
  v131 = v23;
  *(double *)v24.i64 = HasTransform.position.getter();
  v24.i32[1] = 0;
  v129 = (int8x16_t)v24;
  v140 = v21;
  if (objc_msgSend(v140, sel_alignment))
  {
    v25 = v128;

    objc_msgSend(v140, sel_transform);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v33 = v32;
  }
  else
  {
    objc_msgSend(v140, sel_transform);
    v38 = v37;
    v38.i32[3] = 0;
    v145 = v38;
    v25 = v128;
    if (one-time initialization token for identity != -1)
    {
      v138 = (simd_float3)v35;
      v139 = (__int128)v34;
      v137 = (simd_float3)v36;
      v127 = v37;
      swift_once();
      v36 = (int8x16_t)v137;
      v35 = (int32x4_t)v138;
      v34 = (float32x4_t)v139;
    }
    v139 = static simd_quatf.identity;
    LODWORD(v39) = simd_float4x4.scale.getter(v34, v35, v36).n64_u32[0];
    *(double *)v40.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v145.i64, (float32x4_t)v139, v39);
    v137 = v41;
    v138 = v40;
    v139 = v42;
    v145 = v43;

    v33 = v145;
    v27 = (float32x4_t)v138;
    v31 = (float32x4_t)v139;
    v29 = (float32x4_t)v137;
  }
  v137 = (simd_float3)v29;
  v138 = (simd_float3)v27;
  v139 = (__int128)v31;
  v145 = v33;
  *(float32x2_t *)v44.f32 = simd_float4x4.transform(position:)((float32x4_t)v129, v27, v29, v31, v33);
  v129 = (int8x16_t)v44;
  *(double *)&v45 = simd_float4x4.transform(normal:)(*(float32x4_t *)&zmmword_21BE41220[16], v138, v137, (simd_float3)v139);
  v46 = *((float *)&v45 + 2);
  v125 = v45;
  v47 = objc_msgSend(v133, sel__hitTestFromOrigin_withDirection_types_, 32, COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v129.i8, vmul_f32(*(float32x2_t *)&v45, (float32x2_t)vdup_n_s32(0x3D4CCCCDu)))), COERCE_DOUBLE(vsub_f32(0, *(float32x2_t *)&v45)));
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARHitTestResult);
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v49)
      goto LABEL_11;
    goto LABEL_47;
  }
  v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v49)
  {
LABEL_47:

LABEL_48:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_11:
  v105[1] = a5;
  v106 = a1;
  v107 = (uint64_t)a4;
  v50 = v48 & 0xC000000000000001;
  v124 = v136 & 2;
  v127.i32[0] = v136 & 1;
  v117 = v134 & 0x10;
  v116 = v134 & 8;
  v115 = v134 & 4;
  v114 = v134 & 2;
  v126 = v134 & 1;
  v51 = *((float *)&v131 + 1);
  v52 = v129;
  v52.i32[0] = vextq_s8(v52, v52, 8uLL).u32[0];
  v113 = v52;
  v53 = 4;
  p_name = &stru_24DFECFF8.name;
  v55 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  *(_QWORD *)&v139 = v49;
  v138.i64[0] = v48 & 0xC000000000000001;
  v137.i64[0] = v48;
  while (1)
  {
    v57 = (void *)(v53 - 4);
    v58 = v50 ? (id)MEMORY[0x220769770](v53 - 4, v48) : *(id *)(v48 + 8 * v53);
    v59 = v58;
    v60 = v53 - 3;
    if (__OFADD__(v57, 1))
      break;
    v61 = objc_msgSend(v58, p_name[447]);
    if (!v61)
      goto LABEL_14;
    v57 = v61;
    objc_opt_self();
    v62 = (void *)swift_dynamicCastObjCClass();
    if (!v62)
      goto LABEL_12;
    a4 = v62;
    v145.i64[0] = (uint64_t)v59;
    v63 = objc_msgSend(v62, sel_identifier);
    v64 = v142;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v65 = objc_msgSend(v140, sel_identifier);
    v66 = v143;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type UUID and conformance UUID();
    v67 = v141;
    v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    v69 = *(void (**)(char *, uint64_t))(v144 + 8);
    v69(v66, v67);
    v69(v64, v67);
    if ((v68 & 1) != 0)
    {
      v56 = v57;
      v48 = v137.i64[0];
      v49 = v139;
      v59 = (void *)v145.i64[0];
      v50 = v138.i64[0];
      p_name = (char **)(&stru_24DFECFF8 + 8);
      goto LABEL_13;
    }
    v70 = objc_msgSend(a4, sel_alignment);
    v48 = v137.i64[0];
    v49 = v139;
    v59 = (void *)v145.i64[0];
    v50 = v138.i64[0];
    p_name = (char **)(&stru_24DFECFF8 + 8);
    if (v136 == 255)
    {
LABEL_28:
      v72 = objc_msgSend(a4, sel_classification);
      if (v134 != -1)
      {
        v73 = v126;
        switch((unint64_t)v72)
        {
          case 1uLL:
            goto LABEL_35;
          case 2uLL:
            v74 = (void **)&v132;
            goto LABEL_34;
          case 3uLL:
            v74 = &v133;
            goto LABEL_34;
          case 4uLL:
            v74 = (void **)&v134;
            goto LABEL_34;
          case 5uLL:
            v74 = (void **)&v135;
LABEL_34:
            v73 = (uint64_t)*(v74 - 32);
LABEL_35:
            if (v73)
              break;
            goto LABEL_12;
          default:
            goto LABEL_12;
        }
      }
      objc_msgSend(a4, sel_extent);
      if (*(float *)&v131 <= v75)
      {
        objc_msgSend(a4, (SEL)&protocolRef_MTLLibrary);
        if (v51 <= v76)
        {
          objc_msgSend(a4, sel_transform);
          v109 = v77;
          v110 = v78;
          v112 = v79;
          v111 = v80;
          objc_msgSend(a4, sel_center);
          v108 = v81;
          objc_msgSend(a4, sel_transform);
          v146.columns[0].i32[3] = 0;
          v146.columns[1].i32[3] = 0;
          v146.columns[2].i32[3] = 0;
          v85 = __invert_f3(v146);
          v82 = vdupq_laneq_s32((int32x4_t)v85.columns[0], 2);
          v85.columns[0].i32[3] = v119.i32[3];
          v83 = vdupq_laneq_s32((int32x4_t)v85.columns[1], 2);
          v85.columns[1].i32[3] = v118.i32[3];
          v84.i64[0] = vzip1q_s32(v82, v83).u64[0];
          v84.i64[1] = __PAIR64__(v123.u32[3], v85.columns[2].u32[2]);
          v85.columns[2].i32[3] = v120.i32[3];
          v86 = vzip1q_s32((int32x4_t)v85.columns[0], (int32x4_t)v85.columns[2]);
          v87 = (float32x4_t)vzip1q_s32((int32x4_t)v85.columns[1], (int32x4_t)0);
          v88.i64[0] = vzip1q_s32(v86, (int32x4_t)v87).u64[0];
          v89.i64[0] = vzip2q_s32(v86, (int32x4_t)v87).u64[0];
          v88.i32[2] = vdupq_lane_s32(*(int32x2_t *)(&v85 + 32), 0).i32[2];
          v88.i32[3] = v121.i32[3];
          v89.i32[2] = vdupq_lane_s32(*(int32x2_t *)(&v85 + 32), 1).i32[2];
          v89.i32[3] = v122.i32[3];
          v90 = (int8x16_t)vmlaq_f32(vaddq_f32(v89, vmulq_f32(v88, (float32x4_t)0)), (float32x4_t)0, v84);
          v87.i32[3] = HIDWORD(v125);
          *(float32x2_t *)v87.f32 = vsub_f32(*(float32x2_t *)&v125, *(float32x2_t *)v90.i8);
          v87.f32[2] = v46 - *(float *)&v90.i32[2];
          v91 = (int8x16_t)vabsq_f32(v87);
          if (*(float *)v91.i32 <= 0.1
            || (v91.i32[0] = vextq_s8(v91, v91, 8uLL).u32[0],
                *(int32x2_t *)v91.i8 = vcgt_f32(*(float32x2_t *)v91.i8, v55),
                (v91.i8[4] & 1) == 0)
            || (v91.i8[0] & 1) == 0)
          {
            v92 = vaddq_f32(v111, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v109, v108.f32[0]), v110, *(float32x2_t *)v108.f32, 1), v112, v108, 2));
            v93 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 3);
            v94 = vmuls_n_f32(vsubq_f32((float32x4_t)v129, vdivq_f32(v92, v93)).f32[0], *(float *)v90.i32);
            v92.i32[0] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
            v90.i32[0] = vextq_s8(v90, v90, 8uLL).u32[0];
            v95 = vmul_f32(vsub_f32(*(float32x2_t *)v113.i8, vdiv_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v93.f32)), *(float32x2_t *)v90.i8);
            if (fabsf(v95.f32[0] + (float)(v94 + v95.f32[1])) <= 0.05)
              goto LABEL_45;
          }
          v56 = v59;
          v59 = v57;
          v123 = v84;
          v122 = v89;
          v121 = v88;
          v119 = v85.columns[0];
          v118 = v85.columns[1];
          v120 = v85.columns[2];
          goto LABEL_13;
        }
      }
      goto LABEL_12;
    }
    v71 = v127.i32[0];
    if (v70)
    {
      if (v70 != (id)1)
        goto LABEL_12;
      v71 = v124;
    }
    if (v71)
      goto LABEL_28;
LABEL_12:
    v56 = v57;
LABEL_13:

LABEL_14:
    ++v53;
    if (v60 == v49)
    {

      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_45:
  swift_bridgeObjectRelease();
  v96 = v107;
  v97 = v106;
  *(double *)&v98 = HasTransform.position.getter();
  v144 = v98;
  v99 = v130;
  HasAnchoring.anchoring.getter(v130);
  v100 = 1;
  HasAnchoring.reanchor(_:preservingWorldTransform:)(v99, 1);
  outlined destroy of __RKEntityActionSpecification(v99, type metadata accessor for AnchoringComponent.Target);
  HasAnchoring.anchoring.getter(v99);
  specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)(v97, a4, v99, v133, 0, v96);
  outlined destroy of __RKEntityActionSpecification(v99, type metadata accessor for AnchoringComponent);
  v101.n128_f64[0] = HasTransform.transform.getter();
  v102.n128_u32[1] = DWORD1(v144);
  HasTransform.transform.setter(v101, v103, v102);

  return v100;
}

uint64_t partial apply for closure #1 in Scene.matchingAnchor(for:frame:)(id *a1)
{
  return closure #1 in Scene.matchingAnchor(for:frame:)(a1) & 1;
}

uint64_t __RKStartTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t __RKStartTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_DWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t type metadata accessor for __RKStartTrigger()
{
  return objc_opt_self();
}

uint64_t __RKStartTrigger.matches(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;

  type metadata accessor for __RKStartTrigger();
  if (swift_dynamicCastClass() && *(_BYTE *)(v0 + 19) != 1)
    return 1;
  type metadata accessor for __RKEntityTriggerGroup();
  v1 = swift_dynamicCastClass();
  if (!v1)
    return 0;
  v2 = v1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 >> 62)
  {
LABEL_37:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (!result)
      goto LABEL_15;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_15:
      swift_release();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  v6 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    v7 = MEMORY[0x220769770](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v7 = *(_QWORD *)(v3 + 32);
    swift_retain();
  }
  v8 = __RKStartTrigger.matches(with:)(v7);
  result = swift_release();
  if ((v8 & 1) != 0)
  {
LABEL_10:
    v4 = 1;
    goto LABEL_15;
  }
  if (v4 == 1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  if (!v6)
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v9 = *(_QWORD *)(v3 + 40);
      swift_retain();
      goto LABEL_21;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v9 = MEMORY[0x220769770](1, v3);
LABEL_21:
  v10 = __RKStartTrigger.matches(with:)(v9);
  result = swift_release();
  if ((v10 & 1) != 0)
    goto LABEL_10;
  if (v4 == 2)
    goto LABEL_14;
  if (v6)
  {
    v11 = MEMORY[0x220769770](2, v3);
    goto LABEL_27;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
  {
    v11 = *(_QWORD *)(v3 + 48);
    swift_retain();
LABEL_27:
    v12 = __RKStartTrigger.matches(with:)(v11);
    result = swift_release();
    if ((v12 & 1) == 0)
    {
      v13 = 0;
      v14 = v4 - 3;
      while (1)
      {
        v4 = v14 != v13;
        if (v14 == v13)
          goto LABEL_15;
        v17 = v13 + 3;
        if (v6)
        {
          v15 = MEMORY[0x220769770](v13 + 3, v3);
          if (__OFADD__(v17, 1))
            goto LABEL_36;
        }
        else
        {
          if (v17 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_41;
          v15 = *(_QWORD *)(v3 + 8 * v13 + 56);
          swift_retain();
          if (__OFADD__(v17, 1))
          {
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
        }
        v16 = __RKStartTrigger.matches(with:)(v15);
        result = swift_release();
        ++v13;
        if ((v16 & 1) != 0)
          goto LABEL_15;
      }
    }
    goto LABEL_10;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t __RKStartTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKStartTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t method lookup function for __RKStartTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t static MeshResource.fromCore(_:)(uint64_t a1)
{
  uint64_t v2;

  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for MeshResource();
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = a1;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t __MeshCompileOptions.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = REMeshCompileOptionsCreate();
  return v0;
}

uint64_t __MeshCompileOptions.coreOptions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t type metadata accessor for MeshResource()
{
  return objc_opt_self();
}

uint64_t MeshResource.expectedMaterialCount.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t MaxMaterialIndex;
  BOOL v3;

  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    MaxMaterialIndex = REMeshAssetGetMaxMaterialIndex();
    v3 = __OFADD__(MaxMaterialIndex, 1);
    result = MaxMaterialIndex + 1;
    if (v3)
      __break(1u);
  }
  return result;
}

double MeshResource.bounds.getter()
{
  uint64_t v0;
  double result;

  if (!*(_QWORD *)(v0 + 16))
    return 1.40444843e306;
  REEntityComputeLocalBoundingBox();
  return result;
}

uint64_t MeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t MeshResource.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v1;
}

uint64_t MeshResource.deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return v0;
}

uint64_t MeshResource.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return swift_deallocClassInstance();
}

uint64_t static MeshResource.__load(named:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssetHandle;
  void *FailedMessage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v15);
  v5 = v16;
  v6 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (AssetHandle)
  {
    REAssetHandleLoadNow();
    if ((REAssetHandleLoadFailed() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      swift_allocError();
      *(_QWORD *)v12 = a1;
      *(_QWORD *)(v12 + 8) = a2;
      *(_QWORD *)(v12 + 16) = v9;
      *(_QWORD *)(v12 + 24) = v11;
      *(_BYTE *)(v12 + 32) = 1;
      swift_willThrow();
      return a2;
    }
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      v13 = swift_dynamicCastClass();
      if (v13)
        return v13;
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    a2 = swift_allocObject();
    *(_QWORD *)(a2 + 16) = AssetHandle;
    RERetain();
    REAssetSetSwiftObject();
    return a2;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)(float a1, float a2)
{
  return specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(0, a1, a1, a1, a2);
}

{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(char, float, float, float, float);

  v7 = (uint64_t (*)(char, float, float, float, float))((char *)&async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)
                                                                + async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return v7(0, a1, a1, a1, a2);
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)(__n128 a1, float a2)
{
  return specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(0, a1.n128_f32[0], a1.n128_f32[1], a1.n128_f32[2], a2);
}

{
  uint64_t v2;
  float v4;
  float v5;
  _QWORD *v6;
  float v8;
  uint64_t (*v9)(char, float, float, float, float);

  v8 = a1.n128_f32[0];
  v4 = a1.n128_f32[1];
  v5 = a1.n128_f32[2];
  v9 = (uint64_t (*)(char, float, float, float, float))((char *)&async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)
                                                                + async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = static ShapeResource.generateBox(width:height:depth:);
  return v9(0, v8, v4, v5, a2);
}

uint64_t static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(char a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(char, float, float, float, float);

  v13 = (uint64_t (*)(char, float, float, float, float))((char *)&async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)
                                                                 + async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = static ShapeResource.generateBox(width:height:depth:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t static MeshResource.generateBoxWithRoundedCorners(width:height:depth:majorRadius:minorRadius:splitFaces:)(char a1, float a2, float a3, float a4, float a5, float a6)
{
  float v11;
  float v12;
  __int16 v13;
  float v14;
  float v15;
  _BOOL4 v16;
  unsigned int v17;
  int8x8_t v19;
  __int16 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  char v26;

  v11 = a2;
  if (a4 < a2)
    a2 = a4;
  if (a2 >= a3)
    a2 = a3;
  v12 = a2 * 0.5;
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  v13 = v20;
  if (v12 >= a5)
    v14 = a5;
  else
    v14 = v12;
  if (v12 >= a6)
    v15 = a6;
  else
    v15 = v12;
  v16 = v14 > 0.0;
  if (v15 > 0.0)
    v16 = 1;
  if (v16)
  {
    v13 = 12;
    v17 = -1;
  }
  else
  {
    v17 = 0;
  }
  v19 = vbsl_s8((int8x8_t)vdup_n_s16(v17), (int8x8_t)0x10000200020002, v19);
  v20 = v13;
  v21 = v14;
  v22 = v15;
  v23 = v11;
  v24 = a3;
  v25 = a4;
  v26 = a1 ^ 1;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v19, a1);
}

uint64_t static MeshResource.generatePlane(width:height:cornerRadius:)(float a1, float a2, float a3)
{
  __int16 v6;
  uint64_t v7;
  uint64_t inited;
  int v10;
  __int16 v11;
  float v12;
  float v13;
  float v14;
  int v15;

  REGeomBuildPlaneDefaultOptions();
  v6 = v11;
  if (a3 > 0.0)
    v6 = 16;
  v11 = v6;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = 4;
  v7 = specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v10, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for MeshResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for MeshResource;
  *(_QWORD *)(inited + 32) = v7;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v7;
}

{
  float *v3;

  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  return swift_task_switch();
}

uint64_t static MeshResource.generatePlane(width:depth:cornerRadius:)(float a1, float a2, float a3)
{
  __int16 v6;
  uint64_t v7;
  uint64_t inited;
  int v10;
  __int16 v11;
  float v12;
  float v13;
  float v14;
  int v15;

  REGeomBuildPlaneDefaultOptions();
  v6 = v11;
  if (a3 > 0.0)
    v6 = 16;
  v11 = v6;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = 2;
  v7 = specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v10, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for MeshResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for MeshResource;
  *(_QWORD *)(inited + 32) = v7;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v7;
}

{
  float *v3;

  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  return swift_task_switch();
}

uint64_t static MeshResource.generatePlane(width:height:cornerRadius:)()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  __int16 v3;
  int v5;
  __int16 v6;
  char v7;
  char v8;

  v1 = *(float *)(v0 + 84);
  v2 = *(_QWORD *)(v0 + 76);
  REGeomBuildPlaneDefaultOptions();
  v3 = v6;
  if (v1 > 0.0)
    v3 = 16;
  *(_DWORD *)(v0 + 48) = v5;
  *(_WORD *)(v0 + 52) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(float *)(v0 + 64) = v1;
  *(_BYTE *)(v0 + 68) = v7;
  *(_BYTE *)(v0 + 69) = v8;
  *(_DWORD *)(v0 + 72) = 4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  swift_release();
  *(_QWORD *)(v0 + 24) = specialized PrimitiveComponentType.init(options:splitMeshes:)(v0 + 48, 0);
  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = static MeshResource.generatePlane(width:height:cornerRadius:);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 24));
}

uint64_t static MeshResource.generatePlane(width:depth:cornerRadius:)()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  __int16 v3;
  int v5;
  __int16 v6;
  char v7;
  char v8;

  v1 = *(float *)(v0 + 84);
  v2 = *(_QWORD *)(v0 + 76);
  REGeomBuildPlaneDefaultOptions();
  v3 = v6;
  if (v1 > 0.0)
    v3 = 16;
  *(_DWORD *)(v0 + 48) = v5;
  *(_WORD *)(v0 + 52) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(float *)(v0 + 64) = v1;
  *(_BYTE *)(v0 + 68) = v7;
  *(_BYTE *)(v0 + 69) = v8;
  *(_DWORD *)(v0 + 72) = 2;
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  swift_release();
  *(_QWORD *)(v0 + 24) = specialized PrimitiveComponentType.init(options:splitMeshes:)(v0 + 48, 0);
  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = static MeshResource.generatePlane(width:depth:cornerRadius:);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 24));
}

uint64_t static MeshResource.__generatePlane(width:widthSegmentCount:depth:depthSegmentCount:cornerRadius:cornerSegmentCount:addUVs:addNormals:)(unint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5, float a6, float a7, float a8)
{
  __int16 v16;
  uint64_t result;
  _WORD v18[4];
  float v19;
  float v20;
  float v21;
  char v22;
  char v23;
  int v24;

  REGeomBuildPlaneDefaultOptions();
  if (a1 >= 0x10000 || a2 >= 0x10000 || a3 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v18[0] = a1;
    if (a8 <= 0.0)
      v16 = a3;
    else
      v16 = 16;
    v18[1] = a2;
    v18[2] = v16;
    v19 = a6;
    v20 = a7;
    v21 = a8;
    v22 = a4 & 1;
    v23 = a5 & 1;
    v24 = 2;
    return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)v18, 0);
  }
  return result;
}

uint64_t static MeshResource.__generateOccluderPlane(width:depth:cornerRadius:)(float a1, float a2, float a3)
{
  __int16 v6;
  int v8;
  __int16 v9;
  float v10;
  float v11;
  float v12;
  int v13;

  REGeomBuildPlaneDefaultOptions();
  v6 = v9;
  if (a3 > 0.0)
    v6 = 16;
  v9 = v6;
  v10 = a1;
  v11 = a2;
  v12 = a3;
  v13 = 2;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v8, 0);
}

uint64_t static MeshResource.generateSphere(radius:)(float a1)
{
  int v2;
  uint64_t v3;
  uint64_t inited;

  REGeomBuildSphereDefaultOptions();
  v3 = specialized PrimitiveComponentType.init(options:splitMeshes:)(64, v2 & 0x10101, 0, a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for MeshResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for MeshResource;
  *(_QWORD *)(inited + 32) = v3;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v3;
}

{
  uint64_t v1;

  *(float *)(v1 + 80) = a1;
  return swift_task_switch();
}

uint64_t static MeshResource.generateSphere(radius:segmentCount:)(__int16 a1, float a2)
{
  int v4;
  uint64_t v5;
  uint64_t inited;

  REGeomBuildSphereDefaultOptions();
  v5 = specialized PrimitiveComponentType.init(options:splitMeshes:)(a1, v4 & 0x10101, 0, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for MeshResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for MeshResource;
  *(_QWORD *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v5;
}

uint64_t static MeshResource.generateSphere(radius:)()
{
  _QWORD *v0;
  uint64_t v1;

  REGeomBuildSphereDefaultOptions();
  v0[2] = v1;
  v0[3] = type metadata accessor for MainActor();
  v0[4] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  float v2;
  _QWORD *v3;
  uint64_t (__cdecl *v5)();

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(float *)(v0 + 80);
  swift_release();
  *(_QWORD *)(v0 + 56) = specialized PrimitiveComponentType.init(options:splitMeshes:)(64, v1 & 0x10101, 0, v2);
  v5 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = static MeshResource.generateSphere(radius:);
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 56));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static MeshResource.generateCapsule(height:radius:)(float a1, float a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v8;
  unsigned __int8 v9;
  char v10;
  char v11;

  REGeomBuildCapsuleDefaultOptions();
  if (v10)
    v4 = 256;
  else
    v4 = 0;
  v5 = v4 | v9;
  if (v11)
    v6 = 0x10000;
  else
    v6 = 0;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)(((unint64_t)v8 << 16) | 0x40, v5 | v6, 0, a2, a1);
}

uint64_t static MeshResource.generateBox(size:majorCornerRadius:minorCornerRadius:)(__n128 a1, float a2, float a3)
{
  float v5;
  float v6;
  float v7;
  __int16 v8;
  float v9;
  float v10;
  _BOOL4 v11;
  unsigned int v12;
  int8x8_t v15;
  __int16 v16;
  float v17;
  float v18;
  unint64_t v19;
  unsigned __int32 v20;
  char v21;

  v5 = a1.n128_f32[2];
  if (a1.n128_f32[2] >= a1.n128_f32[0])
    v5 = a1.n128_f32[0];
  if (v5 >= a1.n128_f32[1])
    v6 = a1.n128_f32[1];
  else
    v6 = v5;
  v7 = v6 * 0.5;
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  v8 = v16;
  if (v7 >= a2)
    v9 = a2;
  else
    v9 = v7;
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  v11 = v9 > 0.0;
  if (v10 > 0.0)
    v11 = 1;
  if (v11)
  {
    v8 = 12;
    v12 = -1;
  }
  else
  {
    v12 = 0;
  }
  v15 = vbsl_s8((int8x8_t)vdup_n_s16(v12), (int8x8_t)0x10000200020002, v15);
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v19 = a1.n128_u64[0];
  v20 = a1.n128_u32[2];
  v21 = 1;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v15, 0);
}

uint64_t static MeshResource.generateCone(height:radius:)(float a1, float a2)
{
  int v4;
  int v5;

  v4 = REGeomBuildConeDefaultOptions();
  return specialized PrimitiveComponentType.init(options:splitMeshes:)(v4 & 0xFFFF0000 | 0x40, v5 & 0x1010101, 0, a1, a2);
}

uint64_t static MeshResource.generateCylinder(height:radius:)(float a1, float a2)
{
  __int16 v5;
  float v6;
  float v7;
  float v8;

  REGeomBuildCylinderDefaultOptions();
  v5 = 64;
  v6 = a1;
  v7 = a2;
  v8 = a2;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v5, 0);
}

uint64_t MeshDescriptor.init(convexPolyhedronShape:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t PositionCount;
  unint64_t MeshTriangleIndices;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE v15[88];

  result = RECollisionShapeGetType();
  if ((_DWORD)result == 5)
  {
    PositionCount = REConvexPolyhedronShapeGetPositionCount();
    MeshTriangleIndices = REConvexPolyhedronShapeExtractMeshTriangleIndices();
    v5 = (_QWORD *)specialized Array.init(repeating:count:)(PositionCount, (__n128)0);
    v6 = specialized Array.init(repeating:count:)(0, MeshTriangleIndices);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2], 0, v5);
    REConvexPolyhedronShapeExtractPositions();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16), 0, (char *)v6);
    REConvexPolyhedronShapeExtractMeshTriangleIndices();
    v7 = MEMORY[0x24BEE4AF8];
    v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    specialized MeshBuffer.init<A>(_:)((uint64_t)v5, (uint64_t)v15);
    swift_bridgeObjectRetain();
    specialized MeshBufferContainer.positions.setter((uint64_t)v15);
    outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v15);
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
      v9 = 0;
      v10 = v7;
      v11 = *(_QWORD *)(v7 + 16);
      do
      {
        v12 = *(unsigned __int16 *)(v6 + 2 * v9 + 32);
        v13 = *(_QWORD *)(v7 + 24);
        if (v11 >= v13 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v11 + 1, 1);
        ++v9;
        *(_QWORD *)(v7 + 16) = v11 + 1;
        *(_DWORD *)(v7 + 4 * v11++ + 32) = v12;
      }
      while (v8 != v9);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v10 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0xE000000000000000;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_QWORD *)(a1 + 96) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MeshDescriptor.init(staticMeshShape:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t VertexCount;
  unint64_t IndexCount;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[88];

  result = RECollisionShapeGetType();
  if ((_DWORD)result == 12)
  {
    RECollisionMeshShapeGetMesh();
    VertexCount = RECollisionMeshGetVertexCount();
    IndexCount = RECollisionMeshGetIndexCount();
    v5 = (_QWORD *)specialized Array.init(repeating:count:)(VertexCount, (__n128)0);
    v6 = specialized Array.init(repeating:count:)(0, IndexCount);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2], 0, v5);
    RECollisionMeshExtractVertexPositions();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16), 0, (char *)v6);
    RECollisionMeshExtractIndices();
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0xE000000000000000;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = -1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_QWORD *)(a1 + 96) = 0;
    specialized MeshBuffer.init<A>(_:)((uint64_t)v5, (uint64_t)v8);
    specialized MeshBufferContainer.positions.setter((uint64_t)v8);
    result = outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v8);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL REPoseF.isIdentity.getter(float32x2_t a1, float a2, float32x4_t a3)
{
  float32x4_t v4;
  float v5;

  if (sqrtf((float)(a2 * a2) + vaddv_f32(vmul_f32(a1, a1))) > 0.00001)
    return 0;
  v4 = vmulq_f32(a3, a3);
  v5 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]), a3.f32[3]);
  return fabsf(v5 + v5) <= 0.00001;
}

uint64_t MeshResource.Contents.offsetBy(pose:)@<X0>(uint64_t a1@<X8>, float32x2_t a2@<D0>, float a3@<S1>, float32x4_t a4@<Q2>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t (*v43)();
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  unint64_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  _OWORD *v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  _UNKNOWN **v128;
  void (*v129)(__int128 *__return_ptr, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  _UNKNOWN **v138;
  void (*v139)(__int128 *__return_ptr, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  unint64_t v157;
  float32x4_t v158;
  int32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  unint64_t v175;
  float32x4_t v176;
  int32x4_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  __int128 v189;
  _QWORD *v190;
  char v191;
  uint64_t v192;
  __n128 v193;
  uint64_t v194;
  _OWORD *v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  _UNKNOWN **v203;
  void (*v204)(__int128 *__return_ptr, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  char v217;
  __int128 v218;
  _QWORD *v219;
  char v220;
  uint64_t v221;
  __n128 v222;
  uint64_t v223;
  _OWORD *v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  int64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  unint64_t v241;
  float32x4_t v242;
  int32x4_t v243;
  int8x16_t v244;
  float32x4_t v245;
  float32x4_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  char v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  char v254;
  float32x4_t v255;
  _QWORD *v256;
  char v257;
  uint64_t v258;
  __n128 v259;
  uint64_t v260;
  _OWORD *v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  char v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  __int128 *v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t result;
  _QWORD *v283;
  _QWORD v284[2];
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  __int128 v296;
  __int128 v297;
  int32x4_t v298;
  int32x4_t v299;
  float32x4_t v300;
  int8x16_t v301;
  int8x16_t v302;
  float32x4_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  float32x4_t v314;
  uint64_t v315;
  float32x4_t v316;
  float32x4_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  uint64_t v322;
  _UNKNOWN **v323;
  __int128 v324;
  uint64_t v325;
  _UNKNOWN **v326;
  _QWORD *v327;
  __int128 v328[4];
  __int128 v329;
  unsigned __int8 v330;
  char v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339[3];
  __int128 v340[2];
  _OWORD v341[2];
  _OWORD v342[6];
  _OWORD v343[2];
  _OWORD v344[4];
  __int16 v345;
  uint64_t v346;
  unsigned __int8 v347;
  _OWORD v348[6];
  _OWORD v349[2];
  _OWORD v350[4];
  __int16 v351;
  uint64_t v352;
  unsigned __int8 v353;
  _OWORD v354[6];
  _OWORD v355[2];
  _OWORD v356[4];
  __int16 v357;
  uint64_t v358;
  unsigned __int8 v359;
  _QWORD v360[8];
  char v361;
  char v362;
  uint64_t v363;
  __int8 v364;

  v303 = a4;
  v284[0] = a1;
  v7 = v4[1];
  v9 = v4[2];
  v10 = v4[3];
  v11 = v4[4];
  v12 = v4[5];
  v333 = *v4;
  v8 = v333;
  v334 = v7;
  v335 = v9;
  v336 = v10;
  v337 = v11;
  v338 = v12;
  swift_bridgeObjectRetain();
  v13 = *(_QWORD *)(v333 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v13)
  {
    result = swift_bridgeObjectRelease();
LABEL_117:
    v283 = (_QWORD *)v284[0];
    *(_QWORD *)v284[0] = v8;
    v283[1] = v7;
    v283[2] = v9;
    v283[3] = v10;
    v283[4] = v11;
    v283[5] = v12;
    return result;
  }
  v14 = 0;
  v286 = v333 + 32;
  v15 = vmulq_f32(v303, (float32x4_t)xmmword_21BE516F0);
  v16 = (int32x4_t)vnegq_f32(v15);
  v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v16));
  v18 = vrev64q_s32((int32x4_t)v15);
  v18.i32[0] = v16.i32[1];
  v18.i32[3] = v16.i32[2];
  v19 = *(_QWORD *)(v333 + 16);
  v284[1] = &v319;
  v285 = v333;
  v301 = vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL);
  v302 = vextq_s8(v17, v17, 8uLL);
  v299 = vdupq_lane_s32(*(int32x2_t *)v303.f32, 0);
  v300 = (float32x4_t)v18;
  v298 = vdupq_laneq_s32((int32x4_t)v303, 2);
  while (1)
  {
    if (v14 >= v19)
      goto LABEL_121;
    v287 = v14;
    v21 = (uint64_t *)(v286 + 48 * v14);
    v22 = *v21;
    v291 = v21[1];
    v292 = v22;
    v23 = v21[2];
    v24 = v21[3];
    v25 = v21[4];
    v26 = v21[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = *(_QWORD *)(v23 + 16);
    v289 = v25;
    swift_bridgeObjectRetain();
    v288 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v290 = v24;
    swift_bridgeObjectRetain();
    if (v27)
      break;
    swift_bridgeObjectRelease();
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_111:
    *(_QWORD *)&v318 = v292;
    *((_QWORD *)&v318 + 1) = v291;
    *(_QWORD *)&v319 = v23;
    *((_QWORD *)&v319 + 1) = v290;
    *(_QWORD *)&v320 = v289;
    *((_QWORD *)&v320 + 1) = v288;
    v275 = v29[2];
    if (v275)
    {
      v276 = (__int128 *)(v29 + 4);
      do
      {
        v278 = v276[1];
        v277 = v276[2];
        v279 = *(__int128 *)((char *)v276 + 41);
        v280 = *v276;
        v276 += 4;
        v340[0] = v280;
        v340[1] = v278;
        *(_OWORD *)((char *)v341 + 9) = v279;
        v341[0] = v277;
        v281 = v278;
        outlined retain of MeshResource.Part((uint64_t)v340);
        swift_bridgeObjectRetain();
        specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v340, *((uint64_t *)&v280 + 1), v281, (uint64_t)v328);
        swift_bridgeObjectRelease();
        outlined release of MeshResource.Part((uint64_t)v340);
        outlined consume of MeshResource.Part?(*(uint64_t *)&v328[0]);
        --v275;
      }
      while (v275);
    }
    v14 = v287 + 1;
    swift_bridgeObjectRelease();
    v339[0] = v318;
    v339[1] = v319;
    v339[2] = v320;
    v20 = v318;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v339, v20, *((uint64_t *)&v20 + 1), v328);
    swift_bridgeObjectRelease();
    outlined release of MeshResource.Model((uint64_t)v339);
    outlined consume of MeshResource.Model?(*(uint64_t *)&v328[0], *((uint64_t *)&v328[0] + 1));
    v19 = *(_QWORD *)(v285 + 16);
    if (v14 == v19)
    {
      result = swift_bridgeObjectRelease();
      v8 = v333;
      v7 = v334;
      v9 = v335;
      v10 = v336;
      v11 = v337;
      v12 = v338;
      goto LABEL_117;
    }
  }
  v28 = 0;
  v305 = v23 + 32;
  v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v304 = v23;
  while (1)
  {
    v312 = v29;
    v310 = v28;
    v30 = v305 + (v28 << 6);
    v32 = *(_QWORD *)v30;
    v31 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(v30 + 16);
    v308 = *(_QWORD *)(v30 + 24);
    v309 = v31;
    v34 = *(_QWORD *)(v30 + 32);
    v306 = *(_DWORD *)(v30 + 40);
    v307 = *(_QWORD *)(v30 + 48);
    v35 = *(_BYTE *)(v30 + 56);
    v332 = *(_BYTE *)(v30 + 44);
    v331 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = *(_QWORD *)(v32 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v313 = v33;
    v311 = v34;
    v317.i64[0] = v32;
    if (!v36)
      goto LABEL_11;
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    if ((v38 & 1) != 0)
    {
      outlined init with copy of __REAssetService(*(_QWORD *)(v32 + 56) + 40 * v37, (uint64_t)v328);
      outlined init with take of BindableDataInternal(v328, (uint64_t)&v318);
      v39 = *((_QWORD *)&v319 + 1);
      v40 = v320;
      __swift_project_boxed_opaque_existential_1(&v318, *((uint64_t *)&v319 + 1));
      v41 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v41(v328, v42, v39, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v318);
      v43 = *(uint64_t (**)())&v328[0];
      if (*(_QWORD *)&v328[0])
      {
        v316.i32[0] = v330;
        v315 = *((_QWORD *)&v329 + 1);
        v44 = v329;
        v45 = *((_QWORD *)&v328[3] + 1);
        v46 = *(uint64_t (**)(uint64_t))&v328[3];
        v47 = *((_QWORD *)&v328[2] + 1);
        v48 = *(uint64_t (**)())&v328[2];
        v49 = *((_QWORD *)&v328[1] + 1);
        v50 = *(uint64_t (**)())&v328[1];
        v51 = *((_QWORD *)&v328[0] + 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v52 = swift_bridgeObjectRelease();
        v53 = v315;
        v54 = v316.i8[0];
        v55 = (v44 >> 8) & 1;
        goto LABEL_13;
      }
    }
    else
    {
LABEL_11:
      memset(v328, 0, sizeof(v328));
      v329 = 0u;
      v330 = 0;
    }
    v51 = swift_allocObject();
    v56 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v51 + 16) = MEMORY[0x24BEE4AF8];
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = v56;
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = v56;
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52 = swift_bridgeObjectRelease();
    LOBYTE(v55) = 0;
    v53 = 0;
    v54 = 0;
    LOBYTE(v44) = 9;
    v43 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
    v50 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    v48 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    v46 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
LABEL_13:
    v360[0] = v43;
    v360[1] = v51;
    v360[2] = v50;
    v360[3] = v49;
    v360[4] = v48;
    v360[5] = v47;
    v360[6] = v46;
    v360[7] = v45;
    v361 = v44;
    v362 = v55;
    v363 = v53;
    v364 = v54;
    v57 = ((uint64_t (*)(uint64_t))v43)(v52);
    if (v57)
    {
      v58 = v57;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v59 = *(_QWORD *)(v58 + 16);
      if (!v59)
        goto LABEL_21;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v58 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v360);
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      v59 = *(_QWORD *)(v58 + 16);
      if (!v59)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        v61 = MEMORY[0x24BEE4AF8];
        goto LABEL_22;
      }
    }
    *(_QWORD *)&v328[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
    v60 = 0;
    v61 = *(_QWORD *)&v328[0];
    v62 = *(_QWORD *)(*(_QWORD *)&v328[0] + 16);
    v64 = (float32x4_t)v302;
    v63 = v303;
    v66 = v300;
    v65 = (float32x4_t)v301;
    v68 = (float32x4_t)v298;
    v67 = (float32x4_t)v299;
    do
    {
      v69 = *(float32x4_t *)(v58 + 16 * v60 + 32);
      *(_QWORD *)&v328[0] = v61;
      v70 = *(_QWORD *)(v61 + 24);
      if (v62 >= v70 >> 1)
      {
        v316 = v69;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v62 + 1, 1);
        v69 = v316;
        v68 = (float32x4_t)v298;
        v67 = (float32x4_t)v299;
        v66 = v300;
        v65 = (float32x4_t)v301;
        v64 = (float32x4_t)v302;
        v63 = v303;
        v61 = *(_QWORD *)&v328[0];
      }
      v71 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v65, *(float32x2_t *)v69.f32, 1), v64, v69.f32[0]), v66, v69, 2);
      v72 = (int32x4_t)vnegq_f32(v71);
      v73 = (int8x16_t)vtrn2q_s32((int32x4_t)v71, vtrn1q_s32((int32x4_t)v71, v72));
      v74 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 8uLL), *(float32x2_t *)v63.f32, 1), (float32x4_t)vextq_s8(v73, v73, 8uLL), v67);
      v75 = (float32x4_t)vrev64q_s32((int32x4_t)v71);
      v75.i32[0] = v72.i32[1];
      v75.i32[3] = v72.i32[2];
      v76 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v71, v63, 3), v75, v68), v74);
      *(float32x2_t *)v72.i8 = vadd_f32(*(float32x2_t *)v76.f32, a2);
      *(float *)&v72.i32[2] = v76.f32[2] + a3;
      v72.i32[3] = 0;
      ++v60;
      *(_QWORD *)(v61 + 16) = v62 + 1;
      *(int32x4_t *)(v61 + 16 * v62++ + 32) = v72;
    }
    while (v59 != v60);
    swift_bridgeObjectRelease();
LABEL_22:
    v77 = *(_QWORD *)(v61 + 16);
    v78 = swift_allocObject();
    *(_QWORD *)(v78 + 16) = v61;
    v79 = swift_allocObject();
    *(_QWORD *)(v79 + 16) = v61;
    v80 = swift_allocObject();
    *(_QWORD *)(v80 + 16) = v61;
    v81 = swift_allocObject();
    *(_QWORD *)(v81 + 16) = v61;
    v315 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((_QWORD *)&v319 + 1) = v315;
    *(_QWORD *)&v320 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v82 = swift_allocObject();
    *(_QWORD *)&v318 = v82;
    v83 = one-time initialization token for triangleIndices;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    v314.i64[0] = v80;
    swift_retain();
    swift_retain();
    if (v83 != -1)
      swift_once();
    if (static MeshBuffers.Identifier.triangleIndices == 0x6F50786574726576
      && *(_QWORD *)algn_2551A1378 == 0xEE006E6F69746973
      || (v84 = _stringCompareWithSmolCheck(_:_:expecting:)(), v85 = 0, (v84 & 1) != 0))
    {
      v85 = 2;
    }
    strcpy((char *)(v82 + 16), "vertexPosition");
    *(_BYTE *)(v82 + 31) = -18;
    *(_WORD *)(v82 + 32) = 0;
    *(_QWORD *)(v82 + 40) = v77;
    *(_BYTE *)(v82 + 48) = v85;
    *(_WORD *)(v82 + 49) = 9;
    *(_QWORD *)(v82 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
    *(_QWORD *)(v82 + 64) = v78;
    *(_QWORD *)(v82 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    *(_QWORD *)(v82 + 80) = v79;
    v86 = v314.i64[0];
    *(_QWORD *)(v82 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    *(_QWORD *)(v82 + 96) = v86;
    *(_QWORD *)(v82 + 104) = closure #4 in MeshBuffer.init<A>(_:)specialized partial apply;
    *(_QWORD *)(v82 + 112) = v81;
    *(_WORD *)(v82 + 120) = 9;
    *(_QWORD *)(v82 + 128) = v77;
    *(_BYTE *)(v82 + 136) = 0;
    outlined init with take of BindableDataInternal(&v318, (uint64_t)v328);
    v87 = (_QWORD *)v317.i64[0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v327 = v87;
    v89 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v328, *((uint64_t *)&v328[1] + 1));
    v90 = MEMORY[0x24BDAC7A8](v89);
    v92 = (_OWORD *)((char *)v284 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *, __n128))(v93 + 16))(v92, v90);
    v325 = v315;
    v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v94 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v324 = v94;
    v95 = v92[5];
    v94[5] = v92[4];
    v94[6] = v95;
    v94[7] = v92[6];
    *(_OWORD *)((char *)v94 + 121) = *(_OWORD *)((char *)v92 + 105);
    v96 = v92[1];
    v94[1] = *v92;
    v94[2] = v96;
    v97 = v92[3];
    v94[3] = v92[2];
    v94[4] = v97;
    v99 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    v100 = v87[2];
    v101 = (v98 & 1) == 0;
    v102 = v100 + v101;
    if (__OFADD__(v100, v101))
      break;
    v103 = v98;
    if (v87[3] >= v102)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v102, isUniquelyReferenced_nonNull_native);
      v104 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
      if ((v103 & 1) != (v105 & 1))
        goto LABEL_122;
      v99 = v104;
    }
    v106 = v327;
    v316.i64[0] = (uint64_t)v327;
    if ((v103 & 1) != 0)
    {
      v107 = v327[7] + 40 * v99;
      __swift_destroy_boxed_opaque_existential_1(v107);
      outlined init with take of BindableDataInternal(&v324, v107);
    }
    else
    {
      v108 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v324, v325);
      v109 = MEMORY[0x24BDAC7A8](v108);
      v111 = (_OWORD *)((char *)v284 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(_OWORD *, __n128))(v112 + 16))(v111, v109);
      v322 = v315;
      v323 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      v113 = (_OWORD *)swift_allocObject();
      *(_QWORD *)&v321 = v113;
      v114 = v111[3];
      v113[3] = v111[2];
      v113[4] = v114;
      v115 = v111[1];
      v113[1] = *v111;
      v113[2] = v115;
      *(_OWORD *)((char *)v113 + 121) = *(_OWORD *)((char *)v111 + 105);
      v116 = v111[6];
      v117 = v111[4];
      v113[6] = v111[5];
      v113[7] = v116;
      v113[5] = v117;
      v106[(v99 >> 6) + 8] |= 1 << v99;
      v118 = v106[6] + 24 * v99;
      strcpy((char *)v118, "vertexPosition");
      *(_BYTE *)(v118 + 15) = -18;
      *(_WORD *)(v118 + 16) = 0;
      outlined init with take of BindableDataInternal(&v321, v106[7] + 40 * v99);
      v119 = v106[2];
      v120 = __OFADD__(v119, 1);
      v121 = v119 + 1;
      if (v120)
        goto LABEL_120;
      v106[2] = v121;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v328);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v122 = v317.i64[0];
    v29 = v312;
    v123 = v313;
    v124 = v311;
    if (!*(_QWORD *)(v317.i64[0] + 16))
      goto LABEL_44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v125 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F4E786574726576, 0xEC0000006C616D72, 0);
    if ((v126 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      if (!*(_QWORD *)(v122 + 16))
        goto LABEL_73;
      goto LABEL_45;
    }
    outlined init with copy of __REAssetService(*(_QWORD *)(v122 + 56) + 40 * v125, (uint64_t)&v321);
    outlined init with take of BindableDataInternal(&v321, (uint64_t)&v324);
    v127 = v325;
    v128 = v326;
    __swift_project_boxed_opaque_existential_1(&v324, v325);
    v129 = (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, _UNKNOWN **))v128[7];
    v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v122 = v317.i64[0];
    v129(v328, v130, v127, v128);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v131 = swift_bridgeObjectRelease();
    v132 = *(_QWORD *)&v328[0];
    if (!*(_QWORD *)&v328[0])
      goto LABEL_44;
    v356[0] = v328[0];
    v314.i64[0] = *(_QWORD *)&v328[1];
    v356[1] = v328[1];
    *(_QWORD *)&v297 = *(_QWORD *)&v328[2];
    v356[2] = v328[2];
    *(_QWORD *)&v296 = *(_QWORD *)&v328[3];
    v356[3] = v328[3];
    v357 = v329 & 0x1FF;
    v358 = *((_QWORD *)&v329 + 1);
    v359 = v330;
    v133 = (*(uint64_t (**)(uint64_t))&v328[0])(v131);
    if (v133)
    {
      v134 = v133;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v134 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v356);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v132);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v132);
    v145 = *(_QWORD *)(v134 + 16);
    if (v145)
    {
      *(_QWORD *)&v324 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v145, 0);
      v146 = 0;
      v147 = v324;
      v148 = *(_QWORD *)(v324 + 16);
      v150 = (float32x4_t)v302;
      v149 = v303;
      v152 = v300;
      v151 = (float32x4_t)v301;
      v154 = (float32x4_t)v298;
      v153 = (float32x4_t)v299;
      v155 = v295;
      do
      {
        v156 = *(float32x4_t *)(v134 + 16 * v146 + 32);
        *(_QWORD *)&v324 = v147;
        v157 = *(_QWORD *)(v147 + 24);
        if (v148 >= v157 >> 1)
        {
          v295 = v155;
          v314 = v156;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v148 + 1, 1);
          v156 = v314;
          v155.i32[3] = v295.i32[3];
          v154 = (float32x4_t)v298;
          v153 = (float32x4_t)v299;
          v152 = v300;
          v151 = (float32x4_t)v301;
          v150 = (float32x4_t)v302;
          v149 = v303;
          v147 = v324;
        }
        ++v146;
        v158 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v151, *(float32x2_t *)v156.f32, 1), v150, v156.f32[0]), v152, v156, 2);
        v159 = (int32x4_t)vnegq_f32(v158);
        v160 = (int8x16_t)vtrn2q_s32((int32x4_t)v158, vtrn1q_s32((int32x4_t)v158, v159));
        v161 = (float32x4_t)vrev64q_s32((int32x4_t)v158);
        v161.i32[0] = v159.i32[1];
        v161.i32[3] = v159.i32[2];
        v162 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v158, v149, 3), v161, v154), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v158, (int8x16_t)v159, 8uLL), *(float32x2_t *)v149.f32, 1), (float32x4_t)vextq_s8(v160, v160, 8uLL), v153));
        v162.i32[3] = v155.i32[3];
        *(_QWORD *)(v147 + 16) = v148 + 1;
        *(float32x4_t *)(v147 + 16 * v148++ + 32) = v162;
        v155 = v162;
      }
      while (v145 != v146);
      v314 = v162;
      swift_bridgeObjectRelease();
      v295 = v314;
    }
    else
    {
      swift_bridgeObjectRelease();
      v147 = MEMORY[0x24BEE4AF8];
    }
    specialized MeshBuffer.init<A>(_:)(v147, (uint64_t)v328);
    v296 = *(__int128 *)((char *)v328 + 8);
    v297 = *(__int128 *)((char *)&v328[1] + 8);
    v314 = *(float32x4_t *)((char *)&v328[2] + 8);
    v181 = *(_QWORD *)&v328[0];
    v182 = *((_QWORD *)&v328[3] + 1);
    v183 = v329;
    v184 = BYTE1(v329);
    v185 = *((_QWORD *)&v329 + 1);
    v186 = v330;
    v325 = v315;
    v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v187 = swift_allocObject();
    *(_QWORD *)&v324 = v187;
    if (static MeshBuffers.Identifier.triangleIndices == 0x6F4E786574726576
      && *(_QWORD *)algn_2551A1378 == 0xEC0000006C616D72)
    {
      v188 = 2;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v188 = 2;
    }
    else
    {
      v188 = v186;
    }
    strcpy((char *)(v187 + 16), "vertexNormal");
    *(_BYTE *)(v187 + 29) = 0;
    *(_WORD *)(v187 + 30) = -5120;
    *(_WORD *)(v187 + 32) = 0;
    *(_QWORD *)(v187 + 40) = v185;
    *(_BYTE *)(v187 + 48) = v188;
    *(_BYTE *)(v187 + 49) = v183;
    *(_BYTE *)(v187 + 50) = v184;
    *(_QWORD *)(v187 + 56) = v181;
    v189 = v297;
    *(_OWORD *)(v187 + 64) = v296;
    *(_OWORD *)(v187 + 80) = v189;
    *(float32x4_t *)(v187 + 96) = v314;
    *(_QWORD *)(v187 + 112) = v182;
    *(_BYTE *)(v187 + 120) = v183;
    *(_BYTE *)(v187 + 121) = v184;
    *(_QWORD *)(v187 + 128) = v185;
    *(_BYTE *)(v187 + 136) = v186;
    outlined init with take of BindableDataInternal(&v324, (uint64_t)&v321);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v190 = (_QWORD *)v316.i64[0];
    v191 = swift_isUniquelyReferenced_nonNull_native();
    v327 = v190;
    v192 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v321, v322);
    v193 = MEMORY[0x24BDAC7A8](v192);
    v195 = (_OWORD *)((char *)v284 - ((v194 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *, __n128))(v196 + 16))(v195, v193);
    v197 = v195[5];
    v354[4] = v195[4];
    v354[5] = v197;
    v355[0] = v195[6];
    *(_OWORD *)((char *)v355 + 9) = *(_OWORD *)((char *)v195 + 105);
    v198 = v195[1];
    v354[0] = *v195;
    v354[1] = v198;
    v199 = v195[3];
    v354[2] = v195[2];
    v354[3] = v199;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v354, 0x6F4E786574726576, 0xEC0000006C616D72, 0, v191, &v327, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_24DFD7AC8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    v316.i64[0] = (uint64_t)v327;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v29 = v312;
    v123 = v313;
    v124 = v311;
    v122 = v317.i64[0];
    if (!*(_QWORD *)(v317.i64[0] + 16))
    {
LABEL_73:
      if (!*(_QWORD *)(v122 + 16))
        goto LABEL_86;
      goto LABEL_74;
    }
LABEL_45:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v135 = specialized __RawDictionaryStorage.find<A>(_:)(0x6154786574726576, 0xED0000746E65676ELL, 0);
    if ((v136 & 1) != 0)
    {
      outlined init with copy of __REAssetService(*(_QWORD *)(v122 + 56) + 40 * v135, (uint64_t)&v321);
      outlined init with take of BindableDataInternal(&v321, (uint64_t)&v324);
      v137 = v325;
      v138 = v326;
      __swift_project_boxed_opaque_existential_1(&v324, v325);
      v139 = (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, _UNKNOWN **))v138[7];
      v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v122 = v317.i64[0];
      v139(v328, v140, v137, v138);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v141 = swift_bridgeObjectRelease();
      v142 = *(_QWORD *)&v328[0];
      if (!*(_QWORD *)&v328[0])
        goto LABEL_73;
      v350[0] = v328[0];
      v314.i64[0] = *(_QWORD *)&v328[1];
      v350[1] = v328[1];
      *(_QWORD *)&v297 = *(_QWORD *)&v328[2];
      v350[2] = v328[2];
      *(_QWORD *)&v296 = *(_QWORD *)&v328[3];
      v350[3] = v328[3];
      v351 = v329 & 0x1FF;
      v352 = *((_QWORD *)&v329 + 1);
      v353 = v330;
      v143 = (*(uint64_t (**)(uint64_t))&v328[0])(v141);
      if (v143)
      {
        v144 = v143;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v144 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v350);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v142);
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?(v142);
      v163 = *(_QWORD *)(v144 + 16);
      if (v163)
      {
        *(_QWORD *)&v324 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v163, 0);
        v164 = 0;
        v165 = v324;
        v166 = *(_QWORD *)(v324 + 16);
        v168 = (float32x4_t)v302;
        v167 = v303;
        v170 = v300;
        v169 = (float32x4_t)v301;
        v172 = (float32x4_t)v298;
        v171 = (float32x4_t)v299;
        v173 = v294;
        do
        {
          v174 = *(float32x4_t *)(v144 + 16 * v164 + 32);
          *(_QWORD *)&v324 = v165;
          v175 = *(_QWORD *)(v165 + 24);
          if (v166 >= v175 >> 1)
          {
            v294 = v173;
            v314 = v174;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v175 > 1, v166 + 1, 1);
            v174 = v314;
            v173.i32[3] = v294.i32[3];
            v172 = (float32x4_t)v298;
            v171 = (float32x4_t)v299;
            v170 = v300;
            v169 = (float32x4_t)v301;
            v168 = (float32x4_t)v302;
            v167 = v303;
            v165 = v324;
          }
          ++v164;
          v176 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v169, *(float32x2_t *)v174.f32, 1), v168, v174.f32[0]), v170, v174, 2);
          v177 = (int32x4_t)vnegq_f32(v176);
          v178 = (int8x16_t)vtrn2q_s32((int32x4_t)v176, vtrn1q_s32((int32x4_t)v176, v177));
          v179 = (float32x4_t)vrev64q_s32((int32x4_t)v176);
          v179.i32[0] = v177.i32[1];
          v179.i32[3] = v177.i32[2];
          v180 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v176, v167, 3), v179, v172), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v176, (int8x16_t)v177, 8uLL), *(float32x2_t *)v167.f32, 1), (float32x4_t)vextq_s8(v178, v178, 8uLL), v171));
          v180.i32[3] = v173.i32[3];
          *(_QWORD *)(v165 + 16) = v166 + 1;
          *(float32x4_t *)(v165 + 16 * v166++ + 32) = v180;
          v173 = v180;
        }
        while (v163 != v164);
        v314 = v180;
        swift_bridgeObjectRelease();
        v294 = v314;
      }
      else
      {
        swift_bridgeObjectRelease();
        v165 = MEMORY[0x24BEE4AF8];
      }
      specialized MeshBuffer.init<A>(_:)(v165, (uint64_t)v328);
      v296 = *(__int128 *)((char *)v328 + 8);
      v297 = *(__int128 *)((char *)&v328[1] + 8);
      v314 = *(float32x4_t *)((char *)&v328[2] + 8);
      v210 = *(_QWORD *)&v328[0];
      v211 = *((_QWORD *)&v328[3] + 1);
      v212 = v329;
      v213 = BYTE1(v329);
      v214 = *((_QWORD *)&v329 + 1);
      v215 = v330;
      v325 = v315;
      v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      v216 = swift_allocObject();
      *(_QWORD *)&v324 = v216;
      if (static MeshBuffers.Identifier.triangleIndices == 0x6154786574726576
        && *(_QWORD *)algn_2551A1378 == 0xED0000746E65676ELL)
      {
        v217 = 2;
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v217 = 2;
      }
      else
      {
        v217 = v215;
      }
      strcpy((char *)(v216 + 16), "vertexTangent");
      *(_WORD *)(v216 + 30) = -4864;
      *(_WORD *)(v216 + 32) = 0;
      *(_QWORD *)(v216 + 40) = v214;
      *(_BYTE *)(v216 + 48) = v217;
      *(_BYTE *)(v216 + 49) = v212;
      *(_BYTE *)(v216 + 50) = v213;
      *(_QWORD *)(v216 + 56) = v210;
      v218 = v297;
      *(_OWORD *)(v216 + 64) = v296;
      *(_OWORD *)(v216 + 80) = v218;
      *(float32x4_t *)(v216 + 96) = v314;
      *(_QWORD *)(v216 + 112) = v211;
      *(_BYTE *)(v216 + 120) = v212;
      *(_BYTE *)(v216 + 121) = v213;
      *(_QWORD *)(v216 + 128) = v214;
      *(_BYTE *)(v216 + 136) = v215;
      outlined init with take of BindableDataInternal(&v324, (uint64_t)&v321);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v219 = (_QWORD *)v316.i64[0];
      v220 = swift_isUniquelyReferenced_nonNull_native();
      v327 = v219;
      v221 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v321, v322);
      v222 = MEMORY[0x24BDAC7A8](v221);
      v224 = (_OWORD *)((char *)v284 - ((v223 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(_OWORD *, __n128))(v225 + 16))(v224, v222);
      v226 = v224[5];
      v348[4] = v224[4];
      v348[5] = v226;
      v349[0] = v224[6];
      *(_OWORD *)((char *)v349 + 9) = *(_OWORD *)((char *)v224 + 105);
      v227 = v224[1];
      v348[0] = *v224;
      v348[1] = v227;
      v228 = v224[3];
      v348[2] = v224[2];
      v348[3] = v228;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v348, 0x6154786574726576, 0xED0000746E65676ELL, 0, v220, &v327, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_24DFD7AC8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
      v316.i64[0] = (uint64_t)v327;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v29 = v312;
      v123 = v313;
      v124 = v311;
      v122 = v317.i64[0];
      if (!*(_QWORD *)(v317.i64[0] + 16))
        goto LABEL_86;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v122 + 16))
        goto LABEL_86;
    }
LABEL_74:
    v200 = specialized __RawDictionaryStorage.find<A>(_:)(0x6942786574726576, 0xEF746E65676E6174, 0);
    if ((v201 & 1) != 0)
    {
      outlined init with copy of __REAssetService(*(_QWORD *)(v122 + 56) + 40 * v200, (uint64_t)&v321);
      outlined init with take of BindableDataInternal(&v321, (uint64_t)&v324);
      v202 = v325;
      v203 = v326;
      __swift_project_boxed_opaque_existential_1(&v324, v325);
      v204 = (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, _UNKNOWN **))v203[7];
      v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v204(v328, v205, v202, v203);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v206 = swift_bridgeObjectRelease();
      v207 = *(_QWORD *)&v328[0];
      if (*(_QWORD *)&v328[0])
      {
        v344[0] = v328[0];
        v317.i64[0] = *(_QWORD *)&v328[1];
        v344[1] = v328[1];
        v314.i64[0] = *(_QWORD *)&v328[2];
        v344[2] = v328[2];
        *(_QWORD *)&v297 = *(_QWORD *)&v328[3];
        v344[3] = v328[3];
        v345 = v329 & 0x1FF;
        v346 = *((_QWORD *)&v329 + 1);
        v347 = v330;
        v208 = (*(uint64_t (**)(uint64_t))&v328[0])(v206);
        if (v208)
        {
          v209 = v208;
        }
        else
        {
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v209 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v344);
          outlined consume of MeshBuffer<SIMD3<Float>>?(v207);
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?(v207);
        v229 = *(_QWORD *)(v209 + 16);
        if (v229)
        {
          *(_QWORD *)&v324 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v229, 0);
          v230 = 0;
          v231 = v324;
          v232 = *(_QWORD *)(v324 + 16);
          v234 = (float32x4_t)v302;
          v233 = v303;
          v236 = v300;
          v235 = (float32x4_t)v301;
          v238 = (float32x4_t)v298;
          v237 = (float32x4_t)v299;
          v239 = v293;
          do
          {
            v240 = *(float32x4_t *)(v209 + 16 * v230 + 32);
            *(_QWORD *)&v324 = v231;
            v241 = *(_QWORD *)(v231 + 24);
            if (v232 >= v241 >> 1)
            {
              v293 = v239;
              v317 = v240;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v241 > 1, v232 + 1, 1);
              v240 = v317;
              v239.i32[3] = v293.i32[3];
              v238 = (float32x4_t)v298;
              v237 = (float32x4_t)v299;
              v236 = v300;
              v235 = (float32x4_t)v301;
              v234 = (float32x4_t)v302;
              v233 = v303;
              v231 = v324;
            }
            ++v230;
            v242 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v235, *(float32x2_t *)v240.f32, 1), v234, v240.f32[0]), v236, v240, 2);
            v243 = (int32x4_t)vnegq_f32(v242);
            v244 = (int8x16_t)vtrn2q_s32((int32x4_t)v242, vtrn1q_s32((int32x4_t)v242, v243));
            v245 = (float32x4_t)vrev64q_s32((int32x4_t)v242);
            v245.i32[0] = v243.i32[1];
            v245.i32[3] = v243.i32[2];
            v246 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v242, v233, 3), v245, v238), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v242, (int8x16_t)v243, 8uLL), *(float32x2_t *)v233.f32, 1), (float32x4_t)vextq_s8(v244, v244, 8uLL), v237));
            v246.i32[3] = v239.i32[3];
            *(_QWORD *)(v231 + 16) = v232 + 1;
            *(float32x4_t *)(v231 + 16 * v232++ + 32) = v246;
            v239 = v246;
          }
          while (v229 != v230);
          v317 = v246;
          swift_bridgeObjectRelease();
          v293 = v317;
        }
        else
        {
          swift_bridgeObjectRelease();
          v231 = MEMORY[0x24BEE4AF8];
        }
        specialized MeshBuffer.init<A>(_:)(v231, (uint64_t)v328);
        v297 = *(__int128 *)((char *)v328 + 8);
        v314 = *(float32x4_t *)((char *)&v328[1] + 8);
        v317 = *(float32x4_t *)((char *)&v328[2] + 8);
        v247 = *(_QWORD *)&v328[0];
        v248 = *((_QWORD *)&v328[3] + 1);
        v249 = v329;
        v250 = BYTE1(v329);
        v251 = *((_QWORD *)&v329 + 1);
        v252 = v330;
        v325 = v315;
        v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
        v253 = swift_allocObject();
        *(_QWORD *)&v324 = v253;
        if (static MeshBuffers.Identifier.triangleIndices == 0x6942786574726576
          && *(_QWORD *)algn_2551A1378 == 0xEF746E65676E6174)
        {
          v254 = 2;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v254 = 2;
        }
        else
        {
          v254 = v252;
        }
        *(_QWORD *)(v253 + 16) = 0x6942786574726576;
        *(_QWORD *)(v253 + 24) = 0xEF746E65676E6174;
        *(_WORD *)(v253 + 32) = 0;
        *(_QWORD *)(v253 + 40) = v251;
        *(_BYTE *)(v253 + 48) = v254;
        *(_BYTE *)(v253 + 49) = v249;
        *(_BYTE *)(v253 + 50) = v250;
        *(_QWORD *)(v253 + 56) = v247;
        v255 = v314;
        *(_OWORD *)(v253 + 64) = v297;
        *(float32x4_t *)(v253 + 80) = v255;
        *(float32x4_t *)(v253 + 96) = v317;
        *(_QWORD *)(v253 + 112) = v248;
        *(_BYTE *)(v253 + 120) = v249;
        *(_BYTE *)(v253 + 121) = v250;
        *(_QWORD *)(v253 + 128) = v251;
        *(_BYTE *)(v253 + 136) = v252;
        outlined init with take of BindableDataInternal(&v324, (uint64_t)&v321);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v256 = (_QWORD *)v316.i64[0];
        v257 = swift_isUniquelyReferenced_nonNull_native();
        v327 = v256;
        v258 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v321, v322);
        v259 = MEMORY[0x24BDAC7A8](v258);
        v261 = (_OWORD *)((char *)v284 - ((v260 + 15) & 0xFFFFFFFFFFFFFFF0));
        (*(void (**)(_OWORD *, __n128))(v262 + 16))(v261, v259);
        v263 = v261[5];
        v342[4] = v261[4];
        v342[5] = v263;
        v343[0] = v261[6];
        *(_OWORD *)((char *)v343 + 9) = *(_OWORD *)((char *)v261 + 105);
        v264 = v261[1];
        v342[0] = *v261;
        v342[1] = v264;
        v265 = v261[3];
        v342[2] = v261[2];
        v342[3] = v265;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v342, 0x6942786574726576, 0xEF746E65676E6174, 0, v257, &v327, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_24DFD7AC8);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
        v316.i64[0] = (uint64_t)v327;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v29 = v312;
        v123 = v313;
        v124 = v311;
      }
      goto LABEL_102;
    }
LABEL_86:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_102:
    v266 = v332;
    v267 = v331;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    v269 = v29[2];
    v268 = v29[3];
    v270 = v310;
    if (v269 >= v268 >> 1)
    {
      v274 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v268 > 1), v269 + 1, 1, v29);
      v270 = v310;
      v29 = v274;
    }
    v28 = v270 + 1;
    v29[2] = v269 + 1;
    v271 = &v29[8 * v269];
    v272 = v309;
    v271[4] = v316.i64[0];
    v271[5] = v272;
    v273 = v308;
    v271[6] = v123;
    v271[7] = v273;
    v271[8] = v124;
    *((_DWORD *)v271 + 18) = v306;
    *((_BYTE *)v271 + 76) = v266;
    v271[10] = v307;
    *((_BYTE *)v271 + 88) = v267;
    v23 = v304;
    if (v28 == *(_QWORD *)(v304 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_111;
    }
    if (v28 >= *(_QWORD *)(v304 + 16))
      goto LABEL_119;
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshResource.init(primitiveMeshShape:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  id v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  __int128 v48;
  unint64_t v49;
  int v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  char v63;

  v1 = v0;
  switch(RECollisionShapeGetType())
  {
    case 2u:
      REGeomBuildSphereDefaultOptions();
      RESphereShapeGetRadius();
      v2 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v2, (uint64_t)&v49);
      v3 = v56;
      v4 = v57;
      __swift_project_boxed_opaque_existential_1(&v49, v56);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
      v6 = (id)REAssetGetSwiftObject();
      swift_unknownObjectRelease();
      if (!v6)
        goto LABEL_17;
      __break(1u);
LABEL_4:
      REBoxShapeGetExtent();
      v48 = v7;
      REGeomBuildBoxDefaultOptions();
      v58 = v49;
      v59 = v50;
      v60 = v48;
      v61 = DWORD2(v48);
      v62 = v56;
      v63 = BYTE2(v56);
      v8 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v8, (uint64_t)&v49);
      v9 = v56;
      v10 = v57;
      __swift_project_boxed_opaque_existential_1(&v49, v56);
      (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((uint64_t)&v58);
      v11 = (id)REAssetGetSwiftObject();
      swift_unknownObjectRelease();
      if (v11)
      {
        __break(1u);
LABEL_6:
        REGeomBuildCapsuleDefaultOptions();
        v12 = *(unsigned int *)((char *)&v49 + 2);
        v13 = v51;
        v14 = v52;
        v15 = v53;
        RECapsuleShapeGetHeight();
        v17 = v16;
        RECapsuleShapeGetRadius();
        v19 = v18;
        v20 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v20, (uint64_t)&v49);
        v21 = v56;
        v22 = v57;
        __swift_project_boxed_opaque_existential_1(&v49, v56);
        (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
        v23 = v14 ? 256 : 0;
        v24 = v23 | v13;
        v25 = v15 ? 0x10000 : 0;
        v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((v12 << 16) | 0x40, v24 | v25, v19, v17);
        v26 = (id)REAssetGetSwiftObject();
        swift_unknownObjectRelease();
        if (v26)
        {
          __break(1u);
LABEL_14:
          REGeomBuildCylinderDefaultOptions();
          v27 = v49;
          v28 = v51;
          v29 = v52;
          v30 = v53;
          v31 = v54;
          v32 = v55;
          RECylinderShapeGetHeight();
          v34 = v33;
          RECylinderShapeGetRadius();
          v36 = v35;
          RECylinderShapeGetRadius();
          v58 = __PAIR64__(v34, v27);
          v59 = v36;
          LODWORD(v60) = v37;
          BYTE4(v60) = v28;
          BYTE5(v60) = v29;
          BYTE6(v60) = v30;
          HIBYTE(v60) = v31;
          LOBYTE(v61) = v32;
          v38 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v38, (uint64_t)&v49);
          v39 = v56;
          v40 = v57;
          __swift_project_boxed_opaque_existential_1(&v49, v56);
          (*(void (**)(uint64_t, uint64_t))(v40 + 32))(v39, v40);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
          v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((int *)&v58);
          v41 = (id)REAssetGetSwiftObject();
          swift_unknownObjectRelease();
          if (v41)
          {
            __break(1u);
LABEL_16:
            REGeomBuildConeDefaultOptions();
            REConeShapeGetHeight();
            REConeShapeGetRadius();
            v42 = specialized static __ServiceLocator.shared.getter() + 120;
            swift_beginAccess();
            outlined init with copy of __REAssetService(v42, (uint64_t)&v49);
            v43 = v56;
            v44 = v57;
            __swift_project_boxed_opaque_existential_1(&v49, v56);
            (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
            v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
            v45 = (id)REAssetGetSwiftObject();
            swift_unknownObjectRelease();
            if (v45)
            {
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x21BDDF8C0);
            }
          }
        }
      }
LABEL_17:
      REAssetHandleLoadNow();
      REAssetSetNetworkSharingMode();
      v46 = (*(uint64_t (**)(uint64_t))(v1 + 120))(v5);
      RERelease();
      return v46;
    case 3u:
      goto LABEL_4;
    case 4u:
      goto LABEL_6;
    case 8u:
      goto LABEL_14;
    case 9u:
      goto LABEL_16;
    default:
      goto LABEL_19;
  }
}

uint64_t MeshResource.init(shape:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  __int128 v18;
  float32x4_t v19;
  uint64_t v20[6];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v25 = *MEMORY[0x24BDAC8D0];
  if (!RECollisionShapeAssetGetCollisionShape())
    __break(1u);
  v4 = 0;
  switch(RECollisionShapeGetType())
  {
    case 0u:
    case 1u:
    case 6u:
    case 7u:
    case 0xAu:
    case 0xBu:
      v5 = REGeomMeshCreateFromCoreAttributes();
      if (!v5)
        goto LABEL_18;
      v20[0] = v5;
      v6 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v6, (uint64_t)v21);
      v7 = v22;
      v8 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      v9 = REAssetManagerMeshMemoryAssetCreate();
      if (!v9)
        goto LABEL_18;
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v9, v10);
      RERelease();
      RERelease();
      goto LABEL_12;
    case 2u:
    case 3u:
    case 4u:
    case 8u:
    case 9u:
      v11 = MeshResource.init(primitiveMeshShape:)();
      v21[0] = v11;
      RequestLoadable.enforceResourceSharingBeforeECSCommits()();
      if (!v4)
        goto LABEL_12;
      swift_unexpectedError();
      __break(1u);
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      MeshDescriptor.init(convexPolyhedronShape:)(inited + 32);
      v13 = MeshResource.init(from:)(inited);
      if (v4)
      {
        swift_unexpectedError();
        __break(1u);
LABEL_10:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
        v14 = swift_initStackObject();
        *(_OWORD *)(v14 + 16) = xmmword_21BE411F0;
        MeshDescriptor.init(staticMeshShape:)(v14 + 32);
        v13 = MeshResource.init(from:)(v14);
        if (v4)
          goto LABEL_19;
      }
      v11 = v13;
LABEL_12:
      LODWORD(v15) = *(_QWORD *)(a1 + 40);
      v18 = *(_OWORD *)(a1 + 32);
      v19 = *(float32x4_t *)(a1 + 48);
      if (!REPoseF.isIdentity.getter(*(float32x2_t *)(a1 + 32), v15, v19))
      {
        MeshResource.Contents.init(_:)(*(_QWORD *)(v11 + 16), v20);
        MeshResource.Contents.offsetBy(pose:)((uint64_t)v21, *(float32x2_t *)&v18, v15, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20[0] = v21[0];
        v20[1] = v21[1];
        v20[2] = v21[2];
        v20[3] = v22;
        v20[4] = v23;
        v20[5] = v24;
        MeshResource.replace(with:)((uint64_t)v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21[0] = v11;
        RequestLoadable.enforceResourceSharingBeforeECSCommits()();
        if (v16)
        {
LABEL_17:
          swift_unexpectedError();
          __break(1u);
LABEL_18:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_19:
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x21BDDFD18);
        }
      }
      swift_release();
      return v11;
    case 5u:
      goto LABEL_8;
    case 0xCu:
      goto LABEL_10;
    default:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_17;
  }
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[59] = a1;
  v2[60] = v1;
  type metadata accessor for MainActor();
  v2[61] = static MainActor.shared.getter();
  v2[62] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[63] = v3;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 552) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 560) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 584) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 592) = a1;
  return swift_task_switch();
}

uint64_t MeshResource.init(shape:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t inited;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t);
  __int128 v23;
  float32x4_t v24;
  uint64_t v25[13];

  v25[12] = *MEMORY[0x24BDAC8D0];
  if (!RECollisionShapeAssetGetCollisionShape())
    __break(1u);
  switch(RECollisionShapeGetType())
  {
    case 0u:
    case 1u:
    case 6u:
    case 7u:
    case 0xAu:
    case 0xBu:
      v1 = REGeomMeshCreateFromCoreAttributes();
      if (!v1)
        return _assertionFailure(_:_:file:line:flags:)();
      *(_QWORD *)(v0 + 456) = v1;
      v2 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v2, v0 + 384);
      v3 = *(_QWORD *)(v0 + 408);
      v4 = *(_QWORD *)(v0 + 416);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 384), v3);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      __swift_destroy_boxed_opaque_existential_1(v0 + 384);
      v5 = REAssetManagerMeshMemoryAssetCreate();
      if (!v5)
        return _assertionFailure(_:_:file:line:flags:)();
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 480) + 120))(v5, v6);
      RERelease();
      RERelease();
      *(_QWORD *)(v0 + 600) = v7;
      v8 = *(_QWORD *)(v0 + 472);
      LODWORD(v9) = *(_QWORD *)(v8 + 40);
      v23 = *(_OWORD *)(v8 + 32);
      v24 = *(float32x4_t *)(v8 + 48);
      if (REPoseF.isIdentity.getter(*(float32x2_t *)(v8 + 32), v9, v24))
      {
        swift_release();
        swift_release();
        return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 600));
      }
      else
      {
        MeshResource.Contents.init(_:)(*(_QWORD *)(v7 + 16), v25);
        v25[6] = v25[0];
        v25[7] = v25[1];
        v25[8] = v25[2];
        v25[9] = v25[3];
        v25[10] = v25[4];
        v25[11] = v25[5];
        MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v23, v9, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = *(_QWORD *)(v0 + 336);
        v14 = *(_QWORD *)(v0 + 344);
        *(_QWORD *)(v0 + 608) = v13;
        *(_QWORD *)(v0 + 616) = v14;
        v15 = *(_QWORD *)(v0 + 352);
        v16 = *(_QWORD *)(v0 + 360);
        *(_QWORD *)(v0 + 624) = v15;
        *(_QWORD *)(v0 + 632) = v16;
        v17 = *(_QWORD *)(v0 + 368);
        v18 = *(_QWORD *)(v0 + 376);
        *(_QWORD *)(v0 + 640) = v17;
        *(_QWORD *)(v0 + 648) = v18;
        *(_QWORD *)(v0 + 288) = v13;
        *(_QWORD *)(v0 + 296) = v14;
        *(_QWORD *)(v0 + 304) = v15;
        *(_QWORD *)(v0 + 312) = v16;
        *(_QWORD *)(v0 + 320) = v17;
        *(_QWORD *)(v0 + 328) = v18;
        v19 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 656) = v19;
        *v19 = v0;
        v19[1] = MeshResource.init(shape:);
        return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
      }
    case 2u:
    case 3u:
    case 4u:
    case 8u:
    case 9u:
      v11 = MeshResource.init(primitiveMeshShape:)();
      *(_QWORD *)(v0 + 512) = v11;
      *(_QWORD *)(v0 + 464) = v11;
      swift_retain();
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 520) = v12;
      *v12 = v0;
      v12[1] = MeshResource.init(shape:);
      return RequestLoadable.awaitForResourceSharing()(*(_QWORD *)(v0 + 480), (uint64_t)&protocol witness table for MeshResource);
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      inited = swift_initStackObject();
      *(_QWORD *)(v0 + 536) = inited;
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      MeshDescriptor.init(convexPolyhedronShape:)(inited + 32);
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 544) = v21;
      v22 = MeshResource.init(shape:);
      goto LABEL_12;
    case 0xCu:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      inited = swift_initStackObject();
      *(_QWORD *)(v0 + 568) = inited;
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      MeshDescriptor.init(staticMeshShape:)(inited + 32);
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 576) = v21;
      v22 = MeshResource.init(shape:);
LABEL_12:
      *v21 = v0;
      v21[1] = v22;
      return MeshResource.init(from:)(inited);
    default:
      __break(1u);
      JUMPOUT(0x21BDE02D4);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  float32x4_t v13;
  uint64_t v14[13];

  v14[12] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 600) = v1;
  v2 = *(_QWORD *)(v0 + 472);
  LODWORD(v3) = *(_QWORD *)(v2 + 40);
  v12 = *(_OWORD *)(v2 + 32);
  v13 = *(float32x4_t *)(v2 + 48);
  if (REPoseF.isIdentity.getter(*(float32x2_t *)(v2 + 32), v3, v13))
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 600));
  }
  else
  {
    MeshResource.Contents.init(_:)(*(_QWORD *)(v1 + 16), v14);
    v14[6] = v14[0];
    v14[7] = v14[1];
    v14[8] = v14[2];
    v14[9] = v14[3];
    v14[10] = v14[4];
    v14[11] = v14[5];
    MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v12, v3, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 608) = v5;
    *(_QWORD *)(v0 + 616) = v6;
    v7 = *(_QWORD *)(v0 + 352);
    v8 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 624) = v7;
    *(_QWORD *)(v0 + 632) = v8;
    v9 = *(_QWORD *)(v0 + 368);
    v10 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 640) = v9;
    *(_QWORD *)(v0 + 648) = v10;
    *(_QWORD *)(v0 + 288) = v5;
    *(_QWORD *)(v0 + 296) = v6;
    *(_QWORD *)(v0 + 304) = v7;
    *(_QWORD *)(v0 + 312) = v8;
    *(_QWORD *)(v0 + 320) = v9;
    *(_QWORD *)(v0 + 328) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v11;
    *v11 = v0;
    v11[1] = MeshResource.init(shape:);
    return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  float32x4_t v13;
  uint64_t v14[13];

  v14[12] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 560);
  *(_QWORD *)(v0 + 600) = v1;
  v2 = *(_QWORD *)(v0 + 472);
  LODWORD(v3) = *(_QWORD *)(v2 + 40);
  v12 = *(_OWORD *)(v2 + 32);
  v13 = *(float32x4_t *)(v2 + 48);
  if (REPoseF.isIdentity.getter(*(float32x2_t *)(v2 + 32), v3, v13))
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 600));
  }
  else
  {
    MeshResource.Contents.init(_:)(*(_QWORD *)(v1 + 16), v14);
    v14[6] = v14[0];
    v14[7] = v14[1];
    v14[8] = v14[2];
    v14[9] = v14[3];
    v14[10] = v14[4];
    v14[11] = v14[5];
    MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v12, v3, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 608) = v5;
    *(_QWORD *)(v0 + 616) = v6;
    v7 = *(_QWORD *)(v0 + 352);
    v8 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 624) = v7;
    *(_QWORD *)(v0 + 632) = v8;
    v9 = *(_QWORD *)(v0 + 368);
    v10 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 640) = v9;
    *(_QWORD *)(v0 + 648) = v10;
    *(_QWORD *)(v0 + 288) = v5;
    *(_QWORD *)(v0 + 296) = v6;
    *(_QWORD *)(v0 + 304) = v7;
    *(_QWORD *)(v0 + 312) = v8;
    *(_QWORD *)(v0 + 320) = v9;
    *(_QWORD *)(v0 + 328) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v11;
    *v11 = v0;
    v11[1] = MeshResource.init(shape:);
    return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  float32x4_t v13;
  uint64_t v14[13];

  v14[12] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 592);
  *(_QWORD *)(v0 + 600) = v1;
  v2 = *(_QWORD *)(v0 + 472);
  LODWORD(v3) = *(_QWORD *)(v2 + 40);
  v12 = *(_OWORD *)(v2 + 32);
  v13 = *(float32x4_t *)(v2 + 48);
  if (REPoseF.isIdentity.getter(*(float32x2_t *)(v2 + 32), v3, v13))
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 600));
  }
  else
  {
    MeshResource.Contents.init(_:)(*(_QWORD *)(v1 + 16), v14);
    v14[6] = v14[0];
    v14[7] = v14[1];
    v14[8] = v14[2];
    v14[9] = v14[3];
    v14[10] = v14[4];
    v14[11] = v14[5];
    MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v12, v3, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 608) = v5;
    *(_QWORD *)(v0 + 616) = v6;
    v7 = *(_QWORD *)(v0 + 352);
    v8 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 624) = v7;
    *(_QWORD *)(v0 + 632) = v8;
    v9 = *(_QWORD *)(v0 + 368);
    v10 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 640) = v9;
    *(_QWORD *)(v0 + 648) = v10;
    *(_QWORD *)(v0 + 288) = v5;
    *(_QWORD *)(v0 + 296) = v6;
    *(_QWORD *)(v0 + 304) = v7;
    *(_QWORD *)(v0 + 312) = v8;
    *(_QWORD *)(v0 + 320) = v9;
    *(_QWORD *)(v0 + 328) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v11;
    *v11 = v0;
    v11[1] = MeshResource.init(shape:);
    return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = (_QWORD *)*v1;
  v2[83] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
    return swift_task_switch();
  v2[56] = v2[75];
  v4 = (_QWORD *)swift_task_alloc();
  v2[84] = v4;
  *v4 = v2;
  v4[1] = MeshResource.init(shape:);
  return RequestLoadable.awaitForResourceSharing()(v2[60], (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 680) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 600));
}

{
  return swift_unexpectedError();
}

{
  return swift_unexpectedError();
}

{
  swift_release();
  return swift_unexpectedError();
}

{
  return swift_unexpectedError();
}

{
  return swift_unexpectedError();
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NewMutableWithAssetDescriptors;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v2 = *(_BYTE *)(a1 + 24) & 1;
  v3 = *(_BYTE *)(a1 + 25) & 1;
  v4 = *(_BYTE *)(a1 + 26) & 1;
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v14);
  v6 = v15;
  v7 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v14);
  v9 = v15;
  v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  v11 = *(_QWORD *)(a1 + 8);
  v14[0] = *(_QWORD *)a1;
  v14[1] = v11;
  v14[2] = *(_QWORD *)(a1 + 16);
  LOBYTE(v15) = v2;
  BYTE1(v15) = v3;
  BYTE2(v15) = v4;
  REMeshAssetCreateBoxDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(uint64_t *a1)
{
  __int16 v2;
  int v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  int16x8_t v14;
  uint64_t NewMutableWithAssetDescriptors;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _BYTE v20[12];
  uint64_t v21;

  v2 = *((_WORD *)a1 + 4);
  v3 = *((_DWORD *)a1 + 7);
  v4 = *((_BYTE *)a1 + 36) & 1;
  v5 = *((_BYTE *)a1 + 37) & 1;
  v6 = *((_BYTE *)a1 + 38) & 1;
  v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)&v17);
  v8 = *(_QWORD *)&v20[4];
  v9 = v21;
  __swift_project_boxed_opaque_existential_1(&v17, *(uint64_t *)&v20[4]);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)&v17);
  v11 = *(_QWORD *)&v20[4];
  v12 = v21;
  __swift_project_boxed_opaque_existential_1(&v17, *(uint64_t *)&v20[4]);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  v17 = *a1;
  v18 = v2;
  v19 = *(uint64_t *)((char *)a1 + 12);
  *(_QWORD *)v20 = *(uint64_t *)((char *)a1 + 20);
  v13.i32[1] = *(_DWORD *)&v20[4];
  *(_DWORD *)&v20[8] = v3;
  v13.i32[0] = *((_DWORD *)a1 + 8);
  v14 = (int16x8_t)vmovl_u8(v13);
  v14.i64[0] &= 0xFF01FF01FF01FF01;
  LODWORD(v21) = vmovn_s16(v14).u32[0];
  BYTE4(v21) = v4;
  BYTE5(v21) = v5;
  BYTE6(v21) = v6;
  REMeshAssetCreateBoxWithRoundedCornersDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(int *a1)
{
  int v2;
  __int16 v3;
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NewMutableWithAssetDescriptors;
  _QWORD v16[2];
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 2);
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[5] & 1;
  v7 = *((_BYTE *)a1 + 21) & 1;
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v16);
  v9 = v20;
  v10 = v21;
  __swift_project_boxed_opaque_existential_1(v16, v20);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v11 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11, (uint64_t)v16);
  v12 = v20;
  v13 = v21;
  __swift_project_boxed_opaque_existential_1(v16, v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  LODWORD(v16[0]) = v2;
  WORD2(v16[0]) = v3;
  v16[1] = *((_QWORD *)a1 + 1);
  v17 = v4;
  v18 = v6;
  v19 = v7;
  LODWORD(v20) = v5;
  REMeshAssetCreatePlaneDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

{
  int v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  int16x8_t v12;
  uint64_t NewMutableWithAssetDescriptors;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int32 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[5] & 1;
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)&v15);
  v6 = v20;
  v7 = v21;
  __swift_project_boxed_opaque_existential_1(&v15, v20);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v15);
  v9 = v20;
  v10 = v21;
  __swift_project_boxed_opaque_existential_1(&v15, v20);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  v15 = v2;
  v16 = *(_QWORD *)(a1 + 1);
  v11.i32[1] = HIDWORD(v16);
  v17 = v3;
  v11.i32[0] = a1[4];
  v12 = (int16x8_t)vmovl_u8(v11);
  v12.i64[0] &= 0xFF01FF01FF01FF01;
  v18 = vmovn_s16(v12).u32[0];
  v19 = v4;
  REMeshAssetCreateCylinderDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NewMutableWithAssetDescriptors;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v8);
  v1 = v9;
  v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  v3 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v8);
  v4 = v9;
  v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  REMeshAssetCreateSphereDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NewMutableWithAssetDescriptors;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v8);
  v1 = v9;
  v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  v3 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v8);
  v4 = v9;
  v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  REMeshAssetCreateConeDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(unint64_t a1, int a2, float a3, float a4)
{
  __int16 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t NewMutableWithAssetDescriptors;
  uint64_t v18;
  float v19;
  float v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v7 = a1;
  v8 = a1 >> 16;
  v9 = HIDWORD(a1);
  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)&v18);
  v11 = v23;
  v12 = v24;
  __swift_project_boxed_opaque_existential_1(&v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  v13 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13, (uint64_t)&v18);
  v14 = v23;
  v15 = v24;
  __swift_project_boxed_opaque_existential_1(&v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  LOWORD(v18) = v7;
  WORD1(v18) = v8;
  WORD2(v18) = v9;
  v19 = a3;
  v20 = a4;
  v21 = a2 & 0x101;
  v22 = BYTE2(a2) & 1;
  REMeshAssetCreateCapsuleDescriptor();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t NewMutableWithAssetDescriptors;
  char v15;
  char v16;
  _BYTE v17[4];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v17);
  v3 = v20;
  v4 = v21;
  __swift_project_boxed_opaque_existential_1(v17, v20);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v17);
  v6 = v20;
  v7 = v21;
  __swift_project_boxed_opaque_existential_1(v17, v20);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v8 = *a1;
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *((_WORD *)a1 + 16);
  v12 = a1[34];
  LOBYTE(v3) = a1[35];
  LOBYTE(v5) = a1[36];
  v15 = a1[38];
  v16 = a1[37];
  String.utf8CString.getter();
  String.utf8CString.getter();
  v17[0] = v8;
  v18 = *(_QWORD *)(a1 + 4);
  v19 = v9;
  v20 = v10;
  LOWORD(v21) = v11;
  BYTE2(v21) = v12;
  BYTE3(v21) = v3;
  BYTE4(v21) = v5;
  BYTE5(v21) = v16;
  BYTE6(v21) = v15;
  REMeshAssetCreateExtrudedTextDescriptor();
  swift_release();
  swift_release();
  NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(_OWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v15);
  v5 = v17;
  v6 = v18;
  __swift_project_boxed_opaque_existential_1(&v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((uint64_t)a1);
  v8 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for BoxMeshResource();
    v10 = swift_allocObject();
    swift_retain();
    REGeomBuildBoxDefaultOptions();
    v11 = v17;
    v12 = BYTE1(v17);
    v13 = BYTE2(v17);
    v14 = v16;
    *(_QWORD *)(v10 + 24) = v15;
    *(_OWORD *)(v10 + 32) = v14;
    *(_BYTE *)(v10 + 48) = v11;
    *(_BYTE *)(v10 + 49) = v12;
    *(_BYTE *)(v10 + 50) = v13;
    *(_BYTE *)(v10 + 52) = 0;
    swift_release();
    *(_QWORD *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    *(_OWORD *)(v10 + 24) = *a1;
    *(_OWORD *)(v10 + 36) = *(_OWORD *)((char *)a1 + 12);
    *(_BYTE *)(v10 + 52) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  __int16 v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  _BYTE v24[20];
  uint64_t v25;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v22);
  v5 = *(_QWORD *)&v24[12];
  v6 = v25;
  __swift_project_boxed_opaque_existential_1(&v22, *(uint64_t *)&v24[12]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((uint64_t *)a1);
  v8 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for BoxWithRoundedCornersMeshResource();
    v10 = swift_allocObject();
    swift_retain();
    REGeomBuildBoxWithRoundedCornersDefaultOptions();
    v11 = v23;
    v12 = *(_DWORD *)&v24[16];
    v13 = v25;
    v14 = BYTE1(v25);
    v15 = BYTE2(v25);
    v16 = BYTE3(v25);
    v17 = BYTE4(v25);
    v18 = BYTE5(v25);
    v19 = BYTE6(v25);
    v20 = *(_OWORD *)v24;
    *(_QWORD *)(v10 + 24) = v22;
    *(_WORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 36) = v20;
    *(_DWORD *)(v10 + 52) = v12;
    *(_BYTE *)(v10 + 56) = v13;
    *(_BYTE *)(v10 + 57) = v14;
    *(_BYTE *)(v10 + 58) = v15;
    *(_BYTE *)(v10 + 59) = v16;
    *(_BYTE *)(v10 + 60) = v17;
    *(_BYTE *)(v10 + 61) = v18;
    *(_BYTE *)(v10 + 62) = v19;
    *(_BYTE *)(v10 + 64) = 0;
    swift_release();
    *(_QWORD *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    v21 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 40) = v21;
    *(_QWORD *)(v10 + 56) = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v10 + 64) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v11);
  v5 = v12;
  v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((int *)a1);
  v8 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for PlaneMeshResource();
    v10 = swift_allocObject();
    *(_DWORD *)(v10 + 24) = 0;
    *(_WORD *)(v10 + 28) = 0;
    *(_DWORD *)(v10 + 48) = 0;
    *(_BYTE *)(v10 + 52) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 38) = 0;
    *(_QWORD *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    *(_OWORD *)(v10 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 36) = *(_OWORD *)(a1 + 12);
    *(_BYTE *)(v10 + 52) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v18);
  v5 = v26;
  v6 = v27;
  __swift_project_boxed_opaque_existential_1(&v18, v26);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((int *)a1);
  v8 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for CylinderMeshResource();
    v10 = swift_allocObject();
    swift_retain();
    REGeomBuildCylinderDefaultOptions();
    v11 = v20;
    v12 = v21;
    v13 = v22;
    v14 = v23;
    v15 = v24;
    v16 = v25;
    v17 = v19;
    *(_DWORD *)(v10 + 24) = v18;
    *(_QWORD *)(v10 + 28) = v17;
    *(_DWORD *)(v10 + 36) = v11;
    *(_BYTE *)(v10 + 40) = v12;
    *(_BYTE *)(v10 + 41) = v13;
    *(_BYTE *)(v10 + 42) = v14;
    *(_BYTE *)(v10 + 43) = v15;
    *(_BYTE *)(v10 + 44) = v16;
    *(_BYTE *)(v10 + 48) = 0;
    swift_release();
    *(_QWORD *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    *(_OWORD *)(v10 + 24) = *(_OWORD *)a1;
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(a1 + 16);
    *(_BYTE *)(v10 + 48) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v22);
  v5 = v25;
  v6 = v26;
  __swift_project_boxed_opaque_existential_1(v22, v25);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((char *)a1);
  v8 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for TextMeshResource();
    v10 = swift_allocObject();
    swift_retain();
    REGeomBuildExtrudedTextDefaultOptions();
    v11 = v24;
    v12 = v25;
    v13 = v26;
    v14 = BYTE2(v26);
    v15 = BYTE3(v26);
    v16 = BYTE4(v26);
    v17 = BYTE5(v26);
    v18 = BYTE6(v26);
    v19 = v23;
    *(_BYTE *)(v10 + 24) = v22[0];
    *(_QWORD *)(v10 + 28) = v19;
    *(_QWORD *)(v10 + 40) = v11;
    *(_QWORD *)(v10 + 48) = v12;
    *(_WORD *)(v10 + 56) = v13;
    *(_BYTE *)(v10 + 58) = v14;
    *(_BYTE *)(v10 + 59) = v15;
    *(_BYTE *)(v10 + 60) = v16;
    *(_BYTE *)(v10 + 61) = v17;
    *(_BYTE *)(v10 + 62) = v18;
    *(_QWORD *)(v10 + 64) = 0xD000000000000013;
    *(_QWORD *)(v10 + 72) = 0x800000021BE93A50;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 0xE000000000000000;
    *(_BYTE *)(v10 + 96) = 0;
    swift_release();
    *(_QWORD *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    v20 = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a1 + 16);
    v21 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v10 + 72) = v21;
    *(_QWORD *)(v10 + 88) = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(v10 + 24) = v20;
    outlined retain of TextMeshResource.Options(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v10 + 96) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(__int16 a1, unsigned int a2, char a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v22);
  v9 = v23;
  v10 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v11 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
  v12 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    v14 = HIWORD(a2) & 1;
    v15 = (a2 >> 8) & 1;
    v16 = a2 & 1;
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for SphereMeshResource();
    v17 = swift_allocObject();
    swift_retain();
    v18 = REGeomBuildSphereDefaultOptions();
    *(_WORD *)(v17 + 24) = v18;
    *(_DWORD *)(v17 + 28) = HIDWORD(v18);
    *(_BYTE *)(v17 + 32) = v19 & 1;
    *(_BYTE *)(v17 + 33) = v20 & 1;
    *(_BYTE *)(v17 + 34) = v21 & 1;
    *(_BYTE *)(v17 + 36) = 0;
    swift_release();
    *(_QWORD *)(v17 + 16) = v11;
    RERetain();
    REAssetSetSwiftObject();
    *(_WORD *)(v17 + 24) = a1;
    *(float *)(v17 + 28) = a4;
    *(_BYTE *)(v17 + 32) = v16;
    *(_BYTE *)(v17 + 33) = v15;
    *(_BYTE *)(v17 + 34) = v14;
    *(_BYTE *)(v17 + 36) = a3 & 1;
    RERelease();
    return v17;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(uint64_t a1, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v20);
  v11 = v21;
  v12 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v13 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(a1 & 0xFFFFFFFFFFFFLL, a2 & 0x10101, a4, a5);
  v14 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    v16 = HIWORD(a2) & 1;
    v17 = (a2 >> 8) & 1;
    v18 = a2 & 1;
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for CapsuleMeshResource();
    v19 = swift_allocObject();
    *(_DWORD *)(v19 + 24) = 0;
    *(_WORD *)(v19 + 28) = 0;
    *(_BYTE *)(v19 + 44) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 39) = 0;
    *(_QWORD *)(v19 + 16) = v13;
    RERetain();
    REAssetSetSwiftObject();
    *(_DWORD *)(v19 + 24) = a1;
    *(_WORD *)(v19 + 28) = WORD2(a1);
    *(float *)(v19 + 32) = a4;
    *(float *)(v19 + 36) = a5;
    *(_BYTE *)(v19 + 40) = v18;
    *(_BYTE *)(v19 + 41) = v17;
    *(_BYTE *)(v19 + 42) = v16;
    *(_BYTE *)(v19 + 44) = a3 & 1;
    RERelease();
    return v19;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(int a1, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v21);
  v11 = v22;
  v12 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v13 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
  v14 = (id)REAssetGetSwiftObject();
  result = swift_unknownObjectRelease();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    v16 = HIBYTE(a2) & 1;
    v17 = HIWORD(a2) & 1;
    v18 = (a2 >> 8) & 1;
    v19 = a2 & 1;
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for ConeMeshResource();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_BYTE *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 16) = v13;
    RERetain();
    REAssetSetSwiftObject();
    *(_DWORD *)(v20 + 24) = a1;
    *(float *)(v20 + 28) = a4;
    *(float *)(v20 + 32) = a5;
    *(_BYTE *)(v20 + 36) = v19;
    *(_BYTE *)(v20 + 37) = v18;
    *(_BYTE *)(v20 + 38) = v17;
    *(_BYTE *)(v20 + 39) = v16;
    *(_BYTE *)(v20 + 40) = a3 & 1;
    RERelease();
    return v20;
  }
  return result;
}

uint64_t PlaneMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 38) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t PlaneMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 38) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t PlaneMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return swift_deallocClassInstance();
}

uint64_t SphereMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;

  v2 = swift_allocObject();
  swift_retain();
  v3 = REGeomBuildSphereDefaultOptions();
  *(_WORD *)(v2 + 24) = v3;
  *(_DWORD *)(v2 + 28) = HIDWORD(v3);
  *(_BYTE *)(v2 + 32) = v4 & 1;
  *(_BYTE *)(v2 + 33) = v5 & 1;
  *(_BYTE *)(v2 + 34) = v6 & 1;
  *(_BYTE *)(v2 + 36) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t SphereMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;

  v2 = swift_allocObject();
  swift_retain();
  v3 = REGeomBuildSphereDefaultOptions();
  *(_WORD *)(v2 + 24) = v3;
  *(_DWORD *)(v2 + 28) = HIDWORD(v3);
  *(_BYTE *)(v2 + 32) = v4 & 1;
  *(_BYTE *)(v2 + 33) = v5 & 1;
  *(_BYTE *)(v2 + 34) = v6 & 1;
  *(_BYTE *)(v2 + 36) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t SphereMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t CapsuleMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 39) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t CapsuleMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 39) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t CapsuleMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t ConeMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t ConeMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t ConeMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t CylinderMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildCylinderDefaultOptions();
  *(_DWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 28) = v5;
  *(_DWORD *)(v2 + 36) = v6;
  *(_BYTE *)(v2 + 40) = v7;
  *(_BYTE *)(v2 + 41) = v8;
  *(_BYTE *)(v2 + 42) = v9;
  *(_BYTE *)(v2 + 43) = v10;
  *(_BYTE *)(v2 + 44) = v11;
  *(_BYTE *)(v2 + 48) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t CylinderMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildCylinderDefaultOptions();
  *(_DWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 28) = v5;
  *(_DWORD *)(v2 + 36) = v6;
  *(_BYTE *)(v2 + 40) = v7;
  *(_BYTE *)(v2 + 41) = v8;
  *(_BYTE *)(v2 + 42) = v9;
  *(_BYTE *)(v2 + 43) = v10;
  *(_BYTE *)(v2 + 44) = v11;
  *(_BYTE *)(v2 + 48) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t CylinderMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t BoxMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  char v6;
  char v7;
  char v8;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxDefaultOptions();
  *(_QWORD *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = v5;
  *(_BYTE *)(v2 + 48) = v6;
  *(_BYTE *)(v2 + 49) = v7;
  *(_BYTE *)(v2 + 50) = v8;
  *(_BYTE *)(v2 + 52) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t BoxMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  char v6;
  char v7;
  char v8;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxDefaultOptions();
  *(_QWORD *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = v5;
  *(_BYTE *)(v2 + 48) = v6;
  *(_BYTE *)(v2 + 49) = v7;
  *(_BYTE *)(v2 + 50) = v8;
  *(_BYTE *)(v2 + 52) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t BoxWithRoundedCornersMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  *(_QWORD *)(v2 + 24) = v4;
  *(_WORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 36) = v6;
  *(_DWORD *)(v2 + 52) = v7;
  *(_BYTE *)(v2 + 56) = v8;
  *(_BYTE *)(v2 + 57) = v9;
  *(_BYTE *)(v2 + 58) = v10;
  *(_BYTE *)(v2 + 59) = v11;
  *(_BYTE *)(v2 + 60) = v12;
  *(_BYTE *)(v2 + 61) = v13;
  *(_BYTE *)(v2 + 62) = v14;
  *(_BYTE *)(v2 + 64) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t BoxWithRoundedCornersMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  *(_QWORD *)(v2 + 24) = v4;
  *(_WORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 36) = v6;
  *(_DWORD *)(v2 + 52) = v7;
  *(_BYTE *)(v2 + 56) = v8;
  *(_BYTE *)(v2 + 57) = v9;
  *(_BYTE *)(v2 + 58) = v10;
  *(_BYTE *)(v2 + 59) = v11;
  *(_BYTE *)(v2 + 60) = v12;
  *(_BYTE *)(v2 + 61) = v13;
  *(_BYTE *)(v2 + 62) = v14;
  *(_BYTE *)(v2 + 64) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t BoxWithRoundedCornersMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t TextMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  TextMeshResource.init(_:)(a1);
  return v2;
}

uint64_t TextMeshResource.init(_:)(uint64_t a1)
{
  uint64_t v1;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  swift_retain();
  REGeomBuildExtrudedTextDefaultOptions();
  *(_BYTE *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 28) = v5;
  *(_QWORD *)(v1 + 40) = v6;
  *(_QWORD *)(v1 + 48) = v7;
  *(_WORD *)(v1 + 56) = v8;
  *(_BYTE *)(v1 + 58) = v9;
  *(_BYTE *)(v1 + 59) = v10;
  *(_BYTE *)(v1 + 60) = v11;
  *(_BYTE *)(v1 + 61) = v12;
  *(_BYTE *)(v1 + 62) = v13;
  *(_QWORD *)(v1 + 64) = 0xD000000000000013;
  *(_QWORD *)(v1 + 72) = 0x800000021BE93A50;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  *(_BYTE *)(v1 + 96) = 0;
  swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v1;
}

uint64_t TextMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v2 = swift_allocObject();
  swift_retain();
  REGeomBuildExtrudedTextDefaultOptions();
  *(_BYTE *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 28) = v5;
  *(_QWORD *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v7;
  *(_WORD *)(v2 + 56) = v8;
  *(_BYTE *)(v2 + 58) = v9;
  *(_BYTE *)(v2 + 59) = v10;
  *(_BYTE *)(v2 + 60) = v11;
  *(_BYTE *)(v2 + 61) = v12;
  *(_BYTE *)(v2 + 62) = v13;
  *(_QWORD *)(v2 + 64) = 0xD000000000000013;
  *(_QWORD *)(v2 + 72) = 0x800000021BE93A50;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0xE000000000000000;
  *(_BYTE *)(v2 + 96) = 0;
  swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

CFStringRef static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)(uint64_t a1, uint64_t a2, const __CTFont *a3, char a4, unsigned __int8 a5, char a6, float a7, double a8, double a9, double a10, double a11)
{
  char v20;
  char v21;
  char v22;
  char v23;
  double Size;
  uint64_t inited;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  CFStringRef result;
  __CFString *v36;
  char v37;
  char v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE v47[4];
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  REGeomBuildExtrudedTextDefaultOptions();
  v20 = v54;
  v21 = v55;
  v22 = v56;
  v23 = v57;
  v44 = v58;
  Size = CTFontGetSize(a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50940;
  v26 = a8;
  v27 = a9;
  *(float *)(inited + 32) = v26;
  *(float *)(inited + 36) = v27;
  specialized SIMD.init<A>(_:)(inited);
  v29 = v28;
  swift_setDeallocating();
  v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_21BE50940;
  v31 = a10;
  v32 = a11;
  *(float *)(v30 + 32) = v31;
  *(float *)(v30 + 36) = v32;
  specialized SIMD.init<A>(_:)(v30);
  v34 = v33;
  swift_setDeallocating();
  result = CTFontCopyName(a3, (CFStringRef)*MEMORY[0x24BDC4D38]);
  if (result)
  {
    v36 = (__CFString *)result;
    if ((a4 & 0xFC) != 0)
      v37 = 4;
    else
      v37 = a4;
    if (a5 >= 6u)
      v38 = 4;
    else
      v38 = a5;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    REGeomBuildExtrudedTextDefaultOptions();
    v47[0] = a6;
    v39 = Size;
    v48 = v39;
    v49 = a7;
    v50 = v29;
    v51 = v34;
    v52 = v38;
    v53 = v37;
    v54 = v20;
    v55 = v21;
    v56 = v22;
    v57 = v23;
    v58 = v44;
    v59 = v40;
    v60 = v42;
    v61 = a1;
    v62 = a2;
    swift_bridgeObjectRetain();
    v43 = specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)v47, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (CFStringRef)v43;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TextMeshResource.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextMeshResource.deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextMeshResource.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t __MeshCompileOptions.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = REMeshCompileOptionsCreate();
  return v0;
}

uint64_t __MeshCompileOptions.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t __MeshCompileOptions.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.getter()
{
  return REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes();
}

uint64_t __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.setter()
{
  return REMeshCompileOptionsSetGenerateVertexFaceAdjacencyAttributes();
}

uint64_t (*__MeshCompileOptions.generateVertexFaceAdjacencyAttributes.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes();
  return __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.modify;
}

uint64_t __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.modify()
{
  return REMeshCompileOptionsSetGenerateVertexFaceAdjacencyAttributes();
}

uint64_t __MeshCompileOptions.reorderVertexCaching.getter()
{
  return REMeshCompileOptionsGetReorderVertexCaching();
}

uint64_t __MeshCompileOptions.reorderVertexCaching.setter()
{
  return REMeshCompileOptionsSetReorderVertexCaching();
}

uint64_t (*__MeshCompileOptions.reorderVertexCaching.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetReorderVertexCaching();
  return __MeshCompileOptions.reorderVertexCaching.modify;
}

uint64_t __MeshCompileOptions.reorderVertexCaching.modify()
{
  return REMeshCompileOptionsSetReorderVertexCaching();
}

uint64_t __MeshCompileOptions.repairTangents.getter()
{
  return REMeshCompileOptionsGetRepairTangents();
}

uint64_t __MeshCompileOptions.repairTangents.setter()
{
  return REMeshCompileOptionsSetRepairTangents();
}

uint64_t (*__MeshCompileOptions.repairTangents.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetRepairTangents();
  return __MeshCompileOptions.repairTangents.modify;
}

uint64_t __MeshCompileOptions.repairTangents.modify()
{
  return REMeshCompileOptionsSetRepairTangents();
}

uint64_t __MeshCompileOptions.mergeVerticesIfPolygonSoup.getter()
{
  return REMeshCompileOptionsGetMergeVerticesIfPolygonSoup();
}

uint64_t __MeshCompileOptions.mergeVerticesIfPolygonSoup.setter()
{
  return REMeshCompileOptionsSetMergeVerticesIfPolygonSoup();
}

uint64_t (*__MeshCompileOptions.mergeVerticesIfPolygonSoup.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetMergeVerticesIfPolygonSoup();
  return __MeshCompileOptions.mergeVerticesIfPolygonSoup.modify;
}

uint64_t __MeshCompileOptions.mergeVerticesIfPolygonSoup.modify()
{
  return REMeshCompileOptionsSetMergeVerticesIfPolygonSoup();
}

uint64_t __MeshCompileOptions.preserveSharpFeatures.getter()
{
  return REMeshCompileOptionsGetPreserveSharpFeatures();
}

uint64_t __MeshCompileOptions.preserveSharpFeatures.setter()
{
  return REMeshCompileOptionsSetPreserveSharpFeatures();
}

uint64_t (*__MeshCompileOptions.preserveSharpFeatures.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetPreserveSharpFeatures();
  return __MeshCompileOptions.preserveSharpFeatures.modify;
}

uint64_t __MeshCompileOptions.preserveSharpFeatures.modify()
{
  return REMeshCompileOptionsSetPreserveSharpFeatures();
}

uint64_t __MeshCompileOptions.preserveSubdivisonSurfaceData.getter()
{
  return REMeshCompileOptionsGetPreserveSubdivisonSurfaceData();
}

uint64_t __MeshCompileOptions.preserveSubdivisonSurfaceData.setter()
{
  return REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
}

uint64_t (*__MeshCompileOptions.preserveSubdivisonSurfaceData.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetPreserveSubdivisonSurfaceData();
  return __MeshCompileOptions.preserveSubdivisonSurfaceData.modify;
}

uint64_t __MeshCompileOptions.preserveSubdivisonSurfaceData.modify()
{
  return REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
}

uint64_t __MeshCompileOptions.generateDecimatedMesh.getter()
{
  return REMeshCompileOptionsGetGenerateDecimatedMesh();
}

uint64_t __MeshCompileOptions.generateDecimatedMesh.setter()
{
  return REMeshCompileOptionsSetGenerateDecimatedMesh();
}

uint64_t (*__MeshCompileOptions.generateDecimatedMesh.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REMeshCompileOptionsGetGenerateDecimatedMesh();
  return __MeshCompileOptions.generateDecimatedMesh.modify;
}

uint64_t __MeshCompileOptions.generateDecimatedMesh.modify()
{
  return REMeshCompileOptionsSetGenerateDecimatedMesh();
}

BOOL static __MeshCompileOptions.AttributeCompressionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void __MeshCompileOptions.AttributeCompressionType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int __MeshCompileOptions.AttributeCompressionType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t __MeshCompileOptions.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  int AttributeCompressionType;
  uint64_t result;
  uint64_t v4;

  String.utf8CString.getter();
  AttributeCompressionType = REMeshCompileOptionsGetAttributeCompressionType();
  result = swift_release();
  if (AttributeCompressionType)
    v4 = 0;
  else
    v4 = 3;
  *a1 = v4;
  return result;
}

uint64_t __MeshCompileOptions.subscript.setter(_QWORD *a1)
{
  if (*a1 == 3)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMeshCompileOptionsClearAttributeCompressionType();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMeshCompileOptionsSetAttributeCompressionType();
  }
  return swift_release();
}

void (*__MeshCompileOptions.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD **a1)
{
  uint64_t v3;
  _DWORD *v7;
  int AttributeCompressionType;
  unint64_t v9;
  unint64_t v10;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[8] = 0;
  *((_BYTE *)v7 + 36) = 0;
  *((_QWORD *)v7 + 1) = a2;
  *((_QWORD *)v7 + 2) = a3;
  *((_QWORD *)v7 + 3) = *(_QWORD *)(v3 + 16);
  String.utf8CString.getter();
  AttributeCompressionType = REMeshCompileOptionsGetAttributeCompressionType();
  swift_release();
  if (AttributeCompressionType && (v9 = *((unsigned __int8 *)v7 + 36), v9 <= 2))
    v10 = v9 | ((unint64_t)v7[8] << 32);
  else
    v10 = 3;
  *(_QWORD *)v7 = v10;
  return __MeshCompileOptions.subscript.modify;
}

void __MeshCompileOptions.subscript.modify(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  if (**a1 == 3)
  {
    String.utf8CString.getter();
    REMeshCompileOptionsClearAttributeCompressionType();
  }
  else
  {
    String.utf8CString.getter();
    REMeshCompileOptionsSetAttributeCompressionType();
  }
  swift_release();
  free(v1);
}

uint64_t static MeshResource.generateMesh(vertexCountPerPolygon:vertexIndicesPerPolygon:vertexPositions:vertexUVs:vertexNormals:vertexTangents:vertexBitangents:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = *(_QWORD *)(a2 + 16);
  if (!HIDWORD(v8))
  {
    if (a1)
    {
      v14 = v8 / a1;
      v15 = specialized _copyCollectionToContiguousArray<A>(_:)(v14, a1);
      v16 = specialized static MeshResource.generateMesh(polygonCount:vertexCountPerPolygon:vertexIndicesPerPolygon:vertexPositions:vertexUVs:vertexNormals:vertexTangents:vertexBitangents:)(v14, v15, a2, a3, a4, a5, a6, a7);
      swift_release();
      return v16;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void MeshResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t MeshResource.addToLoadRequest(_:)()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 16))
    return REAssetLoadRequestAddAsset();
  return result;
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance MeshResource()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    return REAssetLoadRequestAddAsset();
  return result;
}

uint64_t MeshResource.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MaxMaterialIndex;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v9 + 32) = 0xD000000000000015;
  *(_QWORD *)(v9 + 40) = 0x800000021BE93A70;
  v10 = *(_QWORD *)(v1 + 16);
  if (!v10)
    goto LABEL_5;
  swift_retain();
  MaxMaterialIndex = REMeshAssetGetMaxMaterialIndex();
  v12 = MaxMaterialIndex + 1;
  if (__OFADD__(MaxMaterialIndex, 1))
  {
    __break(1u);
LABEL_5:
    swift_retain();
    v12 = 0;
  }
  v13 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v9 + 48) = v12;
  *(_QWORD *)(v9 + 72) = v13;
  *(_QWORD *)(v9 + 80) = 0x73746E65746E6F63;
  *(_QWORD *)(v9 + 88) = 0xE800000000000000;
  *(_QWORD *)(v9 + 120) = &type metadata for MeshResource.Contents;
  v14 = swift_allocObject();
  *(_QWORD *)(v9 + 96) = v14;
  MeshResource.Contents.init(_:)(v10, (uint64_t *)(v14 + 16));
  *(_QWORD *)(v9 + 128) = 0x73646E756F62;
  *(_QWORD *)(v9 + 136) = 0xE600000000000000;
  if (v10)
  {
    REEntityComputeLocalBoundingBox();
    v21 = v15;
    v22 = v16;
  }
  else
  {
    v22 = xmmword_21BE52470;
    v21 = xmmword_21BE52460;
  }
  *(_QWORD *)(v9 + 168) = &type metadata for BoundingBox;
  v17 = swift_allocObject();
  *(_QWORD *)(v9 + 144) = v17;
  v18 = v22;
  *(_OWORD *)(v17 + 16) = v21;
  *(_OWORD *)(v17 + 32) = v18;
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  type metadata accessor for MeshResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshResource()
{
  return MeshResource.customMirror.getter();
}

uint64_t specialized closure #1 in MeshBuffer.init<A>(_:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
    return 0;
  v3 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD3<Float>]>>);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = 0;
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, _QWORD *a6)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_24DFD7AC8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt8>, (uint64_t)&unk_24DFD7C30);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt16>, (uint64_t)&unk_24DFD7C58);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt32>, (uint64_t)&unk_24DFD7C80);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int8>, (uint64_t)&unk_24DFD7CA8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int16>, (uint64_t)&unk_24DFD7CD0);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>, (uint64_t)&unk_24DFD7CF8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Float>, (uint64_t)&unk_24DFD7D20);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Double>, (uint64_t)&unk_24DFD7D48);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD2<Float>>, (uint64_t)&unk_24DFD7D70);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD4<Float>>, (uint64_t)&unk_24DFD7DC0);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>, (uint64_t)&unk_24DFD7DE8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<FloatVector3Packed>, (uint64_t)&unk_24DFD7D98);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, _QWORD *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  char v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _UNKNOWN **v46;
  _OWORD v47[6];
  _OWORD v48[3];

  v16 = __swift_instantiateConcreteTypeFromMangledName(a7);
  v45 = v16;
  v46 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  v43 = a8;
  v17 = (_OWORD *)swift_allocObject();
  *(_QWORD *)&v44 = v17;
  v18 = a1[5];
  v17[5] = a1[4];
  v17[6] = v18;
  v17[7] = a1[6];
  *(_OWORD *)((char *)v17 + 121) = *(_OWORD *)((char *)a1 + 105);
  v19 = a1[1];
  v17[1] = *a1;
  v17[2] = v19;
  v20 = a1[3];
  v17[3] = a1[2];
  v17[4] = v20;
  v21 = a4 & 0x101;
  v22 = (_QWORD *)*a6;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v21);
  v25 = v22[2];
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
    goto LABEL_14;
  }
  v28 = v23;
  v29 = v22[3];
  if (v29 >= v27 && (a5 & 1) != 0)
  {
LABEL_7:
    v30 = (_QWORD *)*a6;
    if ((v28 & 1) != 0)
    {
LABEL_8:
      v31 = v30[7] + 40 * v24;
      __swift_destroy_boxed_opaque_existential_1(v31);
      return outlined init with take of BindableDataInternal(&v44, v31);
    }
    goto LABEL_11;
  }
  if (v29 >= v27 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, a5 & 1);
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v21);
  if ((v28 & 1) != (v34 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v24 = v33;
  v30 = (_QWORD *)*a6;
  if ((v28 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v35 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v44, v16);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (_OWORD *)((char *)&v43 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *, __n128))(v39 + 16))(v38, v36);
  v40 = v38[5];
  v47[4] = v38[4];
  v47[5] = v40;
  v48[0] = v38[6];
  *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v38 + 105);
  v41 = v38[1];
  v47[0] = *v38;
  v47[1] = v41;
  v42 = v38[3];
  v47[2] = v38[2];
  v47[3] = v42;
  specialized _NativeDictionary._insert(at:key:value:)(v24, a2, a3, v21, v47, v30, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, _OWORD *a5, _QWORD *a6, uint64_t *a7)
{
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;

  v23 = __swift_instantiateConcreteTypeFromMangledName(a7);
  v24 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  v13 = (_OWORD *)swift_allocObject();
  *(_QWORD *)&v22 = v13;
  v14 = a5[5];
  v13[5] = a5[4];
  v13[6] = v14;
  v13[7] = a5[6];
  *(_OWORD *)((char *)v13 + 121) = *(_OWORD *)((char *)a5 + 105);
  v15 = a5[1];
  v13[1] = *a5;
  v13[2] = v15;
  v16 = a5[3];
  v13[3] = a5[2];
  v13[4] = v16;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v17 = a6[6] + 24 * a1;
  *(_QWORD *)v17 = a2;
  *(_QWORD *)(v17 + 8) = a3;
  *(_BYTE *)(v17 + 16) = a4 & 1;
  *(_BYTE *)(v17 + 17) = HIBYTE(a4) & 1;
  result = outlined init with take of BindableDataInternal(&v22, a6[7] + 40 * a1);
  v19 = a6[2];
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    a6[2] = v21;
  return result;
}

uint64_t specialized MeshBufferContainer.positions.setter(uint64_t a1)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[5];

  v15 = *(_OWORD *)(a1 + 16);
  v16 = *(_OWORD *)a1;
  v13 = *(_OWORD *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 32);
  v2 = *(_BYTE *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 65);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_BYTE *)(a1 + 80);
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
  v17[4] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  v6 = swift_allocObject();
  v17[0] = v6;
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  if (one-time initialization token for triangleIndices != -1)
    swift_once();
  v7 = static MeshBuffers.Identifier.triangleIndices == 0x6F50786574726576
    && *(_QWORD *)algn_2551A1378 == 0xEE006E6F69746973;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    v8 = 2;
  else
    v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 64);
  v11 = *(_BYTE *)(a1 + 65);
  strcpy((char *)(v6 + 16), "vertexPosition");
  *(_BYTE *)(v6 + 31) = -18;
  *(_WORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v9;
  *(_BYTE *)(v6 + 48) = v8;
  *(_BYTE *)(v6 + 49) = v10;
  *(_BYTE *)(v6 + 50) = v11;
  *(_OWORD *)(v6 + 56) = v16;
  *(_OWORD *)(v6 + 72) = v15;
  *(_OWORD *)(v6 + 88) = v14;
  *(_OWORD *)(v6 + 104) = v13;
  *(_BYTE *)(v6 + 120) = v2;
  *(_BYTE *)(v6 + 121) = v3 & 1;
  *(_QWORD *)(v6 + 128) = v4;
  *(_BYTE *)(v6 + 136) = v5;
  return specialized Dictionary.subscript.setter((uint64_t)v17, 0x6F50786574726576, 0xEE006E6F69746973, 0);
}

uint64_t specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(char a1, float a2, float a3, float a4, float a5)
{
  float v10;
  __int16 v11;
  uint64_t v12;
  uint64_t inited;
  __int128 v15;
  float v16;
  float v17;
  char v18;

  v10 = fminf(a5, fminf(a2, fminf(a3, fminf(a2, a4))) * 0.5);
  REGeomBuildBoxDefaultOptions();
  v11 = WORD3(v15);
  if (a5 > 0.0)
    v11 = 16;
  WORD3(v15) = v11;
  *((_QWORD *)&v15 + 1) = __PAIR64__(LODWORD(a2), LODWORD(v10));
  v16 = a3;
  v17 = a4;
  v18 = a1 ^ 1;
  v12 = specialized PrimitiveComponentType.init(options:splitMeshes:)(&v15, a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for MeshResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for MeshResource;
  *(_QWORD *)(inited + 32) = v12;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v12;
}

{
  uint64_t v5;

  *(_BYTE *)(v5 + 92) = a1;
  *(float *)(v5 + 84) = a4;
  *(float *)(v5 + 88) = a5;
  *(float *)(v5 + 76) = a2;
  *(float *)(v5 + 80) = a3;
  return swift_task_switch();
}

uint64_t specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)()
{
  uint64_t v0;
  char v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  __int16 v7;
  int v9;
  __int16 v10;
  __int16 v11;
  char v12;
  char v13;

  v1 = *(_BYTE *)(v0 + 92);
  v3 = *(float *)(v0 + 84);
  v2 = *(float *)(v0 + 88);
  v5 = *(float *)(v0 + 76);
  v4 = *(float *)(v0 + 80);
  v6 = fminf(v2, fminf(v5, fminf(v4, fminf(v5, v3))) * 0.5);
  REGeomBuildBoxDefaultOptions();
  v7 = v11;
  if (v2 > 0.0)
    v7 = 16;
  *(_DWORD *)(v0 + 48) = v9;
  *(_WORD *)(v0 + 52) = v10;
  *(_WORD *)(v0 + 54) = v7;
  *(float *)(v0 + 56) = v6;
  *(float *)(v0 + 60) = v5;
  *(float *)(v0 + 64) = v4;
  *(float *)(v0 + 68) = v3;
  *(_BYTE *)(v0 + 72) = v12;
  *(_BYTE *)(v0 + 73) = v13;
  *(_BYTE *)(v0 + 74) = (v1 & 1) == 0;
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(_BYTE *)(v0 + 92);
  swift_release();
  *(_QWORD *)(v0 + 24) = specialized PrimitiveComponentType.init(options:splitMeshes:)((_OWORD *)(v0 + 48), v1);
  v4 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                         + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = static MeshResource.generatePlane(width:depth:cornerRadius:);
  return v4();
}

uint64_t specialized static MeshResource.generateMesh(polygonCount:vertexCountPerPolygon:vertexIndicesPerPolygon:vertexPositions:vertexUVs:vertexNormals:vertexTangents:vertexBitangents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a5)
    v8 = a5;
  else
    v8 = a4;
  v9 = *(_QWORD *)(v8 + 16);
  if (v9 != *(_QWORD *)(a4 + 16))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a6 && *(_QWORD *)(a6 + 16) != v9)
    goto LABEL_20;
  if (a7 && *(_QWORD *)(a7 + 16) != v9)
    goto LABEL_21;
  if (a8 && *(_QWORD *)(a8 + 16) != v9)
LABEL_22:
    __break(1u);
  if (HIDWORD(v9))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (REGeomMeshCreateFromCoreAttributes())
  {
    v10 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v10, (uint64_t)v17);
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v13 = REAssetManagerMeshMemoryAssetCreate();
    if (v13)
    {
      v14 = v13;
      if ((id)REAssetGetSwiftObject())
      {
        type metadata accessor for MeshResource();
        v15 = swift_dynamicCastClass();
        if (v15)
        {
LABEL_18:
          RERelease();
          RERelease();
          return v15;
        }
        swift_unknownObjectRelease();
      }
      type metadata accessor for MeshResource();
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v14;
      RERetain();
      REAssetSetSwiftObject();
      goto LABEL_18;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_21BDE4A60()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BDE4AAC()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType;
  if (!lazy protocol witness table cache variable for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __MeshCompileOptions.AttributeCompressionType, &type metadata for __MeshCompileOptions.AttributeCompressionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType);
  }
  return result;
}

uint64_t sub_21BDE4B04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4B30()
{
  return REMeshCompileOptionsSetGenerateVertexFaceAdjacencyAttributes();
}

uint64_t sub_21BDE4B44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetReorderVertexCaching();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4B70()
{
  return REMeshCompileOptionsSetReorderVertexCaching();
}

uint64_t sub_21BDE4B84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetRepairTangents();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4BB0()
{
  return REMeshCompileOptionsSetRepairTangents();
}

uint64_t sub_21BDE4BC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetMergeVerticesIfPolygonSoup();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4BF0()
{
  return REMeshCompileOptionsSetMergeVerticesIfPolygonSoup();
}

uint64_t sub_21BDE4C04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetPreserveSharpFeatures();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4C30()
{
  return REMeshCompileOptionsSetPreserveSharpFeatures();
}

uint64_t sub_21BDE4C44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetPreserveSubdivisonSurfaceData();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4C70()
{
  return REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
}

uint64_t sub_21BDE4C84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REMeshCompileOptionsGetGenerateDecimatedMesh();
  *a1 = result;
  return result;
}

uint64_t sub_21BDE4CB0()
{
  return REMeshCompileOptionsSetGenerateDecimatedMesh();
}

uint64_t sub_21BDE4CC4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __MeshCompileOptions.subscript.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21BDE4D00(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain();
  return __MeshCompileOptions.subscript.setter(&v2);
}

uint64_t sub_21BDE4D50()
{
  return 0;
}

uint64_t method lookup function for MeshResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MeshResource.coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of MeshResource.expectedMaterialCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of MeshResource.bounds.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MeshResource.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for PlaneMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SphereMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CapsuleMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ConeMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CylinderMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for BoxMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for BoxWithRoundedCornersMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TextMeshResource()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __MeshCompileOptions()
{
  return objc_opt_self();
}

uint64_t method lookup function for __MeshCompileOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __MeshCompileOptions.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for __MeshCompileOptions.AttributeCompressionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BDE4F18 + 4 * byte_21BE7CE55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BDE4F4C + 4 * byte_21BE7CE50[v4]))();
}

uint64_t sub_21BDE4F4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDE4F54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDE4F5CLL);
  return result;
}

uint64_t sub_21BDE4F68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDE4F70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BDE4F74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDE4F7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __MeshCompileOptions.AttributeCompressionType()
{
  return &type metadata for __MeshCompileOptions.AttributeCompressionType;
}

uint64_t destroy for TextMeshResource.Options()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextMeshResource.Options(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextMeshResource.Options(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TextMeshResource.Options(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextMeshResource.Options(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextMeshResource.Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextMeshResource.Options()
{
  return &type metadata for TextMeshResource.Options;
}

uint64_t outlined retain of TextMeshResource.Options(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21BDE5268()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void static CollisionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 57;
}

double CollisionComponent.init(shapes:mode:filter:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  double result;

  v4 = *a2;
  *(_DWORD *)(a4 + 12) = 0;
  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = v4;
  result = *a3;
  *(double *)(a4 + 16) = *a3;
  return result;
}

void CollisionComponent.collisionOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 12) & 1 | (2 * ((*(_DWORD *)(v1 + 12) >> 2) & 1u));
}

double CollisionComponent.init(shapes:isStatic:filter:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double result;

  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = a2 & 1;
  result = *a3;
  *(double *)(a4 + 16) = *a3;
  return result;
}

BOOL static CollisionComponent.Mode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CollisionComponent.Mode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CollisionComponent.Mode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CollisionComponent.InteractionType.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static CollisionComponent.InteractionType.static.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CollisionComponent.InteractionType.trigger.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static CollisionComponent.InteractionType.reportCollisionContactsFull.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CollisionComponent.InteractionType.solveContacts.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t CollisionComponent.InteractionType.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t *CollisionComponent.InteractionType.setOptions(options:)(uint64_t *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *result;
  v3 = *v1;
  if ((*result & 1) != 0)
  {
    if ((v3 & 1) != 0)
      goto LABEL_7;
    v3 |= 1u;
  }
  else
  {
    if ((v3 & 1) == 0)
      goto LABEL_7;
    v3 &= ~1u;
  }
  *v1 = v3;
LABEL_7:
  if ((v2 & 2) != 0)
  {
    if ((v3 & 4) != 0)
      return result;
    v4 = v3 | 4;
  }
  else
  {
    if ((v3 & 4) == 0)
      return result;
    v4 = v3 & 0xFFFFFFFB;
  }
  *v1 = v4;
  return result;
}

uint64_t CollisionComponent.shapes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CollisionComponent.shapes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CollisionComponent.shapes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionComponent.mode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *CollisionComponent.mode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*CollisionComponent.mode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionComponent.interactionType.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 12);
}

_DWORD *CollisionComponent.interactionType.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*CollisionComponent.interactionType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CollisionComponent.filter.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

double CollisionComponent.filter.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 16) = *a1;
  return result;
}

uint64_t (*CollisionComponent.filter.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CollisionComponent.init(shapes:interactionType:filter:)@<D0>(uint64_t a1@<X0>, int *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  double result;

  v4 = *a2;
  *(_QWORD *)a4 = a1;
  *(_DWORD *)(a4 + 12) = v4;
  *(_BYTE *)(a4 + 8) = 0;
  result = *a3;
  *(double *)(a4 + 16) = *a3;
  return result;
}

uint64_t CollisionComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Shape;
  uint64_t v3;
  uint64_t ChildCount;
  uint64_t v5;
  uint64_t ChildShape;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unsigned int InteractionType;
  char v27;
  int Group;
  uint64_t result;
  int v30;
  int v31;
  uint64_t v32;

  v32 = MEMORY[0x24BEE4AF8];
  Shape = REColliderComponentGetShape();
  if (!Shape)
  {
LABEL_20:
    InteractionType = REColliderComponentGetInteractionType();
    if ((InteractionType & 2) != 0)
      v27 = 1;
    else
      v27 = (InteractionType >> 2) & 2;
    Group = REColliderComponentGetGroup();
    result = REColliderComponentGetMask();
    *(_QWORD *)a1 = v32;
    *(_BYTE *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 12) = InteractionType;
    *(_DWORD *)(a1 + 16) = Group;
    *(_DWORD *)(a1 + 20) = result;
    return result;
  }
  v3 = Shape;
  if (RECollisionShapeAssetGetType() != 7)
  {
    v18 = (id)REAssetGetSwiftObject();
    type metadata accessor for ShapeResource();
    if (v18)
    {
      v19 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v3;
      REPoseIdentity();
      *(_OWORD *)(v19 + 32) = v20;
      *(_OWORD *)(v19 + 48) = v21;
      RERetain();
      REAssetSetSwiftObject();
    }
    swift_retain();
    REPoseIdentity();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v19 + 16);
    REPoseMultiply();
    *(_OWORD *)(v22 + 32) = v23;
    *(_OWORD *)(v22 + 48) = v24;
    RERetain();
    v25 = swift_release();
    MEMORY[0x220768F0C](v25);
    if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    goto LABEL_26;
  }
  ChildCount = RECompoundShapeAssetGetChildCount();
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(ChildCount, 0);
  specialized Array._endMutation()();
  if (ChildCount < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_19:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    goto LABEL_20;
  }
  if (!ChildCount)
    goto LABEL_20;
  v5 = 0;
  while (1)
  {
    if (ChildCount == v5)
    {
      __break(1u);
      goto LABEL_25;
    }
    ChildShape = RECompoundShapeAssetGetChildShape();
    if (!ChildShape)
      break;
    v7 = ChildShape;
    v8 = (id)REAssetGetSwiftObject();
    type metadata accessor for ShapeResource();
    if (v8)
    {
      v9 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v7;
      REPoseIdentity();
      v11 = v10;
      HIDWORD(v11) = v30;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      RERetain();
      REAssetSetSwiftObject();
    }
    RECompoundShapeAssetGetChildPose();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v9 + 16);
    swift_retain();
    REPoseMultiply();
    v15 = v14;
    HIDWORD(v15) = v31;
    *(_OWORD *)(v13 + 32) = v15;
    *(_OWORD *)(v13 + 48) = v16;
    RERetain();
    v17 = swift_release();
    MEMORY[0x220768F0C](v17);
    if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    ++v5;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    if (ChildCount == v5)
      goto LABEL_20;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static CollisionComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return CollisionComponent.init(_:)(a1);
}

uint64_t CollisionComponent.__toCore(_:)()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Compound;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v1 = *v0;
  result = specialized static ShapeResource.findShapeResource(_:)(*v0);
  if (result)
  {
LABEL_15:
    REColliderComponentSetShape();
    REColliderComponentSetGroup();
    REColliderComponentSetMask();
    REColliderComponentSetInteractionType();
    RENetworkMarkComponentDirty();
    return swift_release();
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v3 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_18;
  }
  result = swift_slowAlloc();
  if ((unint64_t)(v3 - 0x400000000000000) >> 59 != 31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v4 = (_QWORD *)result;
  result = swift_slowAlloc();
  v22 = result;
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v5 = 0;
        v6 = (_OWORD *)(result + 16);
        do
        {
          v7 = *(_QWORD *)(MEMORY[0x220769770](v5, v1) + 16);
          swift_unknownObjectRelease();
          v4[v5] = v7;
          v8 = MEMORY[0x220769770](v5, v1);
          v23 = *(_OWORD *)(v8 + 48);
          v24 = *(_OWORD *)(v8 + 32);
          swift_unknownObjectRelease();
          *(v6 - 1) = v24;
          *v6 = v23;
          v6 += 2;
          ++v5;
        }
        while (v3 != v5);
      }
      else
      {
        v9 = (uint64_t *)(v1 + 32);
        v10 = (_OWORD *)(result + 16);
        v11 = v4;
        v12 = v3;
        do
        {
          v13 = *v9++;
          *v11++ = *(_QWORD *)(v13 + 16);
          v14 = *(_OWORD *)(v13 + 48);
          *(v10 - 1) = *(_OWORD *)(v13 + 32);
          *v10 = v14;
          v10 += 2;
          --v12;
        }
        while (v12);
      }
    }
    v15 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v15, (uint64_t)v25);
    v16 = v26;
    v17 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    Compound = REAssetManagerCollisionShapeAssetCreateCompound();
    type metadata accessor for ShapeResource();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = Compound;
    REPoseIdentity();
    *(_OWORD *)(v19 + 32) = v20;
    *(_OWORD *)(v19 + 48) = v21;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    MEMORY[0x220772F44](v22, -1, -1);
    MEMORY[0x220772F44](v4, -1, -1);
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance CollisionComponent@<X0>(uint64_t a1@<X8>)
{
  return CollisionComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance CollisionComponent(_DWORD *a1@<X8>)
{
  *a1 = 57;
}

uint64_t CollisionComponent.isStatic.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 12) & 1;
}

uint64_t CollisionComponent.isStatic.setter(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(v1 + 12);
  if ((result & 1) != 0)
  {
    if ((v2 & 1) != 0)
      return result;
    v3 = v2 | 1;
  }
  else
  {
    if ((v2 & 1) == 0)
      return result;
    v3 = v2 & 0xFFFFFFFE;
  }
  *(_DWORD *)(v1 + 12) = v3;
  return result;
}

_BYTE *(*CollisionComponent.isStatic.modify(uint64_t a1))(_BYTE *result, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 12) & 1;
  return CollisionComponent.isStatic.modify;
}

_BYTE *CollisionComponent.isStatic.modify(_BYTE *result, char a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  if ((a2 & 1) != 0)
  {
    if (result[8])
    {
      if ((v3 & 1) != 0)
        return result;
LABEL_7:
      *(_DWORD *)(v2 + 12) = v3 | 1;
      return result;
    }
    goto LABEL_8;
  }
  if (!result[8])
  {
LABEL_8:
    if ((v3 & 1) != 0)
      *(_DWORD *)(v2 + 12) = v3 & 0xFFFFFFFE;
    return result;
  }
  if ((v3 & 1) == 0)
    goto LABEL_7;
  return result;
}

void static CollisionComponent.CollisionOptions.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CollisionComponent.CollisionOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static CollisionComponent.CollisionOptions.static.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CollisionComponent.CollisionOptions.fullContactInformation.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CollisionComponent.CollisionOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double CollisionComponent.init(shapes:mode:collisionOptions:filter:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  char v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v7 = *a2;
  *(_QWORD *)(a5 + 12) = 0x100000000;
  v8 = *a3;
  *(_DWORD *)(a5 + 20) = -1;
  *(_QWORD *)a5 = a1;
  *(_BYTE *)(a5 + 8) = v7;
  v10 = v8;
  CollisionComponent.InteractionType.setOptions(options:)(&v10);
  result = *a4;
  *(double *)(a5 + 16) = *a4;
  return result;
}

uint64_t *CollisionComponent.collisionOptions.setter(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = *result;
  v3 = *(_DWORD *)(v1 + 12);
  if ((*result & 1) != 0)
  {
    if ((v3 & 1) != 0)
      goto LABEL_7;
    v3 |= 1u;
  }
  else
  {
    if ((v3 & 1) == 0)
      goto LABEL_7;
    v3 &= ~1u;
  }
  *(_DWORD *)(v1 + 12) = v3;
LABEL_7:
  if ((v2 & 2) != 0)
  {
    if ((v3 & 4) != 0)
      return result;
    v4 = v3 | 4;
  }
  else
  {
    if ((v3 & 4) == 0)
      return result;
    v4 = v3 & 0xFFFFFFFB;
  }
  *(_DWORD *)(v1 + 12) = v4;
  return result;
}

uint64_t *(*CollisionComponent.collisionOptions.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 12) & 1 | (2 * ((*(_DWORD *)(v1 + 12) >> 2) & 1u));
  a1[1] = v1;
  return CollisionComponent.collisionOptions.modify;
}

uint64_t *CollisionComponent.collisionOptions.modify(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return CollisionComponent.InteractionType.setOptions(options:)(&v2);
}

uint64_t CollisionComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  int v23;
  int v24;

  v19 = a1;
  v18 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_BYTE *)v1 + 8);
  v11 = *((_DWORD *)v1 + 3);
  v10 = *((_DWORD *)v1 + 4);
  v12 = *((_DWORD *)v1 + 5);
  v20 = v8;
  v21 = v9;
  v22 = v11;
  v23 = v10;
  v24 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v13 + 32) = 0x736570616873;
  *(_QWORD *)(v13 + 40) = 0xE600000000000000;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ShapeResource]);
  *(_QWORD *)(v13 + 48) = v8;
  *(_QWORD *)(v13 + 72) = v14;
  *(_QWORD *)(v13 + 80) = 1701080941;
  *(_QWORD *)(v13 + 88) = 0xE400000000000000;
  *(_BYTE *)(v13 + 96) = v9;
  *(_QWORD *)(v13 + 120) = &type metadata for CollisionComponent.Mode;
  *(_QWORD *)(v13 + 128) = 0x7265746C6966;
  *(_QWORD *)(v13 + 136) = 0xE600000000000000;
  *(_DWORD *)(v13 + 144) = v10;
  *(_DWORD *)(v13 + 148) = v12;
  *(_QWORD *)(v13 + 168) = &type metadata for CollisionFilter;
  *(_QWORD *)(v13 + 176) = 0xD000000000000010;
  *(_QWORD *)(v13 + 184) = 0x800000021BE93520;
  *(_QWORD *)(v13 + 192) = v11 & 1 | (2 * ((v11 >> 2) & 1));
  *(_QWORD *)(v13 + 216) = &type metadata for CollisionComponent.CollisionOptions;
  *(_QWORD *)(v13 + 224) = 0x6369746174537369;
  *(_QWORD *)(v13 + 232) = 0xE800000000000000;
  *(_QWORD *)(v13 + 264) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v13 + 240) = v11 & 1;
  v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v18);
  swift_bridgeObjectRetain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL specialized static CollisionComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(unsigned __int8 *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  v11 = v4 == v8 && v5 == v9;
  return v2 == v6 && v3 == v7 && v11;
}

unint64_t lazy protocol witness table accessor for type CollisionComponent.Mode and conformance CollisionComponent.Mode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.Mode and conformance CollisionComponent.Mode;
  if (!lazy protocol witness table cache variable for type CollisionComponent.Mode and conformance CollisionComponent.Mode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.Mode, &type metadata for CollisionComponent.Mode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.Mode and conformance CollisionComponent.Mode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.InteractionType, &type metadata for CollisionComponent.InteractionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.InteractionType, &type metadata for CollisionComponent.InteractionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.InteractionType, &type metadata for CollisionComponent.InteractionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.InteractionType, &type metadata for CollisionComponent.InteractionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.CollisionOptions, &type metadata for CollisionComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.CollisionOptions, &type metadata for CollisionComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.CollisionOptions, &type metadata for CollisionComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CollisionComponent.CollisionOptions, &type metadata for CollisionComponent.CollisionOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

uint64_t sub_21BDE630C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 12) & 1;
  return result;
}

_BYTE *sub_21BDE631C(_BYTE *result, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(a2 + 12);
  if (*result == 1)
  {
    if ((v2 & 1) != 0)
      return result;
    v3 = v2 | 1;
  }
  else
  {
    if ((v2 & 1) == 0)
      return result;
    v3 = v2 & 0xFFFFFFFE;
  }
  *(_DWORD *)(a2 + 12) = v3;
  return result;
}

uint64_t sub_21BDE6348@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 12) & 1 | (2 * ((*(_DWORD *)(result + 12) >> 2) & 1u));
  return result;
}

uint64_t *sub_21BDE6360(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return CollisionComponent.InteractionType.setOptions(options:)(&v2);
}

uint64_t initializeBufferWithCopyOfBuffer for CollisionComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CollisionComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for CollisionComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

ValueMetadata *type metadata accessor for CollisionComponent()
{
  return &type metadata for CollisionComponent;
}

uint64_t storeEnumTagSinglePayload for CollisionComponent.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BDE64E8 + 4 * byte_21BE7D1E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BDE651C + 4 * byte_21BE7D1E0[v4]))();
}

uint64_t sub_21BDE651C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDE6524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDE652CLL);
  return result;
}

uint64_t sub_21BDE6538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDE6540);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BDE6544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDE654C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollisionComponent.Mode()
{
  return &type metadata for CollisionComponent.Mode;
}

ValueMetadata *type metadata accessor for CollisionComponent.InteractionType()
{
  return &type metadata for CollisionComponent.InteractionType;
}

ValueMetadata *type metadata accessor for CollisionComponent.CollisionOptions()
{
  return &type metadata for CollisionComponent.CollisionOptions;
}

uint64_t one-time initialization function for resourceCoreLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, resourceCoreLogger);
  __swift_project_value_buffer(v0, (uint64_t)resourceCoreLogger);
  return Logger.init(subsystem:category:)();
}

void one-time initialization function for sharedManager()
{
  uint64_t v0;
  id v1;

  type metadata accessor for InteractionNotificationsManager();
  v0 = swift_allocObject();
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for name != -1)
    swift_once();
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_notificationTriggerDidPostWithNotification_, static __RKCustomTriggerNotification.name, 0);

  static InteractionNotificationsManager.sharedManager = v0;
}

uint64_t InteractionNotificationsManager.__deallocating_deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for name != -1)
    swift_once();
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, static __RKCustomTriggerNotification.name, 0);

  return swift_deallocClassInstance();
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v23 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_37;
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [String : AnimationResource].Iterator._Variant();
        return (unint64_t)v2;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v22)
          goto LABEL_33;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v22)
            goto LABEL_33;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v22)
              goto LABEL_33;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v22)
                goto LABEL_33;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v22)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    v27 = v24;
    outlined init with take of Any(v26, v28);
    v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    v17 = result;
    if ((v18 & 1) != 0)
    {
      v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v16;
      v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_36;
    v2[2] = v21;
LABEL_8:
    v7 = v12;
    v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for InteractionNotificationsManager()
{
  return objc_opt_self();
}

uint64_t specialized InteractionNotificationsManager.notificationTriggerDidPost(notification:)()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  result = Notification.userInfo.getter();
  if (result)
  {
    v1 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(result);
    result = swift_bridgeObjectRelease();
    if (v1)
    {
      if (*(_QWORD *)(v1 + 16))
      {
        v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000024, 0x800000021BE84A70);
        if ((v3 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v17);
          type metadata accessor for Scene();
          if ((swift_dynamicCast() & 1) != 0)
          {
            if (*(_QWORD *)(v1 + 16)
              && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000029, 0x800000021BE84AA0),
                  (v5 & 1) != 0)
              && (outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v4, (uint64_t)&v17),
                  (swift_dynamicCast() & 1) != 0))
            {
              if (*(_QWORD *)(v1 + 16)
                && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000028, 0x800000021BE93D50),
                    (v7 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v6, (uint64_t)&v17);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity]);
                if (swift_dynamicCast())
                  v8 = v15;
                else
                  v8 = 0;
              }
              else
              {
                v8 = 0;
              }
              if (*(_QWORD *)(v1 + 16)
                && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002ELL, 0x800000021BE84B00),
                    (v10 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v9, (uint64_t)&v17);
              }
              else
              {
                v17 = 0u;
                v18 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v18 + 1))
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
                if (swift_dynamicCast())
                  v11 = v15;
                else
                  v11 = 0;
              }
              else
              {
                outlined destroy of BodyTrackingComponent?((uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
                v11 = 0;
              }
              Scene.__interactionService.getter();
              v13 = v12;
              ObjectType = swift_getObjectType();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, v16, v11, v8, ObjectType, v13);
              swift_release();
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_release();
            }
          }
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t AnchoringComponent.Target.Alignment.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t AnchoringComponent.Target.Classification.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AnchoringComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 63;
}

uint64_t AnchoringComponent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;

  v4 = (int *)type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)(a2 + v4[5]) = 1;
  *(_QWORD *)(a2 + v4[6]) = 1;
  v5 = a2 + v4[7];
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_BYTE *)(v5 + 64) = 1;
  return outlined init with take of __RKEntityActionSpecification(a1, a2, type metadata accessor for AnchoringComponent.Target);
}

{
  id v4;
  id v5;
  int *v6;
  uint64_t v7;
  _BYTE v9[32];
  id v10;

  outlined init with copy of Any(a1, (uint64_t)v9);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  swift_dynamicCast();
  v4 = v10;
  v5 = objc_msgSend(v10, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for AnchoringComponent.Target(0);
  swift_storeEnumTagMultiPayload();
  v6 = (int *)type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)(a2 + v6[5]) = 1;
  *(_QWORD *)(a2 + v6[6]) = 1;
  v7 = a2 + v6[7];
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_BYTE *)(v7 + 64) = 1;
  return outlined destroy of __AnyARKitObject(a1);
}

uint64_t type metadata accessor for AnchoringComponent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent);
}

uint64_t type metadata accessor for AnchoringComponent.Target(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.Target);
}

void static AnchoringComponent.Target.Classification.any.getter(_QWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t AnchoringComponent.init(_:trackingMode:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a2;
  v6 = (int *)type metadata accessor for AnchoringComponent(0);
  v7 = v6[5];
  *(_QWORD *)(a3 + v7) = 1;
  v8 = v6[6];
  *(_QWORD *)(a3 + v8) = 1;
  v9 = a3 + v6[7];
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_BYTE *)(v9 + 64) = 1;
  result = outlined init with take of __RKEntityActionSpecification(a1, a3, type metadata accessor for AnchoringComponent.Target);
  *(_QWORD *)(a3 + v7) = v5;
  *(_QWORD *)(a3 + v8) = 1;
  return result;
}

uint64_t AnchoringComponent.init(_:trackingMode:physicsSimulation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = *a2;
  v7 = *a3;
  v8 = (int *)type metadata accessor for AnchoringComponent(0);
  v9 = v8[5];
  *(_QWORD *)(a4 + v9) = 1;
  v10 = v8[6];
  *(_QWORD *)(a4 + v10) = 1;
  v11 = a4 + v8[7];
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_BYTE *)(v11 + 64) = 1;
  result = outlined init with take of __RKEntityActionSpecification(a1, a4, type metadata accessor for AnchoringComponent.Target);
  *(_QWORD *)(a4 + v9) = v6;
  *(_QWORD *)(a4 + v10) = v7;
  return result;
}

uint64_t static AnchoringComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return AnchoringComponent.init(from:)(a1);
}

void AnchoringComponent.__toCore(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD);
  char *v23;
  _QWORD v24[6];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v30 = a1;
  v31 = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v24[3] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v24[2] = (char *)v24 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v24[4] = (char *)v24 - v7;
  v25 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  MEMORY[0x24BDAC7A8](v25);
  v8 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v8);
  v26 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URL();
  v27 = *(_QWORD *)(v28 - 8);
  v10 = MEMORY[0x24BDAC7A8](v28);
  v24[0] = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v24[1] = (char *)v24 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v24[5] = (char *)v24 - v14;
  v15 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  MEMORY[0x24BDAC7A8](v15);
  v16 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v16);
  v17 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v17);
  v18 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)*v30;
  v29 = v1;
  v30 = v21;
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v20, v22);
  v23 = (char *)&loc_21BDE72F4 + dword_21BDE7BA4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BDE7308()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[3];
  *(_OWORD *)(v1 - 240) = v0[2];
  *(_OWORD *)(v1 - 224) = v2;
  *(_OWORD *)(v1 - 256) = v0[1];
  *(_OWORD *)(v1 - 272) = *v0;
  REAnchoringComponentSetDescriptorType();
  REAnchoringComponentSetDescriptorTransform();
  v3 = (__int128 *)(*(_QWORD *)(v1 - 200) + *(int *)(type metadata accessor for AnchoringComponent(0) + 28));
  if ((v3[4] & 1) == 0)
  {
    v5 = v3[1];
    v4 = v3[2];
    v6 = *v3;
    v8 = *((_QWORD *)v3 + 6);
    v7 = *((_QWORD *)v3 + 7);
    *(_OWORD *)(v1 - 176) = v6;
    *(_OWORD *)(v1 - 160) = v5;
    *(_OWORD *)(v1 - 144) = v4;
    *(_QWORD *)(v1 - 128) = v8;
    *(_QWORD *)(v1 - 120) = v7;
  }
  REAnchoringComponentSetPreviousWorldTransform();
  REAnchoringComponentSetMode();
  REAnchoringComponentSetDescriptorPhysicsSimulation();
  return RENetworkMarkComponentDirty();
}

void sub_21BDE7B94()
{
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  JUMPOUT(0x21BDE7BA4);
}

id loadImage(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  id v9;
  uint64_t v10;
  id result;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  int v17[3];

  v8 = objc_allocWithZone(MEMORY[0x24BE28C28]);
  v9 = specialized @nonobjc CUICatalog.init(name:from:error:)(0x737465737341, 0xE600000000000000, 0);
  v12 = v9;
  if (!v9)
    return 0;
  v13 = (void *)MEMORY[0x220768C3C](a1, a2);
  v14 = objc_msgSend(v12, sel_namedRecognitionGroupWithName_, v13);

  if (!v14)
  {

    return 0;
  }
  v15 = (void *)MEMORY[0x220768C3C](a3, a4);
  v16 = objc_msgSend(v14, sel_recognitionImageWithName_, v15);

  if (!v16)
  {

    return 0;
  }
  result = objc_msgSend(v16, sel_image);
  if (result)
  {
    v17[0] = 83886597;
    v10 = specialized TextureResource.init(image:withName:options:)(result, 0, 0, (unsigned __int8 *)v17);
    objc_msgSend(v16, sel_physicalSizeInMeters);
    objc_msgSend(v16, sel_physicalSizeInMeters);

    return (id)v10;
  }
  __break(1u);
  return result;
}

void static AnchoringComponent.Target.Alignment.horizontal.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AnchoringComponent.Target.Alignment.vertical.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static AnchoringComponent.Target.Alignment.any.getter(_BYTE *a1@<X8>)
{
  *a1 = -1;
}

uint64_t AnchoringComponent.Target.Alignment.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void static AnchoringComponent.Target.Classification.ceiling.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static AnchoringComponent.Target.Classification.table.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static AnchoringComponent.Target.Classification.seat.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t AnchoringComponent.Target.Classification.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

BOOL static AnchoringComponent.Target.Chirality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AnchoringComponent.Target.Chirality.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AnchoringComponent.Target.Chirality.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static AnchoringComponent.Target.HandLocation.== infix(_:_:)()
{
  return 1;
}

Swift::Int AnchoringComponent.Target.HandLocation.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

void AnchoringComponent.Target.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v4);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = (char *)sub_21BDE806C + 4 * byte_21BE7D670[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BDE806C()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = v1[1];
  *(_OWORD *)(v2 - 160) = *v1;
  *(_OWORD *)(v2 - 144) = v3;
  v4 = v1[3];
  *(_OWORD *)(v2 - 128) = v1[2];
  *(_OWORD *)(v2 - 112) = v4;
  Hasher._combine(_:)(1uLL);
  specialized SIMD.hash(into:)(v0, *(__n128 *)(v2 - 160));
  specialized SIMD.hash(into:)(v0, *(__n128 *)(v2 - 144));
  specialized SIMD.hash(into:)(v0, *(__n128 *)(v2 - 128));
  return specialized SIMD.hash(into:)(v0, *(__n128 *)(v2 - 112));
}

void sub_21BDE8260()
{
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

Swift::Int AnchoringComponent.Target.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnchoringComponent.Target.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(a1, a2, (void (*)(_BYTE *))AnchoringComponent.Target.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(a1, a2, a3, (void (*)(_BYTE *))AnchoringComponent.Target.hash(into:));
}

uint64_t AnchoringComponent.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __RKEntityActionSpecification(v1, a1, type metadata accessor for AnchoringComponent.Target);
}

uint64_t AnchoringComponent.trackingMode.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v4;

  result = type metadata accessor for AnchoringComponent(0);
  v4 = *(_QWORD *)(v1 + *(int *)(result + 20));
  if (v4 >= 3)
    v4 = 1;
  *a1 = v4;
  return result;
}

uint64_t AnchoringComponent.physicsSimulation.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AnchoringComponent(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 24)) == 1;
  return result;
}

uint64_t AnchoringComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  char DescriptorAlignment;
  uint64_t DescriptorClassification;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int DescriptorResourceStyle;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *PreviousWorldTransform;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int Mode;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t inited;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for AnchoringComponent(0);
  v62 = v13[5];
  *(_QWORD *)(a1 + v62) = 1;
  v63 = v13[6];
  *(_QWORD *)(a1 + v63) = 1;
  v14 = a1 + v13[7];
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_BYTE *)(v14 + 64) = 1;
  switch(REAnchoringComponentGetDescriptorType())
  {
    case 0u:
    case 6u:
    case 7u:
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 1u:
LABEL_20:
      REAnchoringComponentGetDescriptorTransform();
      *(_OWORD *)a1 = v35;
      *(_OWORD *)(a1 + 16) = v36;
      *(_OWORD *)(a1 + 32) = v37;
      *(_OWORD *)(a1 + 48) = v38;
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 2u:
      REAnchoringComponentGetDescriptorAnchorIdentifier();
      UUID.init(uuid:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 3u:
      DescriptorAlignment = REAnchoringComponentGetDescriptorAlignment();
      DescriptorClassification = REAnchoringComponentGetDescriptorClassification();
      REAnchoringComponentGetDescriptorBounds();
      *(_BYTE *)a1 = DescriptorAlignment;
      *(_QWORD *)(a1 + 8) = DescriptorClassification;
      *(_QWORD *)(a1 + 16) = v24;
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 4u:
      switch(REAnchoringComponentGetDescriptorResourceStyle())
      {
        case 1u:
          if (!REAnchoringComponentGetDescriptorResourceGroup() || !REAnchoringComponentGetDescriptorResourceName())
            goto LABEL_20;
          v25 = String.init(cString:)();
          v27 = v26;
          v28 = String.init(cString:)();
          *(_QWORD *)a1 = v25;
          *(_QWORD *)(a1 + 8) = v27;
          *(_QWORD *)(a1 + 16) = v28;
          *(_QWORD *)(a1 + 24) = v29;
          type metadata accessor for AnchoringComponent.Target(0);
          break;
        case 3u:
          if (!REAnchoringComponentGetDescriptorResourceName())
            goto LABEL_20;
          String.init(cString:)();
          URL.init(string:)();
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
          {
            outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
            goto LABEL_20;
          }
          v55 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
          v55(v8, v4, v5);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_21BE50940;
          REAnchoringComponentGetTrackingImageWidth();
          *(_DWORD *)(inited + 32) = v57;
          REAnchoringComponentGetTrackingImageHeight();
          *(_DWORD *)(inited + 36) = v58;
          specialized SIMD.init<A>(_:)(inited);
          v60 = v59;
          swift_setDeallocating();
          v55((char *)a1, v8, v5);
          *(_QWORD *)(a1
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
                             + 48)) = v60;
          type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for AnchoringComponent.Target(0);
          break;
        default:
          goto LABEL_20;
      }
LABEL_21:
      swift_storeEnumTagMultiPayload();
      v20 = v62;
      v19 = v63;
      goto LABEL_22;
    case 5u:
      DescriptorResourceStyle = REAnchoringComponentGetDescriptorResourceStyle();
      v20 = v62;
      v19 = v63;
      switch(DescriptorResourceStyle)
      {
        case 0:
        case 2:
        case 3:
          goto LABEL_15;
        case 1:
          if (!REAnchoringComponentGetDescriptorResourceGroup() || !REAnchoringComponentGetDescriptorResourceName())
            goto LABEL_15;
          v50 = String.init(cString:)();
          v52 = v51;
          v53 = String.init(cString:)();
          *(_QWORD *)a1 = v50;
          *(_QWORD *)(a1 + 8) = v52;
          *(_QWORD *)(a1 + 16) = v53;
          *(_QWORD *)(a1 + 24) = v54;
          type metadata accessor for AnchoringComponent.Target(0);
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_16;
    default:
      if (one-time initialization token for logger != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)logger);
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      v18 = os_log_type_enabled(v16, v17);
      v20 = v62;
      v19 = v63;
      if (v18)
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_21B9AA000, v16, v17, "Encountered unsupported AnchoringComponent on the platform. Defaulting to world anchor", v21, 2u);
        MEMORY[0x220772F44](v21, -1, -1);
      }

LABEL_15:
      REAnchoringComponentGetDescriptorTransform();
      *(_OWORD *)a1 = v31;
      *(_OWORD *)(a1 + 16) = v32;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a1 + 48) = v34;
      type metadata accessor for AnchoringComponent.Target(0);
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_22:
      PreviousWorldTransform = (_QWORD *)REAnchoringComponentGetPreviousWorldTransform();
      if (PreviousWorldTransform)
      {
        v40 = PreviousWorldTransform[1];
        v42 = PreviousWorldTransform[2];
        v41 = PreviousWorldTransform[3];
        v44 = PreviousWorldTransform[4];
        v43 = PreviousWorldTransform[5];
        v46 = PreviousWorldTransform[6];
        v45 = PreviousWorldTransform[7];
        *(_QWORD *)v14 = *PreviousWorldTransform;
        *(_QWORD *)(v14 + 8) = v40;
        *(_QWORD *)(v14 + 16) = v42;
        *(_QWORD *)(v14 + 24) = v41;
        *(_QWORD *)(v14 + 32) = v44;
        *(_QWORD *)(v14 + 40) = v43;
        *(_QWORD *)(v14 + 48) = v46;
        *(_QWORD *)(v14 + 56) = v45;
        *(_BYTE *)(v14 + 64) = 0;
      }
      Mode = REAnchoringComponentGetMode();
      if (Mode >= 3)
        v48 = 1;
      else
        v48 = Mode;
      *(_QWORD *)(a1 + v20) = v48;
      result = REAnchoringComponentGetDescriptorPhysicsSimulation();
      *(_QWORD *)(a1 + v19) = (_DWORD)result != 0;
      return result;
  }
}

uint64_t AnchoringComponent.ImageAnchoringSource.init(_:physicalSize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
              + 48);
  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  *(double *)(a2 + v6) = a3;
  type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t AnchoringComponent.trackingMode.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t AnchoringComponent.physicsSimulation.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AnchoringComponent@<X0>(uint64_t a1@<X8>)
{
  return AnchoringComponent.init(from:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance AnchoringComponent(_DWORD *a1@<X8>)
{
  *a1 = 63;
}

void static AnchoringComponent.TrackingMode.once.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static AnchoringComponent.TrackingMode.continuous.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AnchoringComponent.TrackingMode.predicted.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void AnchoringComponent.TrackingMode.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static AnchoringComponent.TrackingMode.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t type metadata accessor for AnchoringComponent.ObjectAnchoringSource(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ObjectAnchoringSource);
}

uint64_t type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t type metadata accessor for AnchoringComponent.ImageAnchoringSource(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ImageAnchoringSource);
}

Swift::Int AnchoringComponent.TrackingMode.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*AnchoringComponent.trackingMode.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for AnchoringComponent(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(v1 + v3);
  v5 = 1;
  if (v4 == 2)
    v5 = 2;
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  *(_QWORD *)a1 = v6;
  return AnchoringComponent.trackingMode.modify;
}

uint64_t AnchoringComponent.trackingMode.modify(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + *(int *)(result + 16)) = *(_QWORD *)result;
  return result;
}

void AnchoringComponent.ObjectAnchoringSource.Source.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t (*v9)(_QWORD);
  int EnumCaseMultiPayload;
  void *v11;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (void **)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v8, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = *v8;
      Hasher._combine(_:)(2uLL);
      NSObject.hash(into:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();

    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ObjectAnchoringSource.Source(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(a1, a2, (void (*)(_BYTE *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ObjectAnchoringSource.Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(a1, a2, a3, (void (*)(_BYTE *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(name:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a3;
  a4[1] = a1;
  a4[2] = a2;
  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return AnchoringComponent.ObjectAnchoringSource.init(group:name:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source, a5);
}

Swift::Int AnchoringComponent.ObjectAnchoringSource.hashValue.getter()
{
  return AnchoringComponent.ObjectAnchoringSource.hashValue.getter((void (*)(_BYTE *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

uint64_t AnchoringComponent.ImageAnchoringSource.Source.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  double v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *(double *)&v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
                                + 48)];
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    dispatch thunk of Hashable.hash(into:)();
    specialized SIMD.hash(into:)(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    return swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(a1, a2, (void (*)(_BYTE *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(a1, a2, a3, (void (*)(_BYTE *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t AnchoringComponent.ImageAnchoringSource.init(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return AnchoringComponent.ObjectAnchoringSource.init(group:name:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source, a5);
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_QWORD)@<X4>, _QWORD *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a5(0);
  return swift_storeEnumTagMultiPayload();
}

Swift::Int AnchoringComponent.ImageAnchoringSource.hashValue.getter()
{
  return AnchoringComponent.ObjectAnchoringSource.hashValue.getter((void (*)(_BYTE *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int AnchoringComponent.ObjectAnchoringSource.hashValue.getter(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

uint64_t AnchoringComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v2 = v1;
  v20[1] = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v10);
  outlined init with copy of __RKEntityActionSpecification(v2, (uint64_t)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v13 + 32) = 0x746567726174;
  *(_QWORD *)(v13 + 40) = 0xE600000000000000;
  *(_QWORD *)(v13 + 72) = type metadata accessor for AnchoringComponent.Target(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
  outlined init with copy of __RKEntityActionSpecification(v2, (uint64_t)boxed_opaque_existential_1, type metadata accessor for AnchoringComponent.Target);
  strcpy((char *)(v13 + 80), "trackingMode");
  *(_BYTE *)(v13 + 93) = 0;
  *(_WORD *)(v13 + 94) = -5120;
  *(_QWORD *)(v13 + 120) = &type metadata for AnchoringComponent.TrackingMode;
  v15 = *(_QWORD *)(v2 + *(int *)(v10 + 20));
  v16 = 1;
  if (v15 == 2)
    v16 = 2;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  *(_QWORD *)(v13 + 96) = v17;
  v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE43C0], v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL static AnchoringComponent.PhysicsSimulation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AnchoringComponent.PhysicsSimulation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AnchoringComponent.PhysicsSimulation.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*AnchoringComponent.physicsSimulation.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for AnchoringComponent(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_QWORD *)(v1 + v3) == 1;
  *(_DWORD *)(a1 + 8) = v3;
  return AnchoringComponent.physicsSimulation.modify;
}

uint64_t AnchoringComponent.physicsSimulation.modify(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)result + *(int *)(result + 8)) = *(unsigned __int8 *)(result + 12);
  return result;
}

uint64_t specialized static AnchoringComponent.ImageAnchoringSource.Source.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  int32x2_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  char v35;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for URL();
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v37 - v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.ImageAnchoringSource.Source, AnchoringComponent.ImageAnchoringSource.Source));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v15[*(int *)(v16 + 48)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v17, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v15, (uint64_t)v12, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    v27 = *v12;
    v26 = v12[1];
    v29 = v12[2];
    v28 = v12[3];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v31 = *((_QWORD *)v17 + 2);
      v30 = *((_QWORD *)v17 + 3);
      if (v27 == *(_QWORD *)v17 && v26 == *((_QWORD *)v17 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      if (v29 == v31 && v28 == v30)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
          goto LABEL_21;
      }
      outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
      v25 = 1;
      return v25 & 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for (AnchoringComponent.ImageAnchoringSource.Source, AnchoringComponent.ImageAnchoringSource.Source));
LABEL_22:
    v25 = 0;
    return v25 & 1;
  }
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v15, (uint64_t)v9, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
               + 48);
  v19 = *(float32x2_t *)&v9[v18];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v4);
    goto LABEL_8;
  }
  v20 = *(float32x2_t *)&v17[v18];
  v21 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v6, v17, v4);
  v22 = MEMORY[0x220768234](v9, v6);
  v23 = *(void (**)(char *, uint64_t))(v21 + 8);
  v23(v6, v4);
  v23(v9, v4);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    goto LABEL_22;
  }
  v24 = vceq_f32(v19, v20);
  v25 = v24.i8[0] & v24.i8[4];
  outlined destroy of __RKEntityActionSpecification((uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  return v25 & 1;
}

uint64_t specialized static AnchoringComponent.ObjectAnchoringSource.Source.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void **v20;
  int EnumCaseMultiPayload;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char v36;
  char v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char v42;
  uint64_t v44;
  uint64_t v45;

  v45 = a2;
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (void **)((char *)&v44 - v11);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v44 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.ObjectAnchoringSource.Source, AnchoringComponent.ObjectAnchoringSource.Source));
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void **)&v18[*(int *)(v19 + 48)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v18, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  outlined init with copy of __RKEntityActionSpecification(v45, (uint64_t)v20, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of __RKEntityActionSpecification((uint64_t)v18, (uint64_t)v12, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
      v23 = *v12;
      v22 = v12[1];
      v25 = v12[2];
      v24 = v12[3];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v27 = v20[2];
        v26 = v20[3];
        if (v23 == *v20 && v22 == v20[1])
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v29 & 1) == 0)
            goto LABEL_32;
        }
        if (v25 != v27 || v24 != v26)
        {
          v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v42 & 1) != 0)
            goto LABEL_37;
LABEL_33:
          outlined destroy of __RKEntityActionSpecification((uint64_t)v18, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
          goto LABEL_34;
        }
        goto LABEL_36;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with copy of __RKEntityActionSpecification((uint64_t)v18, (uint64_t)v9, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
      v31 = *v9;
      v30 = v9[1];
      v32 = v9[2];
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v34 = *v20;
        v33 = v20[1];
        v35 = v20[2];
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v36 = static NSObject.== infix(_:_:)();

        if ((v36 & 1) == 0)
        {
LABEL_32:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        if (v30 != v33 || v32 != v35)
        {
          v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v38 & 1) == 0)
            goto LABEL_33;
LABEL_37:
          outlined destroy of __RKEntityActionSpecification((uint64_t)v18, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
          v39 = 1;
          return v39 & 1;
        }
LABEL_36:
        swift_bridgeObjectRelease_n();
        goto LABEL_37;
      }

    }
    swift_bridgeObjectRelease();
LABEL_23:
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for (AnchoringComponent.ObjectAnchoringSource.Source, AnchoringComponent.ObjectAnchoringSource.Source));
LABEL_34:
    v39 = 0;
    return v39 & 1;
  }
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v18, (uint64_t)v15, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
    goto LABEL_23;
  }
  (*(void (**)(char *, void **, uint64_t))(v4 + 32))(v6, v20, v3);
  v39 = MEMORY[0x220768234](v15, v6);
  v40 = *(void (**)(char *, uint64_t))(v4 + 8);
  v40(v6, v3);
  v40(v15, v3);
  outlined destroy of __RKEntityActionSpecification((uint64_t)v18, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  return v39 & 1;
}

void specialized static AnchoringComponent.Target.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD v26[8];
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  v2 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v2);
  v26[5] = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v26[4] = (char *)v26 - v5;
  v6 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x24BDAC7A8](v6);
  v26[1] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v26[0] = (char *)v26 - v9;
  v10 = type metadata accessor for UUID();
  v26[6] = *(_QWORD *)(v10 - 8);
  v26[7] = v10;
  MEMORY[0x24BDAC7A8](v10);
  v26[3] = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v26[2] = (char *)v26 - v13;
  v14 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.Target, AnchoringComponent.Target));
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v26 + *(int *)(v23 + 48) - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(v27, (uint64_t)v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnchoringComponent.Target);
  outlined init with copy of __RKEntityActionSpecification(v28, (uint64_t)v24, type metadata accessor for AnchoringComponent.Target);
  v25 = (char *)sub_21BDE9EA0 + 4 * byte_21BE7D68C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BDE9EA0()
{
  uint64_t v0;
  float32x4_t *v1;
  float32x4_t *v2;
  unsigned int v3;

  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)v2, type metadata accessor for AnchoringComponent.Target);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of BodyTrackingComponent?(v0, &demangling cache variable for type metadata for (AnchoringComponent.Target, AnchoringComponent.Target));
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2[1], v1[1]), (int8x16_t)vceqq_f32(*v2, *v1)), vandq_s8((int8x16_t)vceqq_f32(v2[2], v1[2]), (int8x16_t)vceqq_f32(v2[3], v1[3])))) >> 31;
    outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for AnchoringComponent.Target);
  }
  return v3 & 1;
}

BOOL specialized static AnchoringComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  float32x4_t *v7;
  char v8;
  float32x4_t *v9;

  specialized static AnchoringComponent.Target.== infix(_:_:)(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for AnchoringComponent(0);
  if (*(_QWORD *)(a1 + v5[5]) != *(_QWORD *)(a2 + v5[5]) || *(_QWORD *)(a1 + v5[6]) != *(_QWORD *)(a2 + v5[6]))
    return 0;
  v6 = v5[7];
  v7 = (float32x4_t *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 64);
  v9 = (float32x4_t *)(a2 + v6);
  if ((v8 & 1) == 0)
    return (v9[4].i8[0] & 1) == 0
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v7[2], v9[2]), (int8x16_t)vceqq_f32(v7[3], v9[3])), vandq_s8((int8x16_t)vceqq_f32(v7[1], v9[1]), (int8x16_t)vceqq_f32(*v7, *v9)))) & 0x80000000) != 0;
  return (v9[4].i8[0] & 1) != 0;
}

id specialized @nonobjc CUICatalog.init(name:from:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x220768C3C]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithName_fromBundle_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Alignment, &type metadata for AnchoringComponent.Target.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Alignment, &type metadata for AnchoringComponent.Target.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Alignment, &type metadata for AnchoringComponent.Target.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Alignment, &type metadata for AnchoringComponent.Target.Alignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Classification, &type metadata for AnchoringComponent.Target.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Classification, &type metadata for AnchoringComponent.Target.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Classification, &type metadata for AnchoringComponent.Target.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Classification, &type metadata for AnchoringComponent.Target.Classification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.Chirality, &type metadata for AnchoringComponent.Target.Chirality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.Target.HandLocation, &type metadata for AnchoringComponent.Target.HandLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.Target()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type AnchoringComponent.Target and conformance AnchoringComponent.Target, type metadata accessor for AnchoringComponent.Target, (uint64_t)&protocol conformance descriptor for AnchoringComponent.Target);
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.TrackingMode, &type metadata for AnchoringComponent.TrackingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ObjectAnchoringSource()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type AnchoringComponent.ObjectAnchoringSource and conformance AnchoringComponent.ObjectAnchoringSource, type metadata accessor for AnchoringComponent.ObjectAnchoringSource, (uint64_t)&protocol conformance descriptor for AnchoringComponent.ObjectAnchoringSource);
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ImageAnchoringSource()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type AnchoringComponent.ImageAnchoringSource and conformance AnchoringComponent.ImageAnchoringSource, type metadata accessor for AnchoringComponent.ImageAnchoringSource, (uint64_t)&protocol conformance descriptor for AnchoringComponent.ImageAnchoringSource);
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnchoringComponent.PhysicsSimulation, &type metadata for AnchoringComponent.PhysicsSimulation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation);
  }
  return result;
}

uint64_t sub_21BDEA9CC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AnchoringComponent(0);
  v5 = *(_QWORD *)(a1 + *(int *)(result + 20));
  if (v5 >= 3)
    v5 = 1;
  *a2 = v5;
  return result;
}

uint64_t sub_21BDEAA08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t sub_21BDEAA38@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for AnchoringComponent(0);
  *a2 = *(_QWORD *)(a1 + *(int *)(result + 24)) == 1;
  return result;
}

uint64_t sub_21BDEAA74(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for AnchoringComponent(0);
  *(_QWORD *)(a2 + *(int *)(result + 24)) = v3;
  return result;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent(char *a1, char **a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AnchoringComponent.Target(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_16;
      case 3u:
      case 5u:
        v10 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v10;
        v11 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_11;
        v12 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(_QWORD *)&a1[*(int *)(v13 + 48)] = *(char **)((char *)a2 + *(int *)(v13 + 48));
        break;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          v17 = *a2;
          v18 = a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v18;
          *((_QWORD *)a1 + 2) = a2[2];
          v19 = v17;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_11:
          v15 = a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v15;
          v16 = a2[3];
          *((_QWORD *)a1 + 2) = a2[2];
          *((_QWORD *)a1 + 3) = v16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v20 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        }
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_17;
    }
    swift_storeEnumTagMultiPayload();
LABEL_16:
    swift_storeEnumTagMultiPayload();
LABEL_17:
    v21 = a3[6];
    *(_QWORD *)&a1[a3[5]] = *(char **)((char *)a2 + a3[5]);
    *(_QWORD *)&a1[v21] = *(char **)((char *)a2 + v21);
    v22 = a3[7];
    v23 = &a1[v22];
    v24 = (char *)a2 + v22;
    v25 = *((_OWORD *)v24 + 3);
    *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
    *((_OWORD *)v23 + 3) = v25;
    v23[64] = v24[64];
    v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v26;
  }
  return a1;
}

uint64_t destroy for AnchoringComponent(id *a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for AnchoringComponent.Target(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      v3 = type metadata accessor for UUID();
      return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 3:
    case 5:
      goto LABEL_10;
    case 4:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_10;
      goto LABEL_8;
    case 6:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      result = swift_getEnumCaseMultiPayload();
      switch((_DWORD)result)
      {
        case 2:

          return swift_bridgeObjectRelease();
        case 1:
LABEL_10:
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        case 0:
LABEL_8:
          v3 = type metadata accessor for URL();
          return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      }
      return result;
    default:
      return result;
  }
}

_QWORD *initializeWithCopy for AnchoringComponent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;

  v6 = type metadata accessor for AnchoringComponent.Target(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v7 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_14;
    case 3u:
    case 5u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_9;
      v10 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(_QWORD *)((char *)a1 + *(int *)(v11 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 48));
      break;
    case 6u:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v15 = (void *)*a2;
        v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        a1[2] = a2[2];
        v17 = v15;
        swift_bridgeObjectRetain();
      }
      else if (EnumCaseMultiPayload == 1)
      {
LABEL_9:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v18 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
      }
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_15;
  }
  swift_storeEnumTagMultiPayload();
LABEL_14:
  swift_storeEnumTagMultiPayload();
LABEL_15:
  v19 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v23;
  v21[64] = v22[64];
  v24 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v24;
  return a1;
}

_QWORD *assignWithCopy for AnchoringComponent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    v6 = type metadata accessor for AnchoringComponent.Target(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v7 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_15;
      case 3u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_10;
        v8 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(_QWORD *)((char *)a1 + *(int *)(v9 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v9 + 48));
        break;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          v11 = (void *)*a2;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          v12 = v11;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_10:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v13 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        }
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_16;
    }
    swift_storeEnumTagMultiPayload();
LABEL_15:
    swift_storeEnumTagMultiPayload();
  }
LABEL_16:
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v17 = *((_OWORD *)v16 + 1);
  v18 = *((_OWORD *)v16 + 2);
  v19 = *((_OWORD *)v16 + 3);
  v15[64] = v16[64];
  *((_OWORD *)v15 + 2) = v18;
  *((_OWORD *)v15 + 3) = v19;
  *((_OWORD *)v15 + 1) = v17;
  return a1;
}

char *initializeWithTake for AnchoringComponent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  v6 = type metadata accessor for AnchoringComponent.Target(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      v9 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v13 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_13;
    case 4:
      v10 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      goto LABEL_13;
    case 1:
      v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      goto LABEL_14;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_14:
  v14 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  v16[64] = v17[64];
  v19 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v19;
  return a1;
}

char *assignWithTake for AnchoringComponent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    v6 = type metadata accessor for AnchoringComponent.Target(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        v9 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          v13 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_14;
      case 4:
        v10 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v11 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
          v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
          *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        goto LABEL_14;
      case 1:
        v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_14:
        swift_storeEnumTagMultiPayload();
        goto LABEL_15;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_15:
  v14 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  v16[64] = v17[64];
  v19 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoringComponent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDEB83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for AnchoringComponent.Target);
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDEB854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for AnchoringComponent.Target);
}

uint64_t type metadata completion function for AnchoringComponent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AnchoringComponent.Target(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent.Target(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 5u:
        v10 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v10;
        v11 = a2[2];
        v12 = a2[3];
        *((_QWORD *)a1 + 2) = v11;
        *((_QWORD *)a1 + 3) = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_12;
        v13 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(char **)((char *)a2 + *(int *)(v14 + 48));
        goto LABEL_13;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          v19 = *a2;
          v20 = a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v20;
          *((_QWORD *)a1 + 2) = a2[2];
          v21 = v19;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_12:
          v16 = a2[1];
          *(_QWORD *)a1 = *a2;
          *((_QWORD *)a1 + 1) = v16;
          v17 = a2[2];
          v18 = a2[3];
          *((_QWORD *)a1 + 2) = v17;
          *((_QWORD *)a1 + 3) = v18;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v22 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.Target(id *a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      v3 = type metadata accessor for UUID();
      return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 3:
    case 5:
      goto LABEL_10;
    case 4:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_10;
      goto LABEL_8;
    case 6:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      result = swift_getEnumCaseMultiPayload();
      switch((_DWORD)result)
      {
        case 2:

          return swift_bridgeObjectRelease();
        case 1:
LABEL_10:
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        case 0:
LABEL_8:
          v3 = type metadata accessor for URL();
          return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      }
      return result;
    default:
      return result;
  }
}

_QWORD *initializeWithCopy for AnchoringComponent.Target(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v6 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_14;
    case 3u:
    case 5u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[2];
      v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1)
        goto LABEL_9;
      v10 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(_QWORD *)((char *)a1 + *(int *)(v11 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 48));
      break;
    case 6u:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v16 = (void *)*a2;
        v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        a1[2] = a2[2];
        v18 = v16;
        swift_bridgeObjectRetain();
      }
      else if (EnumCaseMultiPayload == 1)
      {
LABEL_9:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = a2[2];
        v15 = a2[3];
        a1[2] = v14;
        a1[3] = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v19 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
      }
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
  swift_storeEnumTagMultiPayload();
LABEL_14:
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AnchoringComponent.Target(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  void *v10;
  id v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v6 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_15;
      case 3u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1)
          goto LABEL_10;
        v7 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(_QWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 48));
        break;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          v10 = (void *)*a2;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          v11 = v10;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_10:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v12 = type metadata accessor for URL();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        }
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
    swift_storeEnumTagMultiPayload();
LABEL_15:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnchoringComponent.Target(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      v8 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v12 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_13;
    case 4:
      v9 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      goto LABEL_13;
    case 1:
      v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for AnchoringComponent.Target(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        v8 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        else
        {
          v12 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_14;
      case 4:
        v9 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
          v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
          *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        goto LABEL_14;
      case 1:
        v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for AnchoringComponent.Target()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.Alignment()
{
  return &type metadata for AnchoringComponent.Target.Alignment;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.Classification()
{
  return &type metadata for AnchoringComponent.Target.Classification;
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent.Target.Chirality(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BDEC610 + 4 * byte_21BE7D6CD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BDEC644 + 4 * byte_21BE7D6C8[v4]))();
}

uint64_t sub_21BDEC644(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDEC64C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDEC654);
  return result;
}

uint64_t sub_21BDEC660(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDEC668);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BDEC66C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDEC674(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.Chirality()
{
  return &type metadata for AnchoringComponent.Target.Chirality;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.HandLocation()
{
  return &type metadata for AnchoringComponent.Target.HandLocation;
}

ValueMetadata *type metadata accessor for AnchoringComponent.TrackingMode()
{
  return &type metadata for AnchoringComponent.TrackingMode;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent.ObjectAnchoringSource(char *a1, char **a2)
{
  int v4;
  int EnumCaseMultiPayload;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0) - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = *a2;
      v11 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v11;
      *((_QWORD *)a1 + 2) = a2[2];
      v12 = v10;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v6;
      v7 = a2[2];
      v8 = a2[3];
      *((_QWORD *)a1 + 2) = v7;
      *((_QWORD *)a1 + 3) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ObjectAnchoringSource(id *a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:

      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0:
      v3 = type metadata accessor for URL();
      return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for AnchoringComponent.ObjectAnchoringSource(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = *(void **)a2;
    v9 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v9;
    a1[2] = *(_QWORD *)(a2 + 16);
    v10 = v8;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v5;
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for AnchoringComponent.ObjectAnchoringSource(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  void *v5;
  id v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v5 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      v6 = v5;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AnchoringComponent.ObjectAnchoringSource(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v5 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AnchoringComponent.ObjectAnchoringSource(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v5 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoringComponent.ObjectAnchoringSource()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDECB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent.ObjectAnchoringSource()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDECBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata completion function for AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AnchoringComponent.ObjectAnchoringSource(a1, a2, a3, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnchoringComponent.ImageAnchoringSource(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(uint64_t *)((char *)a1 + *(int *)(v6 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 48));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = a2[2];
      v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ImageAnchoringSource(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

_QWORD *initializeWithCopy for AnchoringComponent.ImageAnchoringSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(_QWORD *)((char *)a1 + *(int *)(v5 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 48));
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AnchoringComponent.ImageAnchoringSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(_QWORD *)((char *)a1 + *(int *)(v5 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 48));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnchoringComponent.ImageAnchoringSource(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(_QWORD *)&a1[*(int *)(v6 + 48)] = *(_QWORD *)&a2[*(int *)(v6 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for AnchoringComponent.ImageAnchoringSource(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    v4 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(_QWORD *)&a1[*(int *)(v6 + 48)] = *(_QWORD *)&a2[*(int *)(v6 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoringComponent.ImageAnchoringSource()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDED098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent.ImageAnchoringSource()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDED0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t type metadata completion function for AnchoringComponent.ImageAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AnchoringComponent.ObjectAnchoringSource(a1, a2, a3, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t type metadata completion function for AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent.PhysicsSimulation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BDED17C + 4 * byte_21BE7D6D7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BDED1B0 + 4 * byte_21BE7D6D2[v4]))();
}

uint64_t sub_21BDED1B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDED1B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDED1C0);
  return result;
}

uint64_t sub_21BDED1CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDED1D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BDED1D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDED1E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnchoringComponent.PhysicsSimulation()
{
  return &type metadata for AnchoringComponent.PhysicsSimulation;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnchoringComponent.ImageAnchoringSource.Source(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 48));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = a2[2];
      v11 = a2[3];
      a1[2] = v10;
      a1[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

_QWORD *initializeWithCopy for AnchoringComponent.ImageAnchoringSource.Source(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(_QWORD *)((char *)a1 + *(int *)(v5 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 48));
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AnchoringComponent.ImageAnchoringSource.Source(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(_QWORD *)((char *)a1 + *(int *)(v5 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 48));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnchoringComponent.ImageAnchoringSource.Source(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for AnchoringComponent.ImageAnchoringSource.Source(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AnchoringComponent.ImageAnchoringSource.Source()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = &unk_21BE7DDC8;
  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent.ObjectAnchoringSource.Source(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = *a2;
      v12 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v12;
      *((_QWORD *)a1 + 2) = a2[2];
      v13 = v11;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = a2[2];
      v9 = a2[3];
      *((_QWORD *)a1 + 2) = v8;
      *((_QWORD *)a1 + 3) = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ObjectAnchoringSource.Source(id *a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:

      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0:
      v3 = type metadata accessor for URL();
      return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for AnchoringComponent.ObjectAnchoringSource.Source(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = *(void **)a2;
    v9 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v9;
    a1[2] = *(_QWORD *)(a2 + 16);
    v10 = v8;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v5;
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for AnchoringComponent.ObjectAnchoringSource.Source(void **a1, void **a2)
{
  int EnumCaseMultiPayload;
  void *v5;
  id v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v5 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      v6 = v5;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AnchoringComponent.ObjectAnchoringSource.Source(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for AnchoringComponent.ObjectAnchoringSource.Source()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ObjectAnchoringSource.Source()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type AnchoringComponent.ObjectAnchoringSource.Source and conformance AnchoringComponent.ObjectAnchoringSource.Source, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source, (uint64_t)&protocol conformance descriptor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ImageAnchoringSource.Source()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type AnchoringComponent.ImageAnchoringSource.Source and conformance AnchoringComponent.ImageAnchoringSource.Source, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source, (uint64_t)&protocol conformance descriptor for AnchoringComponent.ImageAnchoringSource.Source);
}

id one-time initialization function for coreRE()
{
  id result;

  result = (id)REGetCoreREBundle();
  static NSBundle.coreRE = (uint64_t)result;
  return result;
}

id one-time initialization function for realityFoundation()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for Entity();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.realityFoundation = (uint64_t)result;
  return result;
}

uint64_t HasPhysicsBody.physicsBody.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, _QWORD);
  _BYTE v4[32];
  _BYTE v5[176];

  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  v2 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  outlined release of PhysicsBodyComponent?((uint64_t)v5);
  swift_release();
  return v2(v4, 0);
}

uint64_t HasPhysicsBody.physicsBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

uint64_t key path getter for HasPhysicsBody.physicsBody : <A>A@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[176];
  _BYTE v4[176];

  HasPhysicsBody.physicsBody.getter((uint64_t)v3);
  outlined init with take of Transform?((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  return outlined init with take of Transform?((uint64_t)v4, a1, &demangling cache variable for type metadata for PhysicsBodyComponent?);
}

uint64_t key path setter for HasPhysicsBody.physicsBody : <A>A(uint64_t a1)
{
  _BYTE v2[176];
  _BYTE v3[176];

  outlined init with take of Transform?(a1, (uint64_t)v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined init with take of Transform?((uint64_t)v3, (uint64_t)v2, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined retain of PhysicsBodyComponent?((uint64_t)v3);
  return HasPhysicsBody.physicsBody.setter((uint64_t)v2);
}

void (*HasPhysicsBody.physicsBody.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v9;

  v7 = malloc(0x2D8uLL);
  *a1 = v7;
  v7[90] = v3;
  v7[89] = a3;
  v7[88] = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v7);
  swift_release();
  return HasPhysicsBody.physicsBody.modify;
}

void HasPhysicsBody.physicsBody.modify(uint64_t *a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)*a1;
  v3 = *a1 + 176;
  v4 = *a1 + 352;
  if ((a2 & 1) != 0)
  {
    outlined init with take of Transform?(*a1, v4, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined init with take of Transform?(v4, (uint64_t)v2 + 528, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined retain of PhysicsBodyComponent?(v4);
    HasPhysicsBody.physicsBody.setter((uint64_t)v2 + 528);
    outlined init with take of Transform?((uint64_t)v2, v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined release of PhysicsBodyComponent?(v3);
  }
  else
  {
    outlined init with take of Transform?(*a1, v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined init with take of Transform?(v3, v4, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    HasPhysicsBody.physicsBody.setter(v4);
  }
  free(v2);
}

uint64_t HasPhysicsMotion.physicsMotion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

double key path getter for HasPhysicsMotion.physicsMotion : <A>A@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  HasPhysicsMotion.physicsMotion.getter((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t key path setter for HasPhysicsMotion.physicsMotion : <A>A(uint64_t a1)
{
  char v1;
  __int128 v2;
  _OWORD v4[2];
  char v5;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  v5 = v1;
  return HasPhysicsMotion.physicsMotion.setter((uint64_t)v4);
}

uint64_t HasPhysicsMotion.physicsMotion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, _QWORD);
  _BYTE v4[32];
  _BYTE v5[48];

  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PhysicsMotionComponent?);
  v2 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  swift_release();
  return v2(v4, 0);
}

void (*HasPhysicsMotion.physicsMotion.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD **a1)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v9;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[6] = a3;
  v7[7] = v3;
  v7[5] = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v7);
  swift_release();
  return HasPhysicsMotion.physicsMotion.modify;
}

void HasPhysicsMotion.physicsMotion.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD v6[4];
  char v7;

  v1 = *a1;
  v2 = (*a1)[1];
  v4 = (*a1)[2];
  v3 = (*a1)[3];
  v5 = *((_BYTE *)*a1 + 32);
  v6[0] = **a1;
  v6[1] = v2;
  v6[2] = v4;
  v6[3] = v3;
  v7 = v5;
  HasPhysicsMotion.physicsMotion.setter((uint64_t)v6);
  free(v1);
}

uint64_t HasPhysicsBody.resetPhysicsTransform(_:recursive:)(char a1, __n128 a2, __n128 a3, __n128 a4)
{
  HasTransform.transform.setter(a2, a3, a4);
  return HasPhysicsBody.resetPhysicsTransformInternal(recursive:)(a1);
}

uint64_t HasPhysicsBody.resetPhysicsTransformInternal(recursive:)(char a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[176];
  _BYTE v30[176];
  _QWORD v31[11];
  char v32;
  _BYTE v33[176];
  _QWORD v34[24];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 96))(v34);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v31);
  swift_release();
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v33, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v34, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v34) == 1)
  {
    outlined init with take of Transform?((uint64_t)v33, (uint64_t)v30, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    result = HasPhysicsBody.physicsBody.setter((uint64_t)v30);
    if ((a1 & 1) == 0)
      return result;
  }
  else
  {
    v32 = 1;
    outlined init with take of Transform?((uint64_t)v31, (uint64_t)v30, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined init with take of Transform?((uint64_t)v30, (uint64_t)v29, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    result = HasPhysicsBody.physicsBody.setter((uint64_t)v29);
    if ((a1 & 1) == 0)
      return result;
  }
  HasHierarchy.children.getter(v31);
  if (REEntityGetChildCount() < 1)
    return swift_release();
  v4 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v4 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_54;
    v5 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_53;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v8 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v9 = 1;
          else
            v9 = v8 == 0;
          if (v9)
          {
            result = swift_retain();
          }
          else
          {
            v10 = *v8;
            v11 = String.init(utf8String:)();
            if (v12)
              v13 = v11;
            else
              v13 = 0;
            if (v12)
              v14 = v12;
            else
              v14 = 0xE000000000000000;
            v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v8;
          }
          if (!v8)
            goto LABEL_55;
          swift_retain();
          v15 = String.init(utf8String:)();
          v17 = v16;
          swift_release();
          v18 = v17 ? v15 : 0;
          v19 = v17 ? v17 : 0xE000000000000000;
          v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
          swift_bridgeObjectRelease();
          v21 = NSClassFromString(v20);

          swift_release();
          if (v21)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v22 = swift_dynamicCastMetatype();
            if (v22)
            {
              v23 = (*(uint64_t (**)(void))(v22 + 232))();
              v24 = *(_QWORD *)(v23 + 16);
              swift_retain();
              MEMORY[0x22076D160](v24, 0);
              *(_QWORD *)(v23 + 16) = v5;
              MEMORY[0x22076D160](v5, v23);
              swift_release();
              goto LABEL_40;
            }
          }
        }
      }
      v6 = makeEntity(for:)(v5);
    }
    v23 = v6;
LABEL_40:
    result = REEntityGetChildCount();
    if (v4 >= result)
      goto LABEL_52;
    v25 = swift_conformsToProtocol2();
    if (v25)
      v26 = v25;
    else
      v26 = 0;
    if (v25)
      v27 = (uint64_t *)v23;
    else
      v27 = 0;
    if (v27)
    {
      v28 = *v27;
      swift_retain();
      HasPhysicsBody.resetPhysicsTransformInternal(recursive:)(1, v28, v26);
      swift_release();
    }
    ++v4;
    swift_release();
    if (v4 >= REEntityGetChildCount())
      return swift_release();
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_21BDEE4F4()
{
  return 16;
}

__n128 sub_21BDEE500(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21BDEE514()
{
  return 16;
}

__n128 sub_21BDEE520(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void one-time initialization function for basicJiggleAnimationData()
{
  static EmphasizeAnimations.basicJiggleAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicJiggleAnimationData;
}

void one-time initialization function for playfulJiggleAnimationData()
{
  static EmphasizeAnimations.playfulJiggleAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulJiggleAnimationData;
}

void one-time initialization function for wildJiggleAnimationData()
{
  static EmphasizeAnimations.wildJiggleAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildJiggleAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizeJiggleAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicJiggleAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 203, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulJiggleAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 79, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildJiggleAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

void static CharacterControllerComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2100;
}

unint64_t CharacterControllerComponent.Collision.init(characterEntity:hitEntity:hitPosition:hitNormal:moveDirection:moveDistance:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, float a7@<S3>)
{
  a3->n128_u64[0] = result;
  a3->n128_u64[1] = a2;
  a3[1] = a4;
  a3[2] = a5;
  a3[3] = a6;
  a3[4].n128_f32[0] = a7;
  return result;
}

uint64_t CharacterControllerComponent.CollisionFlags.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CharacterControllerComponent.Collision.characterEntity.getter()
{
  return swift_retain();
}

uint64_t CharacterControllerComponent.Collision.characterEntity.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CharacterControllerComponent.Collision.characterEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CharacterControllerComponent.Collision.hitEntity.getter()
{
  return swift_retain();
}

uint64_t CharacterControllerComponent.Collision.hitEntity.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CharacterControllerComponent.Collision.hitEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.Collision.hitPosition.getter()
{
  __n128 *v0;

  return v0[1];
}

void CharacterControllerComponent.Collision.hitPosition.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*CharacterControllerComponent.Collision.hitPosition.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.Collision.hitNormal.getter()
{
  __n128 *v0;

  return v0[2];
}

void CharacterControllerComponent.Collision.hitNormal.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*CharacterControllerComponent.Collision.hitNormal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.Collision.moveDirection.getter()
{
  __n128 *v0;

  return v0[3];
}

void CharacterControllerComponent.Collision.moveDirection.setter(__n128 a1)
{
  __n128 *v1;

  v1[3] = a1;
}

uint64_t (*CharacterControllerComponent.Collision.moveDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.Collision.moveDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 64);
}

void CharacterControllerComponent.Collision.moveDistance.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 64) = a1;
}

uint64_t (*CharacterControllerComponent.Collision.moveDistance.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CharacterControllerComponent.CollisionFlags.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void static CharacterControllerComponent.CollisionFlags.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static CharacterControllerComponent.CollisionFlags.side.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static CharacterControllerComponent.CollisionFlags.top.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static CharacterControllerComponent.CollisionFlags.bottom.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

double CharacterControllerComponent.init()@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  double result;

  if (one-time initialization token for defaultUpVector != -1)
    swift_once();
  v2 = static CharacterControllerComponent.defaultUpVector;
  *(_OWORD *)a1 = xmmword_21BE7E010;
  *(_DWORD *)(a1 + 16) = 1045220557;
  *(_OWORD *)(a1 + 32) = v2;
  result = NAN;
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFF00000001;
  return result;
}

float static CharacterControllerComponent.defaultSkinWidth.getter()
{
  return 0.01;
}

float static CharacterControllerComponent.defaultSlopeLimit.getter()
{
  return 0.7854;
}

float static CharacterControllerComponent.defaultStepLimit.getter()
{
  return 0.2;
}

double static CharacterControllerComponent.defaultUpVector.getter()
{
  if (one-time initialization token for defaultUpVector != -1)
    swift_once();
  return *(double *)&static CharacterControllerComponent.defaultUpVector;
}

unint64_t *CharacterControllerComponent.init(radius:height:skinWidth:slopeLimit:stepLimit:upVector:collisionFilter:)@<X0>(unint64_t *result@<X0>, __n128 *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, float a7@<S4>, __n128 a8@<Q5>)
{
  unint64_t v14;
  __n128 v15;

  v14 = *result;
  if (one-time initialization token for defaultUpVector != -1)
  {
    v15 = a8;
    result = (unint64_t *)swift_once();
    a8 = v15;
  }
  a2->n128_f32[0] = a3;
  a2->n128_f32[1] = a4;
  a2->n128_f32[2] = a5;
  a2->n128_f32[3] = a6;
  a2[1].n128_f32[0] = a7;
  a2[2] = a8;
  a2[3].n128_u64[0] = v14;
  return result;
}

float CharacterControllerComponent.radius.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void CharacterControllerComponent.radius.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*CharacterControllerComponent.radius.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.height.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void CharacterControllerComponent.height.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*CharacterControllerComponent.height.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.skinWidth.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void CharacterControllerComponent.skinWidth.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*CharacterControllerComponent.skinWidth.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.slopeLimit.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void CharacterControllerComponent.slopeLimit.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*CharacterControllerComponent.slopeLimit.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.stepLimit.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void CharacterControllerComponent.stepLimit.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*CharacterControllerComponent.stepLimit.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.upVector.getter()
{
  __n128 *v0;

  return v0[2];
}

void CharacterControllerComponent.upVector.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*CharacterControllerComponent.upVector.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CharacterControllerComponent.collisionFilter.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double CharacterControllerComponent.collisionFilter.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

uint64_t (*CharacterControllerComponent.collisionFilter.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float static CharacterControllerComponent.defaultRadius.getter()
{
  return 0.25;
}

float static CharacterControllerComponent.defaultHeight.getter()
{
  return 2.0;
}

double one-time initialization function for defaultUpVector()
{
  double result;

  result = 0.0078125;
  static CharacterControllerComponent.defaultUpVector = 0x3F80000000000000uLL;
  return result;
}

__n128 protocol witness for static Component.__fromCore(_:) in conformance CharacterControllerComponent@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2;
  unsigned __int32 v3;
  unsigned __int32 v4;
  unsigned __int32 v5;
  unsigned __int32 v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  __n128 v12;
  unsigned __int32 CollisionGroup;
  unsigned __int32 CollisionMask;
  __n128 result;
  __n128 v16;

  RECharacterControllerComponentGetRadius();
  v3 = v2;
  RECharacterControllerComponentGetHeight();
  v5 = v4;
  RECharacterControllerComponentGetSkinWidth();
  v7 = v6;
  RECharacterControllerComponentGetSlopeLimit();
  v9 = v8;
  RECharacterControllerComponentGetStepLimit();
  v11 = v10;
  RECharacterControllerComponentGetUpVector();
  v16 = v12;
  CollisionGroup = RECharacterControllerComponentGetCollisionGroup();
  CollisionMask = RECharacterControllerComponentGetCollisionMask();
  if (one-time initialization token for defaultUpVector != -1)
    swift_once();
  a1->n128_u32[0] = v3;
  a1->n128_u32[1] = v5;
  a1->n128_u32[2] = v7;
  a1->n128_u32[3] = v9;
  a1[1].n128_u32[0] = v11;
  result = v16;
  a1[2] = v16;
  a1[3].n128_u32[0] = CollisionGroup;
  a1[3].n128_u32[1] = CollisionMask;
  return result;
}

__n128 static CharacterControllerComponent.__fromCore(_:)@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2;
  unsigned __int32 v3;
  unsigned __int32 v4;
  unsigned __int32 v5;
  unsigned __int32 v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  __n128 v12;
  unsigned __int32 CollisionGroup;
  unsigned __int32 CollisionMask;
  __n128 result;
  __n128 v16;

  RECharacterControllerComponentGetRadius();
  v3 = v2;
  RECharacterControllerComponentGetHeight();
  v5 = v4;
  RECharacterControllerComponentGetSkinWidth();
  v7 = v6;
  RECharacterControllerComponentGetSlopeLimit();
  v9 = v8;
  RECharacterControllerComponentGetStepLimit();
  v11 = v10;
  RECharacterControllerComponentGetUpVector();
  v16 = v12;
  CollisionGroup = RECharacterControllerComponentGetCollisionGroup();
  CollisionMask = RECharacterControllerComponentGetCollisionMask();
  if (one-time initialization token for defaultUpVector != -1)
    swift_once();
  a1->n128_u32[0] = v3;
  a1->n128_u32[1] = v5;
  a1->n128_u32[2] = v7;
  a1->n128_u32[3] = v9;
  a1[1].n128_u32[0] = v11;
  result = v16;
  a1[2] = v16;
  a1[3].n128_u32[0] = CollisionGroup;
  a1[3].n128_u32[1] = CollisionMask;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance CharacterControllerComponent()
{
  RECharacterControllerComponentSetRadius();
  RECharacterControllerComponentSetHeight();
  RECharacterControllerComponentSetSkinWidth();
  RECharacterControllerComponentSetSlopeLimit();
  RECharacterControllerComponentSetStepLimit();
  RECharacterControllerComponentSetUpVector();
  return RECharacterControllerComponentSetCollisionFilter();
}

uint64_t CharacterControllerComponent.__toCore(_:)()
{
  RECharacterControllerComponentSetRadius();
  RECharacterControllerComponentSetHeight();
  RECharacterControllerComponentSetSkinWidth();
  RECharacterControllerComponentSetSlopeLimit();
  RECharacterControllerComponentSetStepLimit();
  RECharacterControllerComponentSetUpVector();
  return RECharacterControllerComponentSetCollisionFilter();
}

void protocol witness for static Component.__coreComponentType.getter in conformance CharacterControllerComponent(_DWORD *a1@<X8>)
{
  *a1 = 2100;
}

uint64_t CharacterControllerComponent.customMirror.getter()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = v0[1];
  v10 = v0[2];
  v11 = v0[3];
  v12 = v0[4];
  v20 = *((_OWORD *)v0 + 2);
  v14 = v0[12];
  v13 = v0[13];
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v11;
  v25 = v12;
  v26 = v20;
  v27 = v14;
  v28 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21BE7E020;
  v16 = MEMORY[0x24BEE14E8];
  *(_QWORD *)(v15 + 32) = 0x746867696568;
  *(_QWORD *)(v15 + 40) = 0xE600000000000000;
  *(_DWORD *)(v15 + 48) = v9;
  *(_QWORD *)(v15 + 72) = v16;
  *(_QWORD *)(v15 + 80) = 0x737569646172;
  *(_QWORD *)(v15 + 88) = 0xE600000000000000;
  *(_DWORD *)(v15 + 96) = v8;
  *(_QWORD *)(v15 + 120) = v16;
  *(_QWORD *)(v15 + 128) = 0x746469576E696B73;
  *(_QWORD *)(v15 + 136) = 0xE900000000000068;
  *(_DWORD *)(v15 + 144) = v10;
  *(_QWORD *)(v15 + 168) = v16;
  *(_QWORD *)(v15 + 176) = 0x6D694C65706F6C73;
  *(_QWORD *)(v15 + 184) = 0xEA00000000007469;
  *(_DWORD *)(v15 + 192) = v11;
  *(_QWORD *)(v15 + 216) = v16;
  *(_QWORD *)(v15 + 224) = 0x696D694C70657473;
  *(_QWORD *)(v15 + 232) = 0xE900000000000074;
  *(_DWORD *)(v15 + 240) = v12;
  *(_QWORD *)(v15 + 264) = v16;
  *(_QWORD *)(v15 + 272) = 0x726F746365567075;
  *(_QWORD *)(v15 + 280) = 0xE800000000000000;
  *(_QWORD *)(v15 + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v17 = swift_allocObject();
  *(_QWORD *)(v15 + 288) = v17;
  *(_OWORD *)(v17 + 16) = v20;
  *(_QWORD *)(v15 + 320) = 0x6F6973696C6C6F63;
  *(_QWORD *)(v15 + 328) = 0xEF7265746C69466ELL;
  *(_QWORD *)(v15 + 360) = &type metadata for CollisionFilter;
  *(_DWORD *)(v15 + 336) = v14;
  *(_DWORD *)(v15 + 340) = v13;
  v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_21BDEF04C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CharacterControllerComponent.CollisionFlags, &type metadata for CharacterControllerComponent.CollisionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CharacterControllerComponent.CollisionFlags, &type metadata for CharacterControllerComponent.CollisionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CharacterControllerComponent.CollisionFlags, &type metadata for CharacterControllerComponent.CollisionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CharacterControllerComponent.CollisionFlags, &type metadata for CharacterControllerComponent.CollisionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

__n128 __swift_memcpy56_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CharacterControllerComponent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CharacterControllerComponent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CharacterControllerComponent()
{
  return &type metadata for CharacterControllerComponent;
}

uint64_t initializeWithCopy for CharacterControllerComponent.Collision(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CharacterControllerComponent.Collision(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for CharacterControllerComponent.Collision(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacterControllerComponent.Collision(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 68))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacterControllerComponent.Collision(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 68) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 68) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterControllerComponent.Collision()
{
  return &type metadata for CharacterControllerComponent.Collision;
}

ValueMetadata *type metadata accessor for CharacterControllerComponent.CollisionFlags()
{
  return &type metadata for CharacterControllerComponent.CollisionFlags;
}

void static BodyTrackingComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 66;
}

uint64_t BodyTrackingComponent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  result = type metadata accessor for BodyTrackingComponent(0);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t type metadata accessor for BodyTrackingComponent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for BodyTrackingComponent);
}

uint64_t HasBodyTracking.bodyTracking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  void (*v7)(_BYTE *, _QWORD);
  _BYTE v9[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v5, type metadata accessor for BodyTrackingComponent);
  v6 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  v7 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v9);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for BodyTrackingComponent?);
  swift_release();
  v7(v9, 0);
  return outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for BodyTrackingComponent);
}

uint64_t HasBodyTracking.bodyTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v1 + 96))(&v11, v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v6);
  swift_release();
  v7 = type metadata accessor for BodyTrackingComponent(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1)
    return outlined init with take of BodyTrackingComponent((uint64_t)v6, a1);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 0;
  return outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for BodyTrackingComponent?);
}

uint64_t key path setter for HasBodyTracking.bodyTracking : <A>A(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v7;

  v2 = type metadata accessor for BodyTrackingComponent(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v4, v5);
  return HasBodyTracking.bodyTracking.setter((uint64_t)v4);
}

void (*HasBodyTracking.bodyTracking.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;
  void *v9;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for BodyTrackingComponent(0) - 8) + 64);
  v7[3] = malloc(v8);
  v9 = malloc(v8);
  v7[4] = v9;
  HasBodyTracking.bodyTracking.getter((uint64_t)v9);
  return HasBodyTracking.bodyTracking.modify;
}

void HasBodyTracking.bodyTracking.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of __RKEntityActionSpecification(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v3, type metadata accessor for BodyTrackingComponent);
    HasBodyTracking.bodyTracking.setter((uint64_t)v3);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v4, type metadata accessor for BodyTrackingComponent);
  }
  else
  {
    HasBodyTracking.bodyTracking.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

void BodyTrackingComponent.Target.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)v7, v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int BodyTrackingComponent.Target.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v8, type metadata accessor for BodyTrackingComponent.Target);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance BodyTrackingComponent.Target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)v7, type metadata accessor for BodyTrackingComponent.Target);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BodyTrackingComponent.Target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v8, type metadata accessor for BodyTrackingComponent.Target);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

uint64_t BodyTrackingComponent.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __RKEntityActionSpecification(v1, a1, type metadata accessor for BodyTrackingComponent.Target);
}

uint64_t BodyTrackingComponent.target.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of BodyTrackingComponent.Target(a1, v1);
}

uint64_t (*BodyTrackingComponent.target.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BodyTrackingComponent.isPaused.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BodyTrackingComponent(0) + 20));
}

uint64_t BodyTrackingComponent.isPaused.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for BodyTrackingComponent(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*BodyTrackingComponent.isPaused.modify())(_QWORD, _QWORD)
{
  type metadata accessor for BodyTrackingComponent(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BodyTrackingComponent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  *(_BYTE *)(a2 + *(int *)(type metadata accessor for BodyTrackingComponent(0) + 20)) = 0;
  return outlined assign with take of BodyTrackingComponent.Target(a1, a2);
}

uint64_t BodyTrackingComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  int TargetType;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(a1, 1, 1, v6);
  v8 = *(int *)(type metadata accessor for BodyTrackingComponent(0) + 20);
  *(_BYTE *)(a1 + v8) = 0;
  TargetType = REBodyTrackingComponentGetTargetType();
  if (TargetType == 1)
  {
    REBodyTrackingComponentGetTargetBodyIdentifier();
    UUID.init(uuid:)();
    outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for BodyTrackingComponent.Target);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    v10 = a1;
    v11 = 0;
    goto LABEL_5;
  }
  if (!TargetType)
  {
    outlined destroy of __RKEntityActionSpecification(a1, type metadata accessor for BodyTrackingComponent.Target);
    v10 = a1;
    v11 = 1;
LABEL_5:
    v7(v10, v11, 1, v6);
  }
  result = REBodyTrackingComponentIsPaused();
  *(_BYTE *)(a1 + v8) = result;
  return result;
}

uint64_t static BodyTrackingComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return BodyTrackingComponent.init(from:)(a1);
}

uint64_t BodyTrackingComponent.__toCore(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  _QWORD v20[2];
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;

  v1 = v0;
  v29 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v8, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) == 1)
  {
    REBodyTrackingComponentSetTargetType();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    REBodyTrackingComponentSetTargetType();
    v20[1] = UUID.uuid.getter();
    v21 = v11;
    v22 = v12;
    v23 = v13;
    v24 = v14;
    v25 = v15;
    v26 = v16;
    v27 = v17;
    v28 = v18;
    REBodyTrackingComponentSetTargetBodyIdentifier();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  type metadata accessor for BodyTrackingComponent(0);
  REBodyTrackingComponentSetIsPaused();
  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance BodyTrackingComponent@<X0>(uint64_t a1@<X8>)
{
  return BodyTrackingComponent.init(from:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance BodyTrackingComponent(_DWORD *a1@<X8>)
{
  *a1 = 66;
}

uint64_t BodyTrackingComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  char v15;
  uint64_t v16;
  _QWORD v18[2];

  v2 = v1;
  v18[1] = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BodyTrackingComponent(0);
  MEMORY[0x24BDAC7A8](v10);
  outlined init with copy of __RKEntityActionSpecification(v2, (uint64_t)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v13 + 32) = 0x746567726174;
  *(_QWORD *)(v13 + 40) = 0xE600000000000000;
  *(_QWORD *)(v13 + 72) = type metadata accessor for BodyTrackingComponent.Target(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
  outlined init with copy of __RKEntityActionSpecification(v2, (uint64_t)boxed_opaque_existential_1, type metadata accessor for BodyTrackingComponent.Target);
  *(_QWORD *)(v13 + 80) = 0x6465737561507369;
  *(_QWORD *)(v13 + 88) = 0xE800000000000000;
  v15 = *(_BYTE *)(v2 + *(int *)(v10 + 20));
  *(_QWORD *)(v13 + 120) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v13 + 96) = v15;
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE43C0], v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static BodyTrackingComponent.Target.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v16[*(int *)(v17 + 48)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
  outlined init with copy of __RKEntityActionSpecification(a2, v18, type metadata accessor for BodyTrackingComponent.Target);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  if (v20((uint64_t)v16, 1, v19) != 1)
  {
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v16, (uint64_t)v13, type metadata accessor for BodyTrackingComponent.Target);
    if (v20(v18, 1, v19) != 1)
    {
      v22 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v22(v10, v13, v4);
      v22(v7, (char *)v18, v4);
      v21 = static UUID.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v23(v10, v4);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
      return v21 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_6;
  }
  if (v20(v18, 1, v19) != 1)
  {
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
    v21 = 0;
    return v21 & 1;
  }
  outlined destroy of __RKEntityActionSpecification((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
  v21 = 1;
  return v21 & 1;
}

uint64_t specialized static BodyTrackingComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v16[*(int *)(v17 + 48)];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
  v28 = a2;
  outlined init with copy of __RKEntityActionSpecification(a2, v18, type metadata accessor for BodyTrackingComponent.Target);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  if (v20((uint64_t)v16, 1, v19) != 1)
  {
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v16, (uint64_t)v13, type metadata accessor for BodyTrackingComponent.Target);
    if (v20(v18, 1, v19) != 1)
    {
      v21 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v21(v10, v13, v4);
      v21(v7, (char *)v18, v4);
      v22 = static UUID.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v23(v10, v4);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v25 = 0;
      return v25 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
    goto LABEL_9;
  }
  if (v20(v18, 1, v19) != 1)
    goto LABEL_6;
  outlined destroy of __RKEntityActionSpecification((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
LABEL_8:
  v24 = type metadata accessor for BodyTrackingComponent(0);
  v25 = *(_BYTE *)(a1 + *(int *)(v24 + 20)) ^ *(_BYTE *)(v28 + *(int *)(v24 + 20)) ^ 1;
  return v25 & 1;
}

uint64_t outlined init with take of BodyTrackingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BodyTrackingComponent.Target(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for BodyTrackingComponent.Target);
}

uint64_t outlined assign with take of BodyTrackingComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BodyTrackingComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in BodyTrackingComponent.Target()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type BodyTrackingComponent.Target and conformance BodyTrackingComponent.Target, type metadata accessor for BodyTrackingComponent.Target, (uint64_t)&protocol conformance descriptor for BodyTrackingComponent.Target);
}

uint64_t sub_21BDF0984@<X0>(uint64_t a1@<X8>)
{
  return HasBodyTracking.bodyTracking.getter(a1);
}

uint64_t sub_21BDF09A8()
{
  return 16;
}

__n128 sub_21BDF09B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyTrackingComponent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = type metadata accessor for BodyTrackingComponent.Target(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

void *initializeWithCopy for BodyTrackingComponent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for BodyTrackingComponent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v14 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(a1, a2, v14);
      goto LABEL_7;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v12 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for BodyTrackingComponent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for BodyTrackingComponent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v14 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1, a2, v14);
      goto LABEL_7;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v12 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyTrackingComponent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDF0E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for BodyTrackingComponent.Target(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BodyTrackingComponent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDF0F2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for BodyTrackingComponent.Target(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for BodyTrackingComponent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BodyTrackingComponent.Target(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyTrackingComponent.Target(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for BodyTrackingComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for BodyTrackingComponent.Target(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for BodyTrackingComponent.Target(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for BodyTrackingComponent.Target(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for BodyTrackingComponent.Target(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyTrackingComponent.Target()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDF14E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BodyTrackingComponent.Target()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BDF153C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for BodyTrackingComponent.Target(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for BodyTrackingComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata completion function for BodyTrackingComponent.Target()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t static System.coreCustomSystem(scene:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = RESceneGetECSManagerNullable();
  if (result)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    if ((SystemRegistry.getId(of:)(a2) & 0x100000000) != 0)
      return 0;
    else
      return REECSManagerGetCustomSystemAtID();
  }
  return result;
}

uint64_t SceneUpdateContext.Stats.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SceneUpdateContext.scene.getter()
{
  return swift_retain();
}

uint64_t SceneUpdateContext.scene.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*SceneUpdateContext.scene.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SceneUpdateContext.deltaTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void SceneUpdateContext.deltaTime.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*SceneUpdateContext.deltaTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SceneUpdateContext.systemsArePausedInEditor.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

void one-time initialization function for queryBasedUpdateRate()
{
  id v0;
  char v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = NSUserDefaults.BOOL(forKey:default:)(0xD000000000000027, 0x800000021BE94070, 1);

  static SceneUpdateContext.queryBasedUpdateRate = v1 & 1;
}

uint64_t static System.dependencies.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t SceneUpdateContext.entities(matching:when:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = v2[1];
  v5 = v2[2];
  v6 = *((_BYTE *)v2 + 24);
  v11 = *v2;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = v3;
  return SceneUpdateContext.entities(matching:updatingSystemWhen:)((uint64_t)v9, a2);
}

uint64_t SceneUpdateContext.entities(matching:updatingSystemWhen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;
  _QWORD v19[2];
  unsigned __int8 v20;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v6;
  v17[2] = *(_OWORD *)(a1 + 32);
  v18 = v4;
  result = Scene.performQuery(_:rootEntity:)(v17, 0, (uint64_t)v19);
  v9 = v19[0];
  v8 = v19[1];
  v10 = v20;
  if (!v5)
    goto LABEL_8;
  v11 = *(_QWORD *)(v5 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v13;
    if (v10)
      v14 = 0;
    else
      v14 = v8;
    v15 = *(_QWORD *)(v5 + 24);
    v12 = __OFADD__(v15, v14);
    v16 = v15 + v14;
    if (!v12)
    {
      *(_QWORD *)(v5 + 24) = v16;
LABEL_8:
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = v10;
      return result;
    }
  }
  __break(1u);
  return result;
}

void PhysicsSystem.update(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for System.update(context:) in conformance PhysicsSystem()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NetworkSendSystem.update(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for System.update(context:) in conformance NetworkSendSystem()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NetworkReceiveSystem.update(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for System.update(context:) in conformance NetworkReceiveSystem()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnimationPlaybackSystem.update(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for System.update(context:) in conformance AnimationPlaybackSystem()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void SkeletalPoseSystem.update(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for System.update(context:) in conformance SkeletalPoseSystem()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MeshDeformerSystem.update(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for System.update(context:) in conformance MeshDeformerSystem()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static System.registerSystem()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v7;
  _QWORD **v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int128 aBlock;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = v2;
  if (one-time initialization token for shared != -1)
    swift_once();
  v7 = static SystemRegistry.shared;
  v8 = (_QWORD **)((char *)static SystemRegistry.shared + 24);
  result = swift_beginAccess();
  v10 = v7[3];
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = (_QWORD *)(v10 + 32);
    v13 = v11;
    while (*v12 != a1)
    {
      v12 += 2;
      if (!--v13)
      {
        if (!(v11 >> 31))
          goto LABEL_8;
        __break(1u);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_8:
    swift_beginAccess();
    v3 = *v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v8 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_21:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      *v8 = v3;
    }
    v16 = v3[2];
    v15 = v3[3];
    if (v16 >= v15 >> 1)
    {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v3);
      *v8 = v3;
    }
    v3[2] = v16 + 1;
    v17 = &v3[2 * v16];
    v17[4] = a1;
    v17[5] = a2;
    swift_endAccess();
    v18 = SystemRegistry.getOrAddId(of:)(v4, a2);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a1;
    *(_QWORD *)(v19 + 24) = a2;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a1;
    *(_QWORD *)(v20 + 24) = a2;
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v31 = v19;
      v38 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      v23 = 0;
      v24 = v38;
      do
      {
        aBlock = *(_OWORD *)(v21 + 16 * v23 + 32);
        closure #4 in static System.registerSystem()((uint64_t)&aBlock, v18, &v37);
        v25 = v37;
        v38 = v24;
        v27 = *(_QWORD *)(v24 + 16);
        v26 = *(_QWORD *)(v24 + 24);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          v24 = v38;
        }
        ++v23;
        *(_QWORD *)(v24 + 16) = v27 + 1;
        *(_QWORD *)(v24 + 8 * v27 + 32) = v25;
      }
      while (v22 != v23);
      swift_bridgeObjectRelease();
      v19 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v35 = partial apply for closure #2 in static System.registerSystem();
    v36 = v19;
    v28 = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v33 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    v34 = &block_descriptor_47;
    v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v35 = partial apply for closure #3 in static System.registerSystem();
    v36 = v20;
    *(_QWORD *)&aBlock = v28;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v33 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned OpaquePointer?, @unowned OpaquePointer) -> ();
    v34 = &block_descriptor_6_5;
    v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RERegisterCustomSystem();
    _Block_release(v30);
    _Block_release(v29);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in static System.registerSystem()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31[2];
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  v34 = MEMORY[0x24BEE27D0];
  v33[0] = v16;
  outlined init with copy of Any((uint64_t)v33, (uint64_t)v31);
  swift_dynamicCast();
  v17 = v29;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  v18 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v18)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v17);
  }
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
  v20 = swift_retain();
  v19(v20, a3, a4);
  if (swift_isClassType())
    v23 = a3;
  else
    v23 = 0;
  if (v23)
  {
    v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, a3);
  }
  else
  {
    type metadata accessor for SystemBox(0, a3, v21, v22);
    v25 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v25(v12, v15, a3);
    v24 = swift_allocObject();
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 80) - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)v24 + 88), v12);
    v25(v9, v15, a3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SystemUpdateRateProtocol);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of BindableDataInternal(v31, (uint64_t)v33);
    v26 = v34;
    v27 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v27 + 16))(v31, v26, v27);
    v29 = *(_QWORD *)&v31[0];
    v30 = BYTE8(v31[0]);
    specialized _SystemUpdateRateProtocol.setUpdateRate(coreCustomSystem:updateRate:)(a2, (uint64_t)&v29);
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  }
  else
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for _SystemUpdateRateProtocol?);
    RECustomSystemSetScheduleType();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, a3);
  }
  return v24;
}

uint64_t SystemBox.__allocating_init(system:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  return v2;
}

uint64_t closure #3 in static System.registerSystem()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  float v26;
  double v27;
  char SystemsArePausedInEditor;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  _QWORD v44[3];
  uint64_t v45;

  v41 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v39 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v39 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v39 - v14;
  if (swift_isClassType())
    v18 = a4;
  else
    v18 = 0;
  if (v18)
  {
    v44[0] = a1;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v12, a4);
    if (a2)
      goto LABEL_6;
LABEL_9:
    result = RECustomSystemUpdateContextGetDeltaTime();
LABEL_26:
    __break(1u);
    return result;
  }
  type metadata accessor for SystemBox(0, a4, v16, v17);
  swift_unknownObjectRetain();
  v22 = swift_dynamicCastClassUnconditional();
  v23 = v22 + *(_QWORD *)(*(_QWORD *)v22 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, v23, a4);
  swift_release();
  if (!a2)
    goto LABEL_9;
LABEL_6:
  v45 = MEMORY[0x24BEE27D0];
  v44[0] = a2;
  outlined init with copy of Any((uint64_t)v44, (uint64_t)v43);
  swift_dynamicCast();
  v19 = v42;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  v20 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  v40 = v18;
  if (v20)
  {
    v21 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v21 = Scene.init(coreScene:)(v19);
  }
  v25 = v21;
  result = RECustomSystemUpdateContextGetDeltaTime();
  if (!v25)
    goto LABEL_26;
  v27 = v26;
  swift_retain();
  SystemsArePausedInEditor = RECustomSystemUpdateContextGetSystemsArePausedInEditor();
  type metadata accessor for SceneUpdateContext.Stats();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  v44[0] = v25;
  *(double *)&v44[1] = v27;
  v44[2] = v29;
  LOBYTE(v45) = SystemsArePausedInEditor;
  v30 = v41;
  v31 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v41 + 24);
  swift_retain();
  v31(v44, a4, v30);
  if (one-time initialization token for queryBasedUpdateRate != -1)
    swift_once();
  if (static SceneUpdateContext.queryBasedUpdateRate != 1)
  {
LABEL_21:
    swift_release();
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v39, v15, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SystemUpdateRateProtocol);
  if (!swift_dynamicCast())
  {
    v32 = swift_retain();
    v33 = static System.coreCustomSystem(scene:)(v32, a4);
    swift_release();
    if (v33 && *(uint64_t *)(v29 + 16) > 0)
    {
      v34 = *(_QWORD *)(v29 + 24);
      swift_release();
      if (v34 > 0)
        RECustomSystemEnqueueUpdateWithDeadline();
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
LABEL_22:
  if (v40)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, a4);
  }
  else
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for SystemBox(0, a4, v35, v36);
    v37 = swift_dynamicCastClassUnconditional();
    v38 = v37 + *(_QWORD *)(*(_QWORD *)v37 + 88);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v38, v15, a4);
    swift_endAccess();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t System.customSystem(scene:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = static System.coreCustomSystem(scene:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t closure #4 in static System.registerSystem()@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  ValueMetadata *v6;
  unint64_t v7;
  unint64_t result;

  v6 = *(ValueMetadata **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (!(v7 >> 62))
  {
    if (v6 != &type metadata for PhysicsSystem)
    {
      if (v6 == &type metadata for NetworkSendSystem)
      {
        result = RECustomSystemNetworkSendID();
      }
      else if (v6 == &type metadata for NetworkReceiveSystem)
      {
        result = RECustomSystemNetworkReceiveID();
      }
      else if (v6 == &type metadata for AnimationPlaybackSystem)
      {
        result = RECustomSystemAnimationPlaybackID();
      }
      else if (v6 == &type metadata for SkeletalPoseSystem)
      {
        result = RECustomSkeletalPoseID();
      }
      else if (v6 == &type metadata for MeshDeformerSystem)
      {
        result = RECustomSystemMeshDeformerID();
      }
      else
      {
        result = SystemRegistry.getOrAddId(of:)((uint64_t)v6, v7);
      }
      goto LABEL_18;
    }
LABEL_17:
    result = RECustomSystemPhysicsID();
LABEL_18:
    *a3 = a2;
    a3[1] = result;
    return result;
  }
  if (v7 >> 62 != 1)
    goto LABEL_17;
  if (v6 == &type metadata for PhysicsSystem)
  {
    result = RECustomSystemPhysicsID();
  }
  else if (v6 == &type metadata for NetworkSendSystem)
  {
    result = RECustomSystemNetworkSendID();
  }
  else if (v6 == &type metadata for NetworkReceiveSystem)
  {
    result = RECustomSystemNetworkReceiveID();
  }
  else if (v6 == &type metadata for AnimationPlaybackSystem)
  {
    result = RECustomSystemAnimationPlaybackID();
  }
  else if (v6 == &type metadata for SkeletalPoseSystem)
  {
    result = RECustomSkeletalPoseID();
  }
  else if (v6 == &type metadata for MeshDeformerSystem)
  {
    result = RECustomSystemMeshDeformerID();
  }
  else
  {
    result = SystemRegistry.getOrAddId(of:)((uint64_t)v6, v7 & 0x3FFFFFFFFFFFFFFFLL);
  }
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned OpaquePointer?, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

uint64_t static SystemRegistry.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t SystemRegistry.getId(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_5:
    v6 = 0;
    LOBYTE(v8) = 1;
    return v6 | ((unint64_t)v8 << 32);
  }
  v6 = 0;
  v7 = (_QWORD *)(v4 + 32);
  while (*v7 != a1)
  {
    ++v6;
    v7 += 2;
    if (v5 == v6)
      goto LABEL_5;
  }
  v8 = v6 >> 31;
  if (!(v6 >> 31))
    return v6 | ((unint64_t)v8 << 32);
  __break(1u);
  return result;
}

unint64_t SystemRegistry.getOrAddId(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;

  v5 = (_QWORD **)(v2 + 16);
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
LABEL_5:
    swift_beginAccess();
    v10 = *v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *v5 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *v5 = v10;
    }
    v10[2] = v13 + 1;
    v14 = &v10[2 * v13];
    v14[4] = a1;
    v14[5] = a2;
    v15 = *v5;
    result = swift_endAccess();
    v16 = v15[2];
    if (v16 <= 0x80000000)
      return (v16 - 1);
    __break(1u);
    goto LABEL_14;
  }
  result = 0;
  v9 = (_QWORD *)(v6 + 32);
  while (*v9 != a1)
  {
    ++result;
    v9 += 2;
    if (v7 == result)
      goto LABEL_5;
  }
  if (result >> 31)
LABEL_14:
    __break(1u);
  return result;
}

uint64_t SystemRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SystemRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Scene.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  if (!static System.coreCustomSystem(scene:)(v3, a1) || !RECustomSystemGetSwiftSystemForScene())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  if (swift_isClassType())
    v8 = a1;
  else
    v8 = 0;
  if (v8)
  {
    swift_unknownObjectRetain();
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
  else
  {
    type metadata accessor for SystemBox(0, a1, v6, v7);
    swift_unknownObjectRetain();
    v10 = swift_dynamicCastClassUnconditional();
    v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 88);
    swift_beginAccess();
    v12 = *(_QWORD *)(a1 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v11, a1);
    swift_release();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, a1);
  }
}

uint64_t sub_21BDF2EFC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static System.registerSystem()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static System.registerSystem()(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_21BDF2F14()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in static System.registerSystem()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #3 in static System.registerSystem()(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t type metadata accessor for SystemBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemBox);
}

uint64_t sub_21BDF2F50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t initializeWithCopy for SceneUpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SceneUpdateContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for SceneUpdateContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneUpdateContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneUpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneUpdateContext()
{
  return &type metadata for SceneUpdateContext;
}

uint64_t type metadata accessor for SceneUpdateContext.Stats()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of static System.dependencies.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of System.init(scene:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of System.update(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SystemUpdateCondition()
{
  return &type metadata for SystemUpdateCondition;
}

ValueMetadata *type metadata accessor for PhysicsSystem()
{
  return &type metadata for PhysicsSystem;
}

ValueMetadata *type metadata accessor for NetworkSendSystem()
{
  return &type metadata for NetworkSendSystem;
}

ValueMetadata *type metadata accessor for NetworkReceiveSystem()
{
  return &type metadata for NetworkReceiveSystem;
}

ValueMetadata *type metadata accessor for AnimationPlaybackSystem()
{
  return &type metadata for AnimationPlaybackSystem;
}

ValueMetadata *type metadata accessor for SkeletalPoseSystem()
{
  return &type metadata for SkeletalPoseSystem;
}

ValueMetadata *type metadata accessor for MeshDeformerSystem()
{
  return &type metadata for MeshDeformerSystem;
}

uint64_t type metadata accessor for SystemRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for SystemRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemRegistry.registeredSystems.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SystemRegistry.systems.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v2);
  v66 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v4);
  v65 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v54 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v64 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v62 = (uint64_t)&v53 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v53 - v10;
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v13);
  gatherInteractionSpecificationsAndUpdateUuid #1 (from:) in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1, v12, v14);
  v15 = type metadata accessor for Entity();
  swift_retain();
  v53 = v12;
  specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v15, v12, v14);
  v67 = v14;
  swift_release();
  swift_beginAccess();
  v16 = *(_QWORD *)(v12 + 16);
  v17 = *(_QWORD *)(v16 + 64);
  v55 = v16 + 64;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v56 = (unint64_t)(v18 + 63) >> 6;
  v57 = v16;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  if (v20)
    goto LABEL_6;
LABEL_7:
  while (2)
  {
    v25 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      if (v25 < v56)
      {
        v26 = *(_QWORD *)(v55 + 8 * v25);
        ++v22;
        if (v26)
          goto LABEL_20;
        v22 = v25 + 1;
        if (v25 + 1 >= v56)
          goto LABEL_40;
        v26 = *(_QWORD *)(v55 + 8 * v22);
        if (v26)
          goto LABEL_20;
        v22 = v25 + 2;
        if (v25 + 2 >= v56)
          goto LABEL_40;
        v26 = *(_QWORD *)(v55 + 8 * v22);
        if (v26)
        {
LABEL_20:
          v20 = (v26 - 1) & v26;
          for (i = __clz(__rbit64(v26)) + (v22 << 6); ; i = v23 | (v22 << 6))
          {
            v28 = 8 * i;
            v29 = *(_QWORD *)(*(_QWORD *)(v57 + 48) + v28);
            v30 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + v28);
            v31 = *(_QWORD *)(v30 + 16);
            if (v31)
            {
              v60 = v20;
              v61 = v22;
              v73 = MEMORY[0x24BEE4AF8];
              v59 = v29;
              swift_retain();
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
              v32 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
              v58 = v30;
              v69 = v32;
              v33 = v30 + v32;
              v68 = *(_QWORD *)(v54 + 72);
              v34 = v73;
              do
              {
                v71 = v31;
                v72 = v34;
                v35 = v62;
                outlined init with copy of __RKEntityActionSpecification(v33, v62, type metadata accessor for __RKEntityInteractionSpecification);
                v36 = v67;
                swift_retain_n();
                v37 = v65;
                specialized __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(v35, v36, v65);
                v38 = v63;
                v39 = v66;
                __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)((uint64_t)partial apply for closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:), v36, (uint64_t)closure #2 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:), 0, v66);
                v40 = (uint64_t *)(v35 + *(int *)(v38 + 24));
                v41 = v40[1];
                v70 = *v40;
                v42 = (uint64_t)v11;
                v43 = v64;
                outlined init with copy of __RKEntityActionSpecification(v37, v64, type metadata accessor for __RKEntityTriggerSpecification);
                outlined init with copy of __RKEntityActionSpecification(v39, v43 + *(int *)(v38 + 20), type metadata accessor for __RKEntityActionSpecification);
                v44 = (_QWORD *)(v43 + *(int *)(v38 + 24));
                *v44 = 0;
                v44[1] = 0;
                swift_bridgeObjectRetain();
                outlined destroy of __RKEntityActionSpecification(v39, type metadata accessor for __RKEntityActionSpecification);
                outlined destroy of __RKEntityActionSpecification(v37, type metadata accessor for __RKEntityTriggerSpecification);
                v45 = v43;
                v11 = (char *)v42;
                outlined init with take of __RKEntityInteractionSpecification(v45, v42);
                v46 = *(int *)(v38 + 24);
                v34 = v72;
                v47 = (_QWORD *)(v42 + v46);
                swift_release();
                swift_bridgeObjectRelease();
                *v47 = v70;
                v47[1] = v41;
                outlined destroy of __RKEntityActionSpecification(v35, type metadata accessor for __RKEntityInteractionSpecification);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
                  v34 = v73;
                }
                v49 = *(_QWORD *)(v34 + 16);
                v48 = *(_QWORD *)(v34 + 24);
                v50 = v71;
                if (v49 >= v48 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
                  v34 = v73;
                }
                *(_QWORD *)(v34 + 16) = v49 + 1;
                v51 = v68;
                outlined init with take of __RKEntityInteractionSpecification(v42, v34 + v69 + v49 * v68);
                v33 += v51;
                v31 = v50 - 1;
              }
              while (v31);
              swift_bridgeObjectRelease();
              v20 = v60;
              v22 = v61;
              v29 = v59;
            }
            else
            {
              swift_retain();
              v34 = MEMORY[0x24BEE4AF8];
            }
            swift_beginAccess();
            if (!static __RKEntityInteractionsComponent.registration)
              break;
            v52 = *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
            if (*(_QWORD *)(v34 + 16))
            {
              if (!REEntityGetCustomComponent() && !MEMORY[0x22076CF2C](*(_QWORD *)(v29 + 16), v52)
                || !RECustomComponentGetObject())
              {
                break;
              }
              __RKEntityInteractionsComponent.specifications.setter(v34);
            }
            else
            {
              swift_bridgeObjectRelease();
              if (REEntityGetCustomComponent())
                REEntityRemoveComponentByClass();
            }
            result = swift_release();
            if (!v20)
              goto LABEL_7;
LABEL_6:
            v23 = __clz(__rbit64(v20));
            v20 &= v20 - 1;
          }
          swift_release();
          result = swift_bridgeObjectRelease();
          if (!v20)
            continue;
          goto LABEL_6;
        }
        v27 = v25 + 3;
        if (v27 < v56)
        {
          v26 = *(_QWORD *)(v55 + 8 * v27);
          if (v26)
          {
            v22 = v27;
            goto LABEL_20;
          }
          while (1)
          {
            v22 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v22 >= v56)
              break;
            v26 = *(_QWORD *)(v55 + 8 * v22);
            ++v27;
            if (v26)
              goto LABEL_20;
          }
        }
      }
LABEL_40:
      swift_release();
      swift_release();
      return swift_release();
    }
    break;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_21BDF38C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t gatherInteractionSpecificationsAndUpdateUuid #1 (from:) in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v22[48];
  uint64_t v23;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v22[-v10];
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    if (REEntityGetCustomComponent())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v17 = *(_QWORD *)(Object + 16);
        outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v22);
        if (v17)
          v18 = v17;
        else
          v18 = __RKEntityInteractionsComponent.decodedJSON()();
        swift_bridgeObjectRetain();
        outlined destroy of __RKEntityInteractionsComponent((uint64_t)v22);
        if (!*(_QWORD *)(v18 + 16))
          goto LABEL_10;
LABEL_7:
        v19 = (uint64_t *)(a2 + 16);
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v23 = *v19;
        *v19 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, a1, isUniquelyReferenced_nonNull_native);
        *v19 = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        goto LABEL_11;
      }
    }
  }
  v18 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_7;
LABEL_10:
  swift_bridgeObjectRelease();
LABEL_11:
  Entity.__interactionIdentifier.getter((uint64_t)v11);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of UUID?((uint64_t)v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v15, v11, v12);
  swift_beginAccess();
  static UuidRemapHelper.getOrAddUuidMapping(_:_:)((uint64_t)v15, (uint64_t *)(a3 + 16), (uint64_t)v8);
  swift_endAccess();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  Entity.__interactionIdentifier.setter((uint64_t)v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t static UuidRemapHelper.getOrAddUuidMapping(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - v15;
  v17 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v16, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v7 + 72) * v18, v6);
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20)(v16, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v16, v6);
  }
  else
  {
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v20(v16, 1, 1, v6, v14);
  }
  outlined destroy of UUID?((uint64_t)v16);
  UUID.init()();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v22(v9, a1, v6);
  v22(v12, a3, v6);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20)(v12, 0, 1, v6);
  return specialized Dictionary.subscript.setter((uint64_t)v12, (uint64_t)v9);
}

uint64_t closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;

  v5 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  static UuidRemapHelper.getOrAddUuidMapping(_:_:)(a1, v5, a3);
  return swift_endAccess();
}

uint64_t partial apply for closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1, v2, a2);
}

id AsyncUpdateStreamContainer.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = objc_allocWithZone(v2);
  return AsyncUpdateStreamContainer.init(name:)(a1, a2, v6, v7);
}

id AsyncUpdateStreamContainer.init(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  objc_super v14;

  v7 = direct field offset for AsyncUpdateStreamContainer.streams;
  v8 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50);
  type metadata accessor for AsyncUpdateStream(0, v8, a3, a4);
  v9 = v4;
  *(_QWORD *)((char *)v4 + v7) = static Array._allocateUninitialized(_:)();
  v10 = (_QWORD *)((char *)v9 + direct field offset for AsyncUpdateStreamContainer.name);
  *v10 = a1;
  v10[1] = a2;

  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for AsyncUpdateStreamContainer(0, v8, v11, v12);
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t AsyncUpdateStreamContainer.numberOfStreams.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;

  v1 = *MEMORY[0x24BEE4EA0] & *v0;
  swift_beginAccess();
  updated = type metadata accessor for AsyncUpdateStream(0, *(_QWORD *)(v1 + 80), v2, v3);
  v5 = swift_bridgeObjectRetain();
  v6 = MEMORY[0x220768FCC](v5, updated);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t AsyncUpdateStreamContainer.makeUpdater()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t updated;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21[3];
  uint64_t v22;

  v5 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50);
  type metadata accessor for AsyncUpdateStream(0, v5, a3, a4);
  updated = type metadata accessor for AsyncUpdateStreamContainer(0, v5, v6, v7);
  v9 = v4;
  v10 = MEMORY[0x220772E3C](&protocol conformance descriptor for AsyncUpdateStreamContainer<A>, updated);
  v11 = swift_allocObject();
  AsyncUpdateStream.init<A>(parent:)(v9, updated, v10);
  if (one-time initialization token for logger != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  v13 = v9;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    *(_DWORD *)v16 = 136446210;
    v21[0] = v17;
    v19 = *(_QWORD *)&v13[direct field offset for AsyncUpdateStreamContainer.name];
    v18 = *(_QWORD *)&v13[direct field offset for AsyncUpdateStreamContainer.name + 8];
    swift_bridgeObjectRetain();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v14, v15, "AsyncUpdateContainer[\"%{public}s\"]: Making and adding new async updater...", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v17, -1, -1);
    MEMORY[0x220772F44](v16, -1, -1);

  }
  else
  {

  }
  v22 = v11;
  swift_beginAccess();
  type metadata accessor for Array();
  swift_retain();
  Array.append(_:)();
  swift_endAccess();
  AsyncUpdateStreamContainer.logMyself()();
  return v11;
}

uint64_t AsyncUpdateStream.__allocating_init<A>(parent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  AsyncUpdateStream.init<A>(parent:)(a1, a2, a3);
  return v6;
}

uint64_t AsyncUpdateStreamContainer.publishUpdate(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t updated;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Bool IsNativeType;
  uint64_t v33;
  os_log_t v35;
  int v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40[3];

  v3 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x50);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - v8;
  if (one-time initialization token for logger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v11(v9, a1, v3);
  v12 = v1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    v16 = swift_slowAlloc();
    v36 = v15;
    v17 = v16;
    v37 = swift_slowAlloc();
    v40[0] = v37;
    *(_DWORD *)v17 = 136315394;
    v35 = v13;
    v18 = v6;
    v38 = v12;
    v20 = *(_QWORD *)((char *)v12 + direct field offset for AsyncUpdateStreamContainer.name);
    v19 = *(_QWORD *)((char *)v12 + direct field offset for AsyncUpdateStreamContainer.name + 8);
    swift_bridgeObjectRetain();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    v11(v18, (uint64_t)v9, v3);
    v21 = String.init<A>(describing:)();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v40);
    v12 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    v13 = v35;
    _os_log_impl(&dword_21B9AA000, v35, (os_log_type_t)v36, "AsyncUpdateContainer[\"%s\"]: Publishing new value: %{public}s", (uint8_t *)v17, 0x16u);
    v23 = v37;
    swift_arrayDestroy();
    MEMORY[0x220772F44](v23, -1, -1);
    MEMORY[0x220772F44](v17, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  v24 = (_QWORD *)((char *)v12 + direct field offset for AsyncUpdateStreamContainer.streams);
  swift_beginAccess();
  v25 = *v24;
  updated = type metadata accessor for AsyncUpdateStream(0, v3, v26, v27);
  v29 = swift_bridgeObjectRetain();
  if (MEMORY[0x220768FE4](v29, updated))
  {
    v30 = 4;
    do
    {
      v31 = v30 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        swift_retain();
        v33 = v30 - 3;
        if (__OFADD__(v31, 1))
          goto LABEL_14;
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        v33 = v30 - 3;
        if (__OFADD__(v31, 1))
        {
LABEL_14:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      AsyncUpdateStream.publishUpdate(_:)(a1);
      swift_release();
      ++v30;
    }
    while (v33 != MEMORY[0x220768FE4](v25, updated));
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AsyncUpdateStreamContainer.finish()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t updated;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Bool IsNativeType;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t aBlock[10];

  v1 = *MEMORY[0x24BEE4EA0] & *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v45 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  v7 = __swift_project_value_buffer(v6, (uint64_t)logger);
  v8 = v0;
  v38 = v7;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v39 = v8;
  if (v11)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v15 = *(_QWORD *)((char *)v8 + direct field offset for AsyncUpdateStreamContainer.name);
    v14 = *(_QWORD *)((char *)v8 + direct field offset for AsyncUpdateStreamContainer.name + 8);
    swift_bridgeObjectRetain();
    aBlock[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v8 = v39;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v9, v10, "AsyncUpdateContainer[\"%{public}s\"].finish(): Clearing all async updaters...", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v13, -1, -1);
    MEMORY[0x220772F44](v12, -1, -1);

  }
  else
  {

  }
  AsyncUpdateStreamContainer.logMyself()();
  v16 = (_QWORD *)((char *)v8 + direct field offset for AsyncUpdateStreamContainer.streams);
  swift_beginAccess();
  v17 = *v16;
  updated = type metadata accessor for AsyncUpdateStream(0, *(_QWORD *)(v1 + 80), v18, v19);
  v21 = swift_bridgeObjectRetain();
  if (MEMORY[0x220768FE4](v21, updated))
  {
    v40 = type metadata accessor for OS_dispatch_queue();
    v22 = 4;
    v41 = updated;
    v23 = v42;
    v24 = v45;
    v25 = v47;
    do
    {
      v26 = v22 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v28 = *(_QWORD *)(v17 + 8 * v22);
        swift_retain();
        v29 = v22 - 3;
        if (__OFADD__(v26, 1))
          goto LABEL_14;
      }
      else
      {
        v28 = _ArrayBuffer._getElementSlowPath(_:)();
        v29 = v22 - 3;
        if (__OFADD__(v26, 1))
        {
LABEL_14:
          __break(1u);
          break;
        }
      }
      v48 = v29;
      v30 = (void *)static OS_dispatch_queue.main.getter();
      aBlock[4] = (uint64_t)partial apply for closure #1 in AsyncUpdateStreamContainer.finish();
      aBlock[5] = v28;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = (uint64_t)&block_descriptor_48;
      v31 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v49 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2207693A4](0, v23, v24, v31);
      v32 = v31;
      v33 = v41;
      _Block_release(v32);
      swift_release();

      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v25);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v44);
      swift_release();
      v34 = MEMORY[0x220768FE4](v17, v33);
      ++v22;
    }
    while (v48 != v34);
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  AsyncUpdateStreamContainer.logMyself()();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_21B9AA000, v35, v36, "... done clearing async updaters.", v37, 2u);
    MEMORY[0x220772F44](v37, -1, -1);
  }

}

void AsyncUpdateStreamContainer.onTerminated(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[3];

  v1 = *v0;
  v2 = *MEMORY[0x24BEE4EA0];
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  v4 = v0;
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v19 = v1;
    v7 = swift_slowAlloc();
    v18 = v2;
    v8 = swift_slowAlloc();
    v20[0] = v8;
    *(_DWORD *)v7 = 136446466;
    v9 = *(uint64_t *)((char *)v4 + direct field offset for AsyncUpdateStreamContainer.name);
    v10 = *(uint64_t *)((char *)v4 + direct field offset for AsyncUpdateStreamContainer.name + 8);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v5, v6, "AsyncUpdateContainer[\"%{public}s\"]: Removing stream id=%{public}s...", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    v13 = v8;
    v2 = v18;
    MEMORY[0x220772F44](v13, -1, -1);
    v14 = v7;
    v1 = v19;
    MEMORY[0x220772F44](v14, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  type metadata accessor for AsyncUpdateStream(255, *(_QWORD *)((v2 & v1) + 0x50), v15, v16);
  v17 = type metadata accessor for Array();
  MEMORY[0x220772E3C](MEMORY[0x24BEE12B8], v17);
  MEMORY[0x220772E3C](MEMORY[0x24BEE12E8], v17);
  RangeReplaceableCollection<>.removeAll(where:)();
  swift_endAccess();
  AsyncUpdateStreamContainer.logMyself()();
}

void AsyncUpdateStreamContainer.logMyself()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t updated;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Bool IsNativeType;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34[4];
  uint64_t v35[3];

  v1 = *MEMORY[0x24BEE4EA0] & *v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = v0;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v35[0] = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = *(_QWORD *)((char *)v3 + direct field offset for AsyncUpdateStreamContainer.name);
    v9 = *(_QWORD *)((char *)v3 + direct field offset for AsyncUpdateStreamContainer.name + 8);
    swift_bridgeObjectRetain();
    v34[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2050;
    swift_beginAccess();
    updated = type metadata accessor for AsyncUpdateStream(0, *(_QWORD *)(v1 + 80), v10, v11);
    v13 = swift_bridgeObjectRetain();
    v14 = MEMORY[0x220768FCC](v13, updated);
    swift_bridgeObjectRelease();
    v34[0] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_21B9AA000, v4, v5, "AsyncUpdateContainer name=\"%{public}s\" has %{public}ld active streams: {", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v7, -1, -1);
    MEMORY[0x220772F44](v6, -1, -1);

  }
  else
  {

  }
  v15 = (_QWORD *)((char *)v3 + direct field offset for AsyncUpdateStreamContainer.streams);
  swift_beginAccess();
  v16 = *v15;
  v19 = type metadata accessor for AsyncUpdateStream(0, *(_QWORD *)(v1 + 80), v17, v18);
  v20 = swift_bridgeObjectRetain();
  if (MEMORY[0x220768FE4](v20, v19))
  {
    v21 = 4;
    do
    {
      v22 = v21 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        swift_retain();
        v24 = v21 - 3;
        if (__OFADD__(v22, 1))
          goto LABEL_16;
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        v24 = v21 - 3;
        if (__OFADD__(v22, 1))
        {
LABEL_16:
          __break(1u);
          break;
        }
      }
      swift_retain();
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc();
        v33 = swift_slowAlloc();
        v34[0] = v33;
        *(_DWORD *)v27 = 136446210;
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v28 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v27 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v34);
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21B9AA000, v25, v26, "Got AsyncUpdateStream: \"%{public}s\"", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v33, -1, -1);
        MEMORY[0x220772F44](v27, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n();
      }
      ++v21;
    }
    while (v24 != MEMORY[0x220768FE4](v16, v19));
  }
  swift_bridgeObjectRelease();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_21B9AA000, v30, v31, "} // AsyncUpdateContainer", v32, 2u);
    MEMORY[0x220772F44](v32, -1, -1);
  }

}

id AsyncUpdateStreamContainer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AsyncUpdateStreamContainer.init()()
{
  specialized AsyncUpdateStreamContainer.init()();
}

void @objc AsyncUpdateStreamContainer.init()()
{
  specialized AsyncUpdateStreamContainer.init()();
}

id AsyncUpdateStreamContainer.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *updated;
  objc_super v7;

  updated = (objc_class *)type metadata accessor for AsyncUpdateStreamContainer(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), a3, a4);
  v7.receiver = v4;
  v7.super_class = updated;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc AsyncUpdateStreamContainer.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AsyncUpdateStream.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for AsyncUpdateStream.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path setter for AsyncUpdateStream.stream : <A>AsyncUpdateStream<A>(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for AsyncStream();
  v2 = type metadata accessor for Optional();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))((char *)&v8 - v4, a1, v3);
  return AsyncUpdateStream.stream.setter((uint64_t)v5);
}

uint64_t AsyncUpdateStream.stream.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  type metadata accessor for AsyncStream();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AsyncUpdateStream.stream.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  type metadata accessor for AsyncStream();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t AsyncUpdateStream.onPublishToStream.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t AsyncUpdateStream.onFinish.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t AsyncUpdateStream.parent.getter()
{
  uint64_t v0;

  return MEMORY[0x22077301C](v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t AsyncUpdateStream.init<A>(parent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v19 = a2;
  v20 = a1;
  v5 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for AsyncStream();
  v10 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v10 - 8);
  v22 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - v11;
  UUID.init()();
  v13 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v14(v13, 1, 1, v9);
  v15 = (_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 104));
  *v15 = 0;
  v15[1] = 0;
  v16 = (_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 112));
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 120) + 8) = 0;
  swift_unknownObjectWeakInit();
  v23 = v19;
  v24 = a3;
  v17 = v20;
  v25 = v3;
  v26 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE6A10], v5);
  AsyncStream.init(_:bufferingPolicy:_:)();

  v14((uint64_t)v12, 0, 1, v9);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 40))(v13, v12, v22);
  swift_endAccess();
  return v3;
}

uint64_t closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a4;
  v32 = a5;
  v33 = a3;
  v34 = a1;
  v29 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v7 = v29;
  v8 = type metadata accessor for AsyncStream.Continuation();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v29 - v11;
  v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v30((char *)&v29 - v11, a1, v8, v10);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v7;
  v15 = v31;
  v16 = v32;
  *((_QWORD *)v14 + 3) = v31;
  *((_QWORD *)v14 + 4) = v16;
  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v17(&v14[v13], v12, v8);
  v18 = (uint64_t *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 104));
  v19 = *v18;
  *v18 = (uint64_t)partial apply for closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:);
  v18[1] = (uint64_t)v14;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v19);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v12, v34, v8);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = v29;
  *((_QWORD *)v20 + 3) = v15;
  *((_QWORD *)v20 + 4) = v16;
  v17(&v20[v13], v12, v8);
  v21 = (uint64_t *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  v22 = *v21;
  *v21 = (uint64_t)partial apply for closure #2 in closure #1 in AsyncUpdateStream.init<A>(parent:);
  v21[1] = (uint64_t)v20;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v22);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v15;
  v23[3] = v16;
  v23[4] = a2;
  swift_retain();
  AsyncStream.Continuation.onTermination.setter();
  if (one-time initialization token for logger != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)logger);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_21B9AA000, v25, v26, "setUp() called...", v27, 2u);
    MEMORY[0x220772F44](v27, -1, -1);
  }

  *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 120) + 8) = v16;
  return swift_unknownObjectWeakAssign();
}

uint64_t closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, a3, v10);
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a2;
  aBlock[4] = partial apply for closure #1 in closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_13_0;
  v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v8, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  return swift_release();
}

void AsyncUpdateStream.publishUpdate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t *v23;
  void (*v24)(uint64_t);
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v25 - v9;
  if (one-time initialization token for logger != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v3, v4);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v27 = v3;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v26 = v2;
    v18 = v17;
    v29 = v17;
    *(_DWORD *)v16 = 136446210;
    v25[1] = v16 + 4;
    v12(v7, (uint64_t)v10, v4);
    v19 = String.init<A>(describing:)();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    _os_log_impl(&dword_21B9AA000, v13, v14, "Publishing new value %{public}s to async stream...", v16, 0xCu);
    swift_arrayDestroy();
    v21 = v18;
    v2 = v26;
    MEMORY[0x220772F44](v21, -1, -1);
    v22 = v16;
    v3 = v27;
    MEMORY[0x220772F44](v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  v23 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104));
  v24 = (void (*)(uint64_t))*v23;
  if (*v23)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*v23);
    v24(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v24);
  }
}

Swift::Void __swiftcall AsyncUpdateStream.finish()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;

  v1 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21B9AA000, v3, v4, "Terminate called...", v5, 2u);
    MEMORY[0x220772F44](v5, -1, -1);
  }

  v6 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
  v7 = (void (*)(uint64_t))*v6;
  if (*v6)
  {
    v8 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*v6);
    v7(v8);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
  }
}

void AsyncUpdateStream.tearDown()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  os_log_t osloga;

  v1 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21B9AA000, v3, v4, "AsyncUpdateStream: tearDown() called...", v5, 2u);
    MEMORY[0x220772F44](v5, -1, -1);
  }

  v6 = (void *)MEMORY[0x22077301C](v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  oslog = Logger.logObject.getter();
  if (v6)
  {
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_21B9AA000, oslog, v7, "Calling parent onTerminated()...", v8, 2u);
      MEMORY[0x220772F44](v8, -1, -1);
    }

    v9 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
    v10 = MEMORY[0x22077301C](v9);
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 8);
      osloga = (os_log_t)v10;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, ObjectType, v11);

    }
  }
  else
  {
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_21B9AA000, oslog, v13, "Parent container was already nil!", v14, 2u);
      MEMORY[0x220772F44](v14, -1, -1);
    }

  }
}

uint64_t AsyncUpdateStream.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + direct field offset for AsyncUpdateStream.id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  type metadata accessor for AsyncStream();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)));
  outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return v0;
}

uint64_t AsyncUpdateStream.__deallocating_deinit()
{
  AsyncUpdateStream.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance AsyncUpdateStream<A>@<X0>(uint64_t a1@<X8>)
{
  return AsyncUpdateStream.id.getter(a1);
}

uint64_t type metadata accessor for AsyncUpdateStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncUpdateStream);
}

uint64_t type metadata accessor for AsyncUpdateStreamContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncUpdateStreamContainer);
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in AsyncUpdateStreamContainer.onTerminated(_:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

void specialized AsyncUpdateStreamContainer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t partial apply for closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AsyncUpdateStream.init<A>(parent:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_21BDF649C@<X0>(uint64_t a1@<X8>)
{
  return AsyncUpdateStream.stream.getter(a1);
}

uint64_t sub_21BDF64C0()
{
  return 8;
}

_QWORD *sub_21BDF64CC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t dispatch thunk of AsyncUpdateStreamObserver.onTerminated(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Finishable.finish()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for AsyncUpdateStreamContainer()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for AsyncUpdateStreamContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.numberOfStreams.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.makeUpdater()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.finish()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.onTerminated(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t type metadata completion function for AsyncUpdateStream()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    type metadata accessor for AsyncStream();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AsyncUpdateStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncUpdateStream.stream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AsyncUpdateStream.__allocating_init<A>(parent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of AsyncUpdateStream.publishUpdate(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AsyncUpdateStream.finish()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t partial apply for closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncStream.Continuation() - 8) + 80);
  return closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:)(a1, v1 + ((v4 + 40) & ~v4), v3);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in AsyncUpdateStream.init<A>(parent:)()
{
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
}

uint64_t sub_21BDF67C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)(a1, v1[4], v1[2], v1[3]);
}

void partial apply for closure #1 in closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)()
{
  AsyncUpdateStream.tearDown()();
}

void UnlitMaterial.color.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];

  v5[3] = &type metadata for UnlitMaterial;
  v5[4] = &protocol witness table for UnlitMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v1, v5[0] + 16);
  v4 = *(_QWORD *)(v1 + 80);
  v3 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v5, v4, v3, a1);
}

uint64_t sub_21BDF68A4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void UnlitMaterial.blending.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  CGColor *v12;
  double Alpha;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[20];

  if ((*(_WORD *)(v1 + 152) & 1) != 0)
  {
    v5 = v1;
    outlined init with copy of UnlitMaterial(v1, (uint64_t)v18);
    v6 = 1.0;
    if (RELinkedOnOrAfterFall2024OSVersions())
    {
      v7 = specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      if ((v7 & 0x100000000) != 0)
        v6 = 1.0;
      else
        v6 = *(float *)&v7;
    }
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v14);
    v8 = (uint64_t)v15;
    if (v15)
    {
      v4 = v17;
      v3 = v16;
      v9 = v14;
    }
    else
    {
      v9 = 0;
      v3 = 0;
      v4 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v9, (uint64_t)v15);
    outlined destroy of UnlitMaterial((uint64_t)v18);
    outlined consume of MaterialParameters.Texture?(v9, v8);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      v18[3] = &type metadata for UnlitMaterial;
      v18[4] = &protocol witness table for UnlitMaterial;
      v18[0] = swift_allocObject();
      outlined init with copy of UnlitMaterial(v5, v18[0] + 16);
      v11 = *(_QWORD *)(v5 + 80);
      v10 = *(void **)(v5 + 88);
      swift_bridgeObjectRetain();
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v18, v11, v10, (uint64_t)&v14);
      v12 = (CGColor *)v14;
      outlined consume of MaterialParameters.Texture?(v15, v16);
      Alpha = CGColorGetAlpha(v12);

      v6 = Alpha;
    }
    *(_QWORD *)a1 = LODWORD(v6);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v8;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
  }
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = v4;
}

uint64_t UnlitMaterial.opacityThreshold.getter()
{
  unint64_t v0;

  v0 = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

void UnlitMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 112) == 1;
}

uint64_t UnlitMaterial.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 FeatureFlags;
  __int16 v10;
  char v11;
  char v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v17 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  v6 = a2[3];
  v7 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (v7)
  {
    v8 = v7;
    FeatureFlags = REMaterialAssetGetFeatureFlags();
    v10 = FeatureFlags;
    if ((FeatureFlags & 8) != 0)
      v11 = 1;
    else
      v11 = 2;
    if ((FeatureFlags & 8) != 0)
      v12 = 1;
    else
      v12 = ~(2 * FeatureFlags) & 2;
    v13 = (FeatureFlags & 4) == 0;
    if ((FeatureFlags & 0x10) != 0)
      v14 = 1;
    else
      v14 = 2;
    type metadata accessor for UnlitMaterial.Program();
    v15 = swift_allocObject();
    *(_BYTE *)(v15 + 16) = v13;
    *(_BYTE *)(v15 + 17) = v12;
    *(_QWORD *)(v15 + 24) = v8;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = v8;
    *(_QWORD *)(a3 + 48) = v17;
    *(_BYTE *)(a3 + 56) = v4;
    *(_QWORD *)(a3 + 64) = v5;
    *(_QWORD *)(a3 + 72) = v6;
    *(_QWORD *)(a3 + 80) = 0x6E6954726F6C6F63;
    *(_QWORD *)(a3 + 88) = 0xE900000000000074;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_BYTE *)(a3 + 128) = 1;
    *(_WORD *)(a3 + 129) = 257;
    *(_QWORD *)(a3 + 136) = v15;
    *(_QWORD *)(a3 + 144) = 0;
    *(_WORD *)(a3 + 152) = v10;
    *(_BYTE *)(a3 + 154) = v11;
    *(_BYTE *)(a3 + 155) = v14;
    return swift_retain();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized MaterialWithShaderCache.shaderParameters.setter(unsigned int a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  if (*(unsigned __int16 *)(v1 + 152) != (unsigned __int16)a1)
    goto LABEL_12;
  v2 = *(unsigned __int8 *)(v1 + 154);
  v3 = *(unsigned __int8 *)(v1 + 155);
  if (v2 == 2)
  {
    if (BYTE2(a1) != 2)
      goto LABEL_12;
  }
  else if (BYTE2(a1) == 2 || (HIWORD(a1) & 1) != (v2 & 1))
  {
    goto LABEL_12;
  }
  v4 = HIBYTE(a1);
  if (v3 == 2)
  {
    if (v4 != 2)
LABEL_12:
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(a1);
  }
  else
  {
    v5 = (v3 & 1) == 0;
    if (v4 == 2 || ((v5 ^ ((a1 & 0x1000000) >> 24)) & 1) == 0)
      goto LABEL_12;
  }
}

uint64_t UnlitMaterial.__usesTransparency.getter()
{
  uint64_t v0;

  return *(_WORD *)(v0 + 152) & 1;
}

void UnlitMaterial.Program.Descriptor.init()(_WORD *a1@<X8>)
{
  *a1 = 513;
}

uint64_t UnlitMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  outlined init with copy of __REAssetService?(v1, (uint64_t)&v5);
  if (v6)
    return outlined init with take of BindableDataInternal(&v5, a1);
  outlined destroy of __REAssetService?((uint64_t)&v5);
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, a1);
  outlined destroy of __REAssetService?(v1);
  return outlined init with copy of __REAssetService(a1, v1);
}

uint64_t UnlitMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t UnlitMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_BYTE *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(void **)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t UnlitMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = v4;
  *(_QWORD *)(v1 + 72) = v5;
  return result;
}

uint64_t (*UnlitMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double key path getter for UnlitMaterial.color : UnlitMaterial@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;
  _QWORD v9[5];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v9[3] = &type metadata for UnlitMaterial;
  v9[4] = &protocol witness table for UnlitMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(a1, v9[0] + 16);
  v5 = *(_QWORD *)(a1 + 80);
  v4 = *(void **)(a1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v9, v5, v4, (uint64_t)&v10);
  v6 = v12;
  v7 = v13;
  *(_QWORD *)a2 = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void key path setter for UnlitMaterial.color : UnlitMaterial(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  id v5;
  id v6[4];
  int v7;

  v1 = *(void **)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32);
  v6[0] = *(id *)a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v7 = v4;
  v5 = v6[0];
  outlined copy of MaterialParameters.Texture?(v1, (uint64_t)v2);
  UnlitMaterial.color.setter((uint64_t)v6);
}

void UnlitMaterial.color.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  CGColor *v8;
  CGColor *v9;
  double Alpha;
  _QWORD v11[3];
  int v12;
  _QWORD v13[5];
  _QWORD v14[4];
  int v15;
  _OWORD v16[2];
  int v17;

  v2 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v2;
  v17 = *(_DWORD *)(a1 + 32);
  v13[3] = &type metadata for UnlitMaterial;
  v13[4] = &protocol witness table for UnlitMaterial;
  v13[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v1, v13[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v13, 0, 0, (uint64_t)v14);
  v4 = (void *)v14[0];
  v3 = (void *)v14[1];
  v5 = v14[2];
  v6 = v14[3];
  v7 = v15;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v16 + 8, (uint64_t)v13);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v13, (uint64_t)v14);
  v11[0] = v3;
  v11[1] = v5;
  v11[2] = v6;
  v12 = v7;
  UnlitMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)v11);
  swift_bridgeObjectRetain();
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v16);
  swift_bridgeObjectRelease();
  outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v16);
  if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
  {
    v8 = (CGColor *)specialized Material.getColor(name:)(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
    if (v8)
    {
      v9 = v8;
      Alpha = CGColorGetAlpha(v8);

      LOBYTE(v8) = Alpha < 1.0;
    }
    UnlitMaterial.setTransparencyFromBlending(_:)((Swift::Bool)v8);
  }

  outlined consume of MaterialParameters.Texture?(v3, v5);
}

void UnlitMaterial.checkMultiUV(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  int v10;
  _QWORD v11[5];
  id v12[3];

  v4 = *(void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 16))
  {
    if ((*(_BYTE *)(v2 + 155) & 1) == 0)
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16) | 0x1000000);
  }
  else
  {
    v11[3] = &type metadata for UnlitMaterial;
    v11[4] = &protocol witness table for UnlitMaterial;
    v11[0] = swift_allocObject();
    outlined init with copy of UnlitMaterial(v2, v11[0] + 16);
    PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v11, (uint64_t)v12);
    v6 = v12[0];
    v7 = v12[1];
    v8 = v12[2];
    if (v3 && v5)
    {
      v9 = v4;
      swift_retain();
      if (REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex() == 1)
      {
        v10 = *(unsigned __int8 *)(v2 + 155);
        if (v10 == 2 || (v10 & 1) != 0)
          specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16));
      }

      outlined consume of MaterialParameters.Texture?(v7, (uint64_t)v8);
      outlined consume of MaterialParameters.Texture?(v4, v3);
    }
    else
    {

      outlined consume of MaterialParameters.Texture?(v7, (uint64_t)v8);
    }
  }
}

void (*UnlitMaterial.color.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[5];

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v7[3] = &type metadata for UnlitMaterial;
  v7[4] = &protocol witness table for UnlitMaterial;
  v7[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v1, v7[0] + 16);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v7, v4, v5, (uint64_t)v3);
  return UnlitMaterial.color.modify;
}

void UnlitMaterial.color.modify(void ***a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  id v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  int v12;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (uint64_t)(*a1)[2];
  v5 = (*a1)[3];
  v7 = *((_DWORD *)*a1 + 8);
  v11[0] = v3;
  v11[1] = v4;
  v11[2] = v6;
  v11[3] = v5;
  v12 = v7;
  if ((a2 & 1) != 0)
  {
    v8 = v3;
    outlined copy of MaterialParameters.Texture?(v4, v6);
    UnlitMaterial.color.setter((uint64_t)v11);
    v9 = v2[1];
    v10 = (uint64_t)v2[2];

    outlined consume of MaterialParameters.Texture?(v9, v10);
  }
  else
  {
    UnlitMaterial.color.setter((uint64_t)v11);
  }
  free(v2);
}

CGColorRef UnlitMaterial.__tintColor.getter()
{
  uint64_t v0;
  void *v1;
  CGColorRef GenericRGB;
  id v3;

  v1 = *(void **)(v0 + 96);
  if (v1)
  {
    GenericRGB = *(CGColorRef *)(v0 + 96);
  }
  else
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v1 = 0;
  }
  v3 = v1;
  return GenericRGB;
}

void UnlitMaterial.__tintColor.setter(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  CGColor *v8;
  id v9;
  float32x4_t v10;
  CGColor *v11;
  float32x4_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  CGColor *v19;
  CGColor *v20;
  double Alpha;
  float32x4_t v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v2 = v1;
  v5 = v1[10];
  v4 = v1[11];
  v23 = (id)v1[13];
  if (v23)
  {
    v6 = a1;
    v7 = v23;
    v8 = (CGColor *)v6;
    v9 = v7;
    swift_bridgeObjectRetain();
    specialized SIMD4<>.init(_:)(v8);
    v22 = v10;
    v11 = (CGColor *)v9;
    specialized SIMD4<>.init(_:)(v11);
    v13 = specialized SIMD4<>.cgColor.getter((__n128)vmulq_f32(v22, v12));

    v14 = (id)v13;
  }
  else
  {
    v14 = a1;
    swift_bridgeObjectRetain();
    v13 = (uint64_t)a1;
  }
  v24 = v13;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v29 = 6;
  v15 = String.utf8CString.getter() + 32;
  v16 = v14;
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v15, (uint64_t)&v24);

  swift_release();
  v17 = (void *)v2[12];
  v2[10] = v5;
  v2[11] = v4;
  v2[12] = a1;
  v2[13] = v23;
  v18 = a1;

  v19 = (CGColor *)specialized Material.getColor(name:)(v5, v4);
  if (v19)
  {
    v20 = v19;
    Alpha = CGColorGetAlpha(v19);

    LOBYTE(v19) = Alpha < 1.0;
  }
  UnlitMaterial.setTransparencyFromBlending(_:)((Swift::Bool)v19);
  swift_bridgeObjectRelease();

}

void (*UnlitMaterial.__tintColor.modify(CGColorRef *a1))(void **a1, char a2)
{
  CGColorRef *v1;
  CGColorRef v3;
  CGColorRef GenericRGB;
  CGColor *v5;

  a1[1] = (CGColorRef)v1;
  v3 = v1[12];
  if (v3)
  {
    GenericRGB = v1[12];
  }
  else
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v3 = 0;
  }
  *a1 = GenericRGB;
  v5 = v3;
  return UnlitMaterial.__tintColor.modify;
}

void UnlitMaterial.__tintColor.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    UnlitMaterial.__tintColor.setter(v3);

  }
  else
  {
    UnlitMaterial.__tintColor.setter(v2);
  }
}

void UnlitMaterial.__baseColor.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  specialized Material.getLegacyBase(legacy:)(*(_QWORD *)(v1 + 80), *(void **)(v1 + 88), *(void **)(v1 + 104), a1);
}

uint64_t UnlitMaterial.__baseColor.setter(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  CGColor *v17;
  CGColor *v18;
  double Alpha;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = v1[11];
  v5 = (void *)v1[12];
  v6 = (void *)v1[13];
  v21 = v1[10];
  v22 = v4;
  v23 = v5;
  v24 = v6;
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = v6;
  specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v21, v2, v3);
  outlined consume of __MaterialColorParameter(v2, v3);
  v10 = v21;
  v9 = v22;
  v12 = v23;
  v11 = v24;
  v13 = (void *)v1[12];
  v14 = (void *)v1[13];
  v1[10] = v21;
  v1[11] = v9;
  v1[12] = v12;
  v1[13] = v11;
  v15 = v11;
  swift_bridgeObjectRetain();
  v16 = v12;
  swift_bridgeObjectRelease();

  v17 = (CGColor *)specialized Material.getColor(name:)(v10, v9);
  if (v17)
  {
    v18 = v17;
    Alpha = CGColorGetAlpha(v17);

    LOBYTE(v17) = Alpha < 1.0;
  }
  UnlitMaterial.setTransparencyFromBlending(_:)((Swift::Bool)v17);

  return swift_bridgeObjectRelease();
}

void (*UnlitMaterial.__baseColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  CGColor *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  CGColorRef GenericRGB;
  CGColor *v10;
  _QWORD v12[5];
  void *v13;
  void *v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = v1[10];
  v4 = (void *)v1[11];
  v5 = (CGColor *)v1[13];
  v12[3] = &type metadata for UnlitMaterial;
  v12[4] = &protocol witness table for UnlitMaterial;
  v12[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial((uint64_t)v1, v12[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v12, v3, v4, (uint64_t)&v13);
  v7 = v13;
  v6 = v14;
  v8 = v15;
  outlined copy of MaterialParameters.Texture?(v14, v15);

  outlined consume of MaterialParameters.Texture?(v6, v8);
  if (v8)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v6, v8);
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    GenericRGB = v5;
    if (!v5)
      GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    *(_QWORD *)a1 = GenericRGB;
    *(_BYTE *)(a1 + 8) = 0;
    v10 = v5;
  }
  return UnlitMaterial.__baseColor.modify;
}

void UnlitMaterial.__baseColor.modify(uint64_t a1, char a2)
{
  void *v2;
  char v3;
  void *v4;
  char v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of __MaterialColorParameter(v2, v3);
    UnlitMaterial.__baseColor.setter((uint64_t)&v4);
    outlined consume of __MaterialColorParameter(v2, v3);
  }
  else
  {
    UnlitMaterial.__baseColor.setter((uint64_t)&v4);
  }
}

void UnlitMaterial.__usesTransparency.setter(char a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(v1 + 152);
  if ((a1 & 1) == 0)
  {
    v3 = v2 & 0xFFFE;
    if (v2 == v3)
      return;
    goto LABEL_5;
  }
  v3 = v2 | 1;
  if (v2 != (v2 | 1))
LABEL_5:
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v3 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
}

Swift::Void __swiftcall UnlitMaterial.setTransparencyFromBlending(_:)(Swift::Bool a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(v1 + 152);
  if (!a1)
  {
    v3 = v2 & 0xFFFE;
    if (v2 == v3)
      return;
    goto LABEL_5;
  }
  v3 = v2 | 1;
  if (v2 != (v2 | 1))
LABEL_5:
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v3 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
}

void (*UnlitMaterial.__usesTransparency.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 152) & 1;
  return UnlitMaterial.__usesTransparency.modify;
}

void UnlitMaterial.__usesTransparency.modify(uint64_t *a1, char a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v3 = *((unsigned __int8 *)a1 + 8);
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    UnlitMaterial.__usesTransparency.setter(v3);
    return;
  }
  v5 = *(unsigned __int16 *)(v4 + 152);
  if (!v3)
  {
    v6 = v5 & 0xFFFE;
    if (v5 == v6)
      return;
    goto LABEL_7;
  }
  v6 = v5 | 1;
  if (v5 != (v5 | 1))
LABEL_7:
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v6 | (*(unsigned __int8 *)(v4 + 155) << 24) | (*(unsigned __int8 *)(v4 + 154) << 16));
}

uint64_t UnlitMaterial.init(color:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE v6[40];

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v6);
  return UnlitMaterial.init(color:assetService:)(a1, (uint64_t)v6, a2);
}

uint64_t UnlitMaterial.init(color:assetService:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 80) = 0x6E6954726F6C6F63;
  *(_QWORD *)(a3 + 88) = 0xE900000000000074;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_BYTE *)(a3 + 128) = 1;
  *(_WORD *)(a3 + 129) = 257;
  *(_QWORD *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 152) = 33685504;
  v6 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000017, (void *)0x800000021BE94150);
  *(_QWORD *)(a3 + 40) = v6;
  v7 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a3 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v7;
  type metadata accessor for UnlitMaterial.Program();
  v8 = swift_allocObject();
  *(_WORD *)(v8 + 16) = 513;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(a3 + 136) = v8;
  v13 = (unint64_t)a1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  swift_retain();
  v9 = a1;
  UnlitMaterial.color.setter((uint64_t)&v13);
  v10 = *(void **)(a3 + 104);
  v11 = v9;

  *(_QWORD *)(a3 + 104) = v9;
  outlined init with copy of __REAssetService(a2, (uint64_t)&v13);
  outlined destroy of __REAssetService?(a3);
  outlined init with take of BindableDataInternal(&v13, a3);

  return __swift_destroy_boxed_opaque_existential_1(a2);
}

uint64_t UnlitMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v6;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v6);
  UnlitMaterial.init(assetService:)((uint64_t)&v6, a1);
  v3 = *(_QWORD *)(a1 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v3;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return swift_release();
}

uint64_t UnlitMaterial.init(assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 80) = 0x6E6954726F6C6F63;
  *(_QWORD *)(a2 + 88) = 0xE900000000000074;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_BYTE *)(a2 + 128) = 1;
  *(_WORD *)(a2 + 129) = 257;
  *(_QWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a2 + 152) = 33685504;
  v4 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000017, (void *)0x800000021BE94150);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a2 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v5;
  type metadata accessor for UnlitMaterial.Program();
  v6 = swift_allocObject();
  *(_WORD *)(v6 + 16) = 513;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(a2 + 136) = v6;
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  swift_retain();
  outlined destroy of __REAssetService?(a2);
  outlined init with take of BindableDataInternal(v8, a2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

Swift::Void __swiftcall UnlitMaterial.setOpacityThresholdFunctionConstant(_:)(Swift::Bool a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int16 *)(v1 + 152);
  if (!a1)
  {
    v3 = v2 & 0xFFFFFFFD;
    if (v2 == (v2 & 0xFFFFFFFD))
      return;
    goto LABEL_5;
  }
  v3 = v2 | 2;
  if (v2 != (v2 | 2))
LABEL_5:
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v3 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
}

void key path setter for UnlitMaterial.opacityThreshold : UnlitMaterial(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;

  v3 = *(_BYTE *)(a1 + 4);
  UnlitMaterial.setOpacityThresholdFunctionConstant(_:)(v3 != 1);
  if ((v3 & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v4 = REMaterialParameterBlockValueCopy();
      v5 = *(void **)(a2 + 72);
      *(_QWORD *)(a2 + 72) = v4;

    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void UnlitMaterial.opacityThreshold.setter(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void *v4;

  v2 = *(unsigned __int16 *)(v1 + 152);
  if ((a1 & 0x100000000) != 0)
  {
    if (v2 != (v2 & 0xFFFFFFFD))
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v2 & 0xFFFFFFFD | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
  }
  else
  {
    if (v2 != (v2 | 2))
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v2 | 2 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v3 = REMaterialParameterBlockValueCopy();
      v4 = *(void **)(v1 + 72);
      *(_QWORD *)(v1 + 72) = v3;

    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void (*UnlitMaterial.opacityThreshold.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = BYTE4(v3) & 1;
  return UnlitMaterial.opacityThreshold.modify;
}

void UnlitMaterial.opacityThreshold.modify(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  void **v3;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 12);
  UnlitMaterial.setOpacityThresholdFunctionConstant(_:)(v2 != 1);
  if ((v2 & 1) == 0)
  {
    v3 = (void **)(v1 + 72);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v4 = REMaterialParameterBlockValueCopy();
      v5 = *v3;
      *v3 = (void *)v4;

    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void UnlitMaterial.blending.setter(uint64_t a1)
{
  _BYTE v1[40];

  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

void (*UnlitMaterial.blending.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UnlitMaterial.blending.getter((uint64_t)(v3 + 10));
  return UnlitMaterial.blending.modify;
}

void UnlitMaterial.blending.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2);
    outlined retain of PhysicallyBasedMaterial.Blending(v2);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2);
    outlined consume of PhysicallyBasedMaterial.Blending(*(_QWORD *)(v2 + 80), *(void **)(v2 + 88), *(_QWORD *)(v2 + 96));
  }
  else
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2 + 40);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2 + 40);
  }
  free((void *)v2);
}

uint64_t UnlitMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t UnlitMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = result;
  return result;
}

uint64_t (*UnlitMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t UnlitMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t UnlitMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = result;
  *(_BYTE *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*UnlitMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*UnlitMaterial.__writesDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*UnlitMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t UnlitMaterial.shaderCache.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v2 = v0;
    if (one-time initialization token for shaderCacheRegistry != -1)
      swift_once();
    swift_retain();
    UnlitMaterial.assetService.getter((uint64_t)v4);
    v1 = specialized AssetServiceScopedRegistry.instance(for:)(v4);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    swift_retain();
    swift_release();
    *(_QWORD *)(v2 + 144) = v1;
  }
  swift_retain();
  return v1;
}

Swift::Int UnlitMaterial.UnlitShaderParameters.hashValue.getter()
{
  uint64_t v0;
  int v1;
  int v2;
  Swift::UInt16 v3;
  Swift::UInt8 v4;

  v1 = *(unsigned __int8 *)(v0 + 2);
  v2 = *(unsigned __int8 *)(v0 + 3);
  v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v1 != 2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
    if (v2 != 2)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v2 == 2)
    goto LABEL_5;
LABEL_3:
  v4 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_6:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnlitMaterial.UnlitShaderParameters()
{
  uint64_t v0;
  int v1;
  int v2;
  Swift::UInt8 v3;

  v1 = *(unsigned __int8 *)(v0 + 2);
  v2 = *(unsigned __int8 *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  if (v1 != 2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
    if (v2 != 2)
      goto LABEL_3;
LABEL_5:
    v3 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v2 == 2)
    goto LABEL_5;
LABEL_3:
  v3 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_6:
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnlitMaterial.UnlitShaderParameters()
{
  uint64_t v0;
  int v1;
  int v2;
  Swift::UInt16 v3;
  Swift::UInt8 v4;

  v1 = *(unsigned __int8 *)(v0 + 2);
  v2 = *(unsigned __int8 *)(v0 + 3);
  v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v1 != 2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
    if (v2 != 2)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v2 == 2)
    goto LABEL_5;
LABEL_3:
  v4 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_6:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance UnlitMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance UnlitMaterial(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = result;
  return result;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance UnlitMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance UnlitMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 129) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance UnlitMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance UnlitMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance UnlitMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 130) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance UnlitMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance UnlitMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance UnlitMaterial(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = result;
  *(_BYTE *)(v2 + 128) = a2 & 1;
  return result;
}

unsigned __int8 *UnlitMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = *result;
  return result;
}

unsigned __int8 *(*UnlitMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 112) == 1;
  return UnlitMaterial.triangleFillMode.modify;
}

unsigned __int8 *UnlitMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 112) = result[8];
  return result;
}

void UnlitMaterial.init(color:applyPostProcessToneMap:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;
  _BYTE v7[40];

  v5 = a1;
  v6 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6, (uint64_t)v7);
  UnlitMaterial.init(color:assetService:)(v5, (uint64_t)v7, a3);
  if ((a2 & 1) == 0)
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_DWORD *)(a3 + 152) | 4);

}

void UnlitMaterial.init(applyPostProcessToneMap:)(char a1@<W0>, uint64_t a2@<X8>)
{
  UnlitMaterial.init()(a2);
  if ((a1 & 1) == 0)
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_DWORD *)(a2 + 152) | 4);
}

uint64_t UnlitMaterial.writesDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t UnlitMaterial.writesDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 129) = result;
  return result;
}

_BYTE *(*UnlitMaterial.writesDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 129);
  return UnlitMaterial.writesDepth.modify;
}

_BYTE *UnlitMaterial.writesDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 129) = result[8];
  return result;
}

uint64_t UnlitMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t UnlitMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 130) = result;
  return result;
}

_BYTE *(*UnlitMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 130);
  return UnlitMaterial.readsDepth.modify;
}

_BYTE *UnlitMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 130) = result[8];
  return result;
}

void UnlitMaterial.Program.descriptor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 17);
  *a1 = *(_BYTE *)(v1 + 16);
  a1[1] = v2;
}

uint64_t UnlitMaterial.Program.Descriptor.applyPostProcessToneMap.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t UnlitMaterial.Program.Descriptor.applyPostProcessToneMap.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*UnlitMaterial.Program.Descriptor.applyPostProcessToneMap.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void UnlitMaterial.Program.Descriptor.blendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *UnlitMaterial.Program.Descriptor.blendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*UnlitMaterial.Program.Descriptor.blendMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static UnlitMaterial.Program.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0)
      return 0;
  }
  return 1;
}

void UnlitMaterial.Program.Descriptor.hash(into:)()
{
  Swift::UInt8 *v0;
  int v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int UnlitMaterial.Program.Descriptor.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  int v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnlitMaterial.Program.Descriptor(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  int v5;

  if (*a1 != *a2)
    return 0;
  v3 = a1[1];
  v4 = a2[1];
  if (v3 == 2)
  {
    if (v4 == 2)
      return 1;
  }
  else
  {
    v5 = (v4 ^ v3) & 1;
    if (v4 != 2 && v5 == 0)
      return 1;
  }
  return 0;
}

void protocol witness for Hashable.hash(into:) in conformance UnlitMaterial.Program.Descriptor()
{
  Swift::UInt8 *v0;
  int v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnlitMaterial.Program.Descriptor()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  int v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

void UnlitMaterial.Program.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16));
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

uint64_t UnlitMaterial.Program.__allocating_init(descriptor:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject();
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  *(_QWORD *)(v4 + 80) = v3;
  *(_BYTE *)(v4 + 112) = *a1;
  *(_BYTE *)(v4 + 113) = a1[1];
  return swift_task_switch();
}

uint64_t UnlitMaterial.Program.init(descriptor:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = v1;
  *(_BYTE *)(v2 + 112) = *a1;
  *(_BYTE *)(v2 + 113) = a1[1];
  return swift_task_switch();
}

uint64_t UnlitMaterial.Program.init(descriptor:)()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD);

  v1 = *(unsigned __int8 *)(v0 + 113);
  v2 = *(unsigned __int8 *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  *(_BYTE *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 17) = v1;
  if (one-time initialization token for shaderCacheRegistry != -1)
    swift_once();
  if (v2)
    v4 = 0;
  else
    v4 = 4;
  v5 = v4 | (v1 != 2);
  v6 = *(unsigned __int8 *)(v0 + 113);
  swift_retain();
  v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, v0 + 16);
  *(_QWORD *)(v0 + 88) = specialized AssetServiceScopedRegistry.instance(for:)((_QWORD *)(v0 + 16));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v10 = (uint64_t (*)(_QWORD))((char *)&async function pointer to specialized ShaderCache.getResource(_:)
                                       + async function pointer to specialized ShaderCache.getResource(_:));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v8;
  *v8 = v0;
  v8[1] = UnlitMaterial.Program.init(descriptor:);
  return v10(v5 | (v6 << 16) | 0x2000000u);
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t UnlitMaterial.Program.init(descriptor:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_release();
  }
  else
  {
    swift_release();
    *(_QWORD *)(v4 + 104) = a1;
  }
  return swift_task_switch();
}

uint64_t UnlitMaterial.Program.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t UnlitMaterial.Program.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Int UnlitMaterial.Program.hashValue.getter()
{
  uint64_t v0;
  int v1;

  Hasher.init(_seed:)();
  v1 = *(unsigned __int8 *)(v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16));
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnlitMaterial.Program(uint64_t *a1, uint64_t *a2)
{
  return specialized static UnlitMaterial.Program.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnlitMaterial.Program()
{
  return UnlitMaterial.Program.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UnlitMaterial.Program()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(*(_QWORD *)v0 + 16));
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnlitMaterial.Program()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt8 v2;
  int v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(unsigned __int8 *)(v1 + 17);
  Hasher._combine(_:)(v2);
  if (v3 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 & 1);
  }
  return Hasher._finalize()();
}

uint64_t UnlitMaterial.program.getter()
{
  return swift_retain();
}

uint64_t key path setter for UnlitMaterial.program : UnlitMaterial(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  swift_retain_n();
  swift_release();
  *(_QWORD *)(a2 + 136) = v3;
  v4 = *(_QWORD *)(v3 + 24);
  swift_retain();
  swift_release();
  result = swift_release();
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t UnlitMaterial.program.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + 136) = a1;
  v3 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_release();
  result = swift_release();
  *(_QWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*UnlitMaterial.program.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 136);
  a1[1] = v1;
  swift_retain();
  return UnlitMaterial.program.modify;
}

uint64_t UnlitMaterial.program.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *(_QWORD *)(v4 + 136) = v3;
    v5 = *(_QWORD *)(v3 + 24);
    swift_retain();
    swift_release();
    swift_release();
    *(_QWORD *)(v4 + 40) = v5;
    return swift_release();
  }
  else
  {
    swift_release();
    *(_QWORD *)(v4 + 136) = v3;
    v7 = *(_QWORD *)(v3 + 24);
    swift_retain();
    swift_release();
    result = swift_release();
    *(_QWORD *)(v4 + 40) = v7;
  }
  return result;
}

uint64_t UnlitMaterial.init(program:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 FeatureFlags;
  char v8;
  char v9;
  uint64_t inited;
  __int128 v12[2];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 80) = 0x6E6954726F6C6F63;
  *(_QWORD *)(a2 + 88) = 0xE900000000000074;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_BYTE *)(a2 + 128) = 1;
  *(_WORD *)(a2 + 129) = 257;
  *(_DWORD *)(a2 + 152) = 33685504;
  *(_QWORD *)(a2 + 136) = a1;
  *(_QWORD *)(a2 + 144) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v3;
  swift_retain();
  swift_retain();
  v4 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)(a2 + 48) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v4;
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v12);
  outlined destroy of __REAssetService?(a2);
  outlined init with take of BindableDataInternal(v12, a2);
  v6 = *(_QWORD *)(a2 + 40);
  swift_beginAccess();
  FeatureFlags = REMaterialAssetGetFeatureFlags();
  if ((FeatureFlags & 8) != 0)
    v8 = 1;
  else
    v8 = 2;
  *(_WORD *)(a2 + 152) = FeatureFlags;
  if ((FeatureFlags & 0x10) != 0)
    v9 = 1;
  else
    v9 = 2;
  *(_BYTE *)(a2 + 154) = v8;
  *(_BYTE *)(a2 + 155) = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(inited + 32) = v6;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  return swift_release();
}

uint64_t UnlitMaterial.init(texture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  _QWORD v8[4];
  int v9;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v8);
  UnlitMaterial.init(assetService:)((uint64_t)v8, a2);
  if (one-time initialization token for linearSRGBWhite != -1)
    swift_once();
  v5 = (id)static CGColorRef.linearSRGBWhite;
  swift_retain();
  v6 = (id)REMaterialCreateDefaultSamplerDescriptor();
  v8[0] = v5;
  v8[1] = v6;
  v8[2] = a1;
  v8[3] = 0;
  v9 = 84148994;
  UnlitMaterial.color.setter((uint64_t)v8);
  return swift_release();
}

void UnlitMaterial.faceCulling.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(v1 + 128) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 120) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 120);
  }
  *a1 = v2;
}

unsigned __int8 *UnlitMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  _BOOL4 v3;

  v2 = *result;
  v3 = v2 > 1;
  *(_QWORD *)(v1 + 120) = v3 ^ (v2 != 0);
  *(_BYTE *)(v1 + 128) = v3;
  return result;
}

uint64_t *(*UnlitMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = 2;
  if ((*(_BYTE *)(v1 + 128) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + 120) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(v1 + 120);
  }
  *(_BYTE *)(a1 + 8) = v2;
  return UnlitMaterial.faceCulling.modify;
}

uint64_t *UnlitMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;

  v1 = *result;
  v2 = *((unsigned __int8 *)result + 8);
  v3 = v2 == 1;
  v4 = v2 > 1;
  v5 = v3;
  *(_QWORD *)(v1 + 120) = v5;
  *(_BYTE *)(v1 + 128) = v4;
  return result;
}

void UnlitMaterial.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
}

uint64_t UnlitMaterial.textureCoordinateTransform.setter(uint64_t a1)
{
  return UnlitMaterial.textureCoordinateTransform.setter(a1, 0, (void *)0xE000000000000000);
}

uint64_t (*UnlitMaterial.textureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  float32x2_t v1;

  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
  return UnlitMaterial.textureCoordinateTransform.modify;
}

uint64_t UnlitMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return UnlitMaterial.textureCoordinateTransform.modify(a1, a2, 0, (void *)0xE000000000000000);
}

void UnlitMaterial.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
}

uint64_t UnlitMaterial.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return UnlitMaterial.textureCoordinateTransform.setter(a1, 49, (void *)0xE100000000000000);
}

uint64_t UnlitMaterial.textureCoordinateTransform.setter(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a2, a3, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t (*UnlitMaterial.secondaryTextureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  float32x2_t v1;

  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
  return UnlitMaterial.secondaryTextureCoordinateTransform.modify;
}

uint64_t UnlitMaterial.secondaryTextureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return UnlitMaterial.textureCoordinateTransform.modify(a1, a2, 49, (void *)0xE100000000000000);
}

uint64_t UnlitMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a3, a4, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t specialized static UnlitMaterial.Program.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;

  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = *(unsigned __int8 *)(a2 + 17);
  if (v3 == 2)
  {
    if (v4 == 2)
      return 1;
  }
  else
  {
    v5 = (v4 ^ v3) & 1;
    if (v4 != 2 && v5 == 0)
      return 1;
  }
  return 0;
}

uint64_t specialized static UnlitMaterial.UnlitShaderParameters.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;

  if (*a1 != *a2)
    return 0;
  v2 = *((unsigned __int8 *)a1 + 2);
  v3 = *((unsigned __int8 *)a1 + 3);
  v4 = *((unsigned __int8 *)a2 + 2);
  v5 = *((unsigned __int8 *)a2 + 3);
  if (v2 != 2)
  {
    v6 = (v4 ^ v2) & 1;
    if (v4 == 2 || v6 != 0)
      return 0;
LABEL_10:
    if (v3 == 2)
    {
      if (v5 != 2)
        return 0;
    }
    else
    {
      v8 = (v3 & 1) == 0;
      if (v5 == 2 || ((v8 ^ v5) & 1) == 0)
        return 0;
    }
    return 1;
  }
  if (v4 == 2)
    goto LABEL_10;
  return 0;
}

uint64_t type metadata accessor for UnlitMaterial.Program()
{
  return objc_opt_self();
}

uint64_t outlined retain of PhysicallyBasedMaterial.Blending(uint64_t a1)
{
  outlined copy of PhysicallyBasedMaterial.Blending(*(_QWORD *)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnlitMaterial.Program.Descriptor, &type metadata for UnlitMaterial.Program.Descriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnlitMaterial.Program and conformance UnlitMaterial.Program()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnlitMaterial.Program and conformance UnlitMaterial.Program;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.Program and conformance UnlitMaterial.Program)
  {
    v1 = type metadata accessor for UnlitMaterial.Program();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnlitMaterial.Program, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.Program and conformance UnlitMaterial.Program);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnlitMaterial.UnlitShaderParameters, &type metadata for UnlitMaterial.UnlitShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnlitMaterial.UnlitShaderParameters, &type metadata for UnlitMaterial.UnlitShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnlitMaterial.UnlitShaderParameters, &type metadata for UnlitMaterial.UnlitShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters);
  }
  return result;
}

void sub_21BDF9974(id *a1)
{
  UnlitMaterial.__tintColor.setter(*a1);
}

void sub_21BDF999C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;

  specialized Material.getLegacyBase(legacy:)(*(_QWORD *)(a1 + 80), *(void **)(a1 + 88), *(void **)(a1 + 104), (uint64_t)&v4);
  v3 = v5;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v3;
}

uint64_t sub_21BDF99E8(uint64_t a1)
{
  char v1;
  void *v3;
  char v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(void **)a1;
  v4 = v1;
  outlined copy of __MaterialColorParameter(v3, v1);
  return UnlitMaterial.__baseColor.setter((uint64_t)&v3);
}

uint64_t sub_21BDF9A2C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 152) & 1;
  return result;
}

void sub_21BDF9A3C(char *a1)
{
  UnlitMaterial.__usesTransparency.setter(*a1);
}

unint64_t sub_21BDF9A60@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

double sub_21BDF9A94@<D0>(uint64_t a1@<X8>)
{
  int v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  int v6;

  UnlitMaterial.blending.getter((uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v2;
  return result;
}

void sub_21BDF9AD4(uint64_t a1)
{
  _BYTE v1[40];

  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  outlined retain of PhysicallyBasedMaterial.Blending((uint64_t)v1);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

uint64_t sub_21BDF9B10@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 112) == 1;
  return result;
}

unsigned __int8 *sub_21BDF9B24(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 112) = *result;
  return result;
}

uint64_t sub_21BDF9B30@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 129);
  return result;
}

_BYTE *sub_21BDF9B3C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 129) = *result;
  return result;
}

uint64_t sub_21BDF9B48@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 130);
  return result;
}

_BYTE *sub_21BDF9B54(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 130) = *result;
  return result;
}

uint64_t sub_21BDF9B60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 136);
  return swift_retain();
}

uint64_t sub_21BDF9B70@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 2;
  if ((*(_BYTE *)(result + 128) & 1) == 0)
  {
    if (*(_QWORD *)(result + 120) >= 3uLL)
      v2 = 2;
    else
      v2 = *(_QWORD *)(result + 120);
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_21BDF9B90(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return UnlitMaterial.faceCulling.setter(&v2);
}

double sub_21BDF9BC4@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_27Tm(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_21BDF9BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_28Tm(a1, a2, a3, a4, 0, (void *)0xE000000000000000);
}

double sub_21BDF9BDC@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_27Tm(49, (void *)0xE100000000000000, a1);
}

double keypath_get_27Tm@<D0>(uint64_t a1@<X3>, void *a2@<X4>, float32x2_t *a3@<X8>)
{
  double result;
  float32x2_t v5;
  __int32 v6;
  float32x2_t v7[2];
  __int32 v8;

  specialized Material.getUVTransform(withSuffix:)(a1, a2, v7);
  result = *(double *)v7;
  v5 = v7[1];
  v6 = v8;
  *a3 = v7[0];
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t sub_21BDF9C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_28Tm(a1, a2, a3, a4, 49, (void *)0xE100000000000000);
}

uint64_t keypath_set_28Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a5, a6, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t destroy for UnlitMaterial(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for UnlitMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(void **)(a2 + 96);
  v11 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v8;
  swift_bridgeObjectRetain();
  v15 = v10;
  v16 = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UnlitMaterial(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (void *)*((_QWORD *)a2 + 9);
  v8 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(void **)(a1 + 96);
  v11 = (void *)*((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 104);
  v14 = (void *)*((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 104) = v14;
  v15 = v14;

  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  v16 = *((_QWORD *)a2 + 15);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_QWORD *)(a1 + 120) = v16;
  *(_BYTE *)(a1 + 129) = *((_BYTE *)a2 + 129);
  *(_BYTE *)(a1 + 130) = *((_BYTE *)a2 + 130);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(_BYTE *)(a1 + 154) = *((_BYTE *)a2 + 154);
  *(_BYTE *)(a1 + 155) = *((_BYTE *)a2 + 155);
  return a1;
}

__n128 __swift_memcpy156_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for UnlitMaterial(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  v9 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnlitMaterial(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 156))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnlitMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 156) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 156) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnlitMaterial()
{
  return &type metadata for UnlitMaterial;
}

uint64_t method lookup function for UnlitMaterial.Program()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UnlitMaterial.Program.__allocating_init(descriptor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(v1 + 96) + *(_QWORD *)(v1 + 96));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  return v6(a1);
}

uint64_t getEnumTagSinglePayload for UnlitMaterial.Program.Descriptor(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnlitMaterial.Program.Descriptor(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BDFA2D0 + 4 * byte_21BE7E755[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_21BDFA304 + 4 * byte_21BE7E750[v4]))();
}

uint64_t sub_21BDFA304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BDFA30C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21BDFA314);
  return result;
}

uint64_t sub_21BDFA320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21BDFA328);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BDFA32C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BDFA334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnlitMaterial.Program.Descriptor()
{
  return &type metadata for UnlitMaterial.Program.Descriptor;
}

_DWORD *__swift_memcpy4_2(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for UnlitMaterial.UnlitShaderParameters(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 2) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 2);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 2) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UnlitMaterial.UnlitShaderParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)(result + 2) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnlitMaterial.UnlitShaderParameters()
{
  return &type metadata for UnlitMaterial.UnlitShaderParameters;
}

unint64_t instantiation function for generic protocol witness table for UnlitMaterial.UnlitShaderParameters(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL static BlendingType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BlendingType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int BlendingType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for materialParametersService()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for __ServiceLocator();
  v0 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  result = MEMORY[0x22076FDAC](v1);
  if (result)
  {
    static MaterialResourceUtility.materialParametersService = result;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for dummyResource()
{
  uint64_t result;

  result = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000017, (void *)0x800000021BE94150);
  static MaterialResourceUtility.dummyResource = result;
  return result;
}

uint64_t UnlitMaterialResource.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t (*UnlitMaterialResource.__parameterBlock.modify(uint64_t a1))()
{
  uint64_t v2;

  v2 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  return UnlitMaterialResource.__parameterBlock.modify;
}

uint64_t UnlitMaterialResource.__parameters.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:)(_BYTE *a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 56) = a4;
  *(_QWORD *)(v6 + 64) = v5;
  *(float *)(v6 + 120) = a5;
  *(_QWORD *)(v6 + 48) = a3;
  *(_BYTE *)(v6 + 125) = a2;
  *(_BYTE *)(v6 + 126) = *a1;
  return swift_task_switch();
}

uint64_t static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t UnlitParameters;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 124) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_DWORD *)(v0 + 20) = 0;
  RECGColorToColorGamut();
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 127) = *(_BYTE *)(v0 + 124);
  if (one-time initialization token for materialParametersService != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 72) = static MaterialResourceUtility.materialParametersService;
  if (v1)
  {
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 80) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  else
  {
    UnlitParameters = REMaterialParametersServiceCreateUnlitParameters();
    v4 = swift_allocObject();
    *(_QWORD *)(v0 + 96) = v4;
    *(_QWORD *)(v4 + 16) = UnlitParameters;
    v5 = async function pointer to specialized RequestLoadable.awaitForResourceSharing();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:);
    return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                  + v5))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v1 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t UnlitParameters;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  UnlitParameters = REMaterialParametersServiceCreateUnlitParameters();
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 96) = v2;
  *(_QWORD *)(v2 + 16) = UnlitParameters;
  v3 = async function pointer to specialized RequestLoadable.awaitForResourceSharing();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v4;
  *v4 = v0;
  v4[1] = static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:);
  return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + v3))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 96));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UnlitMaterialResource.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t UnlitMaterialResource.blending.getter@<X0>(char *a1@<X8>)
{
  return UnlitMaterialResource.blending.getter(MEMORY[0x24BE25860], a1);
}

uint64_t UnlitMaterialResource.tonemapDisabled.getter()
{
  return REUnlitMaterialParametersGetDisableTonemap();
}

id UnlitMaterialResource.color.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ColorTexture;
  uint64_t v3;
  id result;
  uint64_t v5;
  int v6;

  ColorTexture = REUnlitMaterialParametersGetColorTexture();
  REUnlitMaterialParametersGetColorTint();
  v3 = RECreateCGColorFromColorGamut();
  result = 0;
  if (ColorTexture)
  {
    type metadata accessor for TextureResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = ColorTexture;
    *(_QWORD *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v6 = 84148994;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t UnlitMaterialResource.color.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)a1;
  v1 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  RECGColorToColorGamut();
  REUnlitMaterialParametersSetColorTint();
  if (v3)
  {
    v4 = v1;
    swift_retain();

    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_release();
  }
  else
  {

    outlined consume of MaterialParameters.Texture?(v1, 0);
  }
  return REUnlitMaterialParametersSetColorTexture();
}

void (*UnlitMaterialResource.color.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  UnlitMaterialResource.color.getter((uint64_t)v3);
  return UnlitMaterialResource.color.modify;
}

void UnlitMaterialResource.color.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.baseColor.modify(a1, a2, (void (*)(_QWORD *))UnlitMaterialResource.color.setter);
}

uint64_t UnlitMaterialResource.cutoutThreshold.getter()
{
  return REUnlitMaterialParametersGetOpacityThreshold();
}

uint64_t UnlitMaterialResource.cutoutThreshold.setter()
{
  return REUnlitMaterialParametersSetOpacityThreshold();
}

uint64_t (*UnlitMaterialResource.cutoutThreshold.modify(uint64_t a1))(float *a1, uint64_t a2)
{
  uint64_t v1;
  int v3;

  *(_QWORD *)a1 = v1;
  REUnlitMaterialParametersGetOpacityThreshold();
  *(_DWORD *)(a1 + 8) = v3;
  return UnlitMaterialResource.cutoutThreshold.modify;
}

uint64_t UnlitMaterialResource.cutoutThreshold.modify(float *a1, uint64_t a2)
{
  return UnlitMaterialResource.cutoutThreshold.modify(a1, a2, (uint64_t (*)(_QWORD, float))MEMORY[0x24BE258A0]);
}

uint64_t protocol witness for Material.__parameterBlock.getter in conformance UnlitMaterialResource@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t (*protocol witness for Material.__parameterBlock.modify in conformance UnlitMaterialResource(uint64_t a1))()
{
  uint64_t v2;

  v2 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  return UnlitMaterialResource.__parameterBlock.modify;
}

uint64_t UnlitMaterialResource.__resource.getter()
{
  if (one-time initialization token for dummyResource != -1)
    swift_once();
  return swift_retain();
}

uint64_t UnlitMaterialResource.__parameterBlock.setter(uint64_t a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*PhysicallyBasedMaterialResource.__parameterBlock.modify(uint64_t a1))()
{
  uint64_t v2;

  v2 = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  return UnlitMaterialResource.__parameterBlock.modify;
}

uint64_t static PhysicallyBasedMaterialResource.load(blending:hasClearcoat:isAnisotropic:hasSheen:)(_BYTE *a1, char a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 50) = a4;
  *(_BYTE *)(v5 + 49) = a3;
  *(_BYTE *)(v5 + 48) = a2;
  *(_BYTE *)(v5 + 51) = *a1;
  return swift_task_switch();
}

uint64_t static PhysicallyBasedMaterialResource.load(blending:hasClearcoat:isAnisotropic:hasSheen:)()
{
  uint64_t v0;
  uint64_t PbrParameters;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  if (one-time initialization token for materialParametersService != -1)
    swift_once();
  PbrParameters = REMaterialParametersServiceCreatePbrParameters();
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v2 + 16) = PbrParameters;
  v5 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                         + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = static MeshResource.generatePlane(width:depth:cornerRadius:);
  return v5();
}

uint64_t PhysicallyBasedMaterialResource.blending.getter@<X0>(char *a1@<X8>)
{
  return UnlitMaterialResource.blending.getter(MEMORY[0x24BE235C0], a1);
}

uint64_t UnlitMaterialResource.blending.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = a1(*(_QWORD *)(v2 + 16));
  v5 = (_DWORD)result == 1;
  if ((_DWORD)result == 2)
    v5 = 2;
  *a2 = v5;
  return result;
}

uint64_t PhysicallyBasedMaterialResource.hasClearcoat.getter()
{
  return REPbrMaterialParametersHasClearcoat();
}

uint64_t PhysicallyBasedMaterialResource.isAnisotropic.getter()
{
  return REPbrMaterialParametersIsAnisotropic();
}

uint64_t PhysicallyBasedMaterialResource.hasSheen.getter()
{
  return REPbrMaterialParametersHasSheen();
}

id PhysicallyBasedMaterialResource.color.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ColorTexture;
  uint64_t v3;
  id result;
  uint64_t v5;
  int v6;

  ColorTexture = REPbrMaterialParametersGetColorTexture();
  REPbrMaterialParametersGetColorTint();
  v3 = RECreateCGColorFromColorGamut();
  result = 0;
  if (ColorTexture)
  {
    type metadata accessor for TextureResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = ColorTexture;
    *(_QWORD *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v6 = 84148994;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t key path setter for UnlitMaterialResource.color : UnlitMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id *))
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  id v12[4];
  int v13;

  v6 = *(void **)(a1 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 32);
  v12[0] = *(id *)a1;
  v12[1] = v6;
  v12[2] = v7;
  v12[3] = v8;
  v13 = v9;
  v10 = v12[0];
  outlined copy of MaterialParameters.Texture?(v6, (uint64_t)v7);
  return a5(v12);
}

void PhysicallyBasedMaterialResource.color.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)a1;
  v1 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  RECGColorToColorGamut();
  REPbrMaterialParametersSetColorTint();
  if (v3)
  {
    v4 = v1;
    swift_retain();

    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_release();
    REPbrMaterialParametersSetColorTexture();
  }
  else
  {

    outlined consume of MaterialParameters.Texture?(v1, 0);
  }
}

void (*PhysicallyBasedMaterialResource.color.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.color.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.color.modify;
}

void PhysicallyBasedMaterialResource.color.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.baseColor.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterialResource.color.setter);
}

id PhysicallyBasedMaterialResource.normal.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.normal.getter(MEMORY[0x24BE23630], a1);
}

uint64_t PhysicallyBasedMaterialResource.normal.setter(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(void **)result;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v2, v1);
    swift_release();
    return REPbrMaterialParametersSetNormalTexture();
  }
  return result;
}

void (*PhysicallyBasedMaterialResource.normal.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterialResource.normal.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.normal.modify;
}

void PhysicallyBasedMaterialResource.normal.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      REPbrMaterialParametersSetNormalTexture();
      v4 = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v4 = 0;
    }
    outlined consume of MaterialParameters.Texture?(*(void **)v2, v4);
  }
  else if (v3)
  {
    v5 = *(void **)v2;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v5, v3);
    swift_release();
    REPbrMaterialParametersSetNormalTexture();
  }
  free((void *)v2);
}

id PhysicallyBasedMaterialResource.roughness.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE23648], MEMORY[0x24BE23640], a1);
}

uint64_t PhysicallyBasedMaterialResource.roughness.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE23740], MEMORY[0x24BE23748]);
}

void (*PhysicallyBasedMaterialResource.roughness.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.roughness.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.roughness.modify;
}

void PhysicallyBasedMaterialResource.roughness.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE23740], MEMORY[0x24BE23748]);
}

id PhysicallyBasedMaterialResource.metallic.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE23628], MEMORY[0x24BE23620], a1);
}

uint64_t PhysicallyBasedMaterialResource.metallic.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE23720], MEMORY[0x24BE23728]);
}

void (*PhysicallyBasedMaterialResource.metallic.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.metallic.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.metallic.modify;
}

void PhysicallyBasedMaterialResource.metallic.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE23720], MEMORY[0x24BE23728]);
}

id PhysicallyBasedMaterialResource.specular.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE23668], MEMORY[0x24BE23660], a1);
}

uint64_t PhysicallyBasedMaterialResource.specular.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE23760], MEMORY[0x24BE23768]);
}

void (*PhysicallyBasedMaterialResource.specular.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.specular.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.specular.modify;
}

void PhysicallyBasedMaterialResource.specular.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE23760], MEMORY[0x24BE23768]);
}

id PhysicallyBasedMaterialResource.emissive.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.emissive.getter(MEMORY[0x24BE23610], MEMORY[0x24BE23600], a1);
}

void PhysicallyBasedMaterialResource.emissive.setter(uint64_t a1)
{
  PhysicallyBasedMaterialResource.emissive.setter(a1, MEMORY[0x24BE23708], MEMORY[0x24BE23718]);
}

void (*PhysicallyBasedMaterialResource.emissive.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.emissive.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.emissive.modify;
}

void PhysicallyBasedMaterialResource.emissive.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.baseColor.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterialResource.emissive.setter);
}

float PhysicallyBasedMaterialResource.emissiveIntensity.getter()
{
  return PhysicallyBasedMaterialResource.emissiveIntensity.getter((void (*)(_QWORD, float *))MEMORY[0x24BE23608], 1.0);
}

uint64_t PhysicallyBasedMaterialResource.emissiveIntensity.setter()
{
  return REPbrMaterialParametersSetEmissiveScale();
}

uint64_t (*PhysicallyBasedMaterialResource.emissiveIntensity.modify(uint64_t a1))(float *a1, uint64_t a2)
{
  uint64_t v1;
  _DWORD *v3;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 12) = 1065353216;
  v3 = (_DWORD *)(a1 + 12);
  REPbrMaterialParametersGetEmissiveScale();
  *(_DWORD *)(a1 + 8) = *v3;
  return PhysicallyBasedMaterialResource.emissiveIntensity.modify;
}

uint64_t PhysicallyBasedMaterialResource.emissiveIntensity.modify(float *a1, uint64_t a2)
{
  return UnlitMaterialResource.cutoutThreshold.modify(a1, a2, (uint64_t (*)(_QWORD, float))MEMORY[0x24BE23710]);
}

id PhysicallyBasedMaterialResource.ambientOcclusion.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.normal.getter(MEMORY[0x24BE23598], a1);
}

uint64_t PhysicallyBasedMaterialResource.ambientOcclusion.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.ambientOcclusion.setter(a1, MEMORY[0x24BE236A8]);
}

void (*PhysicallyBasedMaterialResource.ambientOcclusion.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterialResource.ambientOcclusion.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.ambientOcclusion.modify;
}

void PhysicallyBasedMaterialResource.ambientOcclusion.modify(uint64_t *a1, char a2)
{
  PhysicallyBasedMaterialResource.ambientOcclusion.modify(a1, a2, MEMORY[0x24BE236A8]);
}

id PhysicallyBasedMaterialResource.clearcoat.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE235E8], MEMORY[0x24BE235E0], a1);
}

uint64_t PhysicallyBasedMaterialResource.clearcoat.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE236E8], MEMORY[0x24BE236F0]);
}

void (*PhysicallyBasedMaterialResource.clearcoat.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.clearcoat.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.clearcoat.modify;
}

void PhysicallyBasedMaterialResource.clearcoat.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE236E8], MEMORY[0x24BE236F0]);
}

id PhysicallyBasedMaterialResource.clearcoatRougness.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE235D8], MEMORY[0x24BE235D0], a1);
}

uint64_t PhysicallyBasedMaterialResource.clearcoatRougness.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE236D8], MEMORY[0x24BE236E0]);
}

void (*PhysicallyBasedMaterialResource.clearcoatRougness.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.clearcoatRougness.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.clearcoatRougness.modify;
}

void PhysicallyBasedMaterialResource.clearcoatRougness.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE236D8], MEMORY[0x24BE236E0]);
}

id PhysicallyBasedMaterialResource.anisotropyLevel.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE235B8], MEMORY[0x24BE235B0], a1);
}

uint64_t PhysicallyBasedMaterialResource.anisotropyLevel.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE236C0], MEMORY[0x24BE236C8]);
}

void (*PhysicallyBasedMaterialResource.anisotropyLevel.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.anisotropyLevel.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.anisotropyLevel.modify;
}

void PhysicallyBasedMaterialResource.anisotropyLevel.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE236C0], MEMORY[0x24BE236C8]);
}

id PhysicallyBasedMaterialResource.anisotropyAngle.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.roughness.getter(MEMORY[0x24BE235A8], MEMORY[0x24BE235A0], a1);
}

id PhysicallyBasedMaterialResource.roughness.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(_QWORD, int *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  id result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = a1(*(_QWORD *)(v3 + 16));
  v11 = 0;
  a2(*(_QWORD *)(v3 + 16), &v11);
  v7 = v11;
  result = 0;
  if (v6)
  {
    type metadata accessor for TextureResource();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v10 = 84148994;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = v10;
  return result;
}

uint64_t key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, float), uint64_t (*a6)(_QWORD, uint64_t))
{
  float v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v7 = *(float *)a1;
  v9 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 16);
  outlined copy of MaterialParameters.Texture?(v9, v8);
  result = a5(v11, v7);
  if (v8)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v9, v8);
    v13 = *(_QWORD *)(v8 + 16);
    swift_release();
    return a6(*(_QWORD *)(v10 + 16), v13);
  }
  return result;
}

uint64_t PhysicallyBasedMaterialResource.anisotropyAngle.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x24BE236B0], MEMORY[0x24BE236B8]);
}

uint64_t PhysicallyBasedMaterialResource.roughness.setter(uint64_t a1, uint64_t (*a2)(_QWORD, float), uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  result = a2(*(_QWORD *)(v3 + 16), *(float *)a1);
  if (v4)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v5, v4);
    v7 = *(_QWORD *)(v4 + 16);
    swift_release();
    return a3(*(_QWORD *)(v3 + 16), v7);
  }
  return result;
}

void (*PhysicallyBasedMaterialResource.anisotropyAngle.modify(_QWORD *a1))(float **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.anisotropyAngle.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.anisotropyAngle.modify;
}

void PhysicallyBasedMaterialResource.anisotropyAngle.modify(float **a1, char a2)
{
  PhysicallyBasedMaterialResource.roughness.modify(a1, a2, MEMORY[0x24BE236B0], MEMORY[0x24BE236B8]);
}

void PhysicallyBasedMaterialResource.roughness.modify(float **a1, char a2, void (*a3)(uint64_t, float), void (*a4)(_QWORD, uint64_t))
{
  float *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v7 = *((_QWORD *)*a1 + 5);
  v8 = **a1;
  v10 = (void *)*((_QWORD *)*a1 + 1);
  v9 = *((_QWORD *)*a1 + 2);
  v11 = *(_QWORD *)(v7 + 16);
  if ((a2 & 1) != 0)
  {
    outlined copy of MaterialParameters.Texture?(*((void **)*a1 + 1), v9);
    a3(v11, v8);
    if (v9)
    {
      swift_retain();
      outlined consume of MaterialParameters.Texture?(v10, v9);
      v12 = *(_QWORD *)(v9 + 16);
      swift_release();
      a4(*(_QWORD *)(v7 + 16), v12);
    }
    outlined consume of MaterialParameters.Texture?(*((void **)v6 + 1), *((_QWORD *)v6 + 2));
  }
  else
  {
    a3(*(_QWORD *)(v7 + 16), v8);
    if (v9)
    {
      swift_retain();
      outlined consume of MaterialParameters.Texture?(v10, v9);
      v13 = *(_QWORD *)(v9 + 16);
      swift_release();
      a4(*(_QWORD *)(v7 + 16), v13);
    }
  }
  free(v6);
}

id PhysicallyBasedMaterialResource.sheenColor.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.emissive.getter(MEMORY[0x24BE23650], MEMORY[0x24BE23658], a1);
}

id PhysicallyBasedMaterialResource.emissive.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(_QWORD, __int128 *, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  int v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = a1(*(_QWORD *)(v3 + 16));
  v12 = 0;
  v11 = 0uLL;
  a2(*(_QWORD *)(v3 + 16), &v11, &v12);
  v7 = RECreateCGColorFromColorGamut();
  result = 0;
  if (v6)
  {
    type metadata accessor for TextureResource();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v10 = 84148994;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = v10;
  return result;
}

void PhysicallyBasedMaterialResource.sheenColor.setter(uint64_t a1)
{
  PhysicallyBasedMaterialResource.emissive.setter(a1, MEMORY[0x24BE23758], MEMORY[0x24BE23750]);
}

void PhysicallyBasedMaterialResource.emissive.setter(uint64_t a1, void (*a2)(_QWORD, _QWORD, __n128), void (*a3)(_QWORD, uint64_t))
{
  uint64_t v3;
  void *v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  id v10;
  uint64_t v11;

  v7 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  RECGColorToColorGamut();
  v9 = 0uLL;
  v9.n128_u32[3] = 0;
  a2(*(_QWORD *)(v3 + 16), 0, v9);
  if (v8)
  {
    v10 = v6;
    swift_retain();

    outlined consume of MaterialParameters.Texture?(v6, v8);
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v6, v8);
    v11 = *(_QWORD *)(v8 + 16);
    swift_release();
    a3(*(_QWORD *)(v3 + 16), v11);
  }
  else
  {

    outlined consume of MaterialParameters.Texture?(v6, 0);
  }
}

void (*PhysicallyBasedMaterialResource.sheenColor.modify(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.sheenColor.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.sheenColor.modify;
}

void PhysicallyBasedMaterialResource.sheenColor.modify(void ***a1, char a2)
{
  PhysicallyBasedMaterial.baseColor.modify(a1, a2, (void (*)(_QWORD *))PhysicallyBasedMaterialResource.sheenColor.setter);
}

float PhysicallyBasedMaterialResource.cutoutThreshold.getter()
{
  return PhysicallyBasedMaterialResource.emissiveIntensity.getter((void (*)(_QWORD, float *))MEMORY[0x24BE23638], 0.0);
}

float PhysicallyBasedMaterialResource.emissiveIntensity.getter(void (*a1)(_QWORD, float *), float a2)
{
  uint64_t v2;
  float v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  a1(*(_QWORD *)(v2 + 16), &v4);
  return v4;
}

uint64_t PhysicallyBasedMaterialResource.cutoutThreshold.setter()
{
  return REPbrMaterialParametersSetOpacityThreshold();
}

uint64_t (*PhysicallyBasedMaterialResource.cutoutThreshold.modify(uint64_t a1))(float *a1, uint64_t a2)
{
  uint64_t v1;
  _DWORD *v3;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 12) = 0;
  v3 = (_DWORD *)(a1 + 12);
  REPbrMaterialParametersGetOpacityThreshold();
  *(_DWORD *)(a1 + 8) = *v3;
  return PhysicallyBasedMaterialResource.cutoutThreshold.modify;
}

uint64_t PhysicallyBasedMaterialResource.cutoutThreshold.modify(float *a1, uint64_t a2)
{
  return UnlitMaterialResource.cutoutThreshold.modify(a1, a2, (uint64_t (*)(_QWORD, float))MEMORY[0x24BE23738]);
}

uint64_t UnlitMaterialResource.cutoutThreshold.modify(float *a1, uint64_t a2, uint64_t (*a3)(_QWORD, float))
{
  return a3(*(_QWORD *)(*(_QWORD *)a1 + 16), a1[2]);
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  PhysicallyBasedMaterialResource.textureCoordinateTransform.getter((void (*)(_QWORD, _QWORD *))MEMORY[0x24BE23670], (void (*)(_QWORD, __int128 *))MEMORY[0x24BE23680], a1);
}

uint64_t PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(a1, MEMORY[0x24BE23770], MEMORY[0x24BE23780]);
}

void (*PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 6) = v1;
  *((_DWORD *)v3 + 11) = 0;
  *((_DWORD *)v3 + 10) = 0;
  REPbrMaterialParametersGetUVOffset0();
  *(_OWORD *)v3 = xmmword_21BE50960;
  REPbrMaterialParametersGetUVTransform0();
  v4 = *((_QWORD *)v3 + 5);
  v5 = *(float32x2_t *)(v3 + 4);
  v6.i32[0] = *(_DWORD *)v3;
  v6.i32[1] = *((_DWORD *)v3 + 3);
  v7 = vsqrt_f32(vadd_f32(vmul_f32(v5, v5), vmul_f32(v6, v6)));
  v8 = atan2f(v5.f32[0], *(float *)v3);
  *((_QWORD *)v3 + 2) = v4;
  *((float32x2_t *)v3 + 3) = v7;
  *((float *)v3 + 8) = v8;
  return PhysicallyBasedMaterialResource.textureCoordinateTransform.modify;
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(a1, a2, MEMORY[0x24BE23770], MEMORY[0x24BE23780]);
}

void PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  PhysicallyBasedMaterialResource.textureCoordinateTransform.getter((void (*)(_QWORD, _QWORD *))MEMORY[0x24BE23678], (void (*)(_QWORD, __int128 *))MEMORY[0x24BE23688], a1);
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.getter(void (*a1)(_QWORD, _QWORD *)@<X0>, void (*a2)(_QWORD, __int128 *)@<X1>, float32x2_t *a3@<X8>)
{
  uint64_t v3;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  __int128 v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v11[0] = 0;
  a1(*(_QWORD *)(v3 + 16), v11);
  v10 = xmmword_21BE50960;
  a2(*(_QWORD *)(v3 + 16), &v10);
  v6 = (float32x2_t)v11[0];
  v7.i32[0] = v10;
  v7.i32[1] = *(_DWORD *)((unint64_t)&v10 | 0xC);
  v8 = vsqrt_f32(vadd_f32(vmul_f32(*(float32x2_t *)((char *)&v10 + 4), *(float32x2_t *)((char *)&v10 + 4)), vmul_f32(v7, v7)));
  v9 = atan2f(*((float *)&v10 + 1), *(float *)&v10);
  *a3 = v6;
  a3[1] = v8;
  a3[2].f32[0] = v9;
}

uint64_t PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(a1, MEMORY[0x24BE23778], MEMORY[0x24BE23788]);
}

uint64_t PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(uint64_t a1, void (*a2)(_QWORD, double), uint64_t (*a3)(uint64_t, __n128))
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  __float2 v6;
  float32x2_t v7;
  __n128 v8;
  float v10[6];

  *(_QWORD *)v10 = *(_QWORD *)(a1 + 8);
  v4 = *(float *)(a1 + 16);
  a2(*(_QWORD *)(v3 + 16), *(double *)a1);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = __sincosf_stret(v4);
  v7.f32[0] = -v10[1];
  v7.i32[1] = LODWORD(v6.__cosval);
  v8.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v6.__sinval), LODWORD(v6.__cosval)), v10[0]);
  *(float32x2_t *)&v8.n128_i8[8] = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v10[1]), LODWORD(v6.__sinval)), v7);
  return a3(v5, v8);
}

void (*PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float v8;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 6) = v1;
  *((_DWORD *)v3 + 11) = 0;
  *((_DWORD *)v3 + 10) = 0;
  REPbrMaterialParametersGetUVOffset1();
  *(_OWORD *)v3 = xmmword_21BE50960;
  REPbrMaterialParametersGetUVTransform1();
  v4 = *((_QWORD *)v3 + 5);
  v5 = *(float32x2_t *)(v3 + 4);
  v6.i32[0] = *(_DWORD *)v3;
  v6.i32[1] = *((_DWORD *)v3 + 3);
  v7 = vsqrt_f32(vadd_f32(vmul_f32(v5, v5), vmul_f32(v6, v6)));
  v8 = atan2f(v5.f32[0], *(float *)v3);
  *((_QWORD *)v3 + 2) = v4;
  *((float32x2_t *)v3 + 3) = v7;
  *((float *)v3 + 8) = v8;
  return PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.modify;
}

void PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(a1, a2, MEMORY[0x24BE23778], MEMORY[0x24BE23788]);
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, double), void (*a4)(uint64_t, __n128))
{
  void *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  __float2 v9;
  float32x2_t v10;
  __n128 v11;
  uint64_t v12;

  v5 = *(void **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v7 = *(float *)(*(_QWORD *)a1 + 32);
  a3(*(_QWORD *)(v6 + 16), *(double *)(*(_QWORD *)a1 + 16));
  v8 = *(_QWORD *)(v6 + 16);
  v9 = __sincosf_stret(v7);
  v10.f32[0] = -*((float *)&v12 + 1);
  v10.i32[1] = LODWORD(v9.__cosval);
  v11.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), *(float *)&v12);
  *(float32x2_t *)&v11.n128_i8[8] = vmul_f32((float32x2_t)__PAIR64__(HIDWORD(v12), LODWORD(v9.__sinval)), v10);
  a4(v8, v11);
  free(v5);
}

uint64_t UnlitMaterialResource.__parameterBlock.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void UnlitMaterialResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t UnlitMaterialResource.addToLoadRequest(_:)(uint64_t a1)
{
  return UnlitMaterialResource.addToLoadRequest(_:)(a1, MEMORY[0x24BE25880]);
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(a1, a2, a3, MEMORY[0x24BE25880]);
}

uint64_t PhysicallyBasedMaterialResource.addToLoadRequest(_:)(uint64_t a1)
{
  return UnlitMaterialResource.addToLoadRequest(_:)(a1, MEMORY[0x24BE23618]);
}

uint64_t UnlitMaterialResource.addToLoadRequest(_:)(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v2;

  a2(*(_QWORD *)(v2 + 16));
  return REAssetLoadRequestAddAsset();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance PhysicallyBasedMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(a1, a2, a3, MEMORY[0x24BE23618]);
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;

  a4(*(_QWORD *)(*(_QWORD *)v4 + 16));
  return REAssetLoadRequestAddAsset();
}

id PhysicallyBasedMaterialResource.clearcoatNormal.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.normal.getter(MEMORY[0x24BE235C8], a1);
}

id PhysicallyBasedMaterialResource.normal.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id result;
  id v5;
  uint64_t v6;
  int v7;

  result = (id)a1(*(_QWORD *)(v2 + 16));
  if (result)
  {
    v5 = result;
    type metadata accessor for TextureResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    result = (id)REMaterialCreateDefaultSamplerDescriptor();
    v7 = 84148994;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t PhysicallyBasedMaterialResource.clearcoatNormal.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.ambientOcclusion.setter(a1, MEMORY[0x24BE236D0]);
}

uint64_t PhysicallyBasedMaterialResource.ambientOcclusion.setter(uint64_t result, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = *(void **)result;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v4, v3);
    v5 = *(_QWORD *)(v3 + 16);
    swift_release();
    return a2(*(_QWORD *)(v2 + 16), v5);
  }
  return result;
}

void (*PhysicallyBasedMaterialResource.clearcoatNormal.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterialResource.clearcoatNormal.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.clearcoatNormal.modify;
}

void PhysicallyBasedMaterialResource.clearcoatNormal.modify(uint64_t *a1, char a2)
{
  PhysicallyBasedMaterialResource.ambientOcclusion.modify(a1, a2, MEMORY[0x24BE236D0]);
}

void PhysicallyBasedMaterialResource.ambientOcclusion.modify(uint64_t *a1, char a2, void (*a3)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v5)
    {
      a3(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 16), *(_QWORD *)(v5 + 16));
      v6 = *(_QWORD *)(v4 + 8);
    }
    else
    {
      v6 = 0;
    }
    outlined consume of MaterialParameters.Texture?(*(void **)v4, v6);
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(v4 + 32);
    v8 = *(void **)v4;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v8, v5);
    v9 = *(_QWORD *)(v5 + 16);
    swift_release();
    a3(*(_QWORD *)(v7 + 16), v9);
  }
  free((void *)v4);
}

unint64_t lazy protocol witness table accessor for type BlendingType and conformance BlendingType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendingType and conformance BlendingType;
  if (!lazy protocol witness table cache variable for type BlendingType and conformance BlendingType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendingType, &type metadata for BlendingType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendingType and conformance BlendingType);
  }
  return result;
}

uint64_t sub_21BDFCCF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = REMaterialParameterBlockValueCreate();
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

double sub_21BDFCD30@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_5Tm((void (*)(uint64_t *__return_ptr))UnlitMaterialResource.color.getter, a1);
}

uint64_t sub_21BDFCD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))UnlitMaterialResource.color.setter);
}

uint64_t sub_21BDFCD58@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = REUnlitMaterialParametersGetOpacityThreshold();
  *a1 = v3;
  return result;
}

uint64_t sub_21BDFCD84()
{
  return REUnlitMaterialParametersSetOpacityThreshold();
}

double sub_21BDFCD98@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_5Tm((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.color.getter, a1);
}

double keypath_get_5Tm@<D0>(void (*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  a1(&v6);
  v3 = v8;
  v4 = v9;
  *(_QWORD *)a2 = v6;
  result = *(double *)&v7;
  *(_OWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_21BDFCDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterialResource.color.setter);
}

double sub_21BDFCE10@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_13Tm((void (*)(__int128 *__return_ptr))PhysicallyBasedMaterialResource.normal.getter, a1);
}

uint64_t sub_21BDFCE1C(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return REPbrMaterialParametersSetNormalTexture();
  return result;
}

double sub_21BDFCE38@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.roughness.getter, a1);
}

uint64_t sub_21BDFCE44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE23740], MEMORY[0x24BE23748]);
}

double sub_21BDFCE68@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.metallic.getter, a1);
}

double keypath_get_15Tm_0@<D0>(void (*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  a1(&v6);
  v3 = v8;
  v4 = v9;
  *(_DWORD *)a2 = v6;
  result = *(double *)&v7;
  *(_OWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_21BDFCEC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE23720], MEMORY[0x24BE23728]);
}

double sub_21BDFCEE8@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.specular.getter, a1);
}

uint64_t sub_21BDFCEF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE23760], MEMORY[0x24BE23768]);
}

double sub_21BDFCF18@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_5Tm((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.emissive.getter, a1);
}

uint64_t sub_21BDFCF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterialResource.emissive.setter);
}

float sub_21BDFCF40@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  return keypath_get_23Tm(a1, (void (*)(_QWORD, float *))MEMORY[0x24BE23608], a2, 1.0);
}

uint64_t sub_21BDFCF90()
{
  return REPbrMaterialParametersSetEmissiveScale();
}

double sub_21BDFCFA0@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_13Tm((void (*)(__int128 *__return_ptr))PhysicallyBasedMaterialResource.ambientOcclusion.getter, a1);
}

double keypath_get_13Tm@<D0>(void (*a1)(__int128 *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  double result;
  __int128 v6;
  uint64_t v7;
  int v8;

  a1(&v6);
  v3 = v7;
  v4 = v8;
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_21BDFCFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_26Tm(a1, a2, a3, a4, MEMORY[0x24BE236A8]);
}

double sub_21BDFD000@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.clearcoat.getter, a1);
}

uint64_t sub_21BDFD00C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE236E8], MEMORY[0x24BE236F0]);
}

double sub_21BDFD030@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.clearcoatRougness.getter, a1);
}

uint64_t sub_21BDFD03C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE236D8], MEMORY[0x24BE236E0]);
}

double sub_21BDFD060@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.anisotropyLevel.getter, a1);
}

uint64_t sub_21BDFD06C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE236C0], MEMORY[0x24BE236C8]);
}

double sub_21BDFD090@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.anisotropyAngle.getter, a1);
}

uint64_t sub_21BDFD09C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x24BE236B0], MEMORY[0x24BE236B8]);
}

double sub_21BDFD0C0@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_5Tm((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.sheenColor.getter, a1);
}

uint64_t sub_21BDFD0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterialResource.sheenColor.setter);
}

float sub_21BDFD0E8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  return keypath_get_23Tm(a1, (void (*)(_QWORD, float *))MEMORY[0x24BE23638], a2, 0.0);
}

float keypath_get_23Tm@<S0>(uint64_t *a1@<X0>, void (*a2)(_QWORD, float *)@<X3>, float *a3@<X8>, float a4@<S0>)
{
  uint64_t v5;
  float result;
  float v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v7 = a4;
  a2(*(_QWORD *)(v5 + 16), &v7);
  result = v7;
  *a3 = v7;
  return result;
}

uint64_t sub_21BDFD1A4()
{
  return REPbrMaterialParametersSetOpacityThreshold();
}

double sub_21BDFD1B4@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_39Tm((void (*)(_QWORD *__return_ptr))PhysicallyBasedMaterialResource.textureCoordinateTransform.getter, a1);
}

uint64_t sub_21BDFD1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))PhysicallyBasedMaterialResource.textureCoordinateTransform.setter);
}

double sub_21BDFD1CC@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_39Tm((void (*)(_QWORD *__return_ptr))PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.getter, a1);
}

double keypath_get_39Tm@<D0>(void (*a1)(_QWORD *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  int v5;
  _QWORD v6[2];
  int v7;

  a1(v6);
  result = *(double *)v6;
  v4 = v6[1];
  v5 = v7;
  *(_QWORD *)a2 = v6[0];
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_21BDFD218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD *))PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.setter);
}

uint64_t keypath_set_40Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *))
{
  uint64_t v5;
  int v6;
  _QWORD v8[2];
  int v9;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  v8[0] = *(_QWORD *)a1;
  v8[1] = v5;
  v9 = v6;
  return a5(v8);
}

double sub_21BDFD260@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_13Tm((void (*)(__int128 *__return_ptr))PhysicallyBasedMaterialResource.clearcoatNormal.getter, a1);
}

uint64_t sub_21BDFD26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_26Tm(a1, a2, a3, a4, MEMORY[0x24BE236D0]);
}

uint64_t keypath_set_26Tm(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t v5;

  v5 = *(_QWORD *)(result + 8);
  if (v5)
    return a5(*(_QWORD *)(*(_QWORD *)a2 + 16), *(_QWORD *)(v5 + 16));
  return result;
}

uint64_t storeEnumTagSinglePayload for BlendingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BDFD2E0 + 4 * byte_21BE7E9A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BDFD314 + 4 * byte_21BE7E9A0[v4]))();
}

uint64_t sub_21BDFD314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDFD31C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BDFD324);
  return result;
}

uint64_t sub_21BDFD330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BDFD338);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BDFD33C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BDFD344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BlendingType()
{
  return &type metadata for BlendingType;
}

uint64_t type metadata accessor for MaterialResourceUtility()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UnlitMaterialResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for UnlitMaterialResource()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for PhysicallyBasedMaterialResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for PhysicallyBasedMaterialResource()
{
  return swift_lookUpClassMethod();
}

BOOL static ComponentInfo.Access.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Void __swiftcall SceneManager.registerBuiltInComponents()()
{
  uint64_t v0;
  Swift::String v1;
  __int128 v2;
  ValueMetadata *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  __int128 v7;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  __int128 v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  __int128 v17;
  ValueMetadata *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  ValueMetadata *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  ValueMetadata *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  ValueMetadata *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  ValueMetadata *v42;
  __int128 v43;
  uint64_t v44;
  Swift::String v45;
  ValueMetadata *v46;
  __int128 v47;
  Swift::String v48;
  ValueMetadata *v49;
  __int128 v50;
  Swift::String v51;
  ValueMetadata *v52;
  __int128 v53;
  Swift::String v54;
  ValueMetadata *v55;
  __int128 v56;
  uint64_t v57;
  Swift::String v58;
  ValueMetadata *v59;
  __int128 v60;
  Swift::String v61;
  ValueMetadata *v62;
  __int128 v63;
  Swift::String v64;
  ValueMetadata *v65;
  __int128 v66;
  uint64_t v67;
  Swift::String v68;
  ValueMetadata *v69;
  __int128 v70;
  Swift::String v71;
  ValueMetadata *v72;
  __int128 v73;
  Swift::String v74;
  ValueMetadata *v75;
  __int128 v76;
  Swift::String v77;
  ValueMetadata *v78;
  __int128 v79;
  uint64_t v80;
  Swift::String v81;
  ValueMetadata *v82;
  __int128 v83;
  Swift::String v84;
  ValueMetadata *v85;
  __int128 v86;
  Swift::String v87;
  ValueMetadata *v88;
  __int128 v89;
  Swift::String v90;
  ValueMetadata *v91;
  __int128 v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  Swift::String v98;
  ValueMetadata *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  Swift::String v107;
  ValueMetadata *v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  Swift::String v113;
  ValueMetadata *v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  Swift::String v119;
  ValueMetadata *v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  Swift::String v126;
  ValueMetadata *v127;
  __int128 v128;
  Swift::String v129;
  ValueMetadata *v130;
  __int128 v131;
  Swift::String v132;
  ValueMetadata *v133;
  __int128 v134;
  Swift::String v135;
  ValueMetadata *v136;
  __int128 v137;
  uint64_t v138;
  Swift::String v139;
  ValueMetadata *v140;
  __int128 v141;
  Swift::String v142;
  ValueMetadata *v143;
  __int128 v144;
  Swift::String v145;
  ValueMetadata *v146;
  __int128 v147;
  Swift::String v148;
  ValueMetadata *v149;
  __int128 v150;
  uint64_t v151;
  Swift::String v152;
  ValueMetadata *v153;
  __int128 v154;
  Swift::String v155;
  ValueMetadata *v156;
  __int128 v157;
  Swift::String v158;
  ValueMetadata *v159;
  __int128 v160;
  Swift::String v161;
  ValueMetadata *v162;
  __int128 v163;
  Swift::String v164;
  uint64_t ObjCClassFromMetadata;
  id v166;
  id v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t ComponentType;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  ValueMetadata *v280;
  _UNKNOWN **v281;
  int v282;
  char v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ComponentInfo.SupportedPlatform>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21BE57F30;
  v1._countAndFlagsBits = 0x35312E3031;
  v1._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v1);
  v2 = v279;
  v3 = v280;
  if (one-time initialization token for macOS != -1)
  {
    swift_once();
    v2 = v279;
  }
  v4 = *(_QWORD *)algn_2551B07D8;
  v5 = qword_2551B07F0;
  *(_QWORD *)(v0 + 32) = static ComponentInfo.Platform.macOS;
  *(_QWORD *)(v0 + 40) = v4;
  *(_OWORD *)(v0 + 48) = xmmword_2551B07E0;
  *(_QWORD *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 88) = v3;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 808334129;
  v6._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v6);
  v7 = v279;
  v8 = v280;
  if (one-time initialization token for macCatalyst != -1)
  {
    swift_once();
    v7 = v279;
  }
  v9 = unk_2551B0800;
  v10 = qword_2551B0818;
  *(_QWORD *)(v0 + 96) = static ComponentInfo.Platform.macCatalyst;
  *(_QWORD *)(v0 + 104) = v9;
  *(_OWORD *)(v0 + 112) = xmmword_2551B0808;
  *(_QWORD *)(v0 + 128) = v10;
  *(_OWORD *)(v0 + 136) = v7;
  *(_QWORD *)(v0 + 152) = v8;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 808334129;
  v11._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v11);
  v12 = v279;
  v13 = v280;
  if (one-time initialization token for iOS != -1)
  {
    swift_once();
    v12 = v279;
  }
  v14 = *(_QWORD *)algn_2551B0828;
  v15 = qword_2551B0840;
  *(_QWORD *)(v0 + 160) = static ComponentInfo.Platform.iOS;
  *(_QWORD *)(v0 + 168) = v14;
  *(_OWORD *)(v0 + 176) = xmmword_2551B0830;
  *(_QWORD *)(v0 + 192) = v15;
  *(_OWORD *)(v0 + 200) = v12;
  *(_QWORD *)(v0 + 216) = v13;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 3157553;
  v16._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v16);
  v17 = v279;
  v18 = v280;
  if (one-time initialization token for xrOS != -1)
  {
    swift_once();
    v17 = v279;
  }
  v19 = unk_2551B0850;
  v248 = static ComponentInfo.Platform.xrOS;
  v20 = xmmword_2551B0858;
  v276 = *((_QWORD *)&xmmword_2551B0858 + 1);
  v21 = qword_2551B0868;
  v256 = xmmword_2551B0858;
  v258 = qword_2551B0868;
  *(_QWORD *)(v0 + 224) = static ComponentInfo.Platform.xrOS;
  *(_QWORD *)(v0 + 232) = v19;
  *(_OWORD *)(v0 + 240) = v20;
  *(_QWORD *)(v0 + 256) = v21;
  *(_OWORD *)(v0 + 264) = v17;
  v243 = v0;
  *(_QWORD *)(v0 + 280) = v18;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 0x342E35312E3031;
  v23._object = (void *)0xE700000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v23);
  v24 = v280;
  v25 = v279;
  v26 = *(_QWORD *)algn_2551B07D8;
  v27 = xmmword_2551B07E0;
  v250 = static ComponentInfo.Platform.macOS;
  v252 = *((_QWORD *)&xmmword_2551B07E0 + 1);
  v28 = qword_2551B07F0;
  *(_QWORD *)(v22 + 32) = static ComponentInfo.Platform.macOS;
  *(_QWORD *)(v22 + 40) = v26;
  *(_QWORD *)(v22 + 48) = v27;
  *(_QWORD *)(v22 + 56) = v252;
  v29 = v27;
  v253 = v27;
  *(_QWORD *)(v22 + 64) = v28;
  *(_OWORD *)(v22 + 72) = v25;
  *(_QWORD *)(v22 + 88) = v24;
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = 875442993;
  v30._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v30);
  v31 = v280;
  v32 = v279;
  v33 = unk_2551B0800;
  v271 = xmmword_2551B0808;
  v34 = xmmword_2551B0808;
  v273 = static ComponentInfo.Platform.macCatalyst;
  v268 = qword_2551B0818;
  v35 = qword_2551B0818;
  v269 = *((_QWORD *)&xmmword_2551B0808 + 1);
  *(_QWORD *)(v22 + 96) = static ComponentInfo.Platform.macCatalyst;
  *(_QWORD *)(v22 + 104) = v33;
  *(_QWORD *)(v22 + 112) = v34;
  *(_QWORD *)(v22 + 120) = v269;
  *(_QWORD *)(v22 + 128) = v35;
  *(_OWORD *)(v22 + 136) = v32;
  *(_QWORD *)(v22 + 152) = v31;
  swift_bridgeObjectRetain();
  v36._countAndFlagsBits = 875442993;
  v36._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v36);
  v37 = v280;
  v38 = v279;
  v39 = *(_QWORD *)algn_2551B0828;
  v260 = static ComponentInfo.Platform.iOS;
  v262 = *((_QWORD *)&xmmword_2551B0830 + 1);
  v264 = qword_2551B0840;
  v40 = qword_2551B0840;
  v266 = xmmword_2551B0830;
  *(_QWORD *)(v22 + 160) = static ComponentInfo.Platform.iOS;
  *(_QWORD *)(v22 + 168) = v39;
  *(_QWORD *)(v22 + 176) = v266;
  *(_QWORD *)(v22 + 184) = v262;
  *(_QWORD *)(v22 + 192) = v40;
  *(_OWORD *)(v22 + 200) = v38;
  *(_QWORD *)(v22 + 216) = v37;
  swift_bridgeObjectRetain();
  v41._countAndFlagsBits = 3157553;
  v41._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v41);
  v42 = v280;
  v43 = v279;
  *(_QWORD *)(v22 + 224) = v248;
  *(_QWORD *)(v22 + 232) = v19;
  *(_QWORD *)(v22 + 240) = v256;
  *(_QWORD *)(v22 + 248) = v276;
  *(_QWORD *)(v22 + 256) = v258;
  *(_OWORD *)(v22 + 264) = v43;
  v244 = v22;
  *(_QWORD *)(v22 + 280) = v42;
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v45._countAndFlagsBits = 0x35312E3031;
  v45._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v45);
  v46 = v280;
  v47 = v279;
  *(_QWORD *)(v44 + 32) = v250;
  *(_QWORD *)(v44 + 40) = v26;
  *(_QWORD *)(v44 + 48) = v29;
  *(_QWORD *)(v44 + 56) = v252;
  *(_QWORD *)(v44 + 64) = v28;
  *(_OWORD *)(v44 + 72) = v47;
  *(_QWORD *)(v44 + 88) = v46;
  swift_bridgeObjectRetain();
  v48._countAndFlagsBits = 808334385;
  v48._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v48);
  v49 = v280;
  v50 = v279;
  *(_QWORD *)(v44 + 96) = v273;
  *(_QWORD *)(v44 + 104) = v33;
  *(_QWORD *)(v44 + 112) = v271;
  *(_QWORD *)(v44 + 120) = v269;
  *(_QWORD *)(v44 + 128) = v268;
  *(_OWORD *)(v44 + 136) = v50;
  *(_QWORD *)(v44 + 152) = v49;
  swift_bridgeObjectRetain();
  v51._countAndFlagsBits = 808334129;
  v51._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v51);
  v52 = v280;
  v53 = v279;
  *(_QWORD *)(v44 + 160) = v260;
  *(_QWORD *)(v44 + 168) = v39;
  *(_QWORD *)(v44 + 176) = v266;
  *(_QWORD *)(v44 + 184) = v262;
  *(_QWORD *)(v44 + 192) = v264;
  *(_OWORD *)(v44 + 200) = v53;
  *(_QWORD *)(v44 + 216) = v52;
  swift_bridgeObjectRetain();
  v54._countAndFlagsBits = 3157553;
  v54._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v54);
  v55 = v280;
  v56 = v279;
  *(_QWORD *)(v44 + 224) = v248;
  *(_QWORD *)(v44 + 232) = v19;
  *(_QWORD *)(v44 + 240) = v256;
  *(_QWORD *)(v44 + 248) = v276;
  *(_QWORD *)(v44 + 256) = v258;
  *(_OWORD *)(v44 + 264) = v56;
  v247 = v44;
  *(_QWORD *)(v44 + 280) = v55;
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_21BE50950;
  swift_bridgeObjectRetain();
  v58._countAndFlagsBits = 808334385;
  v58._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v58);
  v59 = v280;
  v60 = v279;
  *(_QWORD *)(v57 + 32) = v273;
  *(_QWORD *)(v57 + 40) = v33;
  *(_QWORD *)(v57 + 48) = v271;
  *(_QWORD *)(v57 + 56) = v269;
  *(_QWORD *)(v57 + 64) = v268;
  *(_OWORD *)(v57 + 72) = v60;
  *(_QWORD *)(v57 + 88) = v59;
  swift_bridgeObjectRetain();
  v61._countAndFlagsBits = 808334129;
  v61._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v61);
  v62 = v280;
  v63 = v279;
  *(_QWORD *)(v57 + 96) = v260;
  *(_QWORD *)(v57 + 104) = v39;
  *(_QWORD *)(v57 + 112) = v266;
  *(_QWORD *)(v57 + 120) = v262;
  *(_QWORD *)(v57 + 128) = v264;
  *(_OWORD *)(v57 + 136) = v63;
  *(_QWORD *)(v57 + 152) = v62;
  swift_bridgeObjectRetain();
  v64._countAndFlagsBits = 3157553;
  v64._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v64);
  v65 = v280;
  v66 = v279;
  *(_QWORD *)(v57 + 160) = v248;
  *(_QWORD *)(v57 + 168) = v19;
  *(_QWORD *)(v57 + 176) = v256;
  *(_QWORD *)(v57 + 184) = v276;
  *(_QWORD *)(v57 + 192) = v258;
  *(_OWORD *)(v57 + 200) = v66;
  v246 = v57;
  *(_QWORD *)(v57 + 216) = v65;
  v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v68._countAndFlagsBits = 808333617;
  v68._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v68);
  v69 = v280;
  v70 = v279;
  *(_QWORD *)(v67 + 32) = v250;
  *(_QWORD *)(v67 + 40) = v26;
  *(_QWORD *)(v67 + 48) = v253;
  *(_QWORD *)(v67 + 56) = v252;
  *(_QWORD *)(v67 + 64) = v28;
  *(_OWORD *)(v67 + 72) = v70;
  *(_QWORD *)(v67 + 88) = v69;
  swift_bridgeObjectRetain();
  v71._countAndFlagsBits = 808334385;
  v71._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v71);
  v72 = v280;
  v73 = v279;
  *(_QWORD *)(v67 + 96) = v273;
  *(_QWORD *)(v67 + 104) = v33;
  *(_QWORD *)(v67 + 112) = v271;
  *(_QWORD *)(v67 + 120) = v269;
  *(_QWORD *)(v67 + 128) = v268;
  *(_OWORD *)(v67 + 136) = v73;
  *(_QWORD *)(v67 + 152) = v72;
  swift_bridgeObjectRetain();
  v74._countAndFlagsBits = 808334385;
  v74._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v74);
  v75 = v280;
  v76 = v279;
  *(_QWORD *)(v67 + 160) = v260;
  *(_QWORD *)(v67 + 168) = v39;
  *(_QWORD *)(v67 + 176) = v266;
  *(_QWORD *)(v67 + 184) = v262;
  *(_QWORD *)(v67 + 192) = v264;
  *(_OWORD *)(v67 + 200) = v76;
  *(_QWORD *)(v67 + 216) = v75;
  swift_bridgeObjectRetain();
  v77._countAndFlagsBits = 3157553;
  v77._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v77);
  v78 = v280;
  v79 = v279;
  *(_QWORD *)(v67 + 224) = v248;
  *(_QWORD *)(v67 + 232) = v19;
  *(_QWORD *)(v67 + 240) = v256;
  *(_QWORD *)(v67 + 248) = v276;
  *(_QWORD *)(v67 + 256) = v258;
  *(_OWORD *)(v67 + 264) = v79;
  v245 = v67;
  *(_QWORD *)(v67 + 280) = v78;
  v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v81._countAndFlagsBits = 808333873;
  v81._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v81);
  v82 = v280;
  v83 = v279;
  *(_QWORD *)(v80 + 32) = v250;
  *(_QWORD *)(v80 + 40) = v26;
  *(_QWORD *)(v80 + 48) = v253;
  *(_QWORD *)(v80 + 56) = v252;
  *(_QWORD *)(v80 + 64) = v28;
  *(_OWORD *)(v80 + 72) = v83;
  *(_QWORD *)(v80 + 88) = v82;
  swift_bridgeObjectRetain();
  v84._countAndFlagsBits = 808334641;
  v84._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v84);
  v85 = v280;
  v86 = v279;
  *(_QWORD *)(v80 + 96) = v273;
  *(_QWORD *)(v80 + 104) = v33;
  *(_QWORD *)(v80 + 112) = v271;
  *(_QWORD *)(v80 + 120) = v269;
  *(_QWORD *)(v80 + 128) = v268;
  *(_OWORD *)(v80 + 136) = v86;
  *(_QWORD *)(v80 + 152) = v85;
  swift_bridgeObjectRetain();
  v87._countAndFlagsBits = 808334641;
  v87._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v87);
  v88 = v280;
  v89 = v279;
  *(_QWORD *)(v80 + 160) = v260;
  *(_QWORD *)(v80 + 168) = v39;
  *(_QWORD *)(v80 + 176) = v266;
  *(_QWORD *)(v80 + 184) = v262;
  *(_QWORD *)(v80 + 192) = v264;
  *(_OWORD *)(v80 + 200) = v89;
  *(_QWORD *)(v80 + 216) = v88;
  swift_bridgeObjectRetain();
  v90._countAndFlagsBits = 3157553;
  v90._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v90);
  v91 = v280;
  v92 = v279;
  *(_QWORD *)(v80 + 224) = v248;
  *(_QWORD *)(v80 + 232) = v19;
  *(_QWORD *)(v80 + 240) = v256;
  *(_QWORD *)(v80 + 248) = v276;
  *(_QWORD *)(v80 + 256) = v258;
  *(_OWORD *)(v80 + 264) = v92;
  v249 = v80;
  *(_QWORD *)(v80 + 280) = v91;
  swift_bridgeObjectRetain();
  v93._countAndFlagsBits = 808334129;
  v93._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v93);
  swift_bridgeObjectRetain();
  v94._countAndFlagsBits = 808334897;
  v94._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v94);
  swift_bridgeObjectRetain();
  v95._countAndFlagsBits = 808334897;
  v95._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v95);
  swift_bridgeObjectRetain();
  v96._countAndFlagsBits = 3157553;
  v96._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v97 = swift_allocObject();
  *(_OWORD *)(v97 + 16) = xmmword_21BE57F30;
  v98._countAndFlagsBits = 808334385;
  v98._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v98);
  v99 = v280;
  v100 = v279;
  v101 = static ComponentInfo.Platform.macOS;
  v102 = *(_QWORD *)algn_2551B07D8;
  v104 = *((_QWORD *)&xmmword_2551B07E0 + 1);
  v103 = xmmword_2551B07E0;
  v105 = qword_2551B07F0;
  v261 = qword_2551B07F0;
  *(_QWORD *)(v97 + 32) = static ComponentInfo.Platform.macOS;
  *(_QWORD *)(v97 + 40) = v102;
  v270 = v103;
  *(_OWORD *)(v97 + 48) = __PAIR128__(v104, v103);
  v106 = v103;
  *(_QWORD *)(v97 + 64) = v105;
  *(_OWORD *)(v97 + 72) = v100;
  *(_QWORD *)(v97 + 88) = v99;
  swift_bridgeObjectRetain();
  v107._countAndFlagsBits = 808335153;
  v107._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v107);
  v108 = v280;
  v109 = v279;
  v110 = unk_2551B0800;
  v111 = xmmword_2551B0808;
  v257 = xmmword_2551B0808;
  v259 = static ComponentInfo.Platform.macCatalyst;
  v255 = *((_QWORD *)&xmmword_2551B0808 + 1);
  v112 = qword_2551B0818;
  v277 = qword_2551B0818;
  *(_QWORD *)(v97 + 96) = static ComponentInfo.Platform.macCatalyst;
  *(_QWORD *)(v97 + 104) = v110;
  *(_OWORD *)(v97 + 112) = v111;
  *(_QWORD *)(v97 + 128) = v112;
  *(_OWORD *)(v97 + 136) = v109;
  *(_QWORD *)(v97 + 152) = v108;
  swift_bridgeObjectRetain();
  v113._countAndFlagsBits = 808335153;
  v113._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v113);
  v114 = v280;
  v115 = v279;
  v116 = *(_QWORD *)algn_2551B0828;
  v117 = xmmword_2551B0830;
  v272 = xmmword_2551B0830;
  v274 = static ComponentInfo.Platform.iOS;
  v254 = *((_QWORD *)&xmmword_2551B0830 + 1);
  v118 = qword_2551B0840;
  v275 = qword_2551B0840;
  *(_QWORD *)(v97 + 160) = static ComponentInfo.Platform.iOS;
  *(_QWORD *)(v97 + 168) = v116;
  *(_OWORD *)(v97 + 176) = v117;
  *(_QWORD *)(v97 + 192) = v118;
  *(_OWORD *)(v97 + 200) = v115;
  *(_QWORD *)(v97 + 216) = v114;
  swift_bridgeObjectRetain();
  v119._countAndFlagsBits = 3157553;
  v119._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v119);
  v120 = v280;
  v121 = v279;
  v122 = unk_2551B0850;
  v123 = xmmword_2551B0858;
  v263 = xmmword_2551B0858;
  v265 = static ComponentInfo.Platform.xrOS;
  v242 = *((_QWORD *)&xmmword_2551B0858 + 1);
  v124 = qword_2551B0868;
  v267 = qword_2551B0868;
  *(_QWORD *)(v97 + 224) = static ComponentInfo.Platform.xrOS;
  *(_QWORD *)(v97 + 232) = v122;
  *(_OWORD *)(v97 + 240) = v123;
  *(_QWORD *)(v97 + 256) = v124;
  *(_OWORD *)(v97 + 264) = v121;
  *(_QWORD *)(v97 + 280) = v120;
  v125 = swift_allocObject();
  *(_OWORD *)(v125 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v126._countAndFlagsBits = 808334641;
  v126._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v126);
  v127 = v280;
  v128 = v279;
  *(_QWORD *)(v125 + 32) = v101;
  *(_QWORD *)(v125 + 40) = v102;
  *(_OWORD *)(v125 + 48) = __PAIR128__(v104, v106);
  *(_QWORD *)(v125 + 64) = v261;
  *(_OWORD *)(v125 + 72) = v128;
  *(_QWORD *)(v125 + 88) = v127;
  swift_bridgeObjectRetain();
  v129._countAndFlagsBits = 808335409;
  v129._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v129);
  v130 = v280;
  v131 = v279;
  *(_QWORD *)(v125 + 96) = v259;
  *(_QWORD *)(v125 + 104) = v110;
  *(_QWORD *)(v125 + 112) = v257;
  *(_QWORD *)(v125 + 120) = v255;
  *(_QWORD *)(v125 + 128) = v277;
  *(_OWORD *)(v125 + 136) = v131;
  *(_QWORD *)(v125 + 152) = v130;
  swift_bridgeObjectRetain();
  v132._countAndFlagsBits = 808335409;
  v132._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v132);
  v133 = v280;
  v134 = v279;
  *(_QWORD *)(v125 + 160) = v274;
  *(_QWORD *)(v125 + 168) = v116;
  *(_QWORD *)(v125 + 176) = v272;
  *(_QWORD *)(v125 + 184) = v254;
  *(_QWORD *)(v125 + 192) = v275;
  *(_OWORD *)(v125 + 200) = v134;
  *(_QWORD *)(v125 + 216) = v133;
  swift_bridgeObjectRetain();
  v135._countAndFlagsBits = 3157553;
  v135._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v135);
  v136 = v280;
  v137 = v279;
  *(_QWORD *)(v125 + 224) = v265;
  *(_QWORD *)(v125 + 232) = v122;
  *(_QWORD *)(v125 + 240) = v263;
  *(_QWORD *)(v125 + 248) = v242;
  *(_QWORD *)(v125 + 256) = v267;
  *(_OWORD *)(v125 + 264) = v137;
  v251 = v125;
  *(_QWORD *)(v125 + 280) = v136;
  v138 = swift_allocObject();
  *(_OWORD *)(v138 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v139._countAndFlagsBits = 0x35312E3031;
  v139._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v139);
  v140 = v280;
  v141 = v279;
  *(_QWORD *)(v138 + 32) = v101;
  *(_QWORD *)(v138 + 40) = v102;
  *(_QWORD *)(v138 + 48) = v270;
  *(_QWORD *)(v138 + 56) = v104;
  *(_QWORD *)(v138 + 64) = v261;
  *(_OWORD *)(v138 + 72) = v141;
  *(_QWORD *)(v138 + 88) = v140;
  swift_bridgeObjectRetain();
  v142._countAndFlagsBits = 808334129;
  v142._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v142);
  v143 = v280;
  v144 = v279;
  *(_QWORD *)(v138 + 96) = v259;
  *(_QWORD *)(v138 + 104) = v110;
  *(_QWORD *)(v138 + 112) = v257;
  *(_QWORD *)(v138 + 120) = v255;
  *(_QWORD *)(v138 + 128) = v277;
  *(_OWORD *)(v138 + 136) = v144;
  *(_QWORD *)(v138 + 152) = v143;
  swift_bridgeObjectRetain();
  v145._countAndFlagsBits = 808334129;
  v145._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v145);
  v146 = v280;
  v147 = v279;
  *(_QWORD *)(v138 + 160) = v274;
  *(_QWORD *)(v138 + 168) = v116;
  *(_QWORD *)(v138 + 176) = v272;
  *(_QWORD *)(v138 + 184) = v254;
  *(_QWORD *)(v138 + 192) = v275;
  *(_OWORD *)(v138 + 200) = v147;
  *(_QWORD *)(v138 + 216) = v146;
  swift_bridgeObjectRetain();
  v148._countAndFlagsBits = 3157554;
  v148._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v148);
  v149 = v280;
  v150 = v279;
  *(_QWORD *)(v138 + 224) = v265;
  *(_QWORD *)(v138 + 232) = v122;
  *(_QWORD *)(v138 + 240) = v263;
  *(_QWORD *)(v138 + 248) = v242;
  *(_QWORD *)(v138 + 256) = v267;
  *(_OWORD *)(v138 + 264) = v150;
  *(_QWORD *)(v138 + 280) = v149;
  v151 = swift_allocObject();
  *(_OWORD *)(v151 + 16) = xmmword_21BE57F30;
  swift_bridgeObjectRetain();
  v152._countAndFlagsBits = 808334641;
  v152._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v152);
  v153 = v280;
  v154 = v279;
  *(_QWORD *)(v151 + 32) = v101;
  *(_QWORD *)(v151 + 40) = v102;
  *(_QWORD *)(v151 + 48) = v270;
  *(_QWORD *)(v151 + 56) = v104;
  *(_QWORD *)(v151 + 64) = v261;
  *(_OWORD *)(v151 + 72) = v154;
  *(_QWORD *)(v151 + 88) = v153;
  swift_bridgeObjectRetain();
  v155._countAndFlagsBits = 808335409;
  v155._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v155);
  v156 = v280;
  v157 = v279;
  *(_QWORD *)(v151 + 96) = v259;
  *(_QWORD *)(v151 + 104) = v110;
  *(_QWORD *)(v151 + 112) = v257;
  *(_QWORD *)(v151 + 120) = v255;
  *(_QWORD *)(v151 + 128) = v277;
  *(_OWORD *)(v151 + 136) = v157;
  *(_QWORD *)(v151 + 152) = v156;
  swift_bridgeObjectRetain();
  v158._countAndFlagsBits = 808335409;
  v158._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v158);
  v159 = v280;
  v160 = v279;
  *(_QWORD *)(v151 + 160) = v274;
  *(_QWORD *)(v151 + 168) = v116;
  *(_QWORD *)(v151 + 176) = v272;
  *(_QWORD *)(v151 + 184) = v254;
  *(_QWORD *)(v151 + 192) = v275;
  *(_OWORD *)(v151 + 200) = v160;
  *(_QWORD *)(v151 + 216) = v159;
  swift_bridgeObjectRetain();
  v161._countAndFlagsBits = 3157554;
  v161._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v161);
  v162 = v280;
  v163 = v279;
  *(_QWORD *)(v151 + 224) = v265;
  *(_QWORD *)(v151 + 232) = v122;
  *(_QWORD *)(v151 + 240) = v263;
  *(_QWORD *)(v151 + 248) = v242;
  *(_QWORD *)(v151 + 256) = v267;
  *(_OWORD *)(v151 + 264) = v163;
  v278 = v151;
  *(_QWORD *)(v151 + 280) = v162;
  swift_bridgeObjectRetain();
  v164._countAndFlagsBits = 3157554;
  v164._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v164);
  type metadata accessor for BuiltInComponentRegistry();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v166 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v167 = objc_msgSend(v166, sel_bundleIdentifier);

  if (v167)
  {
    v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v170 = v169;

  }
  else
  {
    v170 = 0x800000021BE863E0;
    v168 = 0xD00000000000001BLL;
  }
  ComponentType = RERigidBodyComponentGetComponentType();
  if (!ComponentType)
    ComponentType = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsBodyComponent, (uint64_t)&protocol witness table for PhysicsBodyComponent);
  v172 = ComponentType;
  swift_beginAccess();
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PhysicsBodyComponent;
  v281 = &protocol witness table for PhysicsBodyComponent;
  v282 = 22;
  v283 = 0;
  v284 = v172;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsBodyComponent, (uint64_t)&protocol witness table for PhysicsBodyComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v173 = REMotionStateComponentGetComponentType();
  if (!v173)
    v173 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsMotionComponent, (uint64_t)&protocol witness table for PhysicsMotionComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PhysicsMotionComponent;
  v281 = &protocol witness table for PhysicsMotionComponent;
  v282 = 58;
  v283 = 0;
  v284 = v173;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsMotionComponent, (uint64_t)&protocol witness table for PhysicsMotionComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v174 = REPointLightComponentGetComponentType();
  if (!v174)
    v174 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PointLightComponent, (uint64_t)&protocol witness table for PointLightComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PointLightComponent;
  v281 = &protocol witness table for PointLightComponent;
  v282 = 51;
  v283 = 0;
  v284 = v174;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v138;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PointLightComponent, (uint64_t)&protocol witness table for PointLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v175 = REColliderComponentGetComponentType();
  if (!v175)
    v175 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for CollisionComponent, (uint64_t)&protocol witness table for CollisionComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for CollisionComponent;
  v281 = &protocol witness table for CollisionComponent;
  v282 = 57;
  v283 = 0;
  v284 = v175;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for CollisionComponent, (uint64_t)&protocol witness table for CollisionComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v176 = REDirectionalLightComponentGetComponentType();
  if (!v176)
    v176 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DirectionalLightComponent, (uint64_t)&protocol witness table for DirectionalLightComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for DirectionalLightComponent;
  v281 = &protocol witness table for DirectionalLightComponent;
  v282 = 49;
  v283 = 0;
  v284 = v176;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DirectionalLightComponent, (uint64_t)&protocol witness table for DirectionalLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v177 = REShadowMapComponentGetComponentType();
  if (!v177)
    v177 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for DirectionalLightComponent.Shadow;
  v281 = &protocol witness table for DirectionalLightComponent.Shadow;
  v282 = 53;
  v283 = 0;
  v284 = v177;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v178 = REMeshComponentGetComponentType();
  if (!v178)
    v178 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ModelComponent, (uint64_t)&protocol witness table for ModelComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ModelComponent;
  v281 = &protocol witness table for ModelComponent;
  v282 = 7;
  v283 = 0;
  v284 = v178;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ModelComponent, (uint64_t)&protocol witness table for ModelComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v179 = REPerspectiveCameraComponentGetComponentType();
  if (!v179)
    v179 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PerspectiveCameraComponent, (uint64_t)&protocol witness table for PerspectiveCameraComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PerspectiveCameraComponent;
  v281 = &protocol witness table for PerspectiveCameraComponent;
  v282 = 54;
  v283 = 0;
  v284 = v179;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PerspectiveCameraComponent, (uint64_t)&protocol witness table for PerspectiveCameraComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v180 = RESpotLightComponentGetComponentType();
  if (!v180)
    v180 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpotLightComponent, (uint64_t)&protocol witness table for SpotLightComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SpotLightComponent;
  v281 = &protocol witness table for SpotLightComponent;
  v282 = 50;
  v283 = 0;
  v284 = v180;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SpotLightComponent, (uint64_t)&protocol witness table for SpotLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v181 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpotLightComponent.Shadow, (uint64_t)&protocol witness table for SpotLightComponent.Shadow);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SpotLightComponent.Shadow;
  v281 = &protocol witness table for SpotLightComponent.Shadow;
  v282 = 0;
  v283 = 1;
  v284 = v181;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v182 = RENetworkComponentGetComponentType();
  if (!v182)
    v182 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SynchronizationComponent, (uint64_t)&protocol witness table for SynchronizationComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SynchronizationComponent;
  v281 = &protocol witness table for SynchronizationComponent;
  v282 = 9;
  v283 = 0;
  v284 = v182;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SynchronizationComponent, (uint64_t)&protocol witness table for SynchronizationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v183 = RETransformComponentGetComponentType();
  if (!v183)
    v183 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for Transform, (uint64_t)&protocol witness table for Transform);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for Transform;
  v281 = &protocol witness table for Transform;
  v282 = 28;
  v283 = 0;
  v284 = v183;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for Transform, (uint64_t)&protocol witness table for Transform);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v184 = type metadata accessor for AnchoringComponent(0);
  v185 = REAnchoringComponentGetComponentType();
  if (!v185)
    v185 = SceneManager.componentTypeToComponentClass(_:)(v184, (uint64_t)&protocol witness table for AnchoringComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = (ValueMetadata *)v184;
  v281 = &protocol witness table for AnchoringComponent;
  v282 = 63;
  v283 = 0;
  v284 = v185;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v247;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v184, (uint64_t)&protocol witness table for AnchoringComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v186 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for __EntityInfoComponent;
  v281 = &protocol witness table for __EntityInfoComponent;
  v282 = 0;
  v283 = 1;
  v284 = v186;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v187 = REAREnvironmentProbeComponentGetComponentType();
  if (!v187)
    v187 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AREnvironmentProbeComponent, (uint64_t)&protocol witness table for AREnvironmentProbeComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AREnvironmentProbeComponent;
  v281 = &protocol witness table for AREnvironmentProbeComponent;
  v282 = 42;
  v283 = 0;
  v284 = v187;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AREnvironmentProbeComponent, (uint64_t)&protocol witness table for AREnvironmentProbeComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v188 = REVideoComponentGetComponentType();
  if (!v188)
    v188 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VideoComponent, (uint64_t)&protocol witness table for VideoComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for VideoComponent;
  v281 = &protocol witness table for VideoComponent;
  v282 = 1004;
  v283 = 0;
  v284 = v188;
  v285 = 0;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VideoComponent, (uint64_t)&protocol witness table for VideoComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v189 = REVFXSceneComponentGetComponentType();
  if (!v189)
    v189 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VFXComponent, (uint64_t)&protocol witness table for VFXComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for VFXComponent;
  v281 = &protocol witness table for VFXComponent;
  v282 = 2003;
  v283 = 0;
  v284 = v189;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VFXComponent, (uint64_t)&protocol witness table for VFXComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v190 = REAccessibilityComponentGetComponentType();
  if (!v190)
    v190 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __AccessibilityComponent, (uint64_t)&protocol witness table for __AccessibilityComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for __AccessibilityComponent;
  v281 = &protocol witness table for __AccessibilityComponent;
  v282 = 69;
  v283 = 0;
  v284 = v190;
  v285 = 0;
  v287 = 0;
  v288 = 0;
  v286 = v244;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __AccessibilityComponent, (uint64_t)&protocol witness table for __AccessibilityComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v191 = REAmbientLightComponentGetComponentType();
  if (!v191)
    v191 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __AmbientLightComponent, (uint64_t)&protocol witness table for __AmbientLightComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for __AmbientLightComponent;
  v281 = &protocol witness table for __AmbientLightComponent;
  v282 = 48;
  v283 = 0;
  v284 = v191;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __AmbientLightComponent, (uint64_t)&protocol witness table for __AmbientLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v192 = REARSegmentationComponentGetComponentType();
  if (!v192)
    v192 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for RKARSegmentationComponent, (uint64_t)&protocol witness table for RKARSegmentationComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for RKARSegmentationComponent;
  v281 = &protocol witness table for RKARSegmentationComponent;
  v282 = 46;
  v283 = 0;
  v284 = v192;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v243;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for RKARSegmentationComponent, (uint64_t)&protocol witness table for RKARSegmentationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v193 = REDebugMeshComponentGetComponentType();
  if (!v193)
    v193 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ModelDebugOptionsComponent, (uint64_t)&protocol witness table for ModelDebugOptionsComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ModelDebugOptionsComponent;
  v281 = &protocol witness table for ModelDebugOptionsComponent;
  v282 = 1006;
  v283 = 0;
  v284 = v193;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v245;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ModelDebugOptionsComponent, (uint64_t)&protocol witness table for ModelDebugOptionsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v194 = RECharacterControllerComponentGetComponentType();
  if (!v194)
    v194 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for CharacterControllerComponent, (uint64_t)&protocol witness table for CharacterControllerComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for CharacterControllerComponent;
  v281 = &protocol witness table for CharacterControllerComponent;
  v282 = 2100;
  v283 = 0;
  v284 = v194;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v249;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for CharacterControllerComponent, (uint64_t)&protocol witness table for CharacterControllerComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v195 = RECharacterControllerComponentStateGetComponentType();
  if (!v195)
    v195 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for CharacterControllerStateComponent, (uint64_t)&protocol witness table for CharacterControllerStateComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for CharacterControllerStateComponent;
  v281 = &protocol witness table for CharacterControllerStateComponent;
  v282 = 2102;
  v283 = 0;
  v284 = v195;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v249;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for CharacterControllerStateComponent, (uint64_t)&protocol witness table for CharacterControllerStateComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v196 = REImageBasedLightComponentGetComponentType();
  if (!v196)
    v196 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __ImageBasedLightComponent, (uint64_t)&protocol witness table for __ImageBasedLightComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for __ImageBasedLightComponent;
  v281 = &protocol witness table for __ImageBasedLightComponent;
  v282 = 5;
  v283 = 0;
  v284 = v196;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v249;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __ImageBasedLightComponent, (uint64_t)&protocol witness table for __ImageBasedLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v197 = RESkyboxComponentGetComponentType();
  if (!v197)
    v197 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __SkyboxComponent, (uint64_t)&protocol witness table for __SkyboxComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for __SkyboxComponent;
  v281 = &protocol witness table for __SkyboxComponent;
  v282 = 23;
  v283 = 0;
  v284 = v197;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v249;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __SkyboxComponent, (uint64_t)&protocol witness table for __SkyboxComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v198 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SceneOriginComponent;
  v281 = &protocol witness table for SceneOriginComponent;
  v282 = 0;
  v283 = 1;
  v284 = v198;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v249;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_release();
  v199 = type metadata accessor for AccessibilityComponent(0);
  v200 = REAccessibilityComponentGetComponentType();
  if (!v200)
    v200 = SceneManager.componentTypeToComponentClass(_:)(v199, (uint64_t)&protocol witness table for AccessibilityComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = (ValueMetadata *)v199;
  v281 = &protocol witness table for AccessibilityComponent;
  v282 = 69;
  v283 = 0;
  v284 = v200;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v97;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v199, (uint64_t)&protocol witness table for AccessibilityComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v201 = REVideoPlayerComponentGetComponentType();
  if (!v201)
    v201 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VideoPlayerComponent, (uint64_t)&protocol witness table for VideoPlayerComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for VideoPlayerComponent;
  v281 = &protocol witness table for VideoPlayerComponent;
  v282 = 3020;
  v283 = 0;
  v284 = v201;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VideoPlayerComponent, (uint64_t)&protocol witness table for VideoPlayerComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v202 = REPhysicsSimulationComponentGetComponentType();
  if (!v202)
    v202 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsSimulationComponent, (uint64_t)&protocol witness table for PhysicsSimulationComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PhysicsSimulationComponent;
  v281 = &protocol witness table for PhysicsSimulationComponent;
  v282 = 4005;
  v283 = 0;
  v284 = v202;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsSimulationComponent, (uint64_t)&protocol witness table for PhysicsSimulationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v203 = REImageBasedLightComponentGetComponentType();
  if (!v203)
    v203 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ImageBasedLightComponent, (uint64_t)&protocol witness table for ImageBasedLightComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ImageBasedLightComponent;
  v281 = &protocol witness table for ImageBasedLightComponent;
  v282 = 5;
  v283 = 0;
  v284 = v203;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ImageBasedLightComponent, (uint64_t)&protocol witness table for ImageBasedLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v204 = REImageBasedLightReceiverComponentGetComponentType();
  if (!v204)
    v204 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ImageBasedLightReceiverComponent, (uint64_t)&protocol witness table for ImageBasedLightReceiverComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ImageBasedLightReceiverComponent;
  v281 = &protocol witness table for ImageBasedLightReceiverComponent;
  v282 = 2028;
  v283 = 0;
  v284 = v204;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ImageBasedLightReceiverComponent, (uint64_t)&protocol witness table for ImageBasedLightReceiverComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v205 = REDirectionalLightShadowMapComponentGetComponentType();
  if (!v205)
    v205 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for DirectionalLightComponent.Shadow;
  v281 = &protocol witness table for DirectionalLightComponent.Shadow;
  v282 = 76;
  v283 = 0;
  v284 = v205;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v206 = RESpotLightShadowMapComponentGetComponentType();
  if (!v206)
    v206 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpotLightComponent.Shadow, (uint64_t)&protocol witness table for SpotLightComponent.Shadow);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SpotLightComponent.Shadow;
  v281 = &protocol witness table for SpotLightComponent.Shadow;
  v282 = 77;
  v283 = 0;
  v284 = v206;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SpotLightComponent.Shadow, (uint64_t)&protocol witness table for SpotLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v207 = REHierarchicalFadeComponentGetComponentType();
  if (!v207)
    v207 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for OpacityComponent, (uint64_t)&protocol witness table for OpacityComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for OpacityComponent;
  v281 = &protocol witness table for OpacityComponent;
  v282 = 2005;
  v283 = 0;
  v284 = v207;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for OpacityComponent, (uint64_t)&protocol witness table for OpacityComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v208 = REPointLightShadowMapComponentGetComponentType();
  if (!v208)
    v208 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PointLightComponent.Shadow, (uint64_t)&protocol witness table for PointLightComponent.Shadow);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PointLightComponent.Shadow;
  v281 = &protocol witness table for PointLightComponent.Shadow;
  v282 = 75;
  v283 = 0;
  v284 = v208;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PointLightComponent.Shadow, (uint64_t)&protocol witness table for PointLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v209 = REMeshSortingComponentGetComponentType();
  if (!v209)
    v209 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ModelSortGroupComponent, (uint64_t)&protocol witness table for ModelSortGroupComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ModelSortGroupComponent;
  v281 = &protocol witness table for ModelSortGroupComponent;
  v282 = 2018;
  v283 = 0;
  v284 = v209;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ModelSortGroupComponent, (uint64_t)&protocol witness table for ModelSortGroupComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v210 = REAdaptiveResolutionComponentGetComponentType();
  if (!v210)
    v210 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AdaptiveResolutionComponent, (uint64_t)&protocol witness table for AdaptiveResolutionComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AdaptiveResolutionComponent;
  v281 = &protocol witness table for AdaptiveResolutionComponent;
  v282 = 4006;
  v283 = 0;
  v284 = v210;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AdaptiveResolutionComponent, (uint64_t)&protocol witness table for AdaptiveResolutionComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v211 = REChannelAudioComponentGetComponentType();
  if (!v211)
    v211 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ChannelAudioComponent, (uint64_t)&protocol witness table for ChannelAudioComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ChannelAudioComponent;
  v281 = &protocol witness table for ChannelAudioComponent;
  v282 = 3008;
  v283 = 0;
  v284 = v211;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ChannelAudioComponent, (uint64_t)&protocol witness table for ChannelAudioComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v212 = REAmbientAudioComponentGetComponentType();
  if (!v212)
    v212 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AmbientAudioComponent, (uint64_t)&protocol witness table for AmbientAudioComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AmbientAudioComponent;
  v281 = &protocol witness table for AmbientAudioComponent;
  v282 = 3009;
  v283 = 0;
  v284 = v212;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AmbientAudioComponent, (uint64_t)&protocol witness table for AmbientAudioComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v213 = RESpatialAudioComponentGetComponentType();
  if (!v213)
    v213 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpatialAudioComponent, (uint64_t)&protocol witness table for SpatialAudioComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SpatialAudioComponent;
  v281 = &protocol witness table for SpatialAudioComponent;
  v282 = 3010;
  v283 = 0;
  v284 = v213;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SpatialAudioComponent, (uint64_t)&protocol witness table for SpatialAudioComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v214 = REAudioMixGroupsComponentGetComponentType();
  if (!v214)
    v214 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AudioMixGroupsComponent, (uint64_t)&protocol witness table for AudioMixGroupsComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AudioMixGroupsComponent;
  v281 = &protocol witness table for AudioMixGroupsComponent;
  v282 = 3013;
  v283 = 0;
  v284 = v214;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AudioMixGroupsComponent, (uint64_t)&protocol witness table for AudioMixGroupsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v215 = REVFXEmitterComponentGetComponentType();
  if (!v215)
    v215 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ParticleEmitterComponent, (uint64_t)&protocol witness table for ParticleEmitterComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ParticleEmitterComponent;
  v281 = &protocol witness table for ParticleEmitterComponent;
  v282 = 3003;
  v283 = 0;
  v284 = v215;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ParticleEmitterComponent, (uint64_t)&protocol witness table for ParticleEmitterComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v216 = REPortalComponentGetComponentType();
  if (!v216)
    v216 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PortalComponent, (uint64_t)&protocol witness table for PortalComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PortalComponent;
  v281 = &protocol witness table for PortalComponent;
  v282 = 1008;
  v283 = 0;
  v284 = v216;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PortalComponent, (uint64_t)&protocol witness table for PortalComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v217 = REWorldRootComponentGetComponentType();
  if (!v217)
    v217 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for WorldComponent, (uint64_t)&protocol witness table for WorldComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for WorldComponent;
  v281 = &protocol witness table for WorldComponent;
  v282 = 1009;
  v283 = 0;
  v284 = v217;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for WorldComponent, (uint64_t)&protocol witness table for WorldComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v218 = type metadata accessor for TextComponent();
  v219 = RETextComponentGetComponentType();
  if (!v219)
    v219 = SceneManager.componentTypeToComponentClass(_:)(v218, (uint64_t)&protocol witness table for TextComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = (ValueMetadata *)v218;
  v281 = &protocol witness table for TextComponent;
  v282 = 2027;
  v283 = 0;
  v284 = v219;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v218, (uint64_t)&protocol witness table for TextComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v220 = REGroundingShadowComponentGetComponentType();
  if (!v220)
    v220 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for GroundingShadowComponent, (uint64_t)&protocol witness table for GroundingShadowComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for GroundingShadowComponent;
  v281 = &protocol witness table for GroundingShadowComponent;
  v282 = 4009;
  v283 = 0;
  v284 = v220;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for GroundingShadowComponent, (uint64_t)&protocol witness table for GroundingShadowComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v221 = REInputTargetComponentGetComponentType();
  if (!v221)
    v221 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for InputTargetComponent, (uint64_t)&protocol witness table for InputTargetComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for InputTargetComponent;
  v281 = &protocol witness table for InputTargetComponent;
  v282 = 4010;
  v283 = 0;
  v284 = v221;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for InputTargetComponent, (uint64_t)&protocol witness table for InputTargetComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v222 = RERemoteEffectsComponentGetComponentType();
  if (!v222)
    v222 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for HoverEffectComponent, (uint64_t)&protocol witness table for HoverEffectComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for HoverEffectComponent;
  v281 = &protocol witness table for HoverEffectComponent;
  v282 = 3022;
  v283 = 0;
  v284 = v222;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for HoverEffectComponent, (uint64_t)&protocol witness table for HoverEffectComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v223 = REAcousticMeshComponentGetComponentType();
  if (!v223)
    v223 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AcousticModelComponent, (uint64_t)&protocol witness table for AcousticModelComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AcousticModelComponent;
  v281 = &protocol witness table for AcousticModelComponent;
  v282 = 32;
  v283 = 0;
  v284 = v223;
  v285 = 1;
  v287 = 0;
  v288 = 0;
  v286 = v251;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AcousticModelComponent, (uint64_t)&protocol witness table for AcousticModelComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v224 = type metadata accessor for BodyTrackingComponent(0);
  v225 = REBodyTrackingComponentGetComponentType();
  if (!v225)
    v225 = SceneManager.componentTypeToComponentClass(_:)(v224, (uint64_t)&protocol witness table for BodyTrackingComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = (ValueMetadata *)v224;
  v281 = &protocol witness table for BodyTrackingComponent;
  v282 = 66;
  v283 = 0;
  v284 = v225;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v247;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v224, (uint64_t)&protocol witness table for BodyTrackingComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v226 = RESceneUnderstandingComponentGetComponentType();
  if (!v226)
    v226 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SceneUnderstandingComponent, (uint64_t)&protocol witness table for SceneUnderstandingComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SceneUnderstandingComponent;
  v281 = &protocol witness table for SceneUnderstandingComponent;
  v282 = 67;
  v283 = 0;
  v284 = v226;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v246;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SceneUnderstandingComponent, (uint64_t)&protocol witness table for SceneUnderstandingComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v227 = REPinComponentGetComponentType();
  if (!v227)
    v227 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for GeometricPinsComponent, (uint64_t)&protocol witness table for GeometricPinsComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for GeometricPinsComponent;
  v281 = &protocol witness table for GeometricPinsComponent;
  v282 = 2023;
  v283 = 0;
  v284 = v227;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for GeometricPinsComponent, (uint64_t)&protocol witness table for GeometricPinsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v228 = REPhysicsJointsComponentGetComponentType();
  if (!v228)
    v228 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsJointsComponent, (uint64_t)&protocol witness table for PhysicsJointsComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for PhysicsJointsComponent;
  v281 = &protocol witness table for PhysicsJointsComponent;
  v282 = 4012;
  v283 = 0;
  v284 = v228;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsJointsComponent, (uint64_t)&protocol witness table for PhysicsJointsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v229 = REOrthographicCameraComponentGetComponentType();
  if (!v229)
    v229 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for OrthographicCameraComponent, (uint64_t)&protocol witness table for OrthographicCameraComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for OrthographicCameraComponent;
  v281 = &protocol witness table for OrthographicCameraComponent;
  v282 = 55;
  v283 = 0;
  v284 = v229;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for OrthographicCameraComponent, (uint64_t)&protocol witness table for OrthographicCameraComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v230 = RECustomMatrixCameraComponentGetComponentType();
  if (!v230)
    v230 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ProjectiveTransformCameraComponent, (uint64_t)&protocol witness table for ProjectiveTransformCameraComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ProjectiveTransformCameraComponent;
  v281 = &protocol witness table for ProjectiveTransformCameraComponent;
  v282 = 56;
  v283 = 0;
  v284 = v230;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ProjectiveTransformCameraComponent, (uint64_t)&protocol witness table for ProjectiveTransformCameraComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v231 = REVirtualEnvironmentProbeComponentGetComponentType();
  if (!v231)
    v231 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VirtualEnvironmentProbeComponent, (uint64_t)&protocol witness table for VirtualEnvironmentProbeComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for VirtualEnvironmentProbeComponent;
  v281 = &protocol witness table for VirtualEnvironmentProbeComponent;
  v282 = 5002;
  v283 = 0;
  v284 = v231;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VirtualEnvironmentProbeComponent, (uint64_t)&protocol witness table for VirtualEnvironmentProbeComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v232 = REIkParametersComponentGetComponentType();
  if (!v232)
    v232 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for IKComponent, (uint64_t)&protocol witness table for IKComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for IKComponent;
  v281 = &protocol witness table for IKComponent;
  v282 = 5008;
  v283 = 0;
  v284 = v232;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for IKComponent, (uint64_t)&protocol witness table for IKComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v233 = RESkeletalPoseComponentGetComponentType();
  if (!v233)
    v233 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SkeletalPosesComponent, (uint64_t)&protocol witness table for SkeletalPosesComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for SkeletalPosesComponent;
  v281 = &protocol witness table for SkeletalPosesComponent;
  v282 = 26;
  v283 = 0;
  v284 = v233;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SkeletalPosesComponent, (uint64_t)&protocol witness table for SkeletalPosesComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v234 = REReferenceComponentGetComponentType();
  if (!v234)
    v234 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ReferenceComponent, (uint64_t)&protocol witness table for ReferenceComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ReferenceComponent;
  v281 = &protocol witness table for ReferenceComponent;
  v282 = 5009;
  v283 = 0;
  v284 = v234;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ReferenceComponent, (uint64_t)&protocol witness table for ReferenceComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v235 = REEnvironmentLightingConfigurationComponentGetComponentType();
  if (!v235)
    v235 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for EnvironmentLightingConfigurationComponent, (uint64_t)&protocol witness table for EnvironmentLightingConfigurationComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for EnvironmentLightingConfigurationComponent;
  v281 = &protocol witness table for EnvironmentLightingConfigurationComponent;
  v282 = 5003;
  v283 = 0;
  v284 = v235;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for EnvironmentLightingConfigurationComponent, (uint64_t)&protocol witness table for EnvironmentLightingConfigurationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v236 = REDynamicLightShadowComponentGetComponentType();
  if (!v236)
    v236 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DynamicLightShadowComponent, (uint64_t)&protocol witness table for DynamicLightShadowComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for DynamicLightShadowComponent;
  v281 = &protocol witness table for DynamicLightShadowComponent;
  v282 = 78;
  v283 = 0;
  v284 = v236;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DynamicLightShadowComponent, (uint64_t)&protocol witness table for DynamicLightShadowComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v237 = REReverbComponentGetComponentType();
  if (!v237)
    v237 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ReverbComponent, (uint64_t)&protocol witness table for ReverbComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ReverbComponent;
  v281 = &protocol witness table for ReverbComponent;
  v282 = 5000;
  v283 = 0;
  v284 = v237;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ReverbComponent, (uint64_t)&protocol witness table for ReverbComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v238 = REForceEffectComponentGetComponentType();
  if (!v238)
    v238 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ForceEffectComponent, (uint64_t)&protocol witness table for ForceEffectComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for ForceEffectComponent;
  v281 = &protocol witness table for ForceEffectComponent;
  v282 = 5004;
  v283 = 0;
  v284 = v238;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ForceEffectComponent, (uint64_t)&protocol witness table for ForceEffectComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v239 = REAudioLibraryComponentGetComponentType();
  if (!v239)
    v239 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AudioLibraryComponent, (uint64_t)&protocol witness table for AudioLibraryComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AudioLibraryComponent;
  v281 = &protocol witness table for AudioLibraryComponent;
  v282 = 5006;
  v283 = 0;
  v284 = v239;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AudioLibraryComponent, (uint64_t)&protocol witness table for AudioLibraryComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v240 = REBillboardComponentGetComponentType();
  if (!v240)
    v240 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for BillboardComponent, (uint64_t)&protocol witness table for BillboardComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for BillboardComponent;
  v281 = &protocol witness table for BillboardComponent;
  v282 = 5007;
  v283 = 0;
  v284 = v240;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for BillboardComponent, (uint64_t)&protocol witness table for BillboardComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v241 = REAnimationLibraryComponentGetComponentType();
  if (!v241)
    v241 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AnimationLibraryComponent, (uint64_t)&protocol witness table for AnimationLibraryComponent);
  *(_QWORD *)&v279 = v168;
  *((_QWORD *)&v279 + 1) = v170;
  v280 = &type metadata for AnimationLibraryComponent;
  v281 = &protocol witness table for AnimationLibraryComponent;
  v282 = 45;
  v283 = 0;
  v284 = v241;
  v285 = 2;
  v287 = 0;
  v288 = 0;
  v286 = v278;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v279);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AnimationLibraryComponent, (uint64_t)&protocol witness table for AnimationLibraryComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

uint64_t ComponentInfo.Availability.init(introduced:deprecated:obsoleted:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t static Component.registerBuiltin(bundleIdentifier:reComponentClass:access:availability:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v11 = *a4;
  v12 = *a5;
  v13 = a5[1];
  v14 = a5[2];
  v15 = specialized static __ServiceLocator.__sharedEngine.getter();
  if (!v15)
  {
    __break(1u);
    goto LABEL_6;
  }
  v16 = v15;
  swift_beginAccess();
  v17 = v16[5];
  if (!v17)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v18 = v17 + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v18, (uint64_t)&v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    swift_retain();
    swift_release();
    *(_QWORD *)&v21 = a1;
    *((_QWORD *)&v21 + 1) = a2;
    v22 = v20;
    v23 = a7;
    v24 = 0;
    v25 = 1;
    v26 = a3;
    v27 = v11;
    v28 = v12;
    v29 = v13;
    v30 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BuiltInComponentRegistry.register(_:)(&v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_7:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t BuiltInComponentRegistry.register(_:)(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  Swift::UInt v7;
  char v8;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[3];
  _BYTE v12[8];
  Swift::UInt v13;

  v2 = a1[3];
  v11[0] = a1[2];
  v11[1] = v2;
  v11[2] = a1[4];
  v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  v4 = v3;
  swift_beginAccess();
  outlined retain of ComponentInfo((uint64_t)v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v1 + 16) = v13;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with take of REComponentClassPtr?((uint64_t)v11 + 8, (uint64_t)v12);
  result = outlined init with take of REComponentClassPtr?((uint64_t)v12, (uint64_t)&v13);
  v7 = v13;
  if (v13)
  {
    swift_beginAccess();
    outlined retain of ComponentInfo((uint64_t)v10);
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v7, v8);
    *(_QWORD *)(v1 + 24) = v9;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  return result;
}

_QWORD *BuiltInComponentRegistry.allComponentInfo.getter()
{
  uint64_t v0;
  _QWORD *v1;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

double BuiltInComponentRegistry.componentInfo(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(v5 + 56) + 80 * v6;
    v9 = *(_QWORD *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 32);
    v11 = *(_BYTE *)(v8 + 36);
    v12 = *(_QWORD *)(v8 + 40);
    v13 = *(_BYTE *)(v8 + 48);
    v14 = *(_QWORD *)(v8 + 56);
    v15 = *(_QWORD *)(v8 + 64);
    v16 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)a2 = *(_QWORD *)v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v8 + 8);
    *(_QWORD *)(a2 + 24) = v9;
    *(_DWORD *)(a2 + 32) = v10;
    *(_BYTE *)(a2 + 36) = v11;
    *(_QWORD *)(a2 + 40) = v12;
    *(_BYTE *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v14;
    *(_QWORD *)(a2 + 64) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

double BuiltInComponentRegistry.componentInfo(forClassOpaquePointer:)@<D0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(v5 + 56) + 80 * v6;
    v9 = *(_QWORD *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 32);
    v11 = *(_BYTE *)(v8 + 36);
    v12 = *(_QWORD *)(v8 + 40);
    v13 = *(_BYTE *)(v8 + 48);
    v14 = *(_QWORD *)(v8 + 56);
    v15 = *(_QWORD *)(v8 + 64);
    v16 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)a2 = *(_QWORD *)v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v8 + 8);
    *(_QWORD *)(a2 + 24) = v9;
    *(_DWORD *)(a2 + 32) = v10;
    *(_BYTE *)(a2 + 36) = v11;
    *(_QWORD *)(a2 + 40) = v12;
    *(_BYTE *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v14;
    *(_QWORD *)(a2 + 64) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t BuiltInComponentRegistry.componentInfo(ofComponentsAccessableAs:)(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;

  v1 = *a1;
  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v4 = v3[2];
  if (v4)
  {
    v5 = v3 + 12;
    v6 = MEMORY[0x24BEE4AF8];
    v16 = v1;
    do
    {
      if (*((unsigned __int8 *)v5 - 16) == v1)
      {
        v10 = *((_QWORD *)v5 - 8);
        v11 = *((_QWORD *)v5 - 5);
        v17 = *((_DWORD *)v5 - 8);
        v12 = *((_BYTE *)v5 - 28);
        v13 = *((_QWORD *)v5 - 3);
        v14 = *((_QWORD *)v5 - 1);
        v18 = *v5;
        v19 = *(_OWORD *)((char *)v5 - 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v8 = *(_QWORD *)(v6 + 16);
        v7 = *(_QWORD *)(v6 + 24);
        if (v8 >= v7 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        *(_QWORD *)(v6 + 16) = v8 + 1;
        v9 = v6 + 80 * v8;
        *(_QWORD *)(v9 + 32) = v10;
        *(_OWORD *)(v9 + 40) = v19;
        *(_QWORD *)(v9 + 56) = v11;
        v1 = v16;
        *(_DWORD *)(v9 + 64) = v17;
        *(_BYTE *)(v9 + 68) = v12;
        *(_QWORD *)(v9 + 72) = v13;
        *(_BYTE *)(v9 + 80) = v16;
        *(_QWORD *)(v9 + 88) = v14;
        *(_OWORD *)(v9 + 96) = v18;
      }
      v5 += 5;
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = MEMORY[0x24BEE4AF8];
  }
  swift_release();
  return v6;
}

uint64_t BuiltInComponentRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BuiltInComponentRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

RealityFoundation::ComponentInfo::PlatformVersion __swiftcall ComponentInfo.PlatformVersion.init(stringLiteral:)(Swift::String stringLiteral)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  RealityFoundation::ComponentInfo::PlatformVersion result;

  v2 = v1;
  result = ComponentInfo.PlatformVersion.init(_:)(stringLiteral);
  *(_OWORD *)v2 = v3;
  *(_QWORD *)(v2 + 16) = v4;
  return result;
}

void ComponentInfo.Access.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ComponentInfo.Access.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ComponentInfo.Availability.introduced.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ComponentInfo.Availability.deprecated.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ComponentInfo.Availability.obsoleted.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ComponentInfo.bundleIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ComponentInfo.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void ComponentInfo.reComponentType.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  if ((*(_BYTE *)(v1 + 36) & 1) != 0)
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    v3 = *(_DWORD *)(v1 + 32);
    type metadata accessor for REComponentType(0);
    *(_QWORD *)(a1 + 24) = v4;
    *(_DWORD *)a1 = v3;
  }
}

uint64_t ComponentInfo.reComponentClass.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

void ComponentInfo.access.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t ComponentInfo.availability.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[8];
  v3 = v1[9];
  *a1 = v1[7];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 ComponentInfo.init(bundleIdentifier:type:reComponentClass:access:availability:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  unsigned __int8 v8;
  unint64_t v9;
  __n128 result;

  v8 = *a6;
  v9 = *(_QWORD *)a7;
  a8->n128_u64[0] = a1;
  a8->n128_u64[1] = a2;
  a8[1].n128_u64[0] = a3;
  a8[1].n128_u64[1] = a4;
  a8[2].n128_u32[0] = 0;
  a8[2].n128_u8[4] = 1;
  a8[2].n128_u64[1] = a5;
  a8[3].n128_u8[0] = v8;
  a8[3].n128_u64[1] = v9;
  result = *(__n128 *)(a7 + 8);
  a8[4] = result;
  return result;
}

uint64_t ComponentInfo.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(28);
  v0._countAndFlagsBits = 0x6E656E6F706D6F43;
  v0._object = (void *)0xED00006F666E4974;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x203A6570797428;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x737365636361202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = ComponentInfo.Availability.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t ComponentInfo.Availability.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v28[2];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50950;
  strcpy((char *)v28, "introduced: ");
  BYTE5(v28[1]) = 0;
  HIWORD(v28[1]) = -5120;
  v4 = swift_bridgeObjectRetain();
  v5._countAndFlagsBits = MEMORY[0x220768F48](v4, &type metadata for ComponentInfo.SupportedPlatform);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v28[0];
  v6 = v28[1];
  *(_QWORD *)(inited + 32) = v28[0];
  *(_QWORD *)(inited + 40) = v6;
  if (v1)
  {
    strcpy((char *)v28, "deprecated: ");
    BYTE5(v28[1]) = 0;
    HIWORD(v28[1]) = -5120;
    v8 = swift_bridgeObjectRetain();
    v9._countAndFlagsBits = MEMORY[0x220768F48](v8, &type metadata for ComponentInfo.SupportedPlatform);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v11 = v28[0];
    v10 = v28[1];
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v10;
  swift_bridgeObjectRelease();
  if (v2)
  {
    strcpy((char *)v28, "obsoleted: ");
    HIDWORD(v28[1]) = -352321536;
    v12 = swift_bridgeObjectRetain();
    v13._countAndFlagsBits = MEMORY[0x220768F48](v12, &type metadata for ComponentInfo.SupportedPlatform);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v15 = v28[0];
    v14 = v28[1];
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  *(_QWORD *)(inited + 64) = v15;
  *(_QWORD *)(inited + 72) = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v18 = v16[2];
  v17 = v16[3];
  v19 = v18 + 1;
  if (v18 >= v17 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
  v16[2] = v19;
  v20 = &v16[2 * v18];
  v20[4] = v7;
  v20[5] = v6;
  if (v10)
  {
    v21 = v16[3];
    swift_bridgeObjectRetain();
    if (v19 >= v21 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v18 + 2, 1, v16);
    v16[2] = v18 + 2;
    v22 = &v16[2 * v19];
    v22[4] = v11;
    v22[5] = v10;
  }
  if (v14)
  {
    v23 = v16[2];
    v24 = v16[3];
    swift_bridgeObjectRetain();
    if (v23 >= v24 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v23 + 1, 1, v16);
    v16[2] = v23 + 1;
    v25 = &v16[2 * v23];
    v25[4] = v15;
    v25[5] = v14;
  }
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v26 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v26;
}

__n128 ComponentInfo.Platform.oldestSupportedVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[2].n128_u64[0];
  result = v1[1];
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

double one-time initialization function for macOS()
{
  Swift::String v0;
  double result;
  __int128 v2;
  uint64_t v3;

  v0._countAndFlagsBits = 0x35312E3031;
  v0._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  result = *(double *)&v2;
  static ComponentInfo.Platform.macOS = 0x736F63616DLL;
  *(_QWORD *)algn_2551B07D8 = 0xE500000000000000;
  xmmword_2551B07E0 = v2;
  qword_2551B07F0 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.macOS.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for macOS != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2551B07D8;
  v3 = qword_2551B07F0;
  *(_QWORD *)a1 = static ComponentInfo.Platform.macOS;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2551B07E0;
  *(_QWORD *)(a1 + 32) = v3;
  return swift_bridgeObjectRetain();
}

double one-time initialization function for macCatalyst()
{
  Swift::String v0;
  double result;
  __int128 v2;
  uint64_t v3;

  v0._countAndFlagsBits = 808334129;
  v0._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  result = *(double *)&v2;
  static ComponentInfo.Platform.macCatalyst = 0x6C6174616363616DLL;
  unk_2551B0800 = 0xEB00000000747379;
  xmmword_2551B0808 = v2;
  qword_2551B0818 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.macCatalyst.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for macCatalyst != -1)
    swift_once();
  v2 = unk_2551B0800;
  v3 = qword_2551B0818;
  *(_QWORD *)a1 = static ComponentInfo.Platform.macCatalyst;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2551B0808;
  *(_QWORD *)(a1 + 32) = v3;
  return swift_bridgeObjectRetain();
}

double one-time initialization function for iOS()
{
  Swift::String v0;
  double result;
  __int128 v2;
  uint64_t v3;

  v0._countAndFlagsBits = 808334129;
  v0._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  result = *(double *)&v2;
  static ComponentInfo.Platform.iOS = 7565161;
  *(_QWORD *)algn_2551B0828 = 0xE300000000000000;
  xmmword_2551B0830 = v2;
  qword_2551B0840 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.iOS.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for iOS != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2551B0828;
  v3 = qword_2551B0840;
  *(_QWORD *)a1 = static ComponentInfo.Platform.iOS;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2551B0830;
  *(_QWORD *)(a1 + 32) = v3;
  return swift_bridgeObjectRetain();
}

double one-time initialization function for xrOS()
{
  Swift::String v0;
  double result;
  __int128 v2;
  uint64_t v3;

  v0._countAndFlagsBits = 3157553;
  v0._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  result = *(double *)&v2;
  static ComponentInfo.Platform.xrOS = 1936683640;
  unk_2551B0850 = 0xE400000000000000;
  xmmword_2551B0858 = v2;
  qword_2551B0868 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.xrOS.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for xrOS != -1)
    swift_once();
  v2 = unk_2551B0850;
  v3 = qword_2551B0868;
  *(_QWORD *)a1 = static ComponentInfo.Platform.xrOS;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2551B0858;
  *(_QWORD *)(a1 + 32) = v3;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ComponentInfo.Platform(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    *(_QWORD *)&v17 = v2;
    *((_QWORD *)&v17 + 1) = v3;
    v18 = v4;
    *(_QWORD *)&v15 = v5;
    *((_QWORD *)&v15 + 1) = v6;
    v16 = v7;
    result = 0;
    if ((specialized static ComponentInfo.Version.< infix(_:_:)(&v17, &v15) & 1) == 0)
    {
      *(_QWORD *)&v13 = v2;
      *((_QWORD *)&v13 + 1) = v3;
      v14 = v4;
      *(_QWORD *)&v11 = v5;
      *((_QWORD *)&v11 + 1) = v6;
      v12 = v7;
      if ((specialized static ComponentInfo.Version.< infix(_:_:)(&v11, &v13) & 1) == 0)
        return 1;
    }
  }
  return result;
}

uint64_t ComponentInfo.Platform.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ComponentInfo.SupportedPlatform.platform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  return swift_bridgeObjectRetain();
}

__n128 ComponentInfo.SupportedPlatform.version.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 56);
  result = *(__n128 *)(v1 + 40);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

void __swiftcall ComponentInfo.SupportedPlatform.init(platform:version:)(RealityFoundation::ComponentInfo::SupportedPlatform *__return_ptr retstr, RealityFoundation::ComponentInfo::Platform *platform, RealityFoundation::ComponentInfo::PlatformVersion version)
{
  void *object;
  Swift::Int patch;
  Swift::Int v5;

  object = platform->name._object;
  patch = platform->oldestSupportedVersion.version.patch;
  v5 = *(_QWORD *)(version.version.major + 16);
  retstr->platform.name._countAndFlagsBits = platform->name._countAndFlagsBits;
  retstr->platform.name._object = object;
  *(_OWORD *)&retstr->platform.oldestSupportedVersion.version.major = *(_OWORD *)&platform->oldestSupportedVersion.version.major;
  retstr->platform.oldestSupportedVersion.version.patch = patch;
  *(_OWORD *)&retstr->version.version.major = *(_OWORD *)version.version.major;
  retstr->version.version.patch = v5;
}

uint64_t ComponentInfo.SupportedPlatform.description.getter()
{
  uint64_t *v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v4 = *v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = ComponentInfo.Version.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ComponentInfo.SupportedPlatform()
{
  uint64_t *v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v4 = *v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = ComponentInfo.Version.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t one-time initialization function for unknown()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x302E302E30;
  v0._object = (void *)0xE500000000000000;
  return (unint64_t)ComponentInfo.PlatformVersion.init(_:)(v0);
}

RealityFoundation::ComponentInfo::PlatformVersion __swiftcall ComponentInfo.PlatformVersion.init(_:)(Swift::String a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  Swift::String v25;
  _BYTE v26[16];
  unint64_t *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  RealityFoundation::ComponentInfo::PlatformVersion result;

  v2 = v1;
  v29 = 46;
  v30 = 0xE100000000000000;
  v27 = &v29;
  v3 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, _sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtFSbABXEfU_SS_TG5TA_0, (uint64_t)v26, a1._countAndFlagsBits, (unint64_t)a1._object);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (unint64_t *)(v3 + 56);
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v8 = *(v5 - 3);
      v7 = *(v5 - 2);
      if ((v7 ^ v8) >= 0x4000)
      {
        v10 = *(v5 - 1);
        v9 = *v5;
        if ((*v5 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v12 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v8, v7, v10, v9, 10);
          v17 = v16;
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          if ((v9 & 0x2000000000000000) != 0)
          {
            v29 = *(v5 - 1);
            v30 = v9 & 0xFFFFFFFFFFFFFFLL;
            v11 = &v29;
          }
          else if ((v10 & 0x1000000000000000) != 0)
          {
            v11 = (unint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v11 = (unint64_t *)_StringObject.sharedUTF8.getter();
          }
          v12 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, v8, v7, v10, v9, 10);
          v28 = v13 & 1;
          if ((v13 & 1) == 0)
          {
LABEL_12:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
            v15 = v6[2];
            v14 = v6[3];
            if (v15 >= v14 >> 1)
              v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v6);
            v6[2] = v15 + 1;
            v6[v15 + 4] = v12;
          }
        }
      }
      v5 += 4;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
  }
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_21:
  swift_bridgeObjectRelease();
  v18 = v6[2];
  if (v18 == 1)
    goto LABEL_25;
  if (v18 != 2)
  {
    if (v18 != 3)
    {
LABEL_33:
      v29 = 0;
      v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v29 = 0xD000000000000020;
      v30 = 0x800000021BE943E0;
      v25._countAndFlagsBits = MEMORY[0x220768F48](v6, MEMORY[0x24BEE1768]);
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v21 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_34;
    }
    v19 = v6[4];
    v20 = v6[5];
    v24 = v6[6];
    v21 = swift_bridgeObjectRelease();
    if (((v20 | v19 | v24) & 0x8000000000000000) == 0)
      goto LABEL_30;
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v19 = v6[4];
  v20 = v6[5];
  v21 = swift_bridgeObjectRelease();
  if ((v20 | v19) < 0)
  {
    __break(1u);
LABEL_25:
    v19 = v6[4];
    v21 = swift_bridgeObjectRelease();
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = 0;
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_27:
  v24 = 0;
LABEL_30:
  *v2 = v19;
  v2[1] = v20;
  v2[2] = v24;
LABEL_34:
  result.version.patch = v23;
  result.version.minor = v22;
  result.version.major = v21;
  return result;
}

double static ComponentInfo.PlatformVersion.unknown.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  if (one-time initialization token for unknown != -1)
    swift_once();
  v2 = qword_2551B0880;
  result = *(double *)&static ComponentInfo.PlatformVersion.unknown;
  *(_OWORD *)a1 = static ComponentInfo.PlatformVersion.unknown;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t ComponentInfo.PlatformVersion.versionString.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t result;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v7 = dispatch thunk of CustomStringConvertible.description.getter();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  result = v7;
  if (v1)
  {
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t ComponentInfo.PlatformVersion.major.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ComponentInfo.PlatformVersion.minor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ComponentInfo.PlatformVersion.patch.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

RealityFoundation::ComponentInfo::Version __swiftcall ComponentInfo.Version.init(_:_:_:)(Swift::Int a1, Swift::Int a2, Swift::Int a3)
{
  Swift::Int *v3;
  RealityFoundation::ComponentInfo::Version result;

  if ((a2 | a1 | a3) < 0)
  {
    __break(1u);
  }
  else
  {
    *v3 = a1;
    v3[1] = a2;
    v3[2] = a3;
  }
  result.patch = a3;
  result.minor = a2;
  result.major = a1;
  return result;
}

uint64_t static ComponentInfo.Version.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = specialized static ComponentInfo.Version.< infix(_:_:)((__int128 *)a1, (__int128 *)a2);
  v5 = *(_QWORD *)(a1 + 16);
  v11 = *(_OWORD *)a1;
  v12 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v9 = *(_OWORD *)a2;
  v10 = v6;
  if ((v4 & 1) != 0)
    v7 = 0;
  else
    v7 = specialized static ComponentInfo.Version.< infix(_:_:)(&v9, &v11) ^ 1;
  return v7 & 1;
}

uint64_t ComponentInfo.PlatformVersion.description.getter()
{
  return ComponentInfo.Version.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ComponentInfo.PlatformVersion()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = ComponentInfo.Version.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t static ComponentInfo.PlatformVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a1;
  v8 = v2;
  v5 = *(_OWORD *)a2;
  v6 = v3;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a1;
  v8 = v2;
  v5 = *(_OWORD *)a2;
  v6 = v3;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a2;
  v8 = v3;
  v5 = *(_OWORD *)a1;
  v6 = v2;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a1;
  v8 = v2;
  v5 = *(_OWORD *)a2;
  v6 = v3;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a2;
  v8 = v3;
  v5 = *(_OWORD *)a1;
  v6 = v2;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1;
}

double protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance ComponentInfo.PlatformVersion@<D0>(Swift::String *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  uint64_t v5;

  ComponentInfo.PlatformVersion.init(_:)(*a1);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t ComponentInfo.Version.major.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 16);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(result + 32);
    if (v4 < v5)
      return 1;
    if (v5 < v4)
      return 0;
    v6 = 0;
    v7 = result + 40;
    while (v2 - 1 != v6)
    {
      if (v3 - 1 == v6)
        return 0;
      v8 = *(_QWORD *)(a2 + 40 + 8 * v6);
      v9 = *(_QWORD *)(v7 + 8 * v6);
      if (v8 < v9)
        return 1;
      result = 0;
      ++v6;
      if (v9 < v8)
        return result;
    }
  }
  else
  {
    v3 = *(_QWORD *)(result + 16);
  }
  if (v2 == v3)
    return 0;
  if (v2 < v3)
    return 1;
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ComponentInfo.Version(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a1;
  v8 = v2;
  v5 = *(_OWORD *)a2;
  v6 = v3;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v5, &v7) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ComponentInfo.Version(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v7 = *(_OWORD *)a1;
  v8 = v2;
  v5 = *(_OWORD *)a2;
  v6 = v3;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v5, &v7) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ComponentInfo.Version(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  if ((specialized static ComponentInfo.Version.< infix(_:_:)((__int128 *)a1, (__int128 *)a2) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a1 + 16);
    v10 = *(_OWORD *)a1;
    v11 = v6;
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v4 = specialized static ComponentInfo.Version.< infix(_:_:)(&v8, &v10) ^ 1;
  }
  return v4 & 1;
}

uint64_t ComponentInfo.Version.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;

  v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = String.index(after:)();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = String.subscript.getter();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = String.index(after:)();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = String.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t specialized static ComponentInfo.Version.< infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  char v6;
  __int128 v8;
  __int128 v9;

  v2 = *((_QWORD *)a1 + 2);
  v8 = *a1;
  v9 = *a2;
  v3 = *((_QWORD *)a2 + 2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50950;
  *(_OWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 48) = v2;
  v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_21BE50950;
  *(_OWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 48) = v3;
  if (specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, (_QWORD *)v5))
    v6 = 0;
  else
    v6 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(v5, inited);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  return v6 & 1;
}

uint64_t specialized static ComponentInfo.PlatformVersion.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)&v15 = *a1;
  *((_QWORD *)&v15 + 1) = v2;
  v16 = v3;
  *(_QWORD *)&v13 = v4;
  *((_QWORD *)&v13 + 1) = v5;
  v14 = v6;
  *(_QWORD *)&v11 = v15;
  *((_QWORD *)&v11 + 1) = v2;
  v12 = v3;
  *(_QWORD *)&v9 = v4;
  *((_QWORD *)&v9 + 1) = v5;
  v10 = v6;
  if ((specialized static ComponentInfo.Version.< infix(_:_:)(&v15, &v13) & 1) != 0)
    v7 = 0;
  else
    v7 = specialized static ComponentInfo.Version.< infix(_:_:)(&v9, &v11) ^ 1;
  return v7 & 1;
}

BOOL specialized static ComponentInfo.SupportedPlatform.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  *(_QWORD *)&v21 = *(_QWORD *)a1;
  *((_QWORD *)&v21 + 1) = v2;
  v22 = *(_OWORD *)(a1 + 16);
  v23 = v3;
  *(_QWORD *)&v18 = v7;
  *((_QWORD *)&v18 + 1) = v8;
  v19 = *((_OWORD *)a2 + 1);
  v20 = v9;
  if (!protocol witness for static Equatable.== infix(_:_:) in conformance ComponentInfo.Platform(&v21, &v18))
    return 0;
  *(_QWORD *)&v21 = v4;
  *((_QWORD *)&v21 + 1) = v5;
  *(_QWORD *)&v22 = v6;
  *(_QWORD *)&v18 = v10;
  *((_QWORD *)&v18 + 1) = v11;
  *(_QWORD *)&v19 = v12;
  if ((specialized static ComponentInfo.Version.< infix(_:_:)(&v21, &v18) & 1) != 0)
    return 0;
  *(_QWORD *)&v16 = v4;
  *((_QWORD *)&v16 + 1) = v5;
  v17 = v6;
  *(_QWORD *)&v14 = v10;
  *((_QWORD *)&v14 + 1) = v11;
  v15 = v12;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v14, &v16) & 1) == 0;
}

uint64_t outlined retain of ComponentInfo(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of REComponentClassPtr?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for REComponentClassPtr?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtFSbABXEfU_SS_TG5TA_0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

unint64_t lazy protocol witness table accessor for type ComponentInfo.Access and conformance ComponentInfo.Access()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ComponentInfo.Access and conformance ComponentInfo.Access;
  if (!lazy protocol witness table cache variable for type ComponentInfo.Access and conformance ComponentInfo.Access)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ComponentInfo.Access, &type metadata for ComponentInfo.Access);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.Access and conformance ComponentInfo.Access);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion;
  if (!lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ComponentInfo.PlatformVersion, &type metadata for ComponentInfo.PlatformVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion;
  if (!lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ComponentInfo.PlatformVersion, &type metadata for ComponentInfo.PlatformVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion;
  if (!lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ComponentInfo.PlatformVersion, &type metadata for ComponentInfo.PlatformVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ComponentInfo.Version and conformance ComponentInfo.Version()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ComponentInfo.Version and conformance ComponentInfo.Version;
  if (!lazy protocol witness table cache variable for type ComponentInfo.Version and conformance ComponentInfo.Version)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ComponentInfo.Version, &type metadata for ComponentInfo.Version);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.Version and conformance ComponentInfo.Version);
  }
  return result;
}

uint64_t type metadata accessor for BuiltInComponentRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for BuiltInComponentRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.register(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.allComponentInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.componentInfo(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.componentInfo(forClassOpaquePointer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.componentInfo(ofComponentsAccessableAs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t destroy for ComponentInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ComponentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ComponentInfo(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ComponentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo()
{
  return &type metadata for ComponentInfo;
}

uint64_t storeEnumTagSinglePayload for ComponentInfo.Access(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BE0448C + 4 * byte_21BE7EB25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BE044C0 + 4 * byte_21BE7EB20[v4]))();
}

uint64_t sub_21BE044C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE044C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE044D0);
  return result;
}

uint64_t sub_21BE044DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE044E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BE044E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE044F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComponentInfo.Access()
{
  return &type metadata for ComponentInfo.Access;
}

_QWORD *assignWithCopy for ComponentInfo.Availability(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ComponentInfo.Availability(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo.Availability()
{
  return &type metadata for ComponentInfo.Availability;
}

uint64_t initializeWithCopy for ComponentInfo.Platform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ComponentInfo.Platform(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ComponentInfo.Platform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo.Platform()
{
  return &type metadata for ComponentInfo.Platform;
}

uint64_t initializeWithCopy for ComponentInfo.SupportedPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ComponentInfo.SupportedPlatform(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for ComponentInfo.SupportedPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo.SupportedPlatform()
{
  return &type metadata for ComponentInfo.SupportedPlatform;
}

ValueMetadata *type metadata accessor for ComponentInfo.PlatformVersion()
{
  return &type metadata for ComponentInfo.PlatformVersion;
}

ValueMetadata *type metadata accessor for ComponentInfo.Version()
{
  return &type metadata for ComponentInfo.Version;
}

uint64_t sub_21BE0480C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BE04830()
{
  return swift_deallocObject();
}

void type metadata accessor for OrderedIdentifiableCollection()
{
  JUMPOUT(0x220772DB8);
}

uint64_t protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance OrderedIdentifiableCollection<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4]);
  v6 = v5;
  result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Bool IsNativeType;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v46 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v45 = (char *)&v39 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v39 - v14;
  v48 = a3;
  v16 = static Array._allocateUninitialized(_:)();
  v59 = v16;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v47 = a2;
  v49 = a4;
  v58 = Dictionary.init(dictionaryLiteral:)();
  if (!MEMORY[0x220768FE4](a1, TupleTypeMetadata2))
    return v16;
  v40 = v10;
  v17 = 0;
  v18 = *(int *)(TupleTypeMetadata2 + 48);
  v43 = a1;
  v44 = v15;
  v41 = &v15[v18];
  v42 = v9;
  v55 = TupleTypeMetadata2;
  v19 = v47;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      v21 = v44;
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v44, a1+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17, TupleTypeMetadata2);
      v22 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    v21 = v44;
    if (v40 != 8)
      break;
    v56 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 16))(v44, &v56, TupleTypeMetadata2);
    swift_unknownObjectRelease();
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_10:
      __break(1u);
      return v59;
    }
LABEL_5:
    v54 = v22;
    v23 = v45;
    v24 = &v45[*(int *)(TupleTypeMetadata2 + 48)];
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    v53 = *(_QWORD *)(v19 - 8);
    v26 = v53;
    v25(v45, v21, v19);
    v27 = v48;
    v28 = *(_QWORD **)(v48 - 8);
    v29 = (void (*)(char *, char *, uint64_t))v28[4];
    v30 = v24;
    v51 = v24;
    v29(v24, v41, v48);
    v31 = v46;
    v32 = &v46[*(int *)(v55 + 48)];
    v52 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v52(v46, v23, v19);
    v50 = (void (*)(char *, char *, uint64_t))v28[2];
    v50(v32, v30, v27);
    v33 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = MEMORY[0x220768FCC](v33, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56 = v34;
    v57 = 0;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v35 = (void (*)(char *, uint64_t))v28[1];
    TupleTypeMetadata2 = v55;
    v35(v32, v27);
    v36 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
    v52(v31, v23, v19);
    v50(v36, v51, v27);
    v9 = v42;
    type metadata accessor for Array();
    a1 = v43;
    Array.append(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v23, TupleTypeMetadata2);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v19);
    v37 = MEMORY[0x220768FE4](a1, TupleTypeMetadata2);
    ++v17;
    if (v54 == v37)
      return v59;
  }
  __break(1u);
  return result;
}

uint64_t __RKVisibilityHideDropAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityHideDropAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHideDropAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 148, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 119, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 130, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void Cancellable.storeWhileEntityActive(_:)(uint64_t a1)
{
  uint64_t Object;
  uint64_t v3;
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (!REEntityIsActive())
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    v9 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  swift_retain();
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for EventSubscriptionComponent, (uint64_t)&protocol witness table for EventSubscriptionComponent);
  if (!REEntityGetCustomComponent())
  {
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    swift_release();
LABEL_8:
    v14 = 0u;
    v15 = 0u;
    *(_QWORD *)&v16 = 0;
    *((_QWORD *)&v16 + 1) = MEMORY[0x24BEE4AF8];
    outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for EventSubscriptionComponent?);
    goto LABEL_9;
  }
  Object = RECustomComponentGetObject();
  if (!Object)
  {
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of EventSubscriptionComponent(Object, (uint64_t)&v11);
  swift_release();
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_8;
  v14 = v11;
  v15 = v12;
  v16 = v13;
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCancellable]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], &demangling cache variable for type metadata for [AnyCancellable], MEMORY[0x24BEE12E8]);
  Cancellable.store<A>(in:)();
  outlined init with copy of Cancellable?((uint64_t)&v14, (uint64_t)&v11);
  v3 = *((_QWORD *)&v12 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
  if (v3)
  {
LABEL_15:
    outlined init with copy of EventSubscriptionComponent((uint64_t)&v14, (uint64_t)&v11);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v11);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for EventSubscriptionComponent?);
    swift_release();
    outlined destroy of EventSubscriptionComponent((uint64_t)&v14);
    return;
  }
  SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    v5 = SceneNullable;
    v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v5);
    }
    v10[3] = type metadata accessor for Entity();
    v10[4] = &protocol witness table for Entity;
    v10[0] = a1;
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v10, 0, 0, 0, (char **)&v11);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = closure #1 in Cancellable.storeWhileEntityActive(_:);
    *(_QWORD *)(v7 + 24) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillDeactivate>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<ComponentEvents.WillDeactivate> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillDeactivate>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v8 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *((_QWORD *)&v12 + 1) = type metadata accessor for AnyCancellable();
    *(_QWORD *)&v13 = MEMORY[0x24BDB9B58];
    swift_release();
    *(_QWORD *)&v11 = v8;
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for EventSource?);
    outlined assign with take of Cancellable?((uint64_t)&v11, (uint64_t)&v14);
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t closure #1 in Cancellable.storeWhileEntityActive(_:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[6];
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v4 = 0u;
  v5 = 0u;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  outlined init with copy of EventSubscriptionComponent((uint64_t)&v4, (uint64_t)v3);
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
  outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for EventSubscriptionComponent?);
  outlined destroy of EventSubscriptionComponent((uint64_t)&v4);
  swift_release();
  v3[0] = v1;
  v6 = 0;
  v4 = 0u;
  v5 = 0u;
  swift_retain();
  Entity.ComponentSet.doSetExistential(_:newValue:)(&type metadata for EventSubscriptionComponent, (uint64_t)&protocol witness table for EventSubscriptionComponent, (uint64_t)&v4);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v4, &demangling cache variable for type metadata for Component?);
  return swift_release_n();
}

uint64_t sub_21BE05350()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t (*v2)(__int128 *);
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v2 = *(uint64_t (**)(__int128 *))(v1 + 16);
  v3 = *((_QWORD *)a1 + 2);
  v5 = *a1;
  v6 = v3;
  return v2(&v5);
}

uint64_t destroy for EventSubscriptionComponent(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EventSubscriptionComponent(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventSubscriptionComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventSubscriptionComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventSubscriptionComponent()
{
  return &type metadata for EventSubscriptionComponent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_SSs5NeverOTg5079_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcS2S_p40_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_P12SSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v4 += 3;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_Sfs5NeverOTg5077_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcSfo1_p42_tcfu0_33_893d56a90535c8a5d4eba8be3a3470f6o1_pR10Tf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v8;
    v4 = (int *)(a1 + 48);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Shared;
  uint64_t v9;
  _QWORD *v10;
  uint64_t Default;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt Class;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  BOOL v42;
  uint64_t v43;
  uint64_t v44[6];

  if (a2 < 0)
    goto LABEL_58;
  v4 = result;
  if (!a2)
  {
    v42 = 0;
LABEL_55:
    *(_QWORD *)a4 = v4;
    *(_BYTE *)(a4 + 8) = v42;
    return result;
  }
  v5 = a3;
  v6 = 0;
  while (1)
  {
    v42 = v4 == v5;
    if (v4 == v5)
    {
      v4 = 0;
      goto LABEL_55;
    }
    if (__OFADD__(v4++, 1))
      goto LABEL_57;
    result = REEntityGetComponentCount();
    if (v4 < result)
      break;
LABEL_5:
    if (++v6 == a2)
      goto LABEL_55;
  }
  while (1)
  {
    Shared = REEngineGetShared();
    if (Shared)
    {
      v9 = Shared;
      if (one-time initialization token for lock != -1)
        swift_once();
      os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      if (!static __ServiceLocator.sharedEngine || *((_QWORD *)static __ServiceLocator.sharedEngine + 3) != v9)
      {
        type metadata accessor for __Engine();
        swift_allocObject();
        static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v9);
        swift_release();
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      v10 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine)
        goto LABEL_35;
    }
    else
    {
      static __ServiceLocator.sharedEngine = 0;
      swift_release();
      v10 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine)
        goto LABEL_35;
    }
    Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v13 = REEngineConfigurationClone();
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v13;
      swift_release_n();
      v12 = v14;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v15 = REEngineConfigurationClone();
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v15;
      swift_release_n();
      v12 = v16;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v17 = REEngineConfigurationClone();
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v17;
      swift_release_n();
      v12 = v18;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v19 = REEngineConfigurationClone();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v19;
      swift_release_n();
      v12 = v20;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v21 = REEngineConfigurationClone();
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v21;
      swift_release_n();
      v12 = v22;
    }
    REEngineConfigurationSetRenderFlags();
    if (!specialized static __ServiceLocator.__sharedEngine.getter())
    {
      v44[0] = v12;
      v23 = specialized static __Engine.makeSharedEngine(_:)(v44);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v23;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    v10 = static __ServiceLocator.sharedEngine;
    if (!static __ServiceLocator.sharedEngine)
      goto LABEL_60;
LABEL_35:
    result = swift_beginAccess();
    v24 = v10[5];
    if (!v24)
      goto LABEL_59;
    v25 = v24 + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v25, (uint64_t)v44);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    REEntityGetComponentAtIndex();
    Class = REComponentGetClass();
    swift_beginAccess();
    v27 = *(_QWORD *)(v43 + 16);
    swift_beginAccess();
    v28 = *(_QWORD *)(v27 + 24);
    if (!*(_QWORD *)(v28 + 16))
      goto LABEL_63;
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
    if ((v30 & 1) != 0)
    {
      v31 = *(unsigned __int8 *)(*(_QWORD *)(v28 + 56) + 80 * v29 + 48);
      result = swift_release();
      if (v31 == 2)
        goto LABEL_4;
    }
    else
    {
LABEL_63:
      if (one-time initialization token for handlesToCustomComponentTypes != -1)
        swift_once();
      swift_beginAccess();
      v32 = static SceneManager.handlesToCustomComponentTypes;
      if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
        && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v34 & 1) != 0))
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 16 * v33);
        swift_endAccess();
        v36 = *(_QWORD *)(v43 + 16);
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v36 + 16) + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)(v35), (v37 & 1) == 0))
        {
          result = swift_release();
          goto LABEL_4;
        }
      }
      else
      {
        swift_endAccess();
      }
      result = swift_release();
    }
    v38 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    result = REEntityGetComponentCount();
    ++v4;
    if (v38 >= result)
    {
      v4 = v38;
LABEL_4:
      v5 = a3;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = a2;
    v4 = result;
    if (!a2)
      return v4;
    v6 = a2 + result;
    for (i = result; ; ++i)
    {
      if (a3 == i)
        return 0;
      if (v4 < 0)
        break;
      result = REEntityGetChildCount();
      if (i >= result)
        goto LABEL_13;
      if (!--v3)
        return v6;
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v7 = v4 & 3;
      if ((v4 & 3) == 0)
        v7 = 4;
      v5 = v4 - v7;
      v8 = 0uLL;
      v9 = (int64x2_t)(unint64_t)result;
      v10 = vdupq_n_s64(1uLL);
      v11 = v5;
      do
      {
        v9 = vaddq_s64(v9, v10);
        v8 = vaddq_s64(v8, v10);
        v11 -= 4;
      }
      while (v11);
      v6 = vaddvq_s64(vaddq_s64(v8, v9));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v13 = v5 + result - a3;
    v14 = a2 - v5;
    result = v6;
    while (1)
    {
      if (!v13)
        return 0;
      if (!v12)
        break;
      ++result;
      ++v12;
      ++v13;
      if (!--v14)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  char v39[8];
  char v40[8];
  uint64_t v41;
  uint64_t v42;

  if (a4 < 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  else
  {
    v9 = v8;
    v12 = a4;
    v14 = a2;
    v15 = result;
    v17 = a3 & 1;
    result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    if (v12)
    {
      v34 = a8;
      v18 = 0;
      v19 = a3 | a7;
      v20 = a7 & 1;
      v21 = v19 & 1;
      v22 = a5;
      v36 = v12;
      while (1)
      {
        if ((v21 & 1) != 0)
          goto LABEL_45;
        if ((_DWORD)v14 != a6)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if (v15 == v22)
        {
          result = outlined consume of [String : AnimationResource].Index._Variant(v22, v14, 0);
          *(_QWORD *)v34 = 0;
          *(_QWORD *)(v34 + 8) = 0;
          *(_BYTE *)(v34 + 16) = -1;
          return result;
        }
        v23 = *(_OWORD *)(v9 + 16);
        v37[0] = *(_OWORD *)v9;
        v37[1] = v23;
        v38 = *(_QWORD *)(v9 + 32);
        outlined init with take of Transform?((uint64_t)v37 + 8, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
        result = outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
        v24 = v41;
        if (!v41)
        {
          outlined init with take of Transform?((uint64_t)v37, (uint64_t)v39, &demangling cache variable for type metadata for AnimationLibraryResource?);
          outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v42, &demangling cache variable for type metadata for AnimationLibraryResource?);
          if (v42)
            result = AnimationLibraryResource.keyedResources.getter();
          else
            result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
          v24 = result;
        }
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_41;
        v25 = 1 << *(_BYTE *)(v24 + 32);
        if ((uint64_t)v15 >= v25)
          goto LABEL_41;
        v26 = v15 >> 6;
        v27 = v24 + 64;
        v28 = *(_QWORD *)(v24 + 64 + 8 * (v15 >> 6));
        if (((v28 >> v15) & 1) == 0)
          goto LABEL_42;
        if (*(_DWORD *)(v24 + 36) != a6)
          goto LABEL_43;
        v29 = v28 & (-2 << (v15 & 0x3F));
        if (!v29)
          break;
        v15 = __clz(__rbit64(v29)) | v15 & 0xFFFFFFFFFFFFFFC0;
        outlined retain of [String : String]((uint64_t)v40);
        result = swift_bridgeObjectRelease();
LABEL_5:
        ++v18;
        v14 = a6;
        v21 = v20;
        if (v18 == v12)
        {
          v17 = 0;
          v14 = a6;
          a8 = v34;
          goto LABEL_39;
        }
      }
      v30 = v20;
      v31 = v26 + 1;
      v32 = (unint64_t)(v25 + 63) >> 6;
      if (v26 + 1 >= v32)
      {
        outlined retain of [String : String]((uint64_t)v40);
        result = swift_bridgeObjectRelease();
        v15 = v25;
LABEL_35:
        v20 = v30;
        v12 = v36;
        goto LABEL_5;
      }
      v33 = *(_QWORD *)(v27 + 8 * v31);
      if (v33)
        goto LABEL_21;
      v31 = v26 + 2;
      if (v26 + 2 >= v32)
      {
        outlined retain of [String : String]((uint64_t)v40);
      }
      else
      {
        v33 = *(_QWORD *)(v27 + 8 * v31);
        if (v33)
        {
LABEL_21:
          outlined retain of [String : String]((uint64_t)v40);
LABEL_22:
          result = swift_bridgeObjectRelease();
          v15 = __clz(__rbit64(v33)) + (v31 << 6);
LABEL_34:
          v22 = a5;
          goto LABEL_35;
        }
        v31 = v26 + 3;
        if (v26 + 3 < v32)
        {
          v33 = *(_QWORD *)(v27 + 8 * v31);
          if (v33)
          {
LABEL_31:
            outlined retain of [String : String]((uint64_t)v40);
            outlined consume of [String : AnimationResource].Index._Variant(v15, v14, 0);
            goto LABEL_22;
          }
          while (v32 - 4 != v26)
          {
            v33 = *(_QWORD *)(v24 + 96 + 8 * v26++);
            if (v33)
            {
              v31 = v26 + 3;
              goto LABEL_31;
            }
          }
        }
        outlined retain of [String : String]((uint64_t)v40);
        outlined consume of [String : AnimationResource].Index._Variant(v15, v14, 0);
      }
      result = swift_bridgeObjectRelease();
      v15 = v25;
      goto LABEL_34;
    }
LABEL_39:
    *(_QWORD *)a8 = v15;
    *(_QWORD *)(a8 + 8) = v14;
    *(_BYTE *)(a8 + 16) = v17;
  }
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t BlendShapeWeightsCount;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t BlendWeightCount;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t BlendShapeWeightsMeshMapCount;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t result;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned __int8 v44[8];
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (BlendShapeWeightsCount < 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  v5 = BlendShapeWeightsCount;
  v38 = a2;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (BlendShapeWeightsCount)
  {
    v7 = 0;
    v39 = BlendShapeWeightsCount;
    while (v7 != v5)
    {
      BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (BlendWeightCount < 0)
        goto LABEL_40;
      v9 = BlendWeightCount;
      if (BlendWeightCount)
      {
        v10 = 0;
        v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          v12 = String.init(cString:)();
          v14 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          v16 = v11[2];
          v15 = v11[3];
          if (v16 >= v15 >> 1)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v11);
          ++v10;
          v11[2] = v16 + 1;
          v17 = &v11[2 * v16];
          v17[4] = v12;
          v17[5] = v14;
        }
        while (v9 != v10);
      }
      else
      {
        v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v19 = v6[2];
      v18 = v6[3];
      if (v19 >= v18 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v6);
      ++v7;
      v6[2] = v19 + 1;
      v6[v19 + 4] = v11;
      v5 = v39;
      if (v7 == v39)
        goto LABEL_20;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_20:
  v42 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
  BlendShapeWeightsMeshMapCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMapCount();
  v40 = -1;
  v41 = -1;
  if (BlendShapeWeightsMeshMapCount < 0)
    goto LABEL_44;
  v21 = BlendShapeWeightsMeshMapCount;
  if (BlendShapeWeightsMeshMapCount)
  {
    v22 = 0;
    do
    {
      v23 = v22 + 1;
      v44[0] = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      closure #1 in _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)(v44, v3, v22, &v40, (unint64_t)&v41, &v43, &v42);
      v22 = v23;
    }
    while (v21 != v23);
    v25 = v42;
    v24 = v43;
  }
  else
  {
    v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v26 = v24[2];
  if (v26 == v25[2])
  {
    if (v26)
    {
      v27 = v25 + 4;
      v28 = v24 + 4;
      v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v31 = *v27++;
        v30 = v31;
        if ((v31 & 0x8000000000000000) != 0)
          break;
        if (v30 >= v6[2])
          goto LABEL_42;
        v32 = v6[v30 + 4];
        v33 = *v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v35 = v29[2];
        v34 = v29[3];
        if (v35 >= v34 >> 1)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v29);
        v29[2] = v35 + 1;
        v36 = &v29[2 * v35];
        v36[4] = v32;
        v36[5] = v33;
        ++v28;
        if (!--v26)
          goto LABEL_38;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v38 = v29;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

RealityFoundation::BlendShapeWeightsData __swiftcall BlendShapeWeightsData.init(id:weights:)(Swift::String id, Swift::OpaquePointer weights)
{
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  RealityFoundation::BlendShapeWeightsData result;

  object = id._object;
  countAndFlagsBits = id._countAndFlagsBits;
  v6 = v2;
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_SSs5NeverOTg5079_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcS2S_p40_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_P12SSTf3nnnpk_nTf1cn_n((uint64_t)weights._rawValue);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_Sfs5NeverOTg5077_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcSfo1_p42_tcfu0_33_893d56a90535c8a5d4eba8be3a3470f6o1_pR10Tf3nnnpk_nTf1cn_n((uint64_t)weights._rawValue);
  v9 = swift_bridgeObjectRelease();
  *v6 = countAndFlagsBits;
  v6[1] = (uint64_t)object;
  v6[2] = v8;
  v6[3] = v7;
  result._weightNames._rawValue = v12;
  result._weights.coreWeights._rawValue = v11;
  result._blendShapeName._object = v10;
  result._blendShapeName._countAndFlagsBits = v9;
  return result;
}

uint64_t BlendShapeWeightsData.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendShapeWeightsData.weights.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t BlendShapeWeightsData.weights.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*BlendShapeWeightsData.weights.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify;
}

uint64_t BlendShapeWeightsData.weightNames.getter()
{
  return swift_bridgeObjectRetain();
}

RealityFoundation::BlendShapeWeightsSet __swiftcall BlendShapeWeightsSet.init()()
{
  _QWORD *v0;
  RealityFoundation::BlendShapeWeightsSet result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

double BlendShapeWeightsSet.default.getter@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = *(_QWORD **)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v3 = v2[5];
    v4 = v2[6];
    v5 = v2[7];
    *a1 = v2[4];
    a1[1] = v3;
    a1[2] = v4;
    a1[3] = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t key path setter for BlendShapeWeightsSet.default : BlendShapeWeightsSet(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[4];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v5[0] = *a1;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  outlined copy of MeshDescriptor.Skinning?(v5[0], v1);
  return BlendShapeWeightsSet.default.setter((uint64_t)v5);
}

uint64_t BlendShapeWeightsSet.default.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD **)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return outlined consume of StateMachineGraph?(*(_QWORD *)result, v2);
  if (!v2)
    return result;
  v6 = *(_QWORD *)(v5[6] + 16);
  v7 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
    if (!v7)
      goto LABEL_6;
    return outlined consume of StateMachineGraph?(*(_QWORD *)result, v2);
  }
  if (!v7 || v6 != v7)
    return outlined consume of StateMachineGraph?(*(_QWORD *)result, v2);
LABEL_6:
  swift_bridgeObjectRetain();
  outlined consume of StateMachineGraph?(v3, v2);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_8;
LABEL_13:
    __break(1u);
    return result;
  }
  if (!v5[2])
    goto LABEL_13;
LABEL_8:
  result = swift_bridgeObjectRelease();
  v5[6] = v4;
  *(_QWORD *)v1 = v5;
  return result;
}

void (*BlendShapeWeightsSet.default.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  v4 = v3;
  *a1 = v3;
  v3[4] = v1;
  v5 = *(_QWORD **)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v6 = v5[5];
    v7 = v5[6];
    v8 = v5[7];
    *v4 = v5[4];
    v4[1] = v6;
    v4[2] = v7;
    v4[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return BlendShapeWeightsSet.default.modify;
}

void BlendShapeWeightsSet.default.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = v6;
  v8[3] = v7;
  if ((a2 & 1) != 0)
  {
    outlined copy of MeshDescriptor.Skinning?(v4, v5);
    BlendShapeWeightsSet.default.setter((uint64_t)v8);
    outlined consume of StateMachineGraph?(*v3, v3[1]);
  }
  else
  {
    BlendShapeWeightsSet.default.setter((uint64_t)v8);
  }
  free(v3);
}

uint64_t BlendShapeWeightsSet.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

BOOL BlendShapeWeightsSet.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t BlendShapeWeightsSet.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6)
  {
    v8 = result;
    v9 = (uint64_t *)(v5 + 32);
    while (*v9 != v8 || v9[1] != a2)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
      {
        v8 = *v9;
        a2 = v9[1];
        break;
      }
      v9 += 4;
      if (!--v6)
        goto LABEL_9;
    }
    v11 = v9[2];
    v12 = v9[3];
    *a3 = v8;
    a3[1] = a2;
    a3[2] = v11;
    a3[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

Swift::Bool __swiftcall BlendShapeWeightsSet.contains(_:)(Swift::String a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *i;
  BOOL v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
    return 0;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  for (i = (_QWORD *)(v2 + 40); ; i += 4)
  {
    v7 = *(i - 1) == countAndFlagsBits && *i == (_QWORD)object;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    if (!--v3)
      return 0;
  }
  return 1;
}

RealityFoundation::BlendShapeWeightsData_optional __swiftcall BlendShapeWeightsSet.set(_:)(RealityFoundation::BlendShapeWeightsData_optional result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  countAndFlagsBits = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)result.value._blendShapeName._countAndFlagsBits;
    v8 = *(_QWORD *)(result.value._blendShapeName._countAndFlagsBits + 8);
    v9 = 7;
    v17 = *(_QWORD *)(result.value._blendShapeName._countAndFlagsBits + 16);
    v18 = *(_QWORD *)(result.value._blendShapeName._countAndFlagsBits + 24);
    while (1)
    {
      v10 = &countAndFlagsBits[v9];
      if (countAndFlagsBits[v9 - 3] == v7 && countAndFlagsBits[v9 - 2] == v8)
      {
        v12 = v8;
        v16 = v7;
        goto LABEL_12;
      }
      result.value._blendShapeName._countAndFlagsBits = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result.value._blendShapeName._countAndFlagsBits & 1) != 0)
        break;
      ++v6;
      v9 += 4;
      if (v5 == v6)
        goto LABEL_9;
    }
    v12 = countAndFlagsBits[v9 - 2];
    v16 = countAndFlagsBits[v9 - 3];
LABEL_12:
    v13 = *(v10 - 1);
    v14 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result.value._blendShapeName._countAndFlagsBits = swift_isUniquelyReferenced_nonNull_native();
    if ((result.value._blendShapeName._countAndFlagsBits & 1) == 0)
    {
      result.value._blendShapeName._countAndFlagsBits = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(countAndFlagsBits);
      countAndFlagsBits = (_QWORD *)result.value._blendShapeName._countAndFlagsBits;
    }
    if (v6 >= countAndFlagsBits[2])
    {
      __break(1u);
    }
    else
    {
      v15 = &countAndFlagsBits[v9];
      *(v15 - 3) = v7;
      *(v15 - 2) = v8;
      *(v15 - 1) = v17;
      *v15 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result.value._blendShapeName._countAndFlagsBits = swift_bridgeObjectRelease();
      *(_QWORD *)v2 = countAndFlagsBits;
      *v3 = v16;
      v3[1] = v12;
      v3[2] = v13;
      v3[3] = v14;
    }
  }
  else
  {
LABEL_9:
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return result;
}

RealityFoundation::BlendShapeWeightsData_optional __swiftcall BlendShapeWeightsSet.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  RealityFoundation::BlendShapeWeightsData_optional result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = (_QWORD *)(*v1 + 32 * v2);
    v5 = v4[5];
    v6 = v4[6];
    v7 = v4[7];
    *(_QWORD *)v0 = v4[4];
    *(_QWORD *)(v0 + 8) = v5;
    *(_QWORD *)(v0 + 16) = v6;
    *(_QWORD *)(v0 + 24) = v7;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = swift_bridgeObjectRetain();
  }
  result.value._weightNames._rawValue = v11;
  result.value._weights.coreWeights._rawValue = v10;
  result.value._blendShapeName._object = v9;
  result.value._blendShapeName._countAndFlagsBits = v8;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance BlendShapeWeightsSet.Iterator@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = (_QWORD *)(*v1 + 32 * v2);
    v5 = v4[5];
    v6 = v4[6];
    v7 = v4[7];
    *(_QWORD *)a1 = v4[4];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t BlendShapeWeightsSet.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance BlendShapeWeightsSet()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance BlendShapeWeightsSet(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t BlendShapeWeightsSet.startIndex.getter()
{
  return 0;
}

Swift::Int_optional __swiftcall BlendShapeWeightsSet.index(of:)(Swift::String of)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int v6;
  _QWORD *v7;
  BOOL v8;
  Swift::Bool v9;
  Swift::Int v10;
  Swift::Int_optional result;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    object = of._object;
    countAndFlagsBits = of._countAndFlagsBits;
    v6 = 0;
    v7 = (_QWORD *)(v2 + 40);
    while (1)
    {
      v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (_QWORD)object;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      ++v6;
      v7 += 4;
      if (v3 == v6)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v6 = 0;
    v9 = 1;
  }
  v10 = v6;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

unint64_t BlendShapeWeightsSet.subscript.getter@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = (_QWORD *)(*(_QWORD *)v2 + 32 * result);
    v4 = v3[5];
    v5 = v3[6];
    v6 = v3[7];
    *a2 = v3[4];
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t key path getter for BlendShapeWeightsSet.subscript(_:) : BlendShapeWeightsSet@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    v4 = (_QWORD *)(*(_QWORD *)result + 32 * v3);
    v5 = v4[5];
    v6 = v4[6];
    v7 = v4[7];
    *a3 = v4[4];
    a3[1] = v5;
    a3[2] = v6;
    a3[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t key path setter for BlendShapeWeightsSet.subscript(_:) : BlendShapeWeightsSet(uint64_t *a1, _QWORD **a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v4 = *a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  v9 = (_QWORD *)result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v9[2])
  {
    v11 = &v9[4 * v4];
    v11[4] = v6;
    v11[5] = v5;
    v11[6] = v7;
    v11[7] = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a2 = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsSet.subscript.setter(uint64_t *a1, unint64_t a2)
{
  _QWORD **v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  __int128 v9;

  v4 = *a1;
  v9 = *(_OWORD *)(a1 + 1);
  v5 = a1[3];
  v6 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v6 = (_QWORD *)result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v6[2] > a2)
  {
    v8 = &v6[4 * a2];
    v8[4] = v4;
    *(_OWORD *)(v8 + 5) = v9;
    v8[7] = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*BlendShapeWeightsSet.subscript.modify(void (**a1)(uint64_t **a1, char a2), unint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  void (*result)(uint64_t **, char);
  void (*v6)(uint64_t **, char);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1 = result;
  *((_QWORD *)result + 4) = a2;
  *((_QWORD *)result + 5) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = (_QWORD *)(*(_QWORD *)v2 + 32 * a2);
    v8 = v7[5];
    v9 = v7[6];
    v10 = v7[7];
    *(_QWORD *)v6 = v7[4];
    *((_QWORD *)v6 + 1) = v8;
    *((_QWORD *)v6 + 2) = v9;
    *((_QWORD *)v6 + 3) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return BlendShapeWeightsSet.subscript.modify;
  }
  __break(1u);
  return result;
}

void BlendShapeWeightsSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = *(_QWORD **)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v8 = v2[4];
    if (v7[2] > v8)
    {
      v9 = (_QWORD *)v2[5];
      v10 = &v7[4 * v8];
      v10[4] = v4;
      v10[5] = v3;
      v10[6] = v6;
      v10[7] = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v9 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    goto LABEL_7;
  }
  v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
LABEL_7:
  v11 = v2[4];
  if (v7[2] > v11)
  {
    v12 = (_QWORD *)v2[5];
    v13 = &v7[4 * v11];
    v13[4] = v4;
    v13[5] = v3;
    v13[6] = v6;
    v13[7] = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v12 = v7;
    goto LABEL_9;
  }
  __break(1u);
}

Swift::Int __swiftcall BlendShapeWeightsSet.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance BlendShapeWeightsSet(uint64_t (**a1)(), unint64_t *a2))(_QWORD *a1)
{
  uint64_t (*v4)();

  v4 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 4) = BlendShapeWeightsSet.subscript.read(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*BlendShapeWeightsSet.subscript.read(uint64_t (*result)(), unint64_t a2))()
{
  uint64_t v2;
  uint64_t (*v3)();
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v3 = result;
    v4 = (_QWORD *)(*(_QWORD *)v2 + 32 * a2);
    v5 = v4[5];
    v6 = v4[6];
    v7 = v4[7];
    *(_QWORD *)v3 = v4[4];
    *((_QWORD *)v3 + 1) = v5;
    *((_QWORD *)v3 + 2) = v6;
    *((_QWORD *)v3 + 3) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return BlendShapeWeightsSet.subscript.read;
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsSet.subscript.read()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance BlendShapeWeightsSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

RealityFoundation::_Proto_BlendShapeWeightsAndMeshesGroup_v1 __swiftcall _Proto_BlendShapeWeightsAndMeshesGroup_v1.init(weightNames:meshDescriptors:)(Swift::OpaquePointer weightNames, Swift::OpaquePointer meshDescriptors)
{
  Swift::OpaquePointer *v2;
  RealityFoundation::_Proto_BlendShapeWeightsAndMeshesGroup_v1 result;

  v2->_rawValue = weightNames._rawValue;
  v2[1]._rawValue = meshDescriptors._rawValue;
  result.meshDescriptors = meshDescriptors;
  result.weightNames = weightNames;
  return result;
}

uint64_t (*_Proto_BlendShapeWeightsAndMeshesGroup_v1.weightNames.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_BlendShapeWeightsAndMeshesGroup_v1.meshDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_BlendShapeWeightsAndMeshesGroup_v1.meshDescriptors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*_Proto_BlendShapeWeightsAndMeshesGroup_v1.meshDescriptors.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::_Proto_BlendShapeWeightsMappingDefinition_v1 __swiftcall _Proto_BlendShapeWeightsMappingDefinition_v1.init(weightsAndMeshesGroups:)(RealityFoundation::_Proto_BlendShapeWeightsMappingDefinition_v1 weightsAndMeshesGroups)
{
  RealityFoundation::_Proto_BlendShapeWeightsMappingDefinition_v1 *v1;

  v1->_weightsAndMeshesGroups._rawValue = weightsAndMeshesGroups._weightsAndMeshesGroups._rawValue;
  return weightsAndMeshesGroups;
}

uint64_t closure #1 in _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, _QWORD **a6, _QWORD **a7)
{
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMap();
  v12 = *a1;
  if ((v12 - 3) <= 0xFFFFFFFD)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (*((_QWORD *)a1 + 2))
  {
    v13 = (_QWORD *)String.init(cString:)();
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = *((unsigned int *)a1 + 6);
  if (*a4 == v16)
  {
    a5 = *(_QWORD *)a5;
    a7 = (_QWORD **)String.init(cString:)();
    a4 = v17;
    v18 = *a6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((a5 & 0x8000000000000000) == 0)
        goto LABEL_8;
    }
    else
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      *a6 = v18;
      if ((a5 & 0x8000000000000000) == 0)
      {
LABEL_8:
        if (a5 < v18[2])
        {
          v36 = v15;
          v20 = v13;
          v21 = a7;
          v22 = v18 + 4;
          v23 = (_QWORD *)v18[a5 + 4];
          result = swift_isUniquelyReferenced_nonNull_native();
          v18[a5 + 4] = v23;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
            v23 = (_QWORD *)result;
            v22[a5] = result;
          }
          v26 = v23[2];
          v25 = v23[3];
          if (v26 >= v25 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
            v23 = (_QWORD *)result;
            v22[a5] = result;
          }
          v23[2] = v26 + 1;
          v27 = &v23[5 * v26];
          v27[4] = v21;
          v27[5] = a4;
          *((_BYTE *)v27 + 48) = v12 != 1;
          v27[7] = v20;
          v27[8] = v36;
          return result;
        }
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *a4 = v16;
  if (__OFADD__(*(_QWORD *)a5, 1))
    goto LABEL_25;
  ++*(_QWORD *)a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_BlendShapeMeshDescriptor_v1>);
  a5 = swift_allocObject();
  *(_OWORD *)(a5 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(a5 + 32) = String.init(cString:)();
  *(_QWORD *)(a5 + 40) = v28;
  *(_BYTE *)(a5 + 48) = v12 != 1;
  *(_QWORD *)(a5 + 56) = v13;
  *(_QWORD *)(a5 + 64) = v15;
  v13 = *a6;
  v29 = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v13;
  if ((v29 & 1) == 0)
  {
LABEL_27:
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *a6 = v13;
  }
  v31 = v13[2];
  v30 = v13[3];
  if (v31 >= v30 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v13);
    *a6 = v13;
  }
  v13[2] = v31 + 1;
  v13[v31 + 4] = a5;
  v32 = *a4;
  v33 = *a7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a7 = v33;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    v33 = (_QWORD *)result;
    *a7 = (_QWORD *)result;
  }
  v35 = v33[2];
  v34 = v33[3];
  if (v35 >= v34 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
    v33 = (_QWORD *)result;
  }
  v33[2] = v35 + 1;
  v33[v35 + 4] = v32;
  *a7 = v33;
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.createResource()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t inited;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  char v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t ServiceLocator;
  uint64_t AssetWithDefinitions;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t result;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;

  v1 = *v0;
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v78 = *v0;
  v79 = *(_QWORD *)(*v0 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v79)
  {
    v4 = 0;
    v5 = v1 + 32;
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 16 * v4 + 8) + 16);
      if (v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
        v7 = v2[2];
        v1 = v78;
        do
        {
          v8 = v2[3];
          if (v7 >= v8 >> 1)
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v7 + 1, 1, v2);
            v1 = v78;
            v2 = v9;
          }
          v2[2] = v7 + 1;
          v2[v7++ + 4] = v4;
          --v6;
        }
        while (v6);
      }
      if (++v4 == v79)
        goto LABEL_13;
    }
    goto LABEL_88;
  }
LABEL_13:
  v84 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>);
  inited = swift_initStackObject();
  v11 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 32) = v3;
  if (!v79)
  {
    v75 = (_QWORD *)inited;
LABEL_72:
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    ServiceLocator = REEngineGetServiceLocator();
    if (!MEMORY[0x22076FD58](ServiceLocator))
      goto LABEL_95;
    swift_bridgeObjectRetain();
    AssetWithDefinitions = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for _Proto_BlendShapeWeightsMappingResource_v1();
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = AssetWithDefinitions;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    v66 = v75;
    v67 = v75[2];
    if (!v67)
    {
LABEL_82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v65;
    }
    v68 = 0;
    v69 = v75 + 4;
    while (1)
    {
      if (v68 >= v66[2])
        goto LABEL_91;
      v70 = *(_QWORD *)(v69[v68] + 16);
      if (v70)
        break;
LABEL_75:
      ++v68;
      v66 = v75;
      if (v68 == v67)
        goto LABEL_82;
    }
    v71 = 0;
    while (1)
    {
      v72 = v69[v68];
      if (v71 >= *(_QWORD *)(v72 + 16))
        break;
      v73 = v71 + 1;
      free(*(void **)(v72 + 8 * v71 + 32));
      v71 = v73;
      if (v70 == v73)
        goto LABEL_75;
    }
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
  }
  v12 = 0;
  v13 = v78;
  v77 = v78 + 32;
  v80 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if (v12 >= *(_QWORD *)(v13 + 16))
      goto LABEL_89;
    v14 = *(_QWORD *)(v77 + 16 * v12);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain_n();
      v16 = v14 + 40;
      v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v18 = (const char *)(String.utf8CString.getter() + 32);
        swift_bridgeObjectRetain();
        v19 = strdup(v18);
        swift_release();
        swift_bridgeObjectRelease();
        if (v19)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          v21 = v17[2];
          v20 = v17[3];
          if (v21 >= v20 >> 1)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v17);
          v17[2] = v21 + 1;
          v17[v21 + 4] = v19;
        }
        v16 += 16;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v22 = v17[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v23 = v80;
    else
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
    v23[2] = v25 + 1;
    v80 = v23;
    v26 = &v23[2 * v25];
    v26[4] = v22;
    v26[5] = v17 + 4;
    v28 = v11[2];
    v27 = v11[3];
    if (v28 >= v27 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v11);
    ++v12;
    v11[2] = v28 + 1;
    v11[v28 + 4] = v17;
    v29 = v84;
    v13 = v78;
  }
  while (v12 != v79);
  v30 = 0;
  v82 = v84 + 4;
  v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v75 = v11;
  while (1)
  {
    if (v30 >= *(_QWORD *)(v13 + 16))
      goto LABEL_90;
    v85 = v31;
    v76 = v30;
    v32 = v77 + 16 * v30;
    v34 = *(_QWORD *)(v32 + 8);
    v33 = v32 + 8;
    v83 = *(_QWORD *)(v34 + 16);
    if (v83)
      break;
LABEL_36:
    v30 = v76 + 1;
    v13 = v78;
    v31 = v85;
    if (v76 + 1 == v79)
      goto LABEL_72;
  }
  v35 = 0;
  v36 = 64;
  v81 = v33;
  while (1)
  {
    if (v35 >= *(_QWORD *)(*(_QWORD *)v33 + 16))
      goto LABEL_84;
    v38 = (uint64_t *)(*(_QWORD *)v33 + v36);
    v39 = *((unsigned __int8 *)v38 - 16);
    v40 = *v38;
    v41 = *(v38 - 4);
    v42 = *(v38 - 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v43 = (void *)MEMORY[0x220768C3C](v41, v42);
    swift_bridgeObjectRelease();
    v44 = objc_retainAutorelease(v43);
    v45 = objc_msgSend(v44, sel_UTF8String);
    if (v40)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39)
      v57 = 2;
    else
      v57 = 1;
    if (!v45)
      goto LABEL_94;
    if (v35 >= v29[2])
      goto LABEL_87;
    v58 = v82[v35];
    if ((v58 & 0x8000000000000000) != 0 || HIDWORD(v58))
      goto LABEL_96;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v59 = v85;
    else
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
    v61 = v59[2];
    v60 = v59[3];
    if (v61 >= v60 >> 1)
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v61 + 1, 1, v59);
    v59[2] = v61 + 1;
    v85 = v59;
    v62 = &v59[4 * v61];
    *((_BYTE *)v62 + 32) = v57;
    v62[5] = v45;
    v62[6] = 0;
    *((_DWORD *)v62 + 14) = v58;
LABEL_41:
    ++v35;

    v36 += 40;
    v29 = v84;
    if (v83 == v35)
      goto LABEL_36;
  }
  if (v35 >= *(_QWORD *)(*(_QWORD *)v33 + 16))
    goto LABEL_85;
  v46 = (uint64_t *)(*(_QWORD *)v33 + v36);
  v47 = *v46;
  if (!*v46)
    goto LABEL_92;
  v48 = *(v46 - 1);
  swift_bridgeObjectRetain();
  v49 = (void *)MEMORY[0x220768C3C](v48, v47);
  swift_bridgeObjectRelease();
  v50 = objc_retainAutorelease(v49);
  v51 = objc_msgSend(v50, sel_UTF8String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39)
    v52 = 2;
  else
    v52 = 1;
  if (!v45)
    goto LABEL_93;
  if (v35 >= v29[2])
    goto LABEL_86;
  v53 = v82[v35];
  if ((v53 & 0x8000000000000000) == 0 && !HIDWORD(v53))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v54 = v85;
    else
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
    v56 = v54[2];
    v55 = v54[3];
    if (v56 >= v55 >> 1)
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v55 > 1), v56 + 1, 1, v54);
    v54[2] = v56 + 1;
    v85 = v54;
    v37 = &v54[4 * v56];
    *((_BYTE *)v37 + 32) = v52;
    v37[5] = v45;
    v37[6] = v51;
    *((_DWORD *)v37 + 14) = v53;

    v33 = v81;
    goto LABEL_41;
  }
LABEL_96:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.generate()()
{
  uint64_t result;
  _QWORD *v1;

  result = _Proto_BlendShapeWeightsMappingDefinition_v1.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1();
    swift_allocError();
    *v1 = 0xD00000000000002ELL;
    v1[1] = 0x800000021BE945B0;
    return swift_willThrow();
  }
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.weightsAndMeshesGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.init(mappingResource:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = result;
  return result;
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.weightNames.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  result = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (result < 0)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v1 = result;
  if (result)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v15 = result;
    while (v2 != v1)
    {
      result = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (result < 0)
        goto LABEL_24;
      v4 = result;
      if (result)
      {
        v5 = 0;
        v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          v7 = String.init(cString:)();
          v9 = v8;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
          v11 = v6[2];
          v10 = v6[3];
          if (v11 >= v10 >> 1)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
          ++v5;
          v6[2] = v11 + 1;
          v12 = &v6[2 * v11];
          v12[4] = v7;
          v12[5] = v9;
        }
        while (v4 != v5);
      }
      else
      {
        v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v3 = (_QWORD *)result;
      }
      v1 = v15;
      v14 = v3[2];
      v13 = v3[3];
      if (v14 >= v13 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3 = (_QWORD *)result;
      }
      ++v2;
      v3[2] = v14 + 1;
      v3[v14 + 4] = v6;
      if (v2 == v15)
        return (uint64_t)v3;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.weights.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.weights.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_Proto_BlendShapeWeightsComponent_v1.weights.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return AnimationGroup.group.modify;
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.mappingResource.getter()
{
  return swift_retain();
}

uint64_t static _Proto_BlendShapeWeightsComponent_v1.__fromCore(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t BlendShapeWeightsDefinition;
  uint64_t v3;
  uint64_t v4;
  uint64_t BlendShapeWeightsCount;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t BlendWeightCount;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;

  BlendShapeWeightsDefinition = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (!BlendShapeWeightsDefinition)
    goto LABEL_27;
  v3 = BlendShapeWeightsDefinition;
  type metadata accessor for _Proto_BlendShapeWeightsMappingResource_v1();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  RERetain();
  REAssetSetSwiftObject();
  swift_retain();
  BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (BlendShapeWeightsCount < 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v6 = BlendShapeWeightsCount;
  if (BlendShapeWeightsCount)
  {
    v20 = v4;
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (v7 != v6)
    {
      BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (BlendWeightCount < 0)
        goto LABEL_25;
      v10 = BlendWeightCount;
      if (BlendWeightCount)
      {
        v11 = 0;
        v12 = (char *)MEMORY[0x24BEE4AF8];
        do
        {
          REBlendShapeWeightsComponentGetBlendWeight();
          v14 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
          v16 = *((_QWORD *)v12 + 2);
          v15 = *((_QWORD *)v12 + 3);
          if (v16 >= v15 >> 1)
            v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v12);
          ++v11;
          *((_QWORD *)v12 + 2) = v16 + 1;
          *(_DWORD *)&v12[4 * v16 + 32] = v14;
        }
        while (v10 != v11);
      }
      else
      {
        v12 = (char *)MEMORY[0x24BEE4AF8];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v18 = v8[2];
      v17 = v8[3];
      if (v18 >= v17 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v8);
      ++v7;
      v8[2] = v18 + 1;
      v8[v18 + 4] = v12;
      if (v7 == v6)
      {
        v4 = v20;
        result = swift_release();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_release();
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
  *a1 = v8;
  a1[1] = v4;
  return result;
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *v0;
  v1 = v0[1];
  result = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (result)
    v4 = *(_QWORD *)(v1 + 16) == result;
  else
    v4 = 0;
  if (!v4)
    result = REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
    return RENetworkMarkComponentDirty();
  v6 = 0;
  v7 = v2 + 32;
  while (v6 < *(_QWORD *)(v2 + 16))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 16);
    if (v8)
    {
      v9 = 0;
      while (v9 < *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) + 16))
      {
        v10 = v9 + 1;
        result = REBlendShapeWeightsComponentSetBlendWeight();
        v9 = v10;
        if (v8 == v10)
          goto LABEL_8;
      }
      __break(1u);
      break;
    }
LABEL_8:
    if (++v6 == v5)
      return RENetworkMarkComponentDirty();
  }
  __break(1u);
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance _Proto_BlendShapeWeightsComponent_v1(_DWORD *a1@<X8>)
{
  *a1 = 37;
}

uint64_t BlendShapeWeightsComponent.init(weightsMapping:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  swift_retain();
  result = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (result < 0)
  {
LABEL_41:
    __break(1u);
    return result;
  }
  v5 = result;
  if (result)
  {
    v30 = a1;
    v31 = a2;
    v6 = 0;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v32 = result;
    while (v6 != v5)
    {
      REBlendShapeWeightsDefinitionAssetGetBlendShapeName();
      v9 = String.init(cString:)();
      v34 = v10;
      result = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (result < 0)
        goto LABEL_39;
      v11 = result;
      v33 = v7;
      if (result)
      {
        v12 = 0;
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v14 = (char *)MEMORY[0x24BEE4AF8];
        do
        {
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          v15 = String.init(cString:)();
          v17 = v16;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v19 = v13[2];
          v18 = v13[3];
          if (v19 >= v18 >> 1)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v13);
          v13[2] = v19 + 1;
          v20 = &v13[2 * v19];
          v20[4] = v15;
          v20[5] = v17;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
          v22 = *((_QWORD *)v14 + 2);
          v21 = *((_QWORD *)v14 + 3);
          if (v22 >= v21 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v14);
          ++v12;
          *((_QWORD *)v14 + 2) = v22 + 1;
          *(_DWORD *)&v14[4 * v22 + 32] = 0;
        }
        while (v11 != v12);
      }
      else
      {
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v14 = (char *)MEMORY[0x24BEE4AF8];
      }
      v7 = v33;
      v23 = v34;
      v24 = v33[2];
      if (v24)
      {
        v25 = 0;
        v26 = v33 + 7;
        while (1)
        {
          result = *(v26 - 3);
          if (result == v9 && *(v26 - 2) == v23)
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v23 = v34;
          if ((result & 1) != 0)
            break;
          ++v25;
          v26 += 4;
          if (v24 == v25)
            goto LABEL_29;
        }
        if (v25 >= v24)
          goto LABEL_40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v32;
      }
      else
      {
LABEL_29:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 + 1, 1, v33);
        v5 = v32;
        v29 = v7[2];
        v28 = v7[3];
        if (v29 >= v28 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v7);
        v7[2] = v29 + 1;
        v8 = &v7[4 * v29];
        v8[4] = v9;
        v8[5] = v34;
        v8[6] = v14;
        v8[7] = v13;
      }
      ++v6;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v6 == v5)
      {
        a1 = v30;
        result = swift_release();
        a2 = v31;
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_release();
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_37:
  *a2 = a1;
  a2[1] = v7;
  return result;
}

uint64_t BlendShapeWeightsComponent.weightSet.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

void BlendShapeWeightsComponent.weightSet.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *oslog;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(v1 + 8);
  if (v3 != *(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1)
LABEL_53:
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static BlendShapeLogger.logger);
    oslog = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      v11 = "BlendShapeWeightsSet.set() has invalid number of weight sets.";
LABEL_40:
      _os_log_impl(&dword_21B9AA000, oslog, v9, v11, v10, 2u);
      MEMORY[0x220772F44](v10, -1, -1);
    }
LABEL_41:

    return;
  }
  v35 = v1;
  if (v3)
  {
    v5 = 0;
    v6 = v2 + 32;
    v7 = v4 + 32;
    v36 = v4 + 32;
    while (1)
    {
      v12 = (_QWORD *)(v6 + 32 * v5);
      v13 = (_QWORD *)(v7 + 32 * v5);
      v14 = *v12 == *v13 && v12[1] == v13[1];
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v16 = v12[3];
      v15 = v12 + 3;
      v17 = *(_QWORD *)(v16 + 16);
      v19 = v13[3];
      v18 = v13 + 3;
      if (v17 != *(_QWORD *)(v19 + 16))
        goto LABEL_43;
      v20 = *(v15 - 1);
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(*(_QWORD *)(v7 + 32 * v5 + 16) + 16);
      if (v22)
      {
        if (v21 != v22 || v17 != v21)
          goto LABEL_43;
      }
      else
      {
        if (v21)
          v24 = 0;
        else
          v24 = v17 == 0;
        if (!v24)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          if (one-time initialization token for logger != -1)
            swift_once();
          v33 = type metadata accessor for Logger();
          __swift_project_value_buffer(v33, (uint64_t)static BlendShapeLogger.logger);
          oslog = Logger.logObject.getter();
          v9 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(oslog, v9))
          {
            v10 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v10 = 0;
            v11 = "BlendShapeWeightsSet.set() has invalid weight counts.";
            goto LABEL_40;
          }
          goto LABEL_41;
        }
      }
      v25 = v4;
      if (v21)
      {
        v26 = 0;
        v27 = 0;
        v28 = v20 + 32;
        while (*(float *)(v28 + 4 * v27) >= 0.0)
        {
          if (v27 >= *(_QWORD *)(*v15 + 16))
          {
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          v29 = *v18;
          if (v27 >= *(_QWORD *)(*v18 + 16))
            goto LABEL_52;
          v30 = *v15 + v26;
          v31 = *(_QWORD *)(v30 + 32) == *(_QWORD *)(v29 + v26 + 32)
             && *(_QWORD *)(v30 + 40) == *(_QWORD *)(v29 + v26 + 40);
          if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          ++v27;
          v26 += 16;
          if (v21 == v27)
            goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        if (one-time initialization token for logger != -1)
          swift_once();
        v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)static BlendShapeLogger.logger);
        oslog = Logger.logObject.getter();
        v9 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v9))
        {
          v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v10 = 0;
          v11 = "BlendShapeWeightsSet.set() has invalid weight data.";
          goto LABEL_40;
        }
        goto LABEL_41;
      }
LABEL_7:
      ++v5;
      v4 = v25;
      v7 = v36;
      v6 = v2 + 32;
      if (v5 == v3)
        goto LABEL_42;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static BlendShapeLogger.logger);
    oslog = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      v11 = "BlendShapeWeightsSet.set() has invalid weight names.";
      goto LABEL_40;
    }
    goto LABEL_41;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v35 + 8) = v2;
}

void (*BlendShapeWeightsComponent.weightSet.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return BlendShapeWeightsComponent.weightSet.modify;
}

void BlendShapeWeightsComponent.weightSet.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    BlendShapeWeightsComponent.weightSet.setter(&v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    BlendShapeWeightsComponent.weightSet.setter(&v2);
  }
}

uint64_t static BlendShapeWeightsComponent.__fromCore(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t BlendShapeWeightsDefinition;
  uint64_t v3;
  uint64_t v4;
  uint64_t BlendShapeWeightsCount;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t BlendWeightCount;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  _OWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;

  BlendShapeWeightsDefinition = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (!BlendShapeWeightsDefinition)
    goto LABEL_42;
  v3 = BlendShapeWeightsDefinition;
  type metadata accessor for BlendShapeWeightsMapping();
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  RERetain();
  REAssetSetSwiftObject();
  v4 = swift_retain();
  BlendShapeWeightsComponent.init(weightsMapping:)(v4, &v42);
  BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (BlendShapeWeightsCount < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v36 = a1;
  if (BlendShapeWeightsCount)
  {
    v6 = 0;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v37 = BlendShapeWeightsCount;
    while (v6 != BlendShapeWeightsCount)
    {
      BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      REBlendShapeWeightsDefinitionAssetGetBlendShapeName();
      v10 = String.init(cString:)();
      if (BlendWeightCount < 0)
        goto LABEL_39;
      v39 = v10;
      v40 = v11;
      v38 = v7;
      if (BlendWeightCount)
      {
        v12 = 0;
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v14 = (char *)MEMORY[0x24BEE4AF8];
        do
        {
          REBlendShapeWeightsComponentGetBlendWeight();
          v16 = v15;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
          v18 = *((_QWORD *)v14 + 2);
          v17 = *((_QWORD *)v14 + 3);
          if (v18 >= v17 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v14);
          *((_QWORD *)v14 + 2) = v18 + 1;
          *(_DWORD *)&v14[4 * v18 + 32] = v16;
          v19 = v3;
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          v20 = String.init(cString:)();
          v22 = v21;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v24 = v13[2];
          v23 = v13[3];
          if (v24 >= v23 >> 1)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v13);
          ++v12;
          v13[2] = v24 + 1;
          v25 = &v13[2 * v24];
          v25[4] = v20;
          v25[5] = v22;
          v3 = v19;
        }
        while (BlendWeightCount != v12);
      }
      else
      {
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v14 = (char *)MEMORY[0x24BEE4AF8];
      }
      v7 = v38;
      v26 = v39;
      v27 = v38[2];
      v28 = v40;
      if (v27)
      {
        v29 = 0;
        v30 = v38 + 7;
        while (*(v30 - 3) != v26 || *(v30 - 2) != v28)
        {
          v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v26 = v39;
          v28 = v40;
          if ((v32 & 1) != 0)
            break;
          ++v29;
          v30 += 4;
          if (v27 == v29)
            goto LABEL_30;
        }
        if (v29 >= v27)
          goto LABEL_40;
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v38);
        v34 = v7[2];
        v33 = v7[3];
        if (v34 >= v33 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v7);
        v7[2] = v34 + 1;
        v8 = &v7[4 * v34];
        v8[4] = v39;
        v8[5] = v40;
        v8[6] = v14;
        v8[7] = v13;
      }
      ++v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BlendShapeWeightsCount = v37;
      if (v6 == v37)
        goto LABEL_37;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_37:
  v41 = v7;
  BlendShapeWeightsComponent.weightSet.setter((uint64_t *)&v41);
  result = swift_release();
  *v36 = v42;
  return result;
}

uint64_t BlendShapeWeightsComponent.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *v0;
  v1 = v0[1];
  result = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (result)
    v4 = *(_QWORD *)(v2 + 16) == result;
  else
    v4 = 0;
  if (!v4)
    result = REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
    return RENetworkMarkComponentDirty();
  v6 = 0;
  while (v6 < *(_QWORD *)(v1 + 16))
  {
    v7 = v1 + 32 + 32 * v6;
    v9 = *(_QWORD *)(v7 + 16);
    v8 = v7 + 16;
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = 0;
      while (v11 < *(_QWORD *)(*(_QWORD *)v8 + 16))
      {
        v12 = v11 + 1;
        result = REBlendShapeWeightsComponentSetBlendWeight();
        v11 = v12;
        if (v10 == v12)
          goto LABEL_8;
      }
      __break(1u);
      break;
    }
LABEL_8:
    if (++v6 == v5)
      return RENetworkMarkComponentDirty();
  }
  __break(1u);
  return result;
}

void static BlendShapeWeightsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 37;
}

unint64_t lazy protocol witness table accessor for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1;
  if (!lazy protocol witness table cache variable for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_BlendShapeWeightsMappingError_v1, &type metadata for _Proto_BlendShapeWeightsMappingError_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator;
  if (!lazy protocol witness table cache variable for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeightsSet.Iterator, &type metadata for BlendShapeWeightsSet.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet;
  if (!lazy protocol witness table cache variable for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeightsSet, &type metadata for BlendShapeWeightsSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BlendShapeWeightsSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<BlendShapeWeightsSet> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<BlendShapeWeightsSet>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BlendShapeWeightsSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeightsSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeightsSet>, MEMORY[0x24BEE4238]);
}

uint64_t sub_21BE0937C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BE09388(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

double sub_21BE093C8@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  BlendShapeWeightsSet.default.getter(v4);
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_21BE09414()
{
  return 0;
}

uint64_t sub_21BE09424@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BE09430(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_21BE09470@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

void sub_21BE0947C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_bridgeObjectRetain();
  BlendShapeWeightsComponent.weightSet.setter(&v1);
}

ValueMetadata *type metadata accessor for BlendShapeWeightsData()
{
  return &type metadata for BlendShapeWeightsData;
}

ValueMetadata *type metadata accessor for BlendShapeWeightsSet()
{
  return &type metadata for BlendShapeWeightsSet;
}

ValueMetadata *type metadata accessor for BlendShapeWeightsSet.Iterator()
{
  return &type metadata for BlendShapeWeightsSet.Iterator;
}

_QWORD *assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4BC0], (void (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsAndMeshesGroup_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsAndMeshesGroup_v1;
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsMappingDefinition_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsMappingDefinition_v1;
}

uint64_t destroy for _Proto_BlendShapeWeightsComponent_v1()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for _Proto_BlendShapeWeightsComponent_v1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _Proto_BlendShapeWeightsComponent_v1(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for _Proto_BlendShapeWeightsComponent_v1(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4BC0], (void (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsComponent_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsComponent_v1;
}

_QWORD *assignWithTake for BlendShapeWeightsComponent(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4EF8], (void (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

_QWORD *assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(_QWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t))
{
  uint64_t v8;

  a4(*a1);
  v8 = a1[1];
  *(_OWORD *)a1 = *a2;
  a5(v8);
  return a1;
}

ValueMetadata *type metadata accessor for BlendShapeWeightsComponent()
{
  return &type metadata for BlendShapeWeightsComponent;
}

float SpinAction.revolutions.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void SpinAction.revolutions.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*SpinAction.revolutions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpinAction.localAxis.getter()
{
  __n128 *v0;

  return v0[1];
}

void SpinAction.localAxis.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*SpinAction.localAxis.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpinAction.timingFunction.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[3].n128_u32[0];
  v3 = v1[3].n128_u8[4];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 SpinAction.timingFunction.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u32[0];
  v3 = a1[1].n128_u8[4];
  result = *a1;
  v1[2] = *a1;
  v1[3].n128_u32[0] = v2;
  v1[3].n128_u8[4] = v3;
  return result;
}

uint64_t (*SpinAction.timingFunction.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpinAction.isAdditive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 53);
}

uint64_t SpinAction.isAdditive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 53) = result;
  return result;
}

uint64_t (*SpinAction.isAdditive.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

ValueMetadata *SpinAction.animatedValueType.getter()
{
  return &type metadata for Transform;
}

__n128 SpinAction.init(revolutions:localAxis:timingFunction:isAdditive:)@<Q0>(__n128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>, float32x4_t a5@<Q1>)
{
  unsigned __int32 v5;
  unsigned __int8 v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  __n128 result;

  v5 = a1[1].n128_u32[0];
  v6 = a1[1].n128_u8[4];
  v7 = (int32x4_t)vmulq_f32(a5, a5);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(float *)a3 = a4;
  result = *a1;
  *(float32x4_t *)(a3 + 16) = vmulq_n_f32(a5, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  *(__n128 *)(a3 + 32) = result;
  *(_DWORD *)(a3 + 48) = v5;
  *(_BYTE *)(a3 + 52) = v6;
  *(_BYTE *)(a3 + 53) = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpinAction.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BE09894 + 4 * byte_21BE7F330[*v0]))(0x6974756C6F766572, 0xEB00000000736E6FLL);
}

uint64_t sub_21BE09894()
{
  return 0x6978416C61636F6CLL;
}

uint64_t sub_21BE098B0()
{
  return 0x7546676E696D6974;
}

uint64_t sub_21BE098D4()
{
  return 0x6974696464417369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpinAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SpinAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpinAction.CodingKeys()
{
  lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpinAction.CodingKeys()
{
  lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SpinAction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  char v22;
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpinAction.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_OWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 32);
  v17 = *(_QWORD *)(v1 + 40);
  v18 = v8;
  LODWORD(v8) = *(_DWORD *)(v1 + 48);
  v15 = *(unsigned __int8 *)(v1 + 52);
  v16 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = v16;
  v11 = v5;
  v13 = v17;
  v12 = v18;
  v20 = v19;
  v23 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4108]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(_QWORD *)&v20 = v12;
  *((_QWORD *)&v20 + 1) = v13;
  v21 = v10;
  v22 = v15;
  v23 = 2;
  lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v20) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpinAction.CodingKeys, &unk_24DFDA600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpinAction.CodingKeys, &unk_24DFDA600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpinAction.CodingKeys, &unk_24DFDA600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpinAction.CodingKeys, &unk_24DFDA600);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

uint64_t SpinAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  __int128 v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  int v19;
  unsigned __int8 v20;
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpinAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v18) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v21 = 1;
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4118]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17 = v18;
    v21 = 2;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v18;
    v15 = v20;
    v16 = v19;
    LOBYTE(v18) = 3;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_DWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v17;
    *(_OWORD *)(a2 + 32) = v12;
    *(_DWORD *)(a2 + 48) = v16;
    *(_BYTE *)(a2 + 52) = v15;
    *(_BYTE *)(a2 + 53) = v13 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for EntityAction.isAdditive.getter in conformance SpinAction()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 53);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpinAction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SpinAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpinAction(_QWORD *a1)
{
  return SpinAction.encode(to:)(a1);
}

__n128 __swift_memcpy54_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 46) = *(_QWORD *)(a2 + 46);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpinAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 54))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 53);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpinAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 54) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 54) = 0;
    if (a2)
      *(_BYTE *)(result + 53) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpinAction()
{
  return &type metadata for SpinAction;
}

uint64_t storeEnumTagSinglePayload for SpinAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BE09F20 + 4 * byte_21BE7F339[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BE09F54 + 4 * byte_21BE7F334[v4]))();
}

uint64_t sub_21BE09F54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE09F5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE09F64);
  return result;
}

uint64_t sub_21BE09F70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE09F78);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BE09F7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE09F84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SpinAction.CodingKeys()
{
  return &unk_24DFDA600;
}

uint64_t SpinActionHandler.actionStarted(event:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[17];

  v2 = v1;
  v3 = a1[13];
  v32[12] = a1[12];
  v32[13] = v3;
  v4 = a1[15];
  v32[14] = a1[14];
  v32[15] = v4;
  v5 = a1[9];
  v32[8] = a1[8];
  v32[9] = v5;
  v6 = a1[11];
  v32[10] = a1[10];
  v32[11] = v6;
  v7 = a1[5];
  v32[4] = a1[4];
  v32[5] = v7;
  v8 = a1[7];
  v32[6] = a1[6];
  v32[7] = v8;
  v9 = a1[1];
  v32[0] = *a1;
  v32[1] = v9;
  v10 = a1[3];
  v32[2] = a1[2];
  v32[3] = v10;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 1;
  v11 = outlined retain of ActionEvent<SpinAction>((uint64_t)v32);
  specialized ActionEvent.animationState.getter(&v25, v11);
  outlined release of ActionEvent<SpinAction>((uint64_t)v32);
  if (!v27)
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v25);
  outlined init with take of BindableDataInternal(&v25, (uint64_t)v29);
  v12 = v30;
  v13 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  v14 = *(void (**)(uint64_t, uint64_t))(v13 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v24[1] = v24;
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v24 - v18;
  v14(v12, v13);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  else
  {
    v28[3] = AssociatedTypeWitness;
    v28[4] = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 32))(boxed_opaque_existential_1, v19, AssociatedTypeWitness);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v23 = v27;
      *(_QWORD *)v2 = v26;
      *(_QWORD *)(v2 + 8) = v23;
      *(_BYTE *)(v2 + 16) = 0;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

float32x4_t *SpinActionHandler.actionUpdated(event:)(float32x4_t *result)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  float v21;
  char v22;
  float v23;
  uint64_t v24;
  float v25;
  __float2 v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36;
  _BYTE v37[32];
  __int128 v38;
  double v39;
  char v40;
  uint64_t v41;
  uint64_t AssociatedConformanceWitness;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  _BYTE v49[32];
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  _OWORD v54[7];
  _BYTE v55[24];

  v2 = result[13];
  v54[3] = result[12];
  v54[4] = v2;
  v3 = result[15];
  v54[5] = result[14];
  v54[6] = v3;
  v4 = result[9];
  v53 = result[8];
  v54[0] = v4;
  v5 = result[11];
  v54[1] = result[10];
  v54[2] = v5;
  v6 = result[5];
  *(float32x4_t *)&v49[16] = result[4];
  v50 = v6;
  v7 = result[7];
  v51 = result[6];
  v52 = v7;
  v8 = result[1];
  v46 = *result;
  v47 = v8;
  v9 = result[3];
  v48 = result[2];
  *(float32x4_t *)v49 = v9;
  if ((v1[1].i8[0] & 1) == 0)
  {
    v36 = *v1;
    v10 = outlined retain of ActionEvent<SpinAction>((uint64_t)&v46);
    specialized ActionEvent.animationState.getter(v37, v10);
    outlined release of ActionEvent<SpinAction>((uint64_t)&v46);
    if (*(_QWORD *)&v37[24])
    {
      outlined init with take of BindableDataInternal((__int128 *)v37, (uint64_t)v43);
      v11 = v44;
      v12 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v15 = type metadata accessor for Optional();
      v16 = *(_QWORD *)(v15 - 8);
      MEMORY[0x24BDAC7A8](v15);
      v18 = (char *)&v33 - v17;
      v13(v11, v12);
      v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      }
      else
      {
        v41 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
        (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, AssociatedTypeWitness);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v34 = *(_OWORD *)v37;
          v35 = v38;
          outlined init with take of Double?((uint64_t)v54 + 8, (uint64_t)v55);
          outlined init with take of Double?((uint64_t)v55, (uint64_t)&v39);
          if (v40 != 1)
          {
            v21 = v47.f32[0];
            v33 = v48;
            *(_OWORD *)v37 = *(_OWORD *)v49;
            *(_QWORD *)&v37[13] = *(_QWORD *)&v49[13];
            v22 = v49[21];
            v23 = v39;
            AnimationTimingFunction.coreEasingFunction.getter();
            if (*(_QWORD *)(v24 + 16))
            {
              REEasingFunctionEvaluateEx();
              v23 = v25;
            }
            swift_release();
            v26 = __sincosf_stret((float)((float)((float)(v21 * v23) + (float)(v21 * v23)) * 3.1416) * 0.5);
            v27 = vmulq_n_f32(v33, v26.__sinval);
            v27.i32[3] = LODWORD(v26.__cosval);
            if ((v22 & 1) != 0)
            {
              v36 = v27;
              v31 = v44;
              v32 = v45;
              __swift_project_boxed_opaque_existential_1(v43, v44);
              if (one-time initialization token for identity != -1)
                swift_once();
              *(_OWORD *)v37 = xmmword_21BE41210;
              *(float32x4_t *)&v37[16] = v36;
              v38 = 0uLL;
            }
            else
            {
              v28 = (int32x4_t)vnegq_f32(v27);
              v29 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v28));
              v30 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
              v30.i32[0] = v28.i32[1];
              v30.i32[3] = v28.i32[2];
              v36 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v27, v36, 3), v30, v36, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v28, 8uLL), *(float32x2_t *)v36.f32, 1), (float32x4_t)vextq_s8(v29, v29, 8uLL), v36.f32[0]));
              v31 = v44;
              v32 = v45;
              __swift_project_boxed_opaque_existential_1(v43, v44);
              *(_OWORD *)v37 = v34;
              *(float32x4_t *)&v37[16] = v36;
              v38 = v35;
            }
            (*(void (**)(_BYTE *, ValueMetadata *, uint64_t, uint64_t))(v32 + 64))(v37, &type metadata for Transform, v31, v32);
          }
        }
      }
      return (float32x4_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    }
    else
    {
      return (float32x4_t *)outlined destroy of AnimationStateProtocol?((uint64_t)v37);
    }
  }
  return result;
}

uint64_t specialized SpinAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6974756C6F766572 && a2 == 0xEB00000000736E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6978416C61636F6CLL && a2 == 0xE900000000000073
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7546676E696D6974 && a2 == 0xEE006E6F6974636ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6974696464417369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t outlined retain of ActionEvent<SpinAction>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for SpinActionHandler(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpinActionHandler()
{
  return &type metadata for SpinActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in SpinActionHandler()
{
  return &protocol witness table for SpinAction;
}

uint64_t PixelCastHit.entity.getter()
{
  return swift_retain();
}

__n128 PixelCastHit.normal.getter()
{
  __n128 *v0;

  return v0[1];
}

__n128 PixelCastHit.position.getter()
{
  __n128 *v0;

  return v0[2];
}

uint64_t PixelCastHit.meshPart.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t PixelCastHit.instance.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56);
}

uint64_t PixelCastHit.primitive.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60);
}

uint64_t PixelCastHit.barycentric.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

unint64_t PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned __int32 a3@<W2>, unsigned __int32 a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, __n128 *a8@<X8>, __n128 a9@<Q0>, __n128 a10@<Q1>)
{
  a8->n128_u64[0] = result;
  a8[1] = a9;
  a8[2] = a10;
  a8[3].n128_u64[0] = a2;
  a8[3].n128_u32[2] = a3;
  a8[3].n128_u32[3] = a4;
  a8[4].n128_u64[0] = a5;
  a8[4].n128_u64[1] = a6;
  a8[5].n128_u8[0] = a7 & 1;
  return result;
}

uint64_t static Scene.pixelCastRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  swift_beginAccess();
  v2 = static Scene.pixelCastRequest;
  v3 = *(_QWORD *)algn_2551B0BF8;
  v4 = xmmword_2551B0C00;
  v5 = qword_2551B0C10;
  v6 = unk_2551B0C18;
  v7 = qword_2551B0C20;
  v8 = unk_2551B0C28;
  v9 = unk_2551B0C38;
  v11 = qword_2551B0C30;
  result = outlined copy of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(static Scene.pixelCastRequest);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v9;
  return result;
}

uint64_t static Scene.pixelCastRequest.setter(uint64_t a1)
{
  uint64_t v2;

  swift_beginAccess();
  v2 = static Scene.pixelCastRequest;
  outlined init with take of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(a1, (uint64_t)&static Scene.pixelCastRequest);
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v2);
}

uint64_t (*static Scene.pixelCastRequest.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t static Scene.pixelCastArrayRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  swift_beginAccess();
  v2 = static Scene.pixelCastArrayRequest;
  v3 = qword_2551B0C48;
  v4 = xmmword_2551B0C50;
  v5 = qword_2551B0C60;
  v6 = qword_2551B0C68;
  v7 = qword_2551B0C70;
  v8 = qword_2551B0C78;
  v9 = qword_2551B0C88;
  v11 = qword_2551B0C80;
  result = outlined copy of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(static Scene.pixelCastArrayRequest);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v9;
  return result;
}

uint64_t static Scene.pixelCastArrayRequest.setter(uint64_t a1)
{
  uint64_t v2;

  swift_beginAccess();
  v2 = static Scene.pixelCastArrayRequest;
  outlined init with take of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(a1, (uint64_t)&static Scene.pixelCastArrayRequest);
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v2);
}

uint64_t (*static Scene.pixelCastArrayRequest.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t Scene._proto_pixelCast_v1(origin:direction:length:relativeTo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7)
{
  float32x4_t v7;

  *(float *)&a7 = vmuls_lane_f32(*(float *)&a6, a5, 2);
  *(float32x2_t *)v7.f32 = vadd_f32(*(float32x2_t *)a4.f32, vmul_n_f32(*(float32x2_t *)a5.f32, *(float *)&a6));
  *(float *)&a6 = a4.f32[2] + *(float *)&a7;
  v7.f32[2] = a4.f32[2] + *(float *)&a7;
  v7.i32[3] = 0;
  return Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(a1, a2, a3, a4, v7, a6, a7);
}

uint64_t Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  unsigned __int32 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  uint64_t v27;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  simd_float4x4 v32;
  simd_float4x4 v33;

  v31 = a4;
  if (a1)
  {
    *(double *)v32.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a1);
    v33 = __invert_f4(v32);
    v24 = (float32x4_t)v33.columns[1];
    v25 = (float32x4_t)v33.columns[0];
    v22 = (float32x4_t)v33.columns[3];
    v23 = (float32x4_t)v33.columns[2];
    *(float32x2_t *)v9.f32 = simd_float4x4.transform(position:)(v31, (float32x4_t)v33.columns[0], (float32x4_t)v33.columns[1], (float32x4_t)v33.columns[2], (float32x4_t)v33.columns[3]);
    v31 = v9;
    *(float32x2_t *)v10.f32 = simd_float4x4.transform(position:)(a5, v25, v24, v23, v22);
    v11 = vsubq_f32(v10, v31);
    v12 = (int32x4_t)vmulq_f32(v11, v11);
    v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13);
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13, vmul_f32(v14, v14)));
    v26 = sqrtf(*(float *)&v12.i32[2] + (float)(*(float *)v12.i32
                                              + vmuls_lane_f32(v11.f32[1], *(float32x2_t *)v11.f32, 1)));
    v29 = vmulq_n_f32(v11, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, vmul_f32(v15, v15))).f32[0]);
  }
  else
  {
    v16 = vsubq_f32(a5, a4);
    v17 = vmulq_f32(v16, v16);
    *(float *)&a7 = sqrtf(v17.f32[2] + (float)(v17.f32[0] + vmuls_lane_f32(v16.f32[1], *(float32x2_t *)v16.f32, 1)));
    *(float32x2_t *)v18.f32 = vdiv_f32(*(float32x2_t *)v16.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
    v18.f32[2] = v16.f32[2] / *(float *)&a7;
    v18.i32[3] = 0;
    v26 = *(float *)&a7;
    v29 = v18;
  }
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  v20 = LODWORD(v26);
  swift_beginAccess();
  v27 = static Scene.pixelCastArrayRequest;
  static Scene.pixelCastArrayRequest = v30;
  qword_2551B0C48 = 0;
  xmmword_2551B0C50 = (__int128)v31;
  *(float32x4_t *)&qword_2551B0C60 = v29;
  qword_2551B0C70 = v20;
  qword_2551B0C78 = 0;
  qword_2551B0C80 = (uint64_t)partial apply for closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:);
  qword_2551B0C88 = v19;
  swift_retain();
  swift_retain();
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v27);
}

void closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(id a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  id v6;

  if ((a2 & 1) != 0)
  {
    v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    swift_getErrorValue();
    Error.localizedDescription.getter();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = swift_bridgeObjectRetain();
    a3(v5);
    outlined consume of Result<[PixelCastHit], Error>(a1, 0);
  }
}

uint64_t Scene.pixelCast(origin:direction:length:)(unint64_t a1, __n128 a2, float32x4_t a3, float a4)
{
  _QWORD *v4;
  __n128 v6;
  _QWORD *v7;
  __n128 v11;

  v4[2] = type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  v6.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)a2.n128_u64[0], vmul_n_f32(*(float32x2_t *)a3.f32, a4));
  v6.n128_u64[1] = COERCE_UNSIGNED_INT(a2.n128_f32[2] + vmuls_lane_f32(a4, a3, 2));
  v11 = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = Scene.pixelCast(origin:direction:length:);
  return Scene.pixelCast(from:to:)(a1, a2, v11);
}

uint64_t Scene.pixelCast(origin:direction:length:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Scene.pixelCast(from:to:)(unint64_t a1, __n128 a2, __n128 a3)
{
  unint64_t *v3;
  __n128 *v4;
  unint64_t v5;

  v4[4] = a2;
  v4[5] = a3;
  v4[6].n128_u64[0] = a1;
  v4[6].n128_u64[1] = (unint64_t)v3;
  v4[7].n128_u64[0] = *v3;
  v4[7].n128_u64[1] = type metadata accessor for MainActor();
  v4[8].n128_u64[0] = static MainActor.shared.getter();
  v4[8].n128_u64[1] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[9].n128_u64[0] = v5;
  return swift_task_switch();
}

uint64_t Scene.pixelCast(from:to:)(double a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  float v6;
  float32x2_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_OWORD *)(v3 + 64);
  v6 = *(float *)(v3 + 88) - COERCE_FLOAT(*(_QWORD *)(v3 + 72));
  v7 = vsub_f32(*(float32x2_t *)(v3 + 80), *(float32x2_t *)&v5);
  *(float *)&a3 = sqrtf((float)(v6 * v6) + vaddv_f32(vmul_f32(v7, v7)));
  *(float32x2_t *)&v8 = vdiv_f32(v7, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  *((_QWORD *)&v8 + 1) = COERCE_UNSIGNED_INT(v6 / *(float *)&a3);
  v9 = *(_QWORD *)(v3 + 104);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v8;
  *(_DWORD *)(v3 + 48) = LODWORD(a3);
  *(_QWORD *)(v3 + 152) = static MainActor.shared.getter();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 160) = v10;
  v10[2] = v9;
  v10[3] = v3 + 16;
  v10[4] = v4;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 168) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PixelCastHit?);
  *v11 = v3;
  v11[1] = Scene.pixelCast(from:to:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t Scene.pixelCast(from:to:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Scene.pixelCast(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v16 = *(_OWORD *)a3;
  v17 = *(_QWORD *)(a3 + 24);
  v8 = *(unsigned int *)(a3 + 32);
  v14 = *(_QWORD *)(a3 + 16);
  v15 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_beginAccess();
  v12 = unk_2551B0C28;
  v13 = static Scene.pixelCastRequest;
  static Scene.pixelCastRequest = v18;
  *(_QWORD *)algn_2551B0BF8 = 0;
  xmmword_2551B0C00 = v16;
  qword_2551B0C10 = v14;
  unk_2551B0C18 = v17;
  qword_2551B0C20 = v15;
  unk_2551B0C28 = 0;
  qword_2551B0C30 = (uint64_t)partial apply for closure #1 in closure #1 in Scene.pixelCast(from:to:);
  unk_2551B0C38 = v10;
  swift_retain();
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v13);
}

uint64_t closure #1 in closure #1 in Scene.pixelCast(from:to:)(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)a1;
  if ((*(_BYTE *)(a1 + 81) & 1) != 0)
  {
    v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

unint64_t Scene.PixelCastError.description.getter()
{
  return 0xD00000000000004ELL;
}

uint64_t static Scene.PixelCastError.== infix(_:_:)()
{
  return 1;
}

void Scene.PixelCastError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int Scene.PixelCastError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Scene.PixelCastError()
{
  return 0xD00000000000004ELL;
}

uint64_t specialized static PixelCastHit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  float v21;
  float v22;
  uint64_t v23;
  BOOL v24;
  float v25;
  float v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  float v31;
  float v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) != *(_QWORD *)(*(_QWORD *)a2 + 16))
    return 0;
  v3 = 0;
  v5 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 60);
  v10 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v11 = *(_BYTE *)(a1 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  v12 = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v18 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  v19 = *(_BYTE *)(a2 + 80);
  while (1)
  {
    v37 = v5;
    v21 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v38 = v13;
    v22 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v20 = v21 == v22;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v20)
        break;
      v20 = 0;
      result = 0;
      if (v3 == 2)
        return result;
    }
  }
  if (v21 != v22)
    return 0;
  v23 = 0;
  while (1)
  {
    v35 = v4;
    v25 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    v36 = v12;
    v26 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    v24 = v25 == v26;
    if (v23 == 2)
      break;
    while (1)
    {
      ++v23;
      if (v24)
        break;
      v24 = 0;
      result = 0;
      if (v23 == 2)
        return result;
    }
  }
  result = 0;
  if (v25 == v26 && v6 == v14 && v8 == v15 && v7 == v16)
  {
    if ((v11 & 1) != 0)
    {
      if ((v19 & 1) == 0)
        return 0;
    }
    else
    {
      if ((v19 & 1) != 0)
        return 0;
      v27 = 0;
      *(_QWORD *)&v28 = v10;
      *((_QWORD *)&v28 + 1) = v9;
      *(_QWORD *)&v29 = v18;
      *((_QWORD *)&v29 + 1) = v17;
      while (1)
      {
        v33 = v28;
        v31 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
        v34 = v29;
        v32 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
        v30 = v31 == v32;
        if (v27 == 2)
          break;
        while (1)
        {
          ++v27;
          if (v30)
            break;
          if (v27 == 2)
            return 0;
          v30 = 0;
        }
      }
      if (v31 != v32)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t outlined copy of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with take of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scene: Scene, ray: RERay, completion: ())?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_21BE0B8B8()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t partial apply for closure #1 in Scene.pixelCast(from:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Scene.pixelCast(from:to:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError;
  if (!lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Scene.PixelCastError, &type metadata for Scene.PixelCastError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError);
  }
  return result;
}

uint64_t initializeWithCopy for PixelCastHit(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PixelCastHit(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  v4 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

__n128 __swift_memcpy81_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PixelCastHit(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for PixelCastHit()
{
  return &type metadata for PixelCastHit;
}

uint64_t storeEnumTagSinglePayload for Scene.PixelCastError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BE0BADC + 4 * byte_21BE7F510[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BE0BAFC + 4 * byte_21BE7F515[v4]))();
}

_BYTE *sub_21BE0BADC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BE0BAFC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BE0BB04(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BE0BB0C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BE0BB14(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BE0BB1C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Scene.PixelCastError()
{
  return &type metadata for Scene.PixelCastError;
}

uint64_t sub_21BE0BB38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Scene.pixelCast(from:to:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
  return closure #1 in closure #1 in Scene.pixelCast(from:to:)(a1);
}

void outlined consume of Result<[PixelCastHit], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t static __ServiceLocator.shared.getter()
{
  specialized static __ServiceLocator.shared.getter();
  return swift_retain();
}

uint64_t static __ServiceLocator.__sharedEngine.getter()
{
  specialized static __ServiceLocator.__sharedEngine.getter();
  return swift_retain();
}

BOOL static __ServiceLocator.hasSharedServiceLocator.getter()
{
  return static __ServiceLocator.sharedEngine != 0;
}

uint64_t static __ServiceLocator.__sharedEngine.setter(void *a1)
{
  if (a1)
  {
    REEngineSetShared();
  }
  else if (static __ServiceLocator.createdSharedEngine == 1)
  {
    REEngineSetShared();
    static __ServiceLocator.createdSharedEngine = 0;
  }
  static __ServiceLocator.sharedEngine = a1;
  return swift_release();
}

uint64_t one-time initialization function for lock()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static __ServiceLocator.lock = result;
  return result;
}

uint64_t (*static __ServiceLocator.__sharedEngine.modify(void **a1))(void **a1, char a2)
{
  *a1 = specialized static __ServiceLocator.__sharedEngine.getter();
  swift_retain();
  return static __ServiceLocator.__sharedEngine.modify;
}

uint64_t static __ServiceLocator.__sharedEngine.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      swift_retain();
      REEngineSetShared();
    }
    else if ((static __ServiceLocator.createdSharedEngine & 1) != 0)
    {
      REEngineSetShared();
      static __ServiceLocator.createdSharedEngine = 0;
    }
    static __ServiceLocator.sharedEngine = v2;
    swift_release();
  }
  else
  {
    if (v2)
    {
      REEngineSetShared();
    }
    else if ((static __ServiceLocator.createdSharedEngine & 1) != 0)
    {
      REEngineSetShared();
      static __ServiceLocator.createdSharedEngine = 0;
    }
    static __ServiceLocator.sharedEngine = v2;
  }
  return swift_release();
}

uint64_t static __ServiceLocator.__createSharedIfNeeded(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  v1 = *a1;
  result = (uint64_t)specialized static __ServiceLocator.__sharedEngine.getter();
  if (!result)
  {
    v4 = v1;
    v3 = specialized static __Engine.makeSharedEngine(_:)(&v4);
    REEngineSetShared();
    static __ServiceLocator.sharedEngine = v3;
    result = swift_release();
    static __ServiceLocator.createdSharedEngine = 1;
  }
  return result;
}

uint64_t __ServiceLocator.__engineRef.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  swift_beginAccess();
  v2 = *(_QWORD *)(swift_unownedRetainStrong() + 24);
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t key path setter for __ServiceLocator.engine : __ServiceLocator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  swift_retain();
  swift_unownedRelease();
  *(_QWORD *)(v3 + 24) = v2;
  swift_endAccess();
  swift_unownedRetain();
  return swift_release();
}

uint64_t __ServiceLocator.engine.getter()
{
  swift_beginAccess();
  return swift_unownedRetainStrong();
}

uint64_t __ServiceLocator.engine.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  swift_unownedRelease();
  *(_QWORD *)(v1 + 24) = a1;
  swift_endAccess();
  swift_unownedRetain();
  return swift_release();
}

void (*__ServiceLocator.engine.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_unownedRetainStrong();
  return __ServiceLocator.engine.modify;
}

void __ServiceLocator.engine.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unownedRetain();
  swift_unownedRelease();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t __ServiceLocator.eventService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  a1[3] = type metadata accessor for REEventBus();
  a1[4] = &protocol witness table for REEventBus;
  *a1 = v3;
  return swift_retain();
}

uint64_t __ServiceLocator.usesMetal.getter()
{
  uint64_t v0;
  uint64_t result;

  swift_beginAccess();
  result = MEMORY[0x22076FD94](*(_QWORD *)(v0 + 16));
  if (result)
    return REEngineUsesMetal();
  return result;
}

uint64_t key path getter for __ServiceLocator.renderService : __ServiceLocator@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;

  v3 = *a1 + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v3, (uint64_t)&v5);
  if (v6)
    return outlined init with take of BindableDataInternal(&v5, a2);
  __break(1u);
  return result;
}

uint64_t key path setter for __ServiceLocator.renderService : __ServiceLocator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;

  outlined init with copy of __REAssetService(a1, (uint64_t)v13);
  v3 = *a2;
  v4 = v14;
  v5 = v15;
  v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, __n128))(v10 + 16))(v9, v7);
  specialized __ServiceLocator.renderService.setter((uint64_t)v9, v3, v4, v5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t __ServiceLocator.renderService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v1 + 40, (uint64_t)&v4);
  if (v5)
    return outlined init with take of BindableDataInternal(&v4, a1);
  __break(1u);
  return result;
}

uint64_t __ServiceLocator.renderService.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v9 + 16))(v8, v6);
  specialized __ServiceLocator.renderService.setter((uint64_t)v8, v1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*__ServiceLocator.renderService.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  char *v3;
  void (*result)(uint64_t *, char);

  v3 = (char *)malloc(0x98uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 18) = v1;
  swift_beginAccess();
  result = (void (*)(uint64_t *, char))outlined init with copy of __RenderService?(v1 + 40, (uint64_t)(v3 + 40));
  if (*((_QWORD *)v3 + 8))
  {
    outlined init with take of BindableDataInternal((__int128 *)(v3 + 40), (uint64_t)v3);
    return __ServiceLocator.renderService.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __ServiceLocator.renderService.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[18];
    outlined init with copy of __REAssetService(*a1, (uint64_t)(v2 + 10));
    v4 = v2[13];
    v5 = v2[14];
    v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 10), v4);
    v7 = MEMORY[0x24BDAC7A8](v6);
    v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v10 + 16))(v9, v7);
    specialized __ServiceLocator.renderService.setter((uint64_t)v9, v3, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 10));
  }
  else
  {
    v11 = v2[18];
    v12 = v2[3];
    v13 = v2[4];
    v14 = __swift_mutable_project_boxed_opaque_existential_1(*a1, v12);
    v15 = MEMORY[0x24BDAC7A8](v14);
    v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v18 + 16))(v17, v15);
    specialized __ServiceLocator.renderService.setter((uint64_t)v17, v11, v12, v13);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v2);
}

uint64_t key path setter for __ServiceLocator.sceneService : __ServiceLocator(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v5[2];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  v3 = *a2 + 80;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(v5, v3);
  return swift_endAccess();
}

uint64_t __ServiceLocator.sceneService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of __REAssetService(v1 + 80, a1);
}

uint64_t __ServiceLocator.sceneService.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 80;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(a1, v3);
  return swift_endAccess();
}

uint64_t (*__ServiceLocator.sceneService.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __ServiceLocator.assetService : __ServiceLocator(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v5[2];

  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  v3 = *a2 + 120;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(v5, v3);
  return swift_endAccess();
}

uint64_t __ServiceLocator.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of __REAssetService(v1 + 120, a1);
}

uint64_t __ServiceLocator.assetService.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 120;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(a1, v3);
  return swift_endAccess();
}

uint64_t key path getter for __ServiceLocator.systemsArePausedInEditor : __ServiceLocator@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = REServiceLocatorGetECSService();
  if (result)
  {
    result = REECSManagerSystemsArePausedInEditor();
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for __ServiceLocator.systemsArePausedInEditor : __ServiceLocator()
{
  uint64_t result;

  swift_beginAccess();
  result = REServiceLocatorGetECSService();
  if (result)
    return REECSManagerSetSystemsArePausedInEditor();
  __break(1u);
  return result;
}

uint64_t __ServiceLocator.systemsArePausedInEditor.getter()
{
  uint64_t result;

  swift_beginAccess();
  result = REServiceLocatorGetECSService();
  if (result)
    return REECSManagerSystemsArePausedInEditor();
  __break(1u);
  return result;
}

uint64_t __ServiceLocator.systemsArePausedInEditor.setter()
{
  uint64_t result;

  swift_beginAccess();
  result = REServiceLocatorGetECSService();
  if (result)
    return REECSManagerSetSystemsArePausedInEditor();
  __break(1u);
  return result;
}

void (*__ServiceLocator.systemsArePausedInEditor.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  void (*result)(void **, char);

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  result = (void (*)(void **, char))REServiceLocatorGetECSService();
  if (result)
  {
    *((_BYTE *)v3 + 32) = REECSManagerSystemsArePausedInEditor();
    return __ServiceLocator.systemsArePausedInEditor.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __ServiceLocator.systemsArePausedInEditor.modify(void **a1, char a2)
{
  void *v3;
  uint64_t ECSService;

  v3 = *a1;
  ECSService = REServiceLocatorGetECSService();
  if ((a2 & 1) != 0)
  {
    if (ECSService)
    {
LABEL_5:
      REECSManagerSetSystemsArePausedInEditor();
      free(v3);
      return;
    }
    __break(1u);
  }
  if (ECSService)
    goto LABEL_5;
  __break(1u);
}

uint64_t __ServiceLocator.usingRealityIO.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 217);
}

uint64_t __ServiceLocator.usingRealityIO.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 217) = a1;
  return result;
}

uint64_t (*__ServiceLocator.usingRealityIO.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __ServiceLocator.init(engine:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized __ServiceLocator.init(engine:)(a1);
  swift_release();
  return v1;
}

uint64_t __ServiceLocator.deinit()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 + 216) == 1)
  {
    *(_BYTE *)(v0 + 216) = 0;
    swift_beginAccess();
    REServiceLocatorSetSwiftObject();
    v1 = *(void **)(v0 + 224);
    if (v1)
    {
      dlclose(v1);
      *(_QWORD *)(v0 + 224) = 0;
    }
  }
  swift_unownedRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 40, &demangling cache variable for type metadata for __RenderService?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for USDImportService?);
  return v0;
}

uint64_t __ServiceLocator.__deallocating_deinit()
{
  __ServiceLocator.deinit();
  return swift_deallocClassInstance();
}

uint64_t __ServiceLocator.EngineStartStopScope.__allocating_init()()
{
  uint64_t v0;
  uint64_t Strong;

  v0 = swift_allocObject();
  swift_weakInit();
  *(_BYTE *)(v0 + 24) = 1;
  specialized static __ServiceLocator.__sharedEngine.getter();
  swift_weakAssign();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x22076CEF0](*(_QWORD *)(Strong + 24));
    swift_release();
  }
  return v0;
}

uint64_t __ServiceLocator.EngineStartStopScope.init()()
{
  uint64_t v0;
  uint64_t Strong;

  swift_weakInit();
  *(_BYTE *)(v0 + 24) = 1;
  specialized static __ServiceLocator.__sharedEngine.getter();
  swift_weakAssign();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x22076CEF0](*(_QWORD *)(Strong + 24));
    swift_release();
  }
  return v0;
}

uint64_t __ServiceLocator.EngineStartStopScope.deinit()
{
  uint64_t v0;
  uint64_t Strong;

  if (one-time initialization token for lock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    *(_BYTE *)(v0 + 24) = 0;
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      MEMORY[0x22076CEFC](*(_QWORD *)(Strong + 24));
      swift_release();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  swift_weakDestroy();
  return v0;
}

uint64_t __ServiceLocator.EngineStartStopScope.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t Strong;

  if (one-time initialization token for lock != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    *(_BYTE *)(v0 + 24) = 0;
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      MEMORY[0x22076CEFC](*(_QWORD *)(Strong + 24));
      swift_release();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t specialized __ServiceLocator.renderService.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  _BYTE v9[40];
  uint64_t v10[5];

  v10[3] = a3;
  v10[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v9);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v9, a2 + 40, &demangling cache variable for type metadata for __RenderService?);
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t specialized __ServiceLocator.init(engine:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ECSService;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int UseMetal;
  uint64_t result;
  _BYTE v32[40];
  __int128 v33;
  uint64_t v34;
  _UNKNOWN **v35;

  v2 = (_QWORD *)v1;
  *(_OWORD *)(v1 + 40) = 0u;
  v4 = v1 + 40;
  *(_OWORD *)(v1 + 176) = 0u;
  v5 = v1 + 176;
  *(_QWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 72) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_QWORD *)(v1 + 208) = 0;
  *(_WORD *)(v1 + 216) = 1;
  *(_QWORD *)(v1 + 16) = REEngineGetServiceLocator();
  *(_QWORD *)(v1 + 24) = a1;
  v6 = v1 + 16;
  swift_beginAccess();
  swift_unownedRetain();
  ECSService = REServiceLocatorGetECSService();
  if (!ECSService)
  {
    __break(1u);
    goto LABEL_15;
  }
  v8 = ECSService;
  v9 = MEMORY[0x22076FDA0](*(_QWORD *)v6);
  if (!v9)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v10 = v9;
  type metadata accessor for REEventBus();
  v11 = swift_allocObject();
  v12 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v12;
  RERetain();
  REEventBusSetSwiftObject();
  v2[4] = v11;
  v13 = type metadata accessor for SceneManager();
  swift_allocObject();
  v14 = SceneManager.init(coreECSManager:)(v8);
  v2[13] = v13;
  v2[14] = &protocol witness table for SceneManager;
  v2[10] = v14;
  v15 = MEMORY[0x22076FD58](v2[2]);
  if (!v15)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16 = v15;
  v17 = type metadata accessor for __REAssetManager();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_BYTE *)(v18 + 80) = 2;
  *(_WORD *)(v18 + 96) = 514;
  *(_QWORD *)(v18 + 88) = v16;
  v34 = v17;
  v35 = &protocol witness table for __REAssetManager;
  *(_QWORD *)&v33 = v18;
  outlined init with take of BindableDataInternal(&v33, (uint64_t)(v2 + 15));
  v19 = MEMORY[0x22076FE00](v2[2]);
  type metadata accessor for TimebaseService();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v2[20] = v20;
  type metadata accessor for LoadManager();
  swift_allocObject();
  v2[21] = LoadManager.init()();
  if (REEngineConfigurationGetUseRealityIO())
  {
    v21 = _typeByName(_:)();
    if (!v21)
    {
      v22 = dlopen("/System/Library/PrivateFrameworks/RealityIO.framework/RealityIO", 1);
      if (!v22)
        goto LABEL_19;
      v2[28] = v22;
      v21 = _typeByName(_:)();
      if (!v21)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v23 = swift_conformsToProtocol2();
    if (v23)
    {
      v24 = v23;
      v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v34 = v21;
      v35 = (_UNKNOWN **)v23;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
      v25(v21, v24);
      swift_beginAccess();
      outlined assign with take of Material?((uint64_t)&v33, v5, &demangling cache variable for type metadata for USDImportService?);
      swift_endAccess();
      swift_beginAccess();
      *(_BYTE *)(v6 + 201) = 1;
      goto LABEL_10;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_10:
  REServiceLocatorSetSwiftObject();
  v26 = MEMORY[0x22076FDDC](v2[2]);
  if (v26)
  {
    v27 = v26;
    v28 = type metadata accessor for RERenderManager();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v27;
    v34 = v28;
    v35 = &protocol witness table for RERenderManager;
    *(_QWORD *)&v33 = v29;
    outlined init with copy of __REAssetService((uint64_t)&v33, (uint64_t)v32);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Material?((uint64_t)v32, v4, &demangling cache variable for type metadata for __RenderService?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    swift_release();
    return (uint64_t)v2;
  }
  REEngineConfigurationClone();
  UseMetal = REEngineConfigurationGetUseMetal();
  RERelease();
  if (!UseMetal)
    return (uint64_t)v2;
LABEL_19:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static __ServiceLocator.__sharedEngine.getter()
{
  uint64_t Shared;
  uint64_t v1;

  Shared = REEngineGetShared();
  if (Shared)
  {
    v1 = Shared;
    if (one-time initialization token for lock != -1)
      swift_once();
    os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
    if (!static __ServiceLocator.sharedEngine || *((_QWORD *)static __ServiceLocator.sharedEngine + 3) != v1)
    {
      type metadata accessor for __Engine();
      swift_allocObject();
      static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v1);
      swift_release();
      specialized static SceneManager.customComponentType(_:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent);
      specialized static SceneManager.customComponentType(_:)(&type metadata for SceneOriginComponent, &protocol witness table for SceneOriginComponent);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  }
  else
  {
    static __ServiceLocator.sharedEngine = 0;
    swift_release();
  }
  return static __ServiceLocator.sharedEngine;
}

uint64_t specialized static __ServiceLocator.shared.getter()
{
  uint64_t result;
  uint64_t Default;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16[3];

  result = ((uint64_t (*)(void))specialized static __ServiceLocator.__sharedEngine.getter)();
  if (!result)
  {
    Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v3 = REEngineConfigurationClone();
      v4 = swift_allocObject();
      *(_QWORD *)(v4 + 16) = v3;
      swift_release_n();
      v2 = v4;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v5 = REEngineConfigurationClone();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v5;
      swift_release_n();
      v2 = v6;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v7 = REEngineConfigurationClone();
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v7;
      swift_release_n();
      v2 = v8;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v9 = REEngineConfigurationClone();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = v9;
      swift_release_n();
      v2 = v10;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v11 = REEngineConfigurationClone();
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v11;
      swift_release_n();
      v2 = v12;
    }
    v13 = REEngineConfigurationSetRenderFlags();
    if (!specialized static __ServiceLocator.__sharedEngine.getter(v13))
    {
      v16[0] = v2;
      v14 = specialized static __Engine.makeSharedEngine(_:)(v16);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v14;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent);
    result = specialized static SceneManager.customComponentType(_:)(&type metadata for SceneOriginComponent, &protocol witness table for SceneOriginComponent);
  }
  v15 = static __ServiceLocator.sharedEngine;
  if (!static __ServiceLocator.sharedEngine)
  {
    __break(1u);
    goto LABEL_23;
  }
  swift_beginAccess();
  result = v15[5];
  if (!result)
LABEL_23:
    __break(1u);
  return result;
}

uint64_t sub_21BE0D530@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t sub_21BE0D574(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_21BE0D5B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_unownedRetainStrong();
  *a1 = result;
  return result;
}

uint64_t sub_21BE0D608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 80;
  swift_beginAccess();
  return outlined init with copy of __REAssetService(v3, a2);
}

uint64_t sub_21BE0D658@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 120;
  swift_beginAccess();
  return outlined init with copy of __REAssetService(v3, a2);
}

uint64_t sub_21BE0D6B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 217);
  return result;
}

uint64_t sub_21BE0D6F4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 217) = v2;
  return result;
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return objc_opt_self();
}

uint64_t method lookup function for __ServiceLocator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __ServiceLocator.__engineRef.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __ServiceLocator.engine.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of __ServiceLocator.engine.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __ServiceLocator.eventService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of __ServiceLocator.usesMetal.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of __ServiceLocator.__renderService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of __ServiceLocator.__sceneService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of __ServiceLocator.__assetService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of __ServiceLocator.systemsArePausedInEditor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of __ServiceLocator.systemsArePausedInEditor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of __ServiceLocator.systemsArePausedInEditor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of __ServiceLocator.usingRealityIO.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of __ServiceLocator.usingRealityIO.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of __ServiceLocator.usingRealityIO.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t type metadata accessor for __ServiceLocator.EngineStartStopScope()
{
  return objc_opt_self();
}

uint64_t method lookup function for __ServiceLocator.EngineStartStopScope()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __ServiceLocator.EngineStartStopScope.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

__n128 Transform.init(matrix:)()
{
  __n128 result;
  __n128 v1;

  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

__n128 Transform.init(scale:rotation:translation:)(__n128 result)
{
  __n128 v1;

  if (one-time initialization token for identity != -1)
  {
    v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

void static Transform.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 28;
}

double static Transform.identity.getter()
{
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&static Transform.identity;
}

double Transform.init()()
{
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&_PromotedConst_6;
}

double Transform.matrix.getter(float a1, float32x4_t a2, double a3)
{
  return specialized simd_float4x4.init(translation:rotation:scale:)(a3, a2, a1);
}

__n128 key path setter for Transform.matrix : Transform(_OWORD *a1, _OWORD *a2)
{
  __n128 v3;
  __int128 v4;
  __n128 result;
  float32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  __n128 v9;

  v6 = *(float32x4_t *)a1;
  v7 = *((int32x4_t *)a1 + 1);
  v8 = *((int8x16_t *)a1 + 2);
  v3 = *((__n128 *)a1 + 3);
  v3.n128_u32[3] = 0;
  v9 = v3;
  REDecomposeMatrix();
  *(__n64 *)&v4 = simd_float4x4.scale.getter(v6, v7, v8);
  *a2 = v4;
  result = v9;
  a2[1] = 0u;
  a2[2] = v9;
  return result;
}

__n128 Transform.matrix.setter(float32x4_t a1, int32x4_t a2, int8x16_t a3, __n128 a4)
{
  _OWORD *v4;
  __int128 v6;
  __n128 result;
  __n128 v11;

  a4.n128_u32[3] = 0;
  v11 = a4;
  REDecomposeMatrix();
  *(__n64 *)&v6 = simd_float4x4.scale.getter(a1, a2, a3);
  *v4 = v6;
  result = v11;
  v4[1] = 0u;
  v4[2] = v11;
  return result;
}

void Transform.scale.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*Transform.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double Transform.rotation.getter(double a1, double a2)
{
  return a2;
}

void Transform.rotation.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*Transform.rotation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double Transform.translation.getter(double a1, double a2, double a3)
{
  return a3;
}

void Transform.translation.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*Transform.translation.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void Transform.__coreSRT.getter(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

void (*Transform.matrix.modify(_QWORD *a1))(int32x4_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  *(double *)&v4 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v1 + 32), *(float32x4_t *)(v1 + 16), COERCE_FLOAT(*(_OWORD *)v1));
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  *((_OWORD *)v3 + 3) = v7;
  return Transform.matrix.modify;
}

void Transform.matrix.modify(int32x4_t **a1)
{
  float32x4_t *v1;

  v1 = (float32x4_t *)*a1;
  Transform.matrix.setter(*(float32x4_t *)*a1, (*a1)[1], (int8x16_t)(*a1)[2], (__n128)(*a1)[3]);
  free(v1);
}

double Transform.init(pitch:yaw:roll:)()
{
  simd_float3x3 v0;

  REConvertIntrinsicEulersToMatrices3x3();
  v0.columns[0] = 0u;
  v0.columns[1] = 0u;
  v0.columns[2] = 0u;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    v0.columns[2] = 0u;
    v0.columns[1] = 0u;
    v0.columns[0] = 0u;
  }
  simd_quaternion(v0);
  return *(double *)&_PromotedConst_6;
}

uint64_t Transform.hash(into:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  specialized SIMD.hash(into:)(a1, a2);
  specialized SIMD.hash(into:)(a1, a3);
  return specialized SIMD.hash(into:)(a1, a4);
}

Swift::Int Transform.hashValue.getter(__n128 a1, __n128 a2, __n128 a3)
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v7, a1);
  specialized SIMD.hash(into:)(v7, a2);
  specialized SIMD.hash(into:)(v7, a3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance Transform@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = RETransformComponentGetLocalSRT();
  if (one-time initialization token for identity != -1)
  {
    v7 = v4;
    v8 = v3;
    v6 = v5;
    result = swift_once();
    v5 = v6;
    v4 = v7;
    v3 = v8;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

__n128 static Transform.__fromCore(_:)()
{
  __n128 result;
  __n128 v1;

  RETransformComponentGetLocalSRT();
  if (one-time initialization token for identity != -1)
  {
    v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance Transform()
{
  RETransformComponentSetLocalSRT();
  return RENetworkMarkComponentDirty();
}

uint64_t Transform.__toCore(_:)()
{
  RETransformComponentSetLocalSRT();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance Transform(_DWORD *a1@<X8>)
{
  *a1 = 28;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Transform()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  _BYTE v5[72];

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Transform(uint64_t a1)
{
  __n128 *v1;
  __n128 v4;
  __n128 v5;

  v4 = v1[1];
  v5 = v1[2];
  specialized SIMD.hash(into:)(a1, *v1);
  specialized SIMD.hash(into:)(a1, v4);
  return specialized SIMD.hash(into:)(a1, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Transform()
{
  __n128 *v0;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  _BYTE v5[72];

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Transform(__n128 *a1, __n128 *a2)
{
  return specialized static Transform.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

__n128 static Transform.__fromCore(_:)(__n128 *a1)
{
  __n128 result;
  __n128 v2;

  result = *a1;
  if (one-time initialization token for identity != -1)
  {
    v2 = *a1;
    swift_once();
    return v2;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Transform.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Transform.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Transform.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Transform.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Transform.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Transform.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Transform.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6E6F697461746F72;
  if (v2 != 1)
  {
    v5 = 0x74616C736E617274;
    v4 = 0xEB000000006E6F69;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656C616373;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Transform.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F697461746F72;
  if (*v0 != 1)
    v1 = 0x74616C736E617274;
  if (*v0)
    return v1;
  else
    return 0x656C616373;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Transform.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Transform.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Transform.CodingKeys()
{
  lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Transform.CodingKeys()
{
  lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Transform.init(from:)(_QWORD *a1)
{
  return specialized Transform.init(from:)(a1);
}

uint64_t Transform.encode(to:)(_QWORD *a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  char v15;

  v11 = a3;
  v12 = a4;
  v13 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Transform.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = v13;
  v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    v14 = v12;
    v15 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14 = v11;
    v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4168]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Transform@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = specialized Transform.init(from:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Transform(_QWORD *a1)
{
  __n128 *v1;

  return Transform.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t specialized static Transform.== infix(_:_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  float v9;
  float v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  BOOL v16;
  float v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;

  v6 = 0;
  while (1)
  {
    v23 = a1;
    v9 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v24 = a4;
    v10 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v7 = v9 == v10;
    if (v6 == 2)
      break;
    while (1)
    {
      ++v6;
      if (v7)
        break;
      v7 = 0;
      result = 0;
      if (v6 == 2)
        return result;
    }
  }
  if (v9 != v10)
    return 0;
  v11 = 0;
  v12 = 1;
  while (!v12)
  {
    v12 = 0;
    result = 0;
    if (v11 == 3)
      return result;
LABEL_10:
    ++v11;
  }
  v21 = a2;
  v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
  v22 = a5;
  v14 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
  v12 = v13 == v14;
  if (v11 != 3)
    goto LABEL_10;
  if (v13 == v14)
  {
    v15 = 0;
    while (1)
    {
      v19 = a3;
      v17 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
      v20 = a6;
      v18 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
      v16 = v17 == v18;
      if (v15 == 2)
        break;
      while (1)
      {
        ++v15;
        if (v16)
          break;
        if (v15 == 2)
          return 0;
        v16 = 0;
      }
    }
    if (v17 == v18)
      return 1;
  }
  return 0;
}

uint64_t specialized Transform.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD v8[3];
  __int128 v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<Transform.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for identity != -1)
    swift_once();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v10 = 0;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v8[2] = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    v10 = 1;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v8[1] = v9;
    v10 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v8[0] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform.CodingKeys, &type metadata for Transform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform.CodingKeys, &type metadata for Transform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform.CodingKeys, &type metadata for Transform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Transform.CodingKeys, &type metadata for Transform.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

void sub_21BE0EA54(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v3 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(a1 + 32), *(float32x4_t *)(a1 + 16), COERCE_FLOAT(*(_OWORD *)a1));
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

double sub_21BE0EA84(_OWORD *a1, _OWORD *a2)
{
  double result;

  *(_QWORD *)&result = key path setter for Transform.matrix : Transform(a1, a2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for Transform()
{
  return &type metadata for Transform;
}

uint64_t storeEnumTagSinglePayload for Transform.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BE0EB24 + 4 * byte_21BE7F755[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BE0EB58 + 4 * byte_21BE7F750[v4]))();
}

uint64_t sub_21BE0EB58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE0EB60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE0EB68);
  return result;
}

uint64_t sub_21BE0EB74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE0EB7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BE0EB80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE0EB88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Transform.CodingKeys()
{
  return &type metadata for Transform.CodingKeys;
}

double specialized static Transform.* infix(_:_:)(float32x4_t a1, double a2, double a3, float32x4_t a4)
{
  double result;
  float32x4_t v5;
  float32x4_t v6;

  if (one-time initialization token for identity != -1)
  {
    v5 = a1;
    v6 = a4;
    swift_once();
    a1 = v5;
    a4 = v6;
  }
  *(_QWORD *)&result = vmulq_f32(a1, a4).u64[0];
  return result;
}

unint64_t specialized Transform.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Transform.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t __VideoResource.currentViewingMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t SceneNullable;
  uint64_t v17;
  uint64_t v18;
  int CurrentViewingMode;
  char v20;
  char *v21;
  uint64_t v22;

  v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v22 = MEMORY[0x24BEE4AF8];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_14;
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      MEMORY[0x220769770](i, v4);
    else
      swift_retain();
    Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v9 = v22;
LABEL_15:
  *v3 = v9;
  swift_bridgeObjectRelease();
  v10 = *v3;
  if ((unint64_t)*v3 >> 62)
    goto LABEL_38;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v11)
  {
    v12 = v10 & 0xC000000000000001;
    v13 = 4;
    v21 = a1;
    while (1)
    {
      v14 = v13 - 4;
      if (!v12)
        break;
      MEMORY[0x220769770](v13 - 4, v10);
      v15 = v13 - 3;
      if (__OFADD__(v14, 1))
        goto LABEL_37;
LABEL_26:
      if (!swift_weakLoadStrong())
        goto LABEL_19;
      REVideoComponentGetComponentType();
      if (!REEntityGetComponentByClass() || !swift_weakLoadStrong())
      {
        swift_release();
LABEL_19:
        swift_release();
        goto LABEL_20;
      }
      SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        v17 = SceneNullable;
        if ((id)RESceneGetSwiftObject())
        {
          swift_unknownObjectRelease();
        }
        else
        {
          type metadata accessor for Scene();
          v18 = swift_allocObject();
          *(_OWORD *)(v18 + 24) = 0u;
          *(_OWORD *)(v18 + 40) = 0u;
          *(_QWORD *)(v18 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(_QWORD *)(v18 + 104) = 0;
          *(_OWORD *)(v18 + 88) = 0u;
          *(_OWORD *)(v18 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v18 + 216) = 0u;
          *(_OWORD *)(v18 + 200) = 0u;
          *(_OWORD *)(v18 + 184) = 0u;
          *(_OWORD *)(v18 + 168) = 0u;
          *(_OWORD *)(v18 + 152) = 0u;
          *(_OWORD *)(v18 + 136) = 0u;
          *(_OWORD *)(v18 + 120) = 0u;
          RERetain();
          *(_QWORD *)(v18 + 16) = v17;
          RESceneSetSwiftObject();
          a1 = v21;
          swift_release();
        }
        v12 = v10 & 0xC000000000000001;
        swift_release();
        CurrentViewingMode = REVideoComponentGetCurrentViewingMode();
        swift_release();
        swift_release();
        if (CurrentViewingMode == 1)
        {
          v20 = 0;
          goto LABEL_40;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        v12 = v10 & 0xC000000000000001;
      }
LABEL_20:
      ++v13;
      if (v15 == v11)
        goto LABEL_39;
    }
    swift_retain();
    v15 = v13 - 3;
    if (!__OFADD__(v14, 1))
      goto LABEL_26;
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_39:
  v20 = 2;
LABEL_40:
  result = swift_bridgeObjectRelease();
  *a1 = v20;
  return result;
}

uint64_t __VideoResource.currentImageSize.getter()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  uint64_t Strong;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;

  v1 = (unint64_t *)(v0 + 24);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 24);
  v15 = MEMORY[0x24BEE4AF8];
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    *(double *)&result = COERCE_DOUBLE(_CocoaArrayWrapper.endIndex.getter());
    v3 = result;
    if (*(double *)&result != 0.0)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRetain());
  if (!v3)
    goto LABEL_14;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
      MEMORY[0x220769770](i, v2);
    else
      swift_retain();
    Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v7 = v15;
LABEL_15:
  *v1 = v7;
  swift_bridgeObjectRelease();
  v8 = *v1;
  if (v8 >> 62)
    goto LABEL_33;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v9)
  {
    v10 = 0;
    while ((v8 & 0xC000000000000001) != 0)
    {
      MEMORY[0x220769770](v10, v8);
      v11 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_31;
LABEL_26:
      if (swift_weakLoadStrong())
      {
        REVideoComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REVideoComponentGetCurrentImageSize();
          if (v12 != 0.0 || v13 != 0.0)
          {
            v14 = v12;
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            *(double *)&result = v14;
            return result;
          }
        }
        swift_release();
      }
      swift_release();
      ++v10;
      if (v11 == v9)
        goto LABEL_34;
    }
    if (v10 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_32;
    swift_retain();
    v11 = v10 + 1;
    if (!__OFADD__(v10, 1))
      goto LABEL_26;
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_34:
  swift_bridgeObjectRelease();
  *(double *)&result = 0.0;
  return result;
}

uint64_t static __VideoResource.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  if (!(id)REAssetGetSwiftObject())
  {
    type metadata accessor for __VideoResource();
    v2 = swift_allocObject();
    v3 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v2 + 16) = v1;
    *(_QWORD *)(v2 + 24) = v3;
    RERetain();
    REAssetSetSwiftObject();
  }
  return swift_dynamicCastClassUnconditional();
}

uint64_t type metadata accessor for __VideoResource()
{
  return objc_opt_self();
}

uint64_t __VideoResource.Weak.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t __VideoResource.addEntity(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;

  v3 = (_QWORD *)(v1 + 24);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v15 = MEMORY[0x24BEE4AF8];
  if (v4 >> 62)
  {
LABEL_18:
    swift_retain();
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      v14 = v3;
      v3 = 0;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0)
        {
          MEMORY[0x220769770](v3, v4);
          v6 = (char *)v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_15:
            __break(1u);
LABEL_16:
            v3 = v14;
            v11 = v15;
            goto LABEL_20;
          }
        }
        else
        {
          if ((unint64_t)v3 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_18;
          }
          swift_retain();
          v6 = (char *)v3 + 1;
          if (__OFADD__(v3, 1))
            goto LABEL_15;
        }
        Strong = swift_weakLoadStrong();
        swift_release();
        if (!Strong
          || (v8 = swift_weakLoadStrong()) != 0
          && (v9 = *(_QWORD *)(v8 + 16), v10 = *(_QWORD *)(a1 + 16), swift_release(), v9 == v10))
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        v3 = (_QWORD *)((char *)v3 + 1);
        if (v6 == (char *)v5)
          goto LABEL_16;
      }
    }
  }
  v11 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  swift_release();
  *v3 = v11;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __VideoResource.Weak<Entity>);
  swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  v12 = swift_beginAccess();
  MEMORY[0x220768F0C](v12);
  if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t __VideoResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __VideoResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t static __VideoResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  if (a3)
    v6 = a3;
  else
    v6 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v7 = a3;
  v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v17);
  v9 = v18;
  v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
  swift_retain();
  v11(v9, v10);
  v12 = (void *)MEMORY[0x220768C3C](a1, a2);
  v13 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v13)
  {
    type metadata accessor for __VideoResource();
    a2 = swift_allocObject();
    v14 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v14;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
  }
  else
  {
    lazy protocol witness table accessor for type __VideoResource.LoadError and conformance __VideoResource.LoadError();
    swift_allocError();
    *v15 = a1;
    v15[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  swift_release();
  return a2;
}

void __VideoResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t __VideoResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

void protocol witness for RequestLoadable.networkSendBlockingCategory.getter in conformance __VideoResource(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

unint64_t lazy protocol witness table accessor for type __VideoResource.LoadError and conformance __VideoResource.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __VideoResource.LoadError and conformance __VideoResource.LoadError;
  if (!lazy protocol witness table cache variable for type __VideoResource.LoadError and conformance __VideoResource.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __VideoResource.LoadError, &unk_24DFDAD88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __VideoResource.LoadError and conformance __VideoResource.LoadError);
  }
  return result;
}

uint64_t method lookup function for __VideoResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __VideoResource.coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t type metadata completion function for __VideoResource.Weak()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for __VideoResource.Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __VideoResource.Weak);
}

void *type metadata accessor for __VideoResource.LoadError()
{
  return &unk_24DFDAD88;
}

uint64_t AudioResource.init(fromCore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE5610], v4);
  v8 = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    RERetain();
    *(_QWORD *)(v2 + 16) = a1;
    REAssetSetSwiftObject();
    if ((REAssetHandleIsLoaded() & 1) == 0)
      REAssetHandleLoadNow();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AudioResource.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for audio != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.audio);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_21B9AA000, v3, v4, "[API/RealityKit] AudioResource.deinit() for REAssetID: %llu", v5, 0xCu);
    MEMORY[0x220772F44](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  REAssetSetSwiftObject();
  RERelease();
  return v1;
}

uint64_t AudioResource.mixGroupName.getter()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)REAudioFileAssetGetMixGroupName();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t AudioResource.inputMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REAudioFileAssetGetInputMode();
  if (result >= 3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = 0x20001u >> (8 * result);
  }
  return result;
}

uint64_t AudioResource.inputMode.setter()
{
  return REAudioFileAssetSetInputMode();
}

uint64_t (*AudioResource.inputMode.modify(_QWORD *a1))()
{
  uint64_t v1;
  _BYTE *v2;
  unsigned int InputMode;
  uint64_t (*result)();

  *a1 = *(_QWORD *)(v1 + 16);
  v2 = a1 + 1;
  InputMode = REAudioFileAssetGetInputMode();
  if (InputMode >= 3)
  {
    result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v2 = 0x20001u >> (8 * InputMode);
    return AudioResource.inputMode.modify;
  }
  return result;
}

uint64_t AudioResource.inputMode.modify()
{
  return REAudioFileAssetSetInputMode();
}

void static AudioResource.supportedChannelLayoutTag(for:)(void *a1)
{
  specialized static AudioResource.supportedChannelLayoutTag(for:)(a1);
}

uint64_t static AudioResource.numberOfChannels(in:)(uint64_t result)
{
  if ((_DWORD)result && (_DWORD)result != 1668116578)
    return (unsigned __int16)result;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AudioResource.__allocating_init(fromCore:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AudioResource.init(fromCore:)(a1);
  return v2;
}

uint64_t AudioResource.__deallocating_deinit()
{
  AudioResource.deinit();
  return swift_deallocClassInstance();
}

void key path getter for AudioResource.mixGroupName : AudioResource(uint64_t *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (id)REAudioFileAssetGetMixGroupName();
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  *a1 = v4;
  a1[1] = v6;
}

uint64_t key path setter for AudioResource.mixGroupName : AudioResource(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    String.utf8CString.getter();
  REAudioFileAssetSetMixGroupName();
  return swift_unknownObjectRelease();
}

uint64_t key path getter for AudioResource.inputMode : AudioResource@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REAudioFileAssetGetInputMode();
  if (result >= 3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = 0x20001u >> (8 * result);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource(uint64_t *a1, uint64_t *a2)
{
  return specialized static AudioResource.== infix(_:_:)(*a1, *a2);
}

uint64_t static AudioResource.defaultSupportedChannelLayoutTag(channelCount:)(int a1)
{
  _BYTE *v2;

  if (a1 == 1)
    return 6553601;
  if (a1 == 2)
    return 6619138;
  lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
  swift_allocError();
  *v2 = 0;
  return swift_willThrow();
}

uint64_t protocol witness for LoadableResource.init(fromCore:) in conformance AudioResource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(char a1)
{
  uint64_t v2;
  uint64_t *v3;

  if ((a1 & 1) != 0)
    return swift_continuation_throwingResume();
  lazy protocol witness table accessor for type AudioResource.Error and conformance AudioResource.Error();
  v2 = swift_allocError();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v3 = v2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t specialized static AudioResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char IsEqual;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  unsigned __int8 v30[8];
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  char v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  char v44;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
LABEL_7:
    LOBYTE(v20) = 1;
    return v20 & 1;
  }
  type metadata accessor for AudioFileResource();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = v2;
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      if (*(_QWORD *)(v3 + 16) != *(_QWORD *)(v4 + 16))
      {
        swift_retain();
        swift_retain();
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v36);
        v5 = v36;
        v6 = v38;
        v7 = v39;
        v8 = v40;
        v9 = v41;
        v28 = v42;
        v29 = v37;
        v27 = v43;
        v26 = v44;
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v36);
        v10 = v36;
        v11 = v37;
        v12 = v38;
        v13 = v39;
        v14 = v40;
        v15 = v42;
        v16 = v43;
        v17 = v44;
        v25 = v41;
        v36 = v5;
        v37 = v29;
        v38 = v6;
        v39 = v7;
        v40 = v8;
        v41 = v9;
        v42 = v28;
        v43 = v27;
        v44 = v26;
        v30[0] = v10;
        v30[1] = v11;
        v30[2] = v12;
        v30[3] = v13;
        v31 = v14;
        v32 = v25;
        v33 = v15;
        v34 = v16;
        v35 = v17;
        v18 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(&v36, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          LOBYTE(v20) = 0;
          goto LABEL_14;
        }
        IsEqual = REAudioFileAssetIsEqual();
LABEL_11:
        LOBYTE(v20) = IsEqual;
LABEL_14:
        swift_release();
        swift_release();
        return v20 & 1;
      }
      goto LABEL_7;
    }
  }
  type metadata accessor for AudioFileGroupResource();
  v20 = swift_dynamicCastClass();
  if (v20)
  {
    v21 = swift_dynamicCastClass();
    if (v21)
    {
      v22 = *(_QWORD *)(v20 + 24);
      v23 = *(_QWORD *)(v21 + 24);
      swift_retain();
      swift_retain();
      IsEqual = specialized static Array<A>.== infix(_:_:)(v22, v23);
      goto LABEL_11;
    }
    LOBYTE(v20) = 0;
  }
  return v20 & 1;
}

uint64_t specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[26] = a2;
  v3[27] = a3;
  v3[25] = a1;
  v3[28] = type metadata accessor for MainActor();
  v3[29] = static MainActor.shared.getter();
  v3[30] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[31] = v4;
  return swift_task_switch();
}

uint64_t specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 10));
  v0[32] = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(v0 + 10);
  v2 = static MainActor.shared.getter();
  v0[33] = v2;
  if (v2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v2 = v0[26];
  v1 = v0[27];
  v3 = v0[25];
  v0[2] = v0;
  v0[3] = specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:);
  v4 = swift_continuation_init();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  v5[5] = v4;
  v0[14] = partial apply for closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:);
  v0[15] = v5;
  v6 = MEMORY[0x24BDAC760];
  v0[10] = MEMORY[0x24BDAC760];
  v0[11] = 1107296256;
  v0[12] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v0[13] = &block_descriptor_49;
  v7 = _Block_copy(v0 + 10);
  v8 = _Block_copy(v7);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v0[16] = v6;
  v0[20] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v0[21] = v9;
  v0[17] = 1107296256;
  v0[18] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v0[19] = &block_descriptor_8_1;
  v10 = _Block_copy(v0 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v10);
  _Block_release(v7);
  swift_release();
  REAssetLoadRequestAddAsset();
  return swift_continuation_await();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v1;
  if (v1)
    swift_willThrow();
  else
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized static AudioResource.supportedChannelLayoutTag(for:)(void *a1)
{
  id v2;
  void *v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v8;
  _BYTE *v9;

  v2 = objc_msgSend(a1, sel_channelLayout);
  if (v2)
  {
    v3 = v2;
    if ((objc_msgSend(v2, sel_layoutTag) & 0xFFFF0000) == 0x930000)
    {
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *v4 = 0;
LABEL_14:
      swift_willThrow();

      return;
    }
    v6 = objc_msgSend(v3, sel_layoutTag);
    if (v6 != 1668116578 && v6 != 0)
    {
      if (objc_msgSend(a1, sel_channelCount) == (unsigned __int16)v6)
      {
        objc_msgSend(v3, sel_layoutTag);

        return;
      }
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *v8 = 1;
      goto LABEL_14;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = objc_msgSend(a1, sel_channelCount);
    if (v5 != 1 && v5 != 2)
    {
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *v9 = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_21BE109A0()
{
  return REAudioFileAssetSetInputMode();
}

uint64_t type metadata accessor for AudioResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of AudioResource.mixGroupName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AudioResource.inputMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AudioResource.inputMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AudioResource.inputMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_21BE10A2C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(char a1)
{
  return closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(a1);
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t sub_21BE10A74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void static ModelDebugOptionsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 1006;
}

void ModelDebugOptionsComponent.visualizationMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

RealityKit::ModelDebugOptionsComponent __swiftcall ModelDebugOptionsComponent.init(visualizationMode:)(RealityKit::ModelDebugOptionsComponent visualizationMode)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)visualizationMode.visualizationMode;
  return visualizationMode;
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional static ModelDebugOptionsComponent.__fromCore(_:)@<W0>(_BYTE *a1@<X8>)
{
  Swift::String v2;
  RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional result;
  char v4;
  char v5;

  REDebugMeshComponentGetShaderDebugMode();
  v2._countAndFlagsBits = String.init(cString:)();
  result.value = ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(v2).value;
  v4 = v5;
  if (v5 == 21)
    v4 = 0;
  *a1 = v4;
  return result;
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional __swiftcall ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 3;
  switch(v3)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v5 = 1;
      goto LABEL_5;
    case 2:
      v5 = 2;
LABEL_5:
      v6 = v5;
      break;
    case 3:
      break;
    case 4:
      v6 = 4;
      break;
    case 5:
      v6 = 5;
      break;
    case 6:
      v6 = 6;
      break;
    case 7:
      v6 = 7;
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    default:
      v6 = 21;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t ModelDebugOptionsComponent.__toCore(_:)()
{
  uint64_t v0;
  char v2;

  REDebugMeshComponentReset();
  if (ModelDebugOptionsComponent.VisualizationMode.rawValue.getter() == 1701736270 && v0 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REDebugMeshComponentSetShaderDebugMode();
      swift_release();
    }
  }
  return RENetworkMarkComponentDirty();
}

uint64_t ModelDebugOptionsComponent.VisualizationMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BE10D18 + 4 * byte_21BE7FBC5[*v0]))(1701736270, 0xE400000000000000);
}

uint64_t sub_21BE10D18()
{
  return 0x4E64657669726544;
}

uint64_t sub_21BE10D3C()
{
  return 0x5464657669726544;
}

unint64_t sub_21BE10D60()
{
  return 0xD000000000000010;
}

unint64_t sub_21BE10E64()
{
  return 0xD000000000000019;
}

unint64_t sub_21BE10E80()
{
  return 0xD000000000000013;
}

unint64_t sub_21BE10E98()
{
  return 0xD000000000000014;
}

unint64_t sub_21BE10ECC()
{
  return 0xD000000000000016;
}

uint64_t sub_21BE10EE4()
{
  return 0x676E697070696C43;
}

void sub_21BE10EFC()
{
  JUMPOUT(0x21BE10F10);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelDebugOptionsComponent.VisualizationMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelDebugOptionsComponent.VisualizationMode()
{
  Hasher.init(_seed:)();
  ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModelDebugOptionsComponent.VisualizationMode()
{
  ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelDebugOptionsComponent.VisualizationMode()
{
  Hasher.init(_seed:)();
  ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ModelDebugOptionsComponent.VisualizationMode(Swift::String *a1)
{
  return ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ModelDebugOptionsComponent.VisualizationMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode;
  if (!lazy protocol witness table cache variable for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ModelDebugOptionsComponent.VisualizationMode, &type metadata for ModelDebugOptionsComponent.VisualizationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode);
  }
  return result;
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional protocol witness for static Component.__fromCore(_:) in conformance ModelDebugOptionsComponent@<W0>(_BYTE *a1@<X8>)
{
  Swift::String v2;
  RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional result;
  char v4;
  char v5;

  REDebugMeshComponentGetShaderDebugMode();
  v2._countAndFlagsBits = String.init(cString:)();
  result.value = ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(v2).value;
  v4 = v5;
  if (v5 == 21)
    v4 = 0;
  *a1 = v4;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance ModelDebugOptionsComponent(_DWORD *a1@<X8>)
{
  *a1 = 1006;
}

ValueMetadata *type metadata accessor for ModelDebugOptionsComponent()
{
  return &type metadata for ModelDebugOptionsComponent;
}

uint64_t getEnumTagSinglePayload for ModelDebugOptionsComponent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelDebugOptionsComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_21BE11200 + 4 * byte_21BE7FBDF[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_21BE11234 + 4 * byte_21BE7FBDA[v4]))();
}

uint64_t sub_21BE11234(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE1123C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE11244);
  return result;
}

uint64_t sub_21BE11250(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE11258);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_21BE1125C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE11264(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelDebugOptionsComponent.VisualizationMode()
{
  return &type metadata for ModelDebugOptionsComponent.VisualizationMode;
}

uint64_t PlayAudioAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t PlayAudioAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of ActionEntityResolution();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*PlayAudioAction.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAudioAction.audioResourceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlayAudioAction.audioResourceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*PlayAudioAction.audioResourceName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PlayAudioAction.gain.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void PlayAudioAction.gain.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*PlayAudioAction.gain.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAudioAction.controlPlayback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t PlayAudioAction.controlPlayback.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

_BYTE *(*PlayAudioAction.controlPlayback.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 48);
  return OrbitEntityAction.orientToPath.modify;
}

uint64_t (*PlayAudioAction.useControlledPlayback.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAudioAction.animatedValueType.getter()
{
  return 0;
}

uint64_t PlayAudioAction.init(targetEntity:audioResourceName:gain:useControlledPlayback:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v6;

  v6 = *(_BYTE *)(result + 16);
  *(_OWORD *)a5 = *(_OWORD *)result;
  *(_BYTE *)(a5 + 16) = v6;
  *(_QWORD *)(a5 + 24) = a2;
  *(_QWORD *)(a5 + 32) = a3;
  *(double *)(a5 + 40) = a6;
  *(_BYTE *)(a5 + 48) = a4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlayAudioAction.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BE11418 + 4 * byte_21BE7FD30[*v0]))(0x6E45746567726174, 0xEC00000079746974);
}

unint64_t sub_21BE11418()
{
  return 0xD000000000000011;
}

uint64_t sub_21BE11434()
{
  return 1852399975;
}

unint64_t sub_21BE11444()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlayAudioAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlayAudioAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlayAudioAction.CodingKeys()
{
  lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayAudioAction.CodingKeys()
{
  lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PlayAudioAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlayAudioAction.CodingKeys>);
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v9 = v1[3];
  v14 = v1[4];
  v15 = v9;
  v13[3] = *((unsigned __int8 *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v19 = v7;
  v20 = v6;
  v21 = v8;
  v18 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v10 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v10)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v5, v3);
  v12 = v16;
  LOBYTE(v19) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v19) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v19) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

unint64_t lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAudioAction.CodingKeys, &unk_24DFDB1F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAudioAction.CodingKeys, &unk_24DFDB1F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAudioAction.CodingKeys, &unk_24DFDB1F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAudioAction.CodingKeys, &unk_24DFDB1F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

uint64_t PlayAudioAction.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlayAudioAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24 = a2;
  v10 = v26;
  v9 = v27;
  v11 = v28;
  v29 = v28;
  LOBYTE(v26) = 1;
  outlined copy of ActionEntityResolution();
  v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v14 = v13;
  v21 = v12;
  v23 = v11;
  LOBYTE(v26) = 2;
  swift_bridgeObjectRetain();
  v22 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v16 = v15;
  v20 = v14;
  LOBYTE(v26) = 3;
  LOBYTE(v14) = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v11) = v23;
  outlined copy of ActionEntityResolution();
  outlined consume of ActionEntityResolution();
  v18 = v24;
  *v24 = v10;
  v18[1] = v9;
  *((_BYTE *)v18 + 16) = v11;
  v19 = v20;
  v18[3] = v21;
  v18[4] = v19;
  v18[5] = v16;
  *((_BYTE *)v18 + 48) = v14 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of ActionEntityResolution();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlayAudioAction@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PlayAudioAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlayAudioAction(_QWORD *a1)
{
  return PlayAudioAction.encode(to:)(a1);
}

uint64_t sub_21BE11A10@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 48);
  return result;
}

_BYTE *sub_21BE11A1C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 48) = *result;
  return result;
}

uint64_t destroy for PlayAudioAction()
{
  outlined consume of ActionEntityResolution();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlayAudioAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlayAudioAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t assignWithTake for PlayAudioAction(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAudioAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAudioAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAudioAction()
{
  return &type metadata for PlayAudioAction;
}

uint64_t storeEnumTagSinglePayload for PlayAudioAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BE11CB0 + 4 * byte_21BE7FD39[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BE11CE4 + 4 * byte_21BE7FD34[v4]))();
}

uint64_t sub_21BE11CE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE11CEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE11CF4);
  return result;
}

uint64_t sub_21BE11D00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE11D08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BE11D0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE11D14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PlayAudioAction.CodingKeys()
{
  return &unk_24DFDB1F0;
}

void PlayAudioActionHandler.actionStarted(event:)(uint64_t *a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  _BYTE v20[7];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[31];

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 24);
  *(_DWORD *)v20 = *(_DWORD *)((char *)a1 + 25);
  *(_DWORD *)&v20[3] = *((_DWORD *)a1 + 7);
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = *((_BYTE *)a1 + 56);
  v17 = v2;
  v18 = *(_OWORD *)(a1 + 1);
  v19 = v3;
  v21 = v4;
  v22 = v5;
  v23 = v6;
  v24 = v7;
  v8 = *(_OWORD *)((char *)a1 + 57);
  v9 = *(_OWORD *)((char *)a1 + 73);
  v10 = *(_OWORD *)((char *)a1 + 89);
  v28 = *(_OWORD *)((char *)a1 + 105);
  v27 = v10;
  v26 = v9;
  v25 = v8;
  v11 = *(_OWORD *)((char *)a1 + 121);
  v12 = *(_OWORD *)((char *)a1 + 137);
  v13 = *(_OWORD *)((char *)a1 + 153);
  v32 = *(_OWORD *)((char *)a1 + 169);
  v31 = v13;
  v30 = v12;
  v29 = v11;
  v14 = *(_OWORD *)((char *)a1 + 185);
  v15 = *(_OWORD *)((char *)a1 + 201);
  v16 = *(_OWORD *)((char *)a1 + 217);
  *(_OWORD *)&v35[15] = *(_OWORD *)(a1 + 29);
  *(_OWORD *)v35 = v16;
  v34 = v15;
  v33 = v14;
  PlayAudioActionHandler.prepareAudio(event:)((uint64_t)&v17);
  if (*(_QWORD *)v1)
  {
    MEMORY[0x22076B990](*(_QWORD *)(*(_QWORD *)v1 + 32), *(_QWORD *)(*(_QWORD *)v1 + 48));
    RENetworkMarkComponentDirty();
    if ((v7 & 1) == 0)
    {
      AudioPlaybackController.play()();
      return;
    }
  }
  else if ((v7 & 1) == 0)
  {
    return;
  }
  v1[8] = 1;
}

uint64_t PlayAudioActionHandler.prepareAudio(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  ValueMetadata *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t SceneNullable;
  uint64_t v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  ValueMetadata *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  double v57;
  ValueMetadata *v58;
  unint64_t v59;
  char v60;
  ValueMetadata *v61;
  unint64_t v62;

  v2 = v1;
  v3 = *(ValueMetadata **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = *(double *)(a1 + 48);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v12._countAndFlagsBits = 0x2072656C646E6148;
    v12._object = (void *)0xEC00000020726F66;
    String.append(_:)(v12);
    v61 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v13._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0xD000000000000030;
    v14._object = (void *)0x800000021BE85620;
    String.append(_:)(v14);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if ((v5 & 1) == 0)
  {
    v58 = v3;
    swift_bridgeObjectRetain();
    v15 = Entity.subscript.getter((uint64_t *)&v58);
    outlined consume of ActionEntityResolution();
    if (v15)
      goto LABEL_12;
LABEL_20:
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    v61 = v58;
    v62 = v59;
    v25._countAndFlagsBits = 0x2072656C646E6148;
    v25._object = (void *)0xEC00000020726F66;
    String.append(_:)(v25);
    v58 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000021;
    v27._object = (void *)0x800000021BE94A50;
    String.append(_:)(v27);
    v58 = v3;
    v59 = v4;
    v60 = v5;
    _print_unlocked<A, B>(_:_:)();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    specialized static AnimationLogger.logError(_:)(v61, v62);
LABEL_25:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_20;
  }
  v10 = SceneNullable;
  v11 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v11)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v10);
  }
  v15 = Scene.findEntity(named:)();
  swift_release();
  outlined consume of ActionEntityResolution();
  if (!v15)
    goto LABEL_20;
LABEL_12:
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((unint64_t *)&v58);
  v16 = v58;
  swift_release();
  if (!v16)
  {
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(76);
    v29._countAndFlagsBits = 0x2072656C646E6148;
    v29._object = (void *)0xEC00000020726F66;
    String.append(_:)(v29);
    v61 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v30._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0xD00000000000003ALL;
    v31._object = (void *)0x800000021BE94A80;
    String.append(_:)(v31);
    REEntityGetName();
    v32._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 11815;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    specialized static AnimationLogger.logError(_:)(v58, v59);
LABEL_24:
    swift_release();
    goto LABEL_25;
  }
  if (!v16[1].Kind)
  {
LABEL_23:
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(110);
    v34._countAndFlagsBits = 0x2072656C646E6148;
    v34._object = (void *)0xEC00000020726F66;
    String.append(_:)(v34);
    v61 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v35._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0xD00000000000001DLL;
    v36._object = (void *)0x800000021BE94AC0;
    String.append(_:)(v36);
    v37._countAndFlagsBits = v6;
    v37._object = v7;
    String.append(_:)(v37);
    v38._countAndFlagsBits = 0xD000000000000028;
    v38._object = (void *)0x800000021BE94AE0;
    String.append(_:)(v38);
    REEntityGetName();
    v39._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._object = (void *)0x800000021BE94B10;
    v40._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v40);
    v61 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AudioResource].Keys);
    lazy protocol witness table accessor for type [String : AudioResource].Keys and conformance [A : B].Keys();
    lazy protocol witness table accessor for type String and conformance String();
    v41 = Sequence<>.joined(separator:)();
    v43 = v42;
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    specialized static AnimationLogger.logError(_:)(v58, v59);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v6, (uint64_t)v7);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v19 = *((_QWORD *)v16[3].Description + v17);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!*(_QWORD *)v2)
    goto LABEL_32;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 40) + 16) == *(_QWORD *)(v19 + 16))
  {
LABEL_31:
    swift_release();
    swift_release();
    return swift_release();
  }
  type metadata accessor for AudioFileResource();
  v20 = swift_dynamicCastClass();
  if (v20 && (v21 = v20, (v22 = swift_dynamicCastClass()) != 0))
  {
    v23 = v22;
    swift_retain();
    swift_retain();
    swift_retain();
    v24 = specialized static AudioFileResource.== infix(_:_:)(v21, v23);
  }
  else
  {
    type metadata accessor for AudioFileGroupResource();
    v46 = swift_dynamicCastClass();
    if (!v46)
      goto LABEL_32;
    v47 = v46;
    v48 = swift_dynamicCastClass();
    if (!v48)
      goto LABEL_32;
    v49 = *(_QWORD *)(v47 + 24);
    v50 = *(_QWORD *)(v48 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    v24 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  }
  v51 = v24;
  swift_release();
  swift_release();
  swift_release();
  if ((v51 & 1) != 0)
    goto LABEL_31;
LABEL_32:
  type metadata accessor for AudioPlaybackController();
  v52 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v52[5] = v19;
  v52[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  v53 = REEntityGetOrAddComponentByClass();
  v52[4] = v53;
  RERetain();
  v54 = REAudioPlayerComponentPrepareAsset();
  v52[6] = v54;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v55 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v53, v15, v19, v54);
  swift_release();
  swift_release();
  v52[2] = v55;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  REAudioPlayerComponentGetDecibelGainForToken();
  v57 = v56;
  REAudioPlayerComponentSetDecibelGainForToken();
  if (v8 != v57)
    RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)v2 = v52;
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  char v3;
  char IsPaused;
  uint64_t v5;
  char v6;
  double v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 56) == 1)
  {
    v2 = v1;
    if (*((_BYTE *)v1 + 8) == 1)
    {
      v3 = *(_BYTE *)(result + 136);
      swift_beginAccess();
      result = swift_weakLoadStrong();
      if (result)
      {
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          IsPaused = REAnimationComponentIsPaused();
          result = swift_release();
          if ((IsPaused & 1) != 0)
            return result;
        }
        else
        {
          result = swift_release();
        }
      }
      v5 = *v1;
      if (*v2)
        v6 = v3;
      else
        v6 = 1;
      if ((v6 & 1) == 0)
      {
        swift_retain();
        static Duration.seconds(_:)();
        v7 = (double)Duration.components.getter();
        Duration.components.getter();
        MEMORY[0x22076B948](*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 48), (double)v8 * 1.0e-18 + v7);
        RENetworkMarkComponentDirty();
        AudioPlaybackController.play()();
        result = swift_release();
      }
      *((_BYTE *)v2 + 8) = 0;
    }
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(result + 56);
  *((_BYTE *)v1 + 8) = 0;
  if (v2 == 1)
  {
    v3 = *v1;
    if (*v1)
    {
      v4 = *(_QWORD *)(v3 + 32);
      v5 = *(_QWORD *)(v3 + 48);
      swift_retain();
      MEMORY[0x22076B990](v4, v5);
      RENetworkMarkComponentDirty();
      return swift_release();
    }
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 56) == 1)
  {
    v2 = *v1;
    if (*v1)
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(_QWORD *)(v2 + 48);
      swift_retain();
      MEMORY[0x22076B8B8](v3, v4);
      RENetworkMarkComponentDirty();
      return swift_release();
    }
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 56) == 1)
  {
    v2 = *v1;
    if (v2)
    {
      if ((*(_BYTE *)(result + 136) & 1) == 0)
      {
        swift_retain();
        static Duration.seconds(_:)();
        v3 = (double)Duration.components.getter();
        Duration.components.getter();
        MEMORY[0x22076B948](*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 48), (double)v4 * 1.0e-18 + v3);
        RENetworkMarkComponentDirty();
        AudioPlaybackController.play()();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t specialized PlayAudioAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE94A10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1852399975 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE94A30)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t assignWithCopy for PlayAudioActionHandler(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for PlayAudioActionHandler(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAudioActionHandler(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAudioActionHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAudioActionHandler()
{
  return &type metadata for PlayAudioActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in PlayAudioActionHandler()
{
  return &protocol witness table for PlayAudioAction;
}

uint64_t static StateMachineConditionsBuilder.buildBlock()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t StateMachineTransition.init(name:fromState:toState:transitionTime:conditions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t result;

  result = a7();
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(double *)(a8 + 48) = a9;
  *(_BYTE *)(a8 + 56) = 0;
  *(_QWORD *)(a8 + 64) = result;
  return result;
}

uint64_t StateMachineTransition.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineTransition.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.fromState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineTransition.fromState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*StateMachineTransition.fromState.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.toState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineTransition.toState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*StateMachineTransition.toState.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double StateMachineTransition.transitionTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void StateMachineTransition.transitionTime.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*StateMachineTransition.transitionTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void StateMachineTransition.interruptionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

_BYTE *StateMachineTransition.interruptionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = *result;
  return result;
}

uint64_t (*StateMachineTransition.interruptionType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.conditions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineTransition.conditions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*StateMachineTransition.conditions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static StateMachineTransitionInterruptionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void StateMachineTransitionInterruptionType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int StateMachineTransitionInterruptionType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType;
  if (!lazy protocol witness table cache variable for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for StateMachineTransitionInterruptionType, &type metadata for StateMachineTransitionInterruptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType);
  }
  return result;
}

uint64_t destroy for StateMachineTransition()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StateMachineTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateMachineTransition(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StateMachineTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StateMachineTransition()
{
  return &type metadata for StateMachineTransition;
}

uint64_t storeEnumTagSinglePayload for StateMachineTransitionInterruptionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BE1332C + 4 * byte_21BE7FF25[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BE13360 + 4 * byte_21BE7FF20[v4]))();
}

uint64_t sub_21BE13360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE13368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE13370);
  return result;
}

uint64_t sub_21BE1337C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE13384);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BE13388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE13390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StateMachineTransitionInterruptionType()
{
  return &type metadata for StateMachineTransitionInterruptionType;
}

ValueMetadata *type metadata accessor for StateMachineConditionsBuilder()
{
  return &type metadata for StateMachineConditionsBuilder;
}

RealityKit::__RKEntityActionAnimationStyle_optional __swiftcall __RKEntityActionAnimationStyle.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKEntityActionAnimationStyle_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionAnimationStyle.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_21BE1345C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BE13588()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BE13690()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BE13798()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BE13878()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BE13918()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BE139CC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t (*specialized Entity.ComponentSet.subscript.modify(uint64_t a1))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t Component;
  int v4;
  int v5;

  *(_QWORD *)a1 = v1;
  swift_retain();
  Component = REEntityGetComponent();
  if (Component)
  {
    REHierarchicalFadeComponentGetOpacity();
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  swift_release();
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = Component == 0;
  return Entity.ComponentSet.subscript.modifyspecialized ;
}

uint64_t Entity.ComponentSet.subscript.modifyspecialized (uint64_t result, char a2)
{
  uint64_t v2;
  unsigned __int8 v3;

  if ((a2 & 1) == 0)
  {
    v2 = *(unsigned int *)(result + 8);
    v3 = *(_BYTE *)(result + 12);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2 | ((unint64_t)v3 << 32));
    return swift_release();
  }
  return result;
}

uint64_t __RKEntityToggleVisibilityAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 128) = 0;
  *(_BYTE *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityShowAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v24 = swift_allocObject();
  v25 = *a2;
  v26 = *a3;
  v27 = *a6;
  v28 = *a7;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_OWORD *)(v24 + 240) = 0u;
  *(_OWORD *)(v24 + 256) = 0u;
  *(_OWORD *)(v24 + 272) = 0u;
  *(_OWORD *)(v24 + 288) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *(_QWORD *)(v24 + 336) = 0;
  *(float *)(v24 + 144) = a8;
  *(float *)(v24 + 148) = a9;
  *(_BYTE *)(v24 + 152) = v25;
  *(_BYTE *)(v24 + 153) = v26;
  *(_BYTE *)(v24 + 154) = a4;
  *(float *)(v24 + 156) = a10;
  *(float *)(v24 + 164) = a11;
  *(float *)(v24 + 168) = a12;
  *(_BYTE *)(v24 + 160) = a5;
  *(_BYTE *)(v24 + 172) = v27;
  *(_BYTE *)(v24 + 173) = v28;
  *(_QWORD *)(v24 + 112) = 0;
  *(_BYTE *)(v24 + 120) = 1;
  *(_QWORD *)(v24 + 128) = 0;
  *(_BYTE *)(v24 + 136) = 1;
  *(_DWORD *)(v24 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityHideAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v24 = swift_allocObject();
  v25 = *a2;
  v26 = *a3;
  v27 = *a6;
  v28 = *a7;
  *(_BYTE *)(v24 + 174) = 0;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_OWORD *)(v24 + 240) = 0u;
  *(_OWORD *)(v24 + 256) = 0u;
  *(_OWORD *)(v24 + 272) = 0u;
  *(_OWORD *)(v24 + 288) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *(_QWORD *)(v24 + 336) = 0;
  *(float *)(v24 + 144) = a8;
  *(float *)(v24 + 148) = a9;
  *(_BYTE *)(v24 + 152) = v25;
  *(_BYTE *)(v24 + 153) = v26;
  *(float *)(v24 + 164) = a11;
  *(float *)(v24 + 168) = a12;
  *(_BYTE *)(v24 + 160) = a5;
  *(_BYTE *)(v24 + 154) = a4;
  *(float *)(v24 + 156) = a10;
  *(_BYTE *)(v24 + 172) = v27;
  *(_BYTE *)(v24 + 173) = v28;
  *(_QWORD *)(v24 + 112) = 0;
  *(_BYTE *)(v24 + 120) = 1;
  *(_QWORD *)(v24 + 128) = 0;
  *(_BYTE *)(v24 + 136) = 1;
  *(_DWORD *)(v24 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySetOpacityAction.__allocating_init(targetEntity:duration:opacity:)(uint64_t a1, float a2, float a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(_BYTE *)(v6 + 196) = 1;
  *(_DWORD *)(v6 + 200) = 0;
  *(_BYTE *)(v6 + 204) = 1;
  *(float *)(v6 + 144) = a2;
  *(float *)(v6 + 148) = a3;
  *(_QWORD *)(v6 + 112) = 0;
  *(_BYTE *)(v6 + 120) = 1;
  *(_QWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 136) = 1;
  *(_DWORD *)(v6 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityActionAnimationStyle.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C756679616C70;
  if (*v0 != 1)
    v1 = 1684826487;
  if (*v0)
    return v1;
  else
    return 0x6369736162;
}

uint64_t Entity.hideAction.getter(const void *a1, void (*a2)(uint64_t))
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  swift_beginAccess();
  v5 = objc_getAssociatedObject(v2, a1);
  swift_endAccess();
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  v6 = outlined init with take of Transform?((uint64_t)v9, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v11)
  {
    a2(v6);
    if (swift_dynamicCast())
      return v8;
    else
      return 0;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

unint64_t Entity.opacity.getter()
{
  void *v0;
  id v1;
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned int v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  swift_beginAccess();
  v1 = objc_getAssociatedObject(v0, &static Entity.AssociatedObjectKeys.opacity);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v9)
  {
    v2 = swift_dynamicCast();
    v3 = v6;
    v4 = v2 ^ 1;
    if (!v2)
      v3 = 0;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v3 = 0;
    v4 = 1;
  }
  return v3 | ((unint64_t)v4 << 32);
}

void *static __RKEntityActionAnimationStyle.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityActionAnimationStyle.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionAnimationStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionAnimationStyle()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionAnimationStyle()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionAnimationStyle()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityActionAnimationStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionAnimationStyle(Swift::String *a1)
{
  return __RKEntityActionAnimationStyle.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionAnimationStyle(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x6C756679616C70;
  if (v2 != 1)
  {
    v5 = 1684826487;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6369736162;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionAnimationStyle()
{
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionAnimationStyle()
{
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionAnimationStyle(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionAnimationStyle;
}

RealityKit::__RKEntityShowActionBuildInAnimationType_optional __swiftcall __RKEntityShowActionBuildInAnimationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityShowActionBuildInAnimationType.init(rawValue:);
  return (RealityKit::__RKEntityShowActionBuildInAnimationType_optional)__RKEntityShowActionBuildInAnimationType.init(rawValue:)(rawValue, v2, v1);
}

void *static __RKEntityShowActionBuildInAnimationType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityShowActionBuildInAnimationType.allCases.getter;
}

uint64_t __RKEntityShowActionBuildInAnimationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BE1438C + 4 * byte_21BE800A9[*v0]))(1701736302, 0xE400000000000000);
}

unint64_t sub_21BE1438C()
{
  return 0xD000000000000011;
}

unint64_t sub_21BE143DC()
{
  return 0xD000000000000012;
}

uint64_t sub_21BE14404()
{
  return 7368560;
}

uint64_t sub_21BE14414()
{
  return 0x707520656C616373;
}

uint64_t sub_21BE1442C()
{
  return 0x6F6420656C616373;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityShowActionBuildInAnimationType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, a3, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

RealityKit::__RKEntityShowActionBuildInAnimationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityShowActionBuildInAnimationType(Swift::String *a1)
{
  return __RKEntityShowActionBuildInAnimationType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityShowActionBuildInAnimationType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __RKEntityShowActionBuildInAnimationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityShowActionBuildInAnimationType()
{
  lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityShowActionBuildInAnimationType()
{
  lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityShowActionBuildInAnimationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityShowActionBuildInAnimationType.allCases.getter;
}

RealityKit::__RKEntityHideActionBuildOutAnimationType_optional __swiftcall __RKEntityHideActionBuildOutAnimationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityHideActionBuildOutAnimationType.init(rawValue:);
  return (RealityKit::__RKEntityHideActionBuildOutAnimationType_optional)__RKEntityShowActionBuildInAnimationType.init(rawValue:)(rawValue, v2, v1);
}

uint64_t __RKEntityShowActionBuildInAnimationType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  v9 = 10;
  if (v7 < 0xA)
    v9 = v7;
  *a3 = v9;
  return result;
}

void *static __RKEntityHideActionBuildOutAnimationType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityHideActionBuildOutAnimationType.allCases.getter;
}

uint64_t __RKEntityHideActionBuildOutAnimationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BE145F0 + 4 * byte_21BE800B3[*v0]))(1701736302, 0xE400000000000000);
}

unint64_t sub_21BE145F0()
{
  return 0xD000000000000010;
}

unint64_t sub_21BE14640()
{
  return 0xD000000000000011;
}

uint64_t sub_21BE14668()
{
  return 7368560;
}

uint64_t sub_21BE14678()
{
  return 0x6F6420656C616373;
}

uint64_t sub_21BE14694()
{
  return 0x707520656C616373;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityHideActionBuildOutAnimationType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityHideActionBuildOutAnimationType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  _BYTE v7[72];

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityHideActionBuildOutAnimationType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityHideActionBuildOutAnimationType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, a3, (void (*)(_BYTE *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  _BYTE v8[72];

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

RealityKit::__RKEntityHideActionBuildOutAnimationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityHideActionBuildOutAnimationType(Swift::String *a1)
{
  return __RKEntityHideActionBuildOutAnimationType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityHideActionBuildOutAnimationType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __RKEntityHideActionBuildOutAnimationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityHideActionBuildOutAnimationType()
{
  lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityHideActionBuildOutAnimationType()
{
  lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityHideActionBuildOutAnimationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityHideActionBuildOutAnimationType.allCases.getter;
}

uint64_t __RKEntityVisibilityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v2 = type metadata accessor for __RKEntityVisibilityAction();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_QWORD *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityVisibilityAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 128) = 0;
  *(_BYTE *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityVisibilityAction.clone(matching:newEntity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  swift_beginAccess();
  v3 = v1[2];
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    type metadata accessor for __RKEntityVisibilityAction();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 112) = 0;
    *(_BYTE *)(v5 + 120) = 1;
    *(_QWORD *)(v5 + 128) = 0;
    *(_BYTE *)(v5 + 136) = 1;
    *(_DWORD *)(v5 + 140) = 0;
    v6 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v6);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD))(*v1 + 464))(v8, 0);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v7;
    else
      return 0;
  }
}

uint64_t closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)@<X0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t *a3@<X8>, unsigned int a4@<S1>, unsigned int a5@<S2>, unsigned int a6@<S3>, __n128 a7@<Q4>, __n128 a8@<Q5>)
{
  _QWORD *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;

  RESampledAnimationDefaultParameters();
  v11 = *(_QWORD **)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)a1 = v11;
  if ((a2 & 1) != 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v11);
      *(_QWORD *)a1 = v11;
    }
    v15 = v11[2];
    v14 = v11[3];
    if (v15 >= v14 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v11);
    *(_QWORD *)&v16 = __PAIR64__(a5, a4);
    *((_QWORD *)&v16 + 1) = a6;
    v11[2] = v15 + 1;
    v17 = &v11[6 * v15];
    *((_OWORD *)v17 + 2) = v16;
  }
  else
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v11);
      *(_QWORD *)a1 = v11;
    }
    v19 = v11[2];
    v18 = v11[3];
    if (v19 >= v18 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v11);
    v11[2] = v19 + 1;
    v17 = &v11[6 * v19];
    v17[4] = 0;
    v17[5] = 0;
  }
  *((__n128 *)v17 + 3) = a7;
  *((__n128 *)v17 + 4) = a8;
  *(_QWORD *)a1 = v11;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
    *a3 = result;
  else
    __break(1u);
  return result;
}

uint64_t __RKEntityVisibilityAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityToggleVisibilityAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t VisibilityMode;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v24[40];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v29 = 91;
  v30 = 0xE100000000000000;
  if (v2)
  {
    v25 = 0;
    v26 = 0xE000000000000000;
    v27 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = v29;
  v9 = v30;
  v11 = *(_QWORD *)(v0 + 16);
  if (!v11)
  {
    v15 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v29);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_13:
      v27 = v29;
      v28 = v30;
      v16 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v16, &v27);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_13;
  RERenderOptionsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  VisibilityMode = RERenderOptionsComponentGetVisibilityMode();
  if ((_DWORD)VisibilityMode)
  {
    v14 = 0;
  }
  else
  {
    VisibilityMode = REEntityGetSelfEnabled();
    v14 = VisibilityMode;
  }
  MEMORY[0x24BDAC7A8](VisibilityMode);
  v24[16] = v14;
  v24[17] = v14 ^ 1;
  v27 = v29;
  v28 = v30;
  v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v27, partial apply for implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:), v24);
  MEMORY[0x22076D154](*(_QWORD *)(v11 + 16), v14 ^ 1u);
  RENetworkMarkEntityMetadataDirty();
  RERenderOptionsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RERenderOptionsComponentSetVisibilityMode();
  RENetworkMarkComponentDirty();
  v27 = v10;
  v28 = v9;
  v19 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v19, &v27);
  v20 = *(_QWORD *)(v1 + 96);
  v21 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 2;
  v17 = 1;
  *(_BYTE *)(v1 + 104) = 1;
  v27 = v20;
  LOBYTE(v28) = v21;
  __RKEntityAction.state.didset((uint64_t)&v27);
  v27 = v10;
  v28 = v9;
  v22 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v22, &v27);
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

uint64_t implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:)(char a1, char a2)
{
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;

  _StringGuts.grow(_:)(51);
  v4._object = (void *)0x800000021BE94F50;
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  if ((a1 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 544175136;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  if ((a2 & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t __RKEntityToggleVisibilityAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  type metadata accessor for __RKEntityToggleVisibilityAction();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_QWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 0;
  v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityToggleVisibilityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v2 = type metadata accessor for __RKEntityToggleVisibilityAction();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_QWORD *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityToggleVisibilityAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    type metadata accessor for __RKEntityToggleVisibilityAction();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 112) = 0;
    *(_BYTE *)(v7 + 120) = 1;
    *(_QWORD *)(v7 + 128) = 0;
    *(_BYTE *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 0;
    v8 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v8);
  }
  else
  {
    type metadata accessor for __RKEntityToggleVisibilityAction();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 112) = 0;
    *(_BYTE *)(v4 + 120) = 1;
    *(_QWORD *)(v4 + 128) = 0;
    *(_BYTE *)(v4 + 136) = 1;
    *(_DWORD *)(v4 + 140) = 0;
    v5 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v5);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v9;
    else
      return 0;
  }
}

uint64_t __RKEntityToggleVisibilityAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityVisibilityAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t __RKEntitySetOpacityAction.init(targetEntity:duration:opacity:)(uint64_t a1, float a2, float a3)
{
  uint64_t v3;

  *(_OWORD *)(v3 + 180) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_BYTE *)(v3 + 196) = 1;
  *(_DWORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 204) = 1;
  *(float *)(v3 + 144) = a2;
  *(float *)(v3 + 148) = a3;
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_QWORD *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySetOpacityAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v30 = 91;
  v31 = 0xE100000000000000;
  if (v2)
  {
    *(_QWORD *)&v28[0] = 0;
    *((_QWORD *)&v28[0] + 1) = 0xE000000000000000;
    v32 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v4 = 0xE000000000000000;
    v3 = 0;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = v30;
  v9 = v31;
  v11 = *(_QWORD *)(v0 + 16);
  if (!v11)
  {
    v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v30);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_13:
      v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v30);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_13;
  if (*(float *)(v1 + 144) <= 0.0)
  {
    v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v30, partial apply for implicit closure #4 in __RKEntitySetOpacityAction.perform(with:), v1);
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v1 + 148));
  }
  else
  {
    v13 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v13, &v30);
    MEMORY[0x22076D154](*(_QWORD *)(v11 + 16), 1);
    RENetworkMarkEntityMetadataDirty();
    RERenderOptionsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RERenderOptionsComponentSetVisibilityMode();
    RENetworkMarkComponentDirty();
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    v14 = swift_allocObject();
    swift_weakInit();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v14;
    v15[3] = v10;
    v15[4] = v9;
    swift_bridgeObjectRetain();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v28, (uint64_t)partial apply for closure #1 in __RKEntitySetOpacityAction.perform(with:), (uint64_t)v15, &v30);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v28, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v30, v1 + 152);
    swift_endAccess();
  }
  v30 = v10;
  v31 = v9;
  v20 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v20, &v30);
  v21 = *(_QWORD *)(v1 + 96);
  v22 = *(_BYTE *)(v1 + 104);
  v18 = 1;
  *(_QWORD *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  v30 = v21;
  LOBYTE(v31) = v22;
  __RKEntityAction.state.didset((uint64_t)&v30);
  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  v23 = swift_allocObject();
  swift_weakInit();
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v23;
  v24[3] = v10;
  v24[4] = v9;
  v25 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = partial apply for closure #2 in __RKEntitySetOpacityAction.perform(with:);
  *(_QWORD *)(v1 + 40) = v24;
  swift_bridgeObjectRetain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
  v30 = v10;
  v31 = v9;
  v26 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v26, &v30);
  swift_bridgeObjectRelease();
  swift_release();
  return v18;
}

uint64_t closure #1 in __RKEntitySetOpacityAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  os_log_type_t v7;
  uint64_t v8[2];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8[0] = a3;
    v8[1] = a4;
    v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v8);
    specialized __RKEntitySetOpacityAction.updateFade(_:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntitySetOpacityAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    *(_QWORD *)&v10 = a2;
    *((_QWORD *)&v10 + 1) = a3;
    v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, (uint64_t *)&v10);
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6 + 152, (uint64_t)&v10);
    if (*((_QWORD *)&v11 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v10, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v10, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v9[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v10, &demangling cache variable for type metadata for Cancellable?);
    }
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v10, v6 + 152);
    swift_endAccess();
    *(_QWORD *)&v10 = a2;
    *((_QWORD *)&v10 + 1) = a3;
    v8 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v8, &v10, partial apply for implicit closure #2 in closure #2 in __RKEntitySetOpacityAction.perform(with:), v6);
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v6 + 148));
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  Float.write<A>(to:)();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t __RKEntitySetOpacityAction.reversed()()
{
  uint64_t v0;
  int v1;
  float v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_DWORD *)(v0 + 144);
  if (*(_BYTE *)(v0 + 196))
    v2 = 1.0;
  else
    v2 = *(float *)(v0 + 192);
  type metadata accessor for __RKEntitySetOpacityAction();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 180) = 0u;
  *(_BYTE *)(v3 + 196) = 1;
  *(_DWORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 204) = 1;
  *(_DWORD *)(v3 + 144) = v1;
  *(float *)(v3 + 148) = v2;
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_QWORD *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  v4 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v4);
}

uint64_t __RKEntitySetOpacityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_beginAccess();
  v3 = type metadata accessor for __RKEntitySetOpacityAction();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 180) = 0u;
  *(_BYTE *)(v4 + 196) = 1;
  *(_DWORD *)(v4 + 200) = 0;
  *(_BYTE *)(v4 + 204) = 1;
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 120) = 1;
  *(_QWORD *)(v4 + 128) = 0;
  *(_BYTE *)(v4 + 136) = 1;
  *(_DWORD *)(v4 + 140) = 0;
  v5 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v5);
  a1[3] = v3;
  *a1 = result;
  return result;
}

void __RKEntitySetOpacityAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntitySetOpacityAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntitySetOpacityAction.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of BodyTrackingComponent?(v0 + 152, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntitySetOpacityAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 152, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntitySetOpacityAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 152, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t __RKEntityShowAction.init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v13 = *a2;
  v14 = *a3;
  v15 = *a6;
  v16 = *a7;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_QWORD *)(v12 + 336) = 0;
  *(float *)(v12 + 144) = a8;
  *(float *)(v12 + 148) = a9;
  *(_BYTE *)(v12 + 152) = v13;
  *(_BYTE *)(v12 + 153) = v14;
  *(_BYTE *)(v12 + 154) = a4;
  *(float *)(v12 + 156) = a10;
  *(float *)(v12 + 164) = a11;
  *(float *)(v12 + 168) = a12;
  *(_BYTE *)(v12 + 160) = a5;
  *(_BYTE *)(v12 + 172) = v15;
  *(_BYTE *)(v12 + 173) = v16;
  *(_QWORD *)(v12 + 112) = 0;
  *(_BYTE *)(v12 + 120) = 1;
  *(_QWORD *)(v12 + 128) = 0;
  *(_BYTE *)(v12 + 136) = 1;
  *(_DWORD *)(v12 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

void __RKEntityShowAction.updateFadeIn(_:)(char a1)
{
  uint64_t v1;
  double v2;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if ((*(_BYTE *)(v1 + 120) & 1) == 0)
  {
    v4 = *(double *)(v1 + 112);
    if (*(_QWORD *)(v1 + 24))
      REEngineGetCurrentTime();
    else
      v5 = CACurrentMediaTime();
    v6 = v5 - v4;
    v7 = *(float *)(v1 + 144);
    if (v6 > v7)
      v6 = v7;
    if (v6 <= 0.0)
    {
      v6 = 0.0;
      if (v7 <= 0.0)
        goto LABEL_13;
    }
    else if (v6 >= v7)
    {
LABEL_13:
      v8 = *(float *)(v1 + 156);
LABEL_19:
      specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v8);
      return;
    }
    v9 = v6;
    v10 = *(float *)(v1 + 156) * (float)(v9 / v7);
    if ((a1 & 1) != 0)
      v11 = sinf((float)((float)((float)(v10 + -1.0) + 1.0) * -3.1416) * 0.5) + 1.0;
    else
      v11 = sinf((float)((float)(1.0 - v10) * 3.1416) * 0.5);
    v8 = 1.0 - v11;
    goto LABEL_19;
  }
  if (*(_QWORD *)(v1 + 24))
    REEngineGetCurrentTime();
  else
    v2 = CACurrentMediaTime();
  *(double *)(v1 + 112) = v2;
  *(_BYTE *)(v1 + 120) = 0;
}

uint64_t __RKEntityShowAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t ServiceLocator;
  float32x4_t v19;
  float32x4_t v20;
  os_log_type_t v21;
  uint64_t v22;
  char v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  __int128 v28;
  uint64_t v29;

  v1 = v0;
  v29 = *MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  specialized InteractionsLogger.init<A>(_:_:)(v2, &v28);
  v3 = v28;
  v4 = *(void **)(v0 + 16);
  if (v4)
  {
    v5 = (_QWORD *)(v0 + 96);
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 104) == 1 && *v5 == 1 && (swift_beginAccess(), *(_BYTE *)(v1 + 105) == 1))
    {
      swift_retain();
    }
    else
    {
      swift_retain();
      if (RESceneGetECSManagerNullable())
      {
        v6 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.showAction, (void (*)(uint64_t))type metadata accessor for __RKEntityShowAction);
        swift_release();
        if (v6)
        {
          v28 = v3;
          v7 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v7, (uint64_t *)&v28);
        }
        else
        {
          v11 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.hideAction, (void (*)(uint64_t))type metadata accessor for __RKEntityHideAction);
          if (v11)
          {
            v12 = v11;
            v28 = v3;
            v13 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v13, (uint64_t *)&v28);
            swift_beginAccess();
            v14 = *(_QWORD *)(v12 + 96);
            v15 = *(_BYTE *)(v12 + 104);
            *(_QWORD *)(v12 + 96) = 2;
            *(_BYTE *)(v12 + 104) = 1;
            *(_QWORD *)&v28 = v14;
            BYTE8(v28) = v15;
            swift_retain();
            __RKEntityAction.state.didset((uint64_t)&v28);
            swift_release_n();
          }
          v16 = *(_QWORD *)(v1 + 96);
          v17 = *(_BYTE *)(v1 + 104);
          *(_QWORD *)(v1 + 96) = 1;
          *(_BYTE *)(v1 + 104) = 1;
          *(_QWORD *)&v28 = v16;
          BYTE8(v28) = v17;
          __RKEntityAction.state.didset((uint64_t)&v28);
          *(_QWORD *)(v1 + 112) = 0;
          *(_BYTE *)(v1 + 120) = 1;
          swift_beginAccess();
          swift_retain();
          objc_setAssociatedObject(v4, &static Entity.AssociatedObjectKeys.showAction, (id)v1, (void *)1);
          swift_endAccess();
          swift_release();
          REAnimationComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          if (REEntityGetSceneNullable())
          {
            if (RESceneGetECSManagerNullable())
            {
              ServiceLocator = REECSManagerGetServiceLocator();
              if (MEMORY[0x22076FD58](ServiceLocator))
              {
                RETransformComponentGetComponentType();
                if (REEntityGetComponentByClass())
                {
                  RETransformComponentGetLocalUnanimatedSRT();
                  v20 = vmulq_f32(v19, v19);
                  if ((float)(v20.f32[2] + vaddv_f32(*(float32x2_t *)v20.f32)) < 0.00000011921)
                  {
                    v28 = v3;
                    v21 = static os_log_type_t.info.getter();
                    specialized InteractionsLogger.log(_:_:)(v21, (uint64_t *)&v28);
                  }
                  v28 = v3;
                  v22 = static os_log_type_t.info.getter();
                  specialized InteractionsLogger.log(_:_:)(v22, &v28, partial apply for implicit closure #10 in __RKEntityShowAction.perform(with:), v1);
                  if (*(_BYTE *)(v1 + 172))
                  {
                    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v23 & 1) == 0)
                      __asm { BR              X10 }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  __asm { BR              X10 }
                }
                v28 = v3;
                v27 = static os_log_type_t.info.getter();
                specialized InteractionsLogger.log(_:_:)(v27, (uint64_t *)&v28);
              }
              else
              {
                v28 = v3;
                v26 = static os_log_type_t.info.getter();
                specialized InteractionsLogger.log(_:_:)(v26, (uint64_t *)&v28);
              }
            }
            else
            {
              v28 = v3;
              v25 = static os_log_type_t.info.getter();
              specialized InteractionsLogger.log(_:_:)(v25, (uint64_t *)&v28);
            }
          }
          else
          {
            v28 = v3;
            v24 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v24, (uint64_t *)&v28);
          }
        }
        goto LABEL_11;
      }
    }
    v28 = v3;
    v9 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v9, &v28);
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v8 = static os_log_type_t.error.getter();
  specialized InteractionsLogger.log(_:_:)(v8, &v28);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t implicit closure #10 in __RKEntityShowAction.perform(with:)(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  __int128 v7;

  BYTE8(v7) = 0;
  _StringGuts.grow(_:)(53);
  v2._countAndFlagsBits = 0x6F6974616D696E61;
  v2._object = (void *)0xEF3D656C7974536ELL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._object = (void *)0x800000021BE94EE0;
  v3._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v3);
  *(_QWORD *)&v7 = *(unsigned __int8 *)(a1 + 173);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x6F69746172756420;
  v4._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v4);
  Float.write<A>(to:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return *(_QWORD *)((char *)&v7 + 1);
}

uint64_t closure #1 in __RKEntityShowAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  os_log_type_t v7;
  uint64_t v8[2];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8[0] = a3;
    v8[1] = a4;
    v7 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v8);
    __RKEntityShowAction.updateFadeIn(_:)(0);
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #25 in __RKEntityShowAction.perform(with:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(59);
  v0._object = (void *)0x800000021BE94E90;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  Float.write<A>(to:)();
  v1._countAndFlagsBits = 0xD000000000000025;
  v1._object = (void *)0x800000021BE94EB0;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized closure #2 in __RKEntityShowAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11 = result;
    *(_QWORD *)&v16 = a2;
    *((_QWORD *)&v16 + 1) = a3;
    v12 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v12, (uint64_t *)&v16);
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 176, (uint64_t)&v16);
    if (*((_QWORD *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 176);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 256, (uint64_t)&v16);
    if (*((_QWORD *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 256);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 296, (uint64_t)&v16);
    if (*((_QWORD *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 296);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 216, (uint64_t)&v16);
    if (*((_QWORD *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 216);
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(v11 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(_BYTE *)(v11 + 104) == 1) && *(_QWORD *)(v11 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(_QWORD *)(v11 + 128) = 0;
      *(_BYTE *)(v11 + 136) = 1;
    }
    v14[0] = a2;
    v14[1] = a3;
    v13 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v13, v14, partial apply for implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:), v11);
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v11 + 156));
    MEMORY[0x22076D154](a4[2], 1);
    RENetworkMarkEntityMetadataDirty();
    RERenderOptionsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RERenderOptionsComponentSetVisibilityMode();
    RENetworkMarkComponentDirty();
    swift_beginAccess();
    objc_setAssociatedObject(a4, &static Entity.AssociatedObjectKeys.showAction, 0, (void *)1);
    swift_endAccess();
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a6 & 0x100000000) == 0 && (_DWORD)a6 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(28);
  v0._object = (void *)0x800000021BE94E70;
  v0._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  Float.write<A>(to:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t closure #3 in __RKEntityShowAction.perform(with:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *))
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];

  v8 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = result;
    if ((*(_BYTE *)(result + 136) & 1) != 0 || *(_QWORD *)(v8 + 16) != *(_QWORD *)(result + 128))
    {
      return swift_release();
    }
    else
    {
      v16[0] = a3;
      v16[1] = a4;
      v11 = static os_log_type_t.info.getter();
      a5(v11, v16);
      swift_beginAccess();
      v12 = *(_QWORD *)(v10 + 96);
      v13 = *(_BYTE *)(v10 + 104);
      *(_QWORD *)(v10 + 96) = 2;
      *(_BYTE *)(v10 + 104) = 1;
      v14 = v12;
      v15 = v13;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v14);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t closure #5 in __RKEntityShowAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  double v9;
  os_log_type_t v10;
  os_log_type_t v11;
  uint64_t v12;
  char v13;
  os_log_type_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    if (*(_QWORD *)(result + 24))
      REEngineGetCurrentTime();
    else
      v9 = CACurrentMediaTime();
    if (*(double *)(v8 + 336) > v9)
      return swift_release();
    if ((*(_BYTE *)(v8 + 136) & 1) != 0 || (REAnimationComponentGetComponentType(), !REEntityGetComponentByClass()))
    {
      v17 = a4;
      v18 = a5;
      v11 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v11, &v17);
    }
    else
    {
      if (!REAnimationComponentIsCompleted())
      {
        v17 = a4;
        v18 = a5;
        v14 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v14, &v17);
        return swift_release();
      }
      v17 = a4;
      v18 = a5;
      v10 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v10, &v17);
    }
    swift_beginAccess();
    v12 = *(_QWORD *)(v8 + 96);
    v13 = *(_BYTE *)(v8 + 104);
    *(_QWORD *)(v8 + 96) = 2;
    *(_BYTE *)(v8 + 104) = 1;
    v15 = v12;
    v16 = v13;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v15);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKEntityShowAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  type metadata accessor for __RKEntityHideAction();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 174) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_QWORD *)(v0 + 336) = 0;
  *(_DWORD *)(v0 + 148) = 1092616192;
  *(_WORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 160) = 0;
  *(_BYTE *)(v0 + 154) = 0;
  *(_DWORD *)(v0 + 156) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_WORD *)(v0 + 172) = 0;
  *(_QWORD *)(v0 + 164) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_QWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  *(_QWORD *)(v0 + 140) = 0x3F80000000000000;
  v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityShowAction.description.getter()
{
  return __RKEntityShowAction.description.getter();
}

{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  __int128 v5;

  BYTE8(v5) = 0;
  v1._countAndFlagsBits = __RKEntityAction.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  *(_QWORD *)&v5 = *(unsigned __int8 *)(v0 + 173);
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v5 + 1);
}

uint64_t __RKEntityShowAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __int16 v3;
  char v4;
  int v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_WORD *)(v1 + 152);
  v4 = *(_BYTE *)(v1 + 154);
  v5 = *(_DWORD *)(v1 + 156);
  v6 = *(_BYTE *)(v1 + 160);
  v7 = *(_WORD *)(v1 + 172);
  v8 = type metadata accessor for __RKEntityShowAction();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_QWORD *)(v9 + 336) = 0;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(v1 + 144);
  *(_WORD *)(v9 + 152) = v3;
  *(_BYTE *)(v9 + 154) = v4;
  *(_DWORD *)(v9 + 156) = v5;
  *(_QWORD *)(v9 + 164) = *(_QWORD *)(v1 + 164);
  *(_BYTE *)(v9 + 160) = v6;
  *(_WORD *)(v9 + 172) = v7;
  *(_QWORD *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 120) = 1;
  *(_QWORD *)(v9 + 128) = 0;
  *(_BYTE *)(v9 + 136) = 1;
  *(_DWORD *)(v9 + 140) = 0;
  v10 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v10);
  a1[3] = v8;
  *a1 = result;
  return result;
}

uint64_t @objc __RKEntitySetOpacityAction.copy(with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v5 = swift_retain();
  a4(v8, v5);
  swift_release();
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t __RKEntityShowAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int16 v5;
  char v6;
  int v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = *(_WORD *)(v1 + 152);
    v6 = *(_BYTE *)(v1 + 154);
    v7 = *(_DWORD *)(v1 + 156);
    v8 = *(_BYTE *)(v1 + 160);
    v9 = *(_WORD *)(v1 + 172);
    type metadata accessor for __RKEntityShowAction();
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    *(_OWORD *)(v10 + 320) = 0u;
    *(_QWORD *)(v10 + 336) = 0;
    *(_QWORD *)(v10 + 144) = *(_QWORD *)(v1 + 144);
    *(_WORD *)(v10 + 152) = v5;
    *(_BYTE *)(v10 + 154) = v6;
    *(_DWORD *)(v10 + 156) = v7;
    *(_QWORD *)(v10 + 164) = *(_QWORD *)(v1 + 164);
    *(_BYTE *)(v10 + 160) = v8;
    *(_WORD *)(v10 + 172) = v9;
    *(_QWORD *)(v10 + 112) = 0;
    *(_BYTE *)(v10 + 120) = 1;
    *(_QWORD *)(v10 + 128) = 0;
    *(_BYTE *)(v10 + 136) = 1;
    *(_DWORD *)(v10 + 140) = 0;
    v11 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v11);
  }
  else
  {
    __RKEntityShowAction.copy(with:)(v13);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v12;
    else
      return 0;
  }
}

void __RKEntityShowAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityShowAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityHideAction.init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v13 = *a2;
  v14 = *a3;
  v15 = *a6;
  v16 = *a7;
  *(_BYTE *)(v12 + 174) = 0;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_QWORD *)(v12 + 336) = 0;
  *(float *)(v12 + 144) = a8;
  *(float *)(v12 + 148) = a9;
  *(_BYTE *)(v12 + 152) = v13;
  *(_BYTE *)(v12 + 153) = v14;
  *(float *)(v12 + 164) = a11;
  *(float *)(v12 + 168) = a12;
  *(_BYTE *)(v12 + 160) = a5;
  *(_BYTE *)(v12 + 154) = a4;
  *(float *)(v12 + 156) = a10;
  *(_BYTE *)(v12 + 172) = v15;
  *(_BYTE *)(v12 + 173) = v16;
  *(_QWORD *)(v12 + 112) = 0;
  *(_BYTE *)(v12 + 120) = 1;
  *(_QWORD *)(v12 + 128) = 0;
  *(_BYTE *)(v12 + 136) = 1;
  *(_DWORD *)(v12 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t type metadata accessor for __RKEntityVisibilityAction()
{
  return objc_opt_self();
}

void __RKEntityHideAction.updateFadeOut(_:)(char a1)
{
  uint64_t v1;
  double v2;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if ((*(_BYTE *)(v1 + 120) & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 24))
      REEngineGetCurrentTime();
    else
      v2 = CACurrentMediaTime();
    *(double *)(v1 + 112) = v2;
    *(_BYTE *)(v1 + 120) = 0;
    return;
  }
  v4 = *(double *)(v1 + 112);
  if (*(_QWORD *)(v1 + 24))
    REEngineGetCurrentTime();
  else
    v5 = CACurrentMediaTime();
  v6 = v5 - v4;
  v7 = *(float *)(v1 + 144);
  if (v6 > v7)
    v6 = v7;
  if (v6 <= 0.0)
  {
    v6 = 0.0;
    if (v7 <= 0.0)
      goto LABEL_14;
  }
  else if (v6 >= v7)
  {
LABEL_14:
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v1 + 156));
    if (*(float *)(v1 + 156) == 0.0)
    {
      swift_beginAccess();
      v8 = *(_QWORD *)(v1 + 16);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 16);
        swift_retain();
        MEMORY[0x22076D154](v9, 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        swift_release();
      }
    }
    return;
  }
  v10 = v6;
  v11 = 1.0 - (float)(v10 / v7);
  if ((a1 & 1) != 0)
    v12 = sinf((float)((float)((float)(v11 + -1.0) + 1.0) * -3.1416) * 0.5) + 1.0;
  else
    v12 = sinf((float)((float)(1.0 - v11) * 3.1416) * 0.5);
  v13 = 1.0 - v12;
  if (v13 <= *(float *)(v1 + 156))
    v13 = *(float *)(v1 + 156);
  specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v13);
}

uint64_t __RKEntityHideAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t ServiceLocator;
  float32x4_t v19;
  float32x4_t v20;
  void *v21;
  char v22;
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v24 = *MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  specialized InteractionsLogger.init<A>(_:_:)(v2, &v23);
  v3 = v23;
  v4 = *(void **)(v0 + 16);
  if (v4)
  {
    v5 = (_QWORD *)(v0 + 96);
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 104) == 1 && *v5 == 1)
    {
      swift_beginAccess();
      if (*(_BYTE *)(v1 + 105) == 1)
      {
        swift_retain();
LABEL_11:
        v23 = v3;
        v9 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v9, &v23);
        goto LABEL_12;
      }
    }
    swift_retain();
    if (!RESceneGetECSManagerNullable())
      goto LABEL_11;
    v6 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.hideAction, (void (*)(uint64_t))type metadata accessor for __RKEntityHideAction);
    swift_release();
    if (v6)
    {
      v23 = v3;
      v7 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v7, (uint64_t *)&v23);
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    v11 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.showAction, (void (*)(uint64_t))type metadata accessor for __RKEntityShowAction);
    if (v11)
    {
      v12 = v11;
      v23 = v3;
      v13 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v13, &v23);
      swift_beginAccess();
      v14 = *(_QWORD *)(v12 + 96);
      v15 = *(_BYTE *)(v12 + 104);
      *(_QWORD *)(v12 + 96) = 2;
      *(_BYTE *)(v12 + 104) = 1;
      *(_QWORD *)&v23 = v14;
      BYTE8(v23) = v15;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v23);
      swift_release_n();
    }
    *(_BYTE *)(v1 + 174) = 0;
    v16 = *(_QWORD *)(v1 + 96);
    v17 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 1;
    *(_BYTE *)(v1 + 104) = 1;
    *(_QWORD *)&v23 = v16;
    BYTE8(v23) = v17;
    __RKEntityAction.state.didset((uint64_t)&v23);
    *(_QWORD *)(v1 + 112) = 0;
    *(_BYTE *)(v1 + 120) = 1;
    swift_beginAccess();
    swift_retain();
    objc_setAssociatedObject(v4, &static Entity.AssociatedObjectKeys.hideAction, (id)v1, (void *)1);
    swift_endAccess();
    swift_release();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    if (REEntityGetSceneNullable())
    {
      if (RESceneGetECSManagerNullable())
      {
        ServiceLocator = REECSManagerGetServiceLocator();
        if (MEMORY[0x22076FD58](ServiceLocator))
        {
          RETransformComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            RETransformComponentGetLocalUnanimatedSRT();
            v20 = vmulq_f32(v19, v19);
            if ((float)(v20.f32[2] + vaddv_f32(*(float32x2_t *)v20.f32)) < 0.00000011921)
            {
              static os_log_type_t.error.getter();
              type metadata accessor for OS_os_log();
              v21 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();

            }
            RETransformComponentGetLocalPose();
            if (*(_BYTE *)(v1 + 172))
            {
              v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v22 & 1) == 0)
                __asm { BR              X10 }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            __asm { BR              X10 }
          }
        }
      }
      goto LABEL_12;
    }
    swift_release();
  }
  else
  {
    v8 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v8, &v23);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t closure #1 in __RKEntityHideAction.perform(with:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    __RKEntityHideAction.updateFadeOut(_:)(1);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #2 in __RKEntityHideAction.perform(with:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = result;
    v8 = result + 176;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v8, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v8);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 256, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 256);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 296, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 296);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 216, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 216);
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(v7 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(_BYTE *)(v7 + 104) == 1) && *(_QWORD *)(v7 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(_QWORD *)(v7 + 128) = 0;
      *(_BYTE *)(v7 + 136) = 1;
    }
    if ((*(_BYTE *)(v7 + 174) & 1) == 0)
    {
      specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v7 + 156));
      if (*(_BYTE *)(v7 + 154) != 1 || *(float *)(v7 + 156) == 0.0)
      {
        MEMORY[0x22076D154](a2[2], 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
      }
    }
    swift_beginAccess();
    objc_setAssociatedObject(a2, &static Entity.AssociatedObjectKeys.hideAction, 0, (void *)1);
    swift_endAccess();
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a4 & 0x100000000) == 0 && (_DWORD)a4 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntityHideAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 136) & 1) != 0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(result + 128))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(v3 + 96);
      v5 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v6 = v4;
      v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t closure #5 in __RKEntityHideAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  double v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 24))
      REEngineGetCurrentTime();
    else
      v2 = CACurrentMediaTime();
    if (*(double *)(v1 + 336) <= v2
      && ((*(_BYTE *)(v1 + 136) & 1) != 0
       || (REAnimationComponentGetComponentType(), !REEntityGetComponentByClass())
       || (REAnimationComponentIsCompleted() & 1) != 0
       || (RERenderOptionsComponentGetComponentType(),
           REEntityGetOrAddComponentByClass(),
           RERenderOptionsComponentGetVisibilityMode())
       || (REEntityGetSelfEnabled() & 1) == 0))
    {
      swift_beginAccess();
      v3 = *(_QWORD *)(v1 + 96);
      v4 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 2;
      *(_BYTE *)(v1 + 104) = 1;
      v5 = v3;
      v6 = v4;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v5);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityHideAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  type metadata accessor for __RKEntityShowAction();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_QWORD *)(v0 + 336) = 0;
  *(_DWORD *)(v0 + 148) = 1092616192;
  *(_WORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 154) = 0;
  *(_DWORD *)(v0 + 156) = 1065353216;
  *(_BYTE *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_WORD *)(v0 + 172) = 0;
  *(_QWORD *)(v0 + 164) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_QWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  *(_QWORD *)(v0 + 140) = 0x3F80000000000000;
  v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityHideAction.description.getter()
{
  return __RKEntityShowAction.description.getter();
}

Swift::Bool __swiftcall __RKEntityHideAction.stop()()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t v3;
  char v4;

  *(_BYTE *)(v0 + 174) = 1;
  swift_beginAccess();
  if (*(_BYTE *)(v0 + 104) != 1 || *(_QWORD *)(v0 + 96) != 1)
    return 0;
  *(_QWORD *)(v0 + 96) = 3;
  v1 = 1;
  *(_BYTE *)(v0 + 104) = 1;
  v3 = 1;
  v4 = 1;
  __RKEntityAction.state.didset((uint64_t)&v3);
  return v1;
}

uint64_t __RKEntityHideAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __int16 v3;
  char v4;
  int v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_WORD *)(v1 + 152);
  v4 = *(_BYTE *)(v1 + 154);
  v5 = *(_DWORD *)(v1 + 156);
  v6 = *(_BYTE *)(v1 + 160);
  v7 = *(_WORD *)(v1 + 172);
  v8 = type metadata accessor for __RKEntityHideAction();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 174) = 0;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_QWORD *)(v9 + 336) = 0;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(v1 + 144);
  *(_WORD *)(v9 + 152) = v3;
  *(_QWORD *)(v9 + 164) = *(_QWORD *)(v1 + 164);
  *(_BYTE *)(v9 + 160) = v6;
  *(_BYTE *)(v9 + 154) = v4;
  *(_DWORD *)(v9 + 156) = v5;
  *(_WORD *)(v9 + 172) = v7;
  *(_QWORD *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 120) = 1;
  *(_QWORD *)(v9 + 128) = 0;
  *(_BYTE *)(v9 + 136) = 1;
  *(_DWORD *)(v9 + 140) = 0;
  v10 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v10);
  a1[3] = v8;
  *a1 = result;
  return result;
}

uint64_t __RKEntityHideAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int16 v5;
  char v6;
  int v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = *(_WORD *)(v1 + 152);
    v6 = *(_BYTE *)(v1 + 154);
    v7 = *(_DWORD *)(v1 + 156);
    v8 = *(_BYTE *)(v1 + 160);
    v9 = *(_WORD *)(v1 + 172);
    type metadata accessor for __RKEntityHideAction();
    v10 = swift_allocObject();
    *(_BYTE *)(v10 + 174) = 0;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    *(_OWORD *)(v10 + 320) = 0u;
    *(_QWORD *)(v10 + 336) = 0;
    *(_QWORD *)(v10 + 144) = *(_QWORD *)(v1 + 144);
    *(_WORD *)(v10 + 152) = v5;
    *(_QWORD *)(v10 + 164) = *(_QWORD *)(v1 + 164);
    *(_BYTE *)(v10 + 160) = v8;
    *(_BYTE *)(v10 + 154) = v6;
    *(_DWORD *)(v10 + 156) = v7;
    *(_WORD *)(v10 + 172) = v9;
    *(_QWORD *)(v10 + 112) = 0;
    *(_BYTE *)(v10 + 120) = 1;
    *(_QWORD *)(v10 + 128) = 0;
    *(_BYTE *)(v10 + 136) = 1;
    *(_DWORD *)(v10 + 140) = 0;
    v11 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v11);
  }
  else
  {
    __RKEntityHideAction.copy(with:)(v13);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v12;
    else
      return 0;
  }
}

void __RKEntityHideAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityHideAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityShowAction.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 216, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 256, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 296, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityShowAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 216, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 256, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 296, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityShowAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 216, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 256, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 296, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t partial apply for implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:)()
{
  uint64_t v0;

  return implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:)(*(_BYTE *)(v0 + 16), *(_BYTE *)(v0 + 17));
}

uint64_t type metadata accessor for __RKEntityToggleVisibilityAction()
{
  return objc_opt_self();
}

uint64_t partial apply for implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)()
{
  int v0;

  return implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)(v0, 39, 0xD000000000000025, (void *)0x800000021BE94F20);
}

void specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(float a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  NSNumber v5;
  uint64_t (*v6)(_QWORD *, char);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, char);
  void *v9;
  _BYTE v10[32];
  _QWORD v11[4];

  v3 = (void **)(v1 + 16);
  if (a1 >= 1.0)
  {
    swift_beginAccess();
    if (*v3)
    {
      swift_retain();
      if (REComponentClassFromType())
        REEntityRemoveComponentByClass();
      swift_release();
      v4 = *v3;
      if (v4)
      {
        swift_retain();
        v5.super.super.isa = Float._bridgeToObjectiveC()().super.super.isa;
        swift_beginAccess();
        objc_setAssociatedObject(v4, &static Entity.AssociatedObjectKeys.opacity, v5.super.super.isa, (void *)1);
LABEL_17:
        swift_endAccess();
        swift_release();

      }
    }
  }
  else
  {
    swift_beginAccess();
    if (!*v3)
      return;
    swift_retain();
    if (REEntityGetComponent())
    {
      REHierarchicalFadeComponentGetOpacity();
    }
    else
    {
      swift_release();
      if (!*v3)
        return;
      swift_retain();
      LOBYTE(v11[0]) = 0;
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(1065353216);
    }
    swift_release();
    if (*v3)
    {
      swift_retain();
      v6 = Entity.components.modify(v11);
      v8 = specialized Entity.ComponentSet.subscript.modify((uint64_t)v10);
      if ((*(_BYTE *)(v7 + 4) & 1) == 0)
        *(float *)v7 = a1;
      v8((uint64_t)v10, 0);
      v6(v11, 0);
      swift_release();
      v9 = *v3;
      if (v9)
      {
        swift_retain();
        v5.super.super.isa = Float._bridgeToObjectiveC()().super.super.isa;
        swift_beginAccess();
        objc_setAssociatedObject(v9, &static Entity.AssociatedObjectKeys.opacity, v5.super.super.isa, (void *)1);
        goto LABEL_17;
      }
    }
  }
}

uint64_t sub_21BE1B89C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BE1B8C0()
{
  return objectdestroy_2Tm_1((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for closure #2 in __RKEntitySetOpacityAction.perform(with:)()
{
  uint64_t *v0;

  return closure #2 in __RKEntitySetOpacityAction.perform(with:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_21BE1B8D8()
{
  return objectdestroy_2Tm_1((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for closure #1 in __RKEntitySetOpacityAction.perform(with:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in __RKEntitySetOpacityAction.perform(with:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for __RKEntitySetOpacityAction()
{
  return objc_opt_self();
}

uint64_t partial apply for implicit closure #10 in __RKEntityShowAction.perform(with:)()
{
  uint64_t v0;

  return implicit closure #10 in __RKEntityShowAction.perform(with:)(v0);
}

uint64_t partial apply for implicit closure #25 in __RKEntityShowAction.perform(with:)()
{
  return implicit closure #25 in __RKEntityShowAction.perform(with:)();
}

uint64_t sub_21BE1B920()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in __RKEntityShowAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #2 in __RKEntityShowAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32));
}

uint64_t sub_21BE1B980()
{
  return objectdestroy_2Tm_1((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for closure #3 in __RKEntityShowAction.perform(with:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #3 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, _QWORD *))specialized InteractionsLogger.log(_:_:));
}

uint64_t sub_21BE1B9B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BE1B9D4()
{
  return objectdestroy_2Tm_1((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for closure #4 in __RKEntityShowAction.perform(with:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #3 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, _QWORD *))specialized InteractionsLogger.log(_:_:));
}

uint64_t sub_21BE1BA04()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in __RKEntityShowAction.perform(with:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #5 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

_QWORD *specialized __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)(uint64_t a1, char a2, char a3, int8x16_t a4, __n128 a5, __n128 a6, float a7)
{
  unsigned int v11;
  int8x16_t v17;
  float v18;
  _QWORD *result;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  int8x16_t v25;
  __n128 v26;
  __int128 v27;
  _OWORD *v28;
  __n128 v29;
  unint64_t v30;
  __int128 v31;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v40;
  _OWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  int8x16_t v47;
  _OWORD *v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  _OWORD *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  _OWORD *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  _OWORD *v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  _OWORD *v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  _OWORD *v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  _OWORD *v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  _OWORD *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  _OWORD *v80;
  unint64_t v81;
  __int128 v82;
  _OWORD *v83;
  int64_t v84;
  _QWORD *v85;
  __int128 *v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 *v90;
  __int128 v91;
  __int128 *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  _QWORD *v99;
  _DWORD v100[6];
  _QWORD *v101;
  char v102;
  char v103;
  uint64_t v104;
  float v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __n128 v110;
  __n128 v111;
  int8x16_t v112;
  _QWORD *v113;

  if ((a2 & 1) != 0)
    v11 = -1;
  else
    v11 = 0;
  __asm { FMOV            V3.4S, #1.0 }
  v17 = vbslq_s8((int8x16_t)vdupq_n_s32(v11), _Q3, a4);
  v112 = v17;
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for identity != -1)
    {
      swift_once();
      v17.i32[2] = v112.i32[2];
    }
    a6 = (__n128)static simd_quatf.identity;
    a5 = 0uLL;
  }
  v110 = a5;
  v111 = a6;
  v18 = *(float *)&v17.i32[2];
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v20 = result;
  v22 = result[2];
  v21 = result[3];
  v23 = v21 >> 1;
  v24 = v22 + 1;
  if (v21 >> 1 <= v22)
    goto LABEL_48;
  while (1)
  {
    v26 = v111;
    v25 = v112;
    *(float32x2_t *)&v27 = vmul_f32(*(float32x2_t *)v112.i8, (float32x2_t)vdup_n_s32(0x3F866666u));
    *((float *)&v27 + 2) = v18 * 1.05;
    HIDWORD(v27) = 0;
    v20[2] = v24;
    v28 = &v20[6 * v22];
    v28[2] = v27;
    v28[3] = v26;
    v29 = v110;
    v28[4] = v110;
    v30 = v22 + 2;
    if (v23 < (uint64_t)(v22 + 2))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 2, 1, v20);
      v29 = v110;
      v26 = v111;
      v25 = v112;
      v20 = result;
    }
    *(float32x2_t *)&v31 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F8CCCCDu));
    *((float *)&v31 + 2) = v18 * 1.1;
    HIDWORD(v31) = 0;
    v20[2] = v30;
    v32 = &v20[6 * v24];
    v32[2] = v31;
    v32[3] = v26;
    v32[4] = v29;
    v33 = v20[3];
    v34 = v22 + 3;
    if ((uint64_t)(v22 + 3) > (uint64_t)(v33 >> 1))
    {
      v109 = v31;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v22 + 3, 1, v20);
      v31 = v109;
      v29 = v110;
      v26 = v111;
      v25 = v112;
      v20 = result;
    }
    *(float32x2_t *)&v35 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F933333u));
    *((float *)&v35 + 2) = v18 * 1.15;
    HIDWORD(v35) = 0;
    v20[2] = v34;
    v36 = &v20[6 * v30];
    v36[2] = v35;
    v36[3] = v26;
    v36[4] = v29;
    v37 = v20[3];
    v38 = v22 + 4;
    if ((uint64_t)(v22 + 4) > (uint64_t)(v37 >> 1))
    {
      v109 = v31;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v22 + 4, 1, v20);
      v31 = v109;
      v29 = v110;
      v26 = v111;
      v25 = v112;
      v20 = result;
    }
    __asm { FMOV            V0.2S, #1.25 }
    *(float32x2_t *)&v40 = vmul_f32(*(float32x2_t *)v25.i8, _D0);
    *((float *)&v40 + 2) = v18 * 1.25;
    HIDWORD(v40) = 0;
    v20[2] = v38;
    v41 = &v20[6 * v34];
    v41[2] = v40;
    v41[3] = v26;
    v41[4] = v29;
    v42 = v20[3];
    v43 = v22 + 5;
    if ((uint64_t)(v22 + 5) > (uint64_t)(v42 >> 1))
    {
      v109 = v31;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v22 + 5, 1, v20);
      v31 = v109;
      v29 = v110;
      v26 = v111;
      v25 = v112;
      v20 = result;
    }
    v20[2] = v43;
    v44 = &v20[6 * v38];
    v44[2] = v31;
    v44[3] = v26;
    v44[4] = v29;
    v45 = v20[3];
    v46 = v22 + 6;
    if ((uint64_t)(v22 + 6) > (uint64_t)(v45 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v22 + 6, 1, v20);
      v29 = v110;
      v26 = v111;
      v25 = v112;
      v20 = result;
    }
    v47 = v25;
    v47.i32[3] = 0;
    v20[2] = v46;
    v48 = &v20[6 * v43];
    v48[2] = v47;
    v48[3] = v26;
    v48[4] = v29;
    v49 = v20[3];
    v50 = v22 + 7;
    if ((uint64_t)(v22 + 7) > (uint64_t)(v49 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v22 + 7, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v51 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F666666u));
    *((float *)&v51 + 2) = v18 * 0.9;
    HIDWORD(v51) = 0;
    v20[2] = v50;
    v52 = &v20[6 * v46];
    v52[2] = v51;
    v52[3] = v26;
    v52[4] = v29;
    v53 = v20[3];
    v54 = v22 + 8;
    if ((uint64_t)(v22 + 8) > (uint64_t)(v53 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v22 + 8, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v55 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    *((float *)&v55 + 2) = v18 * 0.8;
    HIDWORD(v55) = 0;
    v20[2] = v54;
    v56 = &v20[6 * v50];
    v56[2] = v55;
    v56[3] = v26;
    v56[4] = v29;
    v57 = v20[3];
    v58 = v22 + 9;
    if ((uint64_t)(v22 + 9) > (uint64_t)(v57 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v22 + 9, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v59 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F333333u));
    *((float *)&v59 + 2) = v18 * 0.7;
    HIDWORD(v59) = 0;
    v20[2] = v58;
    v60 = &v20[6 * v54];
    v60[2] = v59;
    v60[3] = v26;
    v60[4] = v29;
    v61 = v20[3];
    v62 = v22 + 10;
    if ((uint64_t)(v22 + 10) > (uint64_t)(v61 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v22 + 10, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v63 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F19999Au));
    *((float *)&v63 + 2) = v18 * 0.6;
    HIDWORD(v63) = 0;
    v20[2] = v62;
    v64 = &v20[6 * v58];
    v64[2] = v63;
    v64[3] = v26;
    v64[4] = v29;
    v65 = v20[3];
    v66 = v22 + 11;
    if ((uint64_t)(v22 + 11) > (uint64_t)(v65 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v22 + 11, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v67 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)0x3F0000003F000000);
    *((float *)&v67 + 2) = v18 * 0.5;
    HIDWORD(v67) = 0;
    v20[2] = v66;
    v68 = &v20[6 * v62];
    v68[2] = v67;
    v68[3] = v26;
    v68[4] = v29;
    v69 = v20[3];
    v70 = v22 + 12;
    if ((uint64_t)(v22 + 12) > (uint64_t)(v69 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v69 > 1), v22 + 12, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v71 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3ECCCCCDu));
    *((float *)&v71 + 2) = v18 * 0.4;
    HIDWORD(v71) = 0;
    v20[2] = v70;
    v72 = &v20[6 * v66];
    v72[2] = v71;
    v72[3] = v26;
    v72[4] = v29;
    v73 = v20[3];
    v74 = v22 + 13;
    if ((uint64_t)(v22 + 13) > (uint64_t)(v73 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v73 > 1), v22 + 13, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v75 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3E99999Au));
    *((float *)&v75 + 2) = v18 * 0.3;
    HIDWORD(v75) = 0;
    v20[2] = v74;
    v76 = &v20[6 * v70];
    v76[2] = v75;
    v76[3] = v26;
    v76[4] = v29;
    v77 = v20[3];
    v78 = v22 + 14;
    if ((uint64_t)(v22 + 14) > (uint64_t)(v77 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v22 + 14, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v79 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
    *((float *)&v79 + 2) = v18 * 0.2;
    HIDWORD(v79) = 0;
    v20[2] = v78;
    v80 = &v20[6 * v74];
    v80[2] = v79;
    v80[3] = v26;
    v80[4] = v29;
    v81 = v20[3];
    v24 = v22 + 15;
    if ((uint64_t)(v22 + 15) > (uint64_t)(v81 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v81 > 1), v22 + 15, 1, v20);
      v29 = v110;
      v26 = v111;
      v25.i64[0] = v112.i64[0];
      v20 = result;
    }
    *(float32x2_t *)&v82 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
    *((float *)&v82 + 2) = v18 * 0.1;
    HIDWORD(v82) = 0;
    v20[2] = v24;
    v83 = &v20[6 * v78];
    v83[2] = v82;
    v83[3] = v26;
    v83[4] = v29;
    v113 = v20;
    if ((a3 & 1) == 0)
    {
LABEL_45:
      MEMORY[0x24BDAC7A8](result);
      *(float *)&v100[4] = a7;
      v101 = &v113;
      v102 = a2 & 1;
      v103 = a3 & 1;
      v104 = v96;
      v105 = v18;
      v106 = v97;
      v107 = v98;
      v108 = a1;
      v99 = specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:), (uint64_t)v100, 0xD000000000000013, 0x800000021BE826B0);
      swift_bridgeObjectRelease();
      return v99;
    }
    v21 = v22 + 14;
    if (__OFSUB__(v24, 1))
      break;
    if ((uint64_t)v21 < 1)
      goto LABEL_45;
    v84 = 0;
    v85 = v20 + 92;
    v86 = (__int128 *)&v20[6 * v22 + 92];
    v87 = 8;
    while (1)
    {
      v88 = v20[2];
      if (v84 >= v88)
        break;
      if (v21 >= v88)
        goto LABEL_47;
      v89 = *(_OWORD *)&v20[v87];
      v90 = (__int128 *)&v85[v87 - 94];
      v91 = *v90;
      v92 = (__int128 *)&v85[v87 - 96];
      v93 = *v92;
      v94 = *(v86 - 1);
      v95 = *v86;
      *v92 = *(v86 - 2);
      *v90 = v94;
      *(_OWORD *)&v20[v87] = v95;
      *(v86 - 2) = v93;
      *(v86 - 1) = v91;
      *v86 = v89;
      v86 -= 3;
      ++v84;
      --v21;
      v87 += 6;
      if (v84 >= (uint64_t)v21)
      {
        v113 = v20;
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v24, 1, v20);
    v20 = result;
    v21 = result[3];
    v23 = v21 >> 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_21BE1C204()
{
  return objectdestroy_2Tm_1((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for closure #1 in __RKEntityShowAction.perform(with:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for __RKEntityHideAction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKEntityShowAction()
{
  return objc_opt_self();
}

uint64_t sub_21BE1C25C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in __RKEntityHideAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #2 in __RKEntityHideAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32));
}

uint64_t partial apply for closure #3 in __RKEntityHideAction.perform(with:)(uint64_t *a1)
{
  return closure #3 in __RKEntityHideAction.perform(with:)(a1);
}

uint64_t sub_21BE1C2C8()
{
  return objectdestroy_2Tm_1((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_2Tm_1(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in __RKEntityHideAction.perform(with:)()
{
  return closure #5 in __RKEntityHideAction.perform(with:)();
}

uint64_t partial apply for closure #1 in __RKEntityHideAction.perform(with:)()
{
  return closure #1 in __RKEntityHideAction.perform(with:)();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityActionAnimationStyle()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityActionAnimationStyle] and conformance [A], &demangling cache variable for type metadata for [__RKEntityActionAnimationStyle], MEMORY[0x24BEE12E0]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityShowActionBuildInAnimationType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityShowActionBuildInAnimationType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityShowActionBuildInAnimationType], MEMORY[0x24BEE12E0]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityHideActionBuildOutAnimationType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityHideActionBuildOutAnimationType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityHideActionBuildOutAnimationType], MEMORY[0x24BEE12E0]);
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionAnimationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BE1C4C8 + 4 * byte_21BE8018A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BE1C4FC + 4 * byte_21BE80185[v4]))();
}

uint64_t sub_21BE1C4FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE1C504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE1C50CLL);
  return result;
}

uint64_t sub_21BE1C518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE1C520);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BE1C524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE1C52C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionAnimationStyle()
{
  return &type metadata for __RKEntityActionAnimationStyle;
}

ValueMetadata *type metadata accessor for __RKEntityShowActionBuildInAnimationType()
{
  return &type metadata for __RKEntityShowActionBuildInAnimationType;
}

uint64_t storeEnumTagSinglePayload for __RKEntityShowActionBuildInAnimationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_21BE1C5A8 + 4 * byte_21BE80194[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_21BE1C5DC + 4 * byte_21BE8018F[v4]))();
}

uint64_t sub_21BE1C5DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE1C5E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE1C5ECLL);
  return result;
}

uint64_t sub_21BE1C5F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE1C600);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_21BE1C604(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE1C60C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityHideActionBuildOutAnimationType()
{
  return &type metadata for __RKEntityHideActionBuildOutAnimationType;
}

uint64_t method lookup function for __RKEntityVisibilityAction()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for __RKEntitySetOpacityAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntitySetOpacityAction.__allocating_init(targetEntity:duration:opacity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 840))();
}

uint64_t method lookup function for __RKEntityShowAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityShowAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1192))();
}

uint64_t method lookup function for __RKEntityHideAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityHideAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1224))();
}

uint64_t partial apply for closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)@<X0>(uint64_t *a1@<X8>)
{
  __n128 *v1;

  return closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)(v1[1].n128_i64[1], v1[2].n128_i8[1], a1, v1[2].n128_u32[1], v1[2].n128_u32[2], v1[2].n128_u32[3], v1[3], v1[4]);
}

uint64_t partial apply for implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:)()
{
  return implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:)();
}

void specialized __RKEntitySetOpacityAction.updateFade(_:)()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  unint64_t v5;
  void *v6;
  Class isa;
  float v8;
  double v9;
  float v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v16;
  float v17;
  uint64_t v18;
  char v19;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 24))
      REEngineGetCurrentTime();
    else
      v2 = CACurrentMediaTime();
    *(double *)(v0 + 112) = v2;
    *(_BYTE *)(v0 + 120) = 0;
    swift_beginAccess();
    if (*(_QWORD *)(v0 + 16))
    {
      swift_retain();
      v5 = Entity.opacity.getter();
      swift_release();
      *(_DWORD *)(v0 + 192) = v5;
      *(_BYTE *)(v0 + 196) = BYTE4(v5) & 1;
      if ((v5 & 0x100000000) == 0)
      {
        v8 = *(float *)&v5;
        goto LABEL_29;
      }
      v6 = *(void **)(v0 + 16);
      *(_DWORD *)(v1 + 192) = 1065353216;
      *(_BYTE *)(v1 + 196) = 0;
      if (v6)
      {
        swift_retain();
        isa = Float._bridgeToObjectiveC()().super.super.isa;
        swift_beginAccess();
        objc_setAssociatedObject(v6, &static Entity.AssociatedObjectKeys.opacity, isa, (void *)1);
        swift_endAccess();
        swift_release();

        v8 = *(float *)(v1 + 192);
        if (*(_BYTE *)(v1 + 196))
          v8 = 1.0;
        goto LABEL_29;
      }
    }
    else
    {
      *(_DWORD *)(v0 + 192) = 1065353216;
      *(_BYTE *)(v0 + 196) = 0;
    }
    v8 = 1.0;
LABEL_29:
    *(float *)(v1 + 200) = (float)(v8 - *(float *)(v1 + 148)) / (float)(*(float *)(v1 + 144) * 60.0);
    *(_BYTE *)(v1 + 204) = 0;
    return;
  }
  v3 = *(double *)(v0 + 112);
  if (*(_QWORD *)(v0 + 24))
    REEngineGetCurrentTime();
  else
    v4 = CACurrentMediaTime();
  v9 = v4 - v3;
  v10 = *(float *)(v0 + 144);
  v11 = v10;
  if (v9 > v10)
    v9 = v10;
  if (v9 <= 0.0)
  {
    v9 = 0.0;
    if (v10 <= 0.0)
    {
LABEL_18:
      specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v0 + 148));
      if (*(float *)(v0 + 148) == 0.0)
      {
        swift_beginAccess();
        v12 = *(_QWORD *)(v0 + 16);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 16);
          swift_retain();
          MEMORY[0x22076D154](v13, 0);
          RENetworkMarkEntityMetadataDirty();
          RERenderOptionsComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          RERenderOptionsComponentSetVisibilityMode();
          RENetworkMarkComponentDirty();
          swift_release();
        }
      }
      swift_beginAccess();
      v14 = *(_QWORD *)(v1 + 96);
      v15 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 2;
      *(_BYTE *)(v1 + 104) = 1;
      v18 = v14;
      v19 = v15;
      __RKEntityAction.state.didset((uint64_t)&v18);
      return;
    }
  }
  else if (v9 >= v11)
  {
    goto LABEL_18;
  }
  v16 = *(float *)(v0 + 192);
  if (*(_BYTE *)(v0 + 196))
    v16 = 1.0;
  v17 = v9 / v11 * (float)(*(float *)(v0 + 148) - v16) + v16;
  specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v17);
}

uint64_t partial apply for implicit closure #2 in closure #2 in __RKEntitySetOpacityAction.perform(with:)()
{
  int v0;

  return implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)(v0, 21, 0xD000000000000013, (void *)0x800000021BE94F00);
}

uint64_t __RKSoundTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKSoundTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKSoundTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKSoundTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKSoundTrigger()
{
  return objc_opt_self();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVAudioFormat.validateAudioFormatSupportsMultiChannel()()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_settings);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v3 + 16) || (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) == 0))
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v12);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError();
    swift_allocError();
    *v11 = 0;
    goto LABEL_13;
  }
  v8 = v14;
  if (one-time initialization token for aacFormats != -1)
    swift_once();
  if (specialized Set.contains(_:)(v8, static AVAudioFormat.aacFormats)
    && objc_msgSend(v1, sel_channelCount) >= 3)
  {
    lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError();
    swift_allocError();
    *v9 = v1;
    v10 = v1;
LABEL_13:
    swift_willThrow();
  }
}

uint64_t one-time initialization function for aacFormats()
{
  uint64_t result;

  result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for aacFormats);
  static AVAudioFormat.aacFormats = result;
  return result;
}

unint64_t AVAudioFormat.ValidationError.errorDescription.getter(void *a1)
{
  id v3;
  Swift::String v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (a1)
  {
    if (a1 == (void *)1)
      return 0xD00000000000001CLL;
    *(_QWORD *)&v17 = 0;
    *((_QWORD *)&v17 + 1) = 0xE000000000000000;
    v3 = a1;
    _StringGuts.grow(_:)(105);
    v19 = 0;
    v20 = 0xE000000000000000;
    v4._object = (void *)0x800000021BE95000;
    v4._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v4);
    v5 = objc_msgSend(v3, sel_settings);
    v6 = MEMORY[0x24BEE0D00];
    v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(_QWORD *)(v7 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9), (v11 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)&v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v16 + 1))
      {
        outlined init with take of Any(&v15, &v17);
LABEL_12:
        _print_unlocked<A, B>(_:_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
        v12._countAndFlagsBits = 0x2073616820;
        v12._object = (void *)0xE500000000000000;
        String.append(_:)(v12);
        LODWORD(v17) = objc_msgSend(v3, sel_channelCount);
        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14._countAndFlagsBits = 0xD00000000000004ELL;
        v14._object = (void *)0x800000021BE95020;
        String.append(_:)(v14);
        outlined consume of AVAudioFormat.ValidationError(a1);
        return v19;
      }
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v18 = v6;
    *(_QWORD *)&v17 = 4999502;
    *((_QWORD *)&v17 + 1) = 0xE300000000000000;
    outlined destroy of Any?((uint64_t)&v15);
    goto LABEL_12;
  }
  return 0xD00000000000002DLL;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AVAudioFormat.ValidationError()
{
  void **v0;

  return AVAudioFormat.ValidationError.errorDescription.getter(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AVAudioFormat.ValidationError(void **a1, void **a2)
{
  void *v2;
  void *v3;
  char v6;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
    return v3 == 0;
  if (v2 == (void *)1)
    return v3 == (void *)1;
  if ((unint64_t)v3 < 2)
    return 0;
  type metadata accessor for NSObject();
  outlined copy of AVAudioFormat.ValidationError(v2);
  outlined copy of AVAudioFormat.ValidationError(v3);
  v6 = static NSObject.== infix(_:_:)();
  outlined consume of AVAudioFormat.ValidationError(v3);
  outlined consume of AVAudioFormat.ValidationError(v2);
  return v6 & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for AVAudioFormat.ValidationError(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for AVAudioFormat.ValidationError(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for AVAudioFormat.ValidationError(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **assignWithTake for AVAudioFormat.ValidationError(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for AVAudioFormat.ValidationError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AVAudioFormat.ValidationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AVAudioFormat.ValidationError()
{
  return &type metadata for AVAudioFormat.ValidationError;
}

void outlined consume of AVAudioFormat.ValidationError(id a1)
{
  if ((unint64_t)a1 >= 2)

}

id outlined copy of AVAudioFormat.ValidationError(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t HasHierarchy.parent.getter()
{
  uint64_t Parent;
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  Parent = REEntityGetParent();
  if (!Parent)
    return 0;
  v1 = Parent;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      v3 = (*(uint64_t (**)(void))(v5 + 232))();
      v6 = *(_QWORD *)(v3 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v3 + 16) = v1;
      MEMORY[0x22076D160](v1, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(v1);
  }
  __break(1u);
  return result;
}

uint64_t HasHierarchy.children.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t HasHierarchy.setParent(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void *v14;
  uint64_t SceneNullable;
  uint64_t v16;
  id v17;
  float32x4_t v18;
  _OWORD v19[3];
  char v20;

  v3 = v2;
  result = HasHierarchy.parent.getter();
  if (!result)
  {
    if (!a1)
      return result;
    goto LABEL_6;
  }
  if (a1)
  {
    if (*(_QWORD *)(result + 16) == *(_QWORD *)(a1 + 16))
      return swift_release();
LABEL_6:
    if ((a2 & 1) != 0)
    {
      v7 = one-time initialization token for identity;
      swift_retain();
      if (v7 != -1)
        swift_once();
      v18 = (float32x4_t)static simd_quatf.identity;
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v3, a1);
      specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v18, 1.0);
      REMakeSRTFromMatrix();
      v19[0] = v8;
      v19[1] = v9;
      v19[2] = v10;
      v20 = 0;
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v19);
      swift_release();
    }
    else
    {
      swift_retain();
    }
    REEntitySetParent();
    if (swift_conformsToProtocol2())
      v11 = v3;
    else
      v11 = 0;
    if (v11)
    {
      swift_beginAccess();
      v12 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v12[2])
        {
          swift_retain();
          v13 = (id)RFServiceManagerGetAnchorManagementService();
          if (v13)
          {
            v14 = v13;
            SceneNullable = REEntityGetSceneNullable();
            if (SceneNullable)
            {
              v16 = SceneNullable;
              v17 = (id)RESceneGetSwiftObject();
              type metadata accessor for Scene();
              if (v17)
              {
                swift_dynamicCastClassUnconditional();
              }
              else
              {
                swift_allocObject();
                Scene.init(coreScene:)(v16);
              }
              swift_release();
              RFAnchorManagementUpdateAnchoringInScene();
            }

          }
          swift_release();
        }
      }
    }
    type metadata accessor for Entity();
    static Entity.updateInteractions(root:)(v3);
    Entity.updateSceneGravityIfNeeded()();
    swift_release();
    return swift_release();
  }
  *(_QWORD *)&v19[0] = result;
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v2, a2 & 1);
  return swift_release();
}

Swift::Void __swiftcall HasHierarchy.removeFromParent(preservingWorldTransform:)(Swift::Bool preservingWorldTransform)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = HasHierarchy.parent.getter();
  v4 = swift_release();
  if (v3)
  {
    HasHierarchy.setParent(_:preservingWorldTransform:)(0, preservingWorldTransform);
  }
  else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v4))
  {
    swift_conformsToProtocol2();
    RESceneRemoveEntity();
    swift_release();
  }
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return HasHierarchy.addChild(_:preservingWorldTransform:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Entity.ChildCollection.doAppend(_:preservingWorldTransform:));
}

uint64_t HasHierarchy.children.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(v1 + 16);
  result = swift_release();
  if (v2 != v3)
    __break(1u);
  return result;
}

uint64_t (*HasHierarchy.children.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  swift_retain();
  return destroy for __ImageBasedLightComponent;
}

uint64_t HasHierarchy.removeChild(_:preservingWorldTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return HasHierarchy.addChild(_:preservingWorldTransform:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Entity.ChildCollection.doRemove(_:preservingWorldTransform:));
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  swift_retain();
  a5(a1, a2);
  return swift_release();
}

uint64_t sub_21BE1D710@<X0>(_QWORD *a1@<X8>)
{
  return HasHierarchy.children.getter(a1);
}

uint64_t sub_21BE1D730(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  return HasHierarchy.children.setter((uint64_t)&v2);
}

uint64_t sub_21BE1D768()
{
  return 16;
}

__n128 sub_21BE1D774(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PortalCrossingComponent()
{
  REPortalCrossingFlagsComponentSetEnabled();
  REPortalCrossingFlagsComponentSetInherited();
  return RENetworkMarkComponentDirty();
}

uint64_t PortalCrossingComponent.__toCore(_:)()
{
  REPortalCrossingFlagsComponentSetEnabled();
  REPortalCrossingFlagsComponentSetInherited();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PortalCrossingComponent(_DWORD *a1@<X8>)
{
  *a1 = 5001;
}

void static PortalCrossingComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5001;
}

ValueMetadata *type metadata accessor for PortalCrossingComponent()
{
  return &type metadata for PortalCrossingComponent;
}

RealityFoundation::PhysicsJointsComponent __swiftcall PhysicsJointsComponent.init()()
{
  _QWORD *v0;
  uint64_t v1;
  RealityFoundation::PhysicsJointsComponent result;

  v1 = MEMORY[0x24BEE4AF8];
  *v0 = 0;
  v0[1] = v1;
  return result;
}

void static PhysicsJointsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4012;
}

uint64_t PhysicsJointsComponent.joints.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PhysicsJointsComponent.joints.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*PhysicsJointsComponent.joints.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicsJointsComponent.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v2 = a1[1];
  v3 = *a2;
  v4 = a2[1];
  v7[0] = *a1;
  v7[1] = v2;
  v6[0] = v3;
  v6[1] = v4;
  return specialized static PhysicsJoints.== infix(_:_:)((uint64_t)v7, (uint64_t)v6) & 1;
}

Swift::Int protocol witness for static Component.__fromCore(_:) in conformance PhysicsJointsComponent(Swift::OpaquePointer *a1)
{
  return PhysicsJointsComponent.init(_:)((Swift::OpaquePointer)a1->_rawValue).joints.startIndex;
}

uint64_t static PhysicsJointsComponent.__fromCore(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char IsJointAtIndexActive;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];
  _BYTE v10[48];
  _BYTE v11[40];
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = MEMORY[0x24BEE4AF8];
  result = REPhysicsJointsComponentGetJointCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (result)
    {
      v4 = 0;
      do
      {
        REPhysicsJointsComponentGetPhysicsJointDefinitionAtIndex();
        IsJointAtIndexActive = REPhysicsJointsComponentIsJointAtIndexActive();
        static PhysicsJointCreator.createJointDefinition(fromCoreJointDefinition:isActive:)(IsJointAtIndexActive, (uint64_t)v11);
        v6 = *(_QWORD *)(v13 + 16);
        outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
        outlined init with copy of CollectionOfOne<PhysicsJoint>((uint64_t)v10, (uint64_t)v9);
        specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v9);
        outlined destroy of CollectionOfOne<PhysicsJoint>((uint64_t)v10);
        RERelease();
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
        ++v4;
      }
      while (v3 != v4);
      v7 = v12;
      v8 = v13;
    }
    else
    {
      v7 = 0;
      v8 = MEMORY[0x24BEE4AF8];
    }
    *a1 = v7;
    a1[1] = v8;
  }
  return result;
}

uint64_t PhysicsJointsComponent.__toCore(_:)()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[5];

  v2 = *v0;
  v1 = v0[1];
  REPhysicsJointDefinitionArrayCreate();
  v3 = *(_QWORD *)(v1 + 16);
  if (v2 == v3)
  {
LABEL_8:
    REPhysicsJointsComponentSetPhysicsJointDefinitionArray();
    RERelease();
    return RENetworkMarkComponentDirty();
  }
  else
  {
    result = swift_bridgeObjectRetain();
    v5 = v1 + 40 * v2 + 32;
    v6 = v2;
    while ((v2 & 0x8000000000000000) == 0)
    {
      if (v6 >= v3)
        goto LABEL_10;
      outlined init with copy of __REAssetService(v5, (uint64_t)v7);
      specialized static PhysicsJointCreator.createCoreJointDefinition(fromDefinition:jointsComponentEntity:)(v7);
      REPhysicsJointDefinitionArrayAddPhysicsJointDefinition();
      RERelease();
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      ++v6;
      v3 = *(_QWORD *)(v1 + 16);
      v5 += 40;
      if (v6 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsJointsComponent(_DWORD *a1@<X8>)
{
  *a1 = 4012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsJointsComponent(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v2 = a1[1];
  v3 = *a2;
  v4 = a2[1];
  v7[0] = *a1;
  v7[1] = v2;
  v6[0] = v3;
  v6[1] = v4;
  return specialized static PhysicsJoints.== infix(_:_:)((uint64_t)v7, (uint64_t)v6) & 1;
}

RealityFoundation::PhysicsJointsComponent __swiftcall PhysicsJointsComponent.init(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v1;
  _QWORD *v2;
  Swift::Int JointCount;
  void *v4;
  Swift::Int v5;
  uint64_t v6;
  char IsJointAtIndexActive;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  RealityFoundation::PhysicsJointsComponent result;
  _BYTE v12[40];
  _BYTE v13[48];
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v15 = 0;
  v16 = MEMORY[0x24BEE4AF8];
  JointCount = REPhysicsJointsComponentGetJointCount();
  if (JointCount < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = JointCount;
    if (JointCount)
    {
      v6 = 0;
      do
      {
        REPhysicsJointsComponentGetPhysicsJointDefinitionAtIndex();
        IsJointAtIndexActive = REPhysicsJointsComponentIsJointAtIndexActive();
        static PhysicsJointCreator.createJointDefinition(fromCoreJointDefinition:isActive:)(IsJointAtIndexActive, (uint64_t)v14);
        v8 = *(_QWORD *)(v16 + 16);
        outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
        outlined init with copy of CollectionOfOne<PhysicsJoint>((uint64_t)v13, (uint64_t)v12);
        specialized Array.replaceSubrange<A>(_:with:)(v8, v8, (uint64_t)v12);
        outlined destroy of CollectionOfOne<PhysicsJoint>((uint64_t)v13);
        RERelease();
        JointCount = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        ++v6;
      }
      while (v5 != v6);
      v9 = v15;
      v10 = v16;
    }
    else
    {
      v9 = 0;
      v10 = MEMORY[0x24BEE4AF8];
    }
    *v2 = v9;
    v2[1] = v10;
  }
  result.joints.elements._rawValue = v4;
  result.joints.startIndex = JointCount;
  return result;
}

uint64_t outlined init with copy of CollectionOfOne<PhysicsJoint>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PhysicsJointsComponent()
{
  return &type metadata for PhysicsJointsComponent;
}

uint64_t __RKEntityPlacementTrigger.matches(with:)(uint64_t a1)
{
  return __RKEntityPlacementTrigger.matches(with:)(a1, (void (*)(void))type metadata accessor for __RKEntityPlacementTrigger, (uint64_t (*)(uint64_t))__RKEntityPlacementTrigger.matches(with:));
}

uint64_t __RKEntityPlacementTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEntityRemovalTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t type metadata accessor for __RKEntityPlacementTrigger()
{
  return objc_opt_self();
}

uint64_t __RKEntityRemovalTrigger.matches(with:)(uint64_t a1)
{
  return __RKEntityPlacementTrigger.matches(with:)(a1, (void (*)(void))type metadata accessor for __RKEntityRemovalTrigger, (uint64_t (*)(uint64_t))__RKEntityRemovalTrigger.matches(with:));
}

uint64_t __RKEntityPlacementTrigger.matches(with:)(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;

  a2();
  if (swift_dynamicCastClass())
    return 1;
  type metadata accessor for __RKEntityTriggerGroup();
  v5 = swift_dynamicCastClass();
  if (!v5)
    return 0;
  v6 = v5;
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 >> 62)
  {
LABEL_30:
    swift_retain();
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (!result)
      goto LABEL_14;
  }
  else
  {
    v4 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_release();
      return v4;
    }
  }
  v9 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    v10 = MEMORY[0x220769770](0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v10 = *(_QWORD *)(v7 + 32);
    swift_retain();
  }
  v11 = a3(v10);
  result = swift_release();
  if ((v11 & 1) != 0)
  {
LABEL_10:
    v4 = 1;
    goto LABEL_14;
  }
  if (v4 == 1)
  {
    v4 = 0;
    goto LABEL_14;
  }
  if (v9)
  {
    v12 = MEMORY[0x220769770](1, v7);
    goto LABEL_20;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v12 = *(_QWORD *)(v7 + 40);
    swift_retain();
LABEL_20:
    v13 = a3(v12);
    result = swift_release();
    if ((v13 & 1) == 0)
    {
      v14 = 0;
      v15 = v4 - 2;
      while (1)
      {
        v4 = v15 != v14;
        if (v15 == v14)
          goto LABEL_14;
        v18 = v14 + 2;
        if (v9)
        {
          v16 = MEMORY[0x220769770](v14 + 2, v7);
          if (__OFADD__(v18, 1))
            goto LABEL_29;
        }
        else
        {
          if (v18 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_34;
          v16 = *(_QWORD *)(v7 + 8 * v14 + 48);
          swift_retain();
          if (__OFADD__(v18, 1))
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        v17 = a3(v16);
        result = swift_release();
        ++v14;
        if ((v17 & 1) != 0)
          goto LABEL_14;
      }
    }
    goto LABEL_10;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for __RKEntityRemovalTrigger()
{
  return objc_opt_self();
}

uint64_t @objc __RKEntityPlacementTrigger.copy(with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result;

  a4();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityRemovalTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEntityRemovalTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKEntityInteraction.__allocating_init(trigger:action:accessibilityDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  type metadata accessor for __RKEntityInteraction();
  v8 = swift_allocObject();
  __RKEntityInteraction.init(trigger:action:)(a1, a2);
  swift_beginAccess();
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 56) = a4;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t __RKEntityInteraction.enabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t __RKEntityInteraction.enabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 40) = a1;
  return result;
}

uint64_t (*__RKEntityInteraction.enabled.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __RKEntityInteraction.accessibilityDescription : __RKEntityInteraction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 56) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityInteraction.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityInteraction.accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityInteraction.__allocating_init(trigger:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  __RKEntityInteraction.init(trigger:action:)(a1, a2);
  return v4;
}

uint64_t type metadata accessor for __RKEntityInteraction()
{
  return objc_opt_self();
}

uint64_t __RKEntityInteraction.init(trigger:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t inited;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = (uint64_t *)(v2 + 24);
  *(_BYTE *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(inited + 32) = a1;
  v30 = inited;
  specialized Array._endMutation()();
  v7 = v30;
  type metadata accessor for __RKEntityTriggerGroup();
  v8 = swift_dynamicCastClass();
  swift_retain_n();
  if (v8)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v7 = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
    result = swift_release();
  }
  else
  {
    result = swift_retain();
  }
  if (v7 >> 62)
    goto LABEL_40;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
  {
LABEL_41:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return v29;
  }
  while (2)
  {
    if (v10 >= 1)
    {
      swift_beginAccess();
      v11 = 0;
      while (1)
      {
        if ((v7 & 0xC000000000000001) != 0)
          MEMORY[0x220769770](v11, v7);
        else
          swift_retain();
        type metadata accessor for __RKEntityProximityTrigger();
        v12 = swift_dynamicCastClass();
        if (!v12)
          goto LABEL_31;
        v13 = v12;
        v14 = swift_beginAccess();
        v15 = *(unsigned __int8 *)(v13 + 36);
        if (v15 == 1)
          break;
        if (v15 != 2)
          goto LABEL_31;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 432))(v14);
        swift_release();
        if (v16)
        {
          swift_beginAccess();
          *(_BYTE *)(v16 + 88) = 1;
          *(_QWORD *)(v29 + 32) = v16;
LABEL_31:
          swift_release();
        }
        if (v10 == ++v11)
          goto LABEL_41;
      }
      type metadata accessor for __RKEntityActionGroup();
      v17 = swift_dynamicCastClass();
      if (!v17)
        goto LABEL_31;
      v18 = v17;
      v19 = (uint64_t *)(v17 + 112);
      swift_beginAccess();
      v20 = *(_QWORD *)(v18 + 112);
      if (v20 >> 62)
      {
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v28 == 2)
          goto LABEL_19;
      }
      else
      {
        v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_retain();
        if (v21 == 2)
        {
LABEL_19:
          v22 = *v19;
          if ((*v19 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v23 = MEMORY[0x220769770](0, v22);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              swift_bridgeObjectRetain();
              v10 = _CocoaArrayWrapper.endIndex.getter();
              result = swift_bridgeObjectRelease();
              if (!v10)
                goto LABEL_41;
              continue;
            }
            v23 = *(_QWORD *)(v22 + 32);
            swift_retain();
          }
          *v5 = v23;
          swift_release();
          v24 = *v19;
          if ((*v19 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v25 = MEMORY[0x220769770](1, v24);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
              goto LABEL_38;
            v25 = *(_QWORD *)(v24 + 40);
            swift_retain();
          }
          swift_beginAccess();
          *(_BYTE *)(v25 + 88) = 1;
          swift_release();
          v26 = *v19;
          if ((v26 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v27 = MEMORY[0x220769770](1, v26);
          }
          else
          {
            if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
              goto LABEL_39;
            v27 = *(_QWORD *)(v26 + 40);
            swift_bridgeObjectRetain();
            swift_retain();
          }
          swift_release_n();
          swift_release();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v29 + 32) = v27;
          goto LABEL_31;
        }
      }
      swift_release();
      swift_release();
      goto LABEL_31;
    }
    break;
  }
  __break(1u);
  return result;
}

void __RKEntityInteraction.fire(context:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  _BYTE *v10;
  uint64_t j;
  uint64_t v12;
  _BYTE *v13;
  objc_class *v14;
  char *v15;
  id v16;
  objc_super v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE50AD0;
  swift_beginAccess();
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v2 + 16);
  v19[0] = inited;
  specialized Array._endMutation()();
  type metadata accessor for __RKEntityTriggerGroup();
  v6 = swift_dynamicCastClass();
  swift_retain();
  if (v6)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    inited = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_release();
  }
  if (inited >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      goto LABEL_21;
  }
  else
  {
    v7 = *(_QWORD *)((inited & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      goto LABEL_21;
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  if ((inited & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v7; ++i)
    {
      MEMORY[0x220769770](i, inited);
      type metadata accessor for __RKEntityProximityTrigger();
      v9 = swift_dynamicCastClass();
      if (v9
        && (v10 = (_BYTE *)v9, swift_beginAccess(), v10[36] - 1 <= 1)
        && (swift_beginAccess(), v10[38] == 1))
      {
        swift_beginAccess();
        v10[18] = 1;
        swift_unknownObjectRelease();
        swift_beginAccess();
        *(_BYTE *)(v3 + 18) = 1;
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    type metadata accessor for __RKEntityProximityTrigger();
    for (j = 0; j != v7; ++j)
    {
      v12 = swift_dynamicCastClass();
      if (v12)
      {
        v13 = (_BYTE *)v12;
        swift_beginAccess();
        if (v13[36] - 1 <= 1)
        {
          swift_beginAccess();
          if (v13[38] == 1)
          {
            swift_beginAccess();
            v13[18] = 1;
            swift_beginAccess();
            *(_BYTE *)(v3 + 18) = 1;
          }
        }
      }
    }
  }
LABEL_21:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 32) && (swift_beginAccess(), *(_BYTE *)(v3 + 18) == 1))
  {
    v19[0] = v3;
    v19[1] = v4;
    swift_retain();
    __RKEntityAction.performAction(with:)(v19);
    swift_release();
    *(_BYTE *)(v3 + 18) = 0;
  }
  else
  {
    swift_beginAccess();
    v18[0] = v3;
    v18[1] = v4;
    swift_retain();
    __RKEntityAction.performAction(with:)(v18);
    swift_release();
  }
  v14 = (objc_class *)type metadata accessor for RKEntityInteractionAccessibilityWrapper();
  v15 = (char *)objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR____TtC17RealityFoundation39RKEntityInteractionAccessibilityWrapper_interaction] = v2;
  v17.receiver = v15;
  v17.super_class = v14;
  swift_retain();
  v16 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v16, sel_didFire);

}

uint64_t type metadata accessor for RKEntityInteractionAccessibilityWrapper()
{
  return objc_opt_self();
}

uint64_t __RKEntityInteraction.description.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  Swift::String v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[5];

  strcpy((char *)v10, "Interaction: ");
  HIWORD(v10[1]) = -4864;
  swift_beginAccess();
  v1 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 192);
  v2 = swift_retain();
  v3._countAndFlagsBits = v1(v2);
  String.append(_:)(v3);
  swift_release();
  swift_bridgeObjectRelease();
  v10[3] = 32;
  v10[4] = 0xE100000000000000;
  swift_beginAccess();
  v4 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 24) + 440);
  v5 = swift_retain();
  v6._countAndFlagsBits = v4(v5);
  String.append(_:)(v6);
  swift_release();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 10;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t __RKEntityInteraction.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = (void **)(v2 + 16);
  swift_beginAccess();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 200);
  swift_retain();
  v7 = v6(a1, a2);
  swift_release();
  swift_beginAccess();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 472);
  swift_retain();
  v9 = v8(a1, a2);
  v11 = v10;
  swift_release();
  if (!v7)
  {
    if (v9)
    {
      if ((v11 & 1) == 0)
        goto LABEL_8;
      v13 = *v5;
      swift_retain_n();
      objc_msgSend(v13, sel_copyWithZone_, 0);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for __RKEntityTrigger();
      if (swift_dynamicCast())
      {
        type metadata accessor for __RKEntityInteraction();
        v12 = swift_allocObject();
        __RKEntityInteraction.init(trigger:action:)(v15, v9);
        swift_release_n();
        return v12;
      }
      swift_release_n();
    }
    return 0;
  }
  if (!v9)
  {
LABEL_8:
    swift_release();
    return 0;
  }
  type metadata accessor for __RKEntityInteraction();
  v12 = swift_allocObject();
  __RKEntityInteraction.init(trigger:action:)(v7, v9);
  return v12;
}

uint64_t __RKEntityInteraction.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityInteraction.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityInteraction()
{
  return __RKEntityInteraction.description.getter();
}

uint64_t sub_21BE1EE34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_21BE1EE80@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

uint64_t sub_21BE1EECC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 40);
  return result;
}

uint64_t sub_21BE1EF10(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_21BE1EF50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 56);
  *a2 = *(_QWORD *)(v3 + 48);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for __RKEntityInteraction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityInteraction.trigger.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKEntityInteraction.action.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __RKEntityInteraction.enabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityInteraction.enabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of __RKEntityInteraction.enabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of __RKEntityInteraction.accessibilityDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityInteraction.accessibilityDescription.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of __RKEntityInteraction.accessibilityDescription.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityInteraction.__allocating_init(trigger:action:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityInteraction.fire(context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityInteraction.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityInteraction.clone(matching:newEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

id RKEntityInteractionAccessibilityWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKEntityInteractionAccessibilityWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t InteractionsLogger.init<A>(_:_:)@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t result;

  v3._countAndFlagsBits = opaqueDescriptionOf<A>(_:)(a1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  result = swift_unknownObjectRelease();
  *a2 = 91;
  a2[1] = 0xE100000000000000;
  return result;
}

void InteractionsLogger.debug(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  InteractionsLogger.debug(_:)(a1, a2, (uint64_t (*)(uint64_t (*)(void), uint64_t))MEMORY[0x24BEE7908]);
}

void InteractionsLogger.info(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  InteractionsLogger.debug(_:)(a1, a2, (uint64_t (*)(uint64_t (*)(void), uint64_t))MEMORY[0x24BEE78F0]);
}

void InteractionsLogger.debug(_:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(uint64_t (*)(void), uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7[2];

  v5 = v3[1];
  v7[0] = *v3;
  v7[1] = v5;
  v6 = a3(a1, a2);
  specialized InteractionsLogger.log(_:_:)(v6, v7, a1);
}

void InteractionsLogger.error(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  InteractionsLogger.debug(_:)(a1, a2, (uint64_t (*)(uint64_t (*)(void), uint64_t))MEMORY[0x24BEE7910]);
}

uint64_t opaqueDescriptionOf<A>(_:)(uint64_t a1)
{
  if (!a1)
    return 7104878;
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

void InteractionsLogger.init(_:)(uint64_t *a1@<X8>)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;

  v4 = StaticString.description.getter();
  v5 = v2;
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  *a1 = v4;
  a1[1] = v5;
}

Swift::Void __swiftcall InteractionsLogger.dumpStack()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t *v2;
  void **v3;
  int v4;
  os_log_type_t v5;
  uint64_t v6;
  __objc2_class_ro *v7;
  char **v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  os_log_type_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = v0[1];
  v24 = *v0;
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  v2 = &static __Engine.customComponents;
  if (interactionsLoggingEnabled)
  {
    v3 = (void **)swift_slowAlloc();
    v4 = backtrace(v3, 256);
    v23 = backtrace_symbols(v3, v4);
    if (v23)
    {
      v25 = v24;
      v26 = v1;
      v5 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v5, &v25);
      if (v4 < 0)
      {
        __break(1u);
      }
      else
      {
        if (v4)
        {
          v6 = v4;
          v7 = &RKChangeSceneActionRuntimeTechnique;
          v8 = v23;
          do
          {
            if (*v8++)
            {
              v10 = String.init(cString:)();
              v12 = v11;
            }
            else
            {
              v12 = 0xE300000000000000;
              v10 = 7104878;
            }
            v13 = static os_log_type_t.debug.getter();
            if (*((_BYTE *)v2 + 648) == 1)
            {
              v14 = v13;
              v15 = *(_QWORD *)&v7[23].ivar_base_size;
              swift_bridgeObjectRetain();
              if (v15 != -1)
                swift_once();
              v16 = type metadata accessor for Logger();
              __swift_project_value_buffer(v16, (uint64_t)interactionsLogger);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              v17 = Logger.logObject.getter();
              if (os_log_type_enabled(v17, v14))
              {
                v18 = swift_slowAlloc();
                v19 = swift_slowAlloc();
                v25 = v19;
                *(_DWORD *)v18 = 136315394;
                swift_bridgeObjectRetain();
                *(_QWORD *)(v18 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v1, &v25);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v18 + 12) = 2080;
                swift_bridgeObjectRetain();
                *(_QWORD *)(v18 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v25);
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_21B9AA000, v17, v14, "%s%s", (uint8_t *)v18, 0x16u);
                swift_arrayDestroy();
                v20 = v19;
                v2 = &static __Engine.customComponents;
                MEMORY[0x220772F44](v20, -1, -1);
                v21 = v18;
                v7 = &RKChangeSceneActionRuntimeTechnique;
                MEMORY[0x220772F44](v21, -1, -1);
                swift_bridgeObjectRelease();

              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            --v6;
          }
          while (v6);
        }
        v25 = v24;
        v26 = v1;
        v22 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v22, &v25);
        free(v23);
      }
    }
    JUMPOUT(0x220772F44);
  }
}

void one-time initialization function for interactionsLoggingEnabled()
{
  id v0;
  void *v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x220768C3C](0xD00000000000001CLL, 0x800000021BE95DF0);
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  interactionsLoggingEnabled = v2;
}

uint64_t one-time initialization function for interactionsLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, interactionsLogger);
  __swift_project_value_buffer(v0, (uint64_t)interactionsLogger);
  return Logger.init(subsystem:category:)();
}

void specialized InteractionsLogger.log(_:_:)(os_log_type_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x69796F7274736544, 0xEA0000000000676ELL, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x64657461657243, 0xE700000000000000, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x800000021BE96700, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021BE96720, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x800000021BE96760, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000021BE96740, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021BE96790, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2928706F7473, 0xE600000000000000, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x800000021BE966A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000021BE966E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE96670, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000021BE965C0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000047, 0x800000021BE965E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003CLL, 0x800000021BE96630, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000042, 0x800000021BE963D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6920797469746E65, 0xED00006C696E2073, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x800000021BE96420, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021BE96460, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x800000021BE96440, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x800000021BE96480, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x800000021BE964B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x800000021BE964D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x800000021BE96580, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000021BE960B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, 0x800000021BE96050, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x800000021BE96080, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000021BE96110, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x800000021BE960F0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x800000021BE963A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000021BE96360, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x800000021BE95F70, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x800000021BE95F30, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000021BE95E10, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003DLL, 0x800000021BE95E50, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000043, 0x800000021BE95E90, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004BLL, 0x800000021BE95EE0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002DLL, 0x800000021BE967B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x800000021BE95510, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x800000021BE955F0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004BLL, 0x800000021BE95630, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000021BE95680, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000037, 0x800000021BE95720, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, 0x800000021BE956D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000021BE958A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021BE95760, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000021BE95780, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000021BE957B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021BE957E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x800000021BE95800, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x800000021BE95830, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x800000021BE95880, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000021BE95850, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000021BE958C0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x800000021BE958E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000021BE95900, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x800000021BE95AE0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000021BE95920, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE95940, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x800000021BE95B20, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x800000021BE95B60, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE95B90, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x800000021BE95BC0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000046, 0x800000021BE95C70, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000021BE95450, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000050, 0x800000021BE95480, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x800000021BE954E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x800000021BE951D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x800000021BE953B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000021BE951F0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000057, 0x800000021BE95270, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ELL, 0x800000021BE95230, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x800000021BE95320, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000045, 0x800000021BE952D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000005BLL, 0x800000021BE95350, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000035, 0x800000021BE953D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000021BE95410, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000055, 0x800000021BE96130, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003FLL, 0x800000021BE96190, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003CLL, 0x800000021BE96230, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000005BLL, 0x800000021BE961D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004ELL, 0x800000021BE96270, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000041, 0x800000021BE962C0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000046, 0x800000021BE96310, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x800000021BE967E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x800000021BE96840, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000021BE96810, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000021BE96870, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x800000021BE968A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000021BE968E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE96920, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE96950, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x800000021BE96980, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000021BE969B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000035, 0x800000021BE969E0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003CLL, 0x800000021BE95BF0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000021BE95C50, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE96020, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000045, 0x800000021BE95570, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000021BE96AE0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000021BE96B00, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000021BE96B30, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000048, 0x800000021BE96A20, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000067, 0x800000021BE96A70, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000021BE955C0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000021BE96BF0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x800000021BE96B60, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x800000021BE96BA0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000021BE96C80, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000021BE96BD0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E696E7275746552, 0xEE00657572742067, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000021BE95D90, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000044, 0x800000021BE95D40, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003BLL, 0x800000021BE95DB0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x800000021BE96510, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000048, 0x800000021BE96530, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000021BE96CA0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000021BE96CE0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000021BE96D00, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000039, 0x800000021BE96C40, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000021BE96C20, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7265746E45, 0xE500000000000000, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x657661654CLL, 0xE500000000000000, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000021BE95550, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x800000021BE95FC0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000021BE95FF0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x800000021BE95FA0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2D2D2D2D2D2D2D2DLL, 0xEA00000000002D2DLL, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x800000021BE95D10, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x800000021BE95CC0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x800000021BE95CE0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x676E697461647055, 0xED00006564616620, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x800000021BE95C30, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x800000021BE956B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x800000021BE95AC0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000037, 0x800000021BE95A80, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x800000021BE95A40, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, 0x800000021BE95970, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x800000021BE959C0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v3 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = a1;
    if (os_log_type_enabled(v6, a1))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v10 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000037, 0x800000021BE95A00, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v6, v7, "%s%s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v9, -1, -1);
      MEMORY[0x220772F44](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void InteractionsLogger.log(_:_:)(os_log_type_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *v2;
  v5 = v2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    v7 = a2();
    v9 = v8;
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = a1;
    if (os_log_type_enabled(v11, a1))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v15 = v14;
      *(_DWORD *)v13 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v11, v12, "%s%s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v14, -1, -1);
      MEMORY[0x220772F44](v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

void InteractionsLogger.default(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  InteractionsLogger.debug(_:)(a1, a2, (uint64_t (*)(uint64_t (*)(void), uint64_t))MEMORY[0x24BEE7928]);
}

void InteractionsLogger.fault(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  InteractionsLogger.debug(_:)(a1, a2, (uint64_t (*)(uint64_t (*)(void), uint64_t))MEMORY[0x24BEE7920]);
}

void specialized InteractionsLogger.log(_:_:)(os_log_type_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v5 = a2[1];
  if (one-time initialization token for interactionsLoggingEnabled != -1)
    swift_once();
  if (interactionsLoggingEnabled)
  {
    v7 = a3();
    v9 = v8;
    if (one-time initialization token for interactionsLogger != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = a1;
    if (os_log_type_enabled(v11, a1))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v15 = v14;
      *(_DWORD *)v13 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v11, v12, "%s%s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v14, -1, -1);
      MEMORY[0x220772F44](v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

ValueMetadata *type metadata accessor for InteractionsLogger()
{
  return &type metadata for InteractionsLogger;
}

uint64_t static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSURL *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  Class isa;
  id v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, void *);
  void (*v42)(_BYTE *, uint64_t, void *);
  Swift::String v43;
  char v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, void *);
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void (*v71)(uint64_t, void *);
  _QWORD *v72;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(_BYTE *, _BYTE *, void *);
  unint64_t v91;
  unint64_t v92;
  uint64_t result;
  _BYTE v94[4];
  int v95;
  id v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _QWORD *v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115[3];

  v95 = a2;
  v115[1] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v104 = &v94[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  v108 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v106 = &v94[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v105 = &v94[-v7];
  MEMORY[0x24BDAC7A8](v8);
  v107 = &v94[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v100 = &v94[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v109 = &v94[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v103 = &v94[-v16];
  MEMORY[0x24BDAC7A8](v17);
  v110 = &v94[-v18];
  MEMORY[0x24BDAC7A8](v19);
  v98 = &v94[-v20];
  MEMORY[0x24BDAC7A8](v21);
  v99 = &v94[-v22];
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  URL._bridgeToObjectiveC()(v24);
  v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_21BE411F0;
  v28 = (void *)*MEMORY[0x24BDBCBF0];
  *(_QWORD *)(v27 + 32) = *MEMORY[0x24BDBCBF0];
  type metadata accessor for NSURLResourceKey(0);
  v29 = v28;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v115[0] = 0;
  v96 = v23;
  v31 = objc_msgSend(v23, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v26, isa, 0, v115);

  v32 = v115[0];
  if (!v31)
  {
    v48 = v115[0];
    v36 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger == -1)
    {
LABEL_18:
      v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)logger);
      v50 = v36;
      v51 = v36;
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc();
        v55 = (_QWORD *)swift_slowAlloc();
        v114 = (uint64_t)v36;
        v115[0] = v55;
        *(_DWORD *)v54 = 136446210;
        v2 = v54 + 4;
        v56 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v57 = String.init<A>(describing:)();
        v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_21B9AA000, v52, v53, "contentsOfDirectory error: %{public}s", v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x220772F44](v55, -1, -1);
        MEMORY[0x220772F44](v54, -1, -1);
      }
      else
      {

      }
      lazy protocol witness table accessor for type ImageHelper.LoadError and conformance ImageHelper.LoadError();
      swift_allocError();
      *(_QWORD *)v76 = v36;
      *(_QWORD *)(v76 + 8) = 0;
      *(_BYTE *)(v76 + 16) = 0;
      swift_willThrow();

      return (uint64_t)v2;
    }
LABEL_50:
    swift_once();
    goto LABEL_18;
  }
  v112 = (void *)v12;
  v2 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v32;

  v115[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
  v34 = v2[2];
  v113 = v13;
  v102 = v34;
  if (v34)
  {
    v35 = 0;
    v36 = v112;
    v37 = v99;
    v38 = (uint64_t)v100;
    v101 = v2;
    while (v35 < v2[2])
    {
      v39 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v40 = *(_QWORD *)(v13 + 72);
      (*(void (**)(uint64_t, char *, void *))(v13 + 16))(v38, (char *)v2 + v39 + v40 * v35, v36);
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v13 + 56);
      v41(v38, 0, 1, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v13 + 48))(v38, 1, v36) == 1)
        goto LABEL_22;
      v42 = *(void (**)(_BYTE *, uint64_t, void *))(v13 + 32);
      v42(v37, v38, v36);
      if ((URL.isFileURL.getter() & 1) == 0)
        goto LABEL_4;
      URL.pathExtension.getter();
      v43 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (one-time initialization token for validImageSuffixes != -1)
        swift_once();
      v44 = specialized Set.contains(_:)(v43._countAndFlagsBits, (uint64_t)v43._object, static ImageHelper.validImageSuffixes);
      swift_bridgeObjectRelease();
      v36 = v112;
      v37 = v99;
      v38 = (uint64_t)v100;
      if ((v44 & 1) != 0)
      {
        v42(v98, (uint64_t)v99, v112);
        v45 = v115[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1);
          v45 = v115[0];
        }
        v47 = v45[2];
        v46 = v45[3];
        v2 = v101;
        if (v47 >= v46 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
          v45 = v115[0];
        }
        v45[2] = v47 + 1;
        v36 = v112;
        v42((_BYTE *)v45 + v39 + v47 * v40, (uint64_t)v98, v112);
        v115[0] = v45;
        v13 = v113;
        v37 = v99;
        v38 = (uint64_t)v100;
      }
      else
      {
LABEL_4:
        v13 = v113;
        (*(void (**)(_BYTE *, void *))(v113 + 8))(v37, v36);
        v2 = v101;
      }
      if (v102 == ++v35)
        goto LABEL_21;
    }
    __break(1u);
    goto LABEL_50;
  }
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v13 + 56);
  v36 = v112;
  v38 = (uint64_t)v100;
LABEL_21:
  v41(v38, 1, 1, v36);
LABEL_22:
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v38, &demangling cache variable for type metadata for URL?);
  v2 = v115[0];
  if ((v95 & 1) == 0)
    goto LABEL_46;
  v59 = v115[0][2];
  if (v59)
  {
    v115[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
    v60 = (char *)v2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v61 = *(_QWORD *)(v13 + 72);
    v101 = *(_QWORD **)(v13 + 16);
    v102 = v61;
    v62 = (uint64_t)v107;
    v63 = (uint64_t)v103;
    do
    {
      v64 = (uint64_t)v110;
      v65 = (void (*)(uint64_t, uint64_t, void *))v101;
      ((void (*)(_BYTE *, char *, void *))v101)(v110, v60, v36);
      v66 = v62 + *(int *)(v111 + 48);
      v65(v62, v64, v36);
      v67 = v104;
      static ImageHelper.extractDateTimeOriginal(url:)(v64, (uint64_t)v104);
      v65(v63, v64, v36);
      v68 = type metadata accessor for Date();
      v69 = *(_QWORD *)(v68 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
      {
        static ImageHelper.creationDate(for:)(v63, v66);
        outlined destroy of BodyTrackingComponent?((uint64_t)v67, &demangling cache variable for type metadata for Date?);
      }
      else
      {
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v69 + 32))(v66, v67, v68);
      }
      v70 = v112;
      v13 = v113;
      v71 = *(void (**)(uint64_t, void *))(v113 + 8);
      v71(v63, v112);
      v71((uint64_t)v110, v70);
      v72 = v115[0];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v62 = (uint64_t)v107;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1);
        v72 = v115[0];
      }
      v75 = v72[2];
      v74 = v72[3];
      if (v75 >= v74 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
        v72 = v115[0];
      }
      v72[2] = v75 + 1;
      outlined init with take of (URL, Date)(v62, (uint64_t)v72+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))+ *(_QWORD *)(v108 + 72) * v75);
      v60 += v102;
      --v59;
      v36 = v112;
    }
    while (v59);
    swift_release();
  }
  else
  {
    swift_release();
    v72 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v115[0] = v72;
  swift_bridgeObjectRetain();
  v77 = v97;
  specialized MutableCollection<>.sort(by:)(v115);
  if (!v77)
  {
    swift_bridgeObjectRelease();
    v78 = v115[0];
    v79 = v115[0][2];
    if (!v79)
    {
      swift_release();

      return MEMORY[0x24BEE4AF8];
    }
    v97 = 0;
    v115[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79, 0);
    v80 = v109;
    v81 = (uint64_t)v78 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
    v82 = *(_QWORD *)(v108 + 72);
    v107 = v78;
    v108 = v82;
    do
    {
      v112 = (void *)v79;
      v110 = (_BYTE *)v81;
      v83 = v105;
      outlined init with copy of (Int, URL)(v81, (uint64_t)v105, &demangling cache variable for type metadata for (URL, Date));
      v84 = *(int *)(v111 + 48);
      v85 = v106;
      v86 = &v106[v84];
      v87 = &v83[v84];
      (*(void (**)(_BYTE *, _BYTE *, void *))(v13 + 16))(v106, v83, v36);
      v88 = type metadata accessor for Date();
      v89 = *(_QWORD *)(v88 - 8);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v89 + 16))(v86, v87, v88);
      v90 = *(void (**)(_BYTE *, _BYTE *, void *))(v13 + 32);
      v90(v80, v85, v36);
      (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v86, v88);
      outlined destroy of BodyTrackingComponent?((uint64_t)v83, &demangling cache variable for type metadata for (URL, Date));
      v2 = v115[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
        v2 = v115[0];
      }
      v92 = v2[2];
      v91 = v2[3];
      if (v92 >= v91 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
        v2 = v115[0];
      }
      v2[2] = v92 + 1;
      v13 = v113;
      v80 = v109;
      v90((_BYTE *)v2+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v113 + 72) * v92, v109, v36);
      v115[0] = v2;
      v81 = (uint64_t)&v110[v108];
      v79 = (int64_t)v112 - 1;
    }
    while (v112 != (void *)1);
    swift_release();
LABEL_46:

    return (uint64_t)v2;
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for validImageSuffixes()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for validImageSuffixes);
  result = swift_arrayDestroy();
  static ImageHelper.validImageSuffixes = v0;
  return result;
}

uint64_t static ImageHelper.extractDateTimeOriginal(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSURL *v10;
  char *v11;
  const __CFURL *v12;
  const __CFURL *v13;
  CGImageSource *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (NSURL *)((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)((char *)&v32 - (char *)v10);
  URL._bridgeToObjectiveC()(v10);
  v13 = v12;
  v14 = CGImageSourceCreateWithURL(v12, 0);

  if (v14)
  {
    v15 = specialized static ImageHelper.createMetadataFromImageSource(imageSource:index:url:)(v14, 0, a1);
    type metadata accessor for PhotogrammetryMetadataHelper();
    *(_QWORD *)(swift_initStackObject() + 16) = v15;
    PhotogrammetryMetadataHelper.dateTimeOriginal.getter(v11);
    swift_release();

    v16 = type metadata accessor for Date();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v19 = a2;
      v20 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v11, v16);
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v19 = a2;
      v20 = 0;
    }
    v30 = v16;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v32 = a2;
      v26 = v25;
      *(_DWORD *)v24 = 141558274;
      v33 = 1752392040;
      v34 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      v27 = URL.path.getter();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl(&dword_21B9AA000, v22, v23, "Error in CGImageSourceCreateWithURL for %{mask.hash}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      v29 = v26;
      a2 = v32;
      MEMORY[0x220772F44](v29, -1, -1);
      MEMORY[0x220772F44](v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    v30 = type metadata accessor for Date();
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    v19 = a2;
    v20 = 1;
  }
  return v18(v19, v20, 1, v30);
}

uint64_t static ImageHelper.creationDate(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t inited;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a2;
  v32 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLResourceValues();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v16 = (void *)*MEMORY[0x24BDBCBF0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCBF0];
  v17 = v16;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  v31 = a1;
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  URLResourceValues.creationDate.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined init with copy of (Int, URL)((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for Date?);
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18);
  v21 = v33;
  if (v20 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for logger != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    v23 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v21, v31, v32);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      *(_DWORD *)v26 = 141558274;
      v35 = 1752392040;
      v36 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2080;
      v28 = URL.path.getter();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v21, v32);
      _os_log_impl(&dword_21B9AA000, v24, v25, "creation data is nil for: \"%{mask.hash}s\".", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v27, -1, -1);
      MEMORY[0x220772F44](v26, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v21, v23);
    }

    static Date.distantPast.getter();
    return outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for Date?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v34, v11, v18);
  }
}

uint64_t type metadata accessor for ImageHelper()
{
  return objc_opt_self();
}

void specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date))
                 - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  Swift::Int v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  Swift::Int v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  Swift::Int v117;
  char *v118;
  Swift::Int v119;
  uint64_t v120;
  Swift::Int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  Swift::Int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  v123 = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8](v130);
  v120 = (uint64_t)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v131 = (uint64_t)&v116 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v128 = (uint64_t)&v116 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v127 = (uint64_t)&v116 - v9;
  v10 = a1[1];
  v11 = _minimumMergeRunLength(_:)(v10);
  if (v11 >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v10, 1, a1);
    return;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v129 = a1;
  v117 = v11;
  v124 = v1;
  if (v10 < 2)
  {
    v16 = (char *)MEMORY[0x24BEE4AF8];
    v122 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
    v116 = MEMORY[0x24BEE4AF8];
    if (v10 != 1)
    {
      v18 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_105:
      v108 = v16;
      if (v18 >= 2)
      {
        v109 = *v129;
        do
        {
          v110 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v109)
            goto LABEL_146;
          v111 = *(_QWORD *)&v108[16 * v110 + 32];
          v112 = *(_QWORD *)&v108[16 * v18 + 24];
          v113 = v124;
          specialized _merge<A>(low:mid:high:buffer:by:)(v109 + *(_QWORD *)(v123 + 72) * v111, v109 + *(_QWORD *)(v123 + 72) * *(_QWORD *)&v108[16 * v18 + 16], v109 + *(_QWORD *)(v123 + 72) * v112, v122);
          v124 = v113;
          if (v113)
            break;
          if (v112 < v111)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v108 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v108);
          if (v110 >= *((_QWORD *)v108 + 2))
            goto LABEL_136;
          v114 = &v108[16 * v110 + 32];
          *(_QWORD *)v114 = v111;
          *((_QWORD *)v114 + 1) = v112;
          v115 = *((_QWORD *)v108 + 2);
          if (v18 > v115)
            goto LABEL_137;
          memmove(&v108[16 * v18 + 16], &v108[16 * v18 + 32], 16 * (v115 - v18));
          *((_QWORD *)v108 + 2) = v115 - 1;
          v18 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v116 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v123 + 80);
    v116 = v14;
    v122 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v129;
    v22 = *(_QWORD *)(v123 + 72);
    v23 = v127;
    outlined init with copy of (Int, URL)(*v129 + v22 * v20, v127, &demangling cache variable for type metadata for (URL, Date));
    v24 = v21 + v22 * v17;
    v25 = v128;
    outlined init with copy of (Int, URL)(v24, v128, &demangling cache variable for type metadata for (URL, Date));
    LODWORD(v126) = static Date.< infix(_:_:)();
    outlined destroy of BodyTrackingComponent?(v25, &demangling cache variable for type metadata for (URL, Date));
    outlined destroy of BodyTrackingComponent?(v23, &demangling cache variable for type metadata for (URL, Date));
    v17 = v19 + 2;
    v125 = v21;
    v132 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v121 = v19;
    v118 = v16;
    v26 = v22 * v20;
    v27 = v21;
    v28 = v22 * v17;
    do
    {
      v29 = v10;
      v30 = v127;
      outlined init with copy of (Int, URL)(v27 + v28, v127, &demangling cache variable for type metadata for (URL, Date));
      v31 = v128;
      outlined init with copy of (Int, URL)(v27 + v26, v128, &demangling cache variable for type metadata for (URL, Date));
      v32 = static Date.< infix(_:_:)();
      outlined destroy of BodyTrackingComponent?(v31, &demangling cache variable for type metadata for (URL, Date));
      outlined destroy of BodyTrackingComponent?(v30, &demangling cache variable for type metadata for (URL, Date));
      if (((v126 ^ v32) & 1) != 0)
      {
        v16 = v118;
        v19 = v121;
        v10 = v29;
        v22 = v132;
        if ((v126 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      ++v17;
      v22 = v132;
      v27 += v132;
      v10 = v29;
    }
    while (v29 != v17);
    v17 = v29;
    v16 = v118;
    v19 = v121;
LABEL_21:
    if ((v126 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v33 = v129;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v57 = *((_QWORD *)v16 + 2);
    v56 = *((_QWORD *)v16 + 3);
    v18 = v57 + 1;
    if (v57 >= v56 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v58 = v16 + 32;
    v59 = &v16[16 * v57 + 32];
    *(_QWORD *)v59 = v19;
    *((_QWORD *)v59 + 1) = v17;
    if (v57)
    {
      while (1)
      {
        v60 = v18 - 1;
        if (v18 >= 4)
        {
          v65 = &v58[16 * v18];
          v66 = *((_QWORD *)v65 - 8);
          v67 = *((_QWORD *)v65 - 7);
          v71 = __OFSUB__(v67, v66);
          v68 = v67 - v66;
          if (v71)
            goto LABEL_122;
          v70 = *((_QWORD *)v65 - 6);
          v69 = *((_QWORD *)v65 - 5);
          v71 = __OFSUB__(v69, v70);
          v63 = v69 - v70;
          v64 = v71;
          if (v71)
            goto LABEL_123;
          v72 = v18 - 2;
          v73 = &v58[16 * v18 - 32];
          v75 = *(_QWORD *)v73;
          v74 = *((_QWORD *)v73 + 1);
          v71 = __OFSUB__(v74, v75);
          v76 = v74 - v75;
          if (v71)
            goto LABEL_125;
          v71 = __OFADD__(v63, v76);
          v77 = v63 + v76;
          if (v71)
            goto LABEL_128;
          if (v77 >= v68)
          {
            v95 = &v58[16 * v60];
            v97 = *(_QWORD *)v95;
            v96 = *((_QWORD *)v95 + 1);
            v71 = __OFSUB__(v96, v97);
            v98 = v96 - v97;
            if (v71)
              goto LABEL_132;
            v88 = v63 < v98;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v89 = *((_QWORD *)v16 + 4);
            v90 = *((_QWORD *)v16 + 5);
            v71 = __OFSUB__(v90, v89);
            v82 = v90 - v89;
            v83 = v71;
            goto LABEL_88;
          }
          v62 = *((_QWORD *)v16 + 4);
          v61 = *((_QWORD *)v16 + 5);
          v71 = __OFSUB__(v61, v62);
          v63 = v61 - v62;
          v64 = v71;
        }
        if ((v64 & 1) != 0)
          goto LABEL_124;
        v72 = v18 - 2;
        v78 = &v58[16 * v18 - 32];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v81 = __OFSUB__(v79, v80);
        v82 = v79 - v80;
        v83 = v81;
        if (v81)
          goto LABEL_127;
        v84 = &v58[16 * v60];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v71 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v71)
          goto LABEL_130;
        if (__OFADD__(v82, v87))
          goto LABEL_131;
        if (v82 + v87 >= v63)
        {
          v88 = v63 < v87;
LABEL_94:
          if (v88)
            v60 = v72;
          goto LABEL_96;
        }
LABEL_88:
        if ((v83 & 1) != 0)
          goto LABEL_126;
        v91 = &v58[16 * v60];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v71 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v71)
          goto LABEL_129;
        if (v94 < v82)
          goto LABEL_14;
LABEL_96:
        v99 = v16;
        v100 = v60 - 1;
        if (v60 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v129)
          goto LABEL_144;
        v101 = v17;
        v102 = &v58[16 * v100];
        v103 = *(_QWORD *)v102;
        v104 = &v58[16 * v60];
        v105 = *((_QWORD *)v104 + 1);
        v106 = v124;
        specialized _merge<A>(low:mid:high:buffer:by:)(*v129 + *(_QWORD *)(v123 + 72) * *(_QWORD *)v102, *v129 + *(_QWORD *)(v123 + 72) * *(_QWORD *)v104, *v129 + *(_QWORD *)(v123 + 72) * v105, v122);
        v124 = v106;
        if (v106)
          goto LABEL_116;
        if (v105 < v103)
          goto LABEL_119;
        if (v60 > *((_QWORD *)v99 + 2))
          goto LABEL_120;
        *(_QWORD *)v102 = v103;
        *(_QWORD *)&v58[16 * v100 + 8] = v105;
        v107 = *((_QWORD *)v99 + 2);
        if (v60 >= v107)
          goto LABEL_121;
        v16 = v99;
        v18 = v107 - 1;
        memmove(&v58[16 * v60], v104 + 16, 16 * (v107 - 1 - v60));
        *((_QWORD *)v99 + 2) = v107 - 1;
        v88 = v107 > 2;
        v17 = v101;
        if (!v88)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v129[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v126 = v10;
  v118 = v16;
  v48 = 0;
  v49 = v22 * (v17 - 1);
  v50 = v17 * v22;
  v51 = v19;
  v121 = v19;
  v52 = v19 * v22;
  v33 = v129;
  do
  {
    if (v51 != v17 + v48 - 1)
    {
      v53 = v125;
      if (!v125)
        goto LABEL_145;
      v54 = v125 + v52;
      v55 = v125 + v49;
      outlined init with take of (URL, Date)(v125 + v52, v120);
      if (v52 < v49 || v54 >= v53 + v50)
      {
        swift_arrayInitWithTakeFrontToBack();
        v22 = v132;
      }
      else
      {
        v22 = v132;
        if (v52 != v49)
          swift_arrayInitWithTakeBackToFront();
      }
      outlined init with take of (URL, Date)(v120, v55);
      v33 = v129;
    }
    ++v51;
    --v48;
    v49 -= v22;
    v50 -= v22;
    v52 += v22;
  }
  while (v51 < v17 + v48);
  v16 = v118;
  v10 = v126;
  v19 = v121;
  if (v17 >= v126)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v117)
    goto LABEL_57;
  if (__OFADD__(v19, v117))
    goto LABEL_141;
  if (v19 + v117 >= v10)
    v34 = v10;
  else
    v34 = v19 + v117;
  if (v34 >= v19)
  {
    if (v17 != v34)
    {
      v118 = v16;
      v119 = v34;
      v35 = *(_QWORD *)(v123 + 72);
      v132 = v35 * (v17 - 1);
      v125 = v35;
      v36 = v17 * v35;
      v121 = v19;
      do
      {
        v38 = 0;
        v39 = v19;
        v126 = v17;
        while (1)
        {
          v40 = *v33;
          v41 = v36;
          v42 = v36 + v38 + *v33;
          v43 = v127;
          v44 = v33;
          outlined init with copy of (Int, URL)(v42, v127, &demangling cache variable for type metadata for (URL, Date));
          v45 = v128;
          outlined init with copy of (Int, URL)(v132 + v38 + v40, v128, &demangling cache variable for type metadata for (URL, Date));
          LOBYTE(v40) = static Date.< infix(_:_:)();
          outlined destroy of BodyTrackingComponent?(v45, &demangling cache variable for type metadata for (URL, Date));
          outlined destroy of BodyTrackingComponent?(v43, &demangling cache variable for type metadata for (URL, Date));
          if ((v40 & 1) == 0)
            break;
          v46 = *v44;
          if (!*v44)
            goto LABEL_143;
          v36 = v41;
          v47 = v46 + v132 + v38;
          outlined init with take of (URL, Date)(v46 + v41 + v38, v131);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of (URL, Date)(v131, v47);
          v37 = v126;
          v38 -= v125;
          ++v39;
          v33 = v129;
          if (v126 == v39)
            goto LABEL_35;
        }
        v37 = v126;
        v36 = v41;
        v33 = v44;
LABEL_35:
        v17 = v37 + 1;
        v132 += v125;
        v36 += v125;
        v19 = v121;
      }
      while (v17 != v119);
      v17 = v119;
      v16 = v118;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = a1;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  MEMORY[0x24BDAC7A8](v27);
  v28 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v26 = a3;
  v23 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v30 = v15 * (v26 - 1);
    v25 = v15;
    v29 = v15 * v26;
LABEL_5:
    v16 = 0;
    v17 = v24;
    while (1)
    {
      v18 = *a4;
      outlined init with copy of (Int, URL)(v29 + v16 + *a4, (uint64_t)v14, &demangling cache variable for type metadata for (URL, Date));
      outlined init with copy of (Int, URL)(v30 + v16 + v18, (uint64_t)v10, &demangling cache variable for type metadata for (URL, Date));
      LOBYTE(v18) = static Date.< infix(_:_:)();
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (URL, Date));
      outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for (URL, Date));
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v30 += v25;
        v29 += v25;
        if (++v26 == v23)
          return;
        goto LABEL_5;
      }
      v19 = *a4;
      if (!*a4)
        break;
      v20 = a4;
      v21 = v19 + v30 + v16;
      outlined init with take of (URL, Date)(v19 + v29 + v16, v28);
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of (URL, Date)(v28, v21);
      v16 -= v25;
      ++v17;
      a4 = v20;
      if (v26 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  MEMORY[0x24BDAC7A8](v44);
  v43 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v40 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v47 = a1;
  v46 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v25 = a4 + v18;
      v45 = a4 + v18;
      v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v41 = a4;
        v42 = a1;
        do
        {
          v28 = a3 + v27;
          outlined init with copy of (Int, URL)(v25 + v27, (uint64_t)v11, &demangling cache variable for type metadata for (URL, Date));
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v43;
          outlined init with copy of (Int, URL)(a2 + v27, v43, &demangling cache variable for type metadata for (URL, Date));
          v33 = static Date.< infix(_:_:)();
          v34 = v32;
          v11 = (char *)v31;
          outlined destroy of BodyTrackingComponent?(v34, &demangling cache variable for type metadata for (URL, Date));
          outlined destroy of BodyTrackingComponent?(v31, &demangling cache variable for type metadata for (URL, Date));
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v37 = v41;
              v36 = v42;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v41;
              v36 = v42;
              if (!v35)
                swift_arrayInitWithTakeBackToFront();
            }
            v47 += v27;
          }
          else
          {
            v38 = v45;
            v45 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              v29 = a2;
              v37 = v41;
              v36 = v42;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v41;
              v36 = v42;
              if (!v35)
                swift_arrayInitWithTakeBackToFront();
              v29 = a2;
            }
          }
          v25 = v45;
          if (v45 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v42 = a4 + v17;
    v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v43;
      do
      {
        outlined init with copy of (Int, URL)(a2, (uint64_t)v11, &demangling cache variable for type metadata for (URL, Date));
        outlined init with copy of (Int, URL)(a4, v20, &demangling cache variable for type metadata for (URL, Date));
        v21 = static Date.< infix(_:_:)();
        outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for (URL, Date));
        outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for (URL, Date));
        v22 = v47;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v47 < a2 || v47 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v24 = v46 + v13;
          if (v47 < v46 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v46 = v24;
          v23 = a2;
        }
        v47 = v22 + v13;
        a4 = v46;
        if (v46 >= v42)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      v7 = v6;
      String.hash(into:)();
      v8 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
            goto LABEL_3;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v9 = *(_DWORD *)(v6 + 4 * v4);
      result = MEMORY[0x220769EF0](v7, v9, 4);
      v11 = result & v8;
      v12 = (result & (unint64_t)v8) >> 6;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      v14 = 1 << (result & v8);
      v15 = *(_QWORD *)(v3 + 48);
      if ((v14 & v13) != 0)
      {
        while (*(_DWORD *)(v15 + 4 * v11) != v9)
        {
          v11 = (v11 + 1) & v8;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
        *(_DWORD *)(v15 + 4 * v11) = v9;
        v16 = *(_QWORD *)(v3 + 16);
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v18;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

char *specialized static ImageHelper.calculateTotalImagesSizeInFolderShallowly(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  id v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t inited;
  void *v22;
  id v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  id v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v35;
  void *v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43[7];

  v43[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for URLResourceValues();
  v38 = *(_QWORD *)(v1 - 8);
  v39 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL();
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  v43[0] = 0;
  v13 = objc_msgSend(v9, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v11, 0, 0, v43);

  v14 = (char *)v43[0];
  if (v13)
  {
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v14;

    v17 = *(_QWORD *)(v15 + 16);
    if (v17)
    {
      v18 = v40;
      v19 = v15 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
      v32 = *(_QWORD *)(v40 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v36 = (void *)*MEMORY[0x24BDBCCE8];
      v31 = v15;
      swift_bridgeObjectRetain();
      v14 = 0;
      v35 = xmmword_21BE411F0;
      v33 = v8;
      while (1)
      {
        v37(v8, v19, v4);
        v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
        v34(v8, 0, 1, v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v4) == 1)
          break;
        v41 = v17;
        v20 = v14;
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v42, v8, v4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v35;
        v22 = v36;
        *(_QWORD *)(inited + 32) = v36;
        v23 = v22;
        v14 = (char *)specialized Set.init(_nonEmptyArrayLiteral:)(inited);
        swift_setDeallocating();
        type metadata accessor for NSURLResourceKey(0);
        swift_arrayDestroy();
        URL.resourceValues(forKeys:)();
        if (v0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v4);
          swift_bridgeObjectRelease_n();
          return v14;
        }
        swift_bridgeObjectRelease();
        v24 = URLResourceValues.totalFileAllocatedSize.getter();
        v26 = v25;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v3, v39);
        if ((v26 & 1) != 0)
          v27 = 0;
        else
          v27 = v24;
        v14 = &v20[v27];
        if (__OFADD__(v27, v20))
          __break(1u);
        v18 = v40;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v4);
        v8 = v33;
        v19 += v32;
        v17 = v41 - 1;
        if (v41 == 1)
        {
          v34(v33, 1, 1, v4);
          break;
        }
      }
    }
    else
    {
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
      swift_bridgeObjectRetain();
      v14 = 0;
      v29(v8, 1, 1, v4);
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v28 = v43[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v14;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

unint64_t specialized static ImageHelper.createMetadataFromImageSource(imageSource:index:url:)(CGImageSource *a1, size_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = CGImageSourceCopyPropertiesAtIndex(a1, a2, 0);
  if (!v10)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      *(_DWORD *)v17 = 141558274;
      v21 = 1752392040;
      v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2080;
      lazy protocol witness table accessor for type URL and conformance URL();
      v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl(&dword_21B9AA000, v15, v16, "Can't get CGImageProperties for EXIF for %{mask.hash}s!", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v18, -1, -1);
      MEMORY[0x220772F44](v17, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  v11 = v10;
  v22 = 0;
  result = static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  v13 = v22;
  if (v22)
  {

    return v13;
  }
  __break(1u);
  return result;
}

void specialized static ImageHelper.logFilenames(files:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  __int128 v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD v34[2];
  __int128 v35;
  char *v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v34 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v41 = __swift_project_value_buffer(v12, (uint64_t)logger);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_21B9AA000, v13, v14, "Files: [", v15, 2u);
    MEMORY[0x220772F44](v15, -1, -1);
  }

  v16 = *(_QWORD *)(a1 + 16);
  v34[0] = a1;
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v39 = *(_QWORD *)(v3 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16);
    swift_bridgeObjectRetain();
    *(_QWORD *)&v19 = 141558274;
    v35 = v19;
    v34[1] = MEMORY[0x24BEE4AD8] + 8;
    v36 = v8;
    v37 = v3;
    v40 = v11;
    v38 = v18;
    while (1)
    {
      v18(v11, v17, v2);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v21(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
      v18(v5, v8, v2);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc();
        v25 = swift_slowAlloc();
        v42 = v25;
        *(_DWORD *)v24 = v35;
        *(_QWORD *)(v24 + 4) = 1752392040;
        *(_WORD *)(v24 + 12) = 2080;
        lazy protocol witness table accessor for type URL and conformance URL();
        v26 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v24 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
        swift_bridgeObjectRelease();
        v28 = *(void (**)(char *, uint64_t))(v37 + 8);
        v28(v5, v2);
        _os_log_impl(&dword_21B9AA000, v22, v23, "%{mask.hash}s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        v29 = v25;
        v3 = v37;
        MEMORY[0x220772F44](v29, -1, -1);
        v30 = v24;
        v8 = v36;
        MEMORY[0x220772F44](v30, -1, -1);

        v28(v8, v2);
      }
      else
      {

        v20 = *(void (**)(char *, uint64_t))(v3 + 8);
        v20(v5, v2);
        v20(v8, v2);
      }
      v11 = v40;
      v17 += v39;
      --v16;
      v18 = v38;
      if (!v16)
        goto LABEL_13;
    }
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_13:
    v21(v11, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_21B9AA000, v31, v32, "]  // Files", v33, 2u);
    MEMORY[0x220772F44](v33, -1, -1);
  }

}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (!v2)
  {
LABEL_4:
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v3;
    goto LABEL_9;
  }
LABEL_8:
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v4)
    return v3;
LABEL_9:
  v6 = v3 + 56;
  if ((v1 & 0xC000000000000001) == 0)
  {
    v20 = 0;
    v21 = v1 + 32;
    v22 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      if (v20 == v22)
        goto LABEL_35;
      v25 = *(_QWORD *)(v21 + 8 * v20);
      Hasher.init(_seed:)();
      v26 = *(_QWORD *)(v25 + 16);
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v3 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
      v31 = 1 << v28;
      v32 = *(_QWORD *)(v3 + 48);
      if (((1 << v28) & v30) == 0)
        goto LABEL_23;
      if (*(_QWORD *)(*(_QWORD *)(v32 + 8 * v28) + 16) != v26)
        break;
LABEL_25:
      if (++v20 == v4)
        return v3;
    }
    v33 = ~v27;
    while (1)
    {
      v28 = (v28 + 1) & v33;
      v29 = v28 >> 6;
      v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
      v31 = 1 << v28;
      if ((v30 & (1 << v28)) == 0)
        break;
      if (*(_QWORD *)(*(_QWORD *)(v32 + 8 * v28) + 16) == v26)
        goto LABEL_25;
    }
LABEL_23:
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(v32 + 8 * v28) = v25;
    v23 = *(_QWORD *)(v3 + 16);
    v8 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v8)
      goto LABEL_36;
    *(_QWORD *)(v3 + 16) = v24;
    result = swift_retain();
    goto LABEL_25;
  }
  v7 = 0;
  while (1)
  {
    result = MEMORY[0x220769770](v7, v1);
    v8 = __OFADD__(v7++, 1);
    if (v8)
      break;
    v9 = result;
    Hasher.init(_seed:)();
    v10 = *(_QWORD *)(v9 + 16);
    Hasher._combine(_:)(v10);
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v3 + 32);
    v12 = result & ~v11;
    v13 = v12 >> 6;
    v14 = *(_QWORD *)(v6 + 8 * (v12 >> 6));
    v15 = 1 << v12;
    v16 = *(_QWORD *)(v3 + 48);
    if (((1 << v12) & v14) == 0)
      goto LABEL_19;
    if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v12) + 16) == v10)
    {
LABEL_11:
      swift_unknownObjectRelease();
      if (v7 == v4)
        return v3;
    }
    else
    {
      v17 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v17;
        v13 = v12 >> 6;
        v14 = *(_QWORD *)(v6 + 8 * (v12 >> 6));
        v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v12) + 16) == v10)
          goto LABEL_11;
      }
LABEL_19:
      *(_QWORD *)(v6 + 8 * v13) = v15 | v14;
      *(_QWORD *)(v16 + 8 * v12) = v9;
      v18 = *(_QWORD *)(v3 + 16);
      v8 = __OFADD__(v18, 1);
      v19 = v18 + 1;
      if (v8)
        goto LABEL_34;
      *(_QWORD *)(v3 + 16) = v19;
      if (v7 == v4)
        return v3;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized static ImageHelper.getMaximumInputImageDimension()()
{
  BOOL v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  if (MEMORY[0x24BE1EBA0])
    v0 = MEMORY[0x24BE1EBA8] == 0;
  else
    v0 = 1;
  if (v0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_21B9AA000, v7, v8, "Runtime doesn't have PhotogrammetrySession hardware specs, using default...", v9, 2u);
      MEMORY[0x220772F44](v9, -1, -1);
    }

    return 0x2000;
  }
  else
  {
    type metadata accessor for PhotogrammetrySession();
    v1 = type metadata accessor for PhotogrammetrySession.HardwareSpecs();
    v2 = *(_QWORD *)(v1 - 8);
    MEMORY[0x24BDAC7A8](v1);
    v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    static PhotogrammetrySession.hardwareSpecs.getter();
    v5 = PhotogrammetrySession.HardwareSpecs.maxImageDim.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v5;
}

uint64_t specialized static ImageHelper.getMaximumNumberOfInputSamples()()
{
  BOOL v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (MEMORY[0x24BE1EBB0])
    v0 = MEMORY[0x24BE1EBB8] == 0;
  else
    v0 = 1;
  if (v0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_21B9AA000, v7, v8, "Runtime doesn't have PhotogrammetrySession hardware specs, using default...", v9, 2u);
      MEMORY[0x220772F44](v9, -1, -1);
    }

    type metadata accessor for ObjectCaptureSession();
    v1 = type metadata accessor for ObjectCaptureSession.HardwareSpecs();
    v2 = *(_QWORD *)(v1 - 8);
    MEMORY[0x24BDAC7A8](v1);
    v4 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    static ObjectCaptureSession.hardwareSpecs.getter();
    v5 = ObjectCaptureSession.HardwareSpecs.maxNumImages.getter();
  }
  else
  {
    type metadata accessor for PhotogrammetrySession();
    v1 = type metadata accessor for PhotogrammetrySession.HardwareSpecs();
    v2 = *(_QWORD *)(v1 - 8);
    MEMORY[0x24BDAC7A8](v1);
    v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    static PhotogrammetrySession.hardwareSpecs.getter();
    v5 = PhotogrammetrySession.HardwareSpecs.maxNumSamples.getter();
  }
  v11 = v5;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v11;
}

unint64_t lazy protocol witness table accessor for type ImageHelper.LoadError and conformance ImageHelper.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageHelper.LoadError and conformance ImageHelper.LoadError;
  if (!lazy protocol witness table cache variable for type ImageHelper.LoadError and conformance ImageHelper.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImageHelper.LoadError, &type metadata for ImageHelper.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageHelper.LoadError and conformance ImageHelper.LoadError);
  }
  return result;
}

uint64_t outlined init with take of (URL, Date)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id outlined copy of ImageHelper.LoadError(id result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return (id)swift_bridgeObjectRetain();
  if (!a3)
    return result;
  return result;
}

void destroy for ImageHelper.LoadError(uint64_t a1)
{
  outlined consume of ImageHelper.LoadError(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void outlined consume of ImageHelper.LoadError(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!a3)
  {

  }
}

uint64_t initializeBufferWithCopyOfBuffer for ImageHelper.LoadError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ImageHelper.LoadError(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageHelper.LoadError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ImageHelper.LoadError(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ImageHelper.LoadError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ImageHelper.LoadError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ImageHelper.LoadError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ImageHelper.LoadError()
{
  return &type metadata for ImageHelper.LoadError;
}

uint64_t StateMachineResource.__allocating_init(graph:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  StateMachineResource.init(graph:)(a1);
  return v2;
}

uint64_t *StateMachineResource.init(graph:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  unsigned __int8 v19;

  v2 = (uint64_t *)v1;
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  v14 = v4;
  v15 = v3;
  v16 = v5;
  v17 = v6;
  StateMachineGraph.checkIntegrity()((uint64_t)v18);
  v7 = v19;
  if (v19 == 255)
  {
    v14 = v4;
    v15 = v3;
    v16 = v5;
    v17 = v6;
    v2[6] = static StateMachineGraphCreator.createCoreAsset(from:)((uint64_t)&v14);
    v11 = v2[2];
    v12 = v2[3];
    v2[2] = v4;
    v2[3] = v3;
    v2[4] = v5;
    v2[5] = v6;
    outlined consume of StateMachineGraph?(v11, v12);
  }
  else
  {
    v9 = v18[0];
    v8 = v18[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type StateMachineError and conformance StateMachineError();
    swift_allocError();
    *(_QWORD *)v10 = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *(_BYTE *)(v10 + 16) = v7;
    swift_willThrow();
    outlined consume of StateMachineGraph?(v2[2], v2[3]);
    type metadata accessor for StateMachineResource();
    swift_deallocPartialClassInstance();
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type StateMachineError and conformance StateMachineError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StateMachineError and conformance StateMachineError;
  if (!lazy protocol witness table cache variable for type StateMachineError and conformance StateMachineError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for StateMachineError, &type metadata for StateMachineError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineError and conformance StateMachineError);
  }
  return result;
}

uint64_t type metadata accessor for StateMachineResource()
{
  return objc_opt_self();
}

uint64_t StateMachineResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  outlined consume of StateMachineGraph?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t StateMachineResource.__deallocating_deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  outlined consume of StateMachineGraph?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t StateMachineResource.graph.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  result = v1[3];
  if (result)
    goto LABEL_3;
  static StateMachineGraphCreator.createGraph(from:)();
  v4 = v1[2];
  v5 = v1[3];
  v1[2] = v8;
  *(_OWORD *)(v1 + 3) = v9;
  v1[5] = v10;
  outlined consume of StateMachineGraph?(v4, v5);
  result = v1[3];
  if (result)
  {
LABEL_3:
    v7 = v1[4];
    v6 = v1[5];
    *a1 = v1[2];
    a1[1] = result;
    a1[2] = v7;
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall StateMachineResource.discardCachedGraph()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  outlined consume of StateMachineGraph?(v1, v2);
}

uint64_t method lookup function for StateMachineResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StateMachineResource.__allocating_init(graph:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of StateMachineResource.graph.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of StateMachineResource.discardCachedGraph()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void __swiftcall _Proto_BlendShapeMeshDescriptor_v1.init(meshName:meshType:meshPartName:)(RealityFoundation::_Proto_BlendShapeMeshDescriptor_v1 *__return_ptr retstr, Swift::String meshName, RealityFoundation::_Proto_MeshType_v1 meshType, Swift::String_optional meshPartName)
{
  RealityFoundation::_Proto_MeshType_v1 v4;

  v4 = *(_BYTE *)meshType;
  retstr->meshName = meshName;
  retstr->meshType = v4;
  retstr->meshPartName = meshPartName;
}

BOOL static _Proto_MeshType_v1.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _Proto_MeshType_v1.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int _Proto_MeshType_v1.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _Proto_BlendShapeMeshDescriptor_v1.meshName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_BlendShapeMeshDescriptor_v1.meshName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_Proto_BlendShapeMeshDescriptor_v1.meshName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void _Proto_BlendShapeMeshDescriptor_v1.meshType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *_Proto_BlendShapeMeshDescriptor_v1.meshType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*_Proto_BlendShapeMeshDescriptor_v1.meshType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_BlendShapeMeshDescriptor_v1.meshPartName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_BlendShapeMeshDescriptor_v1.meshPartName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*_Proto_BlendShapeMeshDescriptor_v1.meshPartName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t lazy protocol witness table accessor for type _Proto_MeshType_v1 and conformance _Proto_MeshType_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _Proto_MeshType_v1 and conformance _Proto_MeshType_v1;
  if (!lazy protocol witness table cache variable for type _Proto_MeshType_v1 and conformance _Proto_MeshType_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _Proto_MeshType_v1, &type metadata for _Proto_MeshType_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_MeshType_v1 and conformance _Proto_MeshType_v1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for _Proto_MeshType_v1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BE359C8 + 4 * byte_21BE80C25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BE359FC + 4 * byte_21BE80C20[v4]))();
}

uint64_t sub_21BE359FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE35A04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BE35A0CLL);
  return result;
}

uint64_t sub_21BE35A18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BE35A20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BE35A24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BE35A2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _Proto_MeshType_v1()
{
  return &type metadata for _Proto_MeshType_v1;
}

uint64_t initializeWithCopy for _Proto_BlendShapeMeshDescriptor_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _Proto_BlendShapeMeshDescriptor_v1(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _Proto_BlendShapeMeshDescriptor_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeMeshDescriptor_v1()
{
  return &type metadata for _Proto_BlendShapeMeshDescriptor_v1;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t static JSONEncoder.OutputFormatting.sortedKeys.getter()
{
  return MEMORY[0x24BDCB288]();
}

uint64_t static JSONEncoder.OutputFormatting.prettyPrinted.getter()
{
  return MEMORY[0x24BDCB290]();
}

uint64_t type metadata accessor for JSONEncoder.OutputFormatting()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t static Measurement.== infix<A, B>(_:_:)()
{
  return MEMORY[0x24BDCB458]();
}

uint64_t type metadata accessor for Measurement()
{
  return MEMORY[0x24BDCB588]();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t static CharacterSet.urlQueryAllowed.getter()
{
  return MEMORY[0x24BDCB668]();
}

uint64_t static CharacterSet.controlCharacters.getter()
{
  return MEMORY[0x24BDCB680]();
}

uint64_t static CharacterSet.illegalCharacters.getter()
{
  return MEMORY[0x24BDCB688]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t CharacterSet.formUnion(_:)()
{
  return MEMORY[0x24BDCB738]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCB8E8]();
}

uint64_t Notification.userInfo.getter()
{
  return MEMORY[0x24BDCB918]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t URLComponents.url.getter()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t URLComponents.path.setter()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t URLComponents.init()()
{
  return MEMORY[0x24BDCBB68]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t AttributedString.init(stringLiteral:)()
{
  return MEMORY[0x24BDCC2F8]();
}

uint64_t type metadata accessor for AttributedString()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t AttributedString.init(_:)()
{
  return MEMORY[0x24BDCC618]();
}

uint64_t URLResourceValues.allValues.getter()
{
  return MEMORY[0x24BDCC6F8]();
}

uint64_t URLResourceValues.creationDate.getter()
{
  return MEMORY[0x24BDCC720]();
}

uint64_t URLResourceValues.totalFileAllocatedSize.getter()
{
  return MEMORY[0x24BDCC7B8]();
}

uint64_t URLResourceValues.volumeAvailableCapacityForImportantUsage.getter()
{
  return MEMORY[0x24BDCC7D8]();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return MEMORY[0x24BDCC818]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x24BDCCA58]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return MEMORY[0x24BDCD320]();
}

uint64_t static LocalizedStringResource.== infix(_:_:)()
{
  return MEMORY[0x24BDCD350]();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return MEMORY[0x24BDCD380]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x24BDCD520]();
}

uint64_t URL.standardizedFileURL.getter()
{
  return MEMORY[0x24BDCD730]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x24BDCD748]();
}

uint64_t URL.standardized.getter()
{
  return MEMORY[0x24BDCD778]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x24BDCD810]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t URL.pathComponents.getter()
{
  return MEMORY[0x24BDCD830]();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return MEMORY[0x24BDCD848]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return MEMORY[0x24BDCD888]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x24BDCD898]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
  MEMORY[0x24BDCD8E8](a1._countAndFlagsBits, a1._object);
}

uint64_t URL.deletingPathExtension()()
{
  return MEMORY[0x24BDCD908]();
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x24BDCD918]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t URL.withUnsafeFileSystemRepresentation<A>(_:)()
{
  return MEMORY[0x24BDCD9A0]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCD9E8](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x24BDCDAA8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDB60]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return MEMORY[0x24BDCDB80]();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return MEMORY[0x24BDCDBB0]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDBC8]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.copyBytes(to:count:)()
{
  return MEMORY[0x24BDCDDA8]();
}

uint64_t static Date.distantPast.getter()
{
  return MEMORY[0x24BDCE2D8]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.description.getter()
{
  return MEMORY[0x24BDCE9B8]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x24BDCE9D0]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t UUID.init(uuid:)()
{
  return MEMORY[0x24BDCEA10]();
}

uint64_t UUID.uuid.getter()
{
  return MEMORY[0x24BDCEA18]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x24BEE76E8]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x24BEE7700]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x24BEE7718]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x24BEE7758]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t Logger.init()()
{
  return MEMORY[0x24BEE78C8]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x24BEE78E8]();
}

uint64_t ObjectCaptureSession.HardwareSpecs.maxNumImages.getter()
{
  return MEMORY[0x24BE1E6E8]();
}

uint64_t type metadata accessor for ObjectCaptureSession.HardwareSpecs()
{
  return MEMORY[0x24BE1E6F0]();
}

uint64_t static ObjectCaptureSession.hardwareSpecs.getter()
{
  return MEMORY[0x24BE1E6F8]();
}

uint64_t type metadata accessor for ObjectCaptureSession()
{
  return MEMORY[0x24BE1E9A8]();
}

uint64_t PhotogrammetrySample.objectMask.getter()
{
  return MEMORY[0x24BE1E9B8]();
}

uint64_t PhotogrammetrySample.objectMask.setter()
{
  return MEMORY[0x24BE1E9C0]();
}

uint64_t PhotogrammetrySample.depthDataMap.getter()
{
  return MEMORY[0x24BE1E9D0]();
}

uint64_t PhotogrammetrySample.depthDataMap.setter()
{
  return MEMORY[0x24BE1E9D8]();
}

uint64_t PhotogrammetrySample.staticSegmentID.getter()
{
  return MEMORY[0x24BE1E9E8]();
}

uint64_t PhotogrammetrySample.init(id:image:)()
{
  return MEMORY[0x24BE1EA00]();
}

uint64_t PhotogrammetrySample.Scene.boundingBox.getter()
{
  return MEMORY[0x24BE1EA10]();
}

uint64_t type metadata accessor for PhotogrammetrySample.Scene()
{
  return MEMORY[0x24BE1EA18]();
}

uint64_t PhotogrammetrySample.image.getter()
{
  return MEMORY[0x24BE1EA28]();
}

uint64_t PhotogrammetrySample.scene.getter()
{
  return MEMORY[0x24BE1EA30]();
}

uint64_t PhotogrammetrySample.Camera.intrinsics.getter()
{
  return MEMORY[0x24BE1EA38]();
}

uint64_t PhotogrammetrySample.Camera.calibrationData.getter()
{
  return MEMORY[0x24BE1EA40]();
}

uint64_t PhotogrammetrySample.Camera.transform.getter()
{
  return MEMORY[0x24BE1EA50]();
}

uint64_t type metadata accessor for PhotogrammetrySample.Camera()
{
  return MEMORY[0x24BE1EA58]();
}

uint64_t PhotogrammetrySample.Object.boundingBox.getter()
{
  return MEMORY[0x24BE1EA68]();
}

uint64_t type metadata accessor for PhotogrammetrySample.Object()
{
  return MEMORY[0x24BE1EA70]();
}

uint64_t PhotogrammetrySample.camera.getter()
{
  return MEMORY[0x24BE1EA80]();
}

uint64_t PhotogrammetrySample.object.getter()
{
  return MEMORY[0x24BE1EA88]();
}

uint64_t PhotogrammetrySample.gravity.setter()
{
  return MEMORY[0x24BE1EA98]();
}

uint64_t PhotogrammetrySample.metadata.setter()
{
  return MEMORY[0x24BE1EAA8]();
}

uint64_t type metadata accessor for PhotogrammetrySample()
{
  return MEMORY[0x24BE1EAB0]();
}

uint64_t PhotogrammetrySession.PointCloud.Point.position.getter()
{
  return MEMORY[0x24BE1EAC8]();
}

uint64_t type metadata accessor for PhotogrammetrySession.PointCloud.Point()
{
  return MEMORY[0x24BE1EAD0]();
}

uint64_t type metadata accessor for PhotogrammetrySession.PointCloud()
{
  return MEMORY[0x24BE1EAE0]();
}

uint64_t type metadata accessor for PhotogrammetrySession.ProcessStage()
{
  return MEMORY[0x24BE1EB20]();
}

uint64_t PhotogrammetrySession.Configuration.snapshotURL.setter()
{
  return MEMORY[0x24BE1EB30]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Configuration.SampleOrdering()
{
  return MEMORY[0x24BE1EB48]();
}

uint64_t PhotogrammetrySession.Configuration.sampleOrdering.setter()
{
  return MEMORY[0x24BE1EB50]();
}

uint64_t PhotogrammetrySession.Configuration.ignoreBoundingBox.setter()
{
  return MEMORY[0x24BE1EB60]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Configuration.FeatureSensitivity()
{
  return MEMORY[0x24BE1EB78]();
}

uint64_t PhotogrammetrySession.Configuration.featureSensitivity.setter()
{
  return MEMORY[0x24BE1EB80]();
}

uint64_t PhotogrammetrySession.Configuration.isObjectMaskingEnabled.setter()
{
  return MEMORY[0x24BE1EB88]();
}

uint64_t PhotogrammetrySession.Configuration.init()()
{
  return MEMORY[0x24BE1EB90]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Configuration()
{
  return MEMORY[0x24BE1EB98]();
}

uint64_t PhotogrammetrySession.HardwareSpecs.maxImageDim.getter()
{
  return MEMORY[0x24BE1EBA0]();
}

uint64_t PhotogrammetrySession.HardwareSpecs.maxNumSamples.getter()
{
  return MEMORY[0x24BE1EBB0]();
}

uint64_t type metadata accessor for PhotogrammetrySession.HardwareSpecs()
{
  return MEMORY[0x24BE1EBC0]();
}

uint64_t PhotogrammetrySession.init(configuration:)()
{
  return MEMORY[0x24BE1EBC8]();
}

uint64_t static PhotogrammetrySession.hardwareSpecs.getter()
{
  return MEMORY[0x24BE1EBD0]();
}

uint64_t dispatch thunk of PhotogrammetrySession.outputPublisher.getter()
{
  return MEMORY[0x24BE1EBD8]();
}

uint64_t PhotogrammetrySession.init(photogrammetrySamples:configuration:)()
{
  return MEMORY[0x24BE1EBE0]();
}

uint64_t static PhotogrammetrySession.getNumberOfSamplesInSnapshot(snapshotURL:)()
{
  return MEMORY[0x24BE1EBE8]();
}

uint64_t static PhotogrammetrySession.isDeviceCompatibleWithSnapshot(snapshotURL:)()
{
  return MEMORY[0x24BE1EBF0]();
}

uint64_t static PhotogrammetrySession.isConfigurationCompatibleWithSnapshot(configuration:snapshotURL:)()
{
  return MEMORY[0x24BE1EBF8]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Error()
{
  return MEMORY[0x24BE1EC18]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Poses()
{
  return MEMORY[0x24BE1EC38]();
}

uint64_t dispatch thunk of PhotogrammetrySession.close()()
{
  return MEMORY[0x24BE1EC40]();
}

uint64_t PhotogrammetrySession.Output.ProgressInfo.processStage.getter()
{
  return MEMORY[0x24BE1EC48]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Output.ProgressInfo()
{
  return MEMORY[0x24BE1EC58]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Output()
{
  return MEMORY[0x24BE1ECC0]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Result()
{
  return MEMORY[0x24BE1ECF0]();
}

uint64_t static PhotogrammetrySession.Request.== infix(_:_:)()
{
  return MEMORY[0x24BE1ED10]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Request.Detail()
{
  return MEMORY[0x24BE1ED28]();
}

uint64_t PhotogrammetrySession.Request.Geometry.rootTransform.getter()
{
  return MEMORY[0x24BE1ED40]();
}

uint64_t PhotogrammetrySession.Request.Geometry.init(orientedBoundsTransform:rootTransform:)()
{
  return MEMORY[0x24BE1ED48]();
}

uint64_t PhotogrammetrySession.Request.Geometry.orientedBoundsTransform.getter()
{
  return MEMORY[0x24BE1ED50]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Request.Geometry()
{
  return MEMORY[0x24BE1ED58]();
}

uint64_t type metadata accessor for PhotogrammetrySession.Request()
{
  return MEMORY[0x24BE1ED70]();
}

uint64_t PhotogrammetrySession.init(imagesURL:configuration:)()
{
  return MEMORY[0x24BE1ED88]();
}

uint64_t type metadata accessor for PhotogrammetrySession()
{
  return MEMORY[0x24BE1ED90]();
}

uint64_t static ObjectCaptureImageFolderReader.loadPhotogrammetrySample(id:url:)()
{
  return MEMORY[0x24BE1EDE8]();
}

uint64_t type metadata accessor for ObjectCaptureImageFolderReader()
{
  return MEMORY[0x24BE1EDF0]();
}

uint64_t dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter()
{
  return MEMORY[0x24BDB9408]();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return MEMORY[0x24BDB9410]();
}

uint64_t type metadata accessor for Publishers.CompactMap()
{
  return MEMORY[0x24BDB94B8]();
}

uint64_t type metadata accessor for Publishers.PrefetchStrategy()
{
  return MEMORY[0x24BDB9640]();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)()
{
  return MEMORY[0x24BDB9A28]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x24BDB9A30]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x24BDB9A38]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x24BDB9A50]();
}

uint64_t Cancellable.store<A>(in:)()
{
  return MEMORY[0x24BDB9A60]();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return MEMORY[0x24BDB9AB0]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x24BDB9AC0]();
}

uint64_t type metadata accessor for AnyPublisher()
{
  return MEMORY[0x24BDB9AE0]();
}

uint64_t AnyPublisher.init<A>(_:)()
{
  return MEMORY[0x24BDB9AF0]();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return MEMORY[0x24BDB9B20]();
}

uint64_t type metadata accessor for AnySubscriber()
{
  return MEMORY[0x24BDB9B28]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  MEMORY[0x24BDB9B50]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x24BDB9B98]();
}

uint64_t AsyncPublisher.Iterator.next()()
{
  return MEMORY[0x24BDB9BA0]();
}

uint64_t type metadata accessor for AsyncPublisher.Iterator()
{
  return MEMORY[0x24BDB9BB0]();
}

uint64_t type metadata accessor for AsyncPublisher()
{
  return MEMORY[0x24BDB9BC8]();
}

uint64_t AsyncPublisher.init(_:)()
{
  return MEMORY[0x24BDB9BD8]();
}

uint64_t type metadata accessor for AnySubscriberBox()
{
  return MEMORY[0x24BDB9C18]();
}

uint64_t AnySubscriberBox.__allocating_init(_:)()
{
  return MEMORY[0x24BDB9C28]();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(_:)()
{
  return MEMORY[0x24BDB9C68]();
}

uint64_t CurrentValueSubject.send(completion:)()
{
  return MEMORY[0x24BDB9CB8]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x24BDB9CC0]();
}

uint64_t CurrentValueSubject.value.setter()
{
  return MEMORY[0x24BDB9CD8]();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return MEMORY[0x24BDB9CE0]();
}

uint64_t CurrentValueSubject.__allocating_init(_:)()
{
  return MEMORY[0x24BDB9CF8]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x24BDB9D00]();
}

uint64_t AsyncThrowingPublisher.makeAsyncIterator()()
{
  return MEMORY[0x24BDB9D20]();
}

uint64_t AsyncThrowingPublisher.Iterator.next()()
{
  return MEMORY[0x24BDB9D28]();
}

uint64_t AsyncThrowingPublisher.init(_:)()
{
  return MEMORY[0x24BDB9D60]();
}

uint64_t Empty.init(completeImmediately:)()
{
  return MEMORY[0x24BDB9E08]();
}

uint64_t type metadata accessor for Future()
{
  return MEMORY[0x24BDB9E38]();
}

uint64_t Future.init(_:)()
{
  return MEMORY[0x24BDB9E50]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return MEMORY[0x24BDB9F30]();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return MEMORY[0x24BDB9FB0]();
}

uint64_t Publisher.first(where:)()
{
  return MEMORY[0x24BDB9FC8]();
}

uint64_t Publisher.buffer(size:prefetch:whenFull:)()
{
  return MEMORY[0x24BDBA028]();
}

uint64_t Publisher.values.getter()
{
  return MEMORY[0x24BDBA050]();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return MEMORY[0x24BDBA0E0]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t DispatchTime.uptimeNanoseconds.getter()
{
  return MEMORY[0x24BEE5558]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x24BEE5618]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5628]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x24BEE5648]();
}

uint64_t GeometryCollection.subscript.getter()
{
  return MEMORY[0x24BE3D1D0]();
}

uint64_t triangulateByEarClipping(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)()
{
  return MEMORY[0x24BE3D1D8]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x24BEE67F8]();
}

uint64_t Set.init()()
{
  return MEMORY[0x24BEE01C0]();
}

uint64_t BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE0228]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE0260]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF818]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE0290]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE0298](a1);
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t Dictionary.Index.hash(into:)()
{
  return MEMORY[0x24BEE0338]();
}

uint64_t Dictionary.Index._asCocoa.modify()
{
  return MEMORY[0x24BEE0350]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x24BEE0500]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x24BEE06C8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0830]();
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)()
{
  return MEMORY[0x24BEE0838]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t String.init(utf8String:)()
{
  return MEMORY[0x24BDCF880]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t String.init(cString:encoding:)()
{
  return MEMORY[0x24BDCFA80]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t static String.Encoding.ascii.getter()
{
  return MEMORY[0x24BDCFAD8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCFB30](a1);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t String.init(unsafeUninitializedCapacity:initializingUTF8With:)()
{
  return MEMORY[0x24BEE0B00]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0B88]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x24BEE0BE8]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BEE0C00]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CC8](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = MEMORY[0x24BEE0CE8](repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t Sequence<>.makeIterator()()
{
  return MEMORY[0x24BEE0E30]();
}

uint64_t Sequence.enumerated()()
{
  return MEMORY[0x24BEE0E48]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x24BEE0E50]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t Sequence.reduce<A>(into:_:)()
{
  return MEMORY[0x24BEE0EB0]();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return MEMORY[0x24BEE0EB8]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x24BEE0EE0]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x24BEE0F40]();
}

uint64_t UnsafeRawPointer.load<A>(fromByteOffset:as:)()
{
  return MEMORY[0x24BEE0F50]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x24BEE1000]();
}

{
  return MEMORY[0x24BEE1018]();
}

{
  return MEMORY[0x24BEE1058]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x24BEE1078]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x24BEE1080]();
}

{
  return MEMORY[0x24BEE1098]();
}

{
  return MEMORY[0x24BEE10D8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFBB0]();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFBC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return MEMORY[0x24BEE1138]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t Array.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x24BEE1148]();
}

Swift::Void __swiftcall Array.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE1150](a1);
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x24BEE1220]();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  MEMORY[0x24BEE1240](keepingCapacity);
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x24BEE1308]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return MEMORY[0x24BEE69E8]();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x24BEE6A18]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x24BEE6A30]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
  MEMORY[0x24BEE6A38]();
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x24BEE6A40]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t AsyncStream.Iterator.next()()
{
  return MEMORY[0x24BEE6A68]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x24BEE6A98]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t Task.value.getter()
{
  return MEMORY[0x24BEE6AC0]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x24BEE6B10]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC58]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return MEMORY[0x24BEE1478]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC80]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x24BEE14C8]();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFCC8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

Swift::Void __swiftcall Set.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE15E0](a1);
}

uint64_t Set.count.getter()
{
  return MEMORY[0x24BEE1628]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x24BEE1648]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x24BEE16D8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x24BEE18D8]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t Collection.underestimatedCount.getter()
{
  return MEMORY[0x24BEE1950]();
}

uint64_t Collection.count.getter()
{
  return MEMORY[0x24BEE1978]();
}

uint64_t Collection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE1988]();
}

uint64_t Collection.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE1990]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t Collection.distance(from:to:)()
{
  return MEMORY[0x24BEE19C0]();
}

uint64_t Collection<>.indices.getter()
{
  return MEMORY[0x24BEE19F8]();
}

uint64_t Collection<>.firstIndex(of:)()
{
  return MEMORY[0x24BEE1A00]();
}

uint64_t Collection<>.subscript.getter()
{
  return MEMORY[0x24BEE1A18]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t RangeReplaceableCollection.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE1AC0]();
}

uint64_t RangeReplaceableCollection.insert<A>(contentsOf:at:)()
{
  return MEMORY[0x24BEE1AD8]();
}

uint64_t RangeReplaceableCollection.init<A>(_:)()
{
  return MEMORY[0x24BEE1B08]();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return MEMORY[0x24BEE1B28]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t CFErrorRef._code.getter()
{
  return MEMORY[0x24BDCFD78]();
}

uint64_t CFErrorRef._domain.getter()
{
  return MEMORY[0x24BDCFD80]();
}

uint64_t CFErrorRef._userInfo.getter()
{
  return MEMORY[0x24BDCFD88]();
}

uint64_t CGColorRef.components.getter()
{
  return MEMORY[0x24BDBD758]();
}

void __swiftcall SPRotation3D.init(_:)(SPRotation3D *__return_ptr retstr, simd_quatd *a2)
{
  MEMORY[0x24BEE5EB0](retstr, a2);
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

void __swiftcall simd_float4x4.init(_:)(simd_float4x4 *__return_ptr retstr, simd_quatf *a2)
{
  MEMORY[0x24BEE79B8](retstr, a2);
}

uint64_t CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)()
{
  return MEMORY[0x24BDBD7E0]();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
  MEMORY[0x24BEE5658]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x24BEE56B8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t NSAttributedString.init(_:)()
{
  return MEMORY[0x24BDCFFF8]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x24BEE7940]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x24BEE7948]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x24BEE5920]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t OS_geom_inset_evaluator_2d.init(points:accumulatedOutlineIndexCount:)()
{
  return MEMORY[0x24BE3D208]();
}

uint64_t NSArray.makeIterator()()
{
  return MEMORY[0x24BDD0158]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F8](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t NSString.init(stringLiteral:)()
{
  return MEMORY[0x24BDD0248]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x24BEE7978]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

Swift::Void __swiftcall UnsafeMutablePointer.deallocate()()
{
  MEMORY[0x24BEE1BE0]();
}

uint64_t UnsafeMutablePointer.deinitialize(count:)()
{
  return MEMORY[0x24BEE1C00]();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return MEMORY[0x24BEE1C60]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return MEMORY[0x24BEE1CB0]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x24BEE1DA8]();
}

uint64_t Substring.index(before:)()
{
  return MEMORY[0x24BEE1DB0]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x24BEE1DF0]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x24BEE1E50]();
}

{
  return MEMORY[0x24BEE1E60]();
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x24BEE1E58]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return MEMORY[0x24BDD04B8]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return MEMORY[0x24BDD0570]();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return MEMORY[0x24BDD0580]();
}

uint64_t StringProtocol.removingPercentEncoding.getter()
{
  return MEMORY[0x24BDD0590]();
}

uint64_t StringProtocol.hash.getter()
{
  return MEMORY[0x24BDD05F0]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x24BDD0600]();
}

uint64_t StringProtocol.cString(using:)()
{
  return MEMORY[0x24BDD0618]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x24BEE2098]();
}

{
  return MEMORY[0x24BEE20A0]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return MEMORY[0x24BEE20D0]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x24BEE22D8]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x24BEE2360]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyIterator.next()()
{
  return MEMORY[0x24BEE23F0]();
}

uint64_t AnyIterator.init(_:)()
{
  return MEMORY[0x24BEE2410]();
}

uint64_t AnySequence.init<A>(_:)()
{
  return MEMORY[0x24BEE2438]();
}

uint64_t dispatch thunk of SIMDStorage.init()()
{
  return MEMORY[0x24BEE2488]();
}

uint64_t dispatch thunk of SIMDStorage.subscript.getter()
{
  return MEMORY[0x24BEE2490]();
}

uint64_t dispatch thunk of SIMDStorage.subscript.setter()
{
  return MEMORY[0x24BEE2498]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x24BEE2508]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t _typeByName(_:)()
{
  return MEMORY[0x24BEE2528]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x24BEE25B8]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)()
{
  return MEMORY[0x24BEE2788]();
}

uint64_t type metadata accessor for ManagedBuffer()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t OpaquePointer.debugDescription.getter()
{
  return MEMORY[0x24BEE27B8]();
}

uint64_t OpaquePointer.hashValue.getter()
{
  return MEMORY[0x24BEE27C0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2950](a1);
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t ContiguousArray.count.getter()
{
  return MEMORY[0x24BEE2990]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t ContiguousArray.remove(at:)()
{
  return MEMORY[0x24BEE29D0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t ContiguousArray.subscript.getter()
{
  return MEMORY[0x24BEE2A80]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x24BEE2B80]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x24BEE2CC8]();
}

uint64_t dispatch thunk of CustomReflectable.customMirror.getter()
{
  return MEMORY[0x24BEE2CF0]();
}

uint64_t __CocoaDictionary.startIndex.getter()
{
  return MEMORY[0x24BEE2EA0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x24BEE2EA8]();
}

uint64_t __CocoaDictionary.Index.dictionary.getter()
{
  return MEMORY[0x24BEE2EB8]();
}

uint64_t __CocoaDictionary.Index.handleBitPattern.getter()
{
  return MEMORY[0x24BEE2EC0]();
}

uint64_t __CocoaDictionary.Index.age.getter()
{
  return MEMORY[0x24BEE2ED0]();
}

uint64_t __CocoaDictionary.Index.key.getter()
{
  return MEMORY[0x24BEE2ED8]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x24BEE2EE0]();
}

uint64_t __CocoaDictionary.index(after:)()
{
  return MEMORY[0x24BEE2EE8]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x24BEE2F00]();
}

{
  return MEMORY[0x24BEE2F08]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x24BEE2F18]();
}

uint64_t __CocoaDictionary.formIndex(after:isUnique:)()
{
  return MEMORY[0x24BEE2F38]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x24BEE2F68]();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return MEMORY[0x24BEE2F90]();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return MEMORY[0x24BEE2F98]();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return MEMORY[0x24BEE2FA0]();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return MEMORY[0x24BEE2FB0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE3090]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return MEMORY[0x24BEE32B0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

{
  return MEMORY[0x24BEE32E0]();
}

{
  return MEMORY[0x24BEE32E8]();
}

{
  return MEMORY[0x24BEE32F0]();
}

{
  return MEMORY[0x24BEE32F8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3360]();
}

{
  return MEMORY[0x24BEE3368]();
}

{
  return MEMORY[0x24BEE3370]();
}

{
  return MEMORY[0x24BEE33B8]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedDecodingContainer.contains(_:)()
{
  return MEMORY[0x24BEE33D0]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t KeyedDecodingContainer.init<A>(_:)()
{
  return MEMORY[0x24BEE33F0]();
}

uint64_t KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return MEMORY[0x24BEE3400]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3430]();
}

{
  return MEMORY[0x24BEE3438]();
}

{
  return MEMORY[0x24BEE3440]();
}

{
  return MEMORY[0x24BEE3448]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34B0]();
}

{
  return MEMORY[0x24BEE34B8]();
}

{
  return MEMORY[0x24BEE34C0]();
}

{
  return MEMORY[0x24BEE3508]();
}

{
  return MEMORY[0x24BEE3510]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t KeyedEncodingContainer.init<A>(_:)()
{
  return MEMORY[0x24BEE3530]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x24BEE3618]();
}

{
  return MEMORY[0x24BEE3630]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x24BEE3638]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return MEMORY[0x24BEE3668]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return MEMORY[0x24BEE3678]();
}

{
  return MEMORY[0x24BEE3680]();
}

{
  return MEMORY[0x24BEE3688]();
}

{
  return MEMORY[0x24BEE3698]();
}

{
  return MEMORY[0x24BEE36A0]();
}

{
  return MEMORY[0x24BEE36C8]();
}

{
  return MEMORY[0x24BEE36F0]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)()
{
  return MEMORY[0x24BEE36A8]();
}

uint64_t UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x24BEE3700]();
}

{
  return MEMORY[0x24BEE3708]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x24BEE3758]();
}

{
  return MEMORY[0x24BEE3778]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x24BEE3788]();
}

uint64_t UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x24BEE3868]();
}

{
  return MEMORY[0x24BEE3870]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t isKnownUniquelyReferenced<A>(_:)()
{
  return MEMORY[0x24BEE3920]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3930]();
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x24BEE3948](a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x24BEE3AD0]();
}

{
  return MEMORY[0x24BEE3AD8]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x24BEE3B70]();
}

{
  return MEMORY[0x24BEE3B78]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3BE8]();
}

{
  return MEMORY[0x24BEE3BF0]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3C18]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3C80]();
}

{
  return MEMORY[0x24BEE3C88]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3CB0]();
}

uint64_t _copySequenceToContiguousArray<A>(_:)()
{
  return MEMORY[0x24BEE3D38]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t _diagnoseUnavailableCodeReached()()
{
  return MEMORY[0x24BEE3D60]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return MEMORY[0x24BEE3D90]();
}

uint64_t dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter()
{
  return MEMORY[0x24BEE3DD0]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t SIMD.description.getter()
{
  return MEMORY[0x24BEE3E90]();
}

uint64_t SIMD.init<A>(_:)()
{
  return MEMORY[0x24BEE3EB8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t type metadata accessor for SIMD2()
{
  return MEMORY[0x24BEE40C8]();
}

uint64_t type metadata accessor for SIMD3()
{
  return MEMORY[0x24BEE40F8]();
}

uint64_t type metadata accessor for SIMD4()
{
  return MEMORY[0x24BEE4158]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x24BEE42C8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D0]();
}

{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
  MEMORY[0x24BEE4308](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x24BEE4310](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x24BEE4320]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x24BEE4330]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x24BEE4398]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x24BEE43C8]();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x24BEE43E8]();
}

uint64_t Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x24BEE43F0]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x24BEE43F8]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x24BEE45F0]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x24BEE4620]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x24BEE4828]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x24BEE48A0]();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return MEMORY[0x24BEE49E8]();
}

uint64_t dispatch thunk of CodingKey.init(stringValue:)()
{
  return MEMORY[0x24BEE49F0]();
}

uint64_t dispatch thunk of CodingKey.intValue.getter()
{
  return MEMORY[0x24BEE49F8]();
}

uint64_t dispatch thunk of CodingKey.init(intValue:)()
{
  return MEMORY[0x24BEE4A00]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return MEMORY[0x24BEE7160]();
}

uint64_t TaskLocal.get()()
{
  return MEMORY[0x24BEE7168]();
}

uint64_t TaskLocal.withValue<A>(_:operation:file:line:)()
{
  return MEMORY[0x24BEE7170]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x24BDE5410]();
  return result;
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E0](retstr, sx, sy);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x24BDBDA78](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x24BDBDA88](a1, *(_QWORD *)&intent, color, options);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDA90](color, alpha);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDA98](gray, alpha);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDAA8](red, green, blue, alpha);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x24BDBDAE8](color);
  return result;
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDBB8](name);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x24BDBE5F8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9148](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9170](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x24BDD9190](isrc);
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
  MEMORY[0x24BDBEE10](path, block);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x24BDBEE80]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x24BDBEEA8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x24BDC0150]();
}

CFTypeID CMClockGetTypeID(void)
{
  return MEMORY[0x24BDC0160]();
}

OSStatus CMTimebaseCreateWithSourceClock(CFAllocatorRef allocator, CMClockRef sourceClock, CMTimebaseRef *timebaseOut)
{
  return MEMORY[0x24BDC05C0](allocator, sourceClock, timebaseOut);
}

CFTypeID CMTimebaseGetTypeID(void)
{
  return MEMORY[0x24BDC05F0]();
}

CFStringRef CTFontCopyFullName(CTFontRef font)
{
  return (CFStringRef)MEMORY[0x24BDC4720](font);
}

CFStringRef CTFontCopyName(CTFontRef font, CFStringRef nameKey)
{
  return (CFStringRef)MEMORY[0x24BDC4738](font, nameKey);
}

CFStringRef CTFontCopyNameForGlyph(CTFontRef font, CGGlyph glyph)
{
  return (CFStringRef)MEMORY[0x24BDC4740](font, glyph);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return (CGPathRef)MEMORY[0x24BDC47A0](font, glyph, matrix);
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x24BDC47A8](*(_QWORD *)&uiType, language, size);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x24BDC4908](font);
  return result;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return MEMORY[0x24BDC4920](font);
}

CFDictionaryRef CTFrameGetFrameAttributes(CTFrameRef frame)
{
  return (CFDictionaryRef)MEMORY[0x24BDC49C8](frame);
}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
  MEMORY[0x24BDC49D0](frame, range.location, range.length, origins);
}

CFArrayRef CTFrameGetLines(CTFrameRef frame)
{
  return (CFArrayRef)MEMORY[0x24BDC49D8](frame);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x24BDC49F8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x24BDC4A00](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x24BDC4A08](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x24BDC4A88](line);
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x24BDC4B10](run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x24BDC4B28](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
  MEMORY[0x24BDC4B30](run, range.location, range.length, buffer);
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
  MEMORY[0x24BDC4B48](run, range.location, range.length, buffer);
}

uint64_t CoreIKCreateJSONBufferFromRig()
{
  return MEMORY[0x24BE1DF98]();
}

uint64_t CoreIKDestroyRig()
{
  return MEMORY[0x24BE1DFC8]();
}

uint64_t CoreIKGenericConstraintGetBase()
{
  return MEMORY[0x24BE1E050]();
}

uint64_t CoreIKGenericConstraintGetLookAtTarget()
{
  return MEMORY[0x24BE1E060]();
}

uint64_t CoreIKGenericConstraintHasLookAtEnabled()
{
  return MEMORY[0x24BE1E080]();
}

uint64_t CoreIKGenericConstraintSetLookAtTarget()
{
  return MEMORY[0x24BE1E098]();
}

uint64_t CoreIKGenericConstraintSetTargetParameters()
{
  return MEMORY[0x24BE1E0B0]();
}

uint64_t CoreIKGenericSolverCreate()
{
  return MEMORY[0x24BE1E0D8]();
}

uint64_t CoreIKGenericSolverDestroy()
{
  return MEMORY[0x24BE1E0E0]();
}

uint64_t CoreIKGenericSolverGetConstraint()
{
  return MEMORY[0x24BE1E0E8]();
}

uint64_t CoreIKGenericSolverGetConstraintCount()
{
  return MEMORY[0x24BE1E0F0]();
}

uint64_t CoreIKGenericSolverGetJointCount()
{
  return MEMORY[0x24BE1E110]();
}

uint64_t CoreIKGenericSolverGetPGain()
{
  return MEMORY[0x24BE1E120]();
}

uint64_t CoreIKGenericSolverGetTargetRestPose()
{
  return MEMORY[0x24BE1E130]();
}

uint64_t CoreIKGenericSolverRigSetLookAtAxis()
{
  return MEMORY[0x24BE1E140]();
}

uint64_t CoreIKGenericSolverRigSetLookAtEnabled()
{
  return MEMORY[0x24BE1E148]();
}

uint64_t CoreIKGenericSolverRigSetUsesLocalSpaceLookAtAxis()
{
  return MEMORY[0x24BE1E150]();
}

uint64_t CoreIKGenericSolverRigSetUsesModelSpaceLookAtAxis()
{
  return MEMORY[0x24BE1E158]();
}

uint64_t CoreIKGenericSolverSolve()
{
  return MEMORY[0x24BE1E188]();
}

uint64_t CoreIKGetConstraintTarget()
{
  return MEMORY[0x24BE1E1B0]();
}

uint64_t CoreIKRigAddConstraint()
{
  return MEMORY[0x24BE1E1F0]();
}

uint64_t CoreIKRigAddJoint()
{
  return MEMORY[0x24BE1E1F8]();
}

uint64_t CoreIKRigConstraintSetPositionAsPoleEnabled()
{
  return MEMORY[0x24BE1E200]();
}

uint64_t CoreIKRigCreateEmpty()
{
  return MEMORY[0x24BE1E208]();
}

uint64_t CoreIKRigFinalize()
{
  return MEMORY[0x24BE1E210]();
}

uint64_t CoreIKRigGetLimitsGain()
{
  return MEMORY[0x24BE1E218]();
}

uint64_t CoreIKRigGetMaxIterations()
{
  return MEMORY[0x24BE1E220]();
}

uint64_t CoreIKRigGetRetargetingGain()
{
  return MEMORY[0x24BE1E228]();
}

uint64_t CoreIKRigGetSettings()
{
  return MEMORY[0x24BE1E230]();
}

uint64_t CoreIKRigSetPCoefficient()
{
  return MEMORY[0x24BE1E238]();
}

uint64_t CoreIKRigUpdateSettings()
{
  return MEMORY[0x24BE1E240]();
}

uint64_t DRBufferCreateUnmanaged()
{
  return MEMORY[0x24BE2CCB8]();
}

uint64_t DRBufferDescriptorCreate()
{
  return MEMORY[0x24BE2CCC0]();
}

uint64_t DRBufferDescriptorSetCapacity()
{
  return MEMORY[0x24BE2CCC8]();
}

uint64_t DRBufferDescriptorSetSizeMultiple()
{
  return MEMORY[0x24BE2CCD0]();
}

uint64_t DRBufferGetBytesUsed()
{
  return MEMORY[0x24BE2CCD8]();
}

uint64_t DRBufferRead()
{
  return MEMORY[0x24BE2CCE0]();
}

uint64_t DRBufferReadUsing()
{
  return MEMORY[0x24BE2CCE8]();
}

uint64_t DRBufferReplace()
{
  return MEMORY[0x24BE2CCF0]();
}

uint64_t DRBufferReplaceUsing()
{
  return MEMORY[0x24BE2CCF8]();
}

uint64_t DRBufferSetBytesUsed()
{
  return MEMORY[0x24BE2CD00]();
}

uint64_t DRBufferUpdate()
{
  return MEMORY[0x24BE2CD08]();
}

uint64_t DRContextCreateBuffer()
{
  return MEMORY[0x24BE2CD50]();
}

uint64_t DRContextCreateMesh()
{
  return MEMORY[0x24BE2CD58]();
}

uint64_t DRContextCreateTexture()
{
  return MEMORY[0x24BE2CD60]();
}

uint64_t DRMeshCopyDescriptor()
{
  return MEMORY[0x24BE2CDC0]();
}

uint64_t DRMeshCreateUnmanaged()
{
  return MEMORY[0x24BE2CDC8]();
}

uint64_t DRMeshDescriptorCreate()
{
  return MEMORY[0x24BE2CDD8]();
}

uint64_t DRMeshDescriptorGetIndexCapacity()
{
  return MEMORY[0x24BE2CDE0]();
}

uint64_t DRMeshDescriptorGetIndexType()
{
  return MEMORY[0x24BE2CDE8]();
}

uint64_t DRMeshDescriptorGetVertexAttributeCount()
{
  return MEMORY[0x24BE2CDF0]();
}

uint64_t DRMeshDescriptorGetVertexAttributeFormat()
{
  return MEMORY[0x24BE2CDF8]();
}

uint64_t DRMeshDescriptorGetVertexBufferCount()
{
  return MEMORY[0x24BE2CE00]();
}

uint64_t DRMeshDescriptorGetVertexCapacity()
{
  return MEMORY[0x24BE2CE08]();
}

uint64_t DRMeshDescriptorGetVertexLayout()
{
  return MEMORY[0x24BE2CE10]();
}

uint64_t DRMeshDescriptorGetVertexLayoutCount()
{
  return MEMORY[0x24BE2CE18]();
}

uint64_t DRMeshDescriptorSetIndexCapacity()
{
  return MEMORY[0x24BE2CE20]();
}

uint64_t DRMeshDescriptorSetIndexType()
{
  return MEMORY[0x24BE2CE28]();
}

uint64_t DRMeshDescriptorSetVertexAttributeCount()
{
  return MEMORY[0x24BE2CE30]();
}

uint64_t DRMeshDescriptorSetVertexAttributeFormat()
{
  return MEMORY[0x24BE2CE38]();
}

uint64_t DRMeshDescriptorSetVertexBufferCount()
{
  return MEMORY[0x24BE2CE40]();
}

uint64_t DRMeshDescriptorSetVertexCapacity()
{
  return MEMORY[0x24BE2CE48]();
}

uint64_t DRMeshDescriptorSetVertexLayout()
{
  return MEMORY[0x24BE2CE50]();
}

uint64_t DRMeshDescriptorSetVertexLayoutCount()
{
  return MEMORY[0x24BE2CE58]();
}

uint64_t DRMeshGetIndexCapacity()
{
  return MEMORY[0x24BE2CE60]();
}

uint64_t DRMeshGetPartAt()
{
  return MEMORY[0x24BE2CE68]();
}

uint64_t DRMeshGetPartCount()
{
  return MEMORY[0x24BE2CE70]();
}

uint64_t DRMeshGetVertexCapacity()
{
  return MEMORY[0x24BE2CE78]();
}

uint64_t DRMeshReadIndices()
{
  return MEMORY[0x24BE2CE80]();
}

uint64_t DRMeshReadIndicesUsing()
{
  return MEMORY[0x24BE2CE88]();
}

uint64_t DRMeshReadVertices()
{
  return MEMORY[0x24BE2CE90]();
}

uint64_t DRMeshReadVerticesUsing()
{
  return MEMORY[0x24BE2CE98]();
}

uint64_t DRMeshReplaceIndices()
{
  return MEMORY[0x24BE2CEA0]();
}

uint64_t DRMeshReplaceIndicesUsing()
{
  return MEMORY[0x24BE2CEA8]();
}

uint64_t DRMeshReplaceVertices()
{
  return MEMORY[0x24BE2CEB0]();
}

uint64_t DRMeshReplaceVerticesUsing()
{
  return MEMORY[0x24BE2CEB8]();
}

uint64_t DRMeshSetPartAt()
{
  return MEMORY[0x24BE2CEC0]();
}

uint64_t DRMeshSetPartCount()
{
  return MEMORY[0x24BE2CEC8]();
}

uint64_t DRMeshUpdateIndices()
{
  return MEMORY[0x24BE2CED0]();
}

uint64_t DRMeshUpdateVertices()
{
  return MEMORY[0x24BE2CED8]();
}

uint64_t DRTextureCreateUnmanaged()
{
  return MEMORY[0x24BE2CF38]();
}

uint64_t DRTextureDescriptorCreate()
{
  return MEMORY[0x24BE2CF40]();
}

uint64_t DRTextureDescriptorSetArrayLength()
{
  return MEMORY[0x24BE2CF80]();
}

uint64_t DRTextureDescriptorSetDepth()
{
  return MEMORY[0x24BE2CF88]();
}

uint64_t DRTextureDescriptorSetHeight()
{
  return MEMORY[0x24BE2CF90]();
}

uint64_t DRTextureDescriptorSetMipmapLevelCount()
{
  return MEMORY[0x24BE2CF98]();
}

uint64_t DRTextureDescriptorSetPixelFormat()
{
  return MEMORY[0x24BE2CFA0]();
}

uint64_t DRTextureDescriptorSetSwizzle()
{
  return MEMORY[0x24BE2CFA8]();
}

uint64_t DRTextureDescriptorSetTextureType()
{
  return MEMORY[0x24BE2CFB0]();
}

uint64_t DRTextureDescriptorSetTextureUsage()
{
  return MEMORY[0x24BE2CFB8]();
}

uint64_t DRTextureDescriptorSetWidth()
{
  return MEMORY[0x24BE2CFC0]();
}

uint64_t DRTextureReadTexture()
{
  return MEMORY[0x24BE2CFC8]();
}

uint64_t DRTextureReplaceTexture()
{
  return MEMORY[0x24BE2CFD0]();
}

uint64_t MTLGetTextureLevelInfoForDeviceWithOptions()
{
  return MEMORY[0x24BDDD268]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x24BDDD388]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

uint64_t REAABBCenter()
{
  return MEMORY[0x24BE1FFF0]();
}

uint64_t REAABBComputeDistanceSquaredToPoint()
{
  return MEMORY[0x24BE1FFF8]();
}

uint64_t REAABBContainsBox()
{
  return MEMORY[0x24BE20000]();
}

uint64_t REAABBContainsPoint()
{
  return MEMORY[0x24BE20008]();
}

uint64_t REAABBEmpty()
{
  return MEMORY[0x24BE20010]();
}

uint64_t REAABBExpandedToIncludeBox()
{
  return MEMORY[0x24BE20018]();
}

uint64_t REAABBExpandedToIncludePoint()
{
  return MEMORY[0x24BE20020]();
}

uint64_t REAABBExtents()
{
  return MEMORY[0x24BE20028]();
}

uint64_t REAABBInit()
{
  return MEMORY[0x24BE20030]();
}

uint64_t REAABBIntersectsBox()
{
  return MEMORY[0x24BE20038]();
}

uint64_t REAABBIsEmpty()
{
  return MEMORY[0x24BE20040]();
}

uint64_t REAABBRadius()
{
  return MEMORY[0x24BE20048]();
}

uint64_t REAABBTransform()
{
  return MEMORY[0x24BE20050]();
}

uint64_t REAREnvironmentProbeComponentGetComponentType()
{
  return MEMORY[0x24BE20058]();
}

uint64_t REAREnvironmentProbeComponentGetExtents()
{
  return MEMORY[0x24BE20060]();
}

uint64_t REAREnvironmentProbeComponentGetTexture()
{
  return MEMORY[0x24BE20068]();
}

uint64_t REAREnvironmentProbeComponentGetUseAsBackground()
{
  return MEMORY[0x24BE20070]();
}

uint64_t REAREnvironmentProbeComponentSetExtents()
{
  return MEMORY[0x24BE20080]();
}

uint64_t REAREnvironmentProbeComponentSetTexture()
{
  return MEMORY[0x24BE20090]();
}

uint64_t REAREnvironmentProbeComponentSetUseAsBackground()
{
  return MEMORY[0x24BE20098]();
}

uint64_t REARSegmentationComponentGetCameraTextureCbCr()
{
  return MEMORY[0x24BE200A0]();
}

uint64_t REARSegmentationComponentGetCameraTextureY()
{
  return MEMORY[0x24BE200A8]();
}

uint64_t REARSegmentationComponentGetComponentType()
{
  return MEMORY[0x24BE200B0]();
}

uint64_t REARSegmentationComponentGetEstimatedDepthData()
{
  return MEMORY[0x24BE200B8]();
}

uint64_t REARSegmentationComponentGetSegmentationBuffer()
{
  return MEMORY[0x24BE200C0]();
}

uint64_t REARSegmentationComponentSetCameraTextureCbCr()
{
  return MEMORY[0x24BE200C8]();
}

uint64_t REARSegmentationComponentSetCameraTextureY()
{
  return MEMORY[0x24BE200D0]();
}

uint64_t REARSegmentationComponentSetEstimatedDepthData()
{
  return MEMORY[0x24BE200D8]();
}

uint64_t REARSegmentationComponentSetSegmentationBuffer()
{
  return MEMORY[0x24BE200E0]();
}

uint64_t REAccessibilityComponentAddCustomAction()
{
  return MEMORY[0x24BE200E8]();
}

uint64_t REAccessibilityComponentAddCustomContent()
{
  return MEMORY[0x24BE200F0]();
}

uint64_t REAccessibilityComponentAddCustomRotor()
{
  return MEMORY[0x24BE200F8]();
}

uint64_t REAccessibilityComponentAddSystemRotor()
{
  return MEMORY[0x24BE20100]();
}

uint64_t REAccessibilityComponentClearCustomActions()
{
  return MEMORY[0x24BE20108]();
}

uint64_t REAccessibilityComponentClearCustomContent()
{
  return MEMORY[0x24BE20110]();
}

uint64_t REAccessibilityComponentClearCustomRotors()
{
  return MEMORY[0x24BE20118]();
}

uint64_t REAccessibilityComponentClearSystemRotors()
{
  return MEMORY[0x24BE20120]();
}

uint64_t REAccessibilityComponentGetComponentType()
{
  return MEMORY[0x24BE20128]();
}

uint64_t REAccessibilityComponentGetCustomActionAtIndex()
{
  return MEMORY[0x24BE20130]();
}

uint64_t REAccessibilityComponentGetCustomActionsCount()
{
  return MEMORY[0x24BE20138]();
}

uint64_t REAccessibilityComponentGetCustomContentCount()
{
  return MEMORY[0x24BE20140]();
}

uint64_t REAccessibilityComponentGetCustomContentImportanceAtIndex()
{
  return MEMORY[0x24BE20148]();
}

uint64_t REAccessibilityComponentGetCustomContentLabelAtIndex()
{
  return MEMORY[0x24BE20150]();
}

uint64_t REAccessibilityComponentGetCustomContentValueAtIndex()
{
  return MEMORY[0x24BE20158]();
}

uint64_t REAccessibilityComponentGetCustomRotorAtIndex()
{
  return MEMORY[0x24BE20160]();
}

uint64_t REAccessibilityComponentGetCustomRotorsCount()
{
  return MEMORY[0x24BE20168]();
}

uint64_t REAccessibilityComponentGetDescription()
{
  return MEMORY[0x24BE20170]();
}

uint64_t REAccessibilityComponentGetIdentifier()
{
  return MEMORY[0x24BE20178]();
}

uint64_t REAccessibilityComponentGetLabel()
{
  return MEMORY[0x24BE20180]();
}

uint64_t REAccessibilityComponentGetSystemActions()
{
  return MEMORY[0x24BE20188]();
}

uint64_t REAccessibilityComponentGetSystemRotorAtIndex()
{
  return MEMORY[0x24BE20190]();
}

uint64_t REAccessibilityComponentGetSystemRotorsCount()
{
  return MEMORY[0x24BE20198]();
}

uint64_t REAccessibilityComponentGetTraits()
{
  return MEMORY[0x24BE201A0]();
}

uint64_t REAccessibilityComponentGetValue()
{
  return MEMORY[0x24BE201A8]();
}

uint64_t REAccessibilityComponentIsEnabled()
{
  return MEMORY[0x24BE201B0]();
}

uint64_t REAccessibilityComponentIsRoot()
{
  return MEMORY[0x24BE201B8]();
}

uint64_t REAccessibilityComponentSetDescription()
{
  return MEMORY[0x24BE201C0]();
}

uint64_t REAccessibilityComponentSetEnabled()
{
  return MEMORY[0x24BE201C8]();
}

uint64_t REAccessibilityComponentSetIdentifier()
{
  return MEMORY[0x24BE201D0]();
}

uint64_t REAccessibilityComponentSetIsRoot()
{
  return MEMORY[0x24BE201D8]();
}

uint64_t REAccessibilityComponentSetLabel()
{
  return MEMORY[0x24BE201E0]();
}

uint64_t REAccessibilityComponentSetSystemActions()
{
  return MEMORY[0x24BE201E8]();
}

uint64_t REAccessibilityComponentSetTraits()
{
  return MEMORY[0x24BE201F0]();
}

uint64_t REAccessibilityComponentSetValue()
{
  return MEMORY[0x24BE201F8]();
}

uint64_t REAcousticMeshComponentAddAbsorptionCoefficients()
{
  return MEMORY[0x24BE20200]();
}

uint64_t REAcousticMeshComponentAddScatteringCoefficients()
{
  return MEMORY[0x24BE20208]();
}

uint64_t REAcousticMeshComponentAddSoundReductionIndices()
{
  return MEMORY[0x24BE20210]();
}

uint64_t REAcousticMeshComponentClearAllMaterials()
{
  return MEMORY[0x24BE20218]();
}

uint64_t REAcousticMeshComponentCopyAllAbsorptionCoefficients()
{
  return MEMORY[0x24BE20220]();
}

uint64_t REAcousticMeshComponentCopyAllAbsorptionFrequencies()
{
  return MEMORY[0x24BE20228]();
}

uint64_t REAcousticMeshComponentCopyAllAbsorptionIdentifiers()
{
  return MEMORY[0x24BE20230]();
}

uint64_t REAcousticMeshComponentCopyAllScatteringCoefficients()
{
  return MEMORY[0x24BE20238]();
}

uint64_t REAcousticMeshComponentCopyAllScatteringFrequencies()
{
  return MEMORY[0x24BE20240]();
}

uint64_t REAcousticMeshComponentCopyAllScatteringIdentifiers()
{
  return MEMORY[0x24BE20248]();
}

uint64_t REAcousticMeshComponentCopyAllSoundReductionFrequencies()
{
  return MEMORY[0x24BE20250]();
}

uint64_t REAcousticMeshComponentCopyAllSoundReductionIdentifiers()
{
  return MEMORY[0x24BE20258]();
}

uint64_t REAcousticMeshComponentCopyAllSoundReductionIndices()
{
  return MEMORY[0x24BE20260]();
}

uint64_t REAcousticMeshComponentGetComponentType()
{
  return MEMORY[0x24BE20270]();
}

uint64_t REAcousticMeshComponentGetMeshAsset()
{
  return MEMORY[0x24BE20278]();
}

uint64_t REAcousticMeshComponentSetMeshAsset()
{
  return MEMORY[0x24BE20290]();
}

uint64_t REAdaptiveResolutionComponentGetComponentType()
{
  return MEMORY[0x24BE20298]();
}

uint64_t REAdaptiveResolutionStateComponentGetComponentType()
{
  return MEMORY[0x24BE202A0]();
}

uint64_t REAdaptiveResolutionStateComponentGetPixelsPerMeter()
{
  return MEMORY[0x24BE202A8]();
}

uint64_t REAmbientAudioComponentGetComponentType()
{
  return MEMORY[0x24BE202B0]();
}

uint64_t REAmbientAudioComponentGetDecibelGain()
{
  return MEMORY[0x24BE202B8]();
}

uint64_t REAmbientAudioComponentSetDecibelGain()
{
  return MEMORY[0x24BE202C0]();
}

uint64_t REAmbientLightComponentGetColorGamut3F()
{
  return MEMORY[0x24BE202C8]();
}

uint64_t REAmbientLightComponentGetComponentType()
{
  return MEMORY[0x24BE202D0]();
}

uint64_t REAmbientLightComponentGetIntensity()
{
  return MEMORY[0x24BE202D8]();
}

uint64_t REAmbientLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE202E0]();
}

uint64_t REAmbientLightComponentSetIntensity()
{
  return MEMORY[0x24BE202E8]();
}

uint64_t REAnchorComponentGetAnchorIdentifier()
{
  return MEMORY[0x24BE202F0]();
}

uint64_t REAnchorComponentGetComponentType()
{
  return MEMORY[0x24BE20300]();
}

uint64_t REAnchorComponentSetAnchorIdentifier()
{
  return MEMORY[0x24BE20328]();
}

uint64_t REAnchorComponentSetAnchoredLocally()
{
  return MEMORY[0x24BE20330]();
}

uint64_t REAnchorComponentSetEnableShadows()
{
  return MEMORY[0x24BE20338]();
}

uint64_t REAnchorComponentSetRequiresLocalAnchoring()
{
  return MEMORY[0x24BE20350]();
}

uint64_t REAnchorComponentSetWorldTransform()
{
  return MEMORY[0x24BE20360]();
}

uint64_t REAnchoringComponentGetComponentType()
{
  return MEMORY[0x24BE20388]();
}

uint64_t REAnchoringComponentGetDescriptorAlignment()
{
  return MEMORY[0x24BE20398]();
}

uint64_t REAnchoringComponentGetDescriptorAnchorIdentifier()
{
  return MEMORY[0x24BE203A0]();
}

uint64_t REAnchoringComponentGetDescriptorBounds()
{
  return MEMORY[0x24BE203A8]();
}

uint64_t REAnchoringComponentGetDescriptorClassification()
{
  return MEMORY[0x24BE203B8]();
}

uint64_t REAnchoringComponentGetDescriptorPhysicsSimulation()
{
  return MEMORY[0x24BE203C0]();
}

uint64_t REAnchoringComponentGetDescriptorResourceGroup()
{
  return MEMORY[0x24BE203C8]();
}

uint64_t REAnchoringComponentGetDescriptorResourceName()
{
  return MEMORY[0x24BE203D0]();
}

uint64_t REAnchoringComponentGetDescriptorResourceStyle()
{
  return MEMORY[0x24BE203D8]();
}

uint64_t REAnchoringComponentGetDescriptorTransform()
{
  return MEMORY[0x24BE203E0]();
}

uint64_t REAnchoringComponentGetDescriptorType()
{
  return MEMORY[0x24BE203E8]();
}

uint64_t REAnchoringComponentGetMode()
{
  return MEMORY[0x24BE203F8]();
}

uint64_t REAnchoringComponentGetPreviousWorldTransform()
{
  return MEMORY[0x24BE20400]();
}

uint64_t REAnchoringComponentGetTrackingImageHeight()
{
  return MEMORY[0x24BE20410]();
}

uint64_t REAnchoringComponentGetTrackingImageWidth()
{
  return MEMORY[0x24BE20420]();
}

uint64_t REAnchoringComponentSetDescriptorAlignment()
{
  return MEMORY[0x24BE20448]();
}

uint64_t REAnchoringComponentSetDescriptorAnchorIdentifier()
{
  return MEMORY[0x24BE20450]();
}

uint64_t REAnchoringComponentSetDescriptorBounds()
{
  return MEMORY[0x24BE20458]();
}

uint64_t REAnchoringComponentSetDescriptorClassification()
{
  return MEMORY[0x24BE20468]();
}

uint64_t REAnchoringComponentSetDescriptorPhysicsSimulation()
{
  return MEMORY[0x24BE20470]();
}

uint64_t REAnchoringComponentSetDescriptorResourceGroup()
{
  return MEMORY[0x24BE20478]();
}

uint64_t REAnchoringComponentSetDescriptorResourceName()
{
  return MEMORY[0x24BE20480]();
}

uint64_t REAnchoringComponentSetDescriptorResourceStyle()
{
  return MEMORY[0x24BE20488]();
}

uint64_t REAnchoringComponentSetDescriptorTransform()
{
  return MEMORY[0x24BE20490]();
}

uint64_t REAnchoringComponentSetDescriptorType()
{
  return MEMORY[0x24BE20498]();
}

uint64_t REAnchoringComponentSetMode()
{
  return MEMORY[0x24BE204A8]();
}

uint64_t REAnchoringComponentSetPreviousWorldTransform()
{
  return MEMORY[0x24BE204B0]();
}

uint64_t REAnchoringComponentSetTrackingImage()
{
  return MEMORY[0x24BE204C0]();
}

uint64_t REAnimationAssetGetName()
{
  return MEMORY[0x24BE204D0]();
}

uint64_t REAnimationAssetGetTotalDuration()
{
  return MEMORY[0x24BE204D8]();
}

uint64_t REAnimationClipDefaultParametersEx()
{
  return MEMORY[0x24BE204E0]();
}

uint64_t REAnimationComponentAllAnimationsCompleted()
{
  return MEMORY[0x24BE204F0]();
}

uint64_t REAnimationComponentCopyDefaultTimebaseRef()
{
  return MEMORY[0x24BE204F8]();
}

uint64_t REAnimationComponentEntrySetRequest()
{
  return MEMORY[0x24BE20500]();
}

uint64_t REAnimationComponentGetAnimationParentTimebase()
{
  return MEMORY[0x24BE20508]();
}

uint64_t REAnimationComponentGetBlendFactor()
{
  return MEMORY[0x24BE20510]();
}

uint64_t REAnimationComponentGetComponentType()
{
  return MEMORY[0x24BE20518]();
}

uint64_t REAnimationComponentGetCurrentPlaybackTime()
{
  return MEMORY[0x24BE20520]();
}

uint64_t REAnimationComponentGetDuration()
{
  return MEMORY[0x24BE20528]();
}

uint64_t REAnimationComponentGetEntryCount()
{
  return MEMORY[0x24BE20530]();
}

uint64_t REAnimationComponentGetPlaybackSpeed()
{
  return MEMORY[0x24BE20538]();
}

uint64_t REAnimationComponentHasRunningAnimations()
{
  return MEMORY[0x24BE20540]();
}

uint64_t REAnimationComponentIsCompleted()
{
  return MEMORY[0x24BE20548]();
}

uint64_t REAnimationComponentIsPaused()
{
  return MEMORY[0x24BE20550]();
}

uint64_t REAnimationComponentIsValid()
{
  return MEMORY[0x24BE20560]();
}

uint64_t REAnimationComponentPauseAnimation()
{
  return MEMORY[0x24BE20568]();
}

uint64_t REAnimationComponentPlay()
{
  return MEMORY[0x24BE20570]();
}

uint64_t REAnimationComponentResumeAnimation()
{
  return MEMORY[0x24BE20578]();
}

uint64_t REAnimationComponentSetAnimationParentTimebase()
{
  return MEMORY[0x24BE20580]();
}

uint64_t REAnimationComponentSetCurrentPlaybackTime()
{
  return MEMORY[0x24BE20590]();
}

uint64_t REAnimationComponentSetDefaultTimebaseID()
{
  return MEMORY[0x24BE20598]();
}

uint64_t REAnimationComponentSetParentAnimation()
{
  return MEMORY[0x24BE205A0]();
}

uint64_t REAnimationComponentStopAllAnimations()
{
  return MEMORY[0x24BE205B0]();
}

uint64_t REAnimationComponentStopAnimation()
{
  return MEMORY[0x24BE205B8]();
}

uint64_t REAnimationComponentStopAnimationWithTime()
{
  return MEMORY[0x24BE205C0]();
}

uint64_t REAnimationHandoffDefaultDescEx()
{
  return MEMORY[0x24BE205C8]();
}

uint64_t REAnimationLibraryAssetGetDefaultEntryKey()
{
  return MEMORY[0x24BE205D0]();
}

uint64_t REAnimationLibraryAssetGetEntry()
{
  return MEMORY[0x24BE205D8]();
}

uint64_t REAnimationLibraryAssetGetEntryCount()
{
  return MEMORY[0x24BE205E8]();
}

uint64_t REAnimationLibraryAssetGetEntryIndexFromKey()
{
  return MEMORY[0x24BE205F0]();
}

uint64_t REAnimationLibraryAssetGetKeyCount()
{
  return MEMORY[0x24BE205F8]();
}

uint64_t REAnimationLibraryAssetGetKeys()
{
  return MEMORY[0x24BE20600]();
}

uint64_t REAnimationLibraryComponentAssignAnimationLibraryAsset()
{
  return MEMORY[0x24BE20608]();
}

uint64_t REAnimationLibraryComponentCopySkeletalQueryResultAnimationName()
{
  return MEMORY[0x24BE20610]();
}

uint64_t REAnimationLibraryComponentCopyTransformQueryResultAnimationName()
{
  return MEMORY[0x24BE20618]();
}

uint64_t REAnimationLibraryComponentCreateDefaultAnimation()
{
  return MEMORY[0x24BE20620]();
}

uint64_t REAnimationLibraryComponentCreateQueryAllSkeletalAnimations()
{
  return MEMORY[0x24BE20628]();
}

uint64_t REAnimationLibraryComponentCreateQueryAllTransformAnimations()
{
  return MEMORY[0x24BE20630]();
}

uint64_t REAnimationLibraryComponentDefaultGlobalSceneName()
{
  return MEMORY[0x24BE20638]();
}

uint64_t REAnimationLibraryComponentDefaultLocalSubtreeSceneName()
{
  return MEMORY[0x24BE20640]();
}

uint64_t REAnimationLibraryComponentGetAnimationLibraryAsset()
{
  return MEMORY[0x24BE20648]();
}

uint64_t REAnimationLibraryComponentGetComponentType()
{
  return MEMORY[0x24BE20650]();
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultAnimationClipAsset()
{
  return MEMORY[0x24BE20658]();
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultAnimationCount()
{
  return MEMORY[0x24BE20660]();
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultCount()
{
  return MEMORY[0x24BE20668]();
}

uint64_t REAnimationLibraryComponentGetTransformQueryResultAnimationAsset()
{
  return MEMORY[0x24BE20670]();
}

uint64_t REAnimationLibraryComponentGetTransformQueryResultCount()
{
  return MEMORY[0x24BE20678]();
}

uint64_t REAnimationLibraryDefinitionAddEntryAsset()
{
  return MEMORY[0x24BE20680]();
}

uint64_t REAnimationLibraryDefinitionAddKeyedEntryIndex()
{
  return MEMORY[0x24BE20688]();
}

uint64_t REAnimationLibraryDefinitionCreate()
{
  return MEMORY[0x24BE20698]();
}

uint64_t REAnimationLibraryDefinitionCreateAnimationLibraryAsset()
{
  return MEMORY[0x24BE206A0]();
}

uint64_t REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset()
{
  return MEMORY[0x24BE206A8]();
}

uint64_t REAnimationLibraryDefinitionGetEntryAsset()
{
  return MEMORY[0x24BE206B8]();
}

uint64_t REAnimationLibraryDefinitionGetEntryCount()
{
  return MEMORY[0x24BE206C8]();
}

uint64_t REAnimationLibraryDefinitionSetDefaultEntryKey()
{
  return MEMORY[0x24BE206D8]();
}

uint64_t REAnimationSceneAssetCreateWithTimeline()
{
  return MEMORY[0x24BE206E0]();
}

uint64_t REAnimationSceneAssetGetRootTimeline()
{
  return MEMORY[0x24BE206F0]();
}

uint64_t REAnimationServiceGetRootTimebase()
{
  return MEMORY[0x24BE20710]();
}

uint64_t REArchiveGetDefaultEnvelopeVersion()
{
  return MEMORY[0x24BE20718]();
}

uint64_t REAssetComputeEstimatedMemorySize()
{
  return MEMORY[0x24BE20738]();
}

uint64_t REAssetCopyDependencyArray()
{
  return MEMORY[0x24BE20740]();
}

uint64_t REAssetCopyDescription()
{
  return MEMORY[0x24BE20748]();
}

uint64_t REAssetDynamicArrayGetAsset()
{
  return MEMORY[0x24BE20770]();
}

uint64_t REAssetDynamicArrayGetSize()
{
  return MEMORY[0x24BE20778]();
}

uint64_t REAssetGetAssetId()
{
  return MEMORY[0x24BE20780]();
}

uint64_t REAssetGetAssetManager()
{
  return MEMORY[0x24BE20788]();
}

uint64_t REAssetGetSwiftObject()
{
  return MEMORY[0x24BE20790]();
}

uint64_t REAssetGetType()
{
  return MEMORY[0x24BE20798]();
}

uint64_t REAssetHandleAssetType()
{
  return MEMORY[0x24BE207B0]();
}

uint64_t REAssetHandleConvertToMutable()
{
  return MEMORY[0x24BE207B8]();
}

uint64_t REAssetHandleCopyAssetIdentifierString()
{
  return MEMORY[0x24BE207C0]();
}

uint64_t REAssetHandleCopyCompiledExtension()
{
  return MEMORY[0x24BE207C8]();
}

uint64_t REAssetHandleCopyLoadFailedMessage()
{
  return MEMORY[0x24BE207D0]();
}

uint64_t REAssetHandleCreateFromAssetRegistrationOptions()
{
  return MEMORY[0x24BE207D8]();
}

uint64_t REAssetHandleCreateNewMutableWithAssetDescriptors()
{
  return MEMORY[0x24BE207E0]();
}

uint64_t REAssetHandleCreateWithAssetDescriptor()
{
  return MEMORY[0x24BE207E8]();
}

uint64_t REAssetHandleGetOrCreateImmutableWithAssetDescriptors()
{
  return MEMORY[0x24BE207F0]();
}

uint64_t REAssetHandleIsLoaded()
{
  return MEMORY[0x24BE207F8]();
}

uint64_t REAssetHandleLoadAsync()
{
  return MEMORY[0x24BE20800]();
}

uint64_t REAssetHandleLoadFailed()
{
  return MEMORY[0x24BE20808]();
}

uint64_t REAssetHandleLoadNow()
{
  return MEMORY[0x24BE20810]();
}

uint64_t REAssetHandleLoadNowFromOtherQueue()
{
  return MEMORY[0x24BE20818]();
}

uint64_t REAssetHandleResolvesToSameAssetPath()
{
  return MEMORY[0x24BE20820]();
}

uint64_t REAssetLoadRequestAddAsset()
{
  return MEMORY[0x24BE20838]();
}

uint64_t REAssetLoadRequestAddEntity()
{
  return MEMORY[0x24BE20840]();
}

uint64_t REAssetLoadRequestCopyError()
{
  return MEMORY[0x24BE20848]();
}

uint64_t REAssetLoadRequestGetProgress()
{
  return MEMORY[0x24BE20850]();
}

uint64_t REAssetLoadRequestGetState()
{
  return MEMORY[0x24BE20858]();
}

uint64_t REAssetLoadRequestGetStats()
{
  return MEMORY[0x24BE20860]();
}

uint64_t REAssetLoadRequestSetCompletionHandler()
{
  return MEMORY[0x24BE20868]();
}

uint64_t REAssetLoadRequestSetLoadAndWaitForResourceSharingClients()
{
  return MEMORY[0x24BE20870]();
}

uint64_t REAssetLoadRequestSetShouldBlockECSSendsUntilCompleted()
{
  return MEMORY[0x24BE20878]();
}

uint64_t REAssetLoadRequestStatsForEachStat()
{
  return MEMORY[0x24BE20880]();
}

uint64_t REAssetLoadRequestWaitForCompletion()
{
  return MEMORY[0x24BE20888]();
}

uint64_t REAssetLoadRequestWaitForCompletionFromOtherQueue()
{
  return MEMORY[0x24BE20890]();
}

uint64_t REAssetManagerAVPlayerMemoryAssetCreate()
{
  return MEMORY[0x24BE20898]();
}

uint64_t REAssetManagerAVSampleBufferVideoRendererMemoryAssetCreate()
{
  return MEMORY[0x24BE208A0]();
}

uint64_t REAssetManagerAddCleanupCallback()
{
  return MEMORY[0x24BE208A8]();
}

uint64_t REAssetManagerAssetHandleCreateWithBundleResource()
{
  return MEMORY[0x24BE208B0]();
}

uint64_t REAssetManagerCollisionMeshAssetCreateFromMesh()
{
  return MEMORY[0x24BE208B8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateBox()
{
  return MEMORY[0x24BE208C0]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCapsule()
{
  return MEMORY[0x24BE208C8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCollisionMesh()
{
  return MEMORY[0x24BE208D0]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCompound()
{
  return MEMORY[0x24BE208D8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateConvexPolyhedron()
{
  return MEMORY[0x24BE208E0]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh()
{
  return MEMORY[0x24BE208E8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateConvexPolyhedronNullable()
{
  return MEMORY[0x24BE208F0]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateFromCollisionShape()
{
  return MEMORY[0x24BE20900]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateSphere()
{
  return MEMORY[0x24BE20910]();
}

uint64_t REAssetManagerCopyVideoMaterialAsset()
{
  return MEMORY[0x24BE20918]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x24BE20920]();
}

uint64_t REAssetManagerCreateAssetHandleForURL()
{
  return MEMORY[0x24BE20928]();
}

uint64_t REAssetManagerCreateAssetRequest()
{
  return MEMORY[0x24BE20930]();
}

uint64_t REAssetManagerCreateMeshAssetWithDirectMesh()
{
  return MEMORY[0x24BE20938]();
}

uint64_t REAssetManagerCreateTextureAssetFromData()
{
  return MEMORY[0x24BE20940]();
}

uint64_t REAssetManagerFindAssetsOfType_REKit_Only()
{
  return MEMORY[0x24BE20958]();
}

uint64_t REAssetManagerGetEngineQueue()
{
  return MEMORY[0x24BE20960]();
}

uint64_t REAssetManagerImageBasedLightCreateWithCubeMapNullableAsync()
{
  return MEMORY[0x24BE20968]();
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync()
{
  return MEMORY[0x24BE20970]();
}

uint64_t REAssetManagerLoadRawDataForAssetDescriptor()
{
  return MEMORY[0x24BE20980]();
}

uint64_t REAssetManagerMaterialAssetBuilderBuild()
{
  return MEMORY[0x24BE20988]();
}

uint64_t REAssetManagerMaterialDefinitionAssetBuilderBuild()
{
  return MEMORY[0x24BE20998]();
}

uint64_t REAssetManagerMaterialDefinitionAssetBuilderUpdateExistingAsset()
{
  return MEMORY[0x24BE209A0]();
}

uint64_t REAssetManagerMaterialMemoryAssetCreate()
{
  return MEMORY[0x24BE209A8]();
}

uint64_t REAssetManagerMemoryAssetCreateWithRemotePlayer()
{
  return MEMORY[0x24BE209B0]();
}

uint64_t REAssetManagerMeshAssetCreateFromModelsAndSkeletonsWithOptionsNullable()
{
  return MEMORY[0x24BE209C8]();
}

uint64_t REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError()
{
  return MEMORY[0x24BE209D0]();
}

uint64_t REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable()
{
  return MEMORY[0x24BE209D8]();
}

uint64_t REAssetManagerMeshMemoryAssetCreate()
{
  return MEMORY[0x24BE209E0]();
}

uint64_t REAssetManagerMeshMemoryAssetCreate3dText()
{
  return MEMORY[0x24BE209F0]();
}

uint64_t REAssetManagerPhysicsMaterialAssetCreate2()
{
  return MEMORY[0x24BE20A00]();
}

uint64_t REAssetManagerPostLoadProcessImageBasedLightAsset()
{
  return MEMORY[0x24BE20A08]();
}

uint64_t REAssetManagerPreloadVideoAssetOnce()
{
  return MEMORY[0x24BE20A10]();
}

uint64_t REAssetManagerRegisterAndCreateFileNameAliasAssetDescriptor()
{
  return MEMORY[0x24BE20A18]();
}

uint64_t REAssetManagerRegisterAssetResolver()
{
  return MEMORY[0x24BE20A28]();
}

uint64_t REAssetManagerResolveAssetDescriptor()
{
  return MEMORY[0x24BE20A38]();
}

uint64_t REAssetManagerSceneAssetCreate()
{
  return MEMORY[0x24BE20A40]();
}

uint64_t REAssetManagerSceneAssetCreateFromEntity()
{
  return MEMORY[0x24BE20A48]();
}

uint64_t REAssetManagerShaderLibraryMemoryAssetCreateWithNetworkIdentifier()
{
  return MEMORY[0x24BE20A58]();
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithCGImage()
{
  return MEMORY[0x24BE20A60]();
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithMTLTexture()
{
  return MEMORY[0x24BE20A68]();
}

uint64_t REAssetManagerTimelineAssetCreateOrbitAnimation()
{
  return MEMORY[0x24BE20A70]();
}

uint64_t REAssetManagerTimelineAssetCreateSRTAnimation()
{
  return MEMORY[0x24BE20A78]();
}

uint64_t REAssetManagerTimelineAssetCreateSRTAnimationClipEx()
{
  return MEMORY[0x24BE20A80]();
}

uint64_t REAssetManagerTimelineAssetCreateSRTSampledAnimation()
{
  return MEMORY[0x24BE20A88]();
}

uint64_t REAssetManagerTimelineAssetCreateTimelineClipEx()
{
  return MEMORY[0x24BE20A90]();
}

uint64_t REAssetManagerTimelineAssetCreateTimelineGroup()
{
  return MEMORY[0x24BE20A98]();
}

uint64_t REAssetManagerVideoMemoryAssetCreate()
{
  return MEMORY[0x24BE20AA8]();
}

uint64_t REAssetManagerVideoMemoryAssetCreateWithoutTarget()
{
  return MEMORY[0x24BE20AB0]();
}

uint64_t REAssetRegistrationOptionsCreate()
{
  return MEMORY[0x24BE20AD8]();
}

uint64_t REAssetRegistrationOptionsSetIsMutable()
{
  return MEMORY[0x24BE20AE0]();
}

uint64_t REAssetServiceCreateTextureAssetWithDirectTexture()
{
  return MEMORY[0x24BE20AF0]();
}

uint64_t REAssetServiceMeshAssetCreateMutable()
{
  return MEMORY[0x24BE20AF8]();
}

uint64_t REAssetSetNetworkSharingMode()
{
  return MEMORY[0x24BE20B10]();
}

uint64_t REAssetSetSwiftObject()
{
  return MEMORY[0x24BE20B18]();
}

uint64_t REAssetTypeStatsGetCumulativeFileSize()
{
  return MEMORY[0x24BE20B20]();
}

uint64_t REAssetTypeStatsGetCumulativeLoadTime()
{
  return MEMORY[0x24BE20B28]();
}

uint64_t REAssetTypeStatsGetTypeName()
{
  return MEMORY[0x24BE20B30]();
}

uint64_t REAssetWithMetadataCreate()
{
  return MEMORY[0x24BE20B38]();
}

uint64_t REAssetWithMetadataSetConfigurationNames()
{
  return MEMORY[0x24BE20B40]();
}

uint64_t REAssetWithMetadataSetSceneMetadata()
{
  return MEMORY[0x24BE20B50]();
}

uint64_t REAssetWithMetadataSetTreatAsScene()
{
  return MEMORY[0x24BE20B58]();
}

uint64_t REAudioAnimationComponentGetComponentType()
{
  return MEMORY[0x24BE20B60]();
}

uint64_t REAudioAnimationComponentSetLinearGain()
{
  return MEMORY[0x24BE20B78]();
}

uint64_t REAudioAnimationComponentSetMute()
{
  return MEMORY[0x24BE20B88]();
}

uint64_t REAudioFileAssetCloneWithConfiguration()
{
  return MEMORY[0x24BE20B90]();
}

uint64_t REAudioFileAssetConfigurationCreate()
{
  return MEMORY[0x24BE20BA8]();
}

uint64_t REAudioFileAssetConfigurationDestroy()
{
  return MEMORY[0x24BE20BB0]();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationLevel()
{
  return MEMORY[0x24BE20BF0]();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationMode()
{
  return MEMORY[0x24BE20BF8]();
}

uint64_t REAudioFileAssetConfigurationSetInputMode()
{
  return MEMORY[0x24BE20C00]();
}

uint64_t REAudioFileAssetConfigurationSetLayoutTag()
{
  return MEMORY[0x24BE20C08]();
}

uint64_t REAudioFileAssetConfigurationSetMixGroupName()
{
  return MEMORY[0x24BE20C10]();
}

uint64_t REAudioFileAssetConfigurationSetNormalizationMode()
{
  return MEMORY[0x24BE20C18]();
}

uint64_t REAudioFileAssetConfigurationSetRandomizeStart()
{
  return MEMORY[0x24BE20C20]();
}

uint64_t REAudioFileAssetConfigurationSetShouldLoop()
{
  return MEMORY[0x24BE20C28]();
}

uint64_t REAudioFileAssetConfigurationSetStreaming()
{
  return MEMORY[0x24BE20C30]();
}

uint64_t REAudioFileAssetConfigurationSetTargetLUFS()
{
  return MEMORY[0x24BE20C38]();
}

uint64_t REAudioFileAssetCreateWithBufferAndConfiguration()
{
  return MEMORY[0x24BE20C40]();
}

uint64_t REAudioFileAssetCreateWithDescriptor()
{
  return MEMORY[0x24BE20C48]();
}

uint64_t REAudioFileAssetDescriptorCreateWithBundleResource()
{
  return MEMORY[0x24BE20C60]();
}

uint64_t REAudioFileAssetDescriptorCreateWithURL()
{
  return MEMORY[0x24BE20C68]();
}

uint64_t REAudioFileAssetGetAudioAssetID()
{
  return MEMORY[0x24BE20C70]();
}

uint64_t REAudioFileAssetGetCalibrationLevel()
{
  return MEMORY[0x24BE20C78]();
}

uint64_t REAudioFileAssetGetCalibrationMode()
{
  return MEMORY[0x24BE20C80]();
}

uint64_t REAudioFileAssetGetInputMode()
{
  return MEMORY[0x24BE20C88]();
}

uint64_t REAudioFileAssetGetLayoutTag()
{
  return MEMORY[0x24BE20C90]();
}

uint64_t REAudioFileAssetGetLengthInSeconds()
{
  return MEMORY[0x24BE20C98]();
}

uint64_t REAudioFileAssetGetLoopCount()
{
  return MEMORY[0x24BE20CA0]();
}

uint64_t REAudioFileAssetGetMixGroupName()
{
  return MEMORY[0x24BE20CA8]();
}

uint64_t REAudioFileAssetGetNormalizationMode()
{
  return MEMORY[0x24BE20CB0]();
}

uint64_t REAudioFileAssetGetRandomizeStart()
{
  return MEMORY[0x24BE20CB8]();
}

uint64_t REAudioFileAssetGetStreaming()
{
  return MEMORY[0x24BE20CC0]();
}

uint64_t REAudioFileAssetGetTargetLUFS()
{
  return MEMORY[0x24BE20CC8]();
}

uint64_t REAudioFileAssetIsCompletelyLoaded()
{
  return MEMORY[0x24BE20CD0]();
}

uint64_t REAudioFileAssetIsEqual()
{
  return MEMORY[0x24BE20CD8]();
}

uint64_t REAudioFileAssetSetInputMode()
{
  return MEMORY[0x24BE20CE8]();
}

uint64_t REAudioFileAssetSetLayoutTag()
{
  return MEMORY[0x24BE20CF0]();
}

uint64_t REAudioFileAssetSetLoopCount()
{
  return MEMORY[0x24BE20CF8]();
}

uint64_t REAudioFileAssetSetMixGroupName()
{
  return MEMORY[0x24BE20D00]();
}

uint64_t REAudioFileAssetSetStreaming()
{
  return MEMORY[0x24BE20D08]();
}

uint64_t REAudioFileGetAVAudioFormat()
{
  return MEMORY[0x24BE20D10]();
}

uint64_t REAudioFileGroupAssetCreateWithFileAssets()
{
  return MEMORY[0x24BE20D18]();
}

uint64_t REAudioFileGroupAssetGetAssetAtIndex()
{
  return MEMORY[0x24BE20D20]();
}

uint64_t REAudioFileGroupAssetGetAssetCount()
{
  return MEMORY[0x24BE20D28]();
}

uint64_t REAudioGeneratorAssetCreate()
{
  return MEMORY[0x24BE20D30]();
}

uint64_t REAudioGeneratorAssetCreateWithRenderBlock()
{
  return MEMORY[0x24BE20D38]();
}

uint64_t REAudioGeneratorAssetGetComponentDescription()
{
  return MEMORY[0x24BE20D40]();
}

uint64_t REAudioGeneratorAssetSetComponentDescription()
{
  return MEMORY[0x24BE20D48]();
}

uint64_t REAudioGeneratorAssetSetLayoutTag()
{
  return MEMORY[0x24BE20D50]();
}

uint64_t REAudioGeneratorBlockConfigurationCreate()
{
  return MEMORY[0x24BE20D58]();
}

uint64_t REAudioGeneratorBlockConfigurationDestroy()
{
  return MEMORY[0x24BE20D60]();
}

uint64_t REAudioGeneratorBlockConfigurationSetLayoutTag()
{
  return MEMORY[0x24BE20D68]();
}

uint64_t REAudioGeneratorBlockConfigurationSetMixGroupName()
{
  return MEMORY[0x24BE20D70]();
}

uint64_t REAudioLibraryComponentCopyAssetNames()
{
  return MEMORY[0x24BE20D78]();
}

uint64_t REAudioLibraryComponentGetAssetForName()
{
  return MEMORY[0x24BE20D80]();
}

uint64_t REAudioLibraryComponentGetComponentType()
{
  return MEMORY[0x24BE20D88]();
}

uint64_t REAudioLibraryComponentRegisterAsset()
{
  return MEMORY[0x24BE20D90]();
}

uint64_t REAudioLibraryComponentUnregisterAsset()
{
  return MEMORY[0x24BE20D98]();
}

uint64_t REAudioMixGroupsComponentAddMixGroup()
{
  return MEMORY[0x24BE20DA0]();
}

uint64_t REAudioMixGroupsComponentCreateMixGroupID()
{
  return MEMORY[0x24BE20DA8]();
}

uint64_t REAudioMixGroupsComponentFadeGroup()
{
  return MEMORY[0x24BE20DB0]();
}

uint64_t REAudioMixGroupsComponentGetComponentType()
{
  return MEMORY[0x24BE20DB8]();
}

uint64_t REAudioMixGroupsComponentGetGroups()
{
  return MEMORY[0x24BE20DC0]();
}

uint64_t REAudioMixGroupsComponentHasGroup()
{
  return MEMORY[0x24BE20DC8]();
}

uint64_t REAudioMixGroupsComponentRemoveGroup()
{
  return MEMORY[0x24BE20DD0]();
}

uint64_t REAudioMixGroupsComponentUpdateGroup()
{
  return MEMORY[0x24BE20DD8]();
}

uint64_t REAudioMixGroupsComponentUpdateGroupGain()
{
  return MEMORY[0x24BE20DE0]();
}

uint64_t REAudioMixerComponentGetComponentType()
{
  return MEMORY[0x24BE20DE8]();
}

uint64_t REAudioPlayerComponentAddDidChangeStateCallback()
{
  return MEMORY[0x24BE20DF0]();
}

uint64_t REAudioPlayerComponentCleanupToken()
{
  return MEMORY[0x24BE20DF8]();
}

uint64_t REAudioPlayerComponentCopySizeOfAudioPlayerComponentFromEntity()
{
  return MEMORY[0x24BE20E00]();
}

uint64_t REAudioPlayerComponentCopySourceClockOrTimebase()
{
  return MEMORY[0x24BE20E08]();
}

uint64_t REAudioPlayerComponentFadeTokenToGainWithDuration()
{
  return MEMORY[0x24BE20E10]();
}

uint64_t REAudioPlayerComponentGetAudioUnitForToken()
{
  return MEMORY[0x24BE20E18]();
}

uint64_t REAudioPlayerComponentGetComponentType()
{
  return MEMORY[0x24BE20E20]();
}

uint64_t REAudioPlayerComponentGetDecibelGainForToken()
{
  return MEMORY[0x24BE20E28]();
}

uint64_t REAudioPlayerComponentGetDirectSendLevelForToken()
{
  return MEMORY[0x24BE20E30]();
}

uint64_t REAudioPlayerComponentGetPlaybackRateForToken()
{
  return MEMORY[0x24BE20E38]();
}

uint64_t REAudioPlayerComponentGetReverbSendLevelForToken()
{
  return MEMORY[0x24BE20E48]();
}

uint64_t REAudioPlayerComponentIsStreamPendingPlay()
{
  return MEMORY[0x24BE20E58]();
}

uint64_t REAudioPlayerComponentIsStreamPlaying()
{
  return MEMORY[0x24BE20E60]();
}

uint64_t REAudioPlayerComponentPauseToken()
{
  return MEMORY[0x24BE20E68]();
}

uint64_t REAudioPlayerComponentPlayToken()
{
  return MEMORY[0x24BE20E70]();
}

uint64_t REAudioPlayerComponentPlaybackPositionForToken()
{
  return MEMORY[0x24BE20E78]();
}

uint64_t REAudioPlayerComponentPrepareAsset()
{
  return MEMORY[0x24BE20E80]();
}

uint64_t REAudioPlayerComponentRegisterAsset()
{
  return MEMORY[0x24BE20E88]();
}

uint64_t REAudioPlayerComponentRemoveCallback()
{
  return MEMORY[0x24BE20E90]();
}

uint64_t REAudioPlayerComponentSetCompletionHandler()
{
  return MEMORY[0x24BE20E98]();
}

uint64_t REAudioPlayerComponentSetDecibelGainForToken()
{
  return MEMORY[0x24BE20EA0]();
}

uint64_t REAudioPlayerComponentSetDidPrepareAudioUnitCallback()
{
  return MEMORY[0x24BE20EA8]();
}

uint64_t REAudioPlayerComponentSetDirectSendLevelForToken()
{
  return MEMORY[0x24BE20EB0]();
}

uint64_t REAudioPlayerComponentSetLinearGainForToken()
{
  return MEMORY[0x24BE20EB8]();
}

uint64_t REAudioPlayerComponentSetOneShotSound()
{
  return MEMORY[0x24BE20EC0]();
}

uint64_t REAudioPlayerComponentSetPlaybackPositionForToken()
{
  return MEMORY[0x24BE20EC8]();
}

uint64_t REAudioPlayerComponentSetPlaybackRateForToken()
{
  return MEMORY[0x24BE20ED0]();
}

uint64_t REAudioPlayerComponentSetRemoveFromSceneCallback()
{
  return MEMORY[0x24BE20ED8]();
}

uint64_t REAudioPlayerComponentSetReverbSendLevelForToken()
{
  return MEMORY[0x24BE20EE0]();
}

uint64_t REAudioPlayerComponentSetSourceClockOrTimebase()
{
  return MEMORY[0x24BE20EE8]();
}

uint64_t REAudioPlayerComponentStopAll()
{
  return MEMORY[0x24BE20EF0]();
}

uint64_t REAudioPlayerComponentStopToken()
{
  return MEMORY[0x24BE20EF8]();
}

uint64_t REAudioSceneServiceSetExternalSourceControl()
{
  return MEMORY[0x24BE20F00]();
}

uint64_t REAudioSceneServiceSetSTSControl()
{
  return MEMORY[0x24BE20F08]();
}

uint64_t REAudioServiceInsertPostProcessingEffect()
{
  return MEMORY[0x24BE20F10]();
}

uint64_t REAudioServiceStartAudioEngine()
{
  return MEMORY[0x24BE20F18]();
}

uint64_t REAudioServiceStopAudioEngine()
{
  return MEMORY[0x24BE20F20]();
}

uint64_t REBillboardComponentGetBlendFactor()
{
  return MEMORY[0x24BE20F30]();
}

uint64_t REBillboardComponentGetComponentType()
{
  return MEMORY[0x24BE20F38]();
}

uint64_t REBillboardComponentGetForwardDirection()
{
  return MEMORY[0x24BE20F40]();
}

uint64_t REBillboardComponentGetRotationAxis()
{
  return MEMORY[0x24BE20F48]();
}

uint64_t REBillboardComponentGetUpDirection()
{
  return MEMORY[0x24BE20F50]();
}

uint64_t REBillboardComponentGetUseRotationAxis()
{
  return MEMORY[0x24BE20F58]();
}

uint64_t REBillboardComponentGetUseUpDirection()
{
  return MEMORY[0x24BE20F60]();
}

uint64_t REBillboardComponentSetBlendFactor()
{
  return MEMORY[0x24BE20F68]();
}

uint64_t REBillboardComponentSetForwardDirection()
{
  return MEMORY[0x24BE20F70]();
}

uint64_t REBillboardComponentSetRotationAxis()
{
  return MEMORY[0x24BE20F78]();
}

uint64_t REBillboardComponentSetUpDirection()
{
  return MEMORY[0x24BE20F80]();
}

uint64_t REBillboardComponentSetUseRotationAxis()
{
  return MEMORY[0x24BE20F88]();
}

uint64_t REBillboardComponentSetUseUpDirection()
{
  return MEMORY[0x24BE20F90]();
}

uint64_t REBindKeyEscape()
{
  return MEMORY[0x24BE20F98]();
}

uint64_t REBindKeyUnescape()
{
  return MEMORY[0x24BE20FA0]();
}

uint64_t REBindPointBoundComponent()
{
  return MEMORY[0x24BE20FA8]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble()
{
  return MEMORY[0x24BE20FB8]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble2()
{
  return MEMORY[0x24BE20FC0]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble3()
{
  return MEMORY[0x24BE20FC8]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble4()
{
  return MEMORY[0x24BE20FD0]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat()
{
  return MEMORY[0x24BE20FD8]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat2()
{
  return MEMORY[0x24BE20FE0]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat3()
{
  return MEMORY[0x24BE20FE8]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat4()
{
  return MEMORY[0x24BE20FF0]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt64()
{
  return MEMORY[0x24BE21008]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesSRT()
{
  return MEMORY[0x24BE21020]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt16()
{
  return MEMORY[0x24BE21030]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt32()
{
  return MEMORY[0x24BE21038]();
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt8()
{
  return MEMORY[0x24BE21040]();
}

uint64_t REBindPointCreateReferenceForEntityDouble()
{
  return MEMORY[0x24BE21050]();
}

uint64_t REBindPointCreateReferenceForEntityDouble2()
{
  return MEMORY[0x24BE21058]();
}

uint64_t REBindPointCreateReferenceForEntityDouble3()
{
  return MEMORY[0x24BE21060]();
}

uint64_t REBindPointCreateReferenceForEntityDouble4()
{
  return MEMORY[0x24BE21068]();
}

uint64_t REBindPointCreateReferenceForEntityFloat()
{
  return MEMORY[0x24BE21070]();
}

uint64_t REBindPointCreateReferenceForEntityFloat2()
{
  return MEMORY[0x24BE21078]();
}

uint64_t REBindPointCreateReferenceForEntityFloat3()
{
  return MEMORY[0x24BE21080]();
}

uint64_t REBindPointCreateReferenceForEntityFloat4()
{
  return MEMORY[0x24BE21088]();
}

uint64_t REBindPointCreateReferenceForEntityInt64()
{
  return MEMORY[0x24BE210A0]();
}

uint64_t REBindPointCreateReferenceForEntityUInt16()
{
  return MEMORY[0x24BE210C8]();
}

uint64_t REBindPointCreateReferenceForEntityUInt32()
{
  return MEMORY[0x24BE210D0]();
}

uint64_t REBindPointCreateReferenceForEntityUInt8()
{
  return MEMORY[0x24BE210D8]();
}

uint64_t REBindPointDestroy()
{
  return MEMORY[0x24BE210E0]();
}

uint64_t REBindPointGetBool()
{
  return MEMORY[0x24BE210E8]();
}

uint64_t REBindPointGetDouble()
{
  return MEMORY[0x24BE210F0]();
}

uint64_t REBindPointGetDouble2()
{
  return MEMORY[0x24BE210F8]();
}

uint64_t REBindPointGetDouble3()
{
  return MEMORY[0x24BE21100]();
}

uint64_t REBindPointGetDouble4()
{
  return MEMORY[0x24BE21108]();
}

uint64_t REBindPointGetFloat()
{
  return MEMORY[0x24BE21110]();
}

uint64_t REBindPointGetFloat2()
{
  return MEMORY[0x24BE21118]();
}

uint64_t REBindPointGetFloat3()
{
  return MEMORY[0x24BE21120]();
}

uint64_t REBindPointGetFloat4()
{
  return MEMORY[0x24BE21128]();
}

uint64_t REBindPointGetInt64()
{
  return MEMORY[0x24BE21140]();
}

uint64_t REBindPointGetQuatF()
{
  return MEMORY[0x24BE21150]();
}

uint64_t REBindPointGetSRT()
{
  return MEMORY[0x24BE21158]();
}

uint64_t REBindPointGetString()
{
  return MEMORY[0x24BE21160]();
}

uint64_t REBindPointIsOverrideEnabled()
{
  return MEMORY[0x24BE21180]();
}

uint64_t REBindPointIsValid()
{
  return MEMORY[0x24BE21188]();
}

uint64_t REBindPointSetBool()
{
  return MEMORY[0x24BE21190]();
}

uint64_t REBindPointSetDouble()
{
  return MEMORY[0x24BE21198]();
}

uint64_t REBindPointSetDouble2()
{
  return MEMORY[0x24BE211A0]();
}

uint64_t REBindPointSetDouble3()
{
  return MEMORY[0x24BE211A8]();
}

uint64_t REBindPointSetDouble4()
{
  return MEMORY[0x24BE211B0]();
}

uint64_t REBindPointSetFloat()
{
  return MEMORY[0x24BE211B8]();
}

uint64_t REBindPointSetFloat2()
{
  return MEMORY[0x24BE211C0]();
}

uint64_t REBindPointSetFloat3()
{
  return MEMORY[0x24BE211C8]();
}

uint64_t REBindPointSetFloat4()
{
  return MEMORY[0x24BE211D0]();
}

uint64_t REBindPointSetInt16()
{
  return MEMORY[0x24BE211D8]();
}

uint64_t REBindPointSetInt32()
{
  return MEMORY[0x24BE211E0]();
}

uint64_t REBindPointSetInt64()
{
  return MEMORY[0x24BE211E8]();
}

uint64_t REBindPointSetInt8()
{
  return MEMORY[0x24BE211F0]();
}

uint64_t REBindPointSetOverrideEnabled()
{
  return MEMORY[0x24BE211F8]();
}

uint64_t REBindPointSetQuatF()
{
  return MEMORY[0x24BE21200]();
}

uint64_t REBindPointSetSRT()
{
  return MEMORY[0x24BE21208]();
}

uint64_t REBindPointSetString()
{
  return MEMORY[0x24BE21210]();
}

uint64_t REBindPointSetUInt16()
{
  return MEMORY[0x24BE21218]();
}

uint64_t REBindPointSetUInt32()
{
  return MEMORY[0x24BE21220]();
}

uint64_t REBindPointSetUInt8()
{
  return MEMORY[0x24BE21228]();
}

uint64_t REBlendShapeWeightsComponentGetBlendShapeWeightsCount()
{
  return MEMORY[0x24BE21230]();
}

uint64_t REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition()
{
  return MEMORY[0x24BE21238]();
}

uint64_t REBlendShapeWeightsComponentGetBlendWeight()
{
  return MEMORY[0x24BE21240]();
}

uint64_t REBlendShapeWeightsComponentGetBlendWeightCount()
{
  return MEMORY[0x24BE21248]();
}

uint64_t REBlendShapeWeightsComponentGetBlendWeights()
{
  return MEMORY[0x24BE21250]();
}

uint64_t REBlendShapeWeightsComponentGetComponentType()
{
  return MEMORY[0x24BE21258]();
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition()
{
  return MEMORY[0x24BE21268]();
}

uint64_t REBlendShapeWeightsComponentSetBlendWeight()
{
  return MEMORY[0x24BE21270]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetForMesh()
{
  return MEMORY[0x24BE21280]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions()
{
  return MEMORY[0x24BE21288]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames()
{
  return MEMORY[0x24BE21290]();
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendShapeName()
{
  return MEMORY[0x24BE21298]();
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount()
{
  return MEMORY[0x24BE212A0]();
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMap()
{
  return MEMORY[0x24BE212A8]();
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMapCount()
{
  return MEMORY[0x24BE212B0]();
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendWeightCount()
{
  return MEMORY[0x24BE212B8]();
}

uint64_t REBlendShapeWeightsDefinitionAssetGetBlendWeightName()
{
  return MEMORY[0x24BE212C0]();
}

uint64_t REBodyTrackingComponentGetComponentType()
{
  return MEMORY[0x24BE212C8]();
}

uint64_t REBodyTrackingComponentGetTargetBodyIdentifier()
{
  return MEMORY[0x24BE212D0]();
}

uint64_t REBodyTrackingComponentGetTargetType()
{
  return MEMORY[0x24BE212D8]();
}

uint64_t REBodyTrackingComponentIsPaused()
{
  return MEMORY[0x24BE212E0]();
}

uint64_t REBodyTrackingComponentSetIsPaused()
{
  return MEMORY[0x24BE212E8]();
}

uint64_t REBodyTrackingComponentSetTargetBodyIdentifier()
{
  return MEMORY[0x24BE212F0]();
}

uint64_t REBodyTrackingComponentSetTargetType()
{
  return MEMORY[0x24BE212F8]();
}

uint64_t REBoxShapeCreate()
{
  return MEMORY[0x24BE21300]();
}

uint64_t REBoxShapeGetExtent()
{
  return MEMORY[0x24BE21308]();
}

uint64_t REBuiltinTextureAssetDescriptorCreate()
{
  return MEMORY[0x24BE21310]();
}

uint64_t RECGColorToColorGamut()
{
  return MEMORY[0x24BE21318]();
}

uint64_t RECIntrospectionAlloc()
{
  return MEMORY[0x24BE21320]();
}

uint64_t RECIntrospectionFree()
{
  return MEMORY[0x24BE21338]();
}

uint64_t RECIntrospectionStructRegister()
{
  return MEMORY[0x24BE21340]();
}

uint64_t RECIntrospectionStructUnregister()
{
  return MEMORY[0x24BE21348]();
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture()
{
  return MEMORY[0x24BE21360]();
}

uint64_t RECameraViewDescriptorsComponentAddViewDescriptor()
{
  return MEMORY[0x24BE21368]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct()
{
  return MEMORY[0x24BE21370]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct()
{
  return MEMORY[0x24BE21378]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport()
{
  return MEMORY[0x24BE21380]();
}

uint64_t RECameraViewDescriptorsComponentClearCameraViewDescriptors()
{
  return MEMORY[0x24BE21388]();
}

uint64_t RECameraViewDescriptorsComponentGetComponentType()
{
  return MEMORY[0x24BE21390]();
}

uint64_t RECameraViewDescriptorsComponentSetForceWaitOnPipelineCompilation()
{
  return MEMORY[0x24BE213A0]();
}

uint64_t RECameraViewDescriptorsComponentSetRasterizationRateMap()
{
  return MEMORY[0x24BE213A8]();
}

uint64_t RECameraViewDescriptorsComponentSetRenderOrder()
{
  return MEMORY[0x24BE213B0]();
}

uint64_t RECameraViewDescriptorsComponentSetViewMode()
{
  return MEMORY[0x24BE213B8]();
}

uint64_t RECapsuleShapeCreate()
{
  return MEMORY[0x24BE213C0]();
}

uint64_t RECapsuleShapeGetHeight()
{
  return MEMORY[0x24BE213C8]();
}

uint64_t RECapsuleShapeGetRadius()
{
  return MEMORY[0x24BE213D0]();
}

uint64_t REChannelAudioComponentGetComponentType()
{
  return MEMORY[0x24BE213D8]();
}

uint64_t REChannelAudioComponentGetDecibelGain()
{
  return MEMORY[0x24BE213E0]();
}

uint64_t REChannelAudioComponentSetDecibelGain()
{
  return MEMORY[0x24BE213E8]();
}

uint64_t RECharacterControllerCollisionResultGetCollisionCount()
{
  return MEMORY[0x24BE213F0]();
}

uint64_t RECharacterControllerCollisionResultGetHitEntityAtCollisionIndex()
{
  return MEMORY[0x24BE213F8]();
}

uint64_t RECharacterControllerCollisionResultGetHitFlags()
{
  return MEMORY[0x24BE21400]();
}

uint64_t RECharacterControllerCollisionResultGetHitNormalAtCollisionIndex()
{
  return MEMORY[0x24BE21408]();
}

uint64_t RECharacterControllerCollisionResultGetHitPositionAtCollisionIndex()
{
  return MEMORY[0x24BE21410]();
}

uint64_t RECharacterControllerCollisionResultGetMoveDirectionAtCollisionIndex()
{
  return MEMORY[0x24BE21418]();
}

uint64_t RECharacterControllerCollisionResultGetMoveDistanceAtCollisionIndex()
{
  return MEMORY[0x24BE21420]();
}

uint64_t RECharacterControllerComponentGetCollisionGroup()
{
  return MEMORY[0x24BE21428]();
}

uint64_t RECharacterControllerComponentGetCollisionMask()
{
  return MEMORY[0x24BE21430]();
}

uint64_t RECharacterControllerComponentGetComponentType()
{
  return MEMORY[0x24BE21438]();
}

uint64_t RECharacterControllerComponentGetHeight()
{
  return MEMORY[0x24BE21440]();
}

uint64_t RECharacterControllerComponentGetRadius()
{
  return MEMORY[0x24BE21448]();
}

uint64_t RECharacterControllerComponentGetSkinWidth()
{
  return MEMORY[0x24BE21450]();
}

uint64_t RECharacterControllerComponentGetSlopeLimit()
{
  return MEMORY[0x24BE21458]();
}

uint64_t RECharacterControllerComponentGetStepLimit()
{
  return MEMORY[0x24BE21460]();
}

uint64_t RECharacterControllerComponentGetUpVector()
{
  return MEMORY[0x24BE21468]();
}

uint64_t RECharacterControllerComponentGetVelocity()
{
  return MEMORY[0x24BE21470]();
}

uint64_t RECharacterControllerComponentMoveEx()
{
  return MEMORY[0x24BE21478]();
}

uint64_t RECharacterControllerComponentOnGround()
{
  return MEMORY[0x24BE21480]();
}

uint64_t RECharacterControllerComponentSetCollisionFilter()
{
  return MEMORY[0x24BE21488]();
}

uint64_t RECharacterControllerComponentSetHeight()
{
  return MEMORY[0x24BE21490]();
}

uint64_t RECharacterControllerComponentSetPosition()
{
  return MEMORY[0x24BE21498]();
}

uint64_t RECharacterControllerComponentSetRadius()
{
  return MEMORY[0x24BE214A0]();
}

uint64_t RECharacterControllerComponentSetSkinWidth()
{
  return MEMORY[0x24BE214A8]();
}

uint64_t RECharacterControllerComponentSetSlopeLimit()
{
  return MEMORY[0x24BE214B0]();
}

uint64_t RECharacterControllerComponentSetStepLimit()
{
  return MEMORY[0x24BE214B8]();
}

uint64_t RECharacterControllerComponentSetUpVector()
{
  return MEMORY[0x24BE214C0]();
}

uint64_t RECharacterControllerComponentStateGetComponentType()
{
  return MEMORY[0x24BE214C8]();
}

uint64_t REColliderComponentGetCollisionObject()
{
  return MEMORY[0x24BE21510]();
}

uint64_t REColliderComponentGetComponentType()
{
  return MEMORY[0x24BE21518]();
}

uint64_t REColliderComponentGetGroup()
{
  return MEMORY[0x24BE21520]();
}

uint64_t REColliderComponentGetInteractionType()
{
  return MEMORY[0x24BE21528]();
}

uint64_t REColliderComponentGetMask()
{
  return MEMORY[0x24BE21530]();
}

uint64_t REColliderComponentGetShape()
{
  return MEMORY[0x24BE21538]();
}

uint64_t REColliderComponentSetGroup()
{
  return MEMORY[0x24BE21540]();
}

uint64_t REColliderComponentSetInteractionType()
{
  return MEMORY[0x24BE21548]();
}

uint64_t REColliderComponentSetMask()
{
  return MEMORY[0x24BE21550]();
}

uint64_t REColliderComponentSetShape()
{
  return MEMORY[0x24BE21558]();
}

uint64_t RECollisionCastConfigurationInitToDefault()
{
  return MEMORY[0x24BE21560]();
}

uint64_t RECollisionCastConfigurationSetFilter()
{
  return MEMORY[0x24BE21568]();
}

uint64_t RECollisionCastConfigurationSetQueryType()
{
  return MEMORY[0x24BE21570]();
}

uint64_t RECollisionCastConvexVsEntitySimulation()
{
  return MEMORY[0x24BE21578]();
}

uint64_t RECollisionCastConvexVsScene()
{
  return MEMORY[0x24BE21580]();
}

uint64_t RECollisionCastHitCollectionCount()
{
  return MEMORY[0x24BE21588]();
}

uint64_t RECollisionCastHitCollectionCreate()
{
  return MEMORY[0x24BE21590]();
}

uint64_t RECollisionCastHitCollectionDestroy()
{
  return MEMORY[0x24BE21598]();
}

uint64_t RECollisionCastHitCollectionGetByIndex()
{
  return MEMORY[0x24BE215A0]();
}

uint64_t RECollisionCastHitGetFaceIndex()
{
  return MEMORY[0x24BE215A8]();
}

uint64_t RECollisionCastHitGetFaceUV()
{
  return MEMORY[0x24BE215B0]();
}

uint64_t RECollisionCastHitGetHitPercentage()
{
  return MEMORY[0x24BE215B8]();
}

uint64_t RECollisionCastHitGetNormal()
{
  return MEMORY[0x24BE215C0]();
}

uint64_t RECollisionCastHitGetObject()
{
  return MEMORY[0x24BE215C8]();
}

uint64_t RECollisionCastHitGetPosition()
{
  return MEMORY[0x24BE215D0]();
}

uint64_t RECollisionCastHitGetShapeIndex()
{
  return MEMORY[0x24BE215D8]();
}

uint64_t RECollisionCastHitHasTriangleMeshHitInfo()
{
  return MEMORY[0x24BE215E0]();
}

uint64_t RECollisionCastRayVsEntitySimulation()
{
  return MEMORY[0x24BE215E8]();
}

uint64_t RECollisionCastRayVsScene()
{
  return MEMORY[0x24BE215F0]();
}

uint64_t RECollisionMeshCreateFromSIMDPositions()
{
  return MEMORY[0x24BE215F8]();
}

uint64_t RECollisionMeshCreateWithFormatV2()
{
  return MEMORY[0x24BE21608]();
}

uint64_t RECollisionMeshExtractIndices()
{
  return MEMORY[0x24BE21618]();
}

uint64_t RECollisionMeshExtractVertexPositions()
{
  return MEMORY[0x24BE21620]();
}

uint64_t RECollisionMeshGetIndexCount()
{
  return MEMORY[0x24BE21628]();
}

uint64_t RECollisionMeshGetVertexCount()
{
  return MEMORY[0x24BE21630]();
}

uint64_t RECollisionMeshShapeGetMesh()
{
  return MEMORY[0x24BE21638]();
}

uint64_t RECollisionObjectCreate()
{
  return MEMORY[0x24BE21640]();
}

uint64_t RECollisionObjectDestroy()
{
  return MEMORY[0x24BE21648]();
}

uint64_t RECollisionObjectGetEntity()
{
  return MEMORY[0x24BE21650]();
}

uint64_t RECollisionObjectGetShape()
{
  return MEMORY[0x24BE21658]();
}

uint64_t RECollisionObjectGetUserData()
{
  return MEMORY[0x24BE21660]();
}

uint64_t RECollisionObjectSetPose()
{
  return MEMORY[0x24BE21668]();
}

uint64_t RECollisionShapeAssetGetCollisionShape()
{
  return MEMORY[0x24BE21670]();
}

uint64_t RECollisionShapeAssetGetType()
{
  return MEMORY[0x24BE21678]();
}

uint64_t RECollisionShapeDestroy()
{
  return MEMORY[0x24BE21680]();
}

uint64_t RECollisionShapeGetBoundingBox()
{
  return MEMORY[0x24BE21688]();
}

uint64_t RECollisionShapeGetType()
{
  return MEMORY[0x24BE21690]();
}

uint64_t RECollisionWorldGetContactsObjectVsEntitySimulationAdHoc()
{
  return MEMORY[0x24BE21698]();
}

uint64_t RECollisionWorldGetContactsObjectVsSceneAdHoc()
{
  return MEMORY[0x24BE216A0]();
}

uint64_t REComponentClassFromType()
{
  return MEMORY[0x24BE216B8]();
}

uint64_t REComponentCreateByClass()
{
  return MEMORY[0x24BE216D8]();
}

uint64_t REComponentCreateByType()
{
  return MEMORY[0x24BE216E0]();
}

uint64_t REComponentGetClass()
{
  return MEMORY[0x24BE216F0]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x24BE216F8]();
}

uint64_t REComponentQueryDestroy()
{
  return MEMORY[0x24BE21710]();
}

uint64_t REComponentTypeSetCloneCallback()
{
  return MEMORY[0x24BE21720]();
}

uint64_t REComposeMatrix()
{
  return MEMORY[0x24BE21728]();
}

uint64_t RECompoundShapeAssetGetChildCount()
{
  return MEMORY[0x24BE21730]();
}

uint64_t RECompoundShapeAssetGetChildPose()
{
  return MEMORY[0x24BE21738]();
}

uint64_t RECompoundShapeAssetGetChildShape()
{
  return MEMORY[0x24BE21740]();
}

uint64_t REConeShapeGetHeight()
{
  return MEMORY[0x24BE21748]();
}

uint64_t REConeShapeGetRadius()
{
  return MEMORY[0x24BE21750]();
}

uint64_t REContactSetCollectionCreate()
{
  return MEMORY[0x24BE21758]();
}

uint64_t REContactSetCollectionDestroy()
{
  return MEMORY[0x24BE21760]();
}

uint64_t REContactSetCollectionGetIterator()
{
  return MEMORY[0x24BE21768]();
}

uint64_t REContactSetCollectionIteratorCurrent()
{
  return MEMORY[0x24BE21770]();
}

uint64_t REContactSetCollectionIteratorNext()
{
  return MEMORY[0x24BE21778]();
}

uint64_t REContactSetCount()
{
  return MEMORY[0x24BE21780]();
}

uint64_t REContactSetGetAveragePosition()
{
  return MEMORY[0x24BE21788]();
}

uint64_t REContactSetGetImpulse()
{
  return MEMORY[0x24BE21790]();
}

uint64_t REContactSetGetMaxPenetrationDepth()
{
  return MEMORY[0x24BE21798]();
}

uint64_t REContactSetGetNormal()
{
  return MEMORY[0x24BE217A0]();
}

uint64_t REContactSetGetPenetrationDepth()
{
  return MEMORY[0x24BE217A8]();
}

uint64_t REContactSetGetPositionAWorld()
{
  return MEMORY[0x24BE217B0]();
}

uint64_t REContactSetGetPositionBWorld()
{
  return MEMORY[0x24BE217B8]();
}

uint64_t REContactSetGetTotalImpulse()
{
  return MEMORY[0x24BE217C0]();
}

uint64_t REContactSetHasContact()
{
  return MEMORY[0x24BE217C8]();
}

uint64_t REContactSetNeedsSwap()
{
  return MEMORY[0x24BE217D0]();
}

uint64_t REContactSetObjectA()
{
  return MEMORY[0x24BE217D8]();
}

uint64_t REContactSetObjectB()
{
  return MEMORY[0x24BE217E0]();
}

uint64_t REConvertIntrinsicEulersToMatrices3x3()
{
  return MEMORY[0x24BE217E8]();
}

uint64_t REConvexPolyhedronShapeCreateNullable()
{
  return MEMORY[0x24BE217F8]();
}

uint64_t REConvexPolyhedronShapeExtractMeshTriangleIndices()
{
  return MEMORY[0x24BE21800]();
}

uint64_t REConvexPolyhedronShapeExtractPositions()
{
  return MEMORY[0x24BE21808]();
}

uint64_t REConvexPolyhedronShapeGetPositionCount()
{
  return MEMORY[0x24BE21810]();
}

uint64_t RECreateBackEase()
{
  return MEMORY[0x24BE21820]();
}

uint64_t RECreateBackEaseEx()
{
  return MEMORY[0x24BE21828]();
}

uint64_t RECreateBounceEase()
{
  return MEMORY[0x24BE21830]();
}

uint64_t RECreateBounceEaseEx()
{
  return MEMORY[0x24BE21838]();
}

uint64_t RECreateCGColorFromColorGamut()
{
  return MEMORY[0x24BE21840]();
}

uint64_t RECreateCircleEase()
{
  return MEMORY[0x24BE21848]();
}

uint64_t RECreateCircleEaseEx()
{
  return MEMORY[0x24BE21850]();
}

uint64_t RECreateCubeTextureDataFromLatLong()
{
  return MEMORY[0x24BE21858]();
}

uint64_t RECreateCubicBezierEaseEx()
{
  return MEMORY[0x24BE21860]();
}

uint64_t RECreateElasticEase()
{
  return MEMORY[0x24BE21868]();
}

uint64_t RECreateElasticEaseEx()
{
  return MEMORY[0x24BE21870]();
}

uint64_t RECreateExponentialEase()
{
  return MEMORY[0x24BE21878]();
}

uint64_t RECreateExponentialEaseEx()
{
  return MEMORY[0x24BE21880]();
}

uint64_t RECreateHermiteEase()
{
  return MEMORY[0x24BE21888]();
}

uint64_t RECreateHermiteEaseEx()
{
  return MEMORY[0x24BE21890]();
}

uint64_t RECreateLoadTraceTypeBitFieldSignpostArg()
{
  return MEMORY[0x24BE21898]();
}

uint64_t RECreateLogarithmicEase()
{
  return MEMORY[0x24BE218A0]();
}

uint64_t RECreateLogarithmicEaseEx()
{
  return MEMORY[0x24BE218A8]();
}

uint64_t RECreateMeshSortGroup()
{
  return MEMORY[0x24BE218B0]();
}

uint64_t RECreatePowerEase()
{
  return MEMORY[0x24BE218B8]();
}

uint64_t RECreatePowerEaseEx()
{
  return MEMORY[0x24BE218C0]();
}

uint64_t RECreateSineEase()
{
  return MEMORY[0x24BE218C8]();
}

uint64_t RECreateSineEaseEx()
{
  return MEMORY[0x24BE218D0]();
}

uint64_t RECreateWorldRoot()
{
  return MEMORY[0x24BE218D8]();
}

uint64_t RECustomComponentGetObject()
{
  return MEMORY[0x24BE218E0]();
}

uint64_t RECustomComponentTypeCreate()
{
  return MEMORY[0x24BE218F0]();
}

uint64_t RECustomComponentTypeCreateWithIsTransient()
{
  return MEMORY[0x24BE218F8]();
}

uint64_t RECustomComponentTypeDestroy()
{
  return MEMORY[0x24BE21900]();
}

uint64_t RECustomComponentTypeGetObjectIntrospection()
{
  return MEMORY[0x24BE21910]();
}

uint64_t RECustomMatrixCameraComponentCalculateWorldPose()
{
  return MEMORY[0x24BE21928]();
}

uint64_t RECustomMatrixCameraComponentGetComponentType()
{
  return MEMORY[0x24BE21930]();
}

uint64_t RECustomMatrixCameraComponentGetLocalEyePose()
{
  return MEMORY[0x24BE21938]();
}

uint64_t RECustomMatrixCameraComponentGetProjectionMatrix()
{
  return MEMORY[0x24BE21940]();
}

uint64_t RECustomMatrixCameraComponentSetAutoFitFullScreenAspect()
{
  return MEMORY[0x24BE21948]();
}

uint64_t RECustomMatrixCameraComponentSetLocalEyePose()
{
  return MEMORY[0x24BE21950]();
}

uint64_t RECustomMatrixCameraComponentSetProjectionFromMatrix()
{
  return MEMORY[0x24BE21958]();
}

uint64_t RECustomSkeletalPoseID()
{
  return MEMORY[0x24BE21960]();
}

uint64_t RECustomSystemAnimationPlaybackID()
{
  return MEMORY[0x24BE21968]();
}

uint64_t RECustomSystemEnqueueUpdateWithDeadline()
{
  return MEMORY[0x24BE21970]();
}

uint64_t RECustomSystemGetSwiftSystemForScene()
{
  return MEMORY[0x24BE21978]();
}

uint64_t RECustomSystemMeshDeformerID()
{
  return MEMORY[0x24BE21980]();
}

uint64_t RECustomSystemNetworkReceiveID()
{
  return MEMORY[0x24BE21988]();
}

uint64_t RECustomSystemNetworkSendID()
{
  return MEMORY[0x24BE21990]();
}

uint64_t RECustomSystemPhysicsID()
{
  return MEMORY[0x24BE21998]();
}

uint64_t RECustomSystemResetScheduleOptions()
{
  return MEMORY[0x24BE219A0]();
}

uint64_t RECustomSystemSetScheduleType()
{
  return MEMORY[0x24BE219A8]();
}

uint64_t RECustomSystemSetUpdateInterval()
{
  return MEMORY[0x24BE219B0]();
}

uint64_t RECustomSystemUpdateContextGetDeltaTime()
{
  return MEMORY[0x24BE219B8]();
}

uint64_t RECustomSystemUpdateContextGetSystemsArePausedInEditor()
{
  return MEMORY[0x24BE219C0]();
}

uint64_t RECylinderShapeGetHeight()
{
  return MEMORY[0x24BE219C8]();
}

uint64_t RECylinderShapeGetRadius()
{
  return MEMORY[0x24BE219D0]();
}

uint64_t REDebugMeshComponentGetComponentType()
{
  return MEMORY[0x24BE219D8]();
}

uint64_t REDebugMeshComponentGetShaderDebugMode()
{
  return MEMORY[0x24BE219E0]();
}

uint64_t REDebugMeshComponentReset()
{
  return MEMORY[0x24BE219E8]();
}

uint64_t REDebugMeshComponentSetShaderDebugMode()
{
  return MEMORY[0x24BE219F0]();
}

uint64_t REDecoderBeginContainer()
{
  return MEMORY[0x24BE21A00]();
}

uint64_t REDecoderClose()
{
  return MEMORY[0x24BE21A08]();
}

uint64_t REDecoderContainerElementCount()
{
  return MEMORY[0x24BE21A10]();
}

uint64_t REDecoderContainerGetKeyAndOffset()
{
  return MEMORY[0x24BE21A18]();
}

uint64_t REDecoderContainerSetOffset()
{
  return MEMORY[0x24BE21A20]();
}

uint64_t REDecoderCreate()
{
  return MEMORY[0x24BE21A28]();
}

uint64_t REDecoderDestroy()
{
  return MEMORY[0x24BE21A30]();
}

uint64_t REDecoderGetStatus()
{
  return MEMORY[0x24BE21A40]();
}

uint64_t REDecoderIsAtEndOfContainer()
{
  return MEMORY[0x24BE21A48]();
}

uint64_t REDecoderOpen()
{
  return MEMORY[0x24BE21A50]();
}

uint64_t REDecoderReadBool()
{
  return MEMORY[0x24BE21A58]();
}

uint64_t REDecoderReadDouble()
{
  return MEMORY[0x24BE21A60]();
}

uint64_t REDecoderReadFloat()
{
  return MEMORY[0x24BE21A68]();
}

uint64_t REDecoderReadString()
{
  return MEMORY[0x24BE21A90]();
}

uint64_t REDecoderSetFromCFData()
{
  return MEMORY[0x24BE21AB8]();
}

uint64_t REDecoderTryReadNil()
{
  return MEMORY[0x24BE21AC0]();
}

uint64_t REDecomposeMatrix()
{
  return MEMORY[0x24BE21AC8]();
}

uint64_t REDeferredActivationComponentGetComponentType()
{
  return MEMORY[0x24BE21AF8]();
}

uint64_t REDirectMaterialParametersArrayComponentClear()
{
  return MEMORY[0x24BE21B30]();
}

uint64_t REDirectMaterialParametersArrayComponentGetComponentType()
{
  return MEMORY[0x24BE21B38]();
}

uint64_t REDirectMaterialParametersArrayComponentGetData()
{
  return MEMORY[0x24BE21B40]();
}

uint64_t REDirectMaterialParametersArrayComponentIsBufferShared()
{
  return MEMORY[0x24BE21B48]();
}

uint64_t REDirectMaterialParametersArrayComponentSetData()
{
  return MEMORY[0x24BE21B50]();
}

uint64_t REDirectParameterBufferCopy()
{
  return MEMORY[0x24BE21B58]();
}

uint64_t REDirectParameterBufferCreate()
{
  return MEMORY[0x24BE21B60]();
}

uint64_t REDirectParameterBufferCreateWithSize()
{
  return MEMORY[0x24BE21B68]();
}

uint64_t REDirectParameterBufferGetDirectBuffer()
{
  return MEMORY[0x24BE21B70]();
}

uint64_t REDirectParameterBufferGetSize()
{
  return MEMORY[0x24BE21B78]();
}

uint64_t REDirectParameterBufferGetTextureAssetAtOffset()
{
  return MEMORY[0x24BE21B80]();
}

uint64_t REDirectParameterBufferResize()
{
  return MEMORY[0x24BE21B88]();
}

uint64_t REDirectParameterBufferSetTextureAssetAtOffset()
{
  return MEMORY[0x24BE21B90]();
}

uint64_t REDirectionalLightComponentGetColorGamut3F()
{
  return MEMORY[0x24BE21B98]();
}

uint64_t REDirectionalLightComponentGetComponentType()
{
  return MEMORY[0x24BE21BA0]();
}

uint64_t REDirectionalLightComponentGetIntensity()
{
  return MEMORY[0x24BE21BA8]();
}

uint64_t REDirectionalLightComponentGetIsProxy()
{
  return MEMORY[0x24BE21BB0]();
}

uint64_t REDirectionalLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE21BB8]();
}

uint64_t REDirectionalLightComponentSetIntensity()
{
  return MEMORY[0x24BE21BC0]();
}

uint64_t REDirectionalLightComponentSetIsProxy()
{
  return MEMORY[0x24BE21BC8]();
}

uint64_t REDirectionalLightShadowMapComponentGetAutomaticallyAdjustsShadowProjection()
{
  return MEMORY[0x24BE21BD0]();
}

uint64_t REDirectionalLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE21BD8]();
}

uint64_t REDirectionalLightShadowMapComponentGetCullModeEx()
{
  return MEMORY[0x24BE21BE0]();
}

uint64_t REDirectionalLightShadowMapComponentGetDepthBias()
{
  return MEMORY[0x24BE21BE8]();
}

uint64_t REDirectionalLightShadowMapComponentGetDistance()
{
  return MEMORY[0x24BE21BF0]();
}

uint64_t REDirectionalLightShadowMapComponentGetOrthographicScale()
{
  return MEMORY[0x24BE21BF8]();
}

uint64_t REDirectionalLightShadowMapComponentGetZFar()
{
  return MEMORY[0x24BE21C00]();
}

uint64_t REDirectionalLightShadowMapComponentGetZNear()
{
  return MEMORY[0x24BE21C08]();
}

uint64_t REDirectionalLightShadowMapComponentSetAutomaticallyAdjustsShadowProjection()
{
  return MEMORY[0x24BE21C10]();
}

uint64_t REDirectionalLightShadowMapComponentSetCullMode()
{
  return MEMORY[0x24BE21C18]();
}

uint64_t REDirectionalLightShadowMapComponentSetDepthBias()
{
  return MEMORY[0x24BE21C20]();
}

uint64_t REDirectionalLightShadowMapComponentSetDistance()
{
  return MEMORY[0x24BE21C28]();
}

uint64_t REDirectionalLightShadowMapComponentSetOrthographicScale()
{
  return MEMORY[0x24BE21C30]();
}

uint64_t REDirectionalLightShadowMapComponentSetZFar()
{
  return MEMORY[0x24BE21C38]();
}

uint64_t REDirectionalLightShadowMapComponentSetZNear()
{
  return MEMORY[0x24BE21C40]();
}

uint64_t REDockingRegionComponentGetBounds()
{
  return MEMORY[0x24BE21C48]();
}

uint64_t REDockingRegionComponentSetBounds()
{
  return MEMORY[0x24BE21C50]();
}

uint64_t REDrawableGetTexture()
{
  return MEMORY[0x24BE21C58]();
}

uint64_t REDrawablePresent()
{
  return MEMORY[0x24BE21C60]();
}

uint64_t REDrawablePresentWithCommandBuffer()
{
  return MEMORY[0x24BE21C68]();
}

uint64_t REDrawablePresentWithNextUpdate()
{
  return MEMORY[0x24BE21C70]();
}

uint64_t REDrawableQueueGetEyeTransform()
{
  return MEMORY[0x24BE21C78]();
}

uint64_t REDynamicLightShadowComponentGetCastsShadow()
{
  return MEMORY[0x24BE21C80]();
}

uint64_t REDynamicLightShadowComponentGetComponentType()
{
  return MEMORY[0x24BE21C88]();
}

uint64_t REDynamicLightShadowComponentSetCastsShadow()
{
  return MEMORY[0x24BE21C90]();
}

uint64_t REECSManagerAddScene()
{
  return MEMORY[0x24BE21CB0]();
}

uint64_t REECSManagerCreateRealityRendererSceneGroup()
{
  return MEMORY[0x24BE21CB8]();
}

uint64_t REECSManagerGetCustomSystemAtID()
{
  return MEMORY[0x24BE21CC0]();
}

uint64_t REECSManagerGetDefaultCustomSystemUpdateInterval()
{
  return MEMORY[0x24BE21CC8]();
}

uint64_t REECSManagerGetServiceLocator()
{
  return MEMORY[0x24BE21CD8]();
}

uint64_t REECSManagerRemoveScene()
{
  return MEMORY[0x24BE21CE8]();
}

uint64_t REECSManagerSceneCount()
{
  return MEMORY[0x24BE21CF0]();
}

uint64_t REECSManagerSetDefaultCustomSystemScheduleType()
{
  return MEMORY[0x24BE21CF8]();
}

uint64_t REECSManagerSetDefaultCustomSystemUpdateInterval()
{
  return MEMORY[0x24BE21D00]();
}

uint64_t REECSManagerSetSwiftObject()
{
  return MEMORY[0x24BE21D08]();
}

uint64_t REECSManagerSetSystemsArePausedInEditor()
{
  return MEMORY[0x24BE21D10]();
}

uint64_t REECSManagerSystemsArePausedInEditor()
{
  return MEMORY[0x24BE21D18]();
}

uint64_t REEDRColorManagementComponentSetHeadroomCallback()
{
  return MEMORY[0x24BE21D30]();
}

uint64_t REEasingFunctionEvaluateEx()
{
  return MEMORY[0x24BE21D38]();
}

uint64_t REEasingFunctionSetMode()
{
  return MEMORY[0x24BE21D40]();
}

uint64_t REEasingFunctionSetModeEx()
{
  return MEMORY[0x24BE21D48]();
}

uint64_t REEncoderBeginContainer()
{
  return MEMORY[0x24BE21D50]();
}

uint64_t REEncoderClose()
{
  return MEMORY[0x24BE21D58]();
}

uint64_t REEncoderCopyToCFData()
{
  return MEMORY[0x24BE21D60]();
}

uint64_t REEncoderCreate()
{
  return MEMORY[0x24BE21D68]();
}

uint64_t REEncoderDestroy()
{
  return MEMORY[0x24BE21D70]();
}

uint64_t REEncoderGetStatus()
{
  return MEMORY[0x24BE21D80]();
}

uint64_t REEncoderOpen()
{
  return MEMORY[0x24BE21D88]();
}

uint64_t REEncoderWriteBool()
{
  return MEMORY[0x24BE21D90]();
}

uint64_t REEncoderWriteDouble()
{
  return MEMORY[0x24BE21D98]();
}

uint64_t REEncoderWriteFloat()
{
  return MEMORY[0x24BE21DA0]();
}

uint64_t REEncoderWriteInt16()
{
  return MEMORY[0x24BE21DA8]();
}

uint64_t REEncoderWriteInt64()
{
  return MEMORY[0x24BE21DB8]();
}

uint64_t REEncoderWriteInt8()
{
  return MEMORY[0x24BE21DC0]();
}

uint64_t REEncoderWriteNil()
{
  return MEMORY[0x24BE21DC8]();
}

uint64_t REEncoderWriteString()
{
  return MEMORY[0x24BE21DD0]();
}

uint64_t REEncoderWriteUInt16()
{
  return MEMORY[0x24BE21DD8]();
}

uint64_t REEncoderWriteUInt8()
{
  return MEMORY[0x24BE21DF0]();
}

uint64_t REEngineConfigurationClone()
{
  return MEMORY[0x24BE21DF8]();
}

uint64_t REEngineConfigurationCopyInstanceID()
{
  return MEMORY[0x24BE21E00]();
}

uint64_t REEngineConfigurationCreateDefault()
{
  return MEMORY[0x24BE21E08]();
}

uint64_t REEngineConfigurationCreateFromEngine()
{
  return MEMORY[0x24BE21E10]();
}

uint64_t REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient()
{
  return MEMORY[0x24BE21E18]();
}

uint64_t REEngineConfigurationGetClockMode()
{
  return MEMORY[0x24BE21E20]();
}

uint64_t REEngineConfigurationGetDevice()
{
  return MEMORY[0x24BE21E28]();
}

uint64_t REEngineConfigurationGetEnableInteractions()
{
  return MEMORY[0x24BE21E30]();
}

uint64_t REEngineConfigurationGetEngineQueue()
{
  return MEMORY[0x24BE21E38]();
}

uint64_t REEngineConfigurationGetForExportOnly()
{
  return MEMORY[0x24BE21E40]();
}

uint64_t REEngineConfigurationGetIsHostingSharedAudioSimulation()
{
  return MEMORY[0x24BE21E48]();
}

uint64_t REEngineConfigurationGetRenderFlags()
{
  return MEMORY[0x24BE21E50]();
}

uint64_t REEngineConfigurationGetServicesToCreate()
{
  return MEMORY[0x24BE21E58]();
}

uint64_t REEngineConfigurationGetServicesToUpdate()
{
  return MEMORY[0x24BE21E60]();
}

uint64_t REEngineConfigurationGetStartupOptions()
{
  return MEMORY[0x24BE21E68]();
}

uint64_t REEngineConfigurationGetUseMetal()
{
  return MEMORY[0x24BE21E70]();
}

uint64_t REEngineConfigurationGetUsePhysicsSceneSystem()
{
  return MEMORY[0x24BE21E78]();
}

uint64_t REEngineConfigurationGetUseRealityIO()
{
  return MEMORY[0x24BE21E80]();
}

uint64_t REEngineConfigurationGetUserData()
{
  return MEMORY[0x24BE21E88]();
}

uint64_t REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient()
{
  return MEMORY[0x24BE21E90]();
}

uint64_t REEngineConfigurationSetClockMode()
{
  return MEMORY[0x24BE21E98]();
}

uint64_t REEngineConfigurationSetDevice()
{
  return MEMORY[0x24BE21EA0]();
}

uint64_t REEngineConfigurationSetEnableInteractions()
{
  return MEMORY[0x24BE21EA8]();
}

uint64_t REEngineConfigurationSetEngineQueue()
{
  return MEMORY[0x24BE21EB0]();
}

uint64_t REEngineConfigurationSetForExportOnly()
{
  return MEMORY[0x24BE21EB8]();
}

uint64_t REEngineConfigurationSetInstanceID()
{
  return MEMORY[0x24BE21EC0]();
}

uint64_t REEngineConfigurationSetIsHostingSharedAudioSimulation()
{
  return MEMORY[0x24BE21EC8]();
}

uint64_t REEngineConfigurationSetRenderFlags()
{
  return MEMORY[0x24BE21ED0]();
}

uint64_t REEngineConfigurationSetServicesToCreate()
{
  return MEMORY[0x24BE21ED8]();
}

uint64_t REEngineConfigurationSetServicesToUpdate()
{
  return MEMORY[0x24BE21EE0]();
}

uint64_t REEngineConfigurationSetStartupOptions()
{
  return MEMORY[0x24BE21EE8]();
}

uint64_t REEngineConfigurationSetUseMetal()
{
  return MEMORY[0x24BE21EF0]();
}

uint64_t REEngineConfigurationSetUsePhysicsSceneSystem()
{
  return MEMORY[0x24BE21EF8]();
}

uint64_t REEngineConfigurationSetUseRealityIO()
{
  return MEMORY[0x24BE21F00]();
}

uint64_t REEngineConfigurationSetUserData()
{
  return MEMORY[0x24BE21F08]();
}

uint64_t REEngineCreate()
{
  return MEMORY[0x24BE21F10]();
}

uint64_t REEngineCreateDrawingManager()
{
  return MEMORY[0x24BE21F18]();
}

uint64_t REEngineCreateOverlayForRealityRenderer()
{
  return MEMORY[0x24BE21F20]();
}

uint64_t REEngineGetAcceptingInput()
{
  return MEMORY[0x24BE21F28]();
}

uint64_t REEngineGetCurrentTime()
{
  return MEMORY[0x24BE21F30]();
}

uint64_t REEngineGetDeltaTime()
{
  return MEMORY[0x24BE21F38]();
}

uint64_t REEngineGetEventBus()
{
  return MEMORY[0x24BE21F40]();
}

uint64_t REEngineGetPreferredFramesPerSecond()
{
  return MEMORY[0x24BE21F48]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x24BE21F50]();
}

uint64_t REEngineGetShared()
{
  return MEMORY[0x24BE21F58]();
}

uint64_t REEngineGetSwiftObject()
{
  return MEMORY[0x24BE21F60]();
}

uint64_t REEngineInitWithConfiguration()
{
  return MEMORY[0x24BE21F68]();
}

uint64_t REEngineIsRunning()
{
  return MEMORY[0x24BE21F70]();
}

uint64_t REEngineOverlayEnterFrame()
{
  return MEMORY[0x24BE21F78]();
}

uint64_t REEngineOverlayFrameCommit()
{
  return MEMORY[0x24BE21F80]();
}

uint64_t REEngineOverlayFrameExit()
{
  return MEMORY[0x24BE21F88]();
}

uint64_t REEngineOverlayFramePrepare()
{
  return MEMORY[0x24BE21F90]();
}

uint64_t REEngineOverlayFrameSimulate()
{
  return MEMORY[0x24BE21F98]();
}

uint64_t REEngineOverlayGetCurrentTime()
{
  return MEMORY[0x24BE21FA0]();
}

uint64_t REEngineOverlayIsEngineInsideTick()
{
  return MEMORY[0x24BE21FA8]();
}

uint64_t REEngineOverlaySetRealityRendererSceneGroup()
{
  return MEMORY[0x24BE21FB0]();
}

uint64_t REEngineSetAcceptingInput()
{
  return MEMORY[0x24BE21FB8]();
}

uint64_t REEngineSetCallbacksEx()
{
  return MEMORY[0x24BE21FC0]();
}

uint64_t REEngineSetShared()
{
  return MEMORY[0x24BE21FD0]();
}

uint64_t REEngineSetSwiftObject()
{
  return MEMORY[0x24BE21FD8]();
}

uint64_t REEngineStart()
{
  return MEMORY[0x24BE21FE0]();
}

uint64_t REEngineStop()
{
  return MEMORY[0x24BE21FE8]();
}

uint64_t REEngineUnsetCallbacksEx()
{
  return MEMORY[0x24BE21FF0]();
}

uint64_t REEngineUsesMetal()
{
  return MEMORY[0x24BE21FF8]();
}

uint64_t REEntityAddComponentNoEvents()
{
  return MEMORY[0x24BE22008]();
}

uint64_t REEntityAddCustomComponent()
{
  return MEMORY[0x24BE22010]();
}

uint64_t REEntityAddExistingComponent()
{
  return MEMORY[0x24BE22018]();
}

uint64_t REEntityAddLoadTraceComponent()
{
  return MEMORY[0x24BE22020]();
}

uint64_t REEntityCalculateWorldOrientation()
{
  return MEMORY[0x24BE22030]();
}

uint64_t REEntityCharacterGetJointCount()
{
  return MEMORY[0x24BE22038]();
}

uint64_t REEntityCharacterSetup()
{
  return MEMORY[0x24BE22040]();
}

uint64_t REEntityComputeLocalBoundingBox()
{
  return MEMORY[0x24BE22048]();
}

uint64_t REEntityComputeMeshBounds()
{
  return MEMORY[0x24BE22050]();
}

uint64_t REEntityCopy()
{
  return MEMORY[0x24BE22058]();
}

uint64_t REEntityCopyTextureMetrics()
{
  return MEMORY[0x24BE22060]();
}

uint64_t REEntityCreate()
{
  return MEMORY[0x24BE22068]();
}

uint64_t REEntityFindAssetDependencies()
{
  return MEMORY[0x24BE22070]();
}

uint64_t REEntityFindInHierarchyByName()
{
  return MEMORY[0x24BE22078]();
}

uint64_t REEntityGetChild()
{
  return MEMORY[0x24BE22080]();
}

uint64_t REEntityGetChildCount()
{
  return MEMORY[0x24BE22088]();
}

uint64_t REEntityGetChildren()
{
  return MEMORY[0x24BE22090]();
}

uint64_t REEntityGetComponent()
{
  return MEMORY[0x24BE22098]();
}

uint64_t REEntityGetComponentAtIndex()
{
  return MEMORY[0x24BE220A0]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x24BE220A8]();
}

uint64_t REEntityGetComponentCount()
{
  return MEMORY[0x24BE220B0]();
}

uint64_t REEntityGetCustomComponent()
{
  return MEMORY[0x24BE220B8]();
}

uint64_t REEntityGetLocalId()
{
  return MEMORY[0x24BE220C0]();
}

uint64_t REEntityGetName()
{
  return MEMORY[0x24BE220C8]();
}

uint64_t REEntityGetOrAddComponent()
{
  return MEMORY[0x24BE220D0]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x24BE220D8]();
}

uint64_t REEntityGetOrAddCustomComponent()
{
  return MEMORY[0x24BE220E0]();
}

uint64_t REEntityGetParent()
{
  return MEMORY[0x24BE220E8]();
}

uint64_t REEntityGetProjectiveShadowClusterID()
{
  return MEMORY[0x24BE220F0]();
}

uint64_t REEntityGetSceneNullable()
{
  return MEMORY[0x24BE220F8]();
}

uint64_t REEntityGetSelfEnabled()
{
  return MEMORY[0x24BE22100]();
}

uint64_t REEntityGetSwiftObject()
{
  return MEMORY[0x24BE22108]();
}

uint64_t REEntityInsertChild()
{
  return MEMORY[0x24BE22118]();
}

uint64_t REEntityIsActive()
{
  return MEMORY[0x24BE22120]();
}

uint64_t REEntityIsAnchored()
{
  return MEMORY[0x24BE22128]();
}

uint64_t REEntityIsBeingDestroyed()
{
  return MEMORY[0x24BE22130]();
}

uint64_t REEntityIsEnabledInHierarchy()
{
  return MEMORY[0x24BE22138]();
}

uint64_t REEntityIsNonHiddenAndInHierarchy()
{
  return MEMORY[0x24BE22140]();
}

uint64_t REEntityQueryDestroy()
{
  return MEMORY[0x24BE22148]();
}

uint64_t REEntityRemoveAllComponents()
{
  return MEMORY[0x24BE22150]();
}

uint64_t REEntityRemoveComponent()
{
  return MEMORY[0x24BE22158]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x24BE22160]();
}

uint64_t REEntityRemoveCustomComponent()
{
  return MEMORY[0x24BE22168]();
}

uint64_t REEntityRemoveFromSceneOrParent()
{
  return MEMORY[0x24BE22170]();
}

uint64_t REEntitySendAddAndActivateComponentEvents()
{
  return MEMORY[0x24BE22178]();
}

uint64_t REEntitySetName()
{
  return MEMORY[0x24BE22180]();
}

uint64_t REEntitySetParent()
{
  return MEMORY[0x24BE22188]();
}

uint64_t REEntitySetSelfEnabled()
{
  return MEMORY[0x24BE22190]();
}

uint64_t REEntitySetSwiftObject()
{
  return MEMORY[0x24BE22198]();
}

uint64_t REEntityTextureMetricsCopyNthTextureAssetId()
{
  return MEMORY[0x24BE221A8]();
}

uint64_t REEntityTextureMetricsGetNthTextureByteSize()
{
  return MEMORY[0x24BE221B0]();
}

uint64_t REEntityTextureMetricsGetNthTextureDimensions()
{
  return MEMORY[0x24BE221B8]();
}

uint64_t REEntityTextureMetricsGetTexturesCount()
{
  return MEMORY[0x24BE221C0]();
}

uint64_t REEntityTryGetSkeletalJointPinPose()
{
  return MEMORY[0x24BE221C8]();
}

uint64_t REEnvironmentLightingConfigurationComponentGetComponentType()
{
  return MEMORY[0x24BE221F0]();
}

uint64_t REEnvironmentLightingConfigurationComponentGetEnvironmentLightingWeight()
{
  return MEMORY[0x24BE221F8]();
}

uint64_t REEnvironmentLightingConfigurationComponentSetEnvironmentLightingWeight()
{
  return MEMORY[0x24BE22200]();
}

uint64_t REEventBusMakeID()
{
  return MEMORY[0x24BE22208]();
}

uint64_t REEventBusSetSwiftObject()
{
  return MEMORY[0x24BE22210]();
}

uint64_t REEventBusSubscribeWithMatch()
{
  return MEMORY[0x24BE22220]();
}

uint64_t REEventBusUnsubscribe()
{
  return MEMORY[0x24BE22228]();
}

uint64_t REForceEffectComponentForceEffectHasSpatialFalloff()
{
  return MEMORY[0x24BE22240]();
}

uint64_t REForceEffectComponentForceEffectHasTimedFalloff()
{
  return MEMORY[0x24BE22248]();
}

uint64_t REForceEffectComponentForceEffectRemoveSpatialFalloff()
{
  return MEMORY[0x24BE22250]();
}

uint64_t REForceEffectComponentForceEffectRemoveTimedFalloff()
{
  return MEMORY[0x24BE22258]();
}

uint64_t REForceEffectComponentGetComponentType()
{
  return MEMORY[0x24BE22260]();
}

uint64_t REForceEffectComponentGetForceEffectBoundSphereRadius()
{
  return MEMORY[0x24BE22268]();
}

uint64_t REForceEffectComponentGetForceEffectCount()
{
  return MEMORY[0x24BE22270]();
}

uint64_t REForceEffectComponentGetForceEffectEventKey()
{
  return MEMORY[0x24BE22278]();
}

uint64_t REForceEffectComponentGetForceEffectMask()
{
  return MEMORY[0x24BE22280]();
}

uint64_t REForceEffectComponentGetForceEffectOrientation()
{
  return MEMORY[0x24BE22288]();
}

uint64_t REForceEffectComponentGetForceEffectPosition()
{
  return MEMORY[0x24BE22290]();
}

uint64_t REForceEffectComponentGetForceEffectSpatialFalloffRate()
{
  return MEMORY[0x24BE22298]();
}

uint64_t REForceEffectComponentGetForceEffectStrengthScale()
{
  return MEMORY[0x24BE222A0]();
}

uint64_t REForceEffectComponentGetForceEffectTimedFalloffDuration()
{
  return MEMORY[0x24BE222A8]();
}

uint64_t REForceEffectComponentGetForceEffectTimedFalloffRate()
{
  return MEMORY[0x24BE222B0]();
}

uint64_t REForceEffectComponentGetForceEffectUserClass()
{
  return MEMORY[0x24BE222B8]();
}

uint64_t REForceEffectComponentGetForceEffectUserData()
{
  return MEMORY[0x24BE222C0]();
}

uint64_t REForceEffectComponentGetForceEffectUserDataSize()
{
  return MEMORY[0x24BE222C8]();
}

uint64_t REForceEffectComponentRemoveSimulationState()
{
  return MEMORY[0x24BE222D0]();
}

uint64_t REForceEffectComponentResizeForceEffectUserData()
{
  return MEMORY[0x24BE222D8]();
}

uint64_t REForceEffectComponentResizeForceEffects()
{
  return MEMORY[0x24BE222E0]();
}

uint64_t REForceEffectComponentSetAndRetainForceEffectUserClass()
{
  return MEMORY[0x24BE222E8]();
}

uint64_t REForceEffectComponentSetForceEffectBoundSphereRadius()
{
  return MEMORY[0x24BE222F0]();
}

uint64_t REForceEffectComponentSetForceEffectEventKey()
{
  return MEMORY[0x24BE222F8]();
}

uint64_t REForceEffectComponentSetForceEffectForceMode()
{
  return MEMORY[0x24BE22300]();
}

uint64_t REForceEffectComponentSetForceEffectInputs()
{
  return MEMORY[0x24BE22308]();
}

uint64_t REForceEffectComponentSetForceEffectMask()
{
  return MEMORY[0x24BE22310]();
}

uint64_t REForceEffectComponentSetForceEffectOrientation()
{
  return MEMORY[0x24BE22318]();
}

uint64_t REForceEffectComponentSetForceEffectPosition()
{
  return MEMORY[0x24BE22320]();
}

uint64_t REForceEffectComponentSetForceEffectSpatialFalloffRate()
{
  return MEMORY[0x24BE22328]();
}

uint64_t REForceEffectComponentSetForceEffectStrengthScale()
{
  return MEMORY[0x24BE22330]();
}

uint64_t REForceEffectComponentSetForceEffectSubscription()
{
  return MEMORY[0x24BE22338]();
}

uint64_t REForceEffectComponentSetForceEffectTimedFalloffDuration()
{
  return MEMORY[0x24BE22340]();
}

uint64_t REForceEffectComponentSetForceEffectTimedFalloffRate()
{
  return MEMORY[0x24BE22348]();
}

uint64_t REForceEffectComponentSetSimulationState()
{
  return MEMORY[0x24BE22350]();
}

uint64_t REForceEffectEventFilter()
{
  return MEMORY[0x24BE22358]();
}

uint64_t REFromToByAnimationDefaultParameters()
{
  return MEMORY[0x24BE22360]();
}

uint64_t REFunctionLinkBuilderCreate()
{
  return MEMORY[0x24BE22368]();
}

uint64_t REFunctionLinkBuilderSetFunctionConstantValues()
{
  return MEMORY[0x24BE22370]();
}

uint64_t REFunctionLinkBuilderSetLinkedFunctionLibrary()
{
  return MEMORY[0x24BE22378]();
}

uint64_t REFunctionLinkBuilderSetLinkedFunctionName()
{
  return MEMORY[0x24BE22380]();
}

uint64_t REFunctionLinkBuilderSetLinkedShaderAPIs()
{
  return MEMORY[0x24BE22388]();
}

uint64_t REFunctionLinkBuilderSetShaderStage()
{
  return MEMORY[0x24BE22390]();
}

uint64_t REFunctionLinkCopyLinkedFunctionName()
{
  return MEMORY[0x24BE22398]();
}

uint64_t REFunctionLinkGetConstantValues()
{
  return MEMORY[0x24BE223A0]();
}

uint64_t REFunctionLinkGetLinkedFunctionLibrary()
{
  return MEMORY[0x24BE223A8]();
}

uint64_t REFunctionLinkGetLinkedShaderAPIAtIndex()
{
  return MEMORY[0x24BE223B0]();
}

uint64_t REFunctionLinkGetLinkedShaderAPICount()
{
  return MEMORY[0x24BE223B8]();
}

uint64_t REFunctionLinkGetStage()
{
  return MEMORY[0x24BE223C0]();
}

uint64_t REGeomBuildBoxDefaultOptions()
{
  return MEMORY[0x24BE223C8]();
}

uint64_t REGeomBuildBoxWithRoundedCornersDefaultOptions()
{
  return MEMORY[0x24BE223D0]();
}

uint64_t REGeomBuildCapsuleDefaultOptions()
{
  return MEMORY[0x24BE223D8]();
}

uint64_t REGeomBuildConeDefaultOptions()
{
  return MEMORY[0x24BE223E0]();
}

uint64_t REGeomBuildCylinderDefaultOptions()
{
  return MEMORY[0x24BE223E8]();
}

uint64_t REGeomBuildExtrudedTextDefaultOptions()
{
  return MEMORY[0x24BE223F0]();
}

uint64_t REGeomBuildPlaneDefaultOptions()
{
  return MEMORY[0x24BE223F8]();
}

uint64_t REGeomBuildSphereDefaultOptions()
{
  return MEMORY[0x24BE22400]();
}

uint64_t REGeomInstanceCreate()
{
  return MEMORY[0x24BE22408]();
}

uint64_t REGeomMeshCreateFromCoreAttributes()
{
  return MEMORY[0x24BE22410]();
}

uint64_t REGeomModelDescriptorAddAttributeDouble()
{
  return MEMORY[0x24BE22420]();
}

uint64_t REGeomModelDescriptorAddAttributeFloat()
{
  return MEMORY[0x24BE22428]();
}

uint64_t REGeomModelDescriptorAddAttributeInt16()
{
  return MEMORY[0x24BE22430]();
}

uint64_t REGeomModelDescriptorAddAttributeInt32()
{
  return MEMORY[0x24BE22438]();
}

uint64_t REGeomModelDescriptorAddAttributeInt8()
{
  return MEMORY[0x24BE22440]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt16()
{
  return MEMORY[0x24BE22448]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt32()
{
  return MEMORY[0x24BE22450]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt8()
{
  return MEMORY[0x24BE22458]();
}

uint64_t REGeomModelDescriptorAddAttributeVector2F()
{
  return MEMORY[0x24BE22460]();
}

uint64_t REGeomModelDescriptorAddAttributeVector3F()
{
  return MEMORY[0x24BE22468]();
}

uint64_t REGeomModelDescriptorAddAttributeVector4F()
{
  return MEMORY[0x24BE22470]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeDouble()
{
  return MEMORY[0x24BE22478]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeFloat()
{
  return MEMORY[0x24BE22480]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeInt16()
{
  return MEMORY[0x24BE22488]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeInt32()
{
  return MEMORY[0x24BE22490]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeInt8()
{
  return MEMORY[0x24BE22498]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt16()
{
  return MEMORY[0x24BE224A0]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt32()
{
  return MEMORY[0x24BE224A8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt8()
{
  return MEMORY[0x24BE224B0]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector2F()
{
  return MEMORY[0x24BE224B8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector3F()
{
  return MEMORY[0x24BE224C0]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector4F()
{
  return MEMORY[0x24BE224C8]();
}

uint64_t REGeomModelDescriptorAddSkinningData()
{
  return MEMORY[0x24BE224D0]();
}

uint64_t REGeomModelDescriptorCreate()
{
  return MEMORY[0x24BE224E0]();
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentForModel()
{
  return MEMORY[0x24BE22588]();
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentsPerFace()
{
  return MEMORY[0x24BE22590]();
}

uint64_t REGeomModelDescriptorSetName()
{
  return MEMORY[0x24BE22598]();
}

uint64_t REGetCoreREBundle()
{
  return MEMORY[0x24BE225B0]();
}

uint64_t REGetMaxRealityFileConfigurationSceneCount()
{
  return MEMORY[0x24BE225B8]();
}

uint64_t REGetRetainCount()
{
  return MEMORY[0x24BE225C0]();
}

uint64_t REGroundingShadowComponentGetCastsShadow()
{
  return MEMORY[0x24BE225E0]();
}

uint64_t REGroundingShadowComponentGetComponentType()
{
  return MEMORY[0x24BE225E8]();
}

uint64_t REGroundingShadowComponentGetFadeBehaviorNearPhysicalObjects()
{
  return MEMORY[0x24BE225F0]();
}

uint64_t REGroundingShadowComponentGetReceivesShadow()
{
  return MEMORY[0x24BE225F8]();
}

uint64_t REGroundingShadowComponentSetCastsShadow()
{
  return MEMORY[0x24BE22600]();
}

uint64_t REGroundingShadowComponentSetFadeBehaviorNearPhysicalObjects()
{
  return MEMORY[0x24BE22608]();
}

uint64_t REGroundingShadowComponentSetReceivesShadow()
{
  return MEMORY[0x24BE22610]();
}

uint64_t REHideEntity()
{
  return MEMORY[0x24BE22618]();
}

uint64_t REHierarchicalFadeComponentGetComponentType()
{
  return MEMORY[0x24BE22620]();
}

uint64_t REHierarchicalFadeComponentGetOpacity()
{
  return MEMORY[0x24BE22628]();
}

uint64_t REHierarchicalFadeComponentSetOpacity()
{
  return MEMORY[0x24BE22630]();
}

uint64_t REIBLAssetGetDiffuseTexture()
{
  return MEMORY[0x24BE22640]();
}

uint64_t REIBLAssetGetSkyboxTexture()
{
  return MEMORY[0x24BE22648]();
}

uint64_t REIBLAssetGetSpecularTexture()
{
  return MEMORY[0x24BE22650]();
}

uint64_t REIkParametersComopnentTaskGetRotationTargetBlendWeight()
{
  return MEMORY[0x24BE22658]();
}

uint64_t REIkParametersComponentEnsureSolversInit()
{
  return MEMORY[0x24BE22660]();
}

uint64_t REIkParametersComponentGetAsset()
{
  return MEMORY[0x24BE22668]();
}

uint64_t REIkParametersComponentGetComponentType()
{
  return MEMORY[0x24BE22670]();
}

uint64_t REIkParametersComponentGetSolverCount()
{
  return MEMORY[0x24BE22678]();
}

uint64_t REIkParametersComponentGetSolverNodeName()
{
  return MEMORY[0x24BE22680]();
}

uint64_t REIkParametersComponentJointGetName()
{
  return MEMORY[0x24BE22688]();
}

uint64_t REIkParametersComponentJointGetRetargetingGain()
{
  return MEMORY[0x24BE22690]();
}

uint64_t REIkParametersComponentJointGetRetargetingGainPerAxis()
{
  return MEMORY[0x24BE22698]();
}

uint64_t REIkParametersComponentJointGetRotationStiffness()
{
  return MEMORY[0x24BE226A0]();
}

uint64_t REIkParametersComponentJointSetRetargetingGainPerAxis()
{
  return MEMORY[0x24BE226A8]();
}

uint64_t REIkParametersComponentJointSetRotationStiffness()
{
  return MEMORY[0x24BE226B0]();
}

uint64_t REIkParametersComponentResetSolver()
{
  return MEMORY[0x24BE226B8]();
}

uint64_t REIkParametersComponentSetAsset()
{
  return MEMORY[0x24BE226C0]();
}

uint64_t REIkParametersComponentSolverGetJointCount()
{
  return MEMORY[0x24BE226C8]();
}

uint64_t REIkParametersComponentSolverGetMaxIterations()
{
  return MEMORY[0x24BE226D0]();
}

uint64_t REIkParametersComponentSolverGetRetargetingGain()
{
  return MEMORY[0x24BE226D8]();
}

uint64_t REIkParametersComponentSolverGetTaskCount()
{
  return MEMORY[0x24BE226E0]();
}

uint64_t REIkParametersComponentSolverSetMaxIterations()
{
  return MEMORY[0x24BE226E8]();
}

uint64_t REIkParametersComponentSolverSetRetargetingGain()
{
  return MEMORY[0x24BE226F0]();
}

uint64_t REIkParametersComponentTaskGetLookAtTarget()
{
  return MEMORY[0x24BE226F8]();
}

uint64_t REIkParametersComponentTaskGetName()
{
  return MEMORY[0x24BE22700]();
}

uint64_t REIkParametersComponentTaskGetPositionTargetBlendWeight()
{
  return MEMORY[0x24BE22708]();
}

uint64_t REIkParametersComponentTaskGetTargetName()
{
  return MEMORY[0x24BE22710]();
}

uint64_t REIkParametersComponentTaskGetTargetPosition()
{
  return MEMORY[0x24BE22718]();
}

uint64_t REIkParametersComponentTaskGetTargetRotation()
{
  return MEMORY[0x24BE22720]();
}

uint64_t REIkParametersComponentTaskHasLookAtEnabled()
{
  return MEMORY[0x24BE22728]();
}

uint64_t REIkParametersComponentTaskHasPositionEnabled()
{
  return MEMORY[0x24BE22730]();
}

uint64_t REIkParametersComponentTaskHasRotationEnabled()
{
  return MEMORY[0x24BE22738]();
}

uint64_t REIkParametersComponentTaskSetLookAtTarget()
{
  return MEMORY[0x24BE22740]();
}

uint64_t REIkParametersComponentTaskSetPositionTargetBlendWeight()
{
  return MEMORY[0x24BE22748]();
}

uint64_t REIkParametersComponentTaskSetRotationTargetBlendWeight()
{
  return MEMORY[0x24BE22750]();
}

uint64_t REIkParametersComponentTaskSetTargetPosition()
{
  return MEMORY[0x24BE22758]();
}

uint64_t REIkParametersComponentTaskSetTargetRotation()
{
  return MEMORY[0x24BE22760]();
}

uint64_t REIkRigAssetBuilderAddRig()
{
  return MEMORY[0x24BE22768]();
}

uint64_t REIkRigAssetBuilderCreate()
{
  return MEMORY[0x24BE22770]();
}

uint64_t REIkRigAssetCreate()
{
  return MEMORY[0x24BE22778]();
}

uint64_t REIkRigAssetGetDefinitionCount()
{
  return MEMORY[0x24BE22780]();
}

uint64_t REIkRigAssetGetDefinitionOutputTarget()
{
  return MEMORY[0x24BE22788]();
}

uint64_t REIkRigAssetGetDefinitionRig()
{
  return MEMORY[0x24BE22790]();
}

uint64_t REIkRigAssetGetDefinitionSolverID()
{
  return MEMORY[0x24BE22798]();
}

uint64_t REIkRigAssetGetDefinitionSourceTarget()
{
  return MEMORY[0x24BE227A0]();
}

uint64_t REImageBasedLightComponentGetBlendIBLsFactor()
{
  return MEMORY[0x24BE227A8]();
}

uint64_t REImageBasedLightComponentGetComponentType()
{
  return MEMORY[0x24BE227B0]();
}

uint64_t REImageBasedLightComponentGetEnableBlend()
{
  return MEMORY[0x24BE227B8]();
}

uint64_t REImageBasedLightComponentGetIBL()
{
  return MEMORY[0x24BE227C0]();
}

uint64_t REImageBasedLightComponentGetIBLBlend()
{
  return MEMORY[0x24BE227C8]();
}

uint64_t REImageBasedLightComponentGetIntensityExponent()
{
  return MEMORY[0x24BE227D0]();
}

uint64_t REImageBasedLightComponentGetRotationEnabled()
{
  return MEMORY[0x24BE227D8]();
}

uint64_t REImageBasedLightComponentIsGlobalIBL()
{
  return MEMORY[0x24BE227E0]();
}

uint64_t REImageBasedLightComponentSetBlendIBLsFactor()
{
  return MEMORY[0x24BE227E8]();
}

uint64_t REImageBasedLightComponentSetEnableBlend()
{
  return MEMORY[0x24BE227F8]();
}

uint64_t REImageBasedLightComponentSetGlobalIBL()
{
  return MEMORY[0x24BE22800]();
}

uint64_t REImageBasedLightComponentSetIBL()
{
  return MEMORY[0x24BE22808]();
}

uint64_t REImageBasedLightComponentSetIBLBlendNullable()
{
  return MEMORY[0x24BE22810]();
}

uint64_t REImageBasedLightComponentSetIBLNullable()
{
  return MEMORY[0x24BE22818]();
}

uint64_t REImageBasedLightComponentSetIntensityExponent()
{
  return MEMORY[0x24BE22820]();
}

uint64_t REImageBasedLightComponentSetRotationEnabled()
{
  return MEMORY[0x24BE22838]();
}

uint64_t REImageBasedLightReceiverComponentGetComponentType()
{
  return MEMORY[0x24BE22840]();
}

uint64_t REImageBasedLightReceiverComponentGetIBLEntityNullable()
{
  return MEMORY[0x24BE22848]();
}

uint64_t REImageBasedLightReceiverComponentSetIBLEntity()
{
  return MEMORY[0x24BE22850]();
}

uint64_t REInputManagerNotify()
{
  return MEMORY[0x24BE22858]();
}

uint64_t REInputTargetComponentGetAllowsDirectInput()
{
  return MEMORY[0x24BE22860]();
}

uint64_t REInputTargetComponentGetAllowsIndirectInput()
{
  return MEMORY[0x24BE22868]();
}

uint64_t REInputTargetComponentGetComponentType()
{
  return MEMORY[0x24BE22870]();
}

uint64_t REInputTargetComponentIsEnabled()
{
  return MEMORY[0x24BE22878]();
}

uint64_t REInputTargetComponentSetAllowsDirectInput()
{
  return MEMORY[0x24BE22880]();
}

uint64_t REInputTargetComponentSetAllowsIndirectInput()
{
  return MEMORY[0x24BE22888]();
}

uint64_t REInputTargetComponentSetEnabled()
{
  return MEMORY[0x24BE22890]();
}

uint64_t REIsEntityHidden()
{
  return MEMORY[0x24BE22898]();
}

uint64_t REKeyValueComponentAddBoolValue()
{
  return MEMORY[0x24BE228A0]();
}

uint64_t REKeyValueComponentAddDoubleValue()
{
  return MEMORY[0x24BE228A8]();
}

uint64_t REKeyValueComponentAddFloat2Value()
{
  return MEMORY[0x24BE228B0]();
}

uint64_t REKeyValueComponentAddFloat3Value()
{
  return MEMORY[0x24BE228B8]();
}

uint64_t REKeyValueComponentAddFloat4Value()
{
  return MEMORY[0x24BE228C0]();
}

uint64_t REKeyValueComponentAddFloatValue()
{
  return MEMORY[0x24BE228C8]();
}

uint64_t REKeyValueComponentAddInt64Value()
{
  return MEMORY[0x24BE228D0]();
}

uint64_t REKeyValueComponentAddIntValue()
{
  return MEMORY[0x24BE228D8]();
}

uint64_t REKeyValueComponentAddQuatFValue()
{
  return MEMORY[0x24BE228E0]();
}

uint64_t REKeyValueComponentAddRESRTValue()
{
  return MEMORY[0x24BE228E8]();
}

uint64_t REKeyValueComponentAddStringValue()
{
  return MEMORY[0x24BE228F0]();
}

uint64_t REKeyValueComponentGetComponentType()
{
  return MEMORY[0x24BE228F8]();
}

uint64_t REKeyValueComponentGetStringValue()
{
  return MEMORY[0x24BE22900]();
}

uint64_t RELightComponentGetComponentType()
{
  return MEMORY[0x24BE22908]();
}

uint64_t RELinkedOnOrAfterFall2024OSVersions()
{
  return MEMORY[0x24BE22910]();
}

uint64_t REListenerComponentGetComponentType()
{
  return MEMORY[0x24BE22938]();
}

uint64_t REListenerComponentSetSystemListener()
{
  return MEMORY[0x24BE22940]();
}

uint64_t REMakeLookAtPose()
{
  return MEMORY[0x24BE22948]();
}

uint64_t REMakeMassFrame()
{
  return MEMORY[0x24BE22950]();
}

uint64_t REMakeSRT()
{
  return MEMORY[0x24BE22980]();
}

uint64_t REMakeSRTFromMatrix()
{
  return MEMORY[0x24BE22988]();
}

uint64_t REMaterialAssetBuilderAddFunctionLinkBuilder()
{
  return MEMORY[0x24BE22998]();
}

uint64_t REMaterialAssetBuilderCreate()
{
  return MEMORY[0x24BE229A8]();
}

uint64_t REMaterialAssetBuilderSetBool()
{
  return MEMORY[0x24BE229B0]();
}

uint64_t REMaterialAssetBuilderSetBufferFromBinding()
{
  return MEMORY[0x24BE229B8]();
}

uint64_t REMaterialAssetBuilderSetColor4F()
{
  return MEMORY[0x24BE229C8]();
}

uint64_t REMaterialAssetBuilderSetFloat()
{
  return MEMORY[0x24BE229D0]();
}

uint64_t REMaterialAssetBuilderSetFloat2()
{
  return MEMORY[0x24BE229D8]();
}

uint64_t REMaterialAssetBuilderSetFloat2x2()
{
  return MEMORY[0x24BE229E0]();
}

uint64_t REMaterialAssetBuilderSetFloat3()
{
  return MEMORY[0x24BE229E8]();
}

uint64_t REMaterialAssetBuilderSetFloat3x3()
{
  return MEMORY[0x24BE229F0]();
}

uint64_t REMaterialAssetBuilderSetFloat4()
{
  return MEMORY[0x24BE229F8]();
}

uint64_t REMaterialAssetBuilderSetFloat4x4()
{
  return MEMORY[0x24BE22A00]();
}

uint64_t REMaterialAssetBuilderSetFunctionConstant()
{
  return MEMORY[0x24BE22A08]();
}

uint64_t REMaterialAssetBuilderSetInt()
{
  return MEMORY[0x24BE22A10]();
}

uint64_t REMaterialAssetBuilderSetInt2()
{
  return MEMORY[0x24BE22A18]();
}

uint64_t REMaterialAssetBuilderSetInt3()
{
  return MEMORY[0x24BE22A20]();
}

uint64_t REMaterialAssetBuilderSetInt4()
{
  return MEMORY[0x24BE22A28]();
}

uint64_t REMaterialAssetBuilderSetMTLCullMode()
{
  return MEMORY[0x24BE22A30]();
}

uint64_t REMaterialAssetBuilderSetMaterialDefinition()
{
  return MEMORY[0x24BE22A38]();
}

uint64_t REMaterialAssetBuilderSetNeedsPassthroughBlur()
{
  return MEMORY[0x24BE22A48]();
}

uint64_t REMaterialAssetBuilderSetNeedsVCABlur()
{
  return MEMORY[0x24BE22A50]();
}

uint64_t REMaterialAssetBuilderSetTextureFromAsset()
{
  return MEMORY[0x24BE22A60]();
}

uint64_t REMaterialAssetBuilderSetTextureFromBinding()
{
  return MEMORY[0x24BE22A68]();
}

uint64_t REMaterialAssetBuilderSetUInt()
{
  return MEMORY[0x24BE22A70]();
}

uint64_t REMaterialAssetBuilderSetUInt2()
{
  return MEMORY[0x24BE22A78]();
}

uint64_t REMaterialAssetBuilderSetUInt3()
{
  return MEMORY[0x24BE22A80]();
}

uint64_t REMaterialAssetBuilderSetUInt4()
{
  return MEMORY[0x24BE22A88]();
}

uint64_t REMaterialAssetCopySamplerDescriptor()
{
  return MEMORY[0x24BE22A98]();
}

uint64_t REMaterialAssetCopyShaderGraphParameterNames()
{
  return MEMORY[0x24BE22AA0]();
}

uint64_t REMaterialAssetGetBool()
{
  return MEMORY[0x24BE22AA8]();
}

uint64_t REMaterialAssetGetColor3F()
{
  return MEMORY[0x24BE22AB0]();
}

uint64_t REMaterialAssetGetColor4F()
{
  return MEMORY[0x24BE22AB8]();
}

uint64_t REMaterialAssetGetCullMode()
{
  return MEMORY[0x24BE22AC0]();
}

uint64_t REMaterialAssetGetFeatureFlags()
{
  return MEMORY[0x24BE22AC8]();
}

uint64_t REMaterialAssetGetFloat()
{
  return MEMORY[0x24BE22AD0]();
}

uint64_t REMaterialAssetGetFloat2F()
{
  return MEMORY[0x24BE22AD8]();
}

uint64_t REMaterialAssetGetFloat2x2F()
{
  return MEMORY[0x24BE22AE0]();
}

uint64_t REMaterialAssetGetFloat3F()
{
  return MEMORY[0x24BE22AE8]();
}

uint64_t REMaterialAssetGetFloat3x3F()
{
  return MEMORY[0x24BE22AF0]();
}

uint64_t REMaterialAssetGetFloat4F()
{
  return MEMORY[0x24BE22AF8]();
}

uint64_t REMaterialAssetGetFloat4x4F()
{
  return MEMORY[0x24BE22B00]();
}

uint64_t REMaterialAssetGetFunctionConstant()
{
  return MEMORY[0x24BE22B08]();
}

uint64_t REMaterialAssetGetFunctionLinkAtIndex()
{
  return MEMORY[0x24BE22B10]();
}

uint64_t REMaterialAssetGetFunctionLinkCount()
{
  return MEMORY[0x24BE22B18]();
}

uint64_t REMaterialAssetGetGeomFlattenedCustomParamNames()
{
  return MEMORY[0x24BE22B20]();
}

uint64_t REMaterialAssetGetInt()
{
  return MEMORY[0x24BE22B28]();
}

uint64_t REMaterialAssetGetInt2()
{
  return MEMORY[0x24BE22B30]();
}

uint64_t REMaterialAssetGetInt3()
{
  return MEMORY[0x24BE22B38]();
}

uint64_t REMaterialAssetGetInt4()
{
  return MEMORY[0x24BE22B40]();
}

uint64_t REMaterialAssetGetMaterialDefinition()
{
  return MEMORY[0x24BE22B48]();
}

uint64_t REMaterialAssetGetName()
{
  return MEMORY[0x24BE22B50]();
}

uint64_t REMaterialAssetGetParameterType()
{
  return MEMORY[0x24BE22B58]();
}

uint64_t REMaterialAssetGetParameterTypeWithHandle()
{
  return MEMORY[0x24BE22B60]();
}

uint64_t REMaterialAssetGetSamplerNameBoundToTexture()
{
  return MEMORY[0x24BE22B68]();
}

uint64_t REMaterialAssetGetSourceName()
{
  return MEMORY[0x24BE22B70]();
}

uint64_t REMaterialAssetGetSurfFlattenedCustomParamNames()
{
  return MEMORY[0x24BE22B78]();
}

uint64_t REMaterialAssetGetTextureAsset()
{
  return MEMORY[0x24BE22B80]();
}

uint64_t REMaterialAssetGetTextureParameterType()
{
  return MEMORY[0x24BE22B88]();
}

uint64_t REMaterialAssetGetType()
{
  return MEMORY[0x24BE22B90]();
}

uint64_t REMaterialAssetGetUInt()
{
  return MEMORY[0x24BE22B98]();
}

uint64_t REMaterialAssetGetUInt2()
{
  return MEMORY[0x24BE22BA0]();
}

uint64_t REMaterialAssetGetUInt3()
{
  return MEMORY[0x24BE22BA8]();
}

uint64_t REMaterialAssetGetUInt4()
{
  return MEMORY[0x24BE22BB0]();
}

uint64_t REMaterialAssetGetValidPassTechniqueMapping()
{
  return MEMORY[0x24BE22BB8]();
}

uint64_t REMaterialAssetHasGeometryModifierCustomParamsName()
{
  return MEMORY[0x24BE22BC0]();
}

uint64_t REMaterialAssetHasSurfaceShaderCustomParamsName()
{
  return MEMORY[0x24BE22BC8]();
}

uint64_t REMaterialAssetIsVisibleShaderGraphParameter()
{
  return MEMORY[0x24BE22BD0]();
}

uint64_t REMaterialAssetSetBool()
{
  return MEMORY[0x24BE22BD8]();
}

uint64_t REMaterialAssetSetColor4F()
{
  return MEMORY[0x24BE22BE0]();
}

uint64_t REMaterialAssetTechniqueHasVariation()
{
  return MEMORY[0x24BE22BF0]();
}

uint64_t REMaterialCreateDefaultSamplerDescriptor()
{
  return MEMORY[0x24BE22BF8]();
}

uint64_t REMaterialDefinitionAssetBuilderAddDebugMapping()
{
  return MEMORY[0x24BE22C00]();
}

uint64_t REMaterialDefinitionAssetBuilderAddTechnique()
{
  return MEMORY[0x24BE22C08]();
}

uint64_t REMaterialDefinitionAssetBuilderAddTechniqueDefaultVariation()
{
  return MEMORY[0x24BE22C10]();
}

uint64_t REMaterialDefinitionAssetBuilderAddTechniqueVariation()
{
  return MEMORY[0x24BE22C18]();
}

uint64_t REMaterialDefinitionAssetBuilderCreate()
{
  return MEMORY[0x24BE22C20]();
}

uint64_t REMaterialDefinitionAssetBuilderSetDebugMappingEntry()
{
  return MEMORY[0x24BE22C28]();
}

uint64_t REMaterialDefinitionAssetBuilderSetDebugMappingName()
{
  return MEMORY[0x24BE22C30]();
}

uint64_t REMaterialDefinitionAssetBuilderSetLibrary()
{
  return MEMORY[0x24BE22C38]();
}

uint64_t REMaterialDefinitionAssetBuilderSetName()
{
  return MEMORY[0x24BE22C40]();
}

uint64_t REMaterialDefinitionAssetBuilderSetOverrideMaterial()
{
  return MEMORY[0x24BE22C48]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueDebugMapping()
{
  return MEMORY[0x24BE22C50]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueDefaultVariation()
{
  return MEMORY[0x24BE22C58]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueFunctionConstant()
{
  return MEMORY[0x24BE22C60]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueLibrary()
{
  return MEMORY[0x24BE22C68]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueMapping()
{
  return MEMORY[0x24BE22C70]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueName()
{
  return MEMORY[0x24BE22C78]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniquePixelShaderEntry()
{
  return MEMORY[0x24BE22C80]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniquePixelShaderLibrary()
{
  return MEMORY[0x24BE22C88]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateAlphaBlend()
{
  return MEMORY[0x24BE22C90]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateColorWriteMask()
{
  return MEMORY[0x24BE22C98]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateCullMode()
{
  return MEMORY[0x24BE22CA0]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateDepthCompareFunction()
{
  return MEMORY[0x24BE22CA8]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueStateWriteDepth()
{
  return MEMORY[0x24BE22CB0]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueVariation()
{
  return MEMORY[0x24BE22CB8]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderEntry()
{
  return MEMORY[0x24BE22CC0]();
}

uint64_t REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderLibrary()
{
  return MEMORY[0x24BE22CC8]();
}

uint64_t REMaterialDefinitionAssetGetParameterDisplayName()
{
  return MEMORY[0x24BE22CD0]();
}

uint64_t REMaterialDefinitionAssetGetParameterKeys()
{
  return MEMORY[0x24BE22CD8]();
}

uint64_t REMaterialDefinitionAssetHasTechniqueWithHash()
{
  return MEMORY[0x24BE22CE0]();
}

uint64_t REMaterialParameterBlockArrayComponentBorrowBlockValueAtIndex()
{
  return MEMORY[0x24BE22CE8]();
}

uint64_t REMaterialParameterBlockArrayComponentGetBlockValueAtIndex()
{
  return MEMORY[0x24BE22CF8]();
}

uint64_t REMaterialParameterBlockArrayComponentGetComponentType()
{
  return MEMORY[0x24BE22D00]();
}

uint64_t REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex()
{
  return MEMORY[0x24BE22D08]();
}

uint64_t REMaterialParameterBlockArrayComponentHashTechniqueName()
{
  return MEMORY[0x24BE22D10]();
}

uint64_t REMaterialParameterBlockArrayComponentResize()
{
  return MEMORY[0x24BE22D18]();
}

uint64_t REMaterialParameterBlockArrayComponentReturnBlockValueAtIndex()
{
  return MEMORY[0x24BE22D20]();
}

uint64_t REMaterialParameterBlockArrayComponentSetBlockValueAtIndex()
{
  return MEMORY[0x24BE22D30]();
}

uint64_t REMaterialParameterBlockArrayComponentSize()
{
  return MEMORY[0x24BE22D38]();
}

uint64_t REMaterialParameterBlockValueAddHashedPassTechniqueMapping()
{
  return MEMORY[0x24BE22D88]();
}

uint64_t REMaterialParameterBlockValueBindTextureToSamplerWithDefaultArray()
{
  return MEMORY[0x24BE22D90]();
}

uint64_t REMaterialParameterBlockValueClearParameter()
{
  return MEMORY[0x24BE22D98]();
}

uint64_t REMaterialParameterBlockValueClearSwizzleForTexture()
{
  return MEMORY[0x24BE22DA0]();
}

uint64_t REMaterialParameterBlockValueClearUVIndexForTexture()
{
  return MEMORY[0x24BE22DA8]();
}

uint64_t REMaterialParameterBlockValueCopy()
{
  return MEMORY[0x24BE22DB0]();
}

uint64_t REMaterialParameterBlockValueCopyParameterNameArray()
{
  return MEMORY[0x24BE22DB8]();
}

uint64_t REMaterialParameterBlockValueCopySampler()
{
  return MEMORY[0x24BE22DC0]();
}

uint64_t REMaterialParameterBlockValueCreate()
{
  return MEMORY[0x24BE22DC8]();
}

uint64_t REMaterialParameterBlockValueGetBool()
{
  return MEMORY[0x24BE22DD0]();
}

uint64_t REMaterialParameterBlockValueGetColor3()
{
  return MEMORY[0x24BE22DD8]();
}

uint64_t REMaterialParameterBlockValueGetColor4()
{
  return MEMORY[0x24BE22DE0]();
}

uint64_t REMaterialParameterBlockValueGetFloat()
{
  return MEMORY[0x24BE22DE8]();
}

uint64_t REMaterialParameterBlockValueGetFloat2()
{
  return MEMORY[0x24BE22DF0]();
}

uint64_t REMaterialParameterBlockValueGetFloat2x2()
{
  return MEMORY[0x24BE22DF8]();
}

uint64_t REMaterialParameterBlockValueGetFloat3()
{
  return MEMORY[0x24BE22E00]();
}

uint64_t REMaterialParameterBlockValueGetFloat3x3()
{
  return MEMORY[0x24BE22E08]();
}

uint64_t REMaterialParameterBlockValueGetFloat4()
{
  return MEMORY[0x24BE22E10]();
}

uint64_t REMaterialParameterBlockValueGetFloat4x4()
{
  return MEMORY[0x24BE22E18]();
}

uint64_t REMaterialParameterBlockValueGetInt()
{
  return MEMORY[0x24BE22E20]();
}

uint64_t REMaterialParameterBlockValueGetInt2()
{
  return MEMORY[0x24BE22E28]();
}

uint64_t REMaterialParameterBlockValueGetInt3()
{
  return MEMORY[0x24BE22E30]();
}

uint64_t REMaterialParameterBlockValueGetInt4()
{
  return MEMORY[0x24BE22E38]();
}

uint64_t REMaterialParameterBlockValueGetParameterType()
{
  return MEMORY[0x24BE22E40]();
}

uint64_t REMaterialParameterBlockValueGetPassTechniqueMapping()
{
  return MEMORY[0x24BE22E48]();
}

uint64_t REMaterialParameterBlockValueGetSamplerNameBoundToTexture()
{
  return MEMORY[0x24BE22E50]();
}

uint64_t REMaterialParameterBlockValueGetSwizzleForTexture()
{
  return MEMORY[0x24BE22E58]();
}

uint64_t REMaterialParameterBlockValueGetTexture()
{
  return MEMORY[0x24BE22E60]();
}

uint64_t REMaterialParameterBlockValueGetUInt()
{
  return MEMORY[0x24BE22E68]();
}

uint64_t REMaterialParameterBlockValueGetUInt2()
{
  return MEMORY[0x24BE22E70]();
}

uint64_t REMaterialParameterBlockValueGetUInt3()
{
  return MEMORY[0x24BE22E78]();
}

uint64_t REMaterialParameterBlockValueGetUInt4()
{
  return MEMORY[0x24BE22E80]();
}

uint64_t REMaterialParameterBlockValueGetUVIndexForTexture()
{
  return MEMORY[0x24BE22E88]();
}

uint64_t REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex()
{
  return MEMORY[0x24BE22E90]();
}

uint64_t REMaterialParameterBlockValueRemovePassTechniqueMapping()
{
  return MEMORY[0x24BE22E98]();
}

uint64_t REMaterialParameterBlockValueSetBool()
{
  return MEMORY[0x24BE22EA0]();
}

uint64_t REMaterialParameterBlockValueSetColor3()
{
  return MEMORY[0x24BE22EA8]();
}

uint64_t REMaterialParameterBlockValueSetColor4()
{
  return MEMORY[0x24BE22EB0]();
}

uint64_t REMaterialParameterBlockValueSetFloat()
{
  return MEMORY[0x24BE22EB8]();
}

uint64_t REMaterialParameterBlockValueSetFloat2()
{
  return MEMORY[0x24BE22EC0]();
}

uint64_t REMaterialParameterBlockValueSetFloat2x2()
{
  return MEMORY[0x24BE22EC8]();
}

uint64_t REMaterialParameterBlockValueSetFloat3()
{
  return MEMORY[0x24BE22ED0]();
}

uint64_t REMaterialParameterBlockValueSetFloat3x3()
{
  return MEMORY[0x24BE22ED8]();
}

uint64_t REMaterialParameterBlockValueSetFloat4()
{
  return MEMORY[0x24BE22EE0]();
}

uint64_t REMaterialParameterBlockValueSetFloat4x4()
{
  return MEMORY[0x24BE22EE8]();
}

uint64_t REMaterialParameterBlockValueSetInt()
{
  return MEMORY[0x24BE22EF0]();
}

uint64_t REMaterialParameterBlockValueSetInt2()
{
  return MEMORY[0x24BE22EF8]();
}

uint64_t REMaterialParameterBlockValueSetInt3()
{
  return MEMORY[0x24BE22F00]();
}

uint64_t REMaterialParameterBlockValueSetInt4()
{
  return MEMORY[0x24BE22F08]();
}

uint64_t REMaterialParameterBlockValueSetSampler()
{
  return MEMORY[0x24BE22F10]();
}

uint64_t REMaterialParameterBlockValueSetSwizzleForTexture()
{
  return MEMORY[0x24BE22F18]();
}

uint64_t REMaterialParameterBlockValueSetTextureFromAsset()
{
  return MEMORY[0x24BE22F20]();
}

uint64_t REMaterialParameterBlockValueSetUInt()
{
  return MEMORY[0x24BE22F28]();
}

uint64_t REMaterialParameterBlockValueSetUInt2()
{
  return MEMORY[0x24BE22F30]();
}

uint64_t REMaterialParameterBlockValueSetUInt3()
{
  return MEMORY[0x24BE22F38]();
}

uint64_t REMaterialParameterBlockValueSetUInt4()
{
  return MEMORY[0x24BE22F40]();
}

uint64_t REMaterialParameterBlockValueSetUVIndexForTexture()
{
  return MEMORY[0x24BE22F48]();
}

uint64_t REMaterialParametersServiceCreatePbrParameters()
{
  return MEMORY[0x24BE22F50]();
}

uint64_t REMaterialParametersServiceCreateUnlitParameters()
{
  return MEMORY[0x24BE22F58]();
}

uint64_t REMaterialParametersServiceFindPbrParametersByID()
{
  return MEMORY[0x24BE22F60]();
}

uint64_t REMaterialParametersServiceFindUnlitParametersByID()
{
  return MEMORY[0x24BE22F68]();
}

uint64_t REMaterialParametersServiceGetParametersTypeForID()
{
  return MEMORY[0x24BE22F70]();
}

uint64_t REMaterialRenderStateArrayComponentClearCullModeAtIndex()
{
  return MEMORY[0x24BE22F78]();
}

uint64_t REMaterialRenderStateArrayComponentClearReadsDepthAtIndex()
{
  return MEMORY[0x24BE22F80]();
}

uint64_t REMaterialRenderStateArrayComponentClearTriangleFillModeAtIndex()
{
  return MEMORY[0x24BE22F88]();
}

uint64_t REMaterialRenderStateArrayComponentClearWritesDepthAtIndex()
{
  return MEMORY[0x24BE22F90]();
}

uint64_t REMaterialRenderStateArrayComponentGetComponentType()
{
  return MEMORY[0x24BE22F98]();
}

uint64_t REMaterialRenderStateArrayComponentGetCullModeAtIndex()
{
  return MEMORY[0x24BE22FA0]();
}

uint64_t REMaterialRenderStateArrayComponentGetReadsDepthAtIndex()
{
  return MEMORY[0x24BE22FA8]();
}

uint64_t REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex()
{
  return MEMORY[0x24BE22FB0]();
}

uint64_t REMaterialRenderStateArrayComponentGetWritesDepthAtIndex()
{
  return MEMORY[0x24BE22FB8]();
}

uint64_t REMaterialRenderStateArrayComponentResize()
{
  return MEMORY[0x24BE22FC0]();
}

uint64_t REMaterialRenderStateArrayComponentSetCullModeAtIndex()
{
  return MEMORY[0x24BE22FC8]();
}

uint64_t REMaterialRenderStateArrayComponentSetReadsDepthAtIndex()
{
  return MEMORY[0x24BE22FD0]();
}

uint64_t REMaterialRenderStateArrayComponentSetTriangleFillModeAtIndex()
{
  return MEMORY[0x24BE22FD8]();
}

uint64_t REMaterialRenderStateArrayComponentSetWritesDepthAtIndex()
{
  return MEMORY[0x24BE22FE0]();
}

uint64_t REMaterialRenderStateArrayComponentSize()
{
  return MEMORY[0x24BE22FE8]();
}

uint64_t REMeshAssetCopyModelPartSkinInfluenceEndIndices()
{
  return MEMORY[0x24BE23010]();
}

uint64_t REMeshAssetCopyModelPartSkinInfluences()
{
  return MEMORY[0x24BE23018]();
}

uint64_t REMeshAssetCopySkeletonInverseBindPoseTransforms()
{
  return MEMORY[0x24BE23020]();
}

uint64_t REMeshAssetCreateBoxDescriptor()
{
  return MEMORY[0x24BE23028]();
}

uint64_t REMeshAssetCreateBoxWithRoundedCornersDescriptor()
{
  return MEMORY[0x24BE23030]();
}

uint64_t REMeshAssetCreateCapsuleDescriptor()
{
  return MEMORY[0x24BE23038]();
}

uint64_t REMeshAssetCreateConeDescriptor()
{
  return MEMORY[0x24BE23040]();
}

uint64_t REMeshAssetCreateCylinderDescriptor()
{
  return MEMORY[0x24BE23048]();
}

uint64_t REMeshAssetCreateExtrudedTextDescriptor()
{
  return MEMORY[0x24BE23050]();
}

uint64_t REMeshAssetCreatePlaneDescriptor()
{
  return MEMORY[0x24BE23058]();
}

uint64_t REMeshAssetCreateSphereDescriptor()
{
  return MEMORY[0x24BE23060]();
}

uint64_t REMeshAssetGetAverageInfluenceCount()
{
  return MEMORY[0x24BE23090]();
}

uint64_t REMeshAssetGetBlendShapeDefinitionCountForPart()
{
  return MEMORY[0x24BE23098]();
}

uint64_t REMeshAssetGetBlendShapeDefinitionNameForPart()
{
  return MEMORY[0x24BE230A0]();
}

uint64_t REMeshAssetGetBlendShapeGroupCount()
{
  return MEMORY[0x24BE230A8]();
}

uint64_t REMeshAssetGetBlendShapeGroupDefinitionCount()
{
  return MEMORY[0x24BE230B0]();
}

uint64_t REMeshAssetGetBlendShapeOffsetsForPart()
{
  return MEMORY[0x24BE230B8]();
}

uint64_t REMeshAssetGetDirectMesh()
{
  return MEMORY[0x24BE230C0]();
}

uint64_t REMeshAssetGetInstanceCount()
{
  return MEMORY[0x24BE230C8]();
}

uint64_t REMeshAssetGetInstanceModelIndex()
{
  return MEMORY[0x24BE230D0]();
}

uint64_t REMeshAssetGetInstanceName()
{
  return MEMORY[0x24BE230D8]();
}

uint64_t REMeshAssetGetInstanceTransform()
{
  return MEMORY[0x24BE230E0]();
}

uint64_t REMeshAssetGetMaxMaterialIndex()
{
  return MEMORY[0x24BE230E8]();
}

uint64_t REMeshAssetGetModelCount()
{
  return MEMORY[0x24BE230F0]();
}

uint64_t REMeshAssetGetModelName()
{
  return MEMORY[0x24BE230F8]();
}

uint64_t REMeshAssetGetModelPartBufferAttributeCount()
{
  return MEMORY[0x24BE23100]();
}

uint64_t REMeshAssetGetModelPartBufferAttributeData()
{
  return MEMORY[0x24BE23108]();
}

uint64_t REMeshAssetGetModelPartBufferAttributeRate()
{
  return MEMORY[0x24BE23110]();
}

uint64_t REMeshAssetGetModelPartBufferAttributeType()
{
  return MEMORY[0x24BE23118]();
}

uint64_t REMeshAssetGetModelPartBufferCount()
{
  return MEMORY[0x24BE23120]();
}

uint64_t REMeshAssetGetModelPartBufferName()
{
  return MEMORY[0x24BE23128]();
}

uint64_t REMeshAssetGetModelPartCount()
{
  return MEMORY[0x24BE23130]();
}

uint64_t REMeshAssetGetModelPartMaterial()
{
  return MEMORY[0x24BE23138]();
}

uint64_t REMeshAssetGetModelPartName()
{
  return MEMORY[0x24BE23140]();
}

uint64_t REMeshAssetGetModelPartSkeletonIndex()
{
  return MEMORY[0x24BE23148]();
}

uint64_t REMeshAssetGetModelPartSkinUniformInfluenceCount()
{
  return MEMORY[0x24BE23150]();
}

uint64_t REMeshAssetGetModelVertexCount()
{
  return MEMORY[0x24BE23158]();
}

uint64_t REMeshAssetGetSkeletonBindPoseTransform()
{
  return MEMORY[0x24BE23168]();
}

uint64_t REMeshAssetGetSkeletonJointCount()
{
  return MEMORY[0x24BE23170]();
}

uint64_t REMeshAssetGetSkeletonJointName()
{
  return MEMORY[0x24BE23178]();
}

uint64_t REMeshAssetGetSkeletonJointParent()
{
  return MEMORY[0x24BE23180]();
}

uint64_t REMeshAssetGetSkeletonName()
{
  return MEMORY[0x24BE23188]();
}

uint64_t REMeshAssetGetTotalSkeletonCount()
{
  return MEMORY[0x24BE23190]();
}

uint64_t REMeshAssetModelPartBufferAttributeIsSlow()
{
  return MEMORY[0x24BE23198]();
}

uint64_t REMeshAssetReplaceAllWithDirectMesh()
{
  return MEMORY[0x24BE231A0]();
}

uint64_t REMeshAssetReplaceAllWithModel()
{
  return MEMORY[0x24BE231A8]();
}

uint64_t REMeshAssetReplaceAllWithResource()
{
  return MEMORY[0x24BE231B0]();
}

uint64_t REMeshAssetReplaceAllWithSkinnedModels()
{
  return MEMORY[0x24BE231B8]();
}

uint64_t REMeshAttributeDescriptorArraySetCustomName()
{
  return MEMORY[0x24BE231C0]();
}

uint64_t REMeshAttributeDescriptorCopyAdjacencyDataToBuffer()
{
  return MEMORY[0x24BE231C8]();
}

uint64_t REMeshAttributeDescriptorCopyBitangentsToBuffer()
{
  return MEMORY[0x24BE231D0]();
}

uint64_t REMeshAttributeDescriptorCopyBlendShapeOffsetsToBuffer()
{
  return MEMORY[0x24BE231D8]();
}

uint64_t REMeshAttributeDescriptorCopyColor3sToBuffer()
{
  return MEMORY[0x24BE231E0]();
}

uint64_t REMeshAttributeDescriptorCopyColor4sToBuffer()
{
  return MEMORY[0x24BE231E8]();
}

uint64_t REMeshAttributeDescriptorCopyCustom2sToBuffer()
{
  return MEMORY[0x24BE231F0]();
}

uint64_t REMeshAttributeDescriptorCopyCustom3sToBuffer()
{
  return MEMORY[0x24BE231F8]();
}

uint64_t REMeshAttributeDescriptorCopyCustom4sToBuffer()
{
  return MEMORY[0x24BE23200]();
}

uint64_t REMeshAttributeDescriptorCopyInfluenceDataToBuffer()
{
  return MEMORY[0x24BE23208]();
}

uint64_t REMeshAttributeDescriptorCopyJointInfluencesToBuffer()
{
  return MEMORY[0x24BE23210]();
}

uint64_t REMeshAttributeDescriptorCopyNormalsToBuffer()
{
  return MEMORY[0x24BE23218]();
}

uint64_t REMeshAttributeDescriptorCopyPositionsToBuffer()
{
  return MEMORY[0x24BE23220]();
}

uint64_t REMeshAttributeDescriptorCopySkinInfluenceEndIndicesToBuffer()
{
  return MEMORY[0x24BE23228]();
}

uint64_t REMeshAttributeDescriptorCopyTangentsToBuffer()
{
  return MEMORY[0x24BE23230]();
}

uint64_t REMeshAttributeDescriptorCopyUVsToBuffer()
{
  return MEMORY[0x24BE23238]();
}

uint64_t REMeshAttributeDescriptorCopyValenceDataToBuffer()
{
  return MEMORY[0x24BE23240]();
}

uint64_t REMeshAttributesDescriptorCreate()
{
  return MEMORY[0x24BE23248]();
}

uint64_t REMeshCompileOptionsClearAttributeCompressionType()
{
  return MEMORY[0x24BE23250]();
}

uint64_t REMeshCompileOptionsCreate()
{
  return MEMORY[0x24BE23258]();
}

uint64_t REMeshCompileOptionsGetAttributeCompressionType()
{
  return MEMORY[0x24BE23260]();
}

uint64_t REMeshCompileOptionsGetGenerateDecimatedMesh()
{
  return MEMORY[0x24BE23268]();
}

uint64_t REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes()
{
  return MEMORY[0x24BE23270]();
}

uint64_t REMeshCompileOptionsGetMergeVerticesIfPolygonSoup()
{
  return MEMORY[0x24BE23278]();
}

uint64_t REMeshCompileOptionsGetPreserveSharpFeatures()
{
  return MEMORY[0x24BE23280]();
}

uint64_t REMeshCompileOptionsGetPreserveSubdivisonSurfaceData()
{
  return MEMORY[0x24BE23288]();
}

uint64_t REMeshCompileOptionsGetReorderVertexCaching()
{
  return MEMORY[0x24BE23290]();
}

uint64_t REMeshCompileOptionsGetRepairTangents()
{
  return MEMORY[0x24BE23298]();
}

uint64_t REMeshCompileOptionsSetAttributeCompressionType()
{
  return MEMORY[0x24BE232A0]();
}

uint64_t REMeshCompileOptionsSetGenerateDecimatedMesh()
{
  return MEMORY[0x24BE232A8]();
}

uint64_t REMeshCompileOptionsSetGenerateVertexFaceAdjacencyAttributes()
{
  return MEMORY[0x24BE232B0]();
}

uint64_t REMeshCompileOptionsSetMergeVerticesIfPolygonSoup()
{
  return MEMORY[0x24BE232B8]();
}

uint64_t REMeshCompileOptionsSetPreserveSharpFeatures()
{
  return MEMORY[0x24BE232C0]();
}

uint64_t REMeshCompileOptionsSetPreserveSubdivisonSurfaceData()
{
  return MEMORY[0x24BE232C8]();
}

uint64_t REMeshCompileOptionsSetReorderVertexCaching()
{
  return MEMORY[0x24BE232D0]();
}

uint64_t REMeshCompileOptionsSetRepairTangents()
{
  return MEMORY[0x24BE232D8]();
}

uint64_t REMeshComponentAddMaterial()
{
  return MEMORY[0x24BE232E0]();
}

uint64_t REMeshComponentAddMaterialWithParameters()
{
  return MEMORY[0x24BE232E8]();
}

uint64_t REMeshComponentComputeTriangleCount()
{
  return MEMORY[0x24BE232F0]();
}

uint64_t REMeshComponentGetBoundsMargin()
{
  return MEMORY[0x24BE232F8]();
}

uint64_t REMeshComponentGetComponentType()
{
  return MEMORY[0x24BE23300]();
}

uint64_t REMeshComponentGetMaterialAtIndex()
{
  return MEMORY[0x24BE23308]();
}

uint64_t REMeshComponentGetMaterialCount()
{
  return MEMORY[0x24BE23310]();
}

uint64_t REMeshComponentGetMaterialParametersIDAtIndex()
{
  return MEMORY[0x24BE23318]();
}

uint64_t REMeshComponentGetMesh()
{
  return MEMORY[0x24BE23320]();
}

uint64_t REMeshComponentRemoveAllMaterials()
{
  return MEMORY[0x24BE23328]();
}

uint64_t REMeshComponentSetBoundsMargin()
{
  return MEMORY[0x24BE23330]();
}

uint64_t REMeshComponentSetMaterialAtIndex()
{
  return MEMORY[0x24BE23338]();
}

uint64_t REMeshComponentSetMaterialWithParametersAtIndex()
{
  return MEMORY[0x24BE23340]();
}

uint64_t REMeshComponentSetMesh()
{
  return MEMORY[0x24BE23348]();
}

uint64_t REMeshDefinitionCreateWithAttributes()
{
  return MEMORY[0x24BE23350]();
}

uint64_t REMeshDefinitionSetAttributeWithData()
{
  return MEMORY[0x24BE23358]();
}

uint64_t REMeshDefinitionSetBoundingBox()
{
  return MEMORY[0x24BE23360]();
}

uint64_t REMeshDefinitionSetCustomAttributeWithData()
{
  return MEMORY[0x24BE23368]();
}

uint64_t REMeshDefinitionSetDoubleSided()
{
  return MEMORY[0x24BE23370]();
}

uint64_t REMeshDefinitionSetIndicesWithData()
{
  return MEMORY[0x24BE23378]();
}

uint64_t REMeshDefinitionSetIndicesWithDataUInt16()
{
  return MEMORY[0x24BE23380]();
}

uint64_t REMeshDefinitionSetIndicesWithDataUInt32()
{
  return MEMORY[0x24BE23388]();
}

uint64_t REMeshDefinitionSetSkeletonName()
{
  return MEMORY[0x24BE23390]();
}

uint64_t REMeshDeformationComponentGetComponentType()
{
  return MEMORY[0x24BE23398]();
}

uint64_t REMeshInstanceDefinitionCreate()
{
  return MEMORY[0x24BE233A0]();
}

uint64_t REMeshModelDefinitionAppendLevel()
{
  return MEMORY[0x24BE233A8]();
}

uint64_t REMeshModelDefinitionAppendTrianglesWithName()
{
  return MEMORY[0x24BE233B8]();
}

uint64_t REMeshModelDefinitionCopyName()
{
  return MEMORY[0x24BE233C0]();
}

uint64_t REMeshModelDefinitionCreate()
{
  return MEMORY[0x24BE233C8]();
}

uint64_t REMeshModelDefinitionSetName()
{
  return MEMORY[0x24BE233D0]();
}

uint64_t REMeshResourceDefinitionCreate()
{
  return MEMORY[0x24BE233D8]();
}

uint64_t REMeshSortingComponentCheckIfEqual()
{
  return MEMORY[0x24BE233E0]();
}

uint64_t REMeshSortingComponentCopySortGroup()
{
  return MEMORY[0x24BE233E8]();
}

uint64_t REMeshSortingComponentGetComponentType()
{
  return MEMORY[0x24BE233F0]();
}

uint64_t REMeshSortingComponentGetDepthPriorityInSortGroup()
{
  return MEMORY[0x24BE233F8]();
}

uint64_t REMeshSortingComponentGetIsUI()
{
  return MEMORY[0x24BE23400]();
}

uint64_t REMeshSortingComponentGetPriorityInSortGroup()
{
  return MEMORY[0x24BE23408]();
}

uint64_t REMeshSortingComponentSetDepthPriorityInSortGroup()
{
  return MEMORY[0x24BE23410]();
}

uint64_t REMeshSortingComponentSetIsUI()
{
  return MEMORY[0x24BE23418]();
}

uint64_t REMeshSortingComponentSetPriorityInSortGroup()
{
  return MEMORY[0x24BE23420]();
}

uint64_t REMeshSortingComponentSetSortGroup()
{
  return MEMORY[0x24BE23428]();
}

uint64_t REMetricLoadFile()
{
  return MEMORY[0x24BE23430]();
}

uint64_t REMotionStateComponentGetAngularVelocity()
{
  return MEMORY[0x24BE23438]();
}

uint64_t REMotionStateComponentGetComponentType()
{
  return MEMORY[0x24BE23440]();
}

uint64_t REMotionStateComponentGetLinearVelocity()
{
  return MEMORY[0x24BE23448]();
}

uint64_t REMotionStateComponentSetAngularVelocity()
{
  return MEMORY[0x24BE23450]();
}

uint64_t REMotionStateComponentSetLinearVelocity()
{
  return MEMORY[0x24BE23458]();
}

uint64_t RENetCompatibilityCheckCompatibility()
{
  return MEMORY[0x24BE23460]();
}

uint64_t RENetCompatibilityCreateDataFromToken()
{
  return MEMORY[0x24BE23468]();
}

uint64_t RENetCompatibilityCreateLocalToken()
{
  return MEMORY[0x24BE23470]();
}

uint64_t RENetCompatibilityCreateTokenFromData()
{
  return MEMORY[0x24BE23478]();
}

uint64_t RENetSyncBufferWrite()
{
  return MEMORY[0x24BE23480]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x24BE23490]();
}

uint64_t RENetworkComponentGuid()
{
  return MEMORY[0x24BE23498]();
}

uint64_t RENetworkComponentIsAuthoritative()
{
  return MEMORY[0x24BE234A0]();
}

uint64_t RENetworkComponentIsOwnershipLocked()
{
  return MEMORY[0x24BE234A8]();
}

uint64_t RENetworkComponentLockEntity()
{
  return MEMORY[0x24BE234B0]();
}

uint64_t RENetworkComponentRequestOwnershipV2()
{
  return MEMORY[0x24BE234C0]();
}

uint64_t RENetworkComponentSetAlwaysMigrate()
{
  return MEMORY[0x24BE234C8]();
}

uint64_t RENetworkComponentSetSuppressMarkDirty()
{
  return MEMORY[0x24BE234D0]();
}

uint64_t RENetworkComponentShouldAlwaysMigrate()
{
  return MEMORY[0x24BE234D8]();
}

uint64_t RENetworkComponentUnlockEntity()
{
  return MEMORY[0x24BE234E0]();
}

uint64_t RENetworkMarkComponentDirty()
{
  return MEMORY[0x24BE234E8]();
}

uint64_t RENetworkMarkEntityMetadataDirty()
{
  return MEMORY[0x24BE234F0]();
}

uint64_t RENetworkSystemAddObserver()
{
  return MEMORY[0x24BE234F8]();
}

uint64_t RENetworkSystemObserverCreateEx()
{
  return MEMORY[0x24BE23500]();
}

uint64_t RENetworkSystemObserverOnComponentDidUpdate()
{
  return MEMORY[0x24BE23508]();
}

uint64_t RENetworkSystemObserverOnLocalComponentDidUpdate()
{
  return MEMORY[0x24BE23510]();
}

uint64_t RENetworkSystemObserverOnLocalComponentWillRemove()
{
  return MEMORY[0x24BE23518]();
}

uint64_t RENetworkSystemObserverOnLocalEntityDidCreate()
{
  return MEMORY[0x24BE23520]();
}

uint64_t RENetworkSystemObserverOnLocalEntityWillDestroy()
{
  return MEMORY[0x24BE23528]();
}

uint64_t RENetworkSystemRemoveObserver()
{
  return MEMORY[0x24BE23530]();
}

uint64_t REOpacityServiceGetComputedOpacity()
{
  return MEMORY[0x24BE23540]();
}

uint64_t REOrthographicCameraComponentGetComponentType()
{
  return MEMORY[0x24BE23550]();
}

uint64_t REOrthographicCameraComponentGetFar()
{
  return MEMORY[0x24BE23558]();
}

uint64_t REOrthographicCameraComponentGetNear()
{
  return MEMORY[0x24BE23560]();
}

uint64_t REOrthographicCameraComponentGetScale()
{
  return MEMORY[0x24BE23568]();
}

uint64_t REOrthographicCameraComponentGetScaleDirection()
{
  return MEMORY[0x24BE23570]();
}

uint64_t REOrthographicCameraComponentSetFar()
{
  return MEMORY[0x24BE23578]();
}

uint64_t REOrthographicCameraComponentSetNear()
{
  return MEMORY[0x24BE23580]();
}

uint64_t REOrthographicCameraComponentSetScale()
{
  return MEMORY[0x24BE23588]();
}

uint64_t REOrthographicCameraComponentSetScaleDirection()
{
  return MEMORY[0x24BE23590]();
}

uint64_t REPbrMaterialParametersGetColorTexture()
{
  return MEMORY[0x24BE235F0]();
}

uint64_t REPbrMaterialParametersGetColorTint()
{
  return MEMORY[0x24BE235F8]();
}

uint64_t REPbrMaterialParametersGetEmissiveScale()
{
  return MEMORY[0x24BE23608]();
}

uint64_t REPbrMaterialParametersGetOpacityThreshold()
{
  return MEMORY[0x24BE23638]();
}

uint64_t REPbrMaterialParametersGetUVOffset0()
{
  return MEMORY[0x24BE23670]();
}

uint64_t REPbrMaterialParametersGetUVOffset1()
{
  return MEMORY[0x24BE23678]();
}

uint64_t REPbrMaterialParametersGetUVTransform0()
{
  return MEMORY[0x24BE23680]();
}

uint64_t REPbrMaterialParametersGetUVTransform1()
{
  return MEMORY[0x24BE23688]();
}

uint64_t REPbrMaterialParametersHasClearcoat()
{
  return MEMORY[0x24BE23690]();
}

uint64_t REPbrMaterialParametersHasSheen()
{
  return MEMORY[0x24BE23698]();
}

uint64_t REPbrMaterialParametersIsAnisotropic()
{
  return MEMORY[0x24BE236A0]();
}

uint64_t REPbrMaterialParametersSetColorTexture()
{
  return MEMORY[0x24BE236F8]();
}

uint64_t REPbrMaterialParametersSetColorTint()
{
  return MEMORY[0x24BE23700]();
}

uint64_t REPbrMaterialParametersSetEmissiveScale()
{
  return MEMORY[0x24BE23710]();
}

uint64_t REPbrMaterialParametersSetNormalTexture()
{
  return MEMORY[0x24BE23730]();
}

uint64_t REPbrMaterialParametersSetOpacityThreshold()
{
  return MEMORY[0x24BE23738]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x24BE237A0]();
}

uint64_t REPerspectiveCameraComponentGetFar()
{
  return MEMORY[0x24BE237A8]();
}

uint64_t REPerspectiveCameraComponentGetFieldOfView()
{
  return MEMORY[0x24BE237B0]();
}

uint64_t REPerspectiveCameraComponentGetFieldOfViewDirection()
{
  return MEMORY[0x24BE237B8]();
}

uint64_t REPerspectiveCameraComponentGetNear()
{
  return MEMORY[0x24BE237C0]();
}

uint64_t REPerspectiveCameraComponentSetFar()
{
  return MEMORY[0x24BE237C8]();
}

uint64_t REPerspectiveCameraComponentSetFieldOfView()
{
  return MEMORY[0x24BE237D0]();
}

uint64_t REPerspectiveCameraComponentSetFieldOfViewDirection()
{
  return MEMORY[0x24BE237D8]();
}

uint64_t REPerspectiveCameraComponentSetNear()
{
  return MEMORY[0x24BE237E0]();
}

uint64_t REPhysicsForceEffectSimplexNoiseDerivative4()
{
  return MEMORY[0x24BE237E8]();
}

uint64_t REPhysicsJointDefinitionArrayAddPhysicsJointDefinition()
{
  return MEMORY[0x24BE237F0]();
}

uint64_t REPhysicsJointDefinitionArrayCreate()
{
  return MEMORY[0x24BE237F8]();
}

uint64_t REPhysicsJointDefinitionCreateCustomJoint()
{
  return MEMORY[0x24BE23800]();
}

uint64_t REPhysicsJointDefinitionCreateDistanceJoint()
{
  return MEMORY[0x24BE23808]();
}

uint64_t REPhysicsJointDefinitionCreateFixedJoint()
{
  return MEMORY[0x24BE23810]();
}

uint64_t REPhysicsJointDefinitionCreatePrismaticJoint()
{
  return MEMORY[0x24BE23818]();
}

uint64_t REPhysicsJointDefinitionCreateRevoluteJoint()
{
  return MEMORY[0x24BE23820]();
}

uint64_t REPhysicsJointDefinitionCreateSphericalJoint()
{
  return MEMORY[0x24BE23828]();
}

uint64_t REPhysicsJointDefinitionDistanceJointGetDistanceLimit()
{
  return MEMORY[0x24BE23830]();
}

uint64_t REPhysicsJointDefinitionDistanceJointGetTolerance()
{
  return MEMORY[0x24BE23838]();
}

uint64_t REPhysicsJointDefinitionGetAngularLimit()
{
  return MEMORY[0x24BE23840]();
}

uint64_t REPhysicsJointDefinitionGetChecksForCollisions()
{
  return MEMORY[0x24BE23848]();
}

uint64_t REPhysicsJointDefinitionGetEntity()
{
  return MEMORY[0x24BE23850]();
}

uint64_t REPhysicsJointDefinitionGetJointType()
{
  return MEMORY[0x24BE23858]();
}

uint64_t REPhysicsJointDefinitionGetLinearLimit()
{
  return MEMORY[0x24BE23860]();
}

uint64_t REPhysicsJointDefinitionGetOffsetFromPin()
{
  return MEMORY[0x24BE23868]();
}

uint64_t REPhysicsJointDefinitionGetPinName()
{
  return MEMORY[0x24BE23870]();
}

uint64_t REPhysicsJointDefinitionPrismaticJointGetLinearLimitX()
{
  return MEMORY[0x24BE23878]();
}

uint64_t REPhysicsJointDefinitionRevoluteJointGetAngularLimitX()
{
  return MEMORY[0x24BE23880]();
}

uint64_t REPhysicsJointDefinitionSphericalJointGetAngularLimitYZ()
{
  return MEMORY[0x24BE23888]();
}

uint64_t REPhysicsJointsComponentAddPhysicsJointDefinition()
{
  return MEMORY[0x24BE23890]();
}

uint64_t REPhysicsJointsComponentGetComponentType()
{
  return MEMORY[0x24BE23898]();
}

uint64_t REPhysicsJointsComponentGetJointCount()
{
  return MEMORY[0x24BE238A0]();
}

uint64_t REPhysicsJointsComponentGetPhysicsJointDefinitionAtIndex()
{
  return MEMORY[0x24BE238A8]();
}

uint64_t REPhysicsJointsComponentIsJointAtIndexActive()
{
  return MEMORY[0x24BE238B0]();
}

uint64_t REPhysicsJointsComponentSetPhysicsJointDefinitionArray()
{
  return MEMORY[0x24BE238B8]();
}

uint64_t REPhysicsMaterialAssetGetDynamicFriction()
{
  return MEMORY[0x24BE238C0]();
}

uint64_t REPhysicsMaterialAssetGetRestitution()
{
  return MEMORY[0x24BE238C8]();
}

uint64_t REPhysicsMaterialAssetGetStaticFriction()
{
  return MEMORY[0x24BE238D0]();
}

uint64_t REPhysicsOriginComponentGetComponentType()
{
  return MEMORY[0x24BE238D8]();
}

uint64_t REPhysicsSimulationComponentGetComponentType()
{
  return MEMORY[0x24BE238E0]();
}

uint64_t REPhysicsSimulationComponentGetGravityOverride()
{
  return MEMORY[0x24BE238E8]();
}

uint64_t REPhysicsSimulationComponentGetKinematicVsKinematicFlag()
{
  return MEMORY[0x24BE238F0]();
}

uint64_t REPhysicsSimulationComponentGetKinematicVsStaticFlag()
{
  return MEMORY[0x24BE238F8]();
}

uint64_t REPhysicsSimulationComponentGetParentTimebase()
{
  return MEMORY[0x24BE23900]();
}

uint64_t REPhysicsSimulationComponentGetSolverIterations()
{
  return MEMORY[0x24BE23908]();
}

uint64_t REPhysicsSimulationComponentSetGravityOverride()
{
  return MEMORY[0x24BE23910]();
}

uint64_t REPhysicsSimulationComponentSetKinematicFlags()
{
  return MEMORY[0x24BE23918]();
}

uint64_t REPhysicsSimulationComponentSetParentTimebase()
{
  return MEMORY[0x24BE23920]();
}

uint64_t REPhysicsSimulationComponentSetSolverIterations()
{
  return MEMORY[0x24BE23928]();
}

uint64_t REPhysicsSimulationServiceGetDefaultGravity()
{
  return MEMORY[0x24BE23930]();
}

uint64_t REPhysicsSimulationServiceGetDefaultInitialAngularDamping()
{
  return MEMORY[0x24BE23938]();
}

uint64_t REPhysicsSimulationServiceGetDefaultInitialLinearDamping()
{
  return MEMORY[0x24BE23940]();
}

uint64_t REPhysicsSimulationServiceGetRootSimulationEntity()
{
  return MEMORY[0x24BE23948]();
}

uint64_t REPhysicsSimulationServiceSetDefaultGravity()
{
  return MEMORY[0x24BE23958]();
}

uint64_t REPinComponentAddPin()
{
  return MEMORY[0x24BE23960]();
}

uint64_t REPinComponentGetComponentType()
{
  return MEMORY[0x24BE23968]();
}

uint64_t REPinComponentGetPinByName()
{
  return MEMORY[0x24BE23970]();
}

uint64_t REPinComponentGetPinCount()
{
  return MEMORY[0x24BE23978]();
}

uint64_t REPinComponentGetPinNameAtIndex()
{
  return MEMORY[0x24BE23980]();
}

uint64_t REPinComponentGetPinOffsetPoseAtIndex()
{
  return MEMORY[0x24BE23988]();
}

uint64_t REPinComponentGetSkeletalJointNameAtIndex()
{
  return MEMORY[0x24BE23990]();
}

uint64_t REPinComponentIsSkeletalJointPinAtIndex()
{
  return MEMORY[0x24BE23998]();
}

uint64_t REPinComponentRemoveAllPins()
{
  return MEMORY[0x24BE239A0]();
}

uint64_t REPinComponentRemovePin()
{
  return MEMORY[0x24BE239A8]();
}

uint64_t REPinCreateExt()
{
  return MEMORY[0x24BE239B0]();
}

uint64_t REPinGetOffsetPose()
{
  return MEMORY[0x24BE239B8]();
}

uint64_t REPinGetSkeletalJointName()
{
  return MEMORY[0x24BE239C0]();
}

uint64_t REPinIsSkeletalJointPin()
{
  return MEMORY[0x24BE239C8]();
}

uint64_t REPointLightComponentGetAttenuationFalloffExponent()
{
  return MEMORY[0x24BE239D0]();
}

uint64_t REPointLightComponentGetAttenuationRadius()
{
  return MEMORY[0x24BE239D8]();
}

uint64_t REPointLightComponentGetColorGamut3F()
{
  return MEMORY[0x24BE239E0]();
}

uint64_t REPointLightComponentGetComponentType()
{
  return MEMORY[0x24BE239E8]();
}

uint64_t REPointLightComponentGetIntensity()
{
  return MEMORY[0x24BE239F0]();
}

uint64_t REPointLightComponentSetAttenuationFalloffExponent()
{
  return MEMORY[0x24BE239F8]();
}

uint64_t REPointLightComponentSetAttenuationRadius()
{
  return MEMORY[0x24BE23A00]();
}

uint64_t REPointLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE23A08]();
}

uint64_t REPointLightComponentSetIntensity()
{
  return MEMORY[0x24BE23A10]();
}

uint64_t REPointLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE23A18]();
}

uint64_t REPointLightShadowMapComponentGetCullModeEx()
{
  return MEMORY[0x24BE23A20]();
}

uint64_t REPointLightShadowMapComponentGetDepthBias()
{
  return MEMORY[0x24BE23A28]();
}

uint64_t REPointLightShadowMapComponentGetZFar()
{
  return MEMORY[0x24BE23A30]();
}

uint64_t REPointLightShadowMapComponentGetZNear()
{
  return MEMORY[0x24BE23A38]();
}

uint64_t REPointLightShadowMapComponentSetCullMode()
{
  return MEMORY[0x24BE23A40]();
}

uint64_t REPointLightShadowMapComponentSetDepthBias()
{
  return MEMORY[0x24BE23A48]();
}

uint64_t REPointLightShadowMapComponentSetZFar()
{
  return MEMORY[0x24BE23A50]();
}

uint64_t REPointLightShadowMapComponentSetZNear()
{
  return MEMORY[0x24BE23A58]();
}

uint64_t REPortalComponentGetAllowsCrossing()
{
  return MEMORY[0x24BE23A60]();
}

uint64_t REPortalComponentGetClipPlaneNormal()
{
  return MEMORY[0x24BE23A68]();
}

uint64_t REPortalComponentGetClipPlanePosition()
{
  return MEMORY[0x24BE23A70]();
}

uint64_t REPortalComponentGetComponentType()
{
  return MEMORY[0x24BE23A78]();
}

uint64_t REPortalComponentGetCrossPlaneNormal()
{
  return MEMORY[0x24BE23A80]();
}

uint64_t REPortalComponentGetCrossPlanePosition()
{
  return MEMORY[0x24BE23A88]();
}

uint64_t REPortalComponentGetTargetWorldEntity()
{
  return MEMORY[0x24BE23A90]();
}

uint64_t REPortalComponentGetUseClipPlane()
{
  return MEMORY[0x24BE23A98]();
}

uint64_t REPortalComponentSetAllowsCrossing()
{
  return MEMORY[0x24BE23AA0]();
}

uint64_t REPortalComponentSetClipPlaneNormal()
{
  return MEMORY[0x24BE23AA8]();
}

uint64_t REPortalComponentSetClipPlanePosition()
{
  return MEMORY[0x24BE23AB0]();
}

uint64_t REPortalComponentSetCrossPlaneNormal()
{
  return MEMORY[0x24BE23AB8]();
}

uint64_t REPortalComponentSetCrossPlanePosition()
{
  return MEMORY[0x24BE23AC0]();
}

uint64_t REPortalComponentSetInheritsIBL()
{
  return MEMORY[0x24BE23AC8]();
}

uint64_t REPortalComponentSetInheritsProbeLighting()
{
  return MEMORY[0x24BE23AD0]();
}

uint64_t REPortalComponentSetTargetWorldEntity()
{
  return MEMORY[0x24BE23AD8]();
}

uint64_t REPortalComponentSetUseClipPlane()
{
  return MEMORY[0x24BE23AE0]();
}

uint64_t REPortalComponentUnsetTargetWorldRoot()
{
  return MEMORY[0x24BE23AE8]();
}

uint64_t REPortalCrossingFlagsComponentSetEnabled()
{
  return MEMORY[0x24BE23AF0]();
}

uint64_t REPortalCrossingFlagsComponentSetInherited()
{
  return MEMORY[0x24BE23AF8]();
}

uint64_t REPoseAreAlmostEqualWithDefaultTolerance()
{
  return MEMORY[0x24BE23B00]();
}

uint64_t REPoseIdentity()
{
  return MEMORY[0x24BE23B08]();
}

uint64_t REPoseMultiply()
{
  return MEMORY[0x24BE23B10]();
}

uint64_t REProjectiveShadowReceiverComponentAddToEntity()
{
  return MEMORY[0x24BE23BC0]();
}

uint64_t REProjectiveShadowReceiverComponentGetComponentType()
{
  return MEMORY[0x24BE23BC8]();
}

uint64_t REProjectiveShadowReceiverComponentGetShadowIntensity()
{
  return MEMORY[0x24BE23BD0]();
}

uint64_t REQueryConnectComponentPredicates()
{
  return MEMORY[0x24BE23BD8]();
}

uint64_t REQueryConnectEntityPredicates()
{
  return MEMORY[0x24BE23BE0]();
}

uint64_t REQueryCreateComponentQuery()
{
  return MEMORY[0x24BE23BF8]();
}

uint64_t REQueryCreateCustomComponentPredicate()
{
  return MEMORY[0x24BE23C00]();
}

uint64_t REQueryCreateCustomEntityPredicate()
{
  return MEMORY[0x24BE23C08]();
}

uint64_t REQueryCreateEntityQuery()
{
  return MEMORY[0x24BE23C10]();
}

uint64_t REQueryCreateHasEntityPredicate()
{
  return MEMORY[0x24BE23C18]();
}

uint64_t REQueryCreateIsChildCallbackEntityPredicate()
{
  return MEMORY[0x24BE23C20]();
}

uint64_t REQueryCreateIsChildEntityPredicate()
{
  return MEMORY[0x24BE23C28]();
}

uint64_t REQueryCreateIsDescendantCallbackEntityPredicate()
{
  return MEMORY[0x24BE23C30]();
}

uint64_t REQueryCreateIsDescendantEntityPredicate()
{
  return MEMORY[0x24BE23C38]();
}

uint64_t REQueryEvaluateComponentQuery()
{
  return MEMORY[0x24BE23C60]();
}

uint64_t REQueryEvaluateEntityQuery()
{
  return MEMORY[0x24BE23C68]();
}

uint64_t REQueryEvaluateEntityQueryWithRootEntity()
{
  return MEMORY[0x24BE23C70]();
}

uint64_t RERayTracedShadowReceiverComponentGetComponentType()
{
  return MEMORY[0x24BE23C78]();
}

uint64_t RERealityFileAssetDescriptorAsSceneDescriptor()
{
  return MEMORY[0x24BE23C80]();
}

uint64_t RERealityFileAssetDescriptorGetFilename()
{
  return MEMORY[0x24BE23C88]();
}

uint64_t RERealityFileAssetWriteReportCreate()
{
  return MEMORY[0x24BE23C90]();
}

uint64_t RERealityFileAssetWriteReportGetError()
{
  return MEMORY[0x24BE23C98]();
}

uint64_t RERealityFileAssetWriteReportGetSerializationString()
{
  return MEMORY[0x24BE23CA0]();
}

uint64_t RERealityFileCopyConfigurationNamesAtSetIndex()
{
  return MEMORY[0x24BE23CA8]();
}

uint64_t RERealityFileCopyConfigurationSetNames()
{
  return MEMORY[0x24BE23CB0]();
}

uint64_t RERealityFileCopyDefaultConfigurationNames()
{
  return MEMORY[0x24BE23CB8]();
}

uint64_t RERealityFileCopyTextureDescriptor()
{
  return MEMORY[0x24BE23CC0]();
}

uint64_t RERealityFileCopyURLFromDescriptor()
{
  return MEMORY[0x24BE23CC8]();
}

uint64_t RERealityFileCreateAssetDescriptorFromLabel()
{
  return MEMORY[0x24BE23CD0]();
}

uint64_t RERealityFileCreateAssetDescriptorWithEntryNameAndPostLoad()
{
  return MEMORY[0x24BE23CD8]();
}

uint64_t RERealityFileCreateAssetDescriptorWithEntryNameAndTextureDownsampleHint()
{
  return MEMORY[0x24BE23CE0]();
}

uint64_t RERealityFileCreateByOpeningFileAtURL()
{
  return MEMORY[0x24BE23CE8]();
}

uint64_t RERealityFileGetAssetDescriptorAtIndex()
{
  return MEMORY[0x24BE23CF0]();
}

uint64_t RERealityFileGetAssetDescriptorCount()
{
  return MEMORY[0x24BE23CF8]();
}

uint64_t RERealityFileGetCertifiedFreeOfChangeSceneActions()
{
  return MEMORY[0x24BE23D00]();
}

uint64_t RERealityFileGetMajorVersionNumber()
{
  return MEMORY[0x24BE23D08]();
}

uint64_t RERealityFileGetMinVersionFromRealityFileHeader()
{
  return MEMORY[0x24BE23D10]();
}

uint64_t RERealityFileGetRealityFileAssetDescriptorWithConfigurationSpecifications()
{
  return MEMORY[0x24BE23D18]();
}

uint64_t RERealityFileGetRealityFileHeader()
{
  return MEMORY[0x24BE23D20]();
}

uint64_t RERealityFileHeaderCreateFromVersionInfo()
{
  return MEMORY[0x24BE23D28]();
}

uint64_t RERealityFileMountFileAtURL()
{
  return MEMORY[0x24BE23D30]();
}

uint64_t RERealityFileMountFileAtURLWithAliasName()
{
  return MEMORY[0x24BE23D38]();
}

uint64_t RERealityFileMountFileInBundle()
{
  return MEMORY[0x24BE23D40]();
}

uint64_t RERealityFilePostLoadProcessing()
{
  return MEMORY[0x24BE23D48]();
}

uint64_t RERealityFileUnmount()
{
  return MEMORY[0x24BE23D50]();
}

uint64_t RERealityFileWriterAddPathRemappingCustomizationCallback()
{
  return MEMORY[0x24BE23D58]();
}

uint64_t RERealityFileWriterAddRemappingCustomizationCallback()
{
  return MEMORY[0x24BE23D60]();
}

uint64_t RERealityFileWriterAddSceneRemappingCallback()
{
  return MEMORY[0x24BE23D68]();
}

uint64_t RERealityFileWriterCertifyFreeOfChangeSceneActions()
{
  return MEMORY[0x24BE23D70]();
}

uint64_t RERealityFileWriterClose()
{
  return MEMORY[0x24BE23D78]();
}

uint64_t RERealityFileWriterCreateWithParameters()
{
  return MEMORY[0x24BE23D80]();
}

uint64_t RERealityFileWriterGetDefaultVersion()
{
  return MEMORY[0x24BE23D88]();
}

uint64_t RERealityFileWriterGetMaxVersion()
{
  return MEMORY[0x24BE23D90]();
}

uint64_t RERealityFileWriterGetVersionFromDeploymentTarget()
{
  return MEMORY[0x24BE23D98]();
}

uint64_t RERealityFileWriterOpen()
{
  return MEMORY[0x24BE23DA0]();
}

uint64_t RERealityFileWriterSetCompressionMethod()
{
  return MEMORY[0x24BE23DA8]();
}

uint64_t RERealityFileWriterSetConfigurationSetNames()
{
  return MEMORY[0x24BE23DB0]();
}

uint64_t RERealityFileWriterSetDefaultConfigurationNames()
{
  return MEMORY[0x24BE23DB8]();
}

uint64_t RERealityFileWriterWriteAsset()
{
  return MEMORY[0x24BE23DC8]();
}

uint64_t RERealityFileWriterWriteAssetArrayAndDependencies()
{
  return MEMORY[0x24BE23DD0]();
}

uint64_t RERealityFileWriterWriteDataEntry()
{
  return MEMORY[0x24BE23DD8]();
}

uint64_t RERealityFileWritingParametersCreate()
{
  return MEMORY[0x24BE23DE0]();
}

uint64_t RERealityFileWritingParametersSetCrossEngineValidationDisablement()
{
  return MEMORY[0x24BE23DE8]();
}

uint64_t RERealityFileWritingParametersSetMajorVersion()
{
  return MEMORY[0x24BE23DF0]();
}

uint64_t RERealityFileWritingParametersSetMakeSnapshotOfDynamicTextures()
{
  return MEMORY[0x24BE23DF8]();
}

uint64_t RERealityFileWritingParametersSetRestrictedToSeed()
{
  return MEMORY[0x24BE23E00]();
}

uint64_t RERealityFileWritingParametersSetTargetPlatform()
{
  return MEMORY[0x24BE23E08]();
}

uint64_t RERectAreaLightComponentGetComponentType()
{
  return MEMORY[0x24BE23E10]();
}

uint64_t REReferenceComponentGetBundlePath()
{
  return MEMORY[0x24BE23E30]();
}

uint64_t REReferenceComponentGetComponentType()
{
  return MEMORY[0x24BE23E38]();
}

uint64_t REReferenceComponentGetEntityName()
{
  return MEMORY[0x24BE23E40]();
}

uint64_t REReferenceComponentGetLoadingPolicy()
{
  return MEMORY[0x24BE23E48]();
}

uint64_t REReferenceComponentGetLoadingState()
{
  return MEMORY[0x24BE23E50]();
}

uint64_t REReferenceComponentGetReferenceSourceType()
{
  return MEMORY[0x24BE23E58]();
}

uint64_t REReferenceComponentGetSubscene()
{
  return MEMORY[0x24BE23E60]();
}

uint64_t REReferenceComponentSetBundlePath()
{
  return MEMORY[0x24BE23E68]();
}

uint64_t REReferenceComponentSetEntityName()
{
  return MEMORY[0x24BE23E70]();
}

uint64_t REReferenceComponentSetLoadingPolicy()
{
  return MEMORY[0x24BE23E78]();
}

uint64_t REReferenceComponentSetLoadingState()
{
  return MEMORY[0x24BE23E80]();
}

uint64_t REReferenceComponentSetSubscene()
{
  return MEMORY[0x24BE23E88]();
}

uint64_t RERegisterCustomSystem()
{
  return MEMORY[0x24BE23E90]();
}

uint64_t RERegisterSwiftCodableCallbacks()
{
  return MEMORY[0x24BE23E98]();
}

uint64_t RERegisterSwiftCodableComponent()
{
  return MEMORY[0x24BE23EA0]();
}

uint64_t RERelease()
{
  return MEMORY[0x24BE23EA8]();
}

uint64_t RERemoteEffectsComponentGetColorTint()
{
  return MEMORY[0x24BE23EB0]();
}

uint64_t RERemoteEffectsComponentGetComponentType()
{
  return MEMORY[0x24BE23EB8]();
}

uint64_t RERemoteEffectsComponentGetGlowAppearDurationOverride()
{
  return MEMORY[0x24BE23EC0]();
}

uint64_t RERemoteEffectsComponentGetGlowDisappearDurationOverride()
{
  return MEMORY[0x24BE23EC8]();
}

uint64_t RERemoteEffectsComponentGetIntensityMultiplier()
{
  return MEMORY[0x24BE23ED0]();
}

uint64_t RERemoteEffectsComponentGetOpacityFunction()
{
  return MEMORY[0x24BE23ED8]();
}

uint64_t RERemoteEffectsComponentGetStyle()
{
  return MEMORY[0x24BE23EE0]();
}

uint64_t RERemoteEffectsComponentResetGlowAppearDurationOverride()
{
  return MEMORY[0x24BE23EE8]();
}

uint64_t RERemoteEffectsComponentResetGlowDisappearDurationOverride()
{
  return MEMORY[0x24BE23EF0]();
}

uint64_t RERemoteEffectsComponentSetColorTint()
{
  return MEMORY[0x24BE23EF8]();
}

uint64_t RERemoteEffectsComponentSetEnableEntityHoverEffect()
{
  return MEMORY[0x24BE23F00]();
}

uint64_t RERemoteEffectsComponentSetGlowAppearDurationOverride()
{
  return MEMORY[0x24BE23F08]();
}

uint64_t RERemoteEffectsComponentSetGlowDisappearDurationOverride()
{
  return MEMORY[0x24BE23F10]();
}

uint64_t RERemoteEffectsComponentSetIntensityMultiplier()
{
  return MEMORY[0x24BE23F18]();
}

uint64_t RERemoteEffectsComponentSetOpacityFunction()
{
  return MEMORY[0x24BE23F20]();
}

uint64_t RERemoteEffectsComponentSetStyle()
{
  return MEMORY[0x24BE23F28]();
}

uint64_t RERemoteEffectsComponentSetVersion()
{
  return MEMORY[0x24BE23F30]();
}

uint64_t RERenderFrameSettingsAddGpuSignalEvent()
{
  return MEMORY[0x24BE23F68]();
}

uint64_t RERenderFrameSettingsAddGpuWaitEvent()
{
  return MEMORY[0x24BE23F70]();
}

uint64_t RERenderFrameSettingsSetTotalTime()
{
  return MEMORY[0x24BE23F78]();
}

uint64_t RERenderFrameWorkloadAddCompletedHandler()
{
  return MEMORY[0x24BE23F80]();
}

uint64_t RERenderFrameWorkloadAddScheduledHandler()
{
  return MEMORY[0x24BE23F88]();
}

uint64_t RERenderFrameWorkloadCommit()
{
  return MEMORY[0x24BE23F90]();
}

uint64_t RERenderFrameWorkloadCommitWithImmediatePresent()
{
  return MEMORY[0x24BE23F98]();
}

uint64_t RERenderFrameWorkloadConfigure()
{
  return MEMORY[0x24BE23FA0]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingBool()
{
  return MEMORY[0x24BE23FA8]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeStringSetting()
{
  return MEMORY[0x24BE23FB0]();
}

uint64_t RERenderGraphDataStructAddBool()
{
  return MEMORY[0x24BE23FB8]();
}

uint64_t RERenderGraphDataStructAddFloat4()
{
  return MEMORY[0x24BE23FC0]();
}

uint64_t RERenderGraphEmitterAssetExecute()
{
  return MEMORY[0x24BE23FC8]();
}

uint64_t RERenderGraphEmitterAssetRegisterProviders()
{
  return MEMORY[0x24BE23FD0]();
}

uint64_t RERenderGraphEmitterAssetUnregisterProviders()
{
  return MEMORY[0x24BE23FD8]();
}

uint64_t RERenderGraphSimpleForwardEmitterSetDisplayWireframe()
{
  return MEMORY[0x24BE23FE0]();
}

uint64_t RERenderManagerCreateRenderFrameSettings()
{
  return MEMORY[0x24BE23FE8]();
}

uint64_t RERenderManagerCreateRenderFrameWorkload()
{
  return MEMORY[0x24BE23FF0]();
}

uint64_t RERenderManagerGetLayerSize()
{
  return MEMORY[0x24BE24000]();
}

uint64_t RERenderManagerGetRenderCommandQueue()
{
  return MEMORY[0x24BE24010]();
}

uint64_t RERenderManagerGetRenderDevice()
{
  return MEMORY[0x24BE24018]();
}

uint64_t RERenderManagerRegisterRenderLayer()
{
  return MEMORY[0x24BE24030]();
}

uint64_t RERenderManagerSetLayerSize()
{
  return MEMORY[0x24BE24048]();
}

uint64_t RERenderManagerUnregisterRenderLayer()
{
  return MEMORY[0x24BE24070]();
}

uint64_t RERenderManagerWaitUntilScheduled()
{
  return MEMORY[0x24BE24078]();
}

uint64_t RERenderOptionsComponentGetCastsShadowsOverride()
{
  return MEMORY[0x24BE24080]();
}

uint64_t RERenderOptionsComponentGetComponentType()
{
  return MEMORY[0x24BE24088]();
}

uint64_t RERenderOptionsComponentGetVisibilityMode()
{
  return MEMORY[0x24BE24090]();
}

uint64_t RERenderOptionsComponentSetVisibilityMode()
{
  return MEMORY[0x24BE24098]();
}

uint64_t RERetain()
{
  return MEMORY[0x24BE240A0]();
}

uint64_t REReverbComponentGetComponentType()
{
  return MEMORY[0x24BE240A8]();
}

uint64_t REReverbComponentGetReverbPreset()
{
  return MEMORY[0x24BE240B0]();
}

uint64_t REReverbComponentSetPriority()
{
  return MEMORY[0x24BE240B8]();
}

uint64_t REReverbComponentSetReverbPreset()
{
  return MEMORY[0x24BE240C0]();
}

uint64_t REReverbComponentSetReverbPresetWithBlend()
{
  return MEMORY[0x24BE240C8]();
}

uint64_t RERigAssetCreateBipedToBipedAutoRetargetAsset()
{
  return MEMORY[0x24BE240D0]();
}

uint64_t RERigComponentGetComponentType()
{
  return MEMORY[0x24BE240D8]();
}

uint64_t RERigComponentSetRig()
{
  return MEMORY[0x24BE240E0]();
}

uint64_t RERigidBodyApplyLinearImpulse()
{
  return MEMORY[0x24BE240E8]();
}

uint64_t RERigidBodyClearForces()
{
  return MEMORY[0x24BE240F0]();
}

uint64_t RERigidBodyComponentAddUserAngularImpulse()
{
  return MEMORY[0x24BE240F8]();
}

uint64_t RERigidBodyComponentAddUserForce()
{
  return MEMORY[0x24BE24100]();
}

uint64_t RERigidBodyComponentAddUserLinearImpulse()
{
  return MEMORY[0x24BE24108]();
}

uint64_t RERigidBodyComponentAddUserTorque()
{
  return MEMORY[0x24BE24110]();
}

uint64_t RERigidBodyComponentGetAngularDamping()
{
  return MEMORY[0x24BE24118]();
}

uint64_t RERigidBodyComponentGetCCDEnabled()
{
  return MEMORY[0x24BE24120]();
}

uint64_t RERigidBodyComponentGetComponentType()
{
  return MEMORY[0x24BE24128]();
}

uint64_t RERigidBodyComponentGetGravityEnabled()
{
  return MEMORY[0x24BE24130]();
}

uint64_t RERigidBodyComponentGetLinearDamping()
{
  return MEMORY[0x24BE24138]();
}

uint64_t RERigidBodyComponentGetLockRotationX()
{
  return MEMORY[0x24BE24140]();
}

uint64_t RERigidBodyComponentGetLockRotationY()
{
  return MEMORY[0x24BE24148]();
}

uint64_t RERigidBodyComponentGetLockRotationZ()
{
  return MEMORY[0x24BE24150]();
}

uint64_t RERigidBodyComponentGetLockTranslationX()
{
  return MEMORY[0x24BE24158]();
}

uint64_t RERigidBodyComponentGetLockTranslationY()
{
  return MEMORY[0x24BE24160]();
}

uint64_t RERigidBodyComponentGetLockTranslationZ()
{
  return MEMORY[0x24BE24168]();
}

uint64_t RERigidBodyComponentGetMassFrame()
{
  return MEMORY[0x24BE24170]();
}

uint64_t RERigidBodyComponentGetMaterial()
{
  return MEMORY[0x24BE24178]();
}

uint64_t RERigidBodyComponentGetMotionType()
{
  return MEMORY[0x24BE24180]();
}

uint64_t RERigidBodyComponentGetRigidBody()
{
  return MEMORY[0x24BE24188]();
}

uint64_t RERigidBodyComponentIncrementVersion()
{
  return MEMORY[0x24BE24190]();
}

uint64_t RERigidBodyComponentSetAngularDamping()
{
  return MEMORY[0x24BE24198]();
}

uint64_t RERigidBodyComponentSetCCDEnabled()
{
  return MEMORY[0x24BE241A0]();
}

uint64_t RERigidBodyComponentSetCCDVelocityThreshold()
{
  return MEMORY[0x24BE241A8]();
}

uint64_t RERigidBodyComponentSetCanSleep()
{
  return MEMORY[0x24BE241B0]();
}

uint64_t RERigidBodyComponentSetGravityEnabled()
{
  return MEMORY[0x24BE241B8]();
}

uint64_t RERigidBodyComponentSetLinearDamping()
{
  return MEMORY[0x24BE241C0]();
}

uint64_t RERigidBodyComponentSetLockRotationX()
{
  return MEMORY[0x24BE241C8]();
}

uint64_t RERigidBodyComponentSetLockRotationY()
{
  return MEMORY[0x24BE241D0]();
}

uint64_t RERigidBodyComponentSetLockRotationZ()
{
  return MEMORY[0x24BE241D8]();
}

uint64_t RERigidBodyComponentSetLockTranslationX()
{
  return MEMORY[0x24BE241E0]();
}

uint64_t RERigidBodyComponentSetLockTranslationY()
{
  return MEMORY[0x24BE241E8]();
}

uint64_t RERigidBodyComponentSetLockTranslationZ()
{
  return MEMORY[0x24BE241F0]();
}

uint64_t RERigidBodyComponentSetMassFrame()
{
  return MEMORY[0x24BE241F8]();
}

uint64_t RERigidBodyComponentSetMaterial()
{
  return MEMORY[0x24BE24200]();
}

uint64_t RERigidBodyComponentSetMotionType()
{
  return MEMORY[0x24BE24208]();
}

uint64_t RERigidBodyComponentTeleport()
{
  return MEMORY[0x24BE24210]();
}

uint64_t RERigidBodyGetEntity()
{
  return MEMORY[0x24BE24218]();
}

uint64_t RERigidBodyGetMassFrame()
{
  return MEMORY[0x24BE24220]();
}

uint64_t RERigidBodySleep()
{
  return MEMORY[0x24BE24228]();
}

uint64_t RERigidBodyWakeUp()
{
  return MEMORY[0x24BE24230]();
}

uint64_t RESRTIdentity()
{
  return MEMORY[0x24BE24238]();
}

uint64_t RESRTInverse()
{
  return MEMORY[0x24BE24240]();
}

uint64_t RESRTLerp()
{
  return MEMORY[0x24BE24248]();
}

uint64_t RESRTMatrix()
{
  return MEMORY[0x24BE24250]();
}

uint64_t RESampledAnimationDefaultParameters()
{
  return MEMORY[0x24BE24258]();
}

uint64_t RESceneAddDefaultSystems()
{
  return MEMORY[0x24BE24260]();
}

uint64_t RESceneAddEDRColorManagementComponent()
{
  return MEMORY[0x24BE24268]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x24BE24270]();
}

uint64_t RESceneCompatibilityVariantGetFileName()
{
  return MEMORY[0x24BE24280]();
}

uint64_t RESceneCompatibilityVariantGetVersion()
{
  return MEMORY[0x24BE24288]();
}

uint64_t RESceneCreate()
{
  return MEMORY[0x24BE24290]();
}

uint64_t RESceneDereferenceComponentCollectionPosition()
{
  return MEMORY[0x24BE24298]();
}

uint64_t RESceneDescriptorAddSceneCompatibilityVariant()
{
  return MEMORY[0x24BE242A0]();
}

uint64_t RESceneDescriptorCreateFromParams()
{
  return MEMORY[0x24BE242A8]();
}

uint64_t RESceneDescriptorGetSceneCompatibilityVariantAtIndex()
{
  return MEMORY[0x24BE242B0]();
}

uint64_t RESceneDescriptorGetSceneCompatibilityVariantCount()
{
  return MEMORY[0x24BE242B8]();
}

uint64_t RESceneDescriptorGetSceneIdentifier()
{
  return MEMORY[0x24BE242C0]();
}

uint64_t RESceneDescriptorGetSceneName()
{
  return MEMORY[0x24BE242C8]();
}

uint64_t RESceneDescriptorIsEqual()
{
  return MEMORY[0x24BE242D0]();
}

uint64_t RESceneFindEntity()
{
  return MEMORY[0x24BE242D8]();
}

uint64_t RESceneFindEntityByName()
{
  return MEMORY[0x24BE242E0]();
}

uint64_t RESceneFindFirstCameraComponent()
{
  return MEMORY[0x24BE242E8]();
}

uint64_t RESceneGetAllEntitiesArray()
{
  return MEMORY[0x24BE242F0]();
}

uint64_t RESceneGetComponentsOfClass()
{
  return MEMORY[0x24BE242F8]();
}

uint64_t RESceneGetComponentsOfCustomType()
{
  return MEMORY[0x24BE24300]();
}

uint64_t RESceneGetComponentsOfType()
{
  return MEMORY[0x24BE24308]();
}

uint64_t RESceneGetECSManagerNullable()
{
  return MEMORY[0x24BE24310]();
}

uint64_t RESceneGetEntitiesArray()
{
  return MEMORY[0x24BE24318]();
}

uint64_t RESceneGetEntityIndexInParent()
{
  return MEMORY[0x24BE24320]();
}

uint64_t RESceneGetEventBus()
{
  return MEMORY[0x24BE24328]();
}

uint64_t RESceneGetName()
{
  return MEMORY[0x24BE24338]();
}

uint64_t RESceneGetSwiftObject()
{
  return MEMORY[0x24BE24340]();
}

uint64_t RESceneImportGetUSDActionAssets()
{
  return MEMORY[0x24BE24350]();
}

uint64_t RESceneImportOperationCopySceneIdentifierAtIndex()
{
  return MEMORY[0x24BE24358]();
}

uint64_t RESceneImportOperationCopySceneNameAtIndex()
{
  return MEMORY[0x24BE24360]();
}

uint64_t RESceneImportOperationCopySourceURL()
{
  return MEMORY[0x24BE24368]();
}

uint64_t RESceneImportOperationCreateWithBundleResource()
{
  return MEMORY[0x24BE24370]();
}

uint64_t RESceneImportOperationCreateWithURL()
{
  return MEMORY[0x24BE24378]();
}

uint64_t RESceneImportOperationGetSceneAsset()
{
  return MEMORY[0x24BE24380]();
}

uint64_t RESceneImportOperationGetSceneAssetAtIndex()
{
  return MEMORY[0x24BE24388]();
}

uint64_t RESceneImportOperationGetSceneCount()
{
  return MEMORY[0x24BE24390]();
}

uint64_t RESceneImportOperationGetServiceLocator()
{
  return MEMORY[0x24BE24398]();
}

uint64_t RESceneImportOperationIsSceneActiveAtIndex()
{
  return MEMORY[0x24BE243A0]();
}

uint64_t RESceneImportOperationSetGenerateDecimatedMesh()
{
  return MEMORY[0x24BE243C8]();
}

uint64_t RESceneImportOperationSetIsolateFromEngine()
{
  return MEMORY[0x24BE243D0]();
}

uint64_t RESceneImportOperationSetMergeIntoSingleEntity()
{
  return MEMORY[0x24BE243E0]();
}

uint64_t RESceneImportOperationSetRootSceneAssetPath()
{
  return MEMORY[0x24BE243F8]();
}

uint64_t RESceneImportOperationSetSceneCreateCompletionHandler()
{
  return MEMORY[0x24BE24400]();
}

uint64_t RESceneImportOperationSetUnitType()
{
  return MEMORY[0x24BE24408]();
}

uint64_t RESceneImportOperationSetVertexCacheOptimize()
{
  return MEMORY[0x24BE24410]();
}

uint64_t RESceneIsFromActiveRealityRendererSceneGroup()
{
  return MEMORY[0x24BE24418]();
}

uint64_t RESceneLoadFromAsset()
{
  return MEMORY[0x24BE24420]();
}

uint64_t RESceneRemoveEDRColorManagementComponent()
{
  return MEMORY[0x24BE24428]();
}

uint64_t RESceneRemoveEntity()
{
  return MEMORY[0x24BE24430]();
}

uint64_t RESceneSetEntityAtIndex()
{
  return MEMORY[0x24BE24448]();
}

uint64_t RESceneSetRealityRendererSceneGroup()
{
  return MEMORY[0x24BE24450]();
}

uint64_t RESceneSetRequiresAnchoring()
{
  return MEMORY[0x24BE24458]();
}

uint64_t RESceneSetSwiftObject()
{
  return MEMORY[0x24BE24460]();
}

uint64_t RESceneSpaceRootComponentFindComponentInHierarchy()
{
  return MEMORY[0x24BE24468]();
}

uint64_t RESceneSpaceRootComponentGetIsImmersiveSpaceOpen()
{
  return MEMORY[0x24BE24470]();
}

uint64_t RESceneSpaceRootComponentGetIsSelfInImmersiveSpace()
{
  return MEMORY[0x24BE24478]();
}

uint64_t RESceneSpaceRootComponentGetSceneToImmersiveTransform()
{
  return MEMORY[0x24BE24480]();
}

uint64_t RESceneUnderstandingComponentGetComponentType()
{
  return MEMORY[0x24BE24488]();
}

uint64_t RESceneUnderstandingComponentGetSourceType()
{
  return MEMORY[0x24BE24498]();
}

uint64_t RESceneUnderstandingComponentIsEntityType()
{
  return MEMORY[0x24BE244A0]();
}

uint64_t RESceneUnderstandingComponentSetEntityType()
{
  return MEMORY[0x24BE244A8]();
}

uint64_t RESceneUnderstandingRenderOptionsComponentGetComponentType()
{
  return MEMORY[0x24BE244B8]();
}

uint64_t RESceneUnderstandingRootComponentGetComponentType()
{
  return MEMORY[0x24BE244F0]();
}

uint64_t RESerializedMaterialParameterHandleCreate()
{
  return MEMORY[0x24BE24510]();
}

uint64_t RESerializedMaterialParameterHandleGetKey()
{
  return MEMORY[0x24BE24518]();
}

uint64_t RESerializedMaterialParameterHandleGetKeyUnownedCString()
{
  return MEMORY[0x24BE24520]();
}

uint64_t REServiceLocatorGetAnimationManager()
{
  return MEMORY[0x24BE24528]();
}

uint64_t REServiceLocatorGetAssetManager()
{
  return MEMORY[0x24BE24530]();
}

uint64_t REServiceLocatorGetAudioSceneService()
{
  return MEMORY[0x24BE24538]();
}

uint64_t REServiceLocatorGetAudioService()
{
  return MEMORY[0x24BE24540]();
}

uint64_t REServiceLocatorGetDirectResourceService()
{
  return MEMORY[0x24BE24550]();
}

uint64_t REServiceLocatorGetECSService()
{
  return MEMORY[0x24BE24558]();
}

uint64_t REServiceLocatorGetEngine()
{
  return MEMORY[0x24BE24560]();
}

uint64_t REServiceLocatorGetEventBus()
{
  return MEMORY[0x24BE24568]();
}

uint64_t REServiceLocatorGetMaterialParametersService()
{
  return MEMORY[0x24BE24570]();
}

uint64_t REServiceLocatorGetNetworkSystem()
{
  return MEMORY[0x24BE24578]();
}

uint64_t REServiceLocatorGetOpacityService()
{
  return MEMORY[0x24BE24580]();
}

uint64_t REServiceLocatorGetPhysicsSimulationService()
{
  return MEMORY[0x24BE24588]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x24BE24598]();
}

uint64_t REServiceLocatorGetResourceSharingService()
{
  return MEMORY[0x24BE245A0]();
}

uint64_t REServiceLocatorGetSwiftObject()
{
  return MEMORY[0x24BE245B8]();
}

uint64_t REServiceLocatorGetTimebaseService()
{
  return MEMORY[0x24BE245C0]();
}

uint64_t REServiceLocatorSetSwiftObject()
{
  return MEMORY[0x24BE245C8]();
}

uint64_t REShaderLibraryAssetGetMetalLibrary()
{
  return MEMORY[0x24BE245D0]();
}

uint64_t REShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE24600]();
}

uint64_t REShadowsGetEnableDefaultShadows()
{
  return MEMORY[0x24BE24618]();
}

uint64_t RESignpostEmitREAssetEntityLoadEndedImpulse()
{
  return MEMORY[0x24BE24620]();
}

uint64_t RESignpostEmitREAssetEntityLoadStartedImpulse()
{
  return MEMORY[0x24BE24628]();
}

uint64_t RESkeletalPoseComponentCanAccessPostUpdatePoses()
{
  return MEMORY[0x24BE24630]();
}

uint64_t RESkeletalPoseComponentEnsureSkeletalPosesInitialized()
{
  return MEMORY[0x24BE24638]();
}

uint64_t RESkeletalPoseComponentGetComponentType()
{
  return MEMORY[0x24BE24640]();
}

uint64_t RESkeletalPoseComponentGetJointCount()
{
  return MEMORY[0x24BE24648]();
}

uint64_t RESkeletalPoseComponentGetJointName()
{
  return MEMORY[0x24BE24650]();
}

uint64_t RESkeletalPoseComponentGetJointTransforms()
{
  return MEMORY[0x24BE24658]();
}

uint64_t RESkeletalPoseComponentGetModelSpaceJointCount()
{
  return MEMORY[0x24BE24660]();
}

uint64_t RESkeletalPoseComponentGetModelSpaceJointName()
{
  return MEMORY[0x24BE24668]();
}

uint64_t RESkeletalPoseComponentGetPoseName()
{
  return MEMORY[0x24BE24670]();
}

uint64_t RESkeletalPoseComponentGetPostUpdatePoseJoints()
{
  return MEMORY[0x24BE24678]();
}

uint64_t RESkeletalPoseComponentGetSkeletalPoseDefinition()
{
  return MEMORY[0x24BE24680]();
}

uint64_t RESkeletalPoseComponentGetSkeletonCount()
{
  return MEMORY[0x24BE24688]();
}

uint64_t RESkeletalPoseComponentPostUpdatePoseCount()
{
  return MEMORY[0x24BE24690]();
}

uint64_t RESkeletalPoseComponentPostUpdatePoseJointCount()
{
  return MEMORY[0x24BE24698]();
}

uint64_t RESkeletalPoseComponentSetJointTransform()
{
  return MEMORY[0x24BE246A0]();
}

uint64_t RESkeletalPoseComponentSetJointTransforms()
{
  return MEMORY[0x24BE246A8]();
}

uint64_t RESkeletalPoseComponentSetModelSpaceJointTransforms()
{
  return MEMORY[0x24BE246B0]();
}

uint64_t RESkeletalPoseComponentSetPoseName()
{
  return MEMORY[0x24BE246B8]();
}

uint64_t RESkeletalPoseComponentSetPostUpdatePoseJoints()
{
  return MEMORY[0x24BE246C0]();
}

uint64_t RESkeletalPoseComponentSetSkeletalPoseDefinition()
{
  return MEMORY[0x24BE246C8]();
}

uint64_t RESkeletalPoseDefinitionAssetCreateAssetForMesh()
{
  return MEMORY[0x24BE246D0]();
}

uint64_t RESkeletalPoseDefinitionAssetCreateAssetWithDefinitionsEx()
{
  return MEMORY[0x24BE246D8]();
}

uint64_t RESkeletalPoseDefinitionAssetGetJointCount()
{
  return MEMORY[0x24BE246E0]();
}

uint64_t RESkeletalPoseDefinitionAssetGetJointDefaultTransform()
{
  return MEMORY[0x24BE246E8]();
}

uint64_t RESkeletalPoseDefinitionAssetGetJointName()
{
  return MEMORY[0x24BE246F0]();
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpaceJointCount()
{
  return MEMORY[0x24BE246F8]();
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpaceJointDefaultTransform()
{
  return MEMORY[0x24BE24700]();
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpaceJointName()
{
  return MEMORY[0x24BE24708]();
}

uint64_t RESkeletalPoseDefinitionAssetGetModelSpacePoseCount()
{
  return MEMORY[0x24BE24710]();
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseCount()
{
  return MEMORY[0x24BE24718]();
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseMeshMapCountEx()
{
  return MEMORY[0x24BE24720]();
}

uint64_t RESkeletalPoseDefinitionAssetGetPoseMeshMapEx()
{
  return MEMORY[0x24BE24728]();
}

uint64_t RESkeletonAssetGetJointCount()
{
  return MEMORY[0x24BE24730]();
}

uint64_t RESkeletonAssetGetJointLocalRestTransform()
{
  return MEMORY[0x24BE24738]();
}

uint64_t RESkeletonAssetGetJointName()
{
  return MEMORY[0x24BE24740]();
}

uint64_t RESkeletonAssetGetJointParentIndex()
{
  return MEMORY[0x24BE24748]();
}

uint64_t RESkeletonAssetGetName()
{
  return MEMORY[0x24BE24750]();
}

uint64_t RESkeletonDefinitionCreate()
{
  return MEMORY[0x24BE24758]();
}

uint64_t RESkeletonDefinitionCreateGeomSkeletonV2()
{
  return MEMORY[0x24BE24768]();
}

uint64_t RESkeletonDefinitionCreateSkeletonAsset()
{
  return MEMORY[0x24BE24770]();
}

uint64_t RESkeletonDefinitionGetLocalRestPoses()
{
  return MEMORY[0x24BE24778]();
}

uint64_t RESkeletonDefinitionGetParentIndices()
{
  return MEMORY[0x24BE24780]();
}

uint64_t RESkeletonDefinitionSetInverseBindPoses()
{
  return MEMORY[0x24BE24788]();
}

uint64_t RESkeletonDefinitionSetJointCount()
{
  return MEMORY[0x24BE24790]();
}

uint64_t RESkeletonDefinitionSetJointName()
{
  return MEMORY[0x24BE24798]();
}

uint64_t RESkeletonDefinitionSetLocalRestPoses()
{
  return MEMORY[0x24BE247A8]();
}

uint64_t RESkeletonDefinitionSetName()
{
  return MEMORY[0x24BE247B0]();
}

uint64_t RESkeletonDefinitionSetParentIndices()
{
  return MEMORY[0x24BE247B8]();
}

uint64_t RESkeletonDefinitionValidate()
{
  return MEMORY[0x24BE247C0]();
}

uint64_t RESkyboxComponentGetComponentType()
{
  return MEMORY[0x24BE247C8]();
}

uint64_t RESkyboxComponentGetMaterial()
{
  return MEMORY[0x24BE247D0]();
}

uint64_t RESkyboxComponentSetMaterial()
{
  return MEMORY[0x24BE247D8]();
}

uint64_t RESpatialAudioComponentGetComponentType()
{
  return MEMORY[0x24BE247E0]();
}

uint64_t RESpatialAudioComponentGetDecibelGain()
{
  return MEMORY[0x24BE247E8]();
}

uint64_t RESpatialAudioComponentGetDirectSendLevel()
{
  return MEMORY[0x24BE247F0]();
}

uint64_t RESpatialAudioComponentGetDirectivityFocus()
{
  return MEMORY[0x24BE247F8]();
}

uint64_t RESpatialAudioComponentGetDirectivitySphericalCapDiameter()
{
  return MEMORY[0x24BE24800]();
}

uint64_t RESpatialAudioComponentGetDirectivitySphericalCapOpeningAngle()
{
  return MEMORY[0x24BE24808]();
}

uint64_t RESpatialAudioComponentGetReverbSendLevel()
{
  return MEMORY[0x24BE24810]();
}

uint64_t RESpatialAudioComponentGetRolloffFactor()
{
  return MEMORY[0x24BE24818]();
}

uint64_t RESpatialAudioComponentGetSourceDirectivityMode()
{
  return MEMORY[0x24BE24820]();
}

uint64_t RESpatialAudioComponentSetDecibelGain()
{
  return MEMORY[0x24BE24828]();
}

uint64_t RESpatialAudioComponentSetDirectSendLevel()
{
  return MEMORY[0x24BE24830]();
}

uint64_t RESpatialAudioComponentSetDirectivityFocus()
{
  return MEMORY[0x24BE24838]();
}

uint64_t RESpatialAudioComponentSetDirectivitySphericalCap()
{
  return MEMORY[0x24BE24840]();
}

uint64_t RESpatialAudioComponentSetReverbSendLevel()
{
  return MEMORY[0x24BE24848]();
}

uint64_t RESpatialAudioComponentSetRolloffFactor()
{
  return MEMORY[0x24BE24850]();
}

uint64_t RESpatialAudioComponentSetSourceDirectivityMode()
{
  return MEMORY[0x24BE24858]();
}

uint64_t RESphereShapeCreate()
{
  return MEMORY[0x24BE24860]();
}

uint64_t RESphereShapeGetRadius()
{
  return MEMORY[0x24BE24868]();
}

uint64_t RESpotLightComponentGetAttenuationFalloffExponent()
{
  return MEMORY[0x24BE24870]();
}

uint64_t RESpotLightComponentGetAttenuationRadius()
{
  return MEMORY[0x24BE24878]();
}

uint64_t RESpotLightComponentGetColorGamut3F()
{
  return MEMORY[0x24BE24880]();
}

uint64_t RESpotLightComponentGetComponentType()
{
  return MEMORY[0x24BE24888]();
}

uint64_t RESpotLightComponentGetInnerAngle()
{
  return MEMORY[0x24BE24890]();
}

uint64_t RESpotLightComponentGetIntensity()
{
  return MEMORY[0x24BE24898]();
}

uint64_t RESpotLightComponentGetOuterAngle()
{
  return MEMORY[0x24BE248A0]();
}

uint64_t RESpotLightComponentSetAttenuationFalloffExponent()
{
  return MEMORY[0x24BE248A8]();
}

uint64_t RESpotLightComponentSetAttenuationRadius()
{
  return MEMORY[0x24BE248B0]();
}

uint64_t RESpotLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE248B8]();
}

uint64_t RESpotLightComponentSetInnerAngle()
{
  return MEMORY[0x24BE248C0]();
}

uint64_t RESpotLightComponentSetIntensity()
{
  return MEMORY[0x24BE248C8]();
}

uint64_t RESpotLightComponentSetOuterAngle()
{
  return MEMORY[0x24BE248D0]();
}

uint64_t RESpotLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE248D8]();
}

uint64_t RESpotLightShadowMapComponentGetCullModeEx()
{
  return MEMORY[0x24BE248E0]();
}

uint64_t RESpotLightShadowMapComponentGetDepthBias()
{
  return MEMORY[0x24BE248E8]();
}

uint64_t RESpotLightShadowMapComponentGetZFar()
{
  return MEMORY[0x24BE248F0]();
}

uint64_t RESpotLightShadowMapComponentGetZNear()
{
  return MEMORY[0x24BE248F8]();
}

uint64_t RESpotLightShadowMapComponentSetCullMode()
{
  return MEMORY[0x24BE24900]();
}

uint64_t RESpotLightShadowMapComponentSetDepthBias()
{
  return MEMORY[0x24BE24908]();
}

uint64_t RESpotLightShadowMapComponentSetZFar()
{
  return MEMORY[0x24BE24910]();
}

uint64_t RESpotLightShadowMapComponentSetZNear()
{
  return MEMORY[0x24BE24918]();
}

uint64_t REStateMachineAssetBoolConditionCreate()
{
  return MEMORY[0x24BE24920]();
}

uint64_t REStateMachineAssetCommandAddParameterBool()
{
  return MEMORY[0x24BE24928]();
}

uint64_t REStateMachineAssetCommandAddParameterDouble()
{
  return MEMORY[0x24BE24930]();
}

uint64_t REStateMachineAssetCommandAddParameterFloat()
{
  return MEMORY[0x24BE24938]();
}

uint64_t REStateMachineAssetCommandAddParameterInt()
{
  return MEMORY[0x24BE24940]();
}

uint64_t REStateMachineAssetCommandAddParameterString()
{
  return MEMORY[0x24BE24948]();
}

uint64_t REStateMachineAssetCommandCreate()
{
  return MEMORY[0x24BE24950]();
}

uint64_t REStateMachineAssetCommandGetEntityBindTarget()
{
  return MEMORY[0x24BE24958]();
}

uint64_t REStateMachineAssetCommandGetParameterBool()
{
  return MEMORY[0x24BE24960]();
}

uint64_t REStateMachineAssetCommandGetParameterCount()
{
  return MEMORY[0x24BE24968]();
}

uint64_t REStateMachineAssetCommandGetParameterDouble()
{
  return MEMORY[0x24BE24970]();
}

uint64_t REStateMachineAssetCommandGetParameterFloat()
{
  return MEMORY[0x24BE24978]();
}

uint64_t REStateMachineAssetCommandGetParameterInt()
{
  return MEMORY[0x24BE24980]();
}

uint64_t REStateMachineAssetCommandGetParameterNameAtIndex()
{
  return MEMORY[0x24BE24988]();
}

uint64_t REStateMachineAssetCommandGetParameterStringAsChars()
{
  return MEMORY[0x24BE24990]();
}

uint64_t REStateMachineAssetCommandGetType()
{
  return MEMORY[0x24BE24998]();
}

uint64_t REStateMachineAssetFloatConditionCreate()
{
  return MEMORY[0x24BE249A0]();
}

uint64_t REStateMachineAssetGetAnyState()
{
  return MEMORY[0x24BE249A8]();
}

uint64_t REStateMachineAssetGetInitialStateName()
{
  return MEMORY[0x24BE249B0]();
}

uint64_t REStateMachineAssetGetStateAtIndex()
{
  return MEMORY[0x24BE249B8]();
}

uint64_t REStateMachineAssetGetStateCount()
{
  return MEMORY[0x24BE249C0]();
}

uint64_t REStateMachineAssetIntConditionCreate()
{
  return MEMORY[0x24BE249C8]();
}

uint64_t REStateMachineAssetSingleGraphCreate()
{
  return MEMORY[0x24BE249D0]();
}

uint64_t REStateMachineAssetStateAddCommand()
{
  return MEMORY[0x24BE249D8]();
}

uint64_t REStateMachineAssetStateAddTransition()
{
  return MEMORY[0x24BE249E0]();
}

uint64_t REStateMachineAssetStateCreate()
{
  return MEMORY[0x24BE249E8]();
}

uint64_t REStateMachineAssetStateGetCommandAtIndex()
{
  return MEMORY[0x24BE249F0]();
}

uint64_t REStateMachineAssetStateGetCommandCount()
{
  return MEMORY[0x24BE249F8]();
}

uint64_t REStateMachineAssetStateGetExitTime()
{
  return MEMORY[0x24BE24A00]();
}

uint64_t REStateMachineAssetStateGetName()
{
  return MEMORY[0x24BE24A08]();
}

uint64_t REStateMachineAssetStateGetTransitionAtIndex()
{
  return MEMORY[0x24BE24A10]();
}

uint64_t REStateMachineAssetStateGetTransitionCount()
{
  return MEMORY[0x24BE24A18]();
}

uint64_t REStateMachineAssetStateGraphAddState()
{
  return MEMORY[0x24BE24A20]();
}

uint64_t REStateMachineAssetStateGraphCreate()
{
  return MEMORY[0x24BE24A28]();
}

uint64_t REStateMachineAssetStateSetExitTime()
{
  return MEMORY[0x24BE24A30]();
}

uint64_t REStateMachineAssetTransitionAddCondition()
{
  return MEMORY[0x24BE24A38]();
}

uint64_t REStateMachineAssetTransitionConditionGetConditionOperator()
{
  return MEMORY[0x24BE24A40]();
}

uint64_t REStateMachineAssetTransitionConditionGetConstantBool()
{
  return MEMORY[0x24BE24A48]();
}

uint64_t REStateMachineAssetTransitionConditionGetConstantFloat()
{
  return MEMORY[0x24BE24A50]();
}

uint64_t REStateMachineAssetTransitionConditionGetConstantInt()
{
  return MEMORY[0x24BE24A58]();
}

uint64_t REStateMachineAssetTransitionConditionGetParameterName()
{
  return MEMORY[0x24BE24A60]();
}

uint64_t REStateMachineAssetTransitionConditionGetParameterType()
{
  return MEMORY[0x24BE24A68]();
}

uint64_t REStateMachineAssetTransitionConditionGetType()
{
  return MEMORY[0x24BE24A70]();
}

uint64_t REStateMachineAssetTransitionCreate()
{
  return MEMORY[0x24BE24A78]();
}

uint64_t REStateMachineAssetTransitionGetConditionAtIndex()
{
  return MEMORY[0x24BE24A80]();
}

uint64_t REStateMachineAssetTransitionGetConditionCount()
{
  return MEMORY[0x24BE24A88]();
}

uint64_t REStateMachineAssetTransitionGetInterruptionType()
{
  return MEMORY[0x24BE24A90]();
}

uint64_t REStateMachineAssetTransitionGetName()
{
  return MEMORY[0x24BE24A98]();
}

uint64_t REStateMachineAssetTransitionGetToStateName()
{
  return MEMORY[0x24BE24AA0]();
}

uint64_t REStateMachineAssetTransitionGetTransitionTime()
{
  return MEMORY[0x24BE24AA8]();
}

uint64_t REStateMachineAssetTriggerConditionCreate()
{
  return MEMORY[0x24BE24AB0]();
}

uint64_t REStateMachineComponentAddBoundParameter()
{
  return MEMORY[0x24BE24AB8]();
}

uint64_t REStateMachineComponentAssignAsset()
{
  return MEMORY[0x24BE24AC0]();
}

uint64_t REStateMachineComponentGetBoundParameterBindTargetAtIndex()
{
  return MEMORY[0x24BE24AC8]();
}

uint64_t REStateMachineComponentGetBoundParameterCount()
{
  return MEMORY[0x24BE24AD0]();
}

uint64_t REStateMachineComponentGetBoundParameterIndexAtName()
{
  return MEMORY[0x24BE24AD8]();
}

uint64_t REStateMachineComponentGetBoundParameterNameAtIndex()
{
  return MEMORY[0x24BE24AE0]();
}

uint64_t REStateMachineComponentGetBoundParameterTypeAtIndex()
{
  return MEMORY[0x24BE24AE8]();
}

uint64_t REStateMachineComponentGetComponentType()
{
  return MEMORY[0x24BE24AF0]();
}

uint64_t REStateMachineComponentGetCurrentStateName()
{
  return MEMORY[0x24BE24AF8]();
}

uint64_t REStateMachineComponentGetStateMachineAsset()
{
  return MEMORY[0x24BE24B10]();
}

uint64_t REStateMachineComponentHasBoundParameterAtName()
{
  return MEMORY[0x24BE24B18]();
}

uint64_t REStateMachineComponentRemoveAllBoundParameters()
{
  return MEMORY[0x24BE24B20]();
}

uint64_t REStateMachineComponentRemoveBoundParameterAtName()
{
  return MEMORY[0x24BE24B28]();
}

uint64_t REStateMachineComponentSetBoundParameterBindTargetAtIndex()
{
  return MEMORY[0x24BE24B30]();
}

uint64_t REStatic3DTextComponentGetComponentType()
{
  return MEMORY[0x24BE24B38]();
}

uint64_t REStatic3DTextComponentGetExtrusionDepth()
{
  return MEMORY[0x24BE24B40]();
}

uint64_t REStatic3DTextComponentGetFont()
{
  return MEMORY[0x24BE24B48]();
}

uint64_t REStatic3DTextComponentGetFontSize()
{
  return MEMORY[0x24BE24B50]();
}

uint64_t REStatic3DTextComponentGetLineBreakMode()
{
  return MEMORY[0x24BE24B58]();
}

uint64_t REStatic3DTextComponentGetSegmentDensity()
{
  return MEMORY[0x24BE24B60]();
}

uint64_t REStatic3DTextComponentGetText()
{
  return MEMORY[0x24BE24B68]();
}

uint64_t REStatic3DTextComponentGetTextAlignment()
{
  return MEMORY[0x24BE24B70]();
}

uint64_t REStatic3DTextComponentGetTextFrameOrigin()
{
  return MEMORY[0x24BE24B78]();
}

uint64_t REStatic3DTextComponentGetTextFrameSize()
{
  return MEMORY[0x24BE24B80]();
}

uint64_t REStatic3DTextComponentGetVerticalTextAlignment()
{
  return MEMORY[0x24BE24B88]();
}

uint64_t REStructBuilderAddMemberArrayWithCountDataTypeWithTag()
{
  return MEMORY[0x24BE24BE8]();
}

uint64_t REStructBuilderAddMemberCStyleArrayDataTypeWithTag()
{
  return MEMORY[0x24BE24BF0]();
}

uint64_t REStructBuilderAddMemberDataTypeWithTag()
{
  return MEMORY[0x24BE24BF8]();
}

uint64_t REStructBuilderCreate()
{
  return MEMORY[0x24BE24C08]();
}

uint64_t REStructBuilderDestroy()
{
  return MEMORY[0x24BE24C10]();
}

uint64_t REStructBuilderInit()
{
  return MEMORY[0x24BE24C18]();
}

uint64_t RETextComponentGetAttributedString()
{
  return MEMORY[0x24BE24C28]();
}

uint64_t RETextComponentGetBackgroundColor()
{
  return MEMORY[0x24BE24C30]();
}

uint64_t RETextComponentGetComponentType()
{
  return MEMORY[0x24BE24C38]();
}

uint64_t RETextComponentGetCornerRadius()
{
  return MEMORY[0x24BE24C40]();
}

uint64_t RETextComponentGetEdgeInsets()
{
  return MEMORY[0x24BE24C48]();
}

uint64_t RETextComponentGetSize()
{
  return MEMORY[0x24BE24C50]();
}

uint64_t RETextComponentSetAttributedString()
{
  return MEMORY[0x24BE24C58]();
}

uint64_t RETextComponentSetBackgroundColor()
{
  return MEMORY[0x24BE24C60]();
}

uint64_t RETextComponentSetCornerRadius()
{
  return MEMORY[0x24BE24C68]();
}

uint64_t RETextComponentSetEdgeInsets()
{
  return MEMORY[0x24BE24C70]();
}

uint64_t RETextComponentSetRenderBlock()
{
  return MEMORY[0x24BE24C78]();
}

uint64_t RETextComponentSetSize()
{
  return MEMORY[0x24BE24C80]();
}

uint64_t RETextureAssetCopyToDestination()
{
  return MEMORY[0x24BE24C88]();
}

uint64_t RETextureAssetCreateCompressedTextureAssetData()
{
  return MEMORY[0x24BE24C90]();
}

uint64_t RETextureAssetDataCreateWithTexture()
{
  return MEMORY[0x24BE24C98]();
}

uint64_t RETextureAssetDataGetPixelFormat()
{
  return MEMORY[0x24BE24CA0]();
}

uint64_t RETextureAssetDataGetTextureType()
{
  return MEMORY[0x24BE24CA8]();
}

uint64_t RETextureAssetGetArrayLength()
{
  return MEMORY[0x24BE24CB0]();
}

uint64_t RETextureAssetGetDimensions()
{
  return MEMORY[0x24BE24CB8]();
}

uint64_t RETextureAssetGetMipmapLevelCount()
{
  return MEMORY[0x24BE24CC0]();
}

uint64_t RETextureAssetGetPixelFormat()
{
  return MEMORY[0x24BE24CC8]();
}

uint64_t RETextureAssetGetSemantic()
{
  return MEMORY[0x24BE24CD0]();
}

uint64_t RETextureAssetGetSize()
{
  return MEMORY[0x24BE24CD8]();
}

uint64_t RETextureAssetGetTextureType()
{
  return MEMORY[0x24BE24CE0]();
}

uint64_t RETextureAssetMakeMutableAndReplaceWithData()
{
  return MEMORY[0x24BE24CE8]();
}

uint64_t RETextureAssetRemoveDrawableQueue()
{
  return MEMORY[0x24BE24CF0]();
}

uint64_t RETextureAssetReplaceAllWithDirectTexture()
{
  return MEMORY[0x24BE24CF8]();
}

uint64_t RETextureAssetReplaceDrawableQueue()
{
  return MEMORY[0x24BE24D00]();
}

uint64_t RETextureBuilderCreateAssetAsync()
{
  return MEMORY[0x24BE24D08]();
}

uint64_t RETextureBuilderCreateAssetSync()
{
  return MEMORY[0x24BE24D10]();
}

uint64_t RETextureBuilderCreateWithDescriptor()
{
  return MEMORY[0x24BE24D18]();
}

uint64_t RETextureBuilderEncodeBlitCommands()
{
  return MEMORY[0x24BE24D20]();
}

uint64_t RETextureBuilderSetColorGamut()
{
  return MEMORY[0x24BE24D28]();
}

uint64_t RETextureBuilderSetSemantic()
{
  return MEMORY[0x24BE24D30]();
}

uint64_t RETextureDrawableQueueCreateNextDrawable()
{
  return MEMORY[0x24BE24D38]();
}

uint64_t RETextureDrawableQueueCreateNextDrawableWithTimeout()
{
  return MEMORY[0x24BE24D40]();
}

uint64_t RETextureDrawableQueueCreateNextDrawableWithTimeoutAndPollingInterval()
{
  return MEMORY[0x24BE24D48]();
}

uint64_t RETextureDrawableQueueCreateWithDescriptor()
{
  return MEMORY[0x24BE24D50]();
}

uint64_t RETextureDrawableQueueDescriptorCreate()
{
  return MEMORY[0x24BE24D58]();
}

uint64_t RETextureDrawableQueueDescriptorSetHeight()
{
  return MEMORY[0x24BE24D60]();
}

uint64_t RETextureDrawableQueueDescriptorSetMipMapMode()
{
  return MEMORY[0x24BE24D68]();
}

uint64_t RETextureDrawableQueueDescriptorSetPixelFormat()
{
  return MEMORY[0x24BE24D70]();
}

uint64_t RETextureDrawableQueueDescriptorSetPresentsWithNextUpdate()
{
  return MEMORY[0x24BE24D78]();
}

uint64_t RETextureDrawableQueueDescriptorSetResourceOptions()
{
  return MEMORY[0x24BE24D80]();
}

uint64_t RETextureDrawableQueueDescriptorSetShareable()
{
  return MEMORY[0x24BE24D88]();
}

uint64_t RETextureDrawableQueueDescriptorSetTextureUsage()
{
  return MEMORY[0x24BE24D90]();
}

uint64_t RETextureDrawableQueueDescriptorSetWidth()
{
  return MEMORY[0x24BE24D98]();
}

uint64_t RETextureImportOperationCreateAsset()
{
  return MEMORY[0x24BE24DC0]();
}

uint64_t RETextureImportOperationCreateAssetData()
{
  return MEMORY[0x24BE24DC8]();
}

uint64_t RETextureImportOperationCreateFromImageArray()
{
  return MEMORY[0x24BE24DD0]();
}

uint64_t RETextureImportOperationCreateWithBundleResource()
{
  return MEMORY[0x24BE24DD8]();
}

uint64_t RETextureImportOperationCreateWithCGImage()
{
  return MEMORY[0x24BE24DE0]();
}

uint64_t RETextureImportOperationCreateWithURL()
{
  return MEMORY[0x24BE24DF0]();
}

uint64_t RETextureImportOperationRun()
{
  return MEMORY[0x24BE24E00]();
}

uint64_t RETextureImportOperationSetASTCCompressionOptions()
{
  return MEMORY[0x24BE24E08]();
}

uint64_t RETextureImportOperationSetAssetResourceName()
{
  return MEMORY[0x24BE24E10]();
}

uint64_t RETextureImportOperationSetColorSpaceName()
{
  return MEMORY[0x24BE24E18]();
}

uint64_t RETextureImportOperationSetCompressionType()
{
  return MEMORY[0x24BE24E20]();
}

uint64_t RETextureImportOperationSetMipmapMode()
{
  return MEMORY[0x24BE24E40]();
}

uint64_t RETextureImportOperationSetSemantic()
{
  return MEMORY[0x24BE24E50]();
}

uint64_t RETimebaseComponentAddTimebase()
{
  return MEMORY[0x24BE24E60]();
}

uint64_t RETimebaseComponentGetComponentType()
{
  return MEMORY[0x24BE24E68]();
}

uint64_t RETimebaseServiceCreateEngineSourceTimebase()
{
  return MEMORY[0x24BE24E70]();
}

uint64_t RETimelineDefinitionAddChildTimeline()
{
  return MEMORY[0x24BE24E78]();
}

uint64_t RETimelineDefinitionBlendTreeAddAdditiveBlend()
{
  return MEMORY[0x24BE24E80]();
}

uint64_t RETimelineDefinitionBlendTreeAddBlend()
{
  return MEMORY[0x24BE24E88]();
}

uint64_t RETimelineDefinitionBlendTreeAddConnection()
{
  return MEMORY[0x24BE24E90]();
}

uint64_t RETimelineDefinitionBlendTreeAddTimelineSource()
{
  return MEMORY[0x24BE24E98]();
}

uint64_t RETimelineDefinitionBlendTreeConnectionCount()
{
  return MEMORY[0x24BE24EA0]();
}

uint64_t RETimelineDefinitionBlendTreeConnectionGetSource()
{
  return MEMORY[0x24BE24EA8]();
}

uint64_t RETimelineDefinitionBlendTreeConnectionGetTarget()
{
  return MEMORY[0x24BE24EB0]();
}

uint64_t RETimelineDefinitionBlendTreeNodeCount()
{
  return MEMORY[0x24BE24EB8]();
}

uint64_t RETimelineDefinitionBlendTreeNodeGetName()
{
  return MEMORY[0x24BE24EC0]();
}

uint64_t RETimelineDefinitionBlendTreeNodeGetWeight()
{
  return MEMORY[0x24BE24EC8]();
}

uint64_t RETimelineDefinitionBlendTreeNodeGetWeightPath()
{
  return MEMORY[0x24BE24ED0]();
}

uint64_t RETimelineDefinitionBlendTreeNodeIsBlend()
{
  return MEMORY[0x24BE24ED8]();
}

uint64_t RETimelineDefinitionBlendTreeNodeIsBlendAdditive()
{
  return MEMORY[0x24BE24EE0]();
}

uint64_t RETimelineDefinitionBlendTreeNodeIsClipSource()
{
  return MEMORY[0x24BE24EE8]();
}

uint64_t RETimelineDefinitionCreateBlendTreeNodeSourceRef()
{
  return MEMORY[0x24BE24EF8]();
}

uint64_t RETimelineDefinitionCreateChildTimelineRef()
{
  return MEMORY[0x24BE24F00]();
}

uint64_t RETimelineDefinitionCreateClipSourceRef()
{
  return MEMORY[0x24BE24F08]();
}

uint64_t RETimelineDefinitionCreateFloatBlendTree()
{
  return MEMORY[0x24BE24F30]();
}

uint64_t RETimelineDefinitionCreateFromTimeline()
{
  return MEMORY[0x24BE24F38]();
}

uint64_t RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation()
{
  return MEMORY[0x24BE24F40]();
}

uint64_t RETimelineDefinitionCreateFromToByDoubleAnimation()
{
  return MEMORY[0x24BE24F48]();
}

uint64_t RETimelineDefinitionCreateFromToByFloat2Animation()
{
  return MEMORY[0x24BE24F50]();
}

uint64_t RETimelineDefinitionCreateFromToByFloat3Animation()
{
  return MEMORY[0x24BE24F58]();
}

uint64_t RETimelineDefinitionCreateFromToByFloat4Animation()
{
  return MEMORY[0x24BE24F60]();
}

uint64_t RETimelineDefinitionCreateFromToByFloatAnimation()
{
  return MEMORY[0x24BE24F68]();
}

uint64_t RETimelineDefinitionCreateFromToByQuaternionAnimation()
{
  return MEMORY[0x24BE24F70]();
}

uint64_t RETimelineDefinitionCreateFromToBySRTAnimation()
{
  return MEMORY[0x24BE24F78]();
}

uint64_t RETimelineDefinitionCreateFromToBySkeletalPoseAnimation()
{
  return MEMORY[0x24BE24F80]();
}

uint64_t RETimelineDefinitionCreateOrbitAnimation()
{
  return MEMORY[0x24BE24F88]();
}

uint64_t RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation()
{
  return MEMORY[0x24BE24FA0]();
}

uint64_t RETimelineDefinitionCreateSampledSRTAnimation()
{
  return MEMORY[0x24BE24FD8]();
}

uint64_t RETimelineDefinitionCreateSampledSkeletalPoseAnimation()
{
  return MEMORY[0x24BE24FE0]();
}

uint64_t RETimelineDefinitionCreateTimelineAsset()
{
  return MEMORY[0x24BE24FF0]();
}

uint64_t RETimelineDefinitionCreateTimelineClip()
{
  return MEMORY[0x24BE24FF8]();
}

uint64_t RETimelineDefinitionCreateTimelineGroup()
{
  return MEMORY[0x24BE25000]();
}

uint64_t RETimelineDefinitionCreateTypedEventTimeline()
{
  return MEMORY[0x24BE25008]();
}

uint64_t RETimelineDefinitionEventTimelineAddEvent()
{
  return MEMORY[0x24BE25010]();
}

uint64_t RETimelineDefinitionEventTimelineAddParameter()
{
  return MEMORY[0x24BE25018]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventCount()
{
  return MEMORY[0x24BE25030]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventDuration()
{
  return MEMORY[0x24BE25038]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventParameterData()
{
  return MEMORY[0x24BE25040]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventParameterDataSize()
{
  return MEMORY[0x24BE25048]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventStartTime()
{
  return MEMORY[0x24BE25050]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventSwiftParameter()
{
  return MEMORY[0x24BE25058]();
}

uint64_t RETimelineDefinitionEventTimelineGetEventTypeName()
{
  return MEMORY[0x24BE25060]();
}

uint64_t RETimelineDefinitionEventTimelineGetParameterCount()
{
  return MEMORY[0x24BE25068]();
}

uint64_t RETimelineDefinitionEventTimelineGetParameterName()
{
  return MEMORY[0x24BE25070]();
}

uint64_t RETimelineDefinitionEventTimelineSetAndRetainSwiftConstantData()
{
  return MEMORY[0x24BE25080]();
}

uint64_t RETimelineDefinitionEventTimelineSetAndRetainSwiftParameter()
{
  return MEMORY[0x24BE25088]();
}

uint64_t RETimelineDefinitionEventTimelineSetConstantData()
{
  return MEMORY[0x24BE25090]();
}

uint64_t RETimelineDefinitionEventTimelineSetParameterData()
{
  return MEMORY[0x24BE25098]();
}

uint64_t RETimelineDefinitionEventTimelineSetReversible()
{
  return MEMORY[0x24BE250A0]();
}

uint64_t RETimelineDefinitionGetAnimationLayer()
{
  return MEMORY[0x24BE250A8]();
}

uint64_t RETimelineDefinitionGetAxis()
{
  return MEMORY[0x24BE250B0]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByValue()
{
  return MEMORY[0x24BE250B8]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByWeightCount()
{
  return MEMORY[0x24BE250C0]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromValue()
{
  return MEMORY[0x24BE250C8]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromWeightCount()
{
  return MEMORY[0x24BE250D0]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromWeightName()
{
  return MEMORY[0x24BE250D8]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsIndexWeightValue()
{
  return MEMORY[0x24BE250E0]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToValue()
{
  return MEMORY[0x24BE250E8]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToWeightCount()
{
  return MEMORY[0x24BE250F0]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsWeightName()
{
  return MEMORY[0x24BE250F8]();
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsWeightsCount()
{
  return MEMORY[0x24BE25100]();
}

uint64_t RETimelineDefinitionGetChildrenTimelineCount()
{
  return MEMORY[0x24BE25108]();
}

uint64_t RETimelineDefinitionGetClipDelay()
{
  return MEMORY[0x24BE25110]();
}

uint64_t RETimelineDefinitionGetClipDuration()
{
  return MEMORY[0x24BE25118]();
}

uint64_t RETimelineDefinitionGetClipEnd()
{
  return MEMORY[0x24BE25120]();
}

uint64_t RETimelineDefinitionGetClipLoopBehavior()
{
  return MEMORY[0x24BE25128]();
}

uint64_t RETimelineDefinitionGetClipOffset()
{
  return MEMORY[0x24BE25130]();
}

uint64_t RETimelineDefinitionGetClipSpeed()
{
  return MEMORY[0x24BE25138]();
}

uint64_t RETimelineDefinitionGetClipStart()
{
  return MEMORY[0x24BE25140]();
}

uint64_t RETimelineDefinitionGetDoubleByValue()
{
  return MEMORY[0x24BE25148]();
}

uint64_t RETimelineDefinitionGetDoubleFromValue()
{
  return MEMORY[0x24BE25150]();
}

uint64_t RETimelineDefinitionGetDoubleToValue()
{
  return MEMORY[0x24BE25158]();
}

uint64_t RETimelineDefinitionGetDoubleValues()
{
  return MEMORY[0x24BE25160]();
}

uint64_t RETimelineDefinitionGetDuration()
{
  return MEMORY[0x24BE25168]();
}

uint64_t RETimelineDefinitionGetEndTime()
{
  return MEMORY[0x24BE25170]();
}

uint64_t RETimelineDefinitionGetFillMode()
{
  return MEMORY[0x24BE25178]();
}

uint64_t RETimelineDefinitionGetFloat2ByValue()
{
  return MEMORY[0x24BE25180]();
}

uint64_t RETimelineDefinitionGetFloat2FromValue()
{
  return MEMORY[0x24BE25188]();
}

uint64_t RETimelineDefinitionGetFloat2ToValue()
{
  return MEMORY[0x24BE25190]();
}

uint64_t RETimelineDefinitionGetFloat2Values()
{
  return MEMORY[0x24BE25198]();
}

uint64_t RETimelineDefinitionGetFloat3ByValue()
{
  return MEMORY[0x24BE251A0]();
}

uint64_t RETimelineDefinitionGetFloat3FromValue()
{
  return MEMORY[0x24BE251A8]();
}

uint64_t RETimelineDefinitionGetFloat3ToValue()
{
  return MEMORY[0x24BE251B0]();
}

uint64_t RETimelineDefinitionGetFloat3Values()
{
  return MEMORY[0x24BE251B8]();
}

uint64_t RETimelineDefinitionGetFloat4ByValue()
{
  return MEMORY[0x24BE251C0]();
}

uint64_t RETimelineDefinitionGetFloat4FromValue()
{
  return MEMORY[0x24BE251C8]();
}

uint64_t RETimelineDefinitionGetFloat4ToValue()
{
  return MEMORY[0x24BE251D0]();
}

uint64_t RETimelineDefinitionGetFloat4Values()
{
  return MEMORY[0x24BE251D8]();
}

uint64_t RETimelineDefinitionGetFloatByValue()
{
  return MEMORY[0x24BE251E0]();
}

uint64_t RETimelineDefinitionGetFloatFromValue()
{
  return MEMORY[0x24BE251E8]();
}

uint64_t RETimelineDefinitionGetFloatToValue()
{
  return MEMORY[0x24BE251F0]();
}

uint64_t RETimelineDefinitionGetFloatValues()
{
  return MEMORY[0x24BE251F8]();
}

uint64_t RETimelineDefinitionGetFrameInterval()
{
  return MEMORY[0x24BE25200]();
}

uint64_t RETimelineDefinitionGetInterpolationEnabled()
{
  return MEMORY[0x24BE25208]();
}

uint64_t RETimelineDefinitionGetName()
{
  return MEMORY[0x24BE25210]();
}

uint64_t RETimelineDefinitionGetOrientToPath()
{
  return MEMORY[0x24BE25218]();
}

uint64_t RETimelineDefinitionGetQuaternionByValue()
{
  return MEMORY[0x24BE25220]();
}

uint64_t RETimelineDefinitionGetQuaternionFromValue()
{
  return MEMORY[0x24BE25228]();
}

uint64_t RETimelineDefinitionGetQuaternionToValue()
{
  return MEMORY[0x24BE25230]();
}

uint64_t RETimelineDefinitionGetQuaternionValues()
{
  return MEMORY[0x24BE25238]();
}

uint64_t RETimelineDefinitionGetRotationCount()
{
  return MEMORY[0x24BE25240]();
}

uint64_t RETimelineDefinitionGetSRTByValue()
{
  return MEMORY[0x24BE25248]();
}

uint64_t RETimelineDefinitionGetSRTFromValue()
{
  return MEMORY[0x24BE25250]();
}

uint64_t RETimelineDefinitionGetSRTToValue()
{
  return MEMORY[0x24BE25258]();
}

uint64_t RETimelineDefinitionGetSRTValues()
{
  return MEMORY[0x24BE25260]();
}

uint64_t RETimelineDefinitionGetSkeletalJointCount()
{
  return MEMORY[0x24BE25268]();
}

uint64_t RETimelineDefinitionGetSkeletalJointName()
{
  return MEMORY[0x24BE25270]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseByJointCount()
{
  return MEMORY[0x24BE25278]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseByValue()
{
  return MEMORY[0x24BE25280]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromJointCount()
{
  return MEMORY[0x24BE25288]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromJointName()
{
  return MEMORY[0x24BE25290]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromValue()
{
  return MEMORY[0x24BE25298]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseIndexJointValue()
{
  return MEMORY[0x24BE252A0]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseRotationChannelMask()
{
  return MEMORY[0x24BE252A8]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseScaleChannelMask()
{
  return MEMORY[0x24BE252B0]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseToJointCount()
{
  return MEMORY[0x24BE252B8]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseToValue()
{
  return MEMORY[0x24BE252C0]();
}

uint64_t RETimelineDefinitionGetSkeletalPoseTranslationChannelMask()
{
  return MEMORY[0x24BE252C8]();
}

uint64_t RETimelineDefinitionGetSpinClockwise()
{
  return MEMORY[0x24BE252D0]();
}

uint64_t RETimelineDefinitionGetStartTime()
{
  return MEMORY[0x24BE252D8]();
}

uint64_t RETimelineDefinitionGetStartTransform()
{
  return MEMORY[0x24BE252E0]();
}

uint64_t RETimelineDefinitionGetTargetPath()
{
  return MEMORY[0x24BE252E8]();
}

uint64_t RETimelineDefinitionGetTimelineType()
{
  return MEMORY[0x24BE252F0]();
}

uint64_t RETimelineDefinitionGetValueCount()
{
  return MEMORY[0x24BE252F8]();
}

uint64_t RETimelineDefinitionIsAdditive()
{
  return MEMORY[0x24BE25300]();
}

uint64_t RETimelineDefinitionSetAdditive()
{
  return MEMORY[0x24BE25308]();
}

uint64_t RETimelineDefinitionSetAnimationLayer()
{
  return MEMORY[0x24BE25310]();
}

uint64_t RETimelineDefinitionSetAxis()
{
  return MEMORY[0x24BE25318]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsByValues()
{
  return MEMORY[0x24BE25320]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsByWeightName()
{
  return MEMORY[0x24BE25328]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsFromValues()
{
  return MEMORY[0x24BE25338]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsFromWeightName()
{
  return MEMORY[0x24BE25340]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsIndexValues()
{
  return MEMORY[0x24BE25348]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsSampleCount()
{
  return MEMORY[0x24BE25350]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsToValues()
{
  return MEMORY[0x24BE25358]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsToWeightName()
{
  return MEMORY[0x24BE25360]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsWeightName()
{
  return MEMORY[0x24BE25368]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsWeightsCount()
{
  return MEMORY[0x24BE25370]();
}

uint64_t RETimelineDefinitionSetClipDelay()
{
  return MEMORY[0x24BE25378]();
}

uint64_t RETimelineDefinitionSetClipDuration()
{
  return MEMORY[0x24BE25380]();
}

uint64_t RETimelineDefinitionSetClipEnd()
{
  return MEMORY[0x24BE25388]();
}

uint64_t RETimelineDefinitionSetClipLoopBehavior()
{
  return MEMORY[0x24BE25390]();
}

uint64_t RETimelineDefinitionSetClipOffset()
{
  return MEMORY[0x24BE25398]();
}

uint64_t RETimelineDefinitionSetClipSpeed()
{
  return MEMORY[0x24BE253A0]();
}

uint64_t RETimelineDefinitionSetClipStart()
{
  return MEMORY[0x24BE253A8]();
}

uint64_t RETimelineDefinitionSetDoubleByValue()
{
  return MEMORY[0x24BE253B0]();
}

uint64_t RETimelineDefinitionSetDoubleFromValue()
{
  return MEMORY[0x24BE253B8]();
}

uint64_t RETimelineDefinitionSetDoubleToValue()
{
  return MEMORY[0x24BE253C0]();
}

uint64_t RETimelineDefinitionSetDuration()
{
  return MEMORY[0x24BE253D0]();
}

uint64_t RETimelineDefinitionSetEasingFunctionEx()
{
  return MEMORY[0x24BE253D8]();
}

uint64_t RETimelineDefinitionSetEndTime()
{
  return MEMORY[0x24BE253E0]();
}

uint64_t RETimelineDefinitionSetFillMode()
{
  return MEMORY[0x24BE253E8]();
}

uint64_t RETimelineDefinitionSetFloat2ByValue()
{
  return MEMORY[0x24BE253F0]();
}

uint64_t RETimelineDefinitionSetFloat2FromValue()
{
  return MEMORY[0x24BE253F8]();
}

uint64_t RETimelineDefinitionSetFloat2ToValue()
{
  return MEMORY[0x24BE25400]();
}

uint64_t RETimelineDefinitionSetFloat3ByValue()
{
  return MEMORY[0x24BE25410]();
}

uint64_t RETimelineDefinitionSetFloat3FromValue()
{
  return MEMORY[0x24BE25418]();
}

uint64_t RETimelineDefinitionSetFloat3ToValue()
{
  return MEMORY[0x24BE25420]();
}

uint64_t RETimelineDefinitionSetFloat4ByValue()
{
  return MEMORY[0x24BE25430]();
}

uint64_t RETimelineDefinitionSetFloat4FromValue()
{
  return MEMORY[0x24BE25438]();
}

uint64_t RETimelineDefinitionSetFloat4ToValue()
{
  return MEMORY[0x24BE25440]();
}

uint64_t RETimelineDefinitionSetFloatByValue()
{
  return MEMORY[0x24BE25450]();
}

uint64_t RETimelineDefinitionSetFloatFromValue()
{
  return MEMORY[0x24BE25458]();
}

uint64_t RETimelineDefinitionSetFloatToValue()
{
  return MEMORY[0x24BE25460]();
}

uint64_t RETimelineDefinitionSetFrameInterval()
{
  return MEMORY[0x24BE25470]();
}

uint64_t RETimelineDefinitionSetInterpolationEnabled()
{
  return MEMORY[0x24BE25478]();
}

uint64_t RETimelineDefinitionSetName()
{
  return MEMORY[0x24BE25480]();
}

uint64_t RETimelineDefinitionSetOrientToPath()
{
  return MEMORY[0x24BE25488]();
}

uint64_t RETimelineDefinitionSetQuaternionByValue()
{
  return MEMORY[0x24BE25490]();
}

uint64_t RETimelineDefinitionSetQuaternionFromValue()
{
  return MEMORY[0x24BE25498]();
}

uint64_t RETimelineDefinitionSetQuaternionToValue()
{
  return MEMORY[0x24BE254A0]();
}

uint64_t RETimelineDefinitionSetRotationCount()
{
  return MEMORY[0x24BE254B0]();
}

uint64_t RETimelineDefinitionSetSRTByValue()
{
  return MEMORY[0x24BE254B8]();
}

uint64_t RETimelineDefinitionSetSRTFromValue()
{
  return MEMORY[0x24BE254C0]();
}

uint64_t RETimelineDefinitionSetSRTToValue()
{
  return MEMORY[0x24BE254C8]();
}

uint64_t RETimelineDefinitionSetSRTValues()
{
  return MEMORY[0x24BE254D0]();
}

uint64_t RETimelineDefinitionSetSkeletalJointCount()
{
  return MEMORY[0x24BE254D8]();
}

uint64_t RETimelineDefinitionSetSkeletalJointName()
{
  return MEMORY[0x24BE254E0]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseByJointName()
{
  return MEMORY[0x24BE254E8]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseByValue()
{
  return MEMORY[0x24BE254F0]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseFromJointName()
{
  return MEMORY[0x24BE254F8]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseFromValue()
{
  return MEMORY[0x24BE25500]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseIndexValues()
{
  return MEMORY[0x24BE25508]();
}

uint64_t RETimelineDefinitionSetSkeletalPosePoseCount()
{
  return MEMORY[0x24BE25510]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseRotationChannelMask()
{
  return MEMORY[0x24BE25518]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseScaleChannelMask()
{
  return MEMORY[0x24BE25520]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseToJointName()
{
  return MEMORY[0x24BE25528]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseToValue()
{
  return MEMORY[0x24BE25530]();
}

uint64_t RETimelineDefinitionSetSkeletalPoseTranslationChannelMask()
{
  return MEMORY[0x24BE25538]();
}

uint64_t RETimelineDefinitionSetSpinClockwise()
{
  return MEMORY[0x24BE25550]();
}

uint64_t RETimelineDefinitionSetStartTime()
{
  return MEMORY[0x24BE25558]();
}

uint64_t RETimelineDefinitionSetStartTransform()
{
  return MEMORY[0x24BE25560]();
}

uint64_t RETimelineDefinitionSetTargetPath()
{
  return MEMORY[0x24BE25568]();
}

uint64_t RETimelineEventFilter()
{
  return MEMORY[0x24BE25570]();
}

uint64_t RETimelineEventGetAnimatedType()
{
  return MEMORY[0x24BE25578]();
}

uint64_t RETimelineEventGetDefaultSourceDoubleValue()
{
  return MEMORY[0x24BE25590]();
}

uint64_t RETimelineEventGetDefaultSourceFloatValue()
{
  return MEMORY[0x24BE25598]();
}

uint64_t RETimelineEventGetDefaultSourceQuaternionFValue()
{
  return MEMORY[0x24BE255A0]();
}

uint64_t RETimelineEventGetDefaultSourceSRTValue()
{
  return MEMORY[0x24BE255A8]();
}

uint64_t RETimelineEventGetDefaultSourceVector2FValue()
{
  return MEMORY[0x24BE255C0]();
}

uint64_t RETimelineEventGetDefaultSourceVector3FValue()
{
  return MEMORY[0x24BE255C8]();
}

uint64_t RETimelineEventGetDefaultSourceVector4FValue()
{
  return MEMORY[0x24BE255D0]();
}

uint64_t RETimelineEventGetDefaultTargetDoubleValue()
{
  return MEMORY[0x24BE255D8]();
}

uint64_t RETimelineEventGetDefaultTargetFloatValue()
{
  return MEMORY[0x24BE255E0]();
}

uint64_t RETimelineEventGetDefaultTargetQuaternionFValue()
{
  return MEMORY[0x24BE255E8]();
}

uint64_t RETimelineEventGetDefaultTargetSRTValue()
{
  return MEMORY[0x24BE255F0]();
}

uint64_t RETimelineEventGetDefaultTargetVector2FValue()
{
  return MEMORY[0x24BE25608]();
}

uint64_t RETimelineEventGetDefaultTargetVector3FValue()
{
  return MEMORY[0x24BE25610]();
}

uint64_t RETimelineEventGetDefaultTargetVector4FValue()
{
  return MEMORY[0x24BE25618]();
}

uint64_t RETimelineEventGetParameterData()
{
  return MEMORY[0x24BE25620]();
}

uint64_t RETimelineEventGetParameterDataSize()
{
  return MEMORY[0x24BE25628]();
}

uint64_t RETimelineEventGetSkeletalPoseJointCount()
{
  return MEMORY[0x24BE25630]();
}

uint64_t RETimelineEventGetSwiftConstantData()
{
  return MEMORY[0x24BE25638]();
}

uint64_t RETimelineEventGetSwiftParameter()
{
  return MEMORY[0x24BE25640]();
}

uint64_t RETimelineEventSetAnimatedDoubleValue()
{
  return MEMORY[0x24BE25648]();
}

uint64_t RETimelineEventSetAnimatedFloatValue()
{
  return MEMORY[0x24BE25650]();
}

uint64_t RETimelineEventSetAnimatedQuaternionFValue()
{
  return MEMORY[0x24BE25658]();
}

uint64_t RETimelineEventSetAnimatedSRTValue()
{
  return MEMORY[0x24BE25660]();
}

uint64_t RETimelineEventSetAnimatedSkeletalPoseJointValue()
{
  return MEMORY[0x24BE25668]();
}

uint64_t RETimelineEventSetAnimatedSkeletalPoseJoints()
{
  return MEMORY[0x24BE25670]();
}

uint64_t RETimelineEventSetAnimatedVector2FValue()
{
  return MEMORY[0x24BE25678]();
}

uint64_t RETimelineEventSetAnimatedVector3FValue()
{
  return MEMORY[0x24BE25680]();
}

uint64_t RETimelineEventSetAnimatedVector4FValue()
{
  return MEMORY[0x24BE25688]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x24BE25690]();
}

uint64_t RETransformComponentGetLocalPose()
{
  return MEMORY[0x24BE25698]();
}

uint64_t RETransformComponentGetLocalSRT()
{
  return MEMORY[0x24BE256A0]();
}

uint64_t RETransformComponentGetLocalScale()
{
  return MEMORY[0x24BE256A8]();
}

uint64_t RETransformComponentGetLocalUnanimatedSRT()
{
  return MEMORY[0x24BE256B0]();
}

uint64_t RETransformComponentGetParentWorldMatrix4x4F()
{
  return MEMORY[0x24BE256B8]();
}

uint64_t RETransformComponentGetWorldMatrix4x4F()
{
  return MEMORY[0x24BE256C0]();
}

uint64_t RETransformComponentGetWorldOrientation()
{
  return MEMORY[0x24BE256C8]();
}

uint64_t RETransformComponentGetWorldPose()
{
  return MEMORY[0x24BE256D0]();
}

uint64_t RETransformComponentGetWorldSRT()
{
  return MEMORY[0x24BE256E0]();
}

uint64_t RETransformComponentGetWorldUnanimatedMatrix4x4F()
{
  return MEMORY[0x24BE256E8]();
}

uint64_t RETransformComponentIsAnimated()
{
  return MEMORY[0x24BE256F0]();
}

uint64_t RETransformComponentSetLocalSRT()
{
  return MEMORY[0x24BE25700]();
}

uint64_t RETransformComponentSetWorldAnimatedMatrix4x4F()
{
  return MEMORY[0x24BE25710]();
}

uint64_t RETransformComponentSetWorldAnimatedSRT()
{
  return MEMORY[0x24BE25718]();
}

uint64_t RETransformComponentSetWorldMatrix4x4F()
{
  return MEMORY[0x24BE25720]();
}

uint64_t RETransformComponentSetWorldOrientation()
{
  return MEMORY[0x24BE25728]();
}

uint64_t REUISortingComponentGetComponentType()
{
  return MEMORY[0x24BE25830]();
}

uint64_t REUISortingComponentGetSortCategory()
{
  return MEMORY[0x24BE25838]();
}

uint64_t REUISortingComponentGetSortPriorityHint()
{
  return MEMORY[0x24BE25840]();
}

uint64_t REUISortingComponentSetSortCategory()
{
  return MEMORY[0x24BE25848]();
}

uint64_t REUISortingComponentSetSortPriorityHint()
{
  return MEMORY[0x24BE25850]();
}

uint64_t REUISortingComponentSetUsesMeshBoundingBox()
{
  return MEMORY[0x24BE25858]();
}

uint64_t REUnlitMaterialParametersGetColorTexture()
{
  return MEMORY[0x24BE25868]();
}

uint64_t REUnlitMaterialParametersGetColorTint()
{
  return MEMORY[0x24BE25870]();
}

uint64_t REUnlitMaterialParametersGetDisableTonemap()
{
  return MEMORY[0x24BE25878]();
}

uint64_t REUnlitMaterialParametersGetOpacityThreshold()
{
  return MEMORY[0x24BE25888]();
}

uint64_t REUnlitMaterialParametersSetColorTexture()
{
  return MEMORY[0x24BE25890]();
}

uint64_t REUnlitMaterialParametersSetColorTint()
{
  return MEMORY[0x24BE25898]();
}

uint64_t REUnlitMaterialParametersSetOpacityThreshold()
{
  return MEMORY[0x24BE258A0]();
}

uint64_t REVFXAssetEnumerateBuiltInAssets()
{
  return MEMORY[0x24BE258A8]();
}

uint64_t REVFXAssetEnumerateParameterInfosWithEnum()
{
  return MEMORY[0x24BE258B0]();
}

uint64_t REVFXAssetFindParameterInfoWithEnum()
{
  return MEMORY[0x24BE258B8]();
}

uint64_t REVFXAssetGetAssetVersion()
{
  return MEMORY[0x24BE258C0]();
}

uint64_t REVFXAssetGetBuiltInEffectsBundle()
{
  return MEMORY[0x24BE258C8]();
}

uint64_t REVFXEmitterComponentAddCollisionPlane()
{
  return MEMORY[0x24BE258D0]();
}

uint64_t REVFXEmitterComponentGetAcceleration()
{
  return MEMORY[0x24BE258D8]();
}

uint64_t REVFXEmitterComponentGetAnimationRepeatMode()
{
  return MEMORY[0x24BE258E0]();
}

uint64_t REVFXEmitterComponentGetBillboardAxis()
{
  return MEMORY[0x24BE258E8]();
}

uint64_t REVFXEmitterComponentGetBillboardAxisVariation()
{
  return MEMORY[0x24BE258F0]();
}

uint64_t REVFXEmitterComponentGetBillboardMode()
{
  return MEMORY[0x24BE258F8]();
}

uint64_t REVFXEmitterComponentGetBirthDirection()
{
  return MEMORY[0x24BE25900]();
}

uint64_t REVFXEmitterComponentGetBirthLocation()
{
  return MEMORY[0x24BE25908]();
}

uint64_t REVFXEmitterComponentGetBirthLocationVertex()
{
  return MEMORY[0x24BE25910]();
}

uint64_t REVFXEmitterComponentGetBirthRate()
{
  return MEMORY[0x24BE25918]();
}

uint64_t REVFXEmitterComponentGetBirthRateVariation()
{
  return MEMORY[0x24BE25920]();
}

uint64_t REVFXEmitterComponentGetBlendMode()
{
  return MEMORY[0x24BE25928]();
}

uint64_t REVFXEmitterComponentGetBurstCount()
{
  return MEMORY[0x24BE25930]();
}

uint64_t REVFXEmitterComponentGetBurstCountVariation()
{
  return MEMORY[0x24BE25938]();
}

uint64_t REVFXEmitterComponentGetBurstRestartCount()
{
  return MEMORY[0x24BE25940]();
}

uint64_t REVFXEmitterComponentGetCollisionPlanes()
{
  return MEMORY[0x24BE25948]();
}

uint64_t REVFXEmitterComponentGetCollisions()
{
  return MEMORY[0x24BE25950]();
}

uint64_t REVFXEmitterComponentGetColorEvolutionPower()
{
  return MEMORY[0x24BE25958]();
}

uint64_t REVFXEmitterComponentGetColumnCount()
{
  return MEMORY[0x24BE25960]();
}

uint64_t REVFXEmitterComponentGetComponentType()
{
  return MEMORY[0x24BE25968]();
}

uint64_t REVFXEmitterComponentGetDampingFactor()
{
  return MEMORY[0x24BE25970]();
}

uint64_t REVFXEmitterComponentGetEmissionDirection()
{
  return MEMORY[0x24BE25978]();
}

uint64_t REVFXEmitterComponentGetEmissionDuration()
{
  return MEMORY[0x24BE25980]();
}

uint64_t REVFXEmitterComponentGetEmissionDurationVariation()
{
  return MEMORY[0x24BE25988]();
}

uint64_t REVFXEmitterComponentGetEmitterShape()
{
  return MEMORY[0x24BE25990]();
}

uint64_t REVFXEmitterComponentGetEmitterShapeSize()
{
  return MEMORY[0x24BE25998]();
}

uint64_t REVFXEmitterComponentGetEndColorRangeA()
{
  return MEMORY[0x24BE259A0]();
}

uint64_t REVFXEmitterComponentGetEndColorRangeB()
{
  return MEMORY[0x24BE259A8]();
}

uint64_t REVFXEmitterComponentGetFrameRate()
{
  return MEMORY[0x24BE259B0]();
}

uint64_t REVFXEmitterComponentGetFrameRateVariation()
{
  return MEMORY[0x24BE259B8]();
}

uint64_t REVFXEmitterComponentGetIdleDuration()
{
  return MEMORY[0x24BE259C0]();
}

uint64_t REVFXEmitterComponentGetIdleDurationVariation()
{
  return MEMORY[0x24BE259C8]();
}

uint64_t REVFXEmitterComponentGetInitialFrame()
{
  return MEMORY[0x24BE259D0]();
}

uint64_t REVFXEmitterComponentGetInitialFrameVariation()
{
  return MEMORY[0x24BE259D8]();
}

uint64_t REVFXEmitterComponentGetIsAnimated()
{
  return MEMORY[0x24BE259E0]();
}

uint64_t REVFXEmitterComponentGetIsEmitting()
{
  return MEMORY[0x24BE259E8]();
}

uint64_t REVFXEmitterComponentGetIsLightingEnabled()
{
  return MEMORY[0x24BE259F0]();
}

uint64_t REVFXEmitterComponentGetIsLocalFields()
{
  return MEMORY[0x24BE259F8]();
}

uint64_t REVFXEmitterComponentGetIsLocalSimulationSpace()
{
  return MEMORY[0x24BE25A00]();
}

uint64_t REVFXEmitterComponentGetIsSpawningEnabled()
{
  return MEMORY[0x24BE25A08]();
}

uint64_t REVFXEmitterComponentGetLoops()
{
  return MEMORY[0x24BE25A10]();
}

uint64_t REVFXEmitterComponentGetNoiseAnimationSpeed()
{
  return MEMORY[0x24BE25A18]();
}

uint64_t REVFXEmitterComponentGetNoiseScale()
{
  return MEMORY[0x24BE25A20]();
}

uint64_t REVFXEmitterComponentGetNoiseStrength()
{
  return MEMORY[0x24BE25A28]();
}

uint64_t REVFXEmitterComponentGetOpacityOverLife()
{
  return MEMORY[0x24BE25A30]();
}

uint64_t REVFXEmitterComponentGetParticleAngle()
{
  return MEMORY[0x24BE25A38]();
}

uint64_t REVFXEmitterComponentGetParticleAngleVariation()
{
  return MEMORY[0x24BE25A40]();
}

uint64_t REVFXEmitterComponentGetParticleAngularVelocity()
{
  return MEMORY[0x24BE25A48]();
}

uint64_t REVFXEmitterComponentGetParticleAngularVelocityVariation()
{
  return MEMORY[0x24BE25A50]();
}

uint64_t REVFXEmitterComponentGetParticleBounce()
{
  return MEMORY[0x24BE25A58]();
}

uint64_t REVFXEmitterComponentGetParticleFriction()
{
  return MEMORY[0x24BE25A60]();
}

uint64_t REVFXEmitterComponentGetParticleImage()
{
  return MEMORY[0x24BE25A68]();
}

uint64_t REVFXEmitterComponentGetParticleLifeSpan()
{
  return MEMORY[0x24BE25A70]();
}

uint64_t REVFXEmitterComponentGetParticleLifeSpanVariation()
{
  return MEMORY[0x24BE25A78]();
}

uint64_t REVFXEmitterComponentGetParticleMass()
{
  return MEMORY[0x24BE25A80]();
}

uint64_t REVFXEmitterComponentGetParticleMassVariation()
{
  return MEMORY[0x24BE25A88]();
}

uint64_t REVFXEmitterComponentGetParticleSize()
{
  return MEMORY[0x24BE25A90]();
}

uint64_t REVFXEmitterComponentGetParticleSizeVariation()
{
  return MEMORY[0x24BE25A98]();
}

uint64_t REVFXEmitterComponentGetParticleSpeed()
{
  return MEMORY[0x24BE25AA0]();
}

uint64_t REVFXEmitterComponentGetParticleSpeedVariation()
{
  return MEMORY[0x24BE25AA8]();
}

uint64_t REVFXEmitterComponentGetRadialAmount()
{
  return MEMORY[0x24BE25AB0]();
}

uint64_t REVFXEmitterComponentGetRadialGravityCenter()
{
  return MEMORY[0x24BE25AB8]();
}

uint64_t REVFXEmitterComponentGetRadialGravityStrength()
{
  return MEMORY[0x24BE25AC0]();
}

uint64_t REVFXEmitterComponentGetRestartCount()
{
  return MEMORY[0x24BE25AC8]();
}

uint64_t REVFXEmitterComponentGetRowCount()
{
  return MEMORY[0x24BE25AD0]();
}

uint64_t REVFXEmitterComponentGetSimulationRate()
{
  return MEMORY[0x24BE25AD8]();
}

uint64_t REVFXEmitterComponentGetSimulationState()
{
  return MEMORY[0x24BE25AE0]();
}

uint64_t REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespan()
{
  return MEMORY[0x24BE25AE8]();
}

uint64_t REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespanPower()
{
  return MEMORY[0x24BE25AF0]();
}

uint64_t REVFXEmitterComponentGetSortOrder()
{
  return MEMORY[0x24BE25AF8]();
}

uint64_t REVFXEmitterComponentGetSpawnInheritParentColor()
{
  return MEMORY[0x24BE25B00]();
}

uint64_t REVFXEmitterComponentGetSpawnOccasion()
{
  return MEMORY[0x24BE25B08]();
}

uint64_t REVFXEmitterComponentGetSpawnSpreadFactor()
{
  return MEMORY[0x24BE25B10]();
}

uint64_t REVFXEmitterComponentGetSpawnSpreadFactorVariation()
{
  return MEMORY[0x24BE25B18]();
}

uint64_t REVFXEmitterComponentGetSpawnVelocityFactor()
{
  return MEMORY[0x24BE25B20]();
}

uint64_t REVFXEmitterComponentGetSpreadingAngle()
{
  return MEMORY[0x24BE25B28]();
}

uint64_t REVFXEmitterComponentGetStartColorRangeA()
{
  return MEMORY[0x24BE25B30]();
}

uint64_t REVFXEmitterComponentGetStartColorRangeB()
{
  return MEMORY[0x24BE25B38]();
}

uint64_t REVFXEmitterComponentGetStretchFactor()
{
  return MEMORY[0x24BE25B40]();
}

uint64_t REVFXEmitterComponentGetTorusInnerRadius()
{
  return MEMORY[0x24BE25B48]();
}

uint64_t REVFXEmitterComponentGetUseEndColor()
{
  return MEMORY[0x24BE25B50]();
}

uint64_t REVFXEmitterComponentGetUseEndColorRange()
{
  return MEMORY[0x24BE25B58]();
}

uint64_t REVFXEmitterComponentGetUseStartColorRange()
{
  return MEMORY[0x24BE25B60]();
}

uint64_t REVFXEmitterComponentGetVortexDirection()
{
  return MEMORY[0x24BE25B68]();
}

uint64_t REVFXEmitterComponentGetVortexStrength()
{
  return MEMORY[0x24BE25B70]();
}

uint64_t REVFXEmitterComponentGetWarmupDuration()
{
  return MEMORY[0x24BE25B78]();
}

uint64_t REVFXEmitterComponentMarkDirty()
{
  return MEMORY[0x24BE25B80]();
}

uint64_t REVFXEmitterComponentRemoveCollisionPlane()
{
  return MEMORY[0x24BE25B88]();
}

uint64_t REVFXEmitterComponentResetSimulation()
{
  return MEMORY[0x24BE25B90]();
}

uint64_t REVFXEmitterComponentSetAcceleration()
{
  return MEMORY[0x24BE25B98]();
}

uint64_t REVFXEmitterComponentSetAnimationRepeatMode()
{
  return MEMORY[0x24BE25BA0]();
}

uint64_t REVFXEmitterComponentSetBillboardAxis()
{
  return MEMORY[0x24BE25BA8]();
}

uint64_t REVFXEmitterComponentSetBillboardAxisVariation()
{
  return MEMORY[0x24BE25BB0]();
}

uint64_t REVFXEmitterComponentSetBillboardMode()
{
  return MEMORY[0x24BE25BB8]();
}

uint64_t REVFXEmitterComponentSetBirthDirection()
{
  return MEMORY[0x24BE25BC0]();
}

uint64_t REVFXEmitterComponentSetBirthLocation()
{
  return MEMORY[0x24BE25BC8]();
}

uint64_t REVFXEmitterComponentSetBirthLocationVertex()
{
  return MEMORY[0x24BE25BD0]();
}

uint64_t REVFXEmitterComponentSetBirthRate()
{
  return MEMORY[0x24BE25BD8]();
}

uint64_t REVFXEmitterComponentSetBirthRateVariation()
{
  return MEMORY[0x24BE25BE0]();
}

uint64_t REVFXEmitterComponentSetBlendMode()
{
  return MEMORY[0x24BE25BE8]();
}

uint64_t REVFXEmitterComponentSetBurstCount()
{
  return MEMORY[0x24BE25BF0]();
}

uint64_t REVFXEmitterComponentSetBurstCountVariation()
{
  return MEMORY[0x24BE25BF8]();
}

uint64_t REVFXEmitterComponentSetBurstRestartCount()
{
  return MEMORY[0x24BE25C00]();
}

uint64_t REVFXEmitterComponentSetCollision()
{
  return MEMORY[0x24BE25C08]();
}

uint64_t REVFXEmitterComponentSetColorEvolutionPower()
{
  return MEMORY[0x24BE25C10]();
}

uint64_t REVFXEmitterComponentSetColumnCount()
{
  return MEMORY[0x24BE25C18]();
}

uint64_t REVFXEmitterComponentSetDampingFactor()
{
  return MEMORY[0x24BE25C20]();
}

uint64_t REVFXEmitterComponentSetEmissionDirection()
{
  return MEMORY[0x24BE25C28]();
}

uint64_t REVFXEmitterComponentSetEmissionDuration()
{
  return MEMORY[0x24BE25C30]();
}

uint64_t REVFXEmitterComponentSetEmissionDurationVariation()
{
  return MEMORY[0x24BE25C38]();
}

uint64_t REVFXEmitterComponentSetEmitterShape()
{
  return MEMORY[0x24BE25C40]();
}

uint64_t REVFXEmitterComponentSetEmitterShapeSize()
{
  return MEMORY[0x24BE25C48]();
}

uint64_t REVFXEmitterComponentSetEndColorRangeA()
{
  return MEMORY[0x24BE25C50]();
}

uint64_t REVFXEmitterComponentSetEndColorRangeB()
{
  return MEMORY[0x24BE25C58]();
}

uint64_t REVFXEmitterComponentSetFrameRate()
{
  return MEMORY[0x24BE25C60]();
}

uint64_t REVFXEmitterComponentSetFrameRateVariation()
{
  return MEMORY[0x24BE25C68]();
}

uint64_t REVFXEmitterComponentSetIdleDuration()
{
  return MEMORY[0x24BE25C70]();
}

uint64_t REVFXEmitterComponentSetIdleDurationVariation()
{
  return MEMORY[0x24BE25C78]();
}

uint64_t REVFXEmitterComponentSetInitialFrame()
{
  return MEMORY[0x24BE25C80]();
}

uint64_t REVFXEmitterComponentSetInitialFrameVariation()
{
  return MEMORY[0x24BE25C88]();
}

uint64_t REVFXEmitterComponentSetIsAnimated()
{
  return MEMORY[0x24BE25C90]();
}

uint64_t REVFXEmitterComponentSetIsEmitting()
{
  return MEMORY[0x24BE25C98]();
}

uint64_t REVFXEmitterComponentSetIsLightingEnabled()
{
  return MEMORY[0x24BE25CA0]();
}

uint64_t REVFXEmitterComponentSetIsLocalFields()
{
  return MEMORY[0x24BE25CA8]();
}

uint64_t REVFXEmitterComponentSetIsLocalSimulationSpace()
{
  return MEMORY[0x24BE25CB0]();
}

uint64_t REVFXEmitterComponentSetIsSpawningEnabled()
{
  return MEMORY[0x24BE25CB8]();
}

uint64_t REVFXEmitterComponentSetLoops()
{
  return MEMORY[0x24BE25CC0]();
}

uint64_t REVFXEmitterComponentSetNoiseAnimationSpeed()
{
  return MEMORY[0x24BE25CC8]();
}

uint64_t REVFXEmitterComponentSetNoiseScale()
{
  return MEMORY[0x24BE25CD0]();
}

uint64_t REVFXEmitterComponentSetNoiseStrength()
{
  return MEMORY[0x24BE25CD8]();
}

uint64_t REVFXEmitterComponentSetOpacityOverLife()
{
  return MEMORY[0x24BE25CE0]();
}

uint64_t REVFXEmitterComponentSetParticleAngle()
{
  return MEMORY[0x24BE25CE8]();
}

uint64_t REVFXEmitterComponentSetParticleAngleVariation()
{
  return MEMORY[0x24BE25CF0]();
}

uint64_t REVFXEmitterComponentSetParticleAngularVelocity()
{
  return MEMORY[0x24BE25CF8]();
}

uint64_t REVFXEmitterComponentSetParticleAngularVelocityVariation()
{
  return MEMORY[0x24BE25D00]();
}

uint64_t REVFXEmitterComponentSetParticleBounce()
{
  return MEMORY[0x24BE25D08]();
}

uint64_t REVFXEmitterComponentSetParticleFriction()
{
  return MEMORY[0x24BE25D10]();
}

uint64_t REVFXEmitterComponentSetParticleImage()
{
  return MEMORY[0x24BE25D18]();
}

uint64_t REVFXEmitterComponentSetParticleLifeSpan()
{
  return MEMORY[0x24BE25D20]();
}

uint64_t REVFXEmitterComponentSetParticleLifeSpanVariation()
{
  return MEMORY[0x24BE25D28]();
}

uint64_t REVFXEmitterComponentSetParticleMass()
{
  return MEMORY[0x24BE25D30]();
}

uint64_t REVFXEmitterComponentSetParticleMassVariation()
{
  return MEMORY[0x24BE25D38]();
}

uint64_t REVFXEmitterComponentSetParticleSize()
{
  return MEMORY[0x24BE25D40]();
}

uint64_t REVFXEmitterComponentSetParticleSizeVariation()
{
  return MEMORY[0x24BE25D48]();
}

uint64_t REVFXEmitterComponentSetParticleSpeed()
{
  return MEMORY[0x24BE25D50]();
}

uint64_t REVFXEmitterComponentSetParticleSpeedVariation()
{
  return MEMORY[0x24BE25D58]();
}

uint64_t REVFXEmitterComponentSetRadialAmount()
{
  return MEMORY[0x24BE25D60]();
}

uint64_t REVFXEmitterComponentSetRadialGravityCenter()
{
  return MEMORY[0x24BE25D68]();
}

uint64_t REVFXEmitterComponentSetRadialGravityStrength()
{
  return MEMORY[0x24BE25D70]();
}

uint64_t REVFXEmitterComponentSetRestartCount()
{
  return MEMORY[0x24BE25D78]();
}

uint64_t REVFXEmitterComponentSetRowCount()
{
  return MEMORY[0x24BE25D80]();
}

uint64_t REVFXEmitterComponentSetSimulationRate()
{
  return MEMORY[0x24BE25D88]();
}

uint64_t REVFXEmitterComponentSetSimulationState()
{
  return MEMORY[0x24BE25D90]();
}

uint64_t REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespan()
{
  return MEMORY[0x24BE25D98]();
}

uint64_t REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespanPower()
{
  return MEMORY[0x24BE25DA0]();
}

uint64_t REVFXEmitterComponentSetSortOrder()
{
  return MEMORY[0x24BE25DA8]();
}

uint64_t REVFXEmitterComponentSetSpawnInheritParentColor()
{
  return MEMORY[0x24BE25DB0]();
}

uint64_t REVFXEmitterComponentSetSpawnOccasion()
{
  return MEMORY[0x24BE25DB8]();
}

uint64_t REVFXEmitterComponentSetSpawnSpreadFactor()
{
  return MEMORY[0x24BE25DC0]();
}

uint64_t REVFXEmitterComponentSetSpawnSpreadFactorVariation()
{
  return MEMORY[0x24BE25DC8]();
}

uint64_t REVFXEmitterComponentSetSpawnVelocityFactor()
{
  return MEMORY[0x24BE25DD0]();
}

uint64_t REVFXEmitterComponentSetSpreadingAngle()
{
  return MEMORY[0x24BE25DD8]();
}

uint64_t REVFXEmitterComponentSetStartColorRangeA()
{
  return MEMORY[0x24BE25DE0]();
}

uint64_t REVFXEmitterComponentSetStartColorRangeB()
{
  return MEMORY[0x24BE25DE8]();
}

uint64_t REVFXEmitterComponentSetStretchFactor()
{
  return MEMORY[0x24BE25DF0]();
}

uint64_t REVFXEmitterComponentSetTorusInnerRadius()
{
  return MEMORY[0x24BE25DF8]();
}

uint64_t REVFXEmitterComponentSetUseEndColor()
{
  return MEMORY[0x24BE25E00]();
}

uint64_t REVFXEmitterComponentSetUseEndColorRange()
{
  return MEMORY[0x24BE25E08]();
}

uint64_t REVFXEmitterComponentSetUseStartColorRange()
{
  return MEMORY[0x24BE25E10]();
}

uint64_t REVFXEmitterComponentSetVortexDirection()
{
  return MEMORY[0x24BE25E18]();
}

uint64_t REVFXEmitterComponentSetVortexStrength()
{
  return MEMORY[0x24BE25E20]();
}

uint64_t REVFXEmitterComponentSetWarmupDuration()
{
  return MEMORY[0x24BE25E28]();
}

uint64_t REVFXEmitterComponentUpdateCollisionPlane()
{
  return MEMORY[0x24BE25E30]();
}

uint64_t REVFXGetLibraryURLForSystemName()
{
  return MEMORY[0x24BE25E38]();
}

uint64_t REVFXSceneComponentGetAsset()
{
  return MEMORY[0x24BE25E48]();
}

uint64_t REVFXSceneComponentGetComponentType()
{
  return MEMORY[0x24BE25E50]();
}

uint64_t REVFXSceneComponentGetParameterBool()
{
  return MEMORY[0x24BE25E58]();
}

uint64_t REVFXSceneComponentGetParameterFloat()
{
  return MEMORY[0x24BE25E60]();
}

uint64_t REVFXSceneComponentGetParameterFloat2()
{
  return MEMORY[0x24BE25E68]();
}

uint64_t REVFXSceneComponentGetParameterFloat3()
{
  return MEMORY[0x24BE25E70]();
}

uint64_t REVFXSceneComponentGetParameterFloat3x3()
{
  return MEMORY[0x24BE25E78]();
}

uint64_t REVFXSceneComponentGetParameterFloat4()
{
  return MEMORY[0x24BE25E80]();
}

uint64_t REVFXSceneComponentGetParameterFloat4x4()
{
  return MEMORY[0x24BE25E88]();
}

uint64_t REVFXSceneComponentGetParameterInt()
{
  return MEMORY[0x24BE25E90]();
}

uint64_t REVFXSceneComponentGetParameterInt16()
{
  return MEMORY[0x24BE25E98]();
}

uint64_t REVFXSceneComponentGetParameterInt32()
{
  return MEMORY[0x24BE25EA0]();
}

uint64_t REVFXSceneComponentGetParameterInt64()
{
  return MEMORY[0x24BE25EA8]();
}

uint64_t REVFXSceneComponentGetParameterInt8()
{
  return MEMORY[0x24BE25EB0]();
}

uint64_t REVFXSceneComponentGetParameterKeyframeAnimation()
{
  return MEMORY[0x24BE25EB8]();
}

uint64_t REVFXSceneComponentGetParameterString()
{
  return MEMORY[0x24BE25EC0]();
}

uint64_t REVFXSceneComponentGetParameterUInt16()
{
  return MEMORY[0x24BE25EC8]();
}

uint64_t REVFXSceneComponentGetParameterUInt32()
{
  return MEMORY[0x24BE25ED0]();
}

uint64_t REVFXSceneComponentGetParameterUInt64()
{
  return MEMORY[0x24BE25ED8]();
}

uint64_t REVFXSceneComponentGetParameterUInt8()
{
  return MEMORY[0x24BE25EE0]();
}

uint64_t REVFXSceneComponentGetSimulationRate()
{
  return MEMORY[0x24BE25EE8]();
}

uint64_t REVFXSceneComponentGetSimulationState()
{
  return MEMORY[0x24BE25EF0]();
}

uint64_t REVFXSceneComponentGetSimulationTime()
{
  return MEMORY[0x24BE25EF8]();
}

uint64_t REVFXSceneComponentResetSimulation()
{
  return MEMORY[0x24BE25F10]();
}

uint64_t REVFXSceneComponentSetAsset()
{
  return MEMORY[0x24BE25F18]();
}

uint64_t REVFXSceneComponentSetParameterBool()
{
  return MEMORY[0x24BE25F20]();
}

uint64_t REVFXSceneComponentSetParameterFloat()
{
  return MEMORY[0x24BE25F28]();
}

uint64_t REVFXSceneComponentSetParameterFloat2()
{
  return MEMORY[0x24BE25F30]();
}

uint64_t REVFXSceneComponentSetParameterFloat3()
{
  return MEMORY[0x24BE25F38]();
}

uint64_t REVFXSceneComponentSetParameterFloat3x3()
{
  return MEMORY[0x24BE25F40]();
}

uint64_t REVFXSceneComponentSetParameterFloat4()
{
  return MEMORY[0x24BE25F48]();
}

uint64_t REVFXSceneComponentSetParameterFloat4x4()
{
  return MEMORY[0x24BE25F50]();
}

uint64_t REVFXSceneComponentSetParameterInt()
{
  return MEMORY[0x24BE25F58]();
}

uint64_t REVFXSceneComponentSetParameterInt16()
{
  return MEMORY[0x24BE25F60]();
}

uint64_t REVFXSceneComponentSetParameterInt32()
{
  return MEMORY[0x24BE25F68]();
}

uint64_t REVFXSceneComponentSetParameterInt64()
{
  return MEMORY[0x24BE25F70]();
}

uint64_t REVFXSceneComponentSetParameterInt8()
{
  return MEMORY[0x24BE25F78]();
}

uint64_t REVFXSceneComponentSetParameterKeyframeAnimation()
{
  return MEMORY[0x24BE25F80]();
}

uint64_t REVFXSceneComponentSetParameterString()
{
  return MEMORY[0x24BE25F88]();
}

uint64_t REVFXSceneComponentSetParameterUInt16()
{
  return MEMORY[0x24BE25F90]();
}

uint64_t REVFXSceneComponentSetParameterUInt32()
{
  return MEMORY[0x24BE25F98]();
}

uint64_t REVFXSceneComponentSetParameterUInt64()
{
  return MEMORY[0x24BE25FA0]();
}

uint64_t REVFXSceneComponentSetParameterUInt8()
{
  return MEMORY[0x24BE25FA8]();
}

uint64_t REVFXSceneComponentSetPortalPaddingForCollisions()
{
  return MEMORY[0x24BE25FB0]();
}

uint64_t REVFXSceneComponentSetSimulationRate()
{
  return MEMORY[0x24BE25FB8]();
}

uint64_t REVFXSceneComponentSetSimulationState()
{
  return MEMORY[0x24BE25FC0]();
}

uint64_t REVFXSceneComponentSetSimulationTime()
{
  return MEMORY[0x24BE25FC8]();
}

uint64_t REVFXSceneComponentStartCollidingOutsidePortal()
{
  return MEMORY[0x24BE25FD0]();
}

uint64_t REVFXSceneComponentStartFetchingParameter()
{
  return MEMORY[0x24BE25FD8]();
}

uint64_t REVFXSceneComponentStopCollidingOutsidePortal()
{
  return MEMORY[0x24BE25FE0]();
}

uint64_t REVFXSceneComponentStopFetchingParameter()
{
  return MEMORY[0x24BE25FE8]();
}

uint64_t REVideoAssetGetAVPlayer()
{
  return MEMORY[0x24BE25FF8]();
}

uint64_t REVideoAssetGetAVSampleBufferVideoRenderer()
{
  return MEMORY[0x24BE26000]();
}

uint64_t REVideoAssetGetAudioInputMode()
{
  return MEMORY[0x24BE26008]();
}

uint64_t REVideoAssetGetFileAssetCount()
{
  return MEMORY[0x24BE26010]();
}

uint64_t REVideoAssetGetRemotePlayer()
{
  return MEMORY[0x24BE26018]();
}

uint64_t REVideoAssetGetReverbSendLevelDecibels()
{
  return MEMORY[0x24BE26020]();
}

uint64_t REVideoAssetSetAVPlayer()
{
  return MEMORY[0x24BE26028]();
}

uint64_t REVideoAssetSetAudioInputMode()
{
  return MEMORY[0x24BE26030]();
}

uint64_t REVideoAssetSetRemotePlayer()
{
  return MEMORY[0x24BE26038]();
}

uint64_t REVideoAssetSetReverbSendLevelDecibels()
{
  return MEMORY[0x24BE26040]();
}

uint64_t REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials()
{
  return MEMORY[0x24BE26048]();
}

uint64_t REVideoComponentGetComponentType()
{
  return MEMORY[0x24BE26050]();
}

uint64_t REVideoComponentGetCurrentImageSize()
{
  return MEMORY[0x24BE26058]();
}

uint64_t REVideoComponentGetCurrentViewingMode()
{
  return MEMORY[0x24BE26060]();
}

uint64_t REVideoComponentGetDesiredViewingMode()
{
  return MEMORY[0x24BE26068]();
}

uint64_t REVideoComponentGetFadeThreshold()
{
  return MEMORY[0x24BE26070]();
}

uint64_t REVideoComponentGetMaterialAsset()
{
  return MEMORY[0x24BE26078]();
}

uint64_t REVideoComponentGetVideoAsset()
{
  return MEMORY[0x24BE26080]();
}

uint64_t REVideoComponentSetDesiredViewingMode()
{
  return MEMORY[0x24BE26088]();
}

uint64_t REVideoComponentSetFadeThreshold()
{
  return MEMORY[0x24BE26090]();
}

uint64_t REVideoComponentSetMaterialAsset()
{
  return MEMORY[0x24BE26098]();
}

uint64_t REVideoComponentSetVideoAsset()
{
  return MEMORY[0x24BE260A0]();
}

uint64_t REVideoPlayerComponentGetComponentType()
{
  return MEMORY[0x24BE260A8]();
}

uint64_t REVideoPlayerComponentGetDesiredViewingMode()
{
  return MEMORY[0x24BE260B0]();
}

uint64_t REVideoPlayerComponentGetEnableReflections()
{
  return MEMORY[0x24BE260B8]();
}

uint64_t REVideoPlayerComponentGetGuid()
{
  return MEMORY[0x24BE260C0]();
}

uint64_t REVideoPlayerComponentGetLowLatencyEnabled()
{
  return MEMORY[0x24BE260C8]();
}

uint64_t REVideoPlayerComponentGetScreenAspectRatioAnimationEnabled()
{
  return MEMORY[0x24BE260D0]();
}

uint64_t REVideoPlayerComponentGetScreenDeferAspectRatioTransitionToApp()
{
  return MEMORY[0x24BE260D8]();
}

uint64_t REVideoPlayerComponentGetScreenRoundedCornerEnabled()
{
  return MEMORY[0x24BE260E0]();
}

uint64_t REVideoPlayerComponentGetVideoAsset()
{
  return MEMORY[0x24BE260E8]();
}

uint64_t REVideoPlayerComponentPreloadVideoAsset()
{
  return MEMORY[0x24BE260F0]();
}

uint64_t REVideoPlayerComponentSetEnableReflections()
{
  return MEMORY[0x24BE260F8]();
}

uint64_t REVideoPlayerComponentSetGuid()
{
  return MEMORY[0x24BE26100]();
}

uint64_t REVideoPlayerComponentSetLowLatencyEnabled()
{
  return MEMORY[0x24BE26108]();
}

uint64_t REVideoPlayerComponentSetScreenAspectRatioAnimationEnabled()
{
  return MEMORY[0x24BE26110]();
}

uint64_t REVideoPlayerComponentSetScreenDeferAspectRatioTransitionToApp()
{
  return MEMORY[0x24BE26118]();
}

uint64_t REVideoPlayerComponentSetScreenRoundedCornerEnabled()
{
  return MEMORY[0x24BE26120]();
}

uint64_t REVideoPlayerComponentSetVideoAsset()
{
  return MEMORY[0x24BE26128]();
}

uint64_t REVideoPlayerStatusComponentDidUpdateInApp()
{
  return MEMORY[0x24BE26130]();
}

uint64_t REVideoPlayerStatusComponentGetComponentType()
{
  return MEMORY[0x24BE26138]();
}

uint64_t REVideoPlayerStatusComponentGetCurrentPlayerScreenSize()
{
  return MEMORY[0x24BE26140]();
}

uint64_t REVideoPlayerStatusComponentGetCurrentPlayerScreenVideoDimension()
{
  return MEMORY[0x24BE26148]();
}

uint64_t REVideoPlayerStatusComponentGetCurrentSceneSize()
{
  return MEMORY[0x24BE26150]();
}

uint64_t REVideoPlayerStatusComponentGetSafeZoneRadius()
{
  return MEMORY[0x24BE26158]();
}

uint64_t REVirtualEnvironmentProbeComponentAddResource()
{
  return MEMORY[0x24BE26160]();
}

uint64_t REVirtualEnvironmentProbeComponentClearResources()
{
  return MEMORY[0x24BE26168]();
}

uint64_t REVirtualEnvironmentProbeComponentGetComponentType()
{
  return MEMORY[0x24BE26170]();
}

uint64_t REVirtualEnvironmentProbeComponentGetIntensityExponent()
{
  return MEMORY[0x24BE26178]();
}

uint64_t REVirtualEnvironmentProbeComponentGetRelativeWeight()
{
  return MEMORY[0x24BE26180]();
}

uint64_t REVirtualEnvironmentProbeComponentGetResource()
{
  return MEMORY[0x24BE26188]();
}

uint64_t REVirtualEnvironmentProbeComponentGetResourceCount()
{
  return MEMORY[0x24BE26190]();
}

uint64_t REVirtualEnvironmentProbeComponentSetIntensityExponent()
{
  return MEMORY[0x24BE26198]();
}

uint64_t REVirtualEnvironmentProbeComponentSetRelativeWeight()
{
  return MEMORY[0x24BE261A0]();
}

uint64_t REWorldRootComponentCopyWorldRoot()
{
  return MEMORY[0x24BE261B0]();
}

uint64_t REWorldRootComponentGetComponentType()
{
  return MEMORY[0x24BE261B8]();
}

uint64_t REWorldRootComponentSetWorldRoot()
{
  return MEMORY[0x24BE261C0]();
}

uint64_t REZipArchiveCopyFileAsData()
{
  return MEMORY[0x24BE261C8]();
}

uint64_t RFARKitDataProviderCreate()
{
  return MEMORY[0x24BE7CD30]();
}

uint64_t RFARKitDataProviderGetARSession()
{
  return MEMORY[0x24BE7CD38]();
}

uint64_t RFARKitDataProviderSetARSession()
{
  return MEMORY[0x24BE7CD40]();
}

uint64_t RFAnchorDataProviderCreate()
{
  return MEMORY[0x24BE7CD48]();
}

uint64_t RFAnchorManagementServiceCleanupWithServiceLocator()
{
  return MEMORY[0x24BE7CD50]();
}

uint64_t RFAnchorManagementServiceCreate()
{
  return MEMORY[0x24BE7CD58]();
}

uint64_t RFAnchorManagementServiceUpdateByDeltaTime()
{
  return MEMORY[0x24BE7CD60]();
}

uint64_t RFAnchorManagementSetClientNeedImageAnchoring()
{
  return MEMORY[0x24BE7CD68]();
}

uint64_t RFAnchorManagementSetClientNeedObjectAnchoring()
{
  return MEMORY[0x24BE7CD70]();
}

uint64_t RFAnchorManagementSetClientNeedPlaneAnchoring()
{
  return MEMORY[0x24BE7CD78]();
}

uint64_t RFAnchorManagementSetClientNeedWorldAnchoring()
{
  return MEMORY[0x24BE7CD80]();
}

uint64_t RFAnchorManagementSetNeedClientAnchoring()
{
  return MEMORY[0x24BE7CD88]();
}

uint64_t RFAnchorManagementUpdateAnchoringInScene()
{
  return MEMORY[0x24BE7CD90]();
}

uint64_t RFAtmospherePlacementServiceCreate()
{
  return MEMORY[0x24BE7CD98]();
}

uint64_t RFEnvironmentProbePlacementServiceCreate()
{
  return MEMORY[0x24BE7CDA0]();
}

uint64_t RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback()
{
  return MEMORY[0x24BE7CDA8]();
}

uint64_t RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback()
{
  return MEMORY[0x24BE7CDB0]();
}

uint64_t RFLoggingServiceCreate()
{
  return MEMORY[0x24BE7CDB8]();
}

uint64_t RFMeshReconstructionServiceCreate()
{
  return MEMORY[0x24BE7CDC0]();
}

uint64_t RFServiceManagerCleanUp()
{
  return MEMORY[0x24BE7CDC8]();
}

uint64_t RFServiceManagerCreate()
{
  return MEMORY[0x24BE7CDD0]();
}

uint64_t RFServiceManagerGenerateSnapshot()
{
  return MEMORY[0x24BE7CDD8]();
}

uint64_t RFServiceManagerGetARKitDataProvider()
{
  return MEMORY[0x24BE7CDE0]();
}

uint64_t RFServiceManagerGetAnchorManagementService()
{
  return MEMORY[0x24BE7CDE8]();
}

uint64_t RFServiceManagerGetEnvironmentProbePlacementService()
{
  return MEMORY[0x24BE7CDF0]();
}

uint64_t RFServiceManagerSetARKitDataProvider()
{
  return MEMORY[0x24BE7CDF8]();
}

uint64_t RFServiceManagerSetAnchorDataProvider()
{
  return MEMORY[0x24BE7CE00]();
}

uint64_t RFServiceManagerSetAnchorManagementService()
{
  return MEMORY[0x24BE7CE08]();
}

uint64_t RFServiceManagerSetAtmospherePlacementService()
{
  return MEMORY[0x24BE7CE10]();
}

uint64_t RFServiceManagerSetEnvironmentProbePlacementService()
{
  return MEMORY[0x24BE7CE18]();
}

uint64_t RFServiceManagerSetLoggingService()
{
  return MEMORY[0x24BE7CE20]();
}

uint64_t RFServiceManagerSetMeshReconstructionService()
{
  return MEMORY[0x24BE7CE28]();
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync()
{
  return MEMORY[0x24BE266D8]();
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsync()
{
  return MEMORY[0x24BE266E0]();
}

uint64_t RIOEntityUsingMaterialCreateFromMtlxURLAsync()
{
  return MEMORY[0x24BE266E8]();
}

uint64_t RIOImportSessionCreateWithStage()
{
  return MEMORY[0x24BE26730]();
}

uint64_t RIOImportSessionGetEntityAtPrimPath()
{
  return MEMORY[0x24BE26780]();
}

uint64_t RIOImportSessionGetRootEntity()
{
  return MEMORY[0x24BE267A8]();
}

uint64_t RIOImportSessionGetStage()
{
  return MEMORY[0x24BE267B8]();
}

uint64_t RIOImportSessionSetSceneUpdatePassCompletion()
{
  return MEMORY[0x24BE26858]();
}

uint64_t RIOImportSessionUpdate()
{
  return MEMORY[0x24BE26868]();
}

uint64_t RIOPxrSdfPathCopyString()
{
  return MEMORY[0x24BE26C30]();
}

uint64_t RIOPxrSdfPathCreateFromCString()
{
  return MEMORY[0x24BE26CE0]();
}

uint64_t RIOPxrTfTokenCreateWithCString()
{
  return MEMORY[0x24BE271C8]();
}

uint64_t RIOPxrTfTokenEmpty()
{
  return MEMORY[0x24BE271D0]();
}

uint64_t RIOPxrUsdEditTargetCreateWithLayer()
{
  return MEMORY[0x24BE272A8]();
}

uint64_t RIOPxrUsdObjectCopyPath()
{
  return MEMORY[0x24BE27348]();
}

uint64_t RIOPxrUsdPrimAddReference()
{
  return MEMORY[0x24BE273C0]();
}

uint64_t RIOPxrUsdPrimCopyChildren()
{
  return MEMORY[0x24BE27418]();
}

uint64_t RIOPxrUsdPrimCopyVariantSet()
{
  return MEMORY[0x24BE27480]();
}

uint64_t RIOPxrUsdPrimCopyVariantSets()
{
  return MEMORY[0x24BE27488]();
}

uint64_t RIOPxrUsdPrimCreateCreateRelationship()
{
  return MEMORY[0x24BE27498]();
}

uint64_t RIOPxrUsdPrimHasVariantSets()
{
  return MEMORY[0x24BE27590]();
}

uint64_t RIOPxrUsdRelationshipSetTargets()
{
  return MEMORY[0x24BE27680]();
}

uint64_t RIOPxrUsdStageCopyDefaultPrim()
{
  return MEMORY[0x24BE27728]();
}

uint64_t RIOPxrUsdStageCopySessionLayer()
{
  return MEMORY[0x24BE27758]();
}

uint64_t RIOPxrUsdStageCreateInMemory()
{
  return MEMORY[0x24BE27780]();
}

uint64_t RIOPxrUsdStageCreatePrimIfNeeded()
{
  return MEMORY[0x24BE27790]();
}

uint64_t RIOPxrUsdStageHasPrimAtPrimPath()
{
  return MEMORY[0x24BE27838]();
}

uint64_t RIOPxrUsdStageSetEditTarget()
{
  return MEMORY[0x24BE27888]();
}

uint64_t RIOPxrUsdVariantSetClearVariantSelection()
{
  return MEMORY[0x24BE27918]();
}

uint64_t RIOPxrUsdVariantSetCopyVariantNames()
{
  return MEMORY[0x24BE27938]();
}

uint64_t RIOPxrUsdVariantSetCopyVariantSelection()
{
  return MEMORY[0x24BE27940]();
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelection()
{
  return MEMORY[0x24BE27948]();
}

uint64_t RIOPxrUsdVariantSetsCopySetNames()
{
  return MEMORY[0x24BE27970]();
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSet()
{
  return MEMORY[0x24BE27980]();
}

uint64_t RIOPxrUsdVariantSetsHasVariantSet()
{
  return MEMORY[0x24BE27990]();
}

uint64_t RIOPxrUsdVariantSetsSetSelection()
{
  return MEMORY[0x24BE27998]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _REArchiveOperationArchiveToURL()
{
  return MEMORY[0x24BE261D8]();
}

uint64_t _REArchiveOperationCreateWithURL()
{
  return MEMORY[0x24BE261E0]();
}

uint64_t _REArchiveOperationRelease()
{
  return MEMORY[0x24BE261E8]();
}

uint64_t _REArchiveOperationSetArchiveCompressionLevel()
{
  return MEMORY[0x24BE261F0]();
}

uint64_t _REArchiveOperationSetEnvelopeVersion()
{
  return MEMORY[0x24BE261F8]();
}

uint64_t _REArchiveOperationSetProgress()
{
  return MEMORY[0x24BE26200]();
}

uint64_t _REArchiveOperationSetStreamCompression()
{
  return MEMORY[0x24BE26208]();
}

uint64_t _REArchiveOperationUnarchiveToURL()
{
  return MEMORY[0x24BE26210]();
}

uint64_t _REArchiveOperationUnarchiveToURLWithProfiling()
{
  return MEMORY[0x24BE26218]();
}

uint64_t _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround()
{
  return MEMORY[0x24BE26220]();
}

uint64_t _REAssetManagerIsFullLoadTracingEnabled()
{
  return MEMORY[0x24BE26228]();
}

uint64_t _RERenderManagerExportTextureAssetToKTXWithErrorHandling()
{
  return MEMORY[0x24BE26230]();
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x24BDAC820]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x24BDAC828]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

double _simd_orient_pd2(simd_double2 a1, simd_double2 a2, simd_double2 a3)
{
  double result;

  MEMORY[0x24BDACDE0]((__n128)a1, (__n128)a2, (__n128)a3);
  return result;
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

uint32_t arc4random(void)
{
  return MEMORY[0x24BDAD158]();
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

int atexit(void (*a1)(void))
{
  return MEMORY[0x24BDAD248](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x24BDAD288](a1, *(_QWORD *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x24BDAD2A0](a1, *(_QWORD *)&a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

int dlclose(void *__handle)
{
  return MEMORY[0x24BDAE060](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t geom_collection_data_2d()
{
  return MEMORY[0x24BE3D248]();
}

uint64_t geom_collection_size_d()
{
  return MEMORY[0x24BE3D268]();
}

uint64_t geom_collection_size_u()
{
  return MEMORY[0x24BE3D278]();
}

uint64_t geom_create_collection_2d()
{
  return MEMORY[0x24BE3D288]();
}

uint64_t geom_create_collection_d()
{
  return MEMORY[0x24BE3D298]();
}

uint64_t geom_create_collection_u()
{
  return MEMORY[0x24BE3D2A0]();
}

uint64_t geom_cubic_bezier_tangent_at_2d()
{
  return MEMORY[0x24BE3D2C8]();
}

uint64_t geom_inset_evaluator_advance_inset_to_2d()
{
  return MEMORY[0x24BE3D2D0]();
}

uint64_t geom_inset_evaluator_extract_joiner_mesh_2d()
{
  return MEMORY[0x24BE3D2D8]();
}

uint64_t geom_inset_evaluator_extract_offset_curve_2d()
{
  return MEMORY[0x24BE3D2E0]();
}

uint64_t geom_inset_evaluator_get_computed_inset_distance_2d()
{
  return MEMORY[0x24BE3D2E8]();
}

uint64_t geom_quadratic_bezier_tangent_at_2d()
{
  return MEMORY[0x24BE3D318]();
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x24BDAEB58](*(_QWORD *)&error_value);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x24BEE7198]();
}

uint64_t swift_asyncLet_finish()
{
  return MEMORY[0x24BEE71A0]();
}

uint64_t swift_asyncLet_get()
{
  return MEMORY[0x24BEE71A8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x24BEE4C48]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x24BEE4C70]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x24BEE4C88]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x24BEE4C90]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x24BEE4D60]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x24BEE4E88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x24BEE4FB8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x24BEE4FC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x24BEE4FE0]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x24BEE4FE8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x24BEE4FF0]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x24BEE4FF8]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x24BEE5000]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x24BEE5018]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x24BEE5020]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x24BEE5040]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x24BEE5048]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_threads(task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt)
{
  return MEMORY[0x24BDB01C8](*(_QWORD *)&target_task, act_list, act_listCnt);
}

