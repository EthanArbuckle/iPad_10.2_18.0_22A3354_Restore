uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImpulseAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ImpulseAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImpulseAction.CodingKeys()
{
  lazy protocol witness table accessor for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImpulseAction.CodingKeys()
{
  lazy protocol witness table accessor for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ImpulseAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImpulseAction.CodingKeys>);
  v13 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v11 = *((_OWORD *)v1 + 2);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)&v14 = v7;
  *((_QWORD *)&v14 + 1) = v6;
  v15 = v8;
  v16 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v9 = v12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    v14 = v11;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v3);
}

unint64_t lazy protocol witness table accessor for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImpulseAction.CodingKeys, &unk_24DFAE668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImpulseAction.CodingKeys, &unk_24DFAE668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImpulseAction.CodingKeys, &unk_24DFAE668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImpulseAction.CodingKeys, &unk_24DFAE668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys);
  }
  return result;
}

uint64_t ImpulseAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 v17;
  int v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImpulseAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImpulseAction.CodingKeys and conformance ImpulseAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v14 = *((_QWORD *)&v16 + 1);
  v9 = v16;
  v10 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v19 = 1;
  v15 = v9;
  v11 = v14;
  v18 = v10;
  outlined copy of ActionEntityResolution();
  lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v16;
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImpulseAction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ImpulseAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImpulseAction(_QWORD *a1)
{
  return ImpulseAction.encode(to:)(a1);
}

uint64_t initializeWithCopy for ImpulseAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  return a1;
}

uint64_t assignWithCopy for ImpulseAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  return a1;
}

uint64_t assignWithTake for ImpulseAction(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImpulseAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImpulseAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpulseAction()
{
  return &type metadata for ImpulseAction;
}

uint64_t storeEnumTagSinglePayload for ImpulseAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BB052C8 + 4 * byte_21BE603B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BB052FC + 4 * asc_21BE603B0[v4]))();
}

uint64_t sub_21BB052FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB05304(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BB0530CLL);
  return result;
}

uint64_t sub_21BB05318(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BB05320);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BB05324(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BB0532C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ImpulseAction.CodingKeys()
{
  return &unk_24DFAE668;
}

uint64_t ImpulseActionHandler.applyImpulse(event:)(float32x4_t *a1)
{
  uint64_t v1;
  __int8 v2;
  uint64_t SceneNullable;
  uint64_t v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  const char *v33;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float32x4_t v54;
  char v55[16];
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  uint64_t v74;
  _QWORD v75[14];
  uint64_t v76;
  unint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  uint64_t v96;

  v1 = a1[1].i64[0];
  v2 = a1[2].i8[0];
  v54 = a1[3];
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if ((v2 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        v4 = SceneNullable;
        v5 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v5)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v4);
        }
        v10 = Scene.findEntity(named:)();
        swift_release();
        outlined consume of ActionEntityResolution();
        if (v10)
          goto LABEL_12;
      }
      else
      {
        outlined consume of ActionEntityResolution();
      }
    }
    else
    {
      v76 = v1;
      outlined copy of ActionEntityResolution();
      v9 = Entity.subscript.getter(&v76);
      outlined consume of ActionEntityResolution();
      if (v9)
      {
LABEL_12:
        swift_retain();
        if (REEntityGetComponent())
        {
          CollisionComponent.init(_:)((uint64_t)&v76);
          swift_release();
          swift_bridgeObjectRelease();
          swift_retain();
          if (REEntityGetComponent())
          {
            PhysicsBodyComponent.init(_:)((uint64_t)v55);
            v11 = v55[0];
            v12 = v56;
            v13 = v60;
            v14 = v61;
            v15 = v62;
            v16 = v63;
            v17 = v64;
            v18 = v65;
            v19 = v66;
            v20 = v74;
            LOBYTE(v76) = v55[0];
            v78 = v56;
            v52 = v58;
            v53 = v57;
            v79 = v57;
            v80 = v58;
            v50 = v69;
            v51 = v59;
            v81 = v59;
            v82 = v60;
            v83 = v61;
            v84 = v62;
            v85 = v63;
            v86 = v64;
            v87 = v65;
            v88 = v66;
            v45 = v68;
            v46 = v67;
            v89 = v67;
            v90 = v68;
            v91 = v69;
            v92 = v70;
            v48 = v71;
            v49 = v70;
            v93 = v71;
            v94 = v72;
            v47 = v72;
            v44 = v73;
            v95 = v73;
            v96 = v74;
            destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(&v76, v21);
            outlined init with take of PhysicsBodyComponent?((uint64_t)&v76, (uint64_t)v75);
            outlined retain of PhysicsBodyComponent?((uint64_t)v75);
            swift_release();
            if (v11 == 2)
            {
              v22 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
              v55[0] = 2;
              v56 = v12;
              v57 = v53;
              v58 = v52;
              v59 = v51;
              v60 = v13;
              v61 = v14;
              v62 = v15;
              v63 = v16;
              v64 = v17;
              v65 = v18;
              v66 = v19;
              v67 = v46;
              v68 = v45;
              v69 = v50;
              v70 = v49;
              v71 = v48;
              v72 = v47;
              v73 = v44;
              v74 = v20;
              ImpulseActionHandler.applyLinearImpulse(to:with:for:)(v55, v22, (uint64_t)&v76, v54);
              outlined release of PhysicsBodyComponent?((uint64_t)v75);
              outlined release of PhysicsBodyComponent?((uint64_t)v75);
              v55[0] = v76;
              v56 = v78;
              v57 = v79;
              v58 = v80;
              v59 = v81;
              v60 = v82;
              v61 = v83;
              v62 = v84;
              v63 = v85;
              v64 = v86;
              v65 = v87;
              v66 = v88;
              v67 = v89;
              v68 = v90;
              v69 = v91;
              v70 = v92;
              v71 = v93;
              v72 = v94;
              v73 = v95;
              v74 = v96;
              destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v55, v23);
              outlined init with take of PhysicsBodyComponent?((uint64_t)v55, (uint64_t)&v76);
              swift_retain();
              swift_retain();
              specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v76);
              swift_release();
              swift_release_n();
              swift_release_n();
              return swift_release();
            }
            outlined release of PhysicsBodyComponent?((uint64_t)v75);
            v76 = 0;
            v77 = 0xE000000000000000;
            _StringGuts.grow(_:)(124);
            v39._countAndFlagsBits = 0x2072656C646E6148;
            v39._object = (void *)0xEC00000020726F66;
            String.append(_:)(v39);
            *(_QWORD *)v55 = &type metadata for ImpulseAction;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImpulseAction.Type);
            v40._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v40);
            swift_bridgeObjectRelease();
            v41._countAndFlagsBits = 0xD000000000000038;
            v41._object = (void *)0x800000021BE87E80;
            String.append(_:)(v41);
            REEntityGetName();
            v42._countAndFlagsBits = String.init(cString:)();
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            v43._countAndFlagsBits = 0xD000000000000034;
            v43._object = (void *)0x800000021BE87EC0;
            String.append(_:)(v43);
            specialized static AnimationLogger.logError(_:)(v76, v77);
            outlined release of PhysicsBodyComponent?((uint64_t)v75);
            swift_release();
            goto LABEL_20;
          }
          swift_release();
          v76 = 0;
          v77 = 0xE000000000000000;
          _StringGuts.grow(_:)(82);
          v34._countAndFlagsBits = 0x2072656C646E6148;
          v34._object = (void *)0xEC00000020726F66;
          String.append(_:)(v34);
          *(_QWORD *)v55 = &type metadata for ImpulseAction;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImpulseAction.Type);
          v35._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v32 = 0xD000000000000040;
          v33 = " failed to get physics body component from target entity named '";
        }
        else
        {
          swift_release();
          v76 = 0;
          v77 = 0xE000000000000000;
          _StringGuts.grow(_:)(79);
          v30._countAndFlagsBits = 0x2072656C646E6148;
          v30._object = (void *)0xEC00000020726F66;
          String.append(_:)(v30);
          v75[0] = &type metadata for ImpulseAction;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImpulseAction.Type);
          v31._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          v32 = 0xD00000000000003DLL;
          v33 = " failed to get collision component from target entity named '";
        }
        v36 = (unint64_t)(v33 - 32) | 0x8000000000000000;
        String.append(_:)(*(Swift::String *)&v32);
        REEntityGetName();
        v37._countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 10535;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        specialized static AnimationLogger.logError(_:)(v76, v77);
        swift_release();
LABEL_20:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    v76 = 0;
    v77 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v25._countAndFlagsBits = 0x2072656C646E6148;
    v25._object = (void *)0xEC00000020726F66;
    String.append(_:)(v25);
    v75[0] = &type metadata for ImpulseAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImpulseAction.Type);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD00000000000003BLL;
    v27._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v27);
    REEntityGetName();
    v28._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 10535;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v76, v77);
    goto LABEL_20;
  }
  v76 = 0;
  v77 = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v6._countAndFlagsBits = 0x2072656C646E6148;
  v6._object = (void *)0xEC00000020726F66;
  String.append(_:)(v6);
  v75[0] = &type metadata for ImpulseAction;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImpulseAction.Type);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x800000021BE85620;
  v8._countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v8);
  specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
  return swift_bridgeObjectRelease();
}

__n128 ImpulseActionHandler.applyLinearImpulse(to:with:for:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>)
{
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t SceneNullable;
  uint64_t v16;
  id v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __n128 result;
  char v25;
  float32x4_t v26;
  float32x4_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 4);
  v38 = *((_OWORD *)a1 + 2);
  v36 = *((_OWORD *)a1 + 4);
  v37 = *((_OWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 10);
  v9 = a1[88];
  v10 = a1[89];
  v11 = a1[90];
  v12 = a1[91];
  v13 = a1[92];
  v31 = a1[94];
  v32 = a1[93];
  v34 = *((_OWORD *)a1 + 7);
  v35 = *((_OWORD *)a1 + 6);
  v26 = *((float32x4_t *)a1 + 8);
  v33 = *((__n128 *)a1 + 9);
  v29 = a1[160];
  v30 = a1[95];
  v14 = *(_QWORD *)(a1 + 164);
  if (a2)
  {
    swift_retain();
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_8;
    v16 = SceneNullable;
    v25 = v13;
    v17 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v17)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v16);
    }
    v18 = Scene.physicsOrigin.getter();
    swift_release();
    v13 = v25;
    if (!v18)
LABEL_8:
      v18 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    swift_retain();
    v18 = 0;
  }
  *(double *)v19.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a2, v18);
  *(__n64 *)v22.f32 = simd_float4x4.transform(force:)(a4, v19, v20, v21);
  v28 = v22;
  swift_release();
  v23 = vaddq_f32(v26, v28);
  v23.i32[3] = 0;
  *(_BYTE *)a3 = v6;
  *(_DWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v38;
  *(_OWORD *)(a3 + 48) = v37;
  *(_OWORD *)(a3 + 64) = v36;
  *(_QWORD *)(a3 + 80) = v8;
  *(_BYTE *)(a3 + 88) = v9;
  *(_BYTE *)(a3 + 89) = v10;
  *(_BYTE *)(a3 + 90) = v11;
  *(_BYTE *)(a3 + 91) = v12;
  *(_BYTE *)(a3 + 92) = v13;
  *(_BYTE *)(a3 + 93) = v32;
  *(_BYTE *)(a3 + 94) = v31;
  *(_BYTE *)(a3 + 95) = v30;
  *(_OWORD *)(a3 + 96) = v35;
  *(_OWORD *)(a3 + 112) = v34;
  *(float32x4_t *)(a3 + 128) = v23;
  result = v33;
  *(__n128 *)(a3 + 144) = v33;
  *(_BYTE *)(a3 + 160) = v29;
  *(_QWORD *)(a3 + 164) = v14;
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance ImpulseActionHandler(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return ImpulseActionHandler.applyImpulse(event:)(v10);
}

uint64_t specialized ImpulseAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D497261656E696CLL && a2 == 0xED000065736C7570)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t outlined init with take of PhysicsBodyComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsBodyComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of PhysicsBodyComponent?(uint64_t a1)
{
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for ImpulseActionHandler()
{
  return &type metadata for ImpulseActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in ImpulseActionHandler()
{
  return &protocol witness table for ImpulseAction;
}

uint64_t __RKVisibilityHideLaunchAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityHideLaunchAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHideLaunchAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityHideLaunchAnimation.createVisibilityHideLaunchAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 108, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityHideLaunchAnimation.createVisibilityHideLaunchAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 67, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityHideLaunchAnimation.createVisibilityHideLaunchAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityHideLaunchAnimation.createVisibilityHideLaunchAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static _SystemUpdateRate._defaultUpdateInterval.getter()
{
  float v0;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if (!REServiceLocatorGetECSService())
    return 0.0;
  REECSManagerGetDefaultCustomSystemUpdateInterval();
  return v0;
}

uint64_t static _SystemUpdateRate._defaultUpdateInterval.setter()
{
  uint64_t result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  result = REServiceLocatorGetECSService();
  if (result)
  {
    REECSManagerSetDefaultCustomSystemScheduleType();
    return REECSManagerSetDefaultCustomSystemUpdateInterval();
  }
  return result;
}

void (*static _SystemUpdateRate._defaultUpdateInterval.modify(_QWORD *a1))(void **a1)
{
  char *v2;
  double *v3;
  float v4;
  double v5;

  v2 = (char *)malloc(0x50uLL);
  *a1 = v2;
  v3 = (double *)(v2 + 72);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if (REServiceLocatorGetECSService())
  {
    REECSManagerGetDefaultCustomSystemUpdateInterval();
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }
  *v3 = v5;
  return static _SystemUpdateRate._defaultUpdateInterval.modify;
}

void static _SystemUpdateRate._defaultUpdateInterval.modify(void **a1)
{
  void *v1;

  v1 = *a1;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if (REServiceLocatorGetECSService())
  {
    REECSManagerSetDefaultCustomSystemScheduleType();
    REECSManagerSetDefaultCustomSystemUpdateInterval();
  }
  free(v1);
}

void _SystemUpdateRate.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt64 v4;
  Swift::UInt v5;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  if (!(v2 >> 6))
  {
    Hasher._combine(_:)(1uLL);
    v5 = v1;
LABEL_11:
    Hasher._combine(_:)(v5);
    return;
  }
  if (v2 >> 6 != 1)
  {
    if (v1 | v2 ^ 0x80)
      v5 = 3;
    else
      v5 = 0;
    goto LABEL_11;
  }
  v3 = v2 & 1;
  Hasher._combine(_:)(2uLL);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int _SystemUpdateRate.hashValue.getter()
{
  Hasher.init(_seed:)();
  _SystemUpdateRate.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _SystemUpdateRate()
{
  Hasher.init(_seed:)();
  _SystemUpdateRate.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _SystemUpdateRate()
{
  Hasher.init(_seed:)();
  _SystemUpdateRate.hash(into:)();
  return Hasher._finalize()();
}

void _SystemUpdateRateProtocol._preferredUpdateRate.getter(uint64_t a1@<X8>)
{
  _SystemUpdateRateProtocol._preferredUpdateRate.getter(a1);
}

{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0x80;
}

uint64_t _SystemUpdateRateProtocol.setUpdateRate(scene:updateRate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  result = static System.coreCustomSystem(scene:)(a1, a3);
  if (result)
  {
    v6 = v3;
    v7 = v4;
    return specialized _SystemUpdateRateProtocol.setUpdateRate(coreCustomSystem:updateRate:)(result, (uint64_t)&v6);
  }
  return result;
}

BOOL specialized static _SystemUpdateRate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  double v4;
  unsigned int v5;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;

  v2 = *(double *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(double *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (!(v3 >> 6))
  {
    if (v5 <= 0x3F)
      return *(_QWORD *)&v2 == *(_QWORD *)&v4;
    return 0;
  }
  if (v3 >> 6 == 1)
  {
    if ((v5 & 0xC0) == 0x40 && v2 == v4)
      return (((v3 & 1) == 0) ^ v5) & 1;
    return 0;
  }
  v7 = v3 ^ 0x80;
  v8 = v5 & 0xC0;
  if (*(_QWORD *)&v2 | v7)
  {
    v10 = v8 == 128 && *(_QWORD *)&v4 == 1;
    if (!v10 || v5 != 128)
      return 0;
  }
  else
  {
    v9 = v8 == 128 && *(_QWORD *)&v4 == 0;
    if (!v9 || v5 != 128)
      return 0;
  }
  return 1;
}

uint64_t specialized _SystemUpdateRateProtocol._scheduleUpdate(scene:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = static System.coreCustomSystem(scene:)(a1, a2);
  if (result)
    return RECustomSystemEnqueueUpdateWithDeadline();
  return result;
}

uint64_t specialized _SystemUpdateRateProtocol.setUpdateRate(coreCustomSystem:updateRate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(a2 + 8);
  if (!(v2 >> 6))
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    REEngineGetPreferredFramesPerSecond();
    goto LABEL_3;
  }
  if (v2 >> 6 == 1)
  {
LABEL_3:
    RECustomSystemSetScheduleType();
    return RECustomSystemSetUpdateInterval();
  }
  if (*(_QWORD *)a2 | v2 ^ 0x80)
    return RECustomSystemSetScheduleType();
  else
    return RECustomSystemResetScheduleOptions();
}

unint64_t lazy protocol witness table accessor for type _SystemUpdateRate and conformance _SystemUpdateRate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SystemUpdateRate and conformance _SystemUpdateRate;
  if (!lazy protocol witness table cache variable for type _SystemUpdateRate and conformance _SystemUpdateRate)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for _SystemUpdateRate, &type metadata for _SystemUpdateRate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SystemUpdateRate and conformance _SystemUpdateRate);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _SystemUpdateRate(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _SystemUpdateRate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for _SystemUpdateRate(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for _SystemUpdateRate(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for _SystemUpdateRate(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_BYTE *)(result + 8) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SystemUpdateRate()
{
  return &type metadata for _SystemUpdateRate;
}

uint64_t dispatch thunk of _SystemUpdateRateProtocol._preferredUpdateRate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _SystemUpdateRateProtocol._scheduleUpdate(scene:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t __Engine.Configuration.__renderFlags.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t __Engine.Configuration.__renderFlags.setter(unsigned int *a1)
{
  return __Engine.Configuration.__renderFlags.setter(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21ED0]);
}

uint64_t __Engine.__allocating_init(configuration:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  __Engine.init(configuration:)(a1);
  return v2;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t __Engine.Configuration.__updateServices.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t __Engine.Configuration.clockMode.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t __Engine.Configuration.clockMode.setter(unsigned int *a1)
{
  return __Engine.Configuration.__renderFlags.setter(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21E98]);
}

uint64_t (*__Engine.Configuration.clockMode.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetClockMode();
  return __Engine.Configuration.clockMode.modify;
}

uint64_t __Engine.Configuration.clockMode.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.clockMode.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21E98]);
}

uint64_t __Engine.Configuration.useMetal.getter()
{
  return REEngineConfigurationGetUseMetal();
}

uint64_t __Engine.Configuration.useMetal.setter(char a1)
{
  return __Engine.Configuration.useMetal.setter(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE21EF0]);
}

uint64_t (*__Engine.Configuration.useMetal.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetUseMetal();
  return __Engine.Configuration.useMetal.modify;
}

uint64_t __Engine.Configuration.useMetal.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.useMetal.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EF0]);
}

uint64_t __Engine.Configuration.forExportOnly.getter()
{
  return REEngineConfigurationGetForExportOnly();
}

uint64_t __Engine.Configuration.forExportOnly.setter(char a1)
{
  return __Engine.Configuration.useMetal.setter(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE21EB8]);
}

uint64_t (*__Engine.Configuration.forExportOnly.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetForExportOnly();
  return __Engine.Configuration.forExportOnly.modify;
}

uint64_t __Engine.Configuration.forExportOnly.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.useMetal.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EB8]);
}

uint64_t __Engine.Configuration.useRealityIO.getter()
{
  return REEngineConfigurationGetUseRealityIO();
}

uint64_t __Engine.Configuration.useRealityIO.setter(char a1)
{
  return __Engine.Configuration.useMetal.setter(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE21F00]);
}

uint64_t (*__Engine.Configuration.useRealityIO.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetUseRealityIO();
  return __Engine.Configuration.useRealityIO.modify;
}

uint64_t __Engine.Configuration.useRealityIO.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.useMetal.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21F00]);
}

uint64_t __Engine.Configuration.usePhysicsSceneSystem.getter()
{
  return REEngineConfigurationGetUsePhysicsSceneSystem();
}

uint64_t __Engine.Configuration.usePhysicsSceneSystem.setter(char a1)
{
  return __Engine.Configuration.useMetal.setter(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE21EF8]);
}

uint64_t (*__Engine.Configuration.usePhysicsSceneSystem.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetUsePhysicsSceneSystem();
  return __Engine.Configuration.usePhysicsSceneSystem.modify;
}

uint64_t __Engine.Configuration.usePhysicsSceneSystem.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.useMetal.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EF8]);
}

uint64_t __Engine.Configuration.assetRuntimeSizeLimit.getter()
{
  return REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t __Engine.Configuration.assetRuntimeSizeLimit.setter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v1 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v1;
    swift_release_n();
    *v0 = v2;
  }
  return REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t (*__Engine.Configuration.assetRuntimeSizeLimit.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  return __Engine.Configuration.assetRuntimeSizeLimit.modify;
}

uint64_t __Engine.Configuration.assetRuntimeSizeLimit.modify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 8);
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v2 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    swift_release_n();
    *v1 = v3;
  }
  return REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient();
}

id __Engine.Configuration.device.getter()
{
  return (id)REEngineConfigurationGetDevice();
}

uint64_t __Engine.Configuration.device.setter(uint64_t a1)
{
  specialized __Engine.Configuration.device.setter(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EA0]);
  return swift_unknownObjectRelease();
}

uint64_t (*__Engine.Configuration.device.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (id)REEngineConfigurationGetDevice();
  return __Engine.Configuration.device.modify;
}

uint64_t __Engine.Configuration.device.modify(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v3 = REEngineConfigurationClone();
      type metadata accessor for EngineConfiguration();
      v4 = swift_allocObject();
      *(_QWORD *)(v4 + 16) = v3;
      swift_release_n();
      *v2 = v4;
    }
    REEngineConfigurationSetDevice();
    swift_unknownObjectRelease();
  }
  else
  {
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v5 = REEngineConfigurationClone();
      type metadata accessor for EngineConfiguration();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v5;
      swift_release_n();
      *v2 = v6;
    }
    REEngineConfigurationSetDevice();
  }
  return swift_unknownObjectRelease();
}

uint64_t __Engine.Configuration.isHostingSharedAudioSimulation.getter()
{
  return REEngineConfigurationGetIsHostingSharedAudioSimulation();
}

uint64_t __Engine.Configuration.isHostingSharedAudioSimulation.setter(char a1)
{
  return __Engine.Configuration.useMetal.setter(a1, (uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE21EC8]);
}

uint64_t __Engine.Configuration.useMetal.setter(char a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = REGetRetainCount();
  v6 = *(_QWORD *)(v4 + 16);
  if (v5 >= 2)
  {
    swift_retain();
    v6 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    swift_release_n();
    *v2 = v7;
  }
  return a2(v6, a1 & 1);
}

uint64_t (*__Engine.Configuration.isHostingSharedAudioSimulation.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetIsHostingSharedAudioSimulation();
  return __Engine.Configuration.isHostingSharedAudioSimulation.modify;
}

uint64_t __Engine.Configuration.isHostingSharedAudioSimulation.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.useMetal.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EC8]);
}

uint64_t __Engine.Configuration.useMetal.modify(uint64_t **a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = **a1;
  v6 = REGetRetainCount();
  v7 = *(_QWORD *)(v5 + 16);
  if (v6 >= 2)
  {
    swift_retain();
    v7 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    swift_release_n();
    *v3 = v8;
  }
  return a3(v7, v4);
}

id __Engine.Configuration.queue.getter()
{
  return (id)REEngineConfigurationGetEngineQueue();
}

void __Engine.Configuration.queue.setter(void *a1)
{
  specialized __Engine.Configuration.device.setter((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EB0]);

}

void (*__Engine.Configuration.queue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (id)REEngineConfigurationGetEngineQueue();
  return __Engine.Configuration.queue.modify;
}

void __Engine.Configuration.queue.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v2 = *(void **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v9 = v2;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v5 = REEngineConfigurationClone();
      type metadata accessor for EngineConfiguration();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v5;
      swift_release_n();
      *v3 = v6;
    }
    REEngineConfigurationSetEngineQueue();

  }
  else
  {
    v9 = v2;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v7 = REEngineConfigurationClone();
      type metadata accessor for EngineConfiguration();
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v7;
      swift_release_n();
      *v3 = v8;
    }
    REEngineConfigurationSetEngineQueue();
  }

}

uint64_t one-time initialization function for defaultServices()
{
  REEngineConfigurationCreateDefault();
  static __Engine.Configuration.defaultServices = REEngineConfigurationGetServicesToCreate() | 0x80;
  return RERelease();
}

uint64_t one-time initialization function for defaultRenderFlags()
{
  REEngineConfigurationCreateDefault();
  static __Engine.Configuration.defaultRenderFlags = REEngineConfigurationGetRenderFlags();
  return RERelease();
}

uint64_t __Engine.Configuration.__createServices.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t __Engine.Configuration.__createServices.setter(unsigned int *a1)
{
  return __Engine.Configuration.__renderFlags.setter(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21ED8]);
}

uint64_t (*__Engine.Configuration.__createServices.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetServicesToCreate();
  return __Engine.Configuration.__createServices.modify;
}

uint64_t __Engine.Configuration.__createServices.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.clockMode.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21ED8]);
}

uint64_t __Engine.Configuration.__updateServices.setter(unsigned int *a1)
{
  return __Engine.Configuration.__renderFlags.setter(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EE0]);
}

uint64_t (*__Engine.Configuration.__updateServices.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetServicesToUpdate();
  return __Engine.Configuration.__updateServices.modify;
}

uint64_t __Engine.Configuration.__updateServices.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.clockMode.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EE0]);
}

uint64_t __Engine.Configuration.__startupOptions.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t __Engine.Configuration.__startupOptions.setter(unsigned int *a1)
{
  return __Engine.Configuration.__renderFlags.setter(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EE8]);
}

uint64_t __Engine.Configuration.__renderFlags.setter(unsigned int *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *v2;
  v5 = REGetRetainCount();
  v6 = *(_QWORD *)(v4 + 16);
  if (v5 >= 2)
  {
    swift_retain();
    v6 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    swift_release_n();
    *v2 = v7;
  }
  return a2(v6, v3);
}

uint64_t (*__Engine.Configuration.__startupOptions.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetStartupOptions();
  return __Engine.Configuration.__startupOptions.modify;
}

uint64_t __Engine.Configuration.__startupOptions.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.clockMode.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EE8]);
}

uint64_t (*__Engine.Configuration.__renderFlags.modify(uint64_t a1))(uint64_t **a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetRenderFlags();
  return __Engine.Configuration.__renderFlags.modify;
}

uint64_t __Engine.Configuration.__renderFlags.modify(uint64_t **a1, uint64_t a2)
{
  return __Engine.Configuration.clockMode.modify(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21ED0]);
}

uint64_t __Engine.Configuration.clockMode.modify(uint64_t **a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  v5 = **a1;
  v6 = REGetRetainCount();
  v7 = *(_QWORD *)(v5 + 16);
  if (v6 >= 2)
  {
    swift_retain();
    v7 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    swift_release_n();
    *v3 = v8;
  }
  return a3(v7, v4);
}

uint64_t __Engine.Configuration.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Default;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  Default = REEngineConfigurationCreateDefault();
  type metadata accessor for EngineConfiguration();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = Default;
  *a1 = v3;
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v4 = REEngineConfigurationClone();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    swift_release_n();
    *a1 = v5;
  }
  REEngineConfigurationSetClockMode();
  if (one-time initialization token for defaultServices != -1)
    swift_once();
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v6 = REEngineConfigurationClone();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    swift_release_n();
    *a1 = v7;
  }
  REEngineConfigurationSetServicesToCreate();
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v8 = REEngineConfigurationClone();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    swift_release_n();
    *a1 = v9;
  }
  REEngineConfigurationSetServicesToUpdate();
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v10 = REEngineConfigurationClone();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    swift_release_n();
    *a1 = v11;
  }
  REEngineConfigurationSetStartupOptions();
  if (one-time initialization token for defaultRenderFlags != -1)
    swift_once();
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v12 = REEngineConfigurationClone();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    swift_release_n();
    *a1 = v13;
  }
  return REEngineConfigurationSetRenderFlags();
}

uint64_t __Engine.Configuration.init(configuration:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = REEngineConfigurationClone();
  type metadata accessor for EngineConfiguration();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t one-time initialization function for customComponents()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RegisterableComponent.Type>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v0 + 32) = &type metadata for __RKSceneUUIDComponent;
  *(_QWORD *)(v0 + 40) = &protocol witness table for __RKSceneUUIDComponent;
  *(_QWORD *)(v0 + 48) = &type metadata for __RKScenePhysics;
  *(_QWORD *)(v0 + 56) = &protocol witness table for __RKScenePhysics;
  result = type metadata accessor for __REAnchoring();
  *(_QWORD *)(v0 + 64) = result;
  *(_QWORD *)(v0 + 72) = &protocol witness table for __REAnchoring;
  *(_QWORD *)(v0 + 80) = &type metadata for __RKEntityUUIDComponent;
  *(_QWORD *)(v0 + 88) = &protocol witness table for __RKEntityUUIDComponent;
  *(_QWORD *)(v0 + 96) = &type metadata for __RKEntityTagsComponent;
  *(_QWORD *)(v0 + 104) = &protocol witness table for __RKEntityTagsComponent;
  static __Engine.customComponents = v0;
  return result;
}

uint64_t __Engine.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t __Engine.coreEngine.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void __Engine.__coreEngine.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

id __Engine.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t __Engine.asyncOnEngineQueue(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD v15[2];
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(_QWORD *)(v2 + 32);
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_11;
  v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v12, v8, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t __Engine.asyncAfterOnEngineQueue(deadline:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v17 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v3 + 32);
  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_3_0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x220769374](v17, v13, v9, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t key path setter for __Engine.services : __Engine(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 40) = v2;
  swift_retain();
  return swift_release();
}

uint64_t __Engine.services.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t __Engine.hasRenderedThisFrame.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t __Engine.hasRenderedThisFrame.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 48) = a1;
  return result;
}

uint64_t __Engine.isRunning.getter()
{
  return REEngineIsRunning();
}

uint64_t __Engine.acceptingInput.getter()
{
  return REEngineGetAcceptingInput();
}

void __Engine.acceptingInput.setter()
{
  JUMPOUT(0x22076CEC0);
}

void (*__Engine.acceptingInput.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = REEngineGetAcceptingInput();
  return __Engine.acceptingInput.modify;
}

void __Engine.acceptingInput.modify()
{
  JUMPOUT(0x22076CEC0);
}

_QWORD *__Engine.init(configuration:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (_QWORD *)v1;
  v3 = *a1;
  *(_QWORD *)(v1 + 40) = 0;
  v4 = v1 + 40;
  *(_BYTE *)(v1 + 48) = 0;
  type metadata accessor for NamedFileAssetResolver();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = MEMORY[0x24BEE4B00];
  v5[3] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v5[4] = @objc closure #1 in variable initialization expression of NamedFileAssetResolver.callback;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 - 24) = v3;
  swift_retain();
  v6 = (id)REEngineConfigurationGetEngineQueue();
  if (!v6)
  {
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v6 = (id)static OS_dispatch_queue.main.getter();
  }
  v2[4] = v6;
  if (REEngineConfigurationGetEnableInteractions()
    && one-time initialization token for interactionComponentInitializer != -1)
  {
    swift_once();
  }
  if (one-time initialization token for builtInComponentsInitializer != -1)
    swift_once();
  v2[3] = REEngineCreate();
  REEngineConfigurationClone();
  REEngineConfigurationSetEngineQueue();
  v7 = (id)REEngineConfigurationGetDevice();
  swift_unknownObjectRelease();
  if (v7)
  {
    v8 = (id)REEngineConfigurationGetDevice();
    swift_release();
    REEngineConfigurationSetDevice();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  v9 = v2[3];
  REEngineInitWithConfiguration();
  REEngineSetCallbacksEx();
  REEngineSetSwiftObject();
  MEMORY[0x22076CEC0](v9, 0);
  type metadata accessor for __ServiceLocator();
  swift_allocObject();
  v10 = swift_retain();
  v11 = __ServiceLocator.init(engine:)(v10);
  swift_beginAccess();
  v2[5] = v11;
  v12 = swift_release();
  __Engine.commonPostInit()(v12);
  RERelease();
  return v2;
}

_QWORD *static __Engine.__ensureInteractionsComponentIsRegistered()()
{
  return static __Engine.__ensureInteractionsComponentIsRegistered()(&one-time initialization token for interactionComponentInitializer);
}

_QWORD *static __Engine.__ensureBuiltInComponentsAreRegistered()()
{
  return static __Engine.__ensureInteractionsComponentIsRegistered()(&one-time initialization token for builtInComponentsInitializer);
}

_QWORD *static __Engine.__ensureInteractionsComponentIsRegistered()(_QWORD *result)
{
  if (*result != -1)
    return (_QWORD *)swift_once();
  return result;
}

uint64_t engineUpdateCallback(coreEngine:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  id v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;

  v0 = type metadata accessor for OSSignpostID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = REEngineGetSwiftObject();
  if (result)
  {
    v5 = result;
    swift_retain();
    REEngineGetDeltaTime();
    v7 = v6;
    if (one-time initialization token for UpdateLoop != -1)
      swift_once();
    v8 = one-time initialization token for UpdateLoop;
    v9 = (id)static __REOSLog.UpdateLoop;
    if (v8 != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v0, (uint64_t)static __RESignpostID.UpdateLoop);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v11(v3, v10, v0);
    type metadata accessor for __REOSSignpostScope();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = "Engine.engineUpdateCallback";
    *(_QWORD *)(v12 + 24) = 27;
    *(_BYTE *)(v12 + 32) = 2;
    *(_QWORD *)(v12 + 40) = v9;
    v11((char *)(v12 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID), (uint64_t)v3, v0);
    v13 = v9;
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    v14 = *(void (**)(char *, uint64_t))(v1 + 8);
    v14(v3, v0);
    result = swift_beginAccess();
    if (*(_QWORD *)(v5 + 40))
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      swift_retain();
      specialized EventService.publish<A>(_:on:componentType:)((uint64_t)v17, 0, 0, v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for EventSource?);
      swift_release();
      swift_setDeallocating();
      static os_signpost_type_t.end.getter();
      v15 = *(void **)(v12 + 40);
      v16 = v12 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
      os_signpost(_:dso:log:name:signpostID:)();

      v14((char *)v16, v0);
      swift_deallocClassInstance();
      swift_release();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t engineRenderCallback(coreEngine:)()
{
  uint64_t result;
  uint64_t v1;
  _OWORD v2[2];
  uint64_t v3;

  result = REEngineGetSwiftObject();
  if (result)
  {
    v1 = result;
    swift_retain();
    swift_beginAccess();
    *(_BYTE *)(v1 + 48) = 0;
    result = swift_beginAccess();
    if (*(_QWORD *)(v1 + 40))
    {
      v3 = 0;
      memset(v2, 0, sizeof(v2));
      swift_retain();
      specialized EventService.publish<A>(_:on:componentType:)((uint64_t)v2, 0, 0);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v2, &demangling cache variable for type metadata for EventSource?);
      swift_release();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id __Engine.init(coreEngine:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  *(_QWORD *)(v1 + 40) = 0;
  v4 = v1 + 40;
  *(_BYTE *)(v1 + 48) = 0;
  type metadata accessor for NamedFileAssetResolver();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = MEMORY[0x24BEE4B00];
  v5[3] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v5[4] = @objc closure #1 in variable initialization expression of NamedFileAssetResolver.callback;
  *(_QWORD *)(v4 + 16) = v5;
  RERetain();
  *(_QWORD *)(v4 - 16) = a1;
  REEngineConfigurationCreateFromEngine();
  RERetain();
  v6 = REEngineConfigurationClone();
  type metadata accessor for EngineConfiguration();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  RERelease();
  *(_QWORD *)(v4 - 24) = v7;
  result = (id)REEngineConfigurationGetEngineQueue();
  if (result)
  {
    *(_QWORD *)(v2 + 32) = result;
    if (REEngineConfigurationGetEnableInteractions()
      && one-time initialization token for interactionComponentInitializer != -1)
    {
      swift_once();
    }
    if (one-time initialization token for builtInComponentsInitializer != -1)
      swift_once();
    type metadata accessor for __ServiceLocator();
    swift_allocObject();
    v9 = swift_retain();
    v10 = specialized __ServiceLocator.init(engine:)(v9);
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v2 + 40) = v10;
    swift_release();
    REEngineSetCallbacksEx();
    REEngineSetSwiftObject();
    if (static __ServiceLocator.sharedEngine)
    {
      swift_retain();
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = (_UNKNOWN *)v2;
      swift_release();
    }
    __Engine.commonPostInit()();
    RERelease();
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __Engine.commonPostInit()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ServiceLocator;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 40);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 40);
  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = v4 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v19);
  if (one-time initialization token for instances != -1)
    swift_once();
  v6 = static __RealityFileURLResolver.instances;
  v7 = v20;
  v8 = v21;
  v9 = __swift_project_boxed_opaque_existential_1(v19, v20);
  swift_retain();
  v10 = specialized AssetServiceScopedRegistry.instance(for:)((uint64_t)v9, v6, v7, v8);
  swift_release();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (!*v2)
    goto LABEL_10;
  outlined init with copy of __REAssetService((uint64_t)(v10 + 2), (uint64_t)v19);
  v11 = v20;
  v12 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  outlined init with copy of __REAssetService((uint64_t)(v10 + 2), (uint64_t)v19);
  v13 = v20;
  v14 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  String.utf8CString.getter();
  REAssetManagerRegisterAssetResolver();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  result = swift_release();
  if (!*v2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v15 = *v2 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v15, (uint64_t)v19);
  v16 = v20;
  v17 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
  REAssetManagerRegisterAssetResolver();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x22076FD64](ServiceLocator))
  {
    REAudioSceneServiceSetSTSControl();
    REAudioSceneServiceSetExternalSourceControl();
  }
  __Engine.__registerREKitBuiltInActions()();
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v1, (uint64_t)closure #1 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v1, (uint64_t)closure #2 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v1, (uint64_t)closure #3 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v1, (uint64_t)closure #4 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v1, (uint64_t)closure #5 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  return specialized static ForceEffectProtocol<>.__register(engine:_:)(v1, (uint64_t)closure #6 in __Engine.__registerREKitBuiltInForceEffects(), 0);
}

uint64_t __Engine.deinit()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[3];
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 40);
  if (!v2)
    goto LABEL_12;
  v3 = v2 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v15);
  if (one-time initialization token for instances != -1)
    swift_once();
  v4 = static __RealityFileURLResolver.instances;
  v5 = (uint64_t)v16;
  v6 = (uint64_t)v17;
  v7 = __swift_project_boxed_opaque_existential_1(v15, (uint64_t)v16);
  swift_retain();
  v8 = specialized AssetServiceScopedRegistry.instance(for:)((uint64_t)v7, v4, v5, v6);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  v9 = (void *)v8[7];
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver();
  *(_QWORD *)(v10 + 24) = v8;
  v17 = _sIg_Ieg_TRTA_0;
  v18 = v10;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed () -> ();
  v16 = &block_descriptor_6;
  v11 = _Block_copy(v15);
  v12 = v9;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v11);

  _Block_release(v11);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  result = swift_release();
  if ((v11 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  REEngineUnsetCallbacksEx();
  result = REEngineSetSwiftObject();
  v13 = *(_QWORD *)(v0 + 40);
  if (!v13)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(v13 + 216) == 1)
  {
    *(_BYTE *)(v13 + 216) = 0;
    swift_beginAccess();
    swift_retain();
    REServiceLocatorSetSwiftObject();
    v14 = *(void **)(v13 + 224);
    if (v14)
    {
      dlclose(v14);
      *(_QWORD *)(v13 + 224) = 0;
    }
    swift_release();
  }
  *(_QWORD *)(v0 + 40) = 0;
  swift_release();
  RERelease();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t __Engine.__deallocating_deinit()
{
  __Engine.deinit();
  return swift_deallocClassInstance();
}

uint64_t static __Engine.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t SwiftObject;
  uint64_t v3;

  v1 = *a1;
  SwiftObject = REEngineGetSwiftObject();
  if (SwiftObject)
  {
    v3 = SwiftObject;
    swift_retain();
  }
  else
  {
    type metadata accessor for __Engine();
    v3 = swift_allocObject();
    __Engine.init(coreEngine:)(v1);
  }
  return v3;
}

Swift::Void __swiftcall __Engine.start()()
{
  JUMPOUT(0x22076CEF0);
}

Swift::Void __swiftcall __Engine.__stop()()
{
  JUMPOUT(0x22076CEFCLL);
}

void closure #1 in variable initialization expression of static __Engine.builtInComponentsInitializer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((static __Engine.customComponentsRegistered & 1) == 0)
  {
    static __Engine.customComponentsRegistered = 1;
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    if (one-time initialization token for customComponents != -1)
      swift_once();
    v0 = static __Engine.customComponents;
    v1 = *(_QWORD *)(static __Engine.customComponents + 16);
    if (v1)
    {
      swift_bridgeObjectRetain();
      v2 = v0 + 40;
      do
      {
        (*(void (**)(void))(*(_QWORD *)v2 + 8))();
        v2 += 16;
        --v1;
      }
      while (v1);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t static __Engine.__registerREKitComponents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  if ((static __Engine.customComponentsRegistered & 1) == 0)
  {
    static __Engine.customComponentsRegistered = 1;
    result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    if (one-time initialization token for customComponents != -1)
      result = swift_once();
    v3 = static __Engine.customComponents;
    v4 = *(_QWORD *)(static __Engine.customComponents + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      v5 = v4 - 1;
      v6 = v3 + 40;
      do
      {
        v7 = v5;
        (*(void (**)(void))(*(_QWORD *)v6 + 8))();
        if (v1)
          break;
        v5 = v7 - 1;
        v6 += 16;
      }
      while (v7);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void one-time initialization function for interactionComponentInitializer()
{
  void *v0;

  if ((static __Engine.interactionsComponentsRegistered & 1) == 0)
  {
    static __Engine.interactionsComponentsRegistered = 1;
    type metadata accessor for __RKEntityInteractionsComponent.Registration();
    swift_allocObject();
    v0 = (void *)__RKEntityInteractionsComponent.Registration.init()();
    swift_beginAccess();
    static __RKEntityInteractionsComponent.registration = v0;
    swift_release();
  }
}

void static __Engine.__registerInteractionComponent()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  if ((static __Engine.interactionsComponentsRegistered & 1) == 0)
  {
    static __Engine.interactionsComponentsRegistered = 1;
    type metadata accessor for __RKEntityInteractionsComponent.Registration();
    swift_allocObject();
    v1 = __RKEntityInteractionsComponent.Registration.init()();
    if (!v0)
    {
      v2 = (void *)v1;
      swift_beginAccess();
      static __RKEntityInteractionsComponent.registration = v2;
      swift_release();
    }
  }
}

uint64_t static __Engine.__unregisterREKitComponents()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (static __Engine.customComponentsRegistered == 1)
  {
    static __Engine.customComponentsRegistered = 0;
    result = specialized static SceneManager.unregisterCustomComponents()();
    if (one-time initialization token for customComponents != -1)
      goto LABEL_10;
    while (1)
    {
      v1 = static __Engine.customComponents;
      v2 = *(_QWORD *)(static __Engine.customComponents + 16);
      if (!v2)
        break;
      swift_bridgeObjectRetain();
      v3 = v1 + 16 * v2 + 24;
      while (v2 <= *(_QWORD *)(v1 + 16))
      {
        --v2;
        (*(void (**)(void))(*(_QWORD *)v3 + 16))();
        v3 -= 16;
        if (!v2)
          return swift_bridgeObjectRelease();
      }
      __break(1u);
LABEL_10:
      result = swift_once();
    }
  }
  return result;
}

uint64_t static __Engine.__unregisterInteractionComponent()()
{
  uint64_t result;

  if (static __Engine.interactionsComponentsRegistered == 1)
  {
    static __Engine.interactionsComponentsRegistered = 0;
    swift_beginAccess();
    static __RKEntityInteractionsComponent.registration = 0;
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall __Engine.__registerREKitBuiltInActions()()
{
  uint64_t v0;

  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #1 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #2 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #3 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #4 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #5 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #6 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #7 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #8 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #9 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #10 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #11 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #12 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #13 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #14 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #15 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #16 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #17 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #18 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #19 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #20 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #21 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #22 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #23 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #24 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #25 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #26 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #27 in __Engine.__registerREKitBuiltInActions(), 0);
  specialized static EntityAction.__register()();
  specialized static EntityAction<>.__registerCodable()();
  specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(v0, (uint64_t)closure #28 in __Engine.__registerREKitBuiltInActions(), 0);
}

void closure #1 in __Engine.__registerREKitBuiltInActions()(_QWORD *a1@<X8>)
{
  a1[3] = &type metadata for PlayAnimationActionHandler;
  a1[4] = &protocol witness table for PlayAnimationActionHandler;
  *a1 = 0;
}

void closure #2 in __Engine.__registerREKitBuiltInActions()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for NotificationActionHandler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for NotificationActionHandler;
}

void closure #3 in __Engine.__registerREKitBuiltInActions()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for SetEntityEnabledActionHandler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for SetEntityEnabledActionHandler;
}

void closure #4 in __Engine.__registerREKitBuiltInActions()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ImpulseActionHandler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for ImpulseActionHandler;
}

double closure #5 in __Engine.__registerREKitBuiltInActions()@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (one-time initialization token for identity != -1)
    swift_once();
  v5 = xmmword_2551B1050;
  v6 = static Transform.identity;
  v4 = xmmword_2551B1060;
  a1[3] = (uint64_t)&type metadata for OrbitEntityActionHandler;
  a1[4] = (uint64_t)&protocol witness table for OrbitEntityActionHandler;
  v2 = swift_allocObject();
  *a1 = v2;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 48) = v6;
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 80) = v4;
  *(_OWORD *)(v2 + 96) = v6;
  *(_OWORD *)(v2 + 112) = v5;
  *(_OWORD *)(v2 + 128) = v4;
  result = 0.0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_BYTE *)(v2 + 192) = 1;
  *(_QWORD *)(v2 + 200) = 0;
  return result;
}

uint64_t closure #6 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  a1[3] = (uint64_t)&type metadata for SpinActionHandler;
  a1[4] = (uint64_t)&protocol witness table for SpinActionHandler;
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

double closure #7 in __Engine.__registerREKitBuiltInActions()@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  a1[3] = (uint64_t)&type metadata for BillboardActionHandler;
  a1[4] = (uint64_t)&protocol witness table for BillboardActionHandler;
  v2 = swift_allocObject();
  *a1 = v2;
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 100) = 1;
  return result;
}

uint64_t closure #8 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
  result = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Float> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Float>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
  *(_QWORD *)(a1 + 32) = result;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t closure #9 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #9 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<Double>, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>, a1);
}

uint64_t closure #10 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #9 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>, a1);
}

uint64_t closure #9 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(a1);
  result = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a2, a1, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
  *(_QWORD *)(a3 + 32) = result;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t closure #11 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X8>)
{
  return closure #11 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, a1);
}

uint64_t closure #12 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X8>)
{
  return closure #11 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, a1);
}

uint64_t closure #11 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  a3[3] = __swift_instantiateConcreteTypeFromMangledName(a1);
  a3[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a2, a1, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
  result = swift_allocObject();
  *a3 = result;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t closure #13 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X8>)
{
  return closure #11 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, a1);
}

double closure #14 in __Engine.__registerREKitBuiltInActions()@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
  a1[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Transform> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
  v2 = swift_allocObject();
  *a1 = v2;
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 1;
  *(_QWORD *)(v2 + 72) = 0;
  return result;
}

uint64_t closure #15 in __Engine.__registerREKitBuiltInActions()@<X0>(_QWORD *a1@<X8>)
{
  return closure #15 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, a1);
}

uint64_t closure #16 in __Engine.__registerREKitBuiltInActions()@<X0>(_QWORD *a1@<X8>)
{
  return closure #15 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, a1);
}

uint64_t closure #15 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;

  a3[3] = __swift_instantiateConcreteTypeFromMangledName(a1);
  result = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a2, a1, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
  a3[4] = result;
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t closure #17 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #18 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #19 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #18 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(a1);
  result = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a2, a1, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  *(_QWORD *)(a3 + 32) = result;
  return result;
}

uint64_t closure #20 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #21 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #22 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #23 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #24 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #18 in __Engine.__registerREKitBuiltInActions()(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, a1);
}

uint64_t closure #25 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
  result = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t closure #26 in __Engine.__registerREKitBuiltInActions()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
  result = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void closure #27 in __Engine.__registerREKitBuiltInActions()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for PlayAudioActionHandler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for PlayAudioActionHandler;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void closure #28 in __Engine.__registerREKitBuiltInActions()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  a1[3] = &type metadata for EmphasizeActionHandler;
  a1[4] = &protocol witness table for EmphasizeActionHandler;
  v1 = MEMORY[0x24BEE4AF8];
  *a1 = 0;
  a1[1] = v1;
}

Swift::Void __swiftcall __Engine.__registerREKitBuiltInForceEffects()()
{
  uint64_t v0;

  specialized static ForceEffectProtocol<>.__register(engine:_:)(v0, (uint64_t)closure #1 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v0, (uint64_t)closure #2 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v0, (uint64_t)closure #3 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v0, (uint64_t)closure #4 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v0, (uint64_t)closure #5 in __Engine.__registerREKitBuiltInForceEffects(), 0);
  specialized static ForceEffectProtocol<>.__register(engine:_:)(v0, (uint64_t)closure #6 in __Engine.__registerREKitBuiltInForceEffects(), 0);
}

_QWORD *closure #1 in __Engine.__registerREKitBuiltInForceEffects()(uint64_t a1)
{
  return ConstantForceEffect.update(parameters:)((_QWORD *)(a1 + 40));
}

uint64_t specialized static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  uint64_t v16;

  aBlock[0] = &type metadata for ConstantForceEffect;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConstantForceEffect.Type);
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v6 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  v7 = lazy protocol witness table accessor for type ConstantForceEffect and conformance ConstantForceEffect();
  v8 = lazy protocol witness table accessor for type ConstantForceEffect and conformance ConstantForceEffect();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for ConstantForceEffect, (uint64_t)&protocol witness table for ConstantForceEffect, v7, v8, v6, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  if (a1)
  {
    swift_retain();
    REEngineGetEventBus();
LABEL_8:
    specialized getEventID<A>(_:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REForceEffectEventFilter();
    swift_release();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    aBlock[3] = &block_descriptor_72;
    v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    REEventBusSubscribeWithMatch();
    _Block_release(v14);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  type metadata accessor for __ServiceLocator();
  swift_retain();
  v11 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  result = MEMORY[0x22076FDA0](v12);
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  uint64_t v16;

  aBlock[0] = &type metadata for ConstantRadialForceEffect;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConstantRadialForceEffect.Type);
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v6 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  v7 = lazy protocol witness table accessor for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect();
  v8 = lazy protocol witness table accessor for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for ConstantRadialForceEffect, (uint64_t)&protocol witness table for ConstantRadialForceEffect, v7, v8, v6, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  if (a1)
  {
    swift_retain();
    REEngineGetEventBus();
LABEL_8:
    specialized getEventID<A>(_:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REForceEffectEventFilter();
    swift_release();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    aBlock[3] = &block_descriptor_66;
    v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    REEventBusSubscribeWithMatch();
    _Block_release(v14);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  type metadata accessor for __ServiceLocator();
  swift_retain();
  v11 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  result = MEMORY[0x22076FDA0](v12);
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  uint64_t v16;

  aBlock[0] = &type metadata for RadialForceEffect;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RadialForceEffect.Type);
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v6 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  v7 = lazy protocol witness table accessor for type RadialForceEffect and conformance RadialForceEffect();
  v8 = lazy protocol witness table accessor for type RadialForceEffect and conformance RadialForceEffect();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for RadialForceEffect, (uint64_t)&protocol witness table for RadialForceEffect, v7, v8, v6, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  if (a1)
  {
    swift_retain();
    REEngineGetEventBus();
LABEL_8:
    specialized getEventID<A>(_:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REForceEffectEventFilter();
    swift_release();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    aBlock[3] = &block_descriptor_60;
    v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    REEventBusSubscribeWithMatch();
    _Block_release(v14);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  type metadata accessor for __ServiceLocator();
  swift_retain();
  v11 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  result = MEMORY[0x22076FDA0](v12);
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  uint64_t v16;

  aBlock[0] = &type metadata for VortexForceEffect;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VortexForceEffect.Type);
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v6 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  v7 = lazy protocol witness table accessor for type VortexForceEffect and conformance VortexForceEffect();
  v8 = lazy protocol witness table accessor for type VortexForceEffect and conformance VortexForceEffect();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for VortexForceEffect, (uint64_t)&protocol witness table for VortexForceEffect, v7, v8, v6, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  if (a1)
  {
    swift_retain();
    REEngineGetEventBus();
LABEL_8:
    specialized getEventID<A>(_:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REForceEffectEventFilter();
    swift_release();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    aBlock[3] = &block_descriptor_54;
    v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    REEventBusSubscribeWithMatch();
    _Block_release(v14);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  type metadata accessor for __ServiceLocator();
  swift_retain();
  v11 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  result = MEMORY[0x22076FDA0](v12);
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  uint64_t v16;

  aBlock[0] = &type metadata for DragForceEffect;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DragForceEffect.Type);
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v6 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  v7 = lazy protocol witness table accessor for type DragForceEffect and conformance DragForceEffect();
  v8 = lazy protocol witness table accessor for type DragForceEffect and conformance DragForceEffect();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for DragForceEffect, (uint64_t)&protocol witness table for DragForceEffect, v7, v8, v6, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  if (a1)
  {
    swift_retain();
    REEngineGetEventBus();
LABEL_8:
    specialized getEventID<A>(_:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REForceEffectEventFilter();
    swift_release();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    aBlock[3] = &block_descriptor_48;
    v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    REEventBusSubscribeWithMatch();
    _Block_release(v14);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  type metadata accessor for __ServiceLocator();
  swift_retain();
  v11 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  result = MEMORY[0x22076FDA0](v12);
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  uint64_t v16;

  aBlock[0] = &type metadata for TurbulenceForceEffect;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TurbulenceForceEffect.Type);
  String.init<A>(describing:)();
  String.utf8CString.getter();
  v6 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1)
    swift_once();
  v7 = lazy protocol witness table accessor for type TurbulenceForceEffect and conformance TurbulenceForceEffect();
  v8 = lazy protocol witness table accessor for type TurbulenceForceEffect and conformance TurbulenceForceEffect();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for TurbulenceForceEffect, (uint64_t)&protocol witness table for TurbulenceForceEffect, v7, v8, v6, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2)
    return swift_bridgeObjectRelease();
  if (a1)
  {
    swift_retain();
    REEngineGetEventBus();
LABEL_8:
    specialized getEventID<A>(_:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REForceEffectEventFilter();
    swift_release();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a2;
    *(_QWORD *)(v13 + 24) = a3;
    aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
    aBlock[3] = &block_descriptor_42;
    v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    REEventBusSubscribeWithMatch();
    _Block_release(v14);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  type metadata accessor for __ServiceLocator();
  swift_retain();
  v11 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  result = MEMORY[0x22076FDA0](v12);
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

uint64_t closure #2 in __Engine.__registerREKitBuiltInForceEffects()(uint64_t a1)
{
  return closure #2 in __Engine.__registerREKitBuiltInForceEffects()(a1, (uint64_t (*)(uint64_t))ConstantRadialForceEffect.update(parameters:));
}

uint64_t closure #3 in __Engine.__registerREKitBuiltInForceEffects()(double *a1, double a2, double a3, double a4, double a5, __n128 a6)
{
  return RadialForceEffect.update(parameters:)((uint64_t)(a1 + 2), *a1, a3, a4, a5, a6);
}

void closure #4 in __Engine.__registerREKitBuiltInForceEffects()(float32x4_t *a1)
{
  uint64_t v2;
  float32x4_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x2_t v11;
  __int128 v12;
  float v13;

  if ((a1[5].i8[8] & 1) == 0)
  {
    v13 = a1->f32[0];
    v2 = a1[4].i64[1];
    *(float32x2_t *)v3.f32 = normalizeSafe(vec:)(a1[1]);
    v4 = a1[3].i64[0];
    if (v4 < 0)
    {
      __break(1u);
    }
    else if (v4)
    {
      v5 = 0;
      v6 = a1[15].i64[0];
      v7 = a1[15].i64[1];
      v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
      v9 = vnegq_f32(v3);
      do
      {
        if (v5 < v7)
        {
          v10 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v2 + 16 * v5), *(int32x4_t *)(v2 + 16 * v5)), *(int8x16_t *)(v2 + 16 * v5), 0xCuLL), v9), *(float32x4_t *)(v2 + 16 * v5), v8);
          v11.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
          v11.i32[1] = v10.i32[0];
          *(float32x2_t *)&v12 = vmul_n_f32(v11, v13);
          *((_QWORD *)&v12 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v13, *(float32x2_t *)v10.i8, 1));
          *(_OWORD *)(v6 + 16 * v5) = v12;
        }
        ++v5;
      }
      while (v4 != v5);
    }
  }
}

uint64_t closure #5 in __Engine.__registerREKitBuiltInForceEffects()(uint64_t a1)
{
  return closure #2 in __Engine.__registerREKitBuiltInForceEffects()(a1, DragForceEffect.update(parameters:));
}

uint64_t closure #2 in __Engine.__registerREKitBuiltInForceEffects()(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1 + 8);
}

uint64_t closure #6 in __Engine.__registerREKitBuiltInForceEffects()(uint64_t a1)
{
  return TurbulenceForceEffect.update(parameters:)(a1 + 16);
}

uint64_t specialized EventService.publish<A>(_:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  ValueMetadata *v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  ValueMetadata *v11;
  ValueMetadata *v12;
  uint64_t result;
  _BYTE v14[40];
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17[5];
  uint64_t v18[5];

  if (swift_conformsToProtocol2())
    v8 = &type metadata for EngineUpdateEvent;
  else
    v8 = 0;
  if (v8)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v17, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v17, a2, a3, 0, 0, specialized getEventID<A>(_:), v18);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v18, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityRotorNavigationEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v18);
    *(float *)v15 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  if (swift_conformsToProtocol2())
    v9 = &type metadata for EngineUpdateEvent;
  else
    v9 = 0;
  if (v9)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v17, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v17, a2, a3, 0, 0, specialized getEventID<A>(_:), v18);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v18, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityActivateEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v18);
    *(float *)v15 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v10 = &type metadata for EngineUpdateEvent;
  else
    v10 = 0;
  if (v10)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v17, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v17, a2, a3, 0, 0, specialized getEventID<A>(_:), v18);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v18, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityIncrementEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v18);
    *(float *)v15 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v11 = &type metadata for EngineUpdateEvent;
  else
    v11 = 0;
  if (v11)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v17, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v17, a2, a3, 0, 0, specialized getEventID<A>(_:), v18);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v18, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityDecrementEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v18);
    *(float *)v15 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v12 = &type metadata for EngineUpdateEvent;
  else
    v12 = 0;
  if (v12)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v17, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v17, a2, a3, 0, 0, specialized getEventID<A>(_:), v18);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v18, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityCustomActionEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v18);
    *(float *)v15 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  outlined init with copy of (Int, URL)(a1, (uint64_t)v18, &demangling cache variable for type metadata for EventSource?);
  specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v18, a2, a3, 0, 0, specialized getEventID<A>(_:), v17);
  specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v17, &demangling cache variable for type metadata for REEventDispatcher<EngineUpdateEvent>);
  outlined release of REEventBus.DispatcherHandle((uint64_t)v17);
  specialized REEventDispatcher.receive(_:)(a4);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    outlined init with copy of (Int, URL)((uint64_t)v15, (uint64_t)v14, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v14, 0, 0, 0, 0, specialized getEventID<A>(_:), v18);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v18, &demangling cache variable for type metadata for REEventDispatcher<EngineUpdateEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v18);
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    specialized REEventDispatcher.receive(_:)(a4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized EventService.publish<A>(_:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ValueMetadata *v6;
  ValueMetadata *v7;
  ValueMetadata *v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  uint64_t result;
  _BYTE v12[40];
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15[5];
  uint64_t v16[5];

  if (swift_conformsToProtocol2())
    v6 = &type metadata for EngineRenderEvent;
  else
    v6 = 0;
  if (v6)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v15, a2, a3, 0, 0, specialized getEventID<A>(_:), v16);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v16, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityRotorNavigationEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  if (swift_conformsToProtocol2())
    v7 = &type metadata for EngineRenderEvent;
  else
    v7 = 0;
  if (v7)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v15, a2, a3, 0, 0, specialized getEventID<A>(_:), v16);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v16, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityActivateEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v8 = &type metadata for EngineRenderEvent;
  else
    v8 = 0;
  if (v8)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v15, a2, a3, 0, 0, specialized getEventID<A>(_:), v16);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v16, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityIncrementEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v9 = &type metadata for EngineRenderEvent;
  else
    v9 = 0;
  if (v9)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v15, a2, a3, 0, 0, specialized getEventID<A>(_:), v16);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v16, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityDecrementEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2())
    v10 = &type metadata for EngineRenderEvent;
  else
    v10 = 0;
  if (v10)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v15, a2, a3, 0, 0, specialized getEventID<A>(_:), v16);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v16, &demangling cache variable for type metadata for REEventDispatcher<AccessibilityCustomActionEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  outlined init with copy of (Int, URL)(a1, (uint64_t)v16, &demangling cache variable for type metadata for EventSource?);
  specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v16, a2, a3, 0, 0, specialized getEventID<A>(_:), v15);
  specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v15, &demangling cache variable for type metadata for REEventDispatcher<EngineRenderEvent>);
  outlined release of REEventBus.DispatcherHandle((uint64_t)v15);
  specialized REEventDispatcher.receive(_:)();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    outlined init with copy of (Int, URL)((uint64_t)v13, (uint64_t)v12, &demangling cache variable for type metadata for EventSource?);
    specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v12, 0, 0, 0, 0, specialized getEventID<A>(_:), v16);
    specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(v16, &demangling cache variable for type metadata for REEventDispatcher<EngineRenderEvent>);
    outlined release of REEventBus.DispatcherHandle((uint64_t)v16);
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for EventSource?);
    specialized REEventDispatcher.receive(_:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for RECoreBridging.corePointer.getter in conformance __Engine()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 24);
}

float EngineUpdateEvent.deltaTime.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

_QWORD *specialized FromToByActionHandler.actionUpdated(event:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t), uint64_t a3, _QWORD *(*a4)(_QWORD *__return_ptr, uint64_t, _QWORD, double))
{
  double *v4;
  double *v8;
  _QWORD *result;
  double v11;
  _BOOL4 v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  double v25;
  char v26;

  v8 = v4;
  outlined init with take of Transform?(a1 + 200, (uint64_t)v24, &demangling cache variable for type metadata for Double?);
  result = (_QWORD *)outlined init with take of Transform?((uint64_t)v24, (uint64_t)&v25, &demangling cache variable for type metadata for Double?);
  if ((v26 & 1) == 0)
  {
    v11 = v25;
    v12 = fabs(v25 + -1.0) <= 0.0001;
    v13 = v25 <= 0.0001 || v12;
    v14 = *v8;
    if (v13 == 1 && v14 != 0.0)
    {
      v23 = *(_QWORD *)v8;
      if (vabdd_f64(v8[1], v25) <= 0.0001)
      {
        v17 = swift_bridgeObjectRetain();
        a2(v20, v17);
        v18 = v21;
        if (v21)
        {
          v19 = v22;
          __swift_project_boxed_opaque_existential_1(v20, v21);
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v19 + 64))(&v23, a3, v18, v19);
          swift_bridgeObjectRelease();
          result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        }
        else
        {
          swift_bridgeObjectRelease();
          result = (_QWORD *)outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for AnimationStateProtocol?);
        }
        goto LABEL_17;
      }
    }
    result = a4(v20, a1, *(_QWORD *)&v14, v8[1]);
    if (!v20[0])
      return result;
    v23 = v20[0];
    a2(v20, (uint64_t)result);
    v15 = v21;
    if (v21)
    {
      v16 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 64))(&v23, a3, v15, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      if (v13)
      {
LABEL_11:
        result = (_QWORD *)swift_bridgeObjectRelease();
        *(_QWORD *)v8 = v23;
LABEL_17:
        v8[1] = v11;
        return result;
      }
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for AnimationStateProtocol?);
      if (v13)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    *v8 = 0.0;
    goto LABEL_17;
  }
  return result;
}

uint64_t specialized FromToByActionHandler.actionUpdated(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  double v5;
  BOOL v6;
  BOOL v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE v44[16];
  double v45;
  char v46;

  v2 = v1;
  outlined init with take of Transform?(a1 + 360, (uint64_t)v44, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v44, (uint64_t)&v45, &demangling cache variable for type metadata for Double?);
  if ((v46 & 1) == 0)
  {
    v5 = v45;
    v6 = fabs(v45 + -1.0) > 0.0001;
    v7 = v45 > 0.0001 && v6;
    if (!v7 && (*(_BYTE *)(v2 + 48) & 1) == 0)
    {
      v8 = *(_OWORD *)(v2 + 16);
      v9 = *(_QWORD *)(v2 + 32);
      v10 = *(_QWORD *)(v2 + 40);
      v40[0] = *(_OWORD *)v2;
      v40[1] = v8;
      v41 = v9;
      v42 = v10;
      if (vabdd_f64(*(double *)(v2 + 56), v45) <= 0.0001)
      {
        specialized ActionEvent.animationState.getter((uint64_t)v36);
        v25 = v37;
        if (v37)
        {
          v26 = v38;
          __swift_project_boxed_opaque_existential_1(v36, v37);
          (*(void (**)(_OWORD *, ValueMetadata *, uint64_t, uint64_t))(v26 + 64))(v40, &type metadata for Transform, v25, v26);
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        }
        else
        {
          result = outlined destroy of BodyTrackingComponent?((uint64_t)v36, &demangling cache variable for type metadata for AnimationStateProtocol?);
        }
        goto LABEL_15;
      }
    }
    specialized FromToByActionHandler.evaluateResult(_:)(a1, (uint64_t)v36);
    v11 = v36[0];
    v12 = v36[1];
    v13 = v36[2];
    v14 = v37;
    v15 = v38;
    v16 = v39;
    result = outlined init with take of Transform?((uint64_t)v36, (uint64_t)v40, &demangling cache variable for type metadata for Transform?);
    if ((v43 & 1) != 0)
      return result;
    v30 = v11;
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v34 = v15;
    v35 = v16;
    specialized ActionEvent.animationState.getter((uint64_t)v27);
    v17 = v28;
    if (v28)
    {
      v18 = v29;
      __swift_project_boxed_opaque_existential_1(v27, v28);
      (*(void (**)(uint64_t *, ValueMetadata *, uint64_t, uint64_t))(v18 + 64))(&v30, &type metadata for Transform, v17, v18);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      if (v7)
      {
LABEL_11:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
LABEL_14:
        *(_QWORD *)v2 = v19;
        *(_QWORD *)(v2 + 8) = v20;
        *(_QWORD *)(v2 + 16) = v21;
        *(_QWORD *)(v2 + 24) = v22;
        *(_QWORD *)(v2 + 32) = v23;
        *(_QWORD *)(v2 + 40) = v24;
        *(_BYTE *)(v2 + 48) = v7;
LABEL_15:
        *(double *)(v2 + 56) = v5;
        return result;
      }
    }
    else
    {
      result = outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for AnimationStateProtocol?);
      if (v7)
        goto LABEL_11;
    }
    v19 = v30;
    v20 = v31;
    v21 = v32;
    v22 = v33;
    v23 = v34;
    v24 = v35;
    goto LABEL_14;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  double v23;
  char v24;

  v2 = v1;
  outlined init with take of Transform?(a1 + 216, (uint64_t)v22, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for Double?);
  if ((v24 & 1) == 0)
  {
    v5 = v23;
    v6 = fabs(v23 + -1.0) > 0.0001;
    v7 = v23 > 0.0001 && v6;
    if (v7 || (*(_BYTE *)(v2 + 8) & 1) != 0 || (v21 = *(_QWORD *)v2, vabdd_f64(*(double *)(v2 + 16), v23) > 0.0001))
    {
      result = specialized FromToByActionHandler.evaluateResult(_:)(a1);
      if ((v8 & 1) != 0)
        return result;
      v21 = result;
      specialized ActionEvent.animationState.getter(v18, result);
      v9 = v19;
      if (v19)
      {
        v10 = v20;
        __swift_project_boxed_opaque_existential_1(v18, v19);
        v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 64);
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
        v11(&v21, v12, v9, v10);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
      v13 = v21;
      if (v7)
        v13 = 0;
      *(_QWORD *)v2 = v13;
      *(_BYTE *)(v2 + 8) = v7;
    }
    else
    {
      specialized ActionEvent.animationState.getter(v18, result);
      v14 = v19;
      if (v19)
      {
        v15 = v20;
        __swift_project_boxed_opaque_existential_1(v18, v19);
        v16 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 64);
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
        v16(&v21, v17, v14, v15);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
    }
    *(double *)(v2 + 16) = v5;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  double v19;
  char v20;

  v2 = v1;
  outlined init with take of Transform?(a1 + 216, (uint64_t)v18, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v18, (uint64_t)&v19, &demangling cache variable for type metadata for Double?);
  if ((v20 & 1) == 0)
  {
    v5 = v19;
    v6 = fabs(v19 + -1.0) > 0.0001;
    v7 = v19 > 0.0001 && v6;
    if (v7 || (*(_BYTE *)(v2 + 8) & 1) != 0 || (v17 = *(_QWORD *)v2, vabdd_f64(*(double *)(v2 + 16), v19) > 0.0001))
    {
      result = specialized FromToByActionHandler.evaluateResult(_:)(a1);
      if ((v8 & 1) != 0)
        return result;
      v17 = result;
      specialized ActionEvent.animationState.getter(v14, result);
      v9 = v15;
      if (v15)
      {
        v10 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 64))(&v17, MEMORY[0x24BEE13C8], v9, v10);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
      v11 = v17;
      if (v7)
        v11 = 0;
      *(_QWORD *)v2 = v11;
      *(_BYTE *)(v2 + 8) = v7;
    }
    else
    {
      specialized ActionEvent.animationState.getter(v14, result);
      v12 = v15;
      if (v15)
      {
        v13 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 64))(&v17, MEMORY[0x24BEE13C8], v12, v13);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
    }
    *(double *)(v2 + 16) = v5;
  }
  return result;
}

void specialized FromToByActionHandler.actionUpdated(event:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  __n128 v5;
  double v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  double v30;
  char v31;

  v2 = v1;
  outlined init with take of Transform?(a1 + 264, (uint64_t)v29, &demangling cache variable for type metadata for Double?);
  v4 = outlined init with take of Transform?((uint64_t)v29, (uint64_t)&v30, &demangling cache variable for type metadata for Double?);
  if ((v31 & 1) == 0)
  {
    v6 = v30;
    v5.n128_u64[0] = 0x3F1A36E2EB1C432DLL;
    v7 = fabs(v30 + -1.0) > 0.0001;
    v8 = v30 > 0.0001 && v7;
    if (v8 || (v2[2] & 1) != 0 || (v9 = v2[1], v27 = *v2, v28 = v9, vabdd_f64(*((double *)v2 + 3), v30) > 0.0001))
    {
      v12.n128_f64[0] = specialized FromToByActionHandler.evaluateResult(_:)(a1);
      if ((v13 & 1) != 0)
        return;
      v27 = v10;
      v28 = v11;
      specialized ActionEvent.animationState.getter(v24, v10, v12);
      v14 = v25;
      if (v25)
      {
        v15 = v26;
        __swift_project_boxed_opaque_existential_1(v24, v25);
        v16 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 64);
        type metadata accessor for simd_quatf(0);
        v16(&v27, v17, v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
      v19 = v27;
      v18 = v28;
      if (v8)
      {
        v19 = 0;
        v18 = 0;
      }
      *v2 = v19;
      v2[1] = v18;
      *((_BYTE *)v2 + 16) = v8;
    }
    else
    {
      specialized ActionEvent.animationState.getter(v24, v4, v5);
      v20 = v25;
      if (v25)
      {
        v21 = v26;
        __swift_project_boxed_opaque_existential_1(v24, v25);
        v22 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v21 + 64);
        type metadata accessor for simd_quatf(0);
        v22(&v27, v23, v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
    }
    *((double *)v2 + 3) = v6;
  }
}

uint64_t specialized FromToByActionHandler.actionUpdated(event:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr), uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  double v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  double v33;
  char v34;

  v8 = v4;
  outlined init with take of Transform?(a1 + 264, (uint64_t)v32, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v33, &demangling cache variable for type metadata for Double?);
  if ((v34 & 1) == 0)
  {
    v11 = v33;
    v12 = fabs(v33 + -1.0) > 0.0001;
    v13 = v33 > 0.0001 && v12;
    if (v13
      || (*(_BYTE *)(v8 + 16) & 1) != 0
      || (v14 = *(_QWORD *)(v8 + 8), v30 = *(_QWORD *)v8, v31 = v14, vabdd_f64(*(double *)(v8 + 24), v33) > 0.0001))
    {
      result = a4(a1);
      if ((v16 & 1) != 0)
        return result;
      v30 = result;
      v31 = v15;
      a2(v27);
      v17 = v28;
      if (v28)
      {
        v18 = v29;
        __swift_project_boxed_opaque_existential_1(v27, v28);
        v19 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v18 + 64);
        v20 = __swift_instantiateConcreteTypeFromMangledName(a3);
        v19(&v30, v20, v17, v18);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
      v22 = v30;
      v21 = v31;
      if (v13)
      {
        v22 = 0;
        v21 = 0;
      }
      *(_QWORD *)v8 = v22;
      *(_QWORD *)(v8 + 8) = v21;
      *(_BYTE *)(v8 + 16) = v13;
    }
    else
    {
      ((void (*)(_QWORD *__return_ptr, uint64_t))a2)(v27, result);
      v23 = v28;
      if (v28)
      {
        v24 = v29;
        __swift_project_boxed_opaque_existential_1(v27, v28);
        v25 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v24 + 64);
        v26 = __swift_instantiateConcreteTypeFromMangledName(a3);
        v25(&v30, v26, v23, v24);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
    }
    *(double *)(v8 + 24) = v11;
  }
  return result;
}

unint64_t specialized FromToByActionHandler.actionUpdated(event:)(uint64_t a1)
{
  int *v1;
  int *v2;
  unint64_t result;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  double v18;
  char v19;

  v2 = v1;
  outlined init with take of Transform?(a1 + 200, (uint64_t)v17, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for Double?);
  if ((v19 & 1) == 0)
  {
    v5 = v18;
    v6 = fabs(v18 + -1.0) > 0.0001;
    v7 = v18 > 0.0001 && v6;
    if (v7 || (v2[1] & 1) != 0 || (v16 = *v2, vabdd_f64(*((double *)v2 + 1), v18) > 0.0001))
    {
      result = specialized FromToByActionHandler.evaluateResult(_:)(a1);
      if ((result & 0x100000000) != 0)
        return result;
      v16 = result;
      specialized ActionEvent.animationState.getter(v13, result);
      v8 = v14;
      if (v14)
      {
        v9 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        (*(void (**)(int *, _QWORD, uint64_t, uint64_t))(v9 + 64))(&v16, MEMORY[0x24BEE14E8], v8, v9);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
      v10 = v16;
      if (v7)
        v10 = 0;
      *v2 = v10;
      *((_BYTE *)v2 + 4) = v7;
    }
    else
    {
      specialized ActionEvent.animationState.getter(v13, result);
      v11 = v14;
      if (v14)
      {
        v12 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        (*(void (**)(int *, _QWORD, uint64_t, uint64_t))(v12 + 64))(&v16, MEMORY[0x24BEE14E8], v11, v12);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
      else
      {
        result = outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for AnimationStateProtocol?);
      }
    }
    *((double *)v2 + 1) = v5;
  }
  return result;
}

uint64_t specialized FromToByActionHandler.evaluateResult(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  double v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[41];
  _BYTE v36[16];
  double v37;
  char v38;

  outlined init with take of Transform?(a1 + 200, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v37, &demangling cache variable for type metadata for Double?);
  if ((v38 & 1) != 0)
    goto LABEL_16;
  v7 = v37;
  specialized ActionEvent.animationState.getter(v30, result);
  v8 = v31;
  if (v31)
  {
    v28 = a2;
    v29 = a3;
    v9 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v12 = type metadata accessor for Optional();
    v13 = *(_QWORD *)(v12 - 8);
    MEMORY[0x24BDAC7A8](v12);
    v15 = (char *)&v28 - v14;
    v10(v8, v9);
    v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      *(_QWORD *)v35 = 0;
      v33 = 0u;
      v34 = 0u;
    }
    else
    {
      *((_QWORD *)&v34 + 1) = AssociatedTypeWitness;
      *(_QWORD *)v35 = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
      (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    a3 = v29;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for AnimationStateProtocol?);
    v33 = 0u;
    v34 = 0u;
    *(_QWORD *)v35 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  result = swift_dynamicCast();
  if (!(_DWORD)result)
    goto LABEL_16;
  v18 = v30[0];
  if (!v30[0])
    goto LABEL_16;
  specialized FromToByActionHandler.getStartEnd(event:base:)((_QWORD *)a1, v30[0], (uint64_t *)&v33);
  v19 = v33;
  if (!(_QWORD)v33)
  {
    result = swift_bridgeObjectRelease();
LABEL_16:
    *a3 = 0;
    return result;
  }
  v20 = *((_QWORD *)&v33 + 1);
  v21 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)v35 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v35[16] = v21;
  *(_OWORD *)&v35[25] = *(_OWORD *)(a1 + 73);
  v22 = *(_OWORD *)(a1 + 32);
  v33 = *(_OWORD *)(a1 + 16);
  v34 = v22;
  v23 = *(_BYTE *)(a1 + 89);
  *(_OWORD *)v30 = *(_OWORD *)v35;
  *(uint64_t *)((char *)&v30[1] + 5) = *(_QWORD *)&v35[13];
  v24 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v25 + 16))
  {
    REEasingFunctionEvaluateEx();
    v24 = v26;
  }
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(v19, v20, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
    specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(v27, v18, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease_n();
    *a3 = v27;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  float32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t *v28;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[41];
  _BYTE v35[16];
  uint64_t v36;
  char v37;

  outlined init with take of Transform?(a1 + 200, (uint64_t)v35, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v36, &demangling cache variable for type metadata for Double?);
  if ((v37 & 1) != 0)
    goto LABEL_16;
  specialized ActionEvent.animationState.getter(v29, result);
  v7 = v30;
  if (v30)
  {
    v27[1] = a2;
    v28 = a3;
    v8 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v11 = type metadata accessor for Optional();
    v12 = *(_QWORD *)(v11 - 8);
    MEMORY[0x24BDAC7A8](v11);
    v14 = (char *)v27 - v13;
    v9(v7, v8);
    v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      *(_QWORD *)v34 = 0;
      v32 = 0u;
      v33 = 0u;
    }
    else
    {
      *((_QWORD *)&v33 + 1) = AssociatedTypeWitness;
      *(_QWORD *)v34 = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v32);
      (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v14, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    a3 = v28;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for AnimationStateProtocol?);
    v32 = 0u;
    v33 = 0u;
    *(_QWORD *)v34 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  result = swift_dynamicCast();
  if (!(_DWORD)result)
    goto LABEL_16;
  v17 = (float32x4_t *)v29[0];
  if (!v29[0])
    goto LABEL_16;
  specialized FromToByActionHandler.getStartEnd(event:base:)((_QWORD *)a1, v29[0], (uint64_t *)&v32);
  v18 = v32;
  if (!(_QWORD)v32)
  {
    result = swift_bridgeObjectRelease();
LABEL_16:
    *a3 = 0;
    return result;
  }
  v19 = *((_QWORD *)&v32 + 1);
  v20 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)v34 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v34[16] = v20;
  *(_OWORD *)&v34[25] = *(_OWORD *)(a1 + 73);
  v21 = *(_OWORD *)(a1 + 32);
  v32 = *(_OWORD *)(a1 + 16);
  v33 = v21;
  v22 = *(_BYTE *)(a1 + 89);
  *(_OWORD *)v29 = *(_OWORD *)v34;
  *(uint64_t *)((char *)&v29[1] + 5) = *(_QWORD *)&v34[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v23 + 16))
    REEasingFunctionEvaluateEx();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized JointTransforms.init<A>(_:)(v24, v29);
  if ((v22 & 1) != 0)
  {
    v25 = v29[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(v17, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *a3 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease_n();
    *a3 = v29[0];
  }
  return result;
}

uint64_t specialized FromToByActionHandler.getStartEnd(event:base:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2;
  v5 = a1[3];
  v6 = a1[4];
  if (a1[2])
  {
    v7 = a1[2];
  }
  else if (v5)
  {
    v7 = a2;
    if (v6)
    {
      v9 = *(_QWORD *)(v6 + 16);
      if (v9)
      {
        v16 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        v10 = v16;
        v11 = (float *)(v6 + 32);
        v12 = *(_QWORD *)(v16 + 16);
        do
        {
          v13 = *v11;
          v14 = *(_QWORD *)(v16 + 24);
          if (v12 >= v14 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v12 + 1, 1);
          *(_QWORD *)(v16 + 16) = v12 + 1;
          *(float *)(v16 + 4 * v12 + 32) = -v13;
          ++v11;
          ++v12;
          --v9;
        }
        while (v9);
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v10 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n(v5, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      result = swift_bridgeObjectRelease_n();
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = v3;
  }
  swift_bridgeObjectRetain();
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
LABEL_19:
    v3 = v5;
    goto LABEL_20;
  }
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    v3 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n(v15, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
LABEL_20:
  *a3 = v7;
  a3[1] = v3;
  return result;
}

{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v3 = a2;
  v5 = a1[3];
  v6 = a1[4];
  if (a1[2])
  {
    v7 = a1[2];
    goto LABEL_3;
  }
  if (v5)
  {
    v7 = a2;
    if (v6)
    {
      v9 = *(_QWORD *)(v6 + 16);
      if (v9)
      {
        v34 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        v10 = v34;
        if (one-time initialization token for identity != -1)
          swift_once();
        v11 = v6 + 64;
        do
        {
          RESRTInverse();
          v15 = v12;
          v17 = *(_QWORD *)(v34 + 16);
          v16 = *(_QWORD *)(v34 + 24);
          v18 = v17 + 1;
          if (v17 >= v16 >> 1)
          {
            v27 = v14;
            v28 = v12;
            v26 = v13;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            v13 = v26;
            v14 = v27;
            v15 = v28;
          }
          HIDWORD(v15) = v31;
          HIDWORD(v14) = v33;
          *(_QWORD *)(v34 + 16) = v18;
          v19 = (_OWORD *)(v34 + 48 * v17);
          v19[2] = v15;
          v19[3] = v13;
          v19[4] = v14;
          v11 += 48;
          --v9;
        }
        while (v9);
      }
      else
      {
        v10 = MEMORY[0x24BEE4AF8];
        v18 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v21 = (_QWORD *)v10;
        if (!v18)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(v5, (unint64_t)v21);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          result = swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }
      }
      v22 = (__int128 *)(v10 + 64);
      v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v30 = *(v22 - 1);
        v32 = *(v22 - 2);
        v29 = *v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        v24 = v21[2];
        v23 = v21[3];
        if (v24 >= v23 >> 1)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
        v21[2] = v24 + 1;
        v25 = &v21[6 * v24];
        v25[2] = v32;
        v25[3] = v30;
        v25[4] = v29;
        v22 += 3;
        --v18;
      }
      while (v18);
      goto LABEL_26;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = v3;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
LABEL_27:
    v3 = v5;
    goto LABEL_28;
  }
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v20 = swift_bridgeObjectRetain();
    v3 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(v20, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
LABEL_28:
  *a3 = v7;
  a3[1] = v3;
  return result;
}

uint64_t specialized ActionEventData.parameter<A>(type:)(uint64_t *a1)
{
  uint64_t v1;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[56];
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _QWORD v23[6];

  outlined init with take of Transform?(v1, (uint64_t)v20, &demangling cache variable for type metadata for Int?);
  outlined init with take of Transform?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for Int?);
  if ((v22 & 1) != 0)
    return 1;
  outlined init with take of Transform?(v1 + 24, (uint64_t)v19, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  if (!v23[0])
  {
    if ((id)RETimelineEventGetSwiftParameter())
    {
      __swift_instantiateConcreteTypeFromMangledName(a1);
      v3 = swift_dynamicCastClass() == 0;
      swift_unknownObjectRelease();
      return v3;
    }
    return 1;
  }
  v16 = v23[2];
  v4 = v23[4];
  v15 = v23[3];
  v5 = v23[5];
  v14[1] = *(_QWORD *)(v1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v14[0] = v14;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v14 - v9;
  static EntityAction<>.loadParameter<A>(_:parameterType:eventID:)(v4, 0, v4, (uint64_t)v14 - v9, v15, v5);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v18 = 0u;
    v17 = 0u;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  return swift_dynamicCast() ^ 1;
}

uint64_t specialized ActionEventData.action<A>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t *boxed_opaque_existential_1;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[56];
  _QWORD v23[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v22, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v22, (uint64_t)v23, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v23[0];
  if (!v23[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<EmphasizeAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = *(_WORD *)(v14 + 16);
        v16 = *(_BYTE *)(v14 + 18);
        result = swift_unknownObjectRelease();
        *(_WORD *)a1 = v15;
        *(_BYTE *)(a1 + 2) = v16;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v23[1];
  v5 = v23[2];
  v6 = v23[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v18 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
  }
  else
  {
    *((_QWORD *)&v19 + 1) = v3;
    *(_QWORD *)&v20 = v4;
    *((_QWORD *)&v20 + 1) = v5;
    v21 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_BYTE *)(a1 + 2) = 2;
    *(_WORD *)a1 = 0;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *boxed_opaque_existential_1;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[56];
  _QWORD v28[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v28, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v28[0];
  if (!v28[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<PlayAudioAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = *(_BYTE *)(v14 + 32);
        v19 = *(_QWORD *)(v14 + 40);
        v18 = *(_QWORD *)(v14 + 48);
        v20 = *(_QWORD *)(v14 + 56);
        v21 = *(_BYTE *)(v14 + 64);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        result = swift_unknownObjectRelease();
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v19;
        *(_QWORD *)(a1 + 32) = v18;
        *(_QWORD *)(a1 + 40) = v20;
        *(_BYTE *)(a1 + 48) = v21;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v28[1];
  v5 = v28[2];
  v6 = v28[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v23 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
  }
  else
  {
    *((_QWORD *)&v24 + 1) = v3;
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v26 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_BYTE *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[168];
  _BYTE v44[56];
  _QWORD v45[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v44, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v45, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v45[0];
  if (v45[0])
  {
    v4 = v45[1];
    v5 = v45[2];
    v6 = v45[3];
    v7 = *(_QWORD *)(v1 + 16);
    v8 = type metadata accessor for Optional();
    *(_QWORD *)&v38 = &v30;
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)&v30 - v10;
    static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v30 - v10);
    v12 = *(_QWORD *)(v3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
    }
    else
    {
      *((_QWORD *)&v40 + 1) = v3;
      *(_QWORD *)&v41 = v4;
      *((_QWORD *)&v41 + 1) = v5;
      v42 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
    if (swift_dynamicCast())
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v25);
  }
  else if ((id)RETimelineEventGetSwiftConstantData())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<BillboardAction>);
    v13 = swift_dynamicCastClass();
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      v16 = *(_BYTE *)(v13 + 32);
      v38 = *(_OWORD *)(v13 + 48);
      v17 = *(_QWORD *)(v13 + 64);
      v18 = *(_QWORD *)(v13 + 72);
      v19 = *(_BYTE *)(v13 + 80);
      v20 = *(_QWORD *)(v13 + 96);
      v21 = *(_QWORD *)(v13 + 112);
      v37 = *(_QWORD *)(v13 + 120);
      v22 = *(_DWORD *)(v13 + 128);
      v35 = *(unsigned __int8 *)(v13 + 132);
      v36 = v22;
      v23 = *(_QWORD *)(v13 + 144);
      v24 = *(_QWORD *)(v13 + 160);
      v33 = *(_QWORD *)(v13 + 168);
      v34 = v24;
      LODWORD(v24) = *(_DWORD *)(v13 + 176);
      v31 = *(unsigned __int8 *)(v13 + 180);
      v32 = v24;
      swift_unknownObjectRelease();
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v15;
      *(_BYTE *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v38;
      *(_QWORD *)(a1 + 48) = v17;
      *(_QWORD *)(a1 + 56) = v18;
      *(_BYTE *)(a1 + 64) = v19;
      *(_QWORD *)(a1 + 80) = v20;
      v26 = v37;
      *(_QWORD *)(a1 + 96) = v21;
      *(_QWORD *)(a1 + 104) = v26;
      *(_DWORD *)(a1 + 112) = v36;
      *(_BYTE *)(a1 + 116) = v35;
      *(_QWORD *)(a1 + 128) = v23;
      v27 = v33;
      *(_QWORD *)(a1 + 144) = v34;
      *(_QWORD *)(a1 + 152) = v27;
      *(_DWORD *)(a1 + 160) = v32;
      *(_BYTE *)(a1 + 164) = v31;
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v25);
    }
    swift_unknownObjectRelease();
  }
  _s17RealityFoundation15BillboardActionVSgWOi0_((uint64_t)v43);
  return outlined init with take of Transform?((uint64_t)v43, a1, &demangling cache variable for type metadata for BillboardAction?);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t *boxed_opaque_existential_1;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[56];
  _QWORD v28[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v28, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v28[0];
  if (!v28[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<SpinAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = *(_DWORD *)(v14 + 16);
        v22 = *(_OWORD *)(v14 + 32);
        v16 = *(_QWORD *)(v14 + 48);
        v17 = *(_QWORD *)(v14 + 56);
        v18 = *(_DWORD *)(v14 + 64);
        v19 = *(_BYTE *)(v14 + 68);
        v20 = *(_BYTE *)(v14 + 69);
        result = swift_unknownObjectRelease();
        *(_DWORD *)a1 = v15;
        *(_OWORD *)(a1 + 16) = v22;
        *(_QWORD *)(a1 + 32) = v16;
        *(_QWORD *)(a1 + 40) = v17;
        *(_DWORD *)(a1 + 48) = v18;
        *(_BYTE *)(a1 + 52) = v19;
        *(_BYTE *)(a1 + 53) = v20;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v28[1];
  v5 = v28[2];
  v6 = v28[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v22 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
  }
  else
  {
    *((_QWORD *)&v24 + 1) = v3;
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v26 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_DWORD *)(a1 + 48) = 0;
    *(_WORD *)(a1 + 52) = 512;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  char v20;
  uint64_t *boxed_opaque_existential_1;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[56];
  _QWORD v28[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v28, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v28[0];
  if (!v28[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<OrbitEntityAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = *(_BYTE *)(v14 + 32);
        v18 = *(_DWORD *)(v14 + 36);
        v22 = *(_OWORD *)(v14 + 48);
        v19 = *(_BYTE *)(v14 + 64);
        v20 = *(_BYTE *)(v14 + 65);
        outlined copy of ActionEntityResolution();
        result = swift_unknownObjectRelease();
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 20) = v18;
        *(_OWORD *)(a1 + 32) = v22;
        *(_BYTE *)(a1 + 48) = v19;
        *(_BYTE *)(a1 + 49) = v20;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v28[1];
  v5 = v28[2];
  v6 = v28[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v22 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
  }
  else
  {
    *((_QWORD *)&v24 + 1) = v3;
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v26 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 255;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_WORD *)(a1 + 48) = 0;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *boxed_opaque_existential_1;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[56];
  _QWORD v25[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v24, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v24, (uint64_t)v25, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v25[0];
  if (!v25[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<ImpulseAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = *(_BYTE *)(v14 + 32);
        v19 = *(_OWORD *)(v14 + 48);
        outlined copy of ActionEntityResolution();
        result = swift_unknownObjectRelease();
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v19;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v25[1];
  v5 = v25[2];
  v6 = v25[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v19 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
  }
  else
  {
    *((_QWORD *)&v21 + 1) = v3;
    *(_QWORD *)&v22 = v4;
    *((_QWORD *)&v22 + 1) = v5;
    v23 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 255;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t *boxed_opaque_existential_1;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[56];
  _QWORD v25[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v24, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v24, (uint64_t)v25, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v25[0];
  if (!v25[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<SetEntityEnabledAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 16);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = *(_BYTE *)(v14 + 32);
        v18 = *(_BYTE *)(v14 + 33);
        outlined copy of ActionEntityResolution();
        result = swift_unknownObjectRelease();
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 16) = v17;
        *(_BYTE *)(a1 + 17) = v18;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v25[1];
  v5 = v25[2];
  v6 = v25[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v20 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
  }
  else
  {
    *((_QWORD *)&v21 + 1) = v3;
    *(_QWORD *)&v22 = v4;
    *((_QWORD *)&v22 + 1) = v5;
    v23 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 16) = 255;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v25[12];
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[56];
  _QWORD v32[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v31, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v32[0];
  if (!v32[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<PlayAnimationAction>);
      v14 = swift_dynamicCastClass();
      if (v14)
      {
        v16 = *(_QWORD *)(v14 + 16);
        v15 = *(_QWORD *)(v14 + 24);
        v17 = *(_QWORD *)(v14 + 32);
        v18 = *(_QWORD *)(v14 + 40);
        v19 = *(_BYTE *)(v14 + 48);
        v20 = *(_BYTE *)(v14 + 49);
        v21 = *(_QWORD *)(v14 + 56);
        v22 = *(_QWORD *)(v14 + 64);
        v23 = *(_BYTE *)(v14 + 72);
        v26 = *(unsigned __int8 *)(v14 + 73);
        swift_bridgeObjectRetain();
        outlined copy of ActionEntityResolution();
        result = swift_unknownObjectRelease();
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
        *(_BYTE *)(a1 + 32) = v19;
        *(_BYTE *)(a1 + 33) = v20;
        *(_QWORD *)(a1 + 40) = v21;
        *(_QWORD *)(a1 + 48) = v22;
        *(_BYTE *)(a1 + 56) = v23;
        *(_BYTE *)(a1 + 57) = v26;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v32[1];
  v5 = v32[2];
  v6 = v32[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v25[-v10];
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v25[-v10]);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
  }
  else
  {
    *((_QWORD *)&v28 + 1) = v3;
    *(_QWORD *)&v29 = v4;
    *((_QWORD *)&v29 + 1) = v5;
    v30 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *(_OWORD *)(a1 + 42) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

double specialized ActionEventData.action<A>()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t *boxed_opaque_existential_1;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[56];
  _QWORD v32[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v31, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v32[0];
  if (!v32[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Transform>>);
      v13 = swift_dynamicCastClass();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v16 = *(_BYTE *)(v13 + 32);
        v18 = *(_QWORD *)(v13 + 40);
        v17 = *(_QWORD *)(v13 + 48);
        v26 = *(_OWORD *)(v13 + 64);
        v25 = *(_OWORD *)(v13 + 80);
        v19 = *(_QWORD *)(v13 + 96);
        v20 = *(_QWORD *)(v13 + 104);
        v21 = *(_BYTE *)(v13 + 112);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v15;
        *(_BYTE *)(a1 + 16) = v16;
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v17;
        v22 = v25;
        *(_OWORD *)(a1 + 48) = v26;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v19;
        *(_QWORD *)(a1 + 88) = v20;
        *(_BYTE *)(a1 + 96) = v21;
        return *(double *)&v22;
      }
      swift_unknownObjectRelease();
    }
LABEL_11:
    *(_BYTE *)(a1 + 96) = 0;
    *(_QWORD *)&v22 = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return *(double *)&v22;
  }
  v4 = v32[1];
  v5 = v32[2];
  v6 = v32[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v25 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
  }
  else
  {
    *((_QWORD *)&v28 + 1) = v3;
    *(_QWORD *)&v29 = v4;
    *((_QWORD *)&v29 + 1) = v5;
    v30 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;
  return *(double *)&v22;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t *boxed_opaque_existential_1;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[56];
  _QWORD v28[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v28, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v28[0];
  if (!v28[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<String>>);
      v13 = swift_dynamicCastClass();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v16 = *(_BYTE *)(v13 + 32);
        v18 = *(_QWORD *)(v13 + 40);
        v17 = *(_QWORD *)(v13 + 48);
        v20 = *(_QWORD *)(v13 + 56);
        v19 = *(_QWORD *)(v13 + 64);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v15;
        *(_BYTE *)(a1 + 16) = v16;
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v17;
        *(_QWORD *)(a1 + 40) = v20;
        *(_QWORD *)(a1 + 48) = v19;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v28[1];
  v5 = v28[2];
  v6 = v28[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v23 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
  }
  else
  {
    *((_QWORD *)&v24 + 1) = v3;
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v26 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(_QWORD *)(a1 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double result;
  uint64_t *boxed_opaque_existential_1;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[56];
  _QWORD v27[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v26, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v26, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v27[0];
  if (!v27[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Bool>>);
      v13 = swift_dynamicCastClass();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v16 = *(_BYTE *)(v13 + 32);
        v18 = *(_QWORD *)(v13 + 40);
        v17 = *(_QWORD *)(v13 + 48);
        v19 = *(_BYTE *)(v13 + 56);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v15;
        *(_BYTE *)(a1 + 16) = v16;
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v17;
        *(_BYTE *)(a1 + 40) = v19;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v27[1];
  v5 = v27[2];
  v6 = v27[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v22 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = v3;
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v25 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    result = 0.0;
    *(_OWORD *)(a1 + 25) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  double result;
  uint64_t *boxed_opaque_existential_1;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[56];
  _QWORD v28[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v27, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v28, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v28[0];
  if (!v28[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Float>>);
      v13 = swift_dynamicCastClass();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v16 = *(_BYTE *)(v13 + 32);
        v18 = *(_QWORD *)(v13 + 40);
        v17 = *(_QWORD *)(v13 + 48);
        v19 = *(_DWORD *)(v13 + 56);
        v20 = *(_BYTE *)(v13 + 60);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v15;
        *(_BYTE *)(a1 + 16) = v16;
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v17;
        *(_DWORD *)(a1 + 40) = v19;
        *(_BYTE *)(a1 + 44) = v20;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v28[1];
  v5 = v28[2];
  v6 = v28[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v23 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
  }
  else
  {
    *((_QWORD *)&v24 + 1) = v3;
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v26 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    result = 0.0;
    *(_OWORD *)(a1 + 29) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[56];
  _QWORD v41[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v40, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)v41, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v41[0];
  if (!v41[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<Float>>);
      v13 = swift_dynamicCastClass();
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 16);
        v15 = *(_BYTE *)(v13 + 20);
        v16 = *(_DWORD *)(v13 + 24);
        v17 = *(_BYTE *)(v13 + 28);
        v18 = *(_DWORD *)(v13 + 32);
        v31 = *(unsigned __int8 *)(v13 + 36);
        v30 = *(_QWORD *)(v13 + 48);
        v29 = *(_QWORD *)(v13 + 56);
        v28 = *(_DWORD *)(v13 + 64);
        v27 = *(unsigned __int8 *)(v13 + 68);
        v19 = *(_QWORD *)(v13 + 72);
        v20 = *(_QWORD *)(v13 + 80);
        v35 = *(unsigned __int8 *)(v13 + 89);
        v34 = *(unsigned __int8 *)(v13 + 90);
        v33 = *(_QWORD *)(v13 + 96);
        v32 = *(_QWORD *)(v13 + 104);
        v21 = *(_BYTE *)(v13 + 88);
        outlined copy of FromToByAction<A>.TransformMode<A>(v19, v20, v21);
        swift_unknownObjectRelease();
        *(_DWORD *)a1 = v14;
        *(_BYTE *)(a1 + 4) = v15;
        *(_DWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 12) = v17;
        *(_DWORD *)(a1 + 16) = v18;
        *(_BYTE *)(a1 + 20) = v31;
        v23 = v29;
        *(_QWORD *)(a1 + 32) = v30;
        *(_QWORD *)(a1 + 40) = v23;
        *(_DWORD *)(a1 + 48) = v28;
        *(_BYTE *)(a1 + 52) = v27;
        *(_QWORD *)(a1 + 56) = v19;
        *(_QWORD *)(a1 + 64) = v20;
        *(_BYTE *)(a1 + 72) = v21;
        *(_BYTE *)(a1 + 73) = v35;
        *(_BYTE *)(a1 + 74) = v34;
        v24 = v32;
        *(_QWORD *)(a1 + 80) = v33;
        *(_QWORD *)(a1 + 88) = v24;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v41[1];
  v5 = v41[2];
  v6 = v41[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v26 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
  }
  else
  {
    *((_QWORD *)&v37 + 1) = v3;
    *(_QWORD *)&v38 = v4;
    *((_QWORD *)&v38 + 1) = v5;
    v39 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = xmmword_21BE41200;
  }
  return result;
}

double specialized ActionEventData.action<A>()@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  double result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[56];
  _QWORD v35[8];

  outlined init with take of Transform?(v3 + 24, (uint64_t)v34, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v7 = v35[0];
  if (!v35[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(a1);
      v17 = swift_dynamicCastClass();
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        v20 = *(_BYTE *)(v17 + 32);
        v22 = *(_QWORD *)(v17 + 40);
        v21 = *(_QWORD *)(v17 + 48);
        v23 = *(_QWORD *)(v17 + 64);
        v24 = *(_QWORD *)(v17 + 72);
        v25 = *(_BYTE *)(v17 + 80);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v19;
        *(_BYTE *)(a3 + 16) = v20;
        *(_QWORD *)(a3 + 24) = v22;
        *(_QWORD *)(a3 + 32) = v21;
        *(_QWORD *)(a3 + 48) = v23;
        *(_QWORD *)(a3 + 56) = v24;
        *(_BYTE *)(a3 + 64) = v25;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v29 = a2;
  v8 = v35[1];
  v9 = v35[2];
  v10 = v35[3];
  v11 = *(_QWORD *)(v3 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - v14;
  static EntityAction<>.load(_:)(v11, v7, v9, (uint64_t)&v28 - v14);
  v16 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
  }
  else
  {
    *((_QWORD *)&v31 + 1) = v7;
    *(_QWORD *)&v32 = v8;
    *((_QWORD *)&v32 + 1) = v9;
    v33 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(v29);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(_BYTE *)(a3 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[56];
  _QWORD v34[8];

  outlined init with take of Transform?(v3 + 24, (uint64_t)v33, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v34, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v7 = v34[0];
  if (!v34[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(a1);
      v17 = swift_dynamicCastClass();
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        v20 = *(_BYTE *)(v17 + 32);
        v22 = *(_QWORD *)(v17 + 40);
        v21 = *(_QWORD *)(v17 + 48);
        v23 = *(_QWORD *)(v17 + 56);
        v24 = *(_BYTE *)(v17 + 64);
        outlined copy of ActionEntityResolution();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v19;
        *(_BYTE *)(a3 + 16) = v20;
        *(_QWORD *)(a3 + 24) = v22;
        *(_QWORD *)(a3 + 32) = v21;
        *(_QWORD *)(a3 + 40) = v23;
        *(_BYTE *)(a3 + 48) = v24;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v28 = a2;
  v8 = v34[1];
  v9 = v34[2];
  v10 = v34[3];
  v11 = *(_QWORD *)(v3 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v27 - v14;
  static EntityAction<>.load(_:)(v11, v7, v9, (uint64_t)&v27 - v14);
  v16 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
  }
  else
  {
    *((_QWORD *)&v30 + 1) = v7;
    *(_QWORD *)&v31 = v8;
    *((_QWORD *)&v31 + 1) = v9;
    v32 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(v28);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(_BYTE *)(a3 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  double result;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[56];
  _QWORD v41[8];

  outlined init with take of Transform?(v3 + 24, (uint64_t)v40, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)v41, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v7 = v41[0];
  if (!v41[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(a1);
      v17 = swift_dynamicCastClass();
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        v20 = *(_QWORD *)(v17 + 32);
        v21 = *(_QWORD *)(v17 + 48);
        v22 = *(_QWORD *)(v17 + 56);
        v31 = *(_DWORD *)(v17 + 64);
        v30 = *(unsigned __int8 *)(v17 + 68);
        v23 = *(_QWORD *)(v17 + 72);
        v24 = *(_QWORD *)(v17 + 80);
        LODWORD(v35) = *(unsigned __int8 *)(v17 + 89);
        v34 = *(unsigned __int8 *)(v17 + 90);
        v33 = *(_QWORD *)(v17 + 96);
        v32 = *(_QWORD *)(v17 + 104);
        v25 = *(_BYTE *)(v17 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v23, v24, v25);
        swift_unknownObjectRelease();
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v19;
        *(_QWORD *)(a3 + 16) = v20;
        *(_QWORD *)(a3 + 32) = v21;
        *(_QWORD *)(a3 + 40) = v22;
        *(_DWORD *)(a3 + 48) = v31;
        *(_BYTE *)(a3 + 52) = v30;
        *(_QWORD *)(a3 + 56) = v23;
        *(_QWORD *)(a3 + 64) = v24;
        *(_BYTE *)(a3 + 72) = v25;
        *(_BYTE *)(a3 + 73) = (_BYTE)v35;
        *(_BYTE *)(a3 + 74) = v34;
        v27 = v32;
        *(_QWORD *)(a3 + 80) = v33;
        *(_QWORD *)(a3 + 88) = v27;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v35 = a2;
  v8 = v41[1];
  v9 = v41[2];
  v10 = v41[3];
  v11 = *(_QWORD *)(v3 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - v14;
  static EntityAction<>.load(_:)(v11, v7, v9, (uint64_t)&v29 - v14);
  v16 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
  }
  else
  {
    *((_QWORD *)&v37 + 1) = v7;
    *(_QWORD *)&v38 = v8;
    *((_QWORD *)&v38 + 1) = v9;
    v39 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(v35);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(_QWORD *)a3 = 1;
    result = 0.0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_1;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[56];
  _QWORD v44[8];

  outlined init with take of Transform?(v3 + 24, (uint64_t)v43, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v7 = v44[0];
  if (!v44[0])
  {
    if ((id)RETimelineEventGetSwiftConstantData())
    {
      __swift_instantiateConcreteTypeFromMangledName(a1);
      v17 = swift_dynamicCastClass();
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        v19 = *(_BYTE *)(v17 + 24);
        v20 = *(_QWORD *)(v17 + 32);
        v21 = *(_BYTE *)(v17 + 40);
        v22 = *(_QWORD *)(v17 + 48);
        v34 = *(unsigned __int8 *)(v17 + 56);
        v33 = *(_QWORD *)(v17 + 64);
        v32 = *(_QWORD *)(v17 + 72);
        v31 = *(_DWORD *)(v17 + 80);
        v30 = *(unsigned __int8 *)(v17 + 84);
        v23 = *(_QWORD *)(v17 + 88);
        v24 = *(_QWORD *)(v17 + 96);
        LODWORD(v38) = *(unsigned __int8 *)(v17 + 105);
        v37 = *(unsigned __int8 *)(v17 + 106);
        v36 = *(_QWORD *)(v17 + 112);
        v35 = *(_QWORD *)(v17 + 120);
        v25 = *(_BYTE *)(v17 + 104);
        outlined copy of FromToByAction<A>.TransformMode<A>(v23, v24, v25);
        swift_unknownObjectRelease();
        *(_QWORD *)a3 = v18;
        *(_BYTE *)(a3 + 8) = v19;
        *(_QWORD *)(a3 + 16) = v20;
        *(_BYTE *)(a3 + 24) = v21;
        *(_QWORD *)(a3 + 32) = v22;
        *(_BYTE *)(a3 + 40) = v34;
        v27 = v32;
        *(_QWORD *)(a3 + 48) = v33;
        *(_QWORD *)(a3 + 56) = v27;
        *(_DWORD *)(a3 + 64) = v31;
        *(_BYTE *)(a3 + 68) = v30;
        *(_QWORD *)(a3 + 72) = v23;
        *(_QWORD *)(a3 + 80) = v24;
        *(_BYTE *)(a3 + 88) = v25;
        *(_BYTE *)(a3 + 89) = (_BYTE)v38;
        *(_BYTE *)(a3 + 90) = v37;
        v28 = v35;
        *(_QWORD *)(a3 + 96) = v36;
        *(_QWORD *)(a3 + 104) = v28;
        return result;
      }
      swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v38 = a2;
  v8 = v44[1];
  v9 = v44[2];
  v10 = v44[3];
  v11 = *(_QWORD *)(v3 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - v14;
  static EntityAction<>.load(_:)(v11, v7, v9, (uint64_t)&v30 - v14);
  v16 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
  }
  else
  {
    *((_QWORD *)&v40 + 1) = v7;
    *(_QWORD *)&v41 = v8;
    *((_QWORD *)&v41 + 1) = v9;
    v42 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  __swift_instantiateConcreteTypeFromMangledName(v38);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)&result = 1;
    *(_OWORD *)(a3 + 96) = xmmword_21BE41200;
  }
  return result;
}

uint64_t specialized ActionEventData.action<A>()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[56];
  _QWORD v55[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v54, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v54, (uint64_t)v55, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v55[0];
  if (v55[0])
  {
    v4 = v55[1];
    v5 = v55[2];
    v6 = v55[3];
    v7 = *(_QWORD *)(v1 + 16);
    v8 = type metadata accessor for Optional();
    v33[1] = v33;
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)v33 - v10;
    static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)v33 - v10);
    v12 = *(_QWORD *)(v3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
    }
    else
    {
      *((_QWORD *)&v35 + 1) = v3;
      *(_QWORD *)&v36 = v4;
      *((_QWORD *)&v36 + 1) = v5;
      v37 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
    if (swift_dynamicCast())
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v22);
  }
  else if ((id)RETimelineEventGetSwiftConstantData())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<Transform>>);
    v13 = (_OWORD *)swift_dynamicCastClass();
    if (v13)
    {
      v14 = v13[14];
      v50 = v13[13];
      v51 = v14;
      v15 = v13[16];
      v52 = v13[15];
      v53 = v15;
      v16 = v13[10];
      v46 = v13[9];
      v47 = v16;
      v17 = v13[12];
      v48 = v13[11];
      v49 = v17;
      v18 = v13[6];
      v42 = v13[5];
      v43 = v18;
      v19 = v13[8];
      v44 = v13[7];
      v45 = v19;
      v20 = v13[2];
      v38 = v13[1];
      v39 = v20;
      v21 = v13[4];
      v40 = v13[3];
      v41 = v21;
      outlined retain of FromToByAction<Transform>((uint64_t)&v38);
      swift_unknownObjectRelease();
      v23 = v51;
      a1[12] = v50;
      a1[13] = v23;
      v24 = v53;
      a1[14] = v52;
      a1[15] = v24;
      v25 = v47;
      a1[8] = v46;
      a1[9] = v25;
      v26 = v49;
      a1[10] = v48;
      a1[11] = v26;
      v27 = v43;
      a1[4] = v42;
      a1[5] = v27;
      v28 = v45;
      a1[6] = v44;
      a1[7] = v28;
      v29 = v39;
      *a1 = v38;
      a1[1] = v29;
      v30 = v41;
      a1[2] = v40;
      a1[3] = v30;
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v22);
    }
    swift_unknownObjectRelease();
  }
  _s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOi0_(&v38);
  return outlined init with take of Transform?((uint64_t)&v38, (uint64_t)a1, &demangling cache variable for type metadata for FromToByAction<Transform>?);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[56];
  _QWORD v43[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v42, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v42, (uint64_t)v43, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v43[0];
  if (v43[0])
  {
    v4 = v43[1];
    v5 = v43[2];
    v6 = v43[3];
    v7 = *(_QWORD *)(v1 + 16);
    v8 = type metadata accessor for Optional();
    v27[1] = v27;
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)v27 - v10;
    static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)v27 - v10);
    v12 = *(_QWORD *)(v3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
    }
    else
    {
      *((_QWORD *)&v29 + 1) = v3;
      *(_QWORD *)&v30 = v4;
      *((_QWORD *)&v30 + 1) = v5;
      v31 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (swift_dynamicCast())
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v19);
  }
  else if ((id)RETimelineEventGetSwiftConstantData())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<simd_quatf>>);
    v13 = (_OWORD *)swift_dynamicCastClass();
    if (v13)
    {
      v14 = v13[8];
      v38 = v13[7];
      v39 = v14;
      v15 = v13[10];
      v40 = v13[9];
      v41 = v15;
      v16 = v13[4];
      v34 = v13[3];
      v35 = v16;
      v17 = v13[6];
      v36 = v13[5];
      v37 = v17;
      v18 = v13[2];
      v32 = v13[1];
      v33 = v18;
      outlined retain of FromToByAction<simd_quatf>((uint64_t)&v32);
      swift_unknownObjectRelease();
      v20 = v39;
      a1[6] = v38;
      a1[7] = v20;
      v21 = v41;
      a1[8] = v40;
      a1[9] = v21;
      v22 = v35;
      a1[2] = v34;
      a1[3] = v22;
      v23 = v37;
      a1[4] = v36;
      a1[5] = v23;
      v24 = v33;
      *a1 = v32;
      a1[1] = v24;
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v19);
    }
    swift_unknownObjectRelease();
  }
  _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOi0_(&v32);
  return outlined init with take of Transform?((uint64_t)&v32, (uint64_t)a1, &demangling cache variable for type metadata for FromToByAction<simd_quatf>?);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[56];
  _QWORD v43[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v42, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v42, (uint64_t)v43, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v43[0];
  if (v43[0])
  {
    v4 = v43[1];
    v5 = v43[2];
    v6 = v43[3];
    v7 = *(_QWORD *)(v1 + 16);
    v8 = type metadata accessor for Optional();
    v27[1] = v27;
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)v27 - v10;
    static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)v27 - v10);
    v12 = *(_QWORD *)(v3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
    }
    else
    {
      *((_QWORD *)&v29 + 1) = v3;
      *(_QWORD *)&v30 = v4;
      *((_QWORD *)&v30 + 1) = v5;
      v31 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (swift_dynamicCast())
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v19);
  }
  else if ((id)RETimelineEventGetSwiftConstantData())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<SIMD4<Float>>>);
    v13 = (_OWORD *)swift_dynamicCastClass();
    if (v13)
    {
      v14 = v13[8];
      v38 = v13[7];
      v39 = v14;
      v15 = v13[10];
      v40 = v13[9];
      v41 = v15;
      v16 = v13[4];
      v34 = v13[3];
      v35 = v16;
      v17 = v13[6];
      v36 = v13[5];
      v37 = v17;
      v18 = v13[2];
      v32 = v13[1];
      v33 = v18;
      outlined retain of FromToByAction<simd_quatf>((uint64_t)&v32);
      swift_unknownObjectRelease();
      v20 = v39;
      a1[6] = v38;
      a1[7] = v20;
      v21 = v41;
      a1[8] = v40;
      a1[9] = v21;
      v22 = v35;
      a1[2] = v34;
      a1[3] = v22;
      v23 = v37;
      a1[4] = v36;
      a1[5] = v23;
      v24 = v33;
      *a1 = v32;
      a1[1] = v24;
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v19);
    }
    swift_unknownObjectRelease();
  }
  _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOi0_(&v32);
  return outlined init with take of Transform?((uint64_t)&v32, (uint64_t)a1, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>?);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[56];
  _QWORD v43[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v42, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v42, (uint64_t)v43, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v43[0];
  if (v43[0])
  {
    v4 = v43[1];
    v5 = v43[2];
    v6 = v43[3];
    v7 = *(_QWORD *)(v1 + 16);
    v8 = type metadata accessor for Optional();
    v27[1] = v27;
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)v27 - v10;
    static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)v27 - v10);
    v12 = *(_QWORD *)(v3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
    }
    else
    {
      *((_QWORD *)&v29 + 1) = v3;
      *(_QWORD *)&v30 = v4;
      *((_QWORD *)&v30 + 1) = v5;
      v31 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (swift_dynamicCast())
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v19);
  }
  else if ((id)RETimelineEventGetSwiftConstantData())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<SIMD3<Float>>>);
    v13 = (_OWORD *)swift_dynamicCastClass();
    if (v13)
    {
      v14 = v13[8];
      v38 = v13[7];
      v39 = v14;
      v15 = v13[10];
      v40 = v13[9];
      v41 = v15;
      v16 = v13[4];
      v34 = v13[3];
      v35 = v16;
      v17 = v13[6];
      v36 = v13[5];
      v37 = v17;
      v18 = v13[2];
      v32 = v13[1];
      v33 = v18;
      outlined retain of FromToByAction<simd_quatf>((uint64_t)&v32);
      swift_unknownObjectRelease();
      v20 = v39;
      a1[6] = v38;
      a1[7] = v20;
      v21 = v41;
      a1[8] = v40;
      a1[9] = v21;
      v22 = v35;
      a1[2] = v34;
      a1[3] = v22;
      v23 = v37;
      a1[4] = v36;
      a1[5] = v23;
      v24 = v33;
      *a1 = v32;
      a1[1] = v24;
      return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v19);
    }
    swift_unknownObjectRelease();
  }
  _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOi0_(&v32);
  return outlined init with take of Transform?((uint64_t)&v32, (uint64_t)a1, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>?);
}

uint64_t specialized ActionEventData.action<A>()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[56];
  _QWORD v24[8];

  outlined init with take of Transform?(v1 + 24, (uint64_t)v23, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v23, (uint64_t)v24, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  v3 = v24[0];
  if (!v24[0])
  {
    result = (uint64_t)(id)RETimelineEventGetSwiftConstantData();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityActionWrapper<NotificationAction>);
      v14 = (_QWORD *)swift_dynamicCastClass();
      if (v14)
      {
        v16 = v14[2];
        v15 = v14[3];
        v17 = v14[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_unknownObjectRelease();
        *a1 = v16;
        a1[1] = v15;
        a1[2] = v17;
        return result;
      }
      result = swift_unknownObjectRelease();
    }
    goto LABEL_11;
  }
  v4 = v24[1];
  v5 = v24[2];
  v6 = v24[3];
  v7 = *(_QWORD *)(v1 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  static EntityAction<>.load(_:)(v7, v3, v5, (uint64_t)&v19 - v10);
  v12 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
  }
  else
  {
    *((_QWORD *)&v20 + 1) = v3;
    *(_QWORD *)&v21 = v4;
    *((_QWORD *)&v21 + 1) = v5;
    v22 = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return result;
}

uint64_t specialized static EntityAction.__unsubscribe(from:_:)(Swift::UInt a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EmphasizeAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for EmphasizeAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for EmphasizeAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAudioAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for PlayAudioAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for PlayAudioAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for BillboardAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for BillboardAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for BillboardAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SpinAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for SpinAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for SpinAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for OrbitEntityAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for OrbitEntityAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for OrbitEntityAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for ImpulseAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for ImpulseAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for ImpulseAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SetEntityEnabledAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for SetEntityEnabledAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for SetEntityEnabledAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for NotificationAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for NotificationAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for NotificationAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAnimationAction);
  if ((v6 & 1) == 0)
    return swift_endAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v15 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v11, v12);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v18, v7);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v7 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)&type metadata for PlayAnimationAction, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v19;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&type metadata for PlayAnimationAction);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static EntityAction.__unsubscribe(from:_:)(Swift::UInt a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  if (one-time initialization token for actionSubscriptions != -1)
    swift_once();
  swift_beginAccess();
  v6 = static AnimationResource.actionSubscriptions;
  if (!*(_QWORD *)(static AnimationResource.actionSubscriptions + 16))
    return swift_endAccess();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v8 & 1) == 0)
    return swift_endAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    if (a2)
    {
      swift_bridgeObjectRetain();
      result = REEngineGetEventBus();
    }
    else
    {
      swift_bridgeObjectRetain();
      v17 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      result = MEMORY[0x22076FDA0](*(_QWORD *)(v17 + 16));
      if (!result)
      {
        __break(1u);
        return result;
      }
    }
    MEMORY[0x22076D1F0](result, v13, v14);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v19 & 1) != 0)
    {
      v20 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      specialized _NativeDictionary._delete(at:)(v20, v9);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (*(_QWORD *)(v9 + 16))
  {
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = static AnimationResource.actionSubscriptions;
    static AnimationResource.actionSubscriptions = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v5, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionSubscriptions = v21;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v5);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EmphasizeAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmphasizeAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?), v11, (uint64_t)&type metadata for EmphasizeAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAudioAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for PlayAudioAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t v6;
  char v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v8 = v7;
    swift_endAccess();
    if ((v8 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "Handler for ");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x800000021BE87FE0;
      v10._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v10);
      specialized static AnimationLogger.logError(_:)(v16[0], v16[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v12 + 24) = v11;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v12, v6, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v15;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for BillboardAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for BillboardAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SpinAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpinAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for SpinAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for OrbitEntityAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for OrbitEntityAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for ImpulseAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImpulseAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for ImpulseAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SetEntityEnabledAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityEnabledAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for SetEntityEnabledAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for NotificationAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NotificationAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for NotificationAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  char v6;
  char v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[2];

  specialized static EntityAction.__subscribe(to:_:_:)(1uLL, a1, (uint64_t)specialized closure #1 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(2uLL, a1, (uint64_t)specialized closure #2 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(4uLL, a1, (uint64_t)specialized closure #3 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(8uLL, a1, (uint64_t)specialized closure #4 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x10uLL, a1, (uint64_t)specialized closure #5 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x20uLL, a1, (uint64_t)specialized closure #6 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x40uLL, a1, (uint64_t)specialized closure #7 in static ActionHandlerProtocol.subscribe(_:), 0);
  specialized static EntityAction.__subscribe(to:_:_:)(0x80uLL, a1, (uint64_t)specialized closure #8 in static ActionHandlerProtocol.subscribe(_:), 0);
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAnimationAction);
    v7 = v6;
    swift_endAccess();
    if ((v7 & 1) != 0)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v15, "Handler for ");
      BYTE5(v15[1]) = 0;
      HIWORD(v15[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
      v8._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x800000021BE87FE0;
      v9._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v9);
      specialized static AnimationLogger.logError(_:)(v15[0], v15[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(_QWORD *)(v11 + 24) = v10;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)partial apply, v11, (uint64_t)&type metadata for PlayAnimationAction, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v14;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t *)@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v19;
  uint64_t result;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  char v60;
  char v61;
  uint64_t v62;
  char v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 v85;
  unsigned __int8 v86;

  v28 = *((_BYTE *)a2 + 8);
  v19 = a2[3];
  v26 = a2[2];
  v34 = a2[5];
  v35 = a2[4];
  v32 = a2[7];
  v33 = a2[6];
  v31 = a2[8];
  v29 = *a2;
  v30 = a2[9];
  result = specialized ActionEventData.action<A>()((uint64_t)&v85);
  v21 = v85 | (v86 << 16);
  if ((v21 & 0xFF0000) == 0x20000)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    swift_retain();
    v37 = v21;
    v25 = v19;
    v38 = BYTE2(v21) & 1;
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<EmphasizeAction>) & 1;
    v39 = v22;
    v36 = a1;
    v40 = a6;
    v41 = a3 & 1;
    v42 = a9;
    v43 = a10;
    v45 = 0;
    v46 = 0;
    v44 = a4;
    v47 = 1;
    v48 = 0;
    v49 = 1;
    v50 = 0;
    v51 = 1;
    v23 = *((_OWORD *)a2 + 3);
    v54 = *((_OWORD *)a2 + 2);
    v55 = v23;
    v56 = *((_OWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 1);
    v52 = *(_OWORD *)a2;
    v53 = v24;
    v57 = a5;
    swift_retain();
    swift_retain();
    a7(&v36);
    v58 = a1;
    v59 = v21;
    v60 = BYTE2(v21) & 1;
    v61 = v22;
    v62 = a6;
    v63 = a3 & 1;
    v64 = a9;
    v65 = a10;
    v67 = 0;
    v68 = 0;
    v66 = a4;
    v69 = 1;
    v70 = 0;
    v71 = 1;
    v72 = 0;
    v73 = 1;
    v74 = v29;
    v75 = v28 & 1;
    v76 = v26;
    v77 = v25;
    v78 = v35;
    v79 = v34;
    v80 = v33;
    v81 = v32;
    v82 = v31;
    v83 = v30;
    v84 = a5;
    return outlined release of ActionEvent<EmphasizeAction>((uint64_t)&v58);
  }
  return result;
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  char v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char v107;
  uint64_t v108;
  char v109;
  double v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD v131[16];
  _BYTE v132[256];
  _BYTE v133[272];

  v31 = *((_BYTE *)a2 + 8);
  v18 = a2[2];
  v19 = a2[3];
  v20 = a2[4];
  v36 = a2[6];
  v37 = a2[5];
  v34 = a2[8];
  v35 = a2[7];
  v32 = *a2;
  v33 = a2[9];
  specialized ActionEventData.action<A>()(v131);
  outlined init with take of Transform?((uint64_t)v131, (uint64_t)v132, &demangling cache variable for type metadata for FromToByAction<Transform>?);
  outlined init with take of Transform?((uint64_t)v132, (uint64_t)v133, &demangling cache variable for type metadata for FromToByAction<Transform>?);
  result = _s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v133);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v28 = v20;
    outlined init with take of Transform?((uint64_t)v132, (uint64_t)&v74, &demangling cache variable for type metadata for FromToByAction<Transform>?);
    swift_retain();
    outlined retain of FromToByAction<Transform>?((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Transform>>);
    v51 = v86;
    v52 = v87;
    v53 = v88;
    v54 = v89;
    v47 = v82;
    v48 = v83;
    v49 = v84;
    v50 = v85;
    v43 = v78;
    v44 = v79;
    v45 = v80;
    v46 = v81;
    v39 = v74;
    v40 = v75;
    v41 = v76;
    v42 = v77;
    v23 = a5;
    v24 = v22 & 1;
    v55 = v22 & 1;
    v38 = a1;
    v56 = a6;
    v57 = a3 & 1;
    v58 = a9;
    v59 = a10;
    v60 = a4;
    v61 = 0;
    v63 = 1;
    v62 = 0;
    v64 = 0;
    v65 = 1;
    v67 = 1;
    v25 = *((_OWORD *)a2 + 3);
    v70 = *((_OWORD *)a2 + 2);
    v71 = v25;
    v72 = *((_OWORD *)a2 + 4);
    v26 = *((_OWORD *)a2 + 1);
    v68 = *(_OWORD *)a2;
    v69 = v26;
    v66 = 0;
    v73 = v23;
    v27 = v23;
    swift_retain();
    swift_retain();
    a7(&v38);
    outlined retain of FromToByAction<Transform>?((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
    v90 = a1;
    v103 = v86;
    v104 = v87;
    v105 = v88;
    v106 = v89;
    v99 = v82;
    v100 = v83;
    v101 = v84;
    v102 = v85;
    v95 = v78;
    v96 = v79;
    v97 = v80;
    v98 = v81;
    v91 = v74;
    v92 = v75;
    v93 = v76;
    v94 = v77;
    v107 = v24;
    v108 = a6;
    v109 = a3 & 1;
    v110 = a9;
    v111 = a10;
    v112 = a4;
    v113 = 0;
    v115 = 1;
    v114 = 0;
    v116 = 0;
    v117 = 1;
    v119 = 1;
    v118 = 0;
    v120 = v32;
    v121 = v31 & 1;
    v122 = v18;
    v123 = v19;
    v124 = v28;
    v125 = v37;
    v126 = v36;
    v127 = v35;
    v128 = v34;
    v129 = v33;
    v130 = v27;
    return outlined release of ActionEvent<FromToByAction<Transform>>((uint64_t)&v90);
  }
  return result;
}

{
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  char v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  char v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[10];
  _QWORD v113[20];
  _BYTE v114[176];

  v19 = *a2;
  v29 = *((_BYTE *)a2 + 8);
  v20 = a2[2];
  v35 = a2[4];
  v36 = a2[3];
  v33 = a2[6];
  v34 = a2[5];
  v31 = a2[8];
  v32 = a2[7];
  v30 = a2[9];
  specialized ActionEventData.action<A>()(v112);
  outlined init with take of Transform?((uint64_t)v112, (uint64_t)v113, &demangling cache variable for type metadata for FromToByAction<simd_quatf>?);
  outlined init with take of Transform?((uint64_t)v113, (uint64_t)v114, &demangling cache variable for type metadata for FromToByAction<simd_quatf>?);
  result = _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg((uint64_t)v114);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v113, (uint64_t)&v67, &demangling cache variable for type metadata for FromToByAction<simd_quatf>?);
    swift_retain();
    outlined retain of IKRig.Constraint?(v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<simd_quatf>?);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<simd_quatf>>);
    v44 = v73;
    v45 = v74;
    v46 = v75;
    v47 = v76;
    v40 = v69;
    v41 = v70;
    v42 = v71;
    v43 = v72;
    v38 = v67;
    v39 = v68;
    v27 = v19;
    v23 = v22 & 1;
    v48 = v22 & 1;
    v37 = a1;
    v49 = a6;
    v50 = a3 & 1;
    v51 = a9;
    v52 = a10;
    v54 = 0;
    v55 = 0;
    v53 = a4;
    v56 = 1;
    v58 = 1;
    v57 = 0;
    v59 = 0;
    v60 = 1;
    v24 = *((_OWORD *)a2 + 4);
    v25 = *((_OWORD *)a2 + 2);
    v64 = *((_OWORD *)a2 + 3);
    v65 = v24;
    v26 = *(_OWORD *)a2;
    v62 = *((_OWORD *)a2 + 1);
    v63 = v25;
    v61 = v26;
    v66 = a5;
    swift_retain();
    swift_retain();
    a7(&v37);
    outlined retain of IKRig.Constraint?(v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<simd_quatf>?);
    v77 = a1;
    v84 = v73;
    v85 = v74;
    v86 = v75;
    v87 = v76;
    v80 = v69;
    v81 = v70;
    v82 = v71;
    v83 = v72;
    v78 = v67;
    v79 = v68;
    v88 = v23;
    v89 = a6;
    v90 = a3 & 1;
    v91 = a9;
    v92 = a10;
    v95 = 0;
    v93 = a4;
    v94 = 0;
    v96 = 1;
    v98 = 1;
    v97 = 0;
    v99 = 0;
    v100 = 1;
    v102 = v29 & 1;
    v101 = v27;
    v103 = v20;
    v104 = v36;
    v105 = v35;
    v106 = v34;
    v107 = v33;
    v108 = v32;
    v109 = v31;
    v110 = v30;
    v111 = a5;
    return outlined release of ActionEvent<FromToByAction<simd_quatf>>((uint64_t)&v77);
  }
  return result;
}

{
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  char v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  char v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[10];
  _QWORD v113[20];
  _BYTE v114[176];

  v19 = *a2;
  v29 = *((_BYTE *)a2 + 8);
  v20 = a2[2];
  v35 = a2[4];
  v36 = a2[3];
  v33 = a2[6];
  v34 = a2[5];
  v31 = a2[8];
  v32 = a2[7];
  v30 = a2[9];
  specialized ActionEventData.action<A>()(v112);
  outlined init with take of Transform?((uint64_t)v112, (uint64_t)v113, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>?);
  outlined init with take of Transform?((uint64_t)v113, (uint64_t)v114, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>?);
  result = _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg((uint64_t)v114);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v113, (uint64_t)&v67, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>?);
    swift_retain();
    outlined retain of IKRig.Constraint?(v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<SIMD4<Float>>?);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD4<Float>>>);
    v44 = v73;
    v45 = v74;
    v46 = v75;
    v47 = v76;
    v40 = v69;
    v41 = v70;
    v42 = v71;
    v43 = v72;
    v38 = v67;
    v39 = v68;
    v27 = v19;
    v23 = v22 & 1;
    v48 = v22 & 1;
    v37 = a1;
    v49 = a6;
    v50 = a3 & 1;
    v51 = a9;
    v52 = a10;
    v54 = 0;
    v55 = 0;
    v53 = a4;
    v56 = 1;
    v58 = 1;
    v57 = 0;
    v59 = 0;
    v60 = 1;
    v24 = *((_OWORD *)a2 + 4);
    v25 = *((_OWORD *)a2 + 2);
    v64 = *((_OWORD *)a2 + 3);
    v65 = v24;
    v26 = *(_OWORD *)a2;
    v62 = *((_OWORD *)a2 + 1);
    v63 = v25;
    v61 = v26;
    v66 = a5;
    swift_retain();
    swift_retain();
    a7(&v37);
    outlined retain of IKRig.Constraint?(v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<SIMD4<Float>>?);
    v77 = a1;
    v84 = v73;
    v85 = v74;
    v86 = v75;
    v87 = v76;
    v80 = v69;
    v81 = v70;
    v82 = v71;
    v83 = v72;
    v78 = v67;
    v79 = v68;
    v88 = v23;
    v89 = a6;
    v90 = a3 & 1;
    v91 = a9;
    v92 = a10;
    v95 = 0;
    v93 = a4;
    v94 = 0;
    v96 = 1;
    v98 = 1;
    v97 = 0;
    v99 = 0;
    v100 = 1;
    v102 = v29 & 1;
    v101 = v27;
    v103 = v20;
    v104 = v36;
    v105 = v35;
    v106 = v34;
    v107 = v33;
    v108 = v32;
    v109 = v31;
    v110 = v30;
    v111 = a5;
    return outlined release of ActionEvent<FromToByAction<simd_quatf>>((uint64_t)&v77);
  }
  return result;
}

{
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  char v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  char v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[10];
  _QWORD v113[20];
  _BYTE v114[176];

  v19 = *a2;
  v29 = *((_BYTE *)a2 + 8);
  v20 = a2[2];
  v35 = a2[4];
  v36 = a2[3];
  v33 = a2[6];
  v34 = a2[5];
  v31 = a2[8];
  v32 = a2[7];
  v30 = a2[9];
  specialized ActionEventData.action<A>()(v112);
  outlined init with take of Transform?((uint64_t)v112, (uint64_t)v113, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>?);
  outlined init with take of Transform?((uint64_t)v113, (uint64_t)v114, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>?);
  result = _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg((uint64_t)v114);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v113, (uint64_t)&v67, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>?);
    swift_retain();
    outlined retain of IKRig.Constraint?(v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<SIMD4<Float>>?);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD3<Float>>>);
    v44 = v73;
    v45 = v74;
    v46 = v75;
    v47 = v76;
    v40 = v69;
    v41 = v70;
    v42 = v71;
    v43 = v72;
    v38 = v67;
    v39 = v68;
    v27 = v19;
    v23 = v22 & 1;
    v48 = v22 & 1;
    v37 = a1;
    v49 = a6;
    v50 = a3 & 1;
    v51 = a9;
    v52 = a10;
    v54 = 0;
    v55 = 0;
    v53 = a4;
    v56 = 1;
    v58 = 1;
    v57 = 0;
    v59 = 0;
    v60 = 1;
    v24 = *((_OWORD *)a2 + 4);
    v25 = *((_OWORD *)a2 + 2);
    v64 = *((_OWORD *)a2 + 3);
    v65 = v24;
    v26 = *(_OWORD *)a2;
    v62 = *((_OWORD *)a2 + 1);
    v63 = v25;
    v61 = v26;
    v66 = a5;
    swift_retain();
    swift_retain();
    a7(&v37);
    outlined retain of IKRig.Constraint?(v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<SIMD4<Float>>?);
    v77 = a1;
    v84 = v73;
    v85 = v74;
    v86 = v75;
    v87 = v76;
    v80 = v69;
    v81 = v70;
    v82 = v71;
    v83 = v72;
    v78 = v67;
    v79 = v68;
    v88 = v23;
    v89 = a6;
    v90 = a3 & 1;
    v91 = a9;
    v92 = a10;
    v95 = 0;
    v93 = a4;
    v94 = 0;
    v96 = 1;
    v98 = 1;
    v97 = 0;
    v99 = 0;
    v100 = 1;
    v102 = v29 & 1;
    v101 = v27;
    v103 = v20;
    v104 = v36;
    v105 = v35;
    v106 = v34;
    v107 = v33;
    v108 = v32;
    v109 = v31;
    v110 = v30;
    v111 = a5;
    return outlined release of ActionEvent<FromToByAction<simd_quatf>>((uint64_t)&v77);
  }
  return result;
}

{
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD v105[4];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned __int16 v111;

  v38 = *((_BYTE *)a2 + 8);
  v32 = a2[2];
  v33 = a2[3];
  v34 = a2[4];
  v31 = a2[5];
  v42 = a2[7];
  v43 = a2[6];
  v41 = a2[8];
  v39 = *a2;
  v40 = a2[9];
  result = specialized ActionEventData.action<A>()((uint64_t)v105);
  v17 = v110 | ((unint64_t)v111 << 32);
  if ((v17 & 0xFF0000000000) == 0x20000000000)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v18 = v108;
    v28 = v108;
    v29 = v109;
    v19 = v105[0];
    v27 = v105[0];
    v21 = v106;
    v20 = v107;
    v26 = v106;
    v25 = v107;
    swift_retain();
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SpinAction>);
    v23 = *(_OWORD *)a2;
    v67 = *((_OWORD *)a2 + 1);
    v24 = *((_OWORD *)a2 + 3);
    v68 = *((_OWORD *)a2 + 2);
    v69 = v24;
    v70 = *((_OWORD *)a2 + 4);
    v45 = v19;
    v46 = v21;
    v47 = v20;
    v48 = v18;
    v49 = v29;
    v50 = v17;
    v51 = BYTE4(v17);
    v52 = BYTE5(v17) & 1;
    LOBYTE(v19) = v22 & 1;
    v53 = v22 & 1;
    v44 = a1;
    v54 = a6;
    v55 = a3 & 1;
    v56 = a9;
    v57 = a10;
    v59 = 0;
    v60 = 0;
    v58 = a4;
    v61 = 1;
    v62 = 0;
    v63 = 1;
    v64 = 0;
    v65 = 1;
    v66 = v23;
    v71 = a5;
    swift_retain();
    swift_retain();
    a7(&v44);
    v72 = a1;
    v73 = v27;
    v74 = v26;
    v75 = v25;
    v76 = v28;
    v77 = v29;
    v78 = v17;
    v79 = BYTE4(v17);
    v80 = BYTE5(v17) & 1;
    v81 = v19;
    v82 = a6;
    v83 = a3 & 1;
    v84 = a9;
    v85 = a10;
    v88 = 0;
    v86 = a4;
    v87 = 0;
    v89 = 1;
    v90 = 0;
    v91 = 1;
    v92 = 0;
    v93 = 1;
    v94 = v39;
    v95 = v38 & 1;
    v96 = v32;
    v97 = v33;
    v98 = v34;
    v99 = v31;
    v100 = v43;
    v101 = v42;
    v102 = v41;
    v103 = v40;
    v104 = a5;
    return outlined release of ActionEvent<SpinAction>((uint64_t)&v72);
  }
  return result;
}

uint64_t specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD *)@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[3];
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[3];
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  char v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[4];
  uint64_t v105;
  uint64_t v106;
  char v107;

  v44 = *a2;
  v43 = *((_BYTE *)a2 + 8);
  v16 = a2[2];
  v17 = a2[3];
  v18 = a2[5];
  v41 = a2[4];
  v19 = a2[6];
  v39 = a2[7];
  v20 = a2[8];
  v46 = a2[9];
  result = specialized ActionEventData.action<A>()((uint64_t)v104);
  v22 = v105;
  if (v105)
  {
    v37 = v18;
    v38 = v20;
    v23 = v106;
    v35 = v17;
    v36 = v19;
    v24 = v104[2];
    v25 = v104[3];
    v47 = a5;
    v26 = v104[0];
    v27 = v104[1];
    v34 = v16;
    v28 = v107 & 1;
    v33 = v107 & 1;
    swift_retain();
    outlined copy of SetEntityPropertyAction<Transform>?(v26, v27, v24, v25, v22);
    v29 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAudioAction>);
    v49[1] = v26;
    v49[2] = v27;
    v50 = v24 & 1;
    v51 = v25;
    v52 = v22;
    v53 = v23;
    v54 = v28;
    v32 = v29 & 1;
    v55 = v29 & 1;
    v49[0] = a1;
    v56 = a6;
    v57 = a3 & 1;
    v58 = a9;
    v59 = a10;
    v61 = 0;
    v62 = 0;
    v60 = a4;
    v63 = 1;
    v64 = 0;
    v65 = 1;
    v66 = 0;
    v67 = 1;
    v30 = *((_OWORD *)a2 + 3);
    v70 = *((_OWORD *)a2 + 2);
    v71 = v30;
    v72 = *((_OWORD *)a2 + 4);
    v31 = *((_OWORD *)a2 + 1);
    v68 = *(_OWORD *)a2;
    v69 = v31;
    v73 = v47;
    swift_retain();
    swift_retain();
    a7(v49);
    outlined consume of SetEntityPropertyAction<Transform>?(v26, v27, v24, v25, v22);
    v74[0] = a1;
    v74[1] = v26;
    v74[2] = v27;
    v75 = v24 & 1;
    v76 = v25;
    v77 = v22;
    v78 = v23;
    v79 = v33;
    v80 = v32;
    v81 = a6;
    v82 = a3 & 1;
    v83 = a9;
    v84 = a10;
    v87 = 0;
    v85 = a4;
    v86 = 0;
    v88 = 1;
    v89 = 0;
    v90 = 1;
    v91 = 0;
    v92 = 1;
    v93 = v44;
    v94 = v43 & 1;
    v95 = v34;
    v96 = v35;
    v97 = v41;
    v98 = v37;
    v99 = v36;
    v100 = v39;
    v101 = v38;
    v102 = v46;
    v103 = v47;
    return outlined release of ActionEvent<PlayAudioAction>((uint64_t)v74);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[4];
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  char v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117;
  _QWORD v118[4];
  char v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  char v133;
  char v134;
  uint64_t v135;
  char v136;
  double v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[176];
  _BYTE v159[176];
  _BYTE v160[176];

  v60 = *((_BYTE *)a2 + 8);
  v56 = a2[2];
  v16 = a2[4];
  v53 = *a2;
  v54 = a2[3];
  v17 = a2[5];
  v64 = a2[7];
  v65 = a2[6];
  v62 = a2[9];
  v63 = a2[8];
  specialized ActionEventData.action<A>()((uint64_t)v158);
  outlined init with take of Transform?((uint64_t)v158, (uint64_t)v159, &demangling cache variable for type metadata for BillboardAction?);
  outlined init with take of Transform?((uint64_t)v159, (uint64_t)v160, &demangling cache variable for type metadata for BillboardAction?);
  result = _s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v160);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v48 = a5;
    outlined init with take of Transform?((uint64_t)v159, (uint64_t)&v101, &demangling cache variable for type metadata for BillboardAction?);
    v52 = v101;
    v49 = v17;
    v50 = v16;
    v19 = v102;
    v47 = v102;
    v20 = v103;
    v46 = v103;
    v55 = v104;
    v21 = v105;
    v22 = v106;
    v44 = v106;
    v45 = v105;
    v23 = v107;
    v43 = v107;
    v24 = v108;
    v25 = v109;
    v42 = v109;
    v36 = v110;
    v37 = a1;
    v26 = v111;
    v41 = v111;
    v27 = v113;
    v28 = v114;
    v29 = v115;
    v39 = v115;
    v40 = v114;
    v34 = v116;
    v35 = v112;
    v51 = v117;
    swift_retain();
    v30 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<BillboardAction>);
    v66[3] = v19;
    v67 = v20;
    v68 = v55;
    v69 = v21;
    v70 = v22;
    v71 = v23;
    v72 = v24;
    v73 = v25;
    v74 = v36;
    v75 = v26;
    v76 = v35;
    v77 = v27;
    v78 = v28;
    v79 = v29;
    v80 = v34;
    v81 = v51;
    v38 = v30 & 1;
    v82 = v30 & 1;
    v66[2] = v52;
    v66[0] = v37;
    v83 = a6;
    v84 = a3 & 1;
    v85 = a9;
    v86 = a10;
    v89 = 0;
    v87 = a4;
    v88 = 0;
    v90 = 1;
    v92 = 1;
    v91 = 0;
    v93 = 0;
    v94 = 1;
    v31 = *((_OWORD *)a2 + 4);
    v32 = *((_OWORD *)a2 + 2);
    v98 = *((_OWORD *)a2 + 3);
    v99 = v31;
    v33 = *(_OWORD *)a2;
    v96 = *((_OWORD *)a2 + 1);
    v97 = v32;
    v95 = v33;
    v100 = v48;
    swift_retain();
    swift_retain();
    a7(v66);
    v118[0] = v37;
    v118[2] = v52;
    v118[3] = v47;
    v119 = v46;
    v120 = v55;
    v121 = v45;
    v122 = v44;
    v123 = v43;
    v124 = v24;
    v125 = v42;
    v126 = v36;
    v127 = v41;
    v128 = v35;
    v129 = v27;
    v130 = v40;
    v131 = v39;
    v132 = v34;
    v133 = v51;
    v134 = v38;
    v135 = a6;
    v136 = a3 & 1;
    v137 = a9;
    v138 = a10;
    v141 = 0;
    v139 = a4;
    v140 = 0;
    v142 = 1;
    v144 = 1;
    v143 = 0;
    v145 = 0;
    v146 = 1;
    v148 = v60 & 1;
    v147 = v53;
    v149 = v56;
    v150 = v54;
    v151 = v50;
    v152 = v49;
    v153 = v65;
    v154 = v64;
    v155 = v63;
    v156 = v62;
    v157 = v48;
    return outlined release of ActionEvent<BillboardAction>((uint64_t)v118);
  }
  return result;
}

{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v42[4];
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  uint64_t v49;
  char v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[4];
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  char v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;

  v37 = *((_BYTE *)a2 + 8);
  v14 = a2[2];
  v30 = a2[4];
  v31 = a2[5];
  v27 = a2[6];
  v28 = a2[3];
  v29 = a2[7];
  v32 = a2[8];
  v38 = *a2;
  v39 = a2[9];
  result = specialized ActionEventData.action<A>()((uint64_t)v97);
  v16 = v98;
  if ((_BYTE)v98 == 0xFF)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v17 = v99;
    v26 = v14;
    v19 = v97[0];
    v18 = v97[1];
    v25 = v97[0];
    v20 = v100;
    v21 = v101;
    swift_retain();
    outlined copy of OrbitEntityAction?(v19, v18, v16);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<OrbitEntityAction>);
    v23 = *(_OWORD *)a2;
    v62 = *((_OWORD *)a2 + 1);
    v24 = *((_OWORD *)a2 + 3);
    v63 = *((_OWORD *)a2 + 2);
    v64 = v24;
    v65 = *((_OWORD *)a2 + 4);
    v43 = v16 & 1;
    v44 = HIDWORD(v16);
    v45 = v17;
    v46 = v20;
    v47 = v21 & 0x101;
    LOBYTE(v19) = v22 & 1;
    v48 = v22 & 1;
    v42[2] = v25;
    v42[3] = v18;
    v42[0] = a1;
    v49 = a6;
    v50 = a3 & 1;
    v51 = a9;
    v52 = a10;
    v54 = 0;
    v55 = 0;
    v53 = a4;
    v56 = 1;
    v57 = 0;
    v58 = 1;
    v59 = 0;
    v60 = 1;
    v61 = v23;
    v66 = a5;
    swift_retain();
    swift_retain();
    a7(v42);
    outlined consume of OrbitEntityAction?(v25, v18, v16);
    v67[0] = a1;
    v67[2] = v25;
    v67[3] = v18;
    v68 = v16 & 1;
    v69 = HIDWORD(v16);
    v71 = v20;
    v70 = v17;
    v72 = v21 & 0x101;
    v73 = v19;
    v74 = a6;
    v75 = a3 & 1;
    v76 = a9;
    v77 = a10;
    v80 = 0;
    v78 = a4;
    v79 = 0;
    v81 = 1;
    v82 = 0;
    v83 = 1;
    v84 = 0;
    v85 = 1;
    v86 = v38;
    v87 = v37 & 1;
    v88 = v26;
    v89 = v28;
    v90 = v30;
    v91 = v31;
    v92 = v27;
    v93 = v29;
    v94 = v32;
    v95 = v39;
    v96 = a5;
    return outlined release of ActionEvent<OrbitEntityAction>((uint64_t)v67);
  }
  return result;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[4];
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _QWORD v65[4];
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v34 = *a2;
  v37 = *((_BYTE *)a2 + 8);
  v15 = a2[2];
  v16 = a2[5];
  v31 = a2[3];
  v32 = a2[4];
  v17 = a2[7];
  v30 = a2[6];
  v39 = a2[9];
  v40 = a2[8];
  result = specialized ActionEventData.action<A>()((uint64_t)v93);
  v19 = v94;
  if ((_BYTE)v94 == 0xFF)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v20 = v95;
    v28 = v16;
    v22 = v93[0];
    v21 = v93[1];
    v29 = v17;
    v23 = v96;
    swift_retain();
    outlined copy of OrbitEntityAction?(v22, v21, v19);
    v24 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<ImpulseAction>);
    v25 = *(_OWORD *)a2;
    v60 = *((_OWORD *)a2 + 1);
    v26 = *((_OWORD *)a2 + 3);
    v61 = *((_OWORD *)a2 + 2);
    v62 = v26;
    v63 = *((_OWORD *)a2 + 4);
    v42[2] = v22;
    v42[3] = v21;
    v43 = v19 & 1;
    v44 = v20;
    v45 = v23;
    v27 = v24 & 1;
    v46 = v24 & 1;
    v42[0] = a1;
    v47 = a6;
    v48 = a3 & 1;
    v49 = a9;
    v50 = a10;
    v52 = 0;
    v53 = 0;
    v51 = a4;
    v54 = 1;
    v55 = 0;
    v56 = 1;
    v57 = 0;
    v58 = 1;
    v59 = v25;
    v64 = a5;
    swift_retain();
    swift_retain();
    a7(v42);
    outlined consume of OrbitEntityAction?(v22, v21, v19);
    v65[0] = a1;
    v65[2] = v22;
    v65[3] = v21;
    v66 = v19 & 1;
    v67 = v20;
    v68 = v23;
    v69 = v27;
    v70 = a6;
    v71 = a3 & 1;
    v72 = a9;
    v73 = a10;
    v76 = 0;
    v74 = a4;
    v75 = 0;
    v77 = 1;
    v78 = 0;
    v79 = 1;
    v80 = 0;
    v81 = 1;
    v82 = v34;
    v83 = v37 & 1;
    v84 = v15;
    v85 = v31;
    v86 = v32;
    v87 = v28;
    v88 = v30;
    v89 = v29;
    v90 = v40;
    v91 = v39;
    v92 = a5;
    return outlined release of ActionEvent<OrbitEntityAction>((uint64_t)v65);
  }
  return result;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  __int16 v41;
  char v42;
  uint64_t v43;
  char v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[3];
  __int16 v62;
  char v63;
  uint64_t v64;
  char v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  __int16 v88;

  v35 = *a2;
  v34 = *((_BYTE *)a2 + 8);
  v16 = a2[2];
  v17 = a2[3];
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[6];
  v38 = a2[8];
  v39 = a2[7];
  v37 = a2[9];
  result = specialized ActionEventData.action<A>()((uint64_t)v87);
  v22 = v88;
  if ((_BYTE)v88 == 0xFF)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v29 = v18;
    v30 = v20;
    v23 = v87[0];
    v24 = v87[1];
    swift_retain();
    outlined copy of SetEntityEnabledAction?(v23, v24, v22);
    v25 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityEnabledAction>);
    v40[1] = v23;
    v40[2] = v24;
    v41 = v22 & 0x101;
    v28 = v25 & 1;
    v42 = v25 & 1;
    v40[0] = a1;
    v43 = a6;
    v44 = a3 & 1;
    v45 = a9;
    v46 = a10;
    v48 = 0;
    v49 = 0;
    v47 = a4;
    v50 = 1;
    v51 = 0;
    v52 = 1;
    v53 = 0;
    v54 = 1;
    v26 = *((_OWORD *)a2 + 3);
    v57 = *((_OWORD *)a2 + 2);
    v58 = v26;
    v59 = *((_OWORD *)a2 + 4);
    v27 = *((_OWORD *)a2 + 1);
    v55 = *(_OWORD *)a2;
    v56 = v27;
    v60 = a5;
    swift_retain();
    swift_retain();
    a7(v40);
    outlined consume of SetEntityEnabledAction?(v23, v24, v22);
    v61[0] = a1;
    v61[1] = v23;
    v61[2] = v24;
    v62 = v22 & 0x101;
    v63 = v28;
    v64 = a6;
    v65 = a3 & 1;
    v66 = a9;
    v67 = a10;
    v69 = 0;
    v70 = 0;
    v68 = a4;
    v71 = 1;
    v72 = 0;
    v73 = 1;
    v74 = 0;
    v75 = 1;
    v76 = v35;
    v77 = v34 & 1;
    v78 = v16;
    v79 = v17;
    v80 = v29;
    v81 = v19;
    v82 = v30;
    v83 = v39;
    v84 = v38;
    v85 = v37;
    v86 = a5;
    return outlined release of ActionEvent<SetEntityEnabledAction>((uint64_t)v61);
  }
  return result;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[4];
  char v42;
  uint64_t v43;
  char v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[4];
  char v62;
  uint64_t v63;
  char v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v15 = *a2;
  v35 = *((_BYTE *)a2 + 8);
  v16 = a2[2];
  v17 = a2[3];
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[6];
  v38 = a2[8];
  v39 = a2[7];
  v37 = a2[9];
  result = specialized ActionEventData.action<A>()(&v86);
  v22 = v87;
  if (v87)
  {
    v30 = v19;
    v31 = v18;
    v23 = v88;
    v24 = v86;
    swift_retain();
    outlined copy of NotificationAction?(v24, v22);
    v25 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<NotificationAction>);
    v26 = *(_OWORD *)a2;
    v56 = *((_OWORD *)a2 + 1);
    v27 = *((_OWORD *)a2 + 3);
    v57 = *((_OWORD *)a2 + 2);
    v58 = v27;
    v59 = *((_OWORD *)a2 + 4);
    v41[2] = v22;
    v41[3] = v23;
    v29 = v20;
    v28 = v25 & 1;
    v42 = v25 & 1;
    v41[0] = a1;
    v41[1] = v24;
    v43 = a6;
    v44 = a3 & 1;
    v45 = a9;
    v46 = a10;
    v48 = 0;
    v49 = 0;
    v47 = a4;
    v50 = 1;
    v51 = 0;
    v52 = 1;
    v53 = 0;
    v54 = 1;
    v55 = v26;
    v60 = a5;
    swift_retain();
    swift_retain();
    a7(v41);
    outlined consume of NotificationAction?(v24, v22);
    v61[0] = a1;
    v61[1] = v24;
    v61[2] = v22;
    v61[3] = v23;
    v62 = v28;
    v63 = a6;
    v64 = a3 & 1;
    v65 = a9;
    v66 = a10;
    v68 = 0;
    v69 = 0;
    v67 = a4;
    v70 = 1;
    v71 = 0;
    v72 = 1;
    v73 = 0;
    v74 = 1;
    v75 = v15;
    v76 = v35 & 1;
    v77 = v16;
    v78 = v17;
    v79 = v31;
    v80 = v30;
    v81 = v29;
    v82 = v39;
    v83 = v38;
    v84 = v37;
    v85 = a5;
    return outlined release of ActionEvent<NotificationAction>((uint64_t)v61);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  char v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  _QWORD v48[5];
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  char v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD v73[5];
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  char v79;
  uint64_t v80;
  char v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;

  v42 = *a2;
  v41 = *((_BYTE *)a2 + 8);
  v14 = a2[3];
  v33 = a2[5];
  v34 = a2[4];
  v15 = a2[7];
  v32 = a2[6];
  v35 = a2[8];
  v36 = a2[2];
  v44 = a2[9];
  result = specialized ActionEventData.action<A>()((uint64_t)&v103);
  v17 = v104;
  if (v104)
  {
    v18 = v108;
    v19 = v109;
    v30 = v15;
    v31 = v14;
    v20 = v106;
    v21 = v107;
    v22 = v105;
    v23 = v103;
    v29 = v103;
    v45 = v107 >> 8;
    v24 = v110;
    swift_retain();
    outlined copy of PlayAnimationAction?(v23, v17);
    v25 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAnimationAction>);
    v26 = *(_OWORD *)a2;
    v68 = *((_OWORD *)a2 + 1);
    v27 = *((_OWORD *)a2 + 3);
    v69 = *((_OWORD *)a2 + 2);
    v70 = v27;
    v71 = *((_OWORD *)a2 + 4);
    v48[2] = v17;
    v48[3] = v22;
    v48[4] = v20;
    v49 = v21 & 1;
    v50 = v45;
    v51 = v18;
    v52 = v19;
    v53 = v24 & 0x101;
    v28 = v25 & 1;
    v54 = v25 & 1;
    v48[0] = a1;
    v48[1] = v29;
    v55 = a6;
    v38 = a3 & 1;
    v56 = v38;
    v57 = a9;
    v58 = a10;
    v60 = 0;
    v61 = 0;
    v59 = a4;
    v62 = 1;
    v63 = 0;
    v64 = 1;
    v65 = 0;
    v66 = 1;
    v67 = v26;
    v72 = a5;
    swift_retain();
    swift_retain();
    a7(v48);
    outlined consume of PlayAnimationAction?(v29, v17);
    v73[0] = a1;
    v73[1] = v29;
    v73[2] = v17;
    v73[3] = v22;
    v73[4] = v20;
    v74 = v21 & 1;
    v75 = v45;
    v76 = v18;
    v77 = v19;
    v78 = v24 & 0x101;
    v79 = v28;
    v80 = a6;
    v81 = v38;
    v82 = a9;
    v83 = a10;
    v86 = 0;
    v84 = a4;
    v85 = 0;
    v87 = 1;
    v88 = 0;
    v89 = 1;
    v90 = 0;
    v91 = 1;
    v92 = v42;
    v93 = v41 & 1;
    v94 = v36;
    v95 = v31;
    v96 = v34;
    v97 = v33;
    v98 = v32;
    v99 = v30;
    v100 = v35;
    v101 = v44;
    v102 = a5;
    return outlined release of ActionEvent<PlayAnimationAction>((uint64_t)v73);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  return result;
}

void specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD *)@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v49;
  _QWORD v51[4];
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[4];
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[4];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;

  v41 = *((_BYTE *)a2 + 8);
  v15 = a2[2];
  v35 = a2[4];
  v36 = a2[3];
  v37 = a2[5];
  v39 = a2[6];
  v16 = a2[8];
  v34 = a2[7];
  v42 = *a2;
  v43 = a2[9];
  specialized ActionEventData.action<A>()((uint64_t)v116);
  v17 = v117;
  if (v117)
  {
    v49 = v124;
    v44 = v122;
    v45 = v123;
    v29 = v120;
    v30 = v121;
    v26 = v118;
    v27 = v119;
    v32 = v15;
    v46 = a5;
    v19 = v116[2];
    v18 = v116[3];
    v33 = v16;
    v20 = v116[0];
    v21 = v116[1];
    v31 = v116[0];
    swift_retain();
    outlined copy of SetEntityPropertyAction<Transform>?(v20, v21, v19, v18, v17);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Transform>>);
    v23 = *((_OWORD *)a2 + 4);
    v78 = *((_OWORD *)a2 + 3);
    v79 = v23;
    v24 = *((_OWORD *)a2 + 2);
    v25 = *(_OWORD *)a2;
    v76 = *((_OWORD *)a2 + 1);
    v77 = v24;
    v51[3] = v21;
    v52 = v19 & 1;
    v53 = v18;
    v54 = v17;
    v55 = v26;
    v56 = v27;
    v57 = v29;
    v58 = v30;
    v59 = v44;
    v60 = v45;
    v61 = v49 & 1;
    v28 = v22 & 1;
    v62 = v22 & 1;
    v51[2] = v31;
    v51[0] = a1;
    v63 = a6;
    v64 = a3 & 1;
    v65 = a9;
    v66 = a10;
    v68 = 0;
    v69 = 0;
    v67 = a4;
    v70 = 1;
    v71 = 0;
    v72 = 1;
    v73 = 0;
    v74 = 1;
    v75 = v25;
    v80 = v46;
    swift_retain();
    swift_retain();
    a7(v51);
    outlined consume of SetEntityPropertyAction<Transform>?(v31, v21, v19, v18, v17);
    v81[0] = a1;
    v81[2] = v31;
    v81[3] = v21;
    v82 = v19 & 1;
    v83 = v18;
    v84 = v17;
    v85 = v26;
    v86 = v27;
    v87 = v29;
    v88 = v30;
    v89 = v44;
    v90 = v45;
    v91 = v49 & 1;
    v92 = v28;
    v93 = a6;
    v94 = a3 & 1;
    v95 = a9;
    v96 = a10;
    v99 = 0;
    v97 = a4;
    v98 = 0;
    v100 = 1;
    v101 = 0;
    v102 = 1;
    v103 = 0;
    v104 = 1;
    v105 = v42;
    v106 = v41 & 1;
    v107 = v32;
    v108 = v36;
    v109 = v35;
    v110 = v37;
    v111 = v39;
    v112 = v34;
    v113 = v33;
    v114 = v43;
    v115 = v46;
    outlined release of ActionEvent<SetEntityPropertyAction<Transform>>((uint64_t)v81);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  char v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[3];
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[3];
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[4];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v41 = *a2;
  v40 = *((_BYTE *)a2 + 8);
  v15 = a2[2];
  v16 = a2[5];
  v37 = a2[4];
  v17 = a2[7];
  v33 = a2[6];
  v34 = a2[3];
  v18 = a2[8];
  v43 = a2[9];
  specialized ActionEventData.action<A>()((uint64_t)v101);
  v19 = v102;
  if (v102)
  {
    v31 = v18;
    v32 = v16;
    v21 = v103;
    v20 = v104;
    v44 = a5;
    v23 = v101[2];
    v22 = v101[3];
    v30 = v15;
    v24 = v101[0];
    v25 = v101[1];
    swift_retain();
    outlined copy of SetEntityPropertyAction<String>?(v24, v25, v23, v22, v19);
    v26 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<String>>);
    v27 = *(_OWORD *)a2;
    v66 = *((_OWORD *)a2 + 1);
    v28 = *((_OWORD *)a2 + 3);
    v67 = *((_OWORD *)a2 + 2);
    v68 = v28;
    v69 = *((_OWORD *)a2 + 4);
    v46[1] = v24;
    v46[2] = v25;
    v47 = v23 & 1;
    v48 = v22;
    v49 = v19;
    v50 = v21;
    v51 = v20;
    v29 = v26 & 1;
    v52 = v26 & 1;
    v46[0] = a1;
    v53 = a6;
    v36 = a3 & 1;
    v54 = v36;
    v55 = a9;
    v56 = a10;
    v58 = 0;
    v59 = 0;
    v57 = a4;
    v60 = 1;
    v61 = 0;
    v62 = 1;
    v63 = 0;
    v64 = 1;
    v65 = v27;
    v70 = v44;
    swift_retain();
    swift_retain();
    a7(v46);
    outlined consume of SetEntityPropertyAction<String>?(v24, v25, v23, v22, v19);
    v71[0] = a1;
    v71[1] = v24;
    v71[2] = v25;
    v72 = v23 & 1;
    v73 = v22;
    v74 = v19;
    v75 = v21;
    v76 = v20;
    v77 = v29;
    v78 = a6;
    v79 = v36;
    v80 = a9;
    v81 = a10;
    v84 = 0;
    v82 = a4;
    v83 = 0;
    v85 = 1;
    v86 = 0;
    v87 = 1;
    v88 = 0;
    v89 = 1;
    v90 = v41;
    v91 = v40 & 1;
    v92 = v30;
    v93 = v34;
    v94 = v37;
    v95 = v32;
    v96 = v33;
    v97 = v17;
    v98 = v31;
    v99 = v43;
    v100 = v44;
    outlined release of ActionEvent<SetEntityPropertyAction<String>>((uint64_t)v71);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[3];
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[4];
  uint64_t v97;
  char v98;

  v38 = *a2;
  v37 = *((_BYTE *)a2 + 8);
  v15 = a2[3];
  v34 = a2[2];
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[8];
  v31 = a2[7];
  v32 = a2[6];
  v40 = a2[9];
  specialized ActionEventData.action<A>()((uint64_t)v96);
  v19 = v97;
  if (v97)
  {
    v29 = v16;
    v30 = v18;
    v21 = v96[2];
    v20 = v96[3];
    v41 = a5;
    v23 = v96[0];
    v22 = v96[1];
    v24 = v98;
    swift_retain();
    outlined copy of SetEntityPropertyAction<Transform>?(v23, v22, v21, v20, v19);
    v25 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Bool>>);
    v26 = *(_OWORD *)a2;
    v62 = *((_OWORD *)a2 + 1);
    v27 = *((_OWORD *)a2 + 3);
    v63 = *((_OWORD *)a2 + 2);
    v64 = v27;
    v65 = *((_OWORD *)a2 + 4);
    v43[1] = v23;
    v43[2] = v22;
    v44 = v21 & 1;
    v45 = v20;
    v46 = v19;
    v47 = v24;
    v28 = v25 & 1;
    v48 = v25 & 1;
    v43[0] = a1;
    v49 = a6;
    v50 = a3 & 1;
    v51 = a9;
    v52 = a10;
    v54 = 0;
    v55 = 0;
    v53 = a4;
    v56 = 1;
    v57 = 0;
    v58 = 1;
    v59 = 0;
    v60 = 1;
    v61 = v26;
    v66 = v41;
    swift_retain();
    swift_retain();
    a7(v43);
    outlined consume of SetEntityPropertyAction<Transform>?(v23, v22, v21, v20, v19);
    v67[0] = a1;
    v67[1] = v23;
    v67[2] = v22;
    v68 = v21 & 1;
    v69 = v20;
    v70 = v19;
    v71 = v24;
    v72 = v28;
    v73 = a6;
    v74 = a3 & 1;
    v75 = a9;
    v76 = a10;
    v78 = 0;
    v79 = 0;
    v77 = a4;
    v80 = 1;
    v81 = 0;
    v82 = 1;
    v83 = 0;
    v84 = 1;
    v85 = v38;
    v86 = v37 & 1;
    v87 = v34;
    v88 = v15;
    v89 = v29;
    v90 = v17;
    v91 = v32;
    v92 = v31;
    v93 = v30;
    v94 = v40;
    v95 = v41;
    outlined release of ActionEvent<SetEntityPropertyAction<Bool>>((uint64_t)v67);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v42;
  uint64_t v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD v49[3];
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[3];
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  char v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[4];
  uint64_t v105;
  int v106;
  char v107;

  v43 = *a2;
  v42 = *((_BYTE *)a2 + 8);
  v39 = a2[2];
  v15 = a2[4];
  v16 = a2[5];
  v36 = a2[3];
  v37 = a2[6];
  v17 = a2[7];
  v18 = a2[8];
  v45 = a2[9];
  specialized ActionEventData.action<A>()((uint64_t)v104);
  v19 = v105;
  if (v105)
  {
    v46 = v106;
    v47 = a5;
    v33 = v16;
    v34 = v15;
    v35 = v18;
    v20 = v104[2];
    v21 = v104[3];
    v23 = v104[0];
    v22 = v104[1];
    v32 = v104[0];
    v24 = v107 & 1;
    v30 = v107 & 1;
    swift_retain();
    v29 = v20;
    outlined copy of SetEntityPropertyAction<Transform>?(v23, v22, v20, v21, v19);
    v25 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Float>>);
    v26 = *(_OWORD *)a2;
    v69 = *((_OWORD *)a2 + 1);
    v27 = *((_OWORD *)a2 + 3);
    v70 = *((_OWORD *)a2 + 2);
    v71 = v27;
    v72 = *((_OWORD *)a2 + 4);
    LOBYTE(v20) = v20 & 1;
    v50 = v20;
    v51 = v21;
    v52 = v19;
    v53 = v46;
    v54 = v24;
    v31 = v17;
    v28 = v25 & 1;
    v55 = v25 & 1;
    v49[1] = v32;
    v49[2] = v22;
    v49[0] = a1;
    v56 = a6;
    v57 = a3 & 1;
    v58 = a9;
    v59 = a10;
    v61 = 0;
    v62 = 0;
    v60 = a4;
    v63 = 1;
    v64 = 0;
    v65 = 1;
    v66 = 0;
    v67 = 1;
    v68 = v26;
    v73 = v47;
    swift_retain();
    swift_retain();
    a7(v49);
    outlined consume of SetEntityPropertyAction<Transform>?(v32, v22, v29, v21, v19);
    v74[0] = a1;
    v74[1] = v32;
    v74[2] = v22;
    v75 = v20;
    v76 = v21;
    v77 = v19;
    v78 = v46;
    v79 = v30;
    v80 = v28;
    v81 = a6;
    v82 = a3 & 1;
    v83 = a9;
    v84 = a10;
    v87 = 0;
    v85 = a4;
    v86 = 0;
    v88 = 1;
    v89 = 0;
    v90 = 1;
    v91 = 0;
    v92 = 1;
    v93 = v43;
    v94 = v42 & 1;
    v95 = v39;
    v96 = v36;
    v97 = v34;
    v98 = v33;
    v99 = v37;
    v100 = v31;
    v101 = v35;
    v102 = v45;
    v103 = v47;
    outlined release of ActionEvent<SetEntityPropertyAction<Bool>>((uint64_t)v74);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
}

{
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _QWORD v57[3];
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _QWORD v92[3];
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[8];
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v50 = *a2;
  v51 = *((_BYTE *)a2 + 8);
  v44 = a2[3];
  v45 = a2[2];
  v46 = a2[4];
  v41 = a2[5];
  v42 = a2[6];
  v43 = a2[7];
  v40 = a2[8];
  v52 = a2[9];
  specialized ActionEventData.action<A>()(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<SIMD2<Float>>>, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, (uint64_t)v132);
  if (v137 == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v32 = v138;
    v14 = v135;
    v15 = v136;
    v16 = v133;
    v17 = v132[7];
    v26 = v134;
    v27 = v132[6];
    v36 = v132[4];
    v37 = v136;
    v18 = v132[2];
    v34 = v132[5];
    v35 = v132[3];
    v38 = a1;
    v39 = HIDWORD(v133);
    v29 = v133;
    v30 = v135;
    v19 = v132[0];
    v20 = v132[1];
    v33 = v132[0];
    v21 = v137;
    v31 = v137;
    swift_retain();
    outlined copy of FromToByAction<Double>?(v19, v20, v18, v35, v36, v34, v27, v17, v16, v26, v14, v15, v21);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD2<Float>>>);
    v23 = *((_OWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 2);
    v89 = *((_OWORD *)a2 + 3);
    v90 = v23;
    v88 = v24;
    v25 = *(_OWORD *)a2;
    v87 = *((_OWORD *)a2 + 1);
    v58 = v20 & 1;
    v59 = v18;
    v60 = v35 & 1;
    v61 = v36;
    v62 = v34 & 1;
    v63 = v27;
    v64 = v17;
    v65 = v29;
    v66 = v39;
    v67 = v26;
    v68 = v30;
    v69 = v37 & 0x1FF;
    v70 = BYTE2(v37) & 1;
    v71 = v31;
    v72 = v32;
    v28 = v22 & 1;
    v73 = v22 & 1;
    v57[2] = v33;
    v57[0] = v38;
    v74 = a6;
    v48 = a3 & 1;
    v75 = v48;
    v76 = a9;
    v77 = a10;
    v80 = 0;
    v78 = a4;
    v79 = 0;
    v81 = 1;
    v82 = 0;
    v83 = 1;
    v84 = 0;
    v85 = 1;
    v86 = v25;
    v91 = a5;
    swift_retain();
    swift_retain();
    a7(v57);
    outlined consume of FromToByAction<Double>?(v33, v20, v18, v35, v36, v34, v27, v17, v29, v26, v30, v37, v31);
    v92[0] = v38;
    v92[2] = v33;
    v93 = v20 & 1;
    v94 = v18;
    v95 = v35 & 1;
    v96 = v36;
    v97 = v34 & 1;
    v98 = v27;
    v99 = v17;
    v100 = v29;
    v101 = v39;
    v102 = v26;
    v103 = v30;
    v104 = v37 & 0x1FF;
    v105 = BYTE2(v37) & 1;
    v106 = v31;
    v107 = v32;
    v108 = v28;
    v109 = a6;
    v110 = v48;
    v111 = a9;
    v112 = a10;
    v115 = 0;
    v113 = a4;
    v114 = 0;
    v116 = 1;
    v117 = 0;
    v118 = 1;
    v119 = 0;
    v120 = 1;
    v121 = v50;
    v122 = v51 & 1;
    v123 = v45;
    v124 = v44;
    v125 = v46;
    v126 = v41;
    v127 = v42;
    v128 = v43;
    v129 = v40;
    v130 = v52;
    v131 = a5;
    outlined release of ActionEvent<FromToByAction<SIMD2<Float>>>((uint64_t)v92);
  }
}

{
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _QWORD v57[3];
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _QWORD v92[3];
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[8];
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v50 = *a2;
  v51 = *((_BYTE *)a2 + 8);
  v44 = a2[3];
  v45 = a2[2];
  v46 = a2[4];
  v41 = a2[5];
  v42 = a2[6];
  v43 = a2[7];
  v40 = a2[8];
  v52 = a2[9];
  specialized ActionEventData.action<A>()(&demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<Double>>, &demangling cache variable for type metadata for FromToByAction<Double>, (uint64_t)v132);
  if (v137 == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v32 = v138;
    v14 = v135;
    v15 = v136;
    v16 = v133;
    v17 = v132[7];
    v26 = v134;
    v27 = v132[6];
    v36 = v132[4];
    v37 = v136;
    v18 = v132[2];
    v34 = v132[5];
    v35 = v132[3];
    v38 = a1;
    v39 = HIDWORD(v133);
    v29 = v133;
    v30 = v135;
    v19 = v132[0];
    v20 = v132[1];
    v33 = v132[0];
    v21 = v137;
    v31 = v137;
    swift_retain();
    outlined copy of FromToByAction<Double>?(v19, v20, v18, v35, v36, v34, v27, v17, v16, v26, v14, v15, v21);
    v22 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Double>>);
    v23 = *((_OWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 2);
    v89 = *((_OWORD *)a2 + 3);
    v90 = v23;
    v88 = v24;
    v25 = *(_OWORD *)a2;
    v87 = *((_OWORD *)a2 + 1);
    v58 = v20 & 1;
    v59 = v18;
    v60 = v35 & 1;
    v61 = v36;
    v62 = v34 & 1;
    v63 = v27;
    v64 = v17;
    v65 = v29;
    v66 = v39;
    v67 = v26;
    v68 = v30;
    v69 = v37 & 0x1FF;
    v70 = BYTE2(v37) & 1;
    v71 = v31;
    v72 = v32;
    v28 = v22 & 1;
    v73 = v22 & 1;
    v57[2] = v33;
    v57[0] = v38;
    v74 = a6;
    v48 = a3 & 1;
    v75 = v48;
    v76 = a9;
    v77 = a10;
    v80 = 0;
    v78 = a4;
    v79 = 0;
    v81 = 1;
    v82 = 0;
    v83 = 1;
    v84 = 0;
    v85 = 1;
    v86 = v25;
    v91 = a5;
    swift_retain();
    swift_retain();
    a7(v57);
    outlined consume of FromToByAction<Double>?(v33, v20, v18, v35, v36, v34, v27, v17, v29, v26, v30, v37, v31);
    v92[0] = v38;
    v92[2] = v33;
    v93 = v20 & 1;
    v94 = v18;
    v95 = v35 & 1;
    v96 = v36;
    v97 = v34 & 1;
    v98 = v27;
    v99 = v17;
    v100 = v29;
    v101 = v39;
    v102 = v26;
    v103 = v30;
    v104 = v37 & 0x1FF;
    v105 = BYTE2(v37) & 1;
    v106 = v31;
    v107 = v32;
    v108 = v28;
    v109 = a6;
    v110 = v48;
    v111 = a9;
    v112 = a10;
    v115 = 0;
    v113 = a4;
    v114 = 0;
    v116 = 1;
    v117 = 0;
    v118 = 1;
    v119 = 0;
    v120 = 1;
    v121 = v50;
    v122 = v51 & 1;
    v123 = v45;
    v124 = v44;
    v125 = v46;
    v126 = v41;
    v127 = v42;
    v128 = v43;
    v129 = v40;
    v130 = v52;
    v131 = a5;
    outlined release of ActionEvent<FromToByAction<SIMD2<Float>>>((uint64_t)v92);
  }
}

void specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD *)@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, uint64_t *a11, uint64_t *a12, uint64_t *a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v50[4];
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[4];
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[4];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;

  v42 = *((_BYTE *)a2 + 8);
  v17 = a2[2];
  v39 = a2[4];
  v18 = a2[6];
  v35 = a2[5];
  v36 = a2[3];
  v19 = a2[7];
  v45 = a2[8];
  v43 = *a2;
  v44 = a2[9];
  specialized ActionEventData.action<A>()(a11, a12, (uint64_t)v107);
  v20 = v108;
  if (v108)
  {
    v21 = v111;
    v22 = v109;
    v23 = v110;
    v33 = v17;
    v46 = a5;
    v25 = v107[2];
    v24 = v107[3];
    v34 = v19;
    v26 = v107[0];
    v27 = v107[1];
    v32 = v107[0];
    swift_retain();
    outlined copy of SetEntityPropertyAction<Transform>?(v26, v27, v25, v24, v20);
    v28 = specialized ActionEventData.parameter<A>(type:)(a13);
    v29 = *(_OWORD *)a2;
    v71 = *((_OWORD *)a2 + 1);
    v30 = *((_OWORD *)a2 + 3);
    v72 = *((_OWORD *)a2 + 2);
    v73 = v30;
    v74 = *((_OWORD *)a2 + 4);
    v51 = v25 & 1;
    v52 = v24;
    v53 = v20;
    v54 = v22;
    v55 = v23;
    v56 = v21 & 1;
    v31 = v28 & 1;
    v57 = v28 & 1;
    v50[2] = v32;
    v50[3] = v27;
    v50[0] = a1;
    v58 = a6;
    v38 = a3 & 1;
    v59 = v38;
    v60 = a9;
    v61 = a10;
    v63 = 0;
    v64 = 0;
    v62 = a4;
    v65 = 1;
    v66 = 0;
    v67 = 1;
    v68 = 0;
    v69 = 1;
    v70 = v29;
    v75 = v46;
    swift_retain();
    swift_retain();
    a7(v50);
    outlined consume of SetEntityPropertyAction<Transform>?(v32, v27, v25, v24, v20);
    v76[0] = a1;
    v76[2] = v32;
    v76[3] = v27;
    v77 = v25 & 1;
    v78 = v24;
    v79 = v20;
    v80 = v22;
    v81 = v23;
    v82 = v21 & 1;
    v83 = v31;
    v84 = a6;
    v85 = v38;
    v86 = a9;
    v87 = a10;
    v90 = 0;
    v88 = a4;
    v89 = 0;
    v91 = 1;
    v92 = 0;
    v93 = 1;
    v94 = 0;
    v95 = 1;
    v96 = v43;
    v97 = v42 & 1;
    v98 = v33;
    v99 = v36;
    v100 = v39;
    v101 = v35;
    v102 = v18;
    v103 = v34;
    v104 = v45;
    v105 = v44;
    v106 = v46;
    outlined release of ActionEvent<SetEntityPropertyAction<simd_quatf>>((uint64_t)v76);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[3];
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  char v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[4];
  uint64_t v107;
  uint64_t v108;
  char v109;

  v45 = *((_BYTE *)a2 + 8);
  v18 = a2[2];
  v19 = a2[3];
  v20 = a2[4];
  v21 = a2[5];
  v22 = a2[6];
  v23 = a2[7];
  v48 = a2[8];
  v46 = *a2;
  v47 = a2[9];
  specialized ActionEventData.action<A>()(a11, a12, (uint64_t)v106);
  v24 = v107;
  if (v107)
  {
    v38 = v21;
    v39 = v23;
    v25 = v108;
    v36 = v19;
    v37 = v22;
    v26 = v106[2];
    v27 = v106[3];
    v49 = a5;
    v28 = v106[0];
    v29 = v106[1];
    v35 = v18;
    v30 = v109;
    swift_retain();
    outlined copy of SetEntityPropertyAction<Transform>?(v28, v29, v26, v27, v24);
    v31 = specialized ActionEventData.parameter<A>(type:)(a13);
    v51[1] = v28;
    v51[2] = v29;
    v52 = v26 & 1;
    v53 = v27;
    v54 = v24;
    v55 = v25;
    v56 = v30 & 1;
    v34 = v31 & 1;
    v57 = v31 & 1;
    v51[0] = a1;
    v58 = a6;
    v41 = a3 & 1;
    v59 = v41;
    v60 = a9;
    v61 = a10;
    v63 = 0;
    v64 = 0;
    v62 = a4;
    v65 = 1;
    v66 = 0;
    v67 = 1;
    v68 = 0;
    v69 = 1;
    v32 = *((_OWORD *)a2 + 3);
    v72 = *((_OWORD *)a2 + 2);
    v73 = v32;
    v74 = *((_OWORD *)a2 + 4);
    v33 = *((_OWORD *)a2 + 1);
    v70 = *(_OWORD *)a2;
    v71 = v33;
    v75 = v49;
    swift_retain();
    swift_retain();
    a7(v51);
    outlined consume of SetEntityPropertyAction<Transform>?(v28, v29, v26, v27, v24);
    v76[0] = a1;
    v76[1] = v28;
    v76[2] = v29;
    v77 = v26 & 1;
    v78 = v27;
    v79 = v24;
    v80 = v25;
    v81 = v30 & 1;
    v82 = v34;
    v83 = a6;
    v84 = v41;
    v85 = a9;
    v86 = a10;
    v89 = 0;
    v87 = a4;
    v88 = 0;
    v90 = 1;
    v91 = 0;
    v92 = 1;
    v93 = 0;
    v94 = 1;
    v95 = v46;
    v96 = v45 & 1;
    v97 = v35;
    v98 = v36;
    v99 = v20;
    v100 = v38;
    v101 = v37;
    v102 = v39;
    v103 = v48;
    v104 = v47;
    v105 = v49;
    outlined release of ActionEvent<PlayAudioAction>((uint64_t)v76);
  }
  else
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v56[8];
  int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _QWORD v84[8];
  int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v47 = *((_BYTE *)a2 + 8);
  v16 = a2[3];
  v17 = a2[5];
  v39 = a2[4];
  v40 = a2[6];
  v41 = a2[7];
  v42 = a2[2];
  v50 = a2[8];
  v48 = *a2;
  v49 = a2[9];
  specialized ActionEventData.action<A>()(a11, a12, (uint64_t)v117);
  v18 = v117[0];
  if (v117[0] == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v30 = v126;
    v32 = v17;
    v33 = v16;
    v19 = v124;
    v36 = v124;
    v37 = v125;
    v51 = v123;
    v20 = v121;
    v21 = v119;
    v34 = v120;
    v35 = v122;
    v22 = v117[2];
    v23 = v118;
    v31 = v118;
    v38 = HIDWORD(v121);
    v24 = v117[1];
    swift_retain();
    outlined copy of FromToByAction<BlendShapeWeights>?(v18, v24, v22, v23, v21, v34, v20, v35, v51, v19);
    v25 = specialized ActionEventData.parameter<A>(type:)(a13);
    v26 = *((_OWORD *)a2 + 4);
    v81 = *((_OWORD *)a2 + 3);
    v82 = v26;
    v27 = *((_OWORD *)a2 + 2);
    v28 = *(_OWORD *)a2;
    v79 = *((_OWORD *)a2 + 1);
    v80 = v27;
    v56[3] = v24;
    v56[4] = v22;
    v56[6] = v21;
    v56[7] = v34;
    v57 = v20;
    v58 = v38;
    v59 = v35;
    v60 = v51;
    v61 = v36 & 0x1FF;
    v62 = BYTE2(v36) & 1;
    v63 = v37;
    v64 = v30;
    v29 = v25 & 1;
    v65 = v25 & 1;
    v56[2] = v18;
    v56[0] = a1;
    v66 = a6;
    v44 = a3 & 1;
    v67 = v44;
    v68 = a9;
    v69 = a10;
    v71 = 0;
    v72 = 0;
    v70 = a4;
    v73 = 1;
    v74 = 0;
    v75 = 1;
    v76 = 0;
    v77 = 1;
    v78 = v28;
    v83 = a5;
    swift_retain();
    swift_retain();
    a7(v56);
    outlined consume of FromToByAction<BlendShapeWeights>?(v18, v24, v22, v31, v21, v34, v20, v35, v51, v36);
    v84[0] = a1;
    v84[2] = v18;
    v84[3] = v24;
    v84[4] = v22;
    v84[6] = v21;
    v84[7] = v34;
    v85 = v20;
    v86 = v38;
    v87 = v35;
    v88 = v51;
    v89 = v36 & 0x1FF;
    v90 = BYTE2(v36) & 1;
    v91 = v37;
    v92 = v30;
    v93 = v29;
    v94 = a6;
    v95 = v44;
    v96 = a9;
    v97 = a10;
    v100 = 0;
    v98 = a4;
    v99 = 0;
    v101 = 1;
    v102 = 0;
    v103 = 1;
    v104 = 0;
    v105 = 1;
    v106 = v48;
    v107 = v47 & 1;
    v108 = v42;
    v109 = v33;
    v110 = v39;
    v111 = v32;
    v112 = v40;
    v113 = v41;
    v114 = v50;
    v115 = v49;
    v116 = a5;
    outlined release of ActionEvent<FromToByAction<BlendShapeWeights>>((uint64_t)v84);
  }
}

void specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t *)@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  char v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  int v98;
  char v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v54 = *a2;
  v53 = *((_BYTE *)a2 + 8);
  v46 = a2[2];
  v47 = a2[3];
  v48 = a2[4];
  v50 = a2[5];
  v15 = a2[7];
  v45 = a2[6];
  v16 = a2[8];
  v56 = a2[9];
  specialized ActionEventData.action<A>()((uint64_t)&v136);
  v17 = v146;
  if (v146 == 1)
  {
    *(_QWORD *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    v34 = a3;
    v18 = v145;
    v39 = v145;
    v40 = v147;
    v19 = v143;
    v36 = v16;
    v37 = v144;
    v20 = v139;
    v32 = v142;
    v33 = v139;
    v51 = a5;
    v22 = v136;
    v21 = v137;
    v35 = v15;
    v23 = v142;
    v43 = HIDWORD(v136) & 1;
    v44 = HIDWORD(v142);
    v31 = v136;
    v41 = HIDWORD(v138) & 1;
    v42 = HIDWORD(v137) & 1;
    v24 = v138;
    v25 = v140;
    v38 = v141;
    swift_retain();
    outlined copy of FromToByAction<Float>?(v22, v21, v24, v20, v25, v38, v23, v19, v37, v18, v17);
    v26 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Float>>);
    v27 = *((_OWORD *)a2 + 4);
    v28 = *((_OWORD *)a2 + 2);
    v92 = *((_OWORD *)a2 + 3);
    v93 = v27;
    v91 = v28;
    v29 = *(_OWORD *)a2;
    v90 = *((_OWORD *)a2 + 1);
    v60 = v31;
    v61 = v43;
    v62 = v21;
    v63 = v42;
    v64 = v24;
    v65 = v41;
    v66 = v25;
    v67 = v38;
    v68 = v32;
    v69 = v44;
    v70 = v19;
    v71 = v37;
    v72 = v39 & 0x1FF;
    v73 = BYTE2(v39) & 1;
    v74 = v17;
    v75 = v40;
    v30 = v26 & 1;
    v76 = v26 & 1;
    v59 = a1;
    v77 = a6;
    v34 &= 1u;
    v78 = v34;
    v79 = a9;
    v80 = a10;
    v82 = 0;
    v83 = 0;
    v81 = a4;
    v84 = 1;
    v85 = 0;
    v86 = 1;
    v87 = 0;
    v88 = 1;
    v89 = v29;
    v94 = v51;
    swift_retain();
    swift_retain();
    a7(&v59);
    outlined consume of FromToByAction<Float>?(v31, v21, v24, v33, v25, v38, v32, v19, v37, v39, v17);
    v95 = a1;
    v96 = v31;
    v97 = v43;
    v98 = v21;
    v99 = v42;
    v100 = v24;
    v101 = v41;
    v102 = v25;
    v103 = v38;
    v104 = v32;
    v105 = v44;
    v106 = v19;
    v107 = v37;
    v108 = v39 & 0x1FF;
    v109 = BYTE2(v39) & 1;
    v110 = v17;
    v111 = v40;
    v112 = v30;
    v113 = a6;
    v114 = v34;
    v115 = a9;
    v116 = a10;
    v119 = 0;
    v117 = a4;
    v118 = 0;
    v120 = 1;
    v121 = 0;
    v122 = 1;
    v123 = 0;
    v124 = 1;
    v125 = v54;
    v126 = v53 & 1;
    v127 = v46;
    v128 = v47;
    v129 = v48;
    v130 = v50;
    v131 = v45;
    v132 = v35;
    v133 = v36;
    v134 = v56;
    v135 = v51;
    outlined release of ActionEvent<FromToByAction<Float>>((uint64_t)&v95);
  }
}

uint64_t specialized static ActionHandlerProtocol.actionHandler(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[24];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v6)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v8 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EmphasizeAction),
          (v10 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      return 0;
    }
    v11 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
    swift_endAccess();
    v12 = *a1;
    v13 = *((_OWORD *)a1 + 10);
    v27 = *((_OWORD *)a1 + 9);
    v28 = v13;
    v29 = *((_OWORD *)a1 + 11);
    v14 = *((_OWORD *)a1 + 8);
    v25 = *((_OWORD *)a1 + 7);
    v26 = v14;
    v15 = *((_BYTE *)a1 + 24);
    v16 = a1[4];
    v17 = a1[5];
    v18 = a1[6];
    outlined init with take of Transform?((uint64_t)(a1 + 2), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
    v30 = v12;
    v24 = v15;
    v22 = v17;
    v23 = v16;
    v20 = v2;
    v21 = v18;
    outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v11(&v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)&v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (swift_dynamicCast())
    return v31;
  else
    return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[30];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v6)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v8 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAudioAction),
          (v10 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      return 1;
    }
    v11 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
    swift_endAccess();
    v12 = *a1;
    v13 = *((_OWORD *)a1 + 13);
    v27 = *((_OWORD *)a1 + 12);
    v28 = v13;
    v29 = *((_OWORD *)a1 + 14);
    v14 = *((_OWORD *)a1 + 11);
    v25 = *((_OWORD *)a1 + 10);
    v26 = v14;
    v15 = *((_BYTE *)a1 + 72);
    v16 = a1[10];
    v17 = a1[11];
    v18 = a1[12];
    outlined init with take of Transform?((uint64_t)(a1 + 8), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
    v30 = v12;
    v24 = v15;
    v22 = v17;
    v23 = v16;
    v20 = v2;
    v21 = v18;
    outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v11(&v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)&v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (swift_dynamicCast())
    return v31;
  else
    return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[5];
  _OWORD v34[2];
  uint64_t v35;
  _BYTE v36[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[37];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v34);
  }
  else
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v34, (uint64_t)&v27, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v28 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v27, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v6)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v8 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      v12 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v10);
      swift_endAccess();
      v13 = *a1;
      v14 = *(_OWORD *)(a1 + 33);
      v15 = *(_OWORD *)(a1 + 35);
      v29 = *(_OWORD *)(a1 + 31);
      v30 = v14;
      v16 = *(_OWORD *)(a1 + 29);
      v31 = v15;
      v27 = *(_OWORD *)(a1 + 27);
      v28 = v16;
      v17 = *((_BYTE *)a1 + 128);
      v18 = a1[17];
      v19 = a1[18];
      v20 = a1[19];
      outlined init with take of Transform?((uint64_t)(a1 + 15), (uint64_t)v36, &demangling cache variable for type metadata for Entity?);
      v32 = v13;
      v26 = v17;
      v24 = v19;
      v25 = v18;
      v22 = v2;
      v23 = v20;
      outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v21, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v12(v33, &v32, &v27, &v26, &v25, &v24, &v23, &v22, &v21);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v33, (uint64_t)v34, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v27, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[5];
  _OWORD v33[2];
  uint64_t v34;
  _BYTE v35[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[31];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v33);
  }
  else
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v33, (uint64_t)&v26, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v27 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v26, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v6)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v8 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      v12 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v10);
      swift_endAccess();
      v13 = *a1;
      v14 = *(_OWORD *)(a1 + 23);
      v15 = *(_OWORD *)(a1 + 27);
      v28 = *(_OWORD *)(a1 + 25);
      v29 = v15;
      v30 = *(_OWORD *)(a1 + 29);
      v26 = *(_OWORD *)(a1 + 21);
      v27 = v14;
      v16 = *((_BYTE *)a1 + 80);
      v17 = a1[11];
      v18 = a1[12];
      v19 = a1[13];
      outlined init with take of Transform?((uint64_t)(a1 + 9), (uint64_t)v35, &demangling cache variable for type metadata for Entity?);
      v31 = v13;
      v25 = v16;
      v23 = v18;
      v24 = v17;
      v21 = v2;
      v22 = v19;
      outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v20, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v12(v32, &v31, &v26, &v25, &v24, &v23, &v22, &v21, &v20);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v32, (uint64_t)v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v26, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _BYTE v36[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[37];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v34);
  }
  else
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v34, (uint64_t)&v27, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v28 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v27, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v6)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v8 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>),
          v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9),
          (v11 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      return 0;
    }
    v12 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v10);
    swift_endAccess();
    v13 = *a1;
    v14 = *(_OWORD *)(a1 + 33);
    v15 = *(_OWORD *)(a1 + 35);
    v29 = *(_OWORD *)(a1 + 31);
    v30 = v14;
    v16 = *(_OWORD *)(a1 + 29);
    v31 = v15;
    v27 = *(_OWORD *)(a1 + 27);
    v28 = v16;
    v17 = *((_BYTE *)a1 + 128);
    v18 = a1[17];
    v19 = a1[18];
    v20 = a1[19];
    outlined init with take of Transform?((uint64_t)(a1 + 15), (uint64_t)v36, &demangling cache variable for type metadata for Entity?);
    v32 = v13;
    v26 = v17;
    v24 = v19;
    v25 = v18;
    v22 = v2;
    v23 = v20;
    outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v21, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v12(&v33, &v32, &v27, &v26, &v25, &v24, &v23, &v22, &v21);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)&v33, (uint64_t)v34, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v27, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
  if (swift_dynamicCast())
    return v33;
  else
    return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[31];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v6)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v8 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SpinAction), (v10 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      return 0;
    }
    v11 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
    swift_endAccess();
    v12 = *a1;
    v13 = *(_OWORD *)(a1 + 23);
    v14 = *(_OWORD *)(a1 + 27);
    v27 = *(_OWORD *)(a1 + 25);
    v28 = v14;
    v29 = *(_OWORD *)(a1 + 29);
    v25 = *(_OWORD *)(a1 + 21);
    v26 = v13;
    v15 = *((_BYTE *)a1 + 80);
    v16 = a1[11];
    v17 = a1[12];
    v18 = a1[13];
    outlined init with take of Transform?((uint64_t)(a1 + 9), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
    v30 = v12;
    v24 = v15;
    v22 = v17;
    v23 = v16;
    v20 = v2;
    v21 = v18;
    outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v11(&v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)&v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (swift_dynamicCast())
    return v31;
  else
    return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[5];
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[31];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v6)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v8 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for ImpulseAction);
    if ((v10 & 1) != 0)
    {
      v11 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_endAccess();
      v12 = *a1;
      v13 = *(_OWORD *)(a1 + 23);
      v14 = *(_OWORD *)(a1 + 27);
      v27 = *(_OWORD *)(a1 + 25);
      v28 = v14;
      v29 = *(_OWORD *)(a1 + 29);
      v25 = *(_OWORD *)(a1 + 21);
      v26 = v13;
      v15 = *((_BYTE *)a1 + 80);
      v16 = a1[11];
      v17 = a1[12];
      v18 = a1[13];
      outlined init with take of Transform?((uint64_t)(a1 + 9), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
      v30 = v12;
      v24 = v15;
      v22 = v17;
      v23 = v16;
      v20 = v2;
      v21 = v18;
      outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v11(v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[5];
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[26];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v6)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v8 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SetEntityEnabledAction);
    if ((v10 & 1) != 0)
    {
      v11 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_endAccess();
      v12 = *a1;
      v13 = *((_OWORD *)a1 + 11);
      v27 = *((_OWORD *)a1 + 10);
      v28 = v13;
      v29 = *((_OWORD *)a1 + 12);
      v14 = *((_OWORD *)a1 + 9);
      v25 = *((_OWORD *)a1 + 8);
      v26 = v14;
      v15 = *((_BYTE *)a1 + 40);
      v16 = a1[6];
      v17 = a1[7];
      v18 = a1[8];
      outlined init with take of Transform?((uint64_t)(a1 + 4), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
      v30 = v12;
      v24 = v15;
      v22 = v17;
      v23 = v16;
      v20 = v2;
      v21 = v18;
      outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v11(v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[5];
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[27];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v6)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v8 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for NotificationAction);
    if ((v10 & 1) != 0)
    {
      v11 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_endAccess();
      v12 = *a1;
      v13 = *(_OWORD *)(a1 + 19);
      v14 = *(_OWORD *)(a1 + 23);
      v27 = *(_OWORD *)(a1 + 21);
      v28 = v14;
      v29 = *(_OWORD *)(a1 + 25);
      v25 = *(_OWORD *)(a1 + 17);
      v26 = v13;
      v15 = *((_BYTE *)a1 + 48);
      v16 = a1[7];
      v17 = a1[8];
      v18 = a1[9];
      outlined init with take of Transform?((uint64_t)(a1 + 5), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
      v30 = v12;
      v24 = v15;
      v22 = v17;
      v23 = v16;
      v20 = v2;
      v21 = v18;
      outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v11(v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[5];
  _OWORD v32[2];
  uint64_t v33;
  _BYTE v34[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v2 = a1[31];
  swift_beginAccess();
  v3 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v32);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v6 = *((_QWORD *)&v26 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v6)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v8 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAnimationAction),
          (v10 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      return 1;
    }
    v11 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v8 + 56) + 16 * v9);
    swift_endAccess();
    v12 = *a1;
    v13 = *(_OWORD *)(a1 + 23);
    v14 = *(_OWORD *)(a1 + 27);
    v27 = *(_OWORD *)(a1 + 25);
    v28 = v14;
    v29 = *(_OWORD *)(a1 + 29);
    v25 = *(_OWORD *)(a1 + 21);
    v26 = v13;
    v15 = *((_BYTE *)a1 + 80);
    v16 = a1[11];
    v17 = a1[12];
    v18 = a1[13];
    outlined init with take of Transform?((uint64_t)(a1 + 9), (uint64_t)v34, &demangling cache variable for type metadata for Entity?);
    v30 = v12;
    v24 = v15;
    v22 = v17;
    v23 = v16;
    v20 = v2;
    v21 = v18;
    outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v19, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v11(v31, &v30, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v25, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (swift_dynamicCast())
    return v31[0];
  else
    return 1;
}

uint64_t specialized static ActionHandlerProtocol.actionHandler(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[5];
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v6 = a1[33];
  swift_beginAccess();
  v7 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v37);
  }
  else
  {
    v38 = 0;
    memset(v37, 0, sizeof(v37));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v10 = *((_QWORD *)&v31 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v10)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v12 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v15 & 1) != 0)
    {
      v16 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v12 + 56) + 16 * v14);
      swift_endAccess();
      v17 = *a1;
      v18 = *(_OWORD *)(a1 + 25);
      v19 = *(_OWORD *)(a1 + 29);
      v32 = *(_OWORD *)(a1 + 27);
      v33 = v19;
      v34 = *(_OWORD *)(a1 + 31);
      v30 = *(_OWORD *)(a1 + 23);
      v31 = v18;
      v20 = *((_BYTE *)a1 + 96);
      v21 = a1[13];
      v22 = a1[14];
      v23 = a1[15];
      outlined init with take of Transform?((uint64_t)(a1 + 11), (uint64_t)v39, &demangling cache variable for type metadata for Entity?);
      v35 = v17;
      v29 = v20;
      v27 = v22;
      v28 = v21;
      v25 = v6;
      v26 = v23;
      outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v24, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v16(v36, &v35, &v30, &v29, &v28, &v27, &v26, &v25, &v24);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(a3);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[5];
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v6 = a1[30];
  swift_beginAccess();
  v7 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v37);
  }
  else
  {
    v38 = 0;
    memset(v37, 0, sizeof(v37));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v10 = *((_QWORD *)&v31 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v10)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v12 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v15 & 1) != 0)
    {
      v16 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v12 + 56) + 16 * v14);
      swift_endAccess();
      v17 = *a1;
      v18 = *((_OWORD *)a1 + 13);
      v32 = *((_OWORD *)a1 + 12);
      v33 = v18;
      v34 = *((_OWORD *)a1 + 14);
      v19 = *((_OWORD *)a1 + 11);
      v30 = *((_OWORD *)a1 + 10);
      v31 = v19;
      v20 = *((_BYTE *)a1 + 72);
      v21 = a1[10];
      v22 = a1[11];
      v23 = a1[12];
      outlined init with take of Transform?((uint64_t)(a1 + 8), (uint64_t)v39, &demangling cache variable for type metadata for Entity?);
      v35 = v17;
      v29 = v20;
      v27 = v22;
      v28 = v21;
      v25 = v6;
      v26 = v23;
      outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v24, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v16(v36, &v35, &v30, &v29, &v28, &v27, &v26, &v25, &v24);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(a3);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[5];
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v6 = a1[29];
  swift_beginAccess();
  v7 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v37);
  }
  else
  {
    v38 = 0;
    memset(v37, 0, sizeof(v37));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v10 = *((_QWORD *)&v31 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (v10)
    goto LABEL_8;
  if (one-time initialization token for actionHandlerCreators != -1)
    swift_once();
  swift_beginAccess();
  v12 = static AnimationResource.actionHandlerCreators;
  if (*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(a2);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v15 & 1) != 0)
    {
      v16 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v12 + 56) + 16 * v14);
      swift_endAccess();
      v17 = *a1;
      v18 = *(_OWORD *)(a1 + 21);
      v19 = *(_OWORD *)(a1 + 25);
      v32 = *(_OWORD *)(a1 + 23);
      v33 = v19;
      v34 = *(_OWORD *)(a1 + 27);
      v30 = *(_OWORD *)(a1 + 19);
      v31 = v18;
      v20 = *((_BYTE *)a1 + 64);
      v21 = a1[9];
      v22 = a1[10];
      v23 = a1[11];
      outlined init with take of Transform?((uint64_t)(a1 + 7), (uint64_t)v39, &demangling cache variable for type metadata for Entity?);
      v35 = v17;
      v29 = v20;
      v27 = v22;
      v28 = v21;
      v25 = v6;
      v26 = v23;
      outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v24, &demangling cache variable for type metadata for Entity?);
      swift_retain();
      v16(v36, &v35, &v30, &v29, &v28, &v27, &v26, &v25, &v24);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      outlined init with take of Transform?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(a3);
      return swift_dynamicCast() ^ 1;
    }
  }
  swift_endAccess();
  outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  return 1;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v6 = a1[39];
  swift_beginAccess();
  v7 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v7 + 56) + 40 * v8, (uint64_t)v37);
  }
  else
  {
    v38 = 0;
    memset(v37, 0, sizeof(v37));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v10 = *((_QWORD *)&v31 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v10)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v12 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v13 = __swift_instantiateConcreteTypeFromMangledName(a2),
          v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13),
          (v15 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      return 0;
    }
    v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v12 + 56) + 16 * v14);
    swift_endAccess();
    v17 = *a1;
    v18 = *(_OWORD *)(a1 + 31);
    v19 = *(_OWORD *)(a1 + 35);
    v32 = *(_OWORD *)(a1 + 33);
    v33 = v19;
    v34 = *(_OWORD *)(a1 + 37);
    v30 = *(_OWORD *)(a1 + 29);
    v31 = v18;
    v20 = *((_BYTE *)a1 + 144);
    v21 = a1[19];
    v22 = a1[20];
    v23 = a1[21];
    outlined init with take of Transform?((uint64_t)(a1 + 17), (uint64_t)v39, &demangling cache variable for type metadata for Entity?);
    v35 = v17;
    v29 = v20;
    v27 = v22;
    v28 = v21;
    v25 = v6;
    v26 = v23;
    outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v24, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v16(&v36, &v35, &v30, &v29, &v28, &v27, &v26, &v25, &v24);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)&v36, (uint64_t)v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  if (swift_dynamicCast())
    return v36;
  else
    return 0;
}

uint64_t specialized static ActionHandlerProtocol.actionHandler(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  _OWORD v40[2];
  uint64_t v41;
  _BYTE v42[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = a1[37];
  swift_beginAccess();
  v9 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v11 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v40);
  }
  else
  {
    v41 = 0;
    memset(v40, 0, sizeof(v40));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v40, (uint64_t)&v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v12 = *((_QWORD *)&v34 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v12)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v14 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v15 = __swift_instantiateConcreteTypeFromMangledName(a2),
          v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15),
          (v17 & 1) == 0))
    {
      swift_endAccess();
      result = outlined destroy of BodyTrackingComponent?((uint64_t)v40, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      goto LABEL_16;
    }
    v18 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v14 + 56) + 16 * v16);
    swift_endAccess();
    v19 = *a1;
    v20 = *(_OWORD *)(a1 + 33);
    v21 = *(_OWORD *)(a1 + 35);
    v35 = *(_OWORD *)(a1 + 31);
    v36 = v20;
    v22 = *(_OWORD *)(a1 + 29);
    v37 = v21;
    v33 = *(_OWORD *)(a1 + 27);
    v34 = v22;
    v23 = *((_BYTE *)a1 + 128);
    v24 = a1[17];
    v25 = a1[18];
    v26 = a1[19];
    outlined init with take of Transform?((uint64_t)(a1 + 15), (uint64_t)v42, &demangling cache variable for type metadata for Entity?);
    v38 = v19;
    v32 = v23;
    v30 = v25;
    v31 = v24;
    v28 = v8;
    v29 = v26;
    outlined init with take of Transform?((uint64_t)v42, (uint64_t)&v27, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v18(v39, &v38, &v33, &v32, &v31, &v30, &v29, &v28, &v27);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v40, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)v39, (uint64_t)v40, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
LABEL_16:
    *a4 = xmmword_21BE41200;
  return result;
}

uint64_t specialized static ActionHandlerProtocol.actionHandler(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void (*v19)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  _OWORD v40[2];
  uint64_t v41;
  _BYTE v42[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v4 = a1[57];
  swift_beginAccess();
  v5 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)v40);
  }
  else
  {
    v41 = 0;
    memset(v40, 0, sizeof(v40));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v40, (uint64_t)&v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v8 = *((_QWORD *)&v34 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v33, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v8)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v15 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>),
          v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16),
          (v18 & 1) == 0))
    {
      swift_endAccess();
      result = outlined destroy of BodyTrackingComponent?((uint64_t)v40, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      v10 = 0uLL;
      v14 = 1;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      goto LABEL_17;
    }
    v19 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v15 + 56) + 16 * v17);
    swift_endAccess();
    v20 = *a1;
    v21 = *(_OWORD *)(a1 + 53);
    v35 = *(_OWORD *)(a1 + 51);
    v36 = v21;
    v37 = *(_OWORD *)(a1 + 55);
    v22 = *(_OWORD *)(a1 + 49);
    v33 = *(_OWORD *)(a1 + 47);
    v34 = v22;
    v23 = *((_BYTE *)a1 + 288);
    v24 = a1[37];
    v25 = a1[38];
    v26 = a1[39];
    outlined init with take of Transform?((uint64_t)(a1 + 35), (uint64_t)v42, &demangling cache variable for type metadata for Entity?);
    v38 = v20;
    v32 = v23;
    v30 = v25;
    v31 = v24;
    v28 = v4;
    v29 = v26;
    outlined init with take of Transform?((uint64_t)v42, (uint64_t)&v27, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v19(v39, &v38, &v33, &v32, &v31, &v30, &v29, &v28, &v27);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v40, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)v39, (uint64_t)v40, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)v39, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
  result = swift_dynamicCast();
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  if ((_DWORD)result)
  {
    v10 = v33;
    v11 = v34;
    v12 = v35;
    v13 = v36;
  }
  v14 = result ^ 1;
LABEL_17:
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 64) = v14;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[5];
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v4 = a1[45];
  swift_beginAccess();
  v5 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)v35);
  }
  else
  {
    v36 = 0;
    memset(v35, 0, sizeof(v35));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v35, (uint64_t)&v28, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v8 = *((_QWORD *)&v29 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v28, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v8)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v11 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for BillboardAction),
          (v13 & 1) == 0))
    {
      swift_endAccess();
      result = outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_QWORD *)(a2 + 77) = 0;
      v10 = 1;
      goto LABEL_17;
    }
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v11 + 56) + 16 * v12);
    swift_endAccess();
    v15 = *a1;
    v16 = *(_OWORD *)(a1 + 41);
    v30 = *(_OWORD *)(a1 + 39);
    v31 = v16;
    v32 = *(_OWORD *)(a1 + 43);
    v17 = *(_OWORD *)(a1 + 37);
    v28 = *(_OWORD *)(a1 + 35);
    v29 = v17;
    v18 = *((_BYTE *)a1 + 192);
    v19 = a1[25];
    v20 = a1[26];
    v21 = a1[27];
    outlined init with take of Transform?((uint64_t)(a1 + 23), (uint64_t)v37, &demangling cache variable for type metadata for Entity?);
    v33 = v15;
    v27 = v18;
    v25 = v20;
    v26 = v19;
    v23 = v4;
    v24 = v21;
    outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v22, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v14(v34, &v33, &v28, &v27, &v26, &v25, &v24, &v23, &v22);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v28, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *(_QWORD *)(a2 + 77) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  v10 = result ^ 1;
LABEL_17:
  *(_BYTE *)(a2 + 85) = v10;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v29[5];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v4 = a1[31];
  swift_beginAccess();
  v5 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)v35);
  }
  else
  {
    v36 = 0;
    memset(v35, 0, sizeof(v35));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v35, (uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v8 = *((_QWORD *)&v31 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v30, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v8)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v11 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for OrbitEntityAction),
          (v13 & 1) == 0))
    {
      swift_endAccess();
      outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      goto LABEL_16;
    }
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v11 + 56) + 16 * v12);
    swift_endAccess();
    v15 = *a1;
    v16 = *(_OWORD *)(a1 + 23);
    v17 = *(_OWORD *)(a1 + 27);
    v32 = *(_OWORD *)(a1 + 25);
    v33 = v17;
    v34 = *(_OWORD *)(a1 + 29);
    v30 = *(_OWORD *)(a1 + 21);
    v31 = v16;
    v18 = *((_BYTE *)a1 + 80);
    v19 = a1[11];
    v20 = a1[12];
    v21 = a1[13];
    outlined init with take of Transform?((uint64_t)(a1 + 9), (uint64_t)v37, &demangling cache variable for type metadata for Entity?);
    v28 = v15;
    v27 = v18;
    v25 = v20;
    v26 = v19;
    v23 = v4;
    v24 = v21;
    outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v22, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v14(v29, &v28, &v30, &v27, &v26, &v25, &v24, &v23, &v22);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)v29, (uint64_t)v35, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v35, (uint64_t)v29, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (swift_dynamicCast())
    return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, v9);
LABEL_16:
  _s17RealityFoundation24OrbitEntityActionHandlerVSgWOi0_((uint64_t)&v30);
  return outlined init with take of Transform?((uint64_t)&v30, a2, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
}

uint64_t specialized static ActionHandlerProtocol.actionHandler(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int8x16_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void (*v23)(int8x16_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int8x16_t v43[3];
  _OWORD v44[2];
  uint64_t v45;
  _BYTE v46[8];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = a1[45];
  swift_beginAccess();
  v9 = static AnimationResource.actionHandlers;
  if (*(_QWORD *)(static AnimationResource.actionHandlers + 16)
    && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v11 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)v44);
  }
  else
  {
    v45 = 0;
    memset(v44, 0, sizeof(v44));
  }
  swift_endAccess();
  outlined init with copy of (Int, URL)((uint64_t)v44, (uint64_t)&v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  v12 = *((_QWORD *)&v38 + 1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  if (!v12)
  {
    if (one-time initialization token for actionHandlerCreators != -1)
      swift_once();
    swift_beginAccess();
    v19 = static AnimationResource.actionHandlerCreators;
    if (!*(_QWORD *)(static AnimationResource.actionHandlerCreators + 16)
      || (v20 = __swift_instantiateConcreteTypeFromMangledName(a2),
          v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20),
          (v22 & 1) == 0))
    {
      swift_endAccess();
      result = outlined destroy of BodyTrackingComponent?((uint64_t)v44, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      v16 = 0uLL;
      v18 = 1;
      v17 = 0uLL;
      goto LABEL_18;
    }
    v23 = *(void (**)(int8x16_t *__return_ptr, uint64_t *, __int128 *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)(v19 + 56) + 16 * v21);
    swift_endAccess();
    v24 = *a1;
    v25 = *(_OWORD *)(a1 + 41);
    v39 = *(_OWORD *)(a1 + 39);
    v40 = v25;
    v41 = *(_OWORD *)(a1 + 43);
    v26 = *(_OWORD *)(a1 + 37);
    v37 = *(_OWORD *)(a1 + 35);
    v38 = v26;
    v27 = *((_BYTE *)a1 + 192);
    v28 = a1[25];
    v29 = a1[26];
    v30 = a1[27];
    outlined init with take of Transform?((uint64_t)(a1 + 23), (uint64_t)v46, &demangling cache variable for type metadata for Entity?);
    v42 = v24;
    v36 = v27;
    v34 = v29;
    v35 = v28;
    v32 = v8;
    v33 = v30;
    outlined init with take of Transform?((uint64_t)v46, (uint64_t)&v31, &demangling cache variable for type metadata for Entity?);
    swift_retain();
    v23(v43, &v42, &v37, &v36, &v35, &v34, &v33, &v32, &v31);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v44, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    outlined init with take of Transform?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)&v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = swift_dynamicCast();
  if ((_DWORD)result)
    v14 = -1;
  else
    v14 = 0;
  v15 = (int8x16_t)vdupq_n_s64(v14);
  v16 = vandq_s8(v43[0], v15);
  v17 = vandq_s8(v43[1], v15);
  v18 = result ^ 1;
LABEL_18:
  *a4 = v16;
  a4[1] = v17;
  a4[2].i8[0] = v18;
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t v13;
  __int128 v14[12];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 176);
  v14[10] = *(_OWORD *)(a1 + 160);
  v14[11] = v2;
  v15 = *(_QWORD *)(a1 + 192);
  v3 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 192);
    v12 = result;
    v13 = v9;
    EmphasizeActionHandler.actionStarted(event:)(v14);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v11[3] = &type metadata for EmphasizeActionHandler;
    v11[4] = &protocol witness table for EmphasizeActionHandler;
    v11[0] = v12;
    v11[1] = v13;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[5];
  __int128 v17;
  char v18;
  _OWORD v19[16];

  v2 = *(_OWORD *)(a1 + 208);
  v19[12] = *(_OWORD *)(a1 + 192);
  v19[13] = v2;
  v3 = *(_OWORD *)(a1 + 240);
  v19[14] = *(_OWORD *)(a1 + 224);
  v19[15] = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v19[8] = *(_OWORD *)(a1 + 128);
  v19[9] = v4;
  v5 = *(_OWORD *)(a1 + 176);
  v19[10] = *(_OWORD *)(a1 + 160);
  v19[11] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v19[4] = *(_OWORD *)(a1 + 64);
  v19[5] = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v19[6] = *(_OWORD *)(a1 + 96);
  v19[7] = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v19[2] = *(_OWORD *)(a1 + 32);
  v19[3] = v9;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if ((v12 & 0x100) == 0)
  {
    v13 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)&v17 = result;
    *((_QWORD *)&v17 + 1) = v11;
    v18 = v12 & 1;
    SpinActionHandler.actionStarted(event:)(v19);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v16[3] = &type metadata for SpinActionHandler;
    v16[4] = &protocol witness table for SpinActionHandler;
    v14 = swift_allocObject();
    v16[0] = v14;
    v15 = v18;
    *(_OWORD *)(v14 + 16) = v17;
    *(_BYTE *)(v14 + 32) = v15;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v16, v13);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[12];
  uint64_t v9;

  v1 = *(_OWORD *)(a1 + 176);
  v8[10] = *(_OWORD *)(a1 + 160);
  v8[11] = v1;
  v9 = *(_QWORD *)(a1 + 192);
  v2 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v8[8] = *(_OWORD *)(a1 + 128);
  v8[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v8);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[15];
  uint64_t v10;

  v1 = *(_OWORD *)(a1 + 208);
  v9[12] = *(_OWORD *)(a1 + 192);
  v9[13] = v1;
  v9[14] = *(_OWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v9[8] = *(_OWORD *)(a1 + 128);
  v9[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v9[10] = *(_OWORD *)(a1 + 160);
  v9[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v7;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v9);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, (void (*)(_OWORD *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, (void (*)(_OWORD *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, (void (*)(_OWORD *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  uint64_t result;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1);
  if (result == 1)
    return result;
  v4 = *((_OWORD *)a1 + 12);
  v5 = *((_OWORD *)a1 + 14);
  v30 = *((_OWORD *)a1 + 13);
  v31 = v5;
  v6 = *((_OWORD *)a1 + 8);
  v7 = *((_OWORD *)a1 + 10);
  v8 = *((_OWORD *)a1 + 11);
  v26 = *((_OWORD *)a1 + 9);
  v27 = v7;
  v28 = v8;
  v29 = v4;
  v9 = *((_OWORD *)a1 + 5);
  v21 = *((_OWORD *)a1 + 4);
  v22 = v9;
  v10 = *((_OWORD *)a1 + 7);
  v23 = *((_OWORD *)a1 + 6);
  v33 = result;
  v34 = v3 & 1;
  v32 = a1[30];
  v24 = v10;
  v25 = v6;
  v11 = *((_OWORD *)a1 + 1);
  v17 = *(_OWORD *)a1;
  v18 = v11;
  v12 = *((_OWORD *)a1 + 3);
  v19 = *((_OWORD *)a1 + 2);
  v20 = v12;
  PlayAudioActionHandler.prepareAudio(event:)((uint64_t)&v17);
  v13 = v33;
  if (!v33)
  {
    if ((a1[7] & 1) == 0)
      goto LABEL_7;
LABEL_6:
    v34 = 1;
    goto LABEL_7;
  }
  v14 = *(_QWORD *)(v33 + 32);
  v15 = *(_QWORD *)(v33 + 48);
  swift_retain();
  MEMORY[0x22076B990](v14, v15);
  RENetworkMarkComponentDirty();
  swift_release();
  if ((a1[7] & 1) != 0)
    goto LABEL_6;
  swift_retain();
  AudioPlaybackController.play()();
  swift_release();
LABEL_7:
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v16 = a1[30];
  *((_QWORD *)&v18 + 1) = &type metadata for PlayAudioActionHandler;
  *(_QWORD *)&v19 = &protocol witness table for PlayAudioActionHandler;
  *(_QWORD *)&v17 = v13;
  BYTE8(v17) = v34;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v17, v16);
  swift_endAccess();
  return swift_release();
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<JointTransforms>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1);
  if (result != 1)
  {
    v3 = *((_OWORD *)a1 + 12);
    v4 = *((_OWORD *)a1 + 14);
    v5 = *((_OWORD *)a1 + 15);
    v27 = *((_OWORD *)a1 + 13);
    v28 = v4;
    v29 = v5;
    v6 = *((_OWORD *)a1 + 8);
    v7 = *((_OWORD *)a1 + 10);
    v8 = *((_OWORD *)a1 + 11);
    v23 = *((_OWORD *)a1 + 9);
    v24 = v7;
    v25 = v8;
    v26 = v3;
    v9 = *((_OWORD *)a1 + 5);
    v18 = *((_OWORD *)a1 + 4);
    v19 = v9;
    v10 = *((_OWORD *)a1 + 7);
    v20 = *((_OWORD *)a1 + 6);
    v30 = result;
    v21 = v10;
    v22 = v6;
    v11 = *((_OWORD *)a1 + 1);
    v14 = *(_OWORD *)a1;
    v15 = v11;
    v12 = *((_OWORD *)a1 + 3);
    v16 = *((_OWORD *)a1 + 2);
    v17 = v12;
    PlayAnimationActionHandler.triggerAnimation(_:)((uint64_t)&v14);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v13 = a1[31];
    *((_QWORD *)&v15 + 1) = &type metadata for PlayAnimationActionHandler;
    *(_QWORD *)&v16 = &protocol witness table for PlayAnimationActionHandler;
    *(_QWORD *)&v14 = v30;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v14, v13);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *__src)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char v25;
  _BYTE __dst[368];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__src, (uint64_t)&v11);
  if ((v18 & 1) == 0)
  {
    v3 = __src[45];
    v19 = v11;
    v20 = v12;
    v21 = v13;
    v22 = v14;
    v23 = v15;
    v24 = v16;
    v25 = v17 & 1;
    BillboardActionHandler.actionStarted(event:)(__dst);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    *((_QWORD *)&v12 + 1) = &type metadata for BillboardActionHandler;
    *(_QWORD *)&v13 = &protocol witness table for BillboardActionHandler;
    v4 = swift_allocObject();
    v5 = v20;
    v6 = v21;
    *(_OWORD *)(v4 + 16) = v19;
    *(_OWORD *)(v4 + 32) = v5;
    v7 = v22;
    v8 = v23;
    *(_OWORD *)(v4 + 48) = v6;
    *(_OWORD *)(v4 + 64) = v7;
    *(_QWORD *)&v11 = v4;
    v9 = v24;
    v10 = v25;
    *(_OWORD *)(v4 + 80) = v8;
    *(_DWORD *)(v4 + 96) = v9;
    *(_BYTE *)(v4 + 100) = v10;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v11, v3);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized static EntityAction.__subscribe(to:_:_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EmphasizeAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB1ED00);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_87;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for EmphasizeAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAudioAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB1F224);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_101;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for PlayAudioAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB1F750);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_118;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB1FC7CLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_132;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB201A8);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_146_0;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB206D4);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_160;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB20C00);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_177;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB2112CLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_192;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB21658);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_207;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB21B84);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_221;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB220B0);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_235;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB225DCLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_249;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB22B08);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_263;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB23034);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_277;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB23560);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_299;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB23A8CLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_323;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB23FB8);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_345;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB244E4);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_367;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB24A10);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_383;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB24F3CLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_397;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t EventBus;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v11 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v13 & 1) != 0))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v16 & 1) != 0)
      {
        v35 = a3;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v19 = *v17;
        v18 = v17[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v21 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v34 = v8;
          v22 = *(_QWORD *)(v21 + 16);
          swift_release();
          v23 = v22;
          v8 = v34;
          EventBus = MEMORY[0x22076FDA0](v23);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v19, v18);
        a3 = v35;
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v24 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v25))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB25468);
      }
      REEngineGetEventBus();
LABEL_29:
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v9;
      v26[3] = a1;
      v26[4] = a3;
      v26[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_411;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v28 = REEventBusSubscribeWithMatch();
      v30 = v29;
      _Block_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v14;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, a1, isUniquelyReferenced_nonNull_native);
      v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v36 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v8, v33);
      static AnimationResource.actionSubscriptions = v36;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for BillboardAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB2598CLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_433;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for BillboardAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SpinAction), (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB25EB0);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_455;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for SpinAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for OrbitEntityAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB263D4);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_479;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for OrbitEntityAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for ImpulseAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB268F8);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_495;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for ImpulseAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for SetEntityEnabledAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB26E1CLL);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_509;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for SetEntityEnabledAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for NotificationAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB27340);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_523;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for NotificationAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EventBus;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  if (!a2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
  }
  v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  switch(a1)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      return swift_release();
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_14;
    default:
      if (a1 != 128)
        return swift_release();
      specialized getEventID<A>(_:)();
LABEL_14:
      if (one-time initialization token for actionSubscriptions != -1)
        swift_once();
      swift_beginAccess();
      v10 = static AnimationResource.actionSubscriptions;
      if (*(_QWORD *)(static AnimationResource.actionSubscriptions + 16)
        && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for PlayAnimationAction),
            (v12 & 1) != 0))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
        swift_endAccess();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      else
      {
        swift_endAccess();
        v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_26;
      }
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        if (a2)
        {
          EventBus = REEngineGetEventBus();
        }
        else
        {
          type metadata accessor for __ServiceLocator();
          v20 = static __ServiceLocator.shared.getter();
          swift_beginAccess();
          v33 = a3;
          v21 = *(_QWORD *)(v20 + 16);
          swift_release();
          v22 = v21;
          a3 = v33;
          EventBus = MEMORY[0x22076FDA0](v22);
          if (!EventBus)
            goto LABEL_31;
        }
        MEMORY[0x22076D1F0](EventBus, v18, v17);
      }
LABEL_26:
      if (!a2)
      {
        type metadata accessor for __ServiceLocator();
        v23 = static __ServiceLocator.shared.getter();
        swift_beginAccess();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        if (MEMORY[0x22076FDA0](v24))
          goto LABEL_29;
        __break(1u);
LABEL_31:
        __break(1u);
        JUMPOUT(0x21BB27864);
      }
      REEngineGetEventBus();
LABEL_29:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v8;
      v25[3] = a1;
      v25[4] = a3;
      v25[5] = a4;
      aBlock[4] = partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      aBlock[3] = &block_descriptor_537;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      RETimelineEventFilter();
      v27 = REEventBusSubscribeWithMatch();
      v29 = v28;
      _Block_release(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v29, a1, isUniquelyReferenced_nonNull_native);
      v31 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v34 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)&type metadata for PlayAnimationAction, v32);
      static AnimationResource.actionSubscriptions = v34;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[7];
  _OWORD v14[12];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 176);
  v14[10] = *(_OWORD *)(a1 + 160);
  v14[11] = v2;
  v15 = *(_QWORD *)(a1 + 192);
  v3 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (v9)
  {
    v10 = result;
    v11 = v9;
    v12 = *(_QWORD *)(a1 + 192);
    v13[5] = result;
    v13[6] = v9;
    EmphasizeActionHandler.actionUpdated(event:)((uint64_t)v14);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v13[3] = &type metadata for EmphasizeActionHandler;
    v13[4] = &protocol witness table for EmphasizeActionHandler;
    v13[0] = v10;
    v13[1] = v11;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v13, v12);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;
  char IsPaused;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  ValueMetadata *v12;
  _UNKNOWN **v13;
  _BYTE v14[16];
  uint64_t v15;
  char v16;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (result == 1)
    return result;
  v4 = result;
  v5 = ((*(_BYTE *)(a1 + 56) & 1) == 0) & v3;
  if ((*(_BYTE *)(a1 + 56) & 1) != 0 && (v3 & 1) != 0)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        IsPaused = REAnimationComponentIsPaused();
        swift_release();
        if ((IsPaused & 1) != 0)
        {
          v5 = 1;
          goto LABEL_13;
        }
      }
      else
      {
        swift_release();
      }
    }
    if (v4)
    {
      outlined init with take of Transform?(a1 + 128, (uint64_t)v14, &demangling cache variable for type metadata for Double?);
      outlined init with take of Transform?((uint64_t)v14, (uint64_t)&v15, &demangling cache variable for type metadata for Double?);
      if ((v16 & 1) == 0)
      {
        swift_retain();
        static Duration.seconds(_:)();
        v7 = (double)Duration.components.getter();
        Duration.components.getter();
        MEMORY[0x22076B948](*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 48), (double)v8 * 1.0e-18 + v7);
        RENetworkMarkComponentDirty();
        AudioPlaybackController.play()();
        outlined consume of __ImageBasedLightComponent?(v4);
      }
    }
    v5 = 0;
  }
LABEL_13:
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = *(_QWORD *)(a1 + 240);
  v12 = &type metadata for PlayAudioActionHandler;
  v13 = &protocol witness table for PlayAudioActionHandler;
  v10 = v4;
  v11 = v5;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v9);
  swift_endAccess();
  return outlined consume of __ImageBasedLightComponent?(v4);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[12];
  uint64_t v9;

  v1 = *(_OWORD *)(a1 + 176);
  v8[10] = *(_OWORD *)(a1 + 160);
  v8[11] = v1;
  v9 = *(_QWORD *)(a1 + 192);
  v2 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v8[8] = *(_OWORD *)(a1 + 128);
  v8[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v8);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[15];
  uint64_t v10;

  v1 = *(_OWORD *)(a1 + 208);
  v9[12] = *(_OWORD *)(a1 + 192);
  v9[13] = v1;
  v9[14] = *(_OWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v9[8] = *(_OWORD *)(a1 + 128);
  v9[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v9[10] = *(_OWORD *)(a1 + 160);
  v9[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v7;
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v9);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &v4);
  if ((_QWORD)v4 != 1)
  {
    v7 = v4;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1, (void (*)(_QWORD *__return_ptr, uint64_t))specialized ActionEvent.animationState.getter, (uint64_t)&type metadata for BlendShapeWeights, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, _QWORD, double))specialized FromToByActionHandler.evaluateResult(_:));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v3 = a1[37];
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>);
    v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v4 = v7;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v4, v3);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &v4);
  if ((_QWORD)v4 != 1)
  {
    v7 = v4;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1, (void (*)(_QWORD *__return_ptr, uint64_t))specialized ActionEvent.animationState.getter, (uint64_t)&type metadata for JointTransforms, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t, _QWORD, double))specialized FromToByActionHandler.evaluateResult(_:));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v3 = a1[37];
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>);
    v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v4 = v7;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v4, v3);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[80];

  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, (uint64_t)v22);
  v2 = v22[0];
  v3 = v22[1];
  v4 = v22[2];
  v5 = v22[3];
  v6 = v22[4];
  v7 = v22[5];
  v8 = v23;
  v9 = v24;
  result = outlined init with take of Transform?((uint64_t)v22, (uint64_t)v25, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if ((v25[64] & 1) == 0)
  {
    *(_QWORD *)&v17 = v2;
    *((_QWORD *)&v17 + 1) = v3;
    *(_QWORD *)&v18 = v4;
    *((_QWORD *)&v18 + 1) = v5;
    *(_QWORD *)&v19 = v6;
    *((_QWORD *)&v19 + 1) = v7;
    v20 = v8 & 1;
    v21 = v9;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v11 = a1[57];
    v16[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    v16[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Transform> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v12 = swift_allocObject();
    v16[0] = v12;
    v13 = v20;
    v14 = v21;
    v15 = v18;
    *(_OWORD *)(v12 + 16) = v17;
    *(_OWORD *)(v12 + 32) = v15;
    *(_OWORD *)(v12 + 48) = v19;
    *(_BYTE *)(v12 + 64) = v13;
    *(_QWORD *)(v12 + 72) = v14;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v16, v11);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[5];
  int8x16_t v11;
  char v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[48];

  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v14);
  v2 = v14;
  v3 = v15;
  v4 = v16;
  result = outlined init with take of Transform?((uint64_t)&v14, (uint64_t)v17, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v17[32] & 1) == 0)
  {
    v11 = v2;
    v12 = v3 & 1;
    v13 = v4;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v6 = a1[45];
    v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v10[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v7 = swift_allocObject();
    v10[0] = v7;
    v8 = v12;
    v9 = v13;
    *(int8x16_t *)(v7 + 16) = v11;
    *(_BYTE *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v6);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[5];
  int8x16_t v11;
  char v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[48];

  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v14);
  v2 = v14;
  v3 = v15;
  v4 = v16;
  result = outlined init with take of Transform?((uint64_t)&v14, (uint64_t)v17, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v17[32] & 1) == 0)
  {
    v11 = v2;
    v12 = v3 & 1;
    v13 = v4;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1, (void (*)(_QWORD *__return_ptr))specialized ActionEvent.animationState.getter, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, specialized FromToByActionHandler.evaluateResult(_:));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v6 = a1[45];
    v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v10[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v7 = swift_allocObject();
    v10[0] = v7;
    v8 = v12;
    v9 = v13;
    *(int8x16_t *)(v7 + 16) = v11;
    *(_BYTE *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v6);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[5];
  int8x16_t v11;
  char v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[48];

  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v14);
  v2 = v14;
  v3 = v15;
  v4 = v16;
  result = outlined init with take of Transform?((uint64_t)&v14, (uint64_t)v17, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v17[32] & 1) == 0)
  {
    v11 = v2;
    v12 = v3 & 1;
    v13 = v4;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1, (void (*)(_QWORD *__return_ptr))specialized ActionEvent.animationState.getter, &demangling cache variable for type metadata for SIMD3<Float>, specialized FromToByActionHandler.evaluateResult(_:));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v6 = a1[45];
    v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v10[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v7 = swift_allocObject();
    v10[0] = v7;
    v8 = v12;
    v9 = v13;
    *(int8x16_t *)(v7 + 16) = v11;
    *(_BYTE *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v6);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1);
  if ((v4 & 1) == 0)
  {
    v11 = result;
    v12 = BYTE4(result) & 1;
    v13 = v3;
    specialized FromToByActionHandler.actionUpdated(event:)((uint64_t)a1);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
    v10 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Float> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Float>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = v11;
    v7 = v12;
    v8 = v13;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, void (*a4)(uint64_t *), unint64_t *a5)
{
  uint64_t result;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, a2, a3);
  if ((v12 & 1) == 0)
  {
    v19 = result;
    v20 = v10 & 1;
    v21 = v11;
    a4(a1);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v13 = a1[39];
    v17 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v18 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v14 = v19;
    v15 = v20;
    v16 = v21;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v14, v13);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(float32x4_t *a1)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t result;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[7];
  char v19;
  float32x4_t v20[16];

  v2 = a1[13];
  v20[12] = a1[12];
  v20[13] = v2;
  v3 = a1[15];
  v20[14] = a1[14];
  v20[15] = v3;
  v4 = a1[9];
  v20[8] = a1[8];
  v20[9] = v4;
  v5 = a1[11];
  v20[10] = a1[10];
  v20[11] = v5;
  v6 = a1[5];
  v20[4] = a1[4];
  v20[5] = v6;
  v7 = a1[7];
  v20[6] = a1[6];
  v20[7] = v7;
  v8 = a1[1];
  v20[0] = *a1;
  v20[1] = v8;
  v9 = a1[3];
  v20[2] = a1[2];
  v20[3] = v9;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if ((v12 & 0x100) == 0)
  {
    v13 = result;
    v14 = v11;
    v15 = a1[15].i64[1];
    v18[5] = result;
    v18[6] = v11;
    v16 = v12 & 1;
    v19 = v12 & 1;
    SpinActionHandler.actionUpdated(event:)(v20);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v18[3] = &type metadata for SpinActionHandler;
    v18[4] = &protocol witness table for SpinActionHandler;
    v17 = swift_allocObject();
    v18[0] = v17;
    *(_QWORD *)(v17 + 16) = v13;
    *(_QWORD *)(v17 + 24) = v14;
    *(_BYTE *)(v17 + 32) = v16;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v18, v15);
    return swift_endAccess();
  }
  return result;
}

{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v10);
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, void (*a2)(_OWORD *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[5];
  _OWORD v27[12];
  _OWORD v28[12];
  _BYTE v29[192];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[16];
  _BYTE v43[192];
  uint64_t v44[24];

  v4 = *(_OWORD *)(a1 + 192);
  v42[13] = *(_OWORD *)(a1 + 208);
  v5 = *(_OWORD *)(a1 + 240);
  v42[14] = *(_OWORD *)(a1 + 224);
  v42[15] = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v42[8] = *(_OWORD *)(a1 + 128);
  v42[9] = v6;
  v7 = *(_OWORD *)(a1 + 176);
  v42[10] = *(_OWORD *)(a1 + 160);
  v42[11] = v7;
  v42[12] = v4;
  v8 = *(_OWORD *)(a1 + 80);
  v42[4] = *(_OWORD *)(a1 + 64);
  v42[5] = v8;
  v9 = *(_OWORD *)(a1 + 112);
  v42[6] = *(_OWORD *)(a1 + 96);
  v42[7] = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v10;
  v11 = *(_OWORD *)(a1 + 48);
  v42[2] = *(_OWORD *)(a1 + 32);
  v42[3] = v11;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1, (uint64_t)v29);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v43, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  result = _s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(v44);
  if ((_DWORD)result != 1)
  {
    v13 = *(_QWORD *)(a1 + 248);
    outlined init with take of Transform?((uint64_t)v43, (uint64_t)v27, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
    v38 = v27[8];
    v39 = v27[9];
    v40 = v27[10];
    v41 = v27[11];
    v34 = v27[4];
    v35 = v27[5];
    v36 = v27[6];
    v37 = v27[7];
    v30 = v27[0];
    v31 = v27[1];
    v32 = v27[2];
    v33 = v27[3];
    a2(v42);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v26[3] = &type metadata for OrbitEntityActionHandler;
    v26[4] = &protocol witness table for OrbitEntityActionHandler;
    v14 = (_OWORD *)swift_allocObject();
    v15 = v39;
    v28[8] = v38;
    v28[9] = v39;
    v16 = v40;
    v17 = v41;
    v28[10] = v40;
    v28[11] = v41;
    v18 = v34;
    v19 = v35;
    v28[4] = v34;
    v28[5] = v35;
    v20 = v36;
    v21 = v37;
    v28[6] = v36;
    v28[7] = v37;
    v22 = v30;
    v23 = v31;
    v28[0] = v30;
    v28[1] = v31;
    v24 = v32;
    v25 = v33;
    v28[2] = v32;
    v28[3] = v33;
    v14[9] = v38;
    v14[10] = v15;
    v14[11] = v16;
    v14[12] = v17;
    v14[5] = v18;
    v14[6] = v19;
    v14[7] = v20;
    v14[8] = v21;
    v14[1] = v22;
    v14[2] = v23;
    v26[0] = v14;
    v14[3] = v24;
    v14[4] = v25;
    swift_beginAccess();
    outlined retain of OrbitEntityActionHandler((uint64_t)v28);
    specialized Dictionary.subscript.setter((uint64_t)v26, v13);
    swift_endAccess();
    return outlined release of TimelineDefinition?((uint64_t)v28);
  }
  return result;
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (result != 1)
  {
    v3 = result;
    if (result && (*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      MEMORY[0x22076B990](*(_QWORD *)(result + 32), *(_QWORD *)(result + 48));
      RENetworkMarkComponentDirty();
    }
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v4 = *(_QWORD *)(a1 + 240);
    v7 = &type metadata for PlayAudioActionHandler;
    v8 = &protocol witness table for PlayAudioActionHandler;
    v5 = v3;
    v6 = 0;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v5, v4);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (result == 1)
    return result;
  v3 = result;
  if ((*(_BYTE *)(a1 + 65) & 1) != 0)
  {
    if (!result)
    {
      v4 = 0;
      goto LABEL_9;
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REAnimationComponentStopAnimation();
        RENetworkMarkComponentDirty();
      }
      swift_release();
    }
  }
  v4 = v3;
LABEL_9:
  outlined consume of __ImageBasedLightComponent?(v4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v5 = *(_QWORD *)(a1 + 248);
  v6[3] = &type metadata for PlayAnimationActionHandler;
  v6[4] = &protocol witness table for PlayAnimationActionHandler;
  v6[0] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v6, v5);
  return swift_endAccess();
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[15];
  uint64_t v10;

  v1 = *(_OWORD *)(a1 + 208);
  v9[12] = *(_OWORD *)(a1 + 192);
  v9[13] = v1;
  v9[14] = *(_OWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v9[8] = *(_OWORD *)(a1 + 128);
  v9[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v9[10] = *(_OWORD *)(a1 + 160);
  v9[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v7;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v9);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<JointTransforms>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *__src, void (*a2)(_BYTE *))
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ValueMetadata *v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  _BYTE __dst[384];

  memcpy(__dst, __src, 0x170uLL);
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__src, (uint64_t)&v19);
  if ((v31 & 1) == 0)
  {
    v5 = v20;
    v6 = v21;
    v7 = v22;
    v8 = v23;
    v9 = v24;
    v10 = v25;
    v11 = v29 | ((unint64_t)v30 << 32);
    v17 = v19;
    v18 = __src[45];
    v14 = v29;
    v15 = v28;
    v32 = v19;
    v33 = v20;
    v34 = v21;
    v35 = v22;
    v36 = v23;
    v37 = v24;
    v38 = v25;
    v39 = v26;
    v12 = v26;
    v16 = v27;
    v40 = v27;
    v41 = v28;
    v42 = v29;
    v43 = v30 & 1;
    a2(__dst);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v22 = &type metadata for BillboardActionHandler;
    v23 = &protocol witness table for BillboardActionHandler;
    v13 = swift_allocObject();
    v19 = v13;
    *(_QWORD *)(v13 + 16) = v17;
    *(_QWORD *)(v13 + 24) = v5;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v7;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v9;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    *(_QWORD *)(v13 + 80) = v16;
    *(_QWORD *)(v13 + 88) = v15;
    *(_DWORD *)(v13 + 96) = v14;
    *(_BYTE *)(v13 + 100) = BYTE4(v11) & 1;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v19, v18);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<JointTransforms>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

uint64_t *specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1, Swift::UInt a2)
{
  uint64_t *result;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[5];
  _OWORD v14[12];
  _BYTE v15[192];
  uint64_t v16[24];
  uint64_t v17[24];

  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, (uint64_t)v15);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  outlined init with take of Transform?((uint64_t)v16, (uint64_t)v17, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  result = (uint64_t *)_s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(v17);
  if ((_DWORD)result != 1)
  {
    outlined init with take of Transform?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
    specialized static EntityAction.__unsubscribe(from:_:)(a2, a1[13]);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[31];
    v13[3] = &type metadata for OrbitEntityActionHandler;
    v13[4] = &protocol witness table for OrbitEntityActionHandler;
    v6 = (_OWORD *)swift_allocObject();
    v13[0] = v6;
    v7 = v14[9];
    v6[9] = v14[8];
    v6[10] = v7;
    v8 = v14[11];
    v6[11] = v14[10];
    v6[12] = v8;
    v9 = v14[5];
    v6[5] = v14[4];
    v6[6] = v9;
    v10 = v14[7];
    v6[7] = v14[6];
    v6[8] = v10;
    v11 = v14[1];
    v6[1] = v14[0];
    v6[2] = v11;
    v12 = v14[3];
    v6[3] = v14[2];
    v6[4] = v12;
    swift_beginAccess();
    outlined retain of OrbitEntityActionHandler((uint64_t)v14);
    specialized Dictionary.subscript.setter((uint64_t)v13, v5);
    swift_endAccess();
    return outlined release of OrbitEntityActionHandler?(v16);
  }
  return result;
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  ValueMetadata *v9;
  _UNKNOWN **v10;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (result != 1)
  {
    v4 = result;
    v5 = v3 & 1;
    if (result && (*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      MEMORY[0x22076B8B8](*(_QWORD *)(result + 32), *(_QWORD *)(result + 48));
      RENetworkMarkComponentDirty();
    }
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v6 = *(_QWORD *)(a1 + 240);
    v9 = &type metadata for PlayAudioActionHandler;
    v10 = &protocol witness table for PlayAudioActionHandler;
    v7 = v4;
    v8 = v5;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v7, v6);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v4);
  }
  return result;
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[15];
  uint64_t v10;

  v1 = *(_OWORD *)(a1 + 208);
  v9[12] = *(_OWORD *)(a1 + 192);
  v9[13] = v1;
  v9[14] = *(_OWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v9[8] = *(_OWORD *)(a1 + 128);
  v9[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v9[10] = *(_OWORD *)(a1 + 160);
  v9[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v7;
  return specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v9);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<JointTransforms>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;
  _BYTE v13[16];
  uint64_t v14;
  char v15;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)a1);
  if (result != 1)
  {
    v4 = result;
    v5 = v3 & 1;
    if (result)
    {
      if ((*(_BYTE *)(a1 + 56) & 1) != 0)
      {
        outlined init with take of Transform?(a1 + 128, (uint64_t)v13, &demangling cache variable for type metadata for Double?);
        outlined init with take of Transform?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for Double?);
        if ((v15 & 1) == 0)
        {
          static Duration.seconds(_:)();
          v6 = (double)Duration.components.getter();
          Duration.components.getter();
          MEMORY[0x22076B948](*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 48), (double)v7 * 1.0e-18 + v6);
          RENetworkMarkComponentDirty();
          AudioPlaybackController.play()();
        }
      }
    }
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v8 = *(_QWORD *)(a1 + 240);
    v11 = &type metadata for PlayAudioActionHandler;
    v12 = &protocol witness table for PlayAudioActionHandler;
    v9 = v4;
    v10 = v5;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v9, v8);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v4);
  }
  return result;
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[15];
  uint64_t v10;

  v1 = *(_OWORD *)(a1 + 208);
  v9[12] = *(_OWORD *)(a1 + 192);
  v9[13] = v1;
  v9[14] = *(_OWORD *)(a1 + 224);
  v10 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v9[8] = *(_OWORD *)(a1 + 128);
  v9[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v9[10] = *(_OWORD *)(a1 + 160);
  v9[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v7;
  return specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v9);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &v6);
  v3 = v6;
  if ((_QWORD)v6 != 1)
  {
    v4 = *((_QWORD *)&v6 + 1);
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, a1[19], &demangling cache variable for type metadata for FromToByAction<JointTransforms>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = a1[37];
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>);
    v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v6 = v3;
    *((_QWORD *)&v6 + 1) = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v6, v5);
    swift_endAccess();
    return outlined consume of JointTransforms??(v3);
  }
  return result;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1, Swift::UInt a2)
{
  uint64_t result;
  uint64_t v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  ValueMetadata *v20;
  _UNKNOWN **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;

  result = specialized static ActionHandlerProtocol.actionHandler(_:)(a1, (uint64_t)v19);
  if ((v29 & 1) == 0)
  {
    v5 = v19[2];
    v17 = v19[1];
    v18 = v19[0];
    v6 = v20;
    v7 = v21;
    v8 = v22;
    v9 = v23;
    v10 = v24;
    v15 = v26;
    v16 = v25;
    v11 = v27 | ((unint64_t)v28 << 32);
    v12 = v27;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, a1[27]);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v13 = a1[45];
    v20 = &type metadata for BillboardActionHandler;
    v21 = &protocol witness table for BillboardActionHandler;
    v14 = swift_allocObject();
    v19[0] = v14;
    *(_QWORD *)(v14 + 16) = v18;
    *(_QWORD *)(v14 + 24) = v17;
    *(_QWORD *)(v14 + 32) = v5;
    *(_QWORD *)(v14 + 40) = v6;
    *(_QWORD *)(v14 + 48) = v7;
    *(_QWORD *)(v14 + 56) = v8;
    *(_QWORD *)(v14 + 64) = v9;
    *(_QWORD *)(v14 + 72) = v10;
    *(_QWORD *)(v14 + 80) = v16;
    *(_QWORD *)(v14 + 88) = v15;
    *(_DWORD *)(v14 + 96) = v12;
    *(_BYTE *)(v14 + 100) = BYTE4(v11) & 1;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v19, v13);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, a2, a3, &v12);
  v8 = v12;
  if ((_QWORD)v12 == 1)
  {
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
  }
  else
  {
    v9 = *((_QWORD *)&v12 + 1);
    *((_QWORD *)&v14 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    v15 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v13 = v8;
    *((_QWORD *)&v13 + 1) = v9;
  }
  v10 = a1[37];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v10);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(uint64_t *a1)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;
  _UNKNOWN **v21;

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, (uint64_t)v13);
  if ((v18 & 1) != 0)
  {
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
  }
  else
  {
    v2 = v17;
    v3 = v16;
    v5 = v14;
    v4 = v15;
    v11 = v13[2];
    v12 = v13[3];
    v9 = v13[0];
    v10 = v13[1];
    *((_QWORD *)&v20 + 1) = &type metadata for BillboardActionHandler;
    v21 = &protocol witness table for BillboardActionHandler;
    v6 = swift_allocObject();
    *(_QWORD *)&v19 = v6;
    *(_OWORD *)(v6 + 16) = v9;
    *(_OWORD *)(v6 + 32) = v10;
    *(_OWORD *)(v6 + 48) = v11;
    *(_OWORD *)(v6 + 64) = v12;
    *(_QWORD *)(v6 + 80) = v5;
    *(_QWORD *)(v6 + 88) = v4;
    *(_DWORD *)(v6 + 96) = v3;
    *(_BYTE *)(v6 + 100) = v2 & 1;
  }
  v7 = a1[45];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v19, v7);
  return swift_endAccess();
}

{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[12];
  _BYTE v12[192];
  __int128 v13;
  __int128 v14;
  _UNKNOWN **v15;
  _BYTE v16[192];
  uint64_t v17[24];

  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  specialized static ActionHandlerProtocol.actionHandler(_:)(a1, (uint64_t)v12);
  outlined init with take of Transform?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  outlined init with take of Transform?((uint64_t)v16, (uint64_t)v17, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  if (_s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(v17) == 1)
  {
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
  }
  else
  {
    *((_QWORD *)&v14 + 1) = &type metadata for OrbitEntityActionHandler;
    v15 = &protocol witness table for OrbitEntityActionHandler;
    v2 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v13 = v2;
    outlined init with take of Transform?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
    v3 = v11[9];
    v2[9] = v11[8];
    v2[10] = v3;
    v4 = v11[11];
    v2[11] = v11[10];
    v2[12] = v4;
    v5 = v11[5];
    v2[5] = v11[4];
    v2[6] = v5;
    v6 = v11[7];
    v2[7] = v11[6];
    v2[8] = v6;
    v7 = v11[1];
    v2[1] = v11[0];
    v2[2] = v7;
    v8 = v11[3];
    v2[3] = v11[2];
    v2[4] = v8;
  }
  v9 = a1[31];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v9);
  return swift_endAccess();
}

uint64_t specialized static EntityAction.__register()()
{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000021, 0x800000021BE88020);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for EmphasizeAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for EmphasizeAction, (uint64_t)&protocol witness table for EmphasizeAction, 0xD000000000000021, 0x800000021BE88020, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000021, 0x800000021BE880F0);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for PlayAudioAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for PlayAudioAction, (uint64_t)&protocol witness table for PlayAudioAction, 0xD000000000000021, 0x800000021BE880F0, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003FLL, 0x800000021BE881E0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD00000000000003FLL, 0x800000021BE881E0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000037, 0x800000021BE88290);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000037, 0x800000021BE88290, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000035, 0x800000021BE88340);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000035, 0x800000021BE88340, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000034, 0x800000021BE883F0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000034, 0x800000021BE883F0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000039, 0x800000021BE884A0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000039, 0x800000021BE884A0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE88550);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000043, 0x800000021BE88550, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE88620);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000043, 0x800000021BE88620, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE886F0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000043, 0x800000021BE886F0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000037, 0x800000021BE887C0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000037, 0x800000021BE887C0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000036, 0x800000021BE88870);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, 0xD000000000000036, 0x800000021BE88870, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000045, 0x800000021BE88920);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD000000000000045, 0x800000021BE88920, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE889F0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD000000000000043, 0x800000021BE889F0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000036, 0x800000021BE88AC0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD000000000000036, 0x800000021BE88AC0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000030, 0x800000021BE88B70);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD000000000000030, 0x800000021BE88B70, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003ALL, 0x800000021BE88C10);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD00000000000003ALL, 0x800000021BE88C10, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003ALL, 0x800000021BE88CC0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD00000000000003ALL, 0x800000021BE88CC0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003ALL, 0x800000021BE88D70);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD00000000000003ALL, 0x800000021BE88D70, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002ELL, 0x800000021BE88E20);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD00000000000002ELL, 0x800000021BE88E20, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  uint64_t v9;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002DLL, 0x800000021BE88EB0);
    if ((v3 & 1) != 0)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
      if ((_QWORD)v8 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, (uint64_t)&protocol witness table for FromToByAction<A>, 0xD00000000000002DLL, 0x800000021BE88EB0, isUniquelyReferenced_nonNull_native);
  *object = v9;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000021, 0x800000021BE88F40);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for BillboardAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for BillboardAction, (uint64_t)&protocol witness table for BillboardAction, 0xD000000000000021, 0x800000021BE88F40, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x800000021BE88FC0);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for SpinAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for SpinAction, (uint64_t)&protocol witness table for SpinAction, 0xD00000000000001CLL, 0x800000021BE88FC0, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000023, 0x800000021BE89030);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for OrbitEntityAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for OrbitEntityAction, (uint64_t)&protocol witness table for OrbitEntityAction, 0xD000000000000023, 0x800000021BE89030, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001FLL, 0x800000021BE890C0);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for ImpulseAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for ImpulseAction, (uint64_t)&protocol witness table for ImpulseAction, 0xD00000000000001FLL, 0x800000021BE890C0, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000028, 0x800000021BE89130);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for SetEntityEnabledAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for SetEntityEnabledAction, (uint64_t)&protocol witness table for SetEntityEnabledAction, 0xD000000000000028, 0x800000021BE89130, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000024, 0x800000021BE891C0);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for NotificationAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for NotificationAction, (uint64_t)&protocol witness table for NotificationAction, 0xD000000000000024, 0x800000021BE891C0, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;
  uint64_t v8;

  if (one-time initialization token for actionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.actionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.actionTypeMap;
  if (*(_QWORD *)(static AnimationResource.actionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000025, 0x800000021BE89250);
    if ((v3 & 1) != 0)
    {
      v7 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v7 == &type metadata for PlayAnimationAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *object;
  *object = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&type metadata for PlayAnimationAction, (uint64_t)&protocol witness table for PlayAnimationAction, 0xD000000000000025, 0x800000021BE89250, isUniquelyReferenced_nonNull_native);
  *object = v8;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t specialized static EntityAction<>.__registerCodable()()
{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000021, 0x800000021BE88020);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for EmphasizeAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type EmphasizeAction and conformance EmphasizeAction();
  v7 = lazy protocol witness table accessor for type EmphasizeAction and conformance EmphasizeAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for EmphasizeAction;
  v11[1] = (uint64_t)&protocol witness table for EmphasizeAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000021, 0x800000021BE88020, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000021, 0x800000021BE880F0);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for PlayAudioAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type PlayAudioAction and conformance PlayAudioAction();
  v7 = lazy protocol witness table accessor for type PlayAudioAction and conformance PlayAudioAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for PlayAudioAction;
  v11[1] = (uint64_t)&protocol witness table for PlayAudioAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000021, 0x800000021BE880F0, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003FLL, 0x800000021BE881E0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Transform> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Transform>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Transform> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Transform>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000003FLL, 0x800000021BE881E0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000037, 0x800000021BE88290);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<String> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<String>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<String> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<String>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000037, 0x800000021BE88290, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000035, 0x800000021BE88340);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Bool> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Bool> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000035, 0x800000021BE88340, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000034, 0x800000021BE883F0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Int> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Int> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000034, 0x800000021BE883F0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000039, 0x800000021BE884A0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<simd_quatf> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<simd_quatf> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000039, 0x800000021BE884A0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE88550);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<SIMD4<Float>> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<SIMD4<Float>> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000043, 0x800000021BE88550, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE88620);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<SIMD3<Float>> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<SIMD3<Float>> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000043, 0x800000021BE88620, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE886F0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<SIMD2<Float>> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<SIMD2<Float>> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000043, 0x800000021BE886F0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000037, 0x800000021BE887C0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Double> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Double> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000037, 0x800000021BE887C0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000036, 0x800000021BE88870);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Float> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyAction<Float> and conformance SetEntityPropertyAction<A>, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for SetEntityPropertyAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000036, 0x800000021BE88870, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000045, 0x800000021BE88920);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<BlendShapeWeights> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<BlendShapeWeights> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000045, 0x800000021BE88920, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000043, 0x800000021BE889F0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<JointTransforms>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<JointTransforms> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<JointTransforms> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000043, 0x800000021BE889F0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000036, 0x800000021BE88AC0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Transform>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<Transform> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Transform>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<Transform> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Transform>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000036, 0x800000021BE88AC0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000030, 0x800000021BE88B70);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<simd_quatf>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<simd_quatf> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<simd_quatf> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000030, 0x800000021BE88B70, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003ALL, 0x800000021BE88C10);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<SIMD4<Float>> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<SIMD4<Float>> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000003ALL, 0x800000021BE88C10, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003ALL, 0x800000021BE88CC0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<SIMD3<Float>> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<SIMD3<Float>> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000003ALL, 0x800000021BE88CC0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000003ALL, 0x800000021BE88D70);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<SIMD2<Float>> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<SIMD2<Float>> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000003ALL, 0x800000021BE88D70, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002ELL, 0x800000021BE88E20);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Double>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<Double> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Double>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<Double> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Double>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000002ELL, 0x800000021BE88E20, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002DLL, 0x800000021BE88EB0);
    if ((v3 & 1) != 0)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      swift_endAccess();
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
      if ((_QWORD)v10 == result)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAction<Float>);
  v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<Float> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Float>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  v8 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByAction<Float> and conformance FromToByAction<A>, &demangling cache variable for type metadata for FromToByAction<Float>, (uint64_t)&protocol conformance descriptor for FromToByAction<A>);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *object;
  *object = 0x8000000000000000;
  v12[0] = v6;
  v12[1] = (uint64_t)&protocol witness table for FromToByAction<A>;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = MEMORY[0x24BEE4078];
  v12[5] = MEMORY[0x24BEE40A0];
  v12[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000002DLL, 0x800000021BE88EB0, isUniquelyReferenced_nonNull_native);
  *object = v11;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000021, 0x800000021BE88F40);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for BillboardAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type BillboardAction and conformance BillboardAction();
  v7 = lazy protocol witness table accessor for type BillboardAction and conformance BillboardAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for BillboardAction;
  v11[1] = (uint64_t)&protocol witness table for BillboardAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000021, 0x800000021BE88F40, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x800000021BE88FC0);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for SpinAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type SpinAction and conformance SpinAction();
  v7 = lazy protocol witness table accessor for type SpinAction and conformance SpinAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for SpinAction;
  v11[1] = (uint64_t)&protocol witness table for SpinAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD00000000000001CLL, 0x800000021BE88FC0, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000023, 0x800000021BE89030);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for OrbitEntityAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type OrbitEntityAction and conformance OrbitEntityAction();
  v7 = lazy protocol witness table accessor for type OrbitEntityAction and conformance OrbitEntityAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for OrbitEntityAction;
  v11[1] = (uint64_t)&protocol witness table for OrbitEntityAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000023, 0x800000021BE89030, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001FLL, 0x800000021BE890C0);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for ImpulseAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type ImpulseAction and conformance ImpulseAction();
  v7 = lazy protocol witness table accessor for type ImpulseAction and conformance ImpulseAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for ImpulseAction;
  v11[1] = (uint64_t)&protocol witness table for ImpulseAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD00000000000001FLL, 0x800000021BE890C0, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000028, 0x800000021BE89130);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for SetEntityEnabledAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type SetEntityEnabledAction and conformance SetEntityEnabledAction();
  v7 = lazy protocol witness table accessor for type SetEntityEnabledAction and conformance SetEntityEnabledAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for SetEntityEnabledAction;
  v11[1] = (uint64_t)&protocol witness table for SetEntityEnabledAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000028, 0x800000021BE89130, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000024, 0x800000021BE891C0);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for NotificationAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type NotificationAction and conformance NotificationAction();
  v7 = lazy protocol witness table accessor for type NotificationAction and conformance NotificationAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for NotificationAction;
  v11[1] = (uint64_t)&protocol witness table for NotificationAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000024, 0x800000021BE891C0, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

{
  uint64_t *object;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[7];

  if (one-time initialization token for codableActionTypeMap != -1)
    swift_once();
  object = &static AnimationResource.codableActionTypeMap;
  swift_beginAccess();
  v1 = static AnimationResource.codableActionTypeMap;
  if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
  {
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000025, 0x800000021BE89250);
    if ((v3 & 1) != 0)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 56 * v2);
      result = swift_endAccess();
      if ((ValueMetadata *)v9 == &type metadata for PlayAnimationAction)
        return result;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
      v5._countAndFlagsBits = String.init<A>(describing:)();
      object = (uint64_t *)v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_endAccess();
  v6 = lazy protocol witness table accessor for type PlayAnimationAction and conformance PlayAnimationAction();
  v7 = lazy protocol witness table accessor for type PlayAnimationAction and conformance PlayAnimationAction();
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *object;
  *object = 0x8000000000000000;
  v11[0] = (uint64_t)&type metadata for PlayAnimationAction;
  v11[1] = (uint64_t)&protocol witness table for PlayAnimationAction;
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = MEMORY[0x24BEE4078];
  v11[5] = MEMORY[0x24BEE40A0];
  v11[6] = MEMORY[0x24BEE4080];
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 0xD000000000000025, 0x800000021BE89250, isUniquelyReferenced_nonNull_native);
  *object = v10;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *))
{
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t *);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t Entity;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t *);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t *);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  char v214;
  double v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  char v243;
  char v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void (*v317)(uint64_t *);
  void (*v318)(uint64_t *);
  void (*v319)(uint64_t *);
  void (*v320)(uint64_t *);
  void (*v321)(uint64_t *);
  void (*v322)(uint64_t *);
  uint64_t v323;
  __int16 v324;
  char v325;
  char v326;
  uint64_t v327;
  char v328;
  double v329;
  double v330;
  uint64_t v331;
  uint64_t v332;
  double v333;
  char v334;
  unint64_t v335;
  char v336;
  unint64_t v337;
  char v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  uint64_t v345;
  __int16 v346;
  char v347;
  char v348;
  uint64_t v349;
  char v350;
  double v351;
  double v352;
  uint64_t v353;
  uint64_t v354;
  double v355;
  char v356;
  unint64_t v357;
  char v358;
  unint64_t v359;
  char v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned __int16 v372;
  unsigned __int8 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  v9 = Strong;
  switch(a4)
  {
    case 1:
      v11 = *(_QWORD *)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v299 = *(_QWORD *)(a2 + 32);
      v305 = *(_QWORD *)(a2 + 40);
      v12 = *(_QWORD *)(a2 + 64);
      v13 = *(float *)(a2 + 72);
      v14 = *(float *)(a2 + 76);
      v252 = *(_BYTE *)(a2 + 80);
      v256 = *(_QWORD *)(a2 + 88);
      v261 = *(_QWORD *)(a2 + 96);
      v317 = a5;
      v267 = *(_QWORD *)(a2 + 56);
      v272 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v44 = specialized static Entity.entityInfoType(_:)(v11);
        if (v44)
        {
          v45 = (*(uint64_t (**)(void))(v44 + 232))();
          v46 = *(_QWORD *)(v45 + 16);
          swift_retain();
          MEMORY[0x22076D160](v46, 0);
          *(_QWORD *)(v45 + 16) = v11;
          MEMORY[0x22076D160](v11, v45);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v11);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v47 = swift_allocObject();
        swift_weakInit();
        v288 = v47;
        *(_QWORD *)(v47 + 16) = v10;
        swift_beginAccess();
        swift_weakAssign();
        v48 = String.init(cString:)();
        v50 = v49;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v51 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v52 = v12;
          swift_bridgeObjectRetain();
          v53 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
          if ((v54 & 1) != 0)
          {
            v55 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 56 * v53);
            v56 = v55[1];
            v295 = *v55;
            v57 = v55[2];
            v58 = v55[3];
            v59 = v55[4];
            v60 = v55[5];
            v61 = v55[6];
            swift_bridgeObjectRelease();
LABEL_84:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v374 = v299;
            BYTE8(v374) = 0;
            *(_QWORD *)&v375 = v305;
            *((_QWORD *)&v375 + 1) = v295;
            *(_QWORD *)&v376 = v56;
            *((_QWORD *)&v376 + 1) = v57;
            *(_QWORD *)&v377 = v58;
            *((_QWORD *)&v377 + 1) = v59;
            v247 = v57;
            v155 = v60;
            *(_QWORD *)&v378 = v60;
            *((_QWORD *)&v378 + 1) = v61;
            v248 = v56;
            v245 = v61;
            if (!v52)
            {
              v158 = 0;
              goto LABEL_164;
            }
            if (!REBindPointBoundComponent())
            {
              v158 = 0;
              goto LABEL_164;
            }
            v283 = v58;
            Entity = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v157 = swift_dynamicCastClassUnconditional();
              goto LABEL_88;
            }
            if ((REEntityIsBeingDestroyed() & 1) == 0)
            {
              v207 = specialized static Entity.entityInfoType(_:)(Entity);
              if (v207)
              {
                v158 = (*(uint64_t (**)(void))(v207 + 232))();
                v208 = *(_QWORD *)(v158 + 16);
                swift_retain();
                MEMORY[0x22076D160](v208, 0);
                *(_QWORD *)(v158 + 16) = Entity;
                MEMORY[0x22076D160](Entity, v158);
                swift_release();
                goto LABEL_163;
              }
              v157 = makeEntity(for:)(Entity);
LABEL_88:
              v158 = v157;
LABEL_163:
              v58 = v283;
LABEL_164:
              specialized ActionEventData.action<A>()((uint64_t)&v372);
              v209 = v372 | (v373 << 16);
              if ((v209 & 0xFF0000) != 0x20000)
              {
                swift_retain();
                v210 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<EmphasizeAction>);
                v324 = v209;
                v325 = BYTE2(v209) & 1;
                v243 = v210 & 1;
                v326 = v210 & 1;
                v323 = v288;
                v327 = v158;
                v328 = v252;
                v329 = v13;
                v330 = v14;
                v331 = v9;
                v332 = v267;
                v333 = -1.0;
                v334 = 0;
                v335 = v256;
                v336 = 0;
                v337 = v261;
                v338 = 0;
                v341 = v376;
                v342 = v377;
                v343 = v378;
                v339 = v374;
                v340 = v375;
                v179 = v272;
                v344 = v272;
                swift_retain();
                swift_retain();
                v317(&v323);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v345 = v288;
                v346 = v209;
                v347 = BYTE2(v209) & 1;
                v348 = v243;
                v349 = v158;
                v350 = v252;
                v351 = v13;
                v352 = v14;
                v353 = v9;
                v354 = v267;
                v355 = -1.0;
                v356 = 0;
                v357 = v256;
                v358 = 0;
                v359 = v261;
                v360 = 0;
                v361 = v299;
                v362 = 0;
                v363 = v305;
                v364 = v295;
                v365 = v248;
                v366 = v247;
                v367 = v58;
                v368 = v59;
                v369 = v155;
                v183 = v245;
                goto LABEL_173;
              }
LABEL_185:
              swift_release();
              swift_release();
              swift_release();
LABEL_186:
              swift_release();
              return 0;
            }
            goto LABEL_234;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v52 = v12;
        }
        v295 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        goto LABEL_84;
      }
      __break(1u);
      goto LABEL_226;
    case 2:
      v21 = *(_QWORD *)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v306 = *(_QWORD *)(a2 + 32);
      v311 = *(_QWORD *)(a2 + 40);
      v22 = *(float *)(a2 + 56);
      v268 = *(_QWORD *)(a2 + 64);
      v285 = *(_QWORD *)(a2 + 72);
      v23 = *(float *)(a2 + 96);
      v24 = *(float *)(a2 + 100);
      v262 = *(_BYTE *)(a2 + 104);
      v273 = *(_QWORD *)(a2 + 48);
      v278 = *(_QWORD *)(a2 + 80);
      v293 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v62 = specialized static Entity.entityInfoType(_:)(v21);
        if (v62)
        {
          v63 = (*(uint64_t (**)(void))(v62 + 232))();
          v64 = *(_QWORD *)(v63 + 16);
          swift_retain();
          MEMORY[0x22076D160](v64, 0);
          *(_QWORD *)(v63 + 16) = v21;
          MEMORY[0x22076D160](v21, v63);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v21);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v65 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v65 + 16) = v20;
        swift_beginAccess();
        swift_weakAssign();
        v66 = String.init(cString:)();
        v68 = v67;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v69 = static AnimationResource.codableActionTypeMap;
        v314 = v9;
        v320 = a5;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, v68);
          if ((v71 & 1) != 0)
          {
            v72 = (uint64_t *)(*(_QWORD *)(v69 + 56) + 56 * v70);
            v73 = v72[1];
            v302 = *v72;
            v74 = v72[2];
            v75 = v72[3];
            v76 = v72[4];
            v77 = v72[5];
            v78 = v72[6];
            swift_bridgeObjectRelease();
LABEL_92:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v374 = v306;
            BYTE8(v374) = 0;
            *(_QWORD *)&v375 = v311;
            *((_QWORD *)&v375 + 1) = v302;
            *(_QWORD *)&v376 = v73;
            *((_QWORD *)&v376 + 1) = v74;
            *(_QWORD *)&v377 = v75;
            *((_QWORD *)&v377 + 1) = v76;
            *(_QWORD *)&v378 = v77;
            *((_QWORD *)&v378 + 1) = v78;
            v253 = v75;
            v257 = v74;
            v249 = v77;
            if (!v293 || !REBindPointBoundComponent())
            {
              v161 = 0;
              goto LABEL_170;
            }
            v298 = v76;
            v159 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v160 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_235:
                __break(1u);
                goto LABEL_236;
              }
              v211 = specialized static Entity.entityInfoType(_:)(v159);
              if (v211)
              {
                v161 = (*(uint64_t (**)(void))(v211 + 232))();
                v212 = *(_QWORD *)(v161 + 16);
                swift_retain();
                MEMORY[0x22076D160](v212, 0);
                *(_QWORD *)(v161 + 16) = v159;
                MEMORY[0x22076D160](v159, v161);
                swift_release();
                goto LABEL_169;
              }
              v160 = makeEntity(for:)(v159);
            }
            v161 = v160;
LABEL_169:
            v76 = v298;
LABEL_170:
            specialized ActionEventData.action<A>()((uint64_t)&v372);
            v213 = v372 | (v373 << 16);
            if ((v213 & 0xFF0000) != 0x20000)
            {
              swift_retain();
              v214 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<EmphasizeAction>);
              v324 = v213;
              v215 = v22;
              v325 = BYTE2(v213) & 1;
              v244 = v214 & 1;
              v326 = v214 & 1;
              v323 = v65;
              v327 = v161;
              v328 = v262;
              v329 = v23;
              v330 = v24;
              v331 = v314;
              v332 = v285;
              v333 = v215;
              v334 = 0;
              v179 = v278;
              v335 = v273;
              v336 = 0;
              v337 = v268;
              v338 = 0;
              v341 = v376;
              v342 = v377;
              v343 = v378;
              v339 = v374;
              v340 = v375;
              v344 = v278;
              swift_retain();
              swift_retain();
              v320(&v323);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v345 = v65;
              v346 = v213;
              v347 = BYTE2(v213) & 1;
              v348 = v244;
              v349 = v161;
              v350 = v262;
              v351 = v23;
              v352 = v24;
              v353 = v314;
              v354 = v285;
              v355 = v215;
              v356 = 0;
              v357 = v273;
              v358 = 0;
              v359 = v268;
              v360 = 0;
              v361 = v306;
              v362 = 0;
              v363 = v311;
              v364 = v302;
              v365 = v73;
              v366 = v257;
              v367 = v253;
              v368 = v76;
              v369 = v249;
              v183 = v78;
              goto LABEL_173;
            }
            goto LABEL_185;
          }
          swift_bridgeObjectRelease();
        }
        v302 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        v78 = 0;
        goto LABEL_92;
      }
LABEL_226:
      __break(1u);
      goto LABEL_227;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_186;
    case 4:
      v26 = *(_QWORD *)a2;
      v25 = *(_QWORD *)(a2 + 8);
      v300 = *(_QWORD *)(a2 + 32);
      v307 = *(_QWORD *)(a2 + 40);
      v294 = *(_QWORD *)(a2 + 48);
      v27 = *(_QWORD *)(a2 + 64);
      v28 = *(float *)(a2 + 72);
      v29 = *(float *)(a2 + 76);
      v279 = *(_BYTE *)(a2 + 80);
      v274 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v79 = specialized static Entity.entityInfoType(_:)(v26);
        if (v79)
        {
          v80 = (*(uint64_t (**)(void))(v79 + 232))();
          v81 = *(_QWORD *)(v80 + 16);
          swift_retain();
          MEMORY[0x22076D160](v81, 0);
          *(_QWORD *)(v80 + 16) = v26;
          MEMORY[0x22076D160](v26, v80);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v26);
        }
LABEL_41:
        v315 = v9;
        type metadata accessor for AnimationPlaybackController();
        v82 = swift_allocObject();
        swift_weakInit();
        v289 = v82;
        *(_QWORD *)(v82 + 16) = v25;
        swift_beginAccess();
        swift_weakAssign();
        v83 = String.init(cString:)();
        v85 = v84;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        v86 = a5;
        swift_beginAccess();
        v87 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v88 = v27;
          swift_bridgeObjectRetain();
          v89 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v85);
          if ((v90 & 1) != 0)
          {
            v91 = (uint64_t *)(*(_QWORD *)(v87 + 56) + 56 * v89);
            v93 = *v91;
            v92 = v91[1];
            v94 = v91[2];
            v95 = v91[3];
            v97 = v91[4];
            v96 = v91[5];
            v98 = v91[6];
            swift_bridgeObjectRelease();
            goto LABEL_100;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v88 = v27;
        }
        v93 = 0;
        v92 = 0;
        v94 = 0;
        v95 = 0;
        v97 = 0;
        v96 = 0;
        v98 = 0;
LABEL_100:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v374 = v300;
        BYTE8(v374) = 0;
        *(_QWORD *)&v375 = v307;
        *((_QWORD *)&v375 + 1) = v93;
        *(_QWORD *)&v376 = v92;
        *((_QWORD *)&v376 + 1) = v94;
        *(_QWORD *)&v377 = v95;
        *((_QWORD *)&v377 + 1) = v97;
        v258 = v97;
        v264 = v94;
        *(_QWORD *)&v378 = v96;
        *((_QWORD *)&v378 + 1) = v98;
        v162 = v95;
        v270 = v92;
        if (!v88)
        {
          v167 = 0;
          v163 = v86;
          v165 = v315;
          goto LABEL_178;
        }
        v163 = v86;
        if (!REBindPointBoundComponent())
        {
          v167 = 0;
          v165 = v315;
          goto LABEL_178;
        }
        v164 = REComponentGetEntity();
        v165 = v315;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v166 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_236:
            __break(1u);
            goto LABEL_237;
          }
          v216 = specialized static Entity.entityInfoType(_:)(v164);
          if (v216)
          {
            v167 = (*(uint64_t (**)(void))(v216 + 232))();
            v217 = *(_QWORD *)(v167 + 16);
            swift_retain();
            MEMORY[0x22076D160](v217, 0);
            *(_QWORD *)(v167 + 16) = v164;
            MEMORY[0x22076D160](v164, v167);
            swift_release();
            goto LABEL_177;
          }
          v166 = makeEntity(for:)(v164);
        }
        v167 = v166;
LABEL_177:
        v162 = v95;
LABEL_178:
        specialized ActionEventData.action<A>()((uint64_t)&v372);
        v218 = v372 | (v373 << 16);
        if ((v218 & 0xFF0000) != 0x20000)
        {
          swift_retain();
          v324 = v218;
          v325 = BYTE2(v218) & 1;
          v251 = v93;
          v219 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<EmphasizeAction>) & 1;
          v326 = v219;
          v323 = v289;
          v327 = v167;
          v328 = v279;
          v329 = v28;
          v330 = v29;
          v331 = v165;
          v332 = v274;
          v333 = -1.0;
          v334 = 0;
          v335 = 0xBFF0000000000000;
          v336 = 0;
          v337 = 0xBFF0000000000000;
          v338 = 0;
          v341 = v376;
          v342 = v377;
          v343 = v378;
          v339 = v374;
          v340 = v375;
          v344 = v294;
          swift_retain();
          swift_retain();
          v163(&v323);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v345 = v289;
          v346 = v218;
          v347 = BYTE2(v218) & 1;
          v348 = v219;
          v349 = v167;
          v350 = v279;
          v351 = v28;
          v352 = v29;
          v353 = v165;
          v354 = v274;
          v355 = -1.0;
          v356 = 0;
          v357 = 0xBFF0000000000000;
          v358 = 0;
          v359 = 0xBFF0000000000000;
          v360 = 0;
          v361 = v300;
          v362 = 0;
          v363 = v307;
          v364 = v251;
          v365 = v270;
          v366 = v264;
          v367 = v162;
          v368 = v258;
          v369 = v96;
          v370 = v98;
          v371 = v294;
          goto LABEL_214;
        }
        goto LABEL_185;
      }
LABEL_227:
      __break(1u);
      goto LABEL_228;
    case 8:
      v31 = *(_QWORD *)a2;
      v30 = *(_QWORD *)(a2 + 8);
      v301 = *(_QWORD *)(a2 + 32);
      v308 = *(_QWORD *)(a2 + 40);
      v32 = *(_QWORD *)(a2 + 56);
      v33 = *(float *)(a2 + 64);
      v34 = *(float *)(a2 + 68);
      v263 = *(_BYTE *)(a2 + 72);
      v269 = *(_QWORD *)(a2 + 80);
      v318 = a5;
      v275 = *(_QWORD *)(a2 + 88);
      v280 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v99 = specialized static Entity.entityInfoType(_:)(v31);
        if (v99)
        {
          v100 = (*(uint64_t (**)(void))(v99 + 232))();
          v101 = *(_QWORD *)(v100 + 16);
          swift_retain();
          MEMORY[0x22076D160](v101, 0);
          *(_QWORD *)(v100 + 16) = v31;
          MEMORY[0x22076D160](v31, v100);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v31);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v102 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v102 + 16) = v30;
        swift_beginAccess();
        swift_weakAssign();
        v103 = String.init(cString:)();
        v105 = v104;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v106 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v107 = v32;
          swift_bridgeObjectRetain();
          v108 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v105);
          if ((v109 & 1) != 0)
          {
            v110 = (uint64_t *)(*(_QWORD *)(v106 + 56) + 56 * v108);
            v111 = v110[1];
            v296 = *v110;
            v112 = v110[2];
            v113 = v110[3];
            v115 = v110[4];
            v114 = v110[5];
            v116 = v110[6];
            swift_bridgeObjectRelease();
LABEL_108:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v374 = v301;
            BYTE8(v374) = 0;
            *(_QWORD *)&v375 = v308;
            *((_QWORD *)&v375 + 1) = v296;
            *(_QWORD *)&v376 = v111;
            *((_QWORD *)&v376 + 1) = v112;
            *(_QWORD *)&v377 = v113;
            *((_QWORD *)&v377 + 1) = v115;
            *(_QWORD *)&v378 = v114;
            *((_QWORD *)&v378 + 1) = v116;
            v254 = v112;
            v259 = v111;
            if (!v107 || !REBindPointBoundComponent())
            {
              v170 = 0;
              goto LABEL_184;
            }
            v290 = v113;
            v168 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v169 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_237:
                __break(1u);
                goto LABEL_238;
              }
              v220 = specialized static Entity.entityInfoType(_:)(v168);
              if (v220)
              {
                v170 = (*(uint64_t (**)(void))(v220 + 232))();
                v221 = *(_QWORD *)(v170 + 16);
                swift_retain();
                MEMORY[0x22076D160](v221, 0);
                *(_QWORD *)(v170 + 16) = v168;
                MEMORY[0x22076D160](v168, v170);
                swift_release();
                goto LABEL_183;
              }
              v169 = makeEntity(for:)(v168);
            }
            v170 = v169;
LABEL_183:
            v113 = v290;
LABEL_184:
            specialized ActionEventData.action<A>()((uint64_t)&v372);
            v222 = v372 | (v373 << 16);
            if ((v222 & 0xFF0000) != 0x20000)
            {
              swift_retain();
              v223 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<EmphasizeAction>);
              v324 = v222;
              v325 = BYTE2(v222) & 1;
              v246 = v223 & 1;
              v326 = v223 & 1;
              v323 = v102;
              v327 = v170;
              v328 = v263;
              v329 = v33;
              v330 = v34;
              v332 = 0;
              v333 = 0.0;
              v331 = v9;
              v334 = 1;
              v335 = v269;
              v336 = 0;
              v337 = v275;
              v338 = 0;
              v341 = v376;
              v342 = v377;
              v343 = v378;
              v339 = v374;
              v340 = v375;
              v344 = v280;
              swift_retain();
              swift_retain();
              v318(&v323);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v345 = v102;
              v346 = v222;
              v347 = BYTE2(v222) & 1;
              v348 = v246;
              v349 = v170;
              v350 = v263;
              v351 = v33;
              v352 = v34;
              v354 = 0;
              v355 = 0.0;
              v353 = v9;
              v356 = 1;
              v357 = v269;
              v358 = 0;
              v359 = v275;
              v360 = 0;
              v361 = v301;
              v362 = 0;
              v363 = v308;
              v364 = v296;
              v365 = v259;
              v366 = v254;
              v367 = v113;
              v368 = v115;
              v369 = v114;
              v370 = v116;
              v371 = v280;
              goto LABEL_214;
            }
            goto LABEL_185;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v107 = v32;
        }
        v296 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v115 = 0;
        v114 = 0;
        v116 = 0;
        goto LABEL_108;
      }
LABEL_228:
      __break(1u);
      goto LABEL_229;
    case 16:
      v36 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v309 = *(_QWORD *)(a2 + 40);
      v286 = *(_QWORD *)(a2 + 56);
      v276 = *(_QWORD *)(a2 + 32);
      v281 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v117 = specialized static Entity.entityInfoType(_:)(v36);
        if (v117)
        {
          v118 = (*(uint64_t (**)(void))(v117 + 232))();
          v119 = *(_QWORD *)(v118 + 16);
          swift_retain();
          MEMORY[0x22076D160](v119, 0);
          *(_QWORD *)(v118 + 16) = v36;
          MEMORY[0x22076D160](v36, v118);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
LABEL_57:
        type metadata accessor for AnimationPlaybackController();
        v120 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v120 + 16) = v35;
        swift_beginAccess();
        swift_weakAssign();
        v121 = String.init(cString:)();
        v123 = v122;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v124 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v125 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v123);
          if ((v126 & 1) != 0)
          {
            v127 = (uint64_t *)(*(_QWORD *)(v124 + 56) + 56 * v125);
            v128 = v127[2];
            v297 = *v127;
            v303 = v127[1];
            v130 = v127[3];
            v129 = v127[4];
            v132 = v127[5];
            v131 = v127[6];
            swift_bridgeObjectRelease();
LABEL_116:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v374 = 0;
            BYTE8(v374) = 0;
            *(_QWORD *)&v375 = v309;
            *((_QWORD *)&v375 + 1) = v297;
            *(_QWORD *)&v376 = v303;
            *((_QWORD *)&v376 + 1) = v128;
            *(_QWORD *)&v377 = v130;
            *((_QWORD *)&v377 + 1) = v129;
            *(_QWORD *)&v378 = v132;
            *((_QWORD *)&v378 + 1) = v131;
            v265 = v130;
            v271 = v128;
            v255 = v132;
            v260 = v129;
            v250 = v131;
            if (v286 && REBindPointBoundComponent())
            {
              v171 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v172 = swift_dynamicCastClassUnconditional();
              }
              else
              {
                if ((REEntityIsBeingDestroyed() & 1) != 0)
                {
LABEL_238:
                  __break(1u);
                  goto LABEL_239;
                }
                v224 = specialized static Entity.entityInfoType(_:)(v171);
                if (v224)
                {
                  v173 = (*(uint64_t (**)(void))(v224 + 232))();
                  v225 = *(_QWORD *)(v173 + 16);
                  swift_retain();
                  MEMORY[0x22076D160](v225, 0);
                  *(_QWORD *)(v173 + 16) = v171;
                  MEMORY[0x22076D160](v171, v173);
                  swift_release();
                  goto LABEL_122;
                }
                v172 = makeEntity(for:)(v171);
              }
              v173 = v172;
            }
            else
            {
              v173 = 0;
            }
LABEL_122:
            specialized ActionEventData.action<A>()((uint64_t)&v372);
            v174 = v372 | (v373 << 16);
            if ((v174 & 0xFF0000) == 0x20000)
              goto LABEL_185;
            v324 = v372;
            v321 = a5;
            v323 = v120;
            v175 = v174 >> 8;
            v176 = HIWORD(v174) & 1;
            v325 = BYTE2(v174) & 1;
            v326 = 1;
            v327 = v173;
            v328 = 0;
            v329 = 0.0;
            v330 = 0.0;
            v332 = 0;
            v333 = 0.0;
            v331 = v9;
            v334 = 1;
            v177 = v120;
            v178 = v276;
            v179 = v281;
            v335 = v276;
            v336 = 0;
            v337 = 0;
            v338 = 1;
            v341 = v376;
            v342 = v377;
            v343 = v378;
            v339 = v374;
            v340 = v375;
            v344 = v281;
            swift_retain();
            swift_retain();
            v321(&v323);
            swift_release();
            swift_release();
            swift_release();
            v345 = v177;
            goto LABEL_134;
          }
          swift_bridgeObjectRelease();
        }
        v297 = 0;
        v303 = 0;
        v128 = 0;
        v130 = 0;
        v129 = 0;
        v132 = 0;
        v131 = 0;
        goto LABEL_116;
      }
LABEL_229:
      __break(1u);
      goto LABEL_230;
    case 32:
      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v309 = *(_QWORD *)(a2 + 40);
      v287 = *(_QWORD *)(a2 + 56);
      v277 = *(_QWORD *)(a2 + 32);
      v282 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_65;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_230:
        __break(1u);
        goto LABEL_231;
      }
      v133 = specialized static Entity.entityInfoType(_:)(v38);
      if (v133)
      {
        v134 = (*(uint64_t (**)(void))(v133 + 232))();
        v135 = *(_QWORD *)(v134 + 16);
        swift_retain();
        MEMORY[0x22076D160](v135, 0);
        *(_QWORD *)(v134 + 16) = v38;
        MEMORY[0x22076D160](v38, v134);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v38);
      }
LABEL_65:
      type metadata accessor for AnimationPlaybackController();
      v136 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v136 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      v137 = String.init(cString:)();
      v139 = v138;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v140 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_125;
      swift_bridgeObjectRetain();
      v141 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v139);
      if ((v142 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_125:
        v297 = 0;
        v303 = 0;
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v148 = 0;
        v147 = 0;
        goto LABEL_126;
      }
      v143 = (uint64_t *)(*(_QWORD *)(v140 + 56) + 56 * v141);
      v144 = v143[2];
      v297 = *v143;
      v303 = v143[1];
      v145 = v143[3];
      v146 = v143[4];
      v148 = v143[5];
      v147 = v143[6];
      swift_bridgeObjectRelease();
LABEL_126:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v374 = 0;
      BYTE8(v374) = 0;
      *(_QWORD *)&v375 = v309;
      *((_QWORD *)&v375 + 1) = v297;
      *(_QWORD *)&v376 = v303;
      *((_QWORD *)&v376 + 1) = v144;
      *(_QWORD *)&v377 = v145;
      *((_QWORD *)&v377 + 1) = v146;
      *(_QWORD *)&v378 = v148;
      *((_QWORD *)&v378 + 1) = v147;
      v265 = v145;
      v271 = v144;
      v255 = v148;
      v260 = v146;
      v250 = v147;
      if (v287 && REBindPointBoundComponent())
      {
        v180 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v181 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_239:
            __break(1u);
            goto LABEL_240;
          }
          v226 = specialized static Entity.entityInfoType(_:)(v180);
          if (v226)
          {
            v173 = (*(uint64_t (**)(void))(v226 + 232))();
            v227 = *(_QWORD *)(v173 + 16);
            swift_retain();
            MEMORY[0x22076D160](v227, 0);
            *(_QWORD *)(v173 + 16) = v180;
            MEMORY[0x22076D160](v180, v173);
            swift_release();
            goto LABEL_132;
          }
          v181 = makeEntity(for:)(v180);
        }
        v173 = v181;
      }
      else
      {
        v173 = 0;
      }
LABEL_132:
      specialized ActionEventData.action<A>()((uint64_t)&v372);
      v174 = v372 | (v373 << 16);
      if ((v174 & 0xFF0000) == 0x20000)
        goto LABEL_185;
      v324 = v372;
      v182 = a5;
      v175 = v174 >> 8;
      v176 = HIWORD(v174) & 1;
      v325 = BYTE2(v174) & 1;
      v326 = 1;
      v323 = v136;
      v327 = v173;
      v328 = 0;
      v329 = 0.0;
      v330 = 0.0;
      v332 = 0;
      v333 = 0.0;
      v331 = v9;
      v334 = 1;
      v291 = v136;
      v178 = v277;
      v179 = v282;
      v335 = v277;
      v336 = 0;
      v337 = 0;
      v338 = 1;
      v341 = v376;
      v342 = v377;
      v343 = v378;
      v339 = v374;
      v340 = v375;
      v344 = v282;
      swift_retain();
      swift_retain();
      v182(&v323);
      swift_release();
      swift_release();
      swift_release();
      v345 = v291;
LABEL_134:
      LOBYTE(v346) = v174;
      HIBYTE(v346) = v175;
      v347 = v176;
      v348 = 1;
      v349 = v173;
      v350 = 0;
      v351 = 0.0;
      v352 = 0.0;
      v354 = 0;
      v355 = 0.0;
      v353 = v9;
      v356 = 1;
      v357 = v178;
      v358 = 0;
      v359 = 0;
      v360 = 1;
      v361 = 0;
      v362 = 0;
      v363 = v309;
      v364 = v297;
      v365 = v303;
      v366 = v271;
      v367 = v265;
      v368 = v260;
      v369 = v255;
      v183 = v250;
LABEL_173:
      v370 = v183;
      v371 = v179;
LABEL_214:
      outlined release of ActionEvent<EmphasizeAction>((uint64_t)&v345);
      return 0;
    case 64:
      v319 = a5;
      v40 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v41 = *(_QWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 32);
      v43 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
        v149 = specialized static Entity.entityInfoType(_:)(v40);
        if (v149)
        {
          v150 = (*(uint64_t (**)(void))(v149 + 232))();
          v151 = *(_QWORD *)(v150 + 16);
          swift_retain();
          MEMORY[0x22076D160](v151, 0);
          *(_QWORD *)(v150 + 16) = v40;
          MEMORY[0x22076D160](v40, v150);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v40);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v152 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v152 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      if (!v43)
        goto LABEL_151;
      if (REBindPointBoundComponent())
      {
        v153 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v154 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v43 = v154;
          goto LABEL_151;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
          goto LABEL_235;
        }
        v191 = specialized static Entity.entityInfoType(_:)(v153);
        if (!v191)
        {
          v154 = makeEntity(for:)(v153);
          goto LABEL_77;
        }
        v43 = (*(uint64_t (**)(void))(v191 + 232))();
        v192 = *(_QWORD *)(v43 + 16);
        swift_retain();
        MEMORY[0x22076D160](v192, 0);
        *(_QWORD *)(v43 + 16) = v153;
        MEMORY[0x22076D160](v153, v43);
        swift_release();
      }
      else
      {
        v43 = 0;
      }
LABEL_151:
      v193 = String.init(cString:)();
      v195 = v194;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v196 = static AnimationResource.codableActionTypeMap;
      v316 = v9;
      v304 = v152;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v197 = specialized __RawDictionaryStorage.find<A>(_:)(v193, v195);
        if ((v198 & 1) != 0)
        {
          v199 = (uint64_t *)(*(_QWORD *)(v196 + 56) + 56 * v197);
          v200 = *v199;
          v201 = v199[1];
          v203 = v199[2];
          v202 = v199[3];
          v204 = v199[4];
          v205 = v199[5];
          v312 = v199[6];
          swift_bridgeObjectRelease();
LABEL_158:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v374 = 0;
          BYTE8(v374) = 0;
          *(_QWORD *)&v375 = v41;
          *((_QWORD *)&v375 + 1) = v200;
          *(_QWORD *)&v376 = v201;
          *((_QWORD *)&v376 + 1) = v203;
          v284 = v204;
          *(_QWORD *)&v377 = v202;
          *((_QWORD *)&v377 + 1) = v204;
          *(_QWORD *)&v378 = v205;
          *((_QWORD *)&v378 + 1) = v312;
          specialized ActionEventData.action<A>()((uint64_t)&v372);
          v206 = v372 | (v373 << 16);
          if ((v206 & 0xFF0000) == 0x20000)
            goto LABEL_185;
          v324 = v372;
          v325 = BYTE2(v206) & 1;
          v326 = 1;
          v323 = v304;
          v327 = v43;
          v328 = 0;
          v329 = 0.0;
          v330 = 0.0;
          v332 = 0;
          v333 = 0.0;
          v331 = v316;
          v334 = 1;
          v335 = 0;
          v336 = 1;
          v337 = 0;
          v338 = 1;
          v341 = v376;
          v342 = v377;
          v343 = v378;
          v339 = v374;
          v340 = v375;
          v344 = v42;
          swift_retain();
          swift_retain();
          v319(&v323);
          swift_release();
          swift_release();
          swift_release();
          v345 = v304;
          v346 = v206;
          v347 = BYTE2(v206) & 1;
          v348 = 1;
          v349 = v43;
          v350 = 0;
          v351 = 0.0;
          v352 = 0.0;
          v354 = 0;
          v355 = 0.0;
          v353 = v316;
          v356 = 1;
          v357 = 0;
          v358 = 1;
          v359 = 0;
          v360 = 1;
          v361 = 0;
          v362 = 0;
          v363 = v41;
          v364 = v200;
          v365 = v201;
          v366 = v203;
          v367 = v202;
          v368 = v284;
          v369 = v205;
          v370 = v312;
LABEL_213:
          v371 = v42;
          goto LABEL_214;
        }
        swift_bridgeObjectRelease();
      }
      v200 = 0;
      v201 = 0;
      v203 = 0;
      v202 = 0;
      v204 = 0;
      v205 = 0;
      v312 = 0;
      goto LABEL_158;
    default:
      if (a4 != 128)
        goto LABEL_186;
      v17 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      v18 = *(_QWORD *)(a2 + 24);
      v19 = *(_QWORD *)(a2 + 40);
      v292 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
        v184 = specialized static Entity.entityInfoType(_:)(v17);
        if (v184)
        {
          v185 = (*(uint64_t (**)(void))(v184 + 232))();
          v186 = *(_QWORD *)(v185 + 16);
          swift_retain();
          MEMORY[0x22076D160](v186, 0);
          *(_QWORD *)(v185 + 16) = v17;
          MEMORY[0x22076D160](v17, v185);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v17);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v187 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v187 + 16) = v16;
      swift_beginAccess();
      swift_weakAssign();
      if (v19)
      {
        v188 = v18;
        if (REBindPointBoundComponent())
        {
          v189 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v190 = swift_dynamicCastClassUnconditional();
LABEL_142:
            v19 = v190;
            goto LABEL_204;
          }
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_240:
            __break(1u);
            JUMPOUT(0x21BB33E80);
          }
          v228 = specialized static Entity.entityInfoType(_:)(v189);
          if (!v228)
          {
            v190 = makeEntity(for:)(v189);
            goto LABEL_142;
          }
          v19 = (*(uint64_t (**)(void))(v228 + 232))();
          v229 = *(_QWORD *)(v19 + 16);
          swift_retain();
          MEMORY[0x22076D160](v229, 0);
          *(_QWORD *)(v19 + 16) = v189;
          MEMORY[0x22076D160](v189, v19);
          swift_release();
        }
        else
        {
          v19 = 0;
        }
      }
      else
      {
        v188 = v18;
      }
LABEL_204:
      v230 = String.init(cString:)();
      v232 = v231;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v233 = static AnimationResource.codableActionTypeMap;
      v322 = a5;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v234 = specialized __RawDictionaryStorage.find<A>(_:)(v230, v232);
        if ((v235 & 1) != 0)
        {
          v236 = (uint64_t *)(*(_QWORD *)(v233 + 56) + 56 * v234);
          v237 = *v236;
          v238 = v236[1];
          v240 = v236[2];
          v239 = v236[3];
          v241 = v236[6];
          v310 = v236[5];
          v313 = v236[4];
          swift_bridgeObjectRelease();
LABEL_211:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v374 = 0;
          BYTE8(v374) = 0;
          *(_QWORD *)&v375 = v188;
          *((_QWORD *)&v375 + 1) = v237;
          *(_QWORD *)&v376 = v238;
          *((_QWORD *)&v376 + 1) = v240;
          *(_QWORD *)&v377 = v239;
          *((_QWORD *)&v377 + 1) = v313;
          *(_QWORD *)&v378 = v310;
          *((_QWORD *)&v378 + 1) = v241;
          specialized ActionEventData.action<A>()((uint64_t)&v372);
          v242 = v372 | (v373 << 16);
          if ((v242 & 0xFF0000) == 0x20000)
            goto LABEL_185;
          v324 = v372;
          v325 = BYTE2(v242) & 1;
          v326 = 1;
          v323 = v187;
          v327 = v19;
          v328 = 0;
          v329 = 0.0;
          v330 = 0.0;
          v332 = 0;
          v333 = 0.0;
          v331 = v9;
          v334 = 1;
          v335 = 0;
          v336 = 1;
          v337 = 0;
          v338 = 1;
          v341 = v376;
          v342 = v377;
          v343 = v378;
          v339 = v374;
          v340 = v375;
          v266 = v238;
          v42 = v292;
          v344 = v292;
          swift_retain();
          swift_retain();
          swift_retain();
          v322(&v323);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v345 = v187;
          v346 = v242;
          v347 = BYTE2(v242) & 1;
          v348 = 1;
          v349 = v19;
          v350 = 0;
          v351 = 0.0;
          v352 = 0.0;
          v354 = 0;
          v355 = 0.0;
          v353 = v9;
          v356 = 1;
          v357 = 0;
          v358 = 1;
          v359 = 0;
          v360 = 1;
          v361 = 0;
          v362 = 0;
          v363 = v188;
          v364 = v237;
          v365 = v266;
          v366 = v240;
          v367 = v239;
          v368 = v313;
          v369 = v310;
          v370 = v241;
          goto LABEL_213;
        }
        swift_bridgeObjectRelease();
      }
      v237 = 0;
      v238 = 0;
      v240 = 0;
      v239 = 0;
      v310 = 0;
      v313 = 0;
      v241 = 0;
      goto LABEL_211;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t Entity;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  double v159;
  double v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  double v173;
  double v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  char v187;
  double v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  char v200;
  double v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  char v274;
  uint64_t v275;
  char v276;
  char v277;
  char v278;
  char v279;
  uint64_t v280;
  char v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  char v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t Strong;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  char v361;
  uint64_t v362;
  char v363;
  double v364;
  double v365;
  uint64_t v366;
  uint64_t v367;
  double v368;
  char v369;
  unint64_t v370;
  char v371;
  unint64_t v372;
  char v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char v387;
  char v388;
  uint64_t v389;
  char v390;
  double v391;
  double v392;
  uint64_t v393;
  uint64_t v394;
  double v395;
  char v396;
  unint64_t v397;
  char v398;
  unint64_t v399;
  char v400;
  uint64_t v401;
  char v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v341 = *(_QWORD *)(a2 + 40);
      v346 = *(_QWORD *)(a2 + 32);
      v309 = *(_QWORD *)(a2 + 64);
      v315 = *(_QWORD *)(a2 + 48);
      v10 = *(float *)(a2 + 72);
      v9 = *(float *)(a2 + 76);
      v320 = *(_BYTE *)(a2 + 80);
      v327 = *(_QWORD *)(a2 + 88);
      v332 = *(_QWORD *)(a2 + 96);
      v336 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_212;
      }
      v37 = specialized static Entity.entityInfoType(_:)(v7);
      if (v37)
      {
        v38 = (*(uint64_t (**)(void))(v37 + 232))();
        v39 = *(_QWORD *)(v38 + 16);
        swift_retain();
        MEMORY[0x22076D160](v39, 0);
        *(_QWORD *)(v38 + 16) = v7;
        MEMORY[0x22076D160](v7, v38);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v7);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v40 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v40 + 16) = v8;
      swift_beginAccess();
      swift_weakAssign();
      v41 = String.init(cString:)();
      v43 = v42;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v44 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_80;
      swift_bridgeObjectRetain();
      v45 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v43);
      if ((v46 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_80:
        v49 = 0;
        v48 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        goto LABEL_81;
      }
      v47 = (uint64_t *)(*(_QWORD *)(v44 + 56) + 56 * v45);
      v49 = *v47;
      v48 = v47[1];
      v50 = v47[2];
      v51 = v47[3];
      v52 = v47[4];
      v53 = v47[5];
      v54 = v47[6];
      swift_bridgeObjectRelease();
LABEL_81:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v346;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v341;
      *((_QWORD *)&v420 + 1) = v49;
      *(_QWORD *)&v421 = v48;
      *((_QWORD *)&v421 + 1) = v50;
      *(_QWORD *)&v422 = v51;
      *((_QWORD *)&v422 + 1) = v52;
      *(_QWORD *)&v423 = v53;
      *((_QWORD *)&v423 + 1) = v54;
      v295 = v50;
      v300 = v48;
      v285 = v54;
      v290 = v53;
      if (!v309 || !REBindPointBoundComponent())
      {
        v150 = 0;
        goto LABEL_87;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v149 = swift_dynamicCastClassUnconditional();
LABEL_85:
        v150 = v149;
        goto LABEL_87;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_220;
      v242 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v242)
      {
        v149 = makeEntity(for:)(Entity);
        goto LABEL_85;
      }
      v150 = (*(uint64_t (**)(void))(v242 + 232))();
      v243 = *(_QWORD *)(v150 + 16);
      swift_retain();
      MEMORY[0x22076D160](v243, 0);
      *(_QWORD *)(v150 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v150);
      swift_release();
LABEL_87:
      specialized ActionEventData.action<A>()((uint64_t)&v412);
      v151 = v416;
      if (!v416)
        goto LABEL_201;
      v152 = v417;
      v153 = v415;
      v311 = v52;
      v154 = v414;
      v280 = v49;
      v283 = v51;
      v155 = v413;
      v156 = v412;
      v157 = v418 & 1;
      v277 = v418 & 1;
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v156, v155, v154, v153, v151);
      v158 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAudioAction>);
      v354 = v156;
      v355 = v155;
      v159 = v10;
      v356 = v154 & 1;
      v160 = v9;
      v357 = v153;
      v358 = v151;
      v359 = v152;
      v360 = v157;
      v273 = v158 & 1;
      v361 = v158 & 1;
      v353 = v40;
      v362 = v150;
      v363 = v320;
      v364 = v159;
      v365 = v160;
      v366 = Strong;
      v367 = v336;
      v368 = -1.0;
      v369 = 0;
      v370 = v327;
      v371 = 0;
      v372 = v332;
      v373 = 0;
      v376 = v421;
      v377 = v422;
      v378 = v423;
      v374 = v419;
      v375 = v420;
      v379 = v315;
      swift_retain();
      swift_retain();
      a5(&v353);
      outlined consume of SetEntityPropertyAction<Transform>?(v156, v155, v154, v153, v151);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v380 = v40;
      v381 = v156;
      v382 = v155;
      v383 = v154 & 1;
      v384 = v153;
      v385 = v151;
      v386 = v152;
      v387 = v277;
      v388 = v273;
      v389 = v150;
      v390 = v320;
      v391 = v159;
      v392 = v160;
      v393 = Strong;
      v394 = v336;
      v395 = -1.0;
      v396 = 0;
      v161 = v327;
LABEL_100:
      v397 = v161;
      v398 = 0;
      v399 = v332;
      v400 = 0;
      v401 = v346;
      v402 = 0;
      v403 = v341;
      v404 = v280;
      v405 = v300;
      v406 = v295;
      v407 = v283;
      v408 = v311;
      v409 = v290;
      v410 = v285;
      v176 = v315;
LABEL_200:
      v411 = v176;
      outlined release of ActionEvent<PlayAudioAction>((uint64_t)&v380);
      return 0;
    case 2:
      v16 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v341 = *(_QWORD *)(a2 + 40);
      v346 = *(_QWORD *)(a2 + 32);
      v18 = *(float *)(a2 + 56);
      v332 = *(_QWORD *)(a2 + 64);
      v338 = *(_QWORD *)(a2 + 48);
      v328 = *(_QWORD *)(a2 + 72);
      v310 = *(_QWORD *)(a2 + 88);
      v315 = *(_QWORD *)(a2 + 80);
      v20 = *(float *)(a2 + 96);
      v19 = *(float *)(a2 + 100);
      v321 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_212:
          __break(1u);
          goto LABEL_213;
        }
        v55 = specialized static Entity.entityInfoType(_:)(v16);
        if (v55)
        {
          v56 = (*(uint64_t (**)(void))(v55 + 232))();
          v57 = *(_QWORD *)(v56 + 16);
          swift_retain();
          MEMORY[0x22076D160](v57, 0);
          *(_QWORD *)(v56 + 16) = v16;
          MEMORY[0x22076D160](v16, v56);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v16);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v58 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v58 + 16) = v17;
      swift_beginAccess();
      swift_weakAssign();
      v59 = String.init(cString:)();
      v61 = v60;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v62 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_91;
      swift_bridgeObjectRetain();
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v61);
      if ((v64 & 1) != 0)
      {
        v65 = (uint64_t *)(*(_QWORD *)(v62 + 56) + 56 * v63);
        v67 = *v65;
        v66 = v65[1];
        v68 = v65[2];
        v69 = v65[3];
        v70 = v65[4];
        v71 = v65[5];
        v72 = v65[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_91:
        v67 = 0;
        v66 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v346;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v341;
      *((_QWORD *)&v420 + 1) = v67;
      *(_QWORD *)&v421 = v66;
      *((_QWORD *)&v421 + 1) = v68;
      *(_QWORD *)&v422 = v69;
      *((_QWORD *)&v422 + 1) = v70;
      *(_QWORD *)&v423 = v71;
      *((_QWORD *)&v423 + 1) = v72;
      v295 = v68;
      v300 = v66;
      v285 = v72;
      v290 = v71;
      if (v310 && REBindPointBoundComponent())
      {
        v162 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v163 = swift_dynamicCastClassUnconditional();
LABEL_96:
          v164 = v163;
          goto LABEL_98;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v244 = specialized static Entity.entityInfoType(_:)(v162);
        if (!v244)
        {
          v163 = makeEntity(for:)(v162);
          goto LABEL_96;
        }
        v164 = (*(uint64_t (**)(void))(v244 + 232))();
        v245 = *(_QWORD *)(v164 + 16);
        swift_retain();
        MEMORY[0x22076D160](v245, 0);
        *(_QWORD *)(v164 + 16) = v162;
        MEMORY[0x22076D160](v162, v164);
        swift_release();
      }
      else
      {
        v164 = 0;
      }
LABEL_98:
      specialized ActionEventData.action<A>()((uint64_t)&v412);
      v165 = v416;
      if (v416)
      {
        v166 = v417;
        v167 = v415;
        v311 = v70;
        v168 = v414;
        v280 = v67;
        v283 = v69;
        v169 = v413;
        v170 = v412;
        v171 = v418 & 1;
        v278 = v418 & 1;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v170, v169, v168, v167, v165);
        v172 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAudioAction>);
        v354 = v170;
        v355 = v169;
        v173 = v20;
        v356 = v168 & 1;
        v174 = v19;
        v175 = v18;
        v357 = v167;
        v358 = v165;
        v359 = v166;
        v360 = v171;
        v274 = v172 & 1;
        v361 = v172 & 1;
        v353 = v58;
        v362 = v164;
        v363 = v321;
        v364 = v173;
        v365 = v174;
        v366 = Strong;
        v367 = v328;
        v368 = v175;
        v369 = 0;
        v370 = v338;
        v371 = 0;
        v372 = v332;
        v373 = 0;
        v376 = v421;
        v377 = v422;
        v378 = v423;
        v374 = v419;
        v375 = v420;
        v379 = v315;
        swift_retain();
        swift_retain();
        a5(&v353);
        outlined consume of SetEntityPropertyAction<Transform>?(v170, v169, v168, v167, v165);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v380 = v58;
        v381 = v170;
        v382 = v169;
        v383 = v168 & 1;
        v384 = v167;
        v385 = v165;
        v386 = v166;
        v387 = v278;
        v388 = v274;
        v389 = v164;
        v390 = v321;
        v391 = v173;
        v392 = v174;
        v393 = Strong;
        v394 = v328;
        v395 = v175;
        v396 = 0;
        v161 = v338;
        goto LABEL_100;
      }
LABEL_201:
      swift_release();
      swift_release();
      swift_release();
LABEL_202:
      swift_release();
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_202;
    case 4:
      v21 = *(_QWORD *)a2;
      v22 = *(_QWORD *)(a2 + 8);
      v342 = *(_QWORD *)(a2 + 40);
      v347 = *(_QWORD *)(a2 + 32);
      v339 = *(_QWORD *)(a2 + 56);
      v322 = *(_QWORD *)(a2 + 64);
      v329 = *(_QWORD *)(a2 + 48);
      v24 = *(float *)(a2 + 72);
      v23 = *(float *)(a2 + 76);
      v333 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v73 = specialized static Entity.entityInfoType(_:)(v21);
        if (v73)
        {
          v74 = (*(uint64_t (**)(void))(v73 + 232))();
          v75 = *(_QWORD *)(v74 + 16);
          swift_retain();
          MEMORY[0x22076D160](v75, 0);
          *(_QWORD *)(v74 + 16) = v21;
          MEMORY[0x22076D160](v21, v74);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v21);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v76 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v76 + 16) = v22;
      swift_beginAccess();
      swift_weakAssign();
      v77 = String.init(cString:)();
      v79 = v78;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v80 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_103;
      swift_bridgeObjectRetain();
      v81 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v79);
      if ((v82 & 1) != 0)
      {
        v83 = (uint64_t *)(*(_QWORD *)(v80 + 56) + 56 * v81);
        v85 = *v83;
        v84 = v83[1];
        v86 = v83[2];
        v87 = v83[3];
        v88 = v83[4];
        v89 = v83[5];
        v90 = v83[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_103:
        v85 = 0;
        v84 = 0;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v347;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v342;
      *((_QWORD *)&v420 + 1) = v85;
      *(_QWORD *)&v421 = v84;
      *((_QWORD *)&v421 + 1) = v86;
      *(_QWORD *)&v422 = v87;
      *((_QWORD *)&v422 + 1) = v88;
      *(_QWORD *)&v423 = v89;
      *((_QWORD *)&v423 + 1) = v90;
      v305 = v86;
      v312 = v84;
      v296 = v90;
      v301 = v89;
      if (v322 && REBindPointBoundComponent())
      {
        v177 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v178 = swift_dynamicCastClassUnconditional();
LABEL_108:
          v179 = v178;
          goto LABEL_110;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v246 = specialized static Entity.entityInfoType(_:)(v177);
        if (!v246)
        {
          v178 = makeEntity(for:)(v177);
          goto LABEL_108;
        }
        v179 = (*(uint64_t (**)(void))(v246 + 232))();
        v247 = *(_QWORD *)(v179 + 16);
        swift_retain();
        MEMORY[0x22076D160](v247, 0);
        *(_QWORD *)(v179 + 16) = v177;
        MEMORY[0x22076D160](v177, v179);
        swift_release();
      }
      else
      {
        v179 = 0;
      }
LABEL_110:
      specialized ActionEventData.action<A>()((uint64_t)&v412);
      v180 = v416;
      if (v416)
      {
        v275 = v179;
        v181 = v417;
        v182 = v415;
        v324 = v88;
        v183 = v414;
        v286 = v85;
        v291 = v87;
        v184 = v413;
        v185 = v412;
        v186 = v418 & 1;
        v281 = v418 & 1;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v185, v184, v183, v182, v180);
        v187 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAudioAction>);
        v354 = v185;
        v355 = v184;
        v188 = v24;
        v356 = v183 & 1;
        v189 = v23;
        v357 = v182;
        v358 = v180;
        v359 = v181;
        v360 = v186;
        v279 = v187 & 1;
        v361 = v187 & 1;
        v353 = v76;
        v362 = v275;
        v363 = v333;
        v364 = v188;
        v365 = v189;
        v366 = Strong;
        v367 = v339;
        v368 = -1.0;
        v369 = 0;
        v370 = 0xBFF0000000000000;
        v371 = 0;
        v372 = 0xBFF0000000000000;
        v373 = 0;
        v376 = v421;
        v377 = v422;
        v378 = v423;
        v374 = v419;
        v375 = v420;
        v379 = v329;
        swift_retain();
        swift_retain();
        a5(&v353);
        outlined consume of SetEntityPropertyAction<Transform>?(v185, v184, v183, v182, v180);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v380 = v76;
        v381 = v185;
        v382 = v184;
        v383 = v183 & 1;
        v384 = v182;
        v385 = v180;
        v386 = v181;
        v387 = v281;
        v388 = v279;
        v389 = v275;
        v390 = v333;
        v391 = v188;
        v392 = v189;
        v393 = Strong;
        v394 = v339;
        v395 = -1.0;
        v396 = 0;
        v397 = 0xBFF0000000000000;
        v398 = 0;
        v399 = 0xBFF0000000000000;
        v400 = 0;
        v401 = v347;
        v402 = 0;
        v403 = v342;
        v404 = v286;
        v405 = v312;
        v406 = v305;
        v407 = v291;
        v408 = v324;
        v409 = v301;
        v410 = v296;
        v176 = v329;
        goto LABEL_200;
      }
      goto LABEL_201;
    case 8:
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      v343 = *(_QWORD *)(a2 + 40);
      v348 = *(_QWORD *)(a2 + 32);
      v316 = *(_QWORD *)(a2 + 56);
      v323 = *(_QWORD *)(a2 + 48);
      v28 = *(float *)(a2 + 64);
      v27 = *(float *)(a2 + 68);
      v330 = *(_BYTE *)(a2 + 72);
      v334 = *(_QWORD *)(a2 + 80);
      v340 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v91 = specialized static Entity.entityInfoType(_:)(v25);
        if (v91)
        {
          v92 = (*(uint64_t (**)(void))(v91 + 232))();
          v93 = *(_QWORD *)(v92 + 16);
          swift_retain();
          MEMORY[0x22076D160](v93, 0);
          *(_QWORD *)(v92 + 16) = v25;
          MEMORY[0x22076D160](v25, v92);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v25);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v94 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v94 + 16) = v26;
      swift_beginAccess();
      swift_weakAssign();
      v95 = String.init(cString:)();
      v97 = v96;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v98 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_114;
      swift_bridgeObjectRetain();
      v99 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v97);
      if ((v100 & 1) != 0)
      {
        v101 = (uint64_t *)(*(_QWORD *)(v98 + 56) + 56 * v99);
        v103 = *v101;
        v102 = v101[1];
        v104 = v101[2];
        v105 = v101[3];
        v106 = v101[4];
        v107 = v101[5];
        v108 = v101[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_114:
        v103 = 0;
        v102 = 0;
        v104 = 0;
        v105 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v348;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v343;
      *((_QWORD *)&v420 + 1) = v103;
      *(_QWORD *)&v421 = v102;
      *((_QWORD *)&v421 + 1) = v104;
      *(_QWORD *)&v422 = v105;
      *((_QWORD *)&v422 + 1) = v106;
      *(_QWORD *)&v423 = v107;
      *((_QWORD *)&v423 + 1) = v108;
      v302 = v104;
      v306 = v102;
      v297 = v105;
      v284 = v108;
      v287 = v107;
      if (v316 && REBindPointBoundComponent())
      {
        v190 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v191 = swift_dynamicCastClassUnconditional();
LABEL_119:
          v192 = v191;
          goto LABEL_121;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v248 = specialized static Entity.entityInfoType(_:)(v190);
        if (!v248)
        {
          v191 = makeEntity(for:)(v190);
          goto LABEL_119;
        }
        v192 = (*(uint64_t (**)(void))(v248 + 232))();
        v249 = *(_QWORD *)(v192 + 16);
        swift_retain();
        MEMORY[0x22076D160](v249, 0);
        *(_QWORD *)(v192 + 16) = v190;
        MEMORY[0x22076D160](v190, v192);
        swift_release();
      }
      else
      {
        v192 = 0;
      }
LABEL_121:
      specialized ActionEventData.action<A>()((uint64_t)&v412);
      v193 = v416;
      if (v416)
      {
        v194 = v417;
        v195 = v415;
        v196 = v414;
        v317 = v103;
        v197 = v413;
        v198 = v412;
        v199 = v418 & 1;
        v282 = v418 & 1;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v198, v197, v196, v195, v193);
        v200 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAudioAction>);
        v354 = v198;
        v355 = v197;
        v201 = v28;
        v356 = v196 & 1;
        v202 = v27;
        v357 = v195;
        v358 = v193;
        v359 = v194;
        v360 = v199;
        v276 = v200 & 1;
        v361 = v200 & 1;
        v353 = v94;
        v362 = v192;
        v363 = v330;
        v364 = v201;
        v365 = v202;
        v367 = 0;
        v368 = 0.0;
        v366 = Strong;
        v369 = 1;
        v370 = v334;
        v371 = 0;
        v372 = v340;
        v373 = 0;
        v376 = v421;
        v377 = v422;
        v378 = v423;
        v374 = v419;
        v375 = v420;
        v379 = v323;
        swift_retain();
        swift_retain();
        a5(&v353);
        outlined consume of SetEntityPropertyAction<Transform>?(v198, v197, v196, v195, v193);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v380 = v94;
        v381 = v198;
        v382 = v197;
        v383 = v196 & 1;
        v384 = v195;
        v385 = v193;
        v386 = v194;
        v387 = v282;
        v388 = v276;
        v389 = v192;
        v390 = v330;
        v391 = v201;
        v392 = v202;
        v395 = 0.0;
        v393 = Strong;
        v394 = 0;
        v396 = 1;
        v397 = v334;
        v398 = 0;
        v399 = v340;
        v400 = 0;
        v401 = v348;
        v402 = 0;
        v403 = v343;
        v404 = v317;
        v405 = v306;
        v406 = v302;
        v407 = v297;
        v408 = v106;
        v409 = v287;
        v410 = v284;
        v176 = v323;
        goto LABEL_200;
      }
      goto LABEL_201;
    case 16:
      v29 = *(_QWORD *)a2;
      v30 = *(_QWORD *)(a2 + 8);
      v344 = *(_QWORD *)(a2 + 32);
      v349 = *(_QWORD *)(a2 + 40);
      v335 = *(_QWORD *)(a2 + 56);
      v337 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v109 = specialized static Entity.entityInfoType(_:)(v29);
        if (v109)
        {
          v110 = (*(uint64_t (**)(void))(v109 + 232))();
          v111 = *(_QWORD *)(v110 + 16);
          swift_retain();
          MEMORY[0x22076D160](v111, 0);
          *(_QWORD *)(v110 + 16) = v29;
          MEMORY[0x22076D160](v29, v110);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v29);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v112 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v112 + 16) = v30;
      swift_beginAccess();
      swift_weakAssign();
      v113 = String.init(cString:)();
      v115 = v114;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v116 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_125;
      swift_bridgeObjectRetain();
      v117 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v115);
      if ((v118 & 1) != 0)
      {
        v119 = (uint64_t *)(*(_QWORD *)(v116 + 56) + 56 * v117);
        v120 = *v119;
        v121 = v119[1];
        v123 = v119[2];
        v122 = v119[3];
        v124 = v119[4];
        v125 = v119[5];
        v126 = v119[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_125:
        v120 = 0;
        v121 = 0;
        v123 = 0;
        v122 = 0;
        v124 = 0;
        v125 = 0;
        v126 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = 0;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v349;
      *((_QWORD *)&v420 + 1) = v120;
      *(_QWORD *)&v421 = v121;
      *((_QWORD *)&v421 + 1) = v123;
      *(_QWORD *)&v422 = v122;
      *((_QWORD *)&v422 + 1) = v124;
      *(_QWORD *)&v423 = v125;
      *((_QWORD *)&v423 + 1) = v126;
      v318 = v124;
      v325 = v122;
      v307 = v126;
      v313 = v125;
      if (!v335 || !REBindPointBoundComponent())
        goto LABEL_138;
      v203 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_136;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_176;
      __break(1u);
LABEL_131:
      swift_bridgeObjectRelease();
LABEL_132:
      v120 = 0;
      v121 = 0;
      v123 = 0;
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v140 = 0;
LABEL_133:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = 0;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v349;
      *((_QWORD *)&v420 + 1) = v120;
      *(_QWORD *)&v421 = v121;
      *((_QWORD *)&v421 + 1) = v123;
      *(_QWORD *)&v422 = v137;
      *((_QWORD *)&v422 + 1) = v138;
      *(_QWORD *)&v423 = v139;
      *((_QWORD *)&v423 + 1) = v140;
      v318 = v138;
      v325 = v137;
      v307 = v140;
      v313 = v139;
      if (v335 && REBindPointBoundComponent())
      {
        v203 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_136:
          type metadata accessor for Entity();
          v204 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_224:
            __break(1u);
            goto LABEL_225;
          }
LABEL_176:
          v250 = specialized static Entity.entityInfoType(_:)(v203);
          if (v250)
          {
            v205 = (*(uint64_t (**)(void))(v250 + 232))();
            v251 = *(_QWORD *)(v205 + 16);
            swift_retain();
            MEMORY[0x22076D160](v251, 0);
            *(_QWORD *)(v205 + 16) = v203;
            MEMORY[0x22076D160](v203, v205);
            swift_release();
            goto LABEL_139;
          }
          v204 = makeEntity(for:)(v203);
        }
        v205 = v204;
      }
      else
      {
LABEL_138:
        v205 = 0;
      }
LABEL_139:
      specialized ActionEventData.action<A>()((uint64_t)&v412);
      v206 = v416;
      if (!v416)
        goto LABEL_201;
      v207 = v417;
      v303 = v121;
      v208 = v415;
      v209 = v414;
      v210 = v205;
      v211 = v413;
      v212 = v412;
      v292 = v418 & 1;
      v354 = v412;
      v355 = v413;
      v288 = v414 & 1;
      v356 = v414 & 1;
      v357 = v415;
      v358 = v416;
      v359 = v417;
      v360 = v418 & 1;
      v361 = 1;
      v353 = v112;
      v362 = v210;
      v363 = 0;
      v364 = 0.0;
      v365 = 0.0;
      v367 = 0;
      v368 = 0.0;
      v366 = Strong;
      v369 = 1;
      v370 = v344;
      v371 = 0;
      v372 = 0;
      v373 = 1;
      v376 = v421;
      v377 = v422;
      v378 = v423;
      v374 = v419;
      v375 = v420;
      v379 = v337;
      swift_retain();
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v212, v211, v209, v208, v206);
      swift_retain();
      a5(&v353);
      outlined consume of SetEntityPropertyAction<Transform>?(v212, v211, v209, v208, v206);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v380 = v112;
      v381 = v212;
      v382 = v211;
      v383 = v288;
      v384 = v208;
      v385 = v206;
      v386 = v207;
      v387 = v292;
      v388 = 1;
      v389 = v210;
      v390 = 0;
      v392 = 0.0;
      v391 = 0.0;
      v395 = 0.0;
      v393 = Strong;
      v394 = 0;
      v396 = 1;
      v397 = v344;
      v398 = 0;
      v399 = 0;
      v400 = 1;
      v401 = 0;
      v402 = 0;
      v403 = v349;
      v404 = v120;
      v405 = v303;
      v406 = v123;
      v407 = v325;
      v408 = v318;
      v409 = v313;
      v213 = v307;
LABEL_199:
      v410 = v213;
      v176 = v337;
      goto LABEL_200;
    case 32:
      v31 = *(_QWORD *)a2;
      v32 = *(_QWORD *)(a2 + 8);
      v344 = *(_QWORD *)(a2 + 32);
      v349 = *(_QWORD *)(a2 + 40);
      v335 = *(_QWORD *)(a2 + 56);
      v337 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v127 = specialized static Entity.entityInfoType(_:)(v31);
        if (v127)
        {
          v128 = (*(uint64_t (**)(void))(v127 + 232))();
          v129 = *(_QWORD *)(v128 + 16);
          swift_retain();
          MEMORY[0x22076D160](v129, 0);
          *(_QWORD *)(v128 + 16) = v31;
          MEMORY[0x22076D160](v31, v128);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v31);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v112 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v112 + 16) = v32;
      swift_beginAccess();
      swift_weakAssign();
      v130 = String.init(cString:)();
      v132 = v131;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v133 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_132;
      swift_bridgeObjectRetain();
      v134 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v132);
      if ((v135 & 1) == 0)
        goto LABEL_131;
      v136 = (uint64_t *)(*(_QWORD *)(v133 + 56) + 56 * v134);
      v120 = *v136;
      v121 = v136[1];
      v123 = v136[2];
      v137 = v136[3];
      v138 = v136[4];
      v139 = v136[5];
      v140 = v136[6];
      swift_bridgeObjectRelease();
      goto LABEL_133;
    case 64:
      v33 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      v35 = *(_QWORD *)(a2 + 24);
      v36 = *(_QWORD *)(a2 + 40);
      v337 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v141 = specialized static Entity.entityInfoType(_:)(v33);
        if (v141)
        {
          v142 = (*(uint64_t (**)(void))(v141 + 232))();
          v143 = *(_QWORD *)(v142 + 16);
          swift_retain();
          MEMORY[0x22076D160](v143, 0);
          *(_QWORD *)(v142 + 16) = v33;
          MEMORY[0x22076D160](v33, v142);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v33);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v144 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v144 + 16) = v34;
      swift_beginAccess();
      swift_weakAssign();
      if (v36 && REBindPointBoundComponent())
      {
        v145 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v146 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v147 = v146;
          goto LABEL_154;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v221 = specialized static Entity.entityInfoType(_:)(v145);
        if (!v221)
        {
          v146 = makeEntity(for:)(v145);
          goto LABEL_77;
        }
        v147 = (*(uint64_t (**)(void))(v221 + 232))();
        v222 = *(_QWORD *)(v147 + 16);
        swift_retain();
        MEMORY[0x22076D160](v222, 0);
        *(_QWORD *)(v147 + 16) = v145;
        MEMORY[0x22076D160](v145, v147);
        swift_release();
      }
      else
      {
        v147 = 0;
      }
LABEL_154:
      v223 = String.init(cString:)();
      v225 = v224;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v226 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v227 = specialized __RawDictionaryStorage.find<A>(_:)(v223, v225);
        if ((v228 & 1) != 0)
        {
          v229 = (uint64_t *)(*(_QWORD *)(v226 + 56) + 56 * v227);
          v230 = *v229;
          v231 = v229[1];
          v232 = v229[2];
          v233 = v229[3];
          v234 = v229[4];
          v345 = v229[6];
          v350 = v229[5];
          swift_bridgeObjectRelease();
LABEL_161:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v419 = 0;
          BYTE8(v419) = 0;
          *(_QWORD *)&v420 = v35;
          *((_QWORD *)&v420 + 1) = v230;
          *(_QWORD *)&v421 = v231;
          *((_QWORD *)&v421 + 1) = v232;
          *(_QWORD *)&v422 = v233;
          *((_QWORD *)&v422 + 1) = v234;
          v331 = v234;
          *(_QWORD *)&v423 = v350;
          *((_QWORD *)&v423 + 1) = v345;
          specialized ActionEventData.action<A>()((uint64_t)&v412);
          v235 = v416;
          if (!v416)
            goto LABEL_201;
          v319 = v232;
          v326 = v231;
          v236 = v417;
          v237 = v147;
          v238 = v415;
          v239 = v414;
          v308 = v35;
          v314 = v233;
          v240 = v413;
          v241 = v412;
          v304 = v230;
          v298 = v418 & 1;
          v354 = v412;
          v355 = v413;
          v293 = v414 & 1;
          v356 = v414 & 1;
          v357 = v415;
          v358 = v416;
          v359 = v417;
          v360 = v418 & 1;
          v361 = 1;
          v353 = v144;
          v362 = v237;
          v363 = 0;
          v364 = 0.0;
          v365 = 0.0;
          v367 = 0;
          v368 = 0.0;
          v366 = Strong;
          v369 = 1;
          v370 = 0;
          v371 = 1;
          v372 = 0;
          v373 = 1;
          v376 = v421;
          v377 = v422;
          v378 = v423;
          v374 = v419;
          v375 = v420;
          v379 = v337;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v241, v240, v239, v238, v235);
          swift_retain();
          a5(&v353);
          outlined consume of SetEntityPropertyAction<Transform>?(v241, v240, v239, v238, v235);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v380 = v144;
          v381 = v241;
          v382 = v240;
          v383 = v293;
          v384 = v238;
          v385 = v235;
          v386 = v236;
          v387 = v298;
          v388 = 1;
          v389 = v237;
          v390 = 0;
          v392 = 0.0;
          v391 = 0.0;
          v395 = 0.0;
          v393 = Strong;
LABEL_198:
          v394 = 0;
          v396 = 1;
          v397 = 0;
          v398 = 1;
          v399 = 0;
          v400 = 1;
          v401 = 0;
          v402 = 0;
          v403 = v308;
          v404 = v304;
          v405 = v326;
          v406 = v319;
          v407 = v314;
          v408 = v331;
          v409 = v350;
          v213 = v345;
          goto LABEL_199;
        }
        swift_bridgeObjectRelease();
      }
      v230 = 0;
      v231 = 0;
      v232 = 0;
      v233 = 0;
      v234 = 0;
      v345 = 0;
      v350 = 0;
      goto LABEL_161;
    default:
      if (a4 != 128)
        goto LABEL_202;
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_QWORD *)(a2 + 40);
      v337 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v214 = specialized static Entity.entityInfoType(_:)(v12);
        if (v214)
        {
          v215 = (*(uint64_t (**)(void))(v214 + 232))();
          v216 = *(_QWORD *)(v215 + 16);
          swift_retain();
          MEMORY[0x22076D160](v216, 0);
          *(_QWORD *)(v215 + 16) = v12;
          MEMORY[0x22076D160](v12, v215);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v12);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v217 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v217 + 16) = v13;
      swift_beginAccess();
      swift_weakAssign();
      if (v15 && REBindPointBoundComponent())
      {
        v218 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v219 = swift_dynamicCastClassUnconditional();
LABEL_149:
          v220 = v219;
          goto LABEL_189;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          JUMPOUT(0x21BB364DCLL);
        }
        v252 = specialized static Entity.entityInfoType(_:)(v218);
        if (!v252)
        {
          v219 = makeEntity(for:)(v218);
          goto LABEL_149;
        }
        v220 = (*(uint64_t (**)(void))(v252 + 232))();
        v253 = *(_QWORD *)(v220 + 16);
        swift_retain();
        MEMORY[0x22076D160](v253, 0);
        *(_QWORD *)(v220 + 16) = v218;
        MEMORY[0x22076D160](v218, v220);
        swift_release();
      }
      else
      {
        v220 = 0;
      }
LABEL_189:
      v254 = String.init(cString:)();
      v256 = v255;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v257 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v258 = specialized __RawDictionaryStorage.find<A>(_:)(v254, v256);
        if ((v259 & 1) != 0)
        {
          v260 = (uint64_t *)(*(_QWORD *)(v257 + 56) + 56 * v258);
          v261 = *v260;
          v262 = v260[1];
          v263 = v260[2];
          v264 = v260[3];
          v265 = v260[4];
          v345 = v260[6];
          v350 = v260[5];
          swift_bridgeObjectRelease();
LABEL_196:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v419 = 0;
          BYTE8(v419) = 0;
          *(_QWORD *)&v420 = v14;
          *((_QWORD *)&v420 + 1) = v261;
          *(_QWORD *)&v421 = v262;
          *((_QWORD *)&v421 + 1) = v263;
          *(_QWORD *)&v422 = v264;
          *((_QWORD *)&v422 + 1) = v265;
          v331 = v265;
          *(_QWORD *)&v423 = v350;
          *((_QWORD *)&v423 + 1) = v345;
          specialized ActionEventData.action<A>()((uint64_t)&v412);
          v266 = v416;
          if (!v416)
            goto LABEL_201;
          v319 = v263;
          v326 = v262;
          v267 = v220;
          v268 = v414;
          v308 = v14;
          v314 = v264;
          v269 = v413;
          v270 = v412;
          v304 = v261;
          v299 = v418 & 1;
          v354 = v412;
          v355 = v413;
          v289 = v414;
          v294 = v414 & 1;
          v356 = v414 & 1;
          v357 = v415;
          v358 = v416;
          v271 = v415;
          v359 = v417;
          v272 = v417;
          v360 = v418 & 1;
          v361 = 1;
          v353 = v217;
          v362 = v267;
          v363 = 0;
          v364 = 0.0;
          v365 = 0.0;
          v367 = 0;
          v368 = 0.0;
          v366 = Strong;
          v369 = 1;
          v370 = 0;
          v371 = 1;
          v372 = 0;
          v373 = 1;
          v376 = v421;
          v377 = v422;
          v378 = v423;
          v374 = v419;
          v375 = v420;
          v379 = v337;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v270, v269, v268, v271, v266);
          swift_retain();
          a5(&v353);
          swift_release();
          outlined consume of SetEntityPropertyAction<Transform>?(v270, v269, v289, v271, v266);
          swift_release();
          swift_release();
          swift_release();
          v380 = v217;
          v381 = v270;
          v382 = v269;
          v383 = v294;
          v384 = v271;
          v385 = v266;
          v386 = v272;
          v387 = v299;
          v388 = 1;
          v389 = v267;
          v390 = 0;
          v392 = 0.0;
          v391 = 0.0;
          v395 = 0.0;
          v393 = Strong;
          goto LABEL_198;
        }
        swift_bridgeObjectRelease();
      }
      v261 = 0;
      v262 = 0;
      v263 = 0;
      v264 = 0;
      v265 = 0;
      v345 = 0;
      v350 = 0;
      goto LABEL_196;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t Entity;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  double v168;
  double v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  double v182;
  double v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  double v196;
  double v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  double v208;
  double v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  char v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t Strong;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char v389;
  uint64_t v390;
  char v391;
  double v392;
  double v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  char v397;
  unint64_t v398;
  char v399;
  unint64_t v400;
  char v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char v416;
  uint64_t v417;
  char v418;
  double v419;
  double v420;
  uint64_t v421;
  uint64_t v422;
  double v423;
  char v424;
  unint64_t v425;
  char v426;
  unint64_t v427;
  char v428;
  uint64_t v429;
  char v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v365 = *(_QWORD *)(a2 + 40);
      v372 = *(_QWORD *)(a2 + 32);
      v316 = *(_QWORD *)(a2 + 48);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v322 = *(_BYTE *)(a2 + 80);
      v328 = *(_QWORD *)(a2 + 88);
      v336 = *(_QWORD *)(a2 + 96);
      v342 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_221;
      }
      v40 = specialized static Entity.entityInfoType(_:)(v7);
      if (v40)
      {
        v41 = (*(uint64_t (**)(void))(v40 + 232))();
        v42 = *(_QWORD *)(v41 + 16);
        swift_retain();
        MEMORY[0x22076D160](v42, 0);
        *(_QWORD *)(v41 + 16) = v7;
        MEMORY[0x22076D160](v7, v41);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v7);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v43 = swift_allocObject();
      swift_weakInit();
      v304 = v43;
      *(_QWORD *)(v43 + 16) = v8;
      swift_beginAccess();
      swift_weakAssign();
      v44 = String.init(cString:)();
      v46 = v45;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v47 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_85;
      swift_bridgeObjectRetain();
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v46);
      if ((v49 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_85:
        v353 = 0;
        v360 = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v55 = 0;
        v54 = 0;
        goto LABEL_86;
      }
      v50 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 56 * v48);
      v51 = v50[2];
      v353 = *v50;
      v360 = v50[1];
      v52 = v50[3];
      v53 = v50[4];
      v55 = v50[5];
      v54 = v50[6];
      swift_bridgeObjectRelease();
LABEL_86:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = v372;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v365;
      *((_QWORD *)&v448 + 1) = v353;
      *(_QWORD *)&v449 = v360;
      *((_QWORD *)&v449 + 1) = v51;
      *(_QWORD *)&v450 = v52;
      *((_QWORD *)&v450 + 1) = v53;
      *(_QWORD *)&v451 = v55;
      *((_QWORD *)&v451 + 1) = v54;
      v296 = v52;
      v299 = v51;
      v291 = v54;
      v293 = v55;
      if (!v9 || !REBindPointBoundComponent())
      {
        v159 = 0;
        goto LABEL_92;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v158 = swift_dynamicCastClassUnconditional();
LABEL_90:
        v159 = v158;
        goto LABEL_92;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_229;
      v232 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v232)
      {
        v158 = makeEntity(for:)(Entity);
        goto LABEL_90;
      }
      v159 = (*(uint64_t (**)(void))(v232 + 232))();
      v233 = *(_QWORD *)(v159 + 16);
      swift_retain();
      MEMORY[0x22076D160](v233, 0);
      *(_QWORD *)(v159 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v159);
      swift_release();
LABEL_92:
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v160 = v444;
      if (!v444)
        goto LABEL_208;
      v161 = v446;
      v162 = v445;
      v163 = v443;
      v164 = v442;
      v165 = v441;
      v288 = v53;
      v166 = v440;
      v283 = v442;
      v286 = v440;
      swift_retain();
      outlined copy of SetEntityPropertyAction<String>?(v166, v165, v164, v163, v160);
      v167 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<String>>);
      v403 = v448;
      v404 = v449;
      v405 = v450;
      v406 = v451;
      v168 = v10;
      v169 = v11;
      v384 = v283 & 1;
      v385 = v163;
      v386 = v160;
      v387 = v162;
      v388 = v161;
      v281 = v167 & 1;
      v389 = v167 & 1;
      v382 = v286;
      v383 = v165;
      v381 = v304;
      v390 = v159;
      v391 = v322;
      v392 = v168;
      v393 = v169;
      v394 = Strong;
      v395 = v342;
      v396 = -1.0;
      v397 = 0;
      v398 = v328;
      v399 = 0;
      v400 = v336;
      v401 = 0;
      v402 = v447;
      v407 = v316;
      swift_retain();
      swift_retain();
      a5(&v381);
      outlined consume of SetEntityPropertyAction<String>?(v286, v165, v283, v163, v160);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v408 = v304;
      v409 = v286;
      v410 = v165;
      v411 = v283 & 1;
      v412 = v163;
      v413 = v160;
      v414 = v162;
      v415 = v161;
      v416 = v281;
      v417 = v159;
      v418 = v322;
      v419 = v168;
      v420 = v169;
      v421 = Strong;
      v422 = v342;
      v423 = -1.0;
      v424 = 0;
      v170 = v328;
LABEL_105:
      v425 = v170;
      v426 = 0;
      v427 = v336;
      v428 = 0;
      v429 = v372;
      v430 = 0;
      v431 = v365;
      v432 = v353;
      v433 = v360;
      v434 = v299;
      v435 = v296;
      v436 = v288;
      v437 = v293;
      v438 = v291;
      v185 = v316;
LABEL_207:
      v439 = v185;
      outlined release of ActionEvent<SetEntityPropertyAction<String>>((uint64_t)&v408);
      return 0;
    case 2:
      v16 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v365 = *(_QWORD *)(a2 + 40);
      v372 = *(_QWORD *)(a2 + 32);
      v18 = *(float *)(a2 + 56);
      v336 = *(_QWORD *)(a2 + 64);
      v343 = *(_QWORD *)(a2 + 48);
      v329 = *(_QWORD *)(a2 + 72);
      v19 = *(_QWORD *)(a2 + 88);
      v316 = *(_QWORD *)(a2 + 80);
      v20 = *(float *)(a2 + 96);
      v21 = *(float *)(a2 + 100);
      v323 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v56 = specialized static Entity.entityInfoType(_:)(v16);
        if (v56)
        {
          v57 = (*(uint64_t (**)(void))(v56 + 232))();
          v58 = *(_QWORD *)(v57 + 16);
          swift_retain();
          MEMORY[0x22076D160](v58, 0);
          *(_QWORD *)(v57 + 16) = v16;
          MEMORY[0x22076D160](v16, v57);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v16);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v59 = swift_allocObject();
      swift_weakInit();
      v305 = v59;
      *(_QWORD *)(v59 + 16) = v17;
      swift_beginAccess();
      swift_weakAssign();
      v60 = String.init(cString:)();
      v62 = v61;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v63 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_96;
      swift_bridgeObjectRetain();
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v62);
      if ((v65 & 1) != 0)
      {
        v66 = (uint64_t *)(*(_QWORD *)(v63 + 56) + 56 * v64);
        v67 = v66[2];
        v353 = *v66;
        v360 = v66[1];
        v68 = v66[3];
        v69 = v66[4];
        v71 = v66[5];
        v70 = v66[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_96:
        v353 = 0;
        v360 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v71 = 0;
        v70 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = v372;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v365;
      *((_QWORD *)&v448 + 1) = v353;
      *(_QWORD *)&v449 = v360;
      *((_QWORD *)&v449 + 1) = v67;
      *(_QWORD *)&v450 = v68;
      *((_QWORD *)&v450 + 1) = v69;
      *(_QWORD *)&v451 = v71;
      *((_QWORD *)&v451 + 1) = v70;
      v296 = v68;
      v299 = v67;
      v291 = v70;
      v293 = v71;
      if (v19 && REBindPointBoundComponent())
      {
        v171 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v172 = swift_dynamicCastClassUnconditional();
LABEL_101:
          v173 = v172;
          goto LABEL_103;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_230:
          __break(1u);
          goto LABEL_231;
        }
        v234 = specialized static Entity.entityInfoType(_:)(v171);
        if (!v234)
        {
          v172 = makeEntity(for:)(v171);
          goto LABEL_101;
        }
        v173 = (*(uint64_t (**)(void))(v234 + 232))();
        v235 = *(_QWORD *)(v173 + 16);
        swift_retain();
        MEMORY[0x22076D160](v235, 0);
        *(_QWORD *)(v173 + 16) = v171;
        MEMORY[0x22076D160](v171, v173);
        swift_release();
      }
      else
      {
        v173 = 0;
      }
LABEL_103:
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v174 = v444;
      if (v444)
      {
        v175 = v446;
        v176 = v445;
        v177 = v443;
        v178 = v442;
        v179 = v441;
        v288 = v69;
        v180 = v440;
        v284 = v442;
        v287 = v440;
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v180, v179, v178, v177, v174);
        v181 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<String>>);
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v182 = v20;
        v183 = v21;
        v184 = v18;
        v384 = v284 & 1;
        v385 = v177;
        v386 = v174;
        v387 = v176;
        v388 = v175;
        v282 = v181 & 1;
        v389 = v181 & 1;
        v382 = v287;
        v383 = v179;
        v381 = v305;
        v390 = v173;
        v391 = v323;
        v392 = v182;
        v393 = v183;
        v394 = Strong;
        v395 = v329;
        v396 = v184;
        v397 = 0;
        v398 = v343;
        v399 = 0;
        v400 = v336;
        v401 = 0;
        v402 = v447;
        v407 = v316;
        swift_retain();
        swift_retain();
        a5(&v381);
        outlined consume of SetEntityPropertyAction<String>?(v287, v179, v284, v177, v174);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v408 = v305;
        v409 = v287;
        v410 = v179;
        v411 = v284 & 1;
        v412 = v177;
        v413 = v174;
        v414 = v176;
        v415 = v175;
        v416 = v282;
        v417 = v173;
        v418 = v323;
        v419 = v182;
        v420 = v183;
        v421 = Strong;
        v422 = v329;
        v423 = v184;
        v424 = 0;
        v170 = v343;
        goto LABEL_105;
      }
LABEL_208:
      swift_release();
      swift_release();
      swift_release();
LABEL_209:
      swift_release();
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_209;
    case 4:
      v22 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v366 = *(_QWORD *)(a2 + 40);
      v374 = *(_QWORD *)(a2 + 32);
      v330 = *(_QWORD *)(a2 + 48);
      v24 = *(_QWORD *)(a2 + 64);
      v344 = *(_QWORD *)(a2 + 56);
      v25 = *(float *)(a2 + 72);
      v26 = *(float *)(a2 + 76);
      v338 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v72 = specialized static Entity.entityInfoType(_:)(v22);
        if (v72)
        {
          v73 = (*(uint64_t (**)(void))(v72 + 232))();
          v74 = *(_QWORD *)(v73 + 16);
          swift_retain();
          MEMORY[0x22076D160](v74, 0);
          *(_QWORD *)(v73 + 16) = v22;
          MEMORY[0x22076D160](v22, v73);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v22);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v75 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v75 + 16) = v23;
      swift_beginAccess();
      swift_weakAssign();
      v76 = String.init(cString:)();
      v78 = v77;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v79 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_108;
      swift_bridgeObjectRetain();
      v80 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v78);
      if ((v81 & 1) != 0)
      {
        v82 = (uint64_t *)(*(_QWORD *)(v79 + 56) + 56 * v80);
        v83 = v82[2];
        v354 = *v82;
        v361 = v82[1];
        v84 = v82[3];
        v85 = v82[4];
        v87 = v82[5];
        v86 = v82[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_108:
        v354 = 0;
        v361 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v87 = 0;
        v86 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = v374;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v366;
      *((_QWORD *)&v448 + 1) = v354;
      *(_QWORD *)&v449 = v361;
      *((_QWORD *)&v449 + 1) = v83;
      *(_QWORD *)&v450 = v84;
      *((_QWORD *)&v450 + 1) = v85;
      *(_QWORD *)&v451 = v87;
      *((_QWORD *)&v451 + 1) = v86;
      v306 = v84;
      v312 = v83;
      v297 = v86;
      v300 = v87;
      if (v24 && REBindPointBoundComponent())
      {
        v186 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v187 = swift_dynamicCastClassUnconditional();
LABEL_113:
          v317 = v187;
          goto LABEL_115;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
        v236 = specialized static Entity.entityInfoType(_:)(v186);
        if (!v236)
        {
          v187 = makeEntity(for:)(v186);
          goto LABEL_113;
        }
        v237 = (*(uint64_t (**)(void))(v236 + 232))();
        v238 = *(_QWORD *)(v237 + 16);
        swift_retain();
        MEMORY[0x22076D160](v238, 0);
        *(_QWORD *)(v237 + 16) = v186;
        MEMORY[0x22076D160](v186, v237);
        v317 = v237;
        swift_release();
      }
      else
      {
        v317 = 0;
      }
LABEL_115:
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v188 = v444;
      if (v444)
      {
        v189 = v446;
        v190 = v445;
        v191 = v443;
        v192 = v442;
        v193 = v441;
        v294 = v85;
        v194 = v440;
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v194, v193, v192, v191, v188);
        v195 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<String>>);
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v196 = v25;
        v197 = v26;
        v382 = v194;
        v383 = v193;
        v384 = v192 & 1;
        v385 = v191;
        v386 = v188;
        v387 = v190;
        v388 = v189;
        v289 = v195 & 1;
        v389 = v195 & 1;
        v381 = v75;
        v390 = v317;
        v391 = v338;
        v392 = v196;
        v393 = v197;
        v394 = Strong;
        v395 = v344;
        v396 = -1.0;
        v397 = 0;
        v398 = 0xBFF0000000000000;
        v399 = 0;
        v400 = 0xBFF0000000000000;
        v401 = 0;
        v402 = v447;
        v407 = v330;
        swift_retain();
        swift_retain();
        a5(&v381);
        outlined consume of SetEntityPropertyAction<String>?(v194, v193, v192, v191, v188);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v408 = v75;
        v409 = v194;
        v410 = v193;
        v411 = v192 & 1;
        v412 = v191;
        v413 = v188;
        v414 = v190;
        v415 = v189;
        v416 = v289;
        v417 = v317;
        v418 = v338;
        v419 = v196;
        v420 = v197;
        v421 = Strong;
        v422 = v344;
        v423 = -1.0;
        v424 = 0;
        v425 = 0xBFF0000000000000;
        v426 = 0;
        v427 = 0xBFF0000000000000;
        v428 = 0;
        v429 = v374;
        v430 = 0;
        v431 = v366;
        v432 = v354;
        v433 = v361;
        v434 = v312;
        v435 = v306;
        v436 = v294;
        v437 = v300;
        v438 = v297;
        v185 = v330;
        goto LABEL_207;
      }
      goto LABEL_208;
    case 8:
      v27 = *(_QWORD *)a2;
      v28 = *(_QWORD *)(a2 + 8);
      v367 = *(_QWORD *)(a2 + 40);
      v375 = *(_QWORD *)(a2 + 32);
      v29 = *(_QWORD *)(a2 + 56);
      v324 = *(_QWORD *)(a2 + 48);
      v30 = *(float *)(a2 + 64);
      v31 = *(float *)(a2 + 68);
      v331 = *(_BYTE *)(a2 + 72);
      v339 = *(_QWORD *)(a2 + 80);
      v345 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v88 = specialized static Entity.entityInfoType(_:)(v27);
        if (v88)
        {
          v89 = (*(uint64_t (**)(void))(v88 + 232))();
          v90 = *(_QWORD *)(v89 + 16);
          swift_retain();
          MEMORY[0x22076D160](v90, 0);
          *(_QWORD *)(v89 + 16) = v27;
          MEMORY[0x22076D160](v27, v89);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v27);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v91 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v91 + 16) = v28;
      swift_beginAccess();
      swift_weakAssign();
      v92 = String.init(cString:)();
      v94 = v93;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v95 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_119;
      swift_bridgeObjectRetain();
      v96 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v94);
      if ((v97 & 1) != 0)
      {
        v98 = (uint64_t *)(*(_QWORD *)(v95 + 56) + 56 * v96);
        v99 = v98[2];
        v355 = *v98;
        v362 = v98[1];
        v100 = v98[3];
        v101 = v98[4];
        v103 = v98[5];
        v102 = v98[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_119:
        v355 = 0;
        v362 = 0;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v103 = 0;
        v102 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = v375;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v367;
      *((_QWORD *)&v448 + 1) = v355;
      *(_QWORD *)&v449 = v362;
      *((_QWORD *)&v449 + 1) = v99;
      *(_QWORD *)&v450 = v100;
      *((_QWORD *)&v450 + 1) = v101;
      *(_QWORD *)&v451 = v103;
      *((_QWORD *)&v451 + 1) = v102;
      v307 = v100;
      v313 = v99;
      v298 = v103;
      v301 = v101;
      v295 = v102;
      if (v29 && REBindPointBoundComponent())
      {
        v198 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v199 = swift_dynamicCastClassUnconditional();
LABEL_124:
          v200 = v199;
          goto LABEL_126;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
        v239 = specialized static Entity.entityInfoType(_:)(v198);
        if (!v239)
        {
          v199 = makeEntity(for:)(v198);
          goto LABEL_124;
        }
        v200 = (*(uint64_t (**)(void))(v239 + 232))();
        v240 = *(_QWORD *)(v200 + 16);
        swift_retain();
        MEMORY[0x22076D160](v240, 0);
        *(_QWORD *)(v200 + 16) = v198;
        MEMORY[0x22076D160](v198, v200);
        swift_release();
      }
      else
      {
        v200 = 0;
      }
LABEL_126:
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v201 = v444;
      if (v444)
      {
        v202 = v445;
        v203 = v443;
        v204 = v442;
        v205 = v441;
        v206 = v440;
        v290 = v446;
        v292 = v440;
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v206, v205, v204, v203, v201);
        v207 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<String>>);
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v208 = v30;
        v209 = v31;
        v383 = v205;
        v384 = v204 & 1;
        v385 = v203;
        v386 = v201;
        v387 = v202;
        v388 = v290;
        v285 = v207 & 1;
        v389 = v207 & 1;
        v381 = v91;
        v382 = v292;
        v390 = v200;
        v391 = v331;
        v392 = v208;
        v393 = v209;
        v395 = 0;
        v396 = 0.0;
        v394 = Strong;
        v397 = 1;
        v398 = v339;
        v399 = 0;
        v400 = v345;
        v401 = 0;
        v402 = v447;
        v407 = v324;
        swift_retain();
        swift_retain();
        a5(&v381);
        outlined consume of SetEntityPropertyAction<String>?(v292, v205, v204, v203, v201);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v408 = v91;
        v409 = v292;
        v410 = v205;
        v411 = v204 & 1;
        v412 = v203;
        v413 = v201;
        v414 = v202;
        v415 = v290;
        v416 = v285;
        v417 = v200;
        v418 = v331;
        v419 = v208;
        v420 = v209;
        v423 = 0.0;
        v421 = Strong;
        v422 = 0;
        v424 = 1;
        v425 = v339;
        v426 = 0;
        v427 = v345;
        v428 = 0;
        v429 = v375;
        v430 = 0;
        v431 = v367;
        v432 = v355;
        v433 = v362;
        v434 = v313;
        v435 = v307;
        v436 = v301;
        v437 = v298;
        v438 = v295;
        v185 = v324;
        goto LABEL_207;
      }
      goto LABEL_208;
    case 16:
      v32 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v376 = *(_QWORD *)(a2 + 40);
      v358 = *(_QWORD *)(a2 + 32);
      v368 = *(_QWORD *)(a2 + 48);
      v350 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
        v104 = specialized static Entity.entityInfoType(_:)(v32);
        if (v104)
        {
          v105 = (*(uint64_t (**)(void))(v104 + 232))();
          v106 = *(_QWORD *)(v105 + 16);
          swift_retain();
          MEMORY[0x22076D160](v106, 0);
          *(_QWORD *)(v105 + 16) = v32;
          MEMORY[0x22076D160](v32, v105);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v32);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v107 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v107 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v108 = String.init(cString:)();
      v110 = v109;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v111 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_130;
      swift_bridgeObjectRetain();
      v112 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v110);
      if ((v113 & 1) != 0)
      {
        v114 = (uint64_t *)(*(_QWORD *)(v111 + 56) + 56 * v112);
        v116 = *v114;
        v115 = v114[1];
        v117 = v114[2];
        v118 = v114[3];
        v119 = v114[4];
        v120 = v114[5];
        v121 = v114[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_130:
        v116 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = 0;
        v121 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = 0;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v376;
      *((_QWORD *)&v448 + 1) = v116;
      *(_QWORD *)&v449 = v115;
      *((_QWORD *)&v449 + 1) = v117;
      *(_QWORD *)&v450 = v118;
      *((_QWORD *)&v450 + 1) = v119;
      *(_QWORD *)&v451 = v120;
      *((_QWORD *)&v451 + 1) = v121;
      v332 = v117;
      v341 = v115;
      v325 = v118;
      if (v350)
      {
        if (REBindPointBoundComponent())
        {
          v210 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v211 = swift_dynamicCastClassUnconditional();
LABEL_135:
            v212 = v211;
            goto LABEL_179;
          }
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_233:
            __break(1u);
            goto LABEL_234;
          }
          v241 = specialized static Entity.entityInfoType(_:)(v210);
          if (!v241)
          {
            v211 = makeEntity(for:)(v210);
            goto LABEL_135;
          }
          v242 = (*(uint64_t (**)(void))(v241 + 232))();
          v243 = *(_QWORD *)(v242 + 16);
          swift_retain();
          MEMORY[0x22076D160](v243, 0);
          *(_QWORD *)(v242 + 16) = v210;
          v244 = v210;
          v212 = v242;
          MEMORY[0x22076D160](v244, v242);
          swift_release();
        }
        else
        {
          v212 = 0;
        }
      }
      else
      {
        v212 = 0;
      }
LABEL_179:
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v245 = v444;
      if (v444)
      {
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v246 = v212;
        v247 = v446;
        v248 = v445;
        v356 = v119;
        v249 = v443;
        v314 = v121;
        v320 = v120;
        v250 = v442;
        v251 = v441;
        v309 = v116;
        v252 = v440;
        v382 = v440;
        v383 = v441;
        v302 = v442 & 1;
        v384 = v442 & 1;
        v385 = v443;
        v386 = v444;
        v387 = v445;
        v388 = v446;
        v389 = 1;
        v381 = v107;
        v390 = v246;
        v391 = 0;
        v392 = 0.0;
        v393 = 0.0;
        v395 = 0;
        v396 = 0.0;
        v394 = Strong;
        v397 = 1;
        v398 = v358;
        v399 = 0;
        v400 = 0;
        v401 = 1;
        v402 = v447;
        v407 = v368;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v252, v251, v250, v249, v245);
        swift_retain();
        a5(&v381);
        outlined consume of SetEntityPropertyAction<String>?(v252, v251, v250, v249, v245);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v408 = v107;
        v409 = v252;
        v410 = v251;
        v411 = v302;
        v412 = v249;
        v413 = v245;
        v414 = v248;
        v415 = v247;
        v416 = 1;
        v417 = v246;
        v418 = 0;
        v420 = 0.0;
        v419 = 0.0;
        v423 = 0.0;
        v421 = Strong;
        v422 = 0;
        v424 = 1;
        v425 = v358;
        v426 = 0;
        v427 = 0;
        v428 = 1;
        v429 = 0;
        v430 = 0;
        v431 = v376;
        v432 = v309;
        v433 = v341;
        v434 = v332;
        v435 = v325;
        v436 = v356;
        v437 = v320;
        v438 = v314;
        v185 = v368;
        goto LABEL_207;
      }
      goto LABEL_208;
    case 32:
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v377 = *(_QWORD *)(a2 + 40);
      v351 = *(_QWORD *)(a2 + 32);
      v359 = *(_QWORD *)(a2 + 48);
      v346 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        v122 = specialized static Entity.entityInfoType(_:)(v34);
        if (v122)
        {
          v123 = (*(uint64_t (**)(void))(v122 + 232))();
          v124 = *(_QWORD *)(v123 + 16);
          swift_retain();
          MEMORY[0x22076D160](v124, 0);
          *(_QWORD *)(v123 + 16) = v34;
          MEMORY[0x22076D160](v34, v123);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v125 = swift_allocObject();
      swift_weakInit();
      v340 = v125;
      *(_QWORD *)(v125 + 16) = v35;
      swift_beginAccess();
      swift_weakAssign();
      v126 = String.init(cString:)();
      v128 = v127;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v129 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_138;
      swift_bridgeObjectRetain();
      v130 = specialized __RawDictionaryStorage.find<A>(_:)(v126, v128);
      if ((v131 & 1) != 0)
      {
        v132 = (uint64_t *)(*(_QWORD *)(v129 + 56) + 56 * v130);
        v133 = v132[1];
        v369 = *v132;
        v134 = v132[2];
        v135 = v132[3];
        v136 = v132[4];
        v137 = v132[5];
        v138 = v132[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_138:
        v369 = 0;
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v138 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = 0;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v377;
      *((_QWORD *)&v448 + 1) = v369;
      *(_QWORD *)&v449 = v133;
      *((_QWORD *)&v449 + 1) = v134;
      *(_QWORD *)&v450 = v135;
      *((_QWORD *)&v450 + 1) = v136;
      *(_QWORD *)&v451 = v137;
      *((_QWORD *)&v451 + 1) = v138;
      v318 = v135;
      v326 = v134;
      v333 = v133;
      if (v346)
      {
        if (REBindPointBoundComponent())
        {
          v213 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v214 = swift_dynamicCastClassUnconditional();
LABEL_143:
            v215 = v214;
            goto LABEL_185;
          }
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_234:
            __break(1u);
            goto LABEL_235;
          }
          v253 = specialized static Entity.entityInfoType(_:)(v213);
          if (!v253)
          {
            v214 = makeEntity(for:)(v213);
            goto LABEL_143;
          }
          v215 = (*(uint64_t (**)(void))(v253 + 232))();
          v254 = *(_QWORD *)(v215 + 16);
          swift_retain();
          MEMORY[0x22076D160](v254, 0);
          *(_QWORD *)(v215 + 16) = v213;
          MEMORY[0x22076D160](v213, v215);
          swift_release();
        }
        else
        {
          v215 = 0;
        }
      }
      else
      {
        v215 = 0;
      }
LABEL_185:
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v255 = v444;
      if (v444)
      {
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v256 = v446;
        v257 = v445;
        v348 = v136;
        v258 = v443;
        v310 = v137;
        v259 = v442;
        v260 = v441;
        v261 = v440;
        v382 = v440;
        v383 = v441;
        v303 = v442 & 1;
        v384 = v442 & 1;
        v385 = v443;
        v386 = v444;
        v387 = v445;
        v388 = v446;
        v389 = 1;
        v381 = v340;
        v390 = v215;
        v391 = 0;
        v392 = 0.0;
        v393 = 0.0;
        v395 = 0;
        v396 = 0.0;
        v394 = Strong;
        v397 = 1;
        v398 = v351;
        v399 = 0;
        v400 = 0;
        v401 = 1;
        v402 = v447;
        v407 = v359;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v261, v260, v259, v258, v255);
        swift_retain();
        a5(&v381);
        outlined consume of SetEntityPropertyAction<String>?(v261, v260, v259, v258, v255);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v408 = v340;
        v409 = v261;
        v410 = v260;
        v411 = v303;
        v412 = v258;
        v413 = v255;
        v414 = v257;
        v415 = v256;
        v416 = 1;
        v417 = v215;
        v418 = 0;
        v420 = 0.0;
        v419 = 0.0;
        v423 = 0.0;
        v421 = Strong;
        v422 = 0;
        v424 = 1;
        v425 = v351;
        v426 = 0;
        v427 = 0;
        v428 = 1;
        v429 = 0;
        v430 = 0;
        v431 = v377;
        v432 = v369;
        v433 = v333;
        v434 = v326;
        v435 = v318;
        v436 = v348;
        v437 = v310;
        v438 = v138;
        v185 = v359;
        goto LABEL_207;
      }
      goto LABEL_208;
    case 64:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v38 = *(_QWORD *)(a2 + 24);
      v39 = *(_QWORD *)(a2 + 40);
      v352 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
        v139 = specialized static Entity.entityInfoType(_:)(v36);
        if (v139)
        {
          v140 = (*(uint64_t (**)(void))(v139 + 232))();
          v141 = *(_QWORD *)(v140 + 16);
          swift_retain();
          MEMORY[0x22076D160](v141, 0);
          *(_QWORD *)(v140 + 16) = v36;
          MEMORY[0x22076D160](v36, v140);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v142 = swift_allocObject();
      swift_weakInit();
      v347 = v142;
      *(_QWORD *)(v142 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      if (v39 && REBindPointBoundComponent())
      {
        v143 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v144 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v145 = v144;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
          goto LABEL_230;
        }
        v230 = specialized static Entity.entityInfoType(_:)(v143);
        if (!v230)
        {
          v144 = makeEntity(for:)(v143);
          goto LABEL_77;
        }
        v145 = (*(uint64_t (**)(void))(v230 + 232))();
        v231 = *(_QWORD *)(v145 + 16);
        swift_retain();
        MEMORY[0x22076D160](v231, 0);
        *(_QWORD *)(v145 + 16) = v143;
        MEMORY[0x22076D160](v143, v145);
        swift_release();
      }
      else
      {
        v145 = 0;
      }
LABEL_79:
      v146 = String.init(cString:)();
      v148 = v147;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v149 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v150 = specialized __RawDictionaryStorage.find<A>(_:)(v146, v148);
        if ((v151 & 1) != 0)
        {
          v152 = (uint64_t *)(*(_QWORD *)(v149 + 56) + 56 * v150);
          v153 = *v152;
          v154 = v152[1];
          v155 = v152[2];
          v156 = v152[3];
          v370 = v152[5];
          v378 = v152[4];
          v363 = v152[6];
          swift_bridgeObjectRelease();
          goto LABEL_147;
        }
        swift_bridgeObjectRelease();
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v370 = 0;
      v378 = 0;
      v363 = 0;
LABEL_147:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = 0;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v38;
      *((_QWORD *)&v448 + 1) = v153;
      *(_QWORD *)&v449 = v154;
      *((_QWORD *)&v449 + 1) = v155;
      v334 = v156;
      *(_QWORD *)&v450 = v156;
      *((_QWORD *)&v450 + 1) = v378;
      *(_QWORD *)&v451 = v370;
      *((_QWORD *)&v451 + 1) = v363;
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v216 = v444;
      if (v444)
      {
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v319 = v153;
        v327 = v38;
        v217 = v446;
        v218 = v445;
        v219 = v443;
        v220 = v442;
        v221 = v441;
        v222 = v145;
        v223 = v440;
        v382 = v440;
        v383 = v441;
        v308 = v442 & 1;
        v384 = v442 & 1;
        v385 = v443;
        v386 = v444;
        v387 = v445;
        v388 = v446;
        v389 = 1;
        v381 = v347;
        v390 = v222;
        v391 = 0;
        v392 = 0.0;
        v393 = 0.0;
        v395 = 0;
        v396 = 0.0;
        v394 = Strong;
        v397 = 1;
        v398 = 0;
        v399 = 1;
        v400 = 0;
        v401 = 1;
        v402 = v447;
        v407 = v352;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v223, v221, v220, v219, v216);
        swift_retain();
        a5(&v381);
        outlined consume of SetEntityPropertyAction<String>?(v223, v221, v220, v219, v216);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v408 = v347;
        v409 = v223;
        v410 = v221;
        v411 = v308;
        v412 = v219;
        v413 = v216;
        v414 = v218;
        v415 = v217;
        v416 = 1;
        v417 = v222;
        v418 = 0;
        v420 = 0.0;
        v419 = 0.0;
        v423 = 0.0;
        v421 = Strong;
        v422 = 0;
        v424 = 1;
        v425 = 0;
        v426 = 1;
        v427 = 0;
        v428 = 1;
        v429 = 0;
        v430 = 0;
        v431 = v327;
        v432 = v319;
        v433 = v154;
        v434 = v155;
        v435 = v334;
        v436 = v378;
        v437 = v370;
        v438 = v363;
        v185 = v352;
        goto LABEL_207;
      }
      goto LABEL_208;
    default:
      if (a4 != 128)
        goto LABEL_209;
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v373 = *(_QWORD *)(a2 + 24);
      v15 = *(_QWORD *)(a2 + 40);
      v337 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_227:
          __break(1u);
          goto LABEL_228;
        }
        v224 = specialized static Entity.entityInfoType(_:)(v13);
        if (v224)
        {
          v225 = (*(uint64_t (**)(void))(v224 + 232))();
          v226 = *(_QWORD *)(v225 + 16);
          swift_retain();
          MEMORY[0x22076D160](v226, 0);
          *(_QWORD *)(v225 + 16) = v13;
          MEMORY[0x22076D160](v13, v225);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v13);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v227 = swift_allocObject();
      swift_weakInit();
      v335 = v227;
      *(_QWORD *)(v227 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      if (!v15)
        goto LABEL_198;
      if (REBindPointBoundComponent())
      {
        v228 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v229 = swift_dynamicCastClassUnconditional();
LABEL_157:
          v15 = v229;
          goto LABEL_198;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_235:
          __break(1u);
          JUMPOUT(0x21BB3BB54);
        }
        v262 = specialized static Entity.entityInfoType(_:)(v228);
        if (!v262)
        {
          v229 = makeEntity(for:)(v228);
          goto LABEL_157;
        }
        v15 = (*(uint64_t (**)(void))(v262 + 232))();
        v263 = *(_QWORD *)(v15 + 16);
        swift_retain();
        MEMORY[0x22076D160](v263, 0);
        *(_QWORD *)(v15 + 16) = v228;
        MEMORY[0x22076D160](v228, v15);
        swift_release();
      }
      else
      {
        v15 = 0;
      }
LABEL_198:
      v264 = String.init(cString:)();
      v266 = v265;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v267 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v268 = specialized __RawDictionaryStorage.find<A>(_:)(v264, v266);
        if ((v269 & 1) != 0)
        {
          v270 = (uint64_t *)(*(_QWORD *)(v267 + 56) + 56 * v268);
          v272 = *v270;
          v271 = v270[1];
          v273 = v270[2];
          v364 = v270[4];
          v371 = v270[3];
          v349 = v270[6];
          v357 = v270[5];
          swift_bridgeObjectRelease();
          goto LABEL_205;
        }
        swift_bridgeObjectRelease();
      }
      v272 = 0;
      v271 = 0;
      v273 = 0;
      v364 = 0;
      v371 = 0;
      v349 = 0;
      v357 = 0;
LABEL_205:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v447 = 0;
      BYTE8(v447) = 0;
      *(_QWORD *)&v448 = v373;
      *((_QWORD *)&v448 + 1) = v272;
      v321 = v273;
      *(_QWORD *)&v449 = v271;
      *((_QWORD *)&v449 + 1) = v273;
      *(_QWORD *)&v450 = v371;
      *((_QWORD *)&v450 + 1) = v364;
      *(_QWORD *)&v451 = v357;
      *((_QWORD *)&v451 + 1) = v349;
      specialized ActionEventData.action<A>()((uint64_t)&v440);
      v274 = v444;
      if (v444)
      {
        v403 = v448;
        v404 = v449;
        v405 = v450;
        v406 = v451;
        v275 = v446;
        v276 = v445;
        v277 = v443;
        v315 = v272;
        v278 = v442;
        v279 = v441;
        v280 = v440;
        v382 = v440;
        v383 = v441;
        v311 = v442 & 1;
        v384 = v442 & 1;
        v385 = v443;
        v386 = v444;
        v387 = v445;
        v388 = v446;
        v389 = 1;
        v381 = v335;
        v390 = v15;
        v391 = 0;
        v392 = 0.0;
        v393 = 0.0;
        v395 = 0;
        v396 = 0.0;
        v394 = Strong;
        v397 = 1;
        v398 = 0;
        v399 = 1;
        v400 = 0;
        v401 = 1;
        v402 = v447;
        v407 = v337;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<String>?(v280, v279, v278, v277, v274);
        swift_retain();
        a5(&v381);
        swift_release();
        outlined consume of SetEntityPropertyAction<String>?(v280, v279, v278, v277, v274);
        swift_release();
        swift_release();
        swift_release();
        v408 = v335;
        v409 = v280;
        v410 = v279;
        v411 = v311;
        v412 = v277;
        v413 = v274;
        v414 = v276;
        v415 = v275;
        v416 = 1;
        v417 = v15;
        v418 = 0;
        v420 = 0.0;
        v419 = 0.0;
        v423 = 0.0;
        v421 = Strong;
        v422 = 0;
        v424 = 1;
        v425 = 0;
        v426 = 1;
        v427 = 0;
        v428 = 1;
        v429 = 0;
        v430 = 0;
        v431 = v373;
        v432 = v315;
        v433 = v271;
        v434 = v321;
        v435 = v371;
        v436 = v364;
        v437 = v357;
        v438 = v349;
        v185 = v337;
        goto LABEL_207;
      }
      goto LABEL_208;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t Entity;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  char v220;
  double v221;
  double v222;
  double v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  char v233;
  double v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  char v244;
  double v245;
  double v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t Strong;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  char v338;
  uint64_t v339;
  char v340;
  double v341;
  double v342;
  uint64_t v343;
  uint64_t v344;
  double v345;
  char v346;
  unint64_t v347;
  char v348;
  unint64_t v349;
  char v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  char v364;
  uint64_t v365;
  char v366;
  double v367;
  double v368;
  uint64_t v369;
  uint64_t v370;
  double v371;
  char v372;
  unint64_t v373;
  char v374;
  unint64_t v375;
  char v376;
  uint64_t v377;
  char v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v317 = *(_QWORD *)(a2 + 40);
      v323 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v269 = *(_BYTE *)(a2 + 80);
      v280 = *(_QWORD *)(a2 + 48);
      v284 = *(_QWORD *)(a2 + 88);
      v289 = *(_QWORD *)(a2 + 96);
      v293 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v41 = specialized static Entity.entityInfoType(_:)(v8);
        if (v41)
        {
          v42 = (*(uint64_t (**)(void))(v41 + 232))();
          v43 = *(_QWORD *)(v42 + 16);
          swift_retain();
          MEMORY[0x22076D160](v43, 0);
          *(_QWORD *)(v42 + 16) = v8;
          MEMORY[0x22076D160](v8, v42);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v8);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v44 = swift_allocObject();
        swift_weakInit();
        v45 = v44;
        *(_QWORD *)(v44 + 16) = v7;
        swift_beginAccess();
        swift_weakAssign();
        v46 = String.init(cString:)();
        v48 = v47;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v49 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
          if ((v51 & 1) != 0)
          {
            v52 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 56 * v50);
            v53 = v52[2];
            v308 = *v52;
            v311 = v52[1];
            v54 = v52[3];
            v303 = v52[4];
            v56 = v52[5];
            v55 = v52[6];
            swift_bridgeObjectRelease();
LABEL_87:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v394 = v323;
            BYTE8(v394) = 0;
            *(_QWORD *)&v395 = v317;
            *((_QWORD *)&v395 + 1) = v308;
            *(_QWORD *)&v396 = v311;
            *((_QWORD *)&v396 + 1) = v53;
            *(_QWORD *)&v397 = v54;
            *((_QWORD *)&v397 + 1) = v303;
            *(_QWORD *)&v398 = v56;
            *((_QWORD *)&v398 + 1) = v55;
            v261 = v56;
            v264 = v53;
            if (!v9)
              goto LABEL_164;
            if (!REBindPointBoundComponent())
            {
              v9 = 0;
              goto LABEL_164;
            }
            Entity = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v154 = swift_dynamicCastClassUnconditional();
LABEL_91:
              v9 = v154;
              goto LABEL_164;
            }
            if ((REEntityIsBeingDestroyed() & 1) == 0)
            {
              v201 = specialized static Entity.entityInfoType(_:)(Entity);
              if (!v201)
              {
                v154 = makeEntity(for:)(Entity);
                goto LABEL_91;
              }
              v9 = (*(uint64_t (**)(void))(v201 + 232))();
              v202 = *(_QWORD *)(v9 + 16);
              swift_retain();
              MEMORY[0x22076D160](v202, 0);
              *(_QWORD *)(v9 + 16) = Entity;
              MEMORY[0x22076D160](Entity, v9);
              swift_release();
LABEL_164:
              specialized ActionEventData.action<A>()((uint64_t)&v388);
              v203 = v392;
              if (v392)
              {
                v204 = v391;
                v205 = v390;
                v206 = v389;
                v255 = v54;
                v207 = v388;
                v254 = v388;
                v208 = v393;
                swift_retain();
                outlined copy of SetEntityPropertyAction<Transform>?(v207, v206, v205, v204, v203);
                v209 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Bool>>);
                v352 = v395;
                v353 = v396;
                v354 = v397;
                v355 = v398;
                v210 = v10;
                v211 = v11;
                v334 = v205 & 1;
                v335 = v204;
                v336 = v203;
                v337 = v208;
                v251 = v209 & 1;
                v338 = v209 & 1;
                v332 = v254;
                v333 = v206;
                v331 = v45;
                v339 = v9;
                v340 = v269;
                v341 = v210;
                v342 = v211;
                v343 = Strong;
                v344 = v293;
                v345 = -1.0;
                v346 = 0;
                v347 = v284;
                v348 = 0;
                v349 = v289;
                v350 = 0;
                v351 = v394;
                v356 = v280;
                swift_retain();
                swift_retain();
                a5(&v331);
                outlined consume of SetEntityPropertyAction<Transform>?(v254, v206, v205, v204, v203);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v357 = v45;
                v358 = v254;
                v359 = v206;
                v360 = v205 & 1;
                v361 = v204;
                v362 = v203;
                v363 = v208;
                v364 = v251;
                v365 = v9;
                v366 = v269;
                v367 = v210;
                v368 = v211;
                v369 = Strong;
                v370 = v293;
                v371 = -1.0;
                v372 = 0;
                v373 = v284;
                v374 = 0;
                v375 = v289;
                v376 = 0;
                v377 = v323;
                v378 = 0;
                v379 = v317;
                v380 = v308;
                v381 = v311;
                v382 = v264;
                v383 = v255;
                v384 = v303;
                v385 = v261;
                v386 = v55;
                v174 = v280;
                goto LABEL_187;
              }
LABEL_188:
              swift_release();
              swift_release();
              swift_release();
LABEL_189:
              swift_release();
              return 0;
            }
            goto LABEL_221;
          }
          swift_bridgeObjectRelease();
        }
        v308 = 0;
        v311 = 0;
        v53 = 0;
        v54 = 0;
        v303 = 0;
        v56 = 0;
        v55 = 0;
        goto LABEL_87;
      }
      __break(1u);
      goto LABEL_213;
    case 2:
      v18 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v318 = *(_QWORD *)(a2 + 40);
      v324 = *(_QWORD *)(a2 + 32);
      v19 = *(float *)(a2 + 56);
      v294 = *(_QWORD *)(a2 + 64);
      v300 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 88);
      v285 = *(_QWORD *)(a2 + 80);
      v290 = *(_QWORD *)(a2 + 72);
      v21 = *(float *)(a2 + 96);
      v22 = *(float *)(a2 + 100);
      v275 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v57 = specialized static Entity.entityInfoType(_:)(v18);
        if (v57)
        {
          v58 = (*(uint64_t (**)(void))(v57 + 232))();
          v59 = *(_QWORD *)(v58 + 16);
          swift_retain();
          MEMORY[0x22076D160](v59, 0);
          *(_QWORD *)(v58 + 16) = v18;
          MEMORY[0x22076D160](v18, v58);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v60 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v60 + 16) = v17;
        swift_beginAccess();
        swift_weakAssign();
        v61 = String.init(cString:)();
        v63 = v62;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v64 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v65 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v63);
          if ((v66 & 1) != 0)
          {
            v67 = (uint64_t *)(*(_QWORD *)(v64 + 56) + 56 * v65);
            v68 = *v67;
            v69 = v67[2];
            v70 = v67[3];
            v71 = v67[5];
            v309 = v67[1];
            v312 = v67[4];
            v72 = v67[6];
            swift_bridgeObjectRelease();
            goto LABEL_94;
          }
          swift_bridgeObjectRelease();
        }
        v68 = 0;
        v309 = 0;
        v312 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
LABEL_94:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v394 = v324;
        BYTE8(v394) = 0;
        *(_QWORD *)&v395 = v318;
        *((_QWORD *)&v395 + 1) = v68;
        *(_QWORD *)&v396 = v309;
        *((_QWORD *)&v396 + 1) = v69;
        *(_QWORD *)&v397 = v70;
        *((_QWORD *)&v397 + 1) = v312;
        *(_QWORD *)&v398 = v71;
        *((_QWORD *)&v398 + 1) = v72;
        v265 = v71;
        v270 = v69;
        v262 = v72;
        if (v20)
        {
          if (REBindPointBoundComponent())
          {
            v155 = v70;
            v156 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v157 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_222:
                __break(1u);
                goto LABEL_223;
              }
              v212 = specialized static Entity.entityInfoType(_:)(v156);
              if (v212)
              {
                v20 = (*(uint64_t (**)(void))(v212 + 232))();
                v213 = *(_QWORD *)(v20 + 16);
                swift_retain();
                MEMORY[0x22076D160](v213, 0);
                *(_QWORD *)(v20 + 16) = v156;
                MEMORY[0x22076D160](v156, v20);
                swift_release();
                goto LABEL_170;
              }
              v157 = makeEntity(for:)(v156);
            }
            v20 = v157;
LABEL_170:
            v70 = v155;
            goto LABEL_171;
          }
          v20 = 0;
        }
LABEL_171:
        specialized ActionEventData.action<A>()((uint64_t)&v388);
        v214 = v392;
        if (!v392)
          goto LABEL_188;
        v215 = v391;
        v259 = v70;
        v216 = v390;
        v217 = v389;
        v218 = v388;
        v256 = v388;
        v219 = v393;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v218, v217, v216, v215, v214);
        v220 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Bool>>);
        v352 = v395;
        v353 = v396;
        v354 = v397;
        v355 = v398;
        v221 = v21;
        v222 = v22;
        v223 = v19;
        v334 = v216 & 1;
        v335 = v215;
        v336 = v214;
        v337 = v219;
        v252 = v220 & 1;
        v338 = v220 & 1;
        v332 = v256;
        v333 = v217;
        v331 = v60;
        v339 = v20;
        v340 = v275;
        v341 = v221;
        v342 = v222;
        v343 = Strong;
        v344 = v290;
        v345 = v223;
        v346 = 0;
        v347 = v300;
        v348 = 0;
        v349 = v294;
        v350 = 0;
        v351 = v394;
        v356 = v285;
        swift_retain();
        swift_retain();
        a5(&v331);
        outlined consume of SetEntityPropertyAction<Transform>?(v256, v217, v216, v215, v214);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v357 = v60;
        v358 = v256;
        v359 = v217;
        v360 = v216 & 1;
        v361 = v215;
        v362 = v214;
        v363 = v219;
        v364 = v252;
        v365 = v20;
        v366 = v275;
        v367 = v221;
        v368 = v222;
        v369 = Strong;
        v370 = v290;
        v371 = v223;
        v372 = 0;
        v373 = v300;
        v374 = 0;
        v375 = v294;
        v376 = 0;
        v377 = v324;
        v378 = 0;
        v379 = v318;
        v380 = v68;
        v381 = v309;
        v382 = v270;
        v383 = v259;
        v384 = v312;
        v385 = v265;
        v224 = v262;
        goto LABEL_179;
      }
LABEL_213:
      __break(1u);
      goto LABEL_214;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_189;
    case 4:
      v24 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v319 = *(_QWORD *)(a2 + 40);
      v325 = *(_QWORD *)(a2 + 32);
      v285 = *(_QWORD *)(a2 + 48);
      v25 = *(_QWORD *)(a2 + 64);
      v295 = *(_QWORD *)(a2 + 56);
      v26 = *(float *)(a2 + 72);
      v27 = *(float *)(a2 + 76);
      v291 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v73 = specialized static Entity.entityInfoType(_:)(v24);
        if (v73)
        {
          v74 = (*(uint64_t (**)(void))(v73 + 232))();
          v75 = *(_QWORD *)(v74 + 16);
          swift_retain();
          MEMORY[0x22076D160](v75, 0);
          *(_QWORD *)(v74 + 16) = v24;
          MEMORY[0x22076D160](v24, v74);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v24);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v76 = swift_allocObject();
        swift_weakInit();
        v77 = v76;
        *(_QWORD *)(v76 + 16) = v23;
        swift_beginAccess();
        swift_weakAssign();
        v78 = String.init(cString:)();
        v80 = v79;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v81 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v82 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v80);
          if ((v83 & 1) != 0)
          {
            v84 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 56 * v82);
            v85 = v84[2];
            v304 = *v84;
            v310 = v84[1];
            v86 = v84[3];
            v313 = v84[4];
            v88 = v84[5];
            v87 = v84[6];
            swift_bridgeObjectRelease();
            goto LABEL_101;
          }
          swift_bridgeObjectRelease();
        }
        v304 = 0;
        v310 = 0;
        v85 = 0;
        v86 = 0;
        v313 = 0;
        v88 = 0;
        v87 = 0;
LABEL_101:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v394 = v325;
        BYTE8(v394) = 0;
        *(_QWORD *)&v395 = v319;
        *((_QWORD *)&v395 + 1) = v304;
        *(_QWORD *)&v396 = v310;
        *((_QWORD *)&v396 + 1) = v85;
        *(_QWORD *)&v397 = v86;
        *((_QWORD *)&v397 + 1) = v313;
        *(_QWORD *)&v398 = v88;
        *((_QWORD *)&v398 + 1) = v87;
        v271 = v88;
        v276 = v85;
        v266 = v87;
        if (v25)
        {
          if (REBindPointBoundComponent())
          {
            v158 = v86;
            v159 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v160 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_223:
                __break(1u);
                goto LABEL_224;
              }
              v225 = specialized static Entity.entityInfoType(_:)(v159);
              if (v225)
              {
                v25 = (*(uint64_t (**)(void))(v225 + 232))();
                v226 = *(_QWORD *)(v25 + 16);
                swift_retain();
                MEMORY[0x22076D160](v226, 0);
                *(_QWORD *)(v25 + 16) = v159;
                MEMORY[0x22076D160](v159, v25);
                swift_release();
                goto LABEL_176;
              }
              v160 = makeEntity(for:)(v159);
            }
            v25 = v160;
LABEL_176:
            v86 = v158;
            goto LABEL_177;
          }
          v25 = 0;
        }
LABEL_177:
        specialized ActionEventData.action<A>()((uint64_t)&v388);
        v227 = v392;
        if (!v392)
          goto LABEL_188;
        v228 = v391;
        v229 = v390;
        v263 = v86;
        v230 = v389;
        v231 = v388;
        v260 = v388;
        v232 = v393;
        swift_retain();
        v253 = v229;
        outlined copy of SetEntityPropertyAction<Transform>?(v231, v230, v229, v228, v227);
        v233 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Bool>>);
        v352 = v395;
        v353 = v396;
        v354 = v397;
        v355 = v398;
        v234 = v26;
        v235 = v27;
        LOBYTE(v229) = v229 & 1;
        v334 = v229;
        v335 = v228;
        v336 = v227;
        v337 = v232;
        v257 = v233 & 1;
        v338 = v233 & 1;
        v332 = v260;
        v333 = v230;
        v331 = v77;
        v339 = v25;
        v340 = v291;
        v341 = v234;
        v342 = v235;
        v343 = Strong;
        v344 = v295;
        v345 = -1.0;
        v346 = 0;
        v347 = 0xBFF0000000000000;
        v348 = 0;
        v349 = 0xBFF0000000000000;
        v350 = 0;
        v351 = v394;
        v356 = v285;
        swift_retain();
        swift_retain();
        a5(&v331);
        outlined consume of SetEntityPropertyAction<Transform>?(v260, v230, v253, v228, v227);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v357 = v77;
        v358 = v260;
        v359 = v230;
        v360 = v229;
        v361 = v228;
        v362 = v227;
        v363 = v232;
        v364 = v257;
        v365 = v25;
        v366 = v291;
        v367 = v234;
        v368 = v235;
        v369 = Strong;
        v370 = v295;
        v371 = -1.0;
        v372 = 0;
        v373 = 0xBFF0000000000000;
        v374 = 0;
        v375 = 0xBFF0000000000000;
        v376 = 0;
        v377 = v325;
        v378 = 0;
        v379 = v319;
        v380 = v304;
        v381 = v310;
        v382 = v276;
        v383 = v263;
        v384 = v313;
        v385 = v271;
        v224 = v266;
LABEL_179:
        v386 = v224;
        v174 = v285;
        goto LABEL_187;
      }
LABEL_214:
      __break(1u);
      goto LABEL_215;
    case 8:
      v29 = *(_QWORD *)a2;
      v28 = *(_QWORD *)(a2 + 8);
      v320 = *(_QWORD *)(a2 + 40);
      v326 = *(_QWORD *)(a2 + 32);
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v286 = *(_BYTE *)(a2 + 72);
      v296 = *(_QWORD *)(a2 + 48);
      v301 = *(_QWORD *)(a2 + 80);
      v306 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v89 = specialized static Entity.entityInfoType(_:)(v29);
        if (v89)
        {
          v90 = (*(uint64_t (**)(void))(v89 + 232))();
          v91 = *(_QWORD *)(v90 + 16);
          swift_retain();
          MEMORY[0x22076D160](v91, 0);
          *(_QWORD *)(v90 + 16) = v29;
          MEMORY[0x22076D160](v29, v90);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v29);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v92 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v92 + 16) = v28;
        swift_beginAccess();
        swift_weakAssign();
        v93 = String.init(cString:)();
        v95 = v94;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v96 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v97 = v30;
          swift_bridgeObjectRetain();
          v98 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v95);
          if ((v99 & 1) != 0)
          {
            v100 = (uint64_t *)(*(_QWORD *)(v96 + 56) + 56 * v98);
            v101 = *v100;
            v314 = v100[1];
            v102 = v100[2];
            v103 = v100[3];
            v104 = v100[4];
            v105 = v100[5];
            v106 = v100[6];
            swift_bridgeObjectRelease();
LABEL_108:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v394 = v326;
            BYTE8(v394) = 0;
            *(_QWORD *)&v395 = v320;
            *((_QWORD *)&v395 + 1) = v101;
            *(_QWORD *)&v396 = v314;
            *((_QWORD *)&v396 + 1) = v102;
            *(_QWORD *)&v397 = v103;
            *((_QWORD *)&v397 + 1) = v104;
            *(_QWORD *)&v398 = v105;
            *((_QWORD *)&v398 + 1) = v106;
            v277 = v104;
            v281 = v102;
            v267 = v106;
            v272 = v105;
            if (!v97 || !REBindPointBoundComponent())
            {
              v164 = 0;
              goto LABEL_185;
            }
            v161 = v103;
            v162 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v163 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_224:
                __break(1u);
                goto LABEL_225;
              }
              v236 = specialized static Entity.entityInfoType(_:)(v162);
              if (v236)
              {
                v164 = (*(uint64_t (**)(void))(v236 + 232))();
                v237 = *(_QWORD *)(v164 + 16);
                swift_retain();
                MEMORY[0x22076D160](v237, 0);
                *(_QWORD *)(v164 + 16) = v162;
                MEMORY[0x22076D160](v162, v164);
                swift_release();
                goto LABEL_184;
              }
              v163 = makeEntity(for:)(v162);
            }
            v164 = v163;
LABEL_184:
            v103 = v161;
LABEL_185:
            specialized ActionEventData.action<A>()((uint64_t)&v388);
            v238 = v392;
            if (v392)
            {
              v239 = v391;
              v240 = v390;
              v241 = v389;
              v242 = v388;
              v243 = v393;
              swift_retain();
              outlined copy of SetEntityPropertyAction<Transform>?(v242, v241, v240, v239, v238);
              v244 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Bool>>);
              v352 = v395;
              v353 = v396;
              v354 = v397;
              v355 = v398;
              v245 = v31;
              v246 = v32;
              v332 = v242;
              v333 = v241;
              v334 = v240 & 1;
              v335 = v239;
              v336 = v238;
              v337 = v243;
              v258 = v244 & 1;
              v338 = v244 & 1;
              v331 = v92;
              v339 = v164;
              v340 = v286;
              v341 = v245;
              v342 = v246;
              v344 = 0;
              v345 = 0.0;
              v343 = Strong;
              v346 = 1;
              v347 = v301;
              v348 = 0;
              v349 = v306;
              v350 = 0;
              v351 = v394;
              v356 = v296;
              swift_retain();
              swift_retain();
              a5(&v331);
              outlined consume of SetEntityPropertyAction<Transform>?(v242, v241, v240, v239, v238);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v357 = v92;
              v358 = v242;
              v359 = v241;
              v360 = v240 & 1;
              v361 = v239;
              v362 = v238;
              v363 = v243;
              v364 = v258;
              v365 = v164;
              v366 = v286;
              v367 = v245;
              v368 = v246;
              v371 = 0.0;
              v369 = Strong;
              v370 = 0;
              v372 = 1;
              v373 = v301;
              v374 = 0;
              v375 = v306;
              v376 = 0;
              v377 = v326;
              v378 = 0;
              v379 = v320;
              v380 = v101;
              v381 = v314;
              v382 = v281;
              v383 = v103;
              v384 = v277;
              v385 = v272;
              v386 = v267;
              v174 = v296;
              goto LABEL_187;
            }
            goto LABEL_188;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v97 = v30;
        }
        v101 = 0;
        v314 = 0;
        v102 = 0;
        v103 = 0;
        v104 = 0;
        v105 = 0;
        v106 = 0;
        goto LABEL_108;
      }
LABEL_215:
      __break(1u);
      goto LABEL_216;
    case 16:
      v34 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v327 = *(_QWORD *)(a2 + 40);
      v302 = *(_QWORD *)(a2 + 48);
      v307 = *(_QWORD *)(a2 + 32);
      v297 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_216:
        __break(1u);
        goto LABEL_217;
      }
      v107 = specialized static Entity.entityInfoType(_:)(v34);
      if (v107)
      {
        v108 = (*(uint64_t (**)(void))(v107 + 232))();
        v109 = *(_QWORD *)(v108 + 16);
        swift_retain();
        MEMORY[0x22076D160](v109, 0);
        *(_QWORD *)(v108 + 16) = v34;
        MEMORY[0x22076D160](v34, v108);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v34);
      }
LABEL_57:
      type metadata accessor for AnimationPlaybackController();
      v110 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v110 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v111 = String.init(cString:)();
      v113 = v112;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v114 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_115;
      swift_bridgeObjectRetain();
      v115 = specialized __RawDictionaryStorage.find<A>(_:)(v111, v113);
      if ((v116 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_115:
        v315 = 0;
        v321 = 0;
        v118 = 0;
        v119 = 0;
        v120 = 0;
        v122 = 0;
        v121 = 0;
        goto LABEL_116;
      }
      v117 = (uint64_t *)(*(_QWORD *)(v114 + 56) + 56 * v115);
      v118 = v117[2];
      v315 = *v117;
      v321 = v117[1];
      v119 = v117[3];
      v120 = v117[4];
      v122 = v117[5];
      v121 = v117[6];
      swift_bridgeObjectRelease();
LABEL_116:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v394 = 0;
      BYTE8(v394) = 0;
      *(_QWORD *)&v395 = v327;
      *((_QWORD *)&v395 + 1) = v315;
      *(_QWORD *)&v396 = v321;
      *((_QWORD *)&v396 + 1) = v118;
      *(_QWORD *)&v397 = v119;
      *((_QWORD *)&v397 + 1) = v120;
      *(_QWORD *)&v398 = v122;
      *((_QWORD *)&v398 + 1) = v121;
      v282 = v120;
      v287 = v119;
      if (!v297 || !REBindPointBoundComponent())
        goto LABEL_128;
      v165 = REComponentGetEntity();
      if (!(id)REEntityGetSwiftObject())
      {
        if ((REEntityIsBeingDestroyed() & 1) == 0)
          goto LABEL_192;
        __break(1u);
        goto LABEL_121;
      }
LABEL_126:
      type metadata accessor for Entity();
      v166 = swift_dynamicCastClassUnconditional();
LABEL_127:
      v167 = v166;
LABEL_129:
      specialized ActionEventData.action<A>()((uint64_t)&v388);
      v168 = v392;
      if (!v392)
        goto LABEL_188;
      v352 = v395;
      v353 = v396;
      v354 = v397;
      v355 = v398;
      v298 = v121;
      v169 = v391;
      v273 = v118;
      v278 = v122;
      v170 = v390;
      v171 = v389;
      v172 = v388;
      v173 = v393;
      v332 = v388;
      v333 = v389;
      v268 = v390 & 1;
      v334 = v390 & 1;
      v335 = v391;
      v336 = v392;
      v337 = v393;
      v338 = 1;
      v331 = v110;
      v339 = v167;
      v340 = 0;
      v341 = 0.0;
      v342 = 0.0;
      v344 = 0;
      v345 = 0.0;
      v343 = Strong;
      v346 = 1;
      v347 = v307;
      v348 = 0;
      v349 = 0;
      v350 = 1;
      v351 = v394;
      v356 = v302;
      swift_retain();
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v172, v171, v170, v169, v168);
      swift_retain();
      a5(&v331);
      outlined consume of SetEntityPropertyAction<Transform>?(v172, v171, v170, v169, v168);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v357 = v110;
      v358 = v172;
      v359 = v171;
      v360 = v268;
      v361 = v169;
      v362 = v168;
      v363 = v173;
      v364 = 1;
      v365 = v167;
      v366 = 0;
      v367 = 0.0;
      v368 = 0.0;
      v371 = 0.0;
      v369 = Strong;
      v370 = 0;
      v372 = 1;
      v373 = v307;
      v374 = 0;
      v375 = 0;
      v376 = 1;
      v377 = 0;
      v378 = 0;
      v379 = v327;
      v380 = v315;
      v381 = v321;
      v382 = v273;
      v383 = v287;
      v384 = v282;
      v385 = v278;
      v386 = v298;
      v174 = v302;
LABEL_187:
      v387 = v174;
      outlined release of ActionEvent<SetEntityPropertyAction<Bool>>((uint64_t)&v357);
      return 0;
    case 32:
      v36 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v327 = *(_QWORD *)(a2 + 40);
      v302 = *(_QWORD *)(a2 + 48);
      v307 = *(_QWORD *)(a2 + 32);
      v297 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v123 = specialized static Entity.entityInfoType(_:)(v36);
        if (v123)
        {
          v124 = (*(uint64_t (**)(void))(v123 + 232))();
          v125 = *(_QWORD *)(v124 + 16);
          swift_retain();
          MEMORY[0x22076D160](v125, 0);
          *(_QWORD *)(v124 + 16) = v36;
          MEMORY[0x22076D160](v36, v124);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v110 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v110 + 16) = v35;
      swift_beginAccess();
      swift_weakAssign();
      v126 = String.init(cString:)();
      v128 = v127;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v129 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_122;
      swift_bridgeObjectRetain();
      v130 = specialized __RawDictionaryStorage.find<A>(_:)(v126, v128);
      if ((v131 & 1) != 0)
      {
        v132 = (uint64_t *)(*(_QWORD *)(v129 + 56) + 56 * v130);
        v118 = v132[2];
        v315 = *v132;
        v321 = v132[1];
        v133 = v132[3];
        v134 = v132[4];
        v122 = v132[5];
        v121 = v132[6];
        swift_bridgeObjectRelease();
LABEL_123:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v394 = 0;
        BYTE8(v394) = 0;
        *(_QWORD *)&v395 = v327;
        *((_QWORD *)&v395 + 1) = v315;
        *(_QWORD *)&v396 = v321;
        *((_QWORD *)&v396 + 1) = v118;
        *(_QWORD *)&v397 = v133;
        *((_QWORD *)&v397 + 1) = v134;
        *(_QWORD *)&v398 = v122;
        *((_QWORD *)&v398 + 1) = v121;
        v282 = v134;
        v287 = v133;
        if (v297 && REBindPointBoundComponent())
        {
          v165 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
            goto LABEL_126;
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_225:
            __break(1u);
            goto LABEL_226;
          }
LABEL_192:
          v247 = specialized static Entity.entityInfoType(_:)(v165);
          if (v247)
          {
            v167 = (*(uint64_t (**)(void))(v247 + 232))();
            v248 = *(_QWORD *)(v167 + 16);
            swift_retain();
            MEMORY[0x22076D160](v248, 0);
            *(_QWORD *)(v167 + 16) = v165;
            MEMORY[0x22076D160](v165, v167);
            swift_release();
            goto LABEL_129;
          }
          v166 = makeEntity(for:)(v165);
          goto LABEL_127;
        }
LABEL_128:
        v167 = 0;
        goto LABEL_129;
      }
LABEL_121:
      swift_bridgeObjectRelease();
LABEL_122:
      v315 = 0;
      v321 = 0;
      v118 = 0;
      v133 = 0;
      v134 = 0;
      v122 = 0;
      v121 = 0;
      goto LABEL_123;
    case 64:
      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v39 = *(_QWORD *)(a2 + 24);
      v40 = *(_QWORD *)(a2 + 40);
      v305 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v135 = specialized static Entity.entityInfoType(_:)(v38);
        if (v135)
        {
          v136 = (*(uint64_t (**)(void))(v135 + 232))();
          v137 = *(_QWORD *)(v136 + 16);
          swift_retain();
          MEMORY[0x22076D160](v137, 0);
          *(_QWORD *)(v136 + 16) = v38;
          MEMORY[0x22076D160](v38, v136);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v138 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v138 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      if (v40 && REBindPointBoundComponent())
      {
        v139 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v140 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v141 = v140;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v199 = specialized static Entity.entityInfoType(_:)(v139);
        if (!v199)
        {
          v140 = makeEntity(for:)(v139);
          goto LABEL_77;
        }
        v141 = (*(uint64_t (**)(void))(v199 + 232))();
        v200 = *(_QWORD *)(v141 + 16);
        swift_retain();
        MEMORY[0x22076D160](v200, 0);
        *(_QWORD *)(v141 + 16) = v139;
        MEMORY[0x22076D160](v139, v141);
        swift_release();
      }
      else
      {
        v141 = 0;
      }
LABEL_79:
      v142 = String.init(cString:)();
      v144 = v143;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v145 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v146 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v144);
        if ((v147 & 1) != 0)
        {
          v148 = (uint64_t *)(*(_QWORD *)(v145 + 56) + 56 * v146);
          v149 = *v148;
          v150 = v148[1];
          v151 = v148[2];
          v152 = v148[3];
          v322 = v148[5];
          v328 = v148[4];
          v316 = v148[6];
          swift_bridgeObjectRelease();
LABEL_133:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v394 = 0;
          BYTE8(v394) = 0;
          *(_QWORD *)&v395 = v39;
          *((_QWORD *)&v395 + 1) = v149;
          *(_QWORD *)&v396 = v150;
          *((_QWORD *)&v396 + 1) = v151;
          v292 = v152;
          v299 = v151;
          *(_QWORD *)&v397 = v152;
          *((_QWORD *)&v397 + 1) = v328;
          *(_QWORD *)&v398 = v322;
          *((_QWORD *)&v398 + 1) = v316;
          specialized ActionEventData.action<A>()((uint64_t)&v388);
          v175 = v392;
          if (!v392)
            goto LABEL_188;
          v352 = v395;
          v353 = v396;
          v354 = v397;
          v355 = v398;
          v283 = v39;
          v288 = v150;
          v176 = Strong;
          v177 = v391;
          v178 = v390;
          v179 = v389;
          v180 = v388;
          v279 = v149;
          v181 = v393;
          v332 = v388;
          v333 = v389;
          v274 = v390 & 1;
          v334 = v390 & 1;
          v335 = v391;
          v336 = v392;
          v337 = v393;
          v338 = 1;
          v331 = v138;
          v339 = v141;
          v340 = 0;
          v341 = 0.0;
          v342 = 0.0;
          v344 = 0;
          v345 = 0.0;
          v343 = Strong;
          v346 = 1;
          v347 = 0;
          v348 = 1;
          v349 = 0;
          v350 = 1;
          v351 = v394;
          v356 = v305;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v180, v179, v178, v177, v175);
          swift_retain();
          a5(&v331);
          outlined consume of SetEntityPropertyAction<Transform>?(v180, v179, v178, v177, v175);
          swift_release();
LABEL_156:
          swift_release();
          swift_release();
          swift_release();
          v357 = v138;
          v358 = v180;
          v359 = v179;
          v360 = v274;
          v361 = v177;
          v362 = v175;
          v363 = v181;
          v364 = 1;
          v365 = v141;
          v366 = 0;
          v367 = 0.0;
          v368 = 0.0;
          v371 = 0.0;
          v369 = v176;
          v370 = 0;
          v372 = 1;
          v373 = 0;
          v374 = 1;
          v375 = 0;
          v376 = 1;
          v377 = 0;
          v378 = 0;
          v379 = v283;
          v380 = v279;
          v381 = v288;
          v382 = v299;
          v383 = v292;
          v384 = v328;
          v385 = v322;
          v386 = v316;
          v174 = v305;
          goto LABEL_187;
        }
        swift_bridgeObjectRelease();
      }
      v149 = 0;
      v150 = 0;
      v151 = 0;
      v152 = 0;
      v322 = 0;
      v328 = 0;
      v316 = 0;
      goto LABEL_133;
    default:
      if (a4 != 128)
        goto LABEL_189;
      v14 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 40);
      v305 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v182 = specialized static Entity.entityInfoType(_:)(v14);
        if (v182)
        {
          v183 = (*(uint64_t (**)(void))(v182 + 232))();
          v184 = *(_QWORD *)(v183 + 16);
          swift_retain();
          MEMORY[0x22076D160](v184, 0);
          *(_QWORD *)(v183 + 16) = v14;
          MEMORY[0x22076D160](v14, v183);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v138 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v138 + 16) = v13;
      swift_beginAccess();
      swift_weakAssign();
      if (v16 && REBindPointBoundComponent())
      {
        v185 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v186 = swift_dynamicCastClassUnconditional();
LABEL_142:
          v141 = v186;
          goto LABEL_144;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          JUMPOUT(0x21BB3E160);
        }
        v249 = specialized static Entity.entityInfoType(_:)(v185);
        if (!v249)
        {
          v186 = makeEntity(for:)(v185);
          goto LABEL_142;
        }
        v141 = (*(uint64_t (**)(void))(v249 + 232))();
        v250 = *(_QWORD *)(v141 + 16);
        swift_retain();
        MEMORY[0x22076D160](v250, 0);
        *(_QWORD *)(v141 + 16) = v185;
        MEMORY[0x22076D160](v185, v141);
        swift_release();
      }
      else
      {
        v141 = 0;
      }
LABEL_144:
      v187 = String.init(cString:)();
      v189 = v188;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v190 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v191 = specialized __RawDictionaryStorage.find<A>(_:)(v187, v189);
        if ((v192 & 1) != 0)
        {
          v193 = (uint64_t *)(*(_QWORD *)(v190 + 56) + 56 * v191);
          v194 = *v193;
          v195 = v193[1];
          v196 = v193[2];
          v197 = v193[3];
          v322 = v193[5];
          v328 = v193[4];
          v316 = v193[6];
          swift_bridgeObjectRelease();
LABEL_154:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v394 = 0;
          BYTE8(v394) = 0;
          *(_QWORD *)&v395 = v15;
          *((_QWORD *)&v395 + 1) = v194;
          *(_QWORD *)&v396 = v195;
          *((_QWORD *)&v396 + 1) = v196;
          v292 = v197;
          v299 = v196;
          *(_QWORD *)&v397 = v197;
          *((_QWORD *)&v397 + 1) = v328;
          *(_QWORD *)&v398 = v322;
          *((_QWORD *)&v398 + 1) = v316;
          specialized ActionEventData.action<A>()((uint64_t)&v388);
          v175 = v392;
          if (!v392)
            goto LABEL_188;
          v352 = v395;
          v353 = v396;
          v354 = v397;
          v355 = v398;
          v283 = v15;
          v288 = v195;
          v176 = Strong;
          v177 = v391;
          v198 = v390;
          v179 = v389;
          v180 = v388;
          v279 = v194;
          v181 = v393;
          v332 = v388;
          v333 = v389;
          v274 = v390 & 1;
          v334 = v390 & 1;
          v335 = v391;
          v336 = v392;
          v337 = v393;
          v338 = 1;
          v331 = v138;
          v339 = v141;
          v340 = 0;
          v341 = 0.0;
          v342 = 0.0;
          v344 = 0;
          v345 = 0.0;
          v343 = Strong;
          v346 = 1;
          v347 = 0;
          v348 = 1;
          v349 = 0;
          v350 = 1;
          v351 = v394;
          v356 = v305;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v180, v179, v198, v177, v175);
          swift_retain();
          a5(&v331);
          swift_release();
          outlined consume of SetEntityPropertyAction<Transform>?(v180, v179, v198, v177, v175);
          goto LABEL_156;
        }
        swift_bridgeObjectRelease();
      }
      v194 = 0;
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v322 = 0;
      v328 = 0;
      v316 = 0;
      goto LABEL_154;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t Entity;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  char v212;
  double v213;
  double v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  char v225;
  double v226;
  double v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  char v238;
  double v239;
  double v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  double v253;
  double v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  char v267;
  char v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  char v273;
  char v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  char v285;
  char v286;
  uint64_t v287;
  char v288;
  char v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  int v296;
  char v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  char v303;
  uint64_t v304;
  char v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t Strong;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  char v361;
  char v362;
  uint64_t v363;
  char v364;
  double v365;
  double v366;
  uint64_t v367;
  uint64_t v368;
  double v369;
  char v370;
  unint64_t v371;
  char v372;
  unint64_t v373;
  char v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  char v388;
  char v389;
  uint64_t v390;
  char v391;
  double v392;
  double v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  char v397;
  unint64_t v398;
  char v399;
  unint64_t v400;
  char v401;
  uint64_t v402;
  char v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  char v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v342 = *(_QWORD *)(a2 + 40);
      v347 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v285 = *(_BYTE *)(a2 + 80);
      v308 = *(_QWORD *)(a2 + 48);
      v314 = *(_QWORD *)(a2 + 88);
      v318 = *(_QWORD *)(a2 + 96);
      v323 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v42 = specialized static Entity.entityInfoType(_:)(v7);
        if (v42)
        {
          v43 = (*(uint64_t (**)(void))(v42 + 232))();
          v44 = *(_QWORD *)(v43 + 16);
          swift_retain();
          MEMORY[0x22076D160](v44, 0);
          *(_QWORD *)(v43 + 16) = v7;
          MEMORY[0x22076D160](v7, v43);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v7);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v45 = swift_allocObject();
        swift_weakInit();
        v46 = v45;
        *(_QWORD *)(v45 + 16) = v8;
        swift_beginAccess();
        swift_weakAssign();
        v47 = String.init(cString:)();
        v49 = v48;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v50 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v51 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v49);
          if ((v52 & 1) != 0)
          {
            v53 = (uint64_t *)(*(_QWORD *)(v50 + 56) + 56 * v51);
            v54 = v53[2];
            v334 = v53[1];
            v337 = *v53;
            v55 = v53[3];
            v330 = v53[4];
            v57 = v53[5];
            v56 = v53[6];
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
          swift_bridgeObjectRelease();
        }
        v334 = 0;
        v337 = 0;
        v54 = 0;
        v55 = 0;
        v330 = 0;
        v57 = 0;
        v56 = 0;
LABEL_86:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v420 = v347;
        BYTE8(v420) = 0;
        *(_QWORD *)&v421 = v342;
        *((_QWORD *)&v421 + 1) = v337;
        *(_QWORD *)&v422 = v334;
        *((_QWORD *)&v422 + 1) = v54;
        *(_QWORD *)&v423 = v55;
        *((_QWORD *)&v423 + 1) = v330;
        *(_QWORD *)&v424 = v57;
        *((_QWORD *)&v424 + 1) = v56;
        v280 = v57;
        v282 = v54;
        v279 = v56;
        if (!v9 || !REBindPointBoundComponent())
        {
          v299 = 0;
          goto LABEL_162;
        }
        v153 = v55;
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v155 = swift_dynamicCastClassUnconditional();
          goto LABEL_90;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v203 = specialized static Entity.entityInfoType(_:)(Entity);
          if (v203)
          {
            v204 = (*(uint64_t (**)(void))(v203 + 232))();
            v205 = *(_QWORD *)(v204 + 16);
            swift_retain();
            MEMORY[0x22076D160](v205, 0);
            *(_QWORD *)(v204 + 16) = Entity;
            MEMORY[0x22076D160](Entity, v204);
            v299 = v204;
            swift_release();
            goto LABEL_161;
          }
          v155 = makeEntity(for:)(Entity);
LABEL_90:
          v299 = v155;
LABEL_161:
          v55 = v153;
LABEL_162:
          specialized ActionEventData.action<A>()((uint64_t)&v413);
          v206 = v417;
          if (v417)
          {
            v295 = v418;
            v276 = v55;
            v207 = v416;
            v208 = v415;
            v209 = v414;
            v210 = v413;
            v270 = v413;
            v211 = v419 & 1;
            v268 = v419 & 1;
            swift_retain();
            outlined copy of SetEntityPropertyAction<Transform>?(v210, v209, v208, v207, v206);
            v212 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Float>>);
            v376 = v421;
            v377 = v422;
            v378 = v423;
            v379 = v424;
            v213 = v10;
            v214 = v11;
            v357 = v208 & 1;
            v358 = v207;
            v359 = v206;
            v360 = v295;
            v361 = v211;
            v266 = v212 & 1;
            v362 = v212 & 1;
            v355 = v270;
            v356 = v209;
            v354 = v46;
            v363 = v299;
            v364 = v285;
            v365 = v213;
            v366 = v214;
            v367 = Strong;
            v368 = v323;
            v369 = -1.0;
            v370 = 0;
            v371 = v314;
            v372 = 0;
            v373 = v318;
            v374 = 0;
            v375 = v420;
            v380 = v308;
            swift_retain();
            swift_retain();
            a5(&v354);
            outlined consume of SetEntityPropertyAction<Transform>?(v270, v209, v208, v207, v206);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v381 = v46;
            v382 = v270;
            v383 = v209;
            v384 = v208 & 1;
            v385 = v207;
            v386 = v206;
            v387 = v295;
            v388 = v268;
            v389 = v266;
            v390 = v299;
            v391 = v285;
            v392 = v213;
            v393 = v214;
            v394 = Strong;
            v395 = v323;
            v396 = -1.0;
            v397 = 0;
            v215 = v314;
LABEL_171:
            v398 = v215;
            v399 = 0;
            v400 = v318;
            v401 = 0;
            v402 = v347;
            v403 = 0;
            v404 = v342;
            v405 = v337;
            v406 = v334;
            v407 = v282;
            v408 = v276;
            v409 = v330;
            v410 = v280;
            v411 = v279;
            v200 = v308;
            goto LABEL_194;
          }
          goto LABEL_195;
        }
        goto LABEL_225;
      }
      __break(1u);
      goto LABEL_217;
    case 2:
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v342 = *(_QWORD *)(a2 + 40);
      v347 = *(_QWORD *)(a2 + 32);
      v19 = *(float *)(a2 + 56);
      v318 = *(_QWORD *)(a2 + 64);
      v324 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 88);
      v308 = *(_QWORD *)(a2 + 80);
      v315 = *(_QWORD *)(a2 + 72);
      v21 = *(float *)(a2 + 96);
      v22 = *(float *)(a2 + 100);
      v286 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v58 = specialized static Entity.entityInfoType(_:)(v17);
        if (v58)
        {
          v59 = (*(uint64_t (**)(void))(v58 + 232))();
          v60 = *(_QWORD *)(v59 + 16);
          swift_retain();
          MEMORY[0x22076D160](v60, 0);
          *(_QWORD *)(v59 + 16) = v17;
          MEMORY[0x22076D160](v17, v59);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v17);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v61 = swift_allocObject();
        swift_weakInit();
        v62 = v61;
        *(_QWORD *)(v61 + 16) = v18;
        swift_beginAccess();
        swift_weakAssign();
        v63 = String.init(cString:)();
        v65 = v64;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v66 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v65);
          if ((v68 & 1) != 0)
          {
            v69 = (uint64_t *)(*(_QWORD *)(v66 + 56) + 56 * v67);
            v70 = v69[2];
            v334 = v69[1];
            v337 = *v69;
            v71 = v69[3];
            v330 = v69[4];
            v73 = v69[5];
            v72 = v69[6];
            swift_bridgeObjectRelease();
LABEL_94:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v420 = v347;
            BYTE8(v420) = 0;
            *(_QWORD *)&v421 = v342;
            *((_QWORD *)&v421 + 1) = v337;
            *(_QWORD *)&v422 = v334;
            *((_QWORD *)&v422 + 1) = v70;
            *(_QWORD *)&v423 = v71;
            *((_QWORD *)&v423 + 1) = v330;
            *(_QWORD *)&v424 = v73;
            *((_QWORD *)&v424 + 1) = v72;
            v280 = v73;
            v282 = v70;
            v279 = v72;
            if (!v20 || !REBindPointBoundComponent())
            {
              v300 = 0;
              goto LABEL_169;
            }
            v156 = v71;
            v157 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v158 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_226:
                __break(1u);
                goto LABEL_227;
              }
              v216 = specialized static Entity.entityInfoType(_:)(v157);
              if (v216)
              {
                v217 = (*(uint64_t (**)(void))(v216 + 232))();
                v218 = *(_QWORD *)(v217 + 16);
                swift_retain();
                MEMORY[0x22076D160](v218, 0);
                *(_QWORD *)(v217 + 16) = v157;
                MEMORY[0x22076D160](v157, v217);
                v300 = v217;
                swift_release();
                goto LABEL_168;
              }
              v158 = makeEntity(for:)(v157);
            }
            v300 = v158;
LABEL_168:
            v71 = v156;
LABEL_169:
            specialized ActionEventData.action<A>()((uint64_t)&v413);
            v219 = v417;
            if (v417)
            {
              v296 = v418;
              v276 = v71;
              v220 = v416;
              v221 = v415;
              v222 = v414;
              v223 = v413;
              v271 = v413;
              v224 = v419 & 1;
              v269 = v419 & 1;
              swift_retain();
              outlined copy of SetEntityPropertyAction<Transform>?(v223, v222, v221, v220, v219);
              v225 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Float>>);
              v376 = v421;
              v377 = v422;
              v378 = v423;
              v379 = v424;
              v226 = v21;
              v227 = v22;
              v228 = v19;
              v357 = v221 & 1;
              v358 = v220;
              v359 = v219;
              v360 = v296;
              v361 = v224;
              v267 = v225 & 1;
              v362 = v225 & 1;
              v355 = v271;
              v356 = v222;
              v354 = v62;
              v363 = v300;
              v364 = v286;
              v365 = v226;
              v366 = v227;
              v367 = Strong;
              v368 = v315;
              v369 = v228;
              v370 = 0;
              v371 = v324;
              v372 = 0;
              v373 = v318;
              v374 = 0;
              v375 = v420;
              v380 = v308;
              swift_retain();
              swift_retain();
              a5(&v354);
              outlined consume of SetEntityPropertyAction<Transform>?(v271, v222, v221, v220, v219);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v381 = v62;
              v382 = v271;
              v383 = v222;
              v384 = v221 & 1;
              v385 = v220;
              v386 = v219;
              v387 = v296;
              v388 = v269;
              v389 = v267;
              v390 = v300;
              v391 = v286;
              v392 = v226;
              v393 = v227;
              v394 = Strong;
              v395 = v315;
              v396 = v228;
              v397 = 0;
              v215 = v324;
              goto LABEL_171;
            }
LABEL_195:
            swift_release();
            swift_release();
            swift_release();
LABEL_196:
            swift_release();
            return 0;
          }
          swift_bridgeObjectRelease();
        }
        v334 = 0;
        v337 = 0;
        v70 = 0;
        v71 = 0;
        v330 = 0;
        v73 = 0;
        v72 = 0;
        goto LABEL_94;
      }
LABEL_217:
      __break(1u);
      goto LABEL_218;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_196;
    case 4:
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      v343 = *(_QWORD *)(a2 + 40);
      v348 = *(_QWORD *)(a2 + 32);
      v25 = *(_QWORD *)(a2 + 64);
      v319 = *(_QWORD *)(a2 + 48);
      v325 = *(_QWORD *)(a2 + 56);
      v26 = *(float *)(a2 + 72);
      v27 = *(float *)(a2 + 76);
      v298 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v74 = specialized static Entity.entityInfoType(_:)(v23);
        if (v74)
        {
          v75 = (*(uint64_t (**)(void))(v74 + 232))();
          v76 = *(_QWORD *)(v75 + 16);
          swift_retain();
          MEMORY[0x22076D160](v76, 0);
          *(_QWORD *)(v75 + 16) = v23;
          MEMORY[0x22076D160](v23, v75);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v23);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v77 = swift_allocObject();
        swift_weakInit();
        v78 = v77;
        *(_QWORD *)(v77 + 16) = v24;
        swift_beginAccess();
        swift_weakAssign();
        v79 = String.init(cString:)();
        v81 = v80;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v82 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v83 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v81);
          if ((v84 & 1) != 0)
          {
            v85 = (uint64_t *)(*(_QWORD *)(v82 + 56) + 56 * v83);
            v86 = v85[2];
            v335 = v85[1];
            v338 = *v85;
            v87 = v85[3];
            v331 = v85[4];
            v89 = v85[5];
            v88 = v85[6];
            swift_bridgeObjectRelease();
LABEL_102:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v420 = v348;
            BYTE8(v420) = 0;
            *(_QWORD *)&v421 = v343;
            *((_QWORD *)&v421 + 1) = v338;
            *(_QWORD *)&v422 = v335;
            *((_QWORD *)&v422 + 1) = v86;
            *(_QWORD *)&v423 = v87;
            *((_QWORD *)&v423 + 1) = v331;
            *(_QWORD *)&v424 = v89;
            *((_QWORD *)&v424 + 1) = v88;
            v287 = v89;
            v291 = v86;
            v283 = v88;
            if (!v25 || !REBindPointBoundComponent())
            {
              v309 = 0;
LABEL_177:
              specialized ActionEventData.action<A>()((uint64_t)&v413);
              v232 = v417;
              if (!v417)
                goto LABEL_195;
              v307 = v418;
              v233 = v416;
              v234 = v415;
              v235 = v414;
              v236 = v413;
              v277 = v413;
              v237 = v419 & 1;
              v274 = v419 & 1;
              swift_retain();
              outlined copy of SetEntityPropertyAction<Transform>?(v236, v235, v234, v233, v232);
              v238 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Float>>);
              v376 = v421;
              v377 = v422;
              v378 = v423;
              v379 = v424;
              v239 = v26;
              v240 = v27;
              v357 = v234 & 1;
              v358 = v233;
              v359 = v232;
              v360 = v307;
              v361 = v237;
              v272 = v238 & 1;
              v362 = v238 & 1;
              v355 = v277;
              v356 = v235;
              v354 = v78;
              v363 = v309;
              v364 = v298;
              v365 = v239;
              v366 = v240;
              v367 = Strong;
              v368 = v325;
              v369 = -1.0;
              v370 = 0;
              v371 = 0xBFF0000000000000;
              v372 = 0;
              v373 = 0xBFF0000000000000;
              v374 = 0;
              v375 = v420;
              v380 = v319;
              swift_retain();
              swift_retain();
              a5(&v354);
              outlined consume of SetEntityPropertyAction<Transform>?(v277, v235, v234, v233, v232);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v381 = v78;
              v382 = v277;
              v383 = v235;
              v384 = v234 & 1;
              v385 = v233;
              v386 = v232;
              v387 = v307;
              v388 = v274;
              v389 = v272;
              v390 = v309;
              v391 = v298;
              v392 = v239;
              v393 = v240;
              v394 = Strong;
              v395 = v325;
              v396 = -1.0;
              v397 = 0;
              v398 = 0xBFF0000000000000;
              v399 = 0;
              v400 = 0xBFF0000000000000;
              v401 = 0;
              v402 = v348;
              v403 = 0;
              v404 = v343;
              v405 = v338;
              v406 = v335;
              v407 = v291;
              v408 = v87;
              v241 = v331;
              goto LABEL_186;
            }
            v159 = v87;
            v160 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v161 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_227:
                __break(1u);
                goto LABEL_228;
              }
              v229 = specialized static Entity.entityInfoType(_:)(v160);
              if (v229)
              {
                v230 = (*(uint64_t (**)(void))(v229 + 232))();
                v231 = *(_QWORD *)(v230 + 16);
                swift_retain();
                MEMORY[0x22076D160](v231, 0);
                *(_QWORD *)(v230 + 16) = v160;
                MEMORY[0x22076D160](v160, v230);
                v309 = v230;
                swift_release();
                goto LABEL_176;
              }
              v161 = makeEntity(for:)(v160);
            }
            v309 = v161;
LABEL_176:
            v87 = v159;
            goto LABEL_177;
          }
          swift_bridgeObjectRelease();
        }
        v335 = 0;
        v338 = 0;
        v86 = 0;
        v87 = 0;
        v331 = 0;
        v89 = 0;
        v88 = 0;
        goto LABEL_102;
      }
LABEL_218:
      __break(1u);
      goto LABEL_219;
    case 8:
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v344 = *(_QWORD *)(a2 + 40);
      v349 = *(_QWORD *)(a2 + 32);
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v305 = *(_BYTE *)(a2 + 72);
      v319 = *(_QWORD *)(a2 + 48);
      v326 = *(_QWORD *)(a2 + 80);
      v328 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v90 = specialized static Entity.entityInfoType(_:)(v28);
        if (v90)
        {
          v91 = (*(uint64_t (**)(void))(v90 + 232))();
          v92 = *(_QWORD *)(v91 + 16);
          swift_retain();
          MEMORY[0x22076D160](v92, 0);
          *(_QWORD *)(v91 + 16) = v28;
          MEMORY[0x22076D160](v28, v91);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v28);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v93 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v93 + 16) = v29;
        swift_beginAccess();
        swift_weakAssign();
        v94 = String.init(cString:)();
        v96 = v95;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v97 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v98 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v96);
          if ((v99 & 1) != 0)
          {
            v100 = (uint64_t *)(*(_QWORD *)(v97 + 56) + 56 * v98);
            v101 = v100[2];
            v336 = v100[1];
            v339 = *v100;
            v102 = v100[3];
            v103 = v100[4];
            v105 = v100[5];
            v104 = v100[6];
            swift_bridgeObjectRelease();
LABEL_110:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v420 = v349;
            BYTE8(v420) = 0;
            *(_QWORD *)&v421 = v344;
            *((_QWORD *)&v421 + 1) = v339;
            *(_QWORD *)&v422 = v336;
            *((_QWORD *)&v422 + 1) = v101;
            *(_QWORD *)&v423 = v102;
            *((_QWORD *)&v423 + 1) = v103;
            *(_QWORD *)&v424 = v105;
            *((_QWORD *)&v424 + 1) = v104;
            v292 = v103;
            v301 = v101;
            v283 = v104;
            v287 = v105;
            if (!v30 || !REBindPointBoundComponent())
            {
              v310 = 0;
LABEL_184:
              specialized ActionEventData.action<A>()((uint64_t)&v413);
              v245 = v417;
              if (!v417)
                goto LABEL_195;
              v246 = v418;
              v281 = v102;
              v275 = v418;
              v247 = v416;
              v248 = v415;
              v249 = v414;
              v250 = v413;
              v251 = v419 & 1;
              v278 = v419 & 1;
              swift_retain();
              outlined copy of SetEntityPropertyAction<Transform>?(v250, v249, v248, v247, v245);
              v252 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Float>>);
              v376 = v421;
              v377 = v422;
              v378 = v423;
              v379 = v424;
              v253 = v31;
              v254 = v32;
              v355 = v250;
              v356 = v249;
              v255 = v248;
              LOBYTE(v248) = v248 & 1;
              v357 = v248;
              v358 = v247;
              v359 = v245;
              v360 = v246;
              v361 = v251;
              v273 = v252 & 1;
              v362 = v252 & 1;
              v354 = v93;
              v363 = v310;
              v364 = v305;
              v365 = v253;
              v366 = v254;
              v368 = 0;
              v369 = 0.0;
              v367 = Strong;
              v370 = 1;
              v371 = v326;
              v372 = 0;
              v373 = v328;
              v374 = 0;
              v375 = v420;
              v380 = v319;
              swift_retain();
              swift_retain();
              a5(&v354);
              outlined consume of SetEntityPropertyAction<Transform>?(v250, v249, v255, v247, v245);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v381 = v93;
              v382 = v250;
              v383 = v249;
              v384 = v248;
              v385 = v247;
              v386 = v245;
              v387 = v275;
              v388 = v278;
              v389 = v273;
              v390 = v310;
              v391 = v305;
              v392 = v253;
              v393 = v254;
              v396 = 0.0;
              v394 = Strong;
              v395 = 0;
              v397 = 1;
              v398 = v326;
              v399 = 0;
              v400 = v328;
              v401 = 0;
              v402 = v349;
              v403 = 0;
              v404 = v344;
              v405 = v339;
              v406 = v336;
              v407 = v301;
              v408 = v281;
              v241 = v292;
LABEL_186:
              v409 = v241;
              v410 = v287;
              v411 = v283;
              v200 = v319;
              goto LABEL_194;
            }
            v162 = v102;
            v163 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v164 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_228:
                __break(1u);
                goto LABEL_229;
              }
              v242 = specialized static Entity.entityInfoType(_:)(v163);
              if (v242)
              {
                v243 = (*(uint64_t (**)(void))(v242 + 232))();
                v244 = *(_QWORD *)(v243 + 16);
                swift_retain();
                MEMORY[0x22076D160](v244, 0);
                *(_QWORD *)(v243 + 16) = v163;
                MEMORY[0x22076D160](v163, v243);
                v310 = v243;
                swift_release();
                goto LABEL_183;
              }
              v164 = makeEntity(for:)(v163);
            }
            v310 = v164;
LABEL_183:
            v102 = v162;
            goto LABEL_184;
          }
          swift_bridgeObjectRelease();
        }
        v336 = 0;
        v339 = 0;
        v101 = 0;
        v102 = 0;
        v103 = 0;
        v105 = 0;
        v104 = 0;
        goto LABEL_110;
      }
LABEL_219:
      __break(1u);
      goto LABEL_220;
    case 16:
      v33 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      v350 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v329 = *(_QWORD *)(a2 + 48);
      v333 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v106 = specialized static Entity.entityInfoType(_:)(v33);
        if (v106)
        {
          v107 = (*(uint64_t (**)(void))(v106 + 232))();
          v108 = *(_QWORD *)(v107 + 16);
          swift_retain();
          MEMORY[0x22076D160](v108, 0);
          *(_QWORD *)(v107 + 16) = v33;
          MEMORY[0x22076D160](v33, v107);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v33);
        }
LABEL_57:
        type metadata accessor for AnimationPlaybackController();
        v109 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v109 + 16) = v34;
        swift_beginAccess();
        swift_weakAssign();
        v110 = String.init(cString:)();
        v112 = v111;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v113 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v114 = specialized __RawDictionaryStorage.find<A>(_:)(v110, v112);
          if ((v115 & 1) != 0)
          {
            v116 = (uint64_t *)(*(_QWORD *)(v113 + 56) + 56 * v114);
            v117 = v116[2];
            v340 = v116[1];
            v345 = *v116;
            v118 = v116[3];
            v119 = v116[4];
            v121 = v116[5];
            v120 = v116[6];
            swift_bridgeObjectRelease();
            goto LABEL_118;
          }
          swift_bridgeObjectRelease();
        }
        v340 = 0;
        v345 = 0;
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v121 = 0;
        v120 = 0;
LABEL_118:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v420 = 0;
        BYTE8(v420) = 0;
        *(_QWORD *)&v421 = v350;
        *((_QWORD *)&v421 + 1) = v345;
        *(_QWORD *)&v422 = v340;
        *((_QWORD *)&v422 + 1) = v117;
        *(_QWORD *)&v423 = v118;
        *((_QWORD *)&v423 + 1) = v119;
        *(_QWORD *)&v424 = v121;
        *((_QWORD *)&v424 + 1) = v120;
        v311 = v120;
        v316 = v121;
        v320 = v118;
        if (!v35 || !REBindPointBoundComponent())
          goto LABEL_130;
        v165 = v119;
        v166 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_128:
          type metadata accessor for Entity();
          v167 = swift_dynamicCastClassUnconditional();
          goto LABEL_129;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
LABEL_189:
          v256 = specialized static Entity.entityInfoType(_:)(v166);
          if (v256)
          {
            v168 = (*(uint64_t (**)(void))(v256 + 232))();
            v257 = *(_QWORD *)(v168 + 16);
            swift_retain();
            MEMORY[0x22076D160](v257, 0);
            *(_QWORD *)(v168 + 16) = v166;
            MEMORY[0x22076D160](v166, v168);
            swift_release();
            goto LABEL_191;
          }
          v167 = makeEntity(for:)(v166);
LABEL_129:
          v168 = v167;
LABEL_191:
          v119 = v165;
LABEL_192:
          specialized ActionEventData.action<A>()((uint64_t)&v413);
          v258 = v417;
          if (v417)
          {
            v376 = v421;
            v377 = v422;
            v378 = v423;
            v379 = v424;
            v290 = v418;
            v304 = v117;
            v259 = v168;
            v260 = v416;
            v261 = v415;
            v262 = v414;
            v263 = v413;
            v297 = v419 & 1;
            v355 = v413;
            v356 = v414;
            v284 = v415 & 1;
            v357 = v415 & 1;
            v358 = v416;
            v359 = v417;
            v360 = v418;
            v361 = v419 & 1;
            v362 = 1;
            v354 = v109;
            v363 = v259;
            v364 = 0;
            v365 = 0.0;
            v366 = 0.0;
            v368 = 0;
            v369 = 0.0;
            v367 = Strong;
            v370 = 1;
            v371 = v333;
            v372 = 0;
            v373 = 0;
            v374 = 1;
            v375 = v420;
            v380 = v329;
            swift_retain();
            swift_retain();
            outlined copy of SetEntityPropertyAction<Transform>?(v263, v262, v261, v260, v258);
            swift_retain();
            a5(&v354);
            outlined consume of SetEntityPropertyAction<Transform>?(v263, v262, v261, v260, v258);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v381 = v109;
            v382 = v263;
            v383 = v262;
            v384 = v284;
            v385 = v260;
            v386 = v258;
            v387 = v290;
            v388 = v297;
            v389 = 1;
            v390 = v259;
            v391 = 0;
            v393 = 0.0;
            v392 = 0.0;
            v396 = 0.0;
            v394 = Strong;
            v395 = 0;
            v397 = 1;
            v398 = v333;
            v399 = 0;
            v400 = 0;
            v401 = 1;
            v402 = 0;
            v403 = 0;
            v404 = v350;
            v405 = v345;
            v406 = v340;
            v407 = v304;
            v408 = v320;
            v409 = v119;
            v410 = v316;
            v411 = v311;
            v200 = v329;
            goto LABEL_194;
          }
          goto LABEL_195;
        }
        __break(1u);
        goto LABEL_123;
      }
LABEL_220:
      __break(1u);
      goto LABEL_221;
    case 32:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v350 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v329 = *(_QWORD *)(a2 + 48);
      v333 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
LABEL_65:
        type metadata accessor for AnimationPlaybackController();
        v109 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v109 + 16) = v37;
        swift_beginAccess();
        swift_weakAssign();
        v125 = String.init(cString:)();
        v127 = v126;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v128 = static AnimationResource.codableActionTypeMap;
        if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
          goto LABEL_124;
        swift_bridgeObjectRetain();
        v129 = specialized __RawDictionaryStorage.find<A>(_:)(v125, v127);
        if ((v130 & 1) != 0)
        {
          v131 = (uint64_t *)(*(_QWORD *)(v128 + 56) + 56 * v129);
          v117 = v131[2];
          v340 = v131[1];
          v345 = *v131;
          v132 = v131[3];
          v119 = v131[4];
          v134 = v131[5];
          v133 = v131[6];
          swift_bridgeObjectRelease();
LABEL_125:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v420 = 0;
          BYTE8(v420) = 0;
          *(_QWORD *)&v421 = v350;
          *((_QWORD *)&v421 + 1) = v345;
          *(_QWORD *)&v422 = v340;
          *((_QWORD *)&v422 + 1) = v117;
          *(_QWORD *)&v423 = v132;
          *((_QWORD *)&v423 + 1) = v119;
          *(_QWORD *)&v424 = v134;
          *((_QWORD *)&v424 + 1) = v133;
          v311 = v133;
          v316 = v134;
          v320 = v132;
          if (v35 && REBindPointBoundComponent())
          {
            v165 = v119;
            v166 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
              goto LABEL_128;
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_229:
              __break(1u);
              goto LABEL_230;
            }
            goto LABEL_189;
          }
LABEL_130:
          v168 = 0;
          goto LABEL_192;
        }
LABEL_123:
        swift_bridgeObjectRelease();
LABEL_124:
        v340 = 0;
        v345 = 0;
        v117 = 0;
        v132 = 0;
        v119 = 0;
        v134 = 0;
        v133 = 0;
        goto LABEL_125;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v122 = specialized static Entity.entityInfoType(_:)(v36);
        if (v122)
        {
          v123 = (*(uint64_t (**)(void))(v122 + 232))();
          v124 = *(_QWORD *)(v123 + 16);
          swift_retain();
          MEMORY[0x22076D160](v124, 0);
          *(_QWORD *)(v123 + 16) = v36;
          MEMORY[0x22076D160](v36, v123);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
        goto LABEL_65;
      }
LABEL_221:
      __break(1u);
      goto LABEL_222;
    case 64:
      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v40 = *(_QWORD *)(a2 + 24);
      v41 = *(_QWORD *)(a2 + 40);
      v332 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
LABEL_73:
        type metadata accessor for AnimationPlaybackController();
        v138 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v138 + 16) = v39;
        swift_beginAccess();
        swift_weakAssign();
        if (!v41 || !REBindPointBoundComponent())
        {
          v141 = 0;
          goto LABEL_79;
        }
        v139 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v140 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v141 = v140;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v201 = specialized static Entity.entityInfoType(_:)(v139);
          if (!v201)
          {
            v140 = makeEntity(for:)(v139);
            goto LABEL_77;
          }
          v141 = (*(uint64_t (**)(void))(v201 + 232))();
          v202 = *(_QWORD *)(v141 + 16);
          swift_retain();
          MEMORY[0x22076D160](v202, 0);
          *(_QWORD *)(v141 + 16) = v139;
          MEMORY[0x22076D160](v139, v141);
          swift_release();
LABEL_79:
          v142 = String.init(cString:)();
          v144 = v143;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          swift_beginAccess();
          v145 = static AnimationResource.codableActionTypeMap;
          if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
          {
            swift_bridgeObjectRetain();
            v146 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v144);
            if ((v147 & 1) != 0)
            {
              v148 = (uint64_t *)(*(_QWORD *)(v145 + 56) + 56 * v146);
              v149 = *v148;
              v150 = v148[1];
              v152 = v148[2];
              v151 = v148[3];
              v346 = v148[5];
              v351 = v148[4];
              v341 = v148[6];
              swift_bridgeObjectRelease();
LABEL_133:
              swift_endAccess();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v420 = 0;
              BYTE8(v420) = 0;
              *(_QWORD *)&v421 = v40;
              *((_QWORD *)&v421 + 1) = v149;
              *(_QWORD *)&v422 = v150;
              *((_QWORD *)&v422 + 1) = v152;
              v327 = v151;
              *(_QWORD *)&v423 = v151;
              *((_QWORD *)&v423 + 1) = v351;
              *(_QWORD *)&v424 = v346;
              *((_QWORD *)&v424 + 1) = v341;
              specialized ActionEventData.action<A>()((uint64_t)&v413);
              v169 = v417;
              if (!v417)
                goto LABEL_195;
              v376 = v421;
              v377 = v422;
              v378 = v423;
              v379 = v424;
              v293 = v418;
              v312 = v40;
              v321 = v152;
              v170 = v141;
              v171 = v416;
              v172 = v415;
              v173 = v414;
              v306 = v150;
              v174 = v413;
              v302 = v419 & 1;
              v355 = v413;
              v356 = v414;
              v288 = v415 & 1;
              v357 = v415 & 1;
              v358 = v416;
              v359 = v417;
              v360 = v418;
              v361 = v419 & 1;
              v362 = 1;
              v354 = v138;
              v363 = v170;
              v364 = 0;
              v365 = 0.0;
              v366 = 0.0;
              v368 = 0;
              v369 = 0.0;
              v367 = Strong;
              v370 = 1;
              v371 = 0;
              v372 = 1;
              v373 = 0;
              v374 = 1;
              v375 = v420;
              v380 = v332;
              swift_retain();
              swift_retain();
              outlined copy of SetEntityPropertyAction<Transform>?(v174, v173, v172, v171, v169);
              swift_retain();
              a5(&v354);
              outlined consume of SetEntityPropertyAction<Transform>?(v174, v173, v172, v171, v169);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v381 = v138;
              v382 = v174;
              v383 = v173;
              v384 = v288;
              v385 = v171;
              v386 = v169;
              v387 = v293;
              v388 = v302;
              v389 = 1;
              v390 = v170;
              v391 = 0;
              v393 = 0.0;
              v392 = 0.0;
              v396 = 0.0;
              v394 = Strong;
              v395 = 0;
              v397 = 1;
              v398 = 0;
              v399 = 1;
              v400 = 0;
              v401 = 1;
              v402 = 0;
              v403 = 0;
              v404 = v312;
              v405 = v149;
              v406 = v306;
              v175 = v321;
              goto LABEL_153;
            }
            swift_bridgeObjectRelease();
          }
          v149 = 0;
          v150 = 0;
          v152 = 0;
          v151 = 0;
          v346 = 0;
          v351 = 0;
          v341 = 0;
          goto LABEL_133;
        }
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v135 = specialized static Entity.entityInfoType(_:)(v38);
        if (v135)
        {
          v136 = (*(uint64_t (**)(void))(v135 + 232))();
          v137 = *(_QWORD *)(v136 + 16);
          swift_retain();
          MEMORY[0x22076D160](v137, 0);
          *(_QWORD *)(v136 + 16) = v38;
          MEMORY[0x22076D160](v38, v136);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
        goto LABEL_73;
      }
LABEL_222:
      __break(1u);
      goto LABEL_223;
    default:
      if (a4 != 128)
        goto LABEL_196;
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 40);
      v332 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v176 = specialized static Entity.entityInfoType(_:)(v13);
        if (v176)
        {
          v177 = (*(uint64_t (**)(void))(v176 + 232))();
          v178 = *(_QWORD *)(v177 + 16);
          swift_retain();
          MEMORY[0x22076D160](v178, 0);
          *(_QWORD *)(v177 + 16) = v13;
          MEMORY[0x22076D160](v13, v177);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v13);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v179 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v179 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      if (v16 && REBindPointBoundComponent())
      {
        v180 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v181 = swift_dynamicCastClassUnconditional();
LABEL_142:
          v182 = v181;
          goto LABEL_144;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_230:
          __break(1u);
          JUMPOUT(0x21BB4599CLL);
        }
        v264 = specialized static Entity.entityInfoType(_:)(v180);
        if (!v264)
        {
          v181 = makeEntity(for:)(v180);
          goto LABEL_142;
        }
        v182 = (*(uint64_t (**)(void))(v264 + 232))();
        v265 = *(_QWORD *)(v182 + 16);
        swift_retain();
        MEMORY[0x22076D160](v265, 0);
        *(_QWORD *)(v182 + 16) = v180;
        MEMORY[0x22076D160](v180, v182);
        swift_release();
      }
      else
      {
        v182 = 0;
      }
LABEL_144:
      v183 = String.init(cString:)();
      v185 = v184;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v186 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_150;
      swift_bridgeObjectRetain();
      v187 = specialized __RawDictionaryStorage.find<A>(_:)(v183, v185);
      if ((v188 & 1) != 0)
      {
        v189 = (uint64_t *)(*(_QWORD *)(v186 + 56) + 56 * v187);
        v190 = *v189;
        v191 = v189[1];
        v193 = v189[2];
        v192 = v189[3];
        v346 = v189[5];
        v351 = v189[4];
        v341 = v189[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_150:
        v190 = 0;
        v191 = 0;
        v193 = 0;
        v192 = 0;
        v346 = 0;
        v351 = 0;
        v341 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v420 = 0;
      BYTE8(v420) = 0;
      *(_QWORD *)&v421 = v15;
      *((_QWORD *)&v421 + 1) = v190;
      *(_QWORD *)&v422 = v191;
      *((_QWORD *)&v422 + 1) = v193;
      v327 = v192;
      *(_QWORD *)&v423 = v192;
      *((_QWORD *)&v423 + 1) = v351;
      *(_QWORD *)&v424 = v346;
      *((_QWORD *)&v424 + 1) = v341;
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v194 = v417;
      if (!v417)
        goto LABEL_195;
      v376 = v421;
      v377 = v422;
      v378 = v423;
      v379 = v424;
      v294 = v418;
      v317 = v15;
      v322 = v190;
      v195 = v182;
      v196 = v416;
      v197 = v415;
      v198 = v414;
      v313 = v191;
      v199 = v413;
      v303 = v419 & 1;
      v355 = v413;
      v356 = v414;
      v289 = v415 & 1;
      v357 = v415 & 1;
      v358 = v416;
      v359 = v417;
      v360 = v418;
      v361 = v419 & 1;
      v362 = 1;
      v354 = v179;
      v363 = v195;
      v364 = 0;
      v365 = 0.0;
      v366 = 0.0;
      v368 = 0;
      v369 = 0.0;
      v367 = Strong;
      v370 = 1;
      v371 = 0;
      v372 = 1;
      v373 = 0;
      v374 = 1;
      v375 = v420;
      v380 = v332;
      swift_retain();
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v199, v198, v197, v196, v194);
      swift_retain();
      a5(&v354);
      swift_release();
      outlined consume of SetEntityPropertyAction<Transform>?(v199, v198, v197, v196, v194);
      swift_release();
      swift_release();
      swift_release();
      v381 = v179;
      v382 = v199;
      v383 = v198;
      v384 = v289;
      v385 = v196;
      v386 = v194;
      v387 = v294;
      v388 = v303;
      v389 = 1;
      v390 = v195;
      v391 = 0;
      v393 = 0.0;
      v392 = 0.0;
      v396 = 0.0;
      v394 = Strong;
      v395 = 0;
      v397 = 1;
      v398 = 0;
      v399 = 1;
      v400 = 0;
      v401 = 1;
      v402 = 0;
      v403 = 0;
      v404 = v317;
      v405 = v322;
      v406 = v313;
      v175 = v193;
LABEL_153:
      v407 = v175;
      v408 = v327;
      v409 = v351;
      v410 = v346;
      v411 = v341;
      v200 = v332;
LABEL_194:
      v412 = v200;
      outlined release of ActionEvent<SetEntityPropertyAction<Bool>>((uint64_t)&v381);
      return 0;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t Entity;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int16 v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  double v220;
  double v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int16 v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  double v229;
  double v230;
  double v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int16 v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  double v238;
  double v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int16 v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  double v247;
  double v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int16 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  char v257;
  char v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t Strong;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  __int16 v325;
  char v326;
  uint64_t v327;
  char v328;
  double v329;
  double v330;
  uint64_t v331;
  uint64_t v332;
  double v333;
  char v334;
  unint64_t v335;
  char v336;
  unint64_t v337;
  char v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  __int16 v348;
  char v349;
  uint64_t v350;
  char v351;
  double v352;
  double v353;
  uint64_t v354;
  uint64_t v355;
  double v356;
  char v357;
  unint64_t v358;
  char v359;
  unint64_t v360;
  char v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned __int16 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v310 = *(_QWORD *)(a2 + 32);
      v314 = *(_QWORD *)(a2 + 40);
      v299 = *(_QWORD *)(a2 + 48);
      v9 = *(_QWORD *)(a2 + 64);
      v11 = *(float *)(a2 + 72);
      v10 = *(float *)(a2 + 76);
      v305 = *(_BYTE *)(a2 + 80);
      v266 = *(_QWORD *)(a2 + 88);
      v268 = *(_QWORD *)(a2 + 96);
      v272 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v42 = specialized static Entity.entityInfoType(_:)(v8);
        if (v42)
        {
          v43 = (*(uint64_t (**)(void))(v42 + 232))();
          v44 = *(_QWORD *)(v43 + 16);
          swift_retain();
          MEMORY[0x22076D160](v44, 0);
          *(_QWORD *)(v43 + 16) = v8;
          MEMORY[0x22076D160](v8, v43);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v8);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v295 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v295 + 16) = v7;
        swift_beginAccess();
        swift_weakAssign();
        v45 = String.init(cString:)();
        v47 = v46;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v48 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v49 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v47);
          if ((v50 & 1) != 0)
          {
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 56 * v49);
            v53 = *v51;
            v52 = v51[1];
            v55 = v51[2];
            v54 = v51[3];
            v56 = v51[4];
            v57 = v51[5];
            v58 = v51[6];
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
          swift_bridgeObjectRelease();
        }
        v53 = 0;
        v52 = 0;
        v55 = 0;
        v54 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
LABEL_86:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v376 = v310;
        BYTE8(v376) = 0;
        *(_QWORD *)&v377 = v314;
        *((_QWORD *)&v377 + 1) = v53;
        *(_QWORD *)&v378 = v52;
        *((_QWORD *)&v378 + 1) = v55;
        *(_QWORD *)&v379 = v54;
        *((_QWORD *)&v379 + 1) = v56;
        *(_QWORD *)&v380 = v57;
        *((_QWORD *)&v380 + 1) = v58;
        v163 = v58;
        v264 = v52;
        if (!v9 || !REBindPointBoundComponent())
        {
          v166 = 0;
          goto LABEL_162;
        }
        v280 = v58;
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v165 = swift_dynamicCastClassUnconditional();
          goto LABEL_90;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v214 = specialized static Entity.entityInfoType(_:)(Entity);
          if (v214)
          {
            v166 = (*(uint64_t (**)(void))(v214 + 232))();
            v215 = *(_QWORD *)(v166 + 16);
            swift_retain();
            MEMORY[0x22076D160](v215, 0);
            *(_QWORD *)(v166 + 16) = Entity;
            MEMORY[0x22076D160](Entity, v166);
            swift_release();
            goto LABEL_161;
          }
          v165 = makeEntity(for:)(Entity);
LABEL_90:
          v166 = v165;
LABEL_161:
          v163 = v280;
LABEL_162:
          specialized ActionEventData.action<A>()((uint64_t)&v373);
          v216 = v375;
          if ((_BYTE)v375 != 0xFF)
          {
            v261 = v53;
            v262 = v55;
            v288 = v57;
            v293 = v56;
            v283 = v163;
            v217 = v374;
            v218 = v373;
            swift_retain();
            outlined copy of SetEntityEnabledAction?(v218, v217, v216);
            v219 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityEnabledAction>);
            v323 = v218;
            v324 = v217;
            v220 = v11;
            v325 = v216 & 0x101;
            v221 = v10;
            v256 = v219 & 1;
            v326 = v219 & 1;
            v322 = v295;
            v327 = v166;
            v328 = v305;
            v329 = v220;
            v330 = v221;
            v331 = Strong;
            v332 = v272;
            v333 = -1.0;
            v334 = 0;
            v335 = v266;
            v336 = 0;
            v260 = v54;
            v222 = v268;
            v337 = v268;
            v338 = 0;
            v341 = v378;
            v342 = v379;
            v343 = v380;
            v339 = v376;
            v340 = v377;
            v344 = v299;
            swift_retain();
            swift_retain();
            a5(&v322);
            outlined consume of SetEntityEnabledAction?(v218, v217, v216);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v345 = v295;
            v346 = v218;
            v347 = v217;
            v348 = v216 & 0x101;
            v349 = v256;
            v350 = v166;
            v351 = v305;
            v352 = v220;
            v353 = v221;
            v354 = Strong;
            v355 = v272;
            v356 = -1.0;
            v357 = 0;
            v358 = v266;
LABEL_170:
            v359 = 0;
            v360 = v222;
            v361 = 0;
            v362 = v310;
            v363 = 0;
            v364 = v314;
            v365 = v261;
            v366 = v264;
            v367 = v262;
            v368 = v260;
            v369 = v293;
            v370 = v288;
            v371 = v283;
            v211 = v299;
            goto LABEL_193;
          }
          goto LABEL_190;
        }
        goto LABEL_222;
      }
      __break(1u);
      goto LABEL_214;
    case 2:
      v18 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v310 = *(_QWORD *)(a2 + 32);
      v314 = *(_QWORD *)(a2 + 40);
      v19 = *(float *)(a2 + 56);
      v267 = *(_QWORD *)(a2 + 72);
      v269 = *(_QWORD *)(a2 + 64);
      v20 = *(_QWORD *)(a2 + 88);
      v299 = *(_QWORD *)(a2 + 80);
      v22 = *(float *)(a2 + 96);
      v21 = *(float *)(a2 + 100);
      v306 = *(_BYTE *)(a2 + 104);
      v273 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v59 = specialized static Entity.entityInfoType(_:)(v18);
        if (v59)
        {
          v60 = (*(uint64_t (**)(void))(v59 + 232))();
          v61 = *(_QWORD *)(v60 + 16);
          swift_retain();
          MEMORY[0x22076D160](v61, 0);
          *(_QWORD *)(v60 + 16) = v18;
          MEMORY[0x22076D160](v18, v60);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v296 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v296 + 16) = v17;
        swift_beginAccess();
        swift_weakAssign();
        v62 = String.init(cString:)();
        v64 = v63;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v65 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v66 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v64);
          if ((v67 & 1) != 0)
          {
            v68 = (uint64_t *)(*(_QWORD *)(v65 + 56) + 56 * v66);
            v70 = *v68;
            v69 = v68[1];
            v72 = v68[2];
            v71 = v68[3];
            v73 = v68[4];
            v74 = v68[5];
            v75 = v68[6];
            swift_bridgeObjectRelease();
LABEL_94:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v376 = v310;
            BYTE8(v376) = 0;
            *(_QWORD *)&v377 = v314;
            *((_QWORD *)&v377 + 1) = v70;
            *(_QWORD *)&v378 = v69;
            *((_QWORD *)&v378 + 1) = v72;
            *(_QWORD *)&v379 = v71;
            *((_QWORD *)&v379 + 1) = v73;
            *(_QWORD *)&v380 = v74;
            *((_QWORD *)&v380 + 1) = v75;
            v167 = v75;
            v264 = v69;
            if (!v20 || !REBindPointBoundComponent())
            {
              v170 = 0;
              goto LABEL_168;
            }
            v281 = v75;
            v168 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v169 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_223:
                __break(1u);
                goto LABEL_224;
              }
              v223 = specialized static Entity.entityInfoType(_:)(v168);
              if (v223)
              {
                v170 = (*(uint64_t (**)(void))(v223 + 232))();
                v224 = *(_QWORD *)(v170 + 16);
                swift_retain();
                MEMORY[0x22076D160](v224, 0);
                *(_QWORD *)(v170 + 16) = v168;
                MEMORY[0x22076D160](v168, v170);
                swift_release();
                goto LABEL_167;
              }
              v169 = makeEntity(for:)(v168);
            }
            v170 = v169;
LABEL_167:
            v167 = v281;
LABEL_168:
            specialized ActionEventData.action<A>()((uint64_t)&v373);
            v225 = v375;
            if ((_BYTE)v375 != 0xFF)
            {
              v261 = v70;
              v262 = v72;
              v288 = v74;
              v293 = v73;
              v283 = v167;
              v226 = v374;
              v227 = v373;
              swift_retain();
              outlined copy of SetEntityEnabledAction?(v227, v226, v225);
              v228 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityEnabledAction>);
              v323 = v227;
              v324 = v226;
              v229 = v22;
              v325 = v225 & 0x101;
              v230 = v21;
              v231 = v19;
              v257 = v228 & 1;
              v326 = v228 & 1;
              v322 = v296;
              v327 = v170;
              v328 = v306;
              v329 = v229;
              v330 = v230;
              v331 = Strong;
              v332 = v267;
              v333 = v231;
              v334 = 0;
              v335 = v273;
              v336 = 0;
              v260 = v71;
              v222 = v269;
              v337 = v269;
              v338 = 0;
              v341 = v378;
              v342 = v379;
              v343 = v380;
              v339 = v376;
              v340 = v377;
              v344 = v299;
              swift_retain();
              swift_retain();
              a5(&v322);
              outlined consume of SetEntityEnabledAction?(v227, v226, v225);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v345 = v296;
              v346 = v227;
              v347 = v226;
              v348 = v225 & 0x101;
              v349 = v257;
              v350 = v170;
              v351 = v306;
              v352 = v229;
              v353 = v230;
              v354 = Strong;
              v355 = v267;
              v356 = v231;
              v357 = 0;
              v358 = v273;
              goto LABEL_170;
            }
LABEL_190:
            swift_release();
            swift_release();
            swift_release();
LABEL_191:
            swift_release();
            return 0;
          }
          swift_bridgeObjectRelease();
        }
        v70 = 0;
        v69 = 0;
        v72 = 0;
        v71 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        goto LABEL_94;
      }
LABEL_214:
      __break(1u);
      goto LABEL_215;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_191;
    case 4:
      v24 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v311 = *(_QWORD *)(a2 + 32);
      v316 = *(_QWORD *)(a2 + 40);
      v307 = *(_QWORD *)(a2 + 48);
      v25 = *(_QWORD *)(a2 + 64);
      v27 = *(float *)(a2 + 72);
      v26 = *(float *)(a2 + 76);
      v274 = *(_BYTE *)(a2 + 80);
      v278 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v76 = specialized static Entity.entityInfoType(_:)(v24);
        if (v76)
        {
          v77 = (*(uint64_t (**)(void))(v76 + 232))();
          v78 = *(_QWORD *)(v77 + 16);
          swift_retain();
          MEMORY[0x22076D160](v78, 0);
          *(_QWORD *)(v77 + 16) = v24;
          MEMORY[0x22076D160](v24, v77);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v24);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v300 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v300 + 16) = v23;
        swift_beginAccess();
        swift_weakAssign();
        v79 = String.init(cString:)();
        v81 = v80;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v82 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v83 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v81);
          if ((v84 & 1) != 0)
          {
            v85 = (uint64_t *)(*(_QWORD *)(v82 + 56) + 56 * v83);
            v87 = *v85;
            v86 = v85[1];
            v89 = v85[2];
            v88 = v85[3];
            v90 = v85[4];
            v91 = v85[5];
            v92 = v85[6];
            swift_bridgeObjectRelease();
LABEL_102:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v376 = v311;
            BYTE8(v376) = 0;
            *(_QWORD *)&v377 = v316;
            *((_QWORD *)&v377 + 1) = v87;
            *(_QWORD *)&v378 = v86;
            *((_QWORD *)&v378 + 1) = v89;
            *(_QWORD *)&v379 = v88;
            *((_QWORD *)&v379 + 1) = v90;
            *(_QWORD *)&v380 = v91;
            *((_QWORD *)&v380 + 1) = v92;
            v171 = v92;
            v270 = v86;
            if (!v25 || !REBindPointBoundComponent())
            {
              v174 = 0;
LABEL_175:
              specialized ActionEventData.action<A>()((uint64_t)&v373);
              v234 = v375;
              if ((_BYTE)v375 == 0xFF)
                goto LABEL_190;
              v265 = v87;
              v289 = v171;
              v235 = v374;
              v236 = v373;
              swift_retain();
              outlined copy of SetEntityEnabledAction?(v236, v235, v234);
              v237 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityEnabledAction>);
              v323 = v236;
              v324 = v235;
              v238 = v27;
              v325 = v234 & 0x101;
              v239 = v26;
              v259 = v237 & 1;
              v326 = v237 & 1;
              v322 = v300;
              v327 = v174;
              v328 = v274;
              v329 = v238;
              v330 = v239;
              v331 = Strong;
              v332 = v278;
              v333 = -1.0;
              v334 = 0;
              v335 = 0xBFF0000000000000;
              v336 = 0;
              v337 = 0xBFF0000000000000;
              v338 = 0;
              v341 = v378;
              v342 = v379;
              v343 = v380;
              v339 = v376;
              v340 = v377;
              v344 = v307;
              swift_retain();
              swift_retain();
              a5(&v322);
              outlined consume of SetEntityEnabledAction?(v236, v235, v234);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v345 = v300;
              v346 = v236;
              v347 = v235;
              v348 = v234 & 0x101;
              v349 = v259;
              v350 = v174;
              v351 = v274;
              v352 = v238;
              v353 = v239;
              v354 = Strong;
              v355 = v278;
              v356 = -1.0;
              v357 = 0;
              v358 = 0xBFF0000000000000;
              v359 = 0;
              v360 = 0xBFF0000000000000;
              v361 = 0;
              v362 = v311;
              v363 = 0;
              v364 = v316;
              v365 = v265;
              v366 = v270;
              v367 = v89;
              v368 = v88;
              v369 = v90;
              v370 = v91;
              v240 = v289;
              goto LABEL_184;
            }
            v285 = v92;
            v172 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v173 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_224:
                __break(1u);
                goto LABEL_225;
              }
              v232 = specialized static Entity.entityInfoType(_:)(v172);
              if (v232)
              {
                v174 = (*(uint64_t (**)(void))(v232 + 232))();
                v233 = *(_QWORD *)(v174 + 16);
                swift_retain();
                MEMORY[0x22076D160](v233, 0);
                *(_QWORD *)(v174 + 16) = v172;
                MEMORY[0x22076D160](v172, v174);
                swift_release();
                goto LABEL_174;
              }
              v173 = makeEntity(for:)(v172);
            }
            v174 = v173;
LABEL_174:
            v171 = v285;
            goto LABEL_175;
          }
          swift_bridgeObjectRelease();
        }
        v87 = 0;
        v86 = 0;
        v89 = 0;
        v88 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        goto LABEL_102;
      }
LABEL_215:
      __break(1u);
      goto LABEL_216;
    case 8:
      v29 = *(_QWORD *)a2;
      v28 = *(_QWORD *)(a2 + 8);
      v312 = *(_QWORD *)(a2 + 32);
      v317 = *(_QWORD *)(a2 + 40);
      v30 = *(_QWORD *)(a2 + 56);
      v307 = *(_QWORD *)(a2 + 48);
      v32 = *(float *)(a2 + 64);
      v31 = *(float *)(a2 + 68);
      v279 = *(_BYTE *)(a2 + 72);
      v284 = *(_QWORD *)(a2 + 80);
      v290 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v93 = specialized static Entity.entityInfoType(_:)(v29);
        if (v93)
        {
          v94 = (*(uint64_t (**)(void))(v93 + 232))();
          v95 = *(_QWORD *)(v94 + 16);
          swift_retain();
          MEMORY[0x22076D160](v95, 0);
          *(_QWORD *)(v94 + 16) = v29;
          MEMORY[0x22076D160](v29, v94);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v29);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v301 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v301 + 16) = v28;
        swift_beginAccess();
        swift_weakAssign();
        v96 = String.init(cString:)();
        v98 = v97;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v99 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v100 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v98);
          if ((v101 & 1) != 0)
          {
            v102 = (uint64_t *)(*(_QWORD *)(v99 + 56) + 56 * v100);
            v104 = *v102;
            v103 = v102[1];
            v106 = v102[2];
            v105 = v102[3];
            v108 = v102[4];
            v107 = v102[5];
            v109 = v102[6];
            swift_bridgeObjectRelease();
LABEL_110:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v376 = v312;
            BYTE8(v376) = 0;
            *(_QWORD *)&v377 = v317;
            *((_QWORD *)&v377 + 1) = v104;
            *(_QWORD *)&v378 = v103;
            *((_QWORD *)&v378 + 1) = v106;
            *(_QWORD *)&v379 = v105;
            *((_QWORD *)&v379 + 1) = v108;
            v271 = v107;
            v275 = v103;
            *(_QWORD *)&v380 = v107;
            *((_QWORD *)&v380 + 1) = v109;
            v175 = v108;
            if (!v30 || !REBindPointBoundComponent())
            {
              v178 = 0;
LABEL_181:
              specialized ActionEventData.action<A>()((uint64_t)&v373);
              v243 = v375;
              if ((_BYTE)v375 == 0xFF)
                goto LABEL_190;
              v298 = v175;
              v244 = v374;
              v263 = v104;
              v245 = v373;
              swift_retain();
              outlined copy of SetEntityEnabledAction?(v245, v244, v243);
              v246 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityEnabledAction>);
              v323 = v245;
              v324 = v244;
              v247 = v32;
              v325 = v243 & 0x101;
              v248 = v31;
              v258 = v246 & 1;
              v326 = v246 & 1;
              v322 = v301;
              v327 = v178;
              v328 = v279;
              v329 = v247;
              v330 = v248;
              v332 = 0;
              v333 = 0.0;
              v331 = Strong;
              v334 = 1;
              v335 = v284;
              v336 = 0;
              v337 = v290;
              v338 = 0;
              v341 = v378;
              v342 = v379;
              v343 = v380;
              v339 = v376;
              v340 = v377;
              v344 = v307;
              swift_retain();
              swift_retain();
              a5(&v322);
              outlined consume of SetEntityEnabledAction?(v245, v244, v243);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v345 = v301;
              v346 = v245;
              v347 = v244;
              v348 = v243 & 0x101;
              v349 = v258;
              v350 = v178;
              v351 = v279;
              v352 = v247;
              v353 = v248;
              v355 = 0;
              v356 = 0.0;
              v354 = Strong;
              v357 = 1;
              v358 = v284;
              v359 = 0;
              v360 = v290;
              v361 = 0;
              v362 = v312;
              v363 = 0;
              v364 = v317;
              v365 = v263;
              v366 = v275;
              v367 = v106;
              v368 = v105;
              v369 = v298;
              v370 = v271;
              v240 = v109;
LABEL_184:
              v371 = v240;
              v211 = v307;
              goto LABEL_193;
            }
            v176 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v177 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_225:
                __break(1u);
                goto LABEL_226;
              }
              v241 = specialized static Entity.entityInfoType(_:)(v176);
              if (v241)
              {
                v178 = (*(uint64_t (**)(void))(v241 + 232))();
                v242 = *(_QWORD *)(v178 + 16);
                swift_retain();
                MEMORY[0x22076D160](v242, 0);
                *(_QWORD *)(v178 + 16) = v176;
                MEMORY[0x22076D160](v176, v178);
                swift_release();
                goto LABEL_180;
              }
              v177 = makeEntity(for:)(v176);
            }
            v178 = v177;
LABEL_180:
            v175 = v108;
            goto LABEL_181;
          }
          swift_bridgeObjectRelease();
        }
        v104 = 0;
        v103 = 0;
        v106 = 0;
        v105 = 0;
        v108 = 0;
        v107 = 0;
        v109 = 0;
        goto LABEL_110;
      }
LABEL_216:
      __break(1u);
      goto LABEL_217;
    case 16:
      v34 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v35 = *(_QWORD *)(a2 + 56);
      v313 = *(_QWORD *)(a2 + 48);
      v318 = *(_QWORD *)(a2 + 40);
      v294 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v110 = specialized static Entity.entityInfoType(_:)(v34);
        if (v110)
        {
          v111 = (*(uint64_t (**)(void))(v110 + 232))();
          v112 = *(_QWORD *)(v111 + 16);
          swift_retain();
          MEMORY[0x22076D160](v112, 0);
          *(_QWORD *)(v111 + 16) = v34;
          MEMORY[0x22076D160](v34, v111);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
LABEL_57:
        type metadata accessor for AnimationPlaybackController();
        v113 = swift_allocObject();
        swift_weakInit();
        v308 = v113;
        *(_QWORD *)(v113 + 16) = v33;
        swift_beginAccess();
        swift_weakAssign();
        v114 = String.init(cString:)();
        v116 = v115;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v117 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v118 = specialized __RawDictionaryStorage.find<A>(_:)(v114, v116);
          if ((v119 & 1) != 0)
          {
            v120 = (uint64_t *)(*(_QWORD *)(v117 + 56) + 56 * v118);
            v121 = *v120;
            v122 = v120[1];
            v124 = v120[2];
            v123 = v120[3];
            v125 = v120[4];
            v126 = v120[5];
            v127 = v120[6];
            swift_bridgeObjectRelease();
            goto LABEL_118;
          }
          swift_bridgeObjectRelease();
        }
        v121 = 0;
        v122 = 0;
        v124 = 0;
        v123 = 0;
        v125 = 0;
        v126 = 0;
        v127 = 0;
LABEL_118:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v376 = 0;
        BYTE8(v376) = 0;
        *(_QWORD *)&v377 = v318;
        *((_QWORD *)&v377 + 1) = v121;
        *(_QWORD *)&v378 = v122;
        *((_QWORD *)&v378 + 1) = v124;
        *(_QWORD *)&v379 = v123;
        *((_QWORD *)&v379 + 1) = v125;
        *(_QWORD *)&v380 = v126;
        *((_QWORD *)&v380 + 1) = v127;
        v286 = v127;
        v291 = v123;
        v179 = v126;
        if (!v35 || !REBindPointBoundComponent())
          goto LABEL_130;
        v302 = v126;
        v180 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_128:
          type metadata accessor for Entity();
          v181 = swift_dynamicCastClassUnconditional();
          goto LABEL_129;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
LABEL_186:
          v249 = specialized static Entity.entityInfoType(_:)(v180);
          if (v249)
          {
            v182 = (*(uint64_t (**)(void))(v249 + 232))();
            v250 = *(_QWORD *)(v182 + 16);
            swift_retain();
            MEMORY[0x22076D160](v250, 0);
            *(_QWORD *)(v182 + 16) = v180;
            MEMORY[0x22076D160](v180, v182);
            swift_release();
            goto LABEL_188;
          }
          v181 = makeEntity(for:)(v180);
LABEL_129:
          v182 = v181;
LABEL_188:
          v179 = v302;
LABEL_189:
          specialized ActionEventData.action<A>()((uint64_t)&v373);
          v251 = v375;
          if ((_BYTE)v375 != 0xFF)
          {
            v277 = v124;
            v304 = v179;
            v252 = v374;
            v253 = v373;
            v323 = v373;
            v324 = v374;
            v325 = v375 & 0x101;
            v326 = 1;
            v322 = v308;
            v327 = v182;
            v328 = 0;
            v329 = 0.0;
            v330 = 0.0;
            v332 = 0;
            v333 = 0.0;
            v331 = Strong;
            v334 = 1;
            v335 = v294;
            v336 = 0;
            v337 = 0;
            v338 = 1;
            v341 = v378;
            v342 = v379;
            v343 = v380;
            v339 = v376;
            v340 = v377;
            v344 = v313;
            swift_retain();
            swift_retain();
            outlined copy of SetEntityEnabledAction?(v253, v252, v251);
            swift_retain();
            a5(&v322);
            outlined consume of SetEntityEnabledAction?(v253, v252, v251);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v345 = v308;
            v346 = v253;
            v347 = v252;
            v348 = v251 & 0x101;
            v349 = 1;
            v350 = v182;
            v351 = 0;
            v352 = 0.0;
            v353 = 0.0;
            v355 = 0;
            v356 = 0.0;
            v354 = Strong;
            v357 = 1;
            v358 = v294;
            v359 = 0;
            v360 = 0;
            v361 = 1;
            v362 = 0;
            v363 = 0;
            v364 = v318;
            v365 = v121;
            v366 = v122;
            v367 = v277;
            v368 = v291;
            v369 = v125;
            v370 = v304;
            v371 = v286;
            v211 = v313;
            goto LABEL_193;
          }
          goto LABEL_190;
        }
        __break(1u);
        goto LABEL_123;
      }
LABEL_217:
      __break(1u);
      goto LABEL_218;
    case 32:
      v37 = *(_QWORD *)a2;
      v36 = *(_QWORD *)(a2 + 8);
      v35 = *(_QWORD *)(a2 + 56);
      v313 = *(_QWORD *)(a2 + 48);
      v318 = *(_QWORD *)(a2 + 40);
      v294 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
LABEL_65:
        type metadata accessor for AnimationPlaybackController();
        v131 = swift_allocObject();
        swift_weakInit();
        v308 = v131;
        *(_QWORD *)(v131 + 16) = v36;
        swift_beginAccess();
        swift_weakAssign();
        v132 = String.init(cString:)();
        v134 = v133;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v135 = static AnimationResource.codableActionTypeMap;
        if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
          goto LABEL_124;
        swift_bridgeObjectRetain();
        v136 = specialized __RawDictionaryStorage.find<A>(_:)(v132, v134);
        if ((v137 & 1) != 0)
        {
          v138 = (uint64_t *)(*(_QWORD *)(v135 + 56) + 56 * v136);
          v121 = *v138;
          v122 = v138[1];
          v124 = v138[2];
          v139 = v138[3];
          v125 = v138[4];
          v140 = v138[5];
          v141 = v138[6];
          swift_bridgeObjectRelease();
LABEL_125:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v376 = 0;
          BYTE8(v376) = 0;
          *(_QWORD *)&v377 = v318;
          *((_QWORD *)&v377 + 1) = v121;
          *(_QWORD *)&v378 = v122;
          *((_QWORD *)&v378 + 1) = v124;
          *(_QWORD *)&v379 = v139;
          *((_QWORD *)&v379 + 1) = v125;
          *(_QWORD *)&v380 = v140;
          *((_QWORD *)&v380 + 1) = v141;
          v286 = v141;
          v291 = v139;
          v179 = v140;
          if (v35 && REBindPointBoundComponent())
          {
            v302 = v140;
            v180 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
              goto LABEL_128;
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_226:
              __break(1u);
              goto LABEL_227;
            }
            goto LABEL_186;
          }
LABEL_130:
          v182 = 0;
          goto LABEL_189;
        }
LABEL_123:
        swift_bridgeObjectRelease();
LABEL_124:
        v121 = 0;
        v122 = 0;
        v124 = 0;
        v139 = 0;
        v125 = 0;
        v140 = 0;
        v141 = 0;
        goto LABEL_125;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v128 = specialized static Entity.entityInfoType(_:)(v37);
        if (v128)
        {
          v129 = (*(uint64_t (**)(void))(v128 + 232))();
          v130 = *(_QWORD *)(v129 + 16);
          swift_retain();
          MEMORY[0x22076D160](v130, 0);
          *(_QWORD *)(v129 + 16) = v37;
          MEMORY[0x22076D160](v37, v129);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v37);
        }
        goto LABEL_65;
      }
LABEL_218:
      __break(1u);
      goto LABEL_219;
    case 64:
      v39 = *(_QWORD *)a2;
      v38 = *(_QWORD *)(a2 + 8);
      v40 = *(_QWORD *)(a2 + 24);
      v41 = *(_QWORD *)(a2 + 40);
      v315 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
LABEL_73:
        type metadata accessor for AnimationPlaybackController();
        v145 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v145 + 16) = v38;
        swift_beginAccess();
        swift_weakAssign();
        v146 = v40;
        if (!v41 || !REBindPointBoundComponent())
        {
          v149 = 0;
          goto LABEL_79;
        }
        v147 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v148 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v149 = v148;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v212 = specialized static Entity.entityInfoType(_:)(v147);
          if (!v212)
          {
            v148 = makeEntity(for:)(v147);
            goto LABEL_77;
          }
          v149 = (*(uint64_t (**)(void))(v212 + 232))();
          v213 = *(_QWORD *)(v149 + 16);
          swift_retain();
          MEMORY[0x22076D160](v213, 0);
          *(_QWORD *)(v149 + 16) = v147;
          MEMORY[0x22076D160](v147, v149);
          swift_release();
LABEL_79:
          v150 = String.init(cString:)();
          v152 = v151;
          if (one-time initialization token for codableActionTypeMap != -1)
            swift_once();
          swift_beginAccess();
          v153 = static AnimationResource.codableActionTypeMap;
          if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
          {
            swift_bridgeObjectRetain();
            v154 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v152);
            if ((v155 & 1) != 0)
            {
              v156 = (uint64_t *)(*(_QWORD *)(v153 + 56) + 56 * v154);
              v157 = *v156;
              v158 = v156[1];
              v159 = v156[2];
              v160 = v156[3];
              v161 = v156[4];
              v162 = v156[5];
              v319 = v156[6];
              swift_bridgeObjectRelease();
LABEL_133:
              swift_endAccess();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v376 = 0;
              BYTE8(v376) = 0;
              *(_QWORD *)&v377 = v146;
              *((_QWORD *)&v377 + 1) = v157;
              *(_QWORD *)&v378 = v158;
              *((_QWORD *)&v378 + 1) = v159;
              *(_QWORD *)&v379 = v160;
              *((_QWORD *)&v379 + 1) = v161;
              v303 = v162;
              v309 = v161;
              *(_QWORD *)&v380 = v162;
              *((_QWORD *)&v380 + 1) = v319;
              specialized ActionEventData.action<A>()((uint64_t)&v373);
              v183 = v375;
              if ((_BYTE)v375 == 0xFF)
                goto LABEL_190;
              v184 = v374;
              v292 = v146;
              v297 = v160;
              v185 = v373;
              v323 = v373;
              v324 = v374;
              v282 = v159;
              v287 = v158;
              v186 = v149;
              v187 = v375 & 1;
              v325 = v375 & 0x101;
              v276 = v157;
              v188 = Strong;
              v189 = HIBYTE(v375) & 1;
              v326 = 1;
              v322 = v145;
              v327 = v186;
              v328 = 0;
              v329 = 0.0;
              v330 = 0.0;
              v332 = 0;
              v333 = 0.0;
              v331 = Strong;
              v334 = 1;
              v335 = 0;
              v336 = 1;
              v337 = 0;
              v338 = 1;
              v341 = v378;
              v342 = v379;
              v343 = v380;
              v339 = v376;
              v340 = v377;
              v344 = v315;
              swift_retain();
              swift_retain();
              outlined copy of SetEntityEnabledAction?(v185, v184, v183);
              swift_retain();
              a5(&v322);
              outlined consume of SetEntityEnabledAction?(v185, v184, v183);
              swift_release();
              goto LABEL_154;
            }
            swift_bridgeObjectRelease();
          }
          v157 = 0;
          v158 = 0;
          v159 = 0;
          v160 = 0;
          v161 = 0;
          v162 = 0;
          v319 = 0;
          goto LABEL_133;
        }
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
        goto LABEL_223;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v142 = specialized static Entity.entityInfoType(_:)(v39);
        if (v142)
        {
          v143 = (*(uint64_t (**)(void))(v142 + 232))();
          v144 = *(_QWORD *)(v143 + 16);
          swift_retain();
          MEMORY[0x22076D160](v144, 0);
          *(_QWORD *)(v143 + 16) = v39;
          MEMORY[0x22076D160](v39, v143);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v39);
        }
        goto LABEL_73;
      }
LABEL_219:
      __break(1u);
      goto LABEL_220;
    default:
      if (a4 != 128)
        goto LABEL_191;
      v14 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 40);
      v315 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v190 = specialized static Entity.entityInfoType(_:)(v14);
        if (v190)
        {
          v191 = (*(uint64_t (**)(void))(v190 + 232))();
          v192 = *(_QWORD *)(v191 + 16);
          swift_retain();
          MEMORY[0x22076D160](v192, 0);
          *(_QWORD *)(v191 + 16) = v14;
          MEMORY[0x22076D160](v14, v191);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v145 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v145 + 16) = v13;
      swift_beginAccess();
      swift_weakAssign();
      v193 = v15;
      if (v16 && REBindPointBoundComponent())
      {
        v194 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v195 = swift_dynamicCastClassUnconditional();
LABEL_142:
          v196 = v195;
          goto LABEL_144;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_227:
          __break(1u);
          JUMPOUT(0x21BB60748);
        }
        v254 = specialized static Entity.entityInfoType(_:)(v194);
        if (!v254)
        {
          v195 = makeEntity(for:)(v194);
          goto LABEL_142;
        }
        v196 = (*(uint64_t (**)(void))(v254 + 232))();
        v255 = *(_QWORD *)(v196 + 16);
        swift_retain();
        MEMORY[0x22076D160](v255, 0);
        *(_QWORD *)(v196 + 16) = v194;
        MEMORY[0x22076D160](v194, v196);
        swift_release();
      }
      else
      {
        v196 = 0;
      }
LABEL_144:
      v197 = String.init(cString:)();
      v199 = v198;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v200 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_150;
      swift_bridgeObjectRetain();
      v201 = specialized __RawDictionaryStorage.find<A>(_:)(v197, v199);
      if ((v202 & 1) != 0)
      {
        v203 = (uint64_t *)(*(_QWORD *)(v200 + 56) + 56 * v201);
        v204 = *v203;
        v205 = v203[1];
        v206 = v203[2];
        v207 = v203[3];
        v208 = v203[4];
        v209 = v203[5];
        v319 = v203[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_150:
        v204 = 0;
        v205 = 0;
        v206 = 0;
        v207 = 0;
        v208 = 0;
        v209 = 0;
        v319 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v376 = 0;
      BYTE8(v376) = 0;
      *(_QWORD *)&v377 = v193;
      *((_QWORD *)&v377 + 1) = v204;
      *(_QWORD *)&v378 = v205;
      *((_QWORD *)&v378 + 1) = v206;
      *(_QWORD *)&v379 = v207;
      *((_QWORD *)&v379 + 1) = v208;
      v303 = v209;
      v309 = v208;
      *(_QWORD *)&v380 = v209;
      *((_QWORD *)&v380 + 1) = v319;
      specialized ActionEventData.action<A>()((uint64_t)&v373);
      v210 = v375;
      if ((_BYTE)v375 == 0xFF)
        goto LABEL_190;
      v184 = v374;
      v292 = v193;
      v297 = v207;
      v185 = v373;
      v323 = v373;
      v324 = v374;
      v282 = v206;
      v287 = v205;
      v186 = v196;
      v187 = v375 & 1;
      v325 = v375 & 0x101;
      v276 = v204;
      v188 = Strong;
      v189 = HIBYTE(v375) & 1;
      v326 = 1;
      v322 = v145;
      v327 = v186;
      v328 = 0;
      v329 = 0.0;
      v330 = 0.0;
      v332 = 0;
      v333 = 0.0;
      v331 = Strong;
      v334 = 1;
      v335 = 0;
      v336 = 1;
      v337 = 0;
      v338 = 1;
      v341 = v378;
      v342 = v379;
      v343 = v380;
      v339 = v376;
      v340 = v377;
      v344 = v315;
      swift_retain();
      swift_retain();
      outlined copy of SetEntityEnabledAction?(v185, v184, v210);
      swift_retain();
      a5(&v322);
      swift_release();
      outlined consume of SetEntityEnabledAction?(v185, v184, v210);
LABEL_154:
      swift_release();
      swift_release();
      swift_release();
      v345 = v145;
      v346 = v185;
      v347 = v184;
      LOBYTE(v348) = v187;
      HIBYTE(v348) = v189;
      v349 = 1;
      v350 = v186;
      v351 = 0;
      v352 = 0.0;
      v353 = 0.0;
      v355 = 0;
      v356 = 0.0;
      v354 = v188;
      v357 = 1;
      v358 = 0;
      v359 = 1;
      v360 = 0;
      v361 = 1;
      v362 = 0;
      v363 = 0;
      v364 = v292;
      v365 = v276;
      v366 = v287;
      v367 = v282;
      v368 = v297;
      v369 = v309;
      v370 = v303;
      v371 = v319;
      v211 = v315;
LABEL_193:
      v372 = v211;
      outlined release of ActionEvent<SetEntityEnabledAction>((uint64_t)&v345);
      return 0;
  }
}

{
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *);
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t *);
  unint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t *);
  unint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t *);
  unint64_t v104;
  char v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t *);
  unint64_t v122;
  char v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t Entity;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  double v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  double v170;
  double v171;
  double v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t *);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  double v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(uint64_t *);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  double v194;
  double v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  void (*v203)(uint64_t *);
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void (*v336)(uint64_t *);
  void (*v337)(uint64_t *);
  void (*v338)(uint64_t *);
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  char v345;
  double v346;
  double v347;
  uint64_t v348;
  uint64_t v349;
  double v350;
  char v351;
  unint64_t v352;
  char v353;
  unint64_t v354;
  char v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  uint64_t v367;
  char v368;
  double v369;
  double v370;
  uint64_t v371;
  uint64_t v372;
  double v373;
  char v374;
  unint64_t v375;
  char v376;
  unint64_t v377;
  char v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  v9 = Strong;
  switch(a4)
  {
    case 1:
      v11 = *(_QWORD *)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v320 = *(_QWORD *)(a2 + 32);
      v326 = *(_QWORD *)(a2 + 40);
      v307 = *(_QWORD *)(a2 + 48);
      v12 = *(float *)(a2 + 72);
      v13 = *(float *)(a2 + 76);
      v281 = *(_BYTE *)(a2 + 80);
      v288 = *(_QWORD *)(a2 + 64);
      v294 = *(_QWORD *)(a2 + 88);
      v301 = *(_QWORD *)(a2 + 96);
      v276 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_228;
      }
      v42 = specialized static Entity.entityInfoType(_:)(v11);
      if (v42)
      {
        v43 = (*(uint64_t (**)(void))(v42 + 232))();
        v44 = *(_QWORD *)(v43 + 16);
        swift_retain();
        MEMORY[0x22076D160](v44, 0);
        *(_QWORD *)(v43 + 16) = v11;
        MEMORY[0x22076D160](v11, v43);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v11);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v45 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v45 + 16) = v10;
      swift_beginAccess();
      swift_weakAssign();
      v46 = String.init(cString:)();
      v48 = v47;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v49 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        v50 = a5;
LABEL_85:
        v54 = 0;
        v314 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        goto LABEL_86;
      }
      v50 = a5;
      swift_bridgeObjectRetain();
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
      if ((v52 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      v53 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 56 * v51);
      v54 = *v53;
      v314 = v53[1];
      v55 = v53[2];
      v56 = v53[3];
      v57 = v53[4];
      v58 = v53[5];
      v59 = v53[6];
      swift_bridgeObjectRelease();
LABEL_86:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v393 = v320;
      BYTE8(v393) = 0;
      *(_QWORD *)&v394 = v326;
      *((_QWORD *)&v394 + 1) = v54;
      *(_QWORD *)&v395 = v314;
      *((_QWORD *)&v395 + 1) = v55;
      *(_QWORD *)&v396 = v56;
      *((_QWORD *)&v396 + 1) = v57;
      *(_QWORD *)&v397 = v58;
      *((_QWORD *)&v397 + 1) = v59;
      v273 = v55;
      v269 = v57;
      v266 = v59;
      if (!v288 || !REBindPointBoundComponent())
      {
        v155 = 0;
        goto LABEL_92;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v154 = swift_dynamicCastClassUnconditional();
LABEL_90:
        v155 = v154;
        goto LABEL_92;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_236;
      v236 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v236)
      {
        v154 = makeEntity(for:)(Entity);
        goto LABEL_90;
      }
      v155 = (*(uint64_t (**)(void))(v236 + 232))();
      v237 = *(_QWORD *)(v155 + 16);
      swift_retain();
      MEMORY[0x22076D160](v237, 0);
      *(_QWORD *)(v155 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v155);
      swift_release();
LABEL_92:
      specialized ActionEventData.action<A>()(&v390);
      v156 = v391;
      if (!v391)
        goto LABEL_215;
      v157 = v392;
      v158 = v390;
      swift_retain();
      v265 = v157;
      outlined copy of NotificationAction?(v158, v156);
      v159 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<NotificationAction>);
      v357 = v394;
      v358 = v395;
      v359 = v396;
      v360 = v397;
      v160 = v12;
      v161 = v13;
      v341 = v156;
      v342 = v157;
      LOBYTE(v157) = v159 & 1;
      v343 = v159 & 1;
      v339 = v45;
      v340 = v158;
      v344 = v155;
      v345 = v281;
      v346 = v160;
      v347 = v161;
      v348 = v9;
      v349 = v276;
      v350 = -1.0;
      v351 = 0;
      v352 = v294;
      v353 = 0;
      v354 = v301;
      v355 = 0;
      v356 = v393;
      v361 = v307;
      swift_retain();
      swift_retain();
      v50(&v339);
      outlined consume of NotificationAction?(v158, v156);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v362 = v45;
      v363 = v158;
      v364 = v156;
      v365 = v265;
      v366 = v157;
      v367 = v155;
      v368 = v281;
      v369 = v160;
      v370 = v161;
      v371 = v9;
      v372 = v276;
      v373 = -1.0;
      v374 = 0;
      v375 = v294;
      v376 = 0;
      v377 = v301;
      v378 = 0;
      v379 = v320;
      v380 = 0;
      v381 = v326;
      v382 = v54;
      v383 = v314;
      v384 = v273;
      v385 = v56;
      v386 = v269;
      v387 = v58;
      v162 = v266;
LABEL_116:
      v388 = v162;
      v185 = v307;
LABEL_150:
      v389 = v185;
LABEL_214:
      outlined release of ActionEvent<NotificationAction>((uint64_t)&v362);
      return 0;
    case 2:
      v21 = *(_QWORD *)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v327 = *(_QWORD *)(a2 + 32);
      v333 = *(_QWORD *)(a2 + 40);
      v22 = *(float *)(a2 + 56);
      v302 = *(_QWORD *)(a2 + 80);
      v308 = *(_QWORD *)(a2 + 64);
      v295 = *(_QWORD *)(a2 + 88);
      v23 = *(float *)(a2 + 96);
      v24 = *(float *)(a2 + 100);
      v277 = *(_BYTE *)(a2 + 104);
      v282 = *(_QWORD *)(a2 + 72);
      v289 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_228:
          __break(1u);
          goto LABEL_229;
        }
        v60 = specialized static Entity.entityInfoType(_:)(v21);
        if (v60)
        {
          v61 = (*(uint64_t (**)(void))(v60 + 232))();
          v62 = *(_QWORD *)(v61 + 16);
          swift_retain();
          MEMORY[0x22076D160](v62, 0);
          *(_QWORD *)(v61 + 16) = v21;
          MEMORY[0x22076D160](v21, v61);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v21);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v63 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v63 + 16) = v20;
      swift_beginAccess();
      swift_weakAssign();
      v64 = String.init(cString:)();
      v66 = v65;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v67 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        v68 = a5;
        swift_bridgeObjectRetain();
        v69 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v66);
        if ((v70 & 1) != 0)
        {
          v71 = (uint64_t *)(*(_QWORD *)(v67 + 56) + 56 * v69);
          v72 = *v71;
          v73 = v71[3];
          v315 = v71[2];
          v323 = v71[1];
          v74 = v71[4];
          v75 = v71[5];
          v76 = v71[6];
          swift_bridgeObjectRelease();
LABEL_97:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v393 = v327;
          BYTE8(v393) = 0;
          *(_QWORD *)&v394 = v333;
          *((_QWORD *)&v394 + 1) = v72;
          *(_QWORD *)&v395 = v323;
          *((_QWORD *)&v395 + 1) = v315;
          *(_QWORD *)&v396 = v73;
          *((_QWORD *)&v396 + 1) = v74;
          *(_QWORD *)&v397 = v75;
          *((_QWORD *)&v397 + 1) = v76;
          v272 = v74;
          v274 = v73;
          v268 = v76;
          v270 = v75;
          if (v295 && REBindPointBoundComponent())
          {
            v163 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v164 = swift_dynamicCastClassUnconditional();
LABEL_101:
              v165 = v164;
              goto LABEL_103;
            }
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_237:
              __break(1u);
              goto LABEL_238;
            }
            v238 = specialized static Entity.entityInfoType(_:)(v163);
            if (!v238)
            {
              v164 = makeEntity(for:)(v163);
              goto LABEL_101;
            }
            v165 = (*(uint64_t (**)(void))(v238 + 232))();
            v239 = *(_QWORD *)(v165 + 16);
            swift_retain();
            MEMORY[0x22076D160](v239, 0);
            *(_QWORD *)(v165 + 16) = v163;
            MEMORY[0x22076D160](v163, v165);
            swift_release();
          }
          else
          {
            v165 = 0;
          }
LABEL_103:
          specialized ActionEventData.action<A>()(&v390);
          v166 = v391;
          if (v391)
          {
            v167 = v392;
            v336 = v68;
            v168 = v390;
            swift_retain();
            outlined copy of NotificationAction?(v168, v166);
            v169 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<NotificationAction>);
            v357 = v394;
            v358 = v395;
            v359 = v396;
            v360 = v397;
            v170 = v23;
            v171 = v24;
            v172 = v22;
            v341 = v166;
            v342 = v167;
            v298 = v72;
            v173 = v169 & 1;
            v343 = v169 & 1;
            v339 = v63;
            v340 = v168;
            v344 = v165;
            v345 = v277;
            v346 = v170;
            v347 = v171;
            v348 = v9;
            v349 = v282;
            v350 = v172;
            v351 = 0;
            v352 = v289;
            v353 = 0;
            v354 = v308;
            v355 = 0;
            v356 = v393;
            v361 = v302;
            swift_retain();
            swift_retain();
            v336(&v339);
            outlined consume of NotificationAction?(v168, v166);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v362 = v63;
            v363 = v168;
            v364 = v166;
            v365 = v167;
            v366 = v173;
            v367 = v165;
            v368 = v277;
            v369 = v170;
            v370 = v171;
            v371 = v9;
            v372 = v282;
            v373 = v172;
            v374 = 0;
            v375 = v289;
            v376 = 0;
            v377 = v308;
            v378 = 0;
            v379 = v327;
            v380 = 0;
            v381 = v333;
            v382 = v298;
            v383 = v323;
            v174 = v315;
LABEL_127:
            v384 = v174;
            v385 = v274;
            v386 = v272;
            v387 = v270;
            v388 = v268;
            v185 = v302;
            goto LABEL_150;
          }
          goto LABEL_215;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v68 = a5;
      }
      v72 = 0;
      v315 = 0;
      v323 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      goto LABEL_97;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_216;
    case 4:
      v26 = *(_QWORD *)a2;
      v25 = *(_QWORD *)(a2 + 8);
      v321 = *(_QWORD *)(a2 + 32);
      v328 = *(_QWORD *)(a2 + 40);
      v303 = *(_QWORD *)(a2 + 64);
      v307 = *(_QWORD *)(a2 + 48);
      v27 = *(float *)(a2 + 72);
      v28 = *(float *)(a2 + 76);
      v296 = *(_BYTE *)(a2 + 80);
      v290 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_229:
          __break(1u);
          goto LABEL_230;
        }
        v77 = specialized static Entity.entityInfoType(_:)(v26);
        if (v77)
        {
          v78 = (*(uint64_t (**)(void))(v77 + 232))();
          v79 = *(_QWORD *)(v78 + 16);
          swift_retain();
          MEMORY[0x22076D160](v79, 0);
          *(_QWORD *)(v78 + 16) = v26;
          MEMORY[0x22076D160](v26, v78);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v26);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v80 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v80 + 16) = v25;
      swift_beginAccess();
      swift_weakAssign();
      v81 = String.init(cString:)();
      v83 = v82;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v84 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        v85 = a5;
        swift_bridgeObjectRetain();
        v86 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v83);
        if ((v87 & 1) != 0)
        {
          v88 = (uint64_t *)(*(_QWORD *)(v84 + 56) + 56 * v86);
          v89 = v88[1];
          v316 = *v88;
          v90 = v88[2];
          v91 = v88[3];
          v92 = v88[4];
          v93 = v88[5];
          v94 = v88[6];
          swift_bridgeObjectRelease();
LABEL_108:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v393 = v321;
          BYTE8(v393) = 0;
          *(_QWORD *)&v394 = v328;
          *((_QWORD *)&v394 + 1) = v316;
          *(_QWORD *)&v395 = v89;
          *((_QWORD *)&v395 + 1) = v90;
          *(_QWORD *)&v396 = v91;
          *((_QWORD *)&v396 + 1) = v92;
          *(_QWORD *)&v397 = v93;
          *((_QWORD *)&v397 + 1) = v94;
          v278 = v91;
          v284 = v90;
          v275 = v92;
          v271 = v94;
          if (v303 && REBindPointBoundComponent())
          {
            v175 = REComponentGetEntity();
            v176 = v85;
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v177 = swift_dynamicCastClassUnconditional();
LABEL_112:
              v178 = v177;
              goto LABEL_114;
            }
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_238:
              __break(1u);
              goto LABEL_239;
            }
            v240 = specialized static Entity.entityInfoType(_:)(v175);
            if (!v240)
            {
              v177 = makeEntity(for:)(v175);
              goto LABEL_112;
            }
            v178 = (*(uint64_t (**)(void))(v240 + 232))();
            v241 = *(_QWORD *)(v178 + 16);
            swift_retain();
            MEMORY[0x22076D160](v241, 0);
            *(_QWORD *)(v178 + 16) = v175;
            MEMORY[0x22076D160](v175, v178);
            swift_release();
          }
          else
          {
            v178 = 0;
            v176 = v85;
          }
LABEL_114:
          specialized ActionEventData.action<A>()(&v390);
          v179 = v391;
          if (v391)
          {
            v180 = v392;
            v181 = v390;
            swift_retain();
            v267 = v180;
            outlined copy of NotificationAction?(v181, v179);
            v182 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<NotificationAction>);
            v357 = v394;
            v358 = v395;
            v359 = v396;
            v360 = v397;
            v183 = v27;
            v184 = v28;
            v341 = v179;
            v342 = v180;
            LOBYTE(v180) = v182 & 1;
            v343 = v182 & 1;
            v339 = v80;
            v340 = v181;
            v344 = v178;
            v345 = v296;
            v346 = v183;
            v347 = v184;
            v348 = v9;
            v349 = v290;
            v350 = -1.0;
            v351 = 0;
            v352 = 0xBFF0000000000000;
            v353 = 0;
            v354 = 0xBFF0000000000000;
            v355 = 0;
            v356 = v393;
            v361 = v307;
            swift_retain();
            swift_retain();
            v176(&v339);
            outlined consume of NotificationAction?(v181, v179);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v362 = v80;
            v363 = v181;
            v364 = v179;
            v365 = v267;
            v366 = v180;
            v367 = v178;
            v368 = v296;
            v369 = v183;
            v370 = v184;
            v371 = v9;
            v372 = v290;
            v373 = -1.0;
            v374 = 0;
            v375 = 0xBFF0000000000000;
            v376 = 0;
            v377 = 0xBFF0000000000000;
            v378 = 0;
            v379 = v321;
            v380 = 0;
            v381 = v328;
            v382 = v316;
            v383 = v89;
            v384 = v284;
            v385 = v278;
            v386 = v275;
            v387 = v93;
            v162 = v271;
            goto LABEL_116;
          }
          goto LABEL_215;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v85 = a5;
      }
      v316 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      goto LABEL_108;
    case 8:
      v30 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v322 = *(_QWORD *)(a2 + 32);
      v329 = *(_QWORD *)(a2 + 40);
      v297 = *(_QWORD *)(a2 + 56);
      v302 = *(_QWORD *)(a2 + 48);
      v31 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v283 = *(_BYTE *)(a2 + 72);
      v291 = *(_QWORD *)(a2 + 80);
      v309 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_230:
          __break(1u);
          goto LABEL_231;
        }
        v95 = specialized static Entity.entityInfoType(_:)(v30);
        if (v95)
        {
          v96 = (*(uint64_t (**)(void))(v95 + 232))();
          v97 = *(_QWORD *)(v96 + 16);
          swift_retain();
          MEMORY[0x22076D160](v97, 0);
          *(_QWORD *)(v96 + 16) = v30;
          MEMORY[0x22076D160](v30, v96);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v30);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v98 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v98 + 16) = v29;
      swift_beginAccess();
      swift_weakAssign();
      v99 = String.init(cString:)();
      v101 = v100;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v102 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        v103 = a5;
        swift_bridgeObjectRetain();
        v104 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v101);
        if ((v105 & 1) != 0)
        {
          v106 = (uint64_t *)(*(_QWORD *)(v102 + 56) + 56 * v104);
          v107 = *v106;
          v317 = v106[1];
          v108 = v106[2];
          v109 = v106[3];
          v111 = v106[4];
          v110 = v106[5];
          v112 = v106[6];
          swift_bridgeObjectRelease();
LABEL_119:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v393 = v322;
          BYTE8(v393) = 0;
          *(_QWORD *)&v394 = v329;
          *((_QWORD *)&v394 + 1) = v107;
          *(_QWORD *)&v395 = v317;
          *((_QWORD *)&v395 + 1) = v108;
          *(_QWORD *)&v396 = v109;
          *((_QWORD *)&v396 + 1) = v111;
          *(_QWORD *)&v397 = v110;
          *((_QWORD *)&v397 + 1) = v112;
          v274 = v109;
          v279 = v108;
          v270 = v110;
          v272 = v111;
          v268 = v112;
          if (v297 && REBindPointBoundComponent())
          {
            v186 = REComponentGetEntity();
            v187 = v103;
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v188 = swift_dynamicCastClassUnconditional();
LABEL_123:
              v189 = v188;
              goto LABEL_125;
            }
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_239:
              __break(1u);
              goto LABEL_240;
            }
            v242 = specialized static Entity.entityInfoType(_:)(v186);
            if (!v242)
            {
              v188 = makeEntity(for:)(v186);
              goto LABEL_123;
            }
            v189 = (*(uint64_t (**)(void))(v242 + 232))();
            v243 = *(_QWORD *)(v189 + 16);
            swift_retain();
            MEMORY[0x22076D160](v243, 0);
            *(_QWORD *)(v189 + 16) = v186;
            MEMORY[0x22076D160](v186, v189);
            swift_release();
          }
          else
          {
            v189 = 0;
            v187 = v103;
          }
LABEL_125:
          specialized ActionEventData.action<A>()(&v390);
          v190 = v391;
          if (v391)
          {
            v191 = v392;
            v192 = v390;
            swift_retain();
            outlined copy of NotificationAction?(v192, v190);
            v193 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<NotificationAction>);
            v357 = v394;
            v358 = v395;
            v359 = v396;
            v360 = v397;
            v194 = v31;
            v195 = v32;
            v341 = v190;
            v342 = v191;
            v299 = v107;
            v196 = v193 & 1;
            v343 = v193 & 1;
            v339 = v98;
            v340 = v192;
            v344 = v189;
            v345 = v283;
            v346 = v194;
            v347 = v195;
            v349 = 0;
            v350 = 0.0;
            v348 = v9;
            v351 = 1;
            v352 = v291;
            v353 = 0;
            v354 = v309;
            v355 = 0;
            v356 = v393;
            v361 = v302;
            swift_retain();
            swift_retain();
            v187(&v339);
            outlined consume of NotificationAction?(v192, v190);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v362 = v98;
            v363 = v192;
            v364 = v190;
            v365 = v191;
            v366 = v196;
            v367 = v189;
            v368 = v283;
            v369 = v194;
            v370 = v195;
            v372 = 0;
            v373 = 0.0;
            v371 = v9;
            v374 = 1;
            v375 = v291;
            v376 = 0;
            v377 = v309;
            v378 = 0;
            v379 = v322;
            v380 = 0;
            v381 = v329;
            v382 = v299;
            v383 = v317;
            v174 = v279;
            goto LABEL_127;
          }
LABEL_215:
          swift_release();
          swift_release();
          swift_release();
LABEL_216:
          swift_release();
          return 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v103 = a5;
      }
      v107 = 0;
      v317 = 0;
      v108 = 0;
      v109 = 0;
      v111 = 0;
      v110 = 0;
      v112 = 0;
      goto LABEL_119;
    case 16:
      v34 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v330 = *(_QWORD *)(a2 + 40);
      v310 = *(_QWORD *)(a2 + 56);
      v313 = *(_QWORD *)(a2 + 48);
      v304 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
        v113 = specialized static Entity.entityInfoType(_:)(v34);
        if (v113)
        {
          v114 = (*(uint64_t (**)(void))(v113 + 232))();
          v115 = *(_QWORD *)(v114 + 16);
          swift_retain();
          MEMORY[0x22076D160](v115, 0);
          *(_QWORD *)(v114 + 16) = v34;
          MEMORY[0x22076D160](v34, v114);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v116 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v116 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v117 = String.init(cString:)();
      v119 = v118;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v120 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        v121 = a5;
        swift_bridgeObjectRetain();
        v122 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v119);
        if ((v123 & 1) != 0)
        {
          v124 = (uint64_t *)(*(_QWORD *)(v120 + 56) + 56 * v122);
          v125 = *v124;
          v126 = v124[1];
          v127 = v124[3];
          v324 = v124[2];
          v128 = v124[4];
          v129 = v124[5];
          v130 = v124[6];
          swift_bridgeObjectRelease();
LABEL_131:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v393 = 0;
          BYTE8(v393) = 0;
          *(_QWORD *)&v394 = v330;
          *((_QWORD *)&v394 + 1) = v125;
          *(_QWORD *)&v395 = v126;
          *((_QWORD *)&v395 + 1) = v324;
          *(_QWORD *)&v396 = v127;
          *((_QWORD *)&v396 + 1) = v128;
          *(_QWORD *)&v397 = v129;
          *((_QWORD *)&v397 + 1) = v130;
          v292 = v129;
          v300 = v128;
          v285 = v130;
          if (v310 && REBindPointBoundComponent())
          {
            v197 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v198 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_240:
                __break(1u);
                goto LABEL_241;
              }
              v244 = specialized static Entity.entityInfoType(_:)(v197);
              if (v244)
              {
                v199 = (*(uint64_t (**)(void))(v244 + 232))();
                v245 = *(_QWORD *)(v199 + 16);
                swift_retain();
                MEMORY[0x22076D160](v245, 0);
                *(_QWORD *)(v199 + 16) = v197;
                MEMORY[0x22076D160](v197, v199);
                swift_release();
                goto LABEL_137;
              }
              v198 = makeEntity(for:)(v197);
            }
            v199 = v198;
          }
          else
          {
            v199 = 0;
          }
LABEL_137:
          specialized ActionEventData.action<A>()(&v390);
          v200 = v391;
          if (!v391)
            goto LABEL_215;
          v201 = v393;
          v357 = v394;
          v358 = v395;
          v359 = v396;
          v360 = v397;
          v312 = v127;
          v202 = v392;
          v280 = v126;
          v203 = v121;
          goto LABEL_149;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v121 = a5;
      }
      v125 = 0;
      v126 = 0;
      v324 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v130 = 0;
      goto LABEL_131;
    case 32:
      v36 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v330 = *(_QWORD *)(a2 + 40);
      v311 = *(_QWORD *)(a2 + 56);
      v313 = *(_QWORD *)(a2 + 48);
      v304 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
        v131 = specialized static Entity.entityInfoType(_:)(v36);
        if (v131)
        {
          v132 = (*(uint64_t (**)(void))(v131 + 232))();
          v133 = *(_QWORD *)(v132 + 16);
          swift_retain();
          MEMORY[0x22076D160](v133, 0);
          *(_QWORD *)(v132 + 16) = v36;
          MEMORY[0x22076D160](v36, v132);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v116 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v116 + 16) = v35;
      swift_beginAccess();
      swift_weakAssign();
      v134 = String.init(cString:)();
      v136 = v135;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v137 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_140;
      swift_bridgeObjectRetain();
      v138 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v136);
      if ((v139 & 1) != 0)
      {
        v140 = (uint64_t *)(*(_QWORD *)(v137 + 56) + 56 * v138);
        v125 = *v140;
        v141 = v140[1];
        v142 = v140[3];
        v324 = v140[2];
        v143 = v140[4];
        v144 = v140[5];
        v145 = v140[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_140:
        v125 = 0;
        v141 = 0;
        v324 = 0;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v145 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v393 = 0;
      BYTE8(v393) = 0;
      *(_QWORD *)&v394 = v330;
      *((_QWORD *)&v394 + 1) = v125;
      *(_QWORD *)&v395 = v141;
      *((_QWORD *)&v395 + 1) = v324;
      *(_QWORD *)&v396 = v142;
      *((_QWORD *)&v396 + 1) = v143;
      *(_QWORD *)&v397 = v144;
      *((_QWORD *)&v397 + 1) = v145;
      v292 = v144;
      v300 = v143;
      v285 = v145;
      if (v311 && REBindPointBoundComponent())
      {
        v204 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v205 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_241:
            __break(1u);
            goto LABEL_242;
          }
          v246 = specialized static Entity.entityInfoType(_:)(v204);
          if (v246)
          {
            v199 = (*(uint64_t (**)(void))(v246 + 232))();
            v247 = *(_QWORD *)(v199 + 16);
            swift_retain();
            MEMORY[0x22076D160](v247, 0);
            *(_QWORD *)(v199 + 16) = v204;
            MEMORY[0x22076D160](v204, v199);
            swift_release();
            goto LABEL_147;
          }
          v205 = makeEntity(for:)(v204);
        }
        v199 = v205;
      }
      else
      {
        v199 = 0;
      }
LABEL_147:
      specialized ActionEventData.action<A>()(&v390);
      v200 = v391;
      if (!v391)
        goto LABEL_215;
      v201 = v393;
      v357 = v394;
      v358 = v395;
      v359 = v396;
      v360 = v397;
      v312 = v142;
      v202 = v392;
      v280 = v141;
      v203 = a5;
LABEL_149:
      v206 = v9;
      v207 = v390;
      v341 = v200;
      v342 = v202;
      v343 = 1;
      v339 = v116;
      v340 = v390;
      v344 = v199;
      v345 = 0;
      v346 = 0.0;
      v347 = 0.0;
      v349 = 0;
      v350 = 0.0;
      v348 = v206;
      v351 = 1;
      v352 = v304;
      v353 = 0;
      v354 = 0;
      v355 = 1;
      v356 = v201;
      v361 = v313;
      swift_retain();
      swift_retain();
      outlined copy of NotificationAction?(v207, v200);
      swift_retain();
      v203(&v339);
      outlined consume of NotificationAction?(v207, v200);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v362 = v116;
      v363 = v207;
      v364 = v200;
      v365 = v202;
      v366 = 1;
      v367 = v199;
      v368 = 0;
      v369 = 0.0;
      v370 = 0.0;
      v372 = 0;
      v373 = 0.0;
      v371 = v206;
      v374 = 1;
      v375 = v304;
      v376 = 0;
      v377 = 0;
      v378 = 1;
      v379 = 0;
      v380 = 0;
      v381 = v330;
      v382 = v125;
      v383 = v280;
      v384 = v324;
      v385 = v312;
      v386 = v300;
      v387 = v292;
      v388 = v285;
      v185 = v313;
      goto LABEL_150;
    case 64:
      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v39 = *(_QWORD *)(a2 + 24);
      v40 = *(_QWORD *)(a2 + 32);
      v41 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_233:
          __break(1u);
          goto LABEL_234;
        }
        v146 = specialized static Entity.entityInfoType(_:)(v38);
        if (v146)
        {
          v147 = (*(uint64_t (**)(void))(v146 + 232))();
          v148 = *(_QWORD *)(v147 + 16);
          swift_retain();
          MEMORY[0x22076D160](v148, 0);
          *(_QWORD *)(v147 + 16) = v38;
          MEMORY[0x22076D160](v38, v147);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v149 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v149 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      if (v41)
      {
        v150 = v39;
        if (REBindPointBoundComponent())
        {
          v151 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v152 = swift_dynamicCastClassUnconditional();
LABEL_77:
            v41 = v152;
            goto LABEL_166;
          }
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
            goto LABEL_237;
          }
          v215 = specialized static Entity.entityInfoType(_:)(v151);
          if (!v215)
          {
            v152 = makeEntity(for:)(v151);
            goto LABEL_77;
          }
          v41 = (*(uint64_t (**)(void))(v215 + 232))();
          v216 = *(_QWORD *)(v41 + 16);
          swift_retain();
          MEMORY[0x22076D160](v216, 0);
          *(_QWORD *)(v41 + 16) = v151;
          MEMORY[0x22076D160](v151, v41);
          swift_release();
        }
        else
        {
          v41 = 0;
        }
      }
      else
      {
        v150 = v39;
      }
LABEL_166:
      v217 = String.init(cString:)();
      v219 = v218;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v220 = static AnimationResource.codableActionTypeMap;
      v337 = a5;
      v318 = v40;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v221 = specialized __RawDictionaryStorage.find<A>(_:)(v217, v219);
        if ((v222 & 1) != 0)
        {
          v223 = (uint64_t *)(*(_QWORD *)(v220 + 56) + 56 * v221);
          v224 = *v223;
          v225 = v223[1];
          v226 = v223[2];
          v227 = v223[3];
          v228 = v223[4];
          v331 = v223[6];
          v334 = v223[5];
          swift_bridgeObjectRelease();
LABEL_173:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v393 = 0;
          BYTE8(v393) = 0;
          *(_QWORD *)&v394 = v150;
          *((_QWORD *)&v394 + 1) = v224;
          *(_QWORD *)&v395 = v225;
          *((_QWORD *)&v395 + 1) = v226;
          *(_QWORD *)&v396 = v227;
          *((_QWORD *)&v396 + 1) = v228;
          *(_QWORD *)&v397 = v334;
          *((_QWORD *)&v397 + 1) = v331;
          specialized ActionEventData.action<A>()(&v390);
          v229 = v391;
          if (!v391)
            goto LABEL_215;
          v357 = v394;
          v358 = v395;
          v359 = v396;
          v360 = v397;
          v305 = v227;
          v230 = v392;
          v293 = v224;
          v231 = v9;
          v232 = v390;
          v341 = v391;
          v342 = v392;
          v343 = 1;
          v339 = v149;
          v340 = v390;
          v344 = v41;
          v345 = 0;
          v346 = 0.0;
          v347 = 0.0;
          v349 = 0;
          v350 = 0.0;
          v348 = v231;
          v351 = 1;
          v352 = 0;
          v353 = 1;
          v354 = 0;
          v355 = 1;
          v356 = v393;
          v286 = v226;
          v233 = v225;
          v234 = v318;
          v361 = v318;
          swift_retain();
          swift_retain();
          outlined copy of NotificationAction?(v232, v229);
          swift_retain();
          v337(&v339);
          outlined consume of NotificationAction?(v232, v229);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v362 = v149;
          v363 = v232;
          v364 = v229;
          v365 = v230;
          v366 = 1;
          v367 = v41;
          v368 = 0;
          v369 = 0.0;
          v370 = 0.0;
          v372 = 0;
          v373 = 0.0;
          v371 = v231;
          v374 = 1;
          v375 = 0;
          v376 = 1;
          v377 = 0;
          v378 = 1;
          v379 = 0;
          v380 = 0;
          v381 = v150;
          v382 = v293;
          v383 = v233;
          v384 = v286;
          v385 = v305;
          v386 = v228;
          v387 = v334;
          v235 = v331;
LABEL_213:
          v388 = v235;
          v389 = v234;
          goto LABEL_214;
        }
        swift_bridgeObjectRelease();
      }
      v224 = 0;
      v225 = 0;
      v226 = 0;
      v227 = 0;
      v228 = 0;
      v331 = 0;
      v334 = 0;
      goto LABEL_173;
    default:
      if (a4 != 128)
        goto LABEL_216;
      v16 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 24);
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_234:
          __break(1u);
          goto LABEL_235;
        }
        v208 = specialized static Entity.entityInfoType(_:)(v16);
        if (v208)
        {
          v209 = (*(uint64_t (**)(void))(v208 + 232))();
          v210 = *(_QWORD *)(v209 + 16);
          swift_retain();
          MEMORY[0x22076D160](v210, 0);
          *(_QWORD *)(v209 + 16) = v16;
          MEMORY[0x22076D160](v16, v209);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v16);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v211 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v211 + 16) = v15;
      swift_beginAccess();
      swift_weakAssign();
      if (v19)
      {
        v212 = v17;
        if (REBindPointBoundComponent())
        {
          v213 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            v214 = swift_dynamicCastClassUnconditional();
LABEL_159:
            v19 = v214;
            goto LABEL_204;
          }
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_242:
            __break(1u);
            JUMPOUT(0x21BB62C78);
          }
          v248 = specialized static Entity.entityInfoType(_:)(v213);
          if (!v248)
          {
            v214 = makeEntity(for:)(v213);
            goto LABEL_159;
          }
          v19 = (*(uint64_t (**)(void))(v248 + 232))();
          v249 = *(_QWORD *)(v19 + 16);
          swift_retain();
          MEMORY[0x22076D160](v249, 0);
          *(_QWORD *)(v19 + 16) = v213;
          MEMORY[0x22076D160](v213, v19);
          swift_release();
        }
        else
        {
          v19 = 0;
        }
      }
      else
      {
        v212 = v17;
      }
LABEL_204:
      v250 = String.init(cString:)();
      v252 = v251;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v253 = static AnimationResource.codableActionTypeMap;
      v338 = a5;
      v319 = v18;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v254 = specialized __RawDictionaryStorage.find<A>(_:)(v250, v252);
        if ((v255 & 1) != 0)
        {
          v256 = (uint64_t *)(*(_QWORD *)(v253 + 56) + 56 * v254);
          v257 = *v256;
          v258 = v256[1];
          v260 = v256[2];
          v259 = v256[3];
          v332 = v256[5];
          v335 = v256[4];
          v325 = v256[6];
          swift_bridgeObjectRelease();
LABEL_211:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v393 = 0;
          BYTE8(v393) = 0;
          *(_QWORD *)&v394 = v212;
          *((_QWORD *)&v394 + 1) = v257;
          *(_QWORD *)&v395 = v258;
          *((_QWORD *)&v395 + 1) = v260;
          *(_QWORD *)&v396 = v259;
          *((_QWORD *)&v396 + 1) = v335;
          *(_QWORD *)&v397 = v332;
          *((_QWORD *)&v397 + 1) = v325;
          specialized ActionEventData.action<A>()(&v390);
          v261 = v391;
          if (!v391)
            goto LABEL_215;
          v357 = v394;
          v358 = v395;
          v359 = v396;
          v360 = v397;
          v306 = v260;
          v262 = v392;
          v263 = v9;
          v264 = v390;
          v341 = v391;
          v342 = v392;
          v343 = 1;
          v339 = v211;
          v340 = v390;
          v344 = v19;
          v345 = 0;
          v346 = 0.0;
          v347 = 0.0;
          v349 = 0;
          v350 = 0.0;
          v348 = v263;
          v351 = 1;
          v352 = 0;
          v353 = 1;
          v354 = 0;
          v355 = 1;
          v356 = v393;
          v287 = v257;
          v234 = v319;
          v361 = v319;
          swift_retain();
          swift_retain();
          outlined copy of NotificationAction?(v264, v261);
          swift_retain();
          v338(&v339);
          swift_release();
          outlined consume of NotificationAction?(v264, v261);
          swift_release();
          swift_release();
          swift_release();
          v362 = v211;
          v363 = v264;
          v364 = v261;
          v365 = v262;
          v366 = 1;
          v367 = v19;
          v368 = 0;
          v369 = 0.0;
          v370 = 0.0;
          v372 = 0;
          v373 = 0.0;
          v371 = v263;
          v374 = 1;
          v375 = 0;
          v376 = 1;
          v377 = 0;
          v378 = 1;
          v379 = 0;
          v380 = 0;
          v381 = v212;
          v382 = v287;
          v383 = v258;
          v384 = v306;
          v385 = v259;
          v386 = v335;
          v387 = v332;
          v235 = v325;
          goto LABEL_213;
        }
        swift_bridgeObjectRelease();
      }
      v257 = 0;
      v258 = 0;
      v260 = 0;
      v259 = 0;
      v332 = 0;
      v335 = 0;
      v325 = 0;
      goto LABEL_211;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t Entity;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int16 v168;
  char v169;
  double v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int16 v182;
  char v183;
  double v184;
  double v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int16 v197;
  char v198;
  double v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  unsigned __int16 v211;
  char v212;
  double v213;
  double v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  char v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  char v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  int v301;
  unint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  int v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  char v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  char v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  char v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t Strong;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __int16 v379;
  uint64_t v380;
  uint64_t v381;
  __int16 v382;
  char v383;
  uint64_t v384;
  char v385;
  double v386;
  double v387;
  uint64_t v388;
  uint64_t v389;
  double v390;
  char v391;
  unint64_t v392;
  char v393;
  unint64_t v394;
  char v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char v407;
  char v408;
  uint64_t v409;
  uint64_t v410;
  __int16 v411;
  char v412;
  uint64_t v413;
  char v414;
  double v415;
  double v416;
  uint64_t v417;
  uint64_t v418;
  double v419;
  char v420;
  unint64_t v421;
  char v422;
  unint64_t v423;
  char v424;
  uint64_t v425;
  char v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unsigned __int16 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 48);
      v363 = *(_QWORD *)(a2 + 32);
      v369 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 64);
      v11 = *(float *)(a2 + 72);
      v12 = *(float *)(a2 + 76);
      v320 = *(_BYTE *)(a2 + 80);
      v327 = *(_QWORD *)(a2 + 88);
      v332 = *(_QWORD *)(a2 + 96);
      v339 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_213;
      }
      v44 = specialized static Entity.entityInfoType(_:)(v7);
      if (v44)
      {
        v45 = (*(uint64_t (**)(void))(v44 + 232))();
        v46 = *(_QWORD *)(v45 + 16);
        swift_retain();
        MEMORY[0x22076D160](v46, 0);
        *(_QWORD *)(v45 + 16) = v7;
        MEMORY[0x22076D160](v7, v45);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v7);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v47 = swift_allocObject();
      swift_weakInit();
      v48 = v47;
      *(_QWORD *)(v47 + 16) = v8;
      swift_beginAccess();
      swift_weakAssign();
      v49 = String.init(cString:)();
      v51 = v50;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v52 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_86;
      swift_bridgeObjectRetain();
      v53 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v51);
      if ((v54 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_86:
        v352 = 0;
        v362 = 0;
        v56 = 0;
        v346 = 0;
        v57 = 0;
        v59 = 0;
        v58 = 0;
        goto LABEL_87;
      }
      v55 = (uint64_t *)(*(_QWORD *)(v52 + 56) + 56 * v53);
      v56 = v55[1];
      v352 = v55[2];
      v362 = *v55;
      v57 = v55[4];
      v346 = v55[3];
      v59 = v55[5];
      v58 = v55[6];
      swift_bridgeObjectRelease();
LABEL_87:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v444 = v363;
      BYTE8(v444) = 0;
      *(_QWORD *)&v445 = v369;
      *((_QWORD *)&v445 + 1) = v362;
      *(_QWORD *)&v446 = v56;
      *((_QWORD *)&v446 + 1) = v352;
      *(_QWORD *)&v447 = v346;
      *((_QWORD *)&v447 + 1) = v57;
      *(_QWORD *)&v448 = v59;
      *((_QWORD *)&v448 + 1) = v58;
      v316 = v9;
      v287 = v57;
      v292 = v56;
      v283 = v58;
      if (!v10 || !REBindPointBoundComponent())
      {
        v304 = 0;
        goto LABEL_93;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v160 = swift_dynamicCastClassUnconditional();
LABEL_91:
        v304 = v160;
        goto LABEL_93;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_221;
      v256 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v256)
      {
        v160 = makeEntity(for:)(Entity);
        goto LABEL_91;
      }
      v257 = (*(uint64_t (**)(void))(v256 + 232))();
      v258 = *(_QWORD *)(v257 + 16);
      swift_retain();
      MEMORY[0x22076D160](v258, 0);
      *(_QWORD *)(v257 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v257);
      v304 = v257;
      swift_release();
LABEL_93:
      specialized ActionEventData.action<A>()((uint64_t)&v436);
      v161 = v437;
      if (!v437)
        goto LABEL_173;
      v162 = v442;
      v163 = v441;
      v164 = v440;
      v165 = v439;
      v166 = v438;
      v167 = v436;
      v277 = v436;
      v298 = v440 >> 8;
      v168 = v443;
      swift_retain();
      outlined copy of PlayAnimationAction?(v167, v161);
      v169 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAnimationAction>);
      v397 = v445;
      v398 = v446;
      v399 = v447;
      v400 = v448;
      v170 = v11;
      v171 = v12;
      v376 = v161;
      v377 = v166;
      v378 = v165;
      LOBYTE(v379) = v164 & 1;
      HIBYTE(v379) = v298;
      v380 = v163;
      v381 = v162;
      v382 = v168 & 0x101;
      v272 = v169 & 1;
      v383 = v169 & 1;
      v374 = v48;
      v375 = v277;
      v384 = v304;
      v385 = v320;
      v386 = v170;
      v387 = v171;
      v388 = Strong;
      v389 = v339;
      v390 = -1.0;
      v391 = 0;
      v392 = v327;
      v393 = 0;
      v394 = v332;
      v395 = 0;
      v396 = v444;
      v401 = v316;
      swift_retain();
      swift_retain();
      a5(&v374);
      outlined consume of PlayAnimationAction?(v277, v161);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v402 = v48;
      v403 = v277;
      v404 = v161;
      v405 = v166;
      v406 = v165;
      v407 = v164 & 1;
      v408 = v298;
      v409 = v163;
      v410 = v162;
      v411 = v168 & 0x101;
      v412 = v272;
      v413 = v304;
      v414 = v320;
      v415 = v170;
      v416 = v171;
      v417 = Strong;
      v418 = v339;
      v419 = -1.0;
      v420 = 0;
      v421 = v327;
      v422 = 0;
      v423 = v332;
      v424 = 0;
      v425 = v363;
      v426 = 0;
      v427 = v369;
      v428 = v362;
      v429 = v292;
      v430 = v352;
      v431 = v346;
      v432 = v287;
      v433 = v59;
      v434 = v283;
      v172 = v316;
LABEL_172:
      v435 = v172;
      outlined release of ActionEvent<PlayAnimationAction>((uint64_t)&v402);
      return 0;
    case 2:
      v18 = *(_QWORD *)a2;
      v19 = *(_QWORD *)(a2 + 8);
      v359 = *(_QWORD *)(a2 + 32);
      v364 = *(_QWORD *)(a2 + 40);
      v20 = *(float *)(a2 + 56);
      v328 = *(_QWORD *)(a2 + 64);
      v333 = *(_QWORD *)(a2 + 48);
      v21 = *(_QWORD *)(a2 + 80);
      v321 = *(_QWORD *)(a2 + 72);
      v22 = *(_QWORD *)(a2 + 88);
      v23 = *(float *)(a2 + 96);
      v24 = *(float *)(a2 + 100);
      v315 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v60 = specialized static Entity.entityInfoType(_:)(v18);
        if (v60)
        {
          v61 = (*(uint64_t (**)(void))(v60 + 232))();
          v62 = *(_QWORD *)(v61 + 16);
          swift_retain();
          MEMORY[0x22076D160](v62, 0);
          *(_QWORD *)(v61 + 16) = v18;
          MEMORY[0x22076D160](v18, v61);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v342 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v342 + 16) = v19;
      swift_beginAccess();
      swift_weakAssign();
      v63 = String.init(cString:)();
      v65 = v64;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v66 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        v67 = v21;
        swift_bridgeObjectRetain();
        v68 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v65);
        if ((v69 & 1) != 0)
        {
          v70 = (uint64_t *)(*(_QWORD *)(v66 + 56) + 56 * v68);
          v71 = *v70;
          v72 = v70[1];
          v73 = v70[4];
          v347 = v70[3];
          v353 = v70[2];
          v74 = v70[5];
          v75 = v70[6];
          swift_bridgeObjectRelease();
LABEL_98:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v444 = v359;
          BYTE8(v444) = 0;
          *(_QWORD *)&v445 = v364;
          *((_QWORD *)&v445 + 1) = v71;
          *(_QWORD *)&v446 = v72;
          *((_QWORD *)&v446 + 1) = v353;
          *(_QWORD *)&v447 = v347;
          *((_QWORD *)&v447 + 1) = v73;
          *(_QWORD *)&v448 = v74;
          *((_QWORD *)&v448 + 1) = v75;
          v311 = v67;
          v288 = v72;
          v293 = v71;
          v278 = v75;
          v284 = v74;
          if (v22 && REBindPointBoundComponent())
          {
            v173 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v174 = swift_dynamicCastClassUnconditional();
LABEL_102:
              v305 = v174;
              goto LABEL_104;
            }
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_222:
              __break(1u);
              goto LABEL_223;
            }
            v259 = specialized static Entity.entityInfoType(_:)(v173);
            if (!v259)
            {
              v174 = makeEntity(for:)(v173);
              goto LABEL_102;
            }
            v260 = (*(uint64_t (**)(void))(v259 + 232))();
            v261 = *(_QWORD *)(v260 + 16);
            swift_retain();
            MEMORY[0x22076D160](v261, 0);
            *(_QWORD *)(v260 + 16) = v173;
            MEMORY[0x22076D160](v173, v260);
            v305 = v260;
            swift_release();
          }
          else
          {
            v305 = 0;
          }
LABEL_104:
          specialized ActionEventData.action<A>()((uint64_t)&v436);
          v175 = v437;
          if (v437)
          {
            v176 = v442;
            v177 = v441;
            v178 = v440;
            v179 = v439;
            v180 = v438;
            v181 = v436;
            v275 = v436;
            v299 = v440 >> 8;
            v182 = v443;
            swift_retain();
            outlined copy of PlayAnimationAction?(v181, v175);
            v183 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAnimationAction>);
            v397 = v445;
            v398 = v446;
            v399 = v447;
            v400 = v448;
            v184 = v23;
            v185 = v24;
            v186 = v20;
            v376 = v175;
            v377 = v180;
            v378 = v179;
            LOBYTE(v379) = v178 & 1;
            HIBYTE(v379) = v299;
            v380 = v177;
            v381 = v176;
            v382 = v182 & 0x101;
            v271 = v183 & 1;
            v383 = v183 & 1;
            v374 = v342;
            v375 = v275;
            v384 = v305;
            v385 = v315;
            v386 = v184;
            v387 = v185;
            v388 = Strong;
            v389 = v321;
            v390 = v186;
            v391 = 0;
            v392 = v333;
            v393 = 0;
            v394 = v328;
            v395 = 0;
            v396 = v444;
            v401 = v311;
            swift_retain();
            swift_retain();
            a5(&v374);
            outlined consume of PlayAnimationAction?(v275, v175);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v402 = v342;
            v403 = v275;
            v404 = v175;
            v405 = v180;
            v406 = v179;
            v407 = v178 & 1;
            v408 = v299;
            v409 = v177;
            v410 = v176;
            v411 = v182 & 0x101;
            v412 = v271;
            v413 = v305;
            v414 = v315;
            v415 = v184;
            v416 = v185;
            v417 = Strong;
            v418 = v321;
            v419 = v186;
            v420 = 0;
            v421 = v333;
            v422 = 0;
            v423 = v328;
            v424 = 0;
            v425 = v359;
            v426 = 0;
            v427 = v364;
            v428 = v293;
            v429 = v288;
            v430 = v353;
            v431 = v347;
            v432 = v73;
            v433 = v284;
            v434 = v278;
            v172 = v311;
            goto LABEL_172;
          }
LABEL_173:
          swift_release();
          swift_release();
          swift_release();
LABEL_174:
          swift_release();
          return 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v67 = v21;
      }
      v71 = 0;
      v72 = 0;
      v347 = 0;
      v353 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      goto LABEL_98;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_174;
    case 4:
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      v27 = *(_QWORD *)(a2 + 48);
      v360 = *(_QWORD *)(a2 + 32);
      v365 = *(_QWORD *)(a2 + 40);
      v28 = *(_QWORD *)(a2 + 64);
      v340 = *(_QWORD *)(a2 + 56);
      v29 = *(float *)(a2 + 72);
      v30 = *(float *)(a2 + 76);
      v334 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v76 = specialized static Entity.entityInfoType(_:)(v25);
        if (v76)
        {
          v77 = (*(uint64_t (**)(void))(v76 + 232))();
          v78 = *(_QWORD *)(v77 + 16);
          swift_retain();
          MEMORY[0x22076D160](v78, 0);
          *(_QWORD *)(v77 + 16) = v25;
          MEMORY[0x22076D160](v25, v77);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v25);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v323 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v323 + 16) = v26;
      swift_beginAccess();
      swift_weakAssign();
      v79 = String.init(cString:)();
      v81 = v80;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v82 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_108;
      swift_bridgeObjectRetain();
      v83 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v81);
      if ((v84 & 1) != 0)
      {
        v85 = (uint64_t *)(*(_QWORD *)(v82 + 56) + 56 * v83);
        v86 = *v85;
        v87 = v85[1];
        v88 = v85[4];
        v348 = v85[2];
        v354 = v85[3];
        v89 = v85[5];
        v90 = v85[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_108:
        v86 = 0;
        v87 = 0;
        v348 = 0;
        v354 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v444 = v360;
      BYTE8(v444) = 0;
      *(_QWORD *)&v445 = v365;
      *((_QWORD *)&v445 + 1) = v86;
      *(_QWORD *)&v446 = v87;
      *((_QWORD *)&v446 + 1) = v348;
      *(_QWORD *)&v447 = v354;
      *((_QWORD *)&v447 + 1) = v88;
      *(_QWORD *)&v448 = v89;
      *((_QWORD *)&v448 + 1) = v90;
      v329 = v27;
      v306 = v87;
      v312 = v86;
      v294 = v90;
      v300 = v89;
      if (v28 && REBindPointBoundComponent())
      {
        v187 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v188 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_223:
            __break(1u);
            goto LABEL_224;
          }
          v262 = specialized static Entity.entityInfoType(_:)(v187);
          if (v262)
          {
            v189 = (*(uint64_t (**)(void))(v262 + 232))();
            v263 = *(_QWORD *)(v189 + 16);
            swift_retain();
            MEMORY[0x22076D160](v263, 0);
            *(_QWORD *)(v189 + 16) = v187;
            MEMORY[0x22076D160](v187, v189);
            swift_release();
            goto LABEL_115;
          }
          v188 = makeEntity(for:)(v187);
        }
        v189 = v188;
      }
      else
      {
        v189 = 0;
      }
LABEL_115:
      specialized ActionEventData.action<A>()((uint64_t)&v436);
      v190 = v437;
      if (!v437)
        goto LABEL_173;
      v191 = v442;
      v192 = v441;
      v193 = v440;
      v194 = v439;
      v195 = v438;
      v196 = v436;
      v279 = v436;
      v285 = v88;
      v317 = v440 >> 8;
      v197 = v443;
      swift_retain();
      outlined copy of PlayAnimationAction?(v196, v190);
      v198 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAnimationAction>);
      v397 = v445;
      v398 = v446;
      v399 = v447;
      v400 = v448;
      v199 = v29;
      v200 = v30;
      v376 = v190;
      v377 = v195;
      v378 = v194;
      LOBYTE(v379) = v193 & 1;
      HIBYTE(v379) = v317;
      v380 = v192;
      v381 = v191;
      v382 = v197 & 0x101;
      v273 = v198 & 1;
      v383 = v198 & 1;
      v374 = v323;
      v375 = v279;
      v384 = v189;
      v385 = v334;
      v386 = v199;
      v387 = v200;
      v388 = Strong;
      v389 = v340;
      v390 = -1.0;
      v391 = 0;
      v392 = 0xBFF0000000000000;
      v393 = 0;
      v394 = 0xBFF0000000000000;
      v395 = 0;
      v396 = v444;
      v401 = v329;
      swift_retain();
      swift_retain();
      a5(&v374);
      outlined consume of PlayAnimationAction?(v279, v190);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v402 = v323;
      v403 = v279;
      v404 = v190;
      v405 = v195;
      v406 = v194;
      v407 = v193 & 1;
      v408 = v317;
      v409 = v192;
      v410 = v191;
      v411 = v197 & 0x101;
      v412 = v273;
      v413 = v189;
      v414 = v334;
      v415 = v199;
      v416 = v200;
      v417 = Strong;
      v418 = v340;
      v419 = -1.0;
      v420 = 0;
      v421 = 0xBFF0000000000000;
      v422 = 0;
      v423 = 0xBFF0000000000000;
      v424 = 0;
      v425 = v360;
      v426 = 0;
      v427 = v365;
      v428 = v312;
      v429 = v306;
      v430 = v348;
      v201 = v354;
      goto LABEL_128;
    case 8:
      v31 = *(_QWORD *)a2;
      v32 = *(_QWORD *)(a2 + 8);
      v33 = *(_QWORD *)(a2 + 48);
      v361 = *(_QWORD *)(a2 + 32);
      v366 = *(_QWORD *)(a2 + 40);
      v34 = *(float *)(a2 + 64);
      v35 = *(float *)(a2 + 68);
      v335 = *(_BYTE *)(a2 + 72);
      v341 = *(_QWORD *)(a2 + 80);
      v345 = *(_QWORD *)(a2 + 88);
      v322 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v91 = specialized static Entity.entityInfoType(_:)(v31);
        if (v91)
        {
          v92 = (*(uint64_t (**)(void))(v91 + 232))();
          v93 = *(_QWORD *)(v92 + 16);
          swift_retain();
          MEMORY[0x22076D160](v93, 0);
          *(_QWORD *)(v92 + 16) = v31;
          MEMORY[0x22076D160](v31, v92);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v31);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v355 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v355 + 16) = v32;
      swift_beginAccess();
      swift_weakAssign();
      v94 = String.init(cString:)();
      v96 = v95;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v97 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_119;
      swift_bridgeObjectRetain();
      v98 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v96);
      if ((v99 & 1) != 0)
      {
        v100 = (uint64_t *)(*(_QWORD *)(v97 + 56) + 56 * v98);
        v101 = *v100;
        v102 = v100[1];
        v104 = v100[2];
        v103 = v100[3];
        v106 = v100[4];
        v105 = v100[5];
        v107 = v100[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_119:
        v101 = 0;
        v102 = 0;
        v104 = 0;
        v103 = 0;
        v106 = 0;
        v105 = 0;
        v107 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v444 = v361;
      BYTE8(v444) = 0;
      *(_QWORD *)&v445 = v366;
      *((_QWORD *)&v445 + 1) = v101;
      *(_QWORD *)&v446 = v102;
      *((_QWORD *)&v446 + 1) = v104;
      *(_QWORD *)&v447 = v103;
      *((_QWORD *)&v447 + 1) = v106;
      *(_QWORD *)&v448 = v105;
      *((_QWORD *)&v448 + 1) = v107;
      v329 = v33;
      v307 = v102;
      v313 = v101;
      v294 = v107;
      v300 = v105;
      if (v322 && REBindPointBoundComponent())
      {
        v202 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v203 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_224:
            __break(1u);
            goto LABEL_225;
          }
          v264 = specialized static Entity.entityInfoType(_:)(v202);
          if (v264)
          {
            v265 = (*(uint64_t (**)(void))(v264 + 232))();
            v266 = *(_QWORD *)(v265 + 16);
            swift_retain();
            MEMORY[0x22076D160](v266, 0);
            *(_QWORD *)(v265 + 16) = v202;
            MEMORY[0x22076D160](v202, v265);
            v324 = v265;
            swift_release();
            goto LABEL_126;
          }
          v203 = makeEntity(for:)(v202);
        }
        v324 = v203;
      }
      else
      {
        v324 = 0;
      }
LABEL_126:
      specialized ActionEventData.action<A>()((uint64_t)&v436);
      v204 = v437;
      if (!v437)
        goto LABEL_173;
      v205 = v442;
      v206 = v441;
      v207 = v439;
      v285 = v106;
      v289 = v103;
      v208 = v438;
      v209 = v436;
      v276 = v436;
      v280 = v104;
      v318 = v440 >> 8;
      v210 = v440;
      v211 = v443;
      swift_retain();
      outlined copy of PlayAnimationAction?(v209, v204);
      v212 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<PlayAnimationAction>);
      v397 = v445;
      v398 = v446;
      v399 = v447;
      v400 = v448;
      v213 = v34;
      v214 = v35;
      v376 = v204;
      v377 = v208;
      v378 = v207;
      v210 &= 1u;
      LOBYTE(v379) = v210;
      HIBYTE(v379) = v318;
      v380 = v206;
      v381 = v205;
      v382 = v211 & 0x101;
      v274 = v212 & 1;
      v383 = v212 & 1;
      v374 = v355;
      v375 = v276;
      v384 = v324;
      v385 = v335;
      v386 = v213;
      v387 = v214;
      v389 = 0;
      v390 = 0.0;
      v388 = Strong;
      v391 = 1;
      v392 = v341;
      v393 = 0;
      v394 = v345;
      v395 = 0;
      v396 = v444;
      v401 = v33;
      swift_retain();
      swift_retain();
      a5(&v374);
      outlined consume of PlayAnimationAction?(v276, v204);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v402 = v355;
      v403 = v276;
      v404 = v204;
      v405 = v208;
      v406 = v207;
      v407 = v210;
      v408 = v318;
      v409 = v206;
      v410 = v205;
      v411 = v211 & 0x101;
      v412 = v274;
      v413 = v324;
      v414 = v335;
      v415 = v213;
      v416 = v214;
      v419 = 0.0;
      v417 = Strong;
      v418 = 0;
      v420 = 1;
      v421 = v341;
      v422 = 0;
      v423 = v345;
      v424 = 0;
      v425 = v361;
      v426 = 0;
      v427 = v366;
      v428 = v313;
      v429 = v307;
      v430 = v280;
      v201 = v289;
LABEL_128:
      v431 = v201;
      v432 = v285;
      v433 = v300;
      v434 = v294;
      v172 = v329;
      goto LABEL_172;
    case 16:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v367 = *(_QWORD *)(a2 + 32);
      v370 = *(_QWORD *)(a2 + 40);
      v358 = *(_QWORD *)(a2 + 48);
      v351 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v108 = specialized static Entity.entityInfoType(_:)(v36);
        if (v108)
        {
          v109 = (*(uint64_t (**)(void))(v108 + 232))();
          v110 = *(_QWORD *)(v109 + 16);
          swift_retain();
          MEMORY[0x22076D160](v110, 0);
          *(_QWORD *)(v109 + 16) = v36;
          MEMORY[0x22076D160](v36, v109);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v111 = swift_allocObject();
      swift_weakInit();
      v349 = v111;
      *(_QWORD *)(v111 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      v112 = String.init(cString:)();
      v114 = v113;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v115 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_131;
      swift_bridgeObjectRetain();
      v116 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v114);
      if ((v117 & 1) != 0)
      {
        v118 = (uint64_t *)(*(_QWORD *)(v115 + 56) + 56 * v116);
        v119 = *v118;
        v120 = v118[1];
        v122 = v118[2];
        v121 = v118[3];
        v123 = v118[4];
        v124 = v118[5];
        v125 = v118[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_131:
        v119 = 0;
        v120 = 0;
        v122 = 0;
        v121 = 0;
        v123 = 0;
        v124 = 0;
        v125 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v444 = 0;
      BYTE8(v444) = 0;
      *(_QWORD *)&v445 = v370;
      *((_QWORD *)&v445 + 1) = v119;
      *(_QWORD *)&v446 = v120;
      *((_QWORD *)&v446 + 1) = v122;
      *(_QWORD *)&v447 = v121;
      *((_QWORD *)&v447 + 1) = v123;
      *(_QWORD *)&v448 = v124;
      *((_QWORD *)&v448 + 1) = v125;
      v336 = v121;
      v343 = v122;
      v330 = v123;
      if (!v351 || !REBindPointBoundComponent())
        goto LABEL_144;
      v215 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_142;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_192;
      __break(1u);
LABEL_137:
      swift_bridgeObjectRelease();
LABEL_138:
      v119 = 0;
      v120 = 0;
      v138 = 0;
      v137 = 0;
      v139 = 0;
      v124 = 0;
      v125 = 0;
LABEL_139:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v444 = 0;
      BYTE8(v444) = 0;
      *(_QWORD *)&v445 = v370;
      *((_QWORD *)&v445 + 1) = v119;
      *(_QWORD *)&v446 = v120;
      *((_QWORD *)&v446 + 1) = v138;
      *(_QWORD *)&v447 = v137;
      *((_QWORD *)&v447 + 1) = v139;
      *(_QWORD *)&v448 = v124;
      *((_QWORD *)&v448 + 1) = v125;
      v336 = v137;
      v343 = v138;
      v330 = v139;
      if (v351 && REBindPointBoundComponent())
      {
        v215 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_142:
          type metadata accessor for Entity();
          v216 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_225:
            __break(1u);
            goto LABEL_226;
          }
LABEL_192:
          v267 = specialized static Entity.entityInfoType(_:)(v215);
          if (v267)
          {
            v217 = (*(uint64_t (**)(void))(v267 + 232))();
            v268 = *(_QWORD *)(v217 + 16);
            swift_retain();
            MEMORY[0x22076D160](v268, 0);
            *(_QWORD *)(v217 + 16) = v215;
            MEMORY[0x22076D160](v215, v217);
            swift_release();
            goto LABEL_145;
          }
          v216 = makeEntity(for:)(v215);
        }
        v217 = v216;
      }
      else
      {
LABEL_144:
        v217 = 0;
      }
LABEL_145:
      specialized ActionEventData.action<A>()((uint64_t)&v436);
      v218 = v437;
      if (!v437)
        goto LABEL_173;
      v397 = v445;
      v398 = v446;
      v399 = v447;
      v400 = v448;
      v219 = v441;
      v319 = v119;
      v325 = v125;
      v220 = v439;
      v281 = v442;
      v221 = v438;
      v222 = v436;
      v295 = v440 >> 8;
      v376 = v437;
      v377 = v438;
      v378 = v439;
      v290 = v440 & 1;
      v379 = v440 & 0xFF01;
      v380 = v441;
      v381 = v442;
      v308 = v443 & 1;
      v382 = v443 & 0x101;
      v301 = HIBYTE(v443) & 1;
      v383 = 1;
      v374 = v349;
      v375 = v436;
      v384 = v217;
      v385 = 0;
      v386 = 0.0;
      v387 = 0.0;
      v389 = 0;
      v390 = 0.0;
      v388 = Strong;
      v391 = 1;
      v392 = v367;
      v393 = 0;
      v394 = 0;
      v395 = 1;
      v396 = v444;
      v401 = v358;
      swift_retain();
      swift_retain();
      outlined copy of PlayAnimationAction?(v222, v218);
      swift_retain();
      a5(&v374);
      outlined consume of PlayAnimationAction?(v222, v218);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v402 = v349;
      v403 = v222;
      v404 = v218;
      v405 = v221;
      v406 = v220;
      v407 = v290;
      v408 = v295;
      v409 = v219;
      v410 = v281;
      LOBYTE(v411) = v308;
      HIBYTE(v411) = v301;
      v412 = 1;
      v413 = v217;
      v414 = 0;
      v416 = 0.0;
      v415 = 0.0;
      v419 = 0.0;
      v417 = Strong;
      v418 = 0;
      v420 = 1;
      v421 = v367;
      v422 = 0;
      v423 = 0;
      v424 = 1;
      v425 = 0;
      v426 = 0;
      v427 = v370;
      v428 = v319;
      v429 = v120;
      v430 = v343;
      v431 = v336;
      v432 = v330;
      v433 = v124;
      v223 = v325;
LABEL_171:
      v434 = v223;
      v172 = v358;
      goto LABEL_172;
    case 32:
      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v367 = *(_QWORD *)(a2 + 32);
      v370 = *(_QWORD *)(a2 + 40);
      v358 = *(_QWORD *)(a2 + 48);
      v351 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v126 = specialized static Entity.entityInfoType(_:)(v38);
        if (v126)
        {
          v127 = (*(uint64_t (**)(void))(v126 + 232))();
          v128 = *(_QWORD *)(v127 + 16);
          swift_retain();
          MEMORY[0x22076D160](v128, 0);
          *(_QWORD *)(v127 + 16) = v38;
          MEMORY[0x22076D160](v38, v127);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v129 = swift_allocObject();
      swift_weakInit();
      v349 = v129;
      *(_QWORD *)(v129 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      v130 = String.init(cString:)();
      v132 = v131;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v133 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_138;
      swift_bridgeObjectRetain();
      v134 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v132);
      if ((v135 & 1) == 0)
        goto LABEL_137;
      v136 = (uint64_t *)(*(_QWORD *)(v133 + 56) + 56 * v134);
      v119 = *v136;
      v120 = v136[1];
      v138 = v136[2];
      v137 = v136[3];
      v139 = v136[4];
      v124 = v136[5];
      v125 = v136[6];
      swift_bridgeObjectRelease();
      goto LABEL_139;
    case 64:
      v40 = *(_QWORD *)a2;
      v41 = *(_QWORD *)(a2 + 8);
      v42 = *(_QWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v358 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v140 = specialized static Entity.entityInfoType(_:)(v40);
        if (v140)
        {
          v141 = (*(uint64_t (**)(void))(v140 + 232))();
          v142 = *(_QWORD *)(v141 + 16);
          swift_retain();
          MEMORY[0x22076D160](v142, 0);
          *(_QWORD *)(v141 + 16) = v40;
          MEMORY[0x22076D160](v40, v141);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v40);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v143 = swift_allocObject();
      swift_weakInit();
      v356 = v143;
      *(_QWORD *)(v143 + 16) = v41;
      swift_beginAccess();
      swift_weakAssign();
      if (v43 && REBindPointBoundComponent())
      {
        v144 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v145 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v146 = v145;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v254 = specialized static Entity.entityInfoType(_:)(v144);
        if (!v254)
        {
          v145 = makeEntity(for:)(v144);
          goto LABEL_77;
        }
        v146 = (*(uint64_t (**)(void))(v254 + 232))();
        v255 = *(_QWORD *)(v146 + 16);
        swift_retain();
        MEMORY[0x22076D160](v255, 0);
        *(_QWORD *)(v146 + 16) = v144;
        MEMORY[0x22076D160](v144, v146);
        swift_release();
      }
      else
      {
        v146 = 0;
      }
LABEL_79:
      v147 = String.init(cString:)();
      v149 = v148;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v150 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v151 = specialized __RawDictionaryStorage.find<A>(_:)(v147, v149);
        if ((v152 & 1) != 0)
        {
          v153 = (uint64_t *)(*(_QWORD *)(v150 + 56) + 56 * v151);
          v154 = *v153;
          v155 = v153[1];
          v156 = v153[2];
          v157 = v153[3];
          v158 = v153[4];
          v368 = v153[6];
          v371 = v153[5];
          swift_bridgeObjectRelease();
LABEL_150:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v444 = 0;
          BYTE8(v444) = 0;
          *(_QWORD *)&v445 = v42;
          *((_QWORD *)&v445 + 1) = v154;
          *(_QWORD *)&v446 = v155;
          *((_QWORD *)&v446 + 1) = v156;
          *(_QWORD *)&v447 = v157;
          *((_QWORD *)&v447 + 1) = v158;
          *(_QWORD *)&v448 = v371;
          *((_QWORD *)&v448 + 1) = v368;
          specialized ActionEventData.action<A>()((uint64_t)&v436);
          if (!v437)
            goto LABEL_173;
          v397 = v445;
          v398 = v446;
          v399 = v447;
          v400 = v448;
          v337 = v42;
          v344 = v154;
          v224 = v441;
          v225 = v439;
          v286 = v442;
          v226 = v438;
          v326 = v155;
          v227 = v146;
          v228 = v436;
          v302 = v440 >> 8;
          v376 = v437;
          v377 = v438;
          v378 = v439;
          v296 = v440 & 1;
          v379 = v440 & 0xFF01;
          v380 = v441;
          v381 = v442;
          v314 = v443 & 1;
          v382 = v443 & 0x101;
          v309 = HIBYTE(v443) & 1;
          v383 = 1;
          v374 = v356;
          v375 = v436;
          v384 = v227;
          v385 = 0;
          v386 = 0.0;
          v387 = 0.0;
          v389 = 0;
          v390 = 0.0;
          v388 = Strong;
          v391 = 1;
          v392 = 0;
          v393 = 1;
          v394 = 0;
          v395 = 1;
          v396 = v444;
          v401 = v358;
          v229 = v437;
          swift_retain();
          swift_retain();
          outlined copy of PlayAnimationAction?(v228, v229);
          swift_retain();
          a5(&v374);
          outlined consume of PlayAnimationAction?(v228, v229);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v402 = v356;
          v403 = v228;
          v404 = v229;
          v405 = v226;
          v406 = v225;
          v407 = v296;
          v408 = v302;
          v409 = v224;
          v410 = v286;
          LOBYTE(v411) = v314;
          HIBYTE(v411) = v309;
          v412 = 1;
          v413 = v227;
          v414 = 0;
          v416 = 0.0;
          v415 = 0.0;
          v419 = 0.0;
          v417 = Strong;
          v418 = 0;
          v420 = 1;
          v421 = 0;
          v422 = 1;
          v423 = 0;
          v424 = 1;
          v425 = 0;
          v426 = 0;
          v427 = v337;
          v428 = v344;
          v429 = v326;
          v430 = v156;
          v431 = v157;
          v230 = v158;
LABEL_170:
          v432 = v230;
          v433 = v371;
          v223 = v368;
          goto LABEL_171;
        }
        swift_bridgeObjectRelease();
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v368 = 0;
      v371 = 0;
      goto LABEL_150;
    default:
      if (a4 != 128)
        goto LABEL_174;
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 40);
      v358 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v231 = specialized static Entity.entityInfoType(_:)(v14);
        if (v231)
        {
          v232 = (*(uint64_t (**)(void))(v231 + 232))();
          v233 = *(_QWORD *)(v232 + 16);
          swift_retain();
          MEMORY[0x22076D160](v233, 0);
          *(_QWORD *)(v232 + 16) = v14;
          MEMORY[0x22076D160](v14, v232);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v234 = swift_allocObject();
      swift_weakInit();
      v357 = v234;
      *(_QWORD *)(v234 + 16) = v15;
      swift_beginAccess();
      swift_weakAssign();
      if (v17 && REBindPointBoundComponent())
      {
        v235 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v236 = swift_dynamicCastClassUnconditional();
LABEL_159:
          v237 = v236;
          goto LABEL_161;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          JUMPOUT(0x21BB655E0);
        }
        v269 = specialized static Entity.entityInfoType(_:)(v235);
        if (!v269)
        {
          v236 = makeEntity(for:)(v235);
          goto LABEL_159;
        }
        v237 = (*(uint64_t (**)(void))(v269 + 232))();
        v270 = *(_QWORD *)(v237 + 16);
        swift_retain();
        MEMORY[0x22076D160](v270, 0);
        *(_QWORD *)(v237 + 16) = v235;
        MEMORY[0x22076D160](v235, v237);
        swift_release();
      }
      else
      {
        v237 = 0;
      }
LABEL_161:
      v238 = String.init(cString:)();
      v240 = v239;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v241 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v242 = specialized __RawDictionaryStorage.find<A>(_:)(v238, v240);
        if ((v243 & 1) != 0)
        {
          v244 = (uint64_t *)(*(_QWORD *)(v241 + 56) + 56 * v242);
          v245 = *v244;
          v246 = v244[1];
          v247 = v244[2];
          v248 = v244[3];
          v249 = v244[4];
          v368 = v244[6];
          v371 = v244[5];
          swift_bridgeObjectRelease();
LABEL_168:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v444 = 0;
          BYTE8(v444) = 0;
          *(_QWORD *)&v445 = v16;
          *((_QWORD *)&v445 + 1) = v245;
          *(_QWORD *)&v446 = v246;
          *((_QWORD *)&v446 + 1) = v247;
          *(_QWORD *)&v447 = v248;
          *((_QWORD *)&v447 + 1) = v249;
          *(_QWORD *)&v448 = v371;
          *((_QWORD *)&v448 + 1) = v368;
          specialized ActionEventData.action<A>()((uint64_t)&v436);
          if (!v437)
            goto LABEL_173;
          v397 = v445;
          v398 = v446;
          v399 = v447;
          v400 = v448;
          v331 = v16;
          v338 = v245;
          v350 = v442;
          v250 = v441;
          v282 = v438;
          v251 = v436;
          v297 = v440 >> 8;
          v376 = v437;
          v377 = v438;
          v378 = v439;
          v252 = v439;
          v291 = v440 & 1;
          v379 = v440 & 0xFF01;
          v380 = v441;
          v381 = v442;
          v310 = v443 & 1;
          v382 = v443 & 0x101;
          v303 = HIBYTE(v443) & 1;
          v383 = 1;
          v374 = v357;
          v375 = v436;
          v384 = v237;
          v385 = 0;
          v386 = 0.0;
          v387 = 0.0;
          v389 = 0;
          v390 = 0.0;
          v388 = Strong;
          v391 = 1;
          v392 = 0;
          v393 = 1;
          v394 = 0;
          v395 = 1;
          v396 = v444;
          v401 = v358;
          v253 = v437;
          swift_retain();
          swift_retain();
          outlined copy of PlayAnimationAction?(v251, v253);
          swift_retain();
          a5(&v374);
          swift_release();
          outlined consume of PlayAnimationAction?(v251, v253);
          swift_release();
          swift_release();
          swift_release();
          v402 = v357;
          v403 = v251;
          v404 = v253;
          v405 = v282;
          v406 = v252;
          v407 = v291;
          v408 = v297;
          v409 = v250;
          v410 = v350;
          LOBYTE(v411) = v310;
          HIBYTE(v411) = v303;
          v412 = 1;
          v413 = v237;
          v414 = 0;
          v416 = 0.0;
          v415 = 0.0;
          v419 = 0.0;
          v417 = Strong;
          v418 = 0;
          v420 = 1;
          v421 = 0;
          v422 = 1;
          v423 = 0;
          v424 = 1;
          v425 = 0;
          v426 = 0;
          v427 = v331;
          v428 = v338;
          v429 = v246;
          v430 = v247;
          v431 = v248;
          v230 = v249;
          goto LABEL_170;
        }
        swift_bridgeObjectRelease();
      }
      v245 = 0;
      v246 = 0;
      v247 = 0;
      v248 = 0;
      v249 = 0;
      v368 = 0;
      v371 = 0;
      goto LABEL_168;
  }
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t Entity;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  double v152;
  double v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  double v164;
  double v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  double v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  double v190;
  double v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  char v267;
  char v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  char v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char v350;
  char v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t Strong;
  _QWORD v402[2];
  uint64_t v403;
  uint64_t v404;
  char v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char v414;
  char v415;
  uint64_t v416;
  char v417;
  double v418;
  double v419;
  uint64_t v420;
  uint64_t v421;
  double v422;
  char v423;
  unint64_t v424;
  char v425;
  unint64_t v426;
  char v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  char v447;
  uint64_t v448;
  char v449;
  double v450;
  double v451;
  uint64_t v452;
  uint64_t v453;
  double v454;
  char v455;
  unint64_t v456;
  char v457;
  unint64_t v458;
  char v459;
  uint64_t v460;
  char v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v388 = *(_QWORD *)(a2 + 32);
      v394 = *(_QWORD *)(a2 + 40);
      v346 = *(_QWORD *)(a2 + 48);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v350 = *(_BYTE *)(a2 + 80);
      v355 = *(_QWORD *)(a2 + 88);
      v362 = *(_QWORD *)(a2 + 96);
      v365 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_213;
      }
      v40 = specialized static Entity.entityInfoType(_:)(v7);
      if (v40)
      {
        v41 = (*(uint64_t (**)(void))(v40 + 232))();
        v42 = *(_QWORD *)(v41 + 16);
        swift_retain();
        MEMORY[0x22076D160](v42, 0);
        *(_QWORD *)(v41 + 16) = v7;
        MEMORY[0x22076D160](v7, v41);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v7);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v43 = swift_allocObject();
      swift_weakInit();
      v373 = v43;
      *(_QWORD *)(v43 + 16) = v8;
      swift_beginAccess();
      swift_weakAssign();
      v44 = String.init(cString:)();
      v46 = v45;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v47 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_80;
      swift_bridgeObjectRetain();
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v46);
      if ((v49 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_80:
        v52 = 0;
        v51 = 0;
        v53 = 0;
        v54 = 0;
        v381 = 0;
        v385 = 0;
        v55 = 0;
        goto LABEL_81;
      }
      v50 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 56 * v48);
      v52 = *v50;
      v51 = v50[1];
      v53 = v50[2];
      v54 = v50[3];
      v55 = v50[6];
      v381 = v50[5];
      v385 = v50[4];
      swift_bridgeObjectRelease();
LABEL_81:
      v291 = v54;
      v296 = v55;
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = v388;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v394;
      *((_QWORD *)&v484 + 1) = v52;
      *(_QWORD *)&v485 = v51;
      *((_QWORD *)&v485 + 1) = v53;
      *(_QWORD *)&v486 = v54;
      *((_QWORD *)&v486 + 1) = v385;
      *(_QWORD *)&v487 = v381;
      *((_QWORD *)&v487 + 1) = v55;
      v305 = v51;
      v308 = v52;
      v301 = v53;
      if (!v9 || !REBindPointBoundComponent())
      {
        v334 = 0;
        goto LABEL_87;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v144 = swift_dynamicCastClassUnconditional();
LABEL_85:
        v334 = v144;
        goto LABEL_87;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_221;
      v232 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v232)
      {
        v144 = makeEntity(for:)(Entity);
        goto LABEL_85;
      }
      v233 = (*(uint64_t (**)(void))(v232 + 232))();
      v234 = *(_QWORD *)(v233 + 16);
      swift_retain();
      MEMORY[0x22076D160](v234, 0);
      *(_QWORD *)(v233 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v233);
      v334 = v233;
      swift_release();
LABEL_87:
      specialized ActionEventData.action<A>()((uint64_t)&v471);
      v285 = v475;
      if (!v475)
        goto LABEL_202;
      v274 = v482;
      v322 = v480;
      v328 = v481;
      v145 = v479;
      v146 = v478;
      v147 = v476;
      v148 = v474;
      v311 = v477;
      v317 = v473;
      v149 = v472;
      v150 = v471;
      v269 = v471;
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v150, v149, v317, v148, v285);
      v151 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Transform>>);
      v431 = v486;
      v432 = v487;
      v429 = v484;
      v430 = v485;
      v152 = v10;
      v153 = v11;
      v404 = v149;
      v405 = v317 & 1;
      v406 = v148;
      v407 = v285;
      v408 = v147;
      v409 = v311;
      v410 = v146;
      v411 = v145;
      v412 = v322;
      v413 = v328;
      v414 = v274 & 1;
      v266 = v151 & 1;
      v415 = v151 & 1;
      v403 = v269;
      v402[0] = v373;
      v416 = v334;
      v417 = v350;
      v418 = v152;
      v419 = v153;
      v420 = Strong;
      v421 = v365;
      v422 = -1.0;
      v423 = 0;
      v424 = v355;
      v425 = 0;
      v426 = v362;
      v427 = 0;
      v428 = v483;
      v433 = v346;
      swift_retain();
      swift_retain();
      a5(v402);
      outlined consume of SetEntityPropertyAction<Transform>?(v269, v149, v317, v148, v285);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v434 = v373;
      v435 = v269;
      v436 = v149;
      v437 = v317 & 1;
      v438 = v148;
      v439 = v285;
      v440 = v147;
      v441 = v311;
      v442 = v146;
      v443 = v145;
      v444 = v322;
      v445 = v328;
      v446 = v274 & 1;
      v447 = v266;
      v448 = v334;
      v449 = v350;
      v450 = v152;
      v451 = v153;
      v452 = Strong;
      v453 = v365;
      v454 = -1.0;
      v455 = 0;
      v154 = v355;
LABEL_100:
      v456 = v154;
      v457 = 0;
      v458 = v362;
      v459 = 0;
      v460 = v388;
      v461 = 0;
      v462 = v394;
      v463 = v308;
      v464 = v305;
      v465 = v301;
      v466 = v291;
      v467 = v385;
      v468 = v381;
      v469 = v296;
      v167 = v346;
LABEL_165:
      v470 = v167;
      outlined release of ActionEvent<SetEntityPropertyAction<Transform>>((uint64_t)&v434);
      return 0;
    case 2:
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v388 = *(_QWORD *)(a2 + 32);
      v394 = *(_QWORD *)(a2 + 40);
      v19 = *(float *)(a2 + 56);
      v362 = *(_QWORD *)(a2 + 64);
      v366 = *(_QWORD *)(a2 + 48);
      v356 = *(_QWORD *)(a2 + 72);
      v20 = *(_QWORD *)(a2 + 88);
      v346 = *(_QWORD *)(a2 + 80);
      v21 = *(float *)(a2 + 96);
      v22 = *(float *)(a2 + 100);
      v351 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v56 = specialized static Entity.entityInfoType(_:)(v17);
        if (v56)
        {
          v57 = (*(uint64_t (**)(void))(v56 + 232))();
          v58 = *(_QWORD *)(v57 + 16);
          swift_retain();
          MEMORY[0x22076D160](v58, 0);
          *(_QWORD *)(v57 + 16) = v17;
          MEMORY[0x22076D160](v17, v57);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v17);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v59 = swift_allocObject();
      swift_weakInit();
      v374 = v59;
      *(_QWORD *)(v59 + 16) = v18;
      swift_beginAccess();
      swift_weakAssign();
      v60 = String.init(cString:)();
      v62 = v61;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v63 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_91;
      swift_bridgeObjectRetain();
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v62);
      if ((v65 & 1) != 0)
      {
        v66 = (uint64_t *)(*(_QWORD *)(v63 + 56) + 56 * v64);
        v68 = *v66;
        v67 = v66[1];
        v69 = v66[2];
        v70 = v66[3];
        v71 = v66[6];
        v381 = v66[5];
        v385 = v66[4];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_91:
        v68 = 0;
        v67 = 0;
        v69 = 0;
        v70 = 0;
        v381 = 0;
        v385 = 0;
        v71 = 0;
      }
      v291 = v70;
      v296 = v71;
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = v388;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v394;
      *((_QWORD *)&v484 + 1) = v68;
      *(_QWORD *)&v485 = v67;
      *((_QWORD *)&v485 + 1) = v69;
      *(_QWORD *)&v486 = v70;
      *((_QWORD *)&v486 + 1) = v385;
      *(_QWORD *)&v487 = v381;
      *((_QWORD *)&v487 + 1) = v71;
      v305 = v67;
      v308 = v68;
      v301 = v69;
      if (v20 && REBindPointBoundComponent())
      {
        v155 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v156 = swift_dynamicCastClassUnconditional();
LABEL_96:
          v335 = v156;
          goto LABEL_98;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v235 = specialized static Entity.entityInfoType(_:)(v155);
        if (!v235)
        {
          v156 = makeEntity(for:)(v155);
          goto LABEL_96;
        }
        v236 = (*(uint64_t (**)(void))(v235 + 232))();
        v237 = *(_QWORD *)(v236 + 16);
        swift_retain();
        MEMORY[0x22076D160](v237, 0);
        *(_QWORD *)(v236 + 16) = v155;
        MEMORY[0x22076D160](v155, v236);
        v335 = v236;
        swift_release();
      }
      else
      {
        v335 = 0;
      }
LABEL_98:
      specialized ActionEventData.action<A>()((uint64_t)&v471);
      v286 = v475;
      if (v475)
      {
        v270 = v482;
        v323 = v481;
        v329 = v480;
        v157 = v479;
        v158 = v478;
        v159 = v476;
        v160 = v474;
        v312 = v477;
        v318 = v473;
        v161 = v472;
        v162 = v471;
        v275 = v471;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v162, v161, v318, v160, v286);
        v163 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Transform>>);
        v431 = v486;
        v432 = v487;
        v429 = v484;
        v430 = v485;
        v164 = v21;
        v165 = v22;
        v166 = v19;
        v404 = v161;
        v405 = v318 & 1;
        v406 = v160;
        v407 = v286;
        v408 = v159;
        v409 = v312;
        v410 = v158;
        v411 = v157;
        v412 = v329;
        v413 = v323;
        v414 = v270 & 1;
        v267 = v163 & 1;
        v415 = v163 & 1;
        v403 = v275;
        v402[0] = v374;
        v416 = v335;
        v417 = v351;
        v418 = v164;
        v419 = v165;
        v420 = Strong;
        v421 = v356;
        v422 = v166;
        v423 = 0;
        v424 = v366;
        v425 = 0;
        v426 = v362;
        v427 = 0;
        v428 = v483;
        v433 = v346;
        swift_retain();
        swift_retain();
        a5(v402);
        outlined consume of SetEntityPropertyAction<Transform>?(v275, v161, v318, v160, v286);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v434 = v374;
        v435 = v275;
        v436 = v161;
        v437 = v318 & 1;
        v438 = v160;
        v439 = v286;
        v440 = v159;
        v441 = v312;
        v442 = v158;
        v443 = v157;
        v444 = v329;
        v445 = v323;
        v446 = v270 & 1;
        v447 = v267;
        v448 = v335;
        v449 = v351;
        v450 = v164;
        v451 = v165;
        v452 = Strong;
        v453 = v356;
        v454 = v166;
        v455 = 0;
        v154 = v366;
        goto LABEL_100;
      }
LABEL_202:
      swift_release();
      swift_release();
      swift_release();
LABEL_203:
      swift_release();
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_203;
    case 4:
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      v378 = *(_QWORD *)(a2 + 32);
      v383 = *(_QWORD *)(a2 + 40);
      v25 = *(_QWORD *)(a2 + 64);
      v357 = *(_QWORD *)(a2 + 56);
      v363 = *(_QWORD *)(a2 + 48);
      v26 = *(float *)(a2 + 72);
      v27 = *(float *)(a2 + 76);
      v352 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v72 = specialized static Entity.entityInfoType(_:)(v23);
        if (v72)
        {
          v73 = (*(uint64_t (**)(void))(v72 + 232))();
          v74 = *(_QWORD *)(v73 + 16);
          swift_retain();
          MEMORY[0x22076D160](v74, 0);
          *(_QWORD *)(v73 + 16) = v23;
          MEMORY[0x22076D160](v23, v73);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v23);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v75 = swift_allocObject();
      swift_weakInit();
      v397 = v75;
      *(_QWORD *)(v75 + 16) = v24;
      swift_beginAccess();
      swift_weakAssign();
      v76 = String.init(cString:)();
      v78 = v77;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v79 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_103;
      swift_bridgeObjectRetain();
      v80 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v78);
      if ((v81 & 1) != 0)
      {
        v82 = (uint64_t *)(*(_QWORD *)(v79 + 56) + 56 * v80);
        v84 = *v82;
        v83 = v82[1];
        v85 = v82[2];
        v86 = v82[3];
        v87 = v82[6];
        v368 = v82[4];
        v375 = v82[5];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_103:
        v84 = 0;
        v83 = 0;
        v85 = 0;
        v86 = 0;
        v368 = 0;
        v375 = 0;
        v87 = 0;
      }
      v309 = v87;
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = v378;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v383;
      *((_QWORD *)&v484 + 1) = v84;
      *(_QWORD *)&v485 = v83;
      *((_QWORD *)&v485 + 1) = v85;
      *(_QWORD *)&v486 = v86;
      *((_QWORD *)&v486 + 1) = v368;
      *(_QWORD *)&v487 = v375;
      *((_QWORD *)&v487 + 1) = v87;
      v168 = v86;
      v319 = v83;
      v313 = v85;
      if (v25 && REBindPointBoundComponent())
      {
        v169 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v170 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_223:
            __break(1u);
            goto LABEL_224;
          }
          v238 = specialized static Entity.entityInfoType(_:)(v169);
          if (v238)
          {
            v239 = (*(uint64_t (**)(void))(v238 + 232))();
            v240 = *(_QWORD *)(v239 + 16);
            swift_retain();
            MEMORY[0x22076D160](v240, 0);
            *(_QWORD *)(v239 + 16) = v169;
            MEMORY[0x22076D160](v169, v239);
            v391 = v239;
            swift_release();
            goto LABEL_110;
          }
          v170 = makeEntity(for:)(v169);
        }
        v391 = v170;
      }
      else
      {
        v391 = 0;
      }
LABEL_110:
      specialized ActionEventData.action<A>()((uint64_t)&v471);
      v306 = v475;
      if (!v475)
        goto LABEL_202;
      v287 = v482;
      v336 = v481;
      v341 = v480;
      v171 = v479;
      v172 = v478;
      v330 = v477;
      v297 = v168;
      v173 = v476;
      v174 = v474;
      v265 = v473;
      v175 = v472;
      v176 = v471;
      v292 = v471;
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v176, v175, v265, v174, v306);
      v177 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Transform>>);
      v431 = v486;
      v432 = v487;
      v429 = v484;
      v430 = v485;
      v178 = v26;
      v179 = v27;
      v404 = v175;
      v405 = v265 & 1;
      v406 = v174;
      v407 = v306;
      v408 = v173;
      v409 = v330;
      v410 = v172;
      v411 = v171;
      v412 = v341;
      v413 = v336;
      v414 = v287 & 1;
      v276 = v177 & 1;
      v415 = v177 & 1;
      v403 = v292;
      v402[0] = v397;
      v416 = v391;
      v417 = v352;
      v418 = v178;
      v419 = v179;
      v420 = Strong;
      v421 = v357;
      v422 = -1.0;
      v423 = 0;
      v424 = 0xBFF0000000000000;
      v425 = 0;
      v426 = 0xBFF0000000000000;
      v427 = 0;
      v428 = v483;
      v433 = v363;
      swift_retain();
      swift_retain();
      a5(v402);
      outlined consume of SetEntityPropertyAction<Transform>?(v292, v175, v265, v174, v306);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v434 = v397;
      v435 = v292;
      v436 = v175;
      v437 = v265 & 1;
      v438 = v174;
      v439 = v306;
      v440 = v173;
      v441 = v330;
      v442 = v172;
      v443 = v171;
      v444 = v341;
      v445 = v336;
      v446 = v287 & 1;
      v447 = v276;
      v448 = v391;
      v449 = v352;
      v450 = v178;
      v451 = v179;
      v452 = Strong;
      v453 = v357;
      v454 = -1.0;
      v455 = 0;
      v456 = 0xBFF0000000000000;
      v457 = 0;
      v458 = 0xBFF0000000000000;
      v459 = 0;
      v460 = v378;
      v461 = 0;
      v462 = v383;
      v463 = v84;
      v464 = v319;
      v465 = v313;
      v466 = v297;
      v467 = v368;
      v468 = v375;
      v180 = v309;
      goto LABEL_123;
    case 8:
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v389 = *(_QWORD *)(a2 + 32);
      v395 = *(_QWORD *)(a2 + 40);
      v363 = *(_QWORD *)(a2 + 48);
      v30 = *(float *)(a2 + 64);
      v31 = *(float *)(a2 + 68);
      v367 = *(_BYTE *)(a2 + 72);
      v372 = *(_QWORD *)(a2 + 80);
      v379 = *(_QWORD *)(a2 + 88);
      v358 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v88 = specialized static Entity.entityInfoType(_:)(v28);
        if (v88)
        {
          v89 = (*(uint64_t (**)(void))(v88 + 232))();
          v90 = *(_QWORD *)(v89 + 16);
          swift_retain();
          MEMORY[0x22076D160](v90, 0);
          *(_QWORD *)(v89 + 16) = v28;
          MEMORY[0x22076D160](v28, v89);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v28);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v91 = swift_allocObject();
      swift_weakInit();
      v386 = v91;
      *(_QWORD *)(v91 + 16) = v29;
      swift_beginAccess();
      swift_weakAssign();
      v92 = String.init(cString:)();
      v94 = v93;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v95 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_114;
      swift_bridgeObjectRetain();
      v96 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v94);
      if ((v97 & 1) != 0)
      {
        v98 = (uint64_t *)(*(_QWORD *)(v95 + 56) + 56 * v96);
        v100 = *v98;
        v99 = v98[1];
        v101 = v98[2];
        v102 = v98[3];
        v104 = v98[4];
        v103 = v98[5];
        v105 = v98[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_114:
        v100 = 0;
        v99 = 0;
        v101 = 0;
        v102 = 0;
        v104 = 0;
        v103 = 0;
        v105 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = v389;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v395;
      *((_QWORD *)&v484 + 1) = v100;
      *(_QWORD *)&v485 = v99;
      *((_QWORD *)&v485 + 1) = v101;
      *(_QWORD *)&v486 = v102;
      *((_QWORD *)&v486 + 1) = v104;
      *(_QWORD *)&v487 = v103;
      *((_QWORD *)&v487 + 1) = v105;
      v181 = v102;
      v314 = v99;
      v310 = v101;
      if (v358 && REBindPointBoundComponent())
      {
        v182 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v183 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_224:
            __break(1u);
            goto LABEL_225;
          }
          v241 = specialized static Entity.entityInfoType(_:)(v182);
          if (v241)
          {
            v242 = (*(uint64_t (**)(void))(v241 + 232))();
            v243 = *(_QWORD *)(v242 + 16);
            swift_retain();
            MEMORY[0x22076D160](v243, 0);
            *(_QWORD *)(v242 + 16) = v182;
            MEMORY[0x22076D160](v182, v242);
            v359 = v242;
            swift_release();
            goto LABEL_121;
          }
          v183 = makeEntity(for:)(v182);
        }
        v359 = v183;
      }
      else
      {
        v359 = 0;
      }
LABEL_121:
      specialized ActionEventData.action<A>()((uint64_t)&v471);
      v302 = v475;
      if (!v475)
        goto LABEL_202;
      v277 = v482;
      v342 = v480;
      v347 = v481;
      v281 = v181;
      v288 = v103;
      v184 = v478;
      v331 = v477;
      v337 = v479;
      v185 = v476;
      v298 = v105;
      v186 = v474;
      v324 = v473;
      v187 = v472;
      v188 = v471;
      v271 = v471;
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v188, v187, v324, v186, v302);
      v189 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Transform>>);
      v431 = v486;
      v432 = v487;
      v429 = v484;
      v430 = v485;
      v190 = v30;
      v191 = v31;
      v404 = v187;
      v405 = v324 & 1;
      v406 = v186;
      v407 = v302;
      v408 = v185;
      v409 = v331;
      v410 = v184;
      v411 = v337;
      v412 = v342;
      v413 = v347;
      v414 = v277 & 1;
      v268 = v189 & 1;
      v415 = v189 & 1;
      v403 = v271;
      v402[0] = v386;
      v416 = v359;
      v417 = v367;
      v418 = v190;
      v419 = v191;
      v421 = 0;
      v422 = 0.0;
      v420 = Strong;
      v423 = 1;
      v424 = v372;
      v425 = 0;
      v426 = v379;
      v427 = 0;
      v428 = v483;
      v433 = v363;
      swift_retain();
      swift_retain();
      a5(v402);
      outlined consume of SetEntityPropertyAction<Transform>?(v271, v187, v324, v186, v302);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v434 = v386;
      v435 = v271;
      v436 = v187;
      v437 = v324 & 1;
      v438 = v186;
      v439 = v302;
      v440 = v185;
      v441 = v331;
      v442 = v184;
      v443 = v337;
      v444 = v342;
      v445 = v347;
      v446 = v277 & 1;
      v447 = v268;
      v448 = v359;
      v449 = v367;
      v450 = v190;
      v451 = v191;
      v454 = 0.0;
      v452 = Strong;
      v453 = 0;
      v455 = 1;
      v456 = v372;
      v457 = 0;
      v458 = v379;
      v459 = 0;
      v460 = v389;
      v461 = 0;
      v462 = v395;
      v463 = v100;
      v464 = v314;
      v465 = v310;
      v466 = v281;
      v467 = v104;
      v468 = v288;
      v180 = v298;
LABEL_123:
      v469 = v180;
      v167 = v363;
      goto LABEL_165;
    case 16:
      v32 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v390 = *(_QWORD *)(a2 + 32);
      v396 = *(_QWORD *)(a2 + 40);
      v384 = *(_QWORD *)(a2 + 48);
      v380 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v106 = specialized static Entity.entityInfoType(_:)(v32);
        if (v106)
        {
          v107 = (*(uint64_t (**)(void))(v106 + 232))();
          v108 = *(_QWORD *)(v107 + 16);
          swift_retain();
          MEMORY[0x22076D160](v108, 0);
          *(_QWORD *)(v107 + 16) = v32;
          MEMORY[0x22076D160](v32, v107);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v32);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v109 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v109 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v110 = String.init(cString:)();
      v112 = v111;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v113 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_126;
      swift_bridgeObjectRetain();
      v114 = specialized __RawDictionaryStorage.find<A>(_:)(v110, v112);
      if ((v115 & 1) != 0)
      {
        v116 = (uint64_t *)(*(_QWORD *)(v113 + 56) + 56 * v114);
        v117 = *v116;
        v118 = v116[1];
        v120 = v116[2];
        v119 = v116[3];
        v121 = v116[4];
        v122 = v116[5];
        v123 = v116[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_126:
        v117 = 0;
        v118 = 0;
        v120 = 0;
        v119 = 0;
        v121 = 0;
        v122 = 0;
        v123 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = 0;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v396;
      *((_QWORD *)&v484 + 1) = v117;
      *(_QWORD *)&v485 = v118;
      *((_QWORD *)&v485 + 1) = v120;
      *(_QWORD *)&v486 = v119;
      *((_QWORD *)&v486 + 1) = v121;
      *(_QWORD *)&v487 = v122;
      *((_QWORD *)&v487 + 1) = v123;
      v353 = v121;
      v360 = v119;
      if (!v380 || !REBindPointBoundComponent())
        goto LABEL_139;
      v192 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_137;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_180;
      __break(1u);
LABEL_132:
      swift_bridgeObjectRelease();
LABEL_133:
      v117 = 0;
      v118 = 0;
      v120 = 0;
      v134 = 0;
      v135 = 0;
      v122 = 0;
      v123 = 0;
LABEL_134:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = 0;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v396;
      *((_QWORD *)&v484 + 1) = v117;
      *(_QWORD *)&v485 = v118;
      *((_QWORD *)&v485 + 1) = v120;
      *(_QWORD *)&v486 = v134;
      *((_QWORD *)&v486 + 1) = v135;
      *(_QWORD *)&v487 = v122;
      *((_QWORD *)&v487 + 1) = v123;
      v353 = v135;
      v360 = v134;
      if (v380 && REBindPointBoundComponent())
      {
        v192 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_137:
          type metadata accessor for Entity();
          v193 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_225:
            __break(1u);
            goto LABEL_226;
          }
LABEL_180:
          v244 = specialized static Entity.entityInfoType(_:)(v192);
          if (v244)
          {
            v194 = (*(uint64_t (**)(void))(v244 + 232))();
            v245 = *(_QWORD *)(v194 + 16);
            swift_retain();
            MEMORY[0x22076D160](v245, 0);
            *(_QWORD *)(v194 + 16) = v192;
            MEMORY[0x22076D160](v192, v194);
            swift_release();
            goto LABEL_140;
          }
          v193 = makeEntity(for:)(v192);
        }
        v194 = v193;
      }
      else
      {
LABEL_139:
        v194 = 0;
      }
LABEL_140:
      specialized ActionEventData.action<A>()((uint64_t)&v471);
      if (!v475)
        goto LABEL_202;
      v431 = v486;
      v432 = v487;
      v429 = v484;
      v430 = v485;
      v343 = v118;
      v195 = v481;
      v364 = v479;
      v369 = v480;
      v382 = v194;
      v293 = v476;
      v299 = v477;
      v332 = v117;
      v338 = v123;
      v196 = v109;
      v325 = v120;
      v197 = v471;
      v404 = v472;
      v198 = v472;
      v199 = v473;
      v278 = v473;
      v315 = v473 & 1;
      v405 = v473 & 1;
      v406 = v474;
      v407 = v475;
      v200 = v474;
      v408 = v476;
      v409 = v477;
      v410 = v478;
      v411 = v479;
      v201 = v478;
      v412 = v480;
      v413 = v481;
      v320 = v482 & 1;
      v414 = v482 & 1;
      v415 = 1;
      v403 = v471;
      v282 = v471;
      v402[0] = v196;
      v416 = v194;
      v417 = 0;
      v418 = 0.0;
      v419 = 0.0;
      v421 = 0;
      v422 = 0.0;
      v420 = Strong;
      v423 = 1;
      v424 = v390;
      v425 = 0;
      v426 = 0;
      v427 = 1;
      v428 = v483;
      v433 = v384;
      v202 = v475;
      v272 = v475;
      swift_retain();
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v197, v198, v199, v200, v202);
      swift_retain();
      a5(v402);
      outlined consume of SetEntityPropertyAction<Transform>?(v282, v198, v278, v200, v272);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v434 = v196;
      v435 = v282;
      v436 = v198;
      v437 = v315;
      v438 = v200;
      v439 = v272;
      v440 = v293;
      v441 = v299;
      v442 = v201;
      v443 = v364;
      v444 = v369;
      v445 = v195;
      v446 = v320;
      v447 = 1;
      v448 = v382;
      v449 = 0;
      v451 = 0.0;
      v450 = 0.0;
      v454 = 0.0;
      v452 = Strong;
      v453 = 0;
      v455 = 1;
      v456 = v390;
      v457 = 0;
      v458 = 0;
      v459 = 1;
      v460 = 0;
      v461 = 0;
      v462 = v396;
      v463 = v332;
      v464 = v343;
      v465 = v325;
      v466 = v360;
      v467 = v353;
      v468 = v122;
      v203 = v338;
      goto LABEL_164;
    case 32:
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v390 = *(_QWORD *)(a2 + 32);
      v396 = *(_QWORD *)(a2 + 40);
      v384 = *(_QWORD *)(a2 + 48);
      v380 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v124 = specialized static Entity.entityInfoType(_:)(v34);
        if (v124)
        {
          v125 = (*(uint64_t (**)(void))(v124 + 232))();
          v126 = *(_QWORD *)(v125 + 16);
          swift_retain();
          MEMORY[0x22076D160](v126, 0);
          *(_QWORD *)(v125 + 16) = v34;
          MEMORY[0x22076D160](v34, v125);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v109 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v109 + 16) = v35;
      swift_beginAccess();
      swift_weakAssign();
      v127 = String.init(cString:)();
      v129 = v128;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v130 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_133;
      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v129);
      if ((v132 & 1) == 0)
        goto LABEL_132;
      v133 = (uint64_t *)(*(_QWORD *)(v130 + 56) + 56 * v131);
      v117 = *v133;
      v118 = v133[1];
      v120 = v133[2];
      v134 = v133[3];
      v135 = v133[4];
      v122 = v133[5];
      v123 = v133[6];
      swift_bridgeObjectRelease();
      goto LABEL_134;
    case 64:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v38 = *(_QWORD *)(a2 + 24);
      v39 = *(_QWORD *)(a2 + 40);
      v384 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v136 = specialized static Entity.entityInfoType(_:)(v36);
        if (v136)
        {
          v137 = (*(uint64_t (**)(void))(v136 + 232))();
          v138 = *(_QWORD *)(v137 + 16);
          swift_retain();
          MEMORY[0x22076D160](v138, 0);
          *(_QWORD *)(v137 + 16) = v36;
          MEMORY[0x22076D160](v36, v137);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v139 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v139 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      if (v39 && REBindPointBoundComponent())
      {
        v140 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v141 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v142 = v141;
          goto LABEL_155;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v211 = specialized static Entity.entityInfoType(_:)(v140);
        if (!v211)
        {
          v141 = makeEntity(for:)(v140);
          goto LABEL_77;
        }
        v142 = (*(uint64_t (**)(void))(v211 + 232))();
        v212 = *(_QWORD *)(v142 + 16);
        swift_retain();
        MEMORY[0x22076D160](v212, 0);
        *(_QWORD *)(v142 + 16) = v140;
        MEMORY[0x22076D160](v140, v142);
        swift_release();
      }
      else
      {
        v142 = 0;
      }
LABEL_155:
      v213 = String.init(cString:)();
      v215 = v214;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v216 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v217 = specialized __RawDictionaryStorage.find<A>(_:)(v213, v215);
        if ((v218 & 1) != 0)
        {
          v219 = (uint64_t *)(*(_QWORD *)(v216 + 56) + 56 * v217);
          v220 = *v219;
          v221 = v219[1];
          v222 = v219[2];
          v223 = v219[3];
          v224 = v219[4];
          v392 = v219[6];
          v398 = v219[5];
          swift_bridgeObjectRelease();
LABEL_162:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v483 = 0;
          BYTE8(v483) = 0;
          *(_QWORD *)&v484 = v38;
          *((_QWORD *)&v484 + 1) = v220;
          *(_QWORD *)&v485 = v221;
          *((_QWORD *)&v485 + 1) = v222;
          *(_QWORD *)&v486 = v223;
          *((_QWORD *)&v486 + 1) = v224;
          *(_QWORD *)&v487 = v398;
          *((_QWORD *)&v487 + 1) = v392;
          specialized ActionEventData.action<A>()((uint64_t)&v471);
          if (!v475)
            goto LABEL_202;
          v431 = v486;
          v432 = v487;
          v429 = v484;
          v430 = v485;
          v354 = v220;
          v344 = v222;
          v348 = v38;
          v316 = v477;
          v225 = v142;
          v376 = v142;
          v226 = v473;
          v300 = v476;
          v303 = v472;
          v227 = v139;
          v339 = v223;
          v228 = v471;
          v404 = v472;
          v283 = v473;
          v289 = v478;
          v326 = v473 & 1;
          v405 = v473 & 1;
          v406 = v474;
          v407 = v475;
          v229 = v474;
          v408 = v476;
          v409 = v477;
          v410 = v478;
          v411 = v479;
          v294 = v479;
          v412 = v480;
          v413 = v481;
          v370 = v480;
          v230 = v481;
          v333 = v482 & 1;
          v414 = v482 & 1;
          v415 = 1;
          v403 = v471;
          v273 = v471;
          v279 = v475;
          v402[0] = v227;
          v416 = v225;
          v417 = 0;
          v418 = 0.0;
          v419 = 0.0;
          v421 = 0;
          v422 = 0.0;
          v420 = Strong;
          v423 = 1;
          v424 = 0;
          v425 = 1;
          v426 = 0;
          v427 = 1;
          v428 = v483;
          v433 = v384;
          v231 = v475;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v228, v303, v226, v229, v231);
          swift_retain();
          a5(v402);
          outlined consume of SetEntityPropertyAction<Transform>?(v273, v303, v283, v229, v279);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v434 = v227;
          v435 = v273;
          v436 = v303;
          v437 = v326;
          v438 = v229;
          v439 = v279;
          v440 = v300;
          v441 = v316;
          v442 = v289;
          v443 = v294;
          v444 = v370;
          v445 = v230;
          v446 = v333;
          v447 = 1;
          v448 = v376;
          v449 = 0;
          v451 = 0.0;
          v450 = 0.0;
          v454 = 0.0;
          v452 = Strong;
          v453 = 0;
          v455 = 1;
          v456 = 0;
          v457 = 1;
          v458 = 0;
          v459 = 1;
          v460 = 0;
          v461 = 0;
          v462 = v348;
          v463 = v354;
          v464 = v221;
          v465 = v344;
          v466 = v339;
          v467 = v224;
          v468 = v398;
          v203 = v392;
LABEL_164:
          v469 = v203;
          v167 = v384;
          goto LABEL_165;
        }
        swift_bridgeObjectRelease();
      }
      v220 = 0;
      v221 = 0;
      v222 = 0;
      v223 = 0;
      v224 = 0;
      v392 = 0;
      v398 = 0;
      goto LABEL_162;
    default:
      if (a4 != 128)
        goto LABEL_203;
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 40);
      v377 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v204 = specialized static Entity.entityInfoType(_:)(v13);
        if (v204)
        {
          v205 = (*(uint64_t (**)(void))(v204 + 232))();
          v206 = *(_QWORD *)(v205 + 16);
          swift_retain();
          MEMORY[0x22076D160](v206, 0);
          *(_QWORD *)(v205 + 16) = v13;
          MEMORY[0x22076D160](v13, v205);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v13);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v207 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v207 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      if (v16 && REBindPointBoundComponent())
      {
        v208 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v209 = swift_dynamicCastClassUnconditional();
LABEL_150:
          v210 = v209;
          goto LABEL_193;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          JUMPOUT(0x21BB3919CLL);
        }
        v246 = specialized static Entity.entityInfoType(_:)(v208);
        if (!v246)
        {
          v209 = makeEntity(for:)(v208);
          goto LABEL_150;
        }
        v210 = (*(uint64_t (**)(void))(v246 + 232))();
        v247 = *(_QWORD *)(v210 + 16);
        swift_retain();
        MEMORY[0x22076D160](v247, 0);
        *(_QWORD *)(v210 + 16) = v208;
        MEMORY[0x22076D160](v208, v210);
        swift_release();
      }
      else
      {
        v210 = 0;
      }
LABEL_193:
      v248 = String.init(cString:)();
      v250 = v249;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v251 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v252 = specialized __RawDictionaryStorage.find<A>(_:)(v248, v250);
        if ((v253 & 1) != 0)
        {
          v254 = (uint64_t *)(*(_QWORD *)(v251 + 56) + 56 * v252);
          v255 = *v254;
          v256 = v254[1];
          v258 = v254[2];
          v257 = v254[3];
          v393 = v254[5];
          v399 = v254[4];
          v387 = v254[6];
          swift_bridgeObjectRelease();
          goto LABEL_200;
        }
        swift_bridgeObjectRelease();
      }
      v255 = 0;
      v256 = 0;
      v258 = 0;
      v257 = 0;
      v393 = 0;
      v399 = 0;
      v387 = 0;
LABEL_200:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v483 = 0;
      BYTE8(v483) = 0;
      *(_QWORD *)&v484 = v15;
      *((_QWORD *)&v484 + 1) = v255;
      *(_QWORD *)&v485 = v256;
      *((_QWORD *)&v485 + 1) = v258;
      *(_QWORD *)&v486 = v257;
      *((_QWORD *)&v486 + 1) = v399;
      *(_QWORD *)&v487 = v393;
      *((_QWORD *)&v487 + 1) = v387;
      specialized ActionEventData.action<A>()((uint64_t)&v471);
      v259 = v475;
      if (v475)
      {
        v431 = v486;
        v432 = v487;
        v429 = v484;
        v430 = v485;
        v361 = v479;
        v345 = v15;
        v349 = v255;
        v304 = v476;
        v307 = v477;
        v340 = v256;
        v260 = v473;
        v261 = v472;
        v262 = v207;
        v263 = v471;
        v404 = v472;
        v290 = v473;
        v295 = v478;
        v321 = v473 & 1;
        v405 = v473 & 1;
        v406 = v474;
        v407 = v475;
        v264 = v474;
        v408 = v476;
        v409 = v477;
        v410 = v478;
        v411 = v479;
        v412 = v480;
        v413 = v481;
        v371 = v480;
        v280 = v481;
        v327 = v482 & 1;
        v414 = v482 & 1;
        v415 = 1;
        v403 = v471;
        v402[0] = v262;
        v416 = v210;
        v417 = 0;
        v418 = 0.0;
        v419 = 0.0;
        v421 = 0;
        v422 = 0.0;
        v420 = Strong;
        v423 = 1;
        v424 = 0;
        v425 = 1;
        v426 = 0;
        v427 = 1;
        v428 = v483;
        v433 = v377;
        v284 = v475;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v263, v261, v260, v264, v259);
        swift_retain();
        a5(v402);
        swift_release();
        outlined consume of SetEntityPropertyAction<Transform>?(v263, v261, v290, v264, v284);
        swift_release();
        swift_release();
        swift_release();
        v434 = v262;
        v435 = v263;
        v436 = v261;
        v437 = v321;
        v438 = v264;
        v439 = v284;
        v440 = v304;
        v441 = v307;
        v442 = v295;
        v443 = v361;
        v444 = v371;
        v445 = v280;
        v446 = v327;
        v447 = 1;
        v448 = v210;
        v449 = 0;
        v451 = 0.0;
        v450 = 0.0;
        v454 = 0.0;
        v452 = Strong;
        v453 = 0;
        v455 = 1;
        v456 = 0;
        v457 = 1;
        v458 = 0;
        v459 = 1;
        v460 = 0;
        v461 = 0;
        v462 = v345;
        v463 = v349;
        v464 = v340;
        v465 = v258;
        v466 = v257;
        v467 = v399;
        v468 = v393;
        v469 = v387;
        v167 = v377;
        goto LABEL_165;
      }
      goto LABEL_202;
  }
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t Entity;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  double v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  double v191;
  double v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  double v197;
  double v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(_QWORD *);
  uint64_t Strong;
  _QWORD v272[2];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  char v289;
  uint64_t v290;
  char v291;
  double v292;
  double v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  char v297;
  unint64_t v298;
  char v299;
  unint64_t v300;
  char v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  char v341;
  uint64_t v342;
  char v343;
  double v344;
  double v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  char v349;
  unint64_t v350;
  char v351;
  unint64_t v352;
  char v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _OWORD v365[16];
  _BYTE v366[256];
  _BYTE v367[264];
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  v270 = a5;
  switch(a4)
  {
    case 1:
      v9 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v258 = *(_QWORD *)(a2 + 32);
      v264 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 64);
      v11 = *(float *)(a2 + 72);
      v12 = *(float *)(a2 + 76);
      v221 = *(_BYTE *)(a2 + 80);
      v224 = *(_QWORD *)(a2 + 88);
      v228 = *(_QWORD *)(a2 + 56);
      v232 = *(_QWORD *)(a2 + 96);
      v238 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v42 = specialized static Entity.entityInfoType(_:)(v9);
        if (v42)
        {
          v43 = (*(uint64_t (**)(void))(v42 + 232))();
          v44 = *(_QWORD *)(v43 + 16);
          swift_retain();
          MEMORY[0x22076D160](v44, 0);
          *(_QWORD *)(v43 + 16) = v9;
          MEMORY[0x22076D160](v9, v43);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v9);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v45 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v45 + 16) = v8;
        swift_beginAccess();
        swift_weakAssign();
        v46 = String.init(cString:)();
        v48 = v47;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v49 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
          if ((v51 & 1) != 0)
          {
            v52 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 56 * v50);
            v53 = *v52;
            v252 = v52[1];
            v54 = v52[2];
            v55 = v52[3];
            v57 = v52[4];
            v56 = v52[5];
            v58 = v52[6];
            swift_bridgeObjectRelease();
LABEL_80:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v368 = v258;
            BYTE8(v368) = 0;
            *(_QWORD *)&v369 = v264;
            *((_QWORD *)&v369 + 1) = v53;
            *(_QWORD *)&v370 = v252;
            *((_QWORD *)&v370 + 1) = v54;
            *(_QWORD *)&v371 = v55;
            *((_QWORD *)&v371 + 1) = v57;
            *(_QWORD *)&v372 = v56;
            *((_QWORD *)&v372 + 1) = v58;
            v218 = v56;
            if (!v10)
              goto LABEL_151;
            if (!REBindPointBoundComponent())
            {
              v10 = 0;
              goto LABEL_151;
            }
            v245 = v58;
            Entity = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v145 = swift_dynamicCastClassUnconditional();
              goto LABEL_84;
            }
            if ((REEntityIsBeingDestroyed() & 1) == 0)
            {
              v175 = specialized static Entity.entityInfoType(_:)(Entity);
              if (v175)
              {
                v10 = (*(uint64_t (**)(void))(v175 + 232))();
                v176 = *(_QWORD *)(v10 + 16);
                swift_retain();
                MEMORY[0x22076D160](v176, 0);
                *(_QWORD *)(v10 + 16) = Entity;
                MEMORY[0x22076D160](Entity, v10);
                swift_release();
                goto LABEL_150;
              }
              v145 = makeEntity(for:)(Entity);
LABEL_84:
              v10 = v145;
LABEL_150:
              v58 = v245;
LABEL_151:
              specialized ActionEventData.action<A>()(v365);
              outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
              outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
              if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) != 1)
              {
                outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
                swift_retain();
                outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
                v177 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Transform>>);
                v178 = v11;
                v179 = v12;
                v285 = v320;
                v286 = v321;
                v287 = v322;
                v288 = v323;
                v281 = v316;
                v282 = v317;
                v283 = v318;
                v284 = v319;
                v277 = v312;
                v278 = v313;
                v279 = v314;
                v280 = v315;
                v273 = v308;
                v274 = v309;
                v275 = v310;
                v276 = v311;
                v214 = v177 & 1;
                v289 = v177 & 1;
                v272[0] = v45;
                v290 = v10;
                v215 = v53;
                v291 = v221;
                v292 = v178;
                v293 = v179;
                v294 = Strong;
                v295 = v228;
                v297 = 0;
                v296 = -1.0;
                v250 = v58;
                v298 = v224;
                v299 = 0;
                v301 = 0;
                v304 = v370;
                v305 = v371;
                v306 = v372;
                v302 = v368;
                v303 = v369;
                v180 = v238;
                v300 = v232;
                v307 = v238;
                swift_retain();
                swift_retain();
                v270(v272);
                outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v324 = v45;
                v337 = v320;
                v338 = v321;
                v339 = v322;
                v340 = v323;
                v334 = v317;
                v335 = v318;
                v336 = v319;
                v329 = v312;
                v330 = v313;
                v331 = v314;
                v332 = v315;
                v333 = v316;
                v325 = v308;
                v326 = v309;
                v327 = v310;
                v328 = v311;
                v341 = v214;
                v342 = v10;
                v343 = v221;
                v344 = v178;
                v345 = v179;
                v346 = Strong;
                v347 = v228;
                v349 = 0;
                v348 = -1.0;
                v350 = v224;
                v351 = 0;
                v353 = 0;
                v352 = v232;
                v354 = v258;
                v355 = 0;
                v356 = v264;
                v357 = v215;
                v358 = v252;
                v359 = v54;
                v360 = v55;
                v361 = v57;
                v181 = v218;
LABEL_171:
                v362 = v181;
                v363 = v250;
                v364 = v180;
                goto LABEL_202;
              }
              goto LABEL_198;
            }
            goto LABEL_220;
          }
          swift_bridgeObjectRelease();
        }
        v53 = 0;
        v252 = 0;
        v54 = 0;
        v55 = 0;
        v57 = 0;
        v56 = 0;
        v58 = 0;
        goto LABEL_80;
      }
      __break(1u);
      goto LABEL_212;
    case 2:
      v19 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v259 = *(_QWORD *)(a2 + 40);
      v266 = *(_QWORD *)(a2 + 32);
      v20 = *(float *)(a2 + 56);
      v229 = *(_QWORD *)(a2 + 64);
      v233 = *(_QWORD *)(a2 + 48);
      v225 = *(_QWORD *)(a2 + 72);
      v21 = *(_QWORD *)(a2 + 88);
      v22 = *(float *)(a2 + 96);
      v23 = *(float *)(a2 + 100);
      v222 = *(_BYTE *)(a2 + 104);
      v239 = *(_QWORD *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      v59 = specialized static Entity.entityInfoType(_:)(v19);
      if (v59)
      {
        v60 = (*(uint64_t (**)(void))(v59 + 232))();
        v61 = *(_QWORD *)(v60 + 16);
        swift_retain();
        MEMORY[0x22076D160](v61, 0);
        *(_QWORD *)(v60 + 16) = v19;
        MEMORY[0x22076D160](v19, v60);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v19);
      }
LABEL_33:
      type metadata accessor for AnimationPlaybackController();
      v62 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v62 + 16) = v18;
      swift_beginAccess();
      swift_weakAssign();
      v63 = String.init(cString:)();
      v65 = v64;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v66 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v65);
        if ((v68 & 1) != 0)
        {
          v69 = (uint64_t *)(*(_QWORD *)(v66 + 56) + 56 * v67);
          v70 = *v69;
          v253 = v69[1];
          v71 = v69[2];
          v72 = v69[3];
          v74 = v69[4];
          v73 = v69[5];
          v75 = v69[6];
          swift_bridgeObjectRelease();
          goto LABEL_87;
        }
        swift_bridgeObjectRelease();
      }
      v70 = 0;
      v253 = 0;
      v71 = 0;
      v72 = 0;
      v74 = 0;
      v73 = 0;
      v75 = 0;
LABEL_87:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v368 = v266;
      BYTE8(v368) = 0;
      *(_QWORD *)&v369 = v259;
      *((_QWORD *)&v369 + 1) = v70;
      *(_QWORD *)&v370 = v253;
      *((_QWORD *)&v370 + 1) = v71;
      *(_QWORD *)&v371 = v72;
      *((_QWORD *)&v371 + 1) = v74;
      *(_QWORD *)&v372 = v73;
      *((_QWORD *)&v372 + 1) = v75;
      v219 = v73;
      if (!v21)
        goto LABEL_157;
      if (!REBindPointBoundComponent())
      {
        v21 = 0;
        goto LABEL_157;
      }
      v246 = v75;
      v146 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v147 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v182 = specialized static Entity.entityInfoType(_:)(v146);
        if (v182)
        {
          v21 = (*(uint64_t (**)(void))(v182 + 232))();
          v183 = *(_QWORD *)(v21 + 16);
          swift_retain();
          MEMORY[0x22076D160](v183, 0);
          *(_QWORD *)(v21 + 16) = v146;
          MEMORY[0x22076D160](v146, v21);
          swift_release();
          goto LABEL_156;
        }
        v147 = makeEntity(for:)(v146);
      }
      v21 = v147;
LABEL_156:
      v75 = v246;
LABEL_157:
      specialized ActionEventData.action<A>()(v365);
      outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) == 1)
        goto LABEL_198;
      outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      swift_retain();
      outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
      v184 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Transform>>);
      v185 = v22;
      v186 = v23;
      v187 = v20;
      v285 = v320;
      v286 = v321;
      v287 = v322;
      v288 = v323;
      v281 = v316;
      v282 = v317;
      v283 = v318;
      v284 = v319;
      v277 = v312;
      v278 = v313;
      v279 = v314;
      v280 = v315;
      v273 = v308;
      v274 = v309;
      v275 = v310;
      v276 = v311;
      v213 = v184 & 1;
      v289 = v184 & 1;
      v272[0] = v62;
      v290 = v21;
      v291 = v222;
      v292 = v185;
      v293 = v186;
      v294 = Strong;
      v295 = v225;
      v296 = v187;
      v297 = 0;
      v299 = 0;
      v298 = v233;
      v300 = v229;
      v301 = 0;
      v304 = v370;
      v305 = v371;
      v306 = v372;
      v302 = v368;
      v303 = v369;
      v307 = v239;
      swift_retain();
      swift_retain();
      v270(v272);
      outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v324 = v62;
      v337 = v320;
      v338 = v321;
      v339 = v322;
      v340 = v323;
      v334 = v317;
      v335 = v318;
      v336 = v319;
      v329 = v312;
      v330 = v313;
      v331 = v314;
      v332 = v315;
      v333 = v316;
      v325 = v308;
      v326 = v309;
      v327 = v310;
      v328 = v311;
      v341 = v213;
      v342 = v21;
      v343 = v222;
      v344 = v185;
      v345 = v186;
      v346 = Strong;
      v347 = v225;
      v348 = v187;
      v349 = 0;
      v351 = 0;
      v350 = v233;
      v352 = v229;
      v353 = 0;
      v355 = 0;
      v354 = v266;
      v356 = v259;
      v357 = v70;
      v358 = v253;
      v359 = v71;
      v360 = v72;
      v361 = v74;
      v362 = v219;
      v363 = v75;
      v364 = v239;
LABEL_202:
      outlined release of ActionEvent<FromToByAction<Transform>>((uint64_t)&v324);
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_199;
    case 4:
      v25 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      v260 = *(_QWORD *)(a2 + 32);
      v267 = *(_QWORD *)(a2 + 40);
      v26 = *(_QWORD *)(a2 + 64);
      v234 = *(_QWORD *)(a2 + 56);
      v27 = *(float *)(a2 + 72);
      v28 = *(float *)(a2 + 76);
      v230 = *(_BYTE *)(a2 + 80);
      v240 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v76 = specialized static Entity.entityInfoType(_:)(v25);
        if (v76)
        {
          v77 = (*(uint64_t (**)(void))(v76 + 232))();
          v78 = *(_QWORD *)(v77 + 16);
          swift_retain();
          MEMORY[0x22076D160](v78, 0);
          *(_QWORD *)(v77 + 16) = v25;
          MEMORY[0x22076D160](v25, v77);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v25);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v79 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v79 + 16) = v24;
      swift_beginAccess();
      swift_weakAssign();
      v80 = String.init(cString:)();
      v82 = v81;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v83 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_93;
      swift_bridgeObjectRetain();
      v84 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v82);
      if ((v85 & 1) != 0)
      {
        v86 = (uint64_t *)(*(_QWORD *)(v83 + 56) + 56 * v84);
        v88 = *v86;
        v87 = v86[1];
        v89 = v86[3];
        v254 = v86[2];
        v91 = v86[4];
        v90 = v86[5];
        v92 = v86[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_93:
        v88 = 0;
        v87 = 0;
        v254 = 0;
        v89 = 0;
        v91 = 0;
        v90 = 0;
        v92 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v368 = v260;
      BYTE8(v368) = 0;
      *(_QWORD *)&v369 = v267;
      *((_QWORD *)&v369 + 1) = v88;
      *(_QWORD *)&v370 = v87;
      *((_QWORD *)&v370 + 1) = v254;
      *(_QWORD *)&v371 = v89;
      *((_QWORD *)&v371 + 1) = v91;
      *(_QWORD *)&v372 = v90;
      *((_QWORD *)&v372 + 1) = v92;
      v227 = v90;
      if (!v26)
        goto LABEL_163;
      if (!REBindPointBoundComponent())
      {
        v26 = 0;
        goto LABEL_163;
      }
      v247 = v92;
      v148 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v149 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v188 = specialized static Entity.entityInfoType(_:)(v148);
        if (v188)
        {
          v26 = (*(uint64_t (**)(void))(v188 + 232))();
          v189 = *(_QWORD *)(v26 + 16);
          swift_retain();
          MEMORY[0x22076D160](v189, 0);
          *(_QWORD *)(v26 + 16) = v148;
          MEMORY[0x22076D160](v148, v26);
          swift_release();
          goto LABEL_162;
        }
        v149 = makeEntity(for:)(v148);
      }
      v26 = v149;
LABEL_162:
      v92 = v247;
LABEL_163:
      specialized ActionEventData.action<A>()(v365);
      outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) != 1)
      {
        outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
        swift_retain();
        outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
        v190 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Transform>>);
        v191 = v27;
        v192 = v28;
        v285 = v320;
        v286 = v321;
        v287 = v322;
        v288 = v323;
        v281 = v316;
        v282 = v317;
        v283 = v318;
        v284 = v319;
        v277 = v312;
        v278 = v313;
        v279 = v314;
        v280 = v315;
        v273 = v308;
        v274 = v309;
        v275 = v310;
        v276 = v311;
        v250 = v92;
        v193 = v190 & 1;
        v289 = v190 & 1;
        v272[0] = v79;
        v290 = v26;
        v291 = v230;
        v292 = v191;
        v293 = v192;
        v216 = v88;
        v294 = Strong;
        v295 = v234;
        v297 = 0;
        v296 = -1.0;
        v298 = 0xBFF0000000000000;
        v299 = 0;
        v301 = 0;
        v304 = v370;
        v305 = v371;
        v306 = v372;
        v302 = v368;
        v303 = v369;
        v300 = 0xBFF0000000000000;
        v180 = v240;
        v307 = v240;
        swift_retain();
        swift_retain();
        v270(v272);
        outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v324 = v79;
        v337 = v320;
        v338 = v321;
        v339 = v322;
        v340 = v323;
        v334 = v317;
        v335 = v318;
        v336 = v319;
        v329 = v312;
        v330 = v313;
        v331 = v314;
        v332 = v315;
        v333 = v316;
        v325 = v308;
        v326 = v309;
        v327 = v310;
        v328 = v311;
        v341 = v193;
        v342 = v26;
        v343 = v230;
        v344 = v191;
        v345 = v192;
        v346 = Strong;
        v347 = v234;
        v349 = 0;
        v348 = -1.0;
        v350 = 0xBFF0000000000000;
        v351 = 0;
        v353 = 0;
        v352 = 0xBFF0000000000000;
        v354 = v260;
        v355 = 0;
        v356 = v267;
        v357 = v216;
        v358 = v87;
        v359 = v254;
        v360 = v89;
        v361 = v91;
        v181 = v227;
        goto LABEL_171;
      }
LABEL_198:
      swift_release();
      swift_release();
      swift_release();
LABEL_199:
      swift_release();
      return 0;
    case 8:
      v30 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v261 = *(_QWORD *)(a2 + 32);
      v268 = *(_QWORD *)(a2 + 40);
      v31 = *(_QWORD *)(a2 + 56);
      v32 = *(float *)(a2 + 64);
      v33 = *(float *)(a2 + 68);
      v226 = *(_BYTE *)(a2 + 72);
      v231 = *(_QWORD *)(a2 + 80);
      v235 = *(_QWORD *)(a2 + 88);
      v241 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v93 = specialized static Entity.entityInfoType(_:)(v30);
        if (v93)
        {
          v94 = (*(uint64_t (**)(void))(v93 + 232))();
          v95 = *(_QWORD *)(v94 + 16);
          swift_retain();
          MEMORY[0x22076D160](v95, 0);
          *(_QWORD *)(v94 + 16) = v30;
          MEMORY[0x22076D160](v30, v94);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v30);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v96 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v96 + 16) = v29;
      swift_beginAccess();
      swift_weakAssign();
      v97 = String.init(cString:)();
      v99 = v98;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v100 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_100;
      swift_bridgeObjectRetain();
      v101 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v99);
      if ((v102 & 1) != 0)
      {
        v103 = (uint64_t *)(*(_QWORD *)(v100 + 56) + 56 * v101);
        v105 = *v103;
        v104 = v103[1];
        v106 = v103[3];
        v255 = v103[2];
        v108 = v103[4];
        v107 = v103[5];
        v109 = v103[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_100:
        v105 = 0;
        v104 = 0;
        v255 = 0;
        v106 = 0;
        v108 = 0;
        v107 = 0;
        v109 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v368 = v261;
      BYTE8(v368) = 0;
      *(_QWORD *)&v369 = v268;
      *((_QWORD *)&v369 + 1) = v105;
      *(_QWORD *)&v370 = v104;
      *((_QWORD *)&v370 + 1) = v255;
      *(_QWORD *)&v371 = v106;
      *((_QWORD *)&v371 + 1) = v108;
      *(_QWORD *)&v372 = v107;
      *((_QWORD *)&v372 + 1) = v109;
      v223 = v107;
      if (!v31)
        goto LABEL_169;
      if (!REBindPointBoundComponent())
      {
        v31 = 0;
        goto LABEL_169;
      }
      v248 = v109;
      v150 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v151 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v194 = specialized static Entity.entityInfoType(_:)(v150);
        if (v194)
        {
          v31 = (*(uint64_t (**)(void))(v194 + 232))();
          v195 = *(_QWORD *)(v31 + 16);
          swift_retain();
          MEMORY[0x22076D160](v195, 0);
          *(_QWORD *)(v31 + 16) = v150;
          MEMORY[0x22076D160](v150, v31);
          swift_release();
          goto LABEL_168;
        }
        v151 = makeEntity(for:)(v150);
      }
      v31 = v151;
LABEL_168:
      v109 = v248;
LABEL_169:
      specialized ActionEventData.action<A>()(v365);
      outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) != 1)
      {
        outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
        swift_retain();
        outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
        v196 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Transform>>);
        v197 = v32;
        v198 = v33;
        v285 = v320;
        v286 = v321;
        v287 = v322;
        v288 = v323;
        v281 = v316;
        v282 = v317;
        v283 = v318;
        v284 = v319;
        v277 = v312;
        v278 = v313;
        v279 = v314;
        v280 = v315;
        v273 = v308;
        v274 = v309;
        v275 = v310;
        v276 = v311;
        v217 = v105;
        v220 = v104;
        v199 = v196 & 1;
        v289 = v196 & 1;
        v272[0] = v96;
        v290 = v31;
        v250 = v109;
        v291 = v226;
        v292 = v197;
        v293 = v198;
        v294 = Strong;
        v295 = 0;
        v297 = 1;
        v296 = 0.0;
        v298 = v231;
        v299 = 0;
        v301 = 0;
        v304 = v370;
        v305 = v371;
        v306 = v372;
        v302 = v368;
        v303 = v369;
        v180 = v241;
        v300 = v235;
        v307 = v241;
        swift_retain();
        swift_retain();
        v270(v272);
        outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v324 = v96;
        v337 = v320;
        v338 = v321;
        v339 = v322;
        v340 = v323;
        v334 = v317;
        v335 = v318;
        v336 = v319;
        v329 = v312;
        v330 = v313;
        v331 = v314;
        v332 = v315;
        v333 = v316;
        v325 = v308;
        v326 = v309;
        v327 = v310;
        v328 = v311;
        v341 = v199;
        v342 = v31;
        v343 = v226;
        v344 = v197;
        v345 = v198;
        v346 = Strong;
        v347 = 0;
        v349 = 1;
        v348 = 0.0;
        v350 = v231;
        v351 = 0;
        v353 = 0;
        v352 = v235;
        v354 = v261;
        v355 = 0;
        v356 = v268;
        v357 = v217;
        v358 = v220;
        v359 = v255;
        v360 = v106;
        v361 = v108;
        v181 = v223;
        goto LABEL_171;
      }
      goto LABEL_198;
    case 16:
      v35 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      v242 = *(_QWORD *)(a2 + 32);
      v269 = *(_QWORD *)(a2 + 40);
      v36 = *(_QWORD *)(a2 + 56);
      v244 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v110 = specialized static Entity.entityInfoType(_:)(v35);
        if (v110)
        {
          v111 = (*(uint64_t (**)(void))(v110 + 232))();
          v112 = *(_QWORD *)(v111 + 16);
          swift_retain();
          MEMORY[0x22076D160](v112, 0);
          *(_QWORD *)(v111 + 16) = v35;
          MEMORY[0x22076D160](v35, v111);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v35);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v113 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v113 + 16) = v34;
      swift_beginAccess();
      swift_weakAssign();
      v114 = String.init(cString:)();
      v116 = v115;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v117 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_107;
      swift_bridgeObjectRetain();
      v118 = specialized __RawDictionaryStorage.find<A>(_:)(v114, v116);
      if ((v119 & 1) != 0)
      {
        v120 = (uint64_t *)(*(_QWORD *)(v117 + 56) + 56 * v118);
        v121 = *v120;
        v262 = v120[1];
        v122 = v120[2];
        v123 = v120[3];
        v125 = v120[4];
        v124 = v120[5];
        v126 = v120[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_107:
        v121 = 0;
        v262 = 0;
        v122 = 0;
        v123 = 0;
        v125 = 0;
        v124 = 0;
        v126 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v368 = 0;
      BYTE8(v368) = 0;
      *(_QWORD *)&v369 = v269;
      *((_QWORD *)&v369 + 1) = v121;
      *(_QWORD *)&v370 = v262;
      *((_QWORD *)&v370 + 1) = v122;
      *(_QWORD *)&v371 = v123;
      *((_QWORD *)&v371 + 1) = v125;
      *(_QWORD *)&v372 = v124;
      *((_QWORD *)&v372 + 1) = v126;
      v236 = v124;
      if (!v36)
        goto LABEL_176;
      if (!REBindPointBoundComponent())
        goto LABEL_120;
      v256 = v126;
      v152 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_118;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_173;
      __break(1u);
LABEL_113:
      swift_bridgeObjectRelease();
LABEL_114:
      v121 = 0;
      v262 = 0;
      v122 = 0;
      v123 = 0;
      v125 = 0;
      v137 = 0;
      v126 = 0;
LABEL_115:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v368 = 0;
      BYTE8(v368) = 0;
      *(_QWORD *)&v369 = v269;
      *((_QWORD *)&v369 + 1) = v121;
      *(_QWORD *)&v370 = v262;
      *((_QWORD *)&v370 + 1) = v122;
      *(_QWORD *)&v371 = v123;
      *((_QWORD *)&v371 + 1) = v125;
      *(_QWORD *)&v372 = v137;
      *((_QWORD *)&v372 + 1) = v126;
      v236 = v137;
      if (!v36)
        goto LABEL_176;
      if (!REBindPointBoundComponent())
      {
LABEL_120:
        v36 = 0;
        goto LABEL_176;
      }
      v256 = v126;
      v152 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
LABEL_118:
        type metadata accessor for Entity();
        v153 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
LABEL_173:
        v200 = specialized static Entity.entityInfoType(_:)(v152);
        if (v200)
        {
          v36 = (*(uint64_t (**)(void))(v200 + 232))();
          v201 = *(_QWORD *)(v36 + 16);
          swift_retain();
          MEMORY[0x22076D160](v201, 0);
          *(_QWORD *)(v36 + 16) = v152;
          MEMORY[0x22076D160](v152, v36);
          swift_release();
          goto LABEL_175;
        }
        v153 = makeEntity(for:)(v152);
      }
      v36 = v153;
LABEL_175:
      v126 = v256;
LABEL_176:
      specialized ActionEventData.action<A>()(v365);
      outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
      if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) != 1)
      {
        outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
        v285 = v320;
        v286 = v321;
        v287 = v322;
        v288 = v323;
        v281 = v316;
        v282 = v317;
        v283 = v318;
        v284 = v319;
        v277 = v312;
        v278 = v313;
        v279 = v314;
        v280 = v315;
        v273 = v308;
        v274 = v309;
        v275 = v310;
        v276 = v311;
        v289 = 1;
        v272[0] = v113;
        v290 = v36;
        v291 = 0;
        v292 = 0.0;
        v293 = 0.0;
        v294 = Strong;
        v295 = 0;
        v297 = 1;
        v296 = 0.0;
        v298 = v242;
        v299 = 0;
        v301 = 1;
        v304 = v370;
        v305 = v371;
        v306 = v372;
        v302 = v368;
        v303 = v369;
        v300 = 0;
        v307 = v244;
        swift_retain();
        swift_retain();
        outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
        swift_retain();
        v270(v272);
        outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v324 = v113;
        v337 = v320;
        v338 = v321;
        v339 = v322;
        v340 = v323;
        v334 = v317;
        v335 = v318;
        v336 = v319;
        v329 = v312;
        v330 = v313;
        v331 = v314;
        v332 = v315;
        v333 = v316;
        v325 = v308;
        v326 = v309;
        v327 = v310;
        v328 = v311;
        v341 = 1;
        v342 = v36;
        v343 = 0;
        v345 = 0.0;
        v344 = 0.0;
        v346 = Strong;
        v347 = 0;
        v349 = 1;
        v348 = 0.0;
        v350 = v242;
        v351 = 0;
        v353 = 1;
        v352 = 0;
        v354 = 0;
        v355 = 0;
        v356 = v269;
        v357 = v121;
        v358 = v262;
        v359 = v122;
        v360 = v123;
        v361 = v125;
        v362 = v236;
        v363 = v126;
        v364 = v244;
        goto LABEL_202;
      }
      goto LABEL_198;
    case 32:
      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v242 = *(_QWORD *)(a2 + 32);
      v269 = *(_QWORD *)(a2 + 40);
      v36 = *(_QWORD *)(a2 + 56);
      v244 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v127 = specialized static Entity.entityInfoType(_:)(v38);
        if (v127)
        {
          v128 = (*(uint64_t (**)(void))(v127 + 232))();
          v129 = *(_QWORD *)(v128 + 16);
          swift_retain();
          MEMORY[0x22076D160](v129, 0);
          *(_QWORD *)(v128 + 16) = v38;
          MEMORY[0x22076D160](v38, v128);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v113 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v113 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      v130 = String.init(cString:)();
      v132 = v131;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v133 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_114;
      swift_bridgeObjectRetain();
      v134 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v132);
      if ((v135 & 1) == 0)
        goto LABEL_113;
      v136 = (uint64_t *)(*(_QWORD *)(v133 + 56) + 56 * v134);
      v121 = *v136;
      v262 = v136[1];
      v122 = v136[2];
      v123 = v136[3];
      v125 = v136[4];
      v137 = v136[5];
      v126 = v136[6];
      swift_bridgeObjectRelease();
      goto LABEL_115;
    case 64:
      v40 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v265 = *(_QWORD *)(a2 + 24);
      v41 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v138 = specialized static Entity.entityInfoType(_:)(v40);
        if (v138)
        {
          v139 = (*(uint64_t (**)(void))(v138 + 232))();
          v140 = *(_QWORD *)(v139 + 16);
          swift_retain();
          MEMORY[0x22076D160](v140, 0);
          *(_QWORD *)(v139 + 16) = v40;
          MEMORY[0x22076D160](v40, v139);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v40);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v141 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v141 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      if (!v17)
        goto LABEL_138;
      if (REBindPointBoundComponent())
      {
        v142 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v143 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v17 = v143;
          goto LABEL_138;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v159 = specialized static Entity.entityInfoType(_:)(v142);
        if (!v159)
        {
          v143 = makeEntity(for:)(v142);
          goto LABEL_77;
        }
        v17 = (*(uint64_t (**)(void))(v159 + 232))();
        v160 = *(_QWORD *)(v17 + 16);
        swift_retain();
        MEMORY[0x22076D160](v160, 0);
        *(_QWORD *)(v17 + 16) = v142;
        MEMORY[0x22076D160](v142, v17);
        swift_release();
      }
      else
      {
        v17 = 0;
      }
LABEL_138:
      v161 = String.init(cString:)();
      v163 = v162;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v164 = static AnimationResource.codableActionTypeMap;
      v249 = v41;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v165 = specialized __RawDictionaryStorage.find<A>(_:)(v161, v163);
        if ((v166 & 1) != 0)
        {
          v167 = (uint64_t *)(*(_QWORD *)(v164 + 56) + 56 * v165);
          v169 = *v167;
          v168 = v167[1];
          v170 = v167[4];
          v257 = v167[3];
          v263 = v167[2];
          v171 = v167[5];
          v172 = v167[6];
          swift_bridgeObjectRelease();
LABEL_145:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v368 = 0;
          BYTE8(v368) = 0;
          *(_QWORD *)&v369 = v265;
          *((_QWORD *)&v369 + 1) = v169;
          v243 = v168;
          *(_QWORD *)&v370 = v168;
          *((_QWORD *)&v370 + 1) = v263;
          *(_QWORD *)&v371 = v257;
          *((_QWORD *)&v371 + 1) = v170;
          *(_QWORD *)&v372 = v171;
          *((_QWORD *)&v372 + 1) = v172;
          specialized ActionEventData.action<A>()(v365);
          outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
          outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
          if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) == 1)
            goto LABEL_198;
          outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
          v285 = v320;
          v286 = v321;
          v287 = v322;
          v288 = v323;
          v281 = v316;
          v282 = v317;
          v283 = v318;
          v284 = v319;
          v277 = v312;
          v278 = v313;
          v279 = v314;
          v280 = v315;
          v273 = v308;
          v274 = v309;
          v275 = v310;
          v276 = v311;
          v289 = 1;
          v272[0] = v141;
          v290 = v17;
          v291 = 0;
          v292 = 0.0;
          v293 = 0.0;
          v237 = v169;
          v173 = Strong;
          v294 = Strong;
          v295 = 0;
          v297 = 1;
          v296 = 0.0;
          v298 = 0;
          v299 = 1;
          v301 = 1;
          v304 = v370;
          v305 = v371;
          v306 = v372;
          v302 = v368;
          v303 = v369;
          v300 = 0;
          v174 = v249;
          v307 = v249;
          swift_retain();
          swift_retain();
          outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
          swift_retain();
          v270(v272);
          outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
          swift_release();
          goto LABEL_201;
        }
        swift_bridgeObjectRelease();
      }
      v169 = 0;
      v168 = 0;
      v257 = 0;
      v263 = 0;
      v170 = 0;
      v171 = 0;
      v172 = 0;
      goto LABEL_145;
    default:
      if (a4 != 128)
        goto LABEL_199;
      v15 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v265 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v154 = specialized static Entity.entityInfoType(_:)(v15);
        if (v154)
        {
          v155 = (*(uint64_t (**)(void))(v154 + 232))();
          v156 = *(_QWORD *)(v155 + 16);
          swift_retain();
          MEMORY[0x22076D160](v156, 0);
          *(_QWORD *)(v155 + 16) = v15;
          MEMORY[0x22076D160](v15, v155);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v15);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v141 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v141 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      if (!v17)
        goto LABEL_190;
      if (REBindPointBoundComponent())
      {
        v157 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v158 = swift_dynamicCastClassUnconditional();
LABEL_128:
          v17 = v158;
          goto LABEL_190;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          JUMPOUT(0x21BB4B068);
        }
        v202 = specialized static Entity.entityInfoType(_:)(v157);
        if (!v202)
        {
          v158 = makeEntity(for:)(v157);
          goto LABEL_128;
        }
        v17 = (*(uint64_t (**)(void))(v202 + 232))();
        v203 = *(_QWORD *)(v17 + 16);
        swift_retain();
        MEMORY[0x22076D160](v203, 0);
        *(_QWORD *)(v17 + 16) = v157;
        MEMORY[0x22076D160](v157, v17);
        swift_release();
      }
      else
      {
        v17 = 0;
      }
LABEL_190:
      v204 = String.init(cString:)();
      v206 = v205;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v207 = static AnimationResource.codableActionTypeMap;
      v251 = v16;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v208 = specialized __RawDictionaryStorage.find<A>(_:)(v204, v206);
        if ((v209 & 1) != 0)
        {
          v210 = (uint64_t *)(*(_QWORD *)(v207 + 56) + 56 * v208);
          v212 = *v210;
          v211 = v210[1];
          v170 = v210[4];
          v257 = v210[3];
          v263 = v210[2];
          v171 = v210[5];
          v172 = v210[6];
          swift_bridgeObjectRelease();
LABEL_197:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v368 = 0;
          BYTE8(v368) = 0;
          *(_QWORD *)&v369 = v265;
          *((_QWORD *)&v369 + 1) = v212;
          v243 = v211;
          *(_QWORD *)&v370 = v211;
          *((_QWORD *)&v370 + 1) = v263;
          *(_QWORD *)&v371 = v257;
          *((_QWORD *)&v371 + 1) = v170;
          *(_QWORD *)&v372 = v171;
          *((_QWORD *)&v372 + 1) = v172;
          specialized ActionEventData.action<A>()(v365);
          outlined init with take of Transform?((uint64_t)v365, (uint64_t)v366, &demangling cache variable for type metadata for FromToByAction<Transform>?);
          outlined init with take of Transform?((uint64_t)v366, (uint64_t)v367, &demangling cache variable for type metadata for FromToByAction<Transform>?);
          if (_s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg((uint64_t)v367) == 1)
            goto LABEL_198;
          outlined init with take of Transform?((uint64_t)v366, (uint64_t)&v308, &demangling cache variable for type metadata for FromToByAction<Transform>?);
          v285 = v320;
          v286 = v321;
          v287 = v322;
          v288 = v323;
          v281 = v316;
          v282 = v317;
          v283 = v318;
          v284 = v319;
          v277 = v312;
          v278 = v313;
          v279 = v314;
          v280 = v315;
          v273 = v308;
          v274 = v309;
          v275 = v310;
          v276 = v311;
          v289 = 1;
          v272[0] = v141;
          v290 = v17;
          v291 = 0;
          v292 = 0.0;
          v293 = 0.0;
          v237 = v212;
          v173 = Strong;
          v294 = Strong;
          v295 = 0;
          v297 = 1;
          v296 = 0.0;
          v298 = 0;
          v299 = 1;
          v301 = 1;
          v304 = v370;
          v305 = v371;
          v306 = v372;
          v302 = v368;
          v303 = v369;
          v300 = 0;
          v174 = v251;
          v307 = v251;
          swift_retain();
          swift_retain();
          outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<Transform>?);
          swift_retain();
          v270(v272);
          swift_release();
          outlined retain of FromToByAction<Transform>?((uint64_t)v366, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<Transform>?);
LABEL_201:
          swift_release();
          swift_release();
          swift_release();
          v324 = v141;
          v337 = v320;
          v338 = v321;
          v339 = v322;
          v340 = v323;
          v334 = v317;
          v335 = v318;
          v336 = v319;
          v329 = v312;
          v330 = v313;
          v331 = v314;
          v332 = v315;
          v333 = v316;
          v325 = v308;
          v326 = v309;
          v327 = v310;
          v328 = v311;
          v341 = 1;
          v342 = v17;
          v343 = 0;
          v345 = 0.0;
          v344 = 0.0;
          v346 = v173;
          v347 = 0;
          v349 = 1;
          v348 = 0.0;
          v350 = 0;
          v351 = 1;
          v353 = 1;
          v352 = 0;
          v354 = 0;
          v355 = 0;
          v356 = v265;
          v357 = v237;
          v358 = v243;
          v359 = v263;
          v360 = v257;
          v361 = v170;
          v362 = v171;
          v363 = v172;
          v364 = v174;
          goto LABEL_202;
        }
        swift_bridgeObjectRelease();
      }
      v212 = 0;
      v211 = 0;
      v257 = 0;
      v263 = 0;
      v170 = 0;
      v171 = 0;
      v172 = 0;
      goto LABEL_197;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t Entity;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned __int8 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int8 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned __int8 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned __int8 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  unsigned __int8 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  char v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  char v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t Strong;
  _QWORD v493[2];
  int v494;
  char v495;
  int v496;
  char v497;
  int v498;
  char v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  char v503;
  uint64_t v504;
  uint64_t v505;
  __int16 v506;
  char v507;
  uint64_t v508;
  uint64_t v509;
  char v510;
  uint64_t v511;
  char v512;
  double v513;
  double v514;
  uint64_t v515;
  uint64_t v516;
  double v517;
  char v518;
  unint64_t v519;
  char v520;
  unint64_t v521;
  char v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  char v531;
  int v532;
  char v533;
  int v534;
  char v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  char v539;
  uint64_t v540;
  uint64_t v541;
  __int16 v542;
  char v543;
  uint64_t v544;
  uint64_t v545;
  char v546;
  uint64_t v547;
  char v548;
  double v549;
  double v550;
  uint64_t v551;
  uint64_t v552;
  double v553;
  char v554;
  unint64_t v555;
  char v556;
  unint64_t v557;
  char v558;
  uint64_t v559;
  char v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 48);
      v479 = *(_QWORD *)(a2 + 32);
      v486 = *(_QWORD *)(a2 + 40);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v433 = *(_BYTE *)(a2 + 80);
      v439 = *(_QWORD *)(a2 + 88);
      v447 = *(_QWORD *)(a2 + 96);
      v454 = *(_QWORD *)(a2 + 56);
      v460 = *(_QWORD *)(a2 + 64);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v44 = specialized static Entity.entityInfoType(_:)(v7);
        if (v44)
        {
          v45 = (*(uint64_t (**)(void))(v44 + 232))();
          v46 = *(_QWORD *)(v45 + 16);
          swift_retain();
          MEMORY[0x22076D160](v46, 0);
          *(_QWORD *)(v45 + 16) = v7;
          MEMORY[0x22076D160](v7, v45);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v7);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v47 = swift_allocObject();
        swift_weakInit();
        v467 = v47;
        *(_QWORD *)(v47 + 16) = v8;
        swift_beginAccess();
        swift_weakAssign();
        v48 = String.init(cString:)();
        v50 = v49;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v51 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v52 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
          if ((v53 & 1) != 0)
          {
            v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 56 * v52);
            v55 = v54[1];
            v473 = *v54;
            v57 = v54[2];
            v56 = v54[3];
            v58 = v54[4];
            v59 = v54[5];
            v60 = v54[6];
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
          swift_bridgeObjectRelease();
        }
        v473 = 0;
        v55 = 0;
        v57 = 0;
        v56 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
LABEL_86:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v582 = v479;
        BYTE8(v582) = 0;
        *(_QWORD *)&v583 = v486;
        *((_QWORD *)&v583 + 1) = v473;
        *(_QWORD *)&v584 = v55;
        *((_QWORD *)&v584 + 1) = v57;
        *(_QWORD *)&v585 = v56;
        *((_QWORD *)&v585 + 1) = v58;
        *(_QWORD *)&v586 = v59;
        *((_QWORD *)&v586 + 1) = v60;
        v426 = v9;
        v404 = v59;
        v412 = v56;
        v397 = v60;
        if (!v460 || !REBindPointBoundComponent())
        {
          v464 = 0;
          goto LABEL_164;
        }
        v161 = v58;
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v163 = swift_dynamicCastClassUnconditional();
          goto LABEL_90;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v231 = specialized static Entity.entityInfoType(_:)(Entity);
          if (v231)
          {
            v232 = (*(uint64_t (**)(void))(v231 + 232))();
            v233 = *(_QWORD *)(v232 + 16);
            swift_retain();
            MEMORY[0x22076D160](v233, 0);
            *(_QWORD *)(v232 + 16) = Entity;
            MEMORY[0x22076D160](Entity, v232);
            v464 = v232;
            swift_release();
            goto LABEL_163;
          }
          v163 = makeEntity(for:)(Entity);
LABEL_90:
          v464 = v163;
LABEL_163:
          v58 = v161;
LABEL_164:
          specialized ActionEventData.action<A>()((uint64_t)&v570);
          v234 = v580;
          if (v580 != 1)
          {
            v235 = v579;
            v344 = v579;
            v352 = v581;
            v338 = v578;
            v326 = v57;
            v331 = v577;
            v236 = v576;
            v237 = v573;
            v310 = v573;
            v316 = v58;
            v238 = v571;
            v321 = v55;
            v239 = v570;
            v384 = HIDWORD(v570) & 1;
            v392 = HIDWORD(v576);
            v360 = v580;
            v368 = HIDWORD(v571) & 1;
            v297 = v571;
            v376 = HIDWORD(v572) & 1;
            v240 = v572;
            v241 = v575;
            v242 = v574;
            swift_retain();
            outlined copy of FromToByAction<Float>?(v239, v238, v240, v237, v242, v241, v236, v331, v338, v235, v234);
            v243 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Float>>);
            v526 = v585;
            v527 = v586;
            v524 = v583;
            v525 = v584;
            v494 = v239;
            v495 = v384;
            v496 = v297;
            v497 = v368;
            v498 = v240;
            v499 = v376;
            v500 = v242;
            v501 = v241;
            v502 = v236;
            v503 = v392;
            v504 = v331;
            v505 = v338;
            v506 = v344 & 0x1FF;
            v507 = BYTE2(v344) & 1;
            v508 = v360;
            v509 = v352;
            v298 = v243 & 1;
            v510 = v243 & 1;
            v493[0] = v467;
            v511 = v464;
            v512 = v433;
            v513 = v10;
            v514 = v11;
            v515 = Strong;
            v516 = v454;
            v517 = -1.0;
            v518 = 0;
            v519 = v439;
            v520 = 0;
            v521 = v447;
            v522 = 0;
            v523 = v582;
            v528 = v426;
            swift_retain();
            swift_retain();
            a5(v493);
            outlined consume of FromToByAction<Float>?(v239, v297, v240, v310, v242, v241, v236, v331, v338, v344, v360);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v529 = v467;
            v530 = v239;
            v531 = v384;
            v532 = v297;
            v533 = v368;
            v534 = v240;
            v535 = v376;
            v536 = v242;
            v537 = v241;
            v538 = v236;
            v539 = v392;
            v540 = v331;
            v541 = v338;
            v542 = v344 & 0x1FF;
            v543 = BYTE2(v344) & 1;
            v544 = v360;
            v545 = v352;
            v546 = v298;
            v547 = v464;
            v548 = v433;
            v549 = v10;
            v550 = v11;
            v551 = Strong;
            v552 = v454;
            v553 = -1.0;
            v554 = 0;
            v555 = v439;
            v556 = 0;
            v557 = v447;
            v558 = 0;
            v559 = v479;
            v560 = 0;
            v561 = v486;
            v562 = v473;
            v563 = v321;
            v564 = v326;
            v565 = v412;
            v566 = v316;
            v567 = v404;
            v568 = v397;
            v177 = v426;
            goto LABEL_197;
          }
LABEL_193:
          swift_release();
          swift_release();
          swift_release();
LABEL_194:
          swift_release();
          return 0;
        }
        goto LABEL_227;
      }
      __break(1u);
      goto LABEL_219;
    case 2:
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v480 = *(_QWORD *)(a2 + 32);
      v488 = *(_QWORD *)(a2 + 40);
      v19 = *(float *)(a2 + 56);
      v440 = *(_QWORD *)(a2 + 64);
      v448 = *(_QWORD *)(a2 + 48);
      v434 = *(_QWORD *)(a2 + 72);
      v20 = *(_QWORD *)(a2 + 88);
      v21 = *(float *)(a2 + 96);
      v22 = *(float *)(a2 + 100);
      v425 = *(_BYTE *)(a2 + 104);
      v455 = *(_QWORD *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      v61 = specialized static Entity.entityInfoType(_:)(v17);
      if (v61)
      {
        v62 = (*(uint64_t (**)(void))(v61 + 232))();
        v63 = *(_QWORD *)(v62 + 16);
        swift_retain();
        MEMORY[0x22076D160](v63, 0);
        *(_QWORD *)(v62 + 16) = v17;
        MEMORY[0x22076D160](v17, v62);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v17);
      }
LABEL_33:
      type metadata accessor for AnimationPlaybackController();
      v64 = swift_allocObject();
      swift_weakInit();
      v462 = v64;
      *(_QWORD *)(v64 + 16) = v18;
      swift_beginAccess();
      swift_weakAssign();
      v65 = String.init(cString:)();
      v67 = v66;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v68 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_93;
      swift_bridgeObjectRetain();
      v69 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v67);
      if ((v70 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_93:
        v468 = 0;
        v474 = 0;
        v72 = 0;
        v74 = 0;
        v73 = 0;
        v75 = 0;
        v76 = 0;
        goto LABEL_94;
      }
      v71 = (uint64_t *)(*(_QWORD *)(v68 + 56) + 56 * v69);
      v72 = v71[2];
      v468 = v71[1];
      v474 = *v71;
      v74 = v71[3];
      v73 = v71[4];
      v75 = v71[5];
      v76 = v71[6];
      swift_bridgeObjectRelease();
LABEL_94:
      v381 = v73;
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v582 = v480;
      BYTE8(v582) = 0;
      *(_QWORD *)&v583 = v488;
      *((_QWORD *)&v583 + 1) = v474;
      *(_QWORD *)&v584 = v468;
      *((_QWORD *)&v584 + 1) = v72;
      *(_QWORD *)&v585 = v74;
      *((_QWORD *)&v585 + 1) = v73;
      *(_QWORD *)&v586 = v75;
      *((_QWORD *)&v586 + 1) = v76;
      v398 = v75;
      v405 = v74;
      v389 = v76;
      if (v20 && REBindPointBoundComponent())
      {
        v164 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v165 = swift_dynamicCastClassUnconditional();
LABEL_98:
          v413 = v165;
          goto LABEL_100;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_228:
          __break(1u);
          goto LABEL_229;
        }
        v244 = specialized static Entity.entityInfoType(_:)(v164);
        if (!v244)
        {
          v165 = makeEntity(for:)(v164);
          goto LABEL_98;
        }
        v245 = (*(uint64_t (**)(void))(v244 + 232))();
        v246 = *(_QWORD *)(v245 + 16);
        swift_retain();
        MEMORY[0x22076D160](v246, 0);
        *(_QWORD *)(v245 + 16) = v164;
        MEMORY[0x22076D160](v164, v245);
        v413 = v245;
        swift_release();
      }
      else
      {
        v413 = 0;
      }
LABEL_100:
      specialized ActionEventData.action<A>()((uint64_t)&v570);
      v166 = v580;
      if (v580 == 1)
        goto LABEL_193;
      v335 = v581;
      v342 = v580;
      v313 = v72;
      v318 = v579;
      v167 = v578;
      v168 = v577;
      v169 = v576;
      v170 = v573;
      v303 = v578;
      v308 = v573;
      v171 = v572;
      v172 = v570;
      v365 = HIDWORD(v570) & 1;
      v373 = HIDWORD(v576);
      v324 = v571;
      v329 = v570;
      v349 = HIDWORD(v571) & 1;
      v357 = HIDWORD(v572) & 1;
      v173 = v575;
      v174 = v574;
      swift_retain();
      outlined copy of FromToByAction<Float>?(v172, v324, v171, v170, v174, v173, v169, v168, v167, v318, v166);
      v175 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Float>>);
      v526 = v585;
      v527 = v586;
      v524 = v583;
      v525 = v584;
      v176 = v19;
      v494 = v329;
      v495 = v365;
      v496 = v324;
      v497 = v349;
      v498 = v171;
      v499 = v357;
      v500 = v174;
      v501 = v173;
      v502 = v169;
      v503 = v373;
      v504 = v168;
      v505 = v303;
      v506 = v318 & 0x1FF;
      v507 = BYTE2(v318) & 1;
      v508 = v342;
      v509 = v335;
      v300 = v175 & 1;
      v510 = v175 & 1;
      v493[0] = v462;
      v511 = v413;
      v512 = v425;
      v513 = v21;
      v514 = v22;
      v515 = Strong;
      v516 = v434;
      v517 = v176;
      v518 = 0;
      v519 = v448;
      v520 = 0;
      v521 = v440;
      v522 = 0;
      v523 = v582;
      v528 = v455;
      swift_retain();
      swift_retain();
      a5(v493);
      outlined consume of FromToByAction<Float>?(v329, v324, v171, v308, v174, v173, v169, v168, v303, v318, v342);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v529 = v462;
      v530 = v329;
      v531 = v365;
      v532 = v324;
      v533 = v349;
      v534 = v171;
      v535 = v357;
      v536 = v174;
      v537 = v173;
      v538 = v169;
      v539 = v373;
      v540 = v168;
      v541 = v303;
      v542 = v318 & 0x1FF;
      v543 = BYTE2(v318) & 1;
      v544 = v342;
      v545 = v335;
      v546 = v300;
      v547 = v413;
      v548 = v425;
      v549 = v21;
      v550 = v22;
      v551 = Strong;
      v552 = v434;
      v553 = v176;
      v554 = 0;
      v555 = v448;
      v556 = 0;
      v557 = v440;
      v558 = 0;
      v559 = v480;
      v560 = 0;
      v561 = v488;
      v562 = v474;
      v563 = v468;
      v564 = v313;
      v565 = v405;
      v566 = v381;
      v567 = v398;
      v568 = v389;
      v177 = v455;
LABEL_197:
      v569 = v177;
      outlined release of ActionEvent<FromToByAction<Float>>((uint64_t)&v529);
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_194;
    case 4:
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      v472 = *(_QWORD *)(a2 + 32);
      v435 = *(_QWORD *)(a2 + 48);
      v25 = *(_QWORD *)(a2 + 64);
      v449 = *(_QWORD *)(a2 + 56);
      v26 = *(float *)(a2 + 72);
      v27 = *(float *)(a2 + 76);
      v441 = *(_BYTE *)(a2 + 80);
      v481 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v77 = specialized static Entity.entityInfoType(_:)(v23);
        if (v77)
        {
          v78 = (*(uint64_t (**)(void))(v77 + 232))();
          v79 = *(_QWORD *)(v78 + 16);
          swift_retain();
          MEMORY[0x22076D160](v79, 0);
          *(_QWORD *)(v78 + 16) = v23;
          MEMORY[0x22076D160](v23, v78);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v23);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v80 = swift_allocObject();
      swift_weakInit();
      v457 = v80;
      *(_QWORD *)(v80 + 16) = v24;
      swift_beginAccess();
      swift_weakAssign();
      v81 = String.init(cString:)();
      v83 = v82;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v84 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_103;
      swift_bridgeObjectRetain();
      v85 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v83);
      if ((v86 & 1) != 0)
      {
        v87 = (uint64_t *)(*(_QWORD *)(v84 + 56) + 56 * v85);
        v88 = v87[2];
        v463 = v87[1];
        v469 = *v87;
        v89 = v87[3];
        v90 = v87[4];
        v91 = v87[5];
        v92 = v87[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_103:
        v463 = 0;
        v469 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
      }
      v406 = v91;
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v582 = v472;
      BYTE8(v582) = 0;
      *(_QWORD *)&v583 = v481;
      *((_QWORD *)&v583 + 1) = v469;
      *(_QWORD *)&v584 = v463;
      *((_QWORD *)&v584 + 1) = v88;
      *(_QWORD *)&v585 = v89;
      *((_QWORD *)&v585 + 1) = v90;
      *(_QWORD *)&v586 = v91;
      *((_QWORD *)&v586 + 1) = v92;
      v178 = v89;
      v414 = v88;
      if (!v25 || !REBindPointBoundComponent())
      {
        v420 = 0;
        goto LABEL_173;
      }
      v179 = v89;
      v180 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v181 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_229:
          __break(1u);
          goto LABEL_230;
        }
        v247 = specialized static Entity.entityInfoType(_:)(v180);
        if (v247)
        {
          v420 = (*(uint64_t (**)(void))(v247 + 232))();
          v248 = *(_QWORD *)(v420 + 16);
          swift_retain();
          MEMORY[0x22076D160](v248, 0);
          *(_QWORD *)(v420 + 16) = v180;
          MEMORY[0x22076D160](v180, v420);
          swift_release();
          goto LABEL_172;
        }
        v181 = makeEntity(for:)(v180);
      }
      v420 = v181;
LABEL_172:
      v178 = v179;
LABEL_173:
      specialized ActionEventData.action<A>()((uint64_t)&v570);
      v249 = v580;
      if (v580 != 1)
      {
        v322 = v581;
        v429 = v579;
        v250 = v578;
        v353 = v577;
        v361 = v578;
        v251 = v573;
        v339 = v573;
        v345 = v90;
        v252 = v572;
        v253 = v571;
        v327 = v178;
        v332 = v92;
        v254 = v576;
        v393 = HIDWORD(v570) & 1;
        v401 = HIDWORD(v576);
        v255 = v570;
        v369 = v580;
        v377 = HIDWORD(v571) & 1;
        v385 = HIDWORD(v572) & 1;
        v256 = v575;
        v257 = v574;
        swift_retain();
        outlined copy of FromToByAction<Float>?(v255, v253, v252, v251, v257, v256, v254, v353, v250, v429, v249);
        v258 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Float>>);
        v526 = v585;
        v527 = v586;
        v524 = v583;
        v525 = v584;
        v494 = v255;
        v495 = v393;
        v496 = v253;
        v497 = v377;
        v498 = v252;
        v499 = v385;
        v500 = v257;
        v501 = v256;
        v502 = v254;
        v503 = v401;
        v504 = v353;
        v505 = v361;
        v506 = v429 & 0x1FF;
        v507 = BYTE2(v429) & 1;
        v508 = v369;
        v509 = v322;
        v304 = v258 & 1;
        v510 = v258 & 1;
        v493[0] = v457;
        v511 = v420;
        v512 = v441;
        v513 = v26;
        v514 = v27;
        v515 = Strong;
        v516 = v449;
        v517 = -1.0;
        v518 = 0;
        v519 = 0xBFF0000000000000;
        v520 = 0;
        v521 = 0xBFF0000000000000;
        v522 = 0;
        v523 = v582;
        v528 = v435;
        swift_retain();
        swift_retain();
        a5(v493);
        outlined consume of FromToByAction<Float>?(v255, v253, v252, v339, v257, v256, v254, v353, v361, v429, v369);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v529 = v457;
        v530 = v255;
        v531 = v393;
        v532 = v253;
        v533 = v377;
        v534 = v252;
        v535 = v385;
        v536 = v257;
        v537 = v256;
        v538 = v254;
        v539 = v401;
        v540 = v353;
        v541 = v361;
        v542 = v429 & 0x1FF;
        v543 = BYTE2(v429) & 1;
        v544 = v369;
        v545 = v322;
        v546 = v304;
        v547 = v420;
        v548 = v441;
        v549 = v26;
        v550 = v27;
        v551 = Strong;
        v552 = v449;
        v553 = -1.0;
        v554 = 0;
        v555 = 0xBFF0000000000000;
        v556 = 0;
        v557 = 0xBFF0000000000000;
        v558 = 0;
        v559 = v472;
        v560 = 0;
        v561 = v481;
        v562 = v469;
        v563 = v463;
        v564 = v414;
        v565 = v327;
        v566 = v345;
        v567 = v406;
        v568 = v332;
        v177 = v435;
        goto LABEL_197;
      }
      goto LABEL_193;
    case 8:
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v482 = *(_QWORD *)(a2 + 32);
      v489 = *(_QWORD *)(a2 + 40);
      v30 = *(_QWORD *)(a2 + 56);
      v31 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v442 = *(_BYTE *)(a2 + 72);
      v450 = *(_QWORD *)(a2 + 80);
      v456 = *(_QWORD *)(a2 + 88);
      v461 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v93 = specialized static Entity.entityInfoType(_:)(v28);
        if (v93)
        {
          v94 = (*(uint64_t (**)(void))(v93 + 232))();
          v95 = *(_QWORD *)(v94 + 16);
          swift_retain();
          MEMORY[0x22076D160](v95, 0);
          *(_QWORD *)(v94 + 16) = v28;
          MEMORY[0x22076D160](v28, v94);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v28);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v96 = swift_allocObject();
      swift_weakInit();
      v470 = v96;
      *(_QWORD *)(v96 + 16) = v29;
      swift_beginAccess();
      swift_weakAssign();
      v97 = String.init(cString:)();
      v99 = v98;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v100 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_111;
      swift_bridgeObjectRetain();
      v101 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v99);
      if ((v102 & 1) != 0)
      {
        v103 = (uint64_t *)(*(_QWORD *)(v100 + 56) + 56 * v101);
        v104 = v103[1];
        v475 = *v103;
        v106 = v103[2];
        v105 = v103[3];
        v107 = v103[4];
        v108 = v103[5];
        v109 = v103[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_111:
        v475 = 0;
        v104 = 0;
        v106 = 0;
        v105 = 0;
        v107 = 0;
        v108 = 0;
        v109 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v582 = v482;
      BYTE8(v582) = 0;
      *(_QWORD *)&v583 = v489;
      *((_QWORD *)&v583 + 1) = v475;
      *(_QWORD *)&v584 = v104;
      *((_QWORD *)&v584 + 1) = v106;
      *(_QWORD *)&v585 = v105;
      *((_QWORD *)&v585 + 1) = v107;
      *(_QWORD *)&v586 = v108;
      *((_QWORD *)&v586 + 1) = v109;
      v407 = v108;
      v415 = v105;
      v399 = v109;
      if (!v30 || !REBindPointBoundComponent())
      {
        v421 = 0;
LABEL_179:
        specialized ActionEventData.action<A>()((uint64_t)&v570);
        v262 = v580;
        if (v580 == 1)
          goto LABEL_193;
        v333 = v104;
        v340 = v106;
        v430 = v579;
        v263 = v578;
        v317 = v578;
        v323 = v107;
        v346 = v577;
        v354 = v581;
        v264 = v573;
        v328 = v573;
        v265 = v572;
        v266 = v570;
        v267 = v576;
        v386 = HIDWORD(v570) & 1;
        v394 = HIDWORD(v576);
        v362 = v580;
        v370 = HIDWORD(v571) & 1;
        v268 = v571;
        v378 = HIDWORD(v572) & 1;
        v269 = v575;
        v270 = v574;
        swift_retain();
        outlined copy of FromToByAction<Float>?(v266, v268, v265, v264, v270, v269, v267, v346, v263, v430, v262);
        v271 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Float>>);
        v526 = v585;
        v527 = v586;
        v525 = v584;
        v524 = v583;
        v494 = v266;
        v495 = v386;
        v496 = v268;
        v497 = v370;
        v498 = v265;
        v499 = v378;
        v500 = v270;
        v501 = v269;
        v502 = v267;
        v503 = v394;
        v504 = v346;
        v505 = v317;
        v506 = v430 & 0x1FF;
        v507 = BYTE2(v430) & 1;
        v508 = v362;
        v509 = v354;
        v305 = v271 & 1;
        v510 = v271 & 1;
        v493[0] = v470;
        v511 = v421;
        v512 = v442;
        v513 = v31;
        v514 = v32;
        v517 = 0.0;
        v515 = Strong;
        v516 = 0;
        v518 = 1;
        v519 = v450;
        v520 = 0;
        v521 = v456;
        v522 = 0;
        v523 = v582;
        v528 = v461;
        swift_retain();
        swift_retain();
        a5(v493);
        outlined consume of FromToByAction<Float>?(v266, v268, v265, v328, v270, v269, v267, v346, v317, v430, v362);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v529 = v470;
        v530 = v266;
        v531 = v386;
        v532 = v268;
        v533 = v370;
        v534 = v265;
        v535 = v378;
        v536 = v270;
        v537 = v269;
        v538 = v267;
        v539 = v394;
        v540 = v346;
        v541 = v317;
        v542 = v430 & 0x1FF;
        v543 = BYTE2(v430) & 1;
        v544 = v362;
        v545 = v354;
        v546 = v305;
        v547 = v421;
        v548 = v442;
        v549 = v31;
        v550 = v32;
        v553 = 0.0;
        v551 = Strong;
        v552 = 0;
        v554 = 1;
        v555 = v450;
        v556 = 0;
        v557 = v456;
        v558 = 0;
        v559 = v482;
        v560 = 0;
        v561 = v489;
        v562 = v475;
        v563 = v333;
        v564 = v340;
        v565 = v415;
        v566 = v323;
        v567 = v407;
        v228 = v399;
LABEL_196:
        v568 = v228;
        v177 = v461;
        goto LABEL_197;
      }
      v182 = v107;
      v183 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v184 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_230:
          __break(1u);
          goto LABEL_231;
        }
        v259 = specialized static Entity.entityInfoType(_:)(v183);
        if (v259)
        {
          v260 = (*(uint64_t (**)(void))(v259 + 232))();
          v261 = *(_QWORD *)(v260 + 16);
          swift_retain();
          MEMORY[0x22076D160](v261, 0);
          *(_QWORD *)(v260 + 16) = v183;
          MEMORY[0x22076D160](v183, v260);
          v421 = v260;
          swift_release();
          goto LABEL_178;
        }
        v184 = makeEntity(for:)(v183);
      }
      v421 = v184;
LABEL_178:
      v107 = v182;
      goto LABEL_179;
    case 16:
      v33 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      v483 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v461 = *(_QWORD *)(a2 + 48);
      v465 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v110 = specialized static Entity.entityInfoType(_:)(v33);
        if (v110)
        {
          v111 = (*(uint64_t (**)(void))(v110 + 232))();
          v112 = *(_QWORD *)(v111 + 16);
          swift_retain();
          MEMORY[0x22076D160](v112, 0);
          *(_QWORD *)(v111 + 16) = v33;
          MEMORY[0x22076D160](v33, v111);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v33);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v113 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v113 + 16) = v34;
      swift_beginAccess();
      swift_weakAssign();
      v114 = String.init(cString:)();
      v116 = v115;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v117 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_119;
      swift_bridgeObjectRetain();
      v118 = specialized __RawDictionaryStorage.find<A>(_:)(v114, v116);
      if ((v119 & 1) != 0)
      {
        v120 = (uint64_t *)(*(_QWORD *)(v117 + 56) + 56 * v118);
        v121 = *v120;
        v476 = v120[1];
        v123 = v120[2];
        v122 = v120[3];
        v125 = v120[4];
        v124 = v120[5];
        v126 = v120[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_119:
        v121 = 0;
        v476 = 0;
        v123 = 0;
        v122 = 0;
        v125 = 0;
        v124 = 0;
        v126 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v582 = 0;
      BYTE8(v582) = 0;
      *(_QWORD *)&v583 = v483;
      *((_QWORD *)&v583 + 1) = v121;
      *(_QWORD *)&v584 = v476;
      *((_QWORD *)&v584 + 1) = v123;
      *(_QWORD *)&v585 = v122;
      *((_QWORD *)&v585 + 1) = v125;
      *(_QWORD *)&v586 = v124;
      *((_QWORD *)&v586 + 1) = v126;
      v458 = v123;
      if (!v35 || !REBindPointBoundComponent())
      {
        v188 = 0;
LABEL_186:
        specialized ActionEventData.action<A>()((uint64_t)&v570);
        if (v580 == 1)
          goto LABEL_193;
        v526 = v585;
        v527 = v586;
        v524 = v583;
        v525 = v584;
        v445 = v124;
        v418 = v121;
        v423 = v125;
        v355 = v576;
        v363 = v577;
        v431 = v126;
        v347 = v574;
        v274 = v573;
        v306 = v573;
        v311 = v575;
        v275 = v572;
        v276 = v113;
        v334 = v113;
        v277 = v571;
        v278 = v188;
        v452 = v188;
        v279 = v570;
        v371 = HIDWORD(v570) & 1;
        v379 = HIDWORD(v571) & 1;
        v387 = HIDWORD(v572) & 1;
        v395 = HIDWORD(v576);
        v494 = v570;
        v495 = BYTE4(v570) & 1;
        v496 = v571;
        v299 = v571;
        v301 = v572;
        v497 = BYTE4(v571) & 1;
        v498 = v572;
        v499 = BYTE4(v572) & 1;
        v500 = v574;
        v501 = v575;
        v502 = v576;
        v503 = BYTE4(v576);
        v504 = v577;
        v505 = v578;
        v280 = v578;
        v281 = v579;
        v506 = v579 & 0x1FF;
        v410 = (v579 >> 8) & 1;
        v402 = WORD1(v579) & 1;
        v507 = BYTE2(v579) & 1;
        v508 = v580;
        v509 = v581;
        v282 = v581;
        v510 = 1;
        v493[0] = v276;
        v511 = v278;
        v512 = 0;
        v513 = 0.0;
        v514 = 0.0;
        v517 = 0.0;
        v515 = Strong;
        v516 = 0;
        v518 = 1;
        v519 = v465;
        v520 = 0;
        v521 = 0;
        v522 = 1;
        v523 = v582;
        v528 = v461;
        v283 = v580;
        swift_retain();
        swift_retain();
        outlined copy of FromToByAction<Float>?(v279, v277, v275, v274, v347, v311, v355, v363, v280, v281, v283);
        swift_retain();
        a5(v493);
        outlined consume of FromToByAction<Float>?(v279, v299, v301, v306, v347, v311, v355, v363, v280, v281, v283);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v529 = v334;
        v530 = v279;
        v531 = v371;
        v532 = v299;
        v533 = v379;
        v534 = v301;
        v535 = v387;
        v536 = v347;
        v537 = v311;
        v538 = v355;
        v539 = v395;
        v540 = v363;
        v541 = v280;
        LOBYTE(v542) = v281;
        HIBYTE(v542) = v410;
        v543 = v402;
        v544 = v283;
        v545 = v282;
        v546 = 1;
        v547 = v452;
        v548 = 0;
        v550 = 0.0;
        v549 = 0.0;
        v553 = 0.0;
        v551 = Strong;
        v552 = 0;
        v554 = 1;
        v555 = v465;
        v556 = 0;
        v557 = 0;
        v558 = 1;
        v559 = 0;
        v560 = 0;
        v561 = v483;
        v562 = v418;
        v563 = v476;
        v564 = v458;
        v565 = v122;
        v566 = v423;
        v567 = v445;
        v228 = v431;
        goto LABEL_196;
      }
      v185 = v122;
      v186 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v187 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
        v272 = specialized static Entity.entityInfoType(_:)(v186);
        if (v272)
        {
          v188 = (*(uint64_t (**)(void))(v272 + 232))();
          v273 = *(_QWORD *)(v188 + 16);
          swift_retain();
          MEMORY[0x22076D160](v273, 0);
          *(_QWORD *)(v188 + 16) = v186;
          MEMORY[0x22076D160](v186, v188);
          swift_release();
          goto LABEL_185;
        }
        v187 = makeEntity(for:)(v186);
      }
      v188 = v187;
LABEL_185:
      v122 = v185;
      goto LABEL_186;
    case 32:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v484 = *(_QWORD *)(a2 + 40);
      v38 = *(_QWORD *)(a2 + 56);
      v461 = *(_QWORD *)(a2 + 48);
      v466 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v127 = specialized static Entity.entityInfoType(_:)(v36);
        if (v127)
        {
          v128 = (*(uint64_t (**)(void))(v127 + 232))();
          v129 = *(_QWORD *)(v128 + 16);
          swift_retain();
          MEMORY[0x22076D160](v129, 0);
          *(_QWORD *)(v128 + 16) = v36;
          MEMORY[0x22076D160](v36, v128);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v130 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v130 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      v131 = String.init(cString:)();
      v133 = v132;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v134 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_127;
      swift_bridgeObjectRetain();
      v135 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v133);
      if ((v136 & 1) != 0)
      {
        v137 = (uint64_t *)(*(_QWORD *)(v134 + 56) + 56 * v135);
        v138 = *v137;
        v477 = v137[1];
        v140 = v137[2];
        v139 = v137[3];
        v141 = v137[4];
        v142 = v137[5];
        v143 = v137[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_127:
        v138 = 0;
        v477 = 0;
        v140 = 0;
        v139 = 0;
        v141 = 0;
        v142 = 0;
        v143 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v582 = 0;
      BYTE8(v582) = 0;
      *(_QWORD *)&v583 = v484;
      *((_QWORD *)&v583 + 1) = v138;
      *(_QWORD *)&v584 = v477;
      *((_QWORD *)&v584 + 1) = v140;
      *(_QWORD *)&v585 = v139;
      *((_QWORD *)&v585 + 1) = v141;
      *(_QWORD *)&v586 = v142;
      *((_QWORD *)&v586 + 1) = v143;
      v459 = v140;
      if (!v38 || !REBindPointBoundComponent())
      {
        v192 = 0;
LABEL_192:
        specialized ActionEventData.action<A>()((uint64_t)&v570);
        if (v580 == 1)
          goto LABEL_193;
        v526 = v585;
        v527 = v586;
        v524 = v583;
        v525 = v584;
        v432 = v139;
        v438 = v141;
        v286 = v579;
        v411 = v138;
        v419 = v142;
        v424 = v143;
        v446 = v575;
        v453 = v192;
        v348 = v574;
        v356 = v576;
        v287 = v573;
        v341 = v572;
        v288 = v571;
        v289 = v192;
        v290 = v570;
        v364 = HIDWORD(v570) & 1;
        v372 = HIDWORD(v571) & 1;
        v380 = HIDWORD(v572) & 1;
        v388 = HIDWORD(v576);
        v494 = v570;
        v495 = BYTE4(v570) & 1;
        v496 = v571;
        v302 = v571;
        v307 = v573;
        v497 = BYTE4(v571) & 1;
        v498 = v572;
        v499 = BYTE4(v572) & 1;
        v500 = v574;
        v501 = v575;
        v502 = v576;
        v503 = BYTE4(v576);
        v504 = v577;
        v505 = v578;
        v291 = v577;
        v292 = v578;
        v506 = v579 & 0x1FF;
        v403 = (v579 >> 8) & 1;
        v396 = WORD1(v579) & 1;
        v507 = BYTE2(v579) & 1;
        v508 = v580;
        v509 = v581;
        v293 = v581;
        v510 = 1;
        v493[0] = v130;
        v511 = v289;
        v512 = 0;
        v513 = 0.0;
        v514 = 0.0;
        v517 = 0.0;
        v515 = Strong;
        v516 = 0;
        v518 = 1;
        v519 = v466;
        v520 = 0;
        v521 = 0;
        v522 = 1;
        v523 = v582;
        v528 = v461;
        v294 = v580;
        v312 = v580;
        swift_retain();
        swift_retain();
        outlined copy of FromToByAction<Float>?(v290, v288, v341, v287, v348, v446, v356, v291, v292, v286, v294);
        swift_retain();
        a5(v493);
        outlined consume of FromToByAction<Float>?(v290, v302, v341, v307, v348, v446, v356, v291, v292, v286, v312);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v529 = v130;
        v530 = v290;
        v531 = v364;
        v532 = v302;
        v533 = v372;
        v534 = v341;
        v535 = v380;
        v536 = v348;
        v537 = v446;
        v538 = v356;
        v539 = v388;
        v540 = v291;
        v541 = v292;
        LOBYTE(v542) = v286;
        HIBYTE(v542) = v403;
        v543 = v396;
        v544 = v312;
        v545 = v293;
        v546 = 1;
        v547 = v453;
        v548 = 0;
        v550 = 0.0;
        v549 = 0.0;
        v553 = 0.0;
        v551 = Strong;
        v552 = 0;
        v554 = 1;
        v555 = v466;
        v556 = 0;
        v557 = 0;
        v558 = 1;
        v559 = 0;
        v560 = 0;
        v561 = v484;
        v562 = v411;
        v563 = v477;
        v564 = v459;
        v565 = v432;
        v566 = v438;
        v567 = v419;
        v228 = v424;
        goto LABEL_196;
      }
      v189 = v139;
      v190 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v191 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_232:
          __break(1u);
          goto LABEL_233;
        }
        v284 = specialized static Entity.entityInfoType(_:)(v190);
        if (v284)
        {
          v192 = (*(uint64_t (**)(void))(v284 + 232))();
          v285 = *(_QWORD *)(v192 + 16);
          swift_retain();
          MEMORY[0x22076D160](v285, 0);
          *(_QWORD *)(v192 + 16) = v190;
          MEMORY[0x22076D160](v190, v192);
          swift_release();
          goto LABEL_191;
        }
        v191 = makeEntity(for:)(v190);
      }
      v192 = v191;
LABEL_191:
      v139 = v189;
      goto LABEL_192;
    case 64:
      v39 = *(_QWORD *)a2;
      v40 = *(_QWORD *)(a2 + 8);
      v41 = *(_QWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 32);
      v43 = *(_QWORD *)(a2 + 40);
      v461 = v42;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
        v144 = specialized static Entity.entityInfoType(_:)(v39);
        if (v144)
        {
          v145 = (*(uint64_t (**)(void))(v144 + 232))();
          v146 = *(_QWORD *)(v145 + 16);
          swift_retain();
          MEMORY[0x22076D160](v146, 0);
          *(_QWORD *)(v145 + 16) = v39;
          MEMORY[0x22076D160](v39, v145);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v39);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v147 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v147 + 16) = v40;
      swift_beginAccess();
      swift_weakAssign();
      if (v43 && REBindPointBoundComponent())
      {
        v148 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v149 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v150 = v149;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
          goto LABEL_228;
        }
        v229 = specialized static Entity.entityInfoType(_:)(v148);
        if (!v229)
        {
          v149 = makeEntity(for:)(v148);
          goto LABEL_77;
        }
        v150 = (*(uint64_t (**)(void))(v229 + 232))();
        v230 = *(_QWORD *)(v150 + 16);
        swift_retain();
        MEMORY[0x22076D160](v230, 0);
        *(_QWORD *)(v150 + 16) = v148;
        MEMORY[0x22076D160](v148, v150);
        swift_release();
      }
      else
      {
        v150 = 0;
      }
LABEL_79:
      v151 = String.init(cString:)();
      v153 = v152;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v154 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v155 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v153);
        if ((v156 & 1) != 0)
        {
          v157 = (uint64_t *)(*(_QWORD *)(v154 + 56) + 56 * v155);
          v158 = *v157;
          v159 = v157[1];
          v160 = v157[2];
          v485 = v157[4];
          v490 = v157[3];
          v471 = v157[6];
          v478 = v157[5];
          swift_bridgeObjectRelease();
LABEL_136:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v582 = 0;
          BYTE8(v582) = 0;
          *(_QWORD *)&v583 = v41;
          *((_QWORD *)&v583 + 1) = v158;
          *(_QWORD *)&v584 = v159;
          *((_QWORD *)&v584 + 1) = v160;
          v451 = v160;
          *(_QWORD *)&v585 = v490;
          *((_QWORD *)&v585 + 1) = v485;
          *(_QWORD *)&v586 = v478;
          *((_QWORD *)&v586 + 1) = v471;
          specialized ActionEventData.action<A>()((uint64_t)&v570);
          v193 = v580;
          if (v580 == 1)
            goto LABEL_193;
          v526 = v585;
          v527 = v586;
          v524 = v583;
          v525 = v584;
          v194 = v578;
          v436 = v577;
          v408 = v41;
          v416 = v159;
          v422 = v575;
          v325 = v572;
          v330 = v573;
          v400 = v158;
          v195 = v147;
          v336 = v147;
          v196 = v571;
          v197 = v570;
          v350 = HIDWORD(v570) & 1;
          v358 = HIDWORD(v571) & 1;
          v366 = HIDWORD(v572) & 1;
          v374 = HIDWORD(v576);
          v494 = v570;
          v495 = BYTE4(v570) & 1;
          v496 = v571;
          v497 = BYTE4(v571) & 1;
          v498 = v572;
          v499 = BYTE4(v572) & 1;
          v500 = v574;
          v501 = v575;
          v198 = v574;
          v502 = v576;
          v199 = v576;
          v314 = v576;
          v319 = v579;
          v503 = BYTE4(v576);
          v504 = v577;
          v505 = v578;
          v427 = v578;
          v200 = v579;
          v506 = v579 & 0x1FF;
          v390 = (v579 >> 8) & 1;
          v382 = WORD1(v579) & 1;
          v507 = BYTE2(v579) & 1;
          v508 = v580;
          v509 = v581;
          v201 = v581;
          v510 = 1;
          v493[0] = v195;
          v511 = v150;
          v512 = 0;
          v513 = 0.0;
          v514 = 0.0;
          v517 = 0.0;
          v515 = Strong;
          v516 = 0;
          v518 = 1;
          v519 = 0;
          v520 = 1;
          v521 = 0;
          v522 = 1;
          v523 = v582;
          v528 = v461;
          v443 = v580;
          swift_retain();
          swift_retain();
          outlined copy of FromToByAction<Float>?(v197, v196, v325, v330, v198, v422, v199, v436, v194, v200, v193);
          swift_retain();
          a5(v493);
          outlined consume of FromToByAction<Float>?(v197, v196, v325, v330, v198, v422, v314, v436, v427, v319, v443);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v529 = v336;
          v530 = v197;
          v531 = v350;
          v532 = v196;
          v533 = v358;
          v534 = v325;
          v535 = v366;
          v536 = v198;
          v537 = v422;
          v538 = v314;
          v539 = v374;
          v540 = v436;
          v541 = v427;
          LOBYTE(v542) = v319;
          HIBYTE(v542) = v390;
          v543 = v382;
          v544 = v443;
          v545 = v201;
          v546 = 1;
          v547 = v150;
          v548 = 0;
          v550 = 0.0;
          v549 = 0.0;
          v553 = 0.0;
          v551 = Strong;
          v552 = 0;
          v554 = 1;
          v555 = 0;
          v556 = 1;
          v557 = 0;
          v558 = 1;
          v559 = 0;
          v560 = 0;
          v561 = v408;
          v562 = v400;
          v563 = v416;
          v564 = v451;
          v202 = v490;
LABEL_156:
          v565 = v202;
          v566 = v485;
          v567 = v478;
          v228 = v471;
          goto LABEL_196;
        }
        swift_bridgeObjectRelease();
      }
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v485 = 0;
      v490 = 0;
      v471 = 0;
      v478 = 0;
      goto LABEL_136;
    default:
      if (a4 != 128)
        goto LABEL_194;
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v487 = *(_QWORD *)(a2 + 24);
      v15 = *(_QWORD *)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 40);
      v461 = v15;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        v203 = specialized static Entity.entityInfoType(_:)(v13);
        if (v203)
        {
          v204 = (*(uint64_t (**)(void))(v203 + 232))();
          v205 = *(_QWORD *)(v204 + 16);
          swift_retain();
          MEMORY[0x22076D160](v205, 0);
          *(_QWORD *)(v204 + 16) = v13;
          MEMORY[0x22076D160](v13, v204);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v13);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v206 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v206 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      if (v16 && REBindPointBoundComponent())
      {
        v207 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v208 = swift_dynamicCastClassUnconditional();
LABEL_145:
          v209 = v208;
          goto LABEL_147;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_233:
          __break(1u);
          JUMPOUT(0x21BB53FECLL);
        }
        v295 = specialized static Entity.entityInfoType(_:)(v207);
        if (!v295)
        {
          v208 = makeEntity(for:)(v207);
          goto LABEL_145;
        }
        v209 = (*(uint64_t (**)(void))(v295 + 232))();
        v296 = *(_QWORD *)(v209 + 16);
        swift_retain();
        MEMORY[0x22076D160](v296, 0);
        *(_QWORD *)(v209 + 16) = v207;
        MEMORY[0x22076D160](v207, v209);
        swift_release();
      }
      else
      {
        v209 = 0;
      }
LABEL_147:
      v210 = String.init(cString:)();
      v212 = v211;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v213 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v214 = specialized __RawDictionaryStorage.find<A>(_:)(v210, v212);
        if ((v215 & 1) != 0)
        {
          v216 = (uint64_t *)(*(_QWORD *)(v213 + 56) + 56 * v214);
          v217 = *v216;
          v218 = v216[1];
          v220 = v216[2];
          v219 = v216[3];
          v478 = v216[5];
          v485 = v216[4];
          v471 = v216[6];
          swift_bridgeObjectRelease();
LABEL_154:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v582 = 0;
          BYTE8(v582) = 0;
          *(_QWORD *)&v583 = v487;
          *((_QWORD *)&v583 + 1) = v217;
          *(_QWORD *)&v584 = v218;
          *((_QWORD *)&v584 + 1) = v220;
          *(_QWORD *)&v585 = v219;
          *((_QWORD *)&v585 + 1) = v485;
          *(_QWORD *)&v586 = v478;
          *((_QWORD *)&v586 + 1) = v471;
          specialized ActionEventData.action<A>()((uint64_t)&v570);
          if (v580 == 1)
            goto LABEL_193;
          v526 = v585;
          v527 = v586;
          v524 = v583;
          v525 = v584;
          v221 = v206;
          v320 = v206;
          v222 = v579;
          v409 = v217;
          v417 = v578;
          v315 = v577;
          v437 = v575;
          v444 = v576;
          v391 = v220;
          v428 = v574;
          v223 = v572;
          v224 = v571;
          v225 = v570;
          v337 = v573;
          v343 = HIDWORD(v570) & 1;
          v351 = HIDWORD(v571) & 1;
          v359 = HIDWORD(v572) & 1;
          v367 = HIDWORD(v576);
          v494 = v570;
          v495 = BYTE4(v570) & 1;
          v496 = v571;
          v497 = BYTE4(v571) & 1;
          v498 = v572;
          v499 = BYTE4(v572) & 1;
          v500 = v574;
          v501 = v575;
          v502 = v576;
          v503 = BYTE4(v576);
          v504 = v577;
          v505 = v578;
          v506 = v579 & 0x1FF;
          v383 = (v579 >> 8) & 1;
          v309 = v579;
          v375 = WORD1(v579) & 1;
          v507 = BYTE2(v579) & 1;
          v508 = v580;
          v509 = v581;
          v226 = v581;
          v510 = 1;
          v493[0] = v221;
          v511 = v209;
          v512 = 0;
          v513 = 0.0;
          v514 = 0.0;
          v517 = 0.0;
          v515 = Strong;
          v516 = 0;
          v518 = 1;
          v519 = 0;
          v520 = 1;
          v521 = 0;
          v522 = 1;
          v523 = v582;
          v528 = v461;
          v227 = v580;
          swift_retain();
          swift_retain();
          outlined copy of FromToByAction<Float>?(v225, v224, v223, v337, v428, v437, v444, v315, v417, v222, v227);
          swift_retain();
          a5(v493);
          swift_release();
          outlined consume of FromToByAction<Float>?(v225, v224, v223, v337, v428, v437, v444, v315, v417, v309, v227);
          swift_release();
          swift_release();
          swift_release();
          v529 = v320;
          v530 = v225;
          v531 = v343;
          v532 = v224;
          v533 = v351;
          v534 = v223;
          v535 = v359;
          v536 = v428;
          v537 = v437;
          v538 = v444;
          v539 = v367;
          v540 = v315;
          v541 = v417;
          LOBYTE(v542) = v309;
          HIBYTE(v542) = v383;
          v543 = v375;
          v544 = v227;
          v545 = v226;
          v546 = 1;
          v547 = v209;
          v548 = 0;
          v550 = 0.0;
          v549 = 0.0;
          v553 = 0.0;
          v551 = Strong;
          v552 = 0;
          v554 = 1;
          v555 = 0;
          v556 = 1;
          v557 = 0;
          v558 = 1;
          v559 = 0;
          v560 = 0;
          v561 = v487;
          v562 = v409;
          v563 = v218;
          v564 = v391;
          v202 = v219;
          goto LABEL_156;
        }
        swift_bridgeObjectRelease();
      }
      v217 = 0;
      v218 = 0;
      v220 = 0;
      v219 = 0;
      v478 = 0;
      v485 = 0;
      v471 = 0;
      goto LABEL_154;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t Entity;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  char v273;
  uint64_t v274;
  char v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  char v286;
  char v287;
  char v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  int v300;
  char v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  char v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  char v332;
  uint64_t v333;
  int v334;
  int v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  char v351;
  uint64_t v352;
  char v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  char v366;
  char v367;
  char v368;
  char v369;
  uint64_t v370;
  char v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t Strong;
  _QWORD v420[2];
  uint64_t v421;
  uint64_t v422;
  char v423;
  __int128 v424;
  uint64_t v425;
  uint64_t v426;
  char v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  char v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  char v437;
  char v438;
  uint64_t v439;
  char v440;
  double v441;
  double v442;
  uint64_t v443;
  uint64_t v444;
  double v445;
  char v446;
  unint64_t v447;
  char v448;
  unint64_t v449;
  char v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  __int128 v460;
  uint64_t v461;
  uint64_t v462;
  char v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  char v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  char v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char v477;
  __int128 v478;
  uint64_t v479;
  uint64_t v480;
  char v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  char v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  char v491;
  char v492;
  uint64_t v493;
  char v494;
  double v495;
  double v496;
  uint64_t v497;
  uint64_t v498;
  double v499;
  char v500;
  unint64_t v501;
  char v502;
  unint64_t v503;
  char v504;
  uint64_t v505;
  char v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  _BYTE v516[176];
  _BYTE v517[176];
  _BYTE v518[168];
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v409 = *(_QWORD *)(a2 + 40);
      v414 = *(_QWORD *)(a2 + 32);
      v390 = *(_QWORD *)(a2 + 48);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v367 = *(_BYTE *)(a2 + 80);
      v377 = *(_QWORD *)(a2 + 88);
      v382 = *(_QWORD *)(a2 + 56);
      v372 = *(_QWORD *)(a2 + 96);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v42 = specialized static Entity.entityInfoType(_:)(v8);
        if (v42)
        {
          v43 = (*(uint64_t (**)(void))(v42 + 232))();
          v44 = *(_QWORD *)(v43 + 16);
          swift_retain();
          MEMORY[0x22076D160](v44, 0);
          *(_QWORD *)(v43 + 16) = v8;
          MEMORY[0x22076D160](v8, v43);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v8);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v45 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v45 + 16) = v7;
        swift_beginAccess();
        swift_weakAssign();
        v46 = String.init(cString:)();
        v48 = v47;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v49 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
          if ((v51 & 1) != 0)
          {
            v52 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 56 * v50);
            v401 = *v52;
            v404 = v52[1];
            v53 = v52[3];
            v395 = v52[2];
            v55 = v52[4];
            v54 = v52[5];
            v56 = v52[6];
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
          swift_bridgeObjectRelease();
        }
        v401 = 0;
        v404 = 0;
        v395 = 0;
        v53 = 0;
        v55 = 0;
        v54 = 0;
        v56 = 0;
LABEL_86:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v519 = v414;
        BYTE8(v519) = 0;
        *(_QWORD *)&v520 = v409;
        *((_QWORD *)&v520 + 1) = v401;
        *(_QWORD *)&v521 = v404;
        *((_QWORD *)&v521 + 1) = v395;
        *(_QWORD *)&v522 = v53;
        *((_QWORD *)&v522 + 1) = v55;
        *(_QWORD *)&v523 = v54;
        *((_QWORD *)&v523 + 1) = v56;
        v355 = v56;
        v361 = v53;
        if (!v9 || !REBindPointBoundComponent())
        {
          v150 = 0;
          goto LABEL_92;
        }
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v149 = swift_dynamicCastClassUnconditional();
LABEL_90:
          v150 = v149;
          goto LABEL_92;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v242 = specialized static Entity.entityInfoType(_:)(Entity);
          if (!v242)
          {
            v149 = makeEntity(for:)(Entity);
            goto LABEL_90;
          }
          v150 = (*(uint64_t (**)(void))(v242 + 232))();
          v243 = *(_QWORD *)(v150 + 16);
          swift_retain();
          MEMORY[0x22076D160](v243, 0);
          *(_QWORD *)(v150 + 16) = Entity;
          MEMORY[0x22076D160](Entity, v150);
          swift_release();
LABEL_92:
          specialized ActionEventData.action<A>()((uint64_t)v516);
          outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
          outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
          if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) != 1)
          {
            outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
            v341 = v457;
            v264 = v45;
            v267 = v150;
            v151 = v458;
            v312 = v458;
            v318 = v55;
            v152 = v459;
            v287 = v459;
            v348 = v460;
            v153 = v461;
            v154 = v462;
            v279 = v462;
            v283 = v461;
            v323 = v54;
            v155 = v463;
            v275 = v463;
            v156 = v464;
            v157 = v465;
            v305 = v465;
            v158 = v467;
            v300 = v467;
            v159 = v468;
            v295 = v468;
            v160 = v469;
            v259 = v470;
            v261 = v466;
            v161 = v471;
            v291 = v471;
            v334 = v472;
            v328 = v473;
            swift_retain();
            v162 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<BillboardAction>);
            v422 = v151;
            v423 = v152;
            v424 = v348;
            v425 = v153;
            v426 = v154;
            v427 = v155;
            v428 = v156;
            v429 = v157;
            v430 = v261;
            v431 = v158;
            v432 = v159;
            v433 = v160;
            v434 = v259;
            v435 = v161;
            v436 = v334;
            v437 = v328;
            v271 = v162 & 1;
            v438 = v162 & 1;
            v421 = v341;
            v420[0] = v264;
            v439 = v267;
            v440 = v367;
            v441 = v10;
            v442 = v11;
            v443 = Strong;
            v444 = v382;
            v445 = -1.0;
            v446 = 0;
            v448 = 0;
            v447 = v377;
            v449 = v372;
            v450 = 0;
            v454 = v522;
            v455 = v523;
            v452 = v520;
            v453 = v521;
            v451 = v519;
            v456 = v390;
            swift_retain();
            swift_retain();
            a5(v420);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v474 = v264;
            v475 = v341;
            v476 = v312;
            v477 = v287;
            v478 = v348;
            v479 = v283;
            v480 = v279;
            v481 = v275;
            v482 = v156;
            v483 = v305;
            v484 = v261;
            v485 = v300;
            v486 = v295;
            v487 = v160;
            v488 = v259;
            v489 = v291;
            v490 = v334;
            v491 = v328;
            v492 = v271;
            v493 = v267;
            v494 = v367;
            v495 = v10;
            v496 = v11;
            v497 = Strong;
            v498 = v382;
            v499 = -1.0;
            v500 = 0;
            v502 = 0;
            v501 = v377;
            v503 = v372;
LABEL_104:
            v504 = 0;
            v506 = 0;
            v505 = v414;
            v507 = v409;
            v508 = v401;
            v509 = v404;
            v510 = v395;
            v511 = v361;
            v512 = v318;
            v513 = v323;
            v514 = v355;
            v179 = v390;
LABEL_189:
            v515 = v179;
            goto LABEL_190;
          }
          goto LABEL_185;
        }
        goto LABEL_219;
      }
      __break(1u);
      goto LABEL_211;
    case 2:
      v18 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v409 = *(_QWORD *)(a2 + 40);
      v414 = *(_QWORD *)(a2 + 32);
      v19 = *(float *)(a2 + 56);
      v378 = *(_QWORD *)(a2 + 64);
      v383 = *(_QWORD *)(a2 + 48);
      v373 = *(_QWORD *)(a2 + 72);
      v20 = *(_QWORD *)(a2 + 88);
      v390 = *(_QWORD *)(a2 + 80);
      v21 = *(float *)(a2 + 96);
      v22 = *(float *)(a2 + 100);
      v368 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v57 = specialized static Entity.entityInfoType(_:)(v18);
        if (v57)
        {
          v58 = (*(uint64_t (**)(void))(v57 + 232))();
          v59 = *(_QWORD *)(v58 + 16);
          swift_retain();
          MEMORY[0x22076D160](v59, 0);
          *(_QWORD *)(v58 + 16) = v18;
          MEMORY[0x22076D160](v18, v58);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v60 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v60 + 16) = v17;
        swift_beginAccess();
        swift_weakAssign();
        v61 = String.init(cString:)();
        v63 = v62;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v64 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v65 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v63);
          if ((v66 & 1) != 0)
          {
            v67 = (uint64_t *)(*(_QWORD *)(v64 + 56) + 56 * v65);
            v401 = *v67;
            v404 = v67[1];
            v68 = v67[3];
            v395 = v67[2];
            v70 = v67[4];
            v69 = v67[5];
            v71 = v67[6];
            swift_bridgeObjectRelease();
LABEL_96:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v519 = v414;
            BYTE8(v519) = 0;
            *(_QWORD *)&v520 = v409;
            *((_QWORD *)&v520 + 1) = v401;
            *(_QWORD *)&v521 = v404;
            *((_QWORD *)&v521 + 1) = v395;
            *(_QWORD *)&v522 = v68;
            *((_QWORD *)&v522 + 1) = v70;
            *(_QWORD *)&v523 = v69;
            *((_QWORD *)&v523 + 1) = v71;
            v355 = v71;
            v361 = v68;
            if (v20 && REBindPointBoundComponent())
            {
              v163 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                v164 = swift_dynamicCastClassUnconditional();
LABEL_100:
                v165 = v164;
                goto LABEL_102;
              }
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_220:
                __break(1u);
                goto LABEL_221;
              }
              v244 = specialized static Entity.entityInfoType(_:)(v163);
              if (!v244)
              {
                v164 = makeEntity(for:)(v163);
                goto LABEL_100;
              }
              v165 = (*(uint64_t (**)(void))(v244 + 232))();
              v245 = *(_QWORD *)(v165 + 16);
              swift_retain();
              MEMORY[0x22076D160](v245, 0);
              *(_QWORD *)(v165 + 16) = v163;
              MEMORY[0x22076D160](v163, v165);
              swift_release();
            }
            else
            {
              v165 = 0;
            }
LABEL_102:
            specialized ActionEventData.action<A>()((uint64_t)v516);
            outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
            outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
            if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) != 1)
            {
              outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
              v342 = v457;
              v265 = v60;
              v268 = v165;
              v166 = v458;
              v313 = v458;
              v318 = v70;
              v167 = v459;
              v276 = v459;
              v349 = v460;
              v168 = v461;
              v169 = v462;
              v306 = v462;
              v323 = v69;
              v170 = v463;
              v301 = v463;
              v171 = v464;
              v172 = v465;
              v296 = v465;
              v173 = v467;
              v292 = v467;
              v174 = v468;
              v288 = v468;
              v175 = v469;
              v176 = v470;
              v280 = v461;
              v284 = v470;
              v260 = v471;
              v262 = v466;
              v335 = v472;
              v329 = v473;
              swift_retain();
              v177 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<BillboardAction>);
              v422 = v166;
              v423 = v167;
              v178 = v19;
              v424 = v349;
              v425 = v168;
              v426 = v169;
              v427 = v170;
              v428 = v171;
              v429 = v172;
              v430 = v262;
              v431 = v173;
              v432 = v174;
              v433 = v175;
              v434 = v176;
              v435 = v260;
              v436 = v335;
              v437 = v329;
              v272 = v177 & 1;
              v438 = v177 & 1;
              v421 = v342;
              v420[0] = v265;
              v439 = v268;
              v440 = v368;
              v441 = v21;
              v442 = v22;
              v443 = Strong;
              v444 = v373;
              v445 = v178;
              v446 = 0;
              v448 = 0;
              v447 = v383;
              v449 = v378;
              v450 = 0;
              v454 = v522;
              v455 = v523;
              v452 = v520;
              v453 = v521;
              v451 = v519;
              v456 = v390;
              swift_retain();
              swift_retain();
              a5(v420);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v474 = v265;
              v475 = v342;
              v476 = v313;
              v477 = v276;
              v478 = v349;
              v479 = v280;
              v480 = v306;
              v481 = v301;
              v482 = v171;
              v483 = v296;
              v484 = v262;
              v485 = v292;
              v486 = v288;
              v487 = v175;
              v488 = v284;
              v489 = v260;
              v490 = v335;
              v491 = v329;
              v492 = v272;
              v493 = v268;
              v494 = v368;
              v495 = v21;
              v496 = v22;
              v497 = Strong;
              v498 = v373;
              v499 = v178;
              v500 = 0;
              v502 = 0;
              v501 = v383;
              v503 = v378;
              goto LABEL_104;
            }
LABEL_185:
            swift_release();
            swift_release();
            swift_release();
LABEL_186:
            swift_release();
            return 0;
          }
          swift_bridgeObjectRelease();
        }
        v401 = 0;
        v404 = 0;
        v395 = 0;
        v68 = 0;
        v70 = 0;
        v69 = 0;
        v71 = 0;
        goto LABEL_96;
      }
LABEL_211:
      __break(1u);
      goto LABEL_212;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_186;
    case 4:
      v24 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v410 = *(_QWORD *)(a2 + 40);
      v415 = *(_QWORD *)(a2 + 32);
      v25 = *(_QWORD *)(a2 + 64);
      v374 = *(_QWORD *)(a2 + 56);
      v379 = *(_QWORD *)(a2 + 48);
      v26 = *(float *)(a2 + 72);
      v27 = *(float *)(a2 + 76);
      v369 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      v72 = specialized static Entity.entityInfoType(_:)(v24);
      if (v72)
      {
        v73 = (*(uint64_t (**)(void))(v72 + 232))();
        v74 = *(_QWORD *)(v73 + 16);
        swift_retain();
        MEMORY[0x22076D160](v74, 0);
        *(_QWORD *)(v73 + 16) = v24;
        MEMORY[0x22076D160](v24, v73);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v24);
      }
LABEL_41:
      type metadata accessor for AnimationPlaybackController();
      v75 = swift_allocObject();
      swift_weakInit();
      v385 = v75;
      *(_QWORD *)(v75 + 16) = v23;
      swift_beginAccess();
      swift_weakAssign();
      v76 = String.init(cString:)();
      v78 = v77;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v79 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_106;
      swift_bridgeObjectRetain();
      v80 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v78);
      if ((v81 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_106:
        v402 = 0;
        v405 = 0;
        v392 = 0;
        v396 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        goto LABEL_107;
      }
      v82 = (uint64_t *)(*(_QWORD *)(v79 + 56) + 56 * v80);
      v402 = *v82;
      v405 = v82[1];
      v83 = v82[3];
      v84 = v82[4];
      v392 = v82[5];
      v396 = v82[2];
      v85 = v82[6];
      swift_bridgeObjectRelease();
LABEL_107:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v519 = v415;
      BYTE8(v519) = 0;
      *(_QWORD *)&v520 = v410;
      *((_QWORD *)&v520 + 1) = v402;
      *(_QWORD *)&v521 = v405;
      *((_QWORD *)&v521 + 1) = v396;
      *(_QWORD *)&v522 = v83;
      *((_QWORD *)&v522 + 1) = v84;
      *(_QWORD *)&v523 = v392;
      *((_QWORD *)&v523 + 1) = v85;
      v356 = v85;
      v362 = v83;
      if (v25 && REBindPointBoundComponent())
      {
        v180 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v181 = swift_dynamicCastClassUnconditional();
LABEL_111:
          v182 = v181;
          goto LABEL_113;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v246 = specialized static Entity.entityInfoType(_:)(v180);
        if (!v246)
        {
          v181 = makeEntity(for:)(v180);
          goto LABEL_111;
        }
        v182 = (*(uint64_t (**)(void))(v246 + 232))();
        v247 = *(_QWORD *)(v182 + 16);
        swift_retain();
        MEMORY[0x22076D160](v247, 0);
        *(_QWORD *)(v182 + 16) = v180;
        MEMORY[0x22076D160](v180, v182);
        swift_release();
      }
      else
      {
        v182 = 0;
      }
LABEL_113:
      specialized ActionEventData.action<A>()((uint64_t)v516);
      outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
      outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
      if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) == 1)
        goto LABEL_185;
      outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
      v269 = v182;
      v343 = v457;
      v307 = v84;
      v183 = v458;
      v184 = v459;
      v285 = v459;
      v350 = v460;
      v185 = v461;
      v186 = v462;
      v277 = v462;
      v281 = v461;
      v187 = v463;
      v273 = v463;
      v188 = v464;
      v189 = v465;
      v297 = v465;
      v302 = v458;
      v190 = v466;
      v293 = v466;
      v191 = v467;
      v289 = v467;
      v336 = v468;
      v192 = v469;
      v324 = v471;
      v330 = v470;
      v319 = v472;
      v314 = v473;
      swift_retain();
      v422 = v183;
      v423 = v184;
      v424 = v350;
      v425 = v185;
      v426 = v186;
      v427 = v187;
      v428 = v188;
      v429 = v189;
      v430 = v190;
      v431 = v191;
      v432 = v336;
      v433 = v192;
      v434 = v330;
      v435 = v324;
      v436 = v319;
      v437 = v314;
      LOBYTE(v185) = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<BillboardAction>) & 1;
      v438 = v185;
      v421 = v343;
      v420[0] = v385;
      v439 = v269;
      v440 = v369;
      v441 = v26;
      v442 = v27;
      v443 = Strong;
      v444 = v374;
      v445 = -1.0;
      v446 = 0;
      v448 = 0;
      v447 = 0xBFF0000000000000;
      v449 = 0xBFF0000000000000;
      v450 = 0;
      v454 = v522;
      v455 = v523;
      v452 = v520;
      v453 = v521;
      v451 = v519;
      v456 = v379;
      swift_retain();
      swift_retain();
      a5(v420);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v474 = v385;
      v475 = v343;
      v476 = v302;
      v477 = v285;
      v478 = v350;
      v479 = v281;
      v480 = v277;
      v481 = v273;
      v482 = v188;
      v483 = v297;
      v484 = v293;
      v485 = v289;
      v486 = v336;
      v487 = v192;
      v488 = v330;
      v489 = v324;
      v490 = v319;
      v491 = v314;
      v492 = v185;
      v493 = v269;
      v494 = v369;
      v495 = v26;
      v496 = v27;
      v497 = Strong;
      v498 = v374;
      v499 = -1.0;
      v500 = 0;
      v502 = 0;
      v501 = 0xBFF0000000000000;
      v503 = 0xBFF0000000000000;
      v504 = 0;
      v506 = 0;
      v505 = v415;
      v507 = v410;
      v508 = v402;
      v509 = v405;
      v510 = v396;
      v511 = v362;
      v512 = v307;
      v513 = v392;
      v514 = v356;
      v515 = v379;
LABEL_190:
      outlined release of ActionEvent<BillboardAction>((uint64_t)&v474);
      return 0;
    case 8:
      v29 = *(_QWORD *)a2;
      v28 = *(_QWORD *)(a2 + 8);
      v411 = *(_QWORD *)(a2 + 40);
      v416 = *(_QWORD *)(a2 + 32);
      v30 = *(_QWORD *)(a2 + 56);
      v394 = *(_QWORD *)(a2 + 48);
      v31 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v380 = *(_BYTE *)(a2 + 72);
      v384 = *(_QWORD *)(a2 + 88);
      v387 = *(_QWORD *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v86 = specialized static Entity.entityInfoType(_:)(v29);
        if (v86)
        {
          v87 = (*(uint64_t (**)(void))(v86 + 232))();
          v88 = *(_QWORD *)(v87 + 16);
          swift_retain();
          MEMORY[0x22076D160](v88, 0);
          *(_QWORD *)(v87 + 16) = v29;
          MEMORY[0x22076D160](v29, v87);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v29);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v89 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v89 + 16) = v28;
      swift_beginAccess();
      swift_weakAssign();
      v90 = String.init(cString:)();
      v92 = v91;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v93 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_117;
      swift_bridgeObjectRetain();
      v94 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v92);
      if ((v95 & 1) != 0)
      {
        v96 = (uint64_t *)(*(_QWORD *)(v93 + 56) + 56 * v94);
        v97 = v96[2];
        v403 = *v96;
        v406 = v96[1];
        v98 = v96[3];
        v99 = v96[4];
        v101 = v96[5];
        v100 = v96[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_117:
        v403 = 0;
        v406 = 0;
        v97 = 0;
        v98 = 0;
        v99 = 0;
        v101 = 0;
        v100 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v519 = v416;
      BYTE8(v519) = 0;
      *(_QWORD *)&v520 = v411;
      *((_QWORD *)&v520 + 1) = v403;
      *(_QWORD *)&v521 = v406;
      *((_QWORD *)&v521 + 1) = v97;
      *(_QWORD *)&v522 = v98;
      *((_QWORD *)&v522 + 1) = v99;
      v370 = v101;
      v375 = v98;
      *(_QWORD *)&v523 = v101;
      *((_QWORD *)&v523 + 1) = v100;
      if (v30 && REBindPointBoundComponent())
      {
        v193 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v194 = swift_dynamicCastClassUnconditional();
LABEL_122:
          v195 = v194;
          goto LABEL_124;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v248 = specialized static Entity.entityInfoType(_:)(v193);
        if (!v248)
        {
          v194 = makeEntity(for:)(v193);
          goto LABEL_122;
        }
        v195 = (*(uint64_t (**)(void))(v248 + 232))();
        v249 = *(_QWORD *)(v195 + 16);
        swift_retain();
        MEMORY[0x22076D160](v249, 0);
        *(_QWORD *)(v195 + 16) = v193;
        MEMORY[0x22076D160](v193, v195);
        swift_release();
      }
      else
      {
        v195 = 0;
      }
LABEL_124:
      specialized ActionEventData.action<A>()((uint64_t)v516);
      outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
      outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
      if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) != 1)
      {
        outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
        v331 = v99;
        v337 = v97;
        v357 = v457;
        v196 = v458;
        v197 = v459;
        v298 = v459;
        v363 = v460;
        v274 = v89;
        v278 = v195;
        v198 = v461;
        v344 = v100;
        v199 = v462;
        v290 = v462;
        v294 = v461;
        v200 = v463;
        v286 = v463;
        v201 = v464;
        v270 = v465;
        v202 = v466;
        v320 = v466;
        v325 = v458;
        v203 = v467;
        v315 = v467;
        v204 = v468;
        v308 = v468;
        v205 = v469;
        v263 = v470;
        v206 = v471;
        v303 = v471;
        v266 = v472;
        v351 = v473;
        swift_retain();
        v207 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<BillboardAction>);
        v422 = v196;
        v423 = v197;
        v424 = v363;
        v425 = v198;
        v426 = v199;
        v427 = v200;
        v428 = v201;
        v429 = v270;
        v430 = v202;
        v431 = v203;
        v432 = v204;
        v433 = v205;
        v434 = v263;
        v435 = v206;
        v436 = v266;
        v437 = v351;
        v282 = v207 & 1;
        v438 = v207 & 1;
        v421 = v357;
        v420[0] = v274;
        v439 = v278;
        v440 = v380;
        v441 = v31;
        v442 = v32;
        v445 = 0.0;
        v443 = Strong;
        v444 = 0;
        v446 = 1;
        v448 = 0;
        v447 = v387;
        v449 = v384;
        v450 = 0;
        v454 = v522;
        v455 = v523;
        v452 = v520;
        v453 = v521;
        v451 = v519;
        v456 = v394;
        swift_retain();
        swift_retain();
        a5(v420);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v474 = v274;
        v475 = v357;
        v476 = v325;
        v477 = v298;
        v478 = v363;
        v479 = v294;
        v480 = v290;
        v481 = v286;
        v482 = v201;
        v483 = v270;
        v484 = v320;
        v485 = v315;
        v486 = v308;
        v487 = v205;
        v488 = v263;
        v489 = v303;
        v490 = v266;
        v491 = v351;
        v492 = v282;
        v493 = v278;
        v494 = v380;
        v495 = v31;
        v496 = v32;
        v499 = 0.0;
        v497 = Strong;
        v498 = 0;
        v500 = 1;
        v502 = 0;
        v501 = v387;
        v503 = v384;
        v504 = 0;
        v506 = 0;
        v505 = v416;
        v507 = v411;
        v508 = v403;
        v509 = v406;
        v510 = v337;
        v511 = v375;
        v512 = v331;
        v513 = v370;
        v514 = v344;
        v179 = v394;
        goto LABEL_189;
      }
      goto LABEL_185;
    case 16:
      v34 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v391 = *(_QWORD *)(a2 + 32);
      v412 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v400 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v102 = specialized static Entity.entityInfoType(_:)(v34);
        if (v102)
        {
          v103 = (*(uint64_t (**)(void))(v102 + 232))();
          v104 = *(_QWORD *)(v103 + 16);
          swift_retain();
          MEMORY[0x22076D160](v104, 0);
          *(_QWORD *)(v103 + 16) = v34;
          MEMORY[0x22076D160](v34, v103);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v105 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v105 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v106 = String.init(cString:)();
      v108 = v107;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v109 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_127;
      swift_bridgeObjectRetain();
      v110 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v108);
      if ((v111 & 1) != 0)
      {
        v112 = (uint64_t *)(*(_QWORD *)(v109 + 56) + 56 * v110);
        v113 = v112[1];
        v407 = *v112;
        v115 = v112[2];
        v114 = v112[3];
        v116 = v112[4];
        v117 = v112[5];
        v118 = v112[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_127:
        v407 = 0;
        v113 = 0;
        v115 = 0;
        v114 = 0;
        v116 = 0;
        v117 = 0;
        v118 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v519 = 0;
      BYTE8(v519) = 0;
      *(_QWORD *)&v520 = v412;
      *((_QWORD *)&v520 + 1) = v407;
      *(_QWORD *)&v521 = v113;
      *((_QWORD *)&v521 + 1) = v115;
      *(_QWORD *)&v522 = v114;
      *((_QWORD *)&v522 + 1) = v116;
      *(_QWORD *)&v523 = v117;
      *((_QWORD *)&v523 + 1) = v118;
      v388 = v114;
      if (!v35)
        goto LABEL_184;
      if (!REBindPointBoundComponent())
        goto LABEL_140;
      v397 = v117;
      v208 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_138;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_181;
      __break(1u);
LABEL_133:
      swift_bridgeObjectRelease();
LABEL_134:
      v407 = 0;
      v113 = 0;
      v115 = 0;
      v129 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
LABEL_135:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v519 = 0;
      BYTE8(v519) = 0;
      *(_QWORD *)&v520 = v412;
      *((_QWORD *)&v520 + 1) = v407;
      *(_QWORD *)&v521 = v113;
      *((_QWORD *)&v521 + 1) = v115;
      *(_QWORD *)&v522 = v129;
      *((_QWORD *)&v522 + 1) = v116;
      *(_QWORD *)&v523 = v117;
      *((_QWORD *)&v523 + 1) = v118;
      v388 = v129;
      if (!v35)
        goto LABEL_184;
      if (!REBindPointBoundComponent())
      {
LABEL_140:
        v35 = 0;
LABEL_184:
        specialized ActionEventData.action<A>()((uint64_t)v516);
        outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
        outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
        if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) == 1)
          goto LABEL_185;
        outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
        v299 = v457;
        v399 = v117;
        v252 = v458;
        v360 = v459;
        v354 = v460;
        v340 = v462;
        v347 = v461;
        v376 = v115;
        v253 = v463;
        v254 = v464;
        v333 = v465;
        v255 = v466;
        v327 = v467;
        v322 = v468;
        v256 = v469;
        v311 = v471;
        v317 = v470;
        v304 = v472;
        v366 = v473;
        v421 = v457;
        v422 = v458;
        v423 = v459;
        v424 = v460;
        v425 = v461;
        v426 = v462;
        v427 = v463;
        v428 = v464;
        v429 = v465;
        v430 = v466;
        v431 = v467;
        v432 = v468;
        v433 = v469;
        v434 = v470;
        v435 = v471;
        v436 = v472;
        v437 = v473;
        v438 = 1;
        v420[0] = v105;
        v439 = v35;
        v440 = 0;
        v442 = 0.0;
        v441 = 0.0;
        v445 = 0.0;
        v443 = Strong;
        v444 = 0;
        v446 = 1;
        v448 = 0;
        v447 = v391;
        v449 = 0;
        v450 = 1;
        v453 = v521;
        v454 = v522;
        v455 = v523;
        v451 = v519;
        v452 = v520;
        v456 = v400;
        swift_retain();
        swift_retain();
        a5(v420);
        swift_release();
        swift_release();
        swift_release();
        v474 = v105;
        v475 = v299;
        v476 = v252;
        v477 = v360;
        v478 = v354;
        v479 = v347;
        v480 = v340;
        v481 = v253;
        v482 = v254;
        v483 = v333;
        v484 = v255;
        v485 = v327;
        v486 = v322;
        v487 = v256;
        v488 = v317;
        v489 = v311;
        v490 = v304;
        v491 = v366;
        v492 = 1;
        v493 = v35;
        v494 = 0;
        v496 = 0.0;
        v495 = 0.0;
        v499 = 0.0;
        v497 = Strong;
        v498 = 0;
        v500 = 1;
        v502 = 0;
        v501 = v391;
        v503 = 0;
        v504 = 1;
        v506 = 0;
        v505 = 0;
        v507 = v412;
        v508 = v407;
        v509 = v113;
        v510 = v376;
        v511 = v388;
        v512 = v116;
        v513 = v399;
        v239 = v118;
LABEL_188:
        v514 = v239;
        v179 = v400;
        goto LABEL_189;
      }
      v397 = v117;
      v208 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
LABEL_138:
        type metadata accessor for Entity();
        v209 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
LABEL_181:
        v250 = specialized static Entity.entityInfoType(_:)(v208);
        if (v250)
        {
          v35 = (*(uint64_t (**)(void))(v250 + 232))();
          v251 = *(_QWORD *)(v35 + 16);
          swift_retain();
          MEMORY[0x22076D160](v251, 0);
          *(_QWORD *)(v35 + 16) = v208;
          MEMORY[0x22076D160](v208, v35);
          swift_release();
          goto LABEL_183;
        }
        v209 = makeEntity(for:)(v208);
      }
      v35 = v209;
LABEL_183:
      v117 = v397;
      goto LABEL_184;
    case 32:
      v37 = *(_QWORD *)a2;
      v36 = *(_QWORD *)(a2 + 8);
      v391 = *(_QWORD *)(a2 + 32);
      v412 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v400 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v119 = specialized static Entity.entityInfoType(_:)(v37);
        if (v119)
        {
          v120 = (*(uint64_t (**)(void))(v119 + 232))();
          v121 = *(_QWORD *)(v120 + 16);
          swift_retain();
          MEMORY[0x22076D160](v121, 0);
          *(_QWORD *)(v120 + 16) = v37;
          MEMORY[0x22076D160](v37, v120);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v37);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v105 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v105 + 16) = v36;
      swift_beginAccess();
      swift_weakAssign();
      v122 = String.init(cString:)();
      v124 = v123;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v125 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_134;
      swift_bridgeObjectRetain();
      v126 = specialized __RawDictionaryStorage.find<A>(_:)(v122, v124);
      if ((v127 & 1) == 0)
        goto LABEL_133;
      v128 = (uint64_t *)(*(_QWORD *)(v125 + 56) + 56 * v126);
      v113 = v128[1];
      v407 = *v128;
      v115 = v128[2];
      v129 = v128[3];
      v116 = v128[4];
      v117 = v128[5];
      v118 = v128[6];
      swift_bridgeObjectRelease();
      goto LABEL_135;
    case 64:
      v39 = *(_QWORD *)a2;
      v38 = *(_QWORD *)(a2 + 8);
      v40 = *(_QWORD *)(a2 + 24);
      v41 = *(_QWORD *)(a2 + 40);
      v400 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v130 = specialized static Entity.entityInfoType(_:)(v39);
        if (v130)
        {
          v131 = (*(uint64_t (**)(void))(v130 + 232))();
          v132 = *(_QWORD *)(v131 + 16);
          swift_retain();
          MEMORY[0x22076D160](v132, 0);
          *(_QWORD *)(v131 + 16) = v39;
          MEMORY[0x22076D160](v39, v131);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v39);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v133 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v133 + 16) = v38;
      swift_beginAccess();
      swift_weakAssign();
      if (v41 && REBindPointBoundComponent())
      {
        v134 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v135 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v136 = v135;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v240 = specialized static Entity.entityInfoType(_:)(v134);
        if (!v240)
        {
          v135 = makeEntity(for:)(v134);
          goto LABEL_77;
        }
        v136 = (*(uint64_t (**)(void))(v240 + 232))();
        v241 = *(_QWORD *)(v136 + 16);
        swift_retain();
        MEMORY[0x22076D160](v241, 0);
        *(_QWORD *)(v136 + 16) = v134;
        MEMORY[0x22076D160](v134, v136);
        swift_release();
      }
      else
      {
        v136 = 0;
      }
LABEL_79:
      v137 = String.init(cString:)();
      v139 = v138;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v140 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v141 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v139);
        if ((v142 & 1) != 0)
        {
          v143 = (uint64_t *)(*(_QWORD *)(v140 + 56) + 56 * v141);
          v144 = *v143;
          v145 = v143[1];
          v147 = v143[2];
          v146 = v143[3];
          v413 = v143[5];
          v417 = v143[4];
          v408 = v143[6];
          swift_bridgeObjectRelease();
LABEL_143:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v519 = 0;
          BYTE8(v519) = 0;
          *(_QWORD *)&v520 = v40;
          *((_QWORD *)&v520 + 1) = v144;
          *(_QWORD *)&v521 = v145;
          *((_QWORD *)&v521 + 1) = v147;
          v398 = v146;
          *(_QWORD *)&v522 = v146;
          *((_QWORD *)&v522 + 1) = v417;
          *(_QWORD *)&v523 = v413;
          *((_QWORD *)&v523 + 1) = v408;
          specialized ActionEventData.action<A>()((uint64_t)v516);
          outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
          outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
          if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) == 1)
            goto LABEL_185;
          outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
          v309 = v457;
          v210 = v458;
          v389 = v40;
          v393 = v147;
          v211 = v459;
          v364 = v460;
          v358 = v461;
          v352 = v462;
          v345 = v463;
          v212 = v464;
          v381 = v145;
          v386 = v144;
          v338 = v465;
          v213 = v466;
          v214 = v467;
          v332 = v468;
          v215 = v469;
          v321 = v471;
          v326 = v470;
          v316 = v472;
          v371 = v473;
          v421 = v457;
          v422 = v458;
          v423 = v459;
          v424 = v460;
          v425 = v461;
          v426 = v462;
          v427 = v463;
          v428 = v464;
          v429 = v465;
          v430 = v466;
          v431 = v467;
          v432 = v468;
          v433 = v469;
          v434 = v470;
          v435 = v471;
          v436 = v472;
          v437 = v473;
          v216 = Strong;
          v438 = 1;
          v420[0] = v133;
          v439 = v136;
          v440 = 0;
          v442 = 0.0;
          v441 = 0.0;
          v445 = 0.0;
          v443 = Strong;
          v444 = 0;
          v446 = 1;
          v448 = 1;
          v447 = 0;
          v449 = 0;
          v450 = 1;
          v453 = v521;
          v454 = v522;
          v455 = v523;
          v451 = v519;
          v452 = v520;
          v456 = v400;
          swift_retain();
          swift_retain();
          a5(v420);
          swift_release();
          swift_release();
          swift_release();
          v474 = v133;
          v475 = v309;
          v476 = v210;
          v477 = v211;
          v478 = v364;
          v479 = v358;
          v480 = v352;
          v481 = v345;
          v482 = v212;
          v483 = v338;
          v484 = v213;
          v485 = v214;
LABEL_164:
          v486 = v332;
          v487 = v215;
          v488 = v326;
          v489 = v321;
          v490 = v316;
          v491 = v371;
          v492 = 1;
          v493 = v136;
          v494 = 0;
          v496 = 0.0;
          v495 = 0.0;
          v499 = 0.0;
          v497 = v216;
          v498 = 0;
          v500 = 1;
          v502 = 1;
          v501 = 0;
          v503 = 0;
          v504 = 1;
          v506 = 0;
          v505 = 0;
          v507 = v389;
          v508 = v386;
          v509 = v381;
          v510 = v393;
          v511 = v398;
          v512 = v417;
          v513 = v413;
          v239 = v408;
          goto LABEL_188;
        }
        swift_bridgeObjectRelease();
      }
      v144 = 0;
      v145 = 0;
      v147 = 0;
      v146 = 0;
      v413 = 0;
      v417 = 0;
      v408 = 0;
      goto LABEL_143;
    default:
      if (a4 != 128)
        goto LABEL_186;
      v14 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 40);
      v400 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v217 = specialized static Entity.entityInfoType(_:)(v14);
        if (v217)
        {
          v218 = (*(uint64_t (**)(void))(v217 + 232))();
          v219 = *(_QWORD *)(v218 + 16);
          swift_retain();
          MEMORY[0x22076D160](v219, 0);
          *(_QWORD *)(v218 + 16) = v14;
          MEMORY[0x22076D160](v14, v218);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v220 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v220 + 16) = v13;
      swift_beginAccess();
      swift_weakAssign();
      if (v16 && REBindPointBoundComponent())
      {
        v221 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v222 = swift_dynamicCastClassUnconditional();
LABEL_152:
          v136 = v222;
          goto LABEL_154;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          JUMPOUT(0x21BB56C78);
        }
        v257 = specialized static Entity.entityInfoType(_:)(v221);
        if (!v257)
        {
          v222 = makeEntity(for:)(v221);
          goto LABEL_152;
        }
        v136 = (*(uint64_t (**)(void))(v257 + 232))();
        v258 = *(_QWORD *)(v136 + 16);
        swift_retain();
        MEMORY[0x22076D160](v258, 0);
        *(_QWORD *)(v136 + 16) = v221;
        MEMORY[0x22076D160](v221, v136);
        swift_release();
      }
      else
      {
        v136 = 0;
      }
LABEL_154:
      v223 = String.init(cString:)();
      v225 = v224;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v226 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v227 = specialized __RawDictionaryStorage.find<A>(_:)(v223, v225);
        if ((v228 & 1) != 0)
        {
          v229 = (uint64_t *)(*(_QWORD *)(v226 + 56) + 56 * v227);
          v230 = *v229;
          v231 = v229[1];
          v233 = v229[2];
          v232 = v229[3];
          v413 = v229[5];
          v417 = v229[4];
          v408 = v229[6];
          swift_bridgeObjectRelease();
LABEL_161:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v519 = 0;
          BYTE8(v519) = 0;
          *(_QWORD *)&v520 = v15;
          *((_QWORD *)&v520 + 1) = v230;
          *(_QWORD *)&v521 = v231;
          *((_QWORD *)&v521 + 1) = v233;
          v398 = v232;
          *(_QWORD *)&v522 = v232;
          *((_QWORD *)&v522 + 1) = v417;
          *(_QWORD *)&v523 = v413;
          *((_QWORD *)&v523 + 1) = v408;
          specialized ActionEventData.action<A>()((uint64_t)v516);
          outlined init with take of Transform?((uint64_t)v516, (uint64_t)v517, &demangling cache variable for type metadata for BillboardAction?);
          outlined init with take of Transform?((uint64_t)v517, (uint64_t)v518, &demangling cache variable for type metadata for BillboardAction?);
          if (_s17RealityFoundation15BillboardActionVSgWOg((uint64_t)v518) == 1)
            goto LABEL_185;
          outlined init with take of Transform?((uint64_t)v517, (uint64_t)&v457, &demangling cache variable for type metadata for BillboardAction?);
          v310 = v457;
          v234 = v458;
          v389 = v15;
          v393 = v233;
          v235 = v459;
          v365 = v460;
          v381 = v231;
          v236 = v461;
          v359 = v462;
          v353 = v463;
          v237 = v464;
          v386 = v230;
          v346 = v465;
          v238 = v466;
          v339 = v467;
          v332 = v468;
          v215 = v469;
          v321 = v471;
          v326 = v470;
          v316 = v472;
          v371 = v473;
          v421 = v457;
          v422 = v458;
          v423 = v459;
          v424 = v460;
          v425 = v461;
          v426 = v462;
          v427 = v463;
          v428 = v464;
          v429 = v465;
          v430 = v466;
          v431 = v467;
          v432 = v468;
          v433 = v469;
          v434 = v470;
          v435 = v471;
          v436 = v472;
          v437 = v473;
          v216 = Strong;
          v438 = 1;
          v420[0] = v220;
          v439 = v136;
          v440 = 0;
          v442 = 0.0;
          v441 = 0.0;
          v445 = 0.0;
          v443 = Strong;
          v444 = 0;
          v446 = 1;
          v448 = 1;
          v447 = 0;
          v449 = 0;
          v450 = 1;
          v453 = v521;
          v454 = v522;
          v455 = v523;
          v451 = v519;
          v452 = v520;
          v456 = v400;
          swift_retain();
          swift_retain();
          swift_retain();
          a5(v420);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v474 = v220;
          v475 = v310;
          v476 = v234;
          v477 = v235;
          v478 = v365;
          v479 = v236;
          v480 = v359;
          v481 = v353;
          v482 = v237;
          v483 = v346;
          v484 = v238;
          v485 = v339;
          goto LABEL_164;
        }
        swift_bridgeObjectRelease();
      }
      v230 = 0;
      v231 = 0;
      v233 = 0;
      v232 = 0;
      v413 = 0;
      v417 = 0;
      v408 = 0;
      goto LABEL_161;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t Entity;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  double v212;
  double v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  double v223;
  double v224;
  double v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  double v234;
  double v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  double v245;
  double v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t Strong;
  _QWORD v347[2];
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  char v354;
  char v355;
  char v356;
  uint64_t v357;
  char v358;
  double v359;
  double v360;
  uint64_t v361;
  uint64_t v362;
  double v363;
  char v364;
  unint64_t v365;
  char v366;
  unint64_t v367;
  char v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  char v382;
  char v383;
  char v384;
  uint64_t v385;
  char v386;
  double v387;
  double v388;
  uint64_t v389;
  uint64_t v390;
  double v391;
  char v392;
  unint64_t v393;
  char v394;
  unint64_t v395;
  char v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _DWORD v408[4];
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned int v413;
  unsigned __int16 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v334 = *(_QWORD *)(a2 + 32);
      v339 = *(_QWORD *)(a2 + 40);
      v309 = *(_QWORD *)(a2 + 48);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(float *)(a2 + 72);
      v11 = *(float *)(a2 + 76);
      v285 = *(_BYTE *)(a2 + 80);
      v291 = *(_QWORD *)(a2 + 88);
      v297 = *(_QWORD *)(a2 + 96);
      v303 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v43 = specialized static Entity.entityInfoType(_:)(v8);
        if (v43)
        {
          v44 = (*(uint64_t (**)(void))(v43 + 232))();
          v45 = *(_QWORD *)(v44 + 16);
          swift_retain();
          MEMORY[0x22076D160](v45, 0);
          *(_QWORD *)(v44 + 16) = v8;
          MEMORY[0x22076D160](v8, v44);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v8);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v46 = swift_allocObject();
        swift_weakInit();
        v315 = v46;
        *(_QWORD *)(v46 + 16) = v7;
        swift_beginAccess();
        swift_weakAssign();
        v47 = String.init(cString:)();
        v49 = v48;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v50 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v51 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v49);
          if ((v52 & 1) != 0)
          {
            v53 = (uint64_t *)(*(_QWORD *)(v50 + 56) + 56 * v51);
            v54 = v53[2];
            v326 = *v53;
            v331 = v53[1];
            v55 = v53[3];
            v320 = v53[4];
            v57 = v53[5];
            v56 = v53[6];
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
          swift_bridgeObjectRelease();
        }
        v326 = 0;
        v331 = 0;
        v54 = 0;
        v55 = 0;
        v320 = 0;
        v57 = 0;
        v56 = 0;
LABEL_86:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v415 = v334;
        BYTE8(v415) = 0;
        *(_QWORD *)&v416 = v339;
        *((_QWORD *)&v416 + 1) = v326;
        *(_QWORD *)&v417 = v331;
        *((_QWORD *)&v417 + 1) = v54;
        *(_QWORD *)&v418 = v55;
        *((_QWORD *)&v418 + 1) = v320;
        *(_QWORD *)&v419 = v57;
        *((_QWORD *)&v419 + 1) = v56;
        v277 = v55;
        v281 = v54;
        if (!v9 || !REBindPointBoundComponent())
        {
          v155 = 0;
          goto LABEL_162;
        }
        v152 = v57;
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v154 = swift_dynamicCastClassUnconditional();
          goto LABEL_90;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v204 = specialized static Entity.entityInfoType(_:)(Entity);
          if (v204)
          {
            v155 = (*(uint64_t (**)(void))(v204 + 232))();
            v205 = *(_QWORD *)(v155 + 16);
            swift_retain();
            MEMORY[0x22076D160](v205, 0);
            *(_QWORD *)(v155 + 16) = Entity;
            MEMORY[0x22076D160](Entity, v155);
            swift_release();
            goto LABEL_161;
          }
          v154 = makeEntity(for:)(Entity);
LABEL_90:
          v155 = v154;
LABEL_161:
          v57 = v152;
LABEL_162:
          specialized ActionEventData.action<A>()((uint64_t)v408);
          v206 = v413 | ((unint64_t)v414 << 32);
          if ((v206 & 0xFF0000000000) != 0x20000000000)
          {
            v272 = v56;
            v274 = v412;
            v207 = v411;
            v208 = v408[0];
            v262 = v408[0];
            v256 = v411;
            v209 = v409;
            v259 = v409;
            v210 = v410;
            v265 = v410;
            swift_retain();
            v211 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SpinAction>);
            v370 = v416;
            v371 = v417;
            v372 = v418;
            v373 = v419;
            v212 = v10;
            v213 = v11;
            v348 = v208;
            v349 = v209;
            v350 = v210;
            v351 = v207;
            v352 = v274;
            v353 = v206;
            v354 = BYTE4(v206);
            v269 = v57;
            v355 = BYTE5(v206) & 1;
            LOBYTE(v208) = v211 & 1;
            v356 = v211 & 1;
            v347[0] = v315;
            v357 = v155;
            v358 = v285;
            v359 = v212;
            v360 = v213;
            v214 = v297;
            v361 = Strong;
            v362 = v303;
            v363 = -1.0;
            v364 = 0;
            v365 = v291;
            v366 = 0;
            v367 = v297;
            v368 = 0;
            v369 = v415;
            v374 = v309;
            swift_retain();
            swift_retain();
            a5(v347);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v375 = v315;
            v376 = v262;
            v377 = v259;
            v378 = v265;
            v379 = v256;
            v380 = v274;
            v381 = v206;
            v382 = BYTE4(v206);
            v383 = BYTE5(v206) & 1;
            v384 = v208;
            v385 = v155;
            v386 = v285;
            v387 = v212;
            v388 = v213;
            v389 = Strong;
            v390 = v303;
            v391 = -1.0;
            v392 = 0;
            v393 = v291;
LABEL_170:
            v394 = 0;
            v395 = v214;
            v396 = 0;
            v397 = v334;
            v398 = 0;
            v399 = v339;
            v400 = v326;
            v401 = v331;
            v402 = v281;
            v403 = v277;
            v404 = v320;
            v405 = v269;
            v406 = v272;
            v201 = v309;
            goto LABEL_192;
          }
          goto LABEL_189;
        }
        goto LABEL_222;
      }
      __break(1u);
      goto LABEL_214;
    case 2:
      v18 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v334 = *(_QWORD *)(a2 + 32);
      v339 = *(_QWORD *)(a2 + 40);
      v19 = *(float *)(a2 + 56);
      v292 = *(_QWORD *)(a2 + 72);
      v298 = *(_QWORD *)(a2 + 64);
      v20 = *(_QWORD *)(a2 + 88);
      v309 = *(_QWORD *)(a2 + 80);
      v21 = *(float *)(a2 + 96);
      v22 = *(float *)(a2 + 100);
      v286 = *(_BYTE *)(a2 + 104);
      v304 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v58 = specialized static Entity.entityInfoType(_:)(v18);
        if (v58)
        {
          v59 = (*(uint64_t (**)(void))(v58 + 232))();
          v60 = *(_QWORD *)(v59 + 16);
          swift_retain();
          MEMORY[0x22076D160](v60, 0);
          *(_QWORD *)(v59 + 16) = v18;
          MEMORY[0x22076D160](v18, v59);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v61 = swift_allocObject();
        swift_weakInit();
        v316 = v61;
        *(_QWORD *)(v61 + 16) = v17;
        swift_beginAccess();
        swift_weakAssign();
        v62 = String.init(cString:)();
        v64 = v63;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v65 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v66 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v64);
          if ((v67 & 1) != 0)
          {
            v68 = (uint64_t *)(*(_QWORD *)(v65 + 56) + 56 * v66);
            v69 = v68[2];
            v326 = *v68;
            v331 = v68[1];
            v70 = v68[3];
            v320 = v68[4];
            v72 = v68[5];
            v71 = v68[6];
            swift_bridgeObjectRelease();
LABEL_94:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v415 = v334;
            BYTE8(v415) = 0;
            *(_QWORD *)&v416 = v339;
            *((_QWORD *)&v416 + 1) = v326;
            *(_QWORD *)&v417 = v331;
            *((_QWORD *)&v417 + 1) = v69;
            *(_QWORD *)&v418 = v70;
            *((_QWORD *)&v418 + 1) = v320;
            *(_QWORD *)&v419 = v72;
            *((_QWORD *)&v419 + 1) = v71;
            v277 = v70;
            v281 = v69;
            if (!v20 || !REBindPointBoundComponent())
            {
              v159 = 0;
              goto LABEL_168;
            }
            v156 = v72;
            v157 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v158 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_223:
                __break(1u);
                goto LABEL_224;
              }
              v215 = specialized static Entity.entityInfoType(_:)(v157);
              if (v215)
              {
                v159 = (*(uint64_t (**)(void))(v215 + 232))();
                v216 = *(_QWORD *)(v159 + 16);
                swift_retain();
                MEMORY[0x22076D160](v216, 0);
                *(_QWORD *)(v159 + 16) = v157;
                MEMORY[0x22076D160](v157, v159);
                swift_release();
                goto LABEL_167;
              }
              v158 = makeEntity(for:)(v157);
            }
            v159 = v158;
LABEL_167:
            v72 = v156;
LABEL_168:
            specialized ActionEventData.action<A>()((uint64_t)v408);
            v217 = v413 | ((unint64_t)v414 << 32);
            if ((v217 & 0xFF0000000000) != 0x20000000000)
            {
              v272 = v71;
              v275 = v412;
              v218 = v411;
              v219 = v408[0];
              v263 = v408[0];
              v257 = v411;
              v220 = v409;
              v260 = v409;
              v221 = v410;
              v266 = v410;
              swift_retain();
              v222 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SpinAction>);
              v370 = v416;
              v371 = v417;
              v372 = v418;
              v373 = v419;
              v223 = v21;
              v224 = v22;
              v225 = v19;
              v348 = v219;
              v349 = v220;
              v350 = v221;
              v351 = v218;
              v352 = v275;
              v353 = v217;
              v354 = BYTE4(v217);
              v269 = v72;
              v355 = BYTE5(v217) & 1;
              LOBYTE(v219) = v222 & 1;
              v356 = v222 & 1;
              v347[0] = v316;
              v357 = v159;
              v358 = v286;
              v359 = v223;
              v360 = v224;
              v214 = v298;
              v361 = Strong;
              v362 = v292;
              v363 = v225;
              v364 = 0;
              v365 = v304;
              v366 = 0;
              v367 = v298;
              v368 = 0;
              v369 = v415;
              v374 = v309;
              swift_retain();
              swift_retain();
              a5(v347);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v375 = v316;
              v376 = v263;
              v377 = v260;
              v378 = v266;
              v379 = v257;
              v380 = v275;
              v381 = v217;
              v382 = BYTE4(v217);
              v383 = BYTE5(v217) & 1;
              v384 = v219;
              v385 = v159;
              v386 = v286;
              v387 = v223;
              v388 = v224;
              v389 = Strong;
              v390 = v292;
              v391 = v225;
              v392 = 0;
              v393 = v304;
              goto LABEL_170;
            }
LABEL_189:
            swift_release();
            swift_release();
            swift_release();
LABEL_190:
            swift_release();
            return 0;
          }
          swift_bridgeObjectRelease();
        }
        v326 = 0;
        v331 = 0;
        v69 = 0;
        v70 = 0;
        v320 = 0;
        v72 = 0;
        v71 = 0;
        goto LABEL_94;
      }
LABEL_214:
      __break(1u);
      goto LABEL_215;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_190;
    case 4:
      v24 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v335 = *(_QWORD *)(a2 + 32);
      v340 = *(_QWORD *)(a2 + 40);
      v313 = *(_QWORD *)(a2 + 48);
      v25 = *(_QWORD *)(a2 + 64);
      v305 = *(_QWORD *)(a2 + 56);
      v26 = *(float *)(a2 + 72);
      v27 = *(float *)(a2 + 76);
      v299 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v73 = specialized static Entity.entityInfoType(_:)(v24);
        if (v73)
        {
          v74 = (*(uint64_t (**)(void))(v73 + 232))();
          v75 = *(_QWORD *)(v74 + 16);
          swift_retain();
          MEMORY[0x22076D160](v75, 0);
          *(_QWORD *)(v74 + 16) = v24;
          MEMORY[0x22076D160](v24, v74);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v24);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v76 = swift_allocObject();
        swift_weakInit();
        v311 = v76;
        *(_QWORD *)(v76 + 16) = v23;
        swift_beginAccess();
        swift_weakAssign();
        v77 = String.init(cString:)();
        v79 = v78;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v80 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v81 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v79);
          if ((v82 & 1) != 0)
          {
            v83 = (uint64_t *)(*(_QWORD *)(v80 + 56) + 56 * v81);
            v84 = v83[2];
            v327 = *v83;
            v332 = v83[1];
            v85 = v83[3];
            v321 = v83[4];
            v87 = v83[5];
            v86 = v83[6];
            swift_bridgeObjectRelease();
LABEL_102:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v415 = v335;
            BYTE8(v415) = 0;
            *(_QWORD *)&v416 = v340;
            *((_QWORD *)&v416 + 1) = v327;
            *(_QWORD *)&v417 = v332;
            *((_QWORD *)&v417 + 1) = v84;
            *(_QWORD *)&v418 = v85;
            *((_QWORD *)&v418 + 1) = v321;
            *(_QWORD *)&v419 = v87;
            *((_QWORD *)&v419 + 1) = v86;
            v287 = v85;
            v293 = v84;
            if (!v25 || !REBindPointBoundComponent())
            {
              v163 = 0;
              goto LABEL_175;
            }
            v160 = v87;
            v161 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v162 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_224:
                __break(1u);
                goto LABEL_225;
              }
              v226 = specialized static Entity.entityInfoType(_:)(v161);
              if (v226)
              {
                v163 = (*(uint64_t (**)(void))(v226 + 232))();
                v227 = *(_QWORD *)(v163 + 16);
                swift_retain();
                MEMORY[0x22076D160](v227, 0);
                *(_QWORD *)(v163 + 16) = v161;
                MEMORY[0x22076D160](v161, v163);
                swift_release();
                goto LABEL_174;
              }
              v162 = makeEntity(for:)(v161);
            }
            v163 = v162;
LABEL_174:
            v87 = v160;
LABEL_175:
            specialized ActionEventData.action<A>()((uint64_t)v408);
            v228 = v413 | ((unint64_t)v414 << 32);
            if ((v228 & 0xFF0000000000) != 0x20000000000)
            {
              v278 = v86;
              v283 = v412;
              v229 = v411;
              v230 = v408[0];
              v270 = v408[0];
              v261 = v411;
              v231 = v409;
              v267 = v409;
              v232 = v410;
              v273 = v410;
              swift_retain();
              v233 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SpinAction>);
              v370 = v416;
              v371 = v417;
              v372 = v418;
              v373 = v419;
              v234 = v26;
              v235 = v27;
              v348 = v230;
              v349 = v231;
              v350 = v232;
              v351 = v229;
              v352 = v283;
              v353 = v228;
              v354 = BYTE4(v228);
              v355 = BYTE5(v228) & 1;
              v236 = v233 & 1;
              v356 = v233 & 1;
              v347[0] = v311;
              v357 = v163;
              v358 = v299;
              v359 = v234;
              v360 = v235;
              v361 = Strong;
              v362 = v305;
              v363 = -1.0;
              v364 = 0;
              v365 = 0xBFF0000000000000;
              v366 = 0;
              v367 = 0xBFF0000000000000;
              v368 = 0;
              v369 = v415;
              v374 = v313;
              swift_retain();
              swift_retain();
              a5(v347);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v375 = v311;
              v376 = v270;
              v377 = v267;
              v378 = v273;
              v379 = v261;
              v380 = v283;
              v381 = v228;
              v382 = BYTE4(v228);
              v383 = BYTE5(v228) & 1;
              v384 = v236;
              v385 = v163;
              v386 = v299;
              v387 = v234;
              v388 = v235;
              v389 = Strong;
              v390 = v305;
              v391 = -1.0;
              v392 = 0;
              v393 = 0xBFF0000000000000;
              v394 = 0;
              v395 = 0xBFF0000000000000;
              v396 = 0;
              v397 = v335;
              v398 = 0;
              v399 = v340;
              v400 = v327;
              v401 = v332;
              v402 = v293;
              v403 = v287;
              v404 = v321;
              v405 = v87;
              v406 = v278;
              v201 = v313;
              goto LABEL_192;
            }
            goto LABEL_189;
          }
          swift_bridgeObjectRelease();
        }
        v327 = 0;
        v332 = 0;
        v84 = 0;
        v85 = 0;
        v321 = 0;
        v87 = 0;
        v86 = 0;
        goto LABEL_102;
      }
LABEL_215:
      __break(1u);
      goto LABEL_216;
    case 8:
      v29 = *(_QWORD *)a2;
      v28 = *(_QWORD *)(a2 + 8);
      v336 = *(_QWORD *)(a2 + 32);
      v341 = *(_QWORD *)(a2 + 40);
      v30 = *(_QWORD *)(a2 + 56);
      v300 = *(_QWORD *)(a2 + 48);
      v31 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v306 = *(_BYTE *)(a2 + 72);
      v310 = *(_QWORD *)(a2 + 80);
      v314 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_216:
        __break(1u);
        goto LABEL_217;
      }
      v88 = specialized static Entity.entityInfoType(_:)(v29);
      if (v88)
      {
        v89 = (*(uint64_t (**)(void))(v88 + 232))();
        v90 = *(_QWORD *)(v89 + 16);
        swift_retain();
        MEMORY[0x22076D160](v90, 0);
        *(_QWORD *)(v89 + 16) = v29;
        MEMORY[0x22076D160](v29, v89);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v29);
      }
LABEL_49:
      type metadata accessor for AnimationPlaybackController();
      v91 = swift_allocObject();
      swift_weakInit();
      v322 = v91;
      *(_QWORD *)(v91 + 16) = v28;
      swift_beginAccess();
      swift_weakAssign();
      v92 = String.init(cString:)();
      v94 = v93;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v95 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_109;
      swift_bridgeObjectRetain();
      v96 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v94);
      if ((v97 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_109:
        v328 = 0;
        v333 = 0;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v103 = 0;
        v102 = 0;
        goto LABEL_110;
      }
      v98 = (uint64_t *)(*(_QWORD *)(v95 + 56) + 56 * v96);
      v99 = v98[2];
      v328 = *v98;
      v333 = v98[1];
      v100 = v98[3];
      v101 = v98[4];
      v103 = v98[5];
      v102 = v98[6];
      swift_bridgeObjectRelease();
LABEL_110:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v415 = v336;
      BYTE8(v415) = 0;
      *(_QWORD *)&v416 = v341;
      *((_QWORD *)&v416 + 1) = v328;
      *(_QWORD *)&v417 = v333;
      *((_QWORD *)&v417 + 1) = v99;
      *(_QWORD *)&v418 = v100;
      *((_QWORD *)&v418 + 1) = v101;
      *(_QWORD *)&v419 = v103;
      *((_QWORD *)&v419 + 1) = v102;
      v288 = v100;
      v294 = v99;
      if (!v30 || !REBindPointBoundComponent())
      {
        v167 = 0;
        goto LABEL_181;
      }
      v164 = v101;
      v165 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v166 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        v237 = specialized static Entity.entityInfoType(_:)(v165);
        if (v237)
        {
          v167 = (*(uint64_t (**)(void))(v237 + 232))();
          v238 = *(_QWORD *)(v167 + 16);
          swift_retain();
          MEMORY[0x22076D160](v238, 0);
          *(_QWORD *)(v167 + 16) = v165;
          MEMORY[0x22076D160](v165, v167);
          swift_release();
          goto LABEL_180;
        }
        v166 = makeEntity(for:)(v165);
      }
      v167 = v166;
LABEL_180:
      v101 = v164;
LABEL_181:
      specialized ActionEventData.action<A>()((uint64_t)v408);
      v239 = v413 | ((unint64_t)v414 << 32);
      if ((v239 & 0xFF0000000000) == 0x20000000000)
        goto LABEL_189;
      v276 = v102;
      v279 = v103;
      v284 = v412;
      v240 = v411;
      v241 = v408[0];
      v268 = v408[0];
      v258 = v411;
      v242 = v409;
      v264 = v409;
      v243 = v410;
      v271 = v410;
      swift_retain();
      v244 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<SpinAction>);
      v370 = v416;
      v371 = v417;
      v372 = v418;
      v373 = v419;
      v245 = v31;
      v246 = v32;
      v348 = v241;
      v349 = v242;
      v350 = v243;
      v351 = v240;
      v352 = v284;
      v353 = v239;
      v354 = BYTE4(v239);
      v355 = BYTE5(v239) & 1;
      LOBYTE(v240) = v244 & 1;
      v356 = v244 & 1;
      v347[0] = v322;
      v357 = v167;
      v358 = v306;
      v359 = v245;
      v360 = v246;
      v362 = 0;
      v363 = 0.0;
      v361 = Strong;
      v364 = 1;
      v365 = v310;
      v366 = 0;
      v367 = v314;
      v368 = 0;
      v369 = v415;
      v374 = v300;
      swift_retain();
      swift_retain();
      a5(v347);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v375 = v322;
      v376 = v268;
      v377 = v264;
      v378 = v271;
      v379 = v258;
      v380 = v284;
      v381 = v239;
      v382 = BYTE4(v239);
      v383 = BYTE5(v239) & 1;
      v384 = v240;
      v385 = v167;
      v386 = v306;
      v387 = v245;
      v388 = v246;
      v391 = 0.0;
      v389 = Strong;
      v390 = 0;
      v392 = 1;
      v393 = v310;
      v394 = 0;
      v395 = v314;
      v396 = 0;
      v397 = v336;
      v398 = 0;
      v399 = v341;
      v400 = v328;
      v401 = v333;
      v402 = v294;
      v403 = v288;
      v404 = v101;
      v405 = v279;
      v406 = v276;
      v407 = v300;
LABEL_193:
      outlined release of ActionEvent<SpinAction>((uint64_t)&v375);
      return 0;
    case 16:
      v34 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v342 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v325 = *(_QWORD *)(a2 + 48);
      v330 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v104 = specialized static Entity.entityInfoType(_:)(v34);
        if (v104)
        {
          v105 = (*(uint64_t (**)(void))(v104 + 232))();
          v106 = *(_QWORD *)(v105 + 16);
          swift_retain();
          MEMORY[0x22076D160](v106, 0);
          *(_QWORD *)(v105 + 16) = v34;
          MEMORY[0x22076D160](v34, v105);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v107 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v107 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v108 = String.init(cString:)();
      v110 = v109;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v111 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_117;
      swift_bridgeObjectRetain();
      v112 = specialized __RawDictionaryStorage.find<A>(_:)(v108, v110);
      if ((v113 & 1) != 0)
      {
        v114 = (uint64_t *)(*(_QWORD *)(v111 + 56) + 56 * v112);
        v115 = *v114;
        v116 = v114[1];
        v117 = v114[3];
        v337 = v114[2];
        v118 = v114[4];
        v119 = v114[5];
        v120 = v114[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_117:
        v115 = 0;
        v116 = 0;
        v337 = 0;
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v415 = 0;
      BYTE8(v415) = 0;
      *(_QWORD *)&v416 = v342;
      *((_QWORD *)&v416 + 1) = v115;
      *(_QWORD *)&v417 = v116;
      *((_QWORD *)&v417 + 1) = v337;
      *(_QWORD *)&v418 = v117;
      *((_QWORD *)&v418 + 1) = v118;
      *(_QWORD *)&v419 = v119;
      *((_QWORD *)&v419 + 1) = v120;
      v317 = v118;
      v323 = v117;
      if (!v35 || !REBindPointBoundComponent())
        goto LABEL_130;
      v38 = v119;
      v168 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_128;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_185;
      __break(1u);
LABEL_123:
      swift_bridgeObjectRelease();
LABEL_124:
      v115 = 0;
      v116 = 0;
      v337 = 0;
      v131 = 0;
      v132 = 0;
      v119 = 0;
      v120 = 0;
LABEL_125:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v415 = 0;
      BYTE8(v415) = 0;
      *(_QWORD *)&v416 = v342;
      *((_QWORD *)&v416 + 1) = v115;
      *(_QWORD *)&v417 = v116;
      *((_QWORD *)&v417 + 1) = v337;
      *(_QWORD *)&v418 = v131;
      *((_QWORD *)&v418 + 1) = v132;
      *(_QWORD *)&v419 = v119;
      *((_QWORD *)&v419 + 1) = v120;
      v317 = v132;
      v323 = v131;
      if (!v38 || !REBindPointBoundComponent())
      {
LABEL_130:
        v170 = 0;
        goto LABEL_188;
      }
      v38 = v119;
      v168 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
LABEL_128:
        type metadata accessor for Entity();
        v169 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
LABEL_185:
        v247 = specialized static Entity.entityInfoType(_:)(v168);
        if (v247)
        {
          v170 = (*(uint64_t (**)(void))(v247 + 232))();
          v248 = *(_QWORD *)(v170 + 16);
          swift_retain();
          MEMORY[0x22076D160](v248, 0);
          *(_QWORD *)(v170 + 16) = v168;
          MEMORY[0x22076D160](v168, v170);
          swift_release();
          goto LABEL_187;
        }
        v169 = makeEntity(for:)(v168);
      }
      v170 = v169;
LABEL_187:
      v119 = v38;
LABEL_188:
      specialized ActionEventData.action<A>()((uint64_t)v408);
      v249 = v413 | ((unint64_t)v414 << 32);
      if ((v249 & 0xFF0000000000) != 0x20000000000)
      {
        v370 = v416;
        v371 = v417;
        v372 = v418;
        v373 = v419;
        v280 = v411;
        v308 = v115;
        v312 = v119;
        v250 = v408[0];
        v251 = v107;
        v252 = v409;
        v302 = v116;
        v253 = v410;
        v290 = v412;
        v348 = v408[0];
        v349 = v409;
        v350 = v410;
        v351 = v411;
        v352 = v412;
        v353 = v413;
        v354 = BYTE4(v249);
        v355 = BYTE5(v249) & 1;
        v356 = 1;
        v347[0] = v251;
        v357 = v170;
        v358 = 0;
        v359 = 0.0;
        v360 = 0.0;
        v362 = 0;
        v363 = 0.0;
        v361 = Strong;
        v364 = 1;
        v365 = v330;
        v366 = 0;
        v367 = 0;
        v368 = 1;
        v369 = v415;
        v374 = v325;
        swift_retain();
        swift_retain();
        a5(v347);
        swift_release();
        swift_release();
        swift_release();
        v375 = v251;
        v376 = v250;
        v377 = v252;
        v378 = v253;
        v379 = v280;
        v380 = v290;
        v381 = v249;
        v382 = BYTE4(v249);
        v383 = BYTE5(v249) & 1;
        v384 = 1;
        v385 = v170;
        v386 = 0;
        v388 = 0.0;
        v387 = 0.0;
        v391 = 0.0;
        v389 = Strong;
        v390 = 0;
        v392 = 1;
        v393 = v330;
        v394 = 0;
        v395 = 0;
        v396 = 1;
        v397 = 0;
        v398 = 0;
        v399 = v342;
        v400 = v308;
        v401 = v302;
        v402 = v337;
        v403 = v323;
        v404 = v317;
        v405 = v312;
        v406 = v120;
        v201 = v325;
        goto LABEL_192;
      }
      goto LABEL_189;
    case 32:
      v37 = *(_QWORD *)a2;
      v36 = *(_QWORD *)(a2 + 8);
      v342 = *(_QWORD *)(a2 + 40);
      v38 = *(_QWORD *)(a2 + 56);
      v325 = *(_QWORD *)(a2 + 48);
      v330 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v121 = specialized static Entity.entityInfoType(_:)(v37);
        if (v121)
        {
          v122 = (*(uint64_t (**)(void))(v121 + 232))();
          v123 = *(_QWORD *)(v122 + 16);
          swift_retain();
          MEMORY[0x22076D160](v123, 0);
          *(_QWORD *)(v122 + 16) = v37;
          MEMORY[0x22076D160](v37, v122);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v37);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v107 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v107 + 16) = v36;
      swift_beginAccess();
      swift_weakAssign();
      v124 = String.init(cString:)();
      v126 = v125;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v127 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_124;
      swift_bridgeObjectRetain();
      v128 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v126);
      if ((v129 & 1) == 0)
        goto LABEL_123;
      v130 = (uint64_t *)(*(_QWORD *)(v127 + 56) + 56 * v128);
      v115 = *v130;
      v116 = v130[1];
      v131 = v130[3];
      v337 = v130[2];
      v132 = v130[4];
      v119 = v130[5];
      v120 = v130[6];
      swift_bridgeObjectRelease();
      goto LABEL_125;
    case 64:
      v40 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v41 = *(_QWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 40);
      v329 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v133 = specialized static Entity.entityInfoType(_:)(v40);
        if (v133)
        {
          v134 = (*(uint64_t (**)(void))(v133 + 232))();
          v135 = *(_QWORD *)(v134 + 16);
          swift_retain();
          MEMORY[0x22076D160](v135, 0);
          *(_QWORD *)(v134 + 16) = v40;
          MEMORY[0x22076D160](v40, v134);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v40);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v136 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v136 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      v137 = v41;
      if (v42 && REBindPointBoundComponent())
      {
        v138 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v139 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v140 = v139;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v202 = specialized static Entity.entityInfoType(_:)(v138);
        if (!v202)
        {
          v139 = makeEntity(for:)(v138);
          goto LABEL_77;
        }
        v140 = (*(uint64_t (**)(void))(v202 + 232))();
        v203 = *(_QWORD *)(v140 + 16);
        swift_retain();
        MEMORY[0x22076D160](v203, 0);
        *(_QWORD *)(v140 + 16) = v138;
        MEMORY[0x22076D160](v138, v140);
        swift_release();
      }
      else
      {
        v140 = 0;
      }
LABEL_79:
      v141 = String.init(cString:)();
      v143 = v142;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v144 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v145 = specialized __RawDictionaryStorage.find<A>(_:)(v141, v143);
        if ((v146 & 1) != 0)
        {
          v147 = (uint64_t *)(*(_QWORD *)(v144 + 56) + 56 * v145);
          v148 = *v147;
          v149 = v147[1];
          v151 = v147[2];
          v150 = v147[3];
          v343 = v147[5];
          v344 = v147[4];
          v338 = v147[6];
          swift_bridgeObjectRelease();
LABEL_133:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v415 = 0;
          BYTE8(v415) = 0;
          *(_QWORD *)&v416 = v137;
          *((_QWORD *)&v416 + 1) = v148;
          *(_QWORD *)&v417 = v149;
          *((_QWORD *)&v417 + 1) = v151;
          *(_QWORD *)&v418 = v150;
          *((_QWORD *)&v418 + 1) = v344;
          *(_QWORD *)&v419 = v343;
          *((_QWORD *)&v419 + 1) = v338;
          specialized ActionEventData.action<A>()((uint64_t)v408);
          v171 = v413 | ((unint64_t)v414 << 32);
          if ((v171 & 0xFF0000000000) == 0x20000000000)
            goto LABEL_189;
          v370 = v416;
          v371 = v417;
          v372 = v418;
          v373 = v419;
          v172 = v136;
          v282 = v136;
          v295 = v412;
          v301 = v411;
          v318 = v151;
          v324 = v149;
          v173 = v408[0];
          v174 = v409;
          v175 = v410;
          v348 = v408[0];
          v349 = v409;
          v350 = v410;
          v351 = v411;
          v352 = v412;
          v353 = v413;
          v354 = BYTE4(v171);
          v355 = BYTE5(v171) & 1;
          v356 = 1;
          v347[0] = v172;
          v357 = v140;
          v358 = 0;
          v359 = 0.0;
          v360 = 0.0;
          v362 = 0;
          v363 = 0.0;
          v361 = Strong;
          v364 = 1;
          v365 = 0;
          v366 = 1;
          v367 = 0;
          v368 = 1;
          v369 = v415;
          v374 = v329;
          swift_retain();
          swift_retain();
          a5(v347);
          swift_release();
          swift_release();
          swift_release();
          v375 = v282;
          v376 = v173;
          v377 = v174;
          v378 = v175;
          v379 = v301;
          v380 = v295;
          v381 = v171;
          v382 = BYTE4(v171);
          v383 = BYTE5(v171) & 1;
          v384 = 1;
          v385 = v140;
          v386 = 0;
          v388 = 0.0;
          v387 = 0.0;
          v391 = 0.0;
          v389 = Strong;
          v390 = 0;
          v392 = 1;
          v393 = 0;
          v394 = 1;
          v395 = 0;
          v396 = 1;
          v397 = 0;
          v398 = 0;
          v399 = v137;
          v400 = v148;
          v401 = v324;
          v402 = v318;
          v176 = v150;
          goto LABEL_154;
        }
        swift_bridgeObjectRelease();
      }
      v148 = 0;
      v149 = 0;
      v151 = 0;
      v150 = 0;
      v343 = 0;
      v344 = 0;
      v338 = 0;
      goto LABEL_133;
    default:
      if (a4 != 128)
        goto LABEL_190;
      v14 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 40);
      v329 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v177 = specialized static Entity.entityInfoType(_:)(v14);
        if (v177)
        {
          v178 = (*(uint64_t (**)(void))(v177 + 232))();
          v179 = *(_QWORD *)(v178 + 16);
          swift_retain();
          MEMORY[0x22076D160](v179, 0);
          *(_QWORD *)(v178 + 16) = v14;
          MEMORY[0x22076D160](v14, v178);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v180 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v180 + 16) = v13;
      swift_beginAccess();
      swift_weakAssign();
      v181 = v15;
      if (v16 && REBindPointBoundComponent())
      {
        v182 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v183 = swift_dynamicCastClassUnconditional();
LABEL_143:
          v184 = v183;
          goto LABEL_145;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_227:
          __break(1u);
          JUMPOUT(0x21BB59278);
        }
        v254 = specialized static Entity.entityInfoType(_:)(v182);
        if (!v254)
        {
          v183 = makeEntity(for:)(v182);
          goto LABEL_143;
        }
        v184 = (*(uint64_t (**)(void))(v254 + 232))();
        v255 = *(_QWORD *)(v184 + 16);
        swift_retain();
        MEMORY[0x22076D160](v255, 0);
        *(_QWORD *)(v184 + 16) = v182;
        MEMORY[0x22076D160](v182, v184);
        swift_release();
      }
      else
      {
        v184 = 0;
      }
LABEL_145:
      v185 = String.init(cString:)();
      v187 = v186;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v188 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v189 = specialized __RawDictionaryStorage.find<A>(_:)(v185, v187);
        if ((v190 & 1) != 0)
        {
          v191 = (uint64_t *)(*(_QWORD *)(v188 + 56) + 56 * v189);
          v192 = *v191;
          v193 = v191[1];
          v195 = v191[2];
          v194 = v191[3];
          v343 = v191[5];
          v344 = v191[4];
          v338 = v191[6];
          swift_bridgeObjectRelease();
LABEL_152:
          v196 = v181;
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v415 = 0;
          BYTE8(v415) = 0;
          *(_QWORD *)&v416 = v181;
          *((_QWORD *)&v416 + 1) = v192;
          *(_QWORD *)&v417 = v193;
          *((_QWORD *)&v417 + 1) = v195;
          *(_QWORD *)&v418 = v194;
          *((_QWORD *)&v418 + 1) = v344;
          *(_QWORD *)&v419 = v343;
          *((_QWORD *)&v419 + 1) = v338;
          specialized ActionEventData.action<A>()((uint64_t)v408);
          v197 = v413 | ((unint64_t)v414 << 32);
          if ((v197 & 0xFF0000000000) == 0x20000000000)
            goto LABEL_189;
          v370 = v416;
          v371 = v417;
          v372 = v418;
          v373 = v419;
          v319 = v195;
          v289 = v411;
          v296 = v412;
          v198 = v408[0];
          v307 = v193;
          v199 = v409;
          v200 = v410;
          v348 = v408[0];
          v349 = v409;
          v350 = v410;
          v351 = v411;
          v352 = v412;
          v353 = v413;
          v354 = BYTE4(v197);
          v355 = BYTE5(v197) & 1;
          v356 = 1;
          v347[0] = v180;
          v357 = v184;
          v358 = 0;
          v359 = 0.0;
          v360 = 0.0;
          v362 = 0;
          v363 = 0.0;
          v361 = Strong;
          v364 = 1;
          v365 = 0;
          v366 = 1;
          v367 = 0;
          v368 = 1;
          v369 = v415;
          v374 = v329;
          swift_retain();
          swift_retain();
          swift_retain();
          a5(v347);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v375 = v180;
          v376 = v198;
          v377 = v199;
          v378 = v200;
          v379 = v289;
          v380 = v296;
          v381 = v197;
          v382 = BYTE4(v197);
          v383 = BYTE5(v197) & 1;
          v384 = 1;
          v385 = v184;
          v386 = 0;
          v388 = 0.0;
          v387 = 0.0;
          v391 = 0.0;
          v389 = Strong;
          v390 = 0;
          v392 = 1;
          v393 = 0;
          v394 = 1;
          v395 = 0;
          v396 = 1;
          v397 = 0;
          v398 = 0;
          v399 = v196;
          v400 = v192;
          v401 = v307;
          v402 = v319;
          v176 = v194;
LABEL_154:
          v403 = v176;
          v404 = v344;
          v405 = v343;
          v406 = v338;
          v201 = v329;
LABEL_192:
          v407 = v201;
          goto LABEL_193;
        }
        swift_bridgeObjectRelease();
      }
      v192 = 0;
      v193 = 0;
      v195 = 0;
      v194 = 0;
      v343 = 0;
      v344 = 0;
      v338 = 0;
      goto LABEL_152;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t Entity;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int16 v162;
  char v163;
  double v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  double v177;
  double v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int16 v189;
  char v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int16 v202;
  char v203;
  double v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  char v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  unsigned __int16 v266;
  unint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  int v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  int v288;
  int v289;
  char v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  char v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t Strong;
  _QWORD v354[2];
  uint64_t v355;
  uint64_t v356;
  char v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  __int16 v361;
  char v362;
  uint64_t v363;
  char v364;
  double v365;
  double v366;
  uint64_t v367;
  uint64_t v368;
  double v369;
  char v370;
  unint64_t v371;
  char v372;
  unint64_t v373;
  char v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  __int16 v388;
  char v389;
  uint64_t v390;
  char v391;
  double v392;
  double v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  char v397;
  unint64_t v398;
  char v399;
  unint64_t v400;
  char v401;
  uint64_t v402;
  char v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned __int16 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v345 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 64);
      v11 = *(float *)(a2 + 72);
      v12 = *(float *)(a2 + 76);
      v290 = *(_BYTE *)(a2 + 80);
      v305 = *(_QWORD *)(a2 + 48);
      v309 = *(_QWORD *)(a2 + 88);
      v314 = *(_QWORD *)(a2 + 96);
      v320 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_208;
      }
      v44 = specialized static Entity.entityInfoType(_:)(v7);
      if (v44)
      {
        v45 = (*(uint64_t (**)(void))(v44 + 232))();
        v46 = *(_QWORD *)(v45 + 16);
        swift_retain();
        MEMORY[0x22076D160](v46, 0);
        *(_QWORD *)(v45 + 16) = v7;
        MEMORY[0x22076D160](v7, v45);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v7);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v47 = swift_allocObject();
      swift_weakInit();
      v297 = v47;
      *(_QWORD *)(v47 + 16) = v8;
      swift_beginAccess();
      swift_weakAssign();
      v48 = String.init(cString:)();
      v50 = v49;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v51 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_85;
      swift_bridgeObjectRetain();
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
      if ((v53 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_85:
        v332 = 0;
        v339 = 0;
        v55 = 0;
        v56 = 0;
        v326 = 0;
        v58 = 0;
        v57 = 0;
        goto LABEL_86;
      }
      v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 56 * v52);
      v55 = v54[2];
      v332 = v54[1];
      v339 = *v54;
      v56 = v54[3];
      v326 = v54[4];
      v58 = v54[5];
      v57 = v54[6];
      swift_bridgeObjectRelease();
LABEL_86:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v345;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v9;
      *((_QWORD *)&v420 + 1) = v339;
      *(_QWORD *)&v421 = v332;
      *((_QWORD *)&v421 + 1) = v55;
      *(_QWORD *)&v422 = v56;
      *((_QWORD *)&v422 + 1) = v326;
      *(_QWORD *)&v423 = v58;
      *((_QWORD *)&v423 + 1) = v57;
      v276 = v55;
      v283 = v9;
      v270 = v56;
      if (!v10 || !REBindPointBoundComponent())
      {
        v156 = 0;
        goto LABEL_92;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v155 = swift_dynamicCastClassUnconditional();
LABEL_90:
        v156 = v155;
        goto LABEL_92;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_216;
      v245 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v245)
      {
        v155 = makeEntity(for:)(Entity);
        goto LABEL_90;
      }
      v156 = (*(uint64_t (**)(void))(v245 + 232))();
      v246 = *(_QWORD *)(v156 + 16);
      swift_retain();
      MEMORY[0x22076D160](v246, 0);
      *(_QWORD *)(v156 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v156);
      swift_release();
LABEL_92:
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v157 = v415;
      if ((_BYTE)v415 == 0xFF)
        goto LABEL_167;
      v158 = v416;
      v159 = v414;
      v160 = v413;
      v261 = v413;
      v267 = HIDWORD(v415);
      v161 = v417;
      v162 = v418;
      swift_retain();
      outlined copy of OrbitEntityAction?(v160, v159, v157);
      v163 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<OrbitEntityAction>);
      v376 = v420;
      v377 = v421;
      v378 = v422;
      v379 = v423;
      v164 = v11;
      v165 = v12;
      v357 = v157 & 1;
      v358 = v267;
      v359 = v158;
      v360 = v161;
      v361 = v162 & 0x101;
      v258 = v163 & 1;
      v362 = v163 & 1;
      v355 = v261;
      v356 = v159;
      v354[0] = v297;
      v363 = v156;
      v364 = v290;
      v365 = v164;
      v366 = v165;
      v367 = Strong;
      v368 = v320;
      v369 = -1.0;
      v370 = 0;
      v371 = v309;
      v372 = 0;
      v373 = v314;
      v374 = 0;
      v375 = v419;
      v380 = v305;
      swift_retain();
      swift_retain();
      a5(v354);
      outlined consume of OrbitEntityAction?(v261, v159, v157);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v381 = v297;
      v382 = v261;
      v383 = v159;
      v384 = v157 & 1;
      v385 = v267;
      v387 = v161;
      v386 = v158;
      v388 = v162 & 0x101;
      v389 = v258;
      v390 = v156;
      v391 = v290;
      v392 = v164;
      v393 = v165;
      v394 = Strong;
      v395 = v320;
      v396 = -1.0;
      v397 = 0;
      v398 = v309;
      v399 = 0;
      v400 = v314;
      v401 = 0;
      v402 = v345;
      v403 = 0;
      v404 = v283;
      v405 = v339;
      v406 = v332;
      v407 = v276;
      v408 = v270;
      v409 = v326;
      v410 = v58;
      v166 = v57;
LABEL_104:
      v411 = v166;
      v180 = v305;
LABEL_149:
      v412 = v180;
      outlined release of ActionEvent<OrbitEntityAction>((uint64_t)&v381);
      return 0;
    case 2:
      v18 = *(_QWORD *)a2;
      v19 = *(_QWORD *)(a2 + 8);
      v346 = *(_QWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(float *)(a2 + 56);
      v315 = *(_QWORD *)(a2 + 64);
      v321 = *(_QWORD *)(a2 + 48);
      v22 = *(_QWORD *)(a2 + 88);
      v305 = *(_QWORD *)(a2 + 80);
      v310 = *(_QWORD *)(a2 + 72);
      v23 = *(float *)(a2 + 96);
      v24 = *(float *)(a2 + 100);
      v291 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_208:
          __break(1u);
          goto LABEL_209;
        }
        v59 = specialized static Entity.entityInfoType(_:)(v18);
        if (v59)
        {
          v60 = (*(uint64_t (**)(void))(v59 + 232))();
          v61 = *(_QWORD *)(v60 + 16);
          swift_retain();
          MEMORY[0x22076D160](v61, 0);
          *(_QWORD *)(v60 + 16) = v18;
          MEMORY[0x22076D160](v18, v60);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v62 = swift_allocObject();
      swift_weakInit();
      v298 = v62;
      *(_QWORD *)(v62 + 16) = v19;
      swift_beginAccess();
      swift_weakAssign();
      v63 = String.init(cString:)();
      v65 = v64;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v66 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_95;
      swift_bridgeObjectRetain();
      v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v65);
      if ((v68 & 1) != 0)
      {
        v69 = (uint64_t *)(*(_QWORD *)(v66 + 56) + 56 * v67);
        v70 = v69[2];
        v333 = v69[1];
        v340 = *v69;
        v71 = v69[3];
        v327 = v69[4];
        v73 = v69[5];
        v72 = v69[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_95:
        v333 = 0;
        v340 = 0;
        v70 = 0;
        v71 = 0;
        v327 = 0;
        v73 = 0;
        v72 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v346;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v20;
      *((_QWORD *)&v420 + 1) = v340;
      *(_QWORD *)&v421 = v333;
      *((_QWORD *)&v421 + 1) = v70;
      *(_QWORD *)&v422 = v71;
      *((_QWORD *)&v422 + 1) = v327;
      *(_QWORD *)&v423 = v73;
      *((_QWORD *)&v423 + 1) = v72;
      v277 = v70;
      v284 = v20;
      v271 = v71;
      if (v22 && REBindPointBoundComponent())
      {
        v167 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v168 = swift_dynamicCastClassUnconditional();
LABEL_100:
          v169 = v168;
          goto LABEL_102;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v247 = specialized static Entity.entityInfoType(_:)(v167);
        if (!v247)
        {
          v168 = makeEntity(for:)(v167);
          goto LABEL_100;
        }
        v169 = (*(uint64_t (**)(void))(v247 + 232))();
        v248 = *(_QWORD *)(v169 + 16);
        swift_retain();
        MEMORY[0x22076D160](v248, 0);
        *(_QWORD *)(v169 + 16) = v167;
        MEMORY[0x22076D160](v167, v169);
        swift_release();
      }
      else
      {
        v169 = 0;
      }
LABEL_102:
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v170 = v415;
      if ((_BYTE)v415 != 0xFF)
      {
        v171 = v416;
        v263 = v73;
        v172 = v414;
        v173 = v413;
        v262 = v413;
        v174 = HIDWORD(v415);
        v257 = HIDWORD(v415);
        v175 = v417;
        v266 = v418;
        swift_retain();
        outlined copy of OrbitEntityAction?(v173, v172, v170);
        v176 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<OrbitEntityAction>);
        v376 = v420;
        v377 = v421;
        v378 = v422;
        v379 = v423;
        v177 = v23;
        v178 = v24;
        v179 = v21;
        v357 = v170 & 1;
        v358 = v174;
        v359 = v171;
        v360 = v175;
        v361 = v266 & 0x101;
        v259 = v176 & 1;
        v362 = v176 & 1;
        v355 = v262;
        v356 = v172;
        v354[0] = v298;
        v363 = v169;
        v364 = v291;
        v365 = v177;
        v366 = v178;
        v367 = Strong;
        v368 = v310;
        v369 = v179;
        v370 = 0;
        v371 = v321;
        v372 = 0;
        v373 = v315;
        v374 = 0;
        v375 = v419;
        v380 = v305;
        swift_retain();
        swift_retain();
        a5(v354);
        outlined consume of OrbitEntityAction?(v262, v172, v170);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v381 = v298;
        v382 = v262;
        v383 = v172;
        v384 = v170 & 1;
        v385 = v257;
        v387 = v175;
        v386 = v171;
        v388 = v266 & 0x101;
        v389 = v259;
        v390 = v169;
        v391 = v291;
        v392 = v177;
        v393 = v178;
        v394 = Strong;
        v395 = v310;
        v396 = v179;
        v397 = 0;
        v398 = v321;
        v399 = 0;
        v400 = v315;
        v401 = 0;
        v402 = v346;
        v403 = 0;
        v404 = v284;
        v405 = v340;
        v406 = v333;
        v407 = v277;
        v408 = v271;
        v409 = v327;
        v410 = v263;
        v166 = v72;
        goto LABEL_104;
      }
LABEL_167:
      swift_release();
      swift_release();
      swift_release();
LABEL_168:
      swift_release();
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_168;
    case 4:
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      v337 = *(_QWORD *)(a2 + 32);
      v347 = *(_QWORD *)(a2 + 40);
      v27 = *(_QWORD *)(a2 + 64);
      v322 = *(_QWORD *)(a2 + 56);
      v28 = *(float *)(a2 + 72);
      v29 = *(float *)(a2 + 76);
      v306 = *(_BYTE *)(a2 + 80);
      v325 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_209:
          __break(1u);
          goto LABEL_210;
        }
        v74 = specialized static Entity.entityInfoType(_:)(v25);
        if (v74)
        {
          v75 = (*(uint64_t (**)(void))(v74 + 232))();
          v76 = *(_QWORD *)(v75 + 16);
          swift_retain();
          MEMORY[0x22076D160](v76, 0);
          *(_QWORD *)(v75 + 16) = v25;
          MEMORY[0x22076D160](v25, v75);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v25);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v77 = swift_allocObject();
      swift_weakInit();
      v312 = v77;
      *(_QWORD *)(v77 + 16) = v26;
      swift_beginAccess();
      swift_weakAssign();
      v78 = String.init(cString:)();
      v80 = v79;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v81 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_106;
      swift_bridgeObjectRetain();
      v82 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v80);
      if ((v83 & 1) != 0)
      {
        v84 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 56 * v82);
        v85 = v84[1];
        v334 = *v84;
        v86 = v84[2];
        v87 = v84[3];
        v88 = v84[4];
        v89 = v84[5];
        v90 = v84[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_106:
        v334 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v337;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v347;
      *((_QWORD *)&v420 + 1) = v334;
      *(_QWORD *)&v421 = v85;
      *((_QWORD *)&v421 + 1) = v86;
      *(_QWORD *)&v422 = v87;
      *((_QWORD *)&v422 + 1) = v88;
      *(_QWORD *)&v423 = v89;
      *((_QWORD *)&v423 + 1) = v90;
      v299 = v86;
      v303 = v85;
      v285 = v90;
      v292 = v89;
      if (v27 && REBindPointBoundComponent())
      {
        v181 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v182 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_218:
            __break(1u);
            goto LABEL_219;
          }
          v249 = specialized static Entity.entityInfoType(_:)(v181);
          if (v249)
          {
            v183 = (*(uint64_t (**)(void))(v249 + 232))();
            v250 = *(_QWORD *)(v183 + 16);
            swift_retain();
            MEMORY[0x22076D160](v250, 0);
            *(_QWORD *)(v183 + 16) = v181;
            MEMORY[0x22076D160](v181, v183);
            swift_release();
            goto LABEL_113;
          }
          v182 = makeEntity(for:)(v181);
        }
        v183 = v182;
      }
      else
      {
        v183 = 0;
      }
LABEL_113:
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v184 = v415;
      if ((_BYTE)v415 == 0xFF)
        goto LABEL_167;
      v185 = v416;
      v268 = v87;
      v186 = v414;
      v187 = v413;
      v278 = HIDWORD(v415);
      v188 = v417;
      v189 = v418;
      swift_retain();
      outlined copy of OrbitEntityAction?(v187, v186, v184);
      v190 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<OrbitEntityAction>);
      v376 = v420;
      v377 = v421;
      v378 = v422;
      v379 = v423;
      v191 = v28;
      v192 = v29;
      v355 = v187;
      v356 = v186;
      v357 = v184 & 1;
      v358 = v278;
      v359 = v185;
      v360 = v188;
      v361 = v189 & 0x101;
      v265 = v190 & 1;
      v362 = v190 & 1;
      v354[0] = v312;
      v363 = v183;
      v364 = v306;
      v365 = v191;
      v366 = v192;
      v367 = Strong;
      v368 = v322;
      v369 = -1.0;
      v370 = 0;
      v371 = 0xBFF0000000000000;
      v372 = 0;
      v373 = 0xBFF0000000000000;
      v374 = 0;
      v375 = v419;
      v380 = v325;
      swift_retain();
      swift_retain();
      a5(v354);
      outlined consume of OrbitEntityAction?(v187, v186, v184);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v381 = v312;
      v382 = v187;
      v383 = v186;
      v384 = v184 & 1;
      v385 = v278;
      v387 = v188;
      v386 = v185;
      v388 = v189 & 0x101;
      v389 = v265;
      v390 = v183;
      v391 = v306;
      v392 = v191;
      v393 = v192;
      v394 = Strong;
      v395 = v322;
      v396 = -1.0;
      v397 = 0;
      v398 = 0xBFF0000000000000;
      v399 = 0;
      v400 = 0xBFF0000000000000;
      v401 = 0;
      v402 = v337;
      v403 = 0;
      v404 = v347;
      v405 = v334;
      v406 = v303;
      v407 = v299;
      v408 = v268;
      v409 = v88;
      v410 = v292;
      v193 = v285;
      goto LABEL_148;
    case 8:
      v30 = *(_QWORD *)a2;
      v31 = *(_QWORD *)(a2 + 8);
      v348 = *(_QWORD *)(a2 + 32);
      v32 = *(_QWORD *)(a2 + 40);
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(float *)(a2 + 64);
      v35 = *(float *)(a2 + 68);
      v296 = *(_BYTE *)(a2 + 72);
      v311 = *(_QWORD *)(a2 + 48);
      v316 = *(_QWORD *)(a2 + 80);
      v323 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_210:
          __break(1u);
          goto LABEL_211;
        }
        v91 = specialized static Entity.entityInfoType(_:)(v30);
        if (v91)
        {
          v92 = (*(uint64_t (**)(void))(v91 + 232))();
          v93 = *(_QWORD *)(v92 + 16);
          swift_retain();
          MEMORY[0x22076D160](v93, 0);
          *(_QWORD *)(v92 + 16) = v30;
          MEMORY[0x22076D160](v30, v92);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v30);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v94 = swift_allocObject();
      swift_weakInit();
      v302 = v94;
      *(_QWORD *)(v94 + 16) = v31;
      swift_beginAccess();
      swift_weakAssign();
      v95 = String.init(cString:)();
      v97 = v96;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v98 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_117;
      swift_bridgeObjectRetain();
      v99 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v97);
      if ((v100 & 1) != 0)
      {
        v101 = (uint64_t *)(*(_QWORD *)(v98 + 56) + 56 * v99);
        v102 = v101[2];
        v335 = v101[1];
        v341 = *v101;
        v103 = v101[3];
        v328 = v101[4];
        v105 = v101[5];
        v104 = v101[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_117:
        v335 = 0;
        v341 = 0;
        v102 = 0;
        v103 = 0;
        v328 = 0;
        v105 = 0;
        v104 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = v348;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v32;
      *((_QWORD *)&v420 + 1) = v341;
      *(_QWORD *)&v421 = v335;
      *((_QWORD *)&v421 + 1) = v102;
      *(_QWORD *)&v422 = v103;
      *((_QWORD *)&v422 + 1) = v328;
      *(_QWORD *)&v423 = v105;
      *((_QWORD *)&v423 + 1) = v104;
      v286 = v102;
      v293 = v32;
      v279 = v103;
      if (v33 && REBindPointBoundComponent())
      {
        v194 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v195 = swift_dynamicCastClassUnconditional();
LABEL_122:
          v196 = v195;
          goto LABEL_124;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v251 = specialized static Entity.entityInfoType(_:)(v194);
        if (!v251)
        {
          v195 = makeEntity(for:)(v194);
          goto LABEL_122;
        }
        v196 = (*(uint64_t (**)(void))(v251 + 232))();
        v252 = *(_QWORD *)(v196 + 16);
        swift_retain();
        MEMORY[0x22076D160](v252, 0);
        *(_QWORD *)(v196 + 16) = v194;
        MEMORY[0x22076D160](v194, v196);
        swift_release();
      }
      else
      {
        v196 = 0;
      }
LABEL_124:
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v197 = v415;
      if ((_BYTE)v415 != 0xFF)
      {
        v198 = v416;
        v199 = v414;
        v200 = v413;
        v264 = v413;
        v272 = HIDWORD(v415);
        v201 = v417;
        v202 = v418;
        swift_retain();
        outlined copy of OrbitEntityAction?(v200, v199, v197);
        v203 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<OrbitEntityAction>);
        v376 = v420;
        v377 = v421;
        v378 = v422;
        v379 = v423;
        v204 = v34;
        v205 = v35;
        v357 = v197 & 1;
        v358 = v272;
        v359 = v198;
        v360 = v201;
        v361 = v202 & 0x101;
        v260 = v203 & 1;
        v362 = v203 & 1;
        v355 = v264;
        v356 = v199;
        v354[0] = v302;
        v363 = v196;
        v364 = v296;
        v365 = v204;
        v366 = v205;
        v368 = 0;
        v369 = 0.0;
        v367 = Strong;
        v370 = 1;
        v371 = v316;
        v372 = 0;
        v373 = v323;
        v374 = 0;
        v375 = v419;
        v380 = v311;
        swift_retain();
        swift_retain();
        a5(v354);
        outlined consume of OrbitEntityAction?(v264, v199, v197);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v381 = v302;
        v382 = v264;
        v383 = v199;
        v384 = v197 & 1;
        v385 = v272;
        v387 = v201;
        v386 = v198;
        v388 = v202 & 0x101;
        v389 = v260;
        v390 = v196;
        v391 = v296;
        v392 = v204;
        v393 = v205;
        v396 = 0.0;
        v394 = Strong;
        v395 = 0;
        v397 = 1;
        v398 = v316;
        v399 = 0;
        v400 = v323;
        v401 = 0;
        v402 = v348;
        v403 = 0;
        v404 = v293;
        v405 = v341;
        v406 = v335;
        v407 = v286;
        v408 = v279;
        v409 = v328;
        v410 = v105;
        v411 = v104;
        v180 = v311;
        goto LABEL_149;
      }
      goto LABEL_167;
    case 16:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v349 = *(_QWORD *)(a2 + 40);
      v325 = *(_QWORD *)(a2 + 48);
      v331 = *(_QWORD *)(a2 + 32);
      v338 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_211:
          __break(1u);
          goto LABEL_212;
        }
        v106 = specialized static Entity.entityInfoType(_:)(v36);
        if (v106)
        {
          v107 = (*(uint64_t (**)(void))(v106 + 232))();
          v108 = *(_QWORD *)(v107 + 16);
          swift_retain();
          MEMORY[0x22076D160](v108, 0);
          *(_QWORD *)(v107 + 16) = v36;
          MEMORY[0x22076D160](v36, v107);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v109 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v109 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      v110 = String.init(cString:)();
      v112 = v111;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v113 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_128;
      swift_bridgeObjectRetain();
      v114 = specialized __RawDictionaryStorage.find<A>(_:)(v110, v112);
      if ((v115 & 1) != 0)
      {
        v116 = (uint64_t *)(*(_QWORD *)(v113 + 56) + 56 * v114);
        v117 = *v116;
        v118 = v116[1];
        v119 = v116[2];
        v120 = v116[3];
        v121 = v116[4];
        v122 = v116[5];
        v123 = v116[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_128:
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v122 = 0;
        v123 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = 0;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v349;
      *((_QWORD *)&v420 + 1) = v117;
      *(_QWORD *)&v421 = v118;
      *((_QWORD *)&v421 + 1) = v119;
      *(_QWORD *)&v422 = v120;
      *((_QWORD *)&v422 + 1) = v121;
      *(_QWORD *)&v423 = v122;
      *((_QWORD *)&v423 + 1) = v123;
      v313 = v122;
      v317 = v121;
      if (!v338 || !REBindPointBoundComponent())
        goto LABEL_141;
      v206 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_139;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_187;
      __break(1u);
LABEL_134:
      swift_bridgeObjectRelease();
LABEL_135:
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v134 = 0;
      v135 = 0;
      v123 = 0;
LABEL_136:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = 0;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v349;
      *((_QWORD *)&v420 + 1) = v117;
      *(_QWORD *)&v421 = v118;
      *((_QWORD *)&v421 + 1) = v119;
      *(_QWORD *)&v422 = v120;
      *((_QWORD *)&v422 + 1) = v134;
      *(_QWORD *)&v423 = v135;
      *((_QWORD *)&v423 + 1) = v123;
      v313 = v135;
      v317 = v134;
      if (v338 && REBindPointBoundComponent())
      {
        v206 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_139:
          type metadata accessor for Entity();
          v207 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_220:
            __break(1u);
            goto LABEL_221;
          }
LABEL_187:
          v253 = specialized static Entity.entityInfoType(_:)(v206);
          if (v253)
          {
            v208 = (*(uint64_t (**)(void))(v253 + 232))();
            v254 = *(_QWORD *)(v208 + 16);
            swift_retain();
            MEMORY[0x22076D160](v254, 0);
            *(_QWORD *)(v208 + 16) = v206;
            MEMORY[0x22076D160](v206, v208);
            swift_release();
            goto LABEL_142;
          }
          v207 = makeEntity(for:)(v206);
        }
        v208 = v207;
      }
      else
      {
LABEL_141:
        v208 = 0;
      }
LABEL_142:
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v209 = v415;
      if ((_BYTE)v415 == 0xFF)
        goto LABEL_167;
      v376 = v420;
      v377 = v421;
      v378 = v422;
      v379 = v423;
      v307 = v117;
      v210 = v416;
      v343 = v123;
      v211 = v414;
      v212 = v413;
      v273 = HIDWORD(v415);
      v300 = v120;
      v213 = v417;
      v355 = v413;
      v356 = v414;
      v269 = v415 & 1;
      v357 = v415 & 1;
      v358 = HIDWORD(v415);
      v359 = v416;
      v360 = v417;
      v287 = v418 & 1;
      v361 = v418 & 0x101;
      v280 = HIBYTE(v418) & 1;
      v362 = 1;
      v354[0] = v109;
      v363 = v208;
      v364 = 0;
      v365 = 0.0;
      v366 = 0.0;
      v368 = 0;
      v369 = 0.0;
      v367 = Strong;
      v370 = 1;
      v371 = v331;
      v372 = 0;
      v373 = 0;
      v374 = 1;
      v375 = v419;
      v380 = v325;
      swift_retain();
      swift_retain();
      outlined copy of OrbitEntityAction?(v212, v211, v209);
      swift_retain();
      a5(v354);
      outlined consume of OrbitEntityAction?(v212, v211, v209);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v381 = v109;
      v382 = v212;
      v383 = v211;
      v384 = v269;
      v385 = v273;
      v387 = v213;
      v386 = v210;
      LOBYTE(v388) = v287;
      HIBYTE(v388) = v280;
      v389 = 1;
      v390 = v208;
      v391 = 0;
      v393 = 0.0;
      v392 = 0.0;
      v396 = 0.0;
      v394 = Strong;
      v395 = 0;
      v397 = 1;
      v398 = v331;
      v399 = 0;
      v400 = 0;
      v401 = 1;
      v402 = 0;
      v403 = 0;
      v404 = v349;
      v405 = v307;
      v406 = v118;
      v407 = v119;
      v408 = v300;
      v409 = v317;
      v410 = v313;
      v193 = v343;
LABEL_148:
      v411 = v193;
      v180 = v325;
      goto LABEL_149;
    case 32:
      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v349 = *(_QWORD *)(a2 + 40);
      v325 = *(_QWORD *)(a2 + 48);
      v331 = *(_QWORD *)(a2 + 32);
      v338 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_212:
          __break(1u);
          goto LABEL_213;
        }
        v124 = specialized static Entity.entityInfoType(_:)(v38);
        if (v124)
        {
          v125 = (*(uint64_t (**)(void))(v124 + 232))();
          v126 = *(_QWORD *)(v125 + 16);
          swift_retain();
          MEMORY[0x22076D160](v126, 0);
          *(_QWORD *)(v125 + 16) = v38;
          MEMORY[0x22076D160](v38, v125);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v109 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v109 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      v127 = String.init(cString:)();
      v129 = v128;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v130 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_135;
      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v129);
      if ((v132 & 1) == 0)
        goto LABEL_134;
      v133 = (uint64_t *)(*(_QWORD *)(v130 + 56) + 56 * v131);
      v117 = *v133;
      v118 = v133[1];
      v119 = v133[2];
      v120 = v133[3];
      v134 = v133[4];
      v135 = v133[5];
      v123 = v133[6];
      swift_bridgeObjectRelease();
      goto LABEL_136;
    case 64:
      v40 = *(_QWORD *)a2;
      v41 = *(_QWORD *)(a2 + 8);
      v42 = *(_QWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v325 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v136 = specialized static Entity.entityInfoType(_:)(v40);
        if (v136)
        {
          v137 = (*(uint64_t (**)(void))(v136 + 232))();
          v138 = *(_QWORD *)(v137 + 16);
          swift_retain();
          MEMORY[0x22076D160](v138, 0);
          *(_QWORD *)(v137 + 16) = v40;
          MEMORY[0x22076D160](v40, v137);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v40);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v139 = swift_allocObject();
      swift_weakInit();
      v324 = v139;
      *(_QWORD *)(v139 + 16) = v41;
      swift_beginAccess();
      swift_weakAssign();
      if (v43 && REBindPointBoundComponent())
      {
        v140 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v141 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v142 = v141;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v243 = specialized static Entity.entityInfoType(_:)(v140);
        if (!v243)
        {
          v141 = makeEntity(for:)(v140);
          goto LABEL_77;
        }
        v142 = (*(uint64_t (**)(void))(v243 + 232))();
        v244 = *(_QWORD *)(v142 + 16);
        swift_retain();
        MEMORY[0x22076D160](v244, 0);
        *(_QWORD *)(v142 + 16) = v140;
        MEMORY[0x22076D160](v140, v142);
        swift_release();
      }
      else
      {
        v142 = 0;
      }
LABEL_79:
      v143 = String.init(cString:)();
      v145 = v144;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v146 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v147 = specialized __RawDictionaryStorage.find<A>(_:)(v143, v145);
        if ((v148 & 1) != 0)
        {
          v149 = (uint64_t *)(*(_QWORD *)(v146 + 56) + 56 * v147);
          v150 = *v149;
          v151 = v149[1];
          v152 = v149[2];
          v153 = v149[3];
          v342 = v149[5];
          v350 = v149[4];
          v336 = v149[6];
          swift_bridgeObjectRelease();
LABEL_146:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v419 = 0;
          BYTE8(v419) = 0;
          *(_QWORD *)&v420 = v42;
          *((_QWORD *)&v420 + 1) = v150;
          *(_QWORD *)&v421 = v151;
          *((_QWORD *)&v421 + 1) = v152;
          v318 = v152;
          *(_QWORD *)&v422 = v153;
          *((_QWORD *)&v422 + 1) = v350;
          *(_QWORD *)&v423 = v342;
          *((_QWORD *)&v423 + 1) = v336;
          specialized ActionEventData.action<A>()((uint64_t)&v413);
          v214 = v415;
          if ((_BYTE)v415 == 0xFF)
            goto LABEL_167;
          v376 = v420;
          v377 = v421;
          v378 = v422;
          v379 = v423;
          v215 = v416;
          v216 = v414;
          v217 = v413;
          v281 = HIDWORD(v415);
          v301 = v151;
          v218 = v417;
          v355 = v413;
          v356 = v414;
          v274 = v415 & 1;
          v357 = v415 & 1;
          v358 = HIDWORD(v415);
          v359 = v416;
          v360 = v417;
          v294 = v418 & 1;
          v361 = v418 & 0x101;
          v288 = HIBYTE(v418) & 1;
          v362 = 1;
          v354[0] = v324;
          v363 = v142;
          v364 = 0;
          v365 = 0.0;
          v366 = 0.0;
          v368 = 0;
          v369 = 0.0;
          v367 = Strong;
          v370 = 1;
          v371 = 0;
          v372 = 1;
          v373 = 0;
          v374 = 1;
          v375 = v419;
          v380 = v325;
          swift_retain();
          swift_retain();
          outlined copy of OrbitEntityAction?(v217, v216, v214);
          swift_retain();
          a5(v354);
          outlined consume of OrbitEntityAction?(v217, v216, v214);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v381 = v324;
          v382 = v217;
          v383 = v216;
          v384 = v274;
          v385 = v281;
          v387 = v218;
          v386 = v215;
          LOBYTE(v388) = v294;
          HIBYTE(v388) = v288;
          v389 = 1;
          v390 = v142;
          v391 = 0;
          v393 = 0.0;
          v392 = 0.0;
          v396 = 0.0;
          v394 = Strong;
          v395 = 0;
          v397 = 1;
          v398 = 0;
          v399 = 1;
          v400 = 0;
          v401 = 1;
          v402 = 0;
          v403 = 0;
          v404 = v42;
          v405 = v150;
          v406 = v301;
          v407 = v318;
          v408 = v153;
          v409 = v350;
          v410 = v342;
          v193 = v336;
          goto LABEL_148;
        }
        swift_bridgeObjectRelease();
      }
      v150 = 0;
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v342 = 0;
      v350 = 0;
      v336 = 0;
      goto LABEL_146;
    default:
      if (a4 != 128)
        goto LABEL_168;
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 40);
      v330 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v219 = specialized static Entity.entityInfoType(_:)(v14);
        if (v219)
        {
          v220 = (*(uint64_t (**)(void))(v219 + 232))();
          v221 = *(_QWORD *)(v220 + 16);
          swift_retain();
          MEMORY[0x22076D160](v221, 0);
          *(_QWORD *)(v220 + 16) = v14;
          MEMORY[0x22076D160](v14, v220);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v222 = swift_allocObject();
      swift_weakInit();
      v329 = v222;
      *(_QWORD *)(v222 + 16) = v15;
      swift_beginAccess();
      swift_weakAssign();
      if (v17 && REBindPointBoundComponent())
      {
        v223 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v224 = swift_dynamicCastClassUnconditional();
LABEL_157:
          v225 = v224;
          goto LABEL_159;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          JUMPOUT(0x21BB5BB3CLL);
        }
        v255 = specialized static Entity.entityInfoType(_:)(v223);
        if (!v255)
        {
          v224 = makeEntity(for:)(v223);
          goto LABEL_157;
        }
        v225 = (*(uint64_t (**)(void))(v255 + 232))();
        v256 = *(_QWORD *)(v225 + 16);
        swift_retain();
        MEMORY[0x22076D160](v256, 0);
        *(_QWORD *)(v225 + 16) = v223;
        MEMORY[0x22076D160](v223, v225);
        swift_release();
      }
      else
      {
        v225 = 0;
      }
LABEL_159:
      v226 = String.init(cString:)();
      v228 = v227;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v229 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v230 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v228);
        if ((v231 & 1) != 0)
        {
          v232 = (uint64_t *)(*(_QWORD *)(v229 + 56) + 56 * v230);
          v233 = *v232;
          v234 = v232[1];
          v236 = v232[2];
          v235 = v232[3];
          v237 = v232[4];
          v344 = v232[6];
          v351 = v232[5];
          swift_bridgeObjectRelease();
          goto LABEL_166;
        }
        swift_bridgeObjectRelease();
      }
      v233 = 0;
      v234 = 0;
      v236 = 0;
      v235 = 0;
      v237 = 0;
      v344 = 0;
      v351 = 0;
LABEL_166:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v419 = 0;
      BYTE8(v419) = 0;
      *(_QWORD *)&v420 = v16;
      *((_QWORD *)&v420 + 1) = v233;
      *(_QWORD *)&v421 = v234;
      *((_QWORD *)&v421 + 1) = v236;
      v319 = v237;
      *(_QWORD *)&v422 = v235;
      *((_QWORD *)&v422 + 1) = v237;
      *(_QWORD *)&v423 = v351;
      *((_QWORD *)&v423 + 1) = v344;
      specialized ActionEventData.action<A>()((uint64_t)&v413);
      v238 = v415;
      if ((_BYTE)v415 != 0xFF)
      {
        v376 = v420;
        v377 = v421;
        v378 = v422;
        v379 = v423;
        v308 = v233;
        v239 = v416;
        v240 = v414;
        v241 = v413;
        v282 = HIDWORD(v415);
        v304 = v236;
        v242 = v417;
        v355 = v413;
        v356 = v414;
        v275 = v415 & 1;
        v357 = v415 & 1;
        v358 = HIDWORD(v415);
        v359 = v416;
        v360 = v417;
        v295 = v418 & 1;
        v361 = v418 & 0x101;
        v289 = HIBYTE(v418) & 1;
        v362 = 1;
        v354[0] = v329;
        v363 = v225;
        v364 = 0;
        v365 = 0.0;
        v366 = 0.0;
        v368 = 0;
        v369 = 0.0;
        v367 = Strong;
        v370 = 1;
        v371 = 0;
        v372 = 1;
        v373 = 0;
        v374 = 1;
        v375 = v419;
        v380 = v330;
        swift_retain();
        swift_retain();
        outlined copy of OrbitEntityAction?(v241, v240, v238);
        swift_retain();
        a5(v354);
        swift_release();
        outlined consume of OrbitEntityAction?(v241, v240, v238);
        swift_release();
        swift_release();
        swift_release();
        v381 = v329;
        v382 = v241;
        v383 = v240;
        v384 = v275;
        v385 = v282;
        v387 = v242;
        v386 = v239;
        LOBYTE(v388) = v295;
        HIBYTE(v388) = v289;
        v389 = 1;
        v390 = v225;
        v391 = 0;
        v393 = 0.0;
        v392 = 0.0;
        v396 = 0.0;
        v394 = Strong;
        v395 = 0;
        v397 = 1;
        v398 = 0;
        v399 = 1;
        v400 = 0;
        v401 = 1;
        v402 = 0;
        v403 = 0;
        v404 = v16;
        v405 = v308;
        v406 = v234;
        v407 = v304;
        v408 = v235;
        v409 = v319;
        v410 = v351;
        v411 = v344;
        v180 = v330;
        goto LABEL_149;
      }
      goto LABEL_167;
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t Entity;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  double v229;
  double v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  double v240;
  double v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  double v251;
  double v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  double v263;
  double v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  char v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  char v284;
  char v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t Strong;
  _QWORD v352[2];
  uint64_t v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  uint64_t v359;
  char v360;
  double v361;
  double v362;
  uint64_t v363;
  uint64_t v364;
  double v365;
  char v366;
  unint64_t v367;
  char v368;
  unint64_t v369;
  char v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  char v385;
  double v386;
  double v387;
  uint64_t v388;
  uint64_t v389;
  double v390;
  char v391;
  unint64_t v392;
  char v393;
  unint64_t v394;
  char v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v343 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 64);
      v11 = *(float *)(a2 + 72);
      v12 = *(float *)(a2 + 76);
      v290 = *(_BYTE *)(a2 + 80);
      v302 = *(_QWORD *)(a2 + 48);
      v305 = *(_QWORD *)(a2 + 88);
      v311 = *(_QWORD *)(a2 + 96);
      v318 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v44 = specialized static Entity.entityInfoType(_:)(v8);
        if (v44)
        {
          v45 = (*(uint64_t (**)(void))(v44 + 232))();
          v46 = *(_QWORD *)(v45 + 16);
          swift_retain();
          MEMORY[0x22076D160](v46, 0);
          *(_QWORD *)(v45 + 16) = v8;
          MEMORY[0x22076D160](v8, v45);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v8);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v47 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v47 + 16) = v7;
        swift_beginAccess();
        swift_weakAssign();
        v48 = String.init(cString:)();
        v50 = v49;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v51 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v52 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
          if ((v53 & 1) != 0)
          {
            v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 56 * v52);
            v55 = v54[2];
            v331 = *v54;
            v338 = v54[1];
            v56 = v54[3];
            v324 = v54[4];
            v57 = v54[5];
            v58 = v54[6];
            swift_bridgeObjectRelease();
            goto LABEL_86;
          }
          swift_bridgeObjectRelease();
        }
        v331 = 0;
        v338 = 0;
        v55 = 0;
        v56 = 0;
        v324 = 0;
        v57 = 0;
        v58 = 0;
LABEL_86:
        v279 = v57;
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v412 = v343;
        BYTE8(v412) = 0;
        *(_QWORD *)&v413 = v9;
        *((_QWORD *)&v413 + 1) = v331;
        *(_QWORD *)&v414 = v338;
        *((_QWORD *)&v414 + 1) = v55;
        *(_QWORD *)&v415 = v56;
        *((_QWORD *)&v415 + 1) = v324;
        *(_QWORD *)&v416 = v57;
        *((_QWORD *)&v416 + 1) = v58;
        v281 = v55;
        v286 = v9;
        if (!v10 || !REBindPointBoundComponent())
        {
          v163 = 0;
          goto LABEL_169;
        }
        v160 = v56;
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v162 = swift_dynamicCastClassUnconditional();
          goto LABEL_90;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v221 = specialized static Entity.entityInfoType(_:)(Entity);
          if (v221)
          {
            v163 = (*(uint64_t (**)(void))(v221 + 232))();
            v222 = *(_QWORD *)(v163 + 16);
            swift_retain();
            MEMORY[0x22076D160](v222, 0);
            *(_QWORD *)(v163 + 16) = Entity;
            MEMORY[0x22076D160](Entity, v163);
            swift_release();
            goto LABEL_168;
          }
          v162 = makeEntity(for:)(Entity);
LABEL_90:
          v163 = v162;
LABEL_168:
          v56 = v160;
LABEL_169:
          specialized ActionEventData.action<A>()((uint64_t)&v407);
          v223 = v409;
          if ((_BYTE)v409 != 0xFF)
          {
            v224 = v410;
            v277 = v56;
            v225 = v408;
            v226 = v407;
            v227 = v411;
            swift_retain();
            outlined copy of OrbitEntityAction?(v226, v225, v223);
            v228 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<ImpulseAction>);
            v372 = v413;
            v373 = v414;
            v374 = v415;
            v375 = v416;
            v229 = v11;
            v230 = v12;
            v353 = v226;
            v354 = v225;
            v355 = v223 & 1;
            v356 = v224;
            v357 = v227;
            v272 = v228 & 1;
            v358 = v228 & 1;
            v352[0] = v47;
            v359 = v163;
            v360 = v290;
            v361 = v229;
            v362 = v230;
            v363 = Strong;
            v364 = v318;
            v365 = -1.0;
            v366 = 0;
            v367 = v305;
            v368 = 0;
            v369 = v311;
            v370 = 0;
            v371 = v412;
            v376 = v302;
            swift_retain();
            swift_retain();
            a5(v352);
            outlined consume of OrbitEntityAction?(v226, v225, v223);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v377 = v47;
            v378 = v226;
            v379 = v225;
            v380 = v223 & 1;
            v381 = v224;
            v382 = v227;
            v383 = v272;
            v384 = v163;
            v385 = v290;
            v386 = v229;
            v387 = v230;
            v388 = Strong;
            v389 = v318;
            v390 = -1.0;
            v391 = 0;
            v392 = v305;
            v393 = 0;
            v394 = v311;
            v395 = 0;
            v396 = v343;
            v397 = 0;
            v398 = v286;
            v399 = v331;
            v400 = v338;
            v401 = v281;
            v402 = v277;
            v403 = v324;
            v404 = v279;
            v231 = v58;
LABEL_177:
            v405 = v231;
            v192 = v302;
            goto LABEL_193;
          }
          goto LABEL_189;
        }
        goto LABEL_229;
      }
      __break(1u);
      goto LABEL_221;
    case 2:
      v19 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v344 = *(_QWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(float *)(a2 + 56);
      v312 = *(_QWORD *)(a2 + 64);
      v319 = *(_QWORD *)(a2 + 48);
      v22 = *(_QWORD *)(a2 + 88);
      v302 = *(_QWORD *)(a2 + 80);
      v306 = *(_QWORD *)(a2 + 72);
      v23 = *(float *)(a2 + 96);
      v24 = *(float *)(a2 + 100);
      v285 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v59 = specialized static Entity.entityInfoType(_:)(v19);
        if (v59)
        {
          v60 = (*(uint64_t (**)(void))(v59 + 232))();
          v61 = *(_QWORD *)(v60 + 16);
          swift_retain();
          MEMORY[0x22076D160](v61, 0);
          *(_QWORD *)(v60 + 16) = v19;
          MEMORY[0x22076D160](v19, v60);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v19);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v62 = swift_allocObject();
        swift_weakInit();
        v291 = v62;
        *(_QWORD *)(v62 + 16) = v18;
        swift_beginAccess();
        swift_weakAssign();
        v63 = String.init(cString:)();
        v65 = v64;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v66 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v65);
          if ((v68 & 1) != 0)
          {
            v69 = (uint64_t *)(*(_QWORD *)(v66 + 56) + 56 * v67);
            v70 = v69[2];
            v332 = *v69;
            v339 = v69[1];
            v71 = v69[3];
            v325 = v69[4];
            v72 = v69[5];
            v73 = v69[6];
            swift_bridgeObjectRelease();
LABEL_94:
            v276 = v72;
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v412 = v344;
            BYTE8(v412) = 0;
            *(_QWORD *)&v413 = v20;
            *((_QWORD *)&v413 + 1) = v332;
            *(_QWORD *)&v414 = v339;
            *((_QWORD *)&v414 + 1) = v70;
            *(_QWORD *)&v415 = v71;
            *((_QWORD *)&v415 + 1) = v325;
            *(_QWORD *)&v416 = v72;
            *((_QWORD *)&v416 + 1) = v73;
            v280 = v70;
            v282 = v20;
            if (!v22 || !REBindPointBoundComponent())
            {
              v167 = 0;
              goto LABEL_175;
            }
            v164 = v71;
            v165 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v166 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_230:
                __break(1u);
                goto LABEL_231;
              }
              v232 = specialized static Entity.entityInfoType(_:)(v165);
              if (v232)
              {
                v167 = (*(uint64_t (**)(void))(v232 + 232))();
                v233 = *(_QWORD *)(v167 + 16);
                swift_retain();
                MEMORY[0x22076D160](v233, 0);
                *(_QWORD *)(v167 + 16) = v165;
                MEMORY[0x22076D160](v165, v167);
                swift_release();
                goto LABEL_174;
              }
              v166 = makeEntity(for:)(v165);
            }
            v167 = v166;
LABEL_174:
            v71 = v164;
LABEL_175:
            specialized ActionEventData.action<A>()((uint64_t)&v407);
            v234 = v409;
            if ((_BYTE)v409 != 0xFF)
            {
              v235 = v410;
              v274 = v71;
              v236 = v408;
              v237 = v407;
              v238 = v411;
              swift_retain();
              outlined copy of OrbitEntityAction?(v237, v236, v234);
              v239 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<ImpulseAction>);
              v372 = v413;
              v373 = v414;
              v374 = v415;
              v375 = v416;
              v240 = v23;
              v241 = v24;
              v242 = v21;
              v353 = v237;
              v354 = v236;
              v355 = v234 & 1;
              v356 = v235;
              v357 = v238;
              v271 = v239 & 1;
              v358 = v239 & 1;
              v352[0] = v291;
              v359 = v167;
              v360 = v285;
              v361 = v240;
              v362 = v241;
              v363 = Strong;
              v364 = v306;
              v365 = v242;
              v366 = 0;
              v367 = v319;
              v368 = 0;
              v369 = v312;
              v370 = 0;
              v371 = v412;
              v376 = v302;
              swift_retain();
              swift_retain();
              a5(v352);
              outlined consume of OrbitEntityAction?(v237, v236, v234);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v377 = v291;
              v378 = v237;
              v379 = v236;
              v380 = v234 & 1;
              v381 = v235;
              v382 = v238;
              v383 = v271;
              v384 = v167;
              v385 = v285;
              v386 = v240;
              v387 = v241;
              v388 = Strong;
              v389 = v306;
              v390 = v242;
              v391 = 0;
              v392 = v319;
              v393 = 0;
              v394 = v312;
              v395 = 0;
              v396 = v344;
              v397 = 0;
              v398 = v282;
              v399 = v332;
              v400 = v339;
              v401 = v280;
              v402 = v274;
              v403 = v325;
              v404 = v276;
              v231 = v73;
              goto LABEL_177;
            }
LABEL_189:
            swift_release();
            swift_release();
            swift_release();
LABEL_190:
            swift_release();
            return 0;
          }
          swift_bridgeObjectRelease();
        }
        v332 = 0;
        v339 = 0;
        v70 = 0;
        v71 = 0;
        v325 = 0;
        v72 = 0;
        v73 = 0;
        goto LABEL_94;
      }
LABEL_221:
      __break(1u);
      goto LABEL_222;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_190;
    case 4:
      v26 = *(_QWORD *)a2;
      v25 = *(_QWORD *)(a2 + 8);
      v345 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v307 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 64);
      v320 = *(_QWORD *)(a2 + 56);
      v29 = *(float *)(a2 + 72);
      v30 = *(float *)(a2 + 76);
      v313 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v74 = specialized static Entity.entityInfoType(_:)(v26);
        if (v74)
        {
          v75 = (*(uint64_t (**)(void))(v74 + 232))();
          v76 = *(_QWORD *)(v75 + 16);
          swift_retain();
          MEMORY[0x22076D160](v76, 0);
          *(_QWORD *)(v75 + 16) = v26;
          MEMORY[0x22076D160](v26, v75);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v26);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v77 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v77 + 16) = v25;
        swift_beginAccess();
        swift_weakAssign();
        v78 = String.init(cString:)();
        v80 = v79;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v81 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v82 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v80);
          if ((v83 & 1) != 0)
          {
            v84 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 56 * v82);
            v85 = v84[2];
            v333 = *v84;
            v340 = v84[1];
            v86 = v84[3];
            v326 = v84[4];
            v87 = v84[5];
            v88 = v84[6];
            swift_bridgeObjectRelease();
LABEL_102:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v412 = v345;
            BYTE8(v412) = 0;
            *(_QWORD *)&v413 = v27;
            *((_QWORD *)&v413 + 1) = v333;
            *(_QWORD *)&v414 = v340;
            *((_QWORD *)&v414 + 1) = v85;
            *(_QWORD *)&v415 = v86;
            *((_QWORD *)&v415 + 1) = v326;
            *(_QWORD *)&v416 = v87;
            *((_QWORD *)&v416 + 1) = v88;
            v292 = v85;
            v298 = v27;
            if (!v28 || !REBindPointBoundComponent())
            {
              v171 = 0;
LABEL_182:
              specialized ActionEventData.action<A>()((uint64_t)&v407);
              v245 = v409;
              if ((_BYTE)v409 == 0xFF)
                goto LABEL_189;
              v246 = v410;
              v288 = v86;
              v247 = v408;
              v248 = v407;
              v249 = v411;
              swift_retain();
              outlined copy of OrbitEntityAction?(v248, v247, v245);
              v250 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<ImpulseAction>);
              v372 = v413;
              v373 = v414;
              v374 = v415;
              v375 = v416;
              v251 = v29;
              v252 = v30;
              v353 = v248;
              v354 = v247;
              v278 = v88;
              v355 = v245 & 1;
              v356 = v246;
              v357 = v249;
              v275 = v250 & 1;
              v358 = v250 & 1;
              v352[0] = v77;
              v359 = v171;
              v360 = v313;
              v361 = v251;
              v362 = v252;
              v363 = Strong;
              v364 = v320;
              v365 = -1.0;
              v366 = 0;
              v367 = 0xBFF0000000000000;
              v368 = 0;
              v369 = 0xBFF0000000000000;
              v370 = 0;
              v371 = v412;
              v376 = v307;
              swift_retain();
              swift_retain();
              a5(v352);
              outlined consume of OrbitEntityAction?(v248, v247, v245);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v377 = v77;
              v378 = v248;
              v379 = v247;
              v380 = v245 & 1;
              v381 = v246;
              v382 = v249;
              v383 = v275;
              v384 = v171;
              v385 = v313;
              v386 = v251;
              v387 = v252;
              v388 = Strong;
              v389 = v320;
              v390 = -1.0;
              v391 = 0;
              v392 = 0xBFF0000000000000;
              v393 = 0;
              v394 = 0xBFF0000000000000;
              v395 = 0;
              v396 = v345;
              v397 = 0;
              v398 = v298;
              v399 = v333;
              v400 = v340;
              v401 = v292;
              v402 = v288;
              v403 = v326;
              v253 = v87;
LABEL_192:
              v404 = v253;
              v405 = v278;
              v192 = v307;
              goto LABEL_193;
            }
            v168 = v86;
            v169 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v170 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_231:
                __break(1u);
                goto LABEL_232;
              }
              v243 = specialized static Entity.entityInfoType(_:)(v169);
              if (v243)
              {
                v171 = (*(uint64_t (**)(void))(v243 + 232))();
                v244 = *(_QWORD *)(v171 + 16);
                swift_retain();
                MEMORY[0x22076D160](v244, 0);
                *(_QWORD *)(v171 + 16) = v169;
                MEMORY[0x22076D160](v169, v171);
                swift_release();
                goto LABEL_181;
              }
              v170 = makeEntity(for:)(v169);
            }
            v171 = v170;
LABEL_181:
            v86 = v168;
            goto LABEL_182;
          }
          swift_bridgeObjectRelease();
        }
        v333 = 0;
        v340 = 0;
        v85 = 0;
        v86 = 0;
        v326 = 0;
        v87 = 0;
        v88 = 0;
        goto LABEL_102;
      }
LABEL_222:
      __break(1u);
      goto LABEL_223;
    case 8:
      v32 = *(_QWORD *)a2;
      v31 = *(_QWORD *)(a2 + 8);
      v335 = *(_QWORD *)(a2 + 32);
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(float *)(a2 + 64);
      v35 = *(float *)(a2 + 68);
      v297 = *(_BYTE *)(a2 + 72);
      v307 = *(_QWORD *)(a2 + 48);
      v314 = *(_QWORD *)(a2 + 80);
      v321 = *(_QWORD *)(a2 + 88);
      v346 = *(_QWORD *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v89 = specialized static Entity.entityInfoType(_:)(v32);
        if (v89)
        {
          v90 = (*(uint64_t (**)(void))(v89 + 232))();
          v91 = *(_QWORD *)(v90 + 16);
          swift_retain();
          MEMORY[0x22076D160](v91, 0);
          *(_QWORD *)(v90 + 16) = v32;
          MEMORY[0x22076D160](v32, v90);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v32);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v92 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v92 + 16) = v31;
        swift_beginAccess();
        swift_weakAssign();
        v93 = String.init(cString:)();
        v95 = v94;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v96 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v97 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v95);
          if ((v98 & 1) != 0)
          {
            v99 = (uint64_t *)(*(_QWORD *)(v96 + 56) + 56 * v97);
            v100 = v99[2];
            v327 = v99[1];
            v334 = *v99;
            v101 = v99[3];
            v102 = v99[4];
            v104 = v99[5];
            v103 = v99[6];
            swift_bridgeObjectRelease();
            goto LABEL_110;
          }
          swift_bridgeObjectRelease();
        }
        v327 = 0;
        v334 = 0;
        v100 = 0;
        v101 = 0;
        v102 = 0;
        v104 = 0;
        v103 = 0;
LABEL_110:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v412 = v335;
        BYTE8(v412) = 0;
        *(_QWORD *)&v413 = v346;
        *((_QWORD *)&v413 + 1) = v334;
        *(_QWORD *)&v414 = v327;
        *((_QWORD *)&v414 + 1) = v100;
        *(_QWORD *)&v415 = v101;
        *((_QWORD *)&v415 + 1) = v102;
        *(_QWORD *)&v416 = v104;
        *((_QWORD *)&v416 + 1) = v103;
        v293 = v100;
        if (v33)
        {
          if (REBindPointBoundComponent())
          {
            v172 = v101;
            v173 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v174 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_232:
                __break(1u);
                goto LABEL_233;
              }
              v254 = specialized static Entity.entityInfoType(_:)(v173);
              if (v254)
              {
                v255 = (*(uint64_t (**)(void))(v254 + 232))();
                v256 = *(_QWORD *)(v255 + 16);
                swift_retain();
                MEMORY[0x22076D160](v256, 0);
                *(_QWORD *)(v255 + 16) = v173;
                MEMORY[0x22076D160](v173, v255);
                swift_release();
                v101 = v172;
                v33 = v255;
                goto LABEL_188;
              }
              v174 = makeEntity(for:)(v173);
            }
            v101 = v172;
            v33 = v174;
          }
          else
          {
            v33 = 0;
          }
        }
LABEL_188:
        specialized ActionEventData.action<A>()((uint64_t)&v407);
        v257 = v409;
        if ((_BYTE)v409 == 0xFF)
          goto LABEL_189;
        v258 = v410;
        v289 = v101;
        v259 = v408;
        v260 = v407;
        v261 = v411;
        swift_retain();
        outlined copy of OrbitEntityAction?(v260, v259, v257);
        v262 = specialized ActionEventData.parameter<A>(type:)(&demangling cache variable for type metadata for EntityActionParameterWrapper<ImpulseAction>);
        v372 = v413;
        v373 = v414;
        v374 = v415;
        v375 = v416;
        v263 = v34;
        v264 = v35;
        v353 = v260;
        v354 = v259;
        v278 = v103;
        v355 = v257 & 1;
        v356 = v258;
        v357 = v261;
        v273 = v262 & 1;
        v358 = v262 & 1;
        v352[0] = v92;
        v359 = v33;
        v360 = v297;
        v361 = v263;
        v362 = v264;
        v364 = 0;
        v365 = 0.0;
        v363 = Strong;
        v366 = 1;
        v367 = v314;
        v368 = 0;
        v369 = v321;
        v370 = 0;
        v371 = v412;
        v376 = v307;
        swift_retain();
        swift_retain();
        a5(v352);
        outlined consume of OrbitEntityAction?(v260, v259, v257);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v377 = v92;
        v378 = v260;
        v379 = v259;
        v380 = v257 & 1;
        v381 = v258;
        v382 = v261;
        v383 = v273;
        v384 = v33;
        v385 = v297;
        v386 = v263;
        v387 = v264;
        v390 = 0.0;
        v388 = Strong;
        v389 = 0;
        v391 = 1;
        v392 = v314;
        v393 = 0;
        v394 = v321;
        v395 = 0;
        v396 = v335;
        v397 = 0;
        v398 = v346;
        v399 = v334;
        v400 = v327;
        v401 = v293;
        v402 = v289;
        v403 = v102;
        v253 = v104;
        goto LABEL_192;
      }
LABEL_223:
      __break(1u);
      goto LABEL_224;
    case 16:
      v37 = *(_QWORD *)a2;
      v36 = *(_QWORD *)(a2 + 8);
      v347 = *(_QWORD *)(a2 + 40);
      v323 = *(_QWORD *)(a2 + 48);
      v329 = *(_QWORD *)(a2 + 32);
      v336 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      v105 = specialized static Entity.entityInfoType(_:)(v37);
      if (v105)
      {
        v106 = (*(uint64_t (**)(void))(v105 + 232))();
        v107 = *(_QWORD *)(v106 + 16);
        swift_retain();
        MEMORY[0x22076D160](v107, 0);
        *(_QWORD *)(v106 + 16) = v37;
        MEMORY[0x22076D160](v37, v106);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v37);
      }
LABEL_57:
      type metadata accessor for AnimationPlaybackController();
      v108 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v108 + 16) = v36;
      swift_beginAccess();
      swift_weakAssign();
      v109 = String.init(cString:)();
      v111 = v110;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v112 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_116;
      swift_bridgeObjectRetain();
      v113 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v111);
      if ((v114 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_116:
        v116 = 0;
        v117 = 0;
        v119 = 0;
        v118 = 0;
        v120 = 0;
        v121 = 0;
        v122 = 0;
        goto LABEL_117;
      }
      v115 = (uint64_t *)(*(_QWORD *)(v112 + 56) + 56 * v113);
      v116 = *v115;
      v117 = v115[1];
      v119 = v115[2];
      v118 = v115[3];
      v120 = v115[4];
      v121 = v115[5];
      v122 = v115[6];
      swift_bridgeObjectRelease();
LABEL_117:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v412 = 0;
      BYTE8(v412) = 0;
      *(_QWORD *)&v413 = v347;
      *((_QWORD *)&v413 + 1) = v116;
      *(_QWORD *)&v414 = v117;
      *((_QWORD *)&v414 + 1) = v119;
      *(_QWORD *)&v415 = v118;
      *((_QWORD *)&v415 + 1) = v120;
      *(_QWORD *)&v416 = v121;
      *((_QWORD *)&v416 + 1) = v122;
      v308 = v120;
      v315 = v118;
      v303 = v122;
      if (v336 && REBindPointBoundComponent())
      {
        v175 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v176 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_233:
            __break(1u);
            goto LABEL_234;
          }
          v265 = specialized static Entity.entityInfoType(_:)(v175);
          if (v265)
          {
            v177 = (*(uint64_t (**)(void))(v265 + 232))();
            v266 = *(_QWORD *)(v177 + 16);
            swift_retain();
            MEMORY[0x22076D160](v266, 0);
            *(_QWORD *)(v177 + 16) = v175;
            MEMORY[0x22076D160](v175, v177);
            swift_release();
            goto LABEL_123;
          }
          v176 = makeEntity(for:)(v175);
        }
        v177 = v176;
      }
      else
      {
        v177 = 0;
      }
LABEL_123:
      specialized ActionEventData.action<A>()((uint64_t)&v407);
      v178 = v409;
      if ((_BYTE)v409 == 0xFF)
        goto LABEL_189;
      v372 = v413;
      v373 = v414;
      v374 = v415;
      v375 = v416;
      v179 = v410;
      v294 = v119;
      v299 = v117;
      v180 = v408;
      v181 = v407;
      v182 = v411;
      v353 = v407;
      v354 = v408;
      v283 = v409 & 1;
      v355 = v409 & 1;
      v356 = v410;
      v357 = v411;
      v358 = 1;
      v352[0] = v108;
      v359 = v177;
      v360 = 0;
      v361 = 0.0;
      v362 = 0.0;
      v364 = 0;
      v365 = 0.0;
      v363 = Strong;
      v366 = 1;
      v367 = v329;
      v368 = 0;
      v369 = 0;
      v370 = 1;
      v371 = v412;
      v376 = v323;
      swift_retain();
      swift_retain();
      outlined copy of OrbitEntityAction?(v181, v180, v178);
      swift_retain();
      a5(v352);
      outlined consume of OrbitEntityAction?(v181, v180, v178);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v377 = v108;
      v378 = v181;
      v379 = v180;
      v380 = v283;
      v381 = v179;
      v382 = v182;
      v383 = 1;
      v384 = v177;
      v385 = 0;
      v387 = 0.0;
      v386 = 0.0;
      v390 = 0.0;
      v388 = Strong;
      v389 = 0;
      v391 = 1;
      v392 = v329;
      v393 = 0;
      v394 = 0;
      v395 = 1;
      v396 = 0;
      v397 = 0;
      v398 = v347;
      v399 = v116;
      v400 = v299;
      v401 = v294;
      v402 = v315;
      v403 = v308;
      v404 = v121;
      v183 = v303;
LABEL_136:
      v405 = v183;
      v192 = v323;
LABEL_193:
      v406 = v192;
      outlined release of ActionEvent<OrbitEntityAction>((uint64_t)&v377);
      return 0;
    case 32:
      v39 = *(_QWORD *)a2;
      v38 = *(_QWORD *)(a2 + 8);
      v348 = *(_QWORD *)(a2 + 40);
      v323 = *(_QWORD *)(a2 + 48);
      v330 = *(_QWORD *)(a2 + 32);
      v337 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        v123 = specialized static Entity.entityInfoType(_:)(v39);
        if (v123)
        {
          v124 = (*(uint64_t (**)(void))(v123 + 232))();
          v125 = *(_QWORD *)(v124 + 16);
          swift_retain();
          MEMORY[0x22076D160](v125, 0);
          *(_QWORD *)(v124 + 16) = v39;
          MEMORY[0x22076D160](v39, v124);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v39);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v126 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v126 + 16) = v38;
      swift_beginAccess();
      swift_weakAssign();
      v127 = String.init(cString:)();
      v129 = v128;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v130 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_126;
      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v129);
      if ((v132 & 1) != 0)
      {
        v133 = (uint64_t *)(*(_QWORD *)(v130 + 56) + 56 * v131);
        v134 = *v133;
        v135 = v133[1];
        v137 = v133[2];
        v136 = v133[3];
        v138 = v133[4];
        v139 = v133[5];
        v140 = v133[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_126:
        v134 = 0;
        v135 = 0;
        v137 = 0;
        v136 = 0;
        v138 = 0;
        v139 = 0;
        v140 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v412 = 0;
      BYTE8(v412) = 0;
      *(_QWORD *)&v413 = v348;
      *((_QWORD *)&v413 + 1) = v134;
      *(_QWORD *)&v414 = v135;
      *((_QWORD *)&v414 + 1) = v137;
      *(_QWORD *)&v415 = v136;
      *((_QWORD *)&v415 + 1) = v138;
      *(_QWORD *)&v416 = v139;
      *((_QWORD *)&v416 + 1) = v140;
      v309 = v138;
      v316 = v136;
      if (v337 && REBindPointBoundComponent())
      {
        v184 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v185 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_234:
            __break(1u);
            goto LABEL_235;
          }
          v267 = specialized static Entity.entityInfoType(_:)(v184);
          if (v267)
          {
            v186 = (*(uint64_t (**)(void))(v267 + 232))();
            v268 = *(_QWORD *)(v186 + 16);
            swift_retain();
            MEMORY[0x22076D160](v268, 0);
            *(_QWORD *)(v186 + 16) = v184;
            MEMORY[0x22076D160](v184, v186);
            swift_release();
            goto LABEL_133;
          }
          v185 = makeEntity(for:)(v184);
        }
        v186 = v185;
      }
      else
      {
        v186 = 0;
      }
LABEL_133:
      specialized ActionEventData.action<A>()((uint64_t)&v407);
      v187 = v409;
      if ((_BYTE)v409 == 0xFF)
        goto LABEL_189;
      v372 = v413;
      v373 = v414;
      v374 = v415;
      v375 = v416;
      v342 = v140;
      v188 = v410;
      v300 = v135;
      v189 = v408;
      v295 = v137;
      v190 = v407;
      v191 = v411;
      v353 = v407;
      v354 = v408;
      v284 = v409 & 1;
      v355 = v409 & 1;
      v356 = v410;
      v357 = v411;
      v358 = 1;
      v352[0] = v126;
      v359 = v186;
      v360 = 0;
      v361 = 0.0;
      v362 = 0.0;
      v364 = 0;
      v365 = 0.0;
      v363 = Strong;
      v366 = 1;
      v367 = v330;
      v368 = 0;
      v369 = 0;
      v370 = 1;
      v371 = v412;
      v376 = v323;
      swift_retain();
      swift_retain();
      outlined copy of OrbitEntityAction?(v190, v189, v187);
      swift_retain();
      a5(v352);
      outlined consume of OrbitEntityAction?(v190, v189, v187);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v377 = v126;
      v378 = v190;
      v379 = v189;
      v380 = v284;
      v381 = v188;
      v382 = v191;
      v383 = 1;
      v384 = v186;
      v385 = 0;
      v387 = 0.0;
      v386 = 0.0;
      v390 = 0.0;
      v388 = Strong;
      v389 = 0;
      v391 = 1;
      v392 = v330;
      v393 = 0;
      v394 = 0;
      v395 = 1;
      v396 = 0;
      v397 = 0;
      v398 = v348;
      v399 = v134;
      v400 = v300;
      v401 = v295;
      v402 = v316;
      v403 = v309;
      v404 = v139;
      v183 = v342;
      goto LABEL_136;
    case 64:
      v41 = *(_QWORD *)a2;
      v40 = *(_QWORD *)(a2 + 8);
      v42 = *(_QWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v328 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
        v141 = specialized static Entity.entityInfoType(_:)(v41);
        if (v141)
        {
          v142 = (*(uint64_t (**)(void))(v141 + 232))();
          v143 = *(_QWORD *)(v142 + 16);
          swift_retain();
          MEMORY[0x22076D160](v143, 0);
          *(_QWORD *)(v142 + 16) = v41;
          MEMORY[0x22076D160](v41, v142);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v41);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v144 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v144 + 16) = v40;
      swift_beginAccess();
      swift_weakAssign();
      if (v43 && REBindPointBoundComponent())
      {
        v145 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v146 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v147 = v146;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
          goto LABEL_230;
        }
        v219 = specialized static Entity.entityInfoType(_:)(v145);
        if (!v219)
        {
          v146 = makeEntity(for:)(v145);
          goto LABEL_77;
        }
        v147 = (*(uint64_t (**)(void))(v219 + 232))();
        v220 = *(_QWORD *)(v147 + 16);
        swift_retain();
        MEMORY[0x22076D160](v220, 0);
        *(_QWORD *)(v147 + 16) = v145;
        MEMORY[0x22076D160](v145, v147);
        swift_release();
      }
      else
      {
        v147 = 0;
      }
LABEL_79:
      v148 = String.init(cString:)();
      v150 = v149;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v151 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v152 = specialized __RawDictionaryStorage.find<A>(_:)(v148, v150);
        if ((v153 & 1) != 0)
        {
          v154 = (uint64_t *)(*(_QWORD *)(v151 + 56) + 56 * v152);
          v155 = *v154;
          v156 = v154[1];
          v158 = v154[2];
          v157 = v154[3];
          v159 = v154[4];
          v341 = v154[6];
          v349 = v154[5];
          swift_bridgeObjectRelease();
LABEL_139:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v412 = 0;
          BYTE8(v412) = 0;
          *(_QWORD *)&v413 = v42;
          *((_QWORD *)&v413 + 1) = v155;
          *(_QWORD *)&v414 = v156;
          *((_QWORD *)&v414 + 1) = v158;
          v317 = v159;
          v322 = v157;
          *(_QWORD *)&v415 = v157;
          *((_QWORD *)&v415 + 1) = v159;
          *(_QWORD *)&v416 = v349;
          *((_QWORD *)&v416 + 1) = v341;
          specialized ActionEventData.action<A>()((uint64_t)&v407);
          v193 = v409;
          if ((_BYTE)v409 == 0xFF)
            goto LABEL_189;
          v372 = v413;
          v373 = v414;
          v374 = v415;
          v375 = v416;
          v301 = v42;
          v304 = v155;
          v194 = v410;
          v310 = v158;
          v195 = v408;
          v196 = v407;
          v296 = v156;
          v197 = v144;
          v198 = Strong;
          v199 = v411;
          v353 = v407;
          v354 = v408;
          v287 = v409 & 1;
          v355 = v409 & 1;
          v356 = v410;
          v357 = v411;
          v358 = 1;
          v352[0] = v197;
          v359 = v147;
          v360 = 0;
          v361 = 0.0;
          v362 = 0.0;
          v364 = 0;
          v365 = 0.0;
          v363 = Strong;
          v366 = 1;
          v367 = 0;
          v368 = 1;
          v369 = 0;
          v370 = 1;
          v371 = v412;
          v376 = v328;
          swift_retain();
          swift_retain();
          outlined copy of OrbitEntityAction?(v196, v195, v193);
          swift_retain();
          a5(v352);
          outlined consume of OrbitEntityAction?(v196, v195, v193);
          swift_release();
LABEL_161:
          swift_release();
          swift_release();
          swift_release();
          v377 = v197;
          v378 = v196;
          v379 = v195;
          v380 = v287;
          v381 = v194;
          v382 = v199;
          v383 = 1;
          v384 = v147;
          v385 = 0;
          v387 = 0.0;
          v386 = 0.0;
          v390 = 0.0;
          v388 = v198;
          v389 = 0;
          v391 = 1;
          v392 = 0;
          v393 = 1;
          v394 = 0;
          v395 = 1;
          v396 = 0;
          v397 = 0;
          v398 = v301;
          v399 = v304;
          v400 = v296;
          v401 = v310;
          v402 = v322;
          v403 = v317;
          v404 = v349;
          v405 = v341;
          v192 = v328;
          goto LABEL_193;
        }
        swift_bridgeObjectRelease();
      }
      v155 = 0;
      v156 = 0;
      v158 = 0;
      v157 = 0;
      v159 = 0;
      v341 = 0;
      v349 = 0;
      goto LABEL_139;
    default:
      if (a4 != 128)
        goto LABEL_190;
      v15 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 40);
      v328 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_227:
          __break(1u);
          goto LABEL_228;
        }
        v200 = specialized static Entity.entityInfoType(_:)(v15);
        if (v200)
        {
          v201 = (*(uint64_t (**)(void))(v200 + 232))();
          v202 = *(_QWORD *)(v201 + 16);
          swift_retain();
          MEMORY[0x22076D160](v202, 0);
          *(_QWORD *)(v201 + 16) = v15;
          MEMORY[0x22076D160](v15, v201);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v15);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v203 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v203 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      if (v17 && REBindPointBoundComponent())
      {
        v204 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v205 = swift_dynamicCastClassUnconditional();
LABEL_148:
          v147 = v205;
          goto LABEL_150;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_235:
          __break(1u);
          JUMPOUT(0x21BB5E368);
        }
        v269 = specialized static Entity.entityInfoType(_:)(v204);
        if (!v269)
        {
          v205 = makeEntity(for:)(v204);
          goto LABEL_148;
        }
        v147 = (*(uint64_t (**)(void))(v269 + 232))();
        v270 = *(_QWORD *)(v147 + 16);
        swift_retain();
        MEMORY[0x22076D160](v270, 0);
        *(_QWORD *)(v147 + 16) = v204;
        MEMORY[0x22076D160](v204, v147);
        swift_release();
      }
      else
      {
        v147 = 0;
      }
LABEL_150:
      v206 = String.init(cString:)();
      v208 = v207;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v209 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v210 = specialized __RawDictionaryStorage.find<A>(_:)(v206, v208);
        if ((v211 & 1) != 0)
        {
          v212 = (uint64_t *)(*(_QWORD *)(v209 + 56) + 56 * v210);
          v213 = *v212;
          v214 = v212[1];
          v216 = v212[2];
          v215 = v212[3];
          v217 = v212[4];
          v341 = v212[6];
          v349 = v212[5];
          swift_bridgeObjectRelease();
LABEL_158:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v412 = 0;
          BYTE8(v412) = 0;
          *(_QWORD *)&v413 = v16;
          *((_QWORD *)&v413 + 1) = v213;
          *(_QWORD *)&v414 = v214;
          *((_QWORD *)&v414 + 1) = v216;
          v317 = v217;
          v322 = v215;
          *(_QWORD *)&v415 = v215;
          *((_QWORD *)&v415 + 1) = v217;
          *(_QWORD *)&v416 = v349;
          *((_QWORD *)&v416 + 1) = v341;
          specialized ActionEventData.action<A>()((uint64_t)&v407);
          v218 = v409;
          if ((_BYTE)v409 == 0xFF)
            goto LABEL_189;
          v372 = v413;
          v373 = v414;
          v374 = v415;
          v375 = v416;
          v301 = v16;
          v304 = v213;
          v194 = v410;
          v310 = v216;
          v195 = v408;
          v196 = v407;
          v296 = v214;
          v197 = v203;
          v198 = Strong;
          v199 = v411;
          v353 = v407;
          v354 = v408;
          v287 = v409 & 1;
          v355 = v409 & 1;
          v356 = v410;
          v357 = v411;
          v358 = 1;
          v352[0] = v197;
          v359 = v147;
          v360 = 0;
          v361 = 0.0;
          v362 = 0.0;
          v364 = 0;
          v365 = 0.0;
          v363 = Strong;
          v366 = 1;
          v367 = 0;
          v368 = 1;
          v369 = 0;
          v370 = 1;
          v371 = v412;
          v376 = v328;
          swift_retain();
          swift_retain();
          outlined copy of OrbitEntityAction?(v196, v195, v218);
          swift_retain();
          a5(v352);
          swift_release();
          outlined consume of OrbitEntityAction?(v196, v195, v218);
          goto LABEL_161;
        }
        swift_bridgeObjectRelease();
      }
      v213 = 0;
      v214 = 0;
      v216 = 0;
      v215 = 0;
      v217 = 0;
      v341 = 0;
      v349 = 0;
      goto LABEL_158;
  }
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *), uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t Entity;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  double v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  double v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  double v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  char v271;
  char v272;
  char v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  char v310;
  char v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  char v317;
  unint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t Strong;
  _QWORD v384[2];
  uint64_t v385;
  uint64_t v386;
  char v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  char v392;
  char v393;
  uint64_t v394;
  char v395;
  double v396;
  double v397;
  uint64_t v398;
  uint64_t v399;
  double v400;
  char v401;
  unint64_t v402;
  char v403;
  unint64_t v404;
  char v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char v420;
  char v421;
  uint64_t v422;
  char v423;
  double v424;
  double v425;
  uint64_t v426;
  uint64_t v427;
  double v428;
  char v429;
  unint64_t v430;
  char v431;
  unint64_t v432;
  char v433;
  uint64_t v434;
  char v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v350 = *(_QWORD *)(a2 + 32);
      v356 = *(_QWORD *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 64);
      v332 = *(_QWORD *)(a2 + 56);
      v338 = *(_QWORD *)(a2 + 48);
      v16 = *(float *)(a2 + 72);
      v17 = *(float *)(a2 + 76);
      v312 = *(_BYTE *)(a2 + 80);
      v318 = *(_QWORD *)(a2 + 88);
      v324 = *(_QWORD *)(a2 + 96);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_214;
      }
      v44 = specialized static Entity.entityInfoType(_:)(v13);
      if (v44)
      {
        v45 = (*(uint64_t (**)(void))(v44 + 232))();
        v46 = *(_QWORD *)(v45 + 16);
        swift_retain();
        MEMORY[0x22076D160](v46, 0);
        *(_QWORD *)(v45 + 16) = v13;
        MEMORY[0x22076D160](v13, v45);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v13);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v47 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v47 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      v48 = String.init(cString:)();
      v50 = v49;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v51 = static AnimationResource.codableActionTypeMap;
      v366 = a8;
      v375 = a7;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_85;
      swift_bridgeObjectRetain();
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
      if ((v53 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_85:
        v347 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        goto LABEL_86;
      }
      v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 56 * v52);
      v55 = v54[1];
      v347 = *v54;
      v56 = v54[2];
      v57 = v54[3];
      v58 = v54[4];
      v59 = v54[5];
      v60 = v54[6];
      swift_bridgeObjectRelease();
LABEL_86:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v453 = v350;
      BYTE8(v453) = 0;
      *(_QWORD *)&v454 = v356;
      *((_QWORD *)&v454 + 1) = v347;
      *(_QWORD *)&v455 = v55;
      *((_QWORD *)&v455 + 1) = v56;
      *(_QWORD *)&v456 = v57;
      *((_QWORD *)&v456 + 1) = v58;
      *(_QWORD *)&v457 = v59;
      *((_QWORD *)&v457 + 1) = v60;
      v296 = v56;
      v301 = v55;
      v285 = v58;
      v291 = v57;
      v282 = v59;
      if (!v15 || !REBindPointBoundComponent())
      {
        v162 = 0;
        goto LABEL_92;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v161 = swift_dynamicCastClassUnconditional();
LABEL_90:
        v162 = v161;
        goto LABEL_92;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_222;
      v249 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v249)
      {
        v161 = makeEntity(for:)(Entity);
        goto LABEL_90;
      }
      v162 = (*(uint64_t (**)(void))(v249 + 232))();
      v250 = *(_QWORD *)(v162 + 16);
      swift_retain();
      MEMORY[0x22076D160](v250, 0);
      *(_QWORD *)(v162 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v162);
      swift_release();
LABEL_92:
      specialized ActionEventData.action<A>()(v375, v366, (uint64_t)&v445);
      v163 = v449;
      if (!v449)
        goto LABEL_192;
      v273 = v452;
      v164 = v451;
      v165 = v450;
      v166 = v448;
      v167 = v447;
      v168 = v446;
      v276 = v47;
      v169 = v445;
      v370 = v445;
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v169, v168, v167, v166, v163);
      v170 = specialized ActionEventData.parameter<A>(type:)(a9);
      v407 = v454;
      v408 = v455;
      v409 = v456;
      v410 = v457;
      v171 = v16;
      v172 = v17;
      v387 = v167 & 1;
      v388 = v166;
      v389 = v163;
      v390 = v165;
      v391 = v164;
      v392 = v273 & 1;
      v270 = v170 & 1;
      v393 = v170 & 1;
      v385 = v370;
      v386 = v168;
      v384[0] = v276;
      v394 = v162;
      v395 = v312;
      v396 = v171;
      v397 = v172;
      v398 = Strong;
      v399 = v332;
      v400 = -1.0;
      v401 = 0;
      v402 = v318;
      v403 = 0;
      v404 = v324;
      v405 = 0;
      v406 = v453;
      v411 = v338;
      swift_retain();
      swift_retain();
      a5(v384);
      outlined consume of SetEntityPropertyAction<Transform>?(v370, v168, v167, v166, v163);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v412 = v276;
      v413 = v370;
      v414 = v168;
      v415 = v167 & 1;
      v416 = v166;
      v417 = v163;
      v418 = v165;
      v419 = v164;
      v420 = v273 & 1;
      v421 = v270;
      v422 = v162;
      v423 = v312;
      v424 = v171;
      v425 = v172;
      v426 = Strong;
      v427 = v332;
      v428 = -1.0;
      v429 = 0;
      v430 = v318;
      v431 = 0;
      v432 = v324;
      v433 = 0;
      v434 = v350;
      v435 = 0;
      v436 = v356;
      v437 = v347;
      v438 = v301;
      v439 = v296;
      v440 = v291;
      v441 = v285;
      v442 = v282;
      v443 = v60;
      v173 = v338;
LABEL_191:
      v444 = v173;
      outlined release of ActionEvent<SetEntityPropertyAction<simd_quatf>>((uint64_t)&v412);
      return 0;
    case 2:
      v22 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v357 = *(_QWORD *)(a2 + 40);
      v24 = *(float *)(a2 + 56);
      v334 = *(_QWORD *)(a2 + 64);
      v339 = *(_QWORD *)(a2 + 48);
      v325 = *(_QWORD *)(a2 + 72);
      v25 = *(_QWORD *)(a2 + 88);
      v344 = *(_QWORD *)(a2 + 80);
      v351 = *(_QWORD *)(a2 + 32);
      v26 = *(float *)(a2 + 96);
      v27 = *(float *)(a2 + 100);
      v319 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v61 = specialized static Entity.entityInfoType(_:)(v22);
        if (v61)
        {
          v62 = (*(uint64_t (**)(void))(v61 + 232))();
          v63 = *(_QWORD *)(v62 + 16);
          swift_retain();
          MEMORY[0x22076D160](v63, 0);
          *(_QWORD *)(v62 + 16) = v22;
          MEMORY[0x22076D160](v22, v62);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v22);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v313 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v313 + 16) = v23;
      swift_beginAccess();
      swift_weakAssign();
      v64 = String.init(cString:)();
      v66 = v65;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      v376 = a7;
      swift_beginAccess();
      v67 = static AnimationResource.codableActionTypeMap;
      v367 = a8;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_96;
      swift_bridgeObjectRetain();
      v68 = specialized __RawDictionaryStorage.find<A>(_:)(v64, v66);
      if ((v69 & 1) != 0)
      {
        v70 = (uint64_t *)(*(_QWORD *)(v67 + 56) + 56 * v68);
        v71 = *v70;
        v72 = v70[1];
        v73 = v70[2];
        v74 = v70[3];
        v75 = v70[4];
        v76 = v70[5];
        v77 = v70[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_96:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v453 = v351;
      BYTE8(v453) = 0;
      *(_QWORD *)&v454 = v357;
      *((_QWORD *)&v454 + 1) = v71;
      *(_QWORD *)&v455 = v72;
      *((_QWORD *)&v455 + 1) = v73;
      *(_QWORD *)&v456 = v74;
      *((_QWORD *)&v456 + 1) = v75;
      *(_QWORD *)&v457 = v76;
      *((_QWORD *)&v457 + 1) = v77;
      v297 = v72;
      v302 = v71;
      v286 = v74;
      v280 = v76;
      v277 = v77;
      if (v25 && REBindPointBoundComponent())
      {
        v174 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v175 = swift_dynamicCastClassUnconditional();
LABEL_101:
          v306 = v175;
          goto LABEL_103;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v251 = specialized static Entity.entityInfoType(_:)(v174);
        if (!v251)
        {
          v175 = makeEntity(for:)(v174);
          goto LABEL_101;
        }
        v252 = (*(uint64_t (**)(void))(v251 + 232))();
        v253 = *(_QWORD *)(v252 + 16);
        swift_retain();
        MEMORY[0x22076D160](v253, 0);
        *(_QWORD *)(v252 + 16) = v174;
        MEMORY[0x22076D160](v174, v252);
        v306 = v252;
        swift_release();
      }
      else
      {
        v306 = 0;
      }
LABEL_103:
      specialized ActionEventData.action<A>()(v376, v367, (uint64_t)&v445);
      v176 = v449;
      if (v449)
      {
        v177 = v452;
        v178 = v451;
        v179 = v450;
        v180 = v448;
        v181 = v447;
        v182 = v446;
        v183 = v445;
        v274 = v445;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v183, v182, v181, v180, v176);
        v184 = specialized ActionEventData.parameter<A>(type:)(a9);
        v407 = v454;
        v408 = v455;
        v409 = v456;
        v410 = v457;
        v185 = v26;
        v186 = v27;
        v187 = v24;
        v387 = v181 & 1;
        v388 = v180;
        v389 = v176;
        v390 = v179;
        v391 = v178;
        v392 = v177 & 1;
        v271 = v184 & 1;
        v393 = v184 & 1;
        v385 = v274;
        v386 = v182;
        v384[0] = v313;
        v394 = v306;
        v395 = v319;
        v396 = v185;
        v397 = v186;
        v398 = Strong;
        v399 = v325;
        v400 = v187;
        v401 = 0;
        v402 = v339;
        v403 = 0;
        v404 = v334;
        v405 = 0;
        v406 = v453;
        v411 = v344;
        swift_retain();
        swift_retain();
        a5(v384);
        outlined consume of SetEntityPropertyAction<Transform>?(v274, v182, v181, v180, v176);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v412 = v313;
        v413 = v274;
        v414 = v182;
        v415 = v181 & 1;
        v416 = v180;
        v417 = v176;
        v418 = v179;
        v419 = v178;
        v420 = v177 & 1;
        v421 = v271;
        v422 = v306;
        v423 = v319;
        v424 = v185;
        v425 = v186;
        v426 = Strong;
        v427 = v325;
        v428 = v187;
        v429 = 0;
        v430 = v339;
        v431 = 0;
        v432 = v334;
        v433 = 0;
        v434 = v351;
        v435 = 0;
        v436 = v357;
        v437 = v302;
        v438 = v297;
        v439 = v73;
        v440 = v286;
        v441 = v75;
        v442 = v280;
        v188 = v277;
LABEL_127:
        v443 = v188;
        v173 = v344;
        goto LABEL_191;
      }
      goto LABEL_192;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_193;
    case 4:
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v358 = *(_QWORD *)(a2 + 40);
      v344 = *(_QWORD *)(a2 + 48);
      v352 = *(_QWORD *)(a2 + 32);
      v340 = *(_QWORD *)(a2 + 56);
      v326 = *(_QWORD *)(a2 + 64);
      v30 = *(float *)(a2 + 72);
      v31 = *(float *)(a2 + 76);
      v335 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v78 = specialized static Entity.entityInfoType(_:)(v28);
        if (v78)
        {
          v79 = (*(uint64_t (**)(void))(v78 + 232))();
          v80 = *(_QWORD *)(v79 + 16);
          swift_retain();
          MEMORY[0x22076D160](v80, 0);
          *(_QWORD *)(v79 + 16) = v28;
          MEMORY[0x22076D160](v28, v79);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v28);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v320 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v320 + 16) = v29;
      swift_beginAccess();
      swift_weakAssign();
      v81 = String.init(cString:)();
      v83 = v82;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      v377 = a7;
      swift_beginAccess();
      v84 = static AnimationResource.codableActionTypeMap;
      v368 = a8;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_107;
      swift_bridgeObjectRetain();
      v85 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v83);
      if ((v86 & 1) != 0)
      {
        v87 = (uint64_t *)(*(_QWORD *)(v84 + 56) + 56 * v85);
        v88 = *v87;
        v89 = v87[1];
        v90 = v87[2];
        v91 = v87[3];
        v92 = v87[4];
        v93 = v87[5];
        v94 = v87[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_107:
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        v93 = 0;
        v94 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v453 = v352;
      BYTE8(v453) = 0;
      *(_QWORD *)&v454 = v358;
      *((_QWORD *)&v454 + 1) = v88;
      *(_QWORD *)&v455 = v89;
      *((_QWORD *)&v455 + 1) = v90;
      *(_QWORD *)&v456 = v91;
      *((_QWORD *)&v456 + 1) = v92;
      *(_QWORD *)&v457 = v93;
      *((_QWORD *)&v457 + 1) = v94;
      v307 = v89;
      v314 = v88;
      v303 = v90;
      v287 = v93;
      v283 = v94;
      if (v326 && REBindPointBoundComponent())
      {
        v189 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v190 = swift_dynamicCastClassUnconditional();
LABEL_112:
          v329 = v190;
          goto LABEL_114;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
        v254 = specialized static Entity.entityInfoType(_:)(v189);
        if (!v254)
        {
          v190 = makeEntity(for:)(v189);
          goto LABEL_112;
        }
        v255 = (*(uint64_t (**)(void))(v254 + 232))();
        v256 = *(_QWORD *)(v255 + 16);
        swift_retain();
        MEMORY[0x22076D160](v256, 0);
        *(_QWORD *)(v255 + 16) = v189;
        MEMORY[0x22076D160](v189, v255);
        v329 = v255;
        swift_release();
      }
      else
      {
        v329 = 0;
      }
LABEL_114:
      specialized ActionEventData.action<A>()(v377, v368, (uint64_t)&v445);
      v191 = v449;
      if (v449)
      {
        v278 = v452;
        v192 = v451;
        v193 = v450;
        v194 = v448;
        v195 = v447;
        v196 = v446;
        v197 = v445;
        v281 = v445;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v197, v196, v195, v194, v191);
        v198 = specialized ActionEventData.parameter<A>(type:)(a9);
        v407 = v454;
        v408 = v455;
        v409 = v456;
        v410 = v457;
        v199 = v30;
        v200 = v31;
        v387 = v195 & 1;
        v388 = v194;
        v389 = v191;
        v390 = v193;
        v391 = v192;
        v392 = v278 & 1;
        v272 = v198 & 1;
        v393 = v198 & 1;
        v385 = v281;
        v386 = v196;
        v384[0] = v320;
        v394 = v329;
        v395 = v335;
        v396 = v199;
        v397 = v200;
        v398 = Strong;
        v399 = v340;
        v400 = -1.0;
        v401 = 0;
        v402 = 0xBFF0000000000000;
        v403 = 0;
        v404 = 0xBFF0000000000000;
        v405 = 0;
        v406 = v453;
        v411 = v344;
        swift_retain();
        swift_retain();
        a5(v384);
        outlined consume of SetEntityPropertyAction<Transform>?(v281, v196, v195, v194, v191);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v412 = v320;
        v413 = v281;
        v414 = v196;
        v415 = v195 & 1;
        v416 = v194;
        v417 = v191;
        v418 = v193;
        v419 = v192;
        v420 = v278 & 1;
        v421 = v272;
        v422 = v329;
        v423 = v335;
        v424 = v199;
        v425 = v200;
        v426 = Strong;
        v427 = v340;
        v428 = -1.0;
        v429 = 0;
        v430 = 0xBFF0000000000000;
        v431 = 0;
        v432 = 0xBFF0000000000000;
        v433 = 0;
        v434 = v352;
        v435 = 0;
        v436 = v358;
        v437 = v314;
        v438 = v307;
        v439 = v303;
        v440 = v91;
        v441 = v92;
        v442 = v287;
        v188 = v283;
        goto LABEL_127;
      }
LABEL_192:
      swift_release();
      swift_release();
      swift_release();
LABEL_193:
      swift_release();
      return 0;
    case 8:
      v32 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v359 = *(_QWORD *)(a2 + 40);
      v34 = *(_QWORD *)(a2 + 56);
      v344 = *(_QWORD *)(a2 + 48);
      v353 = *(_QWORD *)(a2 + 32);
      v35 = *(float *)(a2 + 64);
      v36 = *(float *)(a2 + 68);
      v327 = *(_BYTE *)(a2 + 72);
      v336 = *(_QWORD *)(a2 + 80);
      v341 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v95 = specialized static Entity.entityInfoType(_:)(v32);
        if (v95)
        {
          v96 = (*(uint64_t (**)(void))(v95 + 232))();
          v97 = *(_QWORD *)(v96 + 16);
          swift_retain();
          MEMORY[0x22076D160](v97, 0);
          *(_QWORD *)(v96 + 16) = v32;
          MEMORY[0x22076D160](v32, v96);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v32);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v321 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v321 + 16) = v33;
      swift_beginAccess();
      swift_weakAssign();
      v98 = String.init(cString:)();
      v100 = v99;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      v378 = a7;
      swift_beginAccess();
      v101 = static AnimationResource.codableActionTypeMap;
      v369 = a8;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_118;
      swift_bridgeObjectRetain();
      v102 = specialized __RawDictionaryStorage.find<A>(_:)(v98, v100);
      if ((v103 & 1) != 0)
      {
        v104 = (uint64_t *)(*(_QWORD *)(v101 + 56) + 56 * v102);
        v105 = *v104;
        v106 = v104[1];
        v107 = v104[2];
        v108 = v104[3];
        v110 = v104[4];
        v109 = v104[5];
        v111 = v104[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_118:
        v105 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        v110 = 0;
        v109 = 0;
        v111 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v453 = v353;
      BYTE8(v453) = 0;
      *(_QWORD *)&v454 = v359;
      *((_QWORD *)&v454 + 1) = v105;
      *(_QWORD *)&v455 = v106;
      *((_QWORD *)&v455 + 1) = v107;
      *(_QWORD *)&v456 = v108;
      *((_QWORD *)&v456 + 1) = v110;
      *(_QWORD *)&v457 = v109;
      *((_QWORD *)&v457 + 1) = v111;
      v304 = v106;
      v308 = v105;
      v292 = v108;
      v298 = v107;
      v288 = v110;
      if (v34 && REBindPointBoundComponent())
      {
        v201 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v202 = swift_dynamicCastClassUnconditional();
LABEL_123:
          v315 = v202;
          goto LABEL_125;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
        v257 = specialized static Entity.entityInfoType(_:)(v201);
        if (!v257)
        {
          v202 = makeEntity(for:)(v201);
          goto LABEL_123;
        }
        v258 = (*(uint64_t (**)(void))(v257 + 232))();
        v259 = *(_QWORD *)(v258 + 16);
        swift_retain();
        MEMORY[0x22076D160](v259, 0);
        *(_QWORD *)(v258 + 16) = v201;
        MEMORY[0x22076D160](v201, v258);
        v315 = v258;
        swift_release();
      }
      else
      {
        v315 = 0;
      }
LABEL_125:
      specialized ActionEventData.action<A>()(v378, v369, (uint64_t)&v445);
      v203 = v449;
      if (v449)
      {
        v204 = v452;
        v205 = v451;
        v206 = v450;
        v207 = v448;
        v208 = v447;
        v209 = v446;
        v210 = v445;
        v279 = v445;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v210, v209, v208, v207, v203);
        v211 = specialized ActionEventData.parameter<A>(type:)(a9);
        v407 = v454;
        v408 = v455;
        v409 = v456;
        v410 = v457;
        v212 = v35;
        v213 = v36;
        v387 = v208 & 1;
        v388 = v207;
        v389 = v203;
        v390 = v206;
        v391 = v205;
        v392 = v204 & 1;
        v275 = v211 & 1;
        v393 = v211 & 1;
        v385 = v279;
        v386 = v209;
        v384[0] = v321;
        v394 = v315;
        v395 = v327;
        v396 = v212;
        v397 = v213;
        v399 = 0;
        v400 = 0.0;
        v398 = Strong;
        v401 = 1;
        v402 = v336;
        v403 = 0;
        v404 = v341;
        v405 = 0;
        v406 = v453;
        v411 = v344;
        swift_retain();
        swift_retain();
        a5(v384);
        outlined consume of SetEntityPropertyAction<Transform>?(v279, v209, v208, v207, v203);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v412 = v321;
        v413 = v279;
        v414 = v209;
        v415 = v208 & 1;
        v416 = v207;
        v417 = v203;
        v418 = v206;
        v419 = v205;
        v420 = v204 & 1;
        v421 = v275;
        v422 = v315;
        v423 = v327;
        v424 = v212;
        v425 = v213;
        v428 = 0.0;
        v426 = Strong;
        v427 = 0;
        v429 = 1;
        v430 = v336;
        v431 = 0;
        v432 = v341;
        v433 = 0;
        v434 = v353;
        v435 = 0;
        v436 = v359;
        v437 = v308;
        v438 = v304;
        v439 = v298;
        v440 = v292;
        v441 = v288;
        v442 = v109;
        v188 = v111;
        goto LABEL_127;
      }
      goto LABEL_192;
    case 16:
      v37 = *(_QWORD *)a2;
      v38 = *(_QWORD *)(a2 + 8);
      v360 = *(_QWORD *)(a2 + 32);
      v363 = *(_QWORD *)(a2 + 40);
      v345 = *(_QWORD *)(a2 + 56);
      v354 = *(_QWORD *)(a2 + 48);
      v365 = a8;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v112 = specialized static Entity.entityInfoType(_:)(v37);
        if (v112)
        {
          v113 = (*(uint64_t (**)(void))(v112 + 232))();
          v114 = *(_QWORD *)(v113 + 16);
          swift_retain();
          MEMORY[0x22076D160](v114, 0);
          *(_QWORD *)(v113 + 16) = v37;
          MEMORY[0x22076D160](v37, v113);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v37);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v115 = swift_allocObject();
      swift_weakInit();
      v342 = v115;
      *(_QWORD *)(v115 + 16) = v38;
      swift_beginAccess();
      swift_weakAssign();
      v116 = String.init(cString:)();
      v118 = v117;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v119 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_130;
      swift_bridgeObjectRetain();
      v120 = specialized __RawDictionaryStorage.find<A>(_:)(v116, v118);
      if ((v121 & 1) != 0)
      {
        v122 = (uint64_t *)(*(_QWORD *)(v119 + 56) + 56 * v120);
        v124 = *v122;
        v123 = v122[1];
        v126 = v122[2];
        v125 = v122[3];
        v127 = v122[4];
        v128 = v122[5];
        v129 = v122[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_130:
        v124 = 0;
        v123 = 0;
        v126 = 0;
        v125 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v453 = 0;
      BYTE8(v453) = 0;
      *(_QWORD *)&v454 = v363;
      *((_QWORD *)&v454 + 1) = v124;
      *(_QWORD *)&v455 = v123;
      *((_QWORD *)&v455 + 1) = v126;
      *(_QWORD *)&v456 = v125;
      *((_QWORD *)&v456 + 1) = v127;
      *(_QWORD *)&v457 = v128;
      *((_QWORD *)&v457 + 1) = v129;
      v330 = v125;
      v337 = v123;
      if (!v345)
        goto LABEL_136;
      a8 = v365;
      if (!REBindPointBoundComponent())
        goto LABEL_144;
      v214 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_142;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_187;
      __break(1u);
LABEL_136:
      v215 = 0;
      a8 = v365;
      goto LABEL_189;
    case 32:
      v39 = *(_QWORD *)a2;
      v40 = *(_QWORD *)(a2 + 8);
      v360 = *(_QWORD *)(a2 + 32);
      v363 = *(_QWORD *)(a2 + 40);
      v346 = *(_QWORD *)(a2 + 56);
      v354 = *(_QWORD *)(a2 + 48);
      v374 = a7;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v130 = specialized static Entity.entityInfoType(_:)(v39);
        if (v130)
        {
          v131 = (*(uint64_t (**)(void))(v130 + 232))();
          v132 = *(_QWORD *)(v131 + 16);
          swift_retain();
          MEMORY[0x22076D160](v132, 0);
          *(_QWORD *)(v131 + 16) = v39;
          MEMORY[0x22076D160](v39, v131);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v39);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v133 = swift_allocObject();
      swift_weakInit();
      v342 = v133;
      *(_QWORD *)(v133 + 16) = v40;
      swift_beginAccess();
      swift_weakAssign();
      v134 = String.init(cString:)();
      v136 = v135;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v137 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_138;
      swift_bridgeObjectRetain();
      v138 = specialized __RawDictionaryStorage.find<A>(_:)(v134, v136);
      if ((v139 & 1) != 0)
      {
        v140 = (uint64_t *)(*(_QWORD *)(v137 + 56) + 56 * v138);
        v124 = *v140;
        v141 = v140[1];
        v126 = v140[2];
        v142 = v140[3];
        v127 = v140[4];
        v128 = v140[5];
        v129 = v140[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_138:
        v124 = 0;
        v141 = 0;
        v126 = 0;
        v142 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v453 = 0;
      BYTE8(v453) = 0;
      *(_QWORD *)&v454 = v363;
      *((_QWORD *)&v454 + 1) = v124;
      *(_QWORD *)&v455 = v141;
      *((_QWORD *)&v455 + 1) = v126;
      *(_QWORD *)&v456 = v142;
      *((_QWORD *)&v456 + 1) = v127;
      *(_QWORD *)&v457 = v128;
      *((_QWORD *)&v457 + 1) = v129;
      v330 = v142;
      v337 = v141;
      if (v346)
      {
        a7 = v374;
        if (REBindPointBoundComponent())
        {
          v214 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
LABEL_142:
            type metadata accessor for Entity();
            v216 = swift_dynamicCastClassUnconditional();
LABEL_143:
            v215 = v216;
            goto LABEL_189;
          }
          if ((REEntityIsBeingDestroyed() & 1) != 0)
          {
LABEL_226:
            __break(1u);
            goto LABEL_227;
          }
LABEL_187:
          v260 = specialized static Entity.entityInfoType(_:)(v214);
          if (!v260)
          {
            v216 = makeEntity(for:)(v214);
            goto LABEL_143;
          }
          v261 = (*(uint64_t (**)(void))(v260 + 232))();
          v349 = *(_QWORD *)(v261 + 16);
          swift_retain();
          MEMORY[0x22076D160](v349, 0);
          *(_QWORD *)(v261 + 16) = v214;
          v262 = v214;
          v215 = v261;
          MEMORY[0x22076D160](v262, v261);
          swift_release();
        }
        else
        {
LABEL_144:
          v215 = 0;
        }
      }
      else
      {
        v215 = 0;
        a7 = v374;
      }
LABEL_189:
      specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v445);
      v263 = v449;
      if (v449)
      {
        v407 = v454;
        v408 = v455;
        v409 = v456;
        v410 = v457;
        v373 = v128;
        v381 = v129;
        v295 = v450;
        v264 = v448;
        v265 = v447;
        v323 = v126;
        v266 = v446;
        v267 = v445;
        v385 = v445;
        v386 = v446;
        v305 = v447 & 1;
        v387 = v447 & 1;
        v388 = v448;
        v389 = v449;
        v284 = v448;
        v290 = v451;
        v390 = v450;
        v391 = v451;
        v311 = v452 & 1;
        v392 = v452 & 1;
        v393 = 1;
        v384[0] = v342;
        v394 = v215;
        v395 = 0;
        v396 = 0.0;
        v397 = 0.0;
        v399 = 0;
        v400 = 0.0;
        v398 = Strong;
        v401 = 1;
        v402 = v360;
        v403 = 0;
        v404 = 0;
        v405 = 1;
        v406 = v453;
        v411 = v354;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v267, v266, v265, v264, v263);
        swift_retain();
        a5(v384);
        outlined consume of SetEntityPropertyAction<Transform>?(v267, v266, v265, v284, v263);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v412 = v342;
        v413 = v267;
        v414 = v266;
        v415 = v305;
        v416 = v284;
        v417 = v263;
        v418 = v295;
        v419 = v290;
        v420 = v311;
        v421 = 1;
        v422 = v215;
        v423 = 0;
        v425 = 0.0;
        v424 = 0.0;
        v428 = 0.0;
        v426 = Strong;
        v427 = 0;
        v429 = 1;
        v430 = v360;
        v431 = 0;
        v432 = 0;
        v433 = 1;
        v434 = 0;
        v435 = 0;
        v436 = v363;
        v437 = v124;
        v438 = v337;
        v439 = v323;
        v440 = v330;
        v441 = v127;
        v442 = v373;
        v443 = v381;
        v173 = v354;
        goto LABEL_191;
      }
      goto LABEL_192;
    case 64:
      v41 = *(_QWORD *)a2;
      v42 = *(_QWORD *)(a2 + 8);
      v364 = *(_QWORD *)(a2 + 24);
      v43 = *(_QWORD *)(a2 + 40);
      v333 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v143 = specialized static Entity.entityInfoType(_:)(v41);
        if (v143)
        {
          v144 = (*(uint64_t (**)(void))(v143 + 232))();
          v145 = *(_QWORD *)(v144 + 16);
          swift_retain();
          MEMORY[0x22076D160](v145, 0);
          *(_QWORD *)(v144 + 16) = v41;
          MEMORY[0x22076D160](v41, v144);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v41);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v146 = swift_allocObject();
      swift_weakInit();
      v328 = v146;
      *(_QWORD *)(v146 + 16) = v42;
      swift_beginAccess();
      swift_weakAssign();
      if (v43 && REBindPointBoundComponent())
      {
        v147 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v148 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v149 = v148;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v247 = specialized static Entity.entityInfoType(_:)(v147);
        if (!v247)
        {
          v148 = makeEntity(for:)(v147);
          goto LABEL_77;
        }
        v149 = (*(uint64_t (**)(void))(v247 + 232))();
        v248 = *(_QWORD *)(v149 + 16);
        swift_retain();
        MEMORY[0x22076D160](v248, 0);
        *(_QWORD *)(v149 + 16) = v147;
        MEMORY[0x22076D160](v147, v149);
        swift_release();
      }
      else
      {
        v149 = 0;
      }
LABEL_79:
      v150 = String.init(cString:)();
      v152 = v151;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v153 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v154 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v152);
        if ((v155 & 1) != 0)
        {
          v156 = (uint64_t *)(*(_QWORD *)(v153 + 56) + 56 * v154);
          v157 = *v156;
          v158 = v156[1];
          v159 = v156[2];
          v355 = v156[4];
          v361 = v156[3];
          v343 = v156[6];
          v348 = v156[5];
          swift_bridgeObjectRelease();
LABEL_148:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v453 = 0;
          BYTE8(v453) = 0;
          *(_QWORD *)&v454 = v364;
          *((_QWORD *)&v454 + 1) = v157;
          *(_QWORD *)&v455 = v158;
          *((_QWORD *)&v455 + 1) = v159;
          v322 = v159;
          *(_QWORD *)&v456 = v361;
          *((_QWORD *)&v456 + 1) = v355;
          *(_QWORD *)&v457 = v348;
          *((_QWORD *)&v457 + 1) = v343;
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v445);
          v217 = v449;
          if (!v449)
            goto LABEL_192;
          v407 = v454;
          v408 = v455;
          v409 = v456;
          v410 = v457;
          v299 = v451;
          v218 = v149;
          v219 = v450;
          v220 = v448;
          v371 = v157;
          v379 = v158;
          v221 = v447;
          v222 = v446;
          v223 = v445;
          v385 = v445;
          v386 = v446;
          v309 = v447 & 1;
          v387 = v447 & 1;
          v388 = v448;
          v389 = v449;
          v390 = v450;
          v391 = v451;
          v316 = v452 & 1;
          v392 = v452 & 1;
          v393 = 1;
          v289 = v449;
          v293 = v445;
          v384[0] = v328;
          v394 = v218;
          v395 = 0;
          v396 = 0.0;
          v397 = 0.0;
          v399 = 0;
          v400 = 0.0;
          v398 = Strong;
          v401 = 1;
          v402 = 0;
          v403 = 1;
          v404 = 0;
          v405 = 1;
          v406 = v453;
          v411 = v333;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v223, v222, v221, v220, v217);
          swift_retain();
          a5(v384);
          outlined consume of SetEntityPropertyAction<Transform>?(v293, v222, v221, v220, v289);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v412 = v328;
          v413 = v293;
          v414 = v222;
          v415 = v309;
          v416 = v220;
          v417 = v289;
          v418 = v219;
          v419 = v299;
          v420 = v316;
          v421 = 1;
          v422 = v218;
          v423 = 0;
          v425 = 0.0;
          v424 = 0.0;
          v428 = 0.0;
          v426 = Strong;
          v427 = 0;
          v429 = 1;
          v430 = 0;
          v431 = 1;
          v432 = 0;
          v433 = 1;
          v434 = 0;
          v435 = 0;
          v436 = v364;
          v437 = v371;
          v224 = v379;
          goto LABEL_169;
        }
        swift_bridgeObjectRelease();
      }
      v157 = 0;
      v158 = 0;
      v159 = 0;
      v355 = 0;
      v361 = 0;
      v343 = 0;
      v348 = 0;
      goto LABEL_148;
    default:
      if (a4 != 128)
        goto LABEL_193;
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v362 = *(_QWORD *)(a2 + 24);
      v21 = *(_QWORD *)(a2 + 40);
      v333 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v225 = specialized static Entity.entityInfoType(_:)(v19);
        if (v225)
        {
          v226 = (*(uint64_t (**)(void))(v225 + 232))();
          v227 = *(_QWORD *)(v226 + 16);
          swift_retain();
          MEMORY[0x22076D160](v227, 0);
          *(_QWORD *)(v226 + 16) = v19;
          MEMORY[0x22076D160](v19, v226);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v19);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v228 = swift_allocObject();
      swift_weakInit();
      v331 = v228;
      *(_QWORD *)(v228 + 16) = v20;
      swift_beginAccess();
      swift_weakAssign();
      if (v21 && REBindPointBoundComponent())
      {
        v229 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v230 = swift_dynamicCastClassUnconditional();
LABEL_158:
          v231 = v230;
          goto LABEL_160;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_227:
          __break(1u);
          JUMPOUT(0x21BB40AE0);
        }
        v268 = specialized static Entity.entityInfoType(_:)(v229);
        if (!v268)
        {
          v230 = makeEntity(for:)(v229);
          goto LABEL_158;
        }
        v231 = (*(uint64_t (**)(void))(v268 + 232))();
        v269 = *(_QWORD *)(v231 + 16);
        swift_retain();
        MEMORY[0x22076D160](v269, 0);
        *(_QWORD *)(v231 + 16) = v229;
        MEMORY[0x22076D160](v229, v231);
        swift_release();
      }
      else
      {
        v231 = 0;
      }
LABEL_160:
      v232 = String.init(cString:)();
      v234 = v233;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v235 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v236 = specialized __RawDictionaryStorage.find<A>(_:)(v232, v234);
        if ((v237 & 1) != 0)
        {
          v238 = (uint64_t *)(*(_QWORD *)(v235 + 56) + 56 * v236);
          v239 = *v238;
          v240 = v238[1];
          v241 = v238[2];
          v355 = v238[4];
          v361 = v238[3];
          v343 = v238[6];
          v348 = v238[5];
          swift_bridgeObjectRelease();
LABEL_167:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v453 = 0;
          BYTE8(v453) = 0;
          *(_QWORD *)&v454 = v362;
          *((_QWORD *)&v454 + 1) = v239;
          *(_QWORD *)&v455 = v240;
          *((_QWORD *)&v455 + 1) = v241;
          v322 = v241;
          *(_QWORD *)&v456 = v361;
          *((_QWORD *)&v456 + 1) = v355;
          *(_QWORD *)&v457 = v348;
          *((_QWORD *)&v457 + 1) = v343;
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v445);
          if (!v449)
            goto LABEL_192;
          v407 = v454;
          v408 = v455;
          v409 = v456;
          v410 = v457;
          v300 = v451;
          v372 = v240;
          v380 = v239;
          v242 = v448;
          v243 = v447;
          v244 = v446;
          v245 = v445;
          v385 = v445;
          v386 = v446;
          v310 = v447 & 1;
          v387 = v447 & 1;
          v388 = v448;
          v389 = v449;
          v390 = v450;
          v391 = v451;
          v294 = v450;
          v317 = v452 & 1;
          v392 = v452 & 1;
          v393 = 1;
          v384[0] = v331;
          v394 = v231;
          v395 = 0;
          v396 = 0.0;
          v397 = 0.0;
          v399 = 0;
          v400 = 0.0;
          v398 = Strong;
          v401 = 1;
          v402 = 0;
          v403 = 1;
          v404 = 0;
          v405 = 1;
          v406 = v453;
          v411 = v333;
          v246 = v449;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v245, v244, v243, v242, v246);
          swift_retain();
          a5(v384);
          swift_release();
          outlined consume of SetEntityPropertyAction<Transform>?(v245, v244, v243, v242, v246);
          swift_release();
          swift_release();
          swift_release();
          v412 = v331;
          v413 = v245;
          v414 = v244;
          v415 = v310;
          v416 = v242;
          v417 = v246;
          v418 = v294;
          v419 = v300;
          v420 = v317;
          v421 = 1;
          v422 = v231;
          v423 = 0;
          v425 = 0.0;
          v424 = 0.0;
          v428 = 0.0;
          v426 = Strong;
          v427 = 0;
          v429 = 1;
          v430 = 0;
          v431 = 1;
          v432 = 0;
          v433 = 1;
          v434 = 0;
          v435 = 0;
          v436 = v362;
          v437 = v380;
          v224 = v372;
LABEL_169:
          v438 = v224;
          v439 = v322;
          v440 = v361;
          v441 = v355;
          v442 = v348;
          v443 = v343;
          v173 = v333;
          goto LABEL_191;
        }
        swift_bridgeObjectRelease();
      }
      v239 = 0;
      v240 = 0;
      v241 = 0;
      v355 = 0;
      v361 = 0;
      v343 = 0;
      v348 = 0;
      goto LABEL_167;
  }
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD *);
  unint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t Entity;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  void (*v170)(_QWORD *);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  double v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  double v249;
  double v250;
  double v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned __int8 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  double v266;
  double v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  double v281;
  double v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  char v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char v379;
  unint64_t v380;
  char v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t *v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  void (*v450)(_QWORD *);
  void (*v451)(_QWORD *);
  void (*v452)(_QWORD *);
  void (*v453)(_QWORD *);
  void (*v454)(_QWORD *);
  void (*v455)(_QWORD *);
  uint64_t Strong;
  _QWORD v457[2];
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  char v464;
  uint64_t v465;
  uint64_t v466;
  __int16 v467;
  char v468;
  uint64_t v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  char v473;
  double v474;
  double v475;
  uint64_t v476;
  uint64_t v477;
  double v478;
  char v479;
  unint64_t v480;
  char v481;
  unint64_t v482;
  char v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  __int16 v500;
  char v501;
  uint64_t v502;
  uint64_t v503;
  char v504;
  uint64_t v505;
  char v506;
  double v507;
  double v508;
  uint64_t v509;
  uint64_t v510;
  double v511;
  char v512;
  unint64_t v513;
  char v514;
  unint64_t v515;
  char v516;
  uint64_t v517;
  char v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 8);
      v414 = *(_QWORD *)(a2 + 32);
      v421 = *(_QWORD *)(a2 + 40);
      v16 = *(_QWORD *)(a2 + 64);
      v395 = *(_QWORD *)(a2 + 56);
      v403 = *(_QWORD *)(a2 + 48);
      v17 = *(float *)(a2 + 72);
      v18 = *(float *)(a2 + 76);
      v379 = *(_BYTE *)(a2 + 80);
      v383 = *(_QWORD *)(a2 + 88);
      v389 = *(_QWORD *)(a2 + 96);
      v450 = a5;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v47 = specialized static Entity.entityInfoType(_:)(v14);
        if (v47)
        {
          v48 = (*(uint64_t (**)(void))(v47 + 232))();
          v49 = *(_QWORD *)(v48 + 16);
          swift_retain();
          MEMORY[0x22076D160](v49, 0);
          *(_QWORD *)(v48 + 16) = v14;
          MEMORY[0x22076D160](v14, v48);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v14);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v408 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v408 + 16) = v15;
        swift_beginAccess();
        swift_weakAssign();
        v50 = String.init(cString:)();
        v52 = v51;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        v442 = a7;
        swift_beginAccess();
        v53 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v54 = a8;
          swift_bridgeObjectRetain();
          v55 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v52);
          if ((v56 & 1) != 0)
          {
            v57 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 56 * v55);
            v59 = *v57;
            v58 = v57[1];
            v60 = v57[2];
            v61 = v57[3];
            v63 = v57[4];
            v62 = v57[5];
            v64 = v57[6];
            swift_bridgeObjectRelease();
LABEL_88:
            v340 = v61;
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v540 = v414;
            BYTE8(v540) = 0;
            *(_QWORD *)&v541 = v421;
            *((_QWORD *)&v541 + 1) = v59;
            *(_QWORD *)&v542 = v58;
            *((_QWORD *)&v542 + 1) = v60;
            *(_QWORD *)&v543 = v61;
            *((_QWORD *)&v543 + 1) = v63;
            v345 = v63;
            v352 = v58;
            *(_QWORD *)&v544 = v62;
            *((_QWORD *)&v544 + 1) = v64;
            v162 = v62;
            v358 = v59;
            if (!v16)
            {
              v373 = 0;
              v163 = v54;
              v166 = v442;
              goto LABEL_167;
            }
            v163 = v54;
            if (!REBindPointBoundComponent())
            {
              v373 = 0;
              v166 = v442;
              goto LABEL_167;
            }
            v366 = v64;
            v164 = v60;
            Entity = REComponentGetEntity();
            v166 = v442;
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v167 = swift_dynamicCastClassUnconditional();
              goto LABEL_92;
            }
            if ((REEntityIsBeingDestroyed() & 1) == 0)
            {
              v222 = specialized static Entity.entityInfoType(_:)(Entity);
              if (v222)
              {
                v223 = (*(uint64_t (**)(void))(v222 + 232))();
                v224 = *(_QWORD *)(v223 + 16);
                swift_retain();
                MEMORY[0x22076D160](v224, 0);
                *(_QWORD *)(v223 + 16) = Entity;
                MEMORY[0x22076D160](Entity, v223);
                v373 = v223;
                swift_release();
                goto LABEL_166;
              }
              v167 = makeEntity(for:)(Entity);
LABEL_92:
              v373 = v167;
LABEL_166:
              v60 = v164;
              v64 = v366;
LABEL_167:
              specialized ActionEventData.action<A>()(v166, v163, (uint64_t)&v528);
              if (v528 != 1)
              {
                v225 = v528;
                v226 = v537;
                v328 = v537;
                v335 = v538;
                v227 = v536;
                v371 = v64;
                v308 = v535;
                v315 = v534;
                v321 = v536;
                v228 = v533;
                v297 = v162;
                v229 = v532;
                v230 = v531;
                v301 = v531;
                v435 = v539;
                v445 = HIDWORD(v534);
                v231 = v530;
                v232 = v529;
                swift_retain();
                outlined copy of FromToByAction<BlendShapeWeights>?(v225, v232, v231, v230, v229, v228, v315, v308, v227, v226);
                v233 = specialized ActionEventData.parameter<A>(type:)(a9);
                v487 = v543;
                v488 = v544;
                v485 = v541;
                v486 = v542;
                v234 = v17;
                v235 = v18;
                v459 = v232;
                v460 = v231;
                v461 = v229;
                v462 = v228;
                v463 = v315;
                v464 = v445;
                v465 = v308;
                v466 = v321;
                v467 = v328 & 0x1FF;
                v468 = BYTE2(v328) & 1;
                v469 = v335;
                v470 = v435;
                v295 = v233 & 1;
                v471 = v233 & 1;
                v458 = v225;
                v457[0] = v408;
                v472 = v373;
                v473 = v379;
                v474 = v234;
                v475 = v235;
                v476 = Strong;
                v477 = v395;
                v478 = -1.0;
                v479 = 0;
                v480 = v383;
                v481 = 0;
                v482 = v389;
                v483 = 0;
                v484 = v540;
                v489 = v403;
                swift_retain();
                swift_retain();
                v450(v457);
                outlined consume of FromToByAction<BlendShapeWeights>?(v225, v232, v231, v301, v229, v228, v315, v308, v321, v328);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v490 = v408;
                v491 = v225;
                v492 = v232;
                v493 = v231;
                v494 = v229;
                v495 = v228;
                v496 = v315;
                v497 = v445;
                v498 = v308;
                v499 = v321;
                v500 = v328 & 0x1FF;
                v501 = BYTE2(v328) & 1;
                v502 = v335;
                v503 = v435;
                v504 = v295;
                v505 = v373;
                v506 = v379;
                v507 = v234;
                v508 = v235;
                v509 = Strong;
                v510 = v395;
                v511 = -1.0;
                v512 = 0;
                v513 = v383;
                v514 = 0;
                v515 = v389;
                v516 = 0;
                v517 = v414;
                v518 = 0;
                v519 = v421;
                v520 = v358;
                v521 = v352;
                v522 = v60;
                v523 = v340;
                v524 = v345;
                v236 = v297;
LABEL_197:
                v525 = v236;
                v219 = v371;
                goto LABEL_198;
              }
              goto LABEL_194;
            }
            goto LABEL_228;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v54 = a8;
        }
        v59 = 0;
        v58 = 0;
        v60 = 0;
        v61 = 0;
        v63 = 0;
        v62 = 0;
        v64 = 0;
        goto LABEL_88;
      }
      __break(1u);
      goto LABEL_220;
    case 2:
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      v415 = *(_QWORD *)(a2 + 32);
      v422 = *(_QWORD *)(a2 + 40);
      v25 = *(float *)(a2 + 56);
      v380 = *(_QWORD *)(a2 + 64);
      v384 = *(_QWORD *)(a2 + 48);
      v372 = *(_QWORD *)(a2 + 72);
      v390 = *(_QWORD *)(a2 + 80);
      v396 = *(_QWORD *)(a2 + 88);
      v26 = *(float *)(a2 + 96);
      v27 = *(float *)(a2 + 100);
      v365 = *(_BYTE *)(a2 + 104);
      v431 = a8;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v65 = specialized static Entity.entityInfoType(_:)(v23);
        if (v65)
        {
          v66 = (*(uint64_t (**)(void))(v65 + 232))();
          v67 = *(_QWORD *)(v66 + 16);
          swift_retain();
          MEMORY[0x22076D160](v67, 0);
          *(_QWORD *)(v66 + 16) = v23;
          MEMORY[0x22076D160](v23, v66);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v23);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v404 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v404 + 16) = v24;
        swift_beginAccess();
        swift_weakAssign();
        v68 = String.init(cString:)();
        v70 = v69;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v71 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v72 = a5;
          swift_bridgeObjectRetain();
          v73 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v70);
          if ((v74 & 1) != 0)
          {
            v75 = (uint64_t *)(*(_QWORD *)(v71 + 56) + 56 * v73);
            v77 = *v75;
            v76 = v75[1];
            v78 = v75[2];
            v79 = v75[3];
            v80 = v75[4];
            v81 = v75[5];
            v409 = v75[6];
            swift_bridgeObjectRelease();
            goto LABEL_96;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v72 = a5;
        }
        v77 = 0;
        v76 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v409 = 0;
LABEL_96:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v540 = v415;
        BYTE8(v540) = 0;
        *(_QWORD *)&v541 = v422;
        *((_QWORD *)&v541 + 1) = v77;
        *(_QWORD *)&v542 = v76;
        *((_QWORD *)&v542 + 1) = v78;
        *(_QWORD *)&v543 = v79;
        *((_QWORD *)&v543 + 1) = v80;
        v346 = v80;
        v353 = v76;
        *(_QWORD *)&v544 = v81;
        *((_QWORD *)&v544 + 1) = v409;
        v168 = v81;
        v359 = v77;
        if (v396)
        {
          v169 = v431;
          v170 = v72;
          if (REBindPointBoundComponent())
          {
            v171 = v78;
            v172 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v173 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_229:
                __break(1u);
                goto LABEL_230;
              }
              v237 = specialized static Entity.entityInfoType(_:)(v172);
              if (v237)
              {
                v238 = (*(uint64_t (**)(void))(v237 + 232))();
                v239 = *(_QWORD *)(v238 + 16);
                swift_retain();
                MEMORY[0x22076D160](v239, 0);
                *(_QWORD *)(v238 + 16) = v172;
                MEMORY[0x22076D160](v172, v238);
                v401 = v238;
                swift_release();
                goto LABEL_172;
              }
              v173 = makeEntity(for:)(v172);
            }
            v401 = v173;
LABEL_172:
            v78 = v171;
            goto LABEL_173;
          }
          v401 = 0;
        }
        else
        {
          v401 = 0;
          v169 = v431;
          v170 = v72;
        }
LABEL_173:
        specialized ActionEventData.action<A>()(a7, v169, (uint64_t)&v528);
        v240 = v528;
        if (v528 == 1)
          goto LABEL_194;
        v453 = v170;
        v241 = v537;
        v242 = v536;
        v322 = v79;
        v329 = v535;
        v336 = v534;
        v341 = v539;
        v243 = v533;
        v305 = v168;
        v309 = v78;
        v244 = v532;
        v245 = v531;
        v316 = v531;
        v436 = v538;
        v446 = HIDWORD(v534);
        v246 = v530;
        v247 = v529;
        swift_retain();
        outlined copy of FromToByAction<BlendShapeWeights>?(v240, v247, v246, v245, v244, v243, v336, v329, v242, v241);
        v248 = specialized ActionEventData.parameter<A>(type:)(a9);
        v487 = v543;
        v488 = v544;
        v485 = v541;
        v486 = v542;
        v249 = v26;
        v250 = v27;
        v251 = v25;
        v459 = v247;
        v460 = v246;
        v461 = v244;
        v462 = v243;
        v463 = v336;
        v464 = v446;
        v465 = v329;
        v466 = v242;
        v467 = v241 & 0x1FF;
        v468 = BYTE2(v241) & 1;
        v469 = v436;
        v470 = v341;
        v298 = v248 & 1;
        v471 = v248 & 1;
        v458 = v240;
        v457[0] = v404;
        v472 = v401;
        v473 = v365;
        v474 = v249;
        v475 = v250;
        v476 = Strong;
        v477 = v372;
        v478 = v251;
        v479 = 0;
        v480 = v384;
        v481 = 0;
        v482 = v380;
        v483 = 0;
        v484 = v540;
        v489 = v390;
        swift_retain();
        swift_retain();
        v453(v457);
        outlined consume of FromToByAction<BlendShapeWeights>?(v240, v247, v246, v316, v244, v243, v336, v329, v242, v241);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v490 = v404;
        v491 = v240;
        v492 = v247;
        v493 = v246;
        v494 = v244;
        v495 = v243;
        v496 = v336;
        v497 = v446;
        v498 = v329;
        v499 = v242;
        v500 = v241 & 0x1FF;
        v501 = BYTE2(v241) & 1;
        v502 = v436;
        v503 = v341;
        v504 = v298;
        v505 = v401;
        v506 = v365;
        v507 = v249;
        v508 = v250;
        v509 = Strong;
        v510 = v372;
        v511 = v251;
        v512 = 0;
        v513 = v384;
        v514 = 0;
        v515 = v380;
        v516 = 0;
        v517 = v415;
        v518 = 0;
        v519 = v422;
        v520 = v359;
        v521 = v353;
        v522 = v309;
        v523 = v322;
        v524 = v346;
        v525 = v305;
        v252 = v409;
LABEL_181:
        v526 = v252;
        v194 = v390;
        goto LABEL_199;
      }
LABEL_220:
      __break(1u);
      goto LABEL_221;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_195;
    case 4:
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      v407 = *(_QWORD *)(a2 + 32);
      v416 = *(_QWORD *)(a2 + 40);
      v30 = *(_QWORD *)(a2 + 64);
      v385 = *(_QWORD *)(a2 + 56);
      v390 = *(_QWORD *)(a2 + 48);
      v31 = *(float *)(a2 + 72);
      v32 = *(float *)(a2 + 76);
      v381 = *(_BYTE *)(a2 + 80);
      v440 = a7;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v82 = specialized static Entity.entityInfoType(_:)(v28);
        if (v82)
        {
          v83 = (*(uint64_t (**)(void))(v82 + 232))();
          v84 = *(_QWORD *)(v83 + 16);
          swift_retain();
          MEMORY[0x22076D160](v84, 0);
          *(_QWORD *)(v83 + 16) = v28;
          MEMORY[0x22076D160](v28, v83);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v28);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v400 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v400 + 16) = v29;
        swift_beginAccess();
        swift_weakAssign();
        v85 = String.init(cString:)();
        v87 = v86;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v88 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v89 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v87);
          if ((v90 & 1) != 0)
          {
            v91 = (uint64_t *)(*(_QWORD *)(v88 + 56) + 56 * v89);
            v93 = *v91;
            v92 = v91[1];
            v94 = v91[2];
            v95 = v91[3];
            v96 = v91[4];
            v97 = v91[5];
            v405 = v91[6];
            swift_bridgeObjectRelease();
            goto LABEL_104;
          }
          swift_bridgeObjectRelease();
        }
        v93 = 0;
        v92 = 0;
        v94 = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v405 = 0;
LABEL_104:
        v354 = v94;
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v540 = v407;
        BYTE8(v540) = 0;
        *(_QWORD *)&v541 = v416;
        *((_QWORD *)&v541 + 1) = v93;
        *(_QWORD *)&v542 = v92;
        *((_QWORD *)&v542 + 1) = v94;
        *(_QWORD *)&v543 = v95;
        *((_QWORD *)&v543 + 1) = v96;
        v360 = v96;
        v367 = v92;
        *(_QWORD *)&v544 = v97;
        *((_QWORD *)&v544 + 1) = v405;
        v174 = v97;
        v374 = v93;
        if (v30)
        {
          v175 = v440;
          if (REBindPointBoundComponent())
          {
            v176 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v177 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_230:
                __break(1u);
                goto LABEL_231;
              }
              v253 = specialized static Entity.entityInfoType(_:)(v176);
              if (v253)
              {
                v254 = (*(uint64_t (**)(void))(v253 + 232))();
                v255 = *(_QWORD *)(v254 + 16);
                swift_retain();
                MEMORY[0x22076D160](v255, 0);
                *(_QWORD *)(v254 + 16) = v176;
                MEMORY[0x22076D160](v176, v254);
                v426 = v254;
                swift_release();
                goto LABEL_179;
              }
              v177 = makeEntity(for:)(v176);
            }
            v426 = v177;
          }
          else
          {
            v426 = 0;
          }
        }
        else
        {
          v426 = 0;
          v175 = v440;
        }
LABEL_179:
        specialized ActionEventData.action<A>()(v175, a8, (uint64_t)&v528);
        v256 = v528;
        if (v528 == 1)
          goto LABEL_194;
        v454 = a5;
        v257 = v537;
        v342 = v537;
        v350 = v538;
        v258 = v536;
        v259 = v95;
        v330 = v535;
        v337 = v536;
        v260 = v534;
        v310 = v174;
        v261 = v533;
        v294 = v532;
        v262 = v531;
        v317 = v531;
        v323 = v259;
        v437 = v539;
        v447 = HIDWORD(v534);
        v263 = v530;
        v264 = v529;
        swift_retain();
        outlined copy of FromToByAction<BlendShapeWeights>?(v256, v264, v263, v262, v294, v261, v260, v330, v258, v257);
        v265 = specialized ActionEventData.parameter<A>(type:)(a9);
        v487 = v543;
        v488 = v544;
        v485 = v541;
        v486 = v542;
        v266 = v31;
        v267 = v32;
        v459 = v264;
        v460 = v263;
        v461 = v294;
        v462 = v261;
        v463 = v260;
        v464 = v447;
        v465 = v330;
        v466 = v337;
        v467 = v342 & 0x1FF;
        v468 = BYTE2(v342) & 1;
        v469 = v350;
        v470 = v437;
        v302 = v265 & 1;
        v471 = v265 & 1;
        v458 = v256;
        v457[0] = v400;
        v472 = v426;
        v473 = v381;
        v474 = v266;
        v475 = v267;
        v476 = Strong;
        v477 = v385;
        v478 = -1.0;
        v479 = 0;
        v480 = 0xBFF0000000000000;
        v481 = 0;
        v482 = 0xBFF0000000000000;
        v483 = 0;
        v484 = v540;
        v489 = v390;
        swift_retain();
        swift_retain();
        v454(v457);
        outlined consume of FromToByAction<BlendShapeWeights>?(v256, v264, v263, v317, v294, v261, v260, v330, v337, v342);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v490 = v400;
        v491 = v256;
        v492 = v264;
        v493 = v263;
        v494 = v294;
        v495 = v261;
        v496 = v260;
        v497 = v447;
        v498 = v330;
        v499 = v337;
        v500 = v342 & 0x1FF;
        v501 = BYTE2(v342) & 1;
        v502 = v350;
        v503 = v437;
        v504 = v302;
        v505 = v426;
        v506 = v381;
        v507 = v266;
        v508 = v267;
        v509 = Strong;
        v510 = v385;
        v511 = -1.0;
        v512 = 0;
        v513 = 0xBFF0000000000000;
        v514 = 0;
        v515 = 0xBFF0000000000000;
        v516 = 0;
        v517 = v407;
        v518 = 0;
        v519 = v416;
        v520 = v374;
        v521 = v367;
        v522 = v354;
        v523 = v323;
        v524 = v360;
        v525 = v310;
        v252 = v405;
        goto LABEL_181;
      }
LABEL_221:
      __break(1u);
      goto LABEL_222;
    case 8:
      v33 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      v417 = *(_QWORD *)(a2 + 32);
      v423 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 56);
      v36 = *(float *)(a2 + 64);
      v37 = *(float *)(a2 + 68);
      v386 = *(_BYTE *)(a2 + 72);
      v391 = *(_QWORD *)(a2 + 80);
      v397 = *(_QWORD *)(a2 + 88);
      v403 = *(_QWORD *)(a2 + 48);
      v432 = a8;
      v441 = a7;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v98 = specialized static Entity.entityInfoType(_:)(v33);
        if (v98)
        {
          v99 = (*(uint64_t (**)(void))(v98 + 232))();
          v100 = *(_QWORD *)(v99 + 16);
          swift_retain();
          MEMORY[0x22076D160](v100, 0);
          *(_QWORD *)(v99 + 16) = v33;
          MEMORY[0x22076D160](v33, v99);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v33);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v410 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v410 + 16) = v34;
        swift_beginAccess();
        swift_weakAssign();
        v101 = String.init(cString:)();
        v103 = v102;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v104 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v105 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v103);
          if ((v106 & 1) != 0)
          {
            v107 = (uint64_t *)(*(_QWORD *)(v104 + 56) + 56 * v105);
            v109 = *v107;
            v108 = v107[1];
            v110 = v107[2];
            v111 = v107[3];
            v113 = v107[4];
            v112 = v107[5];
            v114 = v107[6];
            swift_bridgeObjectRelease();
            goto LABEL_112;
          }
          swift_bridgeObjectRelease();
        }
        v109 = 0;
        v108 = 0;
        v110 = 0;
        v111 = 0;
        v113 = 0;
        v112 = 0;
        v114 = 0;
LABEL_112:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v540 = v417;
        BYTE8(v540) = 0;
        *(_QWORD *)&v541 = v423;
        *((_QWORD *)&v541 + 1) = v109;
        *(_QWORD *)&v542 = v108;
        *((_QWORD *)&v542 + 1) = v110;
        *(_QWORD *)&v543 = v111;
        *((_QWORD *)&v543 + 1) = v113;
        v361 = v113;
        v368 = v108;
        *(_QWORD *)&v544 = v112;
        *((_QWORD *)&v544 + 1) = v114;
        v375 = v109;
        v347 = v114;
        if (v35)
        {
          v178 = v432;
          if (REBindPointBoundComponent())
          {
            v179 = v110;
            v180 = REComponentGetEntity();
            v181 = v441;
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v182 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_231:
                __break(1u);
                goto LABEL_232;
              }
              v268 = specialized static Entity.entityInfoType(_:)(v180);
              if (v268)
              {
                v269 = (*(uint64_t (**)(void))(v268 + 232))();
                v270 = *(_QWORD *)(v269 + 16);
                swift_retain();
                MEMORY[0x22076D160](v270, 0);
                *(_QWORD *)(v269 + 16) = v180;
                MEMORY[0x22076D160](v180, v269);
                v382 = v269;
                swift_release();
                goto LABEL_185;
              }
              v182 = makeEntity(for:)(v180);
            }
            v382 = v182;
LABEL_185:
            v110 = v179;
            goto LABEL_186;
          }
          v382 = 0;
          v181 = v441;
        }
        else
        {
          v382 = 0;
          v178 = v432;
          v181 = v441;
        }
LABEL_186:
        specialized ActionEventData.action<A>()(v181, v178, (uint64_t)&v528);
        v271 = v528;
        if (v528 == 1)
          goto LABEL_194;
        v455 = a5;
        v272 = v537;
        v273 = v536;
        v338 = v536;
        v343 = v538;
        v274 = v111;
        v324 = v535;
        v331 = v534;
        v275 = v533;
        v276 = v532;
        v277 = v531;
        v306 = v110;
        v311 = v531;
        v438 = v539;
        v448 = HIDWORD(v534);
        v278 = v530;
        v279 = v529;
        v318 = v274;
        swift_retain();
        outlined copy of FromToByAction<BlendShapeWeights>?(v271, v279, v278, v277, v276, v275, v331, v324, v273, v272);
        v280 = specialized ActionEventData.parameter<A>(type:)(a9);
        v487 = v543;
        v488 = v544;
        v485 = v541;
        v486 = v542;
        v281 = v36;
        v282 = v37;
        v459 = v279;
        v460 = v278;
        v461 = v276;
        v462 = v275;
        v463 = v331;
        v464 = v448;
        v465 = v324;
        v466 = v338;
        v467 = v272 & 0x1FF;
        v468 = BYTE2(v272) & 1;
        v469 = v343;
        v470 = v438;
        v299 = v280 & 1;
        v471 = v280 & 1;
        v458 = v271;
        v457[0] = v410;
        v472 = v382;
        v473 = v386;
        v474 = v281;
        v475 = v282;
        v477 = 0;
        v478 = 0.0;
        v476 = Strong;
        v479 = 1;
        v480 = v391;
        v481 = 0;
        v482 = v397;
        v483 = 0;
        v484 = v540;
        v489 = v403;
        swift_retain();
        swift_retain();
        v455(v457);
        outlined consume of FromToByAction<BlendShapeWeights>?(v271, v279, v278, v311, v276, v275, v331, v324, v338, v272);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v490 = v410;
        v491 = v271;
        v492 = v279;
        v493 = v278;
        v494 = v276;
        v495 = v275;
        v496 = v331;
        v497 = v448;
        v498 = v324;
        v499 = v338;
        v500 = v272 & 0x1FF;
        v501 = BYTE2(v272) & 1;
        v502 = v343;
        v503 = v438;
        v504 = v299;
        v505 = v382;
        v506 = v386;
        v507 = v281;
        v508 = v282;
        v511 = 0.0;
        v509 = Strong;
        v510 = 0;
        v512 = 1;
        v513 = v391;
        v514 = 0;
        v515 = v397;
        v516 = 0;
        v517 = v417;
        v518 = 0;
        v519 = v423;
        v520 = v375;
        v521 = v368;
        v522 = v306;
        v523 = v318;
        v524 = v361;
        v525 = v112;
        v219 = v347;
LABEL_198:
        v526 = v219;
        v194 = v403;
        goto LABEL_199;
      }
LABEL_222:
      __break(1u);
      goto LABEL_223;
    case 16:
      v451 = a5;
      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v429 = *(_QWORD *)(a2 + 40);
      v40 = *(_QWORD *)(a2 + 56);
      v398 = *(_QWORD *)(a2 + 32);
      v403 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v115 = specialized static Entity.entityInfoType(_:)(v38);
        if (v115)
        {
          v116 = (*(uint64_t (**)(void))(v115 + 232))();
          v117 = *(_QWORD *)(v116 + 16);
          swift_retain();
          MEMORY[0x22076D160](v117, 0);
          *(_QWORD *)(v116 + 16) = v38;
          MEMORY[0x22076D160](v38, v116);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
LABEL_57:
        type metadata accessor for AnimationPlaybackController();
        v118 = swift_allocObject();
        swift_weakInit();
        v411 = v118;
        *(_QWORD *)(v118 + 16) = v39;
        swift_beginAccess();
        swift_weakAssign();
        v119 = String.init(cString:)();
        v121 = v120;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v122 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v123 = specialized __RawDictionaryStorage.find<A>(_:)(v119, v121);
          if ((v124 & 1) != 0)
          {
            v125 = (uint64_t *)(*(_QWORD *)(v122 + 56) + 56 * v123);
            v126 = v125[1];
            v127 = v125[3];
            v418 = *v125;
            v424 = v125[2];
            v128 = v125[4];
            v129 = v125[5];
            v130 = v125[6];
            swift_bridgeObjectRelease();
            goto LABEL_120;
          }
          swift_bridgeObjectRelease();
        }
        v418 = 0;
        v424 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v130 = 0;
LABEL_120:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v540 = 0;
        BYTE8(v540) = 0;
        *(_QWORD *)&v541 = v429;
        *((_QWORD *)&v541 + 1) = v418;
        *(_QWORD *)&v542 = v126;
        *((_QWORD *)&v542 + 1) = v424;
        *(_QWORD *)&v543 = v127;
        *((_QWORD *)&v543 + 1) = v128;
        *(_QWORD *)&v544 = v129;
        *((_QWORD *)&v544 + 1) = v130;
        v387 = v127;
        v392 = v126;
        if (!v40 || !REBindPointBoundComponent())
          goto LABEL_132;
        v43 = v128;
        v183 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_130:
          type metadata accessor for Entity();
          v184 = swift_dynamicCastClassUnconditional();
          goto LABEL_131;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
LABEL_190:
          v283 = specialized static Entity.entityInfoType(_:)(v183);
          if (v283)
          {
            v185 = (*(uint64_t (**)(void))(v283 + 232))();
            v284 = *(_QWORD *)(v185 + 16);
            swift_retain();
            MEMORY[0x22076D160](v284, 0);
            *(_QWORD *)(v185 + 16) = v183;
            MEMORY[0x22076D160](v183, v185);
            swift_release();
            goto LABEL_192;
          }
          v184 = makeEntity(for:)(v183);
LABEL_131:
          v185 = v184;
LABEL_192:
          v128 = v43;
LABEL_193:
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v528);
          if (v528 != 1)
          {
            v487 = v543;
            v488 = v544;
            v485 = v541;
            v486 = v542;
            v285 = v537;
            v286 = v536;
            v378 = v129;
            v332 = v534;
            v339 = v532;
            v287 = v531;
            v303 = v531;
            v325 = v530;
            v288 = v185;
            v289 = v529;
            v344 = v533;
            v351 = HIDWORD(v534);
            v459 = v529;
            v460 = v530;
            v461 = v532;
            v462 = v533;
            v463 = v534;
            v464 = BYTE4(v534);
            v465 = v535;
            v466 = v536;
            v290 = v535;
            v467 = v537 & 0x1FF;
            v364 = (v537 >> 8) & 1;
            v357 = WORD1(v537) & 1;
            v468 = BYTE2(v537) & 1;
            v469 = v538;
            v470 = v539;
            v439 = v538;
            v449 = v539;
            v471 = 1;
            v458 = v528;
            v371 = v130;
            v457[0] = v411;
            v472 = v185;
            v473 = 0;
            v474 = 0.0;
            v475 = 0.0;
            v477 = 0;
            v478 = 0.0;
            v476 = Strong;
            v479 = 1;
            v480 = v398;
            v481 = 0;
            v482 = 0;
            v483 = 1;
            v484 = v540;
            v489 = v403;
            v291 = v528;
            v312 = v528;
            swift_retain();
            swift_retain();
            outlined copy of FromToByAction<BlendShapeWeights>?(v291, v289, v325, v287, v339, v344, v332, v290, v286, v285);
            swift_retain();
            v451(v457);
            outlined consume of FromToByAction<BlendShapeWeights>?(v312, v289, v325, v303, v339, v344, v332, v290, v286, v285);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v490 = v411;
            v491 = v312;
            v492 = v289;
            v493 = v325;
            v494 = v339;
            v495 = v344;
            v496 = v332;
            v497 = v351;
            v498 = v290;
            v499 = v286;
            LOBYTE(v500) = v285;
            HIBYTE(v500) = v364;
            v501 = v357;
            v502 = v439;
            v503 = v449;
            v504 = 1;
            v505 = v288;
            v506 = 0;
            v508 = 0.0;
            v507 = 0.0;
            v511 = 0.0;
            v509 = Strong;
            v510 = 0;
            v512 = 1;
            v513 = v398;
            v514 = 0;
            v515 = 0;
            v516 = 1;
            v517 = 0;
            v518 = 0;
            v519 = v429;
            v520 = v418;
            v521 = v392;
            v522 = v424;
            v523 = v387;
            v524 = v128;
            v236 = v378;
            goto LABEL_197;
          }
LABEL_194:
          swift_release();
          swift_release();
          swift_release();
LABEL_195:
          swift_release();
          return 0;
        }
        __break(1u);
        goto LABEL_125;
      }
LABEL_223:
      __break(1u);
      goto LABEL_224;
    case 32:
      v451 = a5;
      v41 = *(_QWORD *)a2;
      v42 = *(_QWORD *)(a2 + 8);
      v429 = *(_QWORD *)(a2 + 40);
      v43 = *(_QWORD *)(a2 + 56);
      v398 = *(_QWORD *)(a2 + 32);
      v403 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
LABEL_65:
        type metadata accessor for AnimationPlaybackController();
        v134 = swift_allocObject();
        swift_weakInit();
        v411 = v134;
        *(_QWORD *)(v134 + 16) = v42;
        swift_beginAccess();
        swift_weakAssign();
        v135 = String.init(cString:)();
        v137 = v136;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v138 = static AnimationResource.codableActionTypeMap;
        if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
          goto LABEL_126;
        swift_bridgeObjectRetain();
        v139 = specialized __RawDictionaryStorage.find<A>(_:)(v135, v137);
        if ((v140 & 1) != 0)
        {
          v141 = (uint64_t *)(*(_QWORD *)(v138 + 56) + 56 * v139);
          v142 = v141[1];
          v143 = v141[3];
          v418 = *v141;
          v424 = v141[2];
          v128 = v141[4];
          v129 = v141[5];
          v130 = v141[6];
          swift_bridgeObjectRelease();
LABEL_127:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v540 = 0;
          BYTE8(v540) = 0;
          *(_QWORD *)&v541 = v429;
          *((_QWORD *)&v541 + 1) = v418;
          *(_QWORD *)&v542 = v142;
          *((_QWORD *)&v542 + 1) = v424;
          *(_QWORD *)&v543 = v143;
          *((_QWORD *)&v543 + 1) = v128;
          *(_QWORD *)&v544 = v129;
          *((_QWORD *)&v544 + 1) = v130;
          v387 = v143;
          v392 = v142;
          if (v43 && REBindPointBoundComponent())
          {
            v43 = v128;
            v183 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
              goto LABEL_130;
            if ((REEntityIsBeingDestroyed() & 1) != 0)
            {
LABEL_232:
              __break(1u);
              goto LABEL_233;
            }
            goto LABEL_190;
          }
LABEL_132:
          v185 = 0;
          goto LABEL_193;
        }
LABEL_125:
        swift_bridgeObjectRelease();
LABEL_126:
        v418 = 0;
        v424 = 0;
        v142 = 0;
        v143 = 0;
        v128 = 0;
        v129 = 0;
        v130 = 0;
        goto LABEL_127;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v131 = specialized static Entity.entityInfoType(_:)(v41);
        if (v131)
        {
          v132 = (*(uint64_t (**)(void))(v131 + 232))();
          v133 = *(_QWORD *)(v132 + 16);
          swift_retain();
          MEMORY[0x22076D160](v133, 0);
          *(_QWORD *)(v132 + 16) = v41;
          MEMORY[0x22076D160](v41, v132);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v41);
        }
        goto LABEL_65;
      }
LABEL_224:
      __break(1u);
      goto LABEL_225;
    case 64:
      v44 = *(_QWORD *)a2;
      v45 = *(_QWORD *)(a2 + 8);
      v430 = *(_QWORD *)(a2 + 24);
      v46 = *(_QWORD *)(a2 + 40);
      v399 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_73;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      v144 = specialized static Entity.entityInfoType(_:)(v44);
      if (v144)
      {
        v145 = (*(uint64_t (**)(void))(v144 + 232))();
        v146 = *(_QWORD *)(v145 + 16);
        swift_retain();
        MEMORY[0x22076D160](v146, 0);
        *(_QWORD *)(v145 + 16) = v44;
        MEMORY[0x22076D160](v44, v145);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v44);
      }
LABEL_73:
      type metadata accessor for AnimationPlaybackController();
      v147 = swift_allocObject();
      swift_weakInit();
      v425 = v147;
      *(_QWORD *)(v147 + 16) = v45;
      swift_beginAccess();
      swift_weakAssign();
      if (!v46 || !REBindPointBoundComponent())
      {
        v150 = 0;
        goto LABEL_79;
      }
      v148 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v149 = swift_dynamicCastClassUnconditional();
LABEL_77:
        v150 = v149;
        goto LABEL_79;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
        goto LABEL_229;
      }
      v220 = specialized static Entity.entityInfoType(_:)(v148);
      if (!v220)
      {
        v149 = makeEntity(for:)(v148);
        goto LABEL_77;
      }
      v150 = (*(uint64_t (**)(void))(v220 + 232))();
      v221 = *(_QWORD *)(v150 + 16);
      swift_retain();
      MEMORY[0x22076D160](v221, 0);
      *(_QWORD *)(v150 + 16) = v148;
      MEMORY[0x22076D160](v148, v150);
      swift_release();
LABEL_79:
      v151 = String.init(cString:)();
      v153 = v152;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v154 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_134;
      swift_bridgeObjectRetain();
      v155 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v153);
      if ((v156 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_134:
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v412 = 0;
        v419 = 0;
        v406 = 0;
        goto LABEL_135;
      }
      v157 = (uint64_t *)(*(_QWORD *)(v154 + 56) + 56 * v155);
      v158 = *v157;
      v159 = v157[1];
      v160 = v157[2];
      v161 = v157[3];
      v412 = v157[5];
      v419 = v157[4];
      v406 = v157[6];
      swift_bridgeObjectRelease();
LABEL_135:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v540 = 0;
      BYTE8(v540) = 0;
      *(_QWORD *)&v541 = v430;
      *((_QWORD *)&v541 + 1) = v158;
      *(_QWORD *)&v542 = v159;
      *((_QWORD *)&v542 + 1) = v160;
      v388 = v161;
      v393 = v160;
      *(_QWORD *)&v543 = v161;
      *((_QWORD *)&v543 + 1) = v419;
      *(_QWORD *)&v544 = v412;
      *((_QWORD *)&v544 + 1) = v406;
      specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v528);
      if (v528 == 1)
        goto LABEL_194;
      v487 = v543;
      v488 = v544;
      v485 = v541;
      v486 = v542;
      v369 = v159;
      v376 = v158;
      v186 = v537;
      v452 = a5;
      v443 = v536;
      v187 = v535;
      v326 = v532;
      v333 = v534;
      v188 = v531;
      v313 = v531;
      v189 = v530;
      v190 = v529;
      v348 = HIDWORD(v534);
      v459 = v529;
      v460 = v530;
      v461 = v532;
      v462 = v533;
      v191 = v533;
      v463 = v534;
      v464 = BYTE4(v534);
      v465 = v535;
      v466 = v536;
      v467 = v537 & 0x1FF;
      v362 = (v537 >> 8) & 1;
      v355 = WORD1(v537) & 1;
      v468 = BYTE2(v537) & 1;
      v469 = v538;
      v470 = v539;
      v433 = v538;
      v192 = v539;
      v471 = 1;
      v458 = v528;
      v457[0] = v425;
      v472 = v150;
      v473 = 0;
      v474 = 0.0;
      v475 = 0.0;
      v477 = 0;
      v478 = 0.0;
      v476 = Strong;
      v479 = 1;
      v480 = 0;
      v481 = 1;
      v482 = 0;
      v483 = 1;
      v484 = v540;
      v489 = v399;
      v193 = v528;
      v319 = v528;
      swift_retain();
      swift_retain();
      outlined copy of FromToByAction<BlendShapeWeights>?(v193, v190, v189, v188, v326, v191, v333, v187, v443, v186);
      swift_retain();
      v452(v457);
      outlined consume of FromToByAction<BlendShapeWeights>?(v319, v190, v189, v313, v326, v191, v333, v187, v443, v186);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v490 = v425;
      v491 = v319;
      v492 = v190;
      v493 = v189;
      v494 = v326;
      v495 = v191;
      v496 = v333;
      v497 = v348;
      v498 = v187;
      v499 = v443;
      LOBYTE(v500) = v186;
      HIBYTE(v500) = v362;
      v501 = v355;
      v502 = v433;
      v503 = v192;
      v504 = 1;
      v505 = v150;
      v506 = 0;
      v508 = 0.0;
      v507 = 0.0;
      v511 = 0.0;
      v509 = Strong;
      v510 = 0;
      v512 = 1;
      v513 = 0;
      v514 = 1;
      v515 = 0;
      v516 = 1;
      v517 = 0;
      v518 = 0;
      v519 = v430;
      v520 = v376;
      v521 = v369;
      v522 = v393;
      v523 = v388;
      v524 = v419;
      v525 = v412;
      v526 = v406;
      v194 = v399;
LABEL_199:
      v527 = v194;
      outlined release of ActionEvent<FromToByAction<BlendShapeWeights>>((uint64_t)&v490);
      return 0;
    default:
      if (a4 != 128)
        goto LABEL_195;
      v20 = *(_QWORD *)a2;
      v21 = *(_QWORD *)(a2 + 8);
      v428 = *(_QWORD *)(a2 + 24);
      v22 = *(_QWORD *)(a2 + 40);
      v403 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
        v195 = specialized static Entity.entityInfoType(_:)(v20);
        if (v195)
        {
          v196 = (*(uint64_t (**)(void))(v195 + 232))();
          v197 = *(_QWORD *)(v196 + 16);
          swift_retain();
          MEMORY[0x22076D160](v197, 0);
          *(_QWORD *)(v196 + 16) = v20;
          MEMORY[0x22076D160](v20, v196);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v20);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v198 = swift_allocObject();
      swift_weakInit();
      v402 = v198;
      *(_QWORD *)(v198 + 16) = v21;
      swift_beginAccess();
      swift_weakAssign();
      if (v22 && REBindPointBoundComponent())
      {
        v199 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v200 = swift_dynamicCastClassUnconditional();
LABEL_144:
          v201 = v200;
          goto LABEL_146;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_233:
          __break(1u);
          JUMPOUT(0x21BB4881CLL);
        }
        v292 = specialized static Entity.entityInfoType(_:)(v199);
        if (!v292)
        {
          v200 = makeEntity(for:)(v199);
          goto LABEL_144;
        }
        v201 = (*(uint64_t (**)(void))(v292 + 232))();
        v293 = *(_QWORD *)(v201 + 16);
        swift_retain();
        MEMORY[0x22076D160](v293, 0);
        *(_QWORD *)(v201 + 16) = v199;
        MEMORY[0x22076D160](v199, v201);
        swift_release();
      }
      else
      {
        v201 = 0;
      }
LABEL_146:
      v202 = String.init(cString:)();
      v204 = v203;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v205 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v206 = specialized __RawDictionaryStorage.find<A>(_:)(v202, v204);
        if ((v207 & 1) != 0)
        {
          v208 = (uint64_t *)(*(_QWORD *)(v205 + 56) + 56 * v206);
          v209 = *v208;
          v210 = v208[1];
          v211 = v208[2];
          v212 = v208[3];
          v420 = v208[5];
          v427 = v208[4];
          v413 = v208[6];
          swift_bridgeObjectRelease();
LABEL_157:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v540 = 0;
          BYTE8(v540) = 0;
          *(_QWORD *)&v541 = v428;
          *((_QWORD *)&v541 + 1) = v209;
          *(_QWORD *)&v542 = v210;
          *((_QWORD *)&v542 + 1) = v211;
          v394 = v211;
          *(_QWORD *)&v543 = v212;
          *((_QWORD *)&v543 + 1) = v427;
          *(_QWORD *)&v544 = v420;
          *((_QWORD *)&v544 + 1) = v413;
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v528);
          if (v528 == 1)
            goto LABEL_194;
          v487 = v543;
          v488 = v544;
          v485 = v541;
          v486 = v542;
          v370 = v210;
          v377 = v209;
          v213 = v537;
          v434 = v536;
          v214 = v534;
          v334 = v533;
          v320 = v535;
          v327 = v532;
          v215 = v531;
          v216 = v530;
          v314 = v529;
          v349 = HIDWORD(v534);
          v459 = v529;
          v460 = v530;
          v300 = v530;
          v304 = v531;
          v461 = v532;
          v462 = v533;
          v463 = v534;
          v296 = v534;
          v464 = BYTE4(v534);
          v465 = v535;
          v466 = v536;
          v467 = v537 & 0x1FF;
          v363 = (v537 >> 8) & 1;
          v356 = WORD1(v537) & 1;
          v468 = BYTE2(v537) & 1;
          v469 = v538;
          v470 = v539;
          v444 = v538;
          v217 = v539;
          v471 = 1;
          v458 = v528;
          v457[0] = v402;
          v472 = v201;
          v473 = 0;
          v474 = 0.0;
          v475 = 0.0;
          v477 = 0;
          v478 = 0.0;
          v476 = Strong;
          v479 = 1;
          v480 = 0;
          v481 = 1;
          v482 = 0;
          v483 = 1;
          v484 = v540;
          v489 = v403;
          v218 = v528;
          v307 = v528;
          swift_retain();
          swift_retain();
          outlined copy of FromToByAction<BlendShapeWeights>?(v218, v314, v216, v215, v327, v334, v214, v320, v434, v213);
          swift_retain();
          a5(v457);
          swift_release();
          outlined consume of FromToByAction<BlendShapeWeights>?(v307, v314, v300, v304, v327, v334, v296, v320, v434, v213);
          swift_release();
          swift_release();
          swift_release();
          v490 = v402;
          v491 = v307;
          v492 = v314;
          v493 = v300;
          v494 = v327;
          v495 = v334;
          v496 = v296;
          v497 = v349;
          v498 = v320;
          v499 = v434;
          LOBYTE(v500) = v213;
          HIBYTE(v500) = v363;
          v501 = v356;
          v502 = v444;
          v503 = v217;
          v504 = 1;
          v505 = v201;
          v506 = 0;
          v508 = 0.0;
          v507 = 0.0;
          v511 = 0.0;
          v509 = Strong;
          v510 = 0;
          v512 = 1;
          v513 = 0;
          v514 = 1;
          v515 = 0;
          v516 = 1;
          v517 = 0;
          v518 = 0;
          v519 = v428;
          v520 = v377;
          v521 = v370;
          v522 = v394;
          v523 = v212;
          v524 = v427;
          v525 = v420;
          v219 = v413;
          goto LABEL_198;
        }
        swift_bridgeObjectRelease();
      }
      v209 = 0;
      v210 = 0;
      v211 = 0;
      v212 = 0;
      v420 = 0;
      v427 = 0;
      v413 = 0;
      goto LABEL_157;
  }
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t Entity;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  double v176;
  double v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  char v203;
  double v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  char v216;
  double v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  char v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  char v305;
  char v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t *v360;
  uint64_t *v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t Strong;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  char v377;
  char v378;
  uint64_t v379;
  char v380;
  double v381;
  double v382;
  uint64_t v383;
  uint64_t v384;
  double v385;
  char v386;
  unint64_t v387;
  char v388;
  unint64_t v389;
  char v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  char v405;
  uint64_t v406;
  char v407;
  double v408;
  double v409;
  uint64_t v410;
  uint64_t v411;
  double v412;
  char v413;
  unint64_t v414;
  char v415;
  unint64_t v416;
  char v417;
  uint64_t v418;
  char v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v341 = *(_QWORD *)(a2 + 40);
      v331 = *(_QWORD *)(a2 + 48);
      v335 = *(_QWORD *)(a2 + 32);
      v299 = *(_QWORD *)(a2 + 64);
      v16 = *(float *)(a2 + 72);
      v15 = *(float *)(a2 + 76);
      v306 = *(_BYTE *)(a2 + 80);
      v312 = *(_QWORD *)(a2 + 88);
      v319 = *(_QWORD *)(a2 + 96);
      v325 = *(_QWORD *)(a2 + 56);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
        __break(1u);
        goto LABEL_211;
      }
      v41 = specialized static Entity.entityInfoType(_:)(v13);
      if (v41)
      {
        v42 = (*(uint64_t (**)(void))(v41 + 232))();
        v43 = *(_QWORD *)(v42 + 16);
        swift_retain();
        MEMORY[0x22076D160](v43, 0);
        *(_QWORD *)(v42 + 16) = v13;
        MEMORY[0x22076D160](v13, v42);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v13);
      }
LABEL_25:
      type metadata accessor for AnimationPlaybackController();
      v44 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v44 + 16) = v14;
      swift_beginAccess();
      swift_weakAssign();
      v45 = String.init(cString:)();
      v47 = v46;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      v358 = a7;
      swift_beginAccess();
      v48 = static AnimationResource.codableActionTypeMap;
      v349 = a8;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_85;
      swift_bridgeObjectRetain();
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v47);
      if ((v50 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_85:
        v53 = 0;
        v52 = 0;
        v54 = 0;
        v55 = 0;
        v57 = 0;
        v56 = 0;
        v58 = 0;
        goto LABEL_86;
      }
      v51 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 56 * v49);
      v53 = *v51;
      v52 = v51[1];
      v54 = v51[2];
      v55 = v51[3];
      v57 = v51[4];
      v56 = v51[5];
      v58 = v51[6];
      swift_bridgeObjectRelease();
LABEL_86:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v436 = v335;
      BYTE8(v436) = 0;
      *(_QWORD *)&v437 = v341;
      *((_QWORD *)&v437 + 1) = v53;
      *(_QWORD *)&v438 = v52;
      *((_QWORD *)&v438 + 1) = v54;
      *(_QWORD *)&v439 = v55;
      *((_QWORD *)&v439 + 1) = v57;
      *(_QWORD *)&v440 = v56;
      *((_QWORD *)&v440 + 1) = v58;
      v285 = v54;
      v288 = v52;
      v281 = v56;
      v283 = v55;
      v278 = v58;
      if (!v299 || !REBindPointBoundComponent())
      {
        v167 = 0;
        goto LABEL_92;
      }
      Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v166 = swift_dynamicCastClassUnconditional();
LABEL_90:
        v167 = v166;
        goto LABEL_92;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
        goto LABEL_219;
      v262 = specialized static Entity.entityInfoType(_:)(Entity);
      if (!v262)
      {
        v166 = makeEntity(for:)(Entity);
        goto LABEL_90;
      }
      v167 = (*(uint64_t (**)(void))(v262 + 232))();
      v263 = *(_QWORD *)(v167 + 16);
      swift_retain();
      MEMORY[0x22076D160](v263, 0);
      *(_QWORD *)(v167 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v167);
      swift_release();
LABEL_92:
      specialized ActionEventData.action<A>()(v358, v349, (uint64_t)&v429);
      v168 = v433;
      if (!v433)
        goto LABEL_171;
      v169 = v434;
      v170 = v432;
      v171 = v431;
      v354 = v53;
      v172 = v430;
      v173 = v429;
      v174 = v435;
      swift_retain();
      outlined copy of SetEntityPropertyAction<Transform>?(v173, v172, v171, v170, v168);
      v175 = specialized ActionEventData.parameter<A>(type:)(a9);
      v371 = v173;
      v372 = v172;
      v176 = v16;
      v373 = v171 & 1;
      v177 = v15;
      v374 = v170;
      v375 = v168;
      v376 = v169;
      v377 = v174 & 1;
      v276 = v175 & 1;
      v378 = v175 & 1;
      v370 = v44;
      v379 = v167;
      v380 = v306;
      v381 = v176;
      v382 = v177;
      v383 = Strong;
      v384 = v325;
      v385 = -1.0;
      v386 = 0;
      v387 = v312;
      v388 = 0;
      v389 = v319;
      v390 = 0;
      v393 = v438;
      v394 = v439;
      v395 = v440;
      v391 = v436;
      v392 = v437;
      v396 = v331;
      swift_retain();
      swift_retain();
      a5(&v370);
      outlined consume of SetEntityPropertyAction<Transform>?(v173, v172, v171, v170, v168);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v397 = v44;
      v398 = v173;
      v399 = v172;
      v400 = v171 & 1;
      v401 = v170;
      v402 = v168;
      v403 = v169;
      v404 = v174 & 1;
      v405 = v276;
      v406 = v167;
      v407 = v306;
      v408 = v176;
      v409 = v177;
      v410 = Strong;
      v411 = v325;
      v412 = -1.0;
      v413 = 0;
      v414 = v312;
      v415 = 0;
      v416 = v319;
      v417 = 0;
      v418 = v335;
      v419 = 0;
      v420 = v341;
      v421 = v354;
      v422 = v288;
      v423 = v285;
      v424 = v283;
      v425 = v57;
      v426 = v281;
      v178 = v278;
LABEL_127:
      v427 = v178;
      v219 = v331;
LABEL_170:
      v428 = v219;
      outlined release of ActionEvent<PlayAudioAction>((uint64_t)&v397);
      return 0;
    case 2:
      v21 = *(_QWORD *)a2;
      v22 = *(_QWORD *)(a2 + 8);
      v342 = *(_QWORD *)(a2 + 40);
      v23 = *(float *)(a2 + 56);
      v321 = *(_QWORD *)(a2 + 64);
      v326 = *(_QWORD *)(a2 + 48);
      v313 = *(_QWORD *)(a2 + 72);
      v331 = *(_QWORD *)(a2 + 80);
      v336 = *(_QWORD *)(a2 + 32);
      v300 = *(_QWORD *)(a2 + 88);
      v25 = *(float *)(a2 + 96);
      v24 = *(float *)(a2 + 100);
      v307 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_211:
          __break(1u);
          goto LABEL_212;
        }
        v59 = specialized static Entity.entityInfoType(_:)(v21);
        if (v59)
        {
          v60 = (*(uint64_t (**)(void))(v59 + 232))();
          v61 = *(_QWORD *)(v60 + 16);
          swift_retain();
          MEMORY[0x22076D160](v61, 0);
          *(_QWORD *)(v60 + 16) = v21;
          MEMORY[0x22076D160](v21, v60);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v21);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v62 = swift_allocObject();
      swift_weakInit();
      v293 = v62;
      *(_QWORD *)(v62 + 16) = v22;
      swift_beginAccess();
      swift_weakAssign();
      v63 = String.init(cString:)();
      v65 = v64;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      v359 = a7;
      swift_beginAccess();
      v66 = static AnimationResource.codableActionTypeMap;
      v350 = a8;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_96;
      swift_bridgeObjectRetain();
      v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, v65);
      if ((v68 & 1) != 0)
      {
        v69 = (uint64_t *)(*(_QWORD *)(v66 + 56) + 56 * v67);
        v71 = *v69;
        v70 = v69[1];
        v72 = v69[2];
        v73 = v69[3];
        v74 = v69[4];
        v75 = v69[5];
        v76 = v69[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_96:
        v71 = 0;
        v70 = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v436 = v336;
      BYTE8(v436) = 0;
      *(_QWORD *)&v437 = v342;
      *((_QWORD *)&v437 + 1) = v71;
      *(_QWORD *)&v438 = v70;
      *((_QWORD *)&v438 + 1) = v72;
      *(_QWORD *)&v439 = v73;
      *((_QWORD *)&v439 + 1) = v74;
      *(_QWORD *)&v440 = v75;
      *((_QWORD *)&v440 + 1) = v76;
      v286 = v72;
      v289 = v70;
      v282 = v74;
      v279 = v75;
      if (v300 && REBindPointBoundComponent())
      {
        v179 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v180 = swift_dynamicCastClassUnconditional();
LABEL_101:
          v181 = v180;
          goto LABEL_103;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
          goto LABEL_221;
        }
        v264 = specialized static Entity.entityInfoType(_:)(v179);
        if (!v264)
        {
          v180 = makeEntity(for:)(v179);
          goto LABEL_101;
        }
        v181 = (*(uint64_t (**)(void))(v264 + 232))();
        v265 = *(_QWORD *)(v181 + 16);
        swift_retain();
        MEMORY[0x22076D160](v265, 0);
        *(_QWORD *)(v181 + 16) = v179;
        MEMORY[0x22076D160](v179, v181);
        swift_release();
      }
      else
      {
        v181 = 0;
      }
LABEL_103:
      specialized ActionEventData.action<A>()(v359, v350, (uint64_t)&v429);
      v182 = v433;
      if (v433)
      {
        v183 = v434;
        v184 = v432;
        v363 = v71;
        v185 = v431;
        v186 = v430;
        v187 = v429;
        v188 = v435;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v187, v186, v185, v184, v182);
        v189 = specialized ActionEventData.parameter<A>(type:)(a9);
        v371 = v187;
        v372 = v186;
        v190 = v25;
        v373 = v185 & 1;
        v191 = v24;
        v192 = v23;
        v374 = v184;
        v375 = v182;
        v376 = v183;
        v377 = v188 & 1;
        v274 = v189 & 1;
        v378 = v189 & 1;
        v370 = v293;
        v379 = v181;
        v380 = v307;
        v381 = v190;
        v382 = v191;
        v383 = Strong;
        v384 = v313;
        v385 = v192;
        v386 = 0;
        v387 = v326;
        v388 = 0;
        v389 = v321;
        v390 = 0;
        v393 = v438;
        v394 = v439;
        v395 = v440;
        v391 = v436;
        v392 = v437;
        v396 = v331;
        swift_retain();
        swift_retain();
        a5(&v370);
        outlined consume of SetEntityPropertyAction<Transform>?(v187, v186, v185, v184, v182);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v397 = v293;
        v398 = v187;
        v399 = v186;
        v400 = v185 & 1;
        v401 = v184;
        v402 = v182;
        v403 = v183;
        v404 = v188 & 1;
        v405 = v274;
        v406 = v181;
        v407 = v307;
        v408 = v190;
        v409 = v191;
        v410 = Strong;
        v411 = v313;
        v412 = v192;
        v413 = 0;
        v414 = v326;
        v415 = 0;
        v416 = v321;
        v417 = 0;
        v418 = v336;
        v419 = 0;
        v420 = v342;
        v421 = v363;
        v422 = v289;
        v423 = v286;
        v424 = v73;
        v425 = v282;
        v426 = v279;
        v178 = v76;
        goto LABEL_127;
      }
LABEL_171:
      swift_release();
      swift_release();
      swift_release();
LABEL_172:
      swift_release();
      return 0;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_172;
    case 4:
      v26 = *(_QWORD *)a2;
      v27 = *(_QWORD *)(a2 + 8);
      v343 = *(_QWORD *)(a2 + 40);
      v331 = *(_QWORD *)(a2 + 48);
      v337 = *(_QWORD *)(a2 + 32);
      v327 = *(_QWORD *)(a2 + 56);
      v314 = *(_QWORD *)(a2 + 64);
      v29 = *(float *)(a2 + 72);
      v28 = *(float *)(a2 + 76);
      v322 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_212:
          __break(1u);
          goto LABEL_213;
        }
        v77 = specialized static Entity.entityInfoType(_:)(v26);
        if (v77)
        {
          v78 = (*(uint64_t (**)(void))(v77 + 232))();
          v79 = *(_QWORD *)(v78 + 16);
          swift_retain();
          MEMORY[0x22076D160](v79, 0);
          *(_QWORD *)(v78 + 16) = v26;
          MEMORY[0x22076D160](v26, v78);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v26);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v80 = swift_allocObject();
      swift_weakInit();
      v309 = v80;
      *(_QWORD *)(v80 + 16) = v27;
      swift_beginAccess();
      swift_weakAssign();
      v81 = String.init(cString:)();
      v83 = v82;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v84 = static AnimationResource.codableActionTypeMap;
      v351 = a8;
      v360 = a7;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_107;
      swift_bridgeObjectRetain();
      v85 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v83);
      if ((v86 & 1) != 0)
      {
        v87 = (uint64_t *)(*(_QWORD *)(v84 + 56) + 56 * v85);
        v89 = *v87;
        v88 = v87[1];
        v90 = v87[2];
        v91 = v87[3];
        v92 = v87[4];
        v93 = v87[5];
        v94 = v87[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_107:
        v89 = 0;
        v88 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        v93 = 0;
        v94 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v436 = v337;
      BYTE8(v436) = 0;
      *(_QWORD *)&v437 = v343;
      *((_QWORD *)&v437 + 1) = v89;
      *(_QWORD *)&v438 = v88;
      *((_QWORD *)&v438 + 1) = v90;
      *(_QWORD *)&v439 = v91;
      *((_QWORD *)&v439 + 1) = v92;
      *(_QWORD *)&v440 = v93;
      *((_QWORD *)&v440 + 1) = v94;
      v294 = v90;
      v302 = v88;
      v287 = v93;
      v290 = v92;
      if (v314 && REBindPointBoundComponent())
      {
        v193 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v194 = swift_dynamicCastClassUnconditional();
LABEL_112:
          v195 = v194;
          goto LABEL_114;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v266 = specialized static Entity.entityInfoType(_:)(v193);
        if (!v266)
        {
          v194 = makeEntity(for:)(v193);
          goto LABEL_112;
        }
        v195 = (*(uint64_t (**)(void))(v266 + 232))();
        v267 = *(_QWORD *)(v195 + 16);
        swift_retain();
        MEMORY[0x22076D160](v267, 0);
        *(_QWORD *)(v195 + 16) = v193;
        MEMORY[0x22076D160](v193, v195);
        swift_release();
      }
      else
      {
        v195 = 0;
      }
LABEL_114:
      specialized ActionEventData.action<A>()(v360, v351, (uint64_t)&v429);
      v196 = v433;
      if (v433)
      {
        v275 = v195;
        v197 = v434;
        v198 = v432;
        v199 = v431;
        v364 = v89;
        v200 = v430;
        v201 = v429;
        v202 = v435;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v201, v200, v199, v198, v196);
        v203 = specialized ActionEventData.parameter<A>(type:)(a9);
        v371 = v201;
        v372 = v200;
        v204 = v29;
        v373 = v199 & 1;
        v205 = v28;
        v374 = v198;
        v375 = v196;
        v376 = v197;
        v377 = v202 & 1;
        v280 = v203 & 1;
        v378 = v203 & 1;
        v370 = v309;
        v379 = v275;
        v380 = v322;
        v381 = v204;
        v382 = v205;
        v383 = Strong;
        v384 = v327;
        v385 = -1.0;
        v386 = 0;
        v387 = 0xBFF0000000000000;
        v388 = 0;
        v389 = 0xBFF0000000000000;
        v390 = 0;
        v393 = v438;
        v394 = v439;
        v395 = v440;
        v391 = v436;
        v392 = v437;
        v396 = v331;
        swift_retain();
        swift_retain();
        a5(&v370);
        outlined consume of SetEntityPropertyAction<Transform>?(v201, v200, v199, v198, v196);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v397 = v309;
        v398 = v201;
        v399 = v200;
        v400 = v199 & 1;
        v401 = v198;
        v402 = v196;
        v403 = v197;
        v404 = v202 & 1;
        v405 = v280;
        v406 = v275;
        v407 = v322;
        v408 = v204;
        v409 = v205;
        v410 = Strong;
        v411 = v327;
        v412 = -1.0;
        v413 = 0;
        v414 = 0xBFF0000000000000;
        v415 = 0;
        v416 = 0xBFF0000000000000;
        v417 = 0;
        v418 = v337;
        v419 = 0;
        v420 = v343;
        v421 = v364;
        v422 = v302;
        v423 = v294;
        v424 = v91;
        v425 = v290;
        v426 = v287;
        v178 = v94;
        goto LABEL_127;
      }
      goto LABEL_171;
    case 8:
      v30 = *(_QWORD *)a2;
      v31 = *(_QWORD *)(a2 + 8);
      v344 = *(_QWORD *)(a2 + 40);
      v331 = *(_QWORD *)(a2 + 48);
      v338 = *(_QWORD *)(a2 + 32);
      v308 = *(_QWORD *)(a2 + 56);
      v33 = *(float *)(a2 + 64);
      v32 = *(float *)(a2 + 68);
      v315 = *(_BYTE *)(a2 + 72);
      v323 = *(_QWORD *)(a2 + 80);
      v328 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v95 = specialized static Entity.entityInfoType(_:)(v30);
        if (v95)
        {
          v96 = (*(uint64_t (**)(void))(v95 + 232))();
          v97 = *(_QWORD *)(v96 + 16);
          swift_retain();
          MEMORY[0x22076D160](v97, 0);
          *(_QWORD *)(v96 + 16) = v30;
          MEMORY[0x22076D160](v30, v96);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v30);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v98 = swift_allocObject();
      swift_weakInit();
      v301 = v98;
      *(_QWORD *)(v98 + 16) = v31;
      swift_beginAccess();
      swift_weakAssign();
      v99 = String.init(cString:)();
      v101 = v100;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      v361 = a7;
      swift_beginAccess();
      v102 = static AnimationResource.codableActionTypeMap;
      v352 = a8;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_118;
      swift_bridgeObjectRetain();
      v103 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v101);
      if ((v104 & 1) != 0)
      {
        v105 = (uint64_t *)(*(_QWORD *)(v102 + 56) + 56 * v103);
        v107 = *v105;
        v106 = v105[1];
        v108 = v105[2];
        v109 = v105[3];
        v111 = v105[4];
        v110 = v105[5];
        v112 = v105[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_118:
        v107 = 0;
        v106 = 0;
        v108 = 0;
        v109 = 0;
        v111 = 0;
        v110 = 0;
        v112 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v436 = v338;
      BYTE8(v436) = 0;
      *(_QWORD *)&v437 = v344;
      *((_QWORD *)&v437 + 1) = v107;
      *(_QWORD *)&v438 = v106;
      *((_QWORD *)&v438 + 1) = v108;
      *(_QWORD *)&v439 = v109;
      *((_QWORD *)&v439 + 1) = v111;
      *(_QWORD *)&v440 = v110;
      *((_QWORD *)&v440 + 1) = v112;
      v291 = v108;
      v295 = v106;
      v284 = v110;
      if (v308 && REBindPointBoundComponent())
      {
        v206 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v207 = swift_dynamicCastClassUnconditional();
LABEL_123:
          v208 = v207;
          goto LABEL_125;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v268 = specialized static Entity.entityInfoType(_:)(v206);
        if (!v268)
        {
          v207 = makeEntity(for:)(v206);
          goto LABEL_123;
        }
        v208 = (*(uint64_t (**)(void))(v268 + 232))();
        v269 = *(_QWORD *)(v208 + 16);
        swift_retain();
        MEMORY[0x22076D160](v269, 0);
        *(_QWORD *)(v208 + 16) = v206;
        MEMORY[0x22076D160](v206, v208);
        swift_release();
      }
      else
      {
        v208 = 0;
      }
LABEL_125:
      specialized ActionEventData.action<A>()(v361, v352, (uint64_t)&v429);
      v209 = v433;
      if (v433)
      {
        v210 = v434;
        v211 = v432;
        v212 = v431;
        v355 = v107;
        v365 = v111;
        v213 = v430;
        v214 = v429;
        v215 = v435;
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v214, v213, v212, v211, v209);
        v216 = specialized ActionEventData.parameter<A>(type:)(a9);
        v371 = v214;
        v372 = v213;
        v217 = v33;
        v373 = v212 & 1;
        v218 = v32;
        v374 = v211;
        v375 = v209;
        v376 = v210;
        v377 = v215 & 1;
        v277 = v216 & 1;
        v378 = v216 & 1;
        v370 = v301;
        v379 = v208;
        v380 = v315;
        v381 = v217;
        v382 = v218;
        v384 = 0;
        v385 = 0.0;
        v383 = Strong;
        v386 = 1;
        v387 = v323;
        v388 = 0;
        v389 = v328;
        v390 = 0;
        v393 = v438;
        v394 = v439;
        v395 = v440;
        v391 = v436;
        v392 = v437;
        v396 = v331;
        swift_retain();
        swift_retain();
        a5(&v370);
        outlined consume of SetEntityPropertyAction<Transform>?(v214, v213, v212, v211, v209);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v397 = v301;
        v398 = v214;
        v399 = v213;
        v400 = v212 & 1;
        v401 = v211;
        v402 = v209;
        v403 = v210;
        v404 = v215 & 1;
        v405 = v277;
        v406 = v208;
        v407 = v315;
        v408 = v217;
        v409 = v218;
        v412 = 0.0;
        v410 = Strong;
        v411 = 0;
        v413 = 1;
        v414 = v323;
        v415 = 0;
        v416 = v328;
        v417 = 0;
        v418 = v338;
        v419 = 0;
        v420 = v344;
        v421 = v355;
        v422 = v295;
        v423 = v291;
        v424 = v109;
        v425 = v365;
        v426 = v284;
        v178 = v112;
        goto LABEL_127;
      }
      goto LABEL_171;
    case 16:
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v345 = *(_QWORD *)(a2 + 32);
      v348 = *(_QWORD *)(a2 + 40);
      v332 = *(_QWORD *)(a2 + 56);
      v339 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v113 = specialized static Entity.entityInfoType(_:)(v34);
        if (v113)
        {
          v114 = (*(uint64_t (**)(void))(v113 + 232))();
          v115 = *(_QWORD *)(v114 + 16);
          swift_retain();
          MEMORY[0x22076D160](v115, 0);
          *(_QWORD *)(v114 + 16) = v34;
          MEMORY[0x22076D160](v34, v114);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v116 = swift_allocObject();
      swift_weakInit();
      v329 = v116;
      *(_QWORD *)(v116 + 16) = v35;
      swift_beginAccess();
      swift_weakAssign();
      v117 = String.init(cString:)();
      v119 = v118;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v120 = static AnimationResource.codableActionTypeMap;
      v353 = a8;
      v362 = a7;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_130;
      swift_bridgeObjectRetain();
      v121 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v119);
      if ((v122 & 1) != 0)
      {
        v123 = (uint64_t *)(*(_QWORD *)(v120 + 56) + 56 * v121);
        v125 = *v123;
        v124 = v123[1];
        v126 = v123[2];
        v127 = v123[3];
        v129 = v123[4];
        v128 = v123[5];
        v130 = v123[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_130:
        v125 = 0;
        v124 = 0;
        v126 = 0;
        v127 = 0;
        v129 = 0;
        v128 = 0;
        v130 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v436 = 0;
      BYTE8(v436) = 0;
      *(_QWORD *)&v437 = v348;
      *((_QWORD *)&v437 + 1) = v125;
      *(_QWORD *)&v438 = v124;
      *((_QWORD *)&v438 + 1) = v126;
      *(_QWORD *)&v439 = v127;
      *((_QWORD *)&v439 + 1) = v129;
      *(_QWORD *)&v440 = v128;
      *((_QWORD *)&v440 + 1) = v130;
      v317 = v126;
      v324 = v124;
      v303 = v129;
      v310 = v127;
      v292 = v130;
      v296 = v128;
      if (!v332 || !REBindPointBoundComponent())
        goto LABEL_143;
      v220 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_141;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_190;
      __break(1u);
LABEL_136:
      swift_bridgeObjectRelease();
LABEL_137:
      v125 = 0;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0;
      v145 = 0;
      v147 = 0;
LABEL_138:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v436 = 0;
      BYTE8(v436) = 0;
      *(_QWORD *)&v437 = v348;
      *((_QWORD *)&v437 + 1) = v125;
      *(_QWORD *)&v438 = v142;
      *((_QWORD *)&v438 + 1) = v143;
      *(_QWORD *)&v439 = v144;
      *((_QWORD *)&v439 + 1) = v146;
      *(_QWORD *)&v440 = v145;
      *((_QWORD *)&v440 + 1) = v147;
      v317 = v143;
      v324 = v142;
      v303 = v146;
      v310 = v144;
      v292 = v147;
      v296 = v145;
      if (v332 && REBindPointBoundComponent())
      {
        v220 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
LABEL_141:
          type metadata accessor for Entity();
          v221 = swift_dynamicCastClassUnconditional();
LABEL_142:
          v222 = v221;
          goto LABEL_144;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
LABEL_190:
        v270 = specialized static Entity.entityInfoType(_:)(v220);
        if (!v270)
        {
          v221 = makeEntity(for:)(v220);
          goto LABEL_142;
        }
        v222 = (*(uint64_t (**)(void))(v270 + 232))();
        v271 = *(_QWORD *)(v222 + 16);
        swift_retain();
        MEMORY[0x22076D160](v271, 0);
        *(_QWORD *)(v222 + 16) = v220;
        MEMORY[0x22076D160](v220, v222);
        swift_release();
      }
      else
      {
LABEL_143:
        v222 = 0;
      }
LABEL_144:
      specialized ActionEventData.action<A>()(v362, v353, (uint64_t)&v429);
      v223 = v433;
      if (v433)
      {
        v366 = v125;
        v224 = v434;
        v225 = v432;
        v226 = v431;
        v227 = v430;
        v228 = v429;
        v371 = v429;
        v372 = v430;
        v356 = v431 & 1;
        v373 = v431 & 1;
        v374 = v432;
        v375 = v433;
        v376 = v434;
        v334 = v435 & 1;
        v377 = v435 & 1;
        v378 = 1;
        v370 = v329;
        v379 = v222;
        v380 = 0;
        v381 = 0.0;
        v382 = 0.0;
        v384 = 0;
        v385 = 0.0;
        v383 = Strong;
        v386 = 1;
        v387 = v345;
        v388 = 0;
        v389 = 0;
        v390 = 1;
        v393 = v438;
        v394 = v439;
        v395 = v440;
        v391 = v436;
        v392 = v437;
        v396 = v339;
        swift_retain();
        swift_retain();
        outlined copy of SetEntityPropertyAction<Transform>?(v228, v227, v226, v225, v223);
        swift_retain();
        a5(&v370);
        outlined consume of SetEntityPropertyAction<Transform>?(v228, v227, v226, v225, v223);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v397 = v329;
        v398 = v228;
        v399 = v227;
        v400 = v356;
        v401 = v225;
        v402 = v223;
        v403 = v224;
        v404 = v334;
        v405 = 1;
        v406 = v222;
        v407 = 0;
        v409 = 0.0;
        v408 = 0.0;
        v412 = 0.0;
        v410 = Strong;
        v411 = 0;
        v413 = 1;
        v414 = v345;
        v415 = 0;
        v416 = 0;
        v417 = 1;
        v418 = 0;
        v419 = 0;
        v420 = v348;
        v421 = v366;
        v422 = v324;
        v423 = v317;
        v424 = v310;
        v425 = v303;
        v426 = v296;
        v427 = v292;
        v219 = v339;
        goto LABEL_170;
      }
      goto LABEL_171;
    case 32:
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      v345 = *(_QWORD *)(a2 + 32);
      v348 = *(_QWORD *)(a2 + 40);
      v332 = *(_QWORD *)(a2 + 56);
      v339 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v131 = specialized static Entity.entityInfoType(_:)(v36);
        if (v131)
        {
          v132 = (*(uint64_t (**)(void))(v131 + 232))();
          v133 = *(_QWORD *)(v132 + 16);
          swift_retain();
          MEMORY[0x22076D160](v133, 0);
          *(_QWORD *)(v132 + 16) = v36;
          MEMORY[0x22076D160](v36, v132);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v36);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v134 = swift_allocObject();
      swift_weakInit();
      v329 = v134;
      *(_QWORD *)(v134 + 16) = v37;
      swift_beginAccess();
      swift_weakAssign();
      v135 = String.init(cString:)();
      v137 = v136;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v138 = static AnimationResource.codableActionTypeMap;
      v353 = a8;
      v362 = a7;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_137;
      swift_bridgeObjectRetain();
      v139 = specialized __RawDictionaryStorage.find<A>(_:)(v135, v137);
      if ((v140 & 1) == 0)
        goto LABEL_136;
      v141 = (uint64_t *)(*(_QWORD *)(v138 + 56) + 56 * v139);
      v125 = *v141;
      v142 = v141[1];
      v143 = v141[2];
      v144 = v141[3];
      v146 = v141[4];
      v145 = v141[5];
      v147 = v141[6];
      swift_bridgeObjectRelease();
      goto LABEL_138;
    case 64:
      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v347 = *(_QWORD *)(a2 + 24);
      v40 = *(_QWORD *)(a2 + 40);
      v320 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v148 = specialized static Entity.entityInfoType(_:)(v38);
        if (v148)
        {
          v149 = (*(uint64_t (**)(void))(v148 + 232))();
          v150 = *(_QWORD *)(v149 + 16);
          swift_retain();
          MEMORY[0x22076D160](v150, 0);
          *(_QWORD *)(v149 + 16) = v38;
          MEMORY[0x22076D160](v38, v149);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v151 = swift_allocObject();
      swift_weakInit();
      v316 = v151;
      *(_QWORD *)(v151 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      if (v40 && REBindPointBoundComponent())
      {
        v152 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v153 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v154 = v153;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v260 = specialized static Entity.entityInfoType(_:)(v152);
        if (!v260)
        {
          v153 = makeEntity(for:)(v152);
          goto LABEL_77;
        }
        v154 = (*(uint64_t (**)(void))(v260 + 232))();
        v261 = *(_QWORD *)(v154 + 16);
        swift_retain();
        MEMORY[0x22076D160](v261, 0);
        *(_QWORD *)(v154 + 16) = v152;
        MEMORY[0x22076D160](v152, v154);
        swift_release();
      }
      else
      {
        v154 = 0;
      }
LABEL_79:
      v155 = String.init(cString:)();
      v157 = v156;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v158 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v159 = specialized __RawDictionaryStorage.find<A>(_:)(v155, v157);
        if ((v160 & 1) != 0)
        {
          v161 = (uint64_t *)(*(_QWORD *)(v158 + 56) + 56 * v159);
          v162 = *v161;
          v163 = v161[1];
          v164 = v161[2];
          v340 = v161[4];
          v346 = v161[3];
          v330 = v161[6];
          v333 = v161[5];
          swift_bridgeObjectRelease();
LABEL_149:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v436 = 0;
          BYTE8(v436) = 0;
          *(_QWORD *)&v437 = v347;
          *((_QWORD *)&v437 + 1) = v162;
          *(_QWORD *)&v438 = v163;
          *((_QWORD *)&v438 + 1) = v164;
          v311 = v164;
          *(_QWORD *)&v439 = v346;
          *((_QWORD *)&v439 + 1) = v340;
          *(_QWORD *)&v440 = v333;
          *((_QWORD *)&v440 + 1) = v330;
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v429);
          v229 = v433;
          if (!v433)
            goto LABEL_171;
          v357 = v163;
          v367 = v162;
          v230 = v154;
          v231 = v434;
          v232 = v432;
          v233 = v431;
          v234 = v430;
          v235 = v429;
          v371 = v429;
          v372 = v430;
          v304 = v431 & 1;
          v373 = v431 & 1;
          v374 = v432;
          v375 = v433;
          v376 = v434;
          v297 = v435 & 1;
          v377 = v435 & 1;
          v378 = 1;
          v370 = v316;
          v379 = v230;
          v380 = 0;
          v381 = 0.0;
          v382 = 0.0;
          v384 = 0;
          v385 = 0.0;
          v383 = Strong;
          v386 = 1;
          v387 = 0;
          v388 = 1;
          v389 = 0;
          v390 = 1;
          v393 = v438;
          v394 = v439;
          v395 = v440;
          v391 = v436;
          v392 = v437;
          v396 = v320;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v235, v234, v233, v232, v229);
          swift_retain();
          a5(&v370);
          outlined consume of SetEntityPropertyAction<Transform>?(v235, v234, v233, v232, v229);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v397 = v316;
          v398 = v235;
          v399 = v234;
          v400 = v304;
          v401 = v232;
          v402 = v229;
          v403 = v231;
          v404 = v297;
          v405 = 1;
          v406 = v230;
          v407 = 0;
          v409 = 0.0;
          v408 = 0.0;
          v412 = 0.0;
          v410 = Strong;
          goto LABEL_169;
        }
        swift_bridgeObjectRelease();
      }
      v162 = 0;
      v163 = 0;
      v164 = 0;
      v340 = 0;
      v346 = 0;
      v330 = 0;
      v333 = 0;
      goto LABEL_149;
    default:
      if (a4 != 128)
        goto LABEL_172;
      v18 = *(_QWORD *)a2;
      v19 = *(_QWORD *)(a2 + 8);
      v347 = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 40);
      v320 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v236 = specialized static Entity.entityInfoType(_:)(v18);
        if (v236)
        {
          v237 = (*(uint64_t (**)(void))(v236 + 232))();
          v238 = *(_QWORD *)(v237 + 16);
          swift_retain();
          MEMORY[0x22076D160](v238, 0);
          *(_QWORD *)(v237 + 16) = v18;
          MEMORY[0x22076D160](v18, v237);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v18);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v239 = swift_allocObject();
      swift_weakInit();
      v318 = v239;
      *(_QWORD *)(v239 + 16) = v19;
      swift_beginAccess();
      swift_weakAssign();
      if (v20 && REBindPointBoundComponent())
      {
        v240 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v241 = swift_dynamicCastClassUnconditional();
LABEL_158:
          v242 = v241;
          goto LABEL_160;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          JUMPOUT(0x21BB4321CLL);
        }
        v272 = specialized static Entity.entityInfoType(_:)(v240);
        if (!v272)
        {
          v241 = makeEntity(for:)(v240);
          goto LABEL_158;
        }
        v242 = (*(uint64_t (**)(void))(v272 + 232))();
        v273 = *(_QWORD *)(v242 + 16);
        swift_retain();
        MEMORY[0x22076D160](v273, 0);
        *(_QWORD *)(v242 + 16) = v240;
        MEMORY[0x22076D160](v240, v242);
        swift_release();
      }
      else
      {
        v242 = 0;
      }
LABEL_160:
      v243 = String.init(cString:)();
      v245 = v244;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v246 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v247 = specialized __RawDictionaryStorage.find<A>(_:)(v243, v245);
        if ((v248 & 1) != 0)
        {
          v249 = (uint64_t *)(*(_QWORD *)(v246 + 56) + 56 * v247);
          v250 = *v249;
          v251 = v249[1];
          v252 = v249[2];
          v340 = v249[4];
          v346 = v249[3];
          v330 = v249[6];
          v333 = v249[5];
          swift_bridgeObjectRelease();
LABEL_167:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v436 = 0;
          BYTE8(v436) = 0;
          *(_QWORD *)&v437 = v347;
          *((_QWORD *)&v437 + 1) = v250;
          *(_QWORD *)&v438 = v251;
          *((_QWORD *)&v438 + 1) = v252;
          v311 = v252;
          *(_QWORD *)&v439 = v346;
          *((_QWORD *)&v439 + 1) = v340;
          *(_QWORD *)&v440 = v333;
          *((_QWORD *)&v440 + 1) = v330;
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v429);
          v253 = v433;
          if (!v433)
            goto LABEL_171;
          v357 = v251;
          v367 = v250;
          v254 = v242;
          v255 = v434;
          v256 = v432;
          v257 = v431;
          v258 = v430;
          v259 = v429;
          v371 = v429;
          v372 = v430;
          v305 = v431 & 1;
          v373 = v431 & 1;
          v374 = v432;
          v375 = v433;
          v376 = v434;
          v298 = v435 & 1;
          v377 = v435 & 1;
          v378 = 1;
          v370 = v318;
          v379 = v254;
          v380 = 0;
          v381 = 0.0;
          v382 = 0.0;
          v384 = 0;
          v385 = 0.0;
          v383 = Strong;
          v386 = 1;
          v387 = 0;
          v388 = 1;
          v389 = 0;
          v390 = 1;
          v393 = v438;
          v394 = v439;
          v395 = v440;
          v391 = v436;
          v392 = v437;
          v396 = v320;
          swift_retain();
          swift_retain();
          outlined copy of SetEntityPropertyAction<Transform>?(v259, v258, v257, v256, v253);
          swift_retain();
          a5(&v370);
          swift_release();
          outlined consume of SetEntityPropertyAction<Transform>?(v259, v258, v257, v256, v253);
          swift_release();
          swift_release();
          swift_release();
          v397 = v318;
          v398 = v259;
          v399 = v258;
          v400 = v305;
          v401 = v256;
          v402 = v253;
          v403 = v255;
          v404 = v298;
          v405 = 1;
          v406 = v254;
          v407 = 0;
          v409 = 0.0;
          v408 = 0.0;
          v412 = 0.0;
          v410 = Strong;
LABEL_169:
          v411 = 0;
          v413 = 1;
          v414 = 0;
          v415 = 1;
          v416 = 0;
          v417 = 1;
          v418 = 0;
          v419 = 0;
          v420 = v347;
          v421 = v367;
          v422 = v357;
          v423 = v311;
          v424 = v346;
          v425 = v340;
          v426 = v333;
          v427 = v330;
          v219 = v320;
          goto LABEL_170;
        }
        swift_bridgeObjectRelease();
      }
      v250 = 0;
      v251 = 0;
      v252 = 0;
      v340 = 0;
      v346 = 0;
      v330 = 0;
      v333 = 0;
      goto LABEL_167;
  }
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *), uint64_t a6, void (*a7)(_QWORD *__return_ptr, uint64_t), uint64_t *a8, unsigned int (*a9)(_BYTE *), void (*a10)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a11, void (*a12)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t Entity;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  double v200;
  double v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  double v207;
  double v208;
  double v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  double v214;
  double v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  double v221;
  double v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  char v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  char v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void (*v276)(_QWORD *);
  void (*v277)(_QWORD *__return_ptr, uint64_t);
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t Strong;
  _QWORD v284[2];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  char v295;
  uint64_t v296;
  char v297;
  double v298;
  double v299;
  uint64_t v300;
  uint64_t v301;
  double v302;
  char v303;
  unint64_t v304;
  char v305;
  unint64_t v306;
  char v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  char v335;
  uint64_t v336;
  char v337;
  double v338;
  double v339;
  uint64_t v340;
  uint64_t v341;
  double v342;
  char v343;
  unint64_t v344;
  char v345;
  unint64_t v346;
  char v347;
  uint64_t v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD v359[20];
  _QWORD v360[20];
  _BYTE v361[168];
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  v276 = a5;
  v280 = a8;
  v277 = a7;
  switch(a4)
  {
    case 1:
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v261 = *(_QWORD *)(a2 + 32);
      v267 = *(_QWORD *)(a2 + 40);
      v19 = *(_QWORD *)(a2 + 64);
      v241 = *(_QWORD *)(a2 + 56);
      v245 = *(_QWORD *)(a2 + 48);
      v20 = *(float *)(a2 + 72);
      v21 = *(float *)(a2 + 76);
      v230 = *(_BYTE *)(a2 + 80);
      v233 = *(_QWORD *)(a2 + 96);
      v237 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v51 = specialized static Entity.entityInfoType(_:)(v17);
        if (v51)
        {
          v52 = (*(uint64_t (**)(void))(v51 + 232))();
          v53 = *(_QWORD *)(v52 + 16);
          swift_retain();
          MEMORY[0x22076D160](v53, 0);
          *(_QWORD *)(v52 + 16) = v17;
          MEMORY[0x22076D160](v17, v52);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v17);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v54 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v54 + 16) = v18;
        swift_beginAccess();
        swift_weakAssign();
        v55 = String.init(cString:)();
        v57 = v56;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v58 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v59 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v57);
          if ((v60 & 1) != 0)
          {
            v61 = (uint64_t *)(*(_QWORD *)(v58 + 56) + 56 * v59);
            v62 = v61[2];
            v248 = *v61;
            v257 = v61[1];
            v64 = v61[3];
            v63 = v61[4];
            v66 = v61[5];
            v65 = v61[6];
            swift_bridgeObjectRelease();
LABEL_86:
            swift_endAccess();
            v165 = swift_bridgeObjectRelease();
            *(_QWORD *)&v362 = v261;
            BYTE8(v362) = 0;
            *(_QWORD *)&v363 = v267;
            *((_QWORD *)&v363 + 1) = v248;
            *(_QWORD *)&v364 = v257;
            *((_QWORD *)&v364 + 1) = v62;
            *(_QWORD *)&v365 = v64;
            *((_QWORD *)&v365 + 1) = v63;
            v228 = v62;
            *(_QWORD *)&v366 = v66;
            *((_QWORD *)&v366 + 1) = v65;
            if (!v19)
              goto LABEL_161;
            v165 = REBindPointBoundComponent();
            if (!v165)
            {
              v19 = 0;
              goto LABEL_161;
            }
            Entity = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v165 = swift_dynamicCastClassUnconditional();
LABEL_90:
              v19 = v165;
              goto LABEL_161;
            }
            if ((REEntityIsBeingDestroyed() & 1) == 0)
            {
              v197 = specialized static Entity.entityInfoType(_:)(Entity);
              if (!v197)
              {
                v165 = makeEntity(for:)(Entity);
                goto LABEL_90;
              }
              v19 = (*(uint64_t (**)(void))(v197 + 232))();
              v198 = *(_QWORD *)(v19 + 16);
              swift_retain();
              MEMORY[0x22076D160](v198, 0);
              *(_QWORD *)(v19 + 16) = Entity;
              MEMORY[0x22076D160](Entity, v19);
              v165 = swift_release();
LABEL_161:
              v277(v359, v165);
              outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
              outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
              if (a9(v361) != 1)
              {
                outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
                swift_retain();
                outlined retain of IKRig.Constraint?(v360, a10);
                v199 = specialized ActionEventData.parameter<A>(type:)(a11);
                v200 = v20;
                v201 = v21;
                v291 = v320;
                v292 = v321;
                v293 = v322;
                v294 = v323;
                v287 = v316;
                v288 = v317;
                v289 = v318;
                v290 = v319;
                v285 = v314;
                v286 = v315;
                v279 = v66;
                v202 = v199 & 1;
                v295 = v199 & 1;
                v284[0] = v54;
                v296 = v19;
                v297 = v230;
                v298 = v200;
                v299 = v201;
                v300 = Strong;
                v301 = v241;
                v302 = -1.0;
                v303 = 0;
                v305 = 0;
                v304 = v237;
                v278 = v65;
                v306 = v233;
                v307 = 0;
                v310 = v364;
                v311 = v365;
                v312 = v366;
                v308 = v362;
                v309 = v363;
                v313 = v245;
                swift_retain();
                swift_retain();
                v276(v284);
                outlined retain of IKRig.Constraint?(v360, a12);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v324 = v54;
                v331 = v320;
                v332 = v321;
                v333 = v322;
                v334 = v323;
                v327 = v316;
                v328 = v317;
                v329 = v318;
                v330 = v319;
                v325 = v314;
                v326 = v315;
                v335 = v202;
                v336 = v19;
                v337 = v230;
                v338 = v200;
                v339 = v201;
                v340 = Strong;
                v341 = v241;
                v342 = -1.0;
                v343 = 0;
                v345 = 0;
                v344 = v237;
                v346 = v233;
                v347 = 0;
                v349 = 0;
                v348 = v261;
                v350 = v267;
                v351 = v248;
                v352 = v257;
                v353 = v228;
                v354 = v64;
                v203 = v63;
LABEL_181:
                v355 = v203;
                v356 = v279;
                v217 = v278;
                goto LABEL_182;
              }
              goto LABEL_188;
            }
            goto LABEL_221;
          }
          swift_bridgeObjectRelease();
        }
        v248 = 0;
        v257 = 0;
        v62 = 0;
        v64 = 0;
        v63 = 0;
        v66 = 0;
        v65 = 0;
        goto LABEL_86;
      }
      __break(1u);
      goto LABEL_213;
    case 2:
      v26 = *(_QWORD *)a2;
      v27 = *(_QWORD *)(a2 + 8);
      v268 = *(_QWORD *)(a2 + 32);
      v262 = *(_QWORD *)(a2 + 40);
      v28 = *(float *)(a2 + 56);
      v242 = *(_QWORD *)(a2 + 64);
      v246 = *(_QWORD *)(a2 + 48);
      v29 = *(_QWORD *)(a2 + 80);
      v238 = *(_QWORD *)(a2 + 72);
      v30 = *(_QWORD *)(a2 + 88);
      v31 = *(float *)(a2 + 96);
      v32 = *(float *)(a2 + 100);
      v234 = *(_BYTE *)(a2 + 104);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v67 = specialized static Entity.entityInfoType(_:)(v26);
        if (v67)
        {
          v68 = (*(uint64_t (**)(void))(v67 + 232))();
          v69 = *(_QWORD *)(v68 + 16);
          swift_retain();
          MEMORY[0x22076D160](v69, 0);
          *(_QWORD *)(v68 + 16) = v26;
          MEMORY[0x22076D160](v26, v68);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v26);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v70 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v70 + 16) = v27;
        swift_beginAccess();
        swift_weakAssign();
        v71 = String.init(cString:)();
        v73 = v72;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        v231 = v29;
        swift_beginAccess();
        v74 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v75 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v73);
          if ((v76 & 1) != 0)
          {
            v77 = (uint64_t *)(*(_QWORD *)(v74 + 56) + 56 * v75);
            v79 = *v77;
            v78 = v77[1];
            v80 = v77[2];
            v258 = v77[3];
            v82 = v77[4];
            v81 = v77[5];
            v83 = v77[6];
            swift_bridgeObjectRelease();
            goto LABEL_93;
          }
          swift_bridgeObjectRelease();
        }
        v79 = 0;
        v78 = 0;
        v80 = 0;
        v258 = 0;
        v82 = 0;
        v81 = 0;
        v83 = 0;
LABEL_93:
        swift_endAccess();
        v167 = swift_bridgeObjectRelease();
        *(_QWORD *)&v362 = v268;
        BYTE8(v362) = 0;
        *(_QWORD *)&v363 = v262;
        *((_QWORD *)&v363 + 1) = v79;
        *(_QWORD *)&v364 = v78;
        *((_QWORD *)&v364 + 1) = v80;
        *(_QWORD *)&v365 = v258;
        *((_QWORD *)&v365 + 1) = v82;
        *(_QWORD *)&v366 = v81;
        *((_QWORD *)&v366 + 1) = v83;
        v229 = v81;
        if (v30)
        {
          v167 = REBindPointBoundComponent();
          if (v167)
          {
            v251 = v83;
            v168 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v167 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_222:
                __break(1u);
                goto LABEL_223;
              }
              v204 = specialized static Entity.entityInfoType(_:)(v168);
              if (v204)
              {
                v30 = (*(uint64_t (**)(void))(v204 + 232))();
                v205 = *(_QWORD *)(v30 + 16);
                swift_retain();
                MEMORY[0x22076D160](v205, 0);
                *(_QWORD *)(v30 + 16) = v168;
                MEMORY[0x22076D160](v168, v30);
                v167 = swift_release();
                goto LABEL_166;
              }
              v167 = makeEntity(for:)(v168);
            }
            v30 = v167;
LABEL_166:
            v83 = v251;
            goto LABEL_167;
          }
          v30 = 0;
        }
LABEL_167:
        v277(v359, v167);
        outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
        outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
        if (a9(v361) == 1)
          goto LABEL_188;
        outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
        swift_retain();
        outlined retain of IKRig.Constraint?(v360, a10);
        v206 = specialized ActionEventData.parameter<A>(type:)(a11);
        v207 = v31;
        v208 = v32;
        v209 = v28;
        v291 = v320;
        v292 = v321;
        v293 = v322;
        v294 = v323;
        v287 = v316;
        v288 = v317;
        v289 = v318;
        v290 = v319;
        v285 = v314;
        v286 = v315;
        v253 = v83;
        v210 = v206 & 1;
        v295 = v206 & 1;
        v284[0] = v70;
        v296 = v30;
        v297 = v234;
        v298 = v207;
        v299 = v208;
        v281 = v79;
        v300 = Strong;
        v301 = v238;
        v302 = v209;
        v303 = 0;
        v305 = 0;
        v304 = v246;
        v306 = v242;
        v307 = 0;
        v310 = v364;
        v311 = v365;
        v312 = v366;
        v308 = v362;
        v309 = v363;
        v177 = v231;
        v313 = v231;
        swift_retain();
        swift_retain();
        v276(v284);
        outlined retain of IKRig.Constraint?(v360, a12);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v324 = v70;
        v331 = v320;
        v332 = v321;
        v333 = v322;
        v334 = v323;
        v327 = v316;
        v328 = v317;
        v329 = v318;
        v330 = v319;
        v325 = v314;
        v326 = v315;
        v335 = v210;
        v336 = v30;
        v337 = v234;
        v338 = v207;
        v339 = v208;
        v340 = Strong;
        v341 = v238;
        v342 = v209;
        v343 = 0;
        v345 = 0;
        v344 = v246;
        v346 = v242;
        v347 = 0;
        v349 = 0;
        v348 = v268;
        v350 = v262;
        v351 = v281;
        v352 = v78;
        v353 = v80;
        v354 = v258;
        v355 = v82;
        v356 = v229;
        v357 = v253;
LABEL_191:
        v358 = v177;
        goto LABEL_192;
      }
LABEL_213:
      __break(1u);
      goto LABEL_214;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_189;
    case 4:
      v33 = *(_QWORD *)a2;
      v34 = *(_QWORD *)(a2 + 8);
      v263 = *(_QWORD *)(a2 + 32);
      v269 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 64);
      v243 = *(_QWORD *)(a2 + 56);
      v245 = *(_QWORD *)(a2 + 48);
      v36 = *(float *)(a2 + 72);
      v37 = *(float *)(a2 + 76);
      v239 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      v84 = specialized static Entity.entityInfoType(_:)(v33);
      if (v84)
      {
        v85 = (*(uint64_t (**)(void))(v84 + 232))();
        v86 = *(_QWORD *)(v85 + 16);
        swift_retain();
        MEMORY[0x22076D160](v86, 0);
        *(_QWORD *)(v85 + 16) = v33;
        MEMORY[0x22076D160](v33, v85);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v33);
      }
LABEL_41:
      type metadata accessor for AnimationPlaybackController();
      v87 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v87 + 16) = v34;
      swift_beginAccess();
      swift_weakAssign();
      v88 = String.init(cString:)();
      v90 = v89;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v91 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v92 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v90);
        if ((v93 & 1) != 0)
        {
          v94 = (uint64_t *)(*(_QWORD *)(v91 + 56) + 56 * v92);
          v95 = v94[2];
          v249 = v94[1];
          v259 = *v94;
          v97 = v94[3];
          v96 = v94[4];
          v99 = v94[5];
          v98 = v94[6];
          swift_bridgeObjectRelease();
          goto LABEL_100;
        }
        swift_bridgeObjectRelease();
      }
      v249 = 0;
      v259 = 0;
      v95 = 0;
      v97 = 0;
      v96 = 0;
      v99 = 0;
      v98 = 0;
LABEL_100:
      swift_endAccess();
      v169 = swift_bridgeObjectRelease();
      *(_QWORD *)&v362 = v263;
      BYTE8(v362) = 0;
      *(_QWORD *)&v363 = v269;
      *((_QWORD *)&v363 + 1) = v259;
      *(_QWORD *)&v364 = v249;
      *((_QWORD *)&v364 + 1) = v95;
      *(_QWORD *)&v365 = v97;
      *((_QWORD *)&v365 + 1) = v96;
      v236 = v95;
      *(_QWORD *)&v366 = v99;
      *((_QWORD *)&v366 + 1) = v98;
      v170 = v97;
      if (!v35)
        goto LABEL_173;
      v169 = REBindPointBoundComponent();
      if (!v169)
      {
        v35 = 0;
        goto LABEL_173;
      }
      v171 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v169 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_223:
          __break(1u);
          goto LABEL_224;
        }
        v211 = specialized static Entity.entityInfoType(_:)(v171);
        if (v211)
        {
          v35 = (*(uint64_t (**)(void))(v211 + 232))();
          v212 = *(_QWORD *)(v35 + 16);
          swift_retain();
          MEMORY[0x22076D160](v212, 0);
          *(_QWORD *)(v35 + 16) = v171;
          MEMORY[0x22076D160](v171, v35);
          v169 = swift_release();
          goto LABEL_172;
        }
        v169 = makeEntity(for:)(v171);
      }
      v35 = v169;
LABEL_172:
      v170 = v97;
LABEL_173:
      v277(v359, v169);
      outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
      outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
      if (a9(v361) == 1)
        goto LABEL_188;
      outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
      swift_retain();
      outlined retain of IKRig.Constraint?(v360, a10);
      v213 = specialized ActionEventData.parameter<A>(type:)(a11);
      v214 = v36;
      v215 = v37;
      v291 = v320;
      v292 = v321;
      v293 = v322;
      v294 = v323;
      v287 = v316;
      v288 = v317;
      v289 = v318;
      v290 = v319;
      v285 = v314;
      v286 = v315;
      v216 = v213 & 1;
      v295 = v213 & 1;
      v284[0] = v87;
      v296 = v35;
      v297 = v239;
      v298 = v214;
      v299 = v215;
      v300 = Strong;
      v301 = v243;
      v302 = -1.0;
      v303 = 0;
      v305 = 0;
      v304 = 0xBFF0000000000000;
      v306 = 0xBFF0000000000000;
      v307 = 0;
      v310 = v364;
      v311 = v365;
      v312 = v366;
      v308 = v362;
      v309 = v363;
      v313 = v245;
      swift_retain();
      swift_retain();
      v276(v284);
      outlined retain of IKRig.Constraint?(v360, a12);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v324 = v87;
      v331 = v320;
      v332 = v321;
      v333 = v322;
      v334 = v323;
      v327 = v316;
      v328 = v317;
      v329 = v318;
      v330 = v319;
      v325 = v314;
      v326 = v315;
      v335 = v216;
      v336 = v35;
      v337 = v239;
      v338 = v214;
      v339 = v215;
      v340 = Strong;
      v341 = v243;
      v342 = -1.0;
      v343 = 0;
      v345 = 0;
      v344 = 0xBFF0000000000000;
      v346 = 0xBFF0000000000000;
      v347 = 0;
      v349 = 0;
      v348 = v263;
      v350 = v269;
      v351 = v259;
      v352 = v249;
      v353 = v236;
      v354 = v170;
      v355 = v96;
      v356 = v99;
      v217 = v98;
LABEL_182:
      v357 = v217;
      v358 = v245;
LABEL_192:
      outlined release of ActionEvent<FromToByAction<simd_quatf>>((uint64_t)&v324);
      return 0;
    case 8:
      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v264 = *(_QWORD *)(a2 + 32);
      v270 = *(_QWORD *)(a2 + 40);
      v40 = *(_QWORD *)(a2 + 56);
      v41 = *(float *)(a2 + 64);
      v42 = *(float *)(a2 + 68);
      v235 = *(_BYTE *)(a2 + 72);
      v244 = *(_QWORD *)(a2 + 80);
      v245 = *(_QWORD *)(a2 + 48);
      v240 = *(_QWORD *)(a2 + 88);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        v100 = specialized static Entity.entityInfoType(_:)(v38);
        if (v100)
        {
          v101 = (*(uint64_t (**)(void))(v100 + 232))();
          v102 = *(_QWORD *)(v101 + 16);
          swift_retain();
          MEMORY[0x22076D160](v102, 0);
          *(_QWORD *)(v101 + 16) = v38;
          MEMORY[0x22076D160](v38, v101);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v38);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v103 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v103 + 16) = v39;
      swift_beginAccess();
      swift_weakAssign();
      v104 = String.init(cString:)();
      v106 = v105;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v107 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_106;
      swift_bridgeObjectRetain();
      v108 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v106);
      if ((v109 & 1) != 0)
      {
        v110 = (uint64_t *)(*(_QWORD *)(v107 + 56) + 56 * v108);
        v111 = v110[2];
        v250 = v110[1];
        v260 = *v110;
        v113 = v110[3];
        v112 = v110[4];
        v115 = v110[5];
        v114 = v110[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_106:
        v250 = 0;
        v260 = 0;
        v111 = 0;
        v113 = 0;
        v112 = 0;
        v115 = 0;
        v114 = 0;
      }
      swift_endAccess();
      v172 = swift_bridgeObjectRelease();
      *(_QWORD *)&v362 = v264;
      BYTE8(v362) = 0;
      *(_QWORD *)&v363 = v270;
      *((_QWORD *)&v363 + 1) = v260;
      *(_QWORD *)&v364 = v250;
      *((_QWORD *)&v364 + 1) = v111;
      *(_QWORD *)&v365 = v113;
      *((_QWORD *)&v365 + 1) = v112;
      v232 = v111;
      *(_QWORD *)&v366 = v115;
      *((_QWORD *)&v366 + 1) = v114;
      if (!v40)
        goto LABEL_178;
      v172 = REBindPointBoundComponent();
      if (v172)
      {
        v173 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v172 = swift_dynamicCastClassUnconditional();
LABEL_111:
          v40 = v172;
          goto LABEL_178;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
        v218 = specialized static Entity.entityInfoType(_:)(v173);
        if (!v218)
        {
          v172 = makeEntity(for:)(v173);
          goto LABEL_111;
        }
        v40 = (*(uint64_t (**)(void))(v218 + 232))();
        v219 = *(_QWORD *)(v40 + 16);
        swift_retain();
        MEMORY[0x22076D160](v219, 0);
        *(_QWORD *)(v40 + 16) = v173;
        MEMORY[0x22076D160](v173, v40);
        v172 = swift_release();
      }
      else
      {
        v40 = 0;
      }
LABEL_178:
      v277(v359, v172);
      outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
      outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
      if (a9(v361) != 1)
      {
        outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
        swift_retain();
        outlined retain of IKRig.Constraint?(v360, a10);
        v220 = specialized ActionEventData.parameter<A>(type:)(a11);
        v221 = v41;
        v222 = v42;
        v291 = v320;
        v292 = v321;
        v293 = v322;
        v294 = v323;
        v287 = v316;
        v288 = v317;
        v289 = v318;
        v290 = v319;
        v285 = v314;
        v286 = v315;
        v279 = v115;
        v223 = v220 & 1;
        v295 = v220 & 1;
        v284[0] = v103;
        v296 = v40;
        v297 = v235;
        v298 = v221;
        v299 = v222;
        v301 = 0;
        v302 = 0.0;
        v300 = Strong;
        v303 = 1;
        v305 = 0;
        v304 = v244;
        v278 = v114;
        v306 = v240;
        v307 = 0;
        v311 = v365;
        v312 = v366;
        v309 = v363;
        v310 = v364;
        v308 = v362;
        v313 = v245;
        swift_retain();
        swift_retain();
        v276(v284);
        outlined retain of IKRig.Constraint?(v360, a12);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v324 = v103;
        v331 = v320;
        v332 = v321;
        v333 = v322;
        v334 = v323;
        v327 = v316;
        v328 = v317;
        v329 = v318;
        v330 = v319;
        v325 = v314;
        v326 = v315;
        v335 = v223;
        v336 = v40;
        v337 = v235;
        v338 = v221;
        v339 = v222;
        v342 = 0.0;
        v340 = Strong;
        v341 = 0;
        v343 = 1;
        v345 = 0;
        v344 = v244;
        v346 = v240;
        v347 = 0;
        v349 = 0;
        v348 = v264;
        v350 = v270;
        v351 = v260;
        v352 = v250;
        v353 = v232;
        v354 = v113;
        v203 = v112;
        goto LABEL_181;
      }
LABEL_188:
      swift_release();
      swift_release();
      swift_release();
LABEL_189:
      swift_release();
      return 0;
    case 16:
      v43 = *(_QWORD *)a2;
      v44 = *(_QWORD *)(a2 + 8);
      v274 = *(_QWORD *)(a2 + 40);
      v45 = *(_QWORD *)(a2 + 56);
      v255 = *(_QWORD *)(a2 + 48);
      v265 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        v116 = specialized static Entity.entityInfoType(_:)(v43);
        if (v116)
        {
          v117 = (*(uint64_t (**)(void))(v116 + 232))();
          v118 = *(_QWORD *)(v117 + 16);
          swift_retain();
          MEMORY[0x22076D160](v118, 0);
          *(_QWORD *)(v117 + 16) = v43;
          MEMORY[0x22076D160](v43, v117);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v43);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v119 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v119 + 16) = v44;
      swift_beginAccess();
      swift_weakAssign();
      v120 = String.init(cString:)();
      v122 = v121;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v123 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_113;
      swift_bridgeObjectRetain();
      v124 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v122);
      if ((v125 & 1) != 0)
      {
        v126 = (uint64_t *)(*(_QWORD *)(v123 + 56) + 56 * v124);
        v127 = *v126;
        v128 = v126[1];
        v130 = v126[2];
        v129 = v126[3];
        v131 = v126[4];
        v132 = v126[5];
        v133 = v126[6];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_113:
        v127 = 0;
        v128 = 0;
        v130 = 0;
        v129 = 0;
        v131 = 0;
        v132 = 0;
        v133 = 0;
      }
      swift_endAccess();
      v174 = swift_bridgeObjectRelease();
      *(_QWORD *)&v362 = 0;
      BYTE8(v362) = 0;
      *(_QWORD *)&v363 = v274;
      *((_QWORD *)&v363 + 1) = v127;
      *(_QWORD *)&v364 = v128;
      *((_QWORD *)&v364 + 1) = v130;
      *(_QWORD *)&v365 = v129;
      *((_QWORD *)&v365 + 1) = v131;
      *(_QWORD *)&v366 = v132;
      *((_QWORD *)&v366 + 1) = v133;
      v252 = v129;
      if (!v45)
        goto LABEL_187;
      v174 = REBindPointBoundComponent();
      if (!v174)
        goto LABEL_126;
      v247 = v133;
      v175 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
        goto LABEL_124;
      if ((REEntityIsBeingDestroyed() & 1) == 0)
        goto LABEL_184;
      __break(1u);
LABEL_119:
      swift_bridgeObjectRelease();
LABEL_120:
      v127 = 0;
      v128 = 0;
      v130 = 0;
      v144 = 0;
      v131 = 0;
      v132 = 0;
      v133 = 0;
LABEL_121:
      swift_endAccess();
      v174 = swift_bridgeObjectRelease();
      *(_QWORD *)&v362 = 0;
      BYTE8(v362) = 0;
      *(_QWORD *)&v363 = v274;
      *((_QWORD *)&v363 + 1) = v127;
      *(_QWORD *)&v364 = v128;
      *((_QWORD *)&v364 + 1) = v130;
      *(_QWORD *)&v365 = v144;
      *((_QWORD *)&v365 + 1) = v131;
      *(_QWORD *)&v366 = v132;
      *((_QWORD *)&v366 + 1) = v133;
      v252 = v144;
      if (!v45)
        goto LABEL_187;
      v174 = REBindPointBoundComponent();
      if (!v174)
      {
LABEL_126:
        v45 = 0;
LABEL_187:
        v277(v359, v174);
        outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
        outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
        if (a9(v361) == 1)
          goto LABEL_188;
        outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
        v291 = v320;
        v292 = v321;
        v293 = v322;
        v294 = v323;
        v287 = v316;
        v288 = v317;
        v289 = v318;
        v290 = v319;
        v285 = v314;
        v286 = v315;
        v282 = v132;
        v295 = 1;
        v284[0] = v119;
        v296 = v45;
        v297 = 0;
        v298 = 0.0;
        v299 = 0.0;
        v301 = 0;
        v302 = 0.0;
        v300 = Strong;
        v303 = 1;
        v305 = 0;
        v177 = v255;
        v304 = v265;
        v306 = 0;
        v307 = 1;
        v311 = v365;
        v312 = v366;
        v309 = v363;
        v310 = v364;
        v308 = v362;
        v313 = v255;
        swift_retain();
        swift_retain();
        outlined retain of IKRig.Constraint?(v360, a10);
        swift_retain();
        v276(v284);
        outlined retain of IKRig.Constraint?(v360, a12);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v324 = v119;
        v331 = v320;
        v332 = v321;
        v333 = v322;
        v334 = v323;
        v327 = v316;
        v328 = v317;
        v329 = v318;
        v330 = v319;
        v325 = v314;
        v326 = v315;
        v335 = 1;
        v336 = v45;
        v337 = 0;
        v339 = 0.0;
        v338 = 0.0;
        v342 = 0.0;
        v340 = Strong;
        v341 = 0;
        v343 = 1;
        v345 = 0;
        v344 = v265;
        v346 = 0;
        v347 = 1;
        v349 = 0;
        v348 = 0;
        v350 = v274;
        v351 = v127;
        v352 = v128;
        v353 = v130;
        v354 = v252;
        v355 = v131;
        v356 = v282;
        v357 = v133;
        goto LABEL_191;
      }
      v247 = v133;
      v175 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
LABEL_124:
        type metadata accessor for Entity();
        v174 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }
LABEL_184:
        v224 = specialized static Entity.entityInfoType(_:)(v175);
        if (v224)
        {
          v45 = (*(uint64_t (**)(void))(v224 + 232))();
          v225 = *(_QWORD *)(v45 + 16);
          swift_retain();
          MEMORY[0x22076D160](v225, 0);
          *(_QWORD *)(v45 + 16) = v175;
          MEMORY[0x22076D160](v175, v45);
          v174 = swift_release();
          goto LABEL_186;
        }
        v174 = makeEntity(for:)(v175);
      }
      v45 = v174;
LABEL_186:
      v133 = v247;
      goto LABEL_187;
    case 32:
      v46 = *(_QWORD *)a2;
      v47 = *(_QWORD *)(a2 + 8);
      v274 = *(_QWORD *)(a2 + 40);
      v45 = *(_QWORD *)(a2 + 56);
      v255 = *(_QWORD *)(a2 + 48);
      v265 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_217:
          __break(1u);
          goto LABEL_218;
        }
        v134 = specialized static Entity.entityInfoType(_:)(v46);
        if (v134)
        {
          v135 = (*(uint64_t (**)(void))(v134 + 232))();
          v136 = *(_QWORD *)(v135 + 16);
          swift_retain();
          MEMORY[0x22076D160](v136, 0);
          *(_QWORD *)(v135 + 16) = v46;
          MEMORY[0x22076D160](v46, v135);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v46);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v119 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v119 + 16) = v47;
      swift_beginAccess();
      swift_weakAssign();
      v137 = String.init(cString:)();
      v139 = v138;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v140 = static AnimationResource.codableActionTypeMap;
      if (!*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        goto LABEL_120;
      swift_bridgeObjectRetain();
      v141 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v139);
      if ((v142 & 1) == 0)
        goto LABEL_119;
      v143 = (uint64_t *)(*(_QWORD *)(v140 + 56) + 56 * v141);
      v127 = *v143;
      v128 = v143[1];
      v130 = v143[2];
      v144 = v143[3];
      v131 = v143[4];
      v132 = v143[5];
      v133 = v143[6];
      swift_bridgeObjectRelease();
      goto LABEL_121;
    case 64:
      v48 = *(_QWORD *)a2;
      v49 = *(_QWORD *)(a2 + 8);
      v275 = *(_QWORD *)(a2 + 24);
      v50 = *(_QWORD *)(a2 + 40);
      v256 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v145 = specialized static Entity.entityInfoType(_:)(v48);
        if (v145)
        {
          v146 = (*(uint64_t (**)(void))(v145 + 232))();
          v147 = *(_QWORD *)(v146 + 16);
          swift_retain();
          MEMORY[0x22076D160](v147, 0);
          *(_QWORD *)(v146 + 16) = v48;
          MEMORY[0x22076D160](v48, v146);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v48);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v148 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v148 + 16) = v49;
      swift_beginAccess();
      swift_weakAssign();
      if (v50 && REBindPointBoundComponent())
      {
        v149 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v150 = swift_dynamicCastClassUnconditional();
LABEL_77:
          v151 = v150;
          goto LABEL_79;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
        v195 = specialized static Entity.entityInfoType(_:)(v149);
        if (!v195)
        {
          v150 = makeEntity(for:)(v149);
          goto LABEL_77;
        }
        v151 = (*(uint64_t (**)(void))(v195 + 232))();
        v196 = *(_QWORD *)(v151 + 16);
        swift_retain();
        MEMORY[0x22076D160](v196, 0);
        *(_QWORD *)(v151 + 16) = v149;
        MEMORY[0x22076D160](v149, v151);
        swift_release();
      }
      else
      {
        v151 = 0;
      }
LABEL_79:
      v152 = String.init(cString:)();
      v154 = v153;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v155 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v156 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v154);
        if ((v157 & 1) != 0)
        {
          v158 = (uint64_t *)(*(_QWORD *)(v155 + 56) + 56 * v156);
          v159 = *v158;
          v160 = v158[1];
          v161 = v158[3];
          v271 = v158[2];
          v162 = v158[4];
          v163 = v158[5];
          v164 = v158[6];
          swift_bridgeObjectRelease();
LABEL_129:
          swift_endAccess();
          v176 = swift_bridgeObjectRelease();
          *(_QWORD *)&v362 = 0;
          BYTE8(v362) = 0;
          *(_QWORD *)&v363 = v275;
          *((_QWORD *)&v363 + 1) = v159;
          *(_QWORD *)&v364 = v160;
          *((_QWORD *)&v364 + 1) = v271;
          *(_QWORD *)&v365 = v161;
          *((_QWORD *)&v365 + 1) = v162;
          *(_QWORD *)&v366 = v163;
          *((_QWORD *)&v366 + 1) = v164;
          v277(v359, v176);
          outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
          outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
          if (a9(v361) == 1)
            goto LABEL_188;
          outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
          v291 = v320;
          v292 = v321;
          v293 = v322;
          v294 = v323;
          v287 = v316;
          v288 = v317;
          v289 = v318;
          v290 = v319;
          v285 = v314;
          v286 = v315;
          v295 = 1;
          v284[0] = v148;
          v296 = v151;
          v297 = 0;
          v298 = 0.0;
          v299 = 0.0;
          v301 = 0;
          v302 = 0.0;
          v300 = Strong;
          v303 = 1;
          v305 = 1;
          v304 = 0;
          v306 = 0;
          v307 = 1;
          v311 = v365;
          v312 = v366;
          v309 = v363;
          v310 = v364;
          v308 = v362;
          v177 = v256;
          v313 = v256;
          swift_retain();
          swift_retain();
          outlined retain of IKRig.Constraint?(v360, a10);
          swift_retain();
          v276(v284);
          outlined retain of IKRig.Constraint?(v360, a12);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v324 = v148;
          v331 = v320;
          v332 = v321;
          v333 = v322;
          v334 = v323;
          v327 = v316;
          v328 = v317;
          v329 = v318;
          v330 = v319;
          v325 = v314;
          v326 = v315;
          v335 = 1;
          v336 = v151;
          v337 = 0;
          v339 = 0.0;
          v338 = 0.0;
          v342 = 0.0;
          v340 = Strong;
          v341 = 0;
          v343 = 1;
          v345 = 1;
          v344 = 0;
          v346 = 0;
          v347 = 1;
          v349 = 0;
          v348 = 0;
          v350 = v275;
          v351 = v159;
          v352 = v160;
          v353 = v271;
          v354 = v161;
LABEL_154:
          v355 = v162;
          v356 = v163;
          v357 = v164;
          goto LABEL_191;
        }
        swift_bridgeObjectRelease();
      }
      v159 = 0;
      v160 = 0;
      v271 = 0;
      v161 = 0;
      v162 = 0;
      v163 = 0;
      v164 = 0;
      goto LABEL_129;
    default:
      if (a4 != 128)
        goto LABEL_189;
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      v273 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 40);
      v254 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_219:
          __break(1u);
          goto LABEL_220;
        }
        v178 = specialized static Entity.entityInfoType(_:)(v23);
        if (v178)
        {
          v179 = (*(uint64_t (**)(void))(v178 + 232))();
          v180 = *(_QWORD *)(v179 + 16);
          swift_retain();
          MEMORY[0x22076D160](v180, 0);
          *(_QWORD *)(v179 + 16) = v23;
          MEMORY[0x22076D160](v23, v179);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v23);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v181 = swift_allocObject();
      swift_weakInit();
      *(_QWORD *)(v181 + 16) = v24;
      swift_beginAccess();
      swift_weakAssign();
      if (v25 && REBindPointBoundComponent())
      {
        v182 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v183 = swift_dynamicCastClassUnconditional();
LABEL_138:
          v184 = v183;
          goto LABEL_140;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_226:
          __break(1u);
          JUMPOUT(0x21BB4D7E8);
        }
        v226 = specialized static Entity.entityInfoType(_:)(v182);
        if (!v226)
        {
          v183 = makeEntity(for:)(v182);
          goto LABEL_138;
        }
        v184 = (*(uint64_t (**)(void))(v226 + 232))();
        v227 = *(_QWORD *)(v184 + 16);
        swift_retain();
        MEMORY[0x22076D160](v227, 0);
        *(_QWORD *)(v184 + 16) = v182;
        MEMORY[0x22076D160](v182, v184);
        swift_release();
      }
      else
      {
        v184 = 0;
      }
LABEL_140:
      v185 = String.init(cString:)();
      v187 = v186;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v188 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v189 = specialized __RawDictionaryStorage.find<A>(_:)(v185, v187);
        if ((v190 & 1) != 0)
        {
          v191 = (uint64_t *)(*(_QWORD *)(v188 + 56) + 56 * v189);
          v193 = *v191;
          v192 = v191[1];
          v162 = v191[4];
          v266 = v191[3];
          v272 = v191[2];
          v163 = v191[5];
          v164 = v191[6];
          swift_bridgeObjectRelease();
LABEL_151:
          swift_endAccess();
          v194 = swift_bridgeObjectRelease();
          *(_QWORD *)&v362 = 0;
          BYTE8(v362) = 0;
          *(_QWORD *)&v363 = v273;
          *((_QWORD *)&v363 + 1) = v193;
          *(_QWORD *)&v364 = v192;
          *((_QWORD *)&v364 + 1) = v272;
          *(_QWORD *)&v365 = v266;
          *((_QWORD *)&v365 + 1) = v162;
          *(_QWORD *)&v366 = v163;
          *((_QWORD *)&v366 + 1) = v164;
          v277(v359, v194);
          outlined init with take of Transform?((uint64_t)v359, (uint64_t)v360, v280);
          outlined init with take of Transform?((uint64_t)v360, (uint64_t)v361, v280);
          if (a9(v361) == 1)
            goto LABEL_188;
          outlined init with take of Transform?((uint64_t)v360, (uint64_t)&v314, v280);
          v291 = v320;
          v292 = v321;
          v293 = v322;
          v294 = v323;
          v287 = v316;
          v288 = v317;
          v289 = v318;
          v290 = v319;
          v285 = v314;
          v286 = v315;
          v295 = 1;
          v284[0] = v181;
          v296 = v184;
          v297 = 0;
          v298 = 0.0;
          v299 = 0.0;
          v301 = 0;
          v302 = 0.0;
          v300 = Strong;
          v303 = 1;
          v305 = 1;
          v304 = 0;
          v306 = 0;
          v307 = 1;
          v311 = v365;
          v312 = v366;
          v309 = v363;
          v310 = v364;
          v308 = v362;
          v177 = v254;
          v313 = v254;
          swift_retain();
          swift_retain();
          outlined retain of IKRig.Constraint?(v360, a10);
          swift_retain();
          v276(v284);
          swift_release();
          outlined retain of IKRig.Constraint?(v360, a12);
          swift_release();
          swift_release();
          swift_release();
          v324 = v181;
          v331 = v320;
          v332 = v321;
          v333 = v322;
          v334 = v323;
          v327 = v316;
          v328 = v317;
          v329 = v318;
          v330 = v319;
          v325 = v314;
          v326 = v315;
          v335 = 1;
          v336 = v184;
          v337 = 0;
          v339 = 0.0;
          v338 = 0.0;
          v342 = 0.0;
          v340 = Strong;
          v341 = 0;
          v343 = 1;
          v345 = 1;
          v344 = 0;
          v346 = 0;
          v347 = 1;
          v349 = 0;
          v348 = 0;
          v350 = v273;
          v351 = v193;
          v352 = v192;
          v353 = v272;
          v354 = v266;
          goto LABEL_154;
        }
        swift_bridgeObjectRelease();
      }
      v193 = 0;
      v192 = 0;
      v266 = 0;
      v272 = 0;
      v162 = 0;
      v163 = 0;
      v164 = 0;
      goto LABEL_151;
  }
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *), uint64_t a6, uint64_t *a7, uint64_t *a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *a10, void (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t Entity;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char v250;
  double v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char v375;
  char v376;
  uint64_t v377;
  char v378;
  char v379;
  uint64_t v380;
  uint64_t v381;
  char v382;
  char v383;
  uint64_t v384;
  char v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char v395;
  unsigned int v396;
  uint64_t v397;
  unsigned int v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unsigned int v404;
  uint64_t v405;
  unsigned int v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char v423;
  char v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  char v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  char v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t *v514;
  uint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  char v526;
  void (*v527)(_QWORD *);
  void (*v528)(_QWORD *);
  void (*v529)(_QWORD *);
  void (*v530)(_QWORD *);
  void (*v531)(_QWORD *);
  void (*v532)(_QWORD *);
  void (*v533)(_QWORD *);
  void (*v534)(_QWORD *);
  void (*v535)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t Strong;
  _QWORD v537[2];
  uint64_t v538;
  char v539;
  uint64_t v540;
  char v541;
  uint64_t v542;
  char v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  char v547;
  uint64_t v548;
  uint64_t v549;
  __int16 v550;
  char v551;
  uint64_t v552;
  uint64_t v553;
  char v554;
  uint64_t v555;
  char v556;
  double v557;
  double v558;
  uint64_t v559;
  uint64_t v560;
  double v561;
  char v562;
  unint64_t v563;
  char v564;
  unint64_t v565;
  char v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  char v575;
  uint64_t v576;
  char v577;
  uint64_t v578;
  char v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  char v583;
  uint64_t v584;
  uint64_t v585;
  __int16 v586;
  char v587;
  uint64_t v588;
  uint64_t v589;
  char v590;
  uint64_t v591;
  char v592;
  double v593;
  double v594;
  uint64_t v595;
  uint64_t v596;
  double v597;
  char v598;
  unint64_t v599;
  char v600;
  unint64_t v601;
  char v602;
  uint64_t v603;
  char v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x800000021BE88050);
    return 1;
  }
  switch(a4)
  {
    case 1:
      v527 = a5;
      v16 = *(_QWORD *)a2;
      v17 = *(_QWORD *)(a2 + 8);
      v476 = *(_QWORD *)(a2 + 32);
      v483 = *(_QWORD *)(a2 + 40);
      v447 = *(_QWORD *)(a2 + 56);
      v454 = *(_QWORD *)(a2 + 48);
      v460 = *(_QWORD *)(a2 + 64);
      v18 = *(float *)(a2 + 72);
      v19 = *(float *)(a2 + 76);
      v423 = *(_BYTE *)(a2 + 80);
      v431 = *(_QWORD *)(a2 + 88);
      v439 = *(_QWORD *)(a2 + 96);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_25;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v49 = specialized static Entity.entityInfoType(_:)(v16);
        if (v49)
        {
          v50 = (*(uint64_t (**)(void))(v49 + 232))();
          v51 = *(_QWORD *)(v50 + 16);
          swift_retain();
          MEMORY[0x22076D160](v51, 0);
          *(_QWORD *)(v50 + 16) = v16;
          MEMORY[0x22076D160](v16, v50);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v16);
        }
LABEL_25:
        type metadata accessor for AnimationPlaybackController();
        v494 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v494 + 16) = v17;
        swift_beginAccess();
        swift_weakAssign();
        v52 = String.init(cString:)();
        v54 = v53;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        v515 = a7;
        swift_beginAccess();
        v55 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          v56 = a8;
          v57 = a11;
          swift_bridgeObjectRetain();
          v58 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v54);
          if ((v59 & 1) != 0)
          {
            v60 = (uint64_t *)(*(_QWORD *)(v55 + 56) + 56 * v58);
            v61 = v60[1];
            v471 = *v60;
            v63 = v60[2];
            v62 = v60[3];
            v65 = v60[4];
            v64 = v60[5];
            v66 = v60[6];
            swift_bridgeObjectRelease();
            goto LABEL_87;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v56 = a8;
          v57 = a11;
        }
        v471 = 0;
        v61 = 0;
        v63 = 0;
        v62 = 0;
        v65 = 0;
        v64 = 0;
        v66 = 0;
LABEL_87:
        v392 = v65;
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v628 = v476;
        BYTE8(v628) = 0;
        *(_QWORD *)&v629 = v483;
        *((_QWORD *)&v629 + 1) = v471;
        *(_QWORD *)&v630 = v61;
        *((_QWORD *)&v630 + 1) = v63;
        v400 = v64;
        v408 = v62;
        *(_QWORD *)&v631 = v62;
        *((_QWORD *)&v631 + 1) = v65;
        *(_QWORD *)&v632 = v64;
        *((_QWORD *)&v632 + 1) = v66;
        v163 = v66;
        v535 = v57;
        v415 = v61;
        if (!v460 || !REBindPointBoundComponent())
        {
          v466 = 0;
          goto LABEL_93;
        }
        Entity = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v165 = swift_dynamicCastClassUnconditional();
LABEL_91:
          v466 = v165;
          goto LABEL_93;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          v233 = specialized static Entity.entityInfoType(_:)(Entity);
          if (!v233)
          {
            v165 = makeEntity(for:)(Entity);
            goto LABEL_91;
          }
          v234 = (*(uint64_t (**)(void))(v233 + 232))();
          v235 = *(_QWORD *)(v234 + 16);
          swift_retain();
          MEMORY[0x22076D160](v235, 0);
          *(_QWORD *)(v234 + 16) = Entity;
          MEMORY[0x22076D160](Entity, v234);
          v466 = v234;
          swift_release();
LABEL_93:
          specialized ActionEventData.action<A>()(v515, v56, (uint64_t)&v614);
          v166 = v626;
          if (v626 != 1)
          {
            v167 = v627;
            v505 = v627;
            v328 = v163;
            v334 = v63;
            v168 = v625;
            v169 = v624;
            v170 = v623;
            v370 = v623;
            v377 = v625;
            v384 = v626;
            v171 = v622;
            v172 = v621;
            v173 = v620;
            v174 = v618;
            v339 = v619;
            v347 = v617;
            v516 = HIDWORD(v622);
            v355 = v615;
            v362 = v616;
            v175 = v614;
            v318 = v624;
            v323 = v614;
            swift_retain();
            a9(v175, v355, v362, v347, v174, v339, v173, v172, v171, v170, v169, v168, v166, v167);
            v176 = specialized ActionEventData.parameter<A>(type:)(a10);
            v569 = v630;
            v570 = v631;
            v571 = v632;
            v568 = v629;
            v539 = v355 & 1;
            v540 = v362;
            v541 = v347 & 1;
            v542 = v174;
            v543 = v339 & 1;
            v544 = v173;
            v545 = v172;
            v546 = v171;
            v547 = v516;
            v548 = v370;
            v549 = v318;
            v550 = v377 & 0x1FF;
            v551 = BYTE2(v377) & 1;
            v552 = v384;
            v553 = v505;
            v526 = v176 & 1;
            v554 = v176 & 1;
            v538 = v323;
            v537[0] = v494;
            v555 = v466;
            v556 = v423;
            v557 = v18;
            v558 = v19;
            v559 = Strong;
            v560 = v447;
            v567 = v628;
            v561 = -1.0;
            v562 = 0;
            v563 = v431;
            v564 = 0;
            v565 = v439;
            v566 = 0;
            v572 = v454;
            swift_retain();
            swift_retain();
            v527(v537);
            v535(v323, v355, v362, v347, v174, v339, v173, v172, v171, v370, v318, v377, v384, v505);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v573 = v494;
            v574 = v323;
            v575 = v355 & 1;
            v576 = v362;
            v577 = v347 & 1;
            v578 = v174;
            v579 = v339 & 1;
            v580 = v173;
            v581 = v172;
            v582 = v171;
            v583 = v516;
            v584 = v370;
            v585 = v318;
            v586 = v377 & 0x1FF;
            v587 = BYTE2(v377) & 1;
            v588 = v384;
            v589 = v505;
            v590 = v526;
            v591 = v466;
            v592 = v423;
            v593 = v18;
            v594 = v19;
            v595 = Strong;
            v596 = v447;
            v597 = -1.0;
            v598 = 0;
            v599 = v431;
            v600 = 0;
            v601 = v439;
            v602 = 0;
            v603 = v476;
            v604 = 0;
            v605 = v483;
            v606 = v471;
            v607 = v415;
            v608 = v334;
            v609 = v408;
            v610 = v392;
            v611 = v400;
            v177 = v328;
LABEL_172:
            v612 = v177;
            v205 = v454;
            goto LABEL_202;
          }
          goto LABEL_198;
        }
        goto LABEL_232;
      }
      __break(1u);
      goto LABEL_224;
    case 2:
      v529 = a5;
      v24 = *(_QWORD *)a2;
      v25 = *(_QWORD *)(a2 + 8);
      v484 = *(_QWORD *)(a2 + 32);
      v491 = *(_QWORD *)(a2 + 40);
      v26 = *(float *)(a2 + 56);
      v440 = *(_QWORD *)(a2 + 64);
      v448 = *(_QWORD *)(a2 + 48);
      v432 = *(_QWORD *)(a2 + 72);
      v454 = *(_QWORD *)(a2 + 80);
      v462 = *(_QWORD *)(a2 + 88);
      v27 = *(float *)(a2 + 96);
      v28 = *(float *)(a2 + 100);
      v424 = *(_BYTE *)(a2 + 104);
      v513 = a7;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_33;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v67 = specialized static Entity.entityInfoType(_:)(v24);
        if (v67)
        {
          v68 = (*(uint64_t (**)(void))(v67 + 232))();
          v69 = *(_QWORD *)(v68 + 16);
          swift_retain();
          MEMORY[0x22076D160](v69, 0);
          *(_QWORD *)(v68 + 16) = v24;
          MEMORY[0x22076D160](v24, v68);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v24);
        }
LABEL_33:
        type metadata accessor for AnimationPlaybackController();
        v472 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v472 + 16) = v25;
        swift_beginAccess();
        swift_weakAssign();
        v70 = String.init(cString:)();
        v72 = v71;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v73 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v74 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v72);
          if ((v75 & 1) != 0)
          {
            v76 = (uint64_t *)(*(_QWORD *)(v73 + 56) + 56 * v74);
            v77 = v76[1];
            v478 = *v76;
            v78 = v76[2];
            v79 = v76[3];
            v81 = v76[4];
            v80 = v76[5];
            v82 = v76[6];
            swift_bridgeObjectRelease();
LABEL_97:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v628 = v484;
            BYTE8(v628) = 0;
            *(_QWORD *)&v629 = v491;
            *((_QWORD *)&v629 + 1) = v478;
            *(_QWORD *)&v630 = v77;
            *((_QWORD *)&v630 + 1) = v78;
            *(_QWORD *)&v631 = v79;
            *((_QWORD *)&v631 + 1) = v81;
            *(_QWORD *)&v632 = v80;
            *((_QWORD *)&v632 + 1) = v82;
            v409 = v81;
            v416 = v77;
            v393 = v82;
            v401 = v80;
            if (!v462 || !REBindPointBoundComponent())
            {
              v467 = 0;
              goto LABEL_169;
            }
            v178 = v78;
            v179 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v180 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_233:
                __break(1u);
                goto LABEL_234;
              }
              v236 = specialized static Entity.entityInfoType(_:)(v179);
              if (v236)
              {
                v237 = (*(uint64_t (**)(void))(v236 + 232))();
                v238 = *(_QWORD *)(v237 + 16);
                swift_retain();
                MEMORY[0x22076D160](v238, 0);
                *(_QWORD *)(v237 + 16) = v179;
                MEMORY[0x22076D160](v179, v237);
                v467 = v237;
                swift_release();
                goto LABEL_168;
              }
              v180 = makeEntity(for:)(v179);
            }
            v467 = v180;
LABEL_168:
            v78 = v178;
LABEL_169:
            specialized ActionEventData.action<A>()(v513, a8, (uint64_t)&v614);
            v239 = v626;
            if (v626 != 1)
            {
              v329 = v78;
              v240 = v627;
              v241 = v625;
              v380 = v625;
              v387 = v627;
              v242 = v624;
              v243 = v623;
              v244 = v621;
              v245 = v620;
              v246 = v79;
              v247 = v618;
              v342 = v619;
              v350 = v617;
              v365 = v616;
              v372 = v623;
              v508 = v626;
              v519 = HIDWORD(v622);
              v248 = v622;
              v357 = v615;
              v249 = v614;
              v326 = v614;
              v336 = v246;
              swift_retain();
              a9(v249, v357, v365, v350, v247, v342, v245, v244, v248, v243, v242, v241, v239, v240);
              v250 = specialized ActionEventData.parameter<A>(type:)(a10);
              v569 = v630;
              v570 = v631;
              v571 = v632;
              v568 = v629;
              v251 = v26;
              v539 = v357 & 1;
              v540 = v365;
              v541 = v350 & 1;
              v542 = v247;
              v543 = v342 & 1;
              v544 = v245;
              v545 = v244;
              v546 = v248;
              v547 = v519;
              v548 = v372;
              v549 = v242;
              v550 = v380 & 0x1FF;
              v551 = BYTE2(v380) & 1;
              v552 = v508;
              v553 = v387;
              v309 = v250 & 1;
              v554 = v250 & 1;
              v538 = v326;
              v537[0] = v472;
              v555 = v467;
              v556 = v424;
              v557 = v27;
              v558 = v28;
              v559 = Strong;
              v560 = v432;
              v561 = v251;
              v562 = 0;
              v563 = v448;
              v564 = 0;
              v565 = v440;
              v566 = 0;
              v567 = v628;
              v572 = v454;
              swift_retain();
              swift_retain();
              v529(v537);
              a11(v326, v357, v365, v350, v247, v342, v245, v244, v248, v372, v242, v380, v508, v387);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v573 = v472;
              v574 = v326;
              v575 = v357 & 1;
              v576 = v365;
              v577 = v350 & 1;
              v578 = v247;
              v579 = v342 & 1;
              v580 = v245;
              v581 = v244;
              v582 = v248;
              v583 = v519;
              v584 = v372;
              v585 = v242;
              v586 = v380 & 0x1FF;
              v587 = BYTE2(v380) & 1;
              v588 = v508;
              v589 = v387;
              v590 = v309;
              v591 = v467;
              v592 = v424;
              v593 = v27;
              v594 = v28;
              v595 = Strong;
              v596 = v432;
              v597 = v251;
              v598 = 0;
              v599 = v448;
              v600 = 0;
              v601 = v440;
              v602 = 0;
              v603 = v484;
              v604 = 0;
              v605 = v491;
              v606 = v478;
              v607 = v416;
              v608 = v329;
              v609 = v336;
              v610 = v409;
              v611 = v401;
              v177 = v393;
              goto LABEL_172;
            }
LABEL_198:
            swift_release();
            swift_release();
            swift_release();
LABEL_199:
            swift_release();
            return 0;
          }
          swift_bridgeObjectRelease();
        }
        v478 = 0;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v81 = 0;
        v80 = 0;
        v82 = 0;
        goto LABEL_97;
      }
LABEL_224:
      __break(1u);
      goto LABEL_225;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_199;
    case 4:
      v530 = a5;
      v29 = *(_QWORD *)a2;
      v30 = *(_QWORD *)(a2 + 8);
      v485 = *(_QWORD *)(a2 + 32);
      v492 = *(_QWORD *)(a2 + 40);
      v31 = *(_QWORD *)(a2 + 64);
      v455 = *(_QWORD *)(a2 + 56);
      v461 = *(_QWORD *)(a2 + 48);
      v32 = *(float *)(a2 + 72);
      v33 = *(float *)(a2 + 76);
      v449 = *(_BYTE *)(a2 + 80);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_41;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v83 = specialized static Entity.entityInfoType(_:)(v29);
        if (v83)
        {
          v84 = (*(uint64_t (**)(void))(v83 + 232))();
          v85 = *(_QWORD *)(v84 + 16);
          swift_retain();
          MEMORY[0x22076D160](v85, 0);
          *(_QWORD *)(v84 + 16) = v29;
          MEMORY[0x22076D160](v29, v84);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v29);
        }
LABEL_41:
        type metadata accessor for AnimationPlaybackController();
        v473 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v473 + 16) = v30;
        swift_beginAccess();
        swift_weakAssign();
        v86 = String.init(cString:)();
        v88 = v87;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v89 = static AnimationResource.codableActionTypeMap;
        v504 = a8;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v90 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v88);
          if ((v91 & 1) != 0)
          {
            v92 = (uint64_t *)(*(_QWORD *)(v89 + 56) + 56 * v90);
            v93 = v92[1];
            v479 = *v92;
            v94 = v92[2];
            v95 = v92[3];
            v96 = v92[4];
            v97 = v92[5];
            v98 = v92[6];
            swift_bridgeObjectRelease();
LABEL_105:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v628 = v485;
            BYTE8(v628) = 0;
            *(_QWORD *)&v629 = v492;
            *((_QWORD *)&v629 + 1) = v479;
            *(_QWORD *)&v630 = v93;
            *((_QWORD *)&v630 + 1) = v94;
            *(_QWORD *)&v631 = v95;
            *((_QWORD *)&v631 + 1) = v96;
            *(_QWORD *)&v632 = v97;
            *((_QWORD *)&v632 + 1) = v98;
            v425 = v96;
            v433 = v93;
            v410 = v98;
            v417 = v97;
            if (!v31 || !REBindPointBoundComponent())
            {
              v442 = 0;
LABEL_177:
              specialized ActionEventData.action<A>()(a7, v504, (uint64_t)&v614);
              if (v626 == 1)
                goto LABEL_198;
              v255 = v626;
              v256 = v627;
              v509 = v627;
              v257 = v625;
              v337 = v94;
              v258 = v624;
              v397 = v624;
              v405 = v625;
              v259 = v623;
              v388 = v623;
              v260 = v622;
              v261 = v95;
              v262 = v620;
              v351 = v621;
              v358 = v619;
              v263 = v618;
              v366 = v617;
              v373 = v616;
              v520 = HIDWORD(v622);
              v264 = v615;
              v265 = v614;
              v330 = v614;
              v343 = v261;
              swift_retain();
              a9(v265, v264, v373, v366, v263, v358, v262, v351, v260, v259, v258, v257, v255, v256);
              v266 = specialized ActionEventData.parameter<A>(type:)(a10);
              v569 = v630;
              v570 = v631;
              v571 = v632;
              v568 = v629;
              v539 = v264 & 1;
              v540 = v373;
              v541 = v366 & 1;
              v542 = v263;
              v543 = v358 & 1;
              v544 = v262;
              v545 = v351;
              v546 = v260;
              v547 = v520;
              v548 = v388;
              v549 = v397;
              v550 = v405 & 0x1FF;
              v551 = BYTE2(v405) & 1;
              v552 = v255;
              v553 = v509;
              v314 = v266 & 1;
              v554 = v266 & 1;
              v538 = v330;
              v537[0] = v473;
              v555 = v442;
              v556 = v449;
              v557 = v32;
              v558 = v33;
              v559 = Strong;
              v560 = v455;
              v561 = -1.0;
              v562 = 0;
              v563 = 0xBFF0000000000000;
              v564 = 0;
              v565 = 0xBFF0000000000000;
              v566 = 0;
              v567 = v628;
              v572 = v461;
              swift_retain();
              swift_retain();
              v530(v537);
              a11(v330, v264, v373, v366, v263, v358, v262, v351, v260, v388, v397, v405, v255, v509);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v573 = v473;
              v574 = v330;
              v575 = v264 & 1;
              v576 = v373;
              v577 = v366 & 1;
              v578 = v263;
              v579 = v358 & 1;
              v580 = v262;
              v581 = v351;
              v582 = v260;
              v583 = v520;
              v584 = v388;
              v585 = v397;
              v586 = v405 & 0x1FF;
              v587 = BYTE2(v405) & 1;
              v588 = v255;
              v589 = v509;
              v590 = v314;
              v591 = v442;
              v592 = v449;
              v593 = v32;
              v594 = v33;
              v595 = Strong;
              v596 = v455;
              v597 = -1.0;
              v598 = 0;
              v599 = 0xBFF0000000000000;
              v600 = 0;
              v601 = 0xBFF0000000000000;
              v602 = 0;
              v603 = v485;
              v604 = 0;
              v605 = v492;
              v606 = v479;
              v607 = v433;
              v608 = v337;
              v609 = v343;
              v610 = v425;
              v611 = v417;
              v230 = v410;
              goto LABEL_186;
            }
            v181 = v94;
            v182 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v183 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_234:
                __break(1u);
                goto LABEL_235;
              }
              v252 = specialized static Entity.entityInfoType(_:)(v182);
              if (v252)
              {
                v253 = (*(uint64_t (**)(void))(v252 + 232))();
                v254 = *(_QWORD *)(v253 + 16);
                swift_retain();
                MEMORY[0x22076D160](v254, 0);
                *(_QWORD *)(v253 + 16) = v182;
                MEMORY[0x22076D160](v182, v253);
                v442 = v253;
                swift_release();
                goto LABEL_176;
              }
              v183 = makeEntity(for:)(v182);
            }
            v442 = v183;
LABEL_176:
            v94 = v181;
            goto LABEL_177;
          }
          swift_bridgeObjectRelease();
        }
        v479 = 0;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        goto LABEL_105;
      }
LABEL_225:
      __break(1u);
      goto LABEL_226;
    case 8:
      v531 = a5;
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(a2 + 8);
      v486 = *(_QWORD *)(a2 + 32);
      v493 = *(_QWORD *)(a2 + 40);
      v36 = *(_QWORD *)(a2 + 56);
      v37 = *(float *)(a2 + 64);
      v38 = *(float *)(a2 + 68);
      v441 = *(_BYTE *)(a2 + 72);
      v450 = *(_QWORD *)(a2 + 80);
      v456 = *(_QWORD *)(a2 + 88);
      v461 = *(_QWORD *)(a2 + 48);
      v503 = a8;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_49;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v99 = specialized static Entity.entityInfoType(_:)(v34);
        if (v99)
        {
          v100 = (*(uint64_t (**)(void))(v99 + 232))();
          v101 = *(_QWORD *)(v100 + 16);
          swift_retain();
          MEMORY[0x22076D160](v101, 0);
          *(_QWORD *)(v100 + 16) = v34;
          MEMORY[0x22076D160](v34, v100);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
LABEL_49:
        type metadata accessor for AnimationPlaybackController();
        v474 = swift_allocObject();
        swift_weakInit();
        *(_QWORD *)(v474 + 16) = v35;
        swift_beginAccess();
        swift_weakAssign();
        v102 = String.init(cString:)();
        v104 = v103;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v105 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v106 = specialized __RawDictionaryStorage.find<A>(_:)(v102, v104);
          if ((v107 & 1) != 0)
          {
            v108 = (uint64_t *)(*(_QWORD *)(v105 + 56) + 56 * v106);
            v109 = v108[1];
            v480 = *v108;
            v110 = v108[2];
            v111 = v108[3];
            v113 = v108[4];
            v112 = v108[5];
            v114 = v108[6];
            swift_bridgeObjectRelease();
LABEL_113:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v628 = v486;
            BYTE8(v628) = 0;
            *(_QWORD *)&v629 = v493;
            *((_QWORD *)&v629 + 1) = v480;
            *(_QWORD *)&v630 = v109;
            *((_QWORD *)&v630 + 1) = v110;
            *(_QWORD *)&v631 = v111;
            *((_QWORD *)&v631 + 1) = v113;
            *(_QWORD *)&v632 = v112;
            *((_QWORD *)&v632 + 1) = v114;
            v418 = v111;
            v426 = v109;
            v402 = v112;
            v411 = v113;
            v394 = v114;
            if (!v36 || !REBindPointBoundComponent())
            {
              v434 = 0;
LABEL_184:
              specialized ActionEventData.action<A>()(a7, v503, (uint64_t)&v614);
              v270 = v626;
              if (v626 == 1)
                goto LABEL_198;
              v338 = v110;
              v271 = v627;
              v272 = v625;
              v273 = v624;
              v374 = v624;
              v381 = v625;
              v274 = v623;
              v389 = v626;
              v275 = v622;
              v276 = v621;
              v277 = v620;
              v278 = v618;
              v344 = v619;
              v352 = v617;
              v510 = v627;
              v521 = HIDWORD(v622);
              v359 = v615;
              v367 = v616;
              v279 = v614;
              v327 = v623;
              v331 = v614;
              swift_retain();
              a9(v279, v359, v367, v352, v278, v344, v277, v276, v275, v274, v273, v272, v270, v271);
              v280 = specialized ActionEventData.parameter<A>(type:)(a10);
              v570 = v631;
              v571 = v632;
              v569 = v630;
              v568 = v629;
              v539 = v359 & 1;
              v540 = v367;
              v541 = v352 & 1;
              v542 = v278;
              v543 = v344 & 1;
              v544 = v277;
              v545 = v276;
              v546 = v275;
              v547 = v521;
              v548 = v327;
              v549 = v374;
              v550 = v381 & 0x1FF;
              v551 = BYTE2(v381) & 1;
              v552 = v389;
              v553 = v510;
              v315 = v280 & 1;
              v554 = v280 & 1;
              v538 = v331;
              v537[0] = v474;
              v555 = v434;
              v556 = v441;
              v557 = v37;
              v558 = v38;
              v561 = 0.0;
              v559 = Strong;
              v560 = 0;
              v562 = 1;
              v563 = v450;
              v564 = 0;
              v565 = v456;
              v566 = 0;
              v567 = v628;
              v572 = v461;
              swift_retain();
              swift_retain();
              v531(v537);
              a11(v331, v359, v367, v352, v278, v344, v277, v276, v275, v327, v374, v381, v389, v510);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v573 = v474;
              v574 = v331;
              v575 = v359 & 1;
              v576 = v367;
              v577 = v352 & 1;
              v578 = v278;
              v579 = v344 & 1;
              v580 = v277;
              v581 = v276;
              v582 = v275;
              v583 = v521;
              v584 = v327;
              v585 = v374;
              v586 = v381 & 0x1FF;
              v587 = BYTE2(v381) & 1;
              v588 = v389;
              v589 = v510;
              v590 = v315;
              v591 = v434;
              v592 = v441;
              v593 = v37;
              v594 = v38;
              v597 = 0.0;
              v595 = Strong;
              v596 = 0;
              v598 = 1;
              v599 = v450;
              v600 = 0;
              v601 = v456;
              v602 = 0;
              v603 = v486;
              v604 = 0;
              v605 = v493;
              v606 = v480;
              v607 = v426;
              v608 = v338;
              v609 = v418;
              v610 = v411;
              v611 = v402;
              v230 = v394;
LABEL_186:
              v612 = v230;
              v205 = v461;
              goto LABEL_202;
            }
            v184 = v110;
            v185 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v186 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_235:
                __break(1u);
                goto LABEL_236;
              }
              v267 = specialized static Entity.entityInfoType(_:)(v185);
              if (v267)
              {
                v268 = (*(uint64_t (**)(void))(v267 + 232))();
                v269 = *(_QWORD *)(v268 + 16);
                swift_retain();
                MEMORY[0x22076D160](v269, 0);
                *(_QWORD *)(v268 + 16) = v185;
                MEMORY[0x22076D160](v185, v268);
                v434 = v268;
                swift_release();
                goto LABEL_183;
              }
              v186 = makeEntity(for:)(v185);
            }
            v434 = v186;
LABEL_183:
            v110 = v184;
            goto LABEL_184;
          }
          swift_bridgeObjectRelease();
        }
        v480 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        v113 = 0;
        v112 = 0;
        v114 = 0;
        goto LABEL_113;
      }
LABEL_226:
      __break(1u);
      goto LABEL_227;
    case 16:
      v39 = *(_QWORD *)a2;
      v40 = *(_QWORD *)(a2 + 8);
      v499 = *(_QWORD *)(a2 + 40);
      v41 = *(_QWORD *)(a2 + 56);
      v468 = *(_QWORD *)(a2 + 32);
      v477 = *(_QWORD *)(a2 + 48);
      v514 = a7;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_57;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v115 = specialized static Entity.entityInfoType(_:)(v39);
        if (v115)
        {
          v116 = (*(uint64_t (**)(void))(v115 + 232))();
          v117 = *(_QWORD *)(v116 + 16);
          swift_retain();
          MEMORY[0x22076D160](v117, 0);
          *(_QWORD *)(v116 + 16) = v39;
          MEMORY[0x22076D160](v39, v116);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v39);
        }
LABEL_57:
        type metadata accessor for AnimationPlaybackController();
        v118 = swift_allocObject();
        swift_weakInit();
        v463 = v118;
        *(_QWORD *)(v118 + 16) = v40;
        swift_beginAccess();
        swift_weakAssign();
        v119 = String.init(cString:)();
        v121 = v120;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v122 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v123 = specialized __RawDictionaryStorage.find<A>(_:)(v119, v121);
          if ((v124 & 1) != 0)
          {
            v125 = (uint64_t *)(*(_QWORD *)(v122 + 56) + 56 * v123);
            v126 = v125[2];
            v487 = v125[1];
            v495 = *v125;
            v127 = v125[3];
            v128 = v125[4];
            v130 = v125[5];
            v129 = v125[6];
            swift_bridgeObjectRelease();
            goto LABEL_121;
          }
          swift_bridgeObjectRelease();
        }
        v487 = 0;
        v495 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        v130 = 0;
        v129 = 0;
LABEL_121:
        swift_endAccess();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v628 = 0;
        BYTE8(v628) = 0;
        *(_QWORD *)&v629 = v499;
        *((_QWORD *)&v629 + 1) = v495;
        *(_QWORD *)&v630 = v487;
        *((_QWORD *)&v630 + 1) = v126;
        *(_QWORD *)&v631 = v127;
        *((_QWORD *)&v631 + 1) = v128;
        v451 = v130;
        v457 = v126;
        *(_QWORD *)&v632 = v130;
        *((_QWORD *)&v632 + 1) = v129;
        if (v41)
        {
          v187 = v514;
          if (REBindPointBoundComponent())
          {
            v188 = v127;
            v189 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v190 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_236:
                __break(1u);
                goto LABEL_237;
              }
              v281 = specialized static Entity.entityInfoType(_:)(v189);
              if (v281)
              {
                v191 = (*(uint64_t (**)(void))(v281 + 232))();
                v282 = *(_QWORD *)(v191 + 16);
                swift_retain();
                MEMORY[0x22076D160](v282, 0);
                *(_QWORD *)(v191 + 16) = v189;
                MEMORY[0x22076D160](v189, v191);
                swift_release();
                goto LABEL_190;
              }
              v190 = makeEntity(for:)(v189);
            }
            v191 = v190;
LABEL_190:
            v127 = v188;
            goto LABEL_191;
          }
          v191 = 0;
        }
        else
        {
          v191 = 0;
          v187 = v514;
        }
LABEL_191:
        specialized ActionEventData.action<A>()(v187, a8, (uint64_t)&v614);
        if (v626 == 1)
          goto LABEL_198;
        v569 = v630;
        v570 = v631;
        v571 = v632;
        v568 = v629;
        v283 = v627;
        v429 = v127;
        v437 = v624;
        v284 = v622;
        v345 = v621;
        v353 = v620;
        v533 = a5;
        v285 = v619;
        v421 = v128;
        v360 = v618;
        v286 = v191;
        v445 = v191;
        v287 = v617;
        v332 = v616;
        v511 = v615;
        v288 = v614;
        v390 = HIDWORD(v622);
        v368 = v615 & 1;
        v539 = v615 & 1;
        v540 = v616;
        v306 = v619;
        v310 = v617;
        v375 = v617 & 1;
        v541 = v617 & 1;
        v542 = v618;
        v382 = v619 & 1;
        v543 = v619 & 1;
        v544 = v620;
        v545 = v621;
        v546 = v622;
        v547 = BYTE4(v622);
        v548 = v623;
        v549 = v624;
        v289 = v623;
        v550 = v625 & 0x1FF;
        v406 = (v625 >> 8) & 1;
        v290 = v625;
        v316 = v614;
        v321 = v625;
        v398 = WORD1(v625) & 1;
        v551 = BYTE2(v625) & 1;
        v552 = v626;
        v553 = v627;
        v554 = 1;
        v538 = v614;
        v537[0] = v463;
        v555 = v286;
        v556 = 0;
        v558 = 0.0;
        v557 = 0.0;
        v561 = 0.0;
        v559 = Strong;
        v560 = 0;
        v562 = 1;
        v563 = v468;
        v564 = 0;
        v565 = 0;
        v566 = 1;
        v567 = v628;
        v572 = v477;
        v291 = v626;
        v522 = v626;
        swift_retain();
        swift_retain();
        a9(v288, v511, v332, v287, v360, v285, v353, v345, v284, v289, v437, v290, v291, v283);
        swift_retain();
        v533(v537);
        a11(v316, v511, v332, v310, v360, v306, v353, v345, v284, v289, v437, v321, v522, v283);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v573 = v463;
        v574 = v316;
        v575 = v368;
        v576 = v332;
        v577 = v375;
        v578 = v360;
        v579 = v382;
        v580 = v353;
        v581 = v345;
        v582 = v284;
        v583 = v390;
        v584 = v289;
        v585 = v437;
        LOBYTE(v586) = v321;
        HIBYTE(v586) = v406;
        v587 = v398;
        v588 = v522;
        v589 = v283;
        v590 = 1;
        v591 = v445;
        v592 = 0;
        v594 = 0.0;
        v593 = 0.0;
        v597 = 0.0;
        v595 = Strong;
        v596 = 0;
        v598 = 1;
        v599 = v468;
        v600 = 0;
        v601 = 0;
        v602 = 1;
        v603 = 0;
        v604 = 0;
        v605 = v499;
        v606 = v495;
        v607 = v487;
        v608 = v457;
        v609 = v429;
        v610 = v421;
        v611 = v451;
        v292 = v129;
LABEL_201:
        v612 = v292;
        v205 = v477;
        goto LABEL_202;
      }
LABEL_227:
      __break(1u);
      goto LABEL_228;
    case 32:
      v42 = *(_QWORD *)a2;
      v43 = *(_QWORD *)(a2 + 8);
      v500 = *(_QWORD *)(a2 + 40);
      v44 = *(_QWORD *)(a2 + 56);
      v469 = *(_QWORD *)(a2 + 32);
      v477 = *(_QWORD *)(a2 + 48);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_65;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        v131 = specialized static Entity.entityInfoType(_:)(v42);
        if (v131)
        {
          v132 = (*(uint64_t (**)(void))(v131 + 232))();
          v133 = *(_QWORD *)(v132 + 16);
          swift_retain();
          MEMORY[0x22076D160](v133, 0);
          *(_QWORD *)(v132 + 16) = v42;
          MEMORY[0x22076D160](v42, v132);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v42);
        }
LABEL_65:
        type metadata accessor for AnimationPlaybackController();
        v134 = swift_allocObject();
        swift_weakInit();
        v464 = v134;
        *(_QWORD *)(v134 + 16) = v43;
        swift_beginAccess();
        swift_weakAssign();
        v135 = String.init(cString:)();
        v137 = v136;
        if (one-time initialization token for codableActionTypeMap != -1)
          swift_once();
        swift_beginAccess();
        v138 = static AnimationResource.codableActionTypeMap;
        if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
        {
          swift_bridgeObjectRetain();
          v139 = specialized __RawDictionaryStorage.find<A>(_:)(v135, v137);
          if ((v140 & 1) != 0)
          {
            v141 = (uint64_t *)(*(_QWORD *)(v138 + 56) + 56 * v139);
            v142 = v141[2];
            v488 = v141[1];
            v496 = *v141;
            v143 = v141[3];
            v144 = v141[4];
            v146 = v141[5];
            v145 = v141[6];
            swift_bridgeObjectRelease();
LABEL_129:
            swift_endAccess();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v628 = 0;
            BYTE8(v628) = 0;
            *(_QWORD *)&v629 = v500;
            *((_QWORD *)&v629 + 1) = v496;
            *(_QWORD *)&v630 = v488;
            *((_QWORD *)&v630 + 1) = v142;
            *(_QWORD *)&v631 = v143;
            *((_QWORD *)&v631 + 1) = v144;
            *(_QWORD *)&v632 = v146;
            *((_QWORD *)&v632 + 1) = v145;
            v452 = v145;
            v458 = v142;
            if (!v44 || !REBindPointBoundComponent())
            {
              v195 = 0;
LABEL_197:
              specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v614);
              if (v626 == 1)
                goto LABEL_198;
              v569 = v630;
              v570 = v631;
              v571 = v632;
              v568 = v629;
              v295 = v627;
              v322 = v623;
              v430 = v144;
              v438 = v143;
              v346 = v622;
              v354 = v621;
              v534 = a5;
              v361 = v620;
              v369 = v618;
              v422 = v146;
              v296 = v617;
              v333 = v616;
              v512 = v615;
              v297 = v614;
              v399 = HIDWORD(v622);
              v376 = v615 & 1;
              v539 = v615 & 1;
              v540 = v616;
              v311 = v617;
              v383 = v617 & 1;
              v541 = v617 & 1;
              v542 = v618;
              v298 = v619;
              v304 = v619;
              v307 = v625;
              v391 = v619 & 1;
              v543 = v619 & 1;
              v544 = v620;
              v545 = v621;
              v546 = v622;
              v547 = BYTE4(v622);
              v548 = v623;
              v549 = v624;
              v299 = v624;
              v446 = v624;
              v550 = v625 & 0x1FF;
              v414 = (v625 >> 8) & 1;
              v300 = v625;
              v407 = WORD1(v625) & 1;
              v551 = BYTE2(v625) & 1;
              v552 = v626;
              v553 = v627;
              v554 = 1;
              v538 = v614;
              v317 = v614;
              v537[0] = v464;
              v555 = v195;
              v556 = 0;
              v558 = 0.0;
              v557 = 0.0;
              v561 = 0.0;
              v559 = Strong;
              v560 = 0;
              v562 = 1;
              v563 = v469;
              v564 = 0;
              v565 = 0;
              v566 = 1;
              v567 = v628;
              v572 = v477;
              v301 = v626;
              v523 = v626;
              swift_retain();
              swift_retain();
              a9(v297, v512, v333, v296, v369, v298, v361, v354, v346, v322, v299, v300, v301, v295);
              swift_retain();
              v534(v537);
              a11(v317, v512, v333, v311, v369, v304, v361, v354, v346, v322, v446, v307, v523, v295);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v573 = v464;
              v574 = v317;
              v575 = v376;
              v576 = v333;
              v577 = v383;
              v578 = v369;
              v579 = v391;
              v580 = v361;
              v581 = v354;
              v582 = v346;
              v583 = v399;
              v584 = v322;
              v585 = v446;
              LOBYTE(v586) = v307;
              HIBYTE(v586) = v414;
              v587 = v407;
              v588 = v523;
              v589 = v295;
              v590 = 1;
              v591 = v195;
              v592 = 0;
              v594 = 0.0;
              v593 = 0.0;
              v597 = 0.0;
              v595 = Strong;
              v596 = 0;
              v598 = 1;
              v599 = v469;
              v600 = 0;
              v601 = 0;
              v602 = 1;
              v603 = 0;
              v604 = 0;
              v605 = v500;
              v606 = v496;
              v607 = v488;
              v608 = v458;
              v609 = v438;
              v610 = v430;
              v611 = v422;
              v292 = v452;
              goto LABEL_201;
            }
            v192 = v143;
            v193 = REComponentGetEntity();
            if ((id)REEntityGetSwiftObject())
            {
              type metadata accessor for Entity();
              v194 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              if ((REEntityIsBeingDestroyed() & 1) != 0)
              {
LABEL_237:
                __break(1u);
                goto LABEL_238;
              }
              v293 = specialized static Entity.entityInfoType(_:)(v193);
              if (v293)
              {
                v195 = (*(uint64_t (**)(void))(v293 + 232))();
                v294 = *(_QWORD *)(v195 + 16);
                swift_retain();
                MEMORY[0x22076D160](v294, 0);
                *(_QWORD *)(v195 + 16) = v193;
                MEMORY[0x22076D160](v193, v195);
                swift_release();
                goto LABEL_196;
              }
              v194 = makeEntity(for:)(v193);
            }
            v195 = v194;
LABEL_196:
            v143 = v192;
            goto LABEL_197;
          }
          swift_bridgeObjectRelease();
        }
        v488 = 0;
        v496 = 0;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v146 = 0;
        v145 = 0;
        goto LABEL_129;
      }
LABEL_228:
      __break(1u);
      goto LABEL_229;
    case 64:
      v532 = a5;
      v45 = *(_QWORD *)a2;
      v46 = *(_QWORD *)(a2 + 8);
      v47 = *(_QWORD *)(a2 + 24);
      v48 = *(_QWORD *)(a2 + 40);
      v470 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
        goto LABEL_73;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }
      v147 = specialized static Entity.entityInfoType(_:)(v45);
      if (v147)
      {
        v148 = (*(uint64_t (**)(void))(v147 + 232))();
        v149 = *(_QWORD *)(v148 + 16);
        swift_retain();
        MEMORY[0x22076D160](v149, 0);
        *(_QWORD *)(v148 + 16) = v45;
        MEMORY[0x22076D160](v45, v148);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v45);
      }
LABEL_73:
      type metadata accessor for AnimationPlaybackController();
      v150 = swift_allocObject();
      swift_weakInit();
      v465 = v150;
      *(_QWORD *)(v150 + 16) = v46;
      swift_beginAccess();
      swift_weakAssign();
      if (!v48 || !REBindPointBoundComponent())
      {
        v153 = 0;
        goto LABEL_79;
      }
      v151 = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v152 = swift_dynamicCastClassUnconditional();
LABEL_77:
        v153 = v152;
        goto LABEL_79;
      }
      if ((REEntityIsBeingDestroyed() & 1) != 0)
      {
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }
      v231 = specialized static Entity.entityInfoType(_:)(v151);
      if (!v231)
      {
        v152 = makeEntity(for:)(v151);
        goto LABEL_77;
      }
      v153 = (*(uint64_t (**)(void))(v231 + 232))();
      v232 = *(_QWORD *)(v153 + 16);
      swift_retain();
      MEMORY[0x22076D160](v232, 0);
      *(_QWORD *)(v153 + 16) = v151;
      MEMORY[0x22076D160](v151, v153);
      swift_release();
LABEL_79:
      v154 = String.init(cString:)();
      v156 = v155;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v157 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v158 = specialized __RawDictionaryStorage.find<A>(_:)(v154, v156);
        if ((v159 & 1) != 0)
        {
          v160 = (uint64_t *)(*(_QWORD *)(v157 + 56) + 56 * v158);
          v162 = *v160;
          v161 = v160[1];
          v525 = v160[2];
          v497 = v160[4];
          v501 = v160[3];
          v481 = v160[6];
          v489 = v160[5];
          swift_bridgeObjectRelease();
          goto LABEL_137;
        }
        swift_bridgeObjectRelease();
      }
      v162 = 0;
      v161 = 0;
      v525 = 0;
      v497 = 0;
      v501 = 0;
      v481 = 0;
      v489 = 0;
LABEL_137:
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v628 = 0;
      BYTE8(v628) = 0;
      *(_QWORD *)&v629 = v47;
      *((_QWORD *)&v629 + 1) = v162;
      *(_QWORD *)&v630 = v161;
      *((_QWORD *)&v630 + 1) = v525;
      *(_QWORD *)&v631 = v501;
      *((_QWORD *)&v631 + 1) = v497;
      *(_QWORD *)&v632 = v489;
      *((_QWORD *)&v632 + 1) = v481;
      specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v614);
      if (v626 == 1)
        goto LABEL_198;
      v569 = v630;
      v570 = v631;
      v571 = v632;
      v568 = v629;
      v506 = v624;
      v435 = v162;
      v443 = v623;
      v196 = v622;
      v427 = v47;
      v356 = v620;
      v363 = v621;
      v197 = v619;
      v198 = v153;
      v453 = v153;
      v340 = v618;
      v348 = v617;
      v199 = v616;
      v200 = v615;
      v201 = v614;
      v403 = HIDWORD(v622);
      v305 = v616;
      v308 = v615;
      v378 = v615 & 1;
      v539 = v615 & 1;
      v540 = v616;
      v385 = v617 & 1;
      v541 = v617 & 1;
      v542 = v618;
      v312 = v625;
      v319 = v619;
      v395 = v619 & 1;
      v543 = v619 & 1;
      v544 = v620;
      v545 = v621;
      v546 = v622;
      v547 = BYTE4(v622);
      v548 = v623;
      v549 = v624;
      v550 = v625 & 0x1FF;
      v419 = (v625 >> 8) & 1;
      v202 = v625;
      v412 = WORD1(v625) & 1;
      v551 = BYTE2(v625) & 1;
      v552 = v626;
      v553 = v627;
      v203 = v627;
      v554 = 1;
      v538 = v614;
      v324 = v614;
      v537[0] = v465;
      v555 = v198;
      v556 = 0;
      v558 = 0.0;
      v557 = 0.0;
      v561 = 0.0;
      v559 = Strong;
      v560 = 0;
      v562 = 1;
      v563 = 0;
      v564 = 1;
      v565 = 0;
      v566 = 1;
      v567 = v628;
      v572 = v470;
      v204 = v626;
      v517 = v626;
      swift_retain();
      swift_retain();
      a9(v201, v200, v199, v348, v340, v197, v356, v363, v196, v443, v506, v202, v204, v203);
      swift_retain();
      v532(v537);
      a11(v324, v308, v305, v348, v340, v319, v356, v363, v196, v443, v506, v312, v517, v203);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v573 = v465;
      v574 = v324;
      v575 = v378;
      v576 = v305;
      v577 = v385;
      v578 = v340;
      v579 = v395;
      v580 = v356;
      v581 = v363;
      v582 = v196;
      v583 = v403;
      v584 = v443;
      v585 = v506;
      LOBYTE(v586) = v312;
      HIBYTE(v586) = v419;
      v587 = v412;
      v588 = v517;
      v589 = v203;
      v590 = 1;
      v591 = v453;
      v592 = 0;
      v594 = 0.0;
      v593 = 0.0;
      v597 = 0.0;
      v595 = Strong;
      v596 = 0;
      v598 = 1;
      v599 = 0;
      v600 = 1;
      v601 = 0;
      v602 = 1;
      v603 = 0;
      v604 = 0;
      v605 = v427;
      v606 = v435;
      v607 = v161;
      v608 = v525;
      v609 = v501;
      v610 = v497;
      v611 = v489;
      v612 = v481;
      v205 = v470;
LABEL_202:
      v613 = v205;
      outlined release of ActionEvent<FromToByAction<SIMD2<Float>>>((uint64_t)&v573);
      return 0;
    default:
      if (a4 != 128)
        goto LABEL_199;
      v528 = a5;
      v21 = *(_QWORD *)a2;
      v22 = *(_QWORD *)(a2 + 8);
      v524 = *(_QWORD *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 40);
      v461 = *(_QWORD *)(a2 + 32);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_230:
          __break(1u);
          goto LABEL_231;
        }
        v206 = specialized static Entity.entityInfoType(_:)(v21);
        if (v206)
        {
          v207 = (*(uint64_t (**)(void))(v206 + 232))();
          v208 = *(_QWORD *)(v207 + 16);
          swift_retain();
          MEMORY[0x22076D160](v208, 0);
          *(_QWORD *)(v207 + 16) = v21;
          MEMORY[0x22076D160](v21, v207);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v21);
        }
      }
      type metadata accessor for AnimationPlaybackController();
      v209 = swift_allocObject();
      swift_weakInit();
      v459 = v209;
      *(_QWORD *)(v209 + 16) = v22;
      swift_beginAccess();
      swift_weakAssign();
      if (v23 && REBindPointBoundComponent())
      {
        v210 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          v211 = swift_dynamicCastClassUnconditional();
LABEL_146:
          v212 = v211;
          goto LABEL_148;
        }
        if ((REEntityIsBeingDestroyed() & 1) != 0)
        {
LABEL_238:
          __break(1u);
          JUMPOUT(0x21BB50CF8);
        }
        v302 = specialized static Entity.entityInfoType(_:)(v210);
        if (!v302)
        {
          v211 = makeEntity(for:)(v210);
          goto LABEL_146;
        }
        v212 = (*(uint64_t (**)(void))(v302 + 232))();
        v303 = *(_QWORD *)(v212 + 16);
        swift_retain();
        MEMORY[0x22076D160](v303, 0);
        *(_QWORD *)(v212 + 16) = v210;
        MEMORY[0x22076D160](v210, v212);
        swift_release();
      }
      else
      {
        v212 = 0;
      }
LABEL_148:
      v213 = String.init(cString:)();
      v215 = v214;
      if (one-time initialization token for codableActionTypeMap != -1)
        swift_once();
      swift_beginAccess();
      v216 = static AnimationResource.codableActionTypeMap;
      if (*(_QWORD *)(static AnimationResource.codableActionTypeMap + 16))
      {
        swift_bridgeObjectRetain();
        v217 = specialized __RawDictionaryStorage.find<A>(_:)(v213, v215);
        if ((v218 & 1) != 0)
        {
          v219 = (uint64_t *)(*(_QWORD *)(v216 + 56) + 56 * v217);
          v221 = *v219;
          v220 = v219[1];
          v498 = v219[3];
          v502 = v219[2];
          v482 = v219[5];
          v490 = v219[4];
          v475 = v219[6];
          swift_bridgeObjectRelease();
LABEL_156:
          swift_endAccess();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v628 = 0;
          BYTE8(v628) = 0;
          *(_QWORD *)&v629 = v524;
          *((_QWORD *)&v629 + 1) = v221;
          *(_QWORD *)&v630 = v220;
          *((_QWORD *)&v630 + 1) = v502;
          *(_QWORD *)&v631 = v498;
          *((_QWORD *)&v631 + 1) = v490;
          *(_QWORD *)&v632 = v482;
          *((_QWORD *)&v632 + 1) = v475;
          specialized ActionEventData.action<A>()(a7, a8, (uint64_t)&v614);
          if (v626 == 1)
            goto LABEL_198;
          v569 = v630;
          v570 = v631;
          v571 = v632;
          v568 = v629;
          v222 = v627;
          v223 = v625;
          v413 = v221;
          v420 = v624;
          v224 = v622;
          v335 = v621;
          v341 = v620;
          v225 = v619;
          v226 = v212;
          v428 = v212;
          v518 = v617;
          v436 = v616;
          v444 = v618;
          v349 = v615;
          v227 = v614;
          v386 = HIDWORD(v622);
          v364 = v615 & 1;
          v539 = v615 & 1;
          v540 = v616;
          v371 = v617 & 1;
          v541 = v617 & 1;
          v542 = v618;
          v313 = v622;
          v320 = v619;
          v379 = v619 & 1;
          v543 = v619 & 1;
          v544 = v620;
          v545 = v621;
          v546 = v622;
          v547 = BYTE4(v622);
          v548 = v623;
          v549 = v624;
          v228 = v623;
          v550 = v625 & 0x1FF;
          v404 = (v625 >> 8) & 1;
          v396 = WORD1(v625) & 1;
          v551 = BYTE2(v625) & 1;
          v552 = v626;
          v553 = v627;
          v554 = 1;
          v538 = v614;
          v325 = v614;
          v537[0] = v459;
          v555 = v226;
          v556 = 0;
          v558 = 0.0;
          v557 = 0.0;
          v561 = 0.0;
          v559 = Strong;
          v560 = 0;
          v562 = 1;
          v563 = 0;
          v564 = 1;
          v565 = 0;
          v566 = 1;
          v567 = v628;
          v572 = v461;
          v229 = v626;
          v507 = v626;
          swift_retain();
          swift_retain();
          a9(v227, v349, v436, v518, v444, v225, v341, v335, v224, v228, v420, v223, v229, v222);
          swift_retain();
          v528(v537);
          swift_release();
          a11(v325, v349, v436, v518, v444, v320, v341, v335, v313, v228, v420, v223, v507, v222);
          swift_release();
          swift_release();
          swift_release();
          v573 = v459;
          v574 = v325;
          v575 = v364;
          v576 = v436;
          v577 = v371;
          v578 = v444;
          v579 = v379;
          v580 = v341;
          v581 = v335;
          v582 = v313;
          v583 = v386;
          v584 = v228;
          v585 = v420;
          LOBYTE(v586) = v223;
          HIBYTE(v586) = v404;
          v587 = v396;
          v588 = v507;
          v589 = v222;
          v590 = 1;
          v591 = v428;
          v592 = 0;
          v594 = 0.0;
          v593 = 0.0;
          v597 = 0.0;
          v595 = Strong;
          v596 = 0;
          v598 = 1;
          v599 = 0;
          v600 = 1;
          v601 = 0;
          v602 = 1;
          v603 = 0;
          v604 = 0;
          v605 = v524;
          v606 = v413;
          v607 = v220;
          v608 = v502;
          v609 = v498;
          v610 = v490;
          v611 = v482;
          v230 = v475;
          goto LABEL_186;
        }
        swift_bridgeObjectRelease();
      }
      v221 = 0;
      v220 = 0;
      v498 = 0;
      v502 = 0;
      v482 = 0;
      v490 = 0;
      v475 = 0;
      goto LABEL_156;
  }
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[235];
  _OWORD v10[15];
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  _BYTE v15[248];
  _OWORD v16[14];
  uint64_t v17;

  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v16);
  v5 = specialized Data.init(bytes:count:)(*(_BYTE **)(a2 + 120), *(_QWORD *)(a2 + 128));
  v7 = v6;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  outlined retain of OrbitEntityActionHandler((uint64_t)v16);
  JSONDecoder.init()();
  lazy protocol witness table accessor for type TurbulenceForceEffect and conformance TurbulenceForceEffect();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  *(_OWORD *)&v9[179] = v16[11];
  *(_OWORD *)&v9[195] = v16[12];
  *(_OWORD *)&v9[211] = v16[13];
  *(_OWORD *)&v9[115] = v16[7];
  *(_OWORD *)&v9[131] = v16[8];
  *(_OWORD *)&v9[147] = v16[9];
  *(_OWORD *)&v9[163] = v16[10];
  *(_OWORD *)&v9[51] = v16[3];
  *(_OWORD *)&v9[67] = v16[4];
  *(_QWORD *)&v9[227] = v17;
  *(_OWORD *)&v9[83] = v16[5];
  *(_OWORD *)&v9[99] = v16[6];
  *(_OWORD *)&v9[3] = v16[0];
  *(_OWORD *)&v9[19] = v16[1];
  *(_OWORD *)&v9[35] = v16[2];
  *(_QWORD *)v15 = v12;
  *(_DWORD *)&v15[8] = v13;
  *(_OWORD *)&v15[189] = *(_OWORD *)&v9[176];
  *(_OWORD *)&v15[205] = *(_OWORD *)&v9[192];
  *(_OWORD *)&v15[221] = *(_OWORD *)&v9[208];
  *(_OWORD *)&v15[232] = *(_OWORD *)&v9[219];
  *(_OWORD *)&v15[125] = *(_OWORD *)&v9[112];
  *(_OWORD *)&v15[141] = *(_OWORD *)&v9[128];
  *(_OWORD *)&v15[157] = *(_OWORD *)&v9[144];
  *(_OWORD *)&v15[173] = *(_OWORD *)&v9[160];
  *(_OWORD *)&v15[61] = *(_OWORD *)&v9[48];
  *(_OWORD *)&v15[77] = *(_OWORD *)&v9[64];
  *(_OWORD *)&v15[93] = *(_OWORD *)&v9[80];
  *(_OWORD *)&v15[109] = *(_OWORD *)&v9[96];
  *(_OWORD *)&v15[13] = *(_OWORD *)v9;
  v15[12] = v14;
  *(_OWORD *)&v15[29] = *(_OWORD *)&v9[16];
  *(_OWORD *)&v15[45] = *(_OWORD *)&v9[32];
  a3(v15);
  outlined release of TimelineDefinition?((uint64_t)v16);
  outlined consume of Data._Representation(v5, v7);
  v10[12] = *(_OWORD *)&v15[192];
  v10[13] = *(_OWORD *)&v15[208];
  v10[14] = *(_OWORD *)&v15[224];
  v11 = *(_QWORD *)&v15[240];
  v10[8] = *(_OWORD *)&v15[128];
  v10[9] = *(_OWORD *)&v15[144];
  v10[10] = *(_OWORD *)&v15[160];
  v10[11] = *(_OWORD *)&v15[176];
  v10[4] = *(_OWORD *)&v15[64];
  v10[5] = *(_OWORD *)&v15[80];
  v10[6] = *(_OWORD *)&v15[96];
  v10[7] = *(_OWORD *)&v15[112];
  v10[0] = *(_OWORD *)v15;
  v10[1] = *(_OWORD *)&v15[16];
  v10[2] = *(_OWORD *)&v15[32];
  v10[3] = *(_OWORD *)&v15[48];
  outlined release of ForceEffectEvent<TurbulenceForceEffect>((uint64_t)v10);
  return 0;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[239];
  _OWORD v10[15];
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[248];
  _OWORD v15[14];
  uint64_t v16;

  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v15);
  v5 = specialized Data.init(bytes:count:)(*(_BYTE **)(a2 + 120), *(_QWORD *)(a2 + 128));
  v7 = v6;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  outlined retain of OrbitEntityActionHandler((uint64_t)v15);
  JSONDecoder.init()();
  lazy protocol witness table accessor for type RadialForceEffect and conformance RadialForceEffect();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  *(_OWORD *)&v9[183] = v15[11];
  *(_OWORD *)&v9[199] = v15[12];
  *(_OWORD *)&v9[215] = v15[13];
  *(_QWORD *)&v9[231] = v16;
  *(_OWORD *)&v9[119] = v15[7];
  *(_OWORD *)&v9[135] = v15[8];
  *(_OWORD *)&v9[151] = v15[9];
  *(_OWORD *)&v9[167] = v15[10];
  *(_OWORD *)&v9[55] = v15[3];
  *(_OWORD *)&v9[71] = v15[4];
  *(_OWORD *)&v9[87] = v15[5];
  *(_OWORD *)&v9[103] = v15[6];
  *(_OWORD *)&v9[7] = v15[0];
  *(_OWORD *)&v9[23] = v15[1];
  *(_OWORD *)&v9[39] = v15[2];
  *(_QWORD *)v14 = v12;
  *(_OWORD *)&v14[185] = *(_OWORD *)&v9[176];
  *(_OWORD *)&v14[201] = *(_OWORD *)&v9[192];
  *(_OWORD *)&v14[217] = *(_OWORD *)&v9[208];
  *(_OWORD *)&v14[232] = *(_OWORD *)&v9[223];
  *(_OWORD *)&v14[121] = *(_OWORD *)&v9[112];
  *(_OWORD *)&v14[137] = *(_OWORD *)&v9[128];
  *(_OWORD *)&v14[153] = *(_OWORD *)&v9[144];
  *(_OWORD *)&v14[169] = *(_OWORD *)&v9[160];
  *(_OWORD *)&v14[57] = *(_OWORD *)&v9[48];
  *(_OWORD *)&v14[73] = *(_OWORD *)&v9[64];
  *(_OWORD *)&v14[89] = *(_OWORD *)&v9[80];
  *(_OWORD *)&v14[105] = *(_OWORD *)&v9[96];
  *(_OWORD *)&v14[9] = *(_OWORD *)v9;
  *(_OWORD *)&v14[25] = *(_OWORD *)&v9[16];
  v14[8] = v13;
  *(_OWORD *)&v14[41] = *(_OWORD *)&v9[32];
  a3(v14);
  outlined release of TimelineDefinition?((uint64_t)v15);
  outlined consume of Data._Representation(v5, v7);
  v10[12] = *(_OWORD *)&v14[192];
  v10[13] = *(_OWORD *)&v14[208];
  v10[14] = *(_OWORD *)&v14[224];
  v11 = *(_QWORD *)&v14[240];
  v10[8] = *(_OWORD *)&v14[128];
  v10[9] = *(_OWORD *)&v14[144];
  v10[10] = *(_OWORD *)&v14[160];
  v10[11] = *(_OWORD *)&v14[176];
  v10[4] = *(_OWORD *)&v14[64];
  v10[5] = *(_OWORD *)&v14[80];
  v10[6] = *(_OWORD *)&v14[96];
  v10[7] = *(_OWORD *)&v14[112];
  v10[0] = *(_OWORD *)v14;
  v10[1] = *(_OWORD *)&v14[16];
  v10[2] = *(_OWORD *)&v14[32];
  v10[3] = *(_OWORD *)&v14[48];
  outlined release of ForceEffectEvent<TurbulenceForceEffect>((uint64_t)v10);
  return 0;
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *), uint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(_OWORD *))
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[235];
  _OWORD v16[16];
  int v17;
  char v18;
  _BYTE v19[240];
  _OWORD v20[14];
  uint64_t v21;

  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v20);
  v11 = specialized Data.init(bytes:count:)(*(_BYTE **)(a2 + 120), *(_QWORD *)(a2 + 128));
  v13 = v12;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  outlined retain of OrbitEntityActionHandler((uint64_t)v20);
  JSONDecoder.init()();
  a5();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  *(_OWORD *)&v15[179] = v20[11];
  *(_OWORD *)&v15[195] = v20[12];
  *(_OWORD *)&v15[211] = v20[13];
  *(_OWORD *)&v15[115] = v20[7];
  *(_OWORD *)&v15[131] = v20[8];
  *(_OWORD *)&v15[147] = v20[9];
  *(_OWORD *)&v15[163] = v20[10];
  *(_OWORD *)&v15[51] = v20[3];
  *(_OWORD *)&v15[67] = v20[4];
  *(_QWORD *)&v15[227] = v21;
  *(_OWORD *)&v15[83] = v20[5];
  *(_OWORD *)&v15[99] = v20[6];
  *(_OWORD *)&v15[3] = v20[0];
  *(_OWORD *)&v15[19] = v20[1];
  *(_OWORD *)&v15[35] = v20[2];
  *(_DWORD *)v19 = v17;
  *(_OWORD *)&v19[181] = *(_OWORD *)&v15[176];
  *(_OWORD *)&v19[197] = *(_OWORD *)&v15[192];
  *(_OWORD *)&v19[213] = *(_OWORD *)&v15[208];
  *(_OWORD *)&v19[224] = *(_OWORD *)&v15[219];
  *(_OWORD *)&v19[117] = *(_OWORD *)&v15[112];
  *(_OWORD *)&v19[133] = *(_OWORD *)&v15[128];
  *(_OWORD *)&v19[149] = *(_OWORD *)&v15[144];
  *(_OWORD *)&v19[165] = *(_OWORD *)&v15[160];
  *(_OWORD *)&v19[53] = *(_OWORD *)&v15[48];
  *(_OWORD *)&v19[69] = *(_OWORD *)&v15[64];
  *(_OWORD *)&v19[85] = *(_OWORD *)&v15[80];
  *(_OWORD *)&v19[101] = *(_OWORD *)&v15[96];
  *(_OWORD *)&v19[5] = *(_OWORD *)v15;
  v19[4] = v18;
  *(_OWORD *)&v19[21] = *(_OWORD *)&v15[16];
  *(_OWORD *)&v19[37] = *(_OWORD *)&v15[32];
  a3(v19);
  outlined release of TimelineDefinition?((uint64_t)v20);
  outlined consume of Data._Representation(v11, v13);
  v16[12] = *(_OWORD *)&v19[192];
  v16[13] = *(_OWORD *)&v19[208];
  v16[14] = *(_OWORD *)&v19[224];
  v16[8] = *(_OWORD *)&v19[128];
  v16[9] = *(_OWORD *)&v19[144];
  v16[10] = *(_OWORD *)&v19[160];
  v16[11] = *(_OWORD *)&v19[176];
  v16[4] = *(_OWORD *)&v19[64];
  v16[5] = *(_OWORD *)&v19[80];
  v16[6] = *(_OWORD *)&v19[96];
  v16[7] = *(_OWORD *)&v19[112];
  v16[0] = *(_OWORD *)v19;
  v16[1] = *(_OWORD *)&v19[16];
  v16[2] = *(_OWORD *)&v19[32];
  v16[3] = *(_OWORD *)&v19[48];
  a7(v16);
  return 0;
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *), uint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(_BYTE *))
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[239];
  _BYTE __dst[288];
  int v17;
  __int128 v18;
  char v19;
  _OWORD __src[17];
  _OWORD v21[14];
  uint64_t v22;

  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v21);
  v11 = specialized Data.init(bytes:count:)(*(_BYTE **)(a2 + 120), *(_QWORD *)(a2 + 128));
  v13 = v12;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  outlined retain of OrbitEntityActionHandler((uint64_t)v21);
  JSONDecoder.init()();
  a5();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  *(_OWORD *)&v15[183] = v21[11];
  *(_OWORD *)&v15[199] = v21[12];
  *(_OWORD *)&v15[215] = v21[13];
  *(_OWORD *)&v15[119] = v21[7];
  *(_OWORD *)&v15[135] = v21[8];
  *(_OWORD *)&v15[151] = v21[9];
  *(_OWORD *)&v15[167] = v21[10];
  *(_OWORD *)&v15[55] = v21[3];
  *(_OWORD *)&v15[71] = v21[4];
  *(_OWORD *)&v15[87] = v21[5];
  *(_OWORD *)&v15[103] = v21[6];
  *(_OWORD *)&v15[7] = v21[0];
  *(_QWORD *)&v15[231] = v22;
  *(_OWORD *)&v15[23] = v21[1];
  *(_OWORD *)&v15[39] = v21[2];
  LODWORD(__src[0]) = v17;
  __src[1] = v18;
  *(_OWORD *)((char *)&__src[13] + 1) = *(_OWORD *)&v15[176];
  *(_OWORD *)((char *)&__src[14] + 1) = *(_OWORD *)&v15[192];
  *(_OWORD *)((char *)&__src[15] + 1) = *(_OWORD *)&v15[208];
  __src[16] = *(_OWORD *)&v15[223];
  *(_OWORD *)((char *)&__src[9] + 1) = *(_OWORD *)&v15[112];
  *(_OWORD *)((char *)&__src[10] + 1) = *(_OWORD *)&v15[128];
  *(_OWORD *)((char *)&__src[11] + 1) = *(_OWORD *)&v15[144];
  *(_OWORD *)((char *)&__src[12] + 1) = *(_OWORD *)&v15[160];
  *(_OWORD *)((char *)&__src[5] + 1) = *(_OWORD *)&v15[48];
  *(_OWORD *)((char *)&__src[6] + 1) = *(_OWORD *)&v15[64];
  LOBYTE(__src[2]) = v19;
  *(_OWORD *)((char *)&__src[7] + 1) = *(_OWORD *)&v15[80];
  *(_OWORD *)((char *)&__src[8] + 1) = *(_OWORD *)&v15[96];
  *(_OWORD *)((char *)&__src[2] + 1) = *(_OWORD *)v15;
  *(_OWORD *)((char *)&__src[3] + 1) = *(_OWORD *)&v15[16];
  *(_OWORD *)((char *)&__src[4] + 1) = *(_OWORD *)&v15[32];
  a3(__src);
  outlined release of TimelineDefinition?((uint64_t)v21);
  outlined consume of Data._Representation(v11, v13);
  memcpy(__dst, __src, 0x110uLL);
  a7(__dst);
  return 0;
}

uint64_t specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE v21[24];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v13 = a6();
  if (a2)
  {
    v14 = specialized static __ServiceLocator.shared.getter() + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v14, (uint64_t)v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    v15 = SceneManager.componentTypeToComponentClass(_:)(a2, a3);
    if (v15)
      goto LABEL_5;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 80))(v26, a2, a3);
    if (LODWORD(v26[0]) == 36)
    {
      v15 = specialized static SceneManager.customComponentType(_:)(a2, a3);
LABEL_5:
      v16 = v15;
      swift_release();
      if (*(_QWORD *)(a1 + 24))
        goto LABEL_6;
LABEL_15:
      result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
      v19 = 0;
      goto LABEL_16;
    }
    swift_release();
  }
  v16 = 0;
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_15;
LABEL_6:
  outlined init with copy of (Int, URL)(a1, (uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
  if (!v22)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RECoreBridging);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    goto LABEL_12;
  }
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, &demangling cache variable for type metadata for RECoreBridging?);
    outlined init with copy of (Int, URL)(a1, (uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource?);
    v19 = Optional._bridgeToObjectiveC()();
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    swift_unknownObjectRelease();
    result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v23, (uint64_t)v26);
  v17 = v27;
  v18 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
LABEL_16:
  *a7 = v13;
  a7[1] = v19;
  a7[2] = v16;
  a7[3] = a4;
  a7[4] = a5;
  return result;
}

_QWORD *specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v4 = v2;
  v7 = a1[3];
  v6 = a1[4];
  swift_beginAccess();
  v8 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v10 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v18);
    }
    else
    {
      v18 = 0u;
      v19 = 0u;
    }
    outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_endAccess();
  if (!*((_QWORD *)&v19 + 1))
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v12 = *(_QWORD *)(v4 + 16);
    v13 = a1[1];
    v14 = a1[2];
    v15 = __swift_instantiateConcreteTypeFromMangledName(a2);
    swift_allocObject();
    v11 = specialized REEventDispatcher.init(eventBus:coreHandle:sourceObject:componentType:matching:)(v4, v12, v13, v14, v7, v6);
    *((_QWORD *)&v19 + 1) = v15;
    *(_QWORD *)&v18 = v11;
    swift_beginAccess();
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v18, a1);
    swift_endAccess();
    return v11;
  }
  return (_QWORD *)v17;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  ValueMetadata *v15;
  _UNKNOWN **v16;
  _OWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v1 = *(_OWORD *)(a1 + 208);
  v24 = *(_OWORD *)(a1 + 192);
  v25 = v1;
  v26 = *(_OWORD *)(a1 + 224);
  v27 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 128);
  v21 = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v22 = *(_OWORD *)(a1 + 160);
  v23 = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v17[4] = *(_OWORD *)(a1 + 64);
  v17[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 96);
  v19 = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v7;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v17);
  if (result != 1)
  {
    v10 = result;
    v11 = v9 & 1;
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, v18);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v12 = v27;
    v15 = &type metadata for PlayAudioActionHandler;
    v16 = &protocol witness table for PlayAudioActionHandler;
    v13 = v10;
    v14 = v11;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v13, v12);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v10);
  }
  return result;
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, Swift::UInt a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  _OWORD v15[3];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v3 = *(_OWORD *)(a1 + 176);
  v23 = *(_OWORD *)(a1 + 160);
  v24 = v3;
  v25 = *(_QWORD *)(a1 + 192);
  v4 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 96);
  v20 = v4;
  v5 = *(_OWORD *)(a1 + 144);
  v21 = *(_OWORD *)(a1 + 128);
  v22 = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v16 = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 64);
  v18 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v8;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (v10)
  {
    v11 = result;
    v12 = v10;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, v16);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v13 = v25;
    v14[3] = &type metadata for EmphasizeActionHandler;
    v14[4] = &protocol witness table for EmphasizeActionHandler;
    v14[0] = v11;
    v14[1] = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v14, v13);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[12];
  uint64_t v13;

  v1 = *(_OWORD *)(a1 + 176);
  v12[10] = *(_OWORD *)(a1 + 160);
  v12[11] = v1;
  v13 = *(_QWORD *)(a1 + 192);
  v2 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  v12[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v12[8] = *(_OWORD *)(a1 + 128);
  v12[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12);
  if (v7)
    swift_bridgeObjectRelease();
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = v13;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  uint64_t v14;

  v1 = *(_OWORD *)(a1 + 208);
  v13[12] = *(_OWORD *)(a1 + 192);
  v13[13] = v1;
  v13[14] = *(_OWORD *)(a1 + 224);
  v14 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v13[10] = *(_OWORD *)(a1 + 160);
  v13[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v7;
  v8 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (v8 != 1)
    outlined consume of __ImageBasedLightComponent?(v8);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = v14;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[13];
  uint64_t v12;

  v1 = *(_OWORD *)(a1 + 176);
  v11[10] = *(_OWORD *)(a1 + 160);
  v11[11] = v1;
  v11[12] = *(_OWORD *)(a1 + 192);
  v12 = *(_QWORD *)(a1 + 208);
  v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v11[8] = *(_OWORD *)(a1 + 128);
  v11[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v11);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v7 = v12;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  _UNKNOWN **v13;
  _OWORD v14[12];
  uint64_t v15;

  v1 = *(_OWORD *)(a1 + 176);
  v14[10] = *(_OWORD *)(a1 + 160);
  v14[11] = v1;
  v15 = *(_QWORD *)(a1 + 192);
  v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v6;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v7 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if (v8)
  {
    *((_QWORD *)&v12 + 1) = &type metadata for EmphasizeActionHandler;
    v13 = &protocol witness table for EmphasizeActionHandler;
    *(_QWORD *)&v11 = v7;
    *((_QWORD *)&v11 + 1) = v8;
  }
  else
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  v9 = v15;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;
  _OWORD v15[15];
  uint64_t v16;

  v1 = *(_OWORD *)(a1 + 208);
  v15[12] = *(_OWORD *)(a1 + 192);
  v15[13] = v1;
  v15[14] = *(_OWORD *)(a1 + 224);
  v16 = *(_QWORD *)(a1 + 240);
  v2 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v15[10] = *(_OWORD *)(a1 + 160);
  v15[11] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v7;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (v8 == 1)
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  else
  {
    *((_QWORD *)&v13 + 1) = &type metadata for PlayAudioActionHandler;
    v14 = &protocol witness table for PlayAudioActionHandler;
    *(_QWORD *)&v12 = v8;
    BYTE8(v12) = v9 & 1;
  }
  v10 = v16;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10);
  return swift_endAccess();
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  _UNKNOWN **v11;
  _OWORD v12[13];
  uint64_t v13;

  v1 = *(_OWORD *)(a1 + 176);
  v12[10] = *(_OWORD *)(a1 + 160);
  v12[11] = v1;
  v12[12] = *(_OWORD *)(a1 + 192);
  v13 = *(_QWORD *)(a1 + 208);
  v2 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  v12[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v12[8] = *(_OWORD *)(a1 + 128);
  v12[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12) & 1) != 0)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
  }
  else
  {
    *((_QWORD *)&v10 + 1) = &type metadata for SetEntityEnabledActionHandler;
    v11 = &protocol witness table for SetEntityEnabledActionHandler;
  }
  v7 = v13;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 4uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 4uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *__src, Swift::UInt a2)
{
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, __dst[19], &demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v4 = __dst[37];
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v5, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t result;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;
  uint64_t v5;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)__dst);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v2 = __dst[37];
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v3, v2);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 0x10uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 0x20uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v1 = __dst[37];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  _BYTE v5[80];
  _BYTE v6[80];
  uint64_t __dst[58];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v5);
  outlined init with take of Transform?((uint64_t)v5, (uint64_t)v6, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v1 = __dst[57];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v1 = __dst[37];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v3);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v1 = __dst[45];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)(__dst) & 1) != 0)
  {
    v5 = 0;
    v3 = 0u;
    v4 = 0u;
  }
  else
  {
    *((_QWORD *)&v4 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  }
  v1 = __dst[37];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v3, v1);
  return swift_endAccess();
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[80];
  uint64_t __dst[58];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v15);
  v1 = v15[0];
  v2 = v15[1];
  v3 = v15[2];
  v4 = v15[3];
  v5 = v15[4];
  v6 = v15[5];
  v7 = v16;
  v8 = v17;
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v18, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if ((v18[64] & 1) != 0)
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  else
  {
    *((_QWORD *)&v13 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    v14 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Transform> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v9 = swift_allocObject();
    *(_QWORD *)&v12 = v9;
    *(_QWORD *)(v9 + 16) = v1;
    *(_QWORD *)(v9 + 24) = v2;
    *(_QWORD *)(v9 + 32) = v3;
    *(_QWORD *)(v9 + 40) = v4;
    *(_QWORD *)(v9 + 48) = v5;
    *(_QWORD *)(v9 + 56) = v6;
    *(_BYTE *)(v9 + 64) = v7 & 1;
    *(_QWORD *)(v9 + 72) = v8;
  }
  v10 = __dst[57];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10);
  return swift_endAccess();
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v1 = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((v3 & 1) != 0)
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  else
  {
    v4 = v1;
    v5 = v2;
    *((_QWORD *)&v9 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
    LODWORD(v8) = v4;
    BYTE4(v8) = BYTE4(v4) & 1;
    v10 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Float> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Float>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *((_QWORD *)&v8 + 1) = v5;
  }
  v6 = __dst[37];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v8, v6);
  return swift_endAccess();
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10, (void (*)(_OWORD *))OrbitEntityActionHandler.actionUpdated(event:));
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1, Swift::UInt a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = a1[13];
  v23 = a1[12];
  v24 = v3;
  v4 = a1[15];
  v25 = a1[14];
  v26 = v4;
  v5 = a1[9];
  v19 = a1[8];
  v20 = v5;
  v6 = a1[11];
  v21 = a1[10];
  v22 = v6;
  v7 = a1[5];
  v16[4] = a1[4];
  v16[5] = v7;
  v8 = a1[7];
  v17 = a1[6];
  v18 = v8;
  v9 = a1[1];
  v16[0] = *a1;
  v16[1] = v9;
  v10 = a1[3];
  v16[2] = a1[2];
  v16[3] = v10;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v16);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v17 + 1), &demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v12 = *((_QWORD *)&v26 + 1);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    v15 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v13, v12);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = a1[13];
  v23 = a1[12];
  v24 = v3;
  v25 = a1[14];
  v4 = a1[9];
  v19 = a1[8];
  v20 = v4;
  v5 = a1[11];
  v21 = a1[10];
  v22 = v5;
  v6 = a1[5];
  v15[4] = a1[4];
  v16 = v6;
  v7 = a1[7];
  v17 = a1[6];
  v18 = v7;
  v8 = a1[1];
  v15[0] = *a1;
  v15[1] = v8;
  v9 = a1[3];
  v15[2] = a1[2];
  v15[3] = v9;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1), &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v11 = *((_QWORD *)&v25 + 1);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    v14 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v12, v11);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = a1[13];
  v23 = a1[12];
  v24 = v3;
  v25 = a1[14];
  v4 = a1[9];
  v19 = a1[8];
  v20 = v4;
  v5 = a1[11];
  v21 = a1[10];
  v22 = v5;
  v6 = a1[5];
  v15[4] = a1[4];
  v16 = v6;
  v7 = a1[7];
  v17 = a1[6];
  v18 = v7;
  v8 = a1[1];
  v15[0] = *a1;
  v15[1] = v8;
  v9 = a1[3];
  v15[2] = a1[2];
  v15[3] = v9;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1), &demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v11 = *((_QWORD *)&v25 + 1);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    v14 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v12, v11);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  _UNKNOWN **v15;
  _OWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = a1[13];
  v23 = a1[12];
  v24 = v3;
  v4 = a1[15];
  v25 = a1[14];
  v26 = v4;
  v5 = a1[9];
  v19 = a1[8];
  v20 = v5;
  v6 = a1[11];
  v21 = a1[10];
  v22 = v6;
  v7 = a1[5];
  v16[4] = a1[4];
  v16[5] = v7;
  v8 = a1[7];
  v17 = a1[6];
  v18 = v8;
  v9 = a1[1];
  v16[0] = *a1;
  v16[1] = v9;
  v10 = a1[3];
  v16[2] = a1[2];
  v16[3] = v10;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v16);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v17 + 1));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v12 = *((_QWORD *)&v26 + 1);
    v14 = &type metadata for ImpulseActionHandler;
    v15 = &protocol witness table for ImpulseActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v13, v12);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  _UNKNOWN **v14;
  _OWORD v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = a1[11];
  v22 = a1[10];
  v23 = v3;
  v4 = a1[13];
  v24 = a1[12];
  v25 = v4;
  v5 = a1[7];
  v18 = a1[6];
  v19 = v5;
  v6 = a1[9];
  v20 = a1[8];
  v21 = v6;
  v7 = a1[3];
  v15[2] = a1[2];
  v15[3] = v7;
  v8 = a1[5];
  v16 = a1[4];
  v17 = v8;
  v9 = a1[1];
  v15[0] = *a1;
  v15[1] = v9;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v11 = *((_QWORD *)&v25 + 1);
    v13 = &type metadata for NotificationActionHandler;
    v14 = &protocol witness table for NotificationActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v12, v11);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  _OWORD v15[6];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = a1[13];
  v22 = a1[12];
  v23 = v3;
  v4 = a1[15];
  v24 = a1[14];
  v25 = v4;
  v5 = a1[9];
  v18 = a1[8];
  v19 = v5;
  v6 = a1[11];
  v20 = a1[10];
  v21 = v6;
  v7 = a1[5];
  v15[4] = a1[4];
  v15[5] = v7;
  v8 = a1[7];
  v16 = a1[6];
  v17 = v8;
  v9 = a1[1];
  v15[0] = *a1;
  v15[1] = v9;
  v10 = a1[3];
  v15[2] = a1[2];
  v15[3] = v10;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (result != 1)
  {
    v12 = result;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v13 = *((_QWORD *)&v25 + 1);
    v14[3] = &type metadata for PlayAnimationActionHandler;
    v14[4] = &protocol witness table for PlayAnimationActionHandler;
    v14[0] = v12;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v14, v13);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v12);
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[15];
  __int128 v15;

  v1 = a1[13];
  v14[12] = a1[12];
  v14[13] = v1;
  v2 = a1[15];
  v14[14] = a1[14];
  v15 = v2;
  v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  v5 = a1[5];
  v14[4] = a1[4];
  v14[5] = v5;
  v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)v14);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v10 = *((_QWORD *)&v15 + 1);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[14];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v14 = a1[14];
  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)v13);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v9 = *((_QWORD *)&v14 + 1);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v9);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[14];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v14 = a1[14];
  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)v13);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v9 = *((_QWORD *)&v14 + 1);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v9);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10, (void (*)(_OWORD *))OrbitEntityActionHandler.actionStarted(event:));
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v2 = a1[15];
  v13[14] = a1[14];
  v14 = v2;
  v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = *((_QWORD *)&v14 + 1);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[14];
  __int128 v13;

  v1 = a1[13];
  v12[12] = a1[12];
  v12[13] = v1;
  v13 = a1[14];
  v2 = a1[9];
  v12[8] = a1[8];
  v12[9] = v2;
  v3 = a1[11];
  v12[10] = a1[10];
  v12[11] = v3;
  v4 = a1[5];
  v12[4] = a1[4];
  v12[5] = v4;
  v5 = a1[7];
  v12[6] = a1[6];
  v12[7] = v5;
  v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  v7 = a1[3];
  v12[2] = a1[2];
  v12[3] = v7;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = *((_QWORD *)&v13 + 1);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[14];
  __int128 v13;

  v1 = a1[13];
  v12[12] = a1[12];
  v12[13] = v1;
  v13 = a1[14];
  v2 = a1[9];
  v12[8] = a1[8];
  v12[9] = v2;
  v3 = a1[11];
  v12[10] = a1[10];
  v12[11] = v3;
  v4 = a1[5];
  v12[4] = a1[4];
  v12[5] = v4;
  v5 = a1[7];
  v12[6] = a1[6];
  v12[7] = v5;
  v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  v7 = a1[3];
  v12[2] = a1[2];
  v12[3] = v7;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = *((_QWORD *)&v13 + 1);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v2 = a1[15];
  v13[14] = a1[14];
  v14 = v2;
  v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = *((_QWORD *)&v14 + 1);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  __int128 v14;
  uint64_t v15[24];
  uint64_t v16[24];

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v2 = a1[15];
  v13[14] = a1[14];
  v14 = v2;
  v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, (uint64_t)v11);
  outlined init with take of Transform?((uint64_t)v11, (uint64_t)v15, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  if (_s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(v16) != 1)
    outlined release of OrbitEntityActionHandler?(v15);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = *((_QWORD *)&v14 + 1);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v2 = a1[15];
  v13[14] = a1[14];
  v14 = v2;
  v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = *((_QWORD *)&v14 + 1);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[13];
  __int128 v13;

  v1 = a1[11];
  v12[10] = a1[10];
  v12[11] = v1;
  v2 = a1[13];
  v12[12] = a1[12];
  v13 = v2;
  v3 = a1[7];
  v12[6] = a1[6];
  v12[7] = v3;
  v4 = a1[9];
  v12[8] = a1[8];
  v12[9] = v4;
  v5 = a1[3];
  v12[2] = a1[2];
  v12[3] = v5;
  v6 = a1[5];
  v12[4] = a1[4];
  v12[5] = v6;
  v7 = a1[1];
  v12[0] = *a1;
  v12[1] = v7;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v8 = *((_QWORD *)&v13 + 1);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[15];
  __int128 v15;

  v1 = a1[13];
  v14[12] = a1[12];
  v14[13] = v1;
  v2 = a1[15];
  v14[14] = a1[14];
  v15 = v2;
  v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  v5 = a1[5];
  v14[4] = a1[4];
  v14[5] = v5;
  v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  v9 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if (v9 != 1)
    outlined consume of __ImageBasedLightComponent?(v9);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v10 = *((_QWORD *)&v15 + 1);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v12, v10);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[15];
  __int128 v15;

  v1 = a1[13];
  v14[12] = a1[12];
  v14[13] = v1;
  v2 = a1[15];
  v14[14] = a1[14];
  v15 = v2;
  v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  v5 = a1[5];
  v14[4] = a1[4];
  v14[5] = v5;
  v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14) & 1) != 0)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  else
  {
    *((_QWORD *)&v12 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  }
  v9 = *((_QWORD *)&v15 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[14];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v14 = a1[14];
  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>) & 1) != 0)
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
  }
  else
  {
    *((_QWORD *)&v11 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  }
  v8 = *((_QWORD *)&v14 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[14];
  __int128 v14;

  v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  v14 = a1[14];
  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>) & 1) != 0)
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
  }
  else
  {
    *((_QWORD *)&v11 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  }
  v8 = *((_QWORD *)&v14 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _UNKNOWN **v20;
  _OWORD v21[15];
  __int128 v22;

  v1 = a1[13];
  v21[12] = a1[12];
  v21[13] = v1;
  v2 = a1[15];
  v21[14] = a1[14];
  v22 = v2;
  v3 = a1[9];
  v21[8] = a1[8];
  v21[9] = v3;
  v4 = a1[11];
  v21[10] = a1[10];
  v21[11] = v4;
  v5 = a1[5];
  v21[4] = a1[4];
  v21[5] = v5;
  v6 = a1[7];
  v21[6] = a1[6];
  v21[7] = v6;
  v7 = a1[1];
  v21[0] = *a1;
  v21[1] = v7;
  v8 = a1[3];
  v21[2] = a1[2];
  v21[3] = v8;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v21);
  if ((v11 & 0x100) != 0)
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
  }
  else
  {
    v12 = v9;
    v13 = v10;
    v14 = v11;
    *((_QWORD *)&v19 + 1) = &type metadata for SpinActionHandler;
    v20 = &protocol witness table for SpinActionHandler;
    v15 = swift_allocObject();
    *(_QWORD *)&v18 = v15;
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v13;
    *(_BYTE *)(v15 + 32) = v14 & 1;
  }
  v16 = *((_QWORD *)&v22 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v18, v16);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  _UNKNOWN **v13;
  _OWORD v14[15];
  __int128 v15;

  v1 = a1[13];
  v14[12] = a1[12];
  v14[13] = v1;
  v2 = a1[15];
  v14[14] = a1[14];
  v15 = v2;
  v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  v5 = a1[5];
  v14[4] = a1[4];
  v14[5] = v5;
  v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14) & 1) != 0)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
  }
  else
  {
    *((_QWORD *)&v12 + 1) = &type metadata for ImpulseActionHandler;
    v13 = &protocol witness table for ImpulseActionHandler;
  }
  v9 = *((_QWORD *)&v15 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _UNKNOWN **v12;
  _OWORD v13[13];
  __int128 v14;

  v1 = a1[11];
  v13[10] = a1[10];
  v13[11] = v1;
  v2 = a1[13];
  v13[12] = a1[12];
  v14 = v2;
  v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  v4 = a1[9];
  v13[8] = a1[8];
  v13[9] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = a1[5];
  v13[4] = a1[4];
  v13[5] = v6;
  v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13) & 1) != 0)
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
  }
  else
  {
    *((_QWORD *)&v11 + 1) = &type metadata for NotificationActionHandler;
    v12 = &protocol witness table for NotificationActionHandler;
  }
  v8 = *((_QWORD *)&v14 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v8);
  return swift_endAccess();
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;
  _OWORD v15[15];
  __int128 v16;

  v1 = a1[13];
  v15[12] = a1[12];
  v15[13] = v1;
  v2 = a1[15];
  v15[14] = a1[14];
  v16 = v2;
  v3 = a1[9];
  v15[8] = a1[8];
  v15[9] = v3;
  v4 = a1[11];
  v15[10] = a1[10];
  v15[11] = v4;
  v5 = a1[5];
  v15[4] = a1[4];
  v15[5] = v5;
  v6 = a1[7];
  v15[6] = a1[6];
  v15[7] = v6;
  v7 = a1[1];
  v15[0] = *a1;
  v15[1] = v7;
  v8 = a1[3];
  v15[2] = a1[2];
  v15[3] = v8;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v9 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (v9 == 1)
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  else
  {
    *((_QWORD *)&v13 + 1) = &type metadata for PlayAnimationActionHandler;
    v14 = &protocol witness table for PlayAnimationActionHandler;
    *(_QWORD *)&v12 = v9;
  }
  v10 = *((_QWORD *)&v16 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, (void (*)(uint64_t *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, (void (*)(uint64_t *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, (void (*)(uint64_t *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 1uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 1uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 1uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 1uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (void (*)(_QWORD, _QWORD))outlined consume of BlendShapeWeights??);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (void (*)(_QWORD, _QWORD))outlined consume of JointTransforms??);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>);
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?, &lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, void (*a4)(uint64_t *), unint64_t *a5)
{
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t __dst[34];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((result & 1) == 0)
  {
    a4(__dst);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v10 = __dst[33];
    v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, Swift::UInt a4, unint64_t *a5)
{
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t __dst[34];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a4, __dst[15], a2);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v10 = __dst[33];
    v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t __dst[34];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v5 = __dst[33];
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v7, v5);
  return swift_endAccess();
}

{
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t __dst[40];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v5 = __dst[39];
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v7, v5);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t __dst[34];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3) & 1) != 0)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
  }
  else
  {
    *((_QWORD *)&v10 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    v11 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  }
  v7 = __dst[33];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v9, v7);
  return swift_endAccess();
}

{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t __dst[40];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v7 = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((v10 & 1) != 0)
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
  }
  else
  {
    v11 = v7;
    v12 = v8;
    v13 = v9;
    *((_QWORD *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    *(_QWORD *)&v16 = v11;
    BYTE8(v16) = v12 & 1;
    v18 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    *(_QWORD *)&v17 = v13;
  }
  v14 = __dst[39];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v16, v14);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(_OWORD *), unint64_t *a5)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[15];
  uint64_t v21;

  v8 = *(_OWORD *)(a1 + 208);
  v20[12] = *(_OWORD *)(a1 + 192);
  v20[13] = v8;
  v20[14] = *(_OWORD *)(a1 + 224);
  v21 = *(_QWORD *)(a1 + 240);
  v9 = *(_OWORD *)(a1 + 144);
  v20[8] = *(_OWORD *)(a1 + 128);
  v20[9] = v9;
  v10 = *(_OWORD *)(a1 + 176);
  v20[10] = *(_OWORD *)(a1 + 160);
  v20[11] = v10;
  v11 = *(_OWORD *)(a1 + 80);
  v20[4] = *(_OWORD *)(a1 + 64);
  v20[5] = v11;
  v12 = *(_OWORD *)(a1 + 112);
  v20[6] = *(_OWORD *)(a1 + 96);
  v20[7] = v12;
  v13 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v13;
  v14 = *(_OWORD *)(a1 + 48);
  v20[2] = *(_OWORD *)(a1 + 32);
  v20[3] = v14;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v20, a2, a3);
  if ((result & 1) == 0)
  {
    a4(v20);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v16 = v21;
    v18 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v19 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v17, v16);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, Swift::UInt a4, unint64_t *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[6];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v9 = *(_OWORD *)(a1 + 208);
  v28 = *(_OWORD *)(a1 + 192);
  v29 = v9;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_QWORD *)(a1 + 240);
  v10 = *(_OWORD *)(a1 + 144);
  v24 = *(_OWORD *)(a1 + 128);
  v25 = v10;
  v11 = *(_OWORD *)(a1 + 176);
  v26 = *(_OWORD *)(a1 + 160);
  v27 = v11;
  v12 = *(_OWORD *)(a1 + 80);
  v21[4] = *(_OWORD *)(a1 + 64);
  v21[5] = v12;
  v13 = *(_OWORD *)(a1 + 112);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = v13;
  v14 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v14;
  v15 = *(_OWORD *)(a1 + 48);
  v21[2] = *(_OWORD *)(a1 + 32);
  v21[3] = v15;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v21, a2, a3);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a4, v22, a2);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v17 = v31;
    v19 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v20 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v18, v17);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[15];
  uint64_t v15;

  v3 = *(_OWORD *)(a1 + 208);
  v14[12] = *(_OWORD *)(a1 + 192);
  v14[13] = v3;
  v14[14] = *(_OWORD *)(a1 + 224);
  v15 = *(_QWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v4;
  v5 = *(_OWORD *)(a1 + 176);
  v14[10] = *(_OWORD *)(a1 + 160);
  v14[11] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v9;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14, a2, a3);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v10 = v15;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v12, v10);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[15];
  uint64_t v20;

  v7 = *(_OWORD *)(a1 + 208);
  v19[12] = *(_OWORD *)(a1 + 192);
  v19[13] = v7;
  v19[14] = *(_OWORD *)(a1 + 224);
  v20 = *(_QWORD *)(a1 + 240);
  v8 = *(_OWORD *)(a1 + 144);
  v19[8] = *(_OWORD *)(a1 + 128);
  v19[9] = v8;
  v9 = *(_OWORD *)(a1 + 176);
  v19[10] = *(_OWORD *)(a1 + 160);
  v19[11] = v9;
  v10 = *(_OWORD *)(a1 + 80);
  v19[4] = *(_OWORD *)(a1 + 64);
  v19[5] = v10;
  v11 = *(_OWORD *)(a1 + 112);
  v19[6] = *(_OWORD *)(a1 + 96);
  v19[7] = v11;
  v12 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v12;
  v13 = *(_OWORD *)(a1 + 48);
  v19[2] = *(_OWORD *)(a1 + 32);
  v19[3] = v13;
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  if ((specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v19, a2, a3) & 1) != 0)
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
  }
  else
  {
    *((_QWORD *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    v18 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3, (uint64_t)&protocol conformance descriptor for SetEntityPropertyActionHandler<A>);
  }
  v14 = v20;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v16, v14);
  return swift_endAccess();
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[58];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[40];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, (void (*)(uint64_t *))specialized FromToByActionHandler.actionUpdated(event:), &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v2[40];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, (void (*)(uint64_t *))specialized FromToByActionHandler.actionUpdated(event:), &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, (void (*)(_BYTE *))BillboardActionHandler.actionUpdated(event:));
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, (void (*)(_BYTE *))BillboardActionHandler.actionEnded(event:));
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2, 8uLL);
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2, 0x10uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  v1 = v8;
  v2 = v9;
  v3 = v10;
  result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(_BYTE *)(v6 + 32) = v2 & 1;
    *(_QWORD *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2, 0x20uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, void (*a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3, v9);
  if (*(_QWORD *)&v9[0] != 1)
    a4(*(_QWORD *)&v9[0], *((_QWORD *)&v9[0] + 1));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v7 = __dst[37];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src, Swift::UInt a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  _QWORD v15[6];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[80];
  uint64_t __dst[58];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v15);
  v3 = v15[0];
  v4 = v15[1];
  v5 = v15[2];
  v6 = v15[3];
  v7 = v15[4];
  v8 = v15[5];
  v9 = v16;
  v10 = v17;
  result = outlined init with take of Transform?((uint64_t)v15, (uint64_t)v18, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if ((v18[64] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, __dst[39], &demangling cache variable for type metadata for FromToByAction<Transform>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v12 = __dst[57];
    v14[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    v14[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Transform> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Transform>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v13 = swift_allocObject();
    v14[0] = v13;
    *(_QWORD *)(v13 + 16) = v3;
    *(_QWORD *)(v13 + 24) = v4;
    *(_QWORD *)(v13 + 32) = v5;
    *(_QWORD *)(v13 + 40) = v6;
    *(_QWORD *)(v13 + 48) = v7;
    *(_QWORD *)(v13 + 56) = v8;
    *(_BYTE *)(v13 + 64) = v9 & 1;
    *(_QWORD *)(v13 + 72) = v10;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v14, v12);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((v5 & 1) == 0)
  {
    v6 = result;
    v7 = v4;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, __dst[19], &demangling cache variable for type metadata for FromToByAction<Float>);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v8 = __dst[37];
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
    v9 = v6;
    v10 = BYTE4(v6) & 1;
    v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Float> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Float>, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v11 = v7;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v9, v8);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 8uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 8uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  int8x16_t v11[3];
  _BYTE v12[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3, v11);
  outlined init with take of Transform?((uint64_t)v11, (uint64_t)v12, a4);
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  v7 = __dst[45];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  int8x16_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1)
    swift_once();
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3, &v18);
  v9 = v18;
  v10 = v19;
  v11 = v20;
  outlined init with take of Transform?((uint64_t)&v18, (uint64_t)v21, a4);
  if ((v21[32] & 1) != 0)
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
  }
  else
  {
    *((_QWORD *)&v16 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    v17 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v12 = swift_allocObject();
    *(_QWORD *)&v15 = v12;
    *(int8x16_t *)(v12 + 16) = v9;
    *(_BYTE *)(v12 + 32) = v10 & 1;
    *(_QWORD *)(v12 + 40) = v11;
  }
  v13 = __dst[45];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v15, v13);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, Swift::UInt a4, unint64_t *a5)
{
  uint64_t result;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t __dst[40];

  memcpy(__dst, __src, sizeof(__dst));
  result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((v12 & 1) == 0)
  {
    v13 = result;
    v14 = v10;
    v15 = v11;
    specialized static EntityAction.__unsubscribe(from:_:)(a4, __dst[21], a2);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v16 = __dst[39];
    v20 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v17 = v13;
    v18 = v14 & 1;
    v21 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3, (uint64_t)&protocol conformance descriptor for FromToByActionHandler<A>);
    v19 = v15;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v17, v16);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1, Swift::UInt a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _OWORD v20[6];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = a1[13];
  v27 = a1[12];
  v28 = v3;
  v4 = a1[15];
  v29 = a1[14];
  v30 = v4;
  v5 = a1[9];
  v23 = a1[8];
  v24 = v5;
  v6 = a1[11];
  v25 = a1[10];
  v26 = v6;
  v7 = a1[5];
  v20[4] = a1[4];
  v20[5] = v7;
  v8 = a1[7];
  v21 = a1[6];
  v22 = v8;
  v9 = a1[1];
  v20[0] = *a1;
  v20[1] = v9;
  v10 = a1[3];
  v20[2] = a1[2];
  v20[3] = v10;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v20);
  if ((v13 & 0x100) == 0)
  {
    v14 = result;
    v15 = v12;
    v16 = v13;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v21 + 1));
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v17 = *((_QWORD *)&v30 + 1);
    v19[3] = &type metadata for SpinActionHandler;
    v19[4] = &protocol witness table for SpinActionHandler;
    v18 = swift_allocObject();
    v19[0] = v18;
    *(_QWORD *)(v18 + 16) = v14;
    *(_QWORD *)(v18 + 24) = v15;
    *(_BYTE *)(v18 + 32) = v16 & 1;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v19, v17);
    return swift_endAccess();
  }
  return result;
}

uint64_t *specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 4uLL);
}

uint64_t *specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 8uLL);
}

uint64_t *specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 0x10uLL);
}

uint64_t *specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[16];

  v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 0x20uLL);
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t result;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;

  v1 = a1[13];
  v39 = a1[12];
  v40 = v1;
  v2 = a1[15];
  v41 = a1[14];
  v42 = v2;
  v3 = a1[9];
  v35 = a1[8];
  v36 = v3;
  v4 = a1[11];
  v37 = a1[10];
  v38 = v4;
  v5 = a1[5];
  v31 = a1[4];
  v32 = v5;
  v6 = a1[7];
  v33 = a1[6];
  v34 = v6;
  v7 = a1[1];
  v27 = *a1;
  v28 = v7;
  v8 = a1[3];
  v29 = a1[2];
  v30 = v8;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)&v27);
  if ((result & 1) == 0)
  {
    v24 = v40;
    v25 = v41;
    v26 = v42;
    v20 = v36;
    v21 = v37;
    v22 = v38;
    v23 = v39;
    v15 = v31;
    v16 = v32;
    v17 = v33;
    v18 = v34;
    v19 = v35;
    v11 = v27;
    v12 = v28;
    v13 = v29;
    v14 = v30;
    ImpulseActionHandler.applyImpulse(event:)(&v11);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v10 = v42.i64[1];
    v12.i64[1] = (uint64_t)&type metadata for ImpulseActionHandler;
    v13.i64[0] = (uint64_t)&protocol witness table for ImpulseActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(__int128 *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v1 = a1[11];
  v33 = a1[10];
  v34 = v1;
  v35 = a1[12];
  v36 = *((_QWORD *)a1 + 26);
  v2 = a1[7];
  v29 = a1[6];
  v30 = v2;
  v3 = a1[9];
  v31 = a1[8];
  v32 = v3;
  v4 = a1[3];
  v25 = a1[2];
  v26 = v4;
  v5 = a1[5];
  v27 = a1[4];
  v28 = v5;
  v6 = a1[1];
  v23 = *a1;
  v24 = v6;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)&v23);
  if ((result & 1) == 0)
  {
    v20 = v34;
    v21 = v35;
    v16 = v30;
    v17 = v31;
    v22 = v36;
    v18 = v32;
    v19 = v33;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    v9 = v23;
    v10 = v24;
    specialized SetEntityEnabledActionHandler.setEntityEnabled(event:)((uint64_t)&v9);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v8 = v36;
    *((_QWORD *)&v10 + 1) = &type metadata for SetEntityEnabledActionHandler;
    *(_QWORD *)&v11 = &protocol witness table for SetEntityEnabledActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v9, v8);
    return swift_endAccess();
  }
  return result;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v1 = a1[11];
  v34 = a1[10];
  v35 = v1;
  v2 = a1[13];
  v36 = a1[12];
  v37 = v2;
  v3 = a1[7];
  v30 = a1[6];
  v31 = v3;
  v4 = a1[9];
  v32 = a1[8];
  v33 = v4;
  v5 = a1[3];
  v26 = a1[2];
  v27 = v5;
  v6 = a1[5];
  v28 = a1[4];
  v29 = v6;
  v7 = a1[1];
  v24 = *a1;
  v25 = v7;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)&v24);
  if ((result & 1) == 0)
  {
    v21 = v35;
    v22 = v36;
    v23 = v37;
    v17 = v31;
    v18 = v32;
    v19 = v33;
    v20 = v34;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    v16 = v30;
    v10 = v24;
    v11 = v25;
    specialized NotificationActionHandler.postNotification(event:)(&v10);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v9 = *((_QWORD *)&v37 + 1);
    *((_QWORD *)&v11 + 1) = &type metadata for NotificationActionHandler;
    *(_QWORD *)&v12 = &protocol witness table for NotificationActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v10, v9);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, Swift::UInt a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];
  ValueMetadata *v12;
  _UNKNOWN **v13;
  _OWORD v14[4];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 160);
  v22 = v3;
  v23 = *(_OWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 96);
  v18 = v4;
  v5 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v8;
  result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, v15);
    if (one-time initialization token for actionHandlers != -1)
      swift_once();
    v10 = v24;
    v12 = &type metadata for SetEntityEnabledActionHandler;
    v13 = &protocol witness table for SetEntityEnabledActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized __Engine.Configuration.device.setter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = REGetRetainCount();
  v6 = *(_QWORD *)(v4 + 16);
  if (v5 >= 2)
  {
    swift_retain();
    v6 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    swift_release_n();
    *v2 = v7;
  }
  return a2(v6, a1);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t sub_21BB6CE18()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for __Engine()
{
  return objc_opt_self();
}

uint64_t sub_21BB6CE48@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t sub_21BB6CE74(unsigned int *a1)
{
  unsigned int v2;

  v2 = *a1;
  return __Engine.Configuration.clockMode.setter(&v2);
}

uint64_t sub_21BB6CEA8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E70], a2);
}

uint64_t sub_21BB6CEB4(char *a1)
{
  return __Engine.Configuration.useMetal.setter(*a1);
}

uint64_t sub_21BB6CED8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E40], a2);
}

uint64_t sub_21BB6CEE4(char *a1)
{
  return __Engine.Configuration.forExportOnly.setter(*a1);
}

uint64_t sub_21BB6CF08@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E80], a2);
}

uint64_t sub_21BB6CF14(char *a1)
{
  return __Engine.Configuration.useRealityIO.setter(*a1);
}

uint64_t sub_21BB6CF38@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E78], a2);
}

uint64_t sub_21BB6CF44(char *a1)
{
  return __Engine.Configuration.usePhysicsSceneSystem.setter(*a1);
}

uint64_t sub_21BB6CF68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  *a1 = result;
  return result;
}

uint64_t sub_21BB6CF94()
{
  return __Engine.Configuration.assetRuntimeSizeLimit.setter();
}

id sub_21BB6CFB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E28], a2);
}

uint64_t sub_21BB6CFC4()
{
  uint64_t v0;

  v0 = swift_unknownObjectRetain();
  specialized __Engine.Configuration.device.setter(v0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EA0]);
  return swift_unknownObjectRelease();
}

uint64_t sub_21BB6CFFC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E48], a2);
}

uint64_t sub_21BB6D008(char *a1)
{
  return __Engine.Configuration.isHostingSharedAudioSimulation.setter(*a1);
}

id sub_21BB6D02C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E38], a2);
}

void sub_21BB6D038(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized __Engine.Configuration.device.setter((uint64_t)v1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE21EB0]);

}

uint64_t sub_21BB6D07C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t sub_21BB6D0A8(unsigned int *a1)
{
  unsigned int v2;

  v2 = *a1;
  return __Engine.Configuration.__createServices.setter(&v2);
}

uint64_t sub_21BB6D0DC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t sub_21BB6D108(unsigned int *a1)
{
  unsigned int v2;

  v2 = *a1;
  return __Engine.Configuration.__updateServices.setter(&v2);
}

uint64_t sub_21BB6D13C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t sub_21BB6D168(unsigned int *a1)
{
  unsigned int v2;

  v2 = *a1;
  return __Engine.Configuration.__startupOptions.setter(&v2);
}

uint64_t sub_21BB6D19C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t sub_21BB6D1C8(unsigned int *a1)
{
  unsigned int v2;

  v2 = *a1;
  return __Engine.Configuration.__renderFlags.setter(&v2);
}

uint64_t sub_21BB6D1FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_21BB6D248@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 48);
  return result;
}

uint64_t sub_21BB6D28C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 48) = v2;
  return result;
}

uint64_t sub_21BB6D2CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REEngineGetAcceptingInput();
  *a1 = result;
  return result;
}

void sub_21BB6D2F8()
{
  JUMPOUT(0x22076CEC0);
}

uint64_t method lookup function for __Engine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __Engine.__coreEngine.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of __Engine.asyncOnEngineQueue(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of __Engine.asyncAfterOnEngineQueue(deadline:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __Engine.services.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __Engine.isRunning.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of __Engine.acceptingInput.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of __Engine.acceptingInput.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of __Engine.acceptingInput.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of __Engine.__allocating_init(configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of __Engine.start()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of __Engine.__start()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of __Engine.__stop()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of __Engine.__registerREKitBuiltInActions()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of __Engine.__registerREKitBuiltInForceEffects()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

ValueMetadata *type metadata accessor for __Engine.Configuration()
{
  return &type metadata for __Engine.Configuration;
}

ValueMetadata *type metadata accessor for EngineRenderEvent()
{
  return &type metadata for EngineRenderEvent;
}

ValueMetadata *type metadata accessor for EngineUpdateEvent()
{
  return &type metadata for EngineUpdateEvent;
}

unint64_t lazy protocol witness table accessor for type TurbulenceForceEffect and conformance TurbulenceForceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TurbulenceForceEffect, &type metadata for TurbulenceForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TurbulenceForceEffect, &type metadata for TurbulenceForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect);
  }
  return result;
}

uint64_t partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_BYTE *))(v2 + 16));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type DragForceEffect and conformance DragForceEffect, (uint64_t)&type metadata for DragForceEffect, (void (*)(_OWORD *))outlined release of ForceEffectEvent<DragForceEffect>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_OWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type VortexForceEffect and conformance VortexForceEffect, (uint64_t)&type metadata for VortexForceEffect, (void (*)(_BYTE *))outlined release of ForceEffectEvent<VortexForceEffect>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_BYTE *))(v2 + 16));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect, (uint64_t)&type metadata for ConstantRadialForceEffect, (void (*)(_OWORD *))outlined release of ForceEffectEvent<ConstantRadialForceEffect>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_OWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type ConstantForceEffect and conformance ConstantForceEffect, (uint64_t)&type metadata for ConstantForceEffect, (void (*)(_BYTE *))outlined release of ForceEffectEvent<ConstantForceEffect>);
}

uint64_t outlined release of ForceEffectEvent<TurbulenceForceEffect>(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type DragForceEffect and conformance DragForceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect;
  if (!lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for DragForceEffect, &type metadata for DragForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect;
  if (!lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for DragForceEffect, &type metadata for DragForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VortexForceEffect and conformance VortexForceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect;
  if (!lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VortexForceEffect, &type metadata for VortexForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect;
  if (!lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VortexForceEffect, &type metadata for VortexForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect);
  }
  return result;
}

uint64_t outlined release of ForceEffectEvent<VortexForceEffect>(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type RadialForceEffect and conformance RadialForceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect;
  if (!lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RadialForceEffect, &type metadata for RadialForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect;
  if (!lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RadialForceEffect, &type metadata for RadialForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantRadialForceEffect, &type metadata for ConstantRadialForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantRadialForceEffect, &type metadata for ConstantRadialForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect);
  }
  return result;
}

uint64_t outlined release of ForceEffectEvent<ConstantRadialForceEffect>(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ConstantForceEffect and conformance ConstantForceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantForceEffect, &type metadata for ConstantForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ConstantForceEffect, &type metadata for ConstantForceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect);
  }
  return result;
}

uint64_t partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)(uint64_t *a1, _OWORD *a2, unsigned __int8 *a3, double *a4, double *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;

  return thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)(a1, a2, a3, a4, a5, a6, a7, a8, *(uint64_t (**)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, _QWORD, double, double))(v8 + 16));
}

uint64_t sub_21BB6D8B4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Int>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Int>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<simd_quatf>>, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<simd_quatf>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD4<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD4<Float>>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD3<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD3<Float>>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD2<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD2<Float>>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Double>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Double>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<BlendShapeWeights>>, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<BlendShapeWeights>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<JointTransforms>>, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<JointTransforms>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), (void (*)(_QWORD *__return_ptr, uint64_t))specialized ActionEventData.action<A>(), &demangling cache variable for type metadata for FromToByAction<simd_quatf>?, (unsigned int (*)(_BYTE *))_s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<simd_quatf>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<simd_quatf>>, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<simd_quatf>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), (void (*)(_QWORD *__return_ptr, uint64_t))specialized ActionEventData.action<A>(), &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>?, (unsigned int (*)(_BYTE *))_s17RealityFoundation14FromToByActionVys5SIMD4VySfGGSgWOg, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<SIMD4<Float>>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD4<Float>>>, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<SIMD4<Float>>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), (void (*)(_QWORD *__return_ptr, uint64_t))specialized ActionEventData.action<A>(), &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>?, (unsigned int (*)(_BYTE *))_s17RealityFoundation14FromToByActionVys5SIMD4VySfGGSgWOg, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FromToByAction<SIMD4<Float>>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD3<Float>>>, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FromToByAction<SIMD4<Float>>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<SIMD2<Float>>>, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of FromToByAction<SIMD2<Float>>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD2<Float>>>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of FromToByAction<SIMD2<Float>>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<Double>>, &demangling cache variable for type metadata for FromToByAction<Double>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of FromToByAction<Double>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Double>>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of FromToByAction<Double>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction and conformance EmphasizeAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction;
  if (!lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction, &type metadata for EmphasizeAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction;
  if (!lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction, &type metadata for EmphasizeAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlayAudioAction and conformance PlayAudioAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction;
  if (!lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAudioAction, &type metadata for PlayAudioAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction;
  if (!lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAudioAction, &type metadata for PlayAudioAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction);
  }
  return result;
}

uint64_t sub_21BB6DA10()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Int>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Int>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<simd_quatf>>, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<simd_quatf>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD4<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD4<Float>>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD3<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD3<Float>>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD2<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD2<Float>>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Double>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Double>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<BlendShapeWeights>>, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<BlendShapeWeights>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<JointTransforms>>, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<JointTransforms>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(_QWORD *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

uint64_t outlined copy of SetEntityPropertyAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    outlined copy of ActionEntityResolution();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of SetEntityPropertyAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    outlined consume of ActionEntityResolution();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<Transform>>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void specialized FromToByActionHandler.getStartEnd(event:base:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  float32x4_t v23;
  __n128 v24;
  __n128 v25;
  float32x4_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  float32x4_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  float32x4_t v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  __n128 v63;
  __n128 v64;
  double v65;
  double v66;
  float32x4_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  float32x4_t v78;
  __n128 v79;
  __int128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  float32x4_t v85;
  __n128 v86;
  float32x4_t v87;
  __n128 v88[4];
  float32x4_t v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _OWORD v106[3];
  _BYTE v107[32];

  v7 = *(_OWORD *)(a1 + 224);
  v105 = *(_OWORD *)(a1 + 208);
  v106[0] = v7;
  v8 = *(_OWORD *)(a1 + 256);
  v106[1] = *(_OWORD *)(a1 + 240);
  v106[2] = v8;
  v9 = *(_OWORD *)(a1 + 160);
  v101 = *(_OWORD *)(a1 + 144);
  v102 = v9;
  v10 = *(_OWORD *)(a1 + 192);
  v103 = *(_OWORD *)(a1 + 176);
  v104 = v10;
  v11 = *(_OWORD *)(a1 + 96);
  v97 = *(_OWORD *)(a1 + 80);
  v98 = v11;
  v12 = *(_OWORD *)(a1 + 128);
  v99 = *(_OWORD *)(a1 + 112);
  v100 = v12;
  v13 = *(_OWORD *)(a1 + 32);
  v93 = *(_OWORD *)(a1 + 16);
  v94 = v13;
  v14 = *(_OWORD *)(a1 + 64);
  v95 = *(_OWORD *)(a1 + 48);
  v96 = v14;
  v15 = *((_QWORD *)&v101 + 1);
  v16 = v101;
  v17 = v104;
  v18 = v93;
  v19 = v94;
  v20 = v95;
  v21 = v14;
  v22 = v100;
  if (v14 == 1)
  {
    v23 = a3;
    v24 = a4;
    v25 = a5;
    if ((v100 & 1) != 0)
      goto LABEL_3;
  }
  v68 = *((_QWORD *)&v93 + 1);
  v69 = *((_QWORD *)&v94 + 1);
  v70 = v97;
  v71 = *((_QWORD *)&v95 + 1);
  v72 = v98;
  v73 = v99;
  v74 = *((_QWORD *)&v97 + 1);
  v75 = *((_QWORD *)&v98 + 1);
  v76 = *((_QWORD *)&v99 + 1);
  v77 = v101;
  v80 = (__int128)a3;
  v83 = a4;
  v86 = a5;
  outlined init with take of Transform?((uint64_t)v106 + 8, (uint64_t)v107, &demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  v31 = *(_QWORD *)(a1 + 280);
  if (one-time initialization token for identity != -1)
    swift_once();
  outlined init with take of Transform?((uint64_t)v107, (uint64_t)&v89, &demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  specialized FromToByActionHandler<>.getFromToToParent(transformMode:playbackController:targetEntity:base:)((uint64_t)&v89, v31, v88, v80, v83, v86);
  outlined init with take of Transform?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for Transform?);
  if ((v92 & 1) != 0)
  {
    v23 = 0uLL;
    v30 = 1;
    v24 = 0uLL;
    v25 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    goto LABEL_11;
  }
  v32 = v89;
  v33 = *(double *)&v90;
  v34 = *(double *)&v91;
  if (v21)
  {
    a3 = (float32x4_t)v80;
    a4 = v83;
    v23 = (float32x4_t)v80;
    v24 = v83;
    a5 = v86;
    v25 = v86;
    v15 = *((_QWORD *)&v77 + 1);
    v16 = v77;
    v35 = v74;
    v36 = v70;
    if ((v22 & 1) != 0)
    {
LABEL_3:
      if ((v17 & 1) == 0)
      {
        v26.i64[0] = v16;
        v26.i64[1] = v15;
        v82 = v24;
        v85 = v23;
        v79 = v25;
        *(double *)a3.i64 = specialized static Transform.* infix(_:_:)(v23, v24.n128_f64[0], v25.n128_f64[0], v26);
        v25 = v79;
        v24 = v82;
        v23 = v85;
      }
      v27 = (__n128)a3;
      v28 = a4;
      v29 = a5;
      goto LABEL_6;
    }
  }
  else
  {
    v37.i64[0] = v18;
    v37.i64[1] = v68;
    v66 = *(double *)&v90;
    v67 = v89;
    v65 = *(double *)&v91;
    *(double *)&v38 = specialized static Transform.* infix(_:_:)(v89, *(double *)&v90, *(double *)&v91, v37);
    v42 = v39;
    v18 = v38;
    v43 = v40;
    v19 = v44;
    v45 = v41;
    v20 = v46;
    if ((v22 & 1) != 0)
    {
      a4 = v83;
      a5 = v86;
      a3 = (float32x4_t)v80;
      v15 = *((_QWORD *)&v77 + 1);
      v16 = v77;
      v48 = v75;
      v47 = v76;
      v50 = v73;
      v49 = v74;
      v51 = v72;
      v52 = *(double *)&v70;
      goto LABEL_24;
    }
    v68 = v39;
    v69 = v40;
    v71 = v41;
    v35 = v74;
    v36 = v70;
    v33 = v66;
    v32 = v67;
    v34 = v65;
  }
  v53.i64[0] = v36;
  v53.i64[1] = v35;
  v54 = specialized static Transform.* infix(_:_:)(v32, v33, v34, v53);
  v27.n128_f64[0] = v54;
  v28.n128_u64[0] = v56;
  v29.n128_u64[0] = v58;
  v49 = v55;
  v48 = v57;
  v47 = v59;
  if ((v21 & 1) != 0)
  {
    v27.n128_u64[1] = v55;
    v28.n128_u64[1] = v57;
    v29.n128_u64[1] = v59;
    v24 = v83;
    v25 = v86;
    v23 = (float32x4_t)v80;
    if ((v17 & 1) == 0)
    {
      v81 = v29;
      v84 = v28;
      v87 = (float32x4_t)v27;
      RESRTInverse();
      v61 = v60;
      if (one-time initialization token for identity != -1)
      {
        v78 = v60;
        swift_once();
        v61 = v78;
      }
      *(double *)v62.i64 = specialized static Transform.* infix(_:_:)(v87, v84.n128_f64[0], v81.n128_f64[0], v61);
      v29 = v81;
      v28 = v84;
      v27 = (__n128)v87;
      v23 = v62;
      v24 = v63;
      v25 = v64;
    }
    goto LABEL_6;
  }
  v52 = v54;
  v51 = v56;
  v50 = v58;
  a4 = v83;
  a5 = v86;
  a3 = (float32x4_t)v80;
  v15 = *((_QWORD *)&v77 + 1);
  v16 = v77;
  v45 = v71;
  v42 = v68;
  v43 = v69;
LABEL_24:
  v23.i64[0] = v18;
  v23.i64[1] = v42;
  v24.n128_u64[0] = v19;
  v24.n128_u64[1] = v43;
  v25.n128_u64[0] = v20;
  v25.n128_u64[1] = v45;
  if ((v22 & 1) != 0)
    goto LABEL_3;
  v27.n128_f64[0] = v52;
  v27.n128_u64[1] = v49;
  v28.n128_u64[0] = v51;
  v28.n128_u64[1] = v48;
  v29.n128_u64[0] = v50;
  v29.n128_u64[1] = v47;
LABEL_6:
  v30 = 0;
LABEL_11:
  *(float32x4_t *)a2 = v23;
  *(__n128 *)(a2 + 16) = v24;
  *(__n128 *)(a2 + 32) = v25;
  *(__n128 *)(a2 + 48) = v27;
  *(__n128 *)(a2 + 64) = v28;
  *(__n128 *)(a2 + 80) = v29;
  *(_BYTE *)(a2 + 96) = v30;
}

uint64_t specialized FromToByActionHandler.evaluateResult(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  float32x4_t v5;
  char v6;
  float32x4_t v7;
  __n128 v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(unint64_t, unint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  unsigned __int32 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  simd_float4 v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  simd_float4 v31;
  int8x16_t v32;
  __int128 v33;
  __int128 v34;
  simd_float4 v35;
  int8x16_t v36;
  _OWORD v37[2];
  simd_float4 v38;
  float32x4_t v39;
  __n128 v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  _OWORD v45[2];
  simd_float4 v46;
  int8x16_t v47;
  _BYTE v48[112];
  __int128 v49;
  __int128 v50;
  uint64_t AssociatedConformanceWitness;
  char v52;
  float32x4_t v53;
  float32x4_t v54;
  __n128 v55;
  simd_float4 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[3];
  _BYTE v66[16];
  uint64_t v67;
  char v68;
  simd_float4x4 v69;
  simd_float4x4 v70;

  outlined init with take of Transform?(a1 + 360, (uint64_t)v66, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v66, (uint64_t)&v67, &demangling cache variable for type metadata for Double?);
  v5 = 0uLL;
  if ((v68 & 1) == 0)
  {
    specialized ActionEvent.animationState.getter((uint64_t)&v53);
    v9 = v54.u64[1];
    if (v54.i64[1])
    {
      v44.i64[0] = a2;
      v10 = v55.n128_u64[0];
      __swift_project_boxed_opaque_existential_1(&v53, v54.i64[1]);
      v11 = *(void (**)(unint64_t, unint64_t))(v10 + 24);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v13 = type metadata accessor for Optional();
      v43.i64[0] = (uint64_t)v37;
      v14 = *(_QWORD *)(v13 - 8);
      MEMORY[0x24BDAC7A8](v13);
      v16 = (char *)v37 - v15;
      v11(v9, v10);
      v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        AssociatedConformanceWitness = 0;
        v49 = 0u;
        v50 = 0u;
      }
      else
      {
        *((_QWORD *)&v50 + 1) = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
        (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(boxed_opaque_existential_1, v16, AssociatedTypeWitness);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
      a2 = v44.i64[0];
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v53, &demangling cache variable for type metadata for AnimationStateProtocol?);
      v49 = 0u;
      v50 = 0u;
      AssociatedConformanceWitness = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
    result = swift_dynamicCast();
    if (!(_DWORD)result
      || (v19 = v55.n128_u32[0],
          v42 = v54,
          v43 = v53,
          v44 = (int8x16_t)v55,
          specialized FromToByActionHandler.getStartEnd(event:base:)(a1, (uint64_t)v48, v53, (__n128)v54, v55),
          outlined init with take of Transform?((uint64_t)v48, (uint64_t)&v53, &demangling cache variable for type metadata for (start: Transform, end: Transform)?), result = outlined init with take of Transform?((uint64_t)v48, (uint64_t)&v49, &demangling cache variable for type metadata for (start: Transform, end: Transform)?), (v52 & 1) != 0))
    {
      v6 = 1;
      v7 = 0uLL;
      v8 = 0uLL;
      v5 = 0uLL;
      goto LABEL_18;
    }
    v40 = (__n128)v54;
    v41 = v53;
    v38 = v56;
    v39 = (float32x4_t)v55;
    v37[0] = v58;
    v37[1] = v57;
    v20 = *(_OWORD *)(a1 + 224);
    v65[0] = *(_OWORD *)(a1 + 208);
    v65[1] = v20;
    *(_OWORD *)((char *)&v65[1] + 9) = *(_OWORD *)(a1 + 233);
    v21 = *(_OWORD *)(a1 + 160);
    v61 = *(_OWORD *)(a1 + 144);
    v62 = v21;
    v22 = *(_OWORD *)(a1 + 192);
    v63 = *(_OWORD *)(a1 + 176);
    v64 = v22;
    v23 = *(_OWORD *)(a1 + 96);
    v57 = *(_OWORD *)(a1 + 80);
    v58 = v23;
    v24 = *(_OWORD *)(a1 + 128);
    v59 = *(_OWORD *)(a1 + 112);
    v60 = v24;
    v25 = *(__n128 *)(a1 + 32);
    v53 = *(float32x4_t *)(a1 + 16);
    v54 = (float32x4_t)v25;
    v26 = *(simd_float4 *)(a1 + 64);
    v55 = *(__n128 *)(a1 + 48);
    v56 = v26;
    v27 = *(_BYTE *)(a1 + 249);
    v45[0] = v65[0];
    *(_QWORD *)((char *)v45 + 13) = *(_QWORD *)((char *)v65 + 13);
    AnimationTimingFunction.coreEasingFunction.getter();
    if (*(_QWORD *)(v28 + 16))
      REEasingFunctionEvaluateEx();
    swift_release();
    result = RESRTLerp();
    if (one-time initialization token for identity == -1)
    {
      if ((v27 & 1) == 0)
      {
LABEL_17:
        v6 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      v40 = v8;
      v41 = v5;
      v39 = v7;
      result = swift_once();
      v7 = v39;
      v8 = v40;
      v5 = v41;
      if ((v27 & 1) == 0)
        goto LABEL_17;
    }
    v40 = v8;
    v41 = v5;
    v39 = v7;
    *(double *)&v29 = simd_matrix4x4(v42);
    v45[0] = v29;
    v45[1] = v30;
    v46 = v31;
    v47 = v32;
    simd_float4x4.scale(_:)(v43);
    v69.columns[2] = v46;
    *(float32x2_t *)v69.columns[3].f32 = vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)__PAIR64__(v44.u32[1], v19));
    v69.columns[3].i32[2] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)).u32[0];
    v69.columns[3].i32[3] = v47.i32[3];
    v69.columns[0] = (simd_float4)v45[0];
    v69.columns[1] = (simd_float4)v45[1];
    v70 = __invert_f4(v69);
    v38 = v70.columns[0];
    v42 = (float32x4_t)v70.columns[1];
    v43 = (float32x4_t)v70.columns[2];
    v44 = (int8x16_t)v70.columns[3];
    *(double *)&v33 = simd_matrix4x4(v39);
    v45[0] = v33;
    v45[1] = v34;
    v46 = v35;
    v47 = v36;
    simd_float4x4.scale(_:)(v41);
    result = REMakeSRTFromMatrix();
    goto LABEL_17;
  }
  v6 = 1;
  v7 = 0uLL;
  v8 = 0uLL;
LABEL_18:
  *(float32x4_t *)a2 = v5;
  *(float32x4_t *)(a2 + 16) = v7;
  *(__n128 *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v6;
  return result;
}

double specialized FromToByActionHandler.evaluateResult(_:)(uint64_t a1)
{
  uint64_t v2;
  float32x4_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;
  char v17;
  float32x4_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  char v38;
  float v39;
  uint64_t v40;
  float v41;
  int8x16_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  _BYTE v53[21];
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[40];
  _BYTE v57[16];
  double v58;
  char v59;

  outlined init with take of Transform?(a1 + 264, (uint64_t)v57, &demangling cache variable for type metadata for Double?);
  v2 = outlined init with take of Transform?((uint64_t)v57, (uint64_t)&v58, &demangling cache variable for type metadata for Double?);
  v3 = 0uLL;
  if ((v59 & 1) != 0)
    return *(double *)v3.i64;
  v4 = v58;
  specialized ActionEvent.animationState.getter(v53, v2, (__n128)0);
  v5 = v54;
  if (v54)
  {
    v6 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    v7 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = type metadata accessor for Optional();
    v10 = *(_QWORD *)(v9 - 8);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)&v50 - v11;
    v7(v5, v6);
    v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      memset(v56, 0, sizeof(v56));
    }
    else
    {
      *(_QWORD *)&v56[24] = AssociatedTypeWitness;
      *(_QWORD *)&v56[32] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v56);
      (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v53, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v56, 0, sizeof(v56));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  type metadata accessor for simd_quatf(0);
  if (!swift_dynamicCast())
  {
    v3.i64[0] = 0;
    return *(double *)v3.i64;
  }
  v16 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v17 = *(_BYTE *)(a1 + 32);
  v18 = *(float32x4_t *)(a1 + 48);
  v19 = *(_BYTE *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 88);
  v22 = *(_BYTE *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 113);
  *(_OWORD *)v56 = *(_OWORD *)(a1 + 97);
  *(_OWORD *)&v56[16] = v23;
  *(_DWORD *)&v56[32] = *(_DWORD *)(a1 + 129);
  if ((v17 & 1) != 0)
  {
    v24 = *(float32x4_t *)v53;
    if ((v19 & 1) == 0)
    {
      if ((v22 & 1) != 0)
      {
        v24 = *(float32x4_t *)v53;
      }
      else
      {
        v25.i64[0] = v21;
        v25.i64[1] = v20;
        v26 = vmulq_f32(v25, (float32x4_t)xmmword_21BE516F0);
        v27 = (int8x16_t)vmulq_f32(v25, v25);
        *(float32x2_t *)v27.i8 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
        v27.i32[0] = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)).u32[0];
        v28 = vrecpe_f32((float32x2_t)v27.u32[0]);
        v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27.u32[0], v28));
        v30 = vmulq_n_f32(v26, vmul_f32(v29, vrecps_f32((float32x2_t)v27.u32[0], v29)).f32[0]);
        v31 = (int32x4_t)vnegq_f32(v30);
        v32 = (int8x16_t)vtrn2q_s32((int32x4_t)v30, vtrn1q_s32((int32x4_t)v30, v31));
        v33 = (float32x4_t)vrev64q_s32((int32x4_t)v30);
        v33.i32[0] = v31.i32[1];
        v33.i32[3] = v31.i32[2];
        v24 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v30, v18, 3), v33, v18, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v31, 8uLL), *(float32x2_t *)v18.f32, 1), (float32x4_t)vextq_s8(v32, v32, 8uLL), v18.f32[0]));
      }
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v24.i64[0] = v16;
  v24.i64[1] = v15;
  if ((v19 & 1) != 0)
  {
LABEL_16:
    if ((v22 & 1) != 0)
    {
      v18 = *(float32x4_t *)v53;
    }
    else
    {
      v34.i64[0] = v21;
      v34.i64[1] = v20;
      v35 = (int32x4_t)vnegq_f32(v34);
      v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
      v37 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
      v37.i32[0] = v35.i32[1];
      v37.i32[3] = v35.i32[2];
      v18 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v36, v36, 8uLL), v24.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(v34, v24, 3), v37, v24, 2));
    }
  }
LABEL_20:
  v51 = v24;
  v52 = v18;
  v50 = *(float32x4_t *)v53;
  v38 = *(_BYTE *)(a1 + 153);
  *(_OWORD *)v53 = *(_OWORD *)&v56[15];
  *(_QWORD *)&v53[13] = *(_QWORD *)&v56[28];
  v39 = v4;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v40 + 16))
  {
    REEasingFunctionEvaluateEx();
    v39 = v41;
  }
  swift_release();
  simd_slerp(v51, v52, v39);
  if ((v38 & 1) != 0)
  {
    v42 = (int8x16_t)vmulq_f32(v50, v50);
    *(float32x2_t *)v42.i8 = vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    v42.i32[0] = vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1)).u32[0];
    v43 = vrecpe_f32((float32x2_t)v42.u32[0]);
    v44 = vmul_f32(v43, vrecps_f32((float32x2_t)v42.u32[0], v43));
    v45 = vmulq_n_f32(vmulq_f32(v50, (float32x4_t)xmmword_21BE516F0), vmul_f32(v44, vrecps_f32((float32x2_t)v42.u32[0], v44)).f32[0]);
    v46 = (int32x4_t)vnegq_f32(v3);
    v47 = (int8x16_t)vtrn2q_s32((int32x4_t)v3, vtrn1q_s32((int32x4_t)v3, v46));
    v48 = (float32x4_t)vrev64q_s32((int32x4_t)v3);
    v48.i32[0] = v46.i32[1];
    v48.i32[3] = v46.i32[2];
    v3.i64[0] = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v46, 8uLL), *(float32x2_t *)v45.f32, 1), (float32x4_t)vextq_s8(v47, v47, 8uLL), v45.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(v3, v45, 3), v48, v45, 2)).u64[0];
  }
  return *(double *)v3.i64;
}

uint64_t specialized FromToByActionHandler.evaluateResult(_:)(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  float32x4_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  char v18;
  float32x4_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __int128 v39;
  _BYTE v40[21];
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[40];
  _BYTE v44[16];
  double v45;
  char v46;

  outlined init with take of Transform?(a1 + 264, (uint64_t)v44, &demangling cache variable for type metadata for Double?);
  v2 = outlined init with take of Transform?((uint64_t)v44, (uint64_t)&v45, &demangling cache variable for type metadata for Double?);
  v4.i64[0] = 0;
  if ((v46 & 1) != 0)
    return v4.i64[0];
  v5 = v45;
  specialized ActionEvent.animationState.getter(v40, v2, v3);
  v6 = v41;
  if (v41)
  {
    v7 = v42;
    __swift_project_boxed_opaque_existential_1(v40, v41);
    v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = type metadata accessor for Optional();
    v11 = *(_QWORD *)(v10 - 8);
    MEMORY[0x24BDAC7A8](v10);
    v13 = (char *)&v36 - v12;
    v8(v6, v7);
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      memset(v43, 0, sizeof(v43));
    }
    else
    {
      *(_QWORD *)&v43[24] = AssociatedTypeWitness;
      *(_QWORD *)&v43[32] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v43);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v40, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v43, 0, sizeof(v43));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (!swift_dynamicCast())
  {
    v4.i64[0] = 0;
    return v4.i64[0];
  }
  v17 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v18 = *(_BYTE *)(a1 + 32);
  v19 = *(float32x4_t *)(a1 + 48);
  v20 = *(_BYTE *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 113);
  *(_OWORD *)v43 = *(_OWORD *)(a1 + 97);
  *(_OWORD *)&v43[16] = v24;
  *(_DWORD *)&v43[32] = *(_DWORD *)(a1 + 129);
  v25 = *(_BYTE *)(a1 + 153);
  v36 = *(float32x4_t *)v40;
  if ((v18 & 1) != 0)
  {
    v26 = *(float32x4_t *)v40;
    if ((v20 & 1) == 0)
    {
      if ((v23 & 1) != 0)
      {
        v26 = *(float32x4_t *)v40;
      }
      else
      {
        v27.i64[0] = v21;
        v27.i64[1] = v22;
        v37 = v19;
        *(double *)v28.i64 = SIMD4<>.__rk_animationInverse.getter(v27);
        v19 = v37;
        v29 = v37;
        v29.i32[0] = v37.i32[0];
        v26 = vaddq_f32(v28, v29);
      }
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v26.i64[0] = v17;
  v26.i64[1] = v16;
  if ((v20 & 1) != 0)
  {
LABEL_16:
    if ((v23 & 1) != 0)
    {
      v19 = *(float32x4_t *)v40;
    }
    else
    {
      v30.i64[1] = v22;
      v30.i64[0] = v21;
      v19 = vaddq_f32(v26, v30);
    }
  }
LABEL_20:
  v37 = v19;
  v31 = *(_OWORD *)&v43[15];
  *(_OWORD *)v40 = *(_OWORD *)&v43[15];
  *(_QWORD *)&v40[13] = *(_QWORD *)&v43[28];
  *(float *)&v31 = v5;
  v38 = v26;
  v39 = v31;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v32 + 16))
  {
    REEasingFunctionEvaluateEx();
    *(_QWORD *)&v39 = v33;
  }
  swift_release();
  v4 = vmlaq_n_f32(v38, vsubq_f32(v37, v38), *(float *)&v39);
  if ((v25 & 1) != 0)
  {
    v38 = v4;
    *(double *)v34.i64 = SIMD4<>.__rk_animationInverse.getter(v36);
    v4.i64[0] = vaddq_f32(v38, v34).u64[0];
  }
  return v4.i64[0];
}

{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  char v18;
  float32x4_t v19;
  char v20;
  float32x2_t v21;
  unint64_t v22;
  char v23;
  __int128 v24;
  float32x4_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t v30;
  __int128 v32;
  float32x4_t v33;
  float32x4_t v34;
  __int128 v35;
  _BYTE v36[21];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];
  _BYTE v40[16];
  double v41;
  char v42;

  outlined init with take of Transform?(a1 + 264, (uint64_t)v40, &demangling cache variable for type metadata for Double?);
  v2 = outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, &demangling cache variable for type metadata for Double?);
  v4 = 0;
  if ((v42 & 1) != 0)
    return v4;
  v5 = v41;
  specialized ActionEvent.animationState.getter(v36, v2, v3);
  v6 = v37;
  if (v37)
  {
    v7 = v38;
    __swift_project_boxed_opaque_existential_1(v36, v37);
    v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = type metadata accessor for Optional();
    v11 = *(_QWORD *)(v10 - 8);
    MEMORY[0x24BDAC7A8](v10);
    v13 = (char *)&v32 - v12;
    v8(v6, v7);
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      memset(v39, 0, sizeof(v39));
    }
    else
    {
      *(_QWORD *)&v39[24] = AssociatedTypeWitness;
      *(_QWORD *)&v39[32] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v39);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v36, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v39, 0, sizeof(v39));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (!swift_dynamicCast())
    return 0;
  v17 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v18 = *(_BYTE *)(a1 + 32);
  v19 = *(float32x4_t *)(a1 + 48);
  v20 = *(_BYTE *)(a1 + 64);
  v21 = *(float32x2_t *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 113);
  *(_OWORD *)v39 = *(_OWORD *)(a1 + 97);
  *(_OWORD *)&v39[16] = v24;
  *(_DWORD *)&v39[32] = *(_DWORD *)(a1 + 129);
  if ((v18 & 1) != 0)
  {
    v25 = *(float32x4_t *)v36;
    if ((v20 & 1) == 0)
    {
      if ((v23 & 1) != 0)
      {
        v25 = *(float32x4_t *)v36;
      }
      else
      {
        *(float32x2_t *)v25.f32 = vadd_f32(vsub_f32(0, v21), *(float32x2_t *)v19.f32);
        v25.f32[2] = v19.f32[2] + (float)(0.0 - COERCE_FLOAT(vdupq_n_s64(v22).i32[2]));
        v25.i32[3] = 0;
      }
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v25.i64[0] = v17;
  v25.i64[1] = v16;
  if ((v20 & 1) != 0)
  {
LABEL_16:
    if ((v23 & 1) != 0)
    {
      v19 = *(float32x4_t *)v36;
    }
    else
    {
      *(float32x2_t *)v19.f32 = vadd_f32(*(float32x2_t *)v25.f32, v21);
      v19.i64[1] = vaddq_f32(v25, (float32x4_t)vdupq_n_s64(v22)).u32[2];
    }
  }
LABEL_20:
  v33 = v19;
  v34 = v25;
  v32 = *(_OWORD *)v36;
  v26 = *(_BYTE *)(a1 + 153);
  v27 = *(_OWORD *)&v39[15];
  *(_OWORD *)v36 = *(_OWORD *)&v39[15];
  *(_QWORD *)&v36[13] = *(_QWORD *)&v39[28];
  *(float *)&v27 = v5;
  v35 = v27;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v28 + 16))
  {
    REEasingFunctionEvaluateEx();
    *(_QWORD *)&v35 = v29;
  }
  swift_release();
  v30 = (float32x2_t)vmlaq_n_f32(v34, vsubq_f32(v33, v34), *(float *)&v35).u64[0];
  if ((v26 & 1) != 0)
    return (uint64_t)vadd_f32(vsub_f32(0, *(float32x2_t *)&v32), v30);
  else
    return (uint64_t)v30;
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  float32x2_t v14;
  float32x2_t v15;
  char v16;
  float32x2_t v17;
  char v18;
  float32x2_t v19;
  char v20;
  double v22;
  double v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t v28;
  __int128 v29;
  float32x2_t v30[3];
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t AssociatedConformanceWitness;
  _BYTE v35[16];
  double v36;
  char v37;

  outlined init with take of Transform?(a1 + 216, (uint64_t)v35, &demangling cache variable for type metadata for Double?);
  v2 = outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v36, &demangling cache variable for type metadata for Double?);
  if ((v37 & 1) != 0)
    return 0;
  v3 = v36;
  specialized ActionEvent.animationState.getter(v30, v2);
  v4 = v31;
  if (v31)
  {
    v5 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v8 = type metadata accessor for Optional();
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)&v30[-2] - v10;
    v6(v4, v5);
    v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      AssociatedConformanceWitness = 0;
      memset(v33, 0, sizeof(v33));
    }
    else
    {
      *((_QWORD *)&v33[1] + 1) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v33);
      (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v33, 0, sizeof(v33));
    AssociatedConformanceWitness = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (!swift_dynamicCast())
    return 0;
  v14 = v30[0];
  v15 = *(float32x2_t *)(a1 + 16);
  v16 = *(_BYTE *)(a1 + 24);
  v17 = *(float32x2_t *)(a1 + 32);
  v18 = *(_BYTE *)(a1 + 40);
  v19 = *(float32x2_t *)(a1 + 48);
  v20 = *(_BYTE *)(a1 + 56);
  v33[0] = *(_OWORD *)(a1 + 57);
  *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(a1 + 69);
  if ((v16 & 1) != 0)
  {
    v15 = v30[0];
    if ((v18 & 1) != 0)
      goto LABEL_17;
    v15 = v30[0];
    if ((v20 & 1) == 0)
      v15 = vadd_f32(vsub_f32(0, v19), v17);
  }
  else if ((v18 & 1) != 0)
  {
LABEL_17:
    v23 = COERCE_DOUBLE(vadd_f32(v15, v19));
    if ((v20 & 1) != 0)
      v22 = *(double *)v30;
    else
      v22 = v23;
    goto LABEL_20;
  }
  v22 = *(double *)&v17;
LABEL_20:
  v24 = *(_BYTE *)(a1 + 105);
  v25 = *(_OWORD *)((char *)v33 + 7);
  *(_OWORD *)v30[0].f32 = *(_OWORD *)((char *)v33 + 7);
  *(float32x2_t *)((char *)&v30[1] + 5) = *(float32x2_t *)((char *)&v33[1] + 4);
  *(float *)&v25 = v3;
  v29 = v25;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v26 + 16))
  {
    REEasingFunctionEvaluateEx();
    *(_QWORD *)&v29 = v27;
  }
  swift_release();
  v28 = vmla_n_f32(v15, vsub_f32(*(float32x2_t *)&v22, v15), *(float *)&v29);
  if ((v24 & 1) != 0)
    return (uint64_t)vadd_f32(vsub_f32(0, v14), v28);
  else
    return (uint64_t)v28;
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  double v14;
  double v15;
  char v16;
  double v17;
  char v18;
  double v19;
  char v20;
  double v22;
  char v23;
  float v24;
  uint64_t v25;
  float v26;
  double v27;
  double v28[3];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t AssociatedConformanceWitness;
  _BYTE v33[16];
  double v34;
  char v35;

  outlined init with take of Transform?(a1 + 216, (uint64_t)v33, &demangling cache variable for type metadata for Double?);
  v2 = outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v34, &demangling cache variable for type metadata for Double?);
  if ((v35 & 1) != 0)
    return 0;
  v3 = v34;
  specialized ActionEvent.animationState.getter(v28, v2);
  v4 = v29;
  if (v29)
  {
    v5 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v8 = type metadata accessor for Optional();
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)v28 - v10;
    v6(v4, v5);
    v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      AssociatedConformanceWitness = 0;
      memset(v31, 0, sizeof(v31));
    }
    else
    {
      *((_QWORD *)&v31[1] + 1) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v31);
      (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v28, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v31, 0, sizeof(v31));
    AssociatedConformanceWitness = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  if (!swift_dynamicCast())
    return 0;
  v14 = v28[0];
  v15 = *(double *)(a1 + 16);
  v16 = *(_BYTE *)(a1 + 24);
  v17 = *(double *)(a1 + 32);
  v18 = *(_BYTE *)(a1 + 40);
  v19 = *(double *)(a1 + 48);
  v20 = *(_BYTE *)(a1 + 56);
  v31[0] = *(_OWORD *)(a1 + 57);
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 69);
  if ((v16 & 1) != 0)
  {
    v15 = v28[0];
    if ((v18 & 1) != 0)
      goto LABEL_18;
    if ((v20 & 1) != 0)
      v15 = v28[0];
    else
      v15 = v17 - v19;
  }
  else if ((v18 & 1) != 0)
  {
LABEL_18:
    if ((v20 & 1) != 0)
      v22 = v28[0];
    else
      v22 = v15 + v19;
    goto LABEL_21;
  }
  v22 = v17;
LABEL_21:
  v23 = *(_BYTE *)(a1 + 105);
  *(_OWORD *)v28 = *(_OWORD *)((char *)v31 + 7);
  *(double *)((char *)&v28[1] + 5) = *(double *)((char *)&v31[1] + 4);
  v24 = v3;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v25 + 16))
  {
    REEasingFunctionEvaluateEx();
    v24 = v26;
  }
  swift_release();
  v27 = v22 * v24 + v15 * (1.0 - v24);
  if ((v23 & 1) != 0)
    v27 = v27 - v14;
  return *(_QWORD *)&v27;
}

unint64_t specialized FromToByActionHandler.evaluateResult(_:)(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  float v14;
  float v15;
  char v16;
  float v17;
  char v18;
  float v19;
  char v20;
  __int128 v21;
  float v22;
  unsigned __int8 v23;
  float v24;
  char v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v31[6];
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t AssociatedConformanceWitness;
  _BYTE v36[16];
  double v37;
  char v38;

  outlined init with take of Transform?(a1 + 200, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  v2 = outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v37, &demangling cache variable for type metadata for Double?);
  if ((v38 & 1) != 0)
    goto LABEL_12;
  v3 = v37;
  specialized ActionEvent.animationState.getter(v31, v2);
  v4 = v32;
  if (v32)
  {
    v5 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v8 = type metadata accessor for Optional();
    v9 = *(_QWORD *)(v8 - 8);
    MEMORY[0x24BDAC7A8](v8);
    v11 = (char *)v31 - v10;
    v6(v4, v5);
    v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      AssociatedConformanceWitness = 0;
      memset(v34, 0, sizeof(v34));
    }
    else
    {
      *((_QWORD *)&v34[1] + 1) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v34);
      (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v34, 0, sizeof(v34));
    AssociatedConformanceWitness = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  if (!swift_dynamicCast())
  {
LABEL_12:
    v22 = 0.0;
    v23 = 1;
    return LODWORD(v22) | ((unint64_t)v23 << 32);
  }
  v14 = v31[0];
  v15 = *(float *)(a1 + 16);
  v16 = *(_BYTE *)(a1 + 20);
  v17 = *(float *)(a1 + 24);
  v18 = *(_BYTE *)(a1 + 28);
  v19 = *(float *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 36);
  v21 = *(_OWORD *)(a1 + 53);
  v34[0] = *(_OWORD *)(a1 + 37);
  v34[1] = v21;
  if ((v16 & 1) != 0)
  {
    v15 = v31[0];
    if ((v18 & 1) != 0)
      goto LABEL_18;
    if ((v20 & 1) != 0)
      v15 = v31[0];
    else
      v15 = v17 - v19;
  }
  else if ((v18 & 1) != 0)
  {
LABEL_18:
    if ((v20 & 1) != 0)
      v24 = v31[0];
    else
      v24 = v15 + v19;
    goto LABEL_21;
  }
  v24 = v17;
LABEL_21:
  v25 = *(_BYTE *)(a1 + 89);
  *(_OWORD *)v31 = *(_OWORD *)((char *)v34 + 11);
  *(_QWORD *)((char *)&v31[3] + 1) = *((_QWORD *)&v34[1] + 1);
  v26 = v3;
  AnimationTimingFunction.coreEasingFunction.getter();
  if (*(_QWORD *)(v27 + 16))
  {
    REEasingFunctionEvaluateEx();
    v26 = v28;
  }
  swift_release();
  v29 = (float)(v24 * v26) + (float)(v15 * (float)(1.0 - v26));
  v23 = 0;
  if ((v25 & 1) != 0)
    v29 = v29 - v14;
  v22 = v29;
  return LODWORD(v22) | ((unint64_t)v23 << 32);
}

uint64_t specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t SceneNullable;
  uint64_t v15;
  id v16;
  uint64_t EntityByName;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  ValueMetadata *v45;
  _UNKNOWN **v46;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v11._countAndFlagsBits = 0x2072656C646E6148;
    v11._object = (void *)0xEC00000020726F66;
    String.append(_:)(v11);
    *(_QWORD *)&v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000030;
    v13._object = (void *)0x800000021BE85620;
    String.append(_:)(v13);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 72);
  v35 = *(_QWORD *)(a1 + 64);
  v37 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  v36 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    v34 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)&v38 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v8 = Entity.subscript.getter((uint64_t *)&v38);
    outlined consume of ActionEntityResolution();
    if (v8)
    {
      if ((v7 & 1) == 0)
      {
LABEL_5:
        v45 = &type metadata for Transform;
        v46 = &protocol witness table for Transform;
        v9 = (_QWORD *)swift_allocObject();
        *(_QWORD *)&v44 = v9;
        v9[2] = v35;
        v9[3] = v4;
        v9[4] = v37;
        v9[5] = v36;
        v9[6] = v5;
        v9[7] = v34;
        outlined init with take of BindableDataInternal(&v44, (uint64_t)&v38);
        __swift_project_boxed_opaque_existential_1(&v38, v40);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddRESRTValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v18._countAndFlagsBits = 0x2072656C646E6148;
    v18._object = (void *)0xEC00000020726F66;
    String.append(_:)(v18);
    *(_QWORD *)&v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD00000000000003BLL;
    v20._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v20);
    REEntityGetName();
    v21._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 10535;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    specialized static AnimationLogger.logError(_:)(v38, *((_QWORD *)&v38 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v15 = SceneNullable;
  v34 = v6;
  v16 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  v33 = v5;
  if (v16)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v15);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v23 = specialized static Entity.entityInfoType(_:)();
    if (v23)
    {
      v24 = (*(uint64_t (**)(void))(v23 + 232))();
      v25 = *(_QWORD *)(v24 + 16);
      swift_retain();
      MEMORY[0x22076D160](v25, 0);
      *(_QWORD *)(v24 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v24);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  v5 = v33;
  if ((v7 & 1) == 0)
    goto LABEL_5;
LABEL_23:
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v44 = v38;
  v26._countAndFlagsBits = 0x2072656C646E6148;
  v26._object = (void *)0xEC00000020726F66;
  String.append(_:)(v26);
  *(_QWORD *)&v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x800000021BE88170;
  v28._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v28);
  *(_QWORD *)&v38 = v35;
  *((_QWORD *)&v38 + 1) = v4;
  v39 = v37;
  v40 = v36;
  v41 = v5;
  v42 = v34;
  v43 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transform?);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD000000000000031;
  v30._object = (void *)0x800000021BE881A0;
  String.append(_:)(v30);
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v3;
  v31._object = v2;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  specialized static AnimationLogger.logError(_:)(v44, *((_QWORD *)&v44 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x800000021BE85620;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v33 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if (v5)
      {
LABEL_5:
        v31 = MEMORY[0x24BEE0D00];
        v32 = &protocol witness table for String;
        *(_QWORD *)&v30 = v4;
        *((_QWORD *)&v30 + 1) = v5;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        swift_bridgeObjectRetain();
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        String.utf8CString.getter();
        REKeyValueComponentAddStringValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v12 = SceneNullable;
  v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v20 = specialized static Entity.entityInfoType(_:)();
    if (v20)
    {
      v21 = (*(uint64_t (**)(void))(v20 + 232))();
      v22 = *(_QWORD *)(v21 + 16);
      swift_retain();
      MEMORY[0x22076D160](v22, 0);
      *(_QWORD *)(v21 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  if (v5)
    goto LABEL_5;
LABEL_23:
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v23._countAndFlagsBits = 0x2072656C646E6148;
  v23._object = (void *)0xEC00000020726F66;
  String.append(_:)(v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
  v24._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x800000021BE88170;
  v25._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v25);
  v30 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0xD000000000000031;
  v27._object = (void *)0x800000021BE881A0;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = v3;
  v28._object = v2;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  specialized static AnimationLogger.logError(_:)(v33, v34);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  uint64_t SceneNullable;
  uint64_t v11;
  id v12;
  uint64_t EntityByName;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v6._countAndFlagsBits = 0x2072656C646E6148;
    v6._object = (void *)0xEC00000020726F66;
    String.append(_:)(v6);
    *(_QWORD *)&v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD000000000000030;
    v8._object = (void *)0x800000021BE85620;
    String.append(_:)(v8);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 48);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v32 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    v5 = Entity.subscript.getter(&v32);
    outlined consume of ActionEntityResolution();
    if (!v5)
      goto LABEL_17;
LABEL_13:
    if (v4 == 2)
    {
LABEL_14:
      v32 = 0;
      v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v14._countAndFlagsBits = 0x2072656C646E6148;
      v14._object = (void *)0xEC00000020726F66;
      String.append(_:)(v14);
      *(_QWORD *)&v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
      v15._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._object = (void *)0x800000021BE88170;
      v16._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v16);
      LOBYTE(v29) = 2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
      v17._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 0xD000000000000031;
      v18._object = (void *)0x800000021BE881A0;
      String.append(_:)(v18);
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = v3;
      v19._object = v2;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 39;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      specialized static AnimationLogger.logError(_:)(v32, v33);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_16:
    outlined consume of ActionEntityResolution();
LABEL_17:
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v21._countAndFlagsBits = 0x2072656C646E6148;
    v21._object = (void *)0xEC00000020726F66;
    String.append(_:)(v21);
    *(_QWORD *)&v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
    v22._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0xD00000000000003BLL;
    v23._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v23);
    REEntityGetName();
    v24._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 10535;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    specialized static AnimationLogger.logError(_:)(v32, v33);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v11 = SceneNullable;
  v12 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v12)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v11);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_16;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_13;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v26 = specialized static Entity.entityInfoType(_:)();
    if (v26)
    {
      v27 = (*(uint64_t (**)(void))(v26 + 232))();
      v28 = *(_QWORD *)(v27 + 16);
      swift_retain();
      MEMORY[0x22076D160](v28, 0);
      *(_QWORD *)(v27 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v27);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
    if (v4 == 2)
      goto LABEL_14;
LABEL_23:
    v30 = MEMORY[0x24BEE1328];
    v31 = &protocol witness table for Bool;
    LOBYTE(v29) = v4 & 1;
    outlined init with take of BindableDataInternal(&v29, (uint64_t)&v32);
    __swift_project_boxed_opaque_existential_1(&v32, v34);
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddBoolValue();
    swift_release();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v3 = *(_QWORD *)(a1 + 32);
    v2 = *(void **)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_BYTE *)(a1 + 56);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        v12 = SceneNullable;
        v13 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v13)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v12);
        }
        String.utf8CString.getter();
        EntityByName = RESceneFindEntityByName();
        swift_release();
        if (EntityByName)
        {
          if ((id)REEntityGetSwiftObject())
          {
            swift_release();
            outlined consume of ActionEntityResolution();
            type metadata accessor for Entity();
            swift_dynamicCastClassUnconditional();
            if ((v5 & 1) == 0)
              goto LABEL_5;
          }
          else
          {
            result = REEntityIsBeingDestroyed();
            if ((result & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = specialized static Entity.entityInfoType(_:)(EntityByName);
            if (v20)
            {
              v21 = (*(uint64_t (**)(void))(v20 + 232))();
              v22 = *(_QWORD *)(v21 + 16);
              swift_retain();
              MEMORY[0x22076D160](v22, 0);
              *(_QWORD *)(v21 + 16) = EntityByName;
              MEMORY[0x22076D160](EntityByName, v21);
              swift_release();
            }
            else
            {
              makeEntity(for:)(EntityByName);
            }
            swift_release();
            outlined consume of ActionEntityResolution();
            if ((v5 & 1) == 0)
              goto LABEL_5;
          }
LABEL_25:
          v33 = 0;
          v34 = 0xE000000000000000;
          _StringGuts.grow(_:)(101);
          v23._countAndFlagsBits = 0x2072656C646E6148;
          v23._object = (void *)0xEC00000020726F66;
          String.append(_:)(v23);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
          v24._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          v25._object = (void *)0x800000021BE88170;
          v25._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v25);
          *(_QWORD *)&v30 = v4;
          BYTE8(v30) = 1;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
          v26._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          v27._countAndFlagsBits = 0xD000000000000031;
          v27._object = (void *)0x800000021BE881A0;
          String.append(_:)(v27);
          swift_bridgeObjectRetain();
          v28._countAndFlagsBits = v3;
          v28._object = v2;
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          v29._countAndFlagsBits = 39;
          v29._object = (void *)0xE100000000000000;
          String.append(_:)(v29);
          specialized static AnimationLogger.logError(_:)(v33, v34);
          swift_bridgeObjectRelease();
          swift_release();
          return swift_release();
        }
        swift_release();
      }
      outlined consume of ActionEntityResolution();
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 8);
      swift_bridgeObjectRetain();
      v6 = Entity.subscript.getter(&v33);
      outlined consume of ActionEntityResolution();
      if (v6)
      {
        if ((v5 & 1) == 0)
        {
LABEL_5:
          v31 = MEMORY[0x24BEE1768];
          v32 = &protocol witness table for Int;
          *(_QWORD *)&v30 = v4;
          outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
          __swift_project_boxed_opaque_existential_1(&v33, v35);
          REKeyValueComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          String.utf8CString.getter();
          REKeyValueComponentAddInt64Value();
          swift_release();
          swift_release();
          swift_release();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
        }
        goto LABEL_25;
      }
    }
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
  }
  else
  {
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x800000021BE85620;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
  }
  return swift_bridgeObjectRelease();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t SceneNullable;
  uint64_t v15;
  id v16;
  uint64_t EntityByName;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _UNKNOWN **v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v11._countAndFlagsBits = 0x2072656C646E6148;
    v11._object = (void *)0xEC00000020726F66;
    String.append(_:)(v11);
    *(_QWORD *)&v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000030;
    v13._object = (void *)0x800000021BE85620;
    String.append(_:)(v13);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = *(_BYTE *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    *(_QWORD *)&v37 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v7 = Entity.subscript.getter((uint64_t *)&v37);
    outlined consume of ActionEntityResolution();
    if (v7)
    {
      if ((v6 & 1) == 0)
      {
LABEL_5:
        type metadata accessor for simd_quatf(0);
        v35 = v8;
        v36 = &protocol witness table for simd_quatf;
        v9 = swift_allocObject();
        *(_QWORD *)&v34 = v9;
        *(_QWORD *)(v9 + 16) = v5;
        *(_QWORD *)(v9 + 24) = v4;
        outlined init with take of BindableDataInternal(&v34, (uint64_t)&v37);
        __swift_project_boxed_opaque_existential_1(&v37, v39);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddQuatFValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(_QWORD *)&v37 = 0;
    *((_QWORD *)&v37 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v18._countAndFlagsBits = 0x2072656C646E6148;
    v18._object = (void *)0xEC00000020726F66;
    String.append(_:)(v18);
    *(_QWORD *)&v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD00000000000003BLL;
    v20._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v20);
    REEntityGetName();
    v21._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 10535;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    specialized static AnimationLogger.logError(_:)(v37, *((_QWORD *)&v37 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v15 = SceneNullable;
  v16 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  v33 = v5;
  if (v16)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v15);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v23 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v23)
    {
      v24 = (*(uint64_t (**)(void))(v23 + 232))();
      v25 = *(_QWORD *)(v24 + 16);
      swift_retain();
      MEMORY[0x22076D160](v25, 0);
      *(_QWORD *)(v24 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v24);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  v5 = v33;
  if ((v6 & 1) == 0)
    goto LABEL_5;
LABEL_23:
  *(_QWORD *)&v37 = 0;
  *((_QWORD *)&v37 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v34 = v37;
  v26._countAndFlagsBits = 0x2072656C646E6148;
  v26._object = (void *)0xEC00000020726F66;
  String.append(_:)(v26);
  *(_QWORD *)&v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x800000021BE88170;
  v28._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v28);
  *(_QWORD *)&v37 = v5;
  *((_QWORD *)&v37 + 1) = v4;
  v38 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_quatf?);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD000000000000031;
  v30._object = (void *)0x800000021BE881A0;
  String.append(_:)(v30);
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v3;
  v31._object = v2;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  specialized static AnimationLogger.logError(_:)(v34, *((_QWORD *)&v34 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t SceneNullable;
  uint64_t v14;
  id v15;
  uint64_t EntityByName;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _UNKNOWN **v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v10._countAndFlagsBits = 0x2072656C646E6148;
    v10._object = (void *)0xEC00000020726F66;
    String.append(_:)(v10);
    *(_QWORD *)&v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
    v11._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0xD000000000000030;
    v12._object = (void *)0x800000021BE85620;
    String.append(_:)(v12);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = *(_BYTE *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v7 = Entity.subscript.getter((uint64_t *)&v36);
    outlined consume of ActionEntityResolution();
    if (v7)
    {
      if ((v6 & 1) == 0)
      {
LABEL_5:
        v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        v35 = &protocol witness table for SIMD4<A>;
        v8 = swift_allocObject();
        *(_QWORD *)&v33 = v8;
        *(_QWORD *)(v8 + 16) = v5;
        *(_QWORD *)(v8 + 24) = v4;
        outlined init with take of BindableDataInternal(&v33, (uint64_t)&v36);
        __swift_project_boxed_opaque_existential_1(&v36, v38);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloat4Value();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v17._countAndFlagsBits = 0x2072656C646E6148;
    v17._object = (void *)0xEC00000020726F66;
    String.append(_:)(v17);
    *(_QWORD *)&v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
    v18._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000003BLL;
    v19._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v19);
    REEntityGetName();
    v20._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 10535;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    specialized static AnimationLogger.logError(_:)(v36, *((_QWORD *)&v36 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v14 = SceneNullable;
  v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  v32 = v5;
  if (v15)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v14);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v22 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v22)
    {
      v23 = (*(uint64_t (**)(void))(v22 + 232))();
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain();
      MEMORY[0x22076D160](v24, 0);
      *(_QWORD *)(v23 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v23);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  v5 = v32;
  if ((v6 & 1) == 0)
    goto LABEL_5;
LABEL_23:
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v33 = v36;
  v25._countAndFlagsBits = 0x2072656C646E6148;
  v25._object = (void *)0xEC00000020726F66;
  String.append(_:)(v25);
  *(_QWORD *)&v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x800000021BE88170;
  v27._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v27);
  *(_QWORD *)&v36 = v5;
  *((_QWORD *)&v36 + 1) = v4;
  v37 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>?);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD000000000000031;
  v29._object = (void *)0x800000021BE881A0;
  String.append(_:)(v29);
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v3;
  v30._object = v2;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  specialized static AnimationLogger.logError(_:)(v33, *((_QWORD *)&v33 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t SceneNullable;
  uint64_t v14;
  id v15;
  uint64_t EntityByName;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _UNKNOWN **v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v10._countAndFlagsBits = 0x2072656C646E6148;
    v10._object = (void *)0xEC00000020726F66;
    String.append(_:)(v10);
    *(_QWORD *)&v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
    v11._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0xD000000000000030;
    v12._object = (void *)0x800000021BE85620;
    String.append(_:)(v12);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = *(_BYTE *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v7 = Entity.subscript.getter((uint64_t *)&v36);
    outlined consume of ActionEntityResolution();
    if (v7)
    {
      if ((v6 & 1) == 0)
      {
LABEL_5:
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        v35 = &protocol witness table for SIMD3<A>;
        v8 = swift_allocObject();
        *(_QWORD *)&v33 = v8;
        *(_QWORD *)(v8 + 16) = v5;
        *(_QWORD *)(v8 + 24) = v4;
        outlined init with take of BindableDataInternal(&v33, (uint64_t)&v36);
        __swift_project_boxed_opaque_existential_1(&v36, v38);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloat3Value();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v17._countAndFlagsBits = 0x2072656C646E6148;
    v17._object = (void *)0xEC00000020726F66;
    String.append(_:)(v17);
    *(_QWORD *)&v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
    v18._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000003BLL;
    v19._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v19);
    REEntityGetName();
    v20._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 10535;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    specialized static AnimationLogger.logError(_:)(v36, *((_QWORD *)&v36 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v14 = SceneNullable;
  v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  v32 = v5;
  if (v15)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v14);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v22 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v22)
    {
      v23 = (*(uint64_t (**)(void))(v22 + 232))();
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain();
      MEMORY[0x22076D160](v24, 0);
      *(_QWORD *)(v23 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v23);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  v5 = v32;
  if ((v6 & 1) == 0)
    goto LABEL_5;
LABEL_23:
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v33 = v36;
  v25._countAndFlagsBits = 0x2072656C646E6148;
  v25._object = (void *)0xEC00000020726F66;
  String.append(_:)(v25);
  *(_QWORD *)&v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x800000021BE88170;
  v27._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v27);
  *(_QWORD *)&v36 = v5;
  *((_QWORD *)&v36 + 1) = v4;
  v37 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>?);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD000000000000031;
  v29._object = (void *)0x800000021BE881A0;
  String.append(_:)(v29);
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v3;
  v30._object = v2;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  specialized static AnimationLogger.logError(_:)(v33, *((_QWORD *)&v33 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x800000021BE85620;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v33 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if ((v5 & 1) == 0)
      {
LABEL_5:
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
        v32 = &protocol witness table for SIMD2<A>;
        *(_QWORD *)&v30 = v4;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloat2Value();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v12 = SceneNullable;
  v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_22;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v20 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v20)
    {
      v21 = (*(uint64_t (**)(void))(v20 + 232))();
      v22 = *(_QWORD *)(v21 + 16);
      swift_retain();
      MEMORY[0x22076D160](v22, 0);
      *(_QWORD *)(v21 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
LABEL_22:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_23:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v23._countAndFlagsBits = 0x2072656C646E6148;
    v23._object = (void *)0xEC00000020726F66;
    String.append(_:)(v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
    v24._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x800000021BE88170;
    v25._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v25);
    *(_QWORD *)&v30 = v4;
    BYTE8(v30) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>?);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000031;
    v27._object = (void *)0x800000021BE881A0;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v3;
    v28._object = v2;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 39;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x800000021BE85620;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v33 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if ((v5 & 1) == 0)
      {
LABEL_5:
        v31 = MEMORY[0x24BEE13C8];
        v32 = &protocol witness table for Double;
        *(_QWORD *)&v30 = v4;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddDoubleValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v12 = SceneNullable;
  v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_22;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v20 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v20)
    {
      v21 = (*(uint64_t (**)(void))(v20 + 232))();
      v22 = *(_QWORD *)(v21 + 16);
      swift_retain();
      MEMORY[0x22076D160](v22, 0);
      *(_QWORD *)(v21 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
LABEL_22:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_23:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v23._countAndFlagsBits = 0x2072656C646E6148;
    v23._object = (void *)0xEC00000020726F66;
    String.append(_:)(v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
    v24._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x800000021BE88170;
    v25._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v25);
    *(_QWORD *)&v30 = v4;
    BYTE8(v30) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000031;
    v27._object = (void *)0x800000021BE881A0;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v3;
    v28._object = v2;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 39;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x800000021BE85620;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 52);
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v33 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if ((v5 & 1) == 0)
      {
LABEL_5:
        v31 = MEMORY[0x24BEE14E8];
        v32 = &protocol witness table for Float;
        LODWORD(v30) = v4;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloatValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(_QWORD *)&v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  v12 = SceneNullable;
  v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_22;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v20 = specialized static Entity.entityInfoType(_:)();
    if (v20)
    {
      v21 = (*(uint64_t (**)(void))(v20 + 232))();
      v22 = *(_QWORD *)(v21 + 16);
      swift_retain();
      MEMORY[0x22076D160](v22, 0);
      *(_QWORD *)(v21 + 16) = EntityByName;
      MEMORY[0x22076D160](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
LABEL_22:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_23:
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v23._countAndFlagsBits = 0x2072656C646E6148;
    v23._object = (void *)0xEC00000020726F66;
    String.append(_:)(v23);
    DWORD1(v30) = (unint64_t)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>) >> 32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
    v24._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x800000021BE88170;
    v25._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v25);
    LODWORD(v30) = v4;
    BYTE4(v30) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000031;
    v27._object = (void *)0x800000021BE881A0;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v3;
    v28._object = v2;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 39;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_21BB6FE60()
{
  return swift_deallocObject();
}

uint64_t outlined copy of SetEntityPropertyAction<String>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    outlined copy of ActionEntityResolution();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of SetEntityPropertyAction<String>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    outlined consume of ActionEntityResolution();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<String>>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_21BB7185C()
{
  return swift_deallocObject();
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<simd_quatf>>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined release of ActionEvent<PlayAudioAction>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<Bool>>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined copy of FromToByAction<A>.TransformMode<A>(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xFCu)
    return outlined copy of ActionEntityResolution();
  return result;
}

uint64_t outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xFCu)
    return outlined consume of ActionEntityResolution();
  return result;
}

uint64_t outlined copy of FromToByAction<BlendShapeWeights>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of FromToByAction<A>.TransformMode<A>(a8, a9, a10);
  }
  return result;
}

uint64_t outlined consume of FromToByAction<BlendShapeWeights>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a8, a9, a10);
  }
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<BlendShapeWeights>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t _s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 240);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t outlined copy of FromToByAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31)
{
  uint64_t result;

  if (a31 != 1)
    return outlined copy of FromToByAction<A>.TransformMode<A>(a28, a29, a30);
  return result;
}

uint64_t outlined retain of FromToByAction<Transform>?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248));
  return a1;
}

uint64_t outlined consume of FromToByAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31)
{
  uint64_t result;

  if (a31 != 1)
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a28, a29, a30);
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<Transform>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 240);
  v4 = *(_BYTE *)(a1 + 248);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

double _s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[14] = 0u;
  a1[15] = xmmword_21BE41200;
  return result;
}

uint64_t outlined retain of FromToByAction<Transform>(uint64_t a1)
{
  outlined copy of FromToByAction<A>.TransformMode<A>(*(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_BYTE *)(a1 + 232));
  return a1;
}

uint64_t sub_21BB73E90()
{
  return swift_deallocObject();
}

double simd_matrix4x4(float32x4_t a1)
{
  float v10;
  double v11;

  _S3 = a1.i32[1];
  _S5 = a1.i32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = a1.i32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  v10 = vmlas_n_f32(vmuls_lane_f32(a1.f32[2], a1, 3), a1.f32[1], a1.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

uint64_t _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 144);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t outlined copy of FromToByAction<simd_quatf>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  uint64_t result;

  if (a19 != 1)
    return outlined copy of FromToByAction<A>.TransformMode<A>(a16, a17, a18);
  return result;
}

uint64_t outlined consume of FromToByAction<simd_quatf>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  uint64_t result;

  if (a19 != 1)
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a16, a17, a18);
  return result;
}

double _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[8] = 0u;
  a1[9] = xmmword_21BE41200;
  return result;
}

uint64_t outlined retain of FromToByAction<simd_quatf>(uint64_t a1)
{
  outlined copy of FromToByAction<A>.TransformMode<A>(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  return a1;
}

uint64_t sub_21BB74034()
{
  return swift_deallocObject();
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vmulq_f32(a1, a2);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i32[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

uint64_t outlined release of ActionEvent<FromToByAction<simd_quatf>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(a1 + 152);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined copy of FromToByAction<Double>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t result;

  if (a13 != 1)
    return outlined copy of FromToByAction<A>.TransformMode<A>(a10, a11, a12);
  return result;
}

uint64_t outlined consume of FromToByAction<Double>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t result;

  if (a13 != 1)
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a10, a11, a12);
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<SIMD2<Float>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_BYTE *)(a1 + 104);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined copy of FromToByAction<Float>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t result;

  if (a11 != 1)
    return outlined copy of FromToByAction<A>.TransformMode<A>(a8, a9, a10);
  return result;
}

uint64_t outlined consume of FromToByAction<Float>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t result;

  if (a11 != 1)
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a8, a9, a10);
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<Float>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t _s17RealityFoundation15BillboardActionVSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 116);
  if (v1 > 0xA)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double _s17RealityFoundation15BillboardActionVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 0xFF00000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 149) = 0u;
  return result;
}

uint64_t sub_21BB74468()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type BillboardAction and conformance BillboardAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction;
  if (!lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction, &type metadata for BillboardAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction;
  if (!lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction, &type metadata for BillboardAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction);
  }
  return result;
}

uint64_t outlined release of ActionEvent<SpinAction>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SpinAction and conformance SpinAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpinAction and conformance SpinAction;
  if (!lazy protocol witness table cache variable for type SpinAction and conformance SpinAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpinAction, &type metadata for SpinAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction and conformance SpinAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpinAction and conformance SpinAction;
  if (!lazy protocol witness table cache variable for type SpinAction and conformance SpinAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SpinAction, &type metadata for SpinAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction and conformance SpinAction);
  }
  return result;
}

uint64_t outlined copy of OrbitEntityAction?(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 != -1)
    return outlined copy of ActionEntityResolution();
  return result;
}

uint64_t outlined consume of OrbitEntityAction?(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 != -1)
    return outlined consume of ActionEntityResolution();
  return result;
}

uint64_t _s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_21BB74654()
{
  swift_release();
  return swift_deallocObject();
}

double _s17RealityFoundation24OrbitEntityActionHandlerVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t *outlined release of OrbitEntityActionHandler?(uint64_t *a1)
{
  outlined consume of __ImageBasedLightComponent?(*a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type OrbitEntityAction and conformance OrbitEntityAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrbitEntityAction, &type metadata for OrbitEntityAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for OrbitEntityAction, &type metadata for OrbitEntityAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImpulseAction and conformance ImpulseAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction;
  if (!lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImpulseAction, &type metadata for ImpulseAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction;
  if (!lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ImpulseAction, &type metadata for ImpulseAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction);
  }
  return result;
}

uint64_t outlined copy of SetEntityEnabledAction?(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 != -1)
    return outlined copy of ActionEntityResolution();
  return result;
}

uint64_t outlined consume of SetEntityEnabledAction?(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 != -1)
    return outlined consume of ActionEntityResolution();
  return result;
}

uint64_t outlined release of ActionEvent<SetEntityEnabledAction>(uint64_t a1)
{
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SetEntityEnabledAction and conformance SetEntityEnabledAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityEnabledAction, &type metadata for SetEntityEnabledAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityEnabledAction, &type metadata for SetEntityEnabledAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction);
  }
  return result;
}

uint64_t outlined copy of NotificationAction?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of NotificationAction?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ActionEvent<NotificationAction>(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type NotificationAction and conformance NotificationAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction;
  if (!lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NotificationAction, &type metadata for NotificationAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction;
  if (!lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NotificationAction, &type metadata for NotificationAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction);
  }
  return result;
}

uint64_t outlined copy of PlayAnimationAction?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return outlined copy of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined consume of PlayAnimationAction?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined release of ActionEvent<PlayAnimationAction>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of ActionEntityResolution();
  swift_release();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PlayAnimationAction and conformance PlayAnimationAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAnimationAction, &type metadata for PlayAnimationAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PlayAnimationAction, &type metadata for PlayAnimationAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction);
  }
  return result;
}

uint64_t outlined retain of REEventBus.DispatcherHandle(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v5 = 1.0 - a3;
  v6 = vsubq_f32(a1, a2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, a2);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * a3;
  if (v12 != 0.0)
    sinf(v12);
}

uint64_t outlined copy of FromToByAction<SIMD2<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  return outlined copy of FromToByAction<Double>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t outlined consume of FromToByAction<SIMD2<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  return outlined consume of FromToByAction<Double>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t outlined copy of FromToByAction<SIMD4<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  return outlined copy of FromToByAction<simd_quatf>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t outlined consume of FromToByAction<SIMD4<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  return outlined consume of FromToByAction<simd_quatf>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t OrbitAnimation.init(name:duration:axis:startTransform:spinClockwise:orientToPath:rotationCount:bindTarget:blendLayer:repeatMode:fillMode:isAdditive:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, float a15@<S5>, double a16@<D6>, double a17@<D7>, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,float a25)
{
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v48[2];
  char v49;
  char v50;
  char v51;
  char v52;
  char v53[8];
  _OWORD v54[9];
  uint64_t v55;
  char v56[10];

  v32 = *a5;
  v33 = a5[1];
  v34 = *((_BYTE *)a5 + 16);
  v35 = *a7;
  v36 = *a8;
  v48[0] = 0;
  v48[1] = 0;
  v49 = -1;
  v56[0] = v35;
  v53[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a1, a2, v48, 0, v56, v53, a19, a20 & 1, (uint64_t)v54, a16, a17, a25, a21, a22 & 1, a23, a24 & 1);
  type metadata accessor for TimelineDefinition();
  v37 = swift_allocObject();
  v38 = v54[7];
  *(_OWORD *)(a9 + 152) = v54[6];
  *(_OWORD *)(a9 + 168) = v38;
  *(_OWORD *)(a9 + 184) = v54[8];
  v39 = v54[3];
  *(_OWORD *)(a9 + 88) = v54[2];
  *(_OWORD *)(a9 + 104) = v39;
  v40 = v54[5];
  *(_OWORD *)(a9 + 120) = v54[4];
  *(_OWORD *)(a9 + 136) = v40;
  v41 = v54[1];
  *(_OWORD *)(a9 + 56) = v54[0];
  *(_QWORD *)(v37 + 16) = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v32;
  *(_QWORD *)(a9 + 24) = v33;
  *(_BYTE *)(a9 + 32) = v34;
  *(_DWORD *)(a9 + 36) = a6;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 41) = v36;
  *(_BYTE *)(a9 + 42) = 0;
  *(_BYTE *)(a9 + 43) = a18;
  *(_QWORD *)(a9 + 48) = v37;
  *(_QWORD *)(a9 + 200) = v55;
  *(_OWORD *)(a9 + 72) = v41;
  *(double *)(a9 + 208) = a10;
  *(_BYTE *)(a9 + 216) = 0;
  *(__n128 *)(a9 + 224) = a11;
  *(_BYTE *)(a9 + 240) = v52;
  *(__n128 *)(a9 + 256) = a12;
  *(__n128 *)(a9 + 272) = a13;
  *(__n128 *)(a9 + 288) = a14;
  *(_BYTE *)(a9 + 304) = v51;
  *(_BYTE *)(a9 + 305) = a3;
  *(_BYTE *)(a9 + 306) = a4;
  *(float *)(a9 + 308) = a15;
  *(_BYTE *)(a9 + 312) = v50;
  return swift_bridgeObjectRetain();
}

uint64_t OrbitAnimation.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  if (*(_QWORD *)(v0 + 8))
  {
    v4 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path getter for OrbitAnimation.name : OrbitAnimation@<X0>(void *__src@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  _QWORD v10[40];

  memcpy(v10, __src, 0x139uLL);
  v4 = v10[1];
  v3 = v10[2];
  v5 = v10[3];
  v6 = v10[4];
  if (v10[1])
  {
    v7 = v10[0];
    outlined retain of OrbitAnimation((uint64_t)v10);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
  }
  else if (*(_QWORD *)(v10[6] + 16))
  {
    outlined retain of OrbitAnimation((uint64_t)v10);
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    RETimelineDefinitionGetName();
    v7 = String.init(cString:)();
    v4 = v8;
  }
  else
  {
    outlined retain of OrbitAnimation((uint64_t)v10);
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    v7 = 0;
    v4 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v3, v5, v6);
  swift_release();
  result = outlined release of OrbitAnimation((uint64_t)v10);
  *a2 = v7;
  a2[1] = v4;
  return result;
}

uint64_t OrbitAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrbitAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  if (v3)
  {
    v7 = *(_QWORD *)v1;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    v7 = String.init(cString:)();
    v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
    swift_retain();
    v7 = 0;
    v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return BlendTreeAnimation.name.modify;
}

uint64_t OrbitAnimation.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(unsigned int *)(v0 + 36);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t OrbitAnimation.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t *(*OrbitAnimation.blendLayer.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 36);
  }
  *v2 = v3;
  return BlendTreeAnimation.blendLayer.modify;
}

uint64_t OrbitAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

uint64_t key path setter for OrbitAnimation.bindTarget : OrbitAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of BindTarget(*(_QWORD *)a1, v4, v7);
  result = outlined consume of BindTarget?(v5, v6, v8);
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

uint64_t OrbitAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*OrbitAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  __int128 v12;
  char v13;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 48);
  if (v5 == 255)
  {
    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v7 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v7, v8, (uint64_t)&v12);
      swift_bridgeObjectRelease();
      v9 = v12;
      v10 = v13;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v10 = 0;
      v9 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v9;
    *(_BYTE *)(a1 + 16) = v10;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  swift_release();
  return OrbitAnimation.bindTarget.modify;
}

uint64_t OrbitAnimation.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_BYTE *)(v2 + 32);
  if ((a2 & 1) != 0)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v3;
    *(_BYTE *)(v2 + 32) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    result = outlined consume of BindTarget?(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v3;
    *(_BYTE *)(v2 + 32) = v5;
  }
  return result;
}

uint64_t OrbitAnimation.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *OrbitAnimation.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 41) = *result;
  return result;
}

unsigned __int8 *(*OrbitAnimation.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 41);
  }
  *v2 = v3;
  return BlendTreeAnimation.fillMode.modify;
}

uint64_t OrbitAnimation.additive.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 43);
  if (v1 != 2)
    return v1 & 1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  if (result)
    return RETimelineDefinitionIsAdditive();
  return result;
}

uint64_t OrbitAnimation.additive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

_BYTE *(*OrbitAnimation.additive.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    if (v4)
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *v2 = v4;
  return BlendTreeAnimation.isAdditive.modify;
}

uint64_t OrbitAnimation.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 168);
  v8[6] = *(_OWORD *)(v0 + 152);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v8[4] = *(_OWORD *)(v0 + 120);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t OrbitAnimation.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  *(_BYTE *)(v2 + 65) = 0;
  return result;
}

void (*OrbitAnimation.trimStart.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipStart;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(_QWORD *)(v1 + 200);
  v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 9) & 1) == 0)
  {
    v10 = *v3;
    v11 = v3[1] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (!ClipStart)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipStart;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return OrbitAnimation.trimStart.modify;
}

void OrbitAnimation.trimStart.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 64) = v3;
  free((void *)v1);
}

uint64_t OrbitAnimation.trimEnd.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 168);
  v14 = *(_OWORD *)(v0 + 152);
  v15 = v1;
  v16 = *(_OWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v2 = *(_OWORD *)(v0 + 104);
  v10 = *(_OWORD *)(v0 + 88);
  v11 = v2;
  v3 = *(_OWORD *)(v0 + 136);
  v12 = *(_OWORD *)(v0 + 120);
  v13 = v3;
  v4 = *(_OWORD *)(v0 + 72);
  v8 = *(_OWORD *)(v0 + 56);
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t OrbitAnimation.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  *(_BYTE *)(v2 + 81) = 0;
  return result;
}

void (*OrbitAnimation.trimEnd.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipEnd;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(_QWORD *)(v1 + 200);
  v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 25) & 1) == 0)
  {
    v10 = v3[2];
    v11 = v3[3] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (!ClipEnd)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipEnd;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return OrbitAnimation.trimEnd.modify;
}

void OrbitAnimation.trimEnd.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 72) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 80) = v3;
  free((void *)v1);
}

uint64_t OrbitAnimation.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *ClipDuration;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_OWORD *)(v0 + 88);
  v2 = *(_OWORD *)(v0 + 168);
  v14 = *(_OWORD *)(v0 + 152);
  v15 = v2;
  v16 = *(_OWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v3 = *(_OWORD *)(v0 + 104);
  v10 = v1;
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 136);
  v12 = *(_OWORD *)(v0 + 120);
  v13 = v4;
  v5 = *(_OWORD *)(v0 + 72);
  v9[0] = *(_OWORD *)(v0 + 56);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0)
    return v10;
  v6 = *(_QWORD *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t OrbitAnimation.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  *(_BYTE *)(v2 + 97) = 0;
  return result;
}

